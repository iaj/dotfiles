"" vim: set filetype=vim : ""
" noremap <D-i> :%s/^/> /<CR>:nohl<CR>gg
nnoremap <silent> <F2> :TlistToggle<CR>

" Make document a textobject - well not really working with registers so not
" a really good choice

"noremap dad ggdG " Get rid of that and use :%d instead..
"noremap yad ggyG
nnoremap vad ggVG
nnoremap =ad gg=G
nnoremap gqad gggqG

map <silent> <leader>d :bd<CR>
" Delete all buffers
" nmap <silent> ,da :exec "1," . bufnr('$') . "bd"<cr>

""" Abbreviations
cabbr %% <C-R>=expand('%:p:h')<CR>
cabbr jobs /Users/iaj/Documents/jobs/
cabbr stud /Users/iaj/Documents/studying/
cmap <C-\> <C-]>

map <leader>e :e <C-R>=expand("%:h")<cr>/

map <silent> <leader>d :bd<CR>

""" Plugin-related mappings
" CtrlP -- one awesome thing
map <silent> <leader>b :CtrlPBuffer<CR>
map <silent> <leader>r :CtrlPMRUFiles<CR>
map <silent> <leader>f :CtrlP<CR>
map <silent> <leader>gf :CtrlPCurFile<CR>
map <silent> <leader>F :ClearCtrlPCache<CR>
map <silent> <leader>gd :CtrlPCurWD<CR>
map <silent> \a :CtrlP 
map ,X :he XPTemplate<CR>

" Don't pollute my registers plz
nmap dD "_dd

nnoremap <C-w><C-w> <C-w>p
nnoremap <leader><space> :XPTreload<cr>
fun! WordUnderCursor() "{{{
    let substr = strpart(getline('.'), -1, col('.')+1)
    let substr = matchstr(substr, "[^ \t]*$")
    echmsg substr
endfunction "}}}
nnoremap \dg call WordUnderCursor()

" Searching
" Use very magic mode in order to use () instead of \(\) etc.
"nnoremap / /\v
"vnoremap / /\v
" nnoremap <tab> %
"vnoremap <tab> %
map <tab> %

" Pressing an 'enter visual mode' key while in visual mode changes mode.
vmap <C-V> <ESC>`<<C-v>`>
vmap V     <ESC>`<V`>
"vmap v     <ESC>`<v`>
vnoremap v <ESC>

nnoremap Q gq}

" Formatting, TextMate-style
map \q gqip
map \= =ap

" Faster scrolling
" nnoremap <C-e> 3<C-e>
" nnoremap <C-y> 3<C-y>

" Run Make with ctrl-m or ,m
map <silent> <C-m> :make<CR>

" Toggle absolute/relative linenumbering
nnoremap <silent> ,A :if &l:nu \| setl rnu \| else \| setl nu \| endif<CR>

""" Resizing Windows
" Mappings for fast resizing windows
" Use - and + to resize horizontal splits
map - <C-W>-
map + <C-W>+
" ...and for vsplits with alt-< or alt->
map <M-,> 3<C-W><
map <M-.> 3<C-W>>


map <silent> <leader>ms :messages<CR>
map <silent> <leader>sv :source $HOME/dotfiles/.vimrc<CR>
map <silent> <leader>sm :source /Users/iaj/dotfiles/.vim/personal/scripts/mappings<CR>
map <silent> <leader>sf :source %<CR>

" Highlights the current typed word (all occasions)
imap <F2> <esc>:let @/=expand("<cword>") \| set hls<cr>a

nnoremap <leader><leader> <c-^>
nnoremap \v <C-w><C-v><C-l>:e $MYVIMRC<cr>
map <silent> <leader>v :e ~/dotfiles/.vimrc<CR>
map <silent> <leader>z :e ~/dotfiles/.zshrc<CR>
nnoremap \z <C-w><C-v><C-l>:e ~/dotfiles/.zshrc<cr>
map <silent> <leader>M :e ~/dotfiles/.vim/personal/scripts/mappings<CR>
map <silent> <leader>p :e ~/.pentadactylrc<CR>

"cabbr js !js /Users/iaj/bin/js/runjslint.js "`cat %`" \| /Users/iaj/bin/python/format_lint_output.py

" Simply a MUST-have
cnoremap jk <C-c>
imap jk <Esc>

" Toggle wrapping with <leader>w
map <leader>w :set invwrap<cr>:set wrap?<cr>

""" Exhuberant Ctags settings
map <F9> :!/opt/local/bin/ctags --exclude=.svn --exclude=target -R .<CR>
map <Leader>ct :!/opt/local/bin/ctags --exclude=.svn --exclude=target -R .<CR>
"com! Tags '/Users/iaj/bin/ctags -R --language-force=java -f.tags /System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Classes'

" bachelor arbeit specific
"com! Tags '/Users/iaj/bin/ctags -R --language-force=java ~/Documents/workspace'

" Window movement-enhancements - making things easier!
" create a new vertical split window and switch over to it
nnoremap <leader>W <C-w>v<C-w>l
nnoremap <leader>H <C-w>s<C-w>j
" Close the window below this one
noremap <silent> <leader>cj :wincmd j<cr>:close<cr>
" Close the window above this one
noremap <silent> <leader>ck :wincmd k<cr>:close<cr>
" Close the window to the left of this one
noremap <silent> <leader>ch :wincmd h<cr>:close<cr>
" Close the window to the right of this one
noremap <silent> <leader>cl :wincmd l<cr>:close<cr>
" Close the current window
noremap <silent> <leader>cd :close<cr>
" Move the current window to the right of the main Vim window
noremap <silent> <leader>ml <C-W>L
" Move the current window to the top of the main Vim window
noremap <silent> <leader>mk <C-W>K
" Move the current window to the left of the main Vim window
noremap <silent> <leader>mh <C-W>H
" Move the current window to the bottom of the main Vim window
noremap <silent> <leader>mj <C-W>J

noremap <silent> <C-7> <C-W>>
noremap <silent> <C-8> <C-W>+
noremap <silent> <C-9> <C-W>+
noremap <silent> <C-0> <C-W>>

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Change directory to the current file dir
nnoremap <leader>D :lcd %:h<cr>:pwd<cr>
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

" Fuck you 2 manual key
nnoremap K <nop>

" Spellchecking
nmap <Leader>ss :set nospell<CR>
nmap <Leader>se :set spell spelllang=en<CR>
nmap <Leader>sd :set spell spelllang=de<CR>

" Return to visual mode after indenting
xmap < <gv
xmap > >gv

" awesome, inserts new line without going into insert mode
map <S-Enter> O<ESC>D
" hilight everything in visual mode that was just pasted!
nnoremap <Leader>V '[V']

"no comment lines - we just don't want them sumtimes
nmap go o<Esc>S
nmap gO O<Esc>S

"map <Leader> ss :set nospell!<CR>:set nospell?<CR>
nmap <Leader>ss :set nospell<CR>
nmap <Leader>se :set spell spelllang=en<CR>
nmap <Leader>sd :set spell spelllang=de<CR>

" Spelling
" Quickly add a new spelling abbreviation for the word under cursor to this file.
nmap <C-F6> :let tmp=@f<CR>"fyaw<Esc>:bot split ~/.vimrc<CR>G?LAST_SPELL<CR>zRkoiab<Space><Esc>"fp<Esc>:let @f=tmp<CR>a

" Y behaves like D rather than like dd
nnoremap Y y$

" Backspace should delete to the black hole register, not move left
nnoremap <BS> "_X

""" Remap command-line-editing keys
cnoremap <C-A>     <Home>
cnoremap <ESC>b    <S-Left>
cnoremap <ESC>f    <S-Right>
cnoremap <ESC><BS> <C-W>
cnoremap <C-E>      <End>
" cnoremap <C-F>      <Right>
cnoremap <C-N>      <End>
cnoremap <C-P>      <Up>
cnoremap <ESC>b     <S-Left>
cnoremap <ESC><C-B> <S-Left>
cnoremap <ESC>f     <S-Right>
cnoremap <ESC><C-F> <S-Right>
cnoremap <ESC><C-H> <C-W>
"cnoremap <C-B>      <Left>

" Extra functionality for some existing commands:
" <C-6> switches back to the alternate file and the correct column in the line.
nnoremap <C-6> <C-6>`"
" CTRL-g shows filename and buffer number, too.
nnoremap <C-g> 2<C-g>

" Make [[ and ]] work even if the { is not in the first column
nnoremap <silent> [[ :call search('^\S\@=.*{$', 'besW')<CR>
nnoremap <silent> ]] :call search('^\S\@=.*{$', 'esW')<CR>
onoremap <expr> [[ (search('^\S\@=.*{$', 'ebsW') && (setpos("''", getpos('.'))
            \ <bar><bar> 1) ? "''" : "\<ESC>")
onoremap <expr> ]] (search('^\S\@=.*{$', 'esW') && (setpos("''", getpos('.'))
            \ <bar><bar> 1) ? "''" : "\<ESC>")

" Execute current line
function! ExecuteLine()
    let save_reg = @@
    normal ^y$
    exe @@
    let @@ = save_reg
endfunction
nnoremap <silent> <leader>i :call ExecuteLine()<CR>

""" Warnings:
inoremap <Esc> <Esc>:echo "You should use Ctrl-[, or rather 'jk'"<CR>
"inoremap <BS> <Esc>:echo "You should use Ctrl-H"<CR>

" Learn your hjkl!
nmap <Left>     <Esc>:echo "You should have typed h instead"<CR>
nmap <Right>    <Esc>:echo "You should have typed l instead"<CR>
nmap <Up>       <Esc>:echo "You should have typed k instead"<CR>
nmap <Down>     <Esc>:echo "You should have typed j instead"<CR>

" Allocate colors with or without # respectively!
"nnoremap <leader>G :hi Normal guibg=#<c-r>=expand("<cword>")<cr><cr>
if has('gui')
    nnoremap <leader>G :hi Normal guibg=<c-r>=expand("<cword>")<cr><cr>
    " this one is specialized for molokai theme
    nnoremap <leader>U :hi Normal guifg=#F8F8F2 guibg=#272822<cr>
endif

nnoremap j gj
nnoremap k gk

" Add semicolon to the end of the line.
nnoremap <silent> <leader>; :call setline(line('.'), getline('.') . ';')<CR>

" Swap 2 words
nmap <silent> gw "_yiw:s/\(\%#\w\+\)\(\W\+\)\(\w\+\)/\3\2\1/<cr><c-o><c-l>

" omnicompletion like in several IDEs
inoremap <C-Space> <C-X><C-O>

"noremap <F3> :!sed -e (regex) && doxygen yourproject doc && zip -r release.zip doc src

" Ack
map <leader>a :Ack 

nnoremap \1 yypVr=

" Undo in insert mode                                           {{{2
" make it so that if I accidentally press ^W or ^U in insert mode,
" then <ESC>u will undo just the ^W/^U, and not the whole insert
" This is documented in :help ins-special-special, a few pages down
inoremap <C-W> <C-G>u<C-W>
inoremap <C-U> <C-G>u<C-U>

cmap w!! w !sudo tee % >/dev/null

"command wq w | bd


"inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
"inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
"             \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
"inoremap <expr> <M-,> pumvisible() ? '<C-n>' :
"\ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

" Folding
noremap <leader>0 :set fdl=0<CR>
noremap <leader>1 :set fdl=1<CR>
noremap <leader>2 :set fdl=2<CR>
" Best one, toggles folds with <Space>
nnoremap <silent> <Space> @=(foldlevel('.')?'za':'l')<CR>

" The following beast is something i didn't write... it will return the
" syntax highlighting group that the current "thing" under the cursor
" belongs to -- very useful for figuring out what to change as far as
" syntax highlighting goes.
nmap <silent> <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name")
            \ . '> trans<' . synIDattr(synID(line("."),col("."),0),"name")
            \ . "> lo<" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name")
            \ . ">"<CR>

" Fugitive
nmap \gs :Gstatus<cr>
nmap \gc :Gcommit<cr>
nmap \ga :Gwrite<cr>
nmap \gl :Glog<cr>
nmap \gd :Gdiff<cr>

" easy filetype switching ãƒ„
nnoremap \st :set ft=typoscript<CR>
nnoremap \sl :set ft=tex<CR>
nnoremap \sh :set ft=html<CR>
nnoremap \sc :set ft=css<CR>
nnoremap \sj :set ft=javascript<CR>
nnoremap \sp :set ft=php<CR>
nnoremap \sw :set ft=mail<CR>
nnoremap \sx :set ft=xml<CR>

command! W :w
" nnoremap <silent> \F :FufEditDataFile<CR>

" command-T configuration
" specified to RSpec
" let g:CommandTCursorStartMap='<leader>f'
" map <silent> <leader>f :CommandTFlush<cr>\|:CommandT<cr>
" map <silent> <leader>gf :CommandTFlush<cr>\|:CommandT %%<cr>
" map <silent> <leader>F :CommandTFlush<cr>\|:CommandT %%<cr>
" map <silent> <leader>b :CommandTBuffer<CR>
" map <leader>gv :CommandTFlush<cr>\|:CommandT app/views<cr>
" map <leader>gc :CommandTFlush<cr>\|:CommandT app/controllers<cr>
" map <leader>gm :CommandTFlush<cr>\|:CommandT app/models<cr>
" map <leader>gh :CommandTFlush<cr>\|:CommandT app/helpers<cr>
" map <leader>gl :CommandTFlush<cr>\|:CommandT lib<cr>
" map <leader>gp :CommandTFlush<cr>\|:CommandT public<cr>
" map <leader>gs :CommandTFlush<cr>\|:CommandT public/stylesheets/sass<cr>
" map <leader>gf :CommandTFlush<cr>\|:CommandT features<cr>
" map <leader>gg :topleft 100 :split Gemfile<cr>
" map <leader>f :CommandTFlush<cr>\|:CommandT<cr>

" vim-fuzzee
" nnoremap <Leader>f :F<Space>
" nnoremap <Leader>t :F */
" cnoremap ,pj  <S-Left>public/javascripts/<End><C-z>
" cnoremap ,,pj public/javascripts/<C-z>

"removes superfluous blank lines..
map \L :g/^\s*\n\s*$/d<CR>

" Map ,e and ,v to open files in the same directory as the current file
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>e :edit %%
"map <leader>v :view %%

""" Userdefined commands
command! KillWhitespace :normal :%s/ *$//g<cr><c-o><cr>
command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
            \ | wincmd p | diffthis

" Clear the search buffer when hitting return
" ... or <C-L> in insert mode
nnoremap <CR> :nohlsearch<cr>
inoremap <C-L> <C-O>:nohls<CR>

" Unfortunately this baby only works on MacVim
" No matter where the cursor insert and edit a new line below.
inoremap <c-cr> <esc>A<cr>


" Search the current file for what's currently in the search register and display matches
nmap <silent> _gs :vimgrep /<C-r>// %<CR>:ccl<CR>:cwin<CR><C-W>J:nohls<CR>

" Search the current file for the word under the cursor and display matches
nmap <silent> _gw :vimgrep /<C-r><C-w>/ %<CR>:ccl<CR>:cwin<CR><C-W>J:nohls<CR>
" Search the current file for the WORD under the cursor and display matches
nmap <silent> _gW :vimgrep /<C-r><C-a>/ %<CR>:ccl<CR>:cwin<CR><C-W>J:nohls<CR>

" Shrink the current window to fit the number of lines in the buffer.  Useful
" for those buffers that are only a few lines
nmap <silent> ,sw :execute ":resize " . line('$')<cr>

nnoremap <leader>s<Space> :%s//g<left><left>

" gary bernhardts stuff for window management
" nnoremap <c-n> :let &wh = (&wh == 999 ? 10 : 999)<CR><C-W>=
" concentrate on the current fold and close all them others
nnoremap <leader>Z zMzv

set pastetoggle=<F11>
noremap \ft :exec 'e ~/.vim/after/ftplugin/'.&filetype.'.vim'<cr>
noremap \fs :exec 'e ~/.vim/syntax/'.&filetype.'.vim'<cr>
noremap \fx :exec 'e ~/.vim/xpt-personal/ftplugin/'.&filetype.'/'.&filetype.'.xpt.vim'<cr>
