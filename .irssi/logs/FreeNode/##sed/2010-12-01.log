--- Log opened Wed Dec 01 00:00:29 2010
--- Day changed Wed Dec 01 2010
00:00  Riviera: Enchilada: that's not the right question IMHO.
00:00  Riviera: Enchilada: because:
00:00  Riviera: Enchilada: the tool that allows you to do this quickly is most likely a tool quite specifically optimised for tasks like these.
00:01  Riviera: Enchilada: so, in being able to use this particular tool, you already have to know this particular tool.
00:01  Enchilada: well, i'm talking about which among the most known ones
00:01  Riviera: Enchilada: an (IMHO) slightly better question could be which tools allow to solve tasks like these easily
00:01  Enchilada: would sed/awk help here? heck, i don't even know what they do
00:01  Enchilada: yeah
00:02  Enchilada: that's a better question
00:02  StrikerST: man sed
00:02  Enchilada: what's the answer for it? :)
00:02  Riviera: Enchilada: wait, first let me try to explain why this really is the better question :P
00:02  Riviera: Enchilada: tools like these would be more general, you would maybe need a bit more time to achieve some goal,
00:03  Riviera: Enchilada: but you always would have something useful, no matter what tasks you'd face
00:03  Riviera: Enchilada: so, the answer is: tools that are less specific than tools optimised for only particular problems
00:03  Riviera: Enchilada: these tools are general purpose scripting languages
00:03  Riviera: Enchilada: that is, things like python, perl, ruby, instead of sed and awk.
00:04  Riviera: Enchilada: if one knows sed and awk, superb, they help to solve specific tasks often extremely fast,
00:04  Riviera: Enchilada: but when they are the wrong tools, this knowledge is useless; not so with python,
00:04  Riviera: Enchilada: you might need a bit more time to achieve solutions, and a bit more characters to write,
00:04  Riviera: Enchilada: but whatever problems you face, they can help.
00:04  Riviera: Enchilada: so, learn things like that first.
00:06  Enchilada: ok, it's been on my agenda to learn ruby anyway. so ruby would be a good thing to learn first?
00:06  Enchilada: i guess ruby has some csv stuff in it
00:06  Enchilada: and url reading stuff
00:06  Enchilada: so sed/awk have nothing to do with my problem?
00:07  Riviera: Enchilada: parsing csv is very complicated in sed and awk
00:07  Riviera: Enchilada: that is because they don't come with csv parsers
00:07  Riviera: Enchilada: you'd need to either implement said parsers by yourself
00:07  Riviera: Enchilada: or decide that a subset of a csv parser would suffice for a particular task
00:08  Riviera: Enchilada: in these cases sed and awk (if one already knows them) can be extremely fast and powerful tools
00:08  Riviera: Enchilada: but, only for those. ruby surely brings libraries for csv parsing
00:11  Enchilada: ok, i see
00:11  Riviera: Enchilada: curl http://www.csidata.com/factsheets/inactive/nyse.txt | awk '{ print $(NF - 2) }' | sort -n
00:11  Enchilada: ruby it is then
00:11  Riviera: Enchilada: curl http://www.csidata.com/factsheets/inactive/nyse.txt | awk '{ print $(NF - 2) }' | sort -n | sed -n '1p; $p'
00:22  StrikerST: ok question
00:22  StrikerST: sed "/^www/!s_^_${prefix}_"  does this search for strings with www and prepend the $prefix?
00:22  Riviera: no
00:23  Enchilada: hmm
00:23  StrikerST: sorry let me rephrase Rivieria
00:23  Enchilada: Riviera: that gives me some error in the curl
00:23  StrikerST: search the stream
00:23  Enchilada: but anyway, thx for the tips
00:23  Riviera: StrikerST: that prepends lines that don't begin with "www" with the content of the shell variable "prefix"
00:23  Enchilada: it's time to learn a scripting language. ruby.
00:23  Riviera: Enchilada: hm.
00:23  StrikerST: oh it doesnt
00:23  Riviera: Enchilada: i did not actually try that command
00:23  StrikerST: so if I get rid of the ^ then it will search for lines that do begin?
00:23  Riviera: Enchilada: let me see
00:24  Riviera: StrikerST: no
00:24  StrikerST: =/
00:25  Riviera: Enchilada: had to modify it slightly:
00:25  Riviera: $ curl http://www.csidata.com/factsheets/inactive/nyse.txt 2> /dev/null | awk 'NF > 2 { print $(NF - 2) }' | sort -n
00:25  Riviera: 19620102
00:25  Riviera: 19700102
00:25  Riviera: 19700102
00:25  Riviera: [..]
00:25  Riviera: $ curl http://www.csidata.com/factsheets/inactive/nyse.txt 2> /dev/null | awk 'NF > 2 { print $(NF - 2) }' | sort -n | sed -n '1p; $p'
00:25  Riviera: York
00:25  Riviera: 20091204
00:25  Riviera: :)
00:26  Riviera: Well, the York is certainly not what you wanted :)
00:26  Enchilada: hehe. wow, sweet. looks like sed/awk are powerful indeed! so I should learn them too, i guess..
00:26  Riviera: StrikerST: if you get rid of the ! then it will search for lines that do begin
00:26  StrikerST: k
00:27  Riviera: Enchilada: good luck :)
00:27  Enchilada: thank you sir
00:27  Riviera: :)
--- Log closed Wed Dec 01 01:15:19 2010
--- Log opened Wed Dec 01 01:15:40 2010
01:15 --- Users 87 nicks [0 ops, 0 halfops, 0 voices, 87 normal]
01:17 --- Channel ##sed was synced in 132 seconds
01:42  StrikerST: question how can I use sed to read a file containing X-Served-By: www143.flickr.mud.yahoo.com and then save www143.flickr.mud.yahoo.com to a string?
01:42  Riviera: "save to a string"?
01:43  Riviera: To store it in a shell variable?
01:43  StrikerST: yes
01:44  Riviera: I'll answer if you answer a question too.
01:44  StrikerST: sure
01:44  Riviera: var=$(sed '/X-Served-By: /!d;s///' file)
01:45  Riviera: Let's test it:
01:45  Riviera: 4# printf '%s\n' 'some line' 'X-Served-By: www143.flickr.mud.yahoo.com' 'another line' > file; cat file
01:45  shbot: Riviera: some line
01:45  shbot: Riviera: X-Served-By: www143.flickr.mud.yahoo.com
01:45  shbot: Riviera: another line
01:46  StrikerST: oh wow that was an easy one
01:46  Riviera: 4# printf '%s\n' 'some line' 'X-Served-By: www143.flickr.mud.yahoo.com' 'another line' > file; var=$(sed '/X-Served-By: /!d;s///' file); printf 'The content of the variable var is: %s\n' "$var"
01:46  shbot: Riviera: The content of the variable var is: www143.flickr.mud.yahoo.com
01:46  Riviera: So, yes, works.
01:46  Riviera: So,
01:46  Riviera: now that I answered, here's my question:
01:46  Riviera: Why do you want to use sed for that?
01:47  StrikerST: im trying to parse a 302 redirect
01:47  StrikerST: header
01:48  Riviera: Sorry; I meant "why?" not "what are you doing?"
01:49  StrikerST: oh why, im learning bash
01:49  StrikerST: and sed
01:51  Riviera: Oh, I see, my question was silly.
01:51  Riviera: What I rather meant was that:
01:51  StrikerST: yes?
01:51  Riviera: Why don't you ask like that:
01:51  StrikerST: oh i appologize I will in the future
01:52  Riviera: No!.
01:52  Riviera: Wait!
01:52  Riviera: :)
01:52  Riviera: Don't apologise.
01:52  Riviera: I ... am wondering, curious.
01:52  Riviera: Because I think you are doing it wrong.
01:52  Riviera: But first I'd like to understand :)
01:52  Riviera: So, my question should have been like that:
01:52  Riviera:  
01:53  Riviera: "I have a file containing the line "X-Served-By: www143.flickr.mud.yahoo.com", how can I store that "www143.flickr.mud.yahoo.com" thing into a shell variable?"
01:53  Riviera: Do you see the difference?
01:53  Riviera: You don't have any idea about the solution,
01:53  Riviera: but you already want to use sed in that.
01:53  Riviera: Why?
01:53  Riviera: That does not really make any sense to me.
01:54  Riviera: It feels similar to asking about how to write a book, but already assuming that it has to be written using, uhm, chapters or something.
01:54  Riviera: Okay, silly analogy :)
01:54  StrikerST: hehe
01:55  StrikerST: thanks for your help Riveria ill be around later
01:55  StrikerST: thank you
01:55  Riviera: well
01:55  Riviera: okay :)
--- Log closed Wed Dec 01 05:15:00 2010
--- Log opened Wed Dec 01 05:15:22 2010
05:15 --- Users 87 nicks [0 ops, 0 halfops, 0 voices, 87 normal]
05:17 --- Channel ##sed was synced in 132 seconds
05:42  TripMine: how do I add a : to the end of every line in a file.
05:43  TripMine: never mind
05:43  TripMine: I'm dumb
--- Log closed Wed Dec 01 08:03:39 2010
--- Log opened Wed Dec 01 08:03:58 2010
08:03 --- Users 85 nicks [0 ops, 0 halfops, 0 voices, 85 normal]
08:06 --- Channel ##sed was synced in 132 seconds
11:13  hemanth:  which is the most optimal way to extract text between two place holders?
11:16  hemanth: got it, hmm...
11:17  SiegeX: are the placeholders on separate lines?
11:20  hemanth: SiegeX, in few yes and not it others, sed -n i had tried, then learnt that it will only if in separate lines...
12:10  geirha: Let me guess, xml?
12:28  hemanth: geirha, no text :(
--- Log closed Wed Dec 01 12:32:10 2010
--- Log opened Wed Dec 01 12:32:29 2010
12:32 --- Users 87 nicks [0 ops, 0 halfops, 0 voices, 87 normal]
12:32 --- Server: [hubbard.freenode.net] [freenode-info] channel flooding and no channel staff around to help? Please check with freenode support: http://freenode.net/faq.shtml#gettinghelp
12:34 --- Channel ##sed was synced in 139 seconds
--- Log closed Wed Dec 01 13:56:45 2010
--- Log opened Wed Dec 01 13:57:38 2010
13:57 --- Users 88 nicks [0 ops, 0 halfops, 0 voices, 88 normal]
14:01 --- Channel ##sed was synced in 232 seconds
14:59  Synthead: how do I match something from the x'th to the y'th repetition?  Say I have .a.b.c.d.e.f.g.  and I want to match what's between the third and fourth repetition of '.'  How would I do this?
15:00  Synthead: oh, and the '.'s should be matched too, so I'm looking for '.c.'
15:10  waldner: if it's on the same line, you have to write the expression to pull it out
15:11  waldner: sed 's/^\..\{2\}\(\..\.\).*/\1/' etc.
15:19  Synthead: hmm
15:20  Synthead: what if you don't know the length or contents between the '.' delimiter?  say it's .www.ag..a.rtttttttttttt. for example
15:20  Synthead: and I want to match '.ag,'
15:20  Riviera: ".ag," or ".ag."?
15:21  Synthead: oops, thanks, '.ag.'
15:22  Riviera: \.[^.]*\.
15:25  geirha: 4# sed 's/\([^.]*\.\)\{3\}.*/.\1/' <<< .www.ag..a.rtttttttttttt.
15:25  shbot: geirha: .ag.
15:29  waldner: yes, of course you have to adapt that to your actual data
15:29  Synthead: right :D
15:29  Synthead: I'm working with this, thanks a ton!
15:32  Synthead: hmm, what if I want to match everything from <fax_entry> until </fax_entry> in the same fashion?
15:35  jsz`: Synthead, sed -n '/<fax_entry>.*<\/fax_entry>/p'
15:36  jsz`: Synthead, grep -o '<fax_entry>.*<\/fax_entry>'
15:37  Synthead: but in the same fashion, like, for example ...
15:37  Synthead: <fax_entry>abcdefg</fax_entry><fax_entry>hijklmnop</fax_entry>
15:38  geirha: That's much more difficult
15:38  Synthead: yeah :P
15:38  Synthead: I'm trying hard to work this out :)
15:38  Synthead: you guys are awesome
15:40  Synthead: I'm trying to get to the point where I can use sed with a bash variable in a for; do loop
15:41  Synthead: capture all the fax entries and throw them into indexes of an array
15:41  Synthead: I can handle that part but this is tricky!
15:43  jsz`: Synthead, like that? sed -n '/<fax_entry>/,/<\/fax_entry>/p'
15:47  geirha: Synthead: Should be easier to parse with bash than sed
15:48  geirha: Synthead: http://mywiki.wooledge.org/BashFAQ/100
15:50  jsz`: Synthead, sed 's/.*<fax_entry>\(.*\)<\/fax_entry>/\1/'
15:51  jsz`: hmm no
15:55  jsz`: 4# sed 's/<fax_entry>\(.*\)<\/fax_entry>/\1/;s/<\/fax_entry>.*>/\n/' <<< '<fax_entry>abcdefg</fax_entry><fax_entry>hijklmnop</fax_entry>'
15:55  shbot: jsz`: abcdefg
15:55  shbot: jsz`: hijklmnop
16:09  jsz`: 4# sed 's/<fax_entry>\(.*\)<\/fax_entry>/\1/; s/<\/fax_entry>//g;s/<fax_entry>/\n/g' <<< '<fax_entry>abcd</fax_entry><fax_entry>efgh</fax_entry><fax_entry>ijkl</fax_entry><fax_entry>mnop</fax_entry><fax_entry>qrst</fax_entry><fax_entry>uvwx<fax_entry>yz..</fax_entry>'
16:09  shbot: jsz`: abcd
16:09  shbot: jsz`: efgh
16:09  shbot: jsz`: etc... ( http://pastebin.com/tUbSuUpK )
17:08  jsz`: Synthead, you wanted to do that? http://pastebin.com/dCqwqxQV
17:15  Riviera: wc -w <<< $(echo $words)
17:15  Riviera: ==> wc -w <<< $(echo "$words")
17:15  Riviera: ==> wc -w <<< "$words"
17:16  Riviera: is all that code only to store the words into an array?
17:16  jsz`: Riviera, yep i hesitated
17:17  Riviera: set -f; words=( $(sed ...) )
17:17  Riviera: done
17:17  jsz`: Riviera, don't know, I think it's what he wanted
17:17  jsz`: Riviera, but the words will be considered as one, no?
17:18  Synthead: I ended up just going with a loop anyway :)
17:18  Synthead:  xmli=-1
17:18  Synthead:  while read line; do
17:18  Synthead:   [[ $line = "<fax_entry>" ]] && ((xmli++))
17:18  Synthead:   (( xmli >= 0 )) && xml[$xmli]+="$line"$'\n'
17:18  Synthead:  done < <(curl -su "$USER":"$PASS" "$URL/ffws/v1/ofax")
17:19  Synthead: I really appreciate all the help
17:29  Riviera: jsz`: no;
17:29  Riviera: 4# sed 's/.*/&/' <<< 'one two three'
17:29  shbot: Riviera: one two three
17:30  Riviera: 4# set -f; array=( $(sed 's/.*/&/' <<< 'one two three') ); echo "${array[1]}"
17:30  asasfas: Riviera!
17:30  shbot: Riviera: two
17:30  Riviera: 4# set -f; array=( $(sed 's/.*/&/' <<< 'one two three') ); echo "${array[2]}"
17:30  shbot: Riviera: three
17:30  Riviera: jsz :)
17:30  jsz`: oh
17:30  asasfas: riviera you gots a minute?
17:30  jsz`: I thought it had to have a 0 element
17:31  Riviera: asasfas: sure, but maybe not a solution; what's the problem? :)
17:31  Riviera: jsz`: but it does
17:31  Riviera: 4# set -f; array=( $(sed 's/.*/&/' <<< 'one two three') ); echo "${array[0]}"
17:31  shbot: Riviera: one
17:31  asasfas: i have 2 urls http://www.kernelsec.org and http:sandhu.html
17:32  asasfas: i want to change http:sandhu.html to http://www.kernelsec.org/sandhu.html
17:32  Riviera: where do you have these urls?
17:32  asasfas: but i get confused bcause if it just searches for http: it wont work
17:32  Synthead: 4# a=(p o); for b in 0 1 1 0; do printf "${a[$b]}"; done
17:32  shbot: Synthead: poop
17:32  jsz`: 4# i='this is a test'; array=( $(echo "$i") ); echo "${array[0]}"
17:32  shbot: jsz`: this
17:33  Synthead: 4# a=(a s); for b in 0 1 1; do printf "${a[$b]}"; done
17:33  shbot: Synthead: ass
17:33  jsz`: oh works there
17:33  Riviera: but understand why I used set -f.
17:33  Synthead: 4# a=(t c i h b); for b in 4 2 0 1 3; do printf "${a[$b]}"; done
17:33  shbot: Synthead: bitch
17:33  Riviera: 4# touch one two three; array=( $(echo 'one * three') ); echo "${array[*]}"
17:33  shbot: Riviera: one one three two three
17:34  Riviera: 4# set -f;  touch one two three; array=( $(echo 'one * three') ); echo "${array[*]}"
17:34  shbot: Riviera: one * three
17:34  jsz`: :o
17:34  Riviera: asasfas: where do you have these URLs, how do you have these URLs?
17:34  asasfas: i dunno i pulled them from a webpage
17:34  Riviera: asasfas: are there in files, are they in shell variables, are they separate lines, are the one the same line?
17:34  asasfas: there in a file line by line
17:35  Riviera: please show example data
17:35  Riviera: use a pastebin
17:35  asasfas: sec
17:35  Synthead: 4# a=(a s); for b in 0 $(for {0..20}; do printf 1; done); do printf "${a[$b]}"; done
17:35  jsz`: Riviera, doesn't work with zsh?
17:35  shbot: Synthead: bash4: `{0..20}': not a valid identifier
17:35  shbot: Synthead: a
17:36  Synthead: 4# a=(a s); for b in 0 $(for seq 0 20; do printf 1; done); do printf "${a[$b]}"; done
17:36  shbot: Synthead: bash4: command substitution: line 2: syntax error near unexpected token `0'
17:36  shbot: Synthead: bash4: command substitution: line 2: `for seq 0 20; do printf 1; done)'
17:36  Synthead: 4# a=(a s); for b in 0 $(for $(seq 0 20); do printf 1; done); do printf "${a[$b]}"; done
17:36  shbot: Synthead: bash4: `$(seq 0 20)': not a valid identifier
17:36  shbot: Synthead: a
17:36  Synthead: :(
17:36  Riviera: jsz`: yes, zsh does not perform word-splitting by default when expanding parameters.
17:36  asasfas: http://pastebin.com/4aczcdTQ
17:36  Synthead: 4# printf asssssssssssssss
17:36  shbot: Synthead: asssssssssssssss
17:36  Synthead: THERE
17:37  Synthead: k I'm done being stupid
17:37  Riviera: asasfas: okay, thanks
17:37  jsz`: Riviera, well I did the loop for nothing :D
17:38  asasfas: k
17:38  Riviera: jsz`: yes, that's true
17:38  Riviera: asasfas: how should the output look like then,
17:38  Riviera: sec
17:39  asasfas: like this
17:40  asasfas: http://pastebin.com/VX6W6BSM
17:42  jsz`: why does a=(t c i h b); for b in 4 2 0 1 3; do printf "${a[$b]}"; done doesn't work in zsh?
17:42  jsz`: it needs set -f right?
17:44  asasfas: k
17:52  asasfas: no yes no?
17:58  asasfas: i guess not =(
17:59  jsz`: 4# url='http://www.kernelSec.org/'; sed "s#.*:\([^ ]*\).*#$url\1#" <<< 'http:bernsteindnsdefense.html'
17:59  shbot: jsz`: http://www.kernelSec.org/bernsteindnsdefense.html
18:00  asasfas: sweet thanks!
18:03  Riviera: sorry, need to leave, laters.
18:11  asasfas: wait
18:12  asasfas: can i just use 'http:' because there are other links with just files
18:13  asasfas: no i cant
18:13  asasfas: fuck
18:13  dtolj: How can I match the last instance of a string, I am trying to select the last kernel line entry from menu.lst file
18:14  dtolj: Can I do that in sed?
18:15  asasfas: wait itd be this
18:17  dtolj: ok
18:20  asasfas: 4# url='http://www.blah.com/'; url2='http:booger.html'; echo $url2 | sed "s/http:^[A-z][0-9]/${url}
18:20  shbot: asasfas: Missing terminating quote, bracket or keyword
18:20  asasfas: 4# url='http://www.blah.com/'; url2='http:booger.html'; echo $url2 | sed "s/http:^[A-z][0-9]/${url}"
18:20  shbot: asasfas: sed: -e expression #1, char 26: unknown option to `s'
18:21  asasfas: 4# url='http://www.blah.com/'; url2='http:booger.html'; echo $url2 | sed -e "s/http:^[A-z][0-9]/${url}"
18:21  shbot: asasfas: sed: -e expression #1, char 26: unknown option to `s'
18:22  dtolj: what
18:22  asasfas: 4# url='http://www.blah.com/'; url2='http:booger.html'; echo $url2 | sed '/http:^[A-z][0-9]/s//${url2}/g'
18:22  shbot: asasfas: http:booger.html
18:23  asasfas: 4# url='http://www.blah.com/'; url2='http:booger.html'; echo $url2 | sed '/http:^[A-z][0-9]/s/http:/${url2}/g'
18:23  shbot: asasfas: http:booger.html
18:23  asasfas: wtf
18:24  dtolj: what do you expect as output?
18:24  asasfas: http://www.blah.com/booger.html
18:25  asasfas: trying to looking for a patter with http:^[A-z][0-9] then replace it with $url
18:26  SiegeX: dtolj: like this
18:26  SiegeX: 4# echo -e 'blah\nkernel: foo\nkernel: bar\nkernel: baz\nblah' | sed -n '/kernel/h; ${x;p}'
18:26  shbot: SiegeX: kernel: baz
18:27  dtolj: SiegeX: thanks
18:29  asasfas: 4# url='http://www.blah.com/'; url2='http:booger.html'; echo $url2 | sed '/http:[^A-z][^0-9]/s/http:/${url2}/g'
18:29  shbot: asasfas: http:booger.html
18:29  asasfas: 4# url='http://www.blah.com/'; url2='http:booger.html'; echo $url2 | sed "/http:[^A-z][^0-9]/s/http:/${url2}/g"
18:29  shbot: asasfas: http:booger.html
18:29  jsz`: asasfas, huh?
18:30  asasfas: i want to replace http: followed by a character or number with $url
18:32  jsz`: 4# url='http://www.blah.com/'; url2='http:booger.html'; echo $url2 | sed -r "/http:(([^A-z]*)|([^0-9]*))/ s#http:#${url2}#g"
18:32  shbot: jsz`: http:booger.htmlbooger.html
18:32  jsz`: hmm
18:34  asasfas: c4# url='http://www.blah.com/'; url2='http:booger.html'; echo $url2 | sed -r "/http:(([^A-z]*)|([^0-9]*))/s/${url2}/g"
18:34  asasfas: 4# url='http://www.blah.com/'; url2='http:booger.html'; echo $url2 | sed -r "/http:(([^A-z]*)|([^0-9]*))/s/${url2}/g"
18:34  shbot: asasfas: sed: -e expression #1, char 48: unterminated `s' command
18:34  asasfas: 4# url='http://www.blah.com/'; url2='http:booger.html'; echo $url2 | sed -r "/http:(([^A-z]*)|([^0-9]*))/${url2}/g"
18:34  shbot: asasfas: sed: -e expression #1, char 30: extra characters after command
18:35  jsz`: asasfas, give me an exmaple
18:35  jsz`: example*
18:35  asasfas: here
18:37  jsz`: oh
18:38  asasfas: http://pastebin.com/F9aG791W
18:39  asasfas: all lines that have http: not followed by a // ... http: needs to be replacd with http://www.kernelSec.org/
18:42  asasfas: 4# url='http://www.blah.com/'; url2='http:booger.html'; echo $url2 | sed -r "/http:(([^A-z]*)|([^0-9]*))/ s#http:#${url2}/g"
18:42  shbot: asasfas: sed: -e expression #1, char 55: unterminated `s' command
18:42  asasfas: 4# url='http://www.blah.com/'; url2='http:booger.html'; echo $url2 | sed -r "/http:(([^A-z]*)|([^0-9]*))/ s#http:#${url2}#g"
18:43  shbot: asasfas: http:booger.htmlbooger.html
18:44  asasfas: 4# url='http://www.blah.com/'; url2='http:booger.html'; echo $url2 | sed -r "/http:(([^A-z]*)|([^0-9]*))/ s$http:#${url2}#g"
18:44  shbot: asasfas: sed: -e expression #1, char 50: unterminated `s' command
18:47  asasfas: 4# url='http://www.blah.com/'; url2='http:booger.html'; echo $url2 | sed -r "s/^http:(([^A-z]*)|([^0-9]*))/${url}/g"
18:47  shbot: asasfas: sed: -e expression #1, char 37: unknown option to `s'
18:47  asasfas: 4# url='http://www.blah.com/'; url2='http:booger.html'; echo $url2 | sed -r 's/^http:(([^A-z]*)|([^0-9]*))/${url}/g'
18:47  shbot: asasfas: ${url}
18:48  asasfas: 4# url='http://www.blah.com/'; url2='http:booger.html'; echo $url2 | sed -r "/http:(([^A-z]*)|([^0-9]*))/ s#http:#${url}#g"
18:48  shbot: asasfas: http://www.blah.com/booger.html
18:48  asasfas: oh heh
--- Log closed Thu Dec 02 15:16:28 2010
