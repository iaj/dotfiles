--- Log opened Wed Jan 05 00:00:39 2011
--- Log closed Wed Jan 05 06:25:08 2011
--- Log opened Wed Jan 05 06:25:30 2011
06:25 --- Users 85 nicks [0 ops, 0 halfops, 0 voices, 85 normal]
06:27 --- Channel ##sed was synced in 100 seconds
--- Log closed Wed Jan 05 08:50:20 2011
--- Log opened Wed Jan 05 08:50:44 2011
08:50 --- Users 84 nicks [0 ops, 0 halfops, 0 voices, 84 normal]
08:52 --- Channel ##sed was synced in 96 seconds
10:58  dagon666: hello
10:58  dagon666: I observe problems with sed variables and extended regular expressions. I need to print one exact character inside the string. Im using command: sed -r 's/^.?/test/' - as long as it works and matches the character, then: sed -r 's/^\(.?\)/\1/' doesnt work. How to fix this ?
11:02  waldner: /^.?/ matches anything
11:03  dagon666: single any character, not anything
11:03  waldner: no, anything
11:03  waldner: the ? makes it optional, so it mateches just any line
11:04  dagon666: ok, then how to cut out a single character. I know only its position and the string before
11:07  waldner: you want to remove the first character of each line?
11:07  waldner: or only print it?
11:07  dagon666: No this was only simplified example. The line looks like: "blablabla=sdfg sdgsdf dfgs fdg". Im interested in "="
11:07  waldner: well, since it's a single character, "echo =" will do, won't it?
11:08  waldner: perhaps you should give more details
11:08  dagon666: yeah it would, but I dont know what exact character it will be placed there. thats why I want to find out
11:08  waldner: so: 10:08:01] <     waldner> | perhaps you should give more details
11:09  dagon666: the string before have constant width
11:09  waldner: do you want to print the caracater that follows a specific string?
11:09  dagon666: yes
11:09  waldner: is that string fixed?
11:09  dagon666: yes
11:09  waldner: ie, a constant value?
11:09  waldner: ok
11:10  waldner: sed 's/.*yourstring\(.\).*/\1/'
11:10  waldner: but that assumes that "yourstring" only appears once in the input line
11:11  dagon666: waldner that assumption is sufficient, .* can be replaced with ^ since "yourstring" will always appear at the begining
11:11  dagon666: I'll check that out
11:11  waldner: ok
11:11  waldner: yes if it's at the beginning you can replace the first .* with ^
11:12  dagon666: yeah, that works great, thanks :)
11:12  waldner: yw
17:36  SiegeX: 4# echo "23711184642,3583090366663629,0036f920012437d4" | sed -r 'h;s/^.*,..//;s/(.)(.)/\2\1/g;x;s/,[^,]*$/,/;G'
17:36  shbot: SiegeX: 23711184642,3583090366663629,
17:36  shbot: SiegeX: 639f021042734d
17:36  SiegeX: how do I get that output but without the newline
17:36  SiegeX: ?
17:37  SiegeX: basically remove the first two digits of the 3rd field (00) then swap each other digit in pairs in the 3rd field
17:38  SiegeX: first thing I do is make a copy to the hold space of the entire thing, leave just 3rd field without the first two zeros, do the pair swapping, swap pattern with hold space, remove the 3rd field, append hold to pattern
17:39  SiegeX: do I really need to add a 's/\n//` at the end of the script?
17:40  gnubien: SiegeX: var="1"; printf '%d' "$var"
17:40  gnubien: SiegeX: var="1"; printf '%s' "$var"
17:40  SiegeX: I'm losing you
17:41  gnubien: var="23711184642,3583090366663629,"; printf '%s' "$var"
17:42  SiegeX: I'm afraid you're going to have to be less cryptic on how that helps solve my problem
17:44  cthuluh: why isn't the s/\n// solution appropriate?
17:45  SiegeX: I just don't know if there was something wrong I was doing to get the newline there or perhaps going about it the long way
17:45  SiegeX: if not, cool
17:46  cthuluh: maybe didn't I understand your algorithm, but the description for the G command is quite clear
17:47  cthuluh: oh, not in the GNU sed manpage, right
17:47  cthuluh:       [2addr]G  Append a newline character followed by the contents of the hold
17:47  cthuluh:                 space to the pattern space.
17:47  cthuluh: on my system
17:48  SiegeX: ok, that is more clear than mine. It just says append
17:48  SiegeX: but I guess just like N, it attaches the \n
17:48  SiegeX: I don't use G often.
17:48  cthuluh: very similar to the posix sed manpage
17:48  cthuluh:        [2addr]G
17:48  cthuluh:               Append to the pattern space a <newline> followed by the contents of the hold space.
17:48  SiegeX: are you on Linux or BSD?
--- Log closed Wed Jan 05 18:27:29 2011
--- Log opened Wed Jan 05 18:32:39 2011
18:32 --- Users 82 nicks [0 ops, 0 halfops, 0 voices, 82 normal]
18:34 --- Channel ##sed was synced in 98 seconds
--- Log closed Wed Jan 05 19:29:13 2011
--- Log opened Wed Jan 05 19:29:23 2011
19:29 --- Users 83 nicks [0 ops, 0 halfops, 0 voices, 83 normal]
--- Log closed Wed Jan 05 19:33:06 2011
