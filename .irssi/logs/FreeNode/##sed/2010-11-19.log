--- Log opened Fri Nov 19 09:59:40 2010
--- Log closed Fri Nov 19 10:04:41 2010
--- Log opened Fri Nov 19 10:04:51 2010
10:04 --- Users 93 nicks [0 ops, 0 halfops, 0 voices, 93 normal]
10:06 --- Channel ##sed was synced in 106 seconds
10:06  chalcedony: if i have a file with lines like: somedata nick (ident@hostcanbenumbersorletters.something) , and i want to filter it, so i get only hosts, am i in the right place?
--- Log closed Fri Nov 19 12:14:04 2010
--- Log opened Fri Nov 19 12:14:26 2010
12:14 --- Users 93 nicks [0 ops, 0 halfops, 0 voices, 93 normal]
12:16 --- Channel ##sed was synced in 105 seconds
--- Log closed Fri Nov 19 13:42:33 2010
--- Log opened Fri Nov 19 13:42:52 2010
13:42 --- Users 97 nicks [0 ops, 0 halfops, 0 voices, 97 normal]
13:44 --- Channel ##sed was synced in 110 seconds
--- Log closed Fri Nov 19 13:47:54 2010
--- Log opened Fri Nov 19 13:48:27 2010
13:48 --- Users 97 nicks [0 ops, 0 halfops, 0 voices, 97 normal]
13:50 --- Channel ##sed was synced in 94 seconds
15:26  stockholm: can i print the single octets of an IP address like this:
15:26  stockholm: | sed -e "s/\([0-9]{1-3}\)\.\([0-9]{1-3}\)\.\([0-9]{1-3}\)\.\([0-9]{1-3}\) filename memdisk/\1 \2 \3 \4/"
15:26  geirha: \{1,3\}
15:27  stockholm: ok
15:32  stockholm: geirha: can i write that nicer?
15:33  stockholm: err, it still does not work
15:33  stockholm: oh, it does, it was delayed, somehow
15:34  stockholm: i want to do this: tail -F /var/log/daemon.log | sed -e "s/\([0-9]\{1,3\}\)\.\([0-9]\{1,3\}\)\.\([0-9]\{1,3\}\)\.\([0-9]\{1,3\}\) filename memdisk/\1 \2 \3 \4/"
15:34  stockholm: but ditch all the non-matching lines.
15:35  stockholm: print only those that match
15:35  geirha: sed -n 's/.../.../p'
16:54  belak: I'm trying to remove part of a line from stdin and I've been trying to pipe it through sed, but sed s/Filename:\ pool\/main\/g\/google-// isn't working. I get sed: -e expression #1, char 24: unknown option to `s'
16:55  gnubien: belak: you want what is after the last / ?
16:56  belak: There's nothing there...
16:56  belak: I just want to remove Filename: pool/main/g/google- from the beginning of the lines
16:56  gnubien: belak: paste an example line of text you want to use sed on
16:56  belak: wget -qO- http://dl.google.com/linux/deb/dists/stable/main/binary-amd64/Packages|grep Filename
16:56  Riviera: 4# sed 's/Filename: pool\/main\/g\/google-//' <<< 'lalala Filename: pool/main/g/google-foobar'
16:56  shbot: Riviera: lalala foobar
16:57  Riviera: belak: That?
16:57  belak: Ah
16:57  belak: The quotes
16:57  belak: That was stupid
16:57  belak: I was bash escaping it, not in sed
16:58  Riviera: Also, you don't need the grep Filename:
16:58  Riviera: sed '/Filename/!d;s/Filename: pool\/main\/g\/google-//'
16:58  Riviera: Or just
16:58  Riviera: ah, no, nevermind. :)
16:59  belak: Ah, so I can do multiple commands with ;
16:59  belak: didn't know that
17:00  belak: sed '/Filename/!d;s/Filename: pool\/main\/g\/google-chrome-//;s/_amd64.deb//'
17:00  belak: Hehe
17:01  belak: What about this part, beta/google-chrome- which can be either beta stable or unstable?
17:02  Riviera: Depends, with GNU sed you can do \(beta\|unstable\)
17:02  Riviera: (the backslashes belong to the syntax, they are not escaping)
17:03  Riviera: But it's not portable among other versions of sed.
17:03  Riviera: There you'd for example have to use multiple commands.
17:03  Riviera: Also, using ; for separating commands does not work when labels are used.
17:04  Riviera: E. g., after a label following a branch command a semicolon will not work to separate commands.
17:04  belak: Labels?
17:04  Riviera: (An exception is GNU again.)
17:04  Riviera: Yes, like
17:04  belak: Well sed '/Filename/!d;s/Filename: pool\/main\/g\/google-chrome-\(beta\|unstable\|stable\)\/google-chrome-//;s/_amd64.deb//' works as painful as it is
17:04  Riviera: sed -e :label -e blabel
17:04  Riviera: Would be an infinite loop to label, with b being the branch command to label
17:05  Riviera: In GNU sed: sed ':label;blabel' does work, in other versions of sed it does not.
17:05  Riviera: belak: good.
17:06  belak: Thanks
17:07  belak: What does the /Filename/!d do?
17:07  belak: I mean, I know what it does
17:07  Riviera: Hm. But? :)
17:07  Riviera: Ah, you mean, how does it do what it does?
17:07  belak: How does it work? Yeah
17:08  Riviera: /Filename/! matches lines that don't contain the regular expression "Filename"
17:08  Riviera: d "deletes" them and starts with the next cycle, i. e. reading in the next line, if there is any.
17:08  belak: Ah
17:08  Riviera: So the following substitute (s) commands are only executed for lines that contain "Filename"
--- Log closed Fri Nov 19 19:02:21 2010
--- Log opened Fri Nov 19 19:03:14 2010
19:03 --- Users 97 nicks [0 ops, 0 halfops, 0 voices, 97 normal]
19:07 --- Channel ##sed was synced in 277 seconds
--- Log closed Fri Nov 19 19:35:50 2010
--- Log opened Fri Nov 19 19:38:05 2010
19:38 --- Users 99 nicks [0 ops, 0 halfops, 0 voices, 99 normal]
19:43 --- Channel ##sed was synced in 427 seconds
--- Log closed Fri Nov 19 20:37:13 2010
--- Log opened Fri Nov 19 20:42:42 2010
20:42 --- Users 98 nicks [0 ops, 0 halfops, 0 voices, 98 normal]
20:44 --- Channel ##sed was synced in 102 seconds
--- Log closed Fri Nov 19 21:12:58 2010
--- Log opened Fri Nov 19 21:14:23 2010
21:14 --- Users 100 nicks [0 ops, 0 halfops, 0 voices, 100 normal]
21:19 --- Channel ##sed was synced in 397 seconds
--- Log closed Fri Nov 19 22:14:07 2010
--- Log opened Fri Nov 19 22:14:32 2010
22:14 --- Users 101 nicks [0 ops, 0 halfops, 0 voices, 101 normal]
22:16 --- Channel ##sed was synced in 96 seconds
--- Log closed Sat Nov 20 13:48:31 2010
