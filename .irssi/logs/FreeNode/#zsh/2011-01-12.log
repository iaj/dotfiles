--- Log opened Wed Jan 12 00:03:35 2011
00:03 --- Users 164 nicks [0 ops, 0 halfops, 0 voices, 164 normal]
00:04 --- Channel #zsh was synced in 80 seconds
--- Log closed Wed Jan 12 00:58:15 2011
--- Log opened Wed Jan 12 01:03:39 2011
01:03 --- Users 160 nicks [0 ops, 0 halfops, 0 voices, 160 normal]
01:04 --- Channel #zsh was synced in 81 seconds
--- Log closed Wed Jan 12 02:58:20 2011
--- Log opened Wed Jan 12 03:03:46 2011
03:03 --- Users 157 nicks [0 ops, 0 halfops, 0 voices, 157 normal]
03:05 --- Channel #zsh was synced in 83 seconds
03:48  lucs: How does ZDOTDIR usually get initialized?
03:49  lucs: For example, if I have my .zprofile in ~/myzsh (weird, but just for the example), how can zsh find it at login time?
05:34  Arrowmaster: you have to set it somehow
05:35  Arrowmaster: i have a ~/.zshenv that does nothing but set ZDOTDIR
05:46  atpa8a: hello
05:46  atpa8a: is there a trick to exclude a command from history?
05:48  lucs: setopt hist_ignore_space  in your .zshrc for example, and then, when you precede a command with a space, it won't be written to the history file.
05:49  lucs: Arrowmaster: Ok, thanks.
05:49  atpa8a: lucs: that's interesting... testing
05:50  lucs: Interesting? It's super cool!
05:50  lucs: :)
05:50  atpa8a: i can do that just in the current shell, right?
05:50  atpa8a: :P
05:50  lucs: I think so. Maybe an expert can confirm.
05:50  atpa8a: works
05:51  atpa8a: tested
05:51  atpa8a: super cool!
05:51  lucs: :)
05:51  atpa8a: thanks a bunch
06:10  atpa8a: heh
06:10  atpa8a: and surely i forgot to type the space :P
06:10  atpa8a: how do i clean the history now?..
06:10  lucs: hunter2
06:10  lucs: Too late.
06:11  lucs: atpa8a: Should be possible to edit it, not sure exactly when though.
06:12  atpa8a: right...
06:12  atpa8a: just delete the history file and relogin, right?
06:13  lucs: Not sure. Might as well try.
06:13  lucs: Not sure when the history is saved and all that.
06:15  atpa8a: that worked
06:15  lucs: Ok.
06:15 * lucs takes a note.
--- Log closed Wed Jan 12 06:59:25 2011
--- Log opened Wed Jan 12 06:59:48 2011
06:59 --- Users 156 nicks [0 ops, 0 halfops, 0 voices, 156 normal]
07:00 --- Channel #zsh was synced in 78 seconds
--- Log closed Wed Jan 12 08:10:12 2011
--- Log opened Wed Jan 12 08:10:21 2011
08:10 --- Users 155 nicks [0 ops, 0 halfops, 0 voices, 155 normal]
08:11 --- Channel #zsh was synced in 82 seconds
08:13  benner: hi
10:42  blueyed: How do I get $@/$* (from a function) passed to "sh -c"?
10:43  blueyed: i.e. the following should print two lines: foo=("foo long" "bar") ; sh -c -- "printf '%s\n' ${foo[@]}"
10:46  Mikachu: it does print two lines
10:48  blueyed: ok, but not the right ones.. should be "foo long" and "bar", not "foo" and "long".
10:49  blueyed: I get all params through when using "*" instead of "@", but in three lines.
10:50  blueyed: Would be ok with "$*", but would like to understand the issue at hand and the difference between $* and $@ - I do not have my zsh book at hand currently, where I've read about it.
10:51  blueyed: the man page says $* is like $@, but apparently they differ in splitting?!
10:54  Mikachu: you're trying to do something very complicated though
10:54  Mikachu: the string needs to be double escaped since sh has to parse it too
10:55  Mikachu: and you don't want @ since that'll create two separate arguments, and -c only takes one argument
10:57  Mikachu: ${(q)foo} is what you want, but it doesn't work inside ""
10:57  Mikachu: so i'm not sure what you can do
10:58  Mikachu: bar=${foo:gs/ /\\ /}
10:58  Mikachu: sh -c "printf '%s\n' $bar"
10:58  Mikachu: that appears to work
11:06  blueyed: cool, thanks. bar=${foo:q} appears to work also.
11:07  blueyed: But I am required to use a separate variable it seems. Not too bad though.
11:09  Mikachu: heh, interesting that foo:q and (q)foo behave differently
11:50  asyd: hmm in which file I can put an alias that will be read by /usr/bin/env ?
11:52  Mikachu: what?
11:52  asyd: hm forget
11:53  asyd: studip question
12:12 --- mren|off is now known as mren
13:42  tlonim: is there a way to detect in a non blocking way if there is a consumer on other side of a fifo ? one way I can think of is '<>' to the fifo than just '>'
13:46  tlonim: that should take care of non-blocking, however is there to test if consumer is active on other 
13:56  tlonim: also <> is failing for me for some reason
19:19 --- danielsh_ is now known as danielsh
19:30  benner: when i'm writing "history", i'm getting limited set (16) of last entries. is it possible to get much more whithout tiping history -1000 for example?
19:31  thrig: yes, see docs for history, fc commands.
19:31  thrig: or setup an alias, function, shell script, whatever
19:34  Chico: :)
22:26 --- Dynetrekk_ is now known as Dynetrekk
23:30 --- mren is now known as mren|off
23:45  deever: sorry for being off-topic, but anyone here knows how to do variable redirection in zsh as with $$indirect_var_name in f.e. PHP?
23:46  Mikachu: ${(P)foo}
23:46  deever: $foo='bar'; $foobar='foo'; echo $$foobar ---> prints "bar"
23:46  deever: ah, wait
23:46  derdon: deever: off-topic? not at all!
23:46  Mikachu: foo=bar
23:46  Mikachu: bar=baz
23:46  Mikachu: baz=quux
23:46  Mikachu: echo ${(P)foo}
23:47  Mikachu: echo ${(P)${(P)foo}}
23:49  deever: Mikachu: cool...thanks! :)
23:49  deever: do you know the bash and csh counterparts, by accident? ;)
23:50  Mikachu: i know bash has it, but i don't remember what it is
23:50  Mikachu: something like, but not necessarily, ${+foo}
23:50  Mikachu: oh, i am pretty sure it was !
--- Log closed Thu Jan 13 00:00:11 2011
