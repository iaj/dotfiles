--- Log opened Thu Jan 13 00:00:11 2011
00:03  deever: Mikachu: it's !
00:03  deever: is there also a csh (cripple shell) way to do it? :)
00:03  Mikachu: no idea
00:03  Mikachu: i've only heard of csh
00:12  thrig: I've used t?csh. In my defense, I was young at the time.
--- Log closed Thu Jan 13 01:28:20 2011
--- Log opened Thu Jan 13 01:33:41 2011
01:33 --- Users 159 nicks [0 ops, 0 halfops, 0 voices, 159 normal]
01:34 --- Channel #zsh was synced in 78 seconds
03:09 --- peth_ is now known as peth
03:49 --- jmad980 is now known as jnotsomad980
04:07 --- jnotsomad980 is now known as jmad980
06:40  mva: hi guys
06:48  mva: is it possible to check, if function//script get something via pipe without using "read"? :)
07:40 --- wuehlmau1 is now known as wuehlmaus
07:48 --- jmad980 is now known as jmad
--- Log closed Thu Jan 13 09:25:48 2011
--- Log opened Thu Jan 13 09:31:30 2011
09:31 --- Users 152 nicks [0 ops, 0 halfops, 0 voices, 152 normal]
09:32 --- Channel #zsh was synced in 82 seconds
09:44  codingrobot: whats the proper way of escaping (#i) in the command: rsync host:/storage/\*(#i)book\*" ./
09:45  codingrobot: extendedglob is set on both sides
11:03  cYmen: Does anybody know a tool that will help me clean up my harddisk by showing me a folder tree with sizes?
11:03  cYmen: I've been using 'du' so far but that's a bit annoying.
11:08  Mikachu: cYmen: kdirstat if you don't mind kde 3 dependencies
11:08  cYmen: Mikachu: Thanks.
11:26  tlonim: cYmen: there is ncdu 
11:27  cYmen: the naval combat demolitions unit? ;)
11:28  cYmen: tlonim: Thanks!
12:23 --- mren|off is now known as mren
13:08  pielgrzym: hi
13:08  pielgrzym: how can I set default umask for a user in zsh?
13:11  blueyed: pielgrzym: just set it in ~/.zshrc?
13:32  pielgrzym: blueyed: umask 026?
13:32  pielgrzym: blueyed: what does the fourth digit (N) in umask mean: umask N066?
13:32  asyd: 026 ? sounds trange
13:33  pielgrzym: asyd: I want 751 for each file
13:33  asyd: so you probably want 022
13:34  asyd: hmm
13:34  pielgrzym: asyd: 022 gives 755 
13:34  asyd: yeah, well
13:34  pielgrzym: asyd: I don't want other users to list my dirs :)
13:34  asyd: so why give the permission of execute ?
13:35  Mikachu: security through obscurity, if they know the path they can still read the files
13:35  pielgrzym: asyd: since some of the dirs inside I'd like to give rx so nginx could list em :)
13:35  asyd: so use a group?
13:35  pielgrzym: asyd: in /home/djangouser/app resides a python app. in /home/djangouser/app/media resides a media folder that should be visible to nginx and outside world
13:36  pielgrzym: asyd: I have a dozen of apps, each one has to be a separate user
13:36  asyd: yeah well, it's your choice. I just said it's quite strange, but whatever
13:36  asyd: yeah, that exactly why someone invents the concept of group
13:36  pielgrzym: asyd: and they actually shouldn't be able to access code of each other (even read)
13:36  blueyed: pielgrzym: there's nothing like "N", is there? See "man chmod"
13:37  pielgrzym: asyd: hmmm
13:37  pielgrzym: asyd: so 710? and chmod a user-dir user:djangogroup? and then the /home/djangouser/app/media will have 760?
13:37  pielgrzym: nice :)
13:39  pielgrzym: blueyed: here and there people refer to umask with trailing zero like 0022
13:39  blueyed: pielgrzym: affects the sticky bit then probably.
13:40  pielgrzym: blueyed: ah, right! :)
13:59  pielgrzym: can I set sticky bit for a directory so not only subdirs will inherit, say, group perms but files too?
14:00  cYmen: pielgrzym: Just to point it out: These are not zsh questions.
14:00  cYmen: Your last question also depends on the filesystem you're using.
14:01  pielgrzym: cYmen: ok, sorry :)
14:02  pielgrzym: I'll ask on distro related channel :) sorry for spamming :)
14:02  cYmen: It's not a problem you might just get more answers on a more frequented channel. :)
14:04  pielgrzym: :)
14:04  pielgrzym: I think I missunderstood sticky bit - what I need is some kind of permission inheritance :)
14:27  flazz: i'm using vi-mode, and when i hit escape there is a small delay is there a way to remove it?
14:31  Valodim: flazz: you probably have something bound to ESCx where x is any other key
14:32  flazz: is there a way to test this theory?
14:32  Valodim: bindkey
14:32  Valodim: or wait, does it even work like this in zsh? not sure, assuming from vim here
14:32  flazz: i am from vim
14:34  flazz: i have a bunch of things that start with "^[
14:34  Valodim: yeah that's normal those are the commands that work in vi mode.. sorry, don't know more about that :\
14:35  flazz: the delay is normal?
14:35  Valodim: no the commands that start with ^[
14:35  flazz: oh
14:35  Valodim: I have those too, but no delay
14:35  peth: it is if there a bindings starting with ^[. you can change KEYTIMEOUT though
14:36  peth: s/a/are/
14:36  Valodim: here's a tip: bindkey jj vi-cmd-mode
14:36  Valodim: hitting jj for normal mode. awesome. :)
14:37  flazz: peth: KEYTIMEOUT is 40, what are the implications of chaning this
14:37  flazz: Valodim: jj is fast
14:37  Valodim: and good for your pinky :)
14:38  peth: flazz: "The time the shell waits, in hundredths of seconds, for another key to be pressed when reading bound multi-character sequences."
14:39  flazz: so Valodims theory could be right, if all bindings that start with ^[ are gone then it wouldn't wait
14:39  peth: it may get you into meta-character trouble on very laggy systems, but i never had problems with setting it to 5 locally.
14:39  flazz: does this need to be exported or just set in .zshrc?
14:39  peth: right, that will mean not using arrow keys and home/end/shift-tab etc.
14:40  peth: because all of those traditionally start with ESC
14:40  peth: well, it's a zsh setting so only zsh needs to see it
14:41  flazz: even if i don't actually press escape
14:41  peth: yes. try cat and press a few special keys like the ones i mentioned earlier
14:41  peth: you'll see they all start with ^[
14:42  flazz: wow
14:42  flazz: right
14:42  flazz: KEYTIMEOUT=5 works great
14:42  flazz: thanks both of you
14:42  flazz: and i have jj set too
14:43  flazz: everyone keeps telling me i need to use jj for vim but i'm a bit scared of getting used to it
14:43  flazz: time is now i guess
14:43  Valodim: why scared?
14:43  Valodim: I type jj now and then in vanilla vim, but it doesn't happen often
14:44  peth: i find it a bit hackish, and it's still two keys where one should do, but that's just personal preference
14:47  flazz: 5 is a little to fast for jj to work :) oh well i'll figure it out
14:49  peth: yeah, you don't want it that low if you work with ambiguous bindings which i try to avoid
14:54  Mikachu: i like ctrl-3
15:34  iaj: jj was pretty nice but I think after a while CTRL-[ is faster..
16:45  blueyed: I have a problem where Ctrl-Up is recognized as Up only when using GNU screen. This is not zsh specific, but maybe you can help me to get this terminfo(?) right.
16:48  unixnuub: guys , got a question. I seriously think I'm going nuts
16:48  unixnuub: in zle ( vi mode ) 
16:48  unixnuub: I remember ( or perhaps I dreamed it ) 
16:49  unixnuub: that I could press esc and then V or suchlike 
16:49  unixnuub: vim would then pop up with the current line in it's buffer 
16:49  unixnuub: upon exit , the line contents would be replaced by vim's contents 
16:50  unixnuub: now did I just dream it or does that actually exist 
16:50  unixnuub: because I can't find any reference to it anywhere or documentation for that matter....
16:51  ft: use the `edit-command-line' widget. Which is user contributed, so you'll need to load it first.
16:52  ft: http://www.google.com/search?q=zle+%22edit-command-line%22
16:52  ft: in case you're unsure what to do.
16:53  blueyed: unixnuub: I have mapped it to esc-e here, very useful.
16:53 * ft too
16:54 * Mikachu has it on alt-o, not sure why
16:57  unixnuub: thanks guys 
16:57  unixnuub: just didn't know what it was referred to as, bash seems so long ago ;)
17:11  unixnuub: yeah, thx, mine is now 
17:12  unixnuub: bindkey -v
17:12  unixnuub: autoload -U edit-command-line
17:12  unixnuub: zle -N edit-command-line
17:12  unixnuub: bindkey '^E' edit-command-line
19:59  pattern: is it possible to type somthing like:   ABCD
20:00  pattern: where A is some character, B and D are some sort of matching delimiters like () or {}, and C is an arbitrary expression
20:00  pattern: and have a given program started, and given C on its stdin?
20:00  pattern: so.. for example, typing something like:   '(foo)
20:01  pattern: sound run a program named "bar" and pass "foo" in to bar's stdin
20:01  pattern: oops... sound=so
20:01  pattern: err... let me try that last line again:
20:02  pattern: and that would run a program named "bar" and pass "foo" in to bar's stdin
20:02  thrig: ' and () have special meaning to zsh.
20:03  pattern: well, the ' could be any other character
20:03 --- dive is now known as evildive
20:03  pattern: and i know that () have special meaning... but i was wondering if there was a way to turn that meaning off when zsh sees something like '( starting a command
20:03  thrig: have at the source code
20:04  pattern: hmm... oh well..
20:04  pattern: probably a much easier way to do this would be to simply to run "bar" and type what i need on its stdin
20:05  thrig: echo foo | bar
20:05  pattern: right... or something like that.. properly quoted..
20:07  thrig: or write a reverse xargs that parses $@, echos things to the command. ~3 line shell script.
20:08  pattern: yep... though all of these solutions require a different syntax
20:08  pattern: i was hoping for something as clean and simple as '(foo)
20:08  pattern: or even :(foo)
20:10  thrig: no they don't.  somescript somecmd 'somestdin' some other args
20:11  pattern: i meant they require a different syntax than simply typing '(foo)
20:11  thrig: well, if you have your heart set on that syntax, have at the source
20:11  pattern: right.. i hear you..
--- Log closed Fri Jan 14 08:48:30 2011
