--- Log opened Fri Dec 03 13:04:41 2010
--- Log closed Fri Dec 03 13:07:43 2010
--- Log opened Fri Dec 03 13:07:55 2010
13:07 --- Users 695 nicks [0 ops, 0 halfops, 9 voices, 686 normal]
13:09  Demonen: banisterfiend: Oh well, we all have our crosses to bear.
13:10  Demonen: Personally, I actually perfer Windows 7 for my desktop, but all my productive stuff is over SSH to a Linux server.
13:10 --- Channel #git was synced in 151 seconds
13:10  Demonen: Games, for example, is not Linux' strongest point.
13:10  workmad3: Demonen: depends on what you're looking for tbh...
13:11  workmad3: Demonen: I can find a lot of fun to play, free games for linux a lot easier (and safer) than on windows... but the AAA titles aren't on it admittedly
13:11  wereHamster: AAA !=(always) fun to play
13:12  workmad3: wereHamster: definitely agree... I haven't gotten a AAA game for years
13:12  workmad3: well, apart from feeding my yearly guitar hero addiction on the Wii...
13:13  banisterfiend: workmad3: my brother is the official in house counsel (patent law) for the company who makes the chip that drives guitar hero guitars
13:13  banisterfiend: (that was a mouthful)
13:13  workmad3: heh
13:14  banisterfiend: they're a dutch company, he's responsible for protecting them from evil american patent trolls
13:14  workmad3: so now I can say 'someone I know through IRC is the brother to the official in house counsel for the company who makes the chip that drives guitar hero guitars'...
13:14  banisterfiend: hehehe
13:14  workmad3: I probably won't though :P
13:14  wereHamster: workmad3: someone you know through irc *claimed to be* the brother ....
13:15  banisterfiend: fair enough, let's talk about git instead :)
13:15  workmad3: wereHamster: true... and makes it even more verbose :)
13:16  bluenovember: git-args hero? mmm
13:17  banisterfiend: im still confused why 'git checkout' checks out by default from index rather than HEAD
13:17  banisterfiend: anyone have an explanation?
13:17  banisterfiend: 'git checkout myfile' checks the file out from index, it's not equivalent to 'git checkout HEAD myfile' which i'd assumed it would be
13:20  banisterfiend: ??
13:20  banisterfiend: anyone?
13:20  wereHamster: what is there to answer.. ?
13:20  banisterfiend: what you think is the rationale to have it default to index rather than HEAD
13:21  banisterfiend: since most other commands default to HEAD
13:21  wereHamster: more common operation.. ?
13:21  workmad3: banisterfiend: how would you reference the index otherwise?
13:21  banisterfiend: workmad3: git checkout-index
13:21  banisterfiend: (that command exists)
13:22  wereHamster: that's plumbing..
13:22 --- ChanServ sets modes [#git +v ludde]
13:24 +ludde: http://ludde.dyndns.org/screencap/d701af8af967e191.png  <-- my git history looks like that, how would i rebase stuff so that it looks like i merged things only once?
13:24 +ludde: i.e. i would like to undo the merge at the bottom and just keep the one at the top
13:26  pasky: why?
13:26 +ludde: hi pasky :)
13:26  pasky: hi :-)
13:26 +ludde: i just want the history to look somewhat nicer
13:26 +ludde: how's things
13:27  pasky: but ain't this pretty? ;) and it's how it happenned too!
13:27  pasky: thanks, too much of 'em but fine overally, what about you?
13:27  banisterfiend: ludde:why dont you just rebase - i at the commit under the merge you want to remove and then just delete that merge from the the textfile that pops up?
13:28  banisterfiend: wha would happen if you tried that?
13:28  bluenovember: ludde once the remote branch "ludde..." has been merged into master, you could rebase the branch off master for further work. Then, changes would be fast forward
13:28 +ludde: pasky: pretty good.. working at spotify but it's not available in .cz yet
13:28  pasky: i think you should reconsider if this "nice" operation is really an actual improvement
13:29 +ludde: pasky: are you still involved in openttd?
13:29  bluenovember: pasky, it would avoid having repeatedly to resolve conflicts in subsequent merges, I suppose
13:29  wereHamster: git rerere
13:30  pasky: ludde: not really, moved on to many other things long ago... working on a go-playing program, maintaining glibc, running prague hackerspace and such :)
13:30  banisterfiend: wereHamster: cool what does that do
13:30 +ludde: pasky: do you live in prague?
13:30  banisterfiend: man git-rerere
13:30  jast: the 'git-rerere' manpage can be found at http://git.or.cz/man/git-rerere [automatic message]
13:30  pasky: ludde: yep
13:30 +ludde: pasky: i'd like to visit prague some time, maybe we can meet up :)
13:30  pasky: ludde: sure! just let me know when you're about to visit :)
13:30  wereHamster: me too
13:31 +ludde: hmm git rerere seems complicated
13:32 +ludde: hm, if you have branches B and C that both originate from A, and you cherry-pick a change from B into C, will you get a merge conflict next time you merge B into C?
13:39  angerman: I fail at .gitignore :( how do I tell git to ignore anything that's beyond the "build" folder. (also build folders in subdirectories)
13:39  selckin: echo build >> .gitignore || echo build >> .git/info/exclude
13:40  wereHamster: build/
13:40  angerman: wereHamster: doesn't that exclude build as well?
13:41  wereHamster: git only tracks files, so ...
13:42  piotr_: how do I get diff of specific rev against previous?
13:42  piotr_: only specifiying both hashes?
13:42  wereHamster: <sha>^!
13:42  piotr_: I'm trying git diff a1232f9 a1232f9^ |less
13:49  c00kiemon5ter: hi people, how do I find the root of my repo? If I have a struct like ../a/b/c and 'a' is the root (it has the .git folder there), but I'm on 'c' how I can find that the root is 'a' ?
13:50  pasky: ludde: usually, you will
13:50  pasky: ludde: or rather, you can - it depends on the change, whether any other commit touches that file, etc.
13:50  wereHamster: c00kiemon5ter: cd `git rev-parse --show-cdup`.
13:51 +ludde: okay
13:53  c00kiemon5ter: wereHamster: thanks
13:55 --- Unknown[OFF] is now known as Unknown[NF]
13:56  matthiaskrgr: hello
13:56  matthiaskrgr: in order to switch to a branch, do I use    git checkout *branchname*  ?
13:57  c00kiemon5ter: yep
13:57  wereHamster: matthiaskrgr: is that what the tutorial you read is saying?
13:57  angerman: confused again :(
13:57  angerman: So I created a bare git repository and cloned it.
13:57  matthiaskrgr: wereHamster: "git checkout [-q] [-f] [-m] [<branch>] "
13:58  angerman: Created some data, and commited it. Now when I try to push it tells me i should specify a branch.
13:58  wereHamster: matthiaskrgr: thats the synopsis of the command, not a tutorial
13:58  angerman: if I specify master, it tells me: remote end hung up unexpectedly…?
13:58  matthiaskrgr: wereHamster: than I read no tutorial?
13:58  wereHamster: angerman: git push <repo> <branch>
13:59  angerman: ohh so that creates a new branch… interesting.
13:59  angerman: I was having <repo>/<branch> and that failed … ouch.
14:03  matthiaskrgr: ok, thanks =) git is awesome :D
14:04  matthiaskrgr: I wish I'd have never touched svn :)
14:05 --- ChanServ sets modes [#git +v chrismcintosh]
14:15  npmap: Hello.
14:16 +chrismcintosh: oi
14:17  npmap: Is there some less complicated method to find out in which revision(s) a file was identical to a file outside the repo ?
14:17 +chrismcintosh: maybe what way are you currently using?
14:18  jast: not really. you cannot look up commits by contained blob object.
14:18  wereHamster: the only method is: iterate over all revisions and compare blob sha1
14:18  jast: yeah, what he said
14:18  npmap: I see.
14:26 --- ChanServ sets modes [#git +v myme]
14:26 +myme: I'm having some issues with git svn fetch: http://pastebin.com/Vb4GAKgV -- I managed to fuck up the initial creation of the tag dexter-17, by accidentally only svn cp-ing ./lib. I then deleted the tag, svn rm, and recreated it with a proper copy.
14:27  ponto: Hi, how can find out into which branch a commit originally was made?
14:28  wereHamster: ponto: you don't
14:28  ponto: urgh.
14:29 +myme: I don't really care much about having the tag in git though, so I was wondering if there was a way to perhaps skip following that branching from git.
14:29 +myme: If that would be the easiest solution.
14:43  jeeger: Greetings! I have a hard time cloning from an svn https:// repository... The clone takes veeeery long (that emulation of svn is great!), and after that I get an error message "SSL handshake failed: Secure connection truncated". A checkout with SVN works fine though. What could be the problem? (git 1.7.1, svn 1.6.12)
14:47  hal: would someone help me to understand these whitespace errors please?  http://hals-paste.pastebin.com/U3zR39W2
14:47  hal: what do they mean, and is it a serious problem?
14:48  cizra: Hi there. How's Git support on Windwoes? Last I checked it had problems with newlines, but that was over a year ago.
14:49  wereHamster: hal: don't work as root...
14:49  parasti: hal: you have a conflict, and it probably has nothing to do with the trailing whitespace spam
14:50  hal: wereHamster: I don't usually
14:50  hal: wereHamster: what are your reasons out of interest?
14:50 --- dwmw2_gone is now known as dwmw2
14:51  curtana: cizra, it works ok if you are careful about what you check into the repository (LF line endings)
14:51  curtana: if you only use windows, it's not a problem, but if you want windows/non-windows clients to share the repository, then you have to be careful
14:51  hal: are you talking to me curtana ?
14:51  curtana: sorry, i was talking to cizra
14:51  cizra: curtana: I'm only going to use Windwoes for this specific repo.
14:51  hal: ok np curtana
14:52  cizra: Another question: How does Git cope with loads of binary data? I'm considering ditching Mercurial because I cannot work with it anymore (running out of memory).
14:52  cizra: Are several-hundred megabyte commits OK?
14:53  tango_: you have to tune git to work well with huge binary blobs
14:53  jeeger: cizra: I wouldn't recommend it. I kept my photos in a git repository, and after a while, I couldn't push it to my server due to missing memory...
14:53  jeeger: hooray for filter-index...
14:53  curtana: cizra, they are ok but not great. i had no problem with multi-hundred meg files after disabling compression
14:53  parasti: cizra:  word of mouth is that it's not okay, and also that Git likes to keep entire files in memory, too
14:54  curtana: (which i had to do because msysgit is 32-bit only, so uns out of memory while compressing)
14:54  curtana: hal, are those white space things really errors? they look liek warnings to me
14:55  parasti: it's useless spam, as I said.  the command stopped because of a conflict
14:55  curtana: ah so you did
14:55  Morbus: g'day. i'm a newb to git.
14:55  curtana: 'git mergetool' should set you up to resolve it
14:55  Morbus: i have two computers. one is a dev box, one is a live box.
14:55  Morbus: they both have checkouts/clones (?) of the source branch.
14:55  Morbus: the dev box has git committed and git pushed successfully.
14:56  Morbus: the live box has a cache file, also in git, that is newer than the dev version.
14:56  Morbus: on the live box, i go and "git pull", and I get:
14:56  Morbus: issue-numbers.db: needs update
14:56  Morbus: renders/morbus-20545-default.html: needs update
14:56  Morbus: should i commit/push both of those files?
14:57  ponto: Is a git  reset --hard anywhere recorded?
14:57  curtana: you could 'git stash', then pull, then 'git stash pop'
14:57  curtana: stash temporarily removes local, uncommitted changes
14:57  cizra: Okay, thanks all answerers
14:57  jeeger: xb
14:58  Morbus: curtana: 'stash' is not a git command
14:58  bluenovember: I think you'll find it is
14:58  curtana: maybe you have an oold version
14:58  Morbus: ouch. i'm on 1.5.2.1
14:58  jast: I think stash was introduced in 1.5.3
14:58  jast: we're at 1.7.3 now :)
14:58  Morbus: ok. well, i can't upgrade right now, but is there a way to a) move the live files out of the way, b) pull from remote and get fresh copy of those two files, c) put them back and commit them.
14:59  Morbus: or should i just clone a new fresh repo and copy/paste things inot place ;)
14:59  curtana: well you could commit them, then fetch from origin, then rebase off origin/master
14:59  ponto: How can one determine the direction of a  merge.   If I am on  a branch and do        git merge master.   Is there a way to verify that this happened?
14:59  Morbus: curtana: i did try to commit them... i get...
14:59  Morbus: oh, awit, no, i committed successfuly, but the git push failed.
15:00  Morbus: what should i do instead?
15:00  cizra: Okay... I'm installing msysgit. Which line ending conversion do I want?
15:00  hal: yes you did say, parasti - thank you
15:00  hal: thanks for your input curtana
15:00  cizra: This repo is only going to be used from Windwoes machines.
15:00  curtana: cizra, the default option should be 'true' which will work fine
15:00  cizra: curtana: "Checkout Windows-style, commit Unix-stile"?
15:00  curtana: yeah
15:01  cizra: OK
15:01  curtana: if you really are only ever going to use windows then 'false' woudl be ok. but 'true' does not do any harm when you are setting up a new installation from scratch, and on the off chance that you will ever clone on a non-windows system, it will save you time in the future
15:02  curtana: Morbus, yeah. the push will fail because your histories have diverged. this is usually resolved by merging, or by rebasing. so you could 'git fetch origin && git rebase origin/master'. that wil work fine as long as origin doesn't contain changes to the same files that your local commit changed
15:02  Morbus: curtana: ok.
15:02  cizra: Hmmmm, assuming Git fails me here, are there _any_ version control systems able to cope with hundred-megabyte commits?
15:03  Morbus: curtana: well, for better or for worse, my live box is now saying everything is up to date, with no pushes to make.
15:03  curtana: cizra, perforce
15:03  Morbus: so i've either screwed it up completely, or it's working again. i'll know shortly ;)
15:03  curtana: Morbus, ok. run 'git log --graph' to visualise what is going on (or gitk if you have X)
15:03  Morbus: curtana: i'm ancient. no graph arg
15:04  Morbus: adding that to my todo list. just gotta get this release out today ;)
15:04  curtana: ah ok. well it is not an essential feature. if you run plain 'git log' you should now see at the top your local commit, newly rebased; followed by the commits that you made on origin earlier, and so on
15:05  Morbus: curtana: i am seeing all the commits i expect to be seeing.
15:05  Morbus: but nothing specifically labeled rebased or origin or master.
15:09  curtana: Morbus, try adding --decorate (may be too new for your version though)
15:10  luke--: hi
15:10  Morbus: curtana: yeah, that worked; adding something about master/HEAD/master to the latest commit (from the live box)
15:10  luke--: how did you discard recent changes and get back to your last commit again?
15:10  luke--: git reset --hard?
15:13  bluenovember: luke, yes. You can also just put them to one side with git stash.
15:15  luke--: bluenovember: thanks
15:17  rendar: if git uses sha1 for identifing files, what happens if in the tree there are 2 identical file?
15:17  wereHamster: nothing
15:17  rendar: wereHamster: how git can distinguish them?
15:17  Olsimar: i have a matter, when i use "repo sync" at home, it works fine, uses all my download bandwithd, but i use "repo sync" at work with the same PC and a better internet bandwitdh, it is very very slow (20KB), does anyone knnows why plz ?
15:18  wereHamster: rendar: why would it need to if the files are identical?
15:21  bremner: Olsimar: can you reproduce the problem with just git?
15:25 --- adamholt is now known as adamholt_away
15:25 --- adamholt_away is now known as adamholt
15:25  Olsimar: bremner: it will be difficult :/ repo is a big python script
15:25  bremner: Olsimar: yeah, it's just that I don't know how many repo experts you will find here.
15:27  Olsimar: bremner: what port does git use ?
15:28  bremner: Olsimar: 9418, 22, or 80
15:29  coachz: hi guys
15:31  Olsimar: bremner: thanks i will search if i see somethings
15:31  coachz: I have my src code in dir  /foo and I want to have its .git repo in a dir  /bar on my local box with only me as user.  Do I make the repo in /bar running "git init --bare"
15:33  coachz: Then do I add and commit files with:    "git add --git-dir=/bar --work-tree=/foo -A"  and  "git commit --git-dir=/bar --work-tree=/foo -a"
15:34  coachz: rather    "git commit --git-dir=/bar --work-tree=/foo -m"
15:35  coachz: oops    "git commit --git-dir=/bar --work-tree=/foo -a"
15:35  wereHamster: why do yu want to have gitdir and worktree in different places?
15:35  apetrescu: coachz, easier just to init a git repository in both places and just push to the one in /bar
15:35  apetrescu: Having a git repo somewhere is really lightweight
15:36  coachz: i don't want the git dir in the dir that has the src code though
15:36  coachz:  Do I make the repo in /bar running "git init --bare"
15:36  coachz: oh
15:36  coachz: I'm rsyncing the code with a server where they don't version
15:36  wereHamster: you're just making things more complicated without any benefit
15:37  coachz: so i don't want the .git going to the server
15:37  coachz: i just want my own versioning and then do rsync diffs to see if anything changed on the server before i push it back
15:37  wereHamster: you are aware of rsync --exclude, right.. ?
15:37  coachz: yea but i do --delete to mirror the server down to me and was concerned it would kill off the local  .git
15:38  coachz: will --exclude avoid deleting that dir ?
15:38  walt: I did a pull, and merged, and git status says nothing. But on of my files is conflicted
15:38  wereHamster: try and see (in a test directory)
15:38  walt: i.e it contains diff info
15:38  walt: what's up?
15:38  coachz: that would be easier,  thanks walt, i'll give it a try
15:38  wereHamster: walt: someone else merged and committed the conflict markers?
15:39  walt: hmm
15:40  coachz: looks like exclude will protect it from --delete according to the web,  nice !
15:40  coachz: now i test
15:40  yoh: quick question:  I want to move a directory into a git submodule... I want to export all dev history (along with the commit msgs/authors etc) for that directory... fast-export seems cannot take a path -- what would be the way?
15:40  selckin: man git filter-branch
15:40  jast: the 'git' manpage can be found at http://git.or.cz/man/git [automatic message]
15:41  jast: nice try :)
15:41  bremner: jast: works on debian :)
15:42  Olsimar: bremner: i test with a git command and it works fine it's strange
15:42  jast: how did they manage that?
15:42  bremner: jast: man has been patched (upstream, I think)
15:43  bremner: "man foo bar" attempts "man foo-bar", I think
15:43  jast: urk.
15:43  jast: well, man is not my project, I guess :)
15:43  Ulfalizer: say i have a bunch of changes in my working tree, and i want to gradually pull changes out (but still keep them for later) and recompile until i discover where particular problem lies. what would be a good workflow for that?
15:43  Ulfalizer: +a
15:44  jast: commit some parts, stash the rest, test, stash pop; rinse, repeat
15:46  yt_ror: When I do git status, it says my local branch ahead of 6 commits ?
15:46  yt_ror: how do I view them before pushing ?
15:46  Ulfalizer: git log
15:46  Ulfalizer: jast: hmm, could work. thanks.
15:47  curtana: yt_ror, if you want to view only those 6 commits: git log origin/master..master
15:48  ponto: There is no way to get the way of a branch through the history?
15:49  wereHamster: ponto: please explain..
15:50  ponto: wereHamster:  For example the 1.1_branch  ref points to a single commit at any point.   How can I get the list of commits it has pointed to?
15:51  wereHamster: ponto: git log -g 1.1_branch. But that's not complete, it only goes back 90 days
15:52  ponto: ok. this can help in some cases.
15:52  ponto: and why is the branch a commit was originally added to not recorded?
15:52  jast: because we mostly don't care
15:53  wereHamster: because that's how git works
15:53  jast: usually you can follow the history of a branch by following along the first parents
15:53  jast: unless someone did history rewriting
15:53  jast: and the original branching point is just not stored anywhere, at least not automatically
15:55  ponto: I had just the problem that the branches master and v1.1  pointed to the same merge commit.   someone made a mistake.  Now the question was. Which of the previous commits was in master and which in the v1.1 branch?
16:01 --- slyphon_away is now known as slyphon
16:05  ivank: i checked out an old reference, how do i jump back to head?
16:05  wereHamster: ivank: you already are on HEAD
16:05  wereHamster: HEAD, by definition, is where you currently are
16:06  ivank: tip then
16:06  wereHamster: wht is tip? That's not a term that git uses
16:06  ivank: the very latest changelist
16:06  ivank: tip is hg
16:06  wereHamster: latest by what? Date?
16:06  ivank: yup most recent on this branch
16:07  wereHamster: HEAD
16:07  ivank: actually i should have said changelist where i said reference earlier
16:07  cbreak_work: do you want to jump to a branch head?
16:07  cbreak_work: do git checkout branchname
16:07  ivank: ah, it created a new branch
16:07  yt_ror: How do I list remote branchs from my local ?
16:07  cbreak_work: git ls-remote?
16:09  cbreak_work: ivan: type git status after you check out an old commit
16:09  cbreak_work: it'll tell you on which branch you are.
16:09  cbreak_work: (Not on any :)
16:09  ivank: cbreak_work: got it now, cheers :)
16:39  leo2007: How does [color] ui = auto mean? I mean tell it that TERM=dumb can display color just fine.
16:57  SethRobertson: So someone was asking on this channel for a way to move a commit, the last commit, from branch A to branch B.  My thought immediately turned to rebase, but I couldn't get it to work cleanly and easily so I used a different approach.  The question I have is, is there a way to use rebase cleanly?
16:57  SethRobertson: The obvious command (git rebase --onto master next^ next) failed to advance master and moved the entire doner branch.  The next most obvious command (git rebase --onto master abc123 bcd234) failed to advance master, and failed to actually tell me the SHA master should be moved to.  Neither of course actually removed the commit.  Using cherry-pick followed by cherry-pit (rebase to remove a commit) actually works, but is
16:57  SethRobertson: there a pure-rebase way?
16:57  wereHamster: for one commit you can use cherry-pick
16:58  leo2007: exactly.
16:58  SethRobertson: And I thought of that, but is there a way to use rebase?
16:59  cirwin: SethRobertson: rebase will move the branch A along with the commit, so probably not
16:59  wereHamster: of course ther is. if you have brnach A and B and watnt to move hte latest commit on A to B: git rebase --onto B A^ A^{} && git branch -f A A^
17:05  wereHamster: oh. insert 'git branch -f B' between the two commands to update the branch with the new history
17:06 --- kylehayes__ is now known as kylehayes
17:09  gloriaC991: i have multiple git repos checked out. i have the ability to push to all of them, but i SHOULD only be pushing to one. today, i accidentally pushed to the wrong one. is there a way to change my config such that i am blocked from pushing to a certain repo (but can still pull)?
17:11  letas: quick question: what's the best way to restore a file to previous commit?
17:11  offby1: gloriaC991: maybe change the remote to use a read-only protocol (like http) instead of ssh?
17:12  offby1: that would require that the remote server actually support that protocol, which is unlikely :-|
17:12  jast: gloriaC991: for that repository, add an invalid pushurl setting to the remote config block
17:12  SethRobertson: letas: to a previous commit or from a previous commit?
17:12  gloriaC991: offby1: yeah, i dont have access to do that :(
17:12  gloriaC991: jast: that sounds like what im looking for
17:13  gloriaC991: jast: not seeing anything about that in the man pages though (only been using git for a few months). could you point me in the right direction on the docs?
17:13  jast: gloriaC991: http://git.or.cz/man/git-config and search for pushurl
17:13  letas: SethRobertson, well I want to restore a file that I have changed and I know the sha1 that has the changes I want
17:14  letas: SethRobertson so i'd say restore from a previous commit :D
17:14  jast: git checkout <commit> <file>
17:14  gloriaC991: jast: ah ok i see. so just change it to like, www.google.com or something?
17:15  jast: gloriaC991: to make it fail faster, I suggest a.invalid
17:16  letas: thanks jast
17:16  gloriaC991: jast: ah, thanks a bunch. thats perfect
17:16  jast: gloriaC991: in fact, that's not even a valid git URL :)
17:16  jast: git will probably try and interpret it as a local relative filesystem path
17:17  jast: but unless you have a local directory called 'a.invalid' that should be fine
17:17  gloriaC991: jast: yep. just hangs up. thats exactly what i wanted, thanks a bunch :)
17:21 --- tj- is now known as tjholowaychuk
17:21 --- adamholt is now known as adamholt_away
17:21 --- adamholt_away is now known as adamholt
17:22  SethRobertson: Thanks wereHamster.  The 'A^{}' syntax and realizing that HEAD was updated so that 'git branch -f' could update to the correct SHA was what I wasn't seeing.
17:23  wereHamster: SethRobertson: the A^{} is so that you work on a detached HEAD and don't update the A branch..
17:33 --- rajeshsr_ is now known as rajeshsr
17:38  Sembiance: Hello. I'm new to GIT :)
17:39  wereHamster: Sembiance: http://progit.org/book
17:39  Sembiance: I did a 'git merge' and now when I do 'git status' it says there are several modified files.  But when I do  'git diff path/to/file.c' it doesn't show me any differences?
17:39  wereHamster: in which section of git status are they?
17:40  Sembiance: 'Changes to be committed:'
17:40  Sembiance: it lists 1 new file then about 15 changed files
17:40  wereHamster: and no conflicts?
17:40  wereHamster: 'unmerged paths' ..?
17:40  Sembiance: There was 1 conflict, but I manually resolved it
17:40  wereHamster: then you are good to go: just run 'git commit'
17:41  Sembiance: So what is the modification? Does git track any other meta data? Is there another more detailed git status command or something I can run to see 'why' git sees these as modified?
17:41  wereHamster: there was a merge conflict, git aborted the merge and let you resolve the conflict
17:42  wereHamster: now that you are done resolving it you can finalize the merge
17:42  wereHamster: the other files were also part of the merge, but there was no conflict in them
17:43  Sembiance: wereHamster: ok, thanks. I really appreciate the help :)
17:45 --- hagebake is now known as hagabaka
17:49 --- rajeshsr_ is now known as rajeshsr
17:57  Ulfalizer: re http://book.git-scm.com/1_the_git_index.html, is the index and the set of staged files really the same thing? if they are, it seems it wouldn't make sense to 'git checkout' a file unless you had 'git add'ed it forst to add it to the index :/
17:58  mDuff: What's the best way to get a UNIX timestamp for a given revspec? rev-list --format=%ct and just limiting the output?
17:58  wereHamster: Ulfalizer: you mean checkout form the index?
17:58  Ulfalizer: yes
17:59  wereHamster: Ulfalizer: you work, add to the index, work more, and now see that you've done total crap and want to go back to the version you have in the index
17:59 --- shennyg_ is now known as shennyg
17:59  wereHamster: mDuff: what about git log -1 --format=%ct <sha> ?
18:00  mDuff: wereHamster, ooh -- great!
18:00  Ulfalizer: if the index is the same as the set of staged files is the same as the set of files that have been 'git add'ed, and 'git checkout' checks things out from the index, it seems from that description that you can only checkout files that have already been 'git add'ed (which i know not to be the case).
18:01  wereHamster: Ulfalizer: no, you can ceckout files from different revisions,too (git checkout <sha> -- <file>)
18:01 --- slyphon is now known as slyphon_away
18:01  Ulfalizer: wereHamster: i'm mostly confused as to the exact meaning of the term "index", and how it relates to the set of staged files :/
18:01  wereHamster: it's the same
18:01  wereHamster: index, cache, staging area, staged files -- it all refers to the same
18:01 --- rajeshsr_ is now known as rajeshsr
18:02  Ulfalizer: is the set of staged files the same as the set of files that appear under "changes to be committed" when you do a git status as well?
18:02  wereHamster: yes
18:02  wereHamster: well, the index contais *all* files, not just those which you modified and added since the last commit
18:03  Ulfalizer: but if that's the case, then how can you ever run 'git checkout' on a file before you have staged anything? the git-checkout man page states that "It updates the named paths in the working tree from the index file".
18:03  wereHamster: 'changes to be committed' shows only files which differ from HEAD (you can get that list with git diff --name-only --cached)
18:03  Ulfalizer: wereHamster: ohhh, that's a very important difference then :)
18:03  wereHamster: Ulfalizer: git checkout HEAD^ -- <file>
18:04  wereHamster: that takes the file fro the HEAD^ commit and puts it into the index and working tree
18:04  Ulfalizer: so the index is your current branch + staged modifications?
18:04  wereHamster: it's the set of all files which you want to go into the next commit
18:05  wereHamster: I have to go, see ye later
18:05  Ulfalizer: what does it look like internally? is it just a list of filenames?
18:05  Ulfalizer: ok, thanks :)
18:06  wereHamster: like the index in a book I guess, a list of <path, mode, blob sha1> entries
18:06  Ulfalizer: ok
18:07  wereHamster: but the index is also special that for each path there may be multiple entries, that's the case when you have conflicts, then git puts multiple versions of the file into the index (see man git-rev-parse :1:, :2:, :3: )
18:07  jast: the 'git-rev-parse' manpage can be found at http://git.or.cz/man/git-rev-parse [automatic message]
18:07  Ulfalizer: so when you're git adding, you're just updating that file?
18:07  Ulfalizer: what would the blob entry be for stuff that hasn't been committed yet?
18:07  wereHamster: when you add a file, git computes its blob sha1 and updates the entry in the index
18:07  wereHamster: blob is a file
18:08  offby1: general-purpose git advice: 1) Read "Git For Computer Scientists" (http://eagain.net/articles/git-for-computer-scientists/); 2) Run "gitk --all"; 3) Learn about "git reflog"
18:08  wereHamster: offby1: you're off by a lot, totally irrelevant here :)
18:08  Ulfalizer: wereHamster: but is there an actual blob object before you have committed it? is the blob object created at the point of "git add"?
18:09  wereHamster: yes
18:09  Ulfalizer: aha, neat :)
18:09  wereHamster: git ad dneeds to know the blob sha1 so it can update the index
18:09 --- slyphon_away is now known as slyphon
18:10  wereHamster: that also enables you to add files, modify then in the working tree and when you commit it'll commit the file you added and not what you have int he working tree
18:10  Ulfalizer: yeah, that's why i wondered what it would put as the sha1, as i didn't know it created a blob at that point
18:10  wereHamster: I really have to go.. catch my train..
18:10  Ulfalizer: ok, cya
18:21  tomoyuki28jp: How can I update my git submodule to a certain version?
18:23  offby1: tomoyuki28jp: "cd your-submodule; git checkout whatever; cd .."
18:23  offby1: then if you like, "git add" and "git commit"
18:24  tomoyuki28jp: offby1: So the root repository doesn't record the version of submodule?
18:25  parasti: add and commit is how it is recorded
18:27  tomoyuki28jp: parasti: offby1: I see. Thanks a lot!
18:30 --- ProperN[out] is now known as ProperNoun
18:32  Sembiance: So I am working from github.  I did a change, did 'git add', then 'git commit' then tried to do 'git push'  it alerted me that there were other changes on github. So I did get pull which automatically merged the changes into my local git. I then did 'git push' and it pushed 2 changes. One was the commit I made, the other commit it pushed was a 'merge of production into production'
18:32  Sembiance: When I look at github I correctly see the files represent the correct changes, both mine and the other changes that were done by someone else that were part of the merge
18:33  Sembiance: I guess my mistake was not doing a git pull before doing changes
18:33  wereHamster: Sembiance: that's not a mistake. It simply happens when two people do changes at the smae time
18:33  wereHamster: your other choice would be to rebase
18:34  Sembiance: I heard rebase is not a good idea :)
18:34  mmattice: not doing an integration test of both branches before pushing might've been a mistake
18:34  wereHamster: Sembiance: only if you've already pushed your changes to a public repo
18:35  wereHamster: Sembiance: nobody cares what you do in your local repo with unpublished commits...
18:35  Ulfalizer: Sembiance: by default, git pull will merge in the changes from the remote and create a merge object representing the merge. if you don't want the merge object and just the changes, you can pass --rebase to git pull.
18:36  Ulfalizer: it's a safe operation since the remote hasn't seen your local changes yet, and so won't care that they've suddenly been rebased
18:41  cannonball: Ulfalizer: I typically create a branch such as 'master_fix_bug_255', do my work on it, go back to master, git pull, go to master_fix_bug_255, git rebase master, then go to master and git merge master_fix_bug_255.  Does pull --rebase help my flow in any way?  If not, is there any way for me to have less merge commits in the git history?
18:41  bnovc: is it possible for me to list all tags within a certain date range (or under a given date)
18:41  bnovc: annotated tags
18:42  cannonball: By "do my work on it" I mean make changes and commit them to that topic branch.
18:44  Ulfalizer: cannonball: i think just creating a local branch, git pull --rebase'ing against master, and then pushing to master should work
18:44  cannonball: Hmmmm, pushing to master.  Haven't tried that before.
18:45  Ulfalizer: i'm still pretty new to git, so someone please shout if that's discouraged in any way :)
18:46  Ulfalizer: alternatively you could just git pull --rebase against master before you're ready to integrate and then pull from master, if you prefer that
18:46  Sembiance: wereHamster, Ulfalizer: thank you both  a lot for your advice and help :)
18:48  Ulfalizer: at work we have taskbranches that developers push to (keeping up-to-date using e.g. git pull --rebase), and then the integrators pull from those and integrate them into master
18:49  piotr_: w
18:49  Ulfalizer: x
18:52  Ulfalizer: cannonball: "pull from master" as in "pull from your bugfix branch from master" that is, not "pull in changes from master from the bugfix branch" :)
18:53  Ulfalizer: hehe, that might have been just as ambiguous now that i reread it, but hopefully you get :P
18:53  Ulfalizer: ít
19:19 --- slyphon is now known as slyphon_away
19:27  wereHamster: Sembiance: nobody cares what you do in your local repo with unpublished commits...
19:27  wereHamster: sorry, wrong key
19:45  sako: hey guys, how do you handle a situation where you have to clone a git repo from the local file system?
19:46  mbroeker: sako, clone it.
19:46  SethRobertson: Is this a trick question?  `git clone /path`
19:46  sako: it's kind of counter intuitive i know but i currently have just 1 server and consequently am using that as both a git "server" running gitolite and it also hosts the webapps im tracking
19:46 +[exa]: sako: git clone file://somepath
19:46  sako: ah ok, so just use file://
19:46  SethRobertson: The file:// prevent repo sharing
19:47  cbreak: sako: you can also use /paths/like/this
19:47  sako: i see
19:47  mbroeker: git clone /path works too
19:47  sako: but what do i do for example to set the remote?
19:47  cbreak: ... call the git remote command with add
19:47  cbreak: and add a new remote
19:47  sako: i can add a remote on the same fs?
19:47  cbreak: yes.
19:47  sako: just do remote add /path/to/gitrepo
19:48  sako: i see
19:48  cbreak: as many as you can afford the hard disk space for
19:48  cbreak: you have to give it a name
19:48  cbreak: read the man page of git remote
19:54  spicyWith: how would I create a new remote branch from a particular commit on another branch?
19:55  spicyWith: I'm thinking something among these lines, but it isn't working... git push origin origin/dev/c3ce641bc8fe222ef6eadbc5734284fd45394d74:refs/heads/v3.0
19:55  spicyWith: any ideas?
19:56  spicyWith: or would it make more sense to push from the HEAD and then go back in the history in the new branch?
19:56  SethRobertson: Well, you can certainly create a local branch and then push the local branch, if what you describe does not work.
19:57  spicyWith: SethRobertson: usually what I do is create a remote branch, and then track it locally. How would I achieve what you propose?
19:58  SethRobertson: git branch myv3.0 c3ce64
19:59  spicyWith: SethRobertson: and then how would I make that remote?
20:00  SethRobertson: git push origin myv3.0:refs/heads/v3.0
20:01  SethRobertson: You could try pushing c3ce64 and skipping the intermediate branch too
20:01  jast: what's with the overly verbose push refspecs all the time?
20:02  jast: git push origin commitid:branchname
20:02  SethRobertson: blame the git-push manpage
20:03  jast: so I guess my complaint was more about creating a temporary branch in the first place :)
20:05  spicyWith: SethRobertson:  that worked, thanks :)
--- Log closed Fri Dec 03 20:13:33 2010
--- Log opened Fri Dec 03 20:13:47 2010
20:13 --- Users 733 nicks [0 ops, 0 halfops, 9 voices, 724 normal]
20:13 --- Server: [card.freenode.net] [freenode-info] channel trolls and no channel staff around to help? please check with freenode support: http://freenode.net/faq.shtml#gettinghelp
20:15  ArseneRei: Is there a good reason you can't clone a shallow git clone?
20:15  cbreak: ArseneRei: yes, there is
20:16  jast: good answer :)
20:16 --- Channel #git was synced in 156 seconds
20:16  ArseneRei: cbreak: Is it that the "first" commit's parent commit is inaccessible and that would be confusing?
20:16  cbreak: some objects are missing
20:16  cbreak: so they can't be cloned.
20:17  drizzd: that is a stupid reason
20:17  cbreak: you're a member of the society of sub-entropy compression drizzd?
20:18  drizzd: why shouldn't it be possible to do a shallow clone of a shallow clone
20:18  drizzd: you can even use cp to achieve that
20:18  cbreak: you can't clone things that aren't there
20:19  cbreak: therefore, cloning is disallowed
20:19  ArseneRei: cbreak: Hm...I'm slightly confused. Some of the original objects from non-existant files won't be around. But what objects are missing from the depth I've cloned at?
20:19  cbreak: non-existant?
20:19  cbreak: they exist
20:20  cbreak: you just don't have them, because you're so shallow
20:20  jast: doing a shallow clone from a shallow clone is not impossible, but too complicated for anyone to have bothered implementing it :)
20:20  ArseneRei: cbreak: That's what I mean by non-existent. They don't exist in the shallow clone.
20:20  cbreak: cloning from shallow repositories isn't possible because they miss data.
20:21  cbreak: you could of course manually piece everything together
20:21  cbreak: and try to do some partial clone
20:21  cbreak: but then git can't even verify it's integrity
20:21  jast: the problem in doing a shallow clone from a shallow clone is that the pack protocol doesn't work if you don't have the full history
20:21  jast: and, yes, you can't verify integrity
20:22  jast: except of blob/tree objects
20:26  ArseneRei: jast: That's making more sense to me. So the first shallow clone has all the objects available and is cloned with missing objects. Ah, and the packfiles are no longer the same in the shallow copy...I think.
20:27  parasti: hmm, git clone --depth hangs in term-mode in Emacs
20:34  ArseneRei: Thanks for the help, cbreak and jast.
20:48  hal: in my index, "change to be committed" git shows a file as a "new file", but this file no longer exists
20:48  cbreak: hal: doesn't matter
20:48  cbreak: it's in the index
20:48  hal: when I git reset HEAD <file> to unstage it, it states that some files have been locally modified
20:49 --- ChanServ sets modes [#git +v michaelr_]
20:49  hal: cbreak: hi - are you suggesting to just ignore it?
20:49  cbreak: no
20:49  cbreak: do you want it to be commited?
20:49  hal: no, it doesn't exist
20:50  cbreak: then git reset HEAD -- file should remove it from the index... I think...
20:50  hal: oh hold on
20:50 --- michaelr_ is now known as michaelr
20:50  hal: it did exist - just not where I expected it
20:51  hal: cbreak: ah, that's better.  I'm sorry - the stress was preventing me from thinking straight! :)
20:53  hal: ok I have a branch that I have pushed to my repo on github, but it's wrong and I'd like to discard it
20:53  hal: I have deleted remote branches before, so I know how todo that
20:53  hal: can I delete the remote branch and then just push the same branch again?
20:54  cbreak: why not?
20:54  hal: the reason is, I'd like to squash the commits before pushing
20:54  hal: cbreak: so there is no problem with doing this ?
20:54  cbreak: I wouldn't see why
20:54  hal: ok great - thank you
20:56  parasti: if anyone cloned your repo in the meantime, they will see your changes as a non-fast forward update
20:56  parasti: since the ref name would be the same
20:57  parasti: essentially the same as git push -f
20:57  parasti: (which you could just as well use instead of delete + repush)
20:57  hal: parasti: ok, maybe I'll rename the branch then - thank you
21:00  nivenhuh: hey all.. is there a way to view the log messages for a master and all of it's branches combined together?
21:00  nivenhuh: i've been searching, but no luck so far
21:00  fr0sty: nivenhuh: master is only one branch
21:01  nivenhuh: right.. i guess i'm wanting to view all of the commits for all of the branches in a single log output
21:01  nivenhuh: instead of having to iterate through each one
21:01  fr0sty: git log --all ?
21:01  nivenhuh: oh duhr.. that worked.. lol
21:01  fr0sty: git log --branches, probably is close r to what you want.
21:01  nivenhuh: it's friday.. thanks guys :)
21:01  cbreak: nivenhuh: try git log --all --graph --decorate
21:01  fr0sty: where were you searching?
21:02  nivenhuh: i went on google and looked for  "git log all branches"
21:02  fr0sty: man git-log has --all and --branches pretty close to the top
21:02  jast: the 'git-log' manpage can be found at http://git.or.cz/man/git-log [automatic message]
21:02  bremner: in korea, only old people use man pages
21:02 * fr0sty wonders what people have against manpages
21:02  nivenhuh: haha..  i use man pages still, but i don't have em installed on this box
21:02  cbreak: !
21:02  cbreak: nivenhuh: get git.git, do a make quick-install-docs
21:03  teuf:  /Win 5
21:03  fr0sty: nivenhuh: they are online too.  (see jast's auto-reply)
21:04  nivenhuh: cool.. thanks for the pointers everyone
21:04  c3l: Hi, I can't find the answer to this, but for one of my repositories git is not showing that I am ahead of origin by # commits. however it does do this for my other repository. both are on github, any ideas?
21:05  parasti: your local branch doesn't have an upstream branch configured
21:05  wereHamster: c3l: push --set-upstream ...
21:05  parasti: branch --set-upstream, no?
21:05  wereHamster: or that..
21:06  c3l: ooh, why wasnt that default?
21:06  c3l: well, thanks :)
21:17 --- s0ber_ is now known as s0ber
21:35  pingswept: Why do I need to have a local repository and a remote repository? It seems that I can't commit directly to a remote repo, but I don't understand why.
21:35  wereHamster: that's how git worsk
21:36  pingswept: I assume that I'm just missing something basic.
21:36  wereHamster: it's especially handy when you don't have a connection to the remote repo. Like, when you are on a airplane. You can still get work done...
21:36  pingswept: From my (ignorant) perspective, it seems like I have to have an extra copy of everything.
21:37  pingswept: Ah, that's a good point.
21:37  wereHamster: which SCM did you use before?
21:37  pingswept: SVN, mostly.
21:37  wereHamster: this explains your mindset...
21:38  pingswept: Right-- I'm attempting to change it.
21:38  wereHamster: pingswept: go read progit.org/book ..
21:38  parasti: you don't "need" two repos to work on code
21:39  cbreak: yeah. but the one you do NOT need is the remote :)
21:39  pingswept: @parasti: this is what I'm puzzled by.
21:39  parasti: the online repo is for publishing your history and collaboration
21:39  parasti: if you don't need that, you don't need two repos
21:39  pingswept: I understand the idea of no remote-- I'm just working away on one machine, committing as I go.
21:40  pingswept: What I'm confused by is why I can't have my working directory and git directory in different places.
21:40  wereHamster: you can. But there's usually no reason to do that
21:41  cbreak: it's inconvenient
21:41  pingswept: Oh, I think I get it then.
21:41  cbreak: you have to tell git each time (every command) what your working dir and git dir are
21:41  wereHamster: you did'nt mind svn putting a .svn directory into *each* directory.. git only puts .git into the repo root
21:41  pingswept: Well, I did mind the .svn directories. I mean, I *did* switch.
21:42  pingswept: My objection is this: after every commit, I have to remember to push to a remote if I want the work to be public.
21:42  pingswept: I want all my work to be public, so it just seems like an extra step.
21:43  wereHamster: you usually don't push after every commit. You do a bunch of commits in a row and push once a day or so
21:43  alus: I push after every commit
21:43 --- ChanServ sets modes [#git +v bradc]
21:43  pingswept: I guess my real problem is that I'm working from a couple different computers. So I have to push and then pull to switch computers.
21:44  wereHamster: in general, you push when you're happy with the work you've done. Usually that's after a few commits
21:44  tango_: pingswept: if the computers can see each other, add them as remotes and use git remote update
21:44 +bradc: Hey guys, how would I go about creating a new different remote repository and pointing my working copy to it?
21:44  parasti: if you do it that way, why use Git at all then?  I couldn't live without rebase -i and add -p, if all my stuff was public the second I commit, I would just be using a glorified SVN
21:44  cbreak: git remote update is a wrapper for git fetch
21:45  wereHamster: bradc: create the remote repo, then add it as a remote (git remote add ...)
21:45  pingswept: @parasti: you make a good point. I hadn't thought of going public as the threshold of no return.
21:45  pingswept: @tango_: git remote update makes one mirror the other, or something like that?
21:46  wereHamster: pingswept: man git-remote
21:46  jast: pingswept: the 'git-remote' manpage can be found at http://git.or.cz/man/git-remote [automatic message]
21:46  ka1ser: Does anyone know how to know if a commit id is in a git tree without doing git checkout?
21:46  alus: so, why would hardlinking from my git repo to another directory cause "git reset --hard" think it needed to "check out files"?
21:47  wereHamster: ka1ser: commits aer never inside trees (excep tfor submodules)
21:47  alus: if I hardlink 1000 files, it checks out 1000 files
21:47 +bradc: @wereH, thanks.  so should the remote repo be blank and then after the remote add, I'll be pushing to it?  I need to make sure there's no connections to the original repo.
21:47  wereHamster: bradc: it doesn't need to be empty
21:47  ka1ser: I mean... I have a lot of branches... and I can do git log to check if the commit id is there... but I dont want to do that for all the branches I have in my git repository
21:48  cbreak: ka1ser: just check it
21:48  ka1ser: is there a way to search for it on all of them?
21:48  cbreak: like, git cat-file -t sha
21:48  wereHamster: ka1ser: git branch --contains <sha> ?
21:48  wereHamster: add a -r or -a if you want..
21:48  cbreak: my command is faster than wereHamster's
21:49  cbreak: but they answer different qustions
21:49  wereHamster: :)
21:49  cbreak: so you have to decide which question you want to ask
21:51  pingswept: @tango_ Just read the manpage. Do I understand correctly that git remote update would allow me to make a triangle of sorts, where my two computers get commits directly from each other, as well as from a third public repo?
21:51  wereHamster: pingswept: you can fetch from any number of remotes
21:52  pingswept: @wereHamster: Understood. I'm trying to understand whether the triangle I described was what tango_ was suggesting.
21:53  ka1ser: let me check
21:53  tango_: pingswept: git remote update will sync the local clone of the other repo(s)
21:53  tango_: you would then rebase or merge or whatever as appropriate
21:53  tango_: pingswept: I use it very often since I have some repos cloned in three or four machines
21:53  pingswept: Have to think about that a bit.
21:54  alus: so, why does git reset think it should check out files when there is nothing to check out?
21:54  tango_: each machine has the other two or three machines as remotes, and the first thing I do sitting on a machine is git remote update followed by appropriate merges or rebases
21:54  wereHamster: alus: what does git status think?
21:55  alus: wereHamster: git status says "nothing to commit (working directory clean)"
21:55  alus: wereHamster: however if I run "git status" and then "git reset --hard <rev>", that makes git reset not want to check anything out!
21:55  alus: but I swear, if I don't run git status and then I run git reset, it does check things out
21:56  pingswept: tango_: I think that gets exactly at my confusion. I should be thinking of all the repos as equal partners, with the public one having special status because other people will want to rely on whatever gets committed there.
21:56  wereHamster: alus: try git update-index --refresh instead of git status
21:56  ka1ser: thanks both wereHamster and cbreak
21:56  ka1ser: =)
21:56  alus: wereHamster: also prevents checkout
21:56  wereHamster: alus: so do that before the reset.. :)
21:57  alus: wereHamster: what
21:57  alus: wereHamster: but what has changed?
21:57  tango_: pingswept: actually, you would want to put the public one in yet another repository, to push to when you're done hacking
21:57  wereHamster: alus: inodes? timestamps? Something else ..?
21:58  alus: wereHamster: I would like to not actually make any changes, or perhaps discover what those changes were.
21:58  wereHamster: alus: maybe you should explain what your goal is..
21:58  cbreak: iNode access time should have changed, since hard linking changes the iNode ref count
21:58  alus: wereHamster: all I'm doing is hardlinking files from the current directory to another, but the same happens if I copy them
21:58  pingswept: tango_: you mean I should have one repo on each local machine, and then one repo on Github (or equivalent public server)?)
21:59  wereHamster: cbreak: we all know that you like apple, but its' inode and not iNode ;)
21:59  cbreak: CamelCaseFTW
21:59  wereHamster: that's not camelcase, its iAppleCase
21:59  tango_: pingswept: that would be the idea, yes
21:59  cbreak: :)
21:59  pingswept: tango_: and all the local repos are set to be remotes of one another?
21:59  alus: wereHamster: my goal is, keep this directory unmodified, so that future fetch and reset commands go fast. if it re-checks out everything for no reason, that defeats the purpose
21:59  tango_: pingswept: yes, and some or all of them also have the public one as a remote too
22:00  tango_: pingswept: it's actually not as confusing as you might think at first
22:00  pingswept: tango_: Excellent. I knew I was confused, but I didn't know how. Thanks for the help.
22:00  bsmntbombdood_: so i just did a merge, when i meant to do a merge --squash
22:00  bsmntbombdood_: how do i remedy that?
22:01  tango_: pingswept: you're welcome. let us know how it works out for you
22:01  pingswept: wereHamster, parasti: Thanks for the help. I appreciate it. I have been disabused of the idea that a local repo is a waste. Cheers.
22:02  cbreak: bsmntbombdood_: git reset --hard HEAD~1 it away
22:03  bsmntbombdood_: well that's easy
22:05  aah: git n00b question.  I have a local repo that I've been working on.  I have a remote repo that's just been init-ed.  I'd like to push my repo up.
22:06  cbreak: aah: we're not stopping you.
22:10  tango_: aah: add that as a remote and push
22:10  wereHamster: alus: just run udate-index --reresh before the reset
22:10  wereHamster: alus: apparently reset doesn't do it automatically, so you have to do it yourself
22:12  alus: wereHamster: but what does that do?
22:12  wereHamster: it refreshes the index..
22:12  alus: yes, and what is the difference between the old index and the new fresh one
22:13  wereHamster: the new one has updated information about the files in the working tere
22:13  alus: ok, what was updated?
22:13  wereHamster: I guess the timestamps..
22:13  alus: the filesystem is mounted with noatime. there should not have been any modifications
22:13  wereHamster: are you sure hardlinking doesn't change c/mtime?
22:15  alus: !!!
22:15  alus: hardlinking a file changes it's ctime!
22:15  wereHamster: alus: that's what cbreak said at the begining of our conversatino...
22:17  alus: oh I didn't know that was related to me
22:17  alus: also I didn't know "inode access time" was related to "ctime"
22:17  wereHamster: he mentioned inode access time and hardlinking.. it couldn't get more related than that
22:17  alus: "atime" has not changed
22:18  cbreak: alus: I am a mac user, forgive me if I get some unix terminology slightly wrong :)
22:18  cbreak: does linux even still use atime?
22:18  cbreak: it's very resource intensive
22:19  alus: that's why I have it disabled
22:19  alus: I believe that makes it always = mtime
22:19  alus: it's very strange to me that you can have a file where ctime > mtime
22:20  cbreak: on OS X, there's something in Cocoa that apple calls "Atomic File Save"
22:20  cbreak: if you write data to a file, in the background a new file gets created, data gets put in, then the old gets renamed out of the way, the new put in it's place, then the old deleted.
22:21  alus: oh, ctime means change time not creation time
22:21  cbreak: that will break all kinds of hard links, inode IDs, and so on.
22:21  cbreak: apple's probably not the only ones using that method
22:22  alus: I'm not sure it makes sense for git reset to care about ctime then
22:22  alus: mtime is probably sufficient
22:22  cbreak: git tracks some meta data
22:23  cbreak: (+x flag)
22:23  mDuff: cbreak, the write-and-rename workflow is _extremely_ common; I don't believe it's anything remotely close to an OSX-only thing.
22:23  mDuff: s/don't believe/wouldn't say/
22:23  cbreak: it's reasonable to do
22:23  alus: cbreak: I don't understand the context of "+x"
22:23  wereHamster: alus: git needs to be able to quickly detect whether the file has changed or not. For that reason it saves the dev id, inode, times etc in the index..
22:24  cbreak: I think cocoa tries to preserve some meta data like original creation time and alias ID, but ... maybe not all
22:24  alus: wereHamster: whatever "git update-index --refresh" is doing is quick...
22:24  cbreak: alus: since git tracks +x, which is stored in the inode (I think), it has to care about the change time of the meta data
22:24  wereHamster: alus: it's only doing stat on the files.. whereas reset probably is copying the files from the object store into the workig tree
22:25  alus: wereHamster: for some reason the stat of the files knows that nothing has changed, even though the ctime changed
22:25  alus: wereHamster: so why is ctime needed at all, if it will be ignored?
22:26  wereHamster: alus: no idea. If you hae an issue with how git behaves, tkae it up with the mailing list
22:26  alus: did you just throw me at the trolls
22:26  cbreak: alus: as I said, meta data and data are different things
22:26  cbreak: +x is executability, a permission
22:27  alus: sure
22:27  cbreak: http://www.brandonhutchinson.com/ctime_atime_mtime.html
22:27  cbreak: ctime tracks inode changes, mtime content changes. maybe git tracks both in it's index? no idea
22:38  NfNitLoop: I'd like a command to show files that are being ignored by git.
22:38  wereHamster: ls-files -o
22:39  NfNitLoop: Oh.  That was easy.  :)
22:39  NfNitLoop: for some reason I thought it was -i
22:39  NfNitLoop: which wasn't quite giving me everything.
22:39  wereHamster: oh, it's i
22:39  NfNitLoop: is there a way to track files that are both committed and ignored?
22:39  wereHamster: o are untracked files
22:40  NfNitLoop: -i will show me ignored files that aren't tracked.
22:40  wereHamster: if they are committed they can't be ignored
22:40  NfNitLoop: right.  So let me rephrase.  I'd like it to show me committed files that match an ignore pattern.
22:41  wereHamster: idea: clean -dfx, move .git aside, initialize a fresh repo then add . and look at which files wer'nt added
22:42  NfNitLoop: "files weren't added" being discovered by... diffing the file tree that got added with my disk?
22:42  wereHamster: now you can ls-files -o
22:43  NfNitLoop: ah.
22:43  wereHamster: or -i
22:43  wereHamster: I think it's -o
22:44 --- ChanServ sets modes [#git +v rmk]
22:58  peterjmag: Hello all! My git repository is in a non-standard location (separate from the checked out work tree). When I run "git --git-dir=/path/to/bare/repo status" from the root of the checked out work tree, I get a "fatal: This operation must be run in a work tree" message. However, if I specify work-tree explicitly, it works fine, like so: "git --git-dir=/path/to/bare/repo --work-tree=. status". Any ideas?
22:59  cbreak: peterjmag: you have to specify it explicitly
22:59  bremner: peterjmag: make an alias?
22:59  peterjmag: cbreak: even if you're running the command from the work tree directory?
22:59  cbreak: peterjmag: or how do you think it would find the root of the work dir without you telling it to? :)
22:59  cbreak: it can't know if you're in the root of the work dir, somewhere else in it, or outside
23:00  peterjmag: bremner: I tried that too, but still had to define "work-tree=." explicitly for it to work.
23:00  cbreak: git's not a mind reader :)
23:00  cbreak: so, yes, you of course have to specify it
23:01  peterjmag: cbreak: that makes sense. I could've sworn that I didn't have to define it before though. I guess it's possible that I had defined the GIT_WORK_TREE env variable somewhere in that case.
23:02  kadoban: i don't seem to have to specify it, but i don't know what i set to make it do that
23:02  peterjmag: kadoban: interesting. is your git repo also separate from your work tree?
23:03  kadoban: peterjmag: yes
23:04  kadoban: peterjmag: oh, that's why...in my repository config is worktree = blahblah
23:04  peterjmag: aha, _that's_ what changed
23:05  peterjmag: previously, I was checking out to the work tree via a post-receive hook and defining the destination in git config, but recently, I started specifying the work tree from within the hook instead (with a line like GIT_WORK_TREE=/path/to/tree git checkout -f)
23:06  peterjmag: kadoban: thanks for your help, indirectly. :)
23:06  kadoban: heh, np
23:06  peterjmag: cbreak: and you as well.
23:07  jaredhoyt: anyone here have git+ssh+ssh-agent working on windows?
23:07  cbreak: np :)
23:07  jaredhoyt: trying to get capistrano working with agent-forwarding, but the standard OpenSSH that comes with the git install doesn't have agent
23:11  bibinou: hi
23:11  bibinou: i have a question regarding ssh keys
23:11  peterjmag: ask?
23:11  bibinou: can I alter the comment field of the key using a text editor freely ?
23:12  peterjmag: (oops, there's no "don't ask to ask" bot here :) )
23:12  bibinou: let me explain
23:12  cirwin: bibinou: you can change the username@hostname at the end if you want
23:12  bibinou: i have a ssh key, with a comment which is  a old email address
23:12  bibinou: say i want to change the address
23:12  bibinou: i just edit the comment ?
23:12  cirwin: yup
23:13  bibinou: okay great
23:13  bibinou: thank you
23:13  cirwin: it's just a human readable identifier
23:13  cbreak: in OpenSSH format, that stuff is freely editible I think
23:13  bibinou: but git and github use it when committing, am I right ?
23:13  bibinou: that's the address that shows in "git log" ?
23:15  peterjmag: bibinou: that is in fact defined in your global .gitconfig.
23:15  peterjmag: git config --global user.name "Your Name"
23:15  peterjmag: git config --global user.email "your@email-address"
23:15  bibinou: oh, right*
23:16  bibinou: and the ssh key don't need to have a matching comment ?
23:16  peterjmag: I don't believe so, no
23:19  bibinou: great it works !
23:19  bibinou: thank you
23:29  FauxFaux: Can you shorten git push origin master && git branch --set-upstream master origin/master # for the initial push?
23:33  g3d: hi, is it still impossible to ignore whitespace changes during a merge?
23:34  cbreak: you can do any change during a merge
23:34  cbreak: you just have to do it manually
23:35  g3d: I'm seeing patches like this one: http://lists.zerezo.com/git/msg726724.html, but have they actually made it into mainline?
--- Log closed Sat Dec 04 00:00:35 2010
