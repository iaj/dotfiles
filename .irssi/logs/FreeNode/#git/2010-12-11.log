--- Log opened Sat Dec 11 06:26:33 2010
06:26 --- Users 690 nicks [0 ops, 0 halfops, 14 voices, 676 normal]
06:26  iaj: lo there
06:26 --- Channel #git was synced in 4 seconds
06:27  iaj: I've got lots of files deleted just by rm file... is there an easy way to not have to git rm those files manually?
06:27  iaj: eg. I'm sure all of them should get removed from the repo
06:27  ruby_on_tails: hi
06:27  ruby_on_tails: i am back
06:27  ruby_on_tails: i read i need to host my code somewhere to use git
06:28  ruby_on_tails: what should i do nexT ? i am a complete newbie and git quick start guid here http://git-scm.com/ is pretty bad for me :( is there some GUI for it ?
06:29  ruby_on_tails: ok i guess http://hoth.entp.com/output/git_for_designers.html is gonna help
06:30  SethRobertson: Read the ProGit book (or is is GItPro)  whichever
06:31  SethRobertson: you probably want to use github for hosting
06:38  frogonwheels: banisterfiend: the dev branch
06:39 --- carutsu_ is now known as carutsu
06:48  ruby_on_tails: that guide is cool
06:48  ruby_on_tails: now i got more knowledge
06:48  ruby_on_tails: so anyone here using gitk ?
06:49  frogonwheels: ruby_on_tails: I use gitk all the time.
06:49  ruby_on_tails: i think i will make a dummy git project now
06:58  ruby_on_tails: i can setup a code repositry on my own computer right ?
06:58  ruby_on_tails: and edit it from another folder and test ?
07:13  ruby_on_tails: i just installed gitk and cant find it in my menu
07:13  ruby_on_tails: :(
07:21  DrNick: it doesn't have a menu icon
07:22  ruby_on_tails: DrNick: i just cloned something from github, unable to do anything or open gitk with it
07:31  ruby_on_tails: i get an error cant find a repository here
07:38  ruby_on_tails: voila
07:38  ruby_on_tails: i could start it :D
08:19 --- ivey is now known as ivey_off
08:55 --- yaotti_aw is now known as yaotti
09:29 --- joshsmith_ is now known as joshsmith
09:56 --- joshsmith_ is now known as joshsmith
09:59  ruby_on_tails: hi
09:59  ruby_on_tails: i created a branch of my project and in a file i added some text
10:00  ruby_on_tails: then i merged the branch with the master but in the master version that file doesnt have the additional text
10:00  ruby_on_tails: why ?
10:00  Bombe: ruby_on_tails, what exactly did you merge into what?
10:01  ruby_on_tails: i had created a new branch called testbranch
10:01 -#git- OpenMike: HI EVERYONE! JOIN #MATH NOW!! JOIN #MATH NOW!! EVERYTHING YOU WANT THE BADDEST ASS CHANNEL ON FREENODE! JOIN #MATH NOW!! JOIN #MATH NOW!! EVERYTHING YOU WANT THE BADDEST ASS CHANNEL ON FREENODE! JOIN #MATH NOW!! JOIN #MATH NOW!! EVERYTHING YOU WANT THE BADDEST ASS CHANNEL ON FREENODE! JOIN #MATH NOW!! JOIN #MATH NOW!! EVERYTHING YOU WANT THE BADDEST ASS CHANNEL ON FREENODE!
10:01  ruby_on_tails: then i edited the index.html in that branch and did git merge testbranch
10:01  ruby_on_tails: OpenMike: ?
10:01  Bombe: ruby_on_tails, on which branch did you do the merge? Did you checkout master first and then merged testbranch?
10:02 -#git- OpenMike: HI EVERYONE! JOIN #MATH NOW!! JOIN #MATH NOW!! EVERYTHING YOU WANT THE BADDEST ASS CHANNEL ON FREENODE! JOIN #MATH NOW!! JOIN #MATH NOW!! EVERYTHING YOU WANT THE BADDEST ASS CHANNEL ON FREENODE! JOIN #MATH NOW!! JOIN #MATH NOW!! EVERYTHING YOU WANT THE BADDEST ASS CHANNEL ON FREENODE! JOIN #MATH NOW!! JOIN #MATH NOW!! EVERYTHING YOU WANT THE BADDEST ASS CHANNEL ON FREENODE!
10:02 --- ChanServ sets modes [#git +o werdan7]
10:02 --- werdan7 sets modes [#git +q *!*@66-168-255-112.static.mtgm.al.charter.com]
10:02 --- werdan7 sets modes [#git -o werdan7]
10:02 --- yaotti is now known as yaotti_aw
10:02  ruby_on_tails: Bombe: no i checked out testbranch, added some text in the index.php and did a git merge testbranch
10:03  ruby_on_tails: Bombe: i need to checkout master first before mergin ?
10:03  Bombe: ruby_on_tails, that will do nothing. :)
10:03  Bombe: ruby_on_tails, if you want to merge the changes from testbranch into your master branch, then yes, you need to checkout master first.
10:03  ruby_on_tails: ok
10:03  ruby_on_tails: but the gitk shows nice mergers
10:04  Bombe: ruby_on_tails, merging the branch you are on into itself will not do anything.
10:04  ruby_on_tails: hmm
10:05  ruby_on_tails: Bombe: i gt a conflict
10:06  Bombe: ruby_on_tails, that can happen.
10:06  ruby_on_tails: i had added some new lines of code in the testbranch indx.html and merged it with master being in the master branch and it shows a conflict and has put head comments in the index.php
10:06  ruby_on_tails: of master branch
10:07  ruby_on_tails: Bombe: what can be the reason ? i had just added some text
10:08  Bombe: ruby_on_tails, you are not telling everything. If you change a file on one branch only and do not modify it in the other branch, there can be no conflict.
10:08  ruby_on_tails: i didnt modify it in the master branch
10:08  ruby_on_tails: i am sure
10:08  ruby_on_tails: i will try again
10:09  Bombe: Retrying the merge without doing anything different will not yield different results.
10:09  ruby_on_tails: is there a way to remove the merge failed comments from the file automativally ?
10:09  Bombe: What comments from what file?
10:09  Bombe: The merge conflict markers?
10:10  tango_: you're supposed to fix the conflicts by selecting which part you want and then commit the result
10:12  leo2007: what cool things can you do with `git replace'?
10:13  ruby_on_tails: Bombe: ye
10:13  ruby_on_tails: ok
10:31  ruby_on_tails: Bombe: so if i create a branch test from master and edit the master as well as branch's index.php and then try to merge it will create conflict ?
10:32  Bombe: ruby_on_tails, not necessarily. If both modifications are far enough apart in the file a merge can happen without interaction. Otherwise you have to merge manually.
10:33  ruby_on_tails: Bombe: i removed one line from master index and added a list in test index and merged
10:34  Bombe: ruby_on_tails, as said, if those modifications are distant enough from one another, e.g. line 15 removed, line 254 added, that can work.
10:37  ruby_on_tails: oh distant in line numbers...aah ok
10:37  ruby_on_tails: Bombe: yes the edits were very close
10:37  ruby_on_tails: same line stuff
10:38  Bombe: Okay, that is very likely to result in a conflict, yes.
10:39  Bombe: And because Git does not know which change is the preferred one, you have to choose.
10:40 --- yaotti_aw is now known as yaotti
10:43 --- mitch_ is now known as Guest39727
10:44  ruby_on_tails: Bombe: cool got it :D
10:45  Bombe: ruby_on_tails, fine. :)
10:52  ruby_on_tails: Bombe: is there a way to test both the branches in my browser ?
10:52  ruby_on_tails: simultaneously
10:52  Bombe: ruby_on_tails, install your application twice?
10:52  Bombe: How should I know?
10:52  Bombe: I have no idea what you are doing. :)
10:52  ruby_on_tails: like i edited and saved test branch
10:53  ruby_on_tails: and there is a master branch
10:53  ruby_on_tails: both are different
10:53  ruby_on_tails: when i switch a branch i only see that branch's files in my folder
10:53  ruby_on_tails: so on the browser also i see the branch thats on currently
10:53  ruby_on_tails: what if i want to compare it with the master branch in the browser ?
10:54  Bombe: This question does not even make sense. Are you sure you are a programmer and not a project manager or something like that?
10:54  Bombe: How do you want to test two version of one file at the same time?
10:55  ruby_on_tails: Bombe: i am a coder :P i thought there is some url throught the .git folder leading to different versions saved in different folders which i can run in the browser
10:56  drizzd_: ruby_on_tails: no, that's how svn works I think, but not git
10:56  drizzd_: ruby_on_tails: you can have multiple working directories which show different branches, however
10:56  ruby_on_tails: yes how do i do that ?
10:57  drizzd_: either simply clone the repository, or use git-new-workdir (which you can find in git.git's contrib/workdir directory)
10:57  ruby_on_tails: hmm
10:57  ruby_on_tails: got it
10:58  drizzd_: ruby_on_tails: and if it's only for a single file, you can always create a temporary copy using git show version:file >copy_of_file
10:58  ruby_on_tails: drizzd_: hmm
10:58  drizzd_: for anything smarter than that, you'd have to write scripts anyways
10:59  drizzd_: there are probably some scripts available for web development with git which already have such a feature
10:59  ruby_on_tails: hmm
11:33  ruby_on_tails: hi
11:33  ruby_on_tails: is there a system where if i am editing a file someone else cant edit it ?
11:33  tango_: no because each developer has its own repository
11:33  ruby_on_tails: i would like to have that functionality instead of branches and merging
11:34  ruby_on_tails: whatever file a person is editing should be locked and the other person can edit other stuff
11:48  virtualsue: i cloned git via git clone git://git.kernel.org/pub/scm/git/git.git, and was surprised to find that i ended up with a git directory along with a hardlink to this called 'Git'
11:48 * virtualsue tries cloning something else
11:50  sitaram: hardlink to a *directory*?
11:50  virtualsue: yes. evidently os x supports this
11:51  tuxillo: hi
11:51  crab: that seems very strange
11:52  virtualsue: agreed
11:59  jetienne: q. when i go a "git reset --hard" i still have untracked file in the working directories, can i get rid of them ?
11:59  jetienne: in a better manner than deleting them all by hand i mean :)
12:10  accel: what is a good way of tying together: git, unit tests in git, bug fixes & git commits ?
12:10  accel: I want to tie together things like "unit test XYZ used to fail; commit ABC fixes XYZ", but it's weird since XYZ is also in git
12:12  virtualsue: http://stackoverflow.com/questions/4414810/git-clone-of-git-itself-creates-git-dir-which-is-hardlinked-to-git  in case anyone has any ideas
12:14  tuxillo: does anybody know how I can see the commits belonging to a merge?
12:16  drizzd_: tuxillo: if git log <merge commit>..<commit> is empty, that commit is part of the merge
12:17  tuxillo: hmm
12:17  tuxillo: so I have to do it manually
12:18  drizzd_: virtualsue: hmm, never heard of a hardlinked directory
12:18  drizzd_: I don't think linux supports that
12:18  tango_: i think it's up to the filesystem rather than the o/s
12:18  drizzd_: tuxillo: as opposed to?
12:18  virtualsue: linux is not the only unix in the world
12:19  drizzd_: I'm just saying - git uses hardlinks in some cases, but what you're talking about is different
12:20  cbreak: I think the only FS that supports hard linked directories is Mac OS X' HFS+
12:20  cbreak: and normal users can't create them
12:20  virtualsue: i have 2 directory entries with the same inode, if i remove one they both go
12:20  cbreak: doesn't sound like a hard link
12:20  drizzd_: virtualsue: and this only happens for git.git?
12:20  cbreak: if you have a hard link to a thing, you can delete them independently without affecting the other
12:21  tuxillo: drizzd_: as opposed to some automatic way of checking which commits belong to a merge you specify
12:22  tuxillo: whicfh I haven't found yet
12:22  tuxillo: *which
12:22  tango_: I wonder if the mac osx tools wipe hardlinks to directory when they have the same parent
12:23  cbreak: no
12:23  cbreak: afaik, the only tool that deals with directory hard links is Time Machine
12:23  drizzd_: tuxillo: I don't get what you're saying. Do you want a list of all commits that belong to a merge? What should trigger this 'automatic' event?
12:24  cbreak: git log shows all commits that belong to a merge :)
12:24  virtualsue: i've only noticed it with git.git
12:26  Milosz: hello
12:26  Milosz: we have the following problem with pushing to github
12:26  drizzd_: virtualsue: well, it should not behave any different from other repos. Very strange.
12:26  Milosz: I know it's maybe a bit lot to ask, but we would be very glad if someone could help us out
12:26  tuxillo: drizzd_: yes, that's what I want. but I don't know which should trigger it
12:26  Milosz: this is the result of "git push": http://codepad.org/6ES8QiwM
12:26  drizzd_: tuxillo: git log <merge commit> shows you a list of all commits that belong to the merge
12:26  cbreak: virtualsue: anyway, it's not a hard link
12:27  tuxillo: k, let me try
12:29  drizzd_: tuxillo: but I wonder about your definition of "belongs to a merge". Possibly you only want commits that are contained after the merge, but did not exist in at least one of the branches before the merge?
12:29  tuxillo: a merge can introduce a bunch of commits, right?
12:29  cbreak: drizzd_: the only commit this applies to is the merge commit
12:29  cbreak: all others existed previously
12:30  tuxillo: I want to know those commits
12:30  cbreak: no, it only creates ONE SINGLE commit
12:30  cbreak: it's the one that is in HEAD after the merge
12:30  drizzd_: cbreak: no, not all commits "existed" in all branches
12:30  cbreak: all others existed in at least one of the branches
12:31  cbreak: merge does NOT rewrite history
12:31  drizzd_: yes, and some commits probably did not exist in at least one of the branches
12:31  cbreak: all it does is create one single new merge commit with all the branch heads as parent
12:31  tango_: tuxillo: you want to know the history of the second parent of the merge, basically
12:32  cbreak: no, ALL existed in AT LEAST ONE of the branches
12:32  tango_: or rather all the non-first-parent
12:32  drizzd_: tuxillo: what you probably want is git log <merge commit>^1..<merge commit>^2
12:32  drizzd_: cbreak: you're not reading me
12:32  cbreak: as I said, Merge does NOT create any commit appart from the merge commit
12:32  cbreak: all others existed previously
12:32  cbreak: it's very simple to understand :/
12:32  tango_: I think you're fighting over semantics, you're saying the same thing
12:33  tango_: at least cbreak and drizzbd
12:33  tuxillo: drizzd_: let me try it
12:33  virtualsue: it's weird
12:33  drizzd_: cbreak: yes, but you're talking about something else entirely
12:33  cbreak: no.
12:33  cbreak: I say: merge does not create new commits
12:34  drizzd_: cbreak: and nobody ever doubted that
12:34  cbreak: you say "some commits probably did not exist in at least one of the branches". All commits existed.
12:34  tango_: cbreak: I read "some commits probably did not exist in at least one of the branches" reads to me as "there are at least a commit and a branch such that the commit did not belong to the branch"
12:34  tango_: which is very likely correct, since otherwise you'd have a FF
12:34  cbreak: no
12:35  cbreak: all commits existed in at least one of the branches
12:35  tango_: yes
12:35  tango_: but not in all branches
12:35  cbreak: of course not
12:35  tango_: so they did not exist in at least one of the branches
12:35  tango_: if I have commit SHA1 in branch B1 but not in branch B2 then commit SHA1 did not exist in branch B2
12:36  tango_: so it did not exist in at least one branch
12:36  cbreak: but it did exist in at least one of the branches!
12:36  tango_: but it also did NOT exist in at least another of the branches
12:36  cbreak: ... english sucks...
12:36  doener: some vs. any
12:36  tango_: you keep thinking of "did not exist in at least one branch" as "did not exist in ANY branch"
12:36  tango_: whereas it is "there exist at least one branch where that commit did not exist"
12:36  cbreak: that's what it means :/
12:37  cbreak: anyway
12:37  tango_: as I said, you were fighting over semantics
12:37  cbreak: did you look at git merge-base?
12:37  tango_: anyway, I think tuxillo wants the log of the non-first parents
12:37  doener: but the merge doesn't change that anyway, unless it is a fast-forward
12:37  tango_: i.e. the commits that were not in the first branch
12:38  tango_: i.e. the commits introduced to the first branch by the merge ;-)
12:38  tango_: as in "after the merge, those commits are also parts of the first branch"
12:38  tango_: (they existed already, yes, in other branches)
12:38  cbreak: $(git merge-base HEAD^2 HEAD^1)..HEAD^2
12:39  cbreak: or something like that
12:39  cbreak: there are probably easier ways to write that
12:39  drizzd_: or HEAD^..HEAD
12:39  doener: HEAD^1..HEAD^2
12:39  cbreak: hmm... maybe HEAD^1...HEAD^2
12:39  virtualsue: if it's not a soft link or a hard link, what izzit
12:39  cbreak: if it WERE a hard link, you could delete one and the other would still exist
12:39  banisterfiend: how do i tag a specific commit?
12:40  cbreak: maybe your Filesystem is just corrupted :)
12:40  cbreak: banisterfiend: git tag commit
12:40  virtualsue: i think not
12:40  tango_: virtualsue: are you in the backup filesystem by any chance? 8-D
12:40  doener: banisterfiend: git tag <name> <commit>
12:40  drizzd_: I thought OS/X file systems are case insensitive?
12:40  cbreak: they are
12:40  tango_: maybe the Git is introduced by mac os x to allow both writings
12:40  cbreak: unless  you turn that feature off
12:40  drizzd_: so how can there be both "git" and "Git"?
12:41  tango_: virtualsue: what filesystem are you on?
12:42  jetienne: q. when i go a "git reset --hard" i still have untracked file in the working directories, can i get rid of them ?  in a better manner than deleting them all by hand i mean :)
12:42  Bombe: git-clean.
12:43  cbreak: jetienne: git clean removes untracked. git reset ONLY touches tracked
12:43  jetienne: cbreak: thanks
12:43  virtualsue: hfs
12:44  banisterfiend: if im in a dettached head state, how do i prefer to the current commit im on?
12:45  banisterfiend: is there a shorthand? or i must use the commit sha?
12:45  cbreak: HEAD
12:49  virtualsue: this is some mac perversion. i knew that moving to the dark side would eventually bite me somewhere
12:49  cbreak: nah :)
12:49  cbreak: user error
12:49  cbreak: I never had such problems :)
12:54  banisterfiend: how do i push tags again?
12:54  banisterfiend: all of them in one go?
12:54  gebi: banisterfiend: git push -h |grep tag
12:55  banisterfiend: nah
12:55  banisterfiend: there's a better way than that
12:55  sven^: I saw some youtube video where that guy had a script showing him the actual branch in his shell at the end of the prompt. Is there some place to look for stuff like that or do I have to code it myself?
12:56  banisterfiend: gebi: git push -tags
12:56  drizzd_: sven^: which shell are you using?
12:56  banisterfiend: git push --tags even
12:56  sven^: right now bash
12:56  drizzd_: then have a look at <HEAD:contrib/completion/git-completion.bash>
12:57  drizzd_: sven^: http://git.kernel.org/?p=git/git.git;a=blob;f=contrib/completion/git-completion.bash
12:58  sven^: ty, drizzd_
12:58  drizzd_: you can download it from here, or just clone git.git. http://git.kernel.org/?p=git/git.git;a=blob_plain;f=contrib/completion/git-completion.bash
12:58  virtualsue: cbreak: i would love it if you pointed out the error
12:59  cbreak: I would if I knew ;)
12:59  gebi: banisterfiend: it was rtfm and seems you have done exactly that ;)
12:59  drizzd_: virtualsue: what happens if you clone the repo again locally?
12:59  drizzd_: also try using the file:// path to avoid local clone optimizations
13:00  cbreak: git:// has no such optimization.
13:00  drizzd_: cbreak: do you always read only the last line you see?
13:00  cbreak: no. He said he used git://. A long time ago.
13:01  drizzd_: cbreak: 13:00 < drizzd_> virtualsue: what happens if you clone the repo again locally?
13:01  cbreak: so I doubt that local clone optimisation has anything to do with that
13:02  drizzd_: cbreak: that's exactly why I want to avoid those optimizations
13:03  gebi: git clone --no-hardlinks
13:04  drizzd_: gebi: that still uses different code paths than git://
13:04  drizzd_: or file://
13:06  gebi: it shouldn't do any non obvious optimizations but you can always use git daemon from your local repo and clone it from there
13:07  gebi: i've this alias: serve = !sh -c 'git daemon --reuseaddr --verbose \"$@\" --base-path=. --export-all ./.git' sh
13:08  gebi: i couldn't resist from the old mercurial days where exporting a single repo was a no brainer
13:10  cbreak: it's not actually hard in git either. just make one. :)
13:11  gebi: cbreak: it's at least not that simple as 'hg serve' from the repo you want to export and be done
13:11  cbreak: all my repos are exported via ssh
13:11  gebi: but the alias also works for quick lan hacking
13:11  cbreak: don't need to serve or what ever
13:11  gebi: cbreak: yes, BUT
13:12  gebi: it's about quick lan hacking, no config, no server, and no account on my machine for anyone
13:13  wentasah: Hi, I'm getting strange errors from git and git fsck says: fatal: loose object 6a7ad4ccf3f580d7257b1c6a7c0eaa31fdca5af9 (stored in .git/objects/6a/7ad4ccf3f580d7257b1c6a7c0eaa31fdca5af9) is corrupted
13:13  wentasah: and git hash-object -w cannot fix it.
13:15  drizzd_: wentasah: you can try this https://git.wiki.kernel.org/index.php/GitFaq#How_to_fix_a_broken_repository.3F
13:15  wentasah: drizzd_: Thanks, I'll look there.
13:38 --- scholtz is now known as QuiltPants
13:40 --- QuiltPants is now known as scholtz
14:40 --- khmarbaise_ is now known as khmarbaise
14:47  viric: Bon dia
14:47  viric: Question about having multiple git checkouts in different computers...
14:47  viric: Let's say I have a repository upstream (internet), and I want four computers with a copy of the repository.
14:47  viric: A checkout.
14:48  viric: As 'git' keeps the 'origin/' tree for branches, I don't find a way other than hierachical to interchange commits
14:48  viric: So, either the 4 computers have the 'origin' as the internet repository...
14:48  viric: or I set one of the 4 local computers to be the only having 'origin' as the internet repository, and the other three have 'origin' at this local computer
14:48  viric: Is there a way I can have all not-hierarchical?
14:49  patrikf: viric: you can have multiple remotes, not just one...
14:49  patrikf: "origin" is just a convenience setup done by git clone
14:49  viric: hmm
14:50  viric: but I find it hard to push and pull...
14:50  viric: So I have computers A, B, C and D.
14:50  viric: And I as the internet
14:50  viric: You mean that I could have in any computer a remote for 'I'
14:50  viric: and a remote for each other computer
14:50  IRConan: yes
14:50  patrikf: on every repo, you can have remotes for every other
14:51  patrikf: and then fetch from them, merge... as you like
14:51  viric: I make a change on D, then I can push it to C, C can push it to I, and D can update from I without trouble
14:51  patrikf: (just don't push to repos that are not bare)
14:51  patrikf: viric: pushing is bad, do it from the receiving side
14:51  patrikf: (or set up bare repos)
14:51  viric: So, C can get the change from D, C can push it to I, and D can pull from I without trouble
14:52  IRConan: yeah
14:52  patrikf: yeah
14:52  nevyn: so I like non bare repos.
14:52  IRConan: this is the beauty of distributed VCS :P
14:52  nevyn: but then I abuse git as a publishing mechinism using hooks.
14:52  viric: And if C had a change still not on I, I would have a fork on C. Then I can merge it, push to I, and then D get the changes. Right?
14:53  ptl: I just created a GIT repository from my subversion tree on my personal server and I want to access it from my laptop. I am not yet too acquainted with git concepts. I access my server via ssh port 660, ssh -p 660. Should I use 'git clone' commands? If so, with which parameters?
14:53  patrikf: viric: sounds right
14:53  ptl: directory is /data/gitroot
14:53  viric: nevyn: well in other systems like mercurial or fossil, I find it trivial to push and pull here and there
14:53  IRConan: git clone ssh://serverName:660/data/gitroot
14:53  ptl: server is, let's say, something.org
14:53  viric: patrikf: ok.
14:54  ptl: IRConan: as easy as that? Thanks, I'll try
14:54  ptl: wow.
14:55  ptl: It worked.
14:55  viric: is a git upstream repository usually going to accept a fork+merge, if I leave only one head?
14:55  viric: (without any --force or things like that)
14:55  IRConan: just make sure you've merged locally so that the change yuo push is a fast-forward
14:55  viric: I mean, pushing forks and merges is not any problem, as long as I leave one head, right?
14:56  IRConan: so pull before any push
14:56  patrikf: viric: not sure what you mean. whatever you push has to fully contain the history on the remote side (for each branch you push)
14:56  viric: sure
14:56  IRConan: and merge changes locally
14:56  viric: Yes, I mean a local merge
14:56  IRConan: in which case yes
14:56  IRConan: you can push to the remote
14:56 --- yaotti is now known as yaotti_aw
14:57  viric: 'fast-forward' stands for moving the head to a single clear children of the previous head, right?
14:57  viric: child
14:57  viric: not children
14:58  IRConan: it means that the change you're push/pulling shares teh same history
14:58  IRConan: as the remote
14:58  viric: ok
14:59  IRConan: basically you jsut have to pull before you push
14:59  IRConan: and merge if nec.
15:05  viric: What is bad in 'pushing', that patrikf recommended pulling?
15:05  cbreak: nothing is bad
15:05  viric: I imagine he had in mind something he does not like on pushing :)
15:06  cbreak: pushes NEED to be fast forward
15:06  cbreak: because anything that is not fast forward needs merging (or forcing)
15:07  viric: cbreak: but if people pulling from where I pushed do not mind having multiple heads... there is not anything beyond that, right?
15:08  cbreak: you are not making sense
15:08  cbreak: a branch has only one head commit
15:08  viric: ahm.
15:08  viric: ok.
15:09  viric: what is the alternative to "merging"? what you said "forcing"
15:09  cbreak: not alternative
15:10  cbreak: alternative is rebasing
15:10  viric: but you said 'forcing'
15:10  cbreak: aka history rewriting
15:10  drizzd_: well, throwing away your changes is also an option
15:10  cbreak: yeah, but that's not an alternative
15:10  cbreak: it's something else
15:10  viric: is it about leaving some commits as child of others, but no branch pointing to them?
15:10  cbreak: no
15:10  viric: hm
15:10  cbreak: forcing is just killing what ever is there now
15:10  cbreak: and replacing it with yours
15:10  cbreak: you can do it. I do it all the time
15:11  cbreak: but don't do it if the repo is used by other people
15:11  viric: ah ok.
15:11  viric: but it would not be 'killing'. Those commits will still be available in history, although not in any branch, right?
15:11  cbreak: no
15:11  viric: someone could merge them later
15:12  cbreak: they are garbage
15:12  cbreak: they will be garbage collected
15:12  viric: because no branch points to them
15:12  viric: is it?
15:12  cbreak: don't rely on stuff that's garbage to stay around
15:12  viric: I understand
15:13  viric: where can I find a definition of what 'git' considers garbage?
15:13  cbreak: unreferenced
15:14  bremner: 'git for computer scientists' may help
15:14  drizzd_: viric: yes, if something does not have any tags or branches pointing to it (aka unreachable), it may be removed eventually
15:14  cbreak: man page to git fsck? :)
15:15  viric: but let's say the commit A has two childs, B and C. only C is referenced as branch head, but B not. B "is garbage".   Couldn't B be referenced through "first child of the parent of C" ?
15:16  viric: I mean that there may be some strict definition of reachability I'm not aware of
15:16  drizzd_: viric: no, git never has any references forward in history
15:16  viric: ahh
15:16  cbreak: it makes no sense to speak of children
15:16  cbreak: git commits do not have children
15:16  viric: ok, only parents.
15:16  cbreak: they are IMMUTABLE
15:18  viric: they can be even signed, I understand
15:19  viric: so those signed cannot be easily 'rebased'. Do I understand it right?
15:20  cbreak: you can
15:20  cbreak: but the signature is only for the original
15:21  viric: ah ok.
15:21  ryrych: hi
15:22  ryrych: I want to pull project but get this: fatal: Not a git repository (or any of the parent directories): .git
15:22  ryrych: it's on github
15:22  cbreak: do you have a repository?
15:23  cbreak: you can only pull from repositories
15:23  ryrych: actually it's my project and I want to do some tests with creating github pages
15:24  ryrych: cbreak: I copy this url: git@github.com:ryrych/rcarousel.git and blah, it doesn't work :(
15:24  cbreak: do you have a repository?
15:24  cbreak: git says: No, you do NOT
15:26  ryrych: cbreak: sorry for dumb question but what I have to do then? :)
15:26  cbreak: use clone instead of pull
15:26  cbreak: clone creates a new repository based on one that is remote
15:27  ryrych: ah, I'm stupid haha :D
15:27  ryrych: cbreak thanks :)
16:00  lancerforhire: Good morning :)
16:00  lancerforhire: How do I completely wipe the commit history and files of my remote repo? I just want to start fresh.
16:03  SethRobertson: You could try deleting all of the branches and tags if you cannot log into the remote system
16:05  lancerforhire: `git-branch -d master; git-branch master; git-push`?
16:06  SethRobertson: `git push origin :branchtodelete`
16:07  cbreak: also for each tag
16:09  lancerforhire: `git push origin master` "Everything is up to date."
16:09  lancerforhire: no changes on the remote repo
16:09  drizzd_: lancerforhire: heh, the syntax you used before makes me feel nostalgic
16:10  SethRobertson: You should re-read my message
16:11  lancerforhire: drizzd_: sh?
16:11  lancerforhire: SethRobertson: ah, added the colon
16:12  drizzd_: lancerforhire: no the git-dash-command syntax. we haven't had that since 1.6
16:12  lancerforhire: oh :p
16:13  lancerforhire: it looks like im not allowed to delete the current branch @@
16:14  lancerforhire: because the next 'git clone' will result in no files being checked out
16:14  SethRobertson: Put your local repository in order and then you can do a force push or create another branch and then delete the first
16:15  SethRobertson: Remember to do the remote fetch that deletes your remote tracking branches that have been deleted on the remote
16:16  lancerforhire: Just put my local repo in order; doing force push
16:17  drizzd_: But that's kind of a bug, isn't it? Shouldn't git allow you to wipe everything remotely?
16:25  tangledhelix: I use git submodules under my vim tree to handle plugins. I have one plugin that I've forked on github to fix something, and it works as long as i 'git checkout master'. but if i 'git submodule update' in the master repo, it goes back to '(no branch)' and my changes vanish. therefore my fixes disappear
16:26  lancerforhire: --force / -f does not work when I try to push
16:26  lancerforhire: still get error message
16:27  lancerforhire: how do I create another branch, delete the first, then rename the new one to master?
16:27  SethRobertson: tangledhelix: Wouldn't happen if you use gitslave, but did you in your submodule check out to the tip of master, apply you fixes, and then update teh submodule for your changes?
16:27  SethRobertson: lancerforhire: faq push-f
16:27  jast: lancerforhire: If you use push -f, others might get into problem when pulling: please see https://git.wiki.kernel.org/index.php/GitFaq#push-f [automatic message]
16:27  lancerforhire: what is the proper way to do it? I tried and failed
16:27  lancerforhire: I read that
16:28  SethRobertson: What was the error text exactly
16:28 --- Sajaki_ is now known as Sajaki
16:29  tangledhelix: SethRobertson: the submodule is a read-only https from github. i made the changes in another area using my ssh github remote, pushed, the changes are in master like i usually use in repos. and if i'm in master in the submodule when i pull, it works fine. it's just that git submodule update kicks me out of the master branch for some reason, and the changes aren't there. i don't know how to push to no branch (relatively new to git still)
16:29  lancerforhire: It's in a VM so I can't c/p, but it is pretty much saying I cannot delete the current branch (master) because if someone tried to clone they would get nothing.
16:30  tangledhelix: SethRobertson: (i use the https readonly from github because the master repo, my dotfiles, is also public on github and that way people can follow the linkage between them)
16:30  SethRobertson: tangledhelix: Update to the head of master on the submodule and then in the superproject do what you do to accept the current submodule SHA as the new head.
16:31  SethRobertson: lancerforhire: What command did you type?
16:31  lancerforhire: `git push origin :master`
16:32  tangledhelix: SethRobertson: sorry, i'm not sure how to do that... do you mean to make changes and 'git push HEAD origin/HEAD' or something? apologies, like i said, i'm new to this. i've only moved away from CVS in the past several weeks
16:32  drizzd_: tangledhelix: git submodule update does not do what you think it does
16:33  drizzd_: it does not get new changes from the submodule upstream
16:33  drizzd_: it just restores the state already committed to the super repository
16:33  tangledhelix: drizzd_: oh, i know that. i use 'git pull' in the submodule dir to get changes. but my master repo shows changes in the submodule until i git submodule update (so the master repo never shows clean until i do that)
16:33  SethRobertson: lancerforhire `git push -f origin master`
16:33  SethRobertson: You now want to overwrite, not delete
16:34  drizzd_: tangledhelix: by running the update, you are reverting the pull
16:34  drizzd_: you have to run git add
16:34  drizzd_: in the supermodule on the submodule
16:34  lancerforhire: SethRobertson: It cleaned the files properly, but the commit history is still there
16:35  drizzd_: tangledhelix: or you use update --rebase or update --merge
16:35  SethRobertson: lancerforhire: `git remote prune`
16:35  lancerforhire: it showed the the different uses
16:36  drizzd_: tangledhelix: but in any case, it's normal for the super module to show changes in the submodule, even if it's just upstream changes.
16:36  SethRobertson: git remote prune origin
16:37  lancerforhire: executed but no output
16:37  tangledhelix: drizzd_: thanks! git submodule update --merge was exactly what i needed
16:37  lancerforhire: no changes to commit history
16:43  SethRobertson: What is this "commit history" you are complaining about?  What comands do you use to see this history?
16:44  lancerforhire: commit messages
16:45  lancerforhire: I have a php-based repo browser
16:45  IRConan: can you check with git log in the repo?
16:45  lancerforhire: yeah, git log shows the same thing
16:46 --- ohcibi_ is now known as ohcibi
16:46  cbreak: which branch is not deleted?
16:46  cbreak: delete it.
16:46  lancerforhire: i can't
16:46  madsy: Hm. I have a question based on curiosity. If git can figure out moves based on the sha1 (names aren't a part of blobs), what's the use for git mv?
16:46  SethRobertson: lancerforhire: So why are you surprised?  If you failed to clean up your local repo before you pushed the branch out, it remote is not going to be cleaned up
16:47  lancerforhire: how do I clean the history?
16:47  SethRobertson: madsy: You don't have to use it.  Mostly completeness.
16:47  cbreak: just git push remotename :branchname
16:47  cbreak: then it'll be gone
16:47  cbreak: madsy: it's a wrapper around mv and git add
16:48  cbreak: and git rm
16:48  madsy: cbreak: Ah.. that made sense. Thank you.
16:49  SethRobertson: lancerforhire: `git checkout --orphan newbranch; create your initial commit; git branch -M nwebranch master; git checkout master; git push -f origin master`
16:49  SethRobertson: Or use `git reset` or `git rebase` or any of the other history rewriting commands
16:50  cbreak: can't you just remove HEAD?
16:50  cbreak: and then delete all branches
16:53  lancerforhire: `git rebase -i HEAD~7` and `git push -f origin master` did the trick
16:54  lancerforhire: thanks everyone :)
17:10  CestSebastian: ls
17:11  petisnnake: Hi. I have a debian distro. I can connect to gitweb via IP/git, how do I make my git private, so only some users can connect to it?
17:16  petisnnake: anyone?
17:18  bremner: petisnnake: use gitolite for example, or just ssh access+unix access controls
17:19  petisnnake: thanks
17:23  jack_spratt: how do I use the same commit message as was last used? ie duplicate the last commit message
17:24  cbreak: copy paste
17:24  cbreak: you want to confuse your users?
17:26  bremner: jack_spratt: man git-commit ; I think you want -c or -C
17:26  jast: jack_spratt: the 'git-commit' manpage can be found at http://git.or.cz/man/git-commit [automatic message]
17:35  petisnnake: I just installed a standard git installation. What is the next step to connect to that repo from another computer?
17:35  SethRobertson: The master repo should normally be bare, but `git clone` is how you make copies of repos (bare or otherwise)
17:36  jack_spratt: bremner, thanks!
17:42 --- napster_123_ is now known as napster_123
17:47  lindi-: is there some way to get a list of files that wouldn't exist after a clone?  "git status" is almost perfect but many projects use .gitignore. Maybe there's some cleaner way than "rm .gitignore; git status; git checkout .gitignore"? I'm mostly interested in making sure things like debian/rules clean really clean everything
17:55  cbreak: lindi-: man git-ls-files
17:55  jast: lindi-: the 'git-ls-files' manpage can be found at http://git.or.cz/man/git-ls-files [automatic message]
17:55  petisnnake: I have a fresh git installation. git clone works fine, git commit works fine, but if i try $git push origin, i gert the 'remote hung up unexpectadly error' . any ideas what I should do?
17:55  drizzd_: lindi-: git ls-files -o
17:56  cbreak: petisnnake: how did you clone?
17:56  cbreak: cloned a read only repo?
17:56  drizzd_: cloned via git:// ?
17:56  petisnnake: with $clone git:// ...
17:56  cbreak: git's read only
17:56  cbreak: you can not push (normally)
17:57  petisnnake: oh
17:57  petisnnake: what can I do then?
17:57  cbreak: not push
17:57  petisnnake: how do I get local files to the server repo?
17:57  drizzd_: use ssh://
17:57  cbreak: the error only appears when you push, so just don't do it ;)
17:57  cbreak: push to some repo that allows pushing
17:57  petisnnake: oh
17:57  petisnnake: how do I enable push in my repo then?
17:57  petisnnake: on my server
17:58  cbreak: set up a server that allows pushing. usually with ssh
17:58  cbreak: I heard some do smart http, but ... I don't think that's a good idea
17:58  petisnnake: cbreak : can't I just edit a config file?
17:58  cbreak: no.
17:58  cbreak: well
17:58  cbreak: you can edit config files
17:58  cbreak: but that won't change your situation
17:58  cbreak: unless you enable receive pack for git://
17:59  cbreak: which is a major security hole
17:59  cbreak: and I don't know how it's done
17:59  petisnnake: oh
17:59  petisnnake: so I have ssh, how do I enable it for git?
17:59  cbreak: already works
17:59  petisnnake: can you give me an example?
17:59  cbreak: if git's installed on the server
18:00  petisnnake: it is
18:00  cbreak: git remote add newremote ssh://server/path/to/git.git
18:00  petisnnake: oh, let me check that
18:04  {aaron}: hi guys, I want to track a large svn repo and maintain it (fork it) in git... i'm trying to figure out whether i want svn2git or git-svn
18:05  {aaron}: will both of these options give me git commit and merging features? or does git-svn have some limitation that svn2git overcomes?
18:05  cbreak: do you want to keep svn around?
18:05  {aaron}: it's not my project, so yes the authoritative svn repo will still exist
18:05  {aaron}: and i will need to pull updates
18:06  cbreak: git svn allows you to dcommit back to the svn hell
18:07  {aaron}: i probably won't want to commit, but as long as it's easy to create a patch from any point in the git repo at any point in time, that would be great
18:08  {aaron}: so would my work in git end up in git branches that I push based on the svn branches?
18:08  {aaron}: with git-svn
18:09  cbreak: svn doesn't support pushing or branches
18:09  cbreak: so with git-svn, you can only dcommit back
18:09  {aaron}: right
18:09  {aaron}: but i'm talking about where my work lives
18:09  cbreak: it rewrites history, so it probably destroys merges
18:09  cbreak: if you stay in git, you can use all of git as you want
18:09  {aaron}: if git-svn just sets up remotes, i assume I pull and then push to my own remote
18:09  {aaron}: ok
18:10  cbreak: but be aware that the git-svn meta data is not cloned or otherwise transfered
18:10  {aaron}: so i'd have to find the delta of where i started in SVN, and where i ended in Git and generate a patch for that
18:10  {aaron}: hmm :(
18:10  {aaron}: what do you refer to as meta-data?
18:10  cbreak: the stuff needed to dcommit back
18:11  cbreak: or communicate with subversion
18:12  {aaron}: ok, well i will probably have to play with it a little to understand how it works.  it seems git-svn is a little more lightweight.  i'm afraid of hammering the server if i try to svn2git clone it (entire history, for years, it's massive)
18:12  {aaron}: and in reality i will only be working on one branch at a time so i don't think i need everything
18:15  dodi: hi
18:16  dodi: what's the app name of git-gui on linux?
18:17  dodi: or how can I open an git browser from a directory browser?
18:19  cbreak: it's git gui
18:19  cbreak: also try gitk
18:19  cbreak: or get a mac and try gitx :)
18:19  dodi: gitk says "no repository here"
18:20  cbreak: maybe there's no repository there?
18:20  dodi: there is, but gitk opens it only when invoked from a console, inside the directory
18:20  dodi: I want to do the same, from a directory browser
18:21  cbreak: then cd into it, and run it
18:21  dodi: it should work easier
18:22  dodi: gitg opens from the context menu, but it lacks functionality
18:22  cbreak: do you expect gitk to read your mind?
18:22  cbreak: it can't know which repository you want it to show
18:22  dodi: no, it should be invoked as usual (like on Windows)
18:23  cbreak: on windows?
18:23  cbreak: how's it supposed to know which repository to show?
18:23  dodi: on Windows I have a context menu "Git Gui here"
18:24  cbreak: and how do you think it knows which repo you mean?
18:24  dodi: on Linux the "open with..." doesn't offer git-gui, and fails to invoke gitk properly
18:24  dodi: the repo from which the context menu was invoked
18:24  cbreak: because windows changes the working directory to that place... or passes it as argument
18:25  cbreak: so ... why don't you do the same instead of whining about the lack of mind reading capabilities?
18:25  AAA_awright: Is Git in any way able to sign individual commits?
18:25  cbreak: only annotated tags
18:25  cbreak: but that has more or less the same effect
18:26  AAA_awright: But if you are adding a tag per commit that can get a bit big
18:26  AAA_awright: Could you sign the SHA1 in a note?
18:26  cbreak: but if you add a note for each commit, that can get a bit big.
18:26  AAA_awright: That would be another ref though
18:32  clarkk: Now that I have pushed a branch to a remote, is it ok to delete that branch locally?  I won't lose it next time I push, will I?
18:32  clarkk: is there anything I need to be careful of before I do this?
18:32  cbreak: you can't push it anymore when you delete it
18:33  clarkk: ok so it's safe.  Great! thanks cbreak :)
18:34  clarkk: hmm, one thing I have noticed though is that files that I have not committed only show under one branch when I run git status
18:35  clarkk: I don't want to lose these files when I delete that branch
18:35  clarkk: I won't, will I?
18:35  cbreak: what?
18:36  cbreak: git status shows you three types of files
18:36  clarkk: these are untracked files
18:36  cbreak: untracked files do not belong to any branch
18:37  cbreak: so deleting branches does not influence them
18:37  lindi-: cbreak: drizzd thanks, git ls-files indeed seems to be what I need
18:38  clarkk: that's what I thought - they are important, but not part of the project, so I didn't want to lose them. Thanks cbreak
18:38  cbreak: just make backups if they are important :)
18:42  mebus: Hi! I don't have the .git inside my working directory, thus I cannot run git commands on the repository in my working-dir. Can I place something in the working dir, so that I can run git commands from there?
18:43  cbreak: the .git directory...
18:43  cbreak: or use --git-dir and --work-tree
18:44  cbreak: I think you can use a redirect file instead of the real .git, but I forgot how that works
18:45  drizzd: mebus: any reason for not using a regular clone?
18:46  petisnnake: Why do I get error: unable to create temporary sha1 filename ./objects/dd: Permission denied error when trying to push? Im in the owner's group of the repo on the server
18:47  cbreak: do you have write rights to that folder too?
18:47  cbreak: maybe it's rwxr-xr-x
18:48  mebus: drizzd: it's a website and I'm auto-checking-out with the post-receive hook.
18:54  petisnnake: cbreak im such an idiot, thanks
18:55  drizzd: mebus: so just use the same mechanism for other commands
18:56  petisnnake: cbreak: nvm, changed group rights to 7 and still doesnt work
18:56  petisnnake: same error
18:57 --- moo is now known as Guest56285
18:58  hvgotcodes: would git-tag be what i want to create a set of code i could easily go back to?
18:58  hvgotcodes: like to 'tag' a release
18:58  seyz: hi, I search a real real real complete tool for linux (a git gui)
18:58  seyz: on OS X, there is "gittower" but on linux... nothing
18:59  cbreak: petisnnake: is it a shared repo? man git-init --shared
18:59  jast: petisnnake: the 'git-init' manpage can be found at http://git.or.cz/man/git-init [automatic message]
19:00  cbreak: hvgotcodes: yes
19:00  petisnnake: cbreak: do I need to run that on the server or the client?
19:01  hvgotcodes: cbreak: ah i got it
19:01  cbreak: petisnnake: when creating the repo on the server
19:01  hvgotcodes: now can i tag a sha1?
19:01  cbreak: git tag name sha
19:01  hvgotcodes: because ive already started devving the next release
19:01  hvgotcodes: cbreak: thanx
19:01  petisnnake: cbreak: is there a way to check if it's shared already perhaps?
19:01  cbreak: cat .git/config? :)
19:01  petisnnake: or to make it shared without creating the repo all over
19:02  petisnnake: ah oki :)
19:02  Arrowmaster: its hard to make it shared without recreating it
19:02  cbreak: clone isn't that expensive
19:02  petisnnake: cbreak: which var in the config file? i have : repositoryformatversion, filemode, bare, logallrefupdates
19:02  cbreak: petisnnake: man git-config
19:03  jast: petisnnake: the 'git-config' manpage can be found at http://git.or.cz/man/git-config [automatic message]
19:03  cbreak: search for share
19:03  petisnnake: okay, thanks
19:05  petisnnake: so add core.sharedRepository = true to the config file?
19:05  petisnnake: cbreak?
19:06  cbreak: no
19:06  cbreak: that's half of it
19:06  cbreak: that won't fix the existing rights
19:06  Arrowmaster: the existing ones are rather difficult to fix
19:06  cbreak: I think it involves setting various sticky bits
19:06  cbreak: and umasks
19:06  cbreak: and such stuff
19:06  petisnnake: oh
19:06  Arrowmaster: it does, recursively, on every directory but only directories
19:07  petisnnake: so creating a new repo with git init --shared is the simplest option?
19:07  cbreak: yeah
19:07  cbreak: do not mix it up with git clone --shared, that's something completel different :/
19:07  petisnnake: oki, thanks so much!
19:10  patrikf: if you want to modify an existing repository, itsomething along the lines of: git config core.sharedRepository group; chgrp -R foo .;
19:11  patrikf: ... chmod -R g+rwX; find . -type d | xargs chmod g+s
19:16  bremner: is it possible to disable the newline added at the end of log --pretty="some format"
19:18  Arrowmaster: bremner: check the git-log man page, theres something in there about newlines i think
19:21  bremner: yeah, I found the -z option, but it doesn't do what I want
19:24  petisnnake: cbreak: I reininitialised the repo, I am even the owner of the dir, and i still get  ! [rejected]        master -> master (non-fast-forward) error: failed to push some refs to 'ssh://192.168.1.50/var/cache/git/repo'    error. What should I do?
19:28  petisnnake: and my friend who created the repo and assigned me as the owner can easily connect with np
19:29  petisnnake: anyone any ideas?
19:32  offby1: petisnnake: I haven't read all the scrollback, but when you see "non-fast-forward", that typically means that you need to do "git pull --rebase"
19:32  offby1: have you tried that?
19:37  petisnnake: no, trying it asap
19:37  petisnnake: thanks a lot
19:37  petisnnake: offby1: it says current branch is up to date
19:38  SethRobertson: Did you rewrite history?
19:39  petisnnake: no
19:39  matthiaskrgr: hello
19:39  petisnnake: btw I also get the error: unable to create temporary sha1 filename ./objects/a5: Permission denied error. but i dont understand how since im the owner of the repo dir
19:39  petisnnake: If I try to push ^
19:40  SethRobertson: petisnnake: `find . ! -user $USER` on the client and server
19:40  matthiaskrgr: I want to make a git patch that deletes images. I deleted the images with git rm *path*   will   git diff > patch     work?
19:41  SethRobertson: matthiaskrgr: git commit -a -m "Removing images"; then use man git-format-patch to create the patch for mailing
19:41  jast: matthiaskrgr: the 'git-format-patch' manpage can be found at http://git.or.cz/man/git-format-patch [automatic message]
19:41  petisnnake: SethRobertson: lots of results on server, none on client
19:42  SethRobertson: petisnnake: Fix the permissions/ownership on the server
19:42  SethRobertson: If it is a shared repo, look at man git-config under shared
19:42  jast: the 'git-config' manpage can be found at http://git.or.cz/man/git-config [automatic message]
19:43  petisnnake: wait doesnt the line you wrote only search in current dir?
19:43  petisnnake: which dir should I run that in?
19:46  cbreak: petisnnake: repo root
19:46  cbreak: petisnnake: master (non-fast-forward) is normal
19:47  petisnnake: cbreak: so what does the fact that I have over 50 results on server and none on client mean?
19:48  cbreak: it means there are over 50 on the server and none on the client that match the search query
19:49  petisnnake: I understand that. I was reffering to the implications on my server config
19:50  cbreak: check permissions of the folders and files that match
19:52  petisnnake: oki no more results on server, made myself owner, but now I get error: hooks/update exited with error code 1
19:52  petisnnake: error: hook declined to update refs/heads/master error
19:52  petisnnake: when trying to push
19:54  cbreak: check the hook
19:54  cbreak: hook says: rejecting push
19:54  petisnnake: and the main problem is if I give myself git ownership no one else can push cause of the same permissions error
19:54  petisnnake: i got previously
19:54  cbreak: do a git init --shared
19:54  petisnnake: i did that
19:55  cbreak: then all in the correct group should be able to access it
19:55  petisnnake: do I need to run git init --shared=33 for example?
19:56  cbreak: 33?
19:56  petisnnake: the group id
19:56  petisnnake: or simple git init --shared
19:56  cbreak: no
19:56  cbreak: --shared=group
19:57  cbreak: for example
19:57  petisnnake: ah ok
19:57  petisnnake: damnit
19:57  cbreak: man page says all about it
19:59  petisnnake: If i try to write $ git init --shared=sudo, i get a bad arg error
19:59  wereHamster: petisnnake: man git-init
19:59  jast: petisnnake: the 'git-init' manpage can be found at http://git.or.cz/man/git-init [automatic message]
19:59  wereHamster: petisnnake: --shared[=(false|true|umask|group|all|world|everybody|0xxx)]
19:59  wereHamster: never does it say you can use 'sudo' as the option for --shared
20:15  petisnnake: ok I initialized a new repo with $ git init --shared=group
20:15  petisnnake: cloned the repo on my client
20:16  petisnnake: and if i try to push I get the error: failed to push some refs to 'ssh://192.168.1.50/var/cache/git/tvdash'
20:16  petisnnake: To prevent you from losing history, non-fast-forward updates were rejected
20:16  petisnnake: Merge the remote changes before pushing again.  See the 'Note about
20:16  petisnnake: error
20:16  petisnnake: s
20:16  petisnnake: what the hell am i doing wrong
20:16  petisnnake: this is so frustrating
20:17  wereHamster: petisnnake: faq non-ff
20:17  jast: petisnnake: Your push would lose changes on the remote: please see https://git.wiki.kernel.org/index.php/GitFaq#non-ff [automatic message]
20:21  zangetsu: hi, i have creating new repository but after "git add ." the repository is broken (for bad index).. how to fix it?
20:23  zangetsu: git fsc --full don't print anything
20:23  zangetsu: *fsck
20:32  matthiaskrgr: hmm, now when I do  git svn rebase, there are always the changes of the patch applied somehow
20:32  matthiaskrgr: git svn rebase      [...]  Applying: Remove unused bullets
20:32  matthiaskrgr: how can I revert this
20:32  tobym: git revert asks for a numerical parent-number (-m). How do I find parent numbers?
20:32  matthiaskrgr: git reset --hard HEAD   && git clean -dfx   seems to fail
20:33  tobym: rtfm and google-fu has failed me
20:33  wereHamster: matthiaskrgr: what do you want to undo?
20:33  wereHamster: tobym: git log
20:33  tobym: matthiaskrgr: you cannot revert reset --hard as far as i know
20:34  matthiaskrgr: I want to get rid of the automatical applicaton of    remove unused bullets
20:34  tobym: wereHamster: the two hashes under the "Merge:" header?
20:34  wereHamster: matthiaskrgr: git rebase -i git-svn and then delete the line with that commit
20:34  matthiaskrgr: before I tried
20:34  matthiaskrgr: 19:41 < SethRobertson> matthiaskrgr: git commit -a -m "Removing images"; then  use man git-format-patch to create the patch for mailing
20:34  jast: the 'git-format-patch' manpage can be found at http://git.or.cz/man/git-format-patch [automatic message]
20:35  petisnnake: wereHamster: my push works well, I fixed the non-ff error. But If i log in with another user that is in the group of the owners of the git dir which has rwx rights, I still get a unable to create temp sha1 filename .... Permission denied. How is that possible?
20:35  SethRobertson: You can delete that patch with `git reset --hard HEAD^` if it is still the last patch `git log -n 1` will tell you
20:35  wereHamster: petisnnake: are both users in the same (primary) group?
20:36  petisnnake: wereHamster: both users (the one that works - but is also the owner) , and the one that doesnt work, are in a group called sudo
20:36  petisnnake: which is the owner group of the dir and has rwx perms
20:36  matthiaskrgr: wereHamster: worked :) thanks
20:37  matthiaskrgr: btw, the font color of that screen seemed to be forced
20:37  wereHamster: petisnnake: bah, I use gitolite instead of shared repos.. it's much easier to use and keep track of permissions
20:37  matthiaskrgr: I ususally use black background and white font, but the letters were still black there
20:37  wereHamster: matthiaskrgr: on which screen?
20:38  matthiaskrgr: maybe you can git somehow to obey the local terminal font settings for this situation :)
20:38  matthiaskrgr: wereHamster: git rebase -i git-svn
20:40  wereHamster: matthiaskrgr: I guess you're using the vi editor, so it's up to vi how it displays the font/colors
20:41  matthiaskrgr: possible, I don't know
22:06  hagabaka: if a binary file in the repository gets minor changes, does git download the entirety of the differnent versions of the file when cloning the repository, or does it use compression or something like xdelta to minimize download?
22:07  cbreak: depends
22:07  cbreak: git has a delta compression algorithm
22:07  cbreak: but I don't know how well that works for non-text files
22:09  kevlarman: hagabaka: depends on your definition of minor (and whether the file is in a compressed format)
22:11  hagabaka: hmm come to think of it the changes might not be minor when looking at the bytes, e.g. adjustments to an image or sound file which look or sound minor
22:12  Neurotiquette: Can git diff be used on a specific SHA, or does it have to be tagged first?
22:12  Neurotiquette: i.e. git diff [SHA]
22:12  kevlarman: hagabaka: exactly
22:12  kevlarman: compressed formats will will change heavily even for "minor" changes
22:13  cbreak: Neurotiquette: it can
22:15  Neurotiquette: cbreak: Thank you... Still in the learning curve, not got a nice stack of commits to play with yet :)
22:16  Neurotiquette: gitref.org is invaluable
22:16  hagabaka: does git compress the whole data for cloning then?
22:16  cbreak: yes
22:17  hagabaka: I wonder if it's possible or worth it for git to decompress known compressed file formats, so multiple versions of the files get compressed together in clones
22:19  hagabaka: gotta go for a while
22:34  Neurotiquette: Is there a way to set  git to use VI to write commit messages instead of this other weird editor it seems to prefer on my PC?
22:35  thelazydeveloper: I think this should do it: git config --global core.editor "editorhere"
22:35  cbreak: Neurotiquette: yes
22:37  hagabaka: you can also just set the EDITOR environment variable
22:43  wereHamster: or GIT_EDITOR
22:46  Neurotiquette: hagabaka: Like in .bashrc?
22:48  PovAddict: how do I check if a file exists in the index?
22:49  PovAddict: I'm trying to rewrite my disturbingly slow git-filter-branch --tree-filter as an index-filter
22:51  charon: PovAddict: git rev-parse --verify :path/to/file or so
23:06  PovAddict: can I do a "git mv" in the index?
23:06  cbreak: they always are
23:06  PovAddict: I mean without a checked-out tree
23:06  offby1: PovAddict: I think so: "git rm --cached ; git add"
23:07  offby1: PovAddict: oh, without a tree?  That, I doubt
23:07  cbreak: without a tree you won't have an index
23:07  wereHamster: PovAddict: rm --cached and update-index
23:07  wereHamster: cbreak: he probably means in the index filter
23:07  PovAddict: cbreak: "git rm --cached" can delete a file or directory without checking out
23:07  PovAddict: in a filter-branch index-filter
23:08  cbreak: yeah, but you still need an index
23:08  PovAddict: well I do have an index
23:08  wereHamster: PovAddict: git-mv is a wrapper around git-add + git-rm
23:08  PovAddict: wereHamster: I know that, but git-add relies on the files existing in the working tree, doesn't it?
23:09  wereHamster: PovAddict: hence my suggestion to use update-index
23:10  PovAddict: I think git-update-index gets messy... I'll just go back to my tree-filter, with a memdisk tempdir
23:10  wereHamster: why messy?
23:10  PovAddict: hard to use?
23:11  wereHamster: eh? SHA1=`git rev-parse :<path>`; git rm --cached <path>; git update-index --cachinfo 0644 $SHA1 <path>;
23:12  PovAddict: I'm moving a directory, not a file :/
23:12  wereHamster: same..
23:12  wereHamster: maybe you'll have to adljust the mode though
23:12  PovAddict: hmmm interesting
23:13  wereHamster: or maybe not... I forgot that the index only contains files :-/
23:13  PovAddict: heh
23:14  cbreak: it does seem more complicated than git mv
23:14  PovAddict: yeah, I'll keep my tree-filter :P it's quite faster if I use -d /dev/shm/filterbranch.tmp
23:15  wereHamster: oh, another idea: ls-files -s, rename the paths with sed and load the result into the index
23:30 --- BigBambi is now known as AlexP
23:52  itaylor57: has anyone installed gitolite on a solaris sparc?
--- Log closed Sun Dec 12 00:00:40 2010
