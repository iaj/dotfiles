--- Log opened Mon Dec 13 00:45:14 2010
--- Log closed Mon Dec 13 00:45:14 2010
--- Log opened Mon Dec 13 08:43:17 2010
08:43 --- Users 681 nicks [0 ops, 0 halfops, 13 voices, 668 normal]
08:45 --- Channel #git was synced in 122 seconds
08:45  frogonwheels: lightcap: hope you got it sorted - had kid stuff to do :)
08:45  lightcap: frogonwheels: I did, but I have a feeling it was really an ugly way to do it
08:46  lightcap: it involved force pushing and reset --hard HEAD^^ kinda stuff
08:46  frogonwheels: lightcap: I don't know what you did, but it was a yucky situation..
08:46  lightcap: ugly, but the job got done
08:47  lightcap: in the end I rebased, force pushed, then set the head back to the commit before the rebase, and pulled
08:51  silv3r_m00n: on ubuntu what editors support git ?
08:51  silv3r_m00n: so that I don't have to execute those commands at terminal ...
08:51  DrNick: you'd be better off learning your way around a shell prompt
08:51  silv3r_m00n: I need to use it for php web development
--- Log closed Mon Dec 13 09:27:00 2010
--- Log opened Mon Dec 13 09:42:20 2010
09:42 --- Users 688 nicks [0 ops, 0 halfops, 13 voices, 675 normal]
09:44 --- Channel #git was synced in 114 seconds
--- Log closed Mon Dec 13 09:49:19 2010
--- Log opened Mon Dec 13 09:54:43 2010
09:54 --- Users 692 nicks [0 ops, 0 halfops, 13 voices, 679 normal]
09:56 --- Channel #git was synced in 115 seconds
10:14  ruby_on_tails: is there some way to support git in gedit ? i use gedit to code
10:16  avar: gedit is a basic editor, it doesn't have integration with stuff like git afaik
10:16  Rhonda: ruby_on_tails: export EDITOR=gedit
10:16  Rhonda: or even git config --global core.editor gedit
10:17  ruby_on_tails: Rhonda: didnt get you
10:17  avar: I don't think that's what he means by "editor support" :)
10:17  Rhonda: You can use gedit as editor from git, but gedit itself has no internal git support.
10:17  ruby_on_tails: an other editor has it ?
10:18  Rhonda: I think there might be support scripts for vim and emacs.
10:18 --- MikhX_ is now known as MikhX
10:19  ruby_on_tails: kate ?
10:19  doener: for vim there's tpope's awesome fugitive plugin
10:34  sontek: I have a project on github and someone forked it and made a commit I want to push into mine, what is the best way to do that?
10:35  silv3r_m00n: in ubuntu how do I enable git:// uri ?
10:41  Rhonda: silv3r_m00n: What do you mean, "enable"?
10:42  avar: sontek: see github's docs and git's own docs for that
11:04  silv3r_m00n: hi there
11:05  silv3r_m00n: I create a repository by cloning a remote repository using ssh://  , then changed some files and then tried to push the changes back to the remote repository
11:05  silv3r_m00n: http://codepad.org/1Kj3EB7Q    pushing is failing , what is wrong here
11:06  Fatal: to me it looks like your user doesn't have write permissions to the repository
11:06  silv3r_m00n: it shud I think
11:06  silv3r_m00n: let me check
11:07  silv3r_m00n: yes it does have , confirmed
11:07  silv3r_m00n: this gives me lesser errors
11:07  silv3r_m00n: git push origin matching
11:08 --- yaotti is now known as yaotti_aw
11:09  doener: silv3r_m00n: most likely because you have no branch called "matching", so there is nothing to push
11:10  silv3r_m00n: there is a branch called origin I guess
11:10  silv3r_m00n: git push origin ... ?
11:10  doener: silv3r_m00n: that's the name of the remote...
11:10  silv3r_m00n: hmm , ok wait let me check again
11:10  doener: silv3r_m00n: and which permissions did you check? The problem usually is with some sub-directory of the objects/ directory
11:11  silv3r_m00n: /var/www/ has write permission for all
11:11  silv3r_m00n: and in remote repository I created a branch called origin
11:12  Fatal: silv3r_m00n: and what's sharedRepository set to in the remote repositories config?
11:12  doener: silv3r_m00n: /var/www isn't even inside the repository...
11:13  silv3r_m00n: the repository is at /var/www/test/.git
11:13  doener: I know
11:13  silv3r_m00n: Fatal: and how to check that
11:13  Fatal: I've seen several times people not setting sharedRepository right, and it works fine until several users start playing with the repository
11:13  doener: so you checked the permissions on the completely wrong path
11:13  Fatal: silv3r_m00n: cat config
11:14  doener: and the repo isn't even bare...
11:14  silv3r_m00n: in which directory ?
11:14  Fatal: silv3r_m00n: cat /var/www/test/.git/config
11:14  silv3r_m00n: doener: yes it isn't bare I think , what does bare mean by the way
11:14  doener: silv3r_m00n: that it is just the repo, without a working tree
11:14  silv3r_m00n: Fatal: http://codepad.org/sxTZywOp
11:14  silv3r_m00n: doener: so what should I do now...
11:16  silv3r_m00n: is bare necessary ?
11:16  doener: if you want to push to the repo, is should be bare
11:16  Fatal: silv3r_m00n: ITYM "I don't have sharedRepository set", ok, so it's not set to keep permissions properly for several users
11:16  silv3r_m00n: doener: doesn't bare mean that the repo has no working copies ?
11:17  silv3r_m00n: actually the remote repo is the computer on which I will work , and another team member will work with a clone
11:17  silv3r_m00n: and push changes to my computer
11:17  silv3r_m00n: doener: should I just edit the config file and set bare to true ?
11:18  silv3r_m00n: oh
11:18  silv3r_m00n: the directory isn't writable
11:18  silv3r_m00n: let me fix it
11:19  silv3r_m00n: ah
11:19  silv3r_m00n: ok
11:19  silv3r_m00n: I could not push it
11:19  silv3r_m00n: now*
11:20  doener: yeah, until someone else pushes and the permissions get messed up again
11:20  silv3r_m00n: 1 more small error
11:20  silv3r_m00n: in main repo doing git checkout origin says this operation must be done in a work tree
11:20  silv3r_m00n: how to go into a work tree ?
11:21  doener: cd /path/to/worktree
11:21  silv3r_m00n: oh amazing
11:22  doener: well, what did you expect?
11:23  silv3r_m00n: I pushed changes to repo , but the files haven't changed in the repo
11:24  doener: faq non-bare
11:24  jast: Pushing to non-bare repositories is discouraged: please see https://git.wiki.kernel.org/index.php/GitFaq#non-bare [automatic message]
11:24  silv3r_m00n: do I need to commit on main repo ?
11:27 --- yaotti_aw is now known as yaotti
11:27  silv3r_m00n: hmm
11:28  silv3r_m00n: when I push to remote repo , are all the files sent ? or only those which I edited ?
11:28  silv3r_m00n: if the remote repo has a new version of a certain file , of which I have the old version , so when pushing will my old version overwrite the new version on the remote repo ?
11:32 --- dwmw2_gone is now known as dwmw2
11:32  crashanddie_: No, if the remote repo has a new version of a certain file, it also means it has a newer commit than your local repo. So when you try pushing it should tell you that it's a non-fast-forward push, and die on you
11:53  thebrasse: Where do I download git-svn? Is it part of the git source code?
11:53  Rhonda: Should be, yes.
11:53  avar: it is, but usually in another package
11:54  avar: aptitude install git-svn # e.g.
11:54  Rhonda: thebrasse: In Debian/ubuntu it's an extra git-svn package
11:54  Rhonda: Potential similar in other distributions
11:55  thebrasse: OK. I have downloaded the git source package in order to compile and install on an old RedHat 4 system. I couldn't find ant RPMs..
11:56  thebrasse: Now I guess I need to figure out how to install git-svn from the source.
11:56  avar: hopefully RHEL 4, not RH 4
11:57  thebrasse: avar: yes, that should be RHEL 4. :-)
11:57  Rhonda: thebrasse: Actually it's just copying the perl script into your PATH :)
12:02  thebrasse: Rhonda: thanks!
12:10  Rhonda: thebrasse: Of course it is encouraged to copy it not into PATH but into the libdir of your git installation, but it works the same.
12:30 --- zangetsu is now known as Schuldiner
13:18  sontek: I did a git remote add name url, and I can see it doing git remote show name, but I can't get git diff to work against it
13:19  sontek: I want to diff and merge specific changes from the remote repo
13:19  workmad3: sontek: did you fetch the remote yet?
13:19  sontek: workmad3: yeah
13:20  workmad3: sontek: so you have a load of remote branches like 'remote_name/master'
13:20  Ulfalizer: how do i remove all untracked from a directory?
13:20  Ulfalizer: +files
13:20  Ulfalizer: and directories for that matter
13:21  sontek: workmad3: when I do 'git branch' it only shows mine
13:21  workmad3: sontek: git branch -r
13:21  workmad3: that shows branches on remotes
13:21  sontek: workmad3: yeah, it has remote-repo/master in there
13:21  Ulfalizer: ah, never mind, figured it out
13:21  Ulfalizer: git reset :)
13:21  sontek: ahh, so I do remote-repo/master in my git diff
13:21  sontek: that works :)
13:22  workmad3: sontek: yeah :)
13:22  silv3r_m00n: while doing git commit , how to give the particular commit a name ?
13:22  workmad3: silv3r_m00n: what do you mean a 'name'?
13:22  workmad3: silv3r_m00n: a commit has to have a commit message, but that's it
13:23  workmad3: silv3r_m00n: oh, are you meaning a tag?
13:23  sontek: ahh, its all funky since his commits were before my latest changes, it thinks I removed something he added
13:24  sontek: He only changed 3 lines but I figured I'd try to learn to do this right with small changes =P
13:24  sontek: can I tell it to pick just those 3 lines? Since his is kind of out of date?
13:25  silv3r_m00n: I need to revert to a certain commit
13:25  silv3r_m00n: how ?
13:25  Ulfalizer: hmm, git reset didn't work so well after all :/
13:25  silv3r_m00n: doing git log shows me all the commits
13:25  Ulfalizer: perhaps i should use git clean
13:26  workmad3: Ulfalizer: have you got any uncommited changes to tracked files?
13:26  workmad3: silv3r_m00n: git checkout <commit_id|refspec|tag>
13:26  Ulfalizer: workmad3: what i mean is that 'git reset' wasn't the right thing for removing untracked files
13:27  Ulfalizer: while 'git clean' probably is, especially given the description "Remove untracked files from the working tree" :)
13:27  workmad3: Ulfalizer: yeah, and I was just checking you don't have any uncommited changes you want, because I know a way to remove untracked files ;)
13:27  workmad3: although git clean may be better :)
13:27  silv3r_m00n: this is the commit id  >> 16d80fb4effc0ec442ef6aa6c66169e8ae665574
13:27  silv3r_m00n:    ?
13:27  workmad3: (I was thinking rm -rf .; git reset HEAD --hard)
13:27  workmad3: silv3r_m00n: yeah
13:27  Ulfalizer: workmad3: what solution did you think of?
13:28  Ulfalizer: ah, yeah, that would work as well
13:28  workmad3: silv3r_m00n: you can normally get away with just the first 6 or 7 characters of that too... git is quite clever
13:28  Ulfalizer: or just rm -rf dir; git checkout dir
13:29  silv3r_m00n: oh gr8
13:31  dekroning: how can I push a certain tag to a remote? I only know how to push the whole branch, e.g.     git push origin branchname:master
13:32  dekroning: but I would like to know how I can push a certain branch + tagged version into this remote master
13:32  silv3r_m00n: workmad3: what is a refspec ?
13:33  workmad3: silv3r_m00n: something that specifies a reference, so I think tags technically count as refspecs too, but branch names and remote branch names are the common ones
13:33  silv3r_m00n: hmm
--- Log closed Mon Dec 13 13:38:19 2010
--- Log opened Mon Dec 13 13:38:44 2010
13:38 --- Users 703 nicks [0 ops, 0 halfops, 12 voices, 691 normal]
13:38  silv3r_m00n: hmm
13:38  mapreduce: deanc: That's normal, read up about the index, or just use git commit -a
13:39  mapreduce: unless I misread.
13:40 --- adamholt is now known as adamholt_away
13:40 --- adamholt_away is now known as adamholt
13:40 --- Channel #git was synced in 122 seconds
13:40  deanc: mapreduce, i think you did misread. Let me pastebin :)
13:41  deanc: http://deanc.pastebin.com/LGGD0WXK
13:42  deanc: First is output from git status after 2 file edits. Then i git add README and then ran git status again
13:42  deanc: i shouldn't have to do this EVERY time i edit a file. I don't have to do it on other projects
13:42  workmad3: deanc: no, you do need to add the files every time you edit a file
13:42  workmad3: deanc: that is normal in git... and means mapreduce was correct and you should read up on the index ;)
13:42  deanc: workmad3, i run one other project in git and we don't have this issue
13:43  workmad3: deanc: well I don't know what you've done there... but a standard git project, you need to add an edited file to the index to stage it for a commit
13:43  deanc: git commit -a will commit files that have been git added already. i shouldn't have to git add every time i want to commit. this makes no sense
13:43  deanc: workmad3, even if it's already been git added?
13:44  workmad3: deanc: yes
13:44  deanc: Okay, if you could point me in the direction of a leyman's article on this it'd be appreciated as i've been using git for about 3 months in another project and once a file has been git added, i dont have to do it again
13:44  workmad3: deanc: and it makes perfect sense once you understand the 3 areas of a git directory - the working directory, the index and the repository
13:44  workmad3: deanc: have you just been doing git commit -a on the other project?
13:45  deanc: yep, but files only appear in changed but not updated if they have not been added to git yet
13:45  deanc: so git commit -a will commit all *changed* files, but not those that haven't yet been git added
13:45  workmad3: deanc: yes, that's correct
13:45  deanc: i.e. new files which git doesn't know about
13:45  deanc: both of the files in the pastebin example have been in git for months already and changed several times
13:45  workmad3: deanc: because git commit -a is the same as doing 'git add -u; git commit'
13:46  workmad3: deanc: http://progit.org/book
13:47  deanc: I was under the impression that git commit -a was saying commit all files under # Changes to be committed:
13:47  workmad3: deanc: no... that would be git commit
13:47  deanc: I cannot think for the life of me why my two projects would behave differently
13:48  workmad3: git commit -a is saying 'add all tracked changed files in the working directory to the index and then commit the changed index to the repository'
13:48  silv3r_m00n: I am executing commands like this>>  git clone ssh://git@localhost/../../var/www/Clients/scintell
13:48  silv3r_m00n: is there a way to improve the ../ in the uri ?
13:48  doener: silv3r_m00n: drop them
13:48  silv3r_m00n: that won't work then
13:48  Fatal: you give it an absolute path, / is root, there is no /../.., so just remove it
13:49  silv3r_m00n: ssh://git@localhost/var/www/Clients/scintell   ??
13:49  Fatal: yes
13:49  silv3r_m00n: that doesn't work
13:49  workmad3: silv3r_m00n: git@localhost:/var/www/Clients/scintell
13:49  deanc: okay thanks for the nudge in the right direction workmad3
13:49  silv3r_m00n: workmad3: oh amazing
13:49  workmad3: deanc: no probs :)
13:49  silv3r_m00n: no wait
13:50  silv3r_m00n: I need ssh only
13:50  workmad3: silv3r_m00n: that will be ssh
13:50  silv3r_m00n: doesn't work :(
13:50  silv3r_m00n: fatal: '/var/www/Clients/scintell' does not appear to be a git repository
13:51  silv3r_m00n: oh wait
13:51  silv3r_m00n: let me make a repository first :D
13:51  workmad3: ...
13:51 * workmad3 facepalms
13:51  deanc: one last question. git rm removes a file from the index only? It will still remain on my FS?
13:52  doener: deanc: rm --cached does that
13:52  workmad3: ^^
13:52  silv3r_m00n: workmad3: should it be git clone ssh://git@localhost:22/var/www/Clients/scintell   ?
13:52  doener: deanc: just rm removes it from both, index and working tree
13:52  silv3r_m00n: without the 22 it says ssh: Could not resolve hostname localhost:: Name or service not known
13:52  silv3r_m00n: with 22 it works perfect :D
13:52  doener: silv3r_m00n: because you stuck a ssh:// in front of it
13:52  workmad3: silv3r_m00n: tbh, I'm not sure why you're doing ssh to localhost
13:52  cbreak: 22 is normally redundant
13:52  doener: silv3r_m00n: either ssh://git@localhost/... or git@localhost:/...
13:53  cbreak: silv3r_m00n: man git-clone, has lots of examples of valid URLs
13:53  jast: silv3r_m00n: the 'git-clone' manpage can be found at http://git.or.cz/man/git-clone [automatic message]
13:53  silv3r_m00n: sure , thanks
13:53  Fatal: o_O oh, it's [:port], how utterly confusing
13:53  silv3r_m00n: I would read all of them
14:05  marlun: I've cloned a repo which has submodules but it did not seem to get the submodules. Do I need to do something more to get the submodules?
14:06  cbreak: marlun: yes
14:06  cbreak: marlun: man git-submodule
14:06  jast: marlun: the 'git-submodule' manpage can be found at http://git.or.cz/man/git-submodule [automatic message]
14:06  cbreak: probably something like git submodule update --init
14:07  cbreak: with the paths to the submodules you want.
14:07  jast: you might want to remember "git clone --recursive" for next time :)
14:08  marlun: ok, thanks both of you :)
14:11  silv3r_m00n: there are certain symlinks in my project directory which point to some directories outside , when creating git repository how can I pull them as full directory and not just symlinks ?
14:15  jast: silv3r_m00n: by copying the directories there instead. git never follows symlinks.
14:18  silv3r_m00n: jast: thanks
14:57  Veejay: Is git tag the way to tag a given branch?
14:57  jim: tag a branch?
14:58  resmo: Veejay, git tag is the way to give a commit a name
14:58  jim: do you have some data structure/algorithm background? if so, there's a pdf that will have easy explanations
14:59  cbreak: you can't tag branches
14:59  jim: if not, you'll still be able to understand it with some thinking
14:59  cbreak: only things with a hash
14:59  Veejay: I was reading some gitpro webpage
14:59  Veejay: And they say git tag -a is the way to create an annotated tag for a given commit
14:59  jim: you should read "git from the bottom up"
14:59  jim: right, NOT for a branch
14:59  jim: tags and branches are sorta similar
14:59  jim: they are names for commits
14:59  Veejay: Just be flexible and see that commit as the last commit of a branch, that's what I meant
15:00  Veejay: I phrased it bad, I agree
15:01  jim: so you're seeing this as inflexibility... but what is actually happening is a curiousity about your understanding of basic concepts...
15:01  jim: when you say "tag a branch", many will say "there is no such matching concept in git"
15:02  jim: if you see this as inflexibility, I suppose that's fine... but note that git wouldn't understand that as a concept either
15:03  curtana: Veejay, if you 'git tag -a foo' then whatever is currenty checked out will get the tag 'foo'. 'foo' will continue to refer to that exact commit after the branch that currently refers to that commit has changed to point somewhere else
15:06  \mjd: The git manual is full of references to "branches" which make it clear that what is intended is a commit plus its ancestor commits.
15:06  \mjd: The stubborn refusal of some people in the git community to acknowledge this is very puzzling to me.
15:06  \mjd: That said, you cannot tag a branch, only a commit.
15:08  Aleric: Hi. If I do an interactive rebase, is it possible to reorder the commits (and squish some after the reordering)?
15:08  \mjd: Yes.
15:08  Aleric: Thanks mjd :)
15:08  \mjd: Sure.
15:17  curtana: \mjd, buh, people in the git community don't think that is waht a branch is!?
15:20  \mjd: I don't know what they think.  But a lot of the time if you even mention the word "branch", people in this channel or elsewhere will repeat the old canard about how there is no such thing as a branch.
15:21  jim: and the manual may well have references to all these different ways of specifying a commit... but mentioning a branch in the context of a tag? cmon now, it's gotta make you wonder...
15:21  curtana: \mjd, weird
15:22  curtana: i dislike how the manual flips between user-facing terms like branch and internal terms like 'ref'
15:22  \mjd: jim: I agree with you that "tag a branch" is just plain wrong.
15:22  curtana: 'tag the commit currently pointed to by a branch' :)
15:22  \mjd: (I said as much 16 min earlier.)
15:23 --- ivey_off is now known as ivey
15:23  curtana: i wish you _could_ 'tag' branches. i'd like to have a tag that, if present when a branch is pushed, causes an automated build for QA purposes
15:23  jim: curtana: at least that phrase would stop me from wanting to suggest umpteen different tutorials...
15:25  curtana: jim, aye
15:33  urbanmonk: when you do a git push does it push all new commit objects that are not known by the upstream repository ... or does it only push new ones that are relevant for the branch you are on
15:33  cbreak: urbanmonk: default is matching branches
15:34  urbanmonk: what does that mean?
15:34  curtana: git-push man page should have a section on default behaviour
15:34  urbanmonk: oic
15:34  urbanmonk: "Updates remote refs using local refs, while sending objects necessary to complete the given refs."
15:35  urbanmonk: thanks!
15:43 --- yaotti is now known as yaotti_aw
15:50  Titosemi: hi guys
15:50  Titosemi: it's possible to rename a branch?
15:50  teuf: Titosemi: git branch -m
15:51  Rhonda: Titosemi: it's covered in man git-branch
15:51  jast: Titosemi: the 'git-branch' manpage can be found at http://git.or.cz/man/git-branch [automatic message]
15:51  Titosemi: cool, thanks teuf
15:51  Rhonda: The keyword in there is even rename ;)
15:56 --- ChanServ sets modes [#git +v dropandho]
15:57 +dropandho: hey all...I'm being a bit clueless on using .gitignore...it's ignoring me! What I did was create a .gitignore file in the directory outside of .git (which is the root directory of the files that git is working against) and i'd like git to ignore a file in that directory, so I simply named that file in .gitignore and then I wanted to ignore files in other directories off of that dir, so I...
15:57 +dropandho: ...entered foo_dir/foo_file....am i missing something?!
15:58  king313: Hi. Any name of open source projects that lets me create a Git forge?
16:09  bremner: gitorious?
16:10  bremner: maybe FusionForge. Depends what you want.
16:23  king313: bremner, I think that something like FusionForge
16:23  king313: that I can host in my own server
16:30 --- ivey is now known as ivey_off
16:37  sunoano: i have a bunch of empty dirs I'd like to add with git add .
16:37  sunoano: any way other than putting some fake file into them?
16:38  sunoano: use case: recreate a directory structure for deployment (which, amongst many things contains empty dirs)
16:41  ZoeB: stupid question: my project has .gitignore in it, which includes the line "app/webroot/img/camps/", and yet typing "git status" shows "app/webroot/img/camps/51.jpg"  What am I missing?
16:42 +dropandho: ZoeB:  I'm actually having gitignore issues as well...not sure what I'm missing either
16:43  ZoeB: at least it's not me, thanks
16:43  ZoeB: now I don't feel so bad, at least :)
16:43 --- slyphon_away is now known as slyphon
16:43  ZoeB: not just me, even
16:43  tangledhelix: ZoeB: i thought perhaps you needed '*' at the end, but a quick experiment here shows your style as working for me
16:43 +dropandho: hehe
16:43  tangledhelix: (git 1.7.3.1)
16:44  ZoeB: yeah, I've got the O'Reilly bat book which says / at the end should cover the dir and everything in it, and http://www.kernel.org/pub/software/scm/git/docs/gitignore.html seems to agree
16:44  ZoeB: I'm using 1.7.3.2
16:44  ZoeB: I updated the file before I put it in .gitignore, so is there another step I need to do?
16:45  tangledhelix: .gitignore is read by git each time it runs, so it shouldn't matter whether you put the pattern in there before or after you touched / modified the other file. sorry, no other ideas on what's going on there...
16:46  ZoeB: OK, thanks anyway
16:46  ZoeB: I'm sure I'm doing something stupid, I just can't figure out what quite yet :)
16:46  sunoano: so there's really no other way to track empty dirs with git? I do have to put some fake file into them?
16:47  avar: sunoano: Or submit a patch to support it
16:47  curtana: ZoeB, .gitignore does not work on files that were already committed
16:47  ZoeB: git's awesome BTW, so if anyone who helps make/maintain it is here, THANKS!
16:47  curtana: so either the pattern does not match the path to your 51.jpg file, or the 51.jpg file was committed into the repo
16:47  ZoeB: ah-ha, thanks curtana! is there any way around this?
16:48  curtana: ZoeB, git rm blah/51.jpg
16:48  curtana: if that works, then git commit -m 'removing accidently committed file that should be ignored'
16:48  curtana: if not then your pattern doesn't match, look closer
16:48 --- ivey_off is now known as ivey
16:48  ZoeB: will that leave the file alone on my remote clones, or will it actively delete the file?
16:48 +[exa]: ZoeB: clones will have the file removed after they pull the change from you
16:49  curtana: the file will forever be in your repo history, but the file will be removed from disk after they pull that commit
16:49  ZoeB: actually, nevermind, I'll manually copy the files somewhere safe in the remote version...
16:49  ZoeB: great, thank you!
16:49  king313: #git: Fusionfree vs gitorious vs redmine. What do you prefer?
16:49  curtana: if you want to get it back you can 'git checkout blah path/to/51.jpg'
16:49  king313: I have to mount a git forge and I want to know users/admins opinions and likes / dislikes
16:49  curtana: it will check that file out form the revision identified by 'blah', so you can get it back
16:50  curtana: and from then on the .gitignore will prevent it from being added back
16:50  bremner: king313: are you sure you need a fancy web interface?
16:50 --- jaredhoyt[work] is now known as jaredhoyt
16:50 --- ChanServ sets modes [#git +v sveni]
16:50  curtana: king313, does remine overlap with gitorious/github etc?
16:50  curtana: i thought itw as just project managemnt
16:51 +sveni: Hello, I was wondering if git has an inverse operation to the ^ suffix? I have a branch pointing to an old commit of another branch, say master, and I would like to merge step-by-step the next commit along master's history without having to look up the next commit's sha every time.
16:51  king313: bremner, I would like it because I'll not be the only user
16:52  king313: if not, bremner, what other ideas do you have?
16:52  bremner: king313: just use gitolite + gitweb
16:52  bremner: king313: and maybe some distributed bug tracker.
16:52  charon: sveni: not easily possible because of the data model, and besides, such a "first child" operation would change its meaning every time you added new commits to the repo
16:52  curtana: sveni, if it does it will probably be in git-rev-parse man page
16:52  charon: so it's ill-defined to begin with, and thus not implemented
16:52  bremner: king313: it depends on your users.
16:52  charon: sveni: if you want to go step-by-step, you can work through 'git rev-list --first-parent A..B'
16:53  king313: bremner, that a dislike of gitorious... doesn't have bug tracker
16:53  charon: sveni: as in, git rev-list --first-parent A..B | while read rev; do some_op_with $rev; done
--- Log closed Tue Dec 14 11:47:24 2010
