--- Log opened Tue Nov 30 08:31:43 2010
08:31 --- Users 656 nicks [0 ops, 0 halfops, 7 voices, 649 normal]
08:35 --- Channel #git was synced in 259 seconds
08:54  evant_: crab: Thanks
08:55  n00b_: i am very new to git or any verson control sys
08:55  n00b_: so can any one suggest me ho to go ahead
08:55  evant_: crab: Do I have to track that locally first?
08:55  evant_: n00b_: As in, why would you want to use version control? Or...?
08:56  n00b_: i recently came to know it is very useful if i am sharing my code with other people
08:57  crab: evant: if you want to track it, you can git checkout -t remotename/branchname, it'll create a local tracking branch named branchname (override by adding -b othername)
08:59  evant_: Do I need to track it? Basically, what would you do? ;)
08:59  frogonwheels: evant_: tracked is good
09:00  frogonwheels: evant_: just git checkout branchname     is actually enough (if only remotename/branchname  exists, it will create branchname for y ou tracked to remotename/branchname)
09:00  evant_: Ah, nifty
09:00 --- Unknown[NF] is now known as Unknown[OFF]
09:00  evant_: And then I can just locally branch that
09:00  frogonwheels: evant_: well for small stuff, you generally just work in there, commit changes, and push them up
09:01  evant_: Yeah I'll be making lots of changes
09:01  evant_: Involving submodules and a whole bunch of other complications!
09:01  frogonwheels: evant_: but for a feature - you can branch off that and then either rebase your changes on top of the  tracking branch  or do a merge.
09:02 * thiago_home has found that he develops everything on the same branch
09:02  thiago_home: more than half of the stuff I do I want to run myself, so I keep it all in the same branch
09:03 * frogonwheels uses both models depending on what he's doing.
09:03  thiago_home: I just don't push them
09:03  evant_: Cool, thanks for the input
09:04  speakman: When two poeple works on the same project, using the most simple workflow (pulling from each other) - won't the two repositories soon have different histories?
09:05  frogonwheels: speakman: not largely, no.
09:05  thiago_home: that's when you have to pull
09:06  frogonwheels: speakman: when you pull their changes, and merge them into yours, you get all their commit history as well
09:06  speakman: frogonwheels: what happen when they pull from me then?
09:07  thiago_home: same thing
09:07  speakman: unless there's a conflict, will it always fast-forward?
09:07  frogonwheels: speakman: er.. the same?? they get your changes into a remote branch   speakerman/master   or whatever, then they'll merge those changes (git merge speakerman/master)
09:07  thiago_home: no
09:07  frogonwheels: speakman: and then they'll have your commits and a branch and merge loop.
09:07  thiago_home: fast forward indicates that they didn't have any commits you don't have
09:08  thiago_home: think of a Y-shaped history (diverge)
09:08  thiago_home: if that happens, then pull does a normal merge
09:08  speakman: will I ever need to do anything but "git pull"?
09:08  frogonwheels: speakman: it's a little easier to maintain if you push to a common (bare) repository
09:08  thiago_home: probably, but git pull is the start
09:09  thiago_home: if you have a central server storing everything, then you also need git push
09:09  frogonwheels: speakman: since you won't know when they have pulled, and you don't want to be re-writing history that they've pulled.
09:09  frogonwheels: speakman: so I suggest a central server as your common reference.  it's possible the other way too though.
09:10  frogonwheels: speakman: especially if you only pull when you're requested to.
09:10  speakman: can we share a single central repo or do all user have to have their own repo?
09:10  thiago_home: both
09:10  frogonwheels: speakman: in git, all users have their own repo.
09:10  thiago_home: you can share a single, central repo
09:10  thiago_home: but each person needs to have their own repo, on their own machines
09:11  speakman: yes but we can all push to a single shared repo?
09:11  frogonwheels: speakman: exactly.
09:12  speakman: At my company, we're two programmers sometimes working very closely on a single project.
09:12  frogonwheels: speakman: it's possible to do the pull & pull thing - but you would need to think about how you did things.
09:12  frogonwheels: speakman: there's probably even a howto on just such a model. :)
09:12  speakman: Earlier we've used Bzr which, IMO, is a great central/distributed hybrid
09:18  speakman: You can say we try not to have one single "maintainer" for the project.
09:18  speakman: Or any project. The linux kernel workflow doesn't really fit. :)
09:18  frogonwheels: speakman: using the central server (look at gitolite)  will probably be a nice fit then.
09:18  frogonwheels: speakman: it serves as a point of serialisation of commits  -
09:22  speakman: frogonwheels: sounds great! will look at gitolite
09:50  guardian: morning
10:16  dean[w]: I have a problem regarding permissions with one of my colleagues. He checked out a remote branch of mine, made a change and tried to push it back using "git push" but he received the following error: fatal: Unable to create '/home/dean/workspace/devel/.git/refs/heads/master.lock': Permission denied
10:17  dean[w]: Any suggestions? I'm a bit unsure as to why there is a reference to master in there anyway... he didn't check out master branch
10:18  banisterfiend: dean[w]: http://www.youtube.com/watch?v=fbGkxcY7YFU&feature=BF&list=PLB6F4D5B8E1B77746&index=9
10:19  dean[w]: wtf?
10:25  Znow: Anyone  working with "GitExtensions"? im trying to pull my repo..but it says that is same unresolved merge conflict: "fatal: bad config value for 'core.hidedotfiles' in .git/config "
10:27  Znow: now ive set it to "false", and it works now... but it is just loading when im trying to pull, not getting any further
10:35  _ikke_: B 12
10:36  Slush-: you sunk my battleship
10:37  _ikke_: Slush-: Cool
10:40 --- Unknown[OFF] is now known as Unknown[NF]
10:40  Slush-: :)
10:40  Znow: How can I find out where my repo on my computer belongs to what user? Cause... I have a repo called "depot", and cant find out where it belongs, it apparently not connected to my default github user
10:46  dean[w]: My colleague has checked out a version of my remote branch. He wants to push back the changes he made in *his* copy of the branch, to my copy
10:46  dean[w]: How can we do this?
10:46  tango_: dean[w]: you pull from him
10:46  tango_: add him as a remote and then pull from him
10:47  dean[w]: he's added as remote, can't he push it back to me?
10:47  patrikf: Znow: git remote -v?
10:47  tango_: dean[w]: if you added him as a remote, you can pull from him
10:47  tango_: which is better because you should be the only one messing up with your repository ;-)
10:47  dean[w]: he's my origin tango_
10:47  tango_: dean[w]: then pull from him
10:48  tango_: assuming he commited his changes, of course
10:48  bosyak: hi all. I need create own GIt repo for internal projects. Is there any HOWTO or something?
10:48  dean[w]: git checkout -b dean-hotfix2 dean/hotfix2
10:48  patrikf: bosyak: lots. did you see the link in the topic?
10:48  evant_: Is there any way to simulate a push? IE. I just want to see what would be pushed
10:49  dean[w]: He checked it out like so tango, so how do i pull exactly in this case
10:49  patrikf: evant_: git log?
10:49  tango_: dean[w]: did he comit his changes?
10:49  dean[w]: to the dean-hotfix2 branch yes
10:50  tango_: dean[w]: then do a git fetch (this will update your local copy of his repostiry) and you can merge his dean-hotfix2 branch into your hotfix2 branch
10:50  tango_: assuming you have hotfix2 checked out, it's git fetch ; git merge origin/dean-hotfix2
10:51  dean[w]: ah yes :)
10:56  Znow: patrikf - when I do that cmd, it shows only a blank line
10:57  Znow: patrikf - but I can add and commit changes...
10:57  patrikf: Znow: yes, git is a decentralized version tracking system
10:57  Znow: O_o
10:57  Znow: well... how can I know where and what my repo is connected to what user on github?
10:58  patrikf: Znow: that's not within the scope of git
10:58  Znow: huh? :D
10:58  Znow: well.. I just want to pull my "depot" repo to my workstation @ my work
10:59  patrikf: Znow: your repo can have zero or more "remotes", references to remote repositories
10:59  Znow: okay
10:59  patrikf: Znow: when you clone, you get one called "origin", which is where you cloned from
10:59  patrikf: Znow: but cloning is not the only way to create git repos
11:00  patrikf: Znow: so if yours has 0 remotes (as git remote is empty), there might not be a remote repo at all
11:00  patrikf: Znow: but git can't tell you how you created that repo in the first place, for all we know, it might have been "git init", but also something else such as "cp"
11:01  Znow: oh yeah, well I did just git init
11:02  Znow: and how does this clone work?
11:03  Znow: patrikf :)
11:05  patrikf: Znow: please refer to the docs
11:06  Znow: ...
11:23  Vardan: hi all
11:24  Vardan: people I have done clone of some repo after that created new branch and in new branch modified some files, but not committed. Then I have switched mater branch and saw that my modifications are there, but as I understand they shouldn't be there, be cause I have done my modifications in other branch. What I do wrong?
11:25  teuf: uncommitted changes stay in your working copy when you switch branch
11:25  teuf: if you commit the changes, then the commit will stay in that branch and won't "follow" when you switch branches
11:26  Vardan: so I need to commit them in new branch and after that move to master?
11:26  teuf: if you don't want in master, yep
11:26  Vardan: the same true for file deletion?
11:27  teuf: I think so
11:40  cbreak_work: Vardan: commits are in a branch
11:40  cbreak_work: local changes are NOT in a branch
11:40  cbreak_work: they are in the working directory or the index
11:40  cbreak_work: until you commit them, they stay unbound to a branch
11:41  cbreak_work: all local changes
11:41  Vardan: ok, thanks :)
11:43  Vardan: how to revert changes
11:43  Vardan: ?
11:46  Vardan: ok, I found that :)
11:50  cbreak_work: many ways, depending on what changes you are speaking of
11:50  cbreak_work: git checkout, reset, revert, ...
12:26  banisterfiend: for all intents and purposes branch --contains is the same as branch --merged right?
12:26  thiago: no, it's the exact opposite
12:27  thiago: --contains: the branches whose tip commits are descendants of the named commit
12:27  thiago: --merged: the branches whose tip commits are reachable from the named commit
12:27  thiago: if A contains B, then B is merged into A
12:27 --- dwmw2 is now known as dwmw2_gone
12:31  banisterfiend: thiago: the docs say --merged <treeish> returns "what branches have that treeish merged in", which is the same as saying what branches are descendeants of that treeish, right?
12:31  thiago: yes
12:31  banisterfiend: which is the same as what you wrote here: --contains: the branches whose tip commits are descendants of the named commit
12:31 * thiago rereads the doc
12:31  banisterfiend: so they are the same?
12:32  thiago: no
12:32  thiago:        --merged [<commit>]
12:32  thiago:            Only list branches whose tips are reachable from the specified commit (HEAD if not specified).
12:32  banisterfiend: ah
12:33  banisterfiend: so what i pasted was incorrect?
12:33  thiago: reachable != descendant
12:33  banisterfiend: hmm
12:33  thiago: it's the opposite
12:33  banisterfiend: what does reachable mean?
12:33  thiago: given a commit history: A→B→C→D
12:33  thiago: one direction is reachable, the other is descandant
12:34  thiago: Git id a Directed Acyclic Graph. The direction matters.
12:34  thiago: if that drawing is a graph, then A is the youngest commit
12:34  thiago: A is a descendant of B. B is reachable from A.
12:35  banisterfiend: ah
12:35  thiago: B = A~
12:35  thiago: uh
12:35  banisterfiend: thanks
12:35  thiago: no, never mind
12:36 * thiago thought he had inverted twice
12:36  banisterfiend: i think i'm either reading broken docs
12:36  banisterfiend: or my mind is a bit broken at this late hour
12:36  banisterfiend: thiago: are these descriptions of --contains and --merged accurate? http://gitready.com/intermediate/2009/04/03/find-ancestor-commits.html
12:37 * thiago has just run the test on his Git tree:
12:38  thiago: git branch --merged 4.6: 4.5 and 4.6
12:38  thiago: git branch --contains 4.6: 4.6, 4.7, master
12:39  bartj: I have two branches: 1. master 2. branch-2 which has lots of code/features
12:39  bartj: but, now it seems that most of the code in branch-2 needs to be re-written
12:39  etag: gitweb can be set as password protected?
12:40  thiago: etag: configure Apache properly
12:40  bartj: so, if I create a new branch (branch-3) should it track master or branch-2 ?
12:40  thiago: banisterfiend: your choice
12:41  etag: thiago it can be access by windows git client as well via url?
12:41  thiago: etag: gitweb is for a web browser, not for the Git client
12:41  etag: so what is best way for windows client to give url access not ssh?
12:42  thiago: can you rephrase?
12:42  etag: I want to give access to my windows client over the internet
12:42  etag: whats the best way
12:43  thiago: so you want to use your windows client to access a server
12:43  etag: yes
12:43  thiago: why can't the server run ssh?
12:43  etag: It can be easily but is there any easy way for clients as internface?
12:43  bartj: anyone?
12:44  thiago: you're looking for Windows GUI clients for Git?
12:44  thiago: erm
12:44  thiago: bartj: sorry, I got the wrong nick
12:44  bluenovember: bartj, as thiago said, it's your choice
12:44  thiago: bartj: that answer was to you: "your choice"
12:44  thiago: bartj: we don't know how you intend to work in branch-3
12:44  etag: thiago: looking to setup git server like that so win gui client can access it
12:45  thiago: "upstream" generally means that you are merging from that. You said that you're going to rewrite, so it sounds like it's not upstream.
12:45  thiago: but it's really your workflow.
12:45  thiago: etag: Linux server with sshd is the easiest.
12:45  bluenovember: bartj if your code in branch 2 needs to be rewritten following code changes in master, you should consider rebasing it rather than starting again on a new branch.
12:46  etag: thiago: ok i was trying to search some thing easier for non tech people
12:46  thiago: etag: if you want to run a server, Linux is recommended
12:46  thiago: etag: why do non-tech people want to run a server?
12:47  etag: thiago: server is on linux but when client want to push and clone i was trying to find gui for that
12:47  thiago: etag: you can use any GUI
12:47  thiago: etag: it doesn't depend on the server.
12:48  Kaapa: hello there - anyone here uses gitosis?
12:48  etag: thiago: so if my server is myname.com how can i setup that ? i m confused in that
12:48  Kaapa: I'm following the setup instructions but I'm hitting a 'fatal: 'gitosis-admin.git' does not appear to be a git repository' when trying to clone from local machine
12:49  thiago: etag: I'm confused too
12:49  etag: :)
12:49  thiago: etag: stop talking about Windows and client if your problem is setting up the server
12:49  bartj: bluenovember, with the rebase, I would collapse all my branch-2 commits to a single commit ?
12:49  thiago: stop talking about server if you just want to make it easy for non-tech people to use Git on Windows
12:49  thiago: which one is it?
12:50  etag: thiago: ok so how can i setup url based git server which can be accessed via public ip
12:50  thiago: etag: Linux + ssh
12:50  thiago: etag: I recommend gitolite for managing the repositories
12:50  Kaapa: ah, it worked!
12:50  bluenovember: bartj, that doesn't sound sensible. Commits should be as small as possible whilst still making sense.
12:50  etag: thiago: thanks
12:50  thiago: bartj: that's not what rebase does
12:50  thiago: bartj: rebase simply changes the base. Squashing something else.
12:51  thiago: git rebase --interactive can squash, but only if you tell it to
12:55  bluenovember: bartj, by "the code in branch-2 needs to be re-written" I assumed this meant that it conflicted with upstream changes. Rebasing will allow you to resolve these conflicts commit by commit.
12:57  banisterfiend: thiago: A -> B -> C       what will `git branch --merged B` return? and what will `git branch --contains B` return? (sorry, im still confused)
13:05  banisterfiend: thiago: yes, this is incorrect, right? "git branch --merged will tell you what branches have that treeish merged in"
13:05  banisterfiend: it's actually telling me which branches are merged into that treeish
13:07  banisterfiend: right?
13:07  bluenovember: sounds right to me
13:07  banisterfiend: which sounds right? i posted 2 things
13:08  bluenovember: sorry, your version :P
13:08  banisterfiend: hehe
13:08  banisterfiend: thx
13:08  bluenovember: branches which have been merged into your current branch
13:08  bluenovember: your ancestors
13:08  cbreak_work: "With --merged, only branches merged into the named commit (i.e. the branches whose tip commits are reachable from the named commit) will be listed."
13:08  banisterfiend: yes
13:08  banisterfiend: thanks
13:08  banisterfiend: i just spent 20 mins understanding this http://gitready.com/intermediate/2009/04/03/find-ancestor-commits.html
13:08  banisterfiend: which has it all ass-backwards
13:08  cbreak_work: that's from the man page, so probably correct
13:08  banisterfiend: confused the hell out of me
13:09  bluenovember: =(
13:11  isaqual_: is it possible that git removes untracked files at same when pull ?
13:11  banisterfiend: just 1 thing
13:11  banisterfiend: i guess it doesnt make sense to push light weight tags?
13:12  parasti: isaqual_: no
13:12  cbreak_work: banisterfiend: sometimes
13:12  parasti: isaqual_: Git will warn you if this could happen
13:12  cbreak_work: warn? It'll completely halt if that could potentially happen
13:12  isaqual_: parasti: weird..
13:13  isaqual_: i think some files are totally lost :(
13:13  banisterfiend: cbreak: i mean it's impossible to push lightweight tags, only annotated tags can be pushed right?
13:13  parasti: does "warn" imply "keep going"?  I didn't know that
13:14  cbreak_work: banisterfiend: no
13:14  cbreak_work: you can push all kinds of tags
13:14  banisterfiend: cbreak_work: hmm, ok ill try
13:14  cbreak_work: just use --tags
13:15  banisterfiend: cbreak: do i delete tags the same way i delete branches? git push origin :my_tag
13:16  banisterfiend: yep :)
13:22  banisterfiend: cbreak_work: how do i see what tags are stored on the remote?
13:22  spuz: Hello, I'd like to get a line count history for a particular file in my repository, which git commands would be able to help me out?
13:23  bluenovember: banisterfiend, "git remote update" will grab all commits/tags/branches from your remotes. You can then view tags with "git tag"
13:25  isaqual_: argh.. Dirty index: cannot revert
13:26  Finkregh: hi, where is the difference between serving the bare git repo via http i once create via git+ssh push and pulling it again via ssh? i renamed some branches from "branch-a" to "feature/branch-a" - when i use ssh to pull it again i get all branches, when i use http i get the old "branch-a" ...
13:28  Finkregh: i renamed the local branch, deleted the remote one and then pushed the renamed...
13:28  fs-sylr: what does "tip commit" means ?
13:29  curtana: spuz, something like: git log --pretty=%H Makefile.am | while read line; do git show "$line":Makefile.am | wc -l; done | tac
13:30  bluenovember: impressive
13:32  spuz: curtana: thanks!
13:45  etag: thiago: any good tutorial to setup gitosis for multiple users?
13:45  etag: i mean with gitolite
13:46  bremner: etag: is there something missing from the gitolite documentation?
13:48  bremner: the author is very interested in making good documentation, so if something in particular is confusing you, you should let him know.
13:52  etag: bremmer: just confuse in multi client settings
13:53  etag: bremner: i hope these steps will be repeated for setting up another client as well
13:55  bremner: etag: can you point to the part of the docs you mean?
13:55  etag: wait
13:57  Ecco: Hi everyone. I'm setting up gitosis on a Debian machine.
13:58  Ecco: Can I change the location of the gitosis-admin.git repository ?
13:58  Ecco: gitosis-init puts it in /root/repositories, but I think it's got nothing to do in there
13:58  bremner: Ecco: you should probably use gitolite instead of gitosis
13:58  Ecco: bremner: Really ?
13:58  etag: bremner: at this step "package method) directly on the server, using RPM/DEB"
13:58  Ecco: Actually I've been reading about gitolite too, but it seems like one dirty hack to me
13:58  Ecco: Plus I don't care about per-branch right managment
13:59  bremner: as compared to gitosis?
13:59  bremner: weird
13:59  bremner: Ecco: the short version is that no one knows the answers to gitosis questions
13:59  Ecco: :-)
14:00  Ecco: so gitolite is supposedly superior ?
14:01  bremner: in the sense that people answer questions about it :)
14:01  Ecco: ^^
14:01  Ecco: Ok, let me reconsider gitolite then :-)
14:01  bremner: but yeah, I think the functionality is a superset
14:01  bremner: etag: that only needs to be done once
14:02  bremner: etag: you can  have the gitolite-admin repo on as many clients as you want
14:04  etag: bremner: docs are reall rough, it even dosent specify that you need to create users befure su
14:04  bremner: etag: maybe they assume basic unix sysadmin knowledge.
14:05  bremner: see "technical skills"
14:05  etag: bremner: but its kind of pretty rough
14:06  _ikke_: Is it posible to let git log --graph also show branch names?
14:06 --- ChanServ sets modes [#git +v acs]
14:07 +acs: I made 2 commits, and I wish to unify both into only 1. How can I do it?
14:07  bremner: etag: well, it's hard to predict what is obvious to everyone. You are the first with this particular complaint. But it should be easy to fix. I suggest making a patch that mentions greating the git user and sending it in.
14:08  bremner: gitolite <gitolite@googlegroups.com>   is the mailing list
14:09  bremner: actually, the user should be created by the package installation
14:09  bremner: >> If you're using DEB or RPM, the installer creates a user called "gitolite", so substitute that for "git" anywhere in the docs where the "hosting user" is mentioned as "git".
14:10  bremner: acs: use rebase --interactive and squash the second onto the first
14:18  Ecco: Crap
14:18  Ecco: 	your git version is older than 1.6.2
14:18  Ecco: I'm on Debian Lenny :-/
14:18  bremner: there is backports
14:18  Ecco: pff, fuck
14:18  Ecco: How should I do that ?
14:19 +acs: bremner: thanks
14:19  bremner: Ecco: backports.debian.org
14:19  Ecco: thanks
14:23  sitaram: Ecco: how is gitolite a dirty hack if gitosis is (presumably) not?  It uses the same basic idea...
14:23  Ecco: sitaram: Well, you're right :-)
14:24  sitaram: etag: as for creating a user, see the "Conventions used" section... briefly, the user does not have to be "git".  It can even be your own normal userid!
14:32  sitaram: etag: if you want stuff as detailed as "useradd git" etc., either look at the install-transcript doc ( https://github.com/sitaramc/gitolite/blob/pu/doc/install-transcript.mkd ) or someone wrote a tutorial at http://sites.google.com/site/senawario/home/gitolite-tutorial
15:22 --- cpg is now known as cpg|away
15:35 --- ChanServ sets modes [#git +v klando]
15:35 --- slyphon is now known as slyphon_away
15:35 +klando: Hello, I wonder how to create/transform a git respository to a git --bare repository ?
15:37 +broonie: c!
15:39  federico2: hi there
15:40  shruggar: klando, what is your goal? Did you just type the wrong command when cloning?
15:40 +klando: I think so
15:40 +klando: I now have git not-bare where I want to push easely, and also some co-wrker
15:41 +klando: I wnt to move it to a git-bare
15:41  gebi: klando: set the bare flag, remove the working copy and rename .git to <repo>.git
15:41 +klando: gebi, ok, remove working copy, mean : just keep the .git ?
15:41 +klando: (and rename...)
15:41  gebi: exactly
15:42 +klando: thank you gebi and shruggar
15:42  gebi: a bare git repo is nothing fancy
15:42  gebi: ;)
15:45  Eiler: when i install git, how do i get git gui? in gentoo i just did emerge git
15:55 --- Hutch[S]|away is now known as Hutch[S]
16:00  kanzure: can i get git log --grep to search commit metadata (not just commit messages)?
16:01  engla: kanzure: nope. git log -S searches the diffs
16:02  kanzure: engla: hmm okay. i am willing to pipe to grep on my own; is there a way to get git log to show all commits in a repo (i.e. on multiple branches)?
16:02  kanzure: SethRobertson: you're showing up in a lot of my search results
16:02  engla: kanzure: sure, with --all. What do you want to search for?
16:02  kanzure: engla: i have imported an svn repo into git and there are certain commits that have different ids but the same timestamp (i.e. due to an svn mv or something stupid)
16:03  kanzure: so my goal is to first confirm i can find something with the same timestamp
16:03  kanzure: then to write a script to find pairs like this for me
16:04  engla: kanzure: ah I see. I believe you can't search by date since it's just metadata, there is no ordering in it between commits.
16:04  kanzure: git log --all | grep "03:17:59" seems to work for me
16:25  banisterfiend: ok how the heck do i use git notes? :(
16:25  banisterfiend: i want to add a note
16:25  banisterfiend: im doing: git notes add -m "hello" HEAD
16:26  banisterfiend: but it's not working
16:28  parasti: banisterfiend: git notes add
16:28  banisterfiend: parasti: can you give me a full example? cos im doing that and it isnt working
16:28  parasti: that is the full example
16:28  parasti: then I have to ask, how do you check that it's not working?
16:28  parasti: ;)
16:28  engla: banisterfiend: how do you know it's not working? error message?
16:29  banisterfiend: parasti: i just get usage instructions when i do that
16:29  banisterfiend: engla: i dont get an error, i just get usage instructions
16:29  engla: banisterfiend: git version?
16:29  parasti: for "git notes add", no options?
16:30  banisterfiend: engla: git version 1.7.0.2.msysgit.0
16:30  banisterfiend: parasti: no options
16:30  engla: 1.7.0 version of notes has much less features
16:30  banisterfiend: what version of git are you running?
16:31  engla: I'm using 1.7.2
16:31  banisterfiend: oh ok
16:31  banisterfiend: can i safely upgrade it in windows?
16:31  parasti: seems git notes add was added after 1.7.0.2
16:31  banisterfiend: or will i lose or my config settings?
16:31  engla: git upgrades are very safe
16:32  banisterfiend: is 1.7.3 preview stable enough?
16:32 --- WebDragon|laptop is now known as WebDragon
16:33 * engla has no clue about msysgit
16:36  curtana: it should be fine
16:38  banisterfiend: how do i find out what commits and how many commits different between the remote and my local branch?
16:39  banisterfiend: im currently using git cherry -v origin/dev dev
16:39  banisterfiend: but is there a better way?
16:40  curtana: banisterfiend, gitk origin/dev...dev
16:40  curtana: or git log --graph origin/dev...dev
16:41  banisterfiend: nice thanks
16:41  banisterfiend: does anyone use git cherry though?
16:43  banisterfiend: hot doi find the common ancestor of two commits?
16:44  fr0sty: man git-merge-base
16:44  jast: the 'git-merge-base' manpage can be found at http://git.or.cz/man/git-merge-base [automatic message]
16:44 --- dwmw2_gone is now known as dwmw2
16:45 --- unreal_ is now known as unreal
16:45  banisterfiend: fr0sty: thanks but it's just giving me the SHA-1
16:46  fr0sty: banisterfiend: git cherry is smart enough to know that two commits are the 'same' even if they have different hashes. git log a...b will show both commits even if they introduce the same changes.
16:46  fr0sty: banisterfiend: what were you expecting to get?
16:46  fr0sty: that SHA-1 is the common ancestor.
16:46  banisterfiend: fr0sty: i want more info on the commit
16:46  fr0sty: man git-show
16:46  jast: the 'git-show' manpage can be found at http://git.or.cz/man/git-show [automatic message]
16:46  banisterfiend: on the common ancestor commit
16:46  fr0sty: or git log -1 <sha>
16:47  fr0sty: git show <sha>
16:47  parasti: git show $(git merge-base ...)
16:47  banisterfiend: thanks
16:54  banisterfiend: does git provide a C library?
16:54  banisterfiend: an API?
16:54  banisterfiend: or do all wrapper libraries have to shell out to the CLI ?
16:55  fr0sty: banisterfiend: pretty much everybody wraps
16:55  fr0sty: there is lib2git but it is still immature (though I guess development is ongoing again.)
16:56  banisterfiend: hmm
16:56  banisterfiend: so git wasn't designed with a C-API in mind?
16:56  banisterfiend: it's totally designed around a CLI?
16:56  fr0sty: yeah.
16:56  fr0sty: why would it have been otherwise
16:56  fr0sty: ?
16:57  banisterfiend: i guess so that programs can tap into git functionality without having to resort to shelling out all the time
16:57  banisterfiend: which is kinda ugly imo
16:57  fr0sty: uglier than making every scripting language in existence go through some sort of wrapper to get at it?
16:58  fr0sty: honestly, who is writing git utilities in C?
16:58  fr0sty: git in C, yes.
16:58  banisterfiend: what?
16:58  fr0sty: but git-svn git-* is perl/python/tk/etc.
16:58  banisterfiend: it's up to the scripting language to decide if they want to wrap git functionality in a C extension, or if they want to just shell out
16:58  fr0sty: and bash
16:58  fr0sty: or sh
16:58  sitaram: banisterfiend: shell is ugly?  It's fast and clean...
16:58  jast: libgit2 is an attempt to implement all the interesting stuff in git as a library
16:59  banisterfiend: cool
16:59  fr0sty: banisterfiend: the question is: if a vast majority of git users will neve use a C api why the devil would one bother to implement it.
16:59  jast: it's... not very complete, to put it mildly
16:59 * fr0sty wonders what, precisely, banisterfiend is trying to accomplish.
16:59  jast: well, especially on servers, running all git operations in new processes can incur significant overhead
17:00  sitaram: banisterfiend: I realise you needed help to get from "git merge-base ..." to "git show $(git merge-base ...)"; for most of us however that is second nature.  A C API would *suck*.  Rocks.  Big ones/
17:00  jast: I guess that's one of the reasons why Scott Chacon is very interested in having a usable libgit2 :)
17:00  jast: guys, it's not like a C library would suddenly eliminate the complete CLI
17:00  banisterfiend: fr0sty: because git is starting to be used in many situations where a CLI doesnt make a lot of sense
17:01  banisterfiend: fr0sty: like in RubyDrop for example, where git use is entirely automated to implement a kind of file store
17:02  fr0sty: banisterfiend: just think of the CLI as 'universal API'
17:02 * sitaram nods
17:02  banisterfiend: and more as new applications for git are found where git use is totally automated and controlled by a program
17:02  banisterfiend: ok
17:02  fr0sty: btw, I'm not trying to denigrate Scott and libgit2. If that floats his boat, great.
17:02  sitaram: banisterfiend: program == shell script ;)
17:03  fr0sty: However, I can't imagine more than a few very isolated use cases where the overhead of creating a separate process for each git command would be a significant compared to the actual amount of work done by git.
17:04 +broonie: More so on Windows, Windows process creation overhead is hideous.
17:09  FND: hi - after I resolved a merge conflict and committed the merge, is there a way to retrieve the conflicts' diffs?
17:11  Polysics: hello
17:11  Polysics: is there a way of providing a "sample" version of a .gitignored file?
17:12  PerlJam: Polysics: sure, just don't ignore the sample
17:12  jast: you can simply add .gitignore files to the repository
17:12  jast: oh, ignore me
17:12  jast: I'm a bit slow today
17:13  Polysics: but i need to call it, say, database.yml.sample?
17:13  Polysics: sounds good enough
17:13  fr0sty: FND: do the merge again in a throwaway branch.
17:13  FND: fr0sty: it's about reviewing what's already been committed
17:13  jast: fr0sty: well, the main case is programs that call git lots of times, e.g. gitweb lookalikes
17:14  fr0sty: 'git show <merge_commit>' might tell you something interesting.
17:14  FND: will check that, fr0sty (been using "git log --stat -p")
17:14  jast: same difference
17:15  FND: jast: in case you were referring to me, git log --stat -p shows no diff for merge commits
17:15 --- tj_ is now known as tjholowaychuk
17:15  jast: then git show probably won't show it either
17:16  FND: it does, jast
17:16  FND: which is odd and a bit annoying...
17:18  fr0sty: FND: what are you expecting to see?
17:18  FND: fr0sty: http://pastebin.com/r0u7mVNL is what git show displays, which is useful
17:19  FND: basically, if there were conflicts, I need to be able to review how they were resolved
17:20  fr0sty: FND: 'git show <merge_commit>' is a special case that shows you the 'interesting' parts of the merge.
17:20 --- slyphon_away is now known as slyphon
17:21  jast: hmm, what does it do in the background?
17:23  hal: I have this message  Your branch is behind 'upstream/master' by 108 commits, and can be fast-forwarded.
17:24  hal: even though I run git reset --hard, and git pull upstream master, this message still remains
17:24  hal: can anyone recommend a course of action please?
17:24  fr0sty: 'git merge --ff-only upstream/master
17:24  G__81: if i want to get the last 10 patches from a branch how do i get it ?
17:25  fr0sty: git format-patch HEAD~10
17:25  hal: fr0sty: thank you, What does this message actually mean?
17:25  fr0sty: HEAD~10..HEAD, actually...
17:25  hal: fr0sty: why doesn't it just ff with the commands I've used?
17:25  parasti: the range is not necessary
17:25  fr0sty: heh, or not...
17:26  fr0sty: don't do format-patch myself.
17:26  fr0sty: hal: dunno. something odd in your .gitconfig
17:26  hal: hmm
17:26  hal: ok
17:26  hal: thank you fr0ggie
17:27  fr0sty: np.
17:27  G__81: fr0sty, thanks
17:27  parasti: I had to laugh :P
17:27  hal: fr0sty: that doesn't work
17:28  hal: fr0ggie: it doesn't recognise the syntax
17:28 * fr0ggie grabs chainsaw
17:28  hal: ok fr0sty , I've got it thank you
17:28  parasti: easy now, Dave
17:28  hal: fr0ggie: sorry ! :)
17:29 --- slyphon is now known as slyphon_away
17:30 --- slyphon_away is now known as slyphon
17:34 --- Hutch[S] is now known as Hutch[S]|away
17:37 --- ChanServ sets modes [#git +v mriber]
17:38 +mriber: Hello... I am recently moved from SVN to GIT on a private project with 2 developers.. I am seeking some "svn'ish" advice.. Currently i am working on the master branch, but has to start on a major change in the code - so i want to branch my code, allowing both me and the other developers to work simultanis on both the master branch and the new branch.. Is this called a fork in GIT-world?
17:43 --- WebDragon|laptop is now known as WebDragon
17:45 +Fangorn_: mriber: creating a new locally is easy; git checkout -b new_branch_name master
17:45 +Fangorn_: will create a new branch based on master (new_branch_name is up to you to specify)
17:51  ntoll: hi, I'm giving a presentation that involves creating a small app "live" as I'm talking and I want to use git to move the code state between the start (empty project) through each revision to the finished project.
17:52  ntoll: the problem is, how do I checkout the code for a specific revision... I had though of using git show ... but that only gives me the diff
17:52  ntoll: any ideas or suggestions
17:54  shorg: You could tag each revision say, slide_A,slide_B,slide_C and then do git checkout slide_A
17:54  abhinav_singh: I am having a project and i am using git...i want to know how to push the git branch to my hosting server
17:55  ntoll: shorg, aha
17:55  ntoll: shorg, thanks
17:56  shorg: abhinav: Check out http://progit.org/book/ch3-0.html
17:56  shorg: The basic command your looking for git push <remote server> <branch to push>
17:57  shorg: ntoll, you could also just use the hashes, but that's a bit messy and probably detracts from your lecture.
17:58  ntoll: shorg, sure... tagging sounds the path of least resistance... and lets face it... I'll be presenting code in front of 30+ Python hackers so I don't want my SCM to break the flow... ;-)
18:04  ntoll: shorg, ok.... your suggestion works exactly how I imagined I wanted to work
18:04  ntoll: shorg, thanks
18:05  shorg: great!
18:06  shorg: Just don't forget to push your tags before you presentation ;-)
18:11  mgorbach: I'm learning how to use git svn and I've fucked up my repo a bit. Was hoping for a bit of help as to how to fix it.
18:12  mgorbach: I do some work on a branch (dyldOptimization), then merged that branch onto trunk with a --squash
18:13  tbeadle: hi.  I have a branch and I want to rebase the first few commits of that branch on to master, I tried  "git rebase master <sha1 of last commit I want rebased>" but this ends up leaving me in a detached head state.  What am I doing wrong?
18:15  tbeadle: or how do I get master to point at my detached HEAD?
18:27 --- PeaMan is now known as PeaMan_
18:27 --- Hutch[S]|away is now known as Hutch[S]
18:28  piotr_:  hi, what does it mean if I have the same file in  Changed but not updated and Changes to be committed
18:28  piotr_: I just commited handpicked files from the stash
18:29  DrNick: you modified the file, staged it for commit, and then modified it again
18:30  piotr_: yes but conceptually?
18:30  piotr_: diff was different when git diff --cached and git diff
18:30  piotr_: is like part of file staged and part not staged?
18:30  piotr_: I'm confufsed
18:32 +Fangorn_: diff --cached is a diff between the index (staged in your parlance) and the current branch
18:32 +Fangorn_: diff by itself is a diff between your working directory and the index
18:34  parasti: consider: Git stores the entire tree at each commit, the index is where you prepare that tree
18:34  parasti: there are no "parts of", there's a file in index, and a file in your work tree
18:34  parasti: and they are different from what is committed and from each other
18:35  __name__: You can stage parts of files though.
18:35  dev001: i cloned a git repo.  it defaulted to 'master' branch.  i switched to another branch via 'git checkout -b <branchname> remotes/origin/<branchname>'.  now, i'd simply like to abandon-the-current-ship, and return to working in the 'master' branch.  short of deleting and re-cloning, how's that done?  git branch-fu is eluding me ... :-/
18:36  piotr_: thanks guys
18:36 +Fangorn_: dev001: git checkout master
18:37  parasti: __name__: there is such a thing, but it does not result in a "part of" something being stored in the index
18:37  __name__: parasti: Yes
18:40  dev001: Fangorn_: oh for heaven's sake!  i was fubaring it all with a "-b" .  thanks!
18:40 +Fangorn_: dev001: -b creates a new named branch off an existing on
18:41 +Fangorn_: one
18:42  dev001: Fangorn_: yep, thx.  i was led astray by confusion abt "You are in 'detached HEAD' state.".  re-reading stuff ...
18:46  crazed: hm, what hook script can i use to execute something on a push?
18:46  crazed: basically i'm pushing code to a repo, on that repo i want some action to be taken
18:46  crazed: maybe hooks isn't the right place though.. since the git repo is remote
18:53 +Fangorn_: crazed: web search for gitolite and hooks
18:53  crazed: post-update was teh hook i was looking for
18:53  crazed: sweet, i think i can work off this
18:54  crazed: just trying to auto-deploy code checkins to a dev server
18:54  crazed: and this should do the trick
18:58 --- ChanServ sets modes [#git +v jcody]
18:58 +jcody: hi channel, I'm having an abysmal time reverting to a previous commit with git svn, could anyone lend an ear or a hand?
19:00  doener: jcody: what do you mean by "reverting to a previous commit"?
19:00 --- Hutch[S] is now known as Hutch[S]|away
19:01  doener: jcody: just going back there to test something, or adding a new commit that has the same tree as some existing commit?
19:01 +jcody: I'm looking to git reset to a previous commit, then git svn dcommit on top of the current svn working directory to update it
19:02 --- Unknown[NF] is now known as Unknown[OFF]
19:02  coldboot: Is there a way to get a combined diffstat of an arbitrary list of commits?
19:02 +jcody: i can svn up -r #### to get the server where i want it, and i can git reset <<hash>> to get local where i want it, but i can't seem to get the two to communicate
19:03  parasti: jcody:  git checkout $commit -- .; git commit -m 'revert to r1234'
19:03  doener: jcody: I don't want to know what random set of commands you ran, but what conceptual goal you're trying to reach
19:03  doener: parasti: wrong when there are files present in the index that aren't in $commit
19:04 +jcody: doener: sorry about that :( I'm trying to add a new commit with the same existing tree as a previous commit. essentially looking to discard a bunch of commits, as time ran shorter than i thought
19:04  parasti: oh?  the ever so smart checkout isn't smart enough? :P
19:04  doener: jcody: git read-tree -u --reset $commit; # Resets the working tree and index to the tree of $commit
19:04  parasti: read-tree is ugly and low level, hence I tried to avoid it
19:05  doener: jcody: after that "git commit" to create a new commit with that tree
19:05  doener: jcody: then dcommit
19:05 +jcody: parasti, i haven't tried your command yet. doener, should i try parasti's checkout, or skip straight to read-tree?
19:05  parasti: one or the other, don't do both
19:05  parasti: preferably doener's
19:06  doener: parasti: the clean way would be: git reset --hard $commit; git merge -s our -m "Override bad history" ORIG_HEAD
19:06  doener: parasti: but that confuses git-svn
19:06  doener: parasti: so read-tree is the next best choice ;-)
--- Log closed Tue Nov 30 19:08:23 2010
--- Log opened Tue Nov 30 19:08:45 2010
19:08 --- Users 705 nicks [0 ops, 0 halfops, 9 voices, 696 normal]
19:09  parasti: doener: that makes sense, just never occurred to me
19:09 --- Hutch[S]|away is now known as Hutch[S]
19:10 +jcody: ugh, still getting this: Merge conflict during commit: File or directory 'path/to/init.js' is out of date; try updating: resource out of date; try updating at /usr/local/git/libexec/git-core/git-svn line 572
19:10 +jcody: but git mergetool tells me "no files need merging"
19:11 --- Channel #git was synced in 154 seconds
19:11  doener: parasti: no problem ;-) And sorry for being "terse" initially... Shitty day
--- Log closed Tue Nov 30 20:32:31 2010
--- Log opened Tue Nov 30 20:37:55 2010
20:37 --- Users 718 nicks [0 ops, 0 halfops, 7 voices, 711 normal]
20:37  kanzure: wereHamster: no it seems they developed mostly in Distribution and then later moved to trunk
20:38  wereHamster: kanzure: git has no way to represent such cross-branch moves of individual files. You'll have to live with that history
20:38  cbreak: cross branch history? that makes no sense...
20:38  cbreak: a brach IS history
20:39  cbreak: without a branch, no history.
20:39  theoros: we are the branches
20:39  jim: a brach is candy... a branch is history!
20:39  cbreak: if something leaves a branch, then it leaves history.
20:39 * kanzure photosynthesizes
20:39  ProLoser|Work: hallooo
20:39  kanzure: cbreak: it was deleted in Distribution because that's how svn mv works
20:39  ProLoser|Work: an entire file was staged
20:39  kanzure: not because they wanted to lose history
20:39  ProLoser|Work: however it was staged for a submodule
20:39  ProLoser|Work: how do i reset it?
20:40  kanzure: if i edit the repo and there's still files in Distribution nobody will care
20:40 --- Channel #git was synced in 150 seconds
20:40  cbreak: kanzure: they should have copied it if they would not have wanted it to vanish
20:40  cbreak: ProLoser|Work: git status
20:40  cbreak: it'll tell you
20:40  ProLoser|Work: it does tell me
20:41  ProLoser|Work: how do i not stage it?
20:41  ProLoser|Work: like... how do i ignore it
20:41  SethRobertson: kanzure: That is why I told you to make the merge *before* the deletes.  You can leave the deletes around after the artificial merge.
20:41  kanzure: SethRobertson: i was about to paste what you said yesterday (it made sense to me) in the face of all the "impossible" comments :P
20:42  kanzure: SethRobertson: i agree the merge should occur before the deletes
20:42  kanzure: in fact, i've traced all of the parent ids to that point (before the deletes) so i have that list ready
20:42  SethRobertson: Well, they are right.  You cannot tie the delete to the add.  I just finessed the problem.
20:43  cbreak: ProLoser|Work: just don't stage it
20:43  cbreak: staging is something active
20:43  kanzure: so my battle plan is to squash the commits in master that added files (there's maybe 10 of them) into one commit, then set its parent to the list i just mentioned (the list of commit ids from before the deletes in the other branches)
20:43  cbreak: you can not do it by not doing it
20:44  ProLoser|Work: i want to get rid of it
20:44  ProLoser|Work: it's a pending staged thing and it's bugging the crap outta me
20:44  cbreak: git rm deletes stuff
20:44  cbreak: git reset unstages stuff
20:44  SethRobertson: kanzure: I think I came up with a better plan later.  Essentially take the ultimate commit--the last commit in the move series, and find the content tree hash for that commit.
20:44  cbreak: if it's untracked, you can add it to .gitignore
20:45  jim: ProLoser|Work: "bugging the crap etc", sounds like you could do personal work on that response...
20:45  SethRobertson: kanzure: Then create the fake octopus merge with all N parents with that ultimate tree hash as the tree hash for the commit
20:45  SethRobertson: kanzure: Then rebase all of the commits from that ultimate commit to the HEAD of master onto the new branch, delete/rename old-master, rename the new branch to master, and bob's your uncle
20:45  kanzure: SethRobertson: aha. yeah i was wondering about the tree id earlier. so thanks
20:47 --- rayners is now known as rayners_afk
20:49  eagles0513875: hey guys :)
20:49  kanzure: nooo
20:49  nakkor: Hrmm.. I am not sure if --all-match is broken
20:49  SethRobertson: nakkor: Provide the full command please
20:49  nakkor: anyone able to do a log search that matches only one of a grep/author?
20:49  eagles0513875: any ubuntu users in here running git?
20:50  nakkor: SethRobertson: in my test repo, no msg has "cb" but my email does:  git log --oneline -10 --grep=cb --author=cb
20:50  poseidon: eagles0513875: you will probably get a better response on #ubuntu
20:50  eagles0513875: poseidon: i am gonna follow the wiki for setting it up
20:50  eagles0513875: just apprehensive about how up to date it is
20:50  nakkor: when I run that I get no results, but when I do just the author, it works fine
20:50  theoros: use now, worry later
20:52  SethRobertson: nakkor: when I run `git log --grep=seth` I get results. When I run `git log --author=seth` I get results.  When I run `git log --grep=seth --author=seth` I don't get results, whether or not --all-match  is set
20:53  SethRobertson: That does appear to be a bug, but the reverse of what you have.
20:53  nakkor: SethRobertson: hrmm, am I misunderstanding the meaning of --all-match in the git log man page? http://goo.gl/9sCjH
20:54  nakkor: it seems that if you want it to match --grep, --author-- committer, then include --all-match, otherwise don't include it to match any of those
20:54  Luyang: how do I list the local branch (correct term) and the remote one?
20:55  Luyang: names and configuration
20:55  nakkor: git branch -vv
20:55  SethRobertson: nakkor: Well, as I said with or without --all-match it appears to be doing an AND relationship between --author and --grep for me (1.7.3.2)
20:56  nakkor: SethRobertson: so is that a bug in git?  Is there a way to match any?
20:56  SethRobertson: Luyang: git branch -a; git remote show origin
20:57  kanzure: SethRobertson: when i create my octo-commit-merge-thing how do i tell git what the branch name is? (so that i can later rename it to master)
20:57  SethRobertson: nakkor: I would call it a bug.
20:58  SethRobertson: kanzure: git branch new-master <SHA>
20:58  Luyang: SethRobertson: thanks!
20:59  nakkor: SethRobertson: thanks for helping me pin down that bug
20:59  SethRobertson: nakkor: This is where I should encourage you to submit a patch to the git mailing list
21:00  nakkor: SethRobertson: I will give it a go
21:01  NfNitLoop: Hmm.  Someone was claiming that bzr was better at storing/versioning large binary files.  and I see Linus being quoted admitting as much here: http://stackoverflow.com/questions/984707/what-are-the-git-limits/984973#984973
21:01  NfNitLoop: But how is that the case?
21:01  NfNitLoop: Doesn't the file just get stored as a blob like everything else?
21:01  NfNitLoop: I mean, merging would suck, but I don't expect that's any better in bzr.
21:01  DrNick: git expects to be able to mmap the whole file when doing the SHA-1 calculation
21:02  DrNick: which gets real painful on 32-bit Linux with the 3 GB address space, and even worse on Windows with the 2 GB address space
21:02  SethRobertson: git-annex is a current way some use to work around the problem
21:03  NfNitLoop: Hmm.  Can't SHA-1 calculate from a stream?  Does it really need the file in-memory?
21:03  DrNick: Yes. No.
21:03  DrNick: patches accepted, I'm sure
21:03  wereHamster: NfNitLoop: feel free to submit patches.
21:03  NfNitLoop: heh.
21:04  NfNitLoop: Ok.  But as an analysis of the current state of git and bzr, I guess that's a point against git.  (assuming bzr doesn't do that.)
21:04  yrlnry: It's probably not a tough patch.
21:04  NfNitLoop: but... it seems git's storage model would actually be better for large binary files.
21:04  NfNitLoop: since it doesn't attempt to store lots of deltas.
21:04  SethRobertson: People are working on this problem
21:05  wereHamster: NfNitLoop: it does not at the time you run git add, but it'll try eventually
21:05  NfNitLoop: wereHamster: when?  When it calculates deltas to send in the git protocol?
21:05  wereHamster: also, compression will suffer if you wont' let git do delta compression
21:05  wereHamster: NfNitLoop: when git creates a pack
21:05  NfNitLoop: aah.
21:06  NfNitLoop: Hmm.  I guess I thought the pack file was just like a giant zip file.
21:06  NfNitLoop: is it doing something more intelligent?
21:06  wereHamster: yes. delta compression
21:06  NfNitLoop: Oh.  I suppose I should read up on that more.
21:06  wereHamster: if it was just a zip file (which would be useless as git already compresses individual objects), you would never bi able to get the compression ration that git has
21:07  wereHamster: delta compression >> zip/gzip/bzip2 etc.
21:07  engla: then add some smart heuristics in which order to pack the objects and you get git's packed format
--- Log closed Tue Nov 30 21:14:00 2010
--- Log opened Tue Nov 30 21:24:31 2010
21:24 --- Users 730 nicks [0 ops, 0 halfops, 7 voices, 723 normal]
21:25  F1x: :)
21:27 --- Channel #git was synced in 163 seconds
21:27  engla: one of git's warts is that two different things hide behind "a tag". but I think tags in hg are worse..
21:28 * F1x wtf?
21:29  FauxFaux: I'd call "normal" tags (i.e. no flags to git tag) labels if perforce wasn't the worst thing ever and if people didn't like explaining branches as labels.
21:29  homa_rano: tags in hg were handicapped by wanting to preserve backwards compatibility
21:30  homa_rano: thus being in a normal tracked file
21:31 --- rayners_afk is now known as rayners
21:31  engla: backwards compatibility to what? just old hg you mean?
21:32  homa_rano: yes, so old hg servers could still represent tags
--- Log closed Tue Nov 30 21:36:20 2010
--- Log opened Tue Nov 30 21:46:44 2010
21:46 --- Users 730 nicks [0 ops, 0 halfops, 7 voices, 723 normal]
21:48  johnkw: how do you navigate to annotate/blame on git's web?
21:48  dogmatic69: gits web?
21:49  johnkw: the web gui
21:49 --- Channel #git was synced in 151 seconds
21:49  dogmatic69: oh, never seen it
21:50  johnkw: --> http://git.kernel.org/?p=git/git.git;a=summary
21:51  dogmatic69: http://git.kernel.org/?p=git/git.git;a=blame;h=20db370b63a47b19e5f903b78af46ec8e709fa37
21:52 --- cpg|away is now known as cpg
21:52  dogmatic69: just check it out and do a blame in shell maybe
21:52  kanzure: fr0sty: i'm doing something i shouldn't be doing and frankly i don't know how to describe it
21:52  johnkw: oh so that I guess means git's web has blame, but those guys disabled it so the links are gone?
21:52  kanzure: SethRobertson: does this sound right? git rebase --onto new-master c51e8ac09e8e90acf7a9bdbd06ff9be22c486515..HEAD (c51e is the "ultimate commit")
21:53  theoros: you can't specify revisions like that afaik
21:54  theoros: git rebase --onto X A B moves ^A..B onto X
21:54  theoros: uh, ^A B
21:54  acalbaza: if i want to revisit an old state using a sha, i can use git reset --hard <SHA>... how do i get back to the current state after doing this?
21:54  kanzure: what does ^A B represent
21:55  theoros: kanzure: man git-rev-parse
21:55  wereHamster: kanzure: everything reachable from B but not A
21:55  jast: kanzure: the 'git-rev-parse' manpage can be found at http://git.or.cz/man/git-rev-parse [automatic message]
21:55  kanzure: thanks
21:55  theoros: ctrl-f for "specifying ranges"
21:56  theoros: acalbaza: don't reset
21:56  theoros: acalbaza: git checkout COMMIT, but your head will detach
21:56  theoros: git checkout -b something_awesome COMMIT if you want to work off that old state
21:56  kanzure: ah clever.
21:57  kanzure: theoros: if i do ^A B then B can be any arbitrary commit after A?
21:57  bartek: Hi. Any reason I can't do git rebase -i on a git-svn repo? I try it, and it just shows me the usage for rebase
21:57  kanzure: theoros: and it would be the same effect/meaning?
21:57  theoros: it doesn't have to be "after" A
21:57  theoros: B can in fact be the tip of some branch off A~1000
21:58  wereHamster: bartek: what's the exact commandline?
21:58  bartek: git rebase -i
21:58  parasti: bartek: "git rebase -i" will show you the usage, because that's not a complete command
21:58  wereHamster: bartek: that rightfully should display the help message
21:58  theoros: kanzure: in which case git rev-list ^A B would be the list of commits sitting on that branch
21:58  bartek: hm, I'm misunderstanding something then
21:59  wereHamster: bartek: git rebase [-i | --interactive] [options] [--onto <newbase>] <upstream> [<branch>]
21:59  theoros: (using "branch" in human-ish terms, not git-model terms)
21:59  wereHamster: bartek: <upsteam> is a mandatory argument
21:59  acalbaza: can i get back to the current state after a reset though?  say i stashed my changes and want to get back to the head in the repo?
21:59  bartek: wereHamster: Sorry, what would upstream be in this context?
21:59  theoros: acalbaza: yes but if you want to get back to the state, don't reset
21:59  bartek: An example, perhap
21:59  wereHamster: bartek: maybe you want 'git svn rebase' ?
22:00  theoros: the use of "<upstream>" is exactly why it took me a month to understand what git rebase --onto does
22:00  wereHamster: bartek: upstream is a commit-ish
22:00  bartek: wereHamster: Didn't know that existed "Unable to determine upstream SVN information from working tree history"
22:00  bartek: commit-ish?
22:00  wereHamster: bartek: are you sure it's a git-svn clone?
22:00  parasti: maybe tell us what you want to achieve
22:00  bartek: wereHamster: Yes .. I can run git svn fetch on it, and I cloned it from an SVN repo
22:01  wereHamster: bartek: do any commits in the log contain a 'git-svn-id' line?
22:01  theoros: what branch is currently checked out?
22:02  bartek: parasti: Basically, got a massive repo. I tried using git filter-branch to remove commmits from a specific dir but it ran for ages. I'm thinking now I just want to rebase the repo to the last 2,000 commits, for example
22:02  bartek: theoros: master
22:02  bartek: wereHamster: Doing "git log", I do not see git-svn-id
22:02  wereHamster: bartek: did you do the clone with '--no-metadata' ?
22:02  bartek: wereHamster: Erm, yes.
22:03  wereHamster: alright, you'll have to use git rebase then and figure upsream on your own
22:03  bartek: How would I figure that out .. ?
22:03  parasti: well, if you want to shorten the history...
22:04  wereHamster: bartek: read the description of man git-rebase
22:04  jast: bartek: the 'git-rebase' manpage can be found at http://git.or.cz/man/git-rebase [automatic message]
22:04  bartek: thanks
22:04  wereHamster: go step by step through it, and then apply it to your situation
22:04  parasti: you could fake the parents of the new root commit with grafts
22:04  parasti: and then finalize with filter-branch once all looks good
22:05  parasti: I don't think anything of this sort can be done with rebase
22:06  bartek: Ok, I figured out the upstream thing.
22:11  bartek: I'm reading that when doing git svn fetch, I can specify the last X number of commits, but I can't see a flag for this in the git-svn docs?
22:11  bartek: Oh, found git-svnimport
22:12  wereHamster: bartek: man git-svn -> OPTIONS -> -r
22:12  jast: bartek: the 'git-svn' manpage can be found at http://git.or.cz/man/git-svn [automatic message]
--- Log closed Tue Nov 30 22:15:46 2010
--- Log opened Tue Nov 30 22:16:13 2010
22:16 --- Users 728 nicks [0 ops, 0 halfops, 7 voices, 721 normal]
22:16  davr: bartek: I think it's because SVN is more flexible, and so it's hard to build a one-size-fits-all converter. so sometimes you need some manual work to map things across
22:16  theoros: kanzure: it's git rebase --onto X A B
22:16  fr0sty: homa_rano: the merge-base is probably cleanest, then.
22:16  theoros: kanzure: meaning onto X, put ^A B, as git rev-list knows it
22:16  davr: personally I filtered the SVN repo a bunch first, getting it into the state I wanted, and then converted to git
22:16  theoros: kanzure: it's a different syntax
22:17  NfNitLoop: bartek: careful, though, there's another project (or more?) w/ the name svn2git.
22:17  kanzure: theoros: ah.
22:18  homa_rano: fr0sty: thanks
22:18  kanzure: theoros: nope even when i remove '^' it still tells me Fatal: needed single revision
22:18 --- Channel #git was synced in 142 seconds
22:18  theoros: kanzure: what is HEAD? git rev-parse HEAD
22:18  theoros: or uh, git name-rev HEAD even
22:18  kanzure: theoros: 05c42cde046dcb6942e926e9cf1eb3e55d96242b
22:19  kanzure: HEAD master
22:19  toxictux: hi i fail in using eclipse + egit + github im very noobish in git. why cant i see my commits on github?
22:19  theoros: what hash is the one you're trying to go back to?
22:19  kanzure: theoros: 79102f867b7e5792ef0c49179f9fe09270ef0ffd
22:19  dunpeal: `git checkout version-1` seems more correct since there's no reason to change the master reference (as reset --hard does). It's also easier to get back to the normal state: just `git checkout master`. OTOH, `git checkout <tag>` gets user to a detached HEAD, which I'm not sure I want to get my users into since they're all Git newbies.
22:19  wereHamster: toxictux: did you push the commits?
22:19  kanzure: theoros: i'm on master, new-master is where i'm reconstructing my history
22:19  theoros: kanzure: weird..
22:19 --- WebDragon|laptop is now known as WebDragon
22:20  toxictux: wereHamster, i see ^^ i only used svn, rcs and cvs before so git has also push
22:20  wereHamster: kanzure: can you paste the exact command you're using?
22:20  kanzure: wereHamster: git rebase --onto new-master 79102f867b7e5792ef0c49179f9fe09270ef0ffd 05c42cde046dcb6942e926e9cf1eb3e55d96242b
22:21  wereHamster: kanzure: and all those commit names resolve without errors (git rev-parse <..>)
22:21  wereHamster: ?
22:22  kanzure: wereHamster: yes
22:22  dunpeal: wereHamster: seen my question above? :)
22:22  wereHamster: what about 79102 .. ? and new-master ?
22:22  theoros: kanzure: git rev-list ^new-master master | wc -l; git rev-list ^79102f867b7e5792ef0c49179f9fe09270ef0ffd master | wc -l
22:23  kanzure: wereHamster: master
22:23  kanzure: crap
22:23  kanzure: sorry my screen session is getting laggy
22:24  toxictux: wereHamster, hm i get this dialog and i have now clue what do do http://imagebin.org/125495
22:24  kanzure: fatal: bad revision '^new-master'
22:24  wereHamster: toxictux: there are drop down menus, what's in them?
22:24  wereHamster: toxictux: 'git rev-parse new-master'
22:24  wereHamster: toxictux: also, http://progit.org
22:25  kanzure: git rev-parse new-master -> fatal: ambiguous argument 'new-master': unknown revision or path not in the working tree.
22:25  theoros: kanzure: do you actually _have_ a new-master branch?
22:25  theoros: clearly not
22:25  kanzure: theoros: oh it's remotes/origin/new-master
22:25  kanzure: sigh
22:25  wereHamster: kanzure: new-master != remotes/origin/new-master
22:25  kanzure: i had to git clone because i didn't have a working directory
22:25  theoros: get yourself a remote-tracking branch
22:26  wereHamster: or --onto remotes/origin/new-master
22:26  wereHamster: (maybe --onto origin/new-master)
22:26  kanzure: or i can just get all of these branches
22:26  toxictux: wereHamster, the drop boxes contain "HEAD" and "master[branch]"
22:26  wereHamster: toxictux: pick one
22:26  toxictux: wereHamster, k
22:29  piotr_: is there a way to change master branch?
22:29  piotr_: I have another branch which I'd like to be master now
22:29  piotr_: and throw away changes in master since the branch with branch 'b'
22:30  wereHamster: piotr_: you can rename branches (-m_
22:30  kanzure: "First, rewinding head to replay your work on top of it..."
22:31  kanzure: hm how long will this take
22:31  wereHamster: 0.nothign seconds
22:31  kanzure: uh
22:31  kanzure: it's been a few minutes
22:31  wereHamster: oh. Then it's longer
22:32  kanzure: is it proportional to the number of files? commits?
22:32  theoros: how many commits are there you're rewinding over?
22:32  theoros: size of changes
22:32  kanzure: i'd guess about 5k to 10k commits
22:32  theoros: haha
22:32  theoros: i mean i guess that'd tak a while.
22:32  theoros: +e
22:32  kanzure: i think these guys are crazy for commiting 50,000+ files at once
22:32  kanzure: (on a frequent basis)
22:33  theoros: ..seriously?
22:33  piotr_: nice1
22:33  kanzure: yeah they seem like the same files over and over again
22:33  theoros: do they know what granularity is at all?
22:33  piotr_: who commits 50K files?
22:34  Eridius: someone who tracks their minecraft save in a git repo?
22:36 --- Hutch[S]|away is now known as Hutch[S]
22:36  kanzure: hm i got a merge conflict.. but when i check the file there's no merge markers added or anything
22:36  kanzure: something about a delete?
22:36  wereHamster: kanzure: what does git diff show?
22:36  kanzure: git rebase --continue doesn't give me as much info as it once did
22:36  kanzure: wereHamster: ah, checking
22:37  kanzure: git diff says * Unmerged path cad/src/DnaGeneratorDialog.py
22:38  wereHamster: nothing else?
22:38  wereHamster: that looks more like output from 'git status'
22:39  kanzure: nothing else
22:39  kanzure: i'm in the middle of a rebase
22:40  kanzure: git status says: #       deleted by them:    cad/src/DnaGeneratorDialog.py
22:40  SethRobertson: kanzure: was ca/src/DnaGeneratorDialog.py the last file added (or deleted) during the move activity?
22:41  patrikf: kanzure: yeah, so you add or rm depending on whether you want that file in or not
22:41  SethRobertson: Or more usefully, if you checkout the "A" commit, does that file exist?  And does it exist if you checkout new_master?
22:43  kanzure: SethRobertson: i have no idea what's going on at the moment
22:43  kanzure: SethRobertson: what two commits am in between?
22:43  kanzure: *am i in between
22:44  SethRobertson: I sure have no idea.  Perhaps you should abort the rebase and reconsider
22:44  cbreak: git log shows you the past
22:44  shentino: interestingly enough slashdot just posted an article about rebasing
22:44  cbreak: shentino: no
22:44  cbreak: it posted an article about an addvertisement for some crap SCM
22:44  kanzure: aha i see
22:44  kanzure: SethRobertson: there's some new commits in `git log`
22:45  kanzure: SethRobertson: so should i assume right now i am at the latest commit that `git log` shows? (other than my merge commit that i made earlier)
22:45  SethRobertson: I have no idea what happens when you are in the mists of a failed rebase.
22:46  SethRobertson: What you said sounds reasonable, but...
22:46  kanzure: maybe i selected the first hash parameter on git-rebase all wrong. i chose the first svn commit (the one after the commit from which i took the tree id)
22:47  SethRobertson: kanzure: Which is why I recommended --abort and reconsider
22:49  kanzure: SethRobertson: i have a copy of the git repo from before the rebase started,
22:49  kanzure: and it looks like the next commit is one where this file is renamed
22:49  SethRobertson: kanzure: Specifically I believe that `git diff new_master A` should be absolutely identical
22:49  SethRobertson: well, git diff should return no differences.
22:50  kanzure: so if this file is renamed why is rebase/status asking me to delete it
22:50  SethRobertson: And entirely possibly the git-tree hash should be the same for those twocommits
22:50  SethRobertson: I'd like to confirm my identity theory before wondering why it failed
22:50  kanzure: ok one sec
22:51  kanzure: SethRobertson: git diff new-master A -> there's one line that is changed (variable name change)
22:51  SethRobertson: So what commit did you get the tree-id from?
22:52  SethRobertson: That is the commit SHA you should be using for "A".
22:52  toxictux: wereHamster, ty for the help cant get it to work, but git push on console works and thats enough
22:52  kanzure: SethRobertson: "that is the commit SHA you should be using for A" on this git diff or on the git rebase call?
22:53  SethRobertson: Both
22:53  kanzure: oops :(
22:54  kanzure: trying again :)
22:56  kanzure: oh lovely some of the commit messages are blank. i didn't even notice
22:59  cbreak: bad commiter, bad!
23:00  cbreak: find out who made them and poke that person with something pointy and/or burning
23:00  cbreak: or just drop the commit, can't be useful if it's not interesting enough for a message ;)
23:01  kanzure: i choose both.
--- Log closed Tue Nov 30 23:13:38 2010
--- Log opened Tue Nov 30 23:19:06 2010
23:19 --- Users 718 nicks [0 ops, 0 halfops, 7 voices, 711 normal]
23:19  dj_tjerk: anyone experience with gitolite's "personal branch" stuff
23:19  Dashkal: looks like I have Gitorius, gitosis, and gitolite for options.  Thanks much *commenses research*
23:21 --- Channel #git was synced in 145 seconds
23:21  bremner: dj_tjerk:  I have used it.
23:22  dj_tjerk: i get some errors after git tells me it successfully pushed/created the remote repo
23:22  dj_tjerk: "error: unable to resolve reference refs/heads/....: Not a directory"
23:22  dj_tjerk: and that it cannot lock the ref
23:22  dj_tjerk: refs/heads/personal/tjerk/develop for instance
23:23  dj_tjerk: hmm
23:25  bremner: dj_tjerk: does  it work for other kinds of pushes?
23:25  wereHamster: dj_tjerk: does the remote contain a ref refs/heads/personal/tjerk or refs/heads/personal ?
23:26  dj_tjerk: i just switched to calling it "personal" instead of "develop" and that seemed to fix things :?
23:26  dj_tjerk: imma go back to breaking it :P
23:27  dj_tjerk: wanna know if it's consistent or if i used to have a remote branch called develop in the past that confused git
23:27 --- ChanServ sets modes [#git +v GCS]
23:27  wereHamster: 'not a directory' sounds like you have a ref where git would require none
23:27 --- q0rban is now known as q0rban|afk
23:28  metropolis: Is there any way to query a remote git server for the sha1 of master without having to do a full clone?
23:28  wereHamster: metropolis: man git-ls-remote
23:28  jast: metropolis: the 'git-ls-remote' manpage can be found at http://git.or.cz/man/git-ls-remote [automatic message]
23:38 --- fedesilva__ is now known as fedesilva
23:38  kanzure: SethRobertson: the rebase has completed, but git branch tells me i'm on "no branch", what do i do?
23:42  letas: quick question: how can I ignore all files inside a directory? I want to ignore just files the dirs inside that dir should remain tracked
23:43  letas: is that even possible?
23:44 --- fedesilva__ is now known as fedesilva
23:44  cbreak: git can not ignore tracked stuff
23:44  NfNitLoop: letas: assuming your files have extensions and your dirs don't, you could ignore /*.*
23:44  cbreak: git can not track directories
23:45  drizzd_: cbreak: well, there is sparse checkout and --assume-unchanged, but I'll not go into that since I have to go.
23:45  cbreak: gitignore supports unignore with !
23:46  cbreak: wrong
23:46  NfNitLoop: ooh, handy.
23:46  DrNick: "*" and "!*/" doesn't work
23:46  cbreak: it's more * and !*/*
23:46  cbreak: but I'd anchor it to /
23:47  DrNick: x and x/ aren't the same thing, logically * and */ shouldn't be either
23:47  rotham: hey... how do I update my local repository from the remote one?
23:48  ben_h: hi all
23:48  cbreak: fetch and merge
23:48  ben_h: i'm looking for a command like 'git log --pretty=format:%s', but for just one commit
23:48  ben_h: instead of its ancestry
23:48  cbreak: show
23:48  ben_h: right, but show also shows the diff
23:49  ben_h: i can't find an option to disable it
23:49  cbreak: pick a different format?
23:50  ben_h: i mean 'git show --pretty=format:%s' shows the output i want, followed by the diff
23:50  SethRobertson: kanzure: Still lost without a branch?
23:50  cbreak: or you can always use git log with -n
23:51  ben_h: yeah i was thinking that might be the best option
23:51  ben_h: just thought there might be a better way
23:51  ben_h: cheers
23:51  letas: NfNitLoop I tried that before and it didnt work :-(
23:52  kanzure: SethRobertson: nah i fixed it (i think)
23:52  SethRobertson: So you are all happy happy with a nice history now?
23:52  kanzure: SethRobertson: but now i'm on master and looking at the logs for a few files.. and the only commit for that file is "Moved remotely"
23:53  kanzure: oh crap i should have merged to new-master
23:56  kanzure: SethRobertson: so when i run git log on a file that hasn't been updated since prior to the svn mvs, the only commit i see is my merge that i created
23:57  SethRobertson: DId the file in question get renamed during the merge?
23:57  cbreak: -C -M
23:58  SethRobertson: kanzure: ^^
23:58  kanzure: SethRobertson: it may have been moved. git show my-merge-id shows that the diffs are only adding files
23:58  kanzure: cbreak: yeah it's still only showing my merge commit as its only commit
23:58  SethRobertson: Use those flags
23:58  kanzure: i did
23:58  kanzure: git log -C -M some_file
23:59  SethRobertson: Try mucking with the number for -M
23:59  SethRobertson: Or -C, whichever
23:59  SethRobertson: --find-copies-harder (if you have it) might also be helpful
--- Log closed Wed Dec 01 00:00:16 2010
