--- Log opened Sat Nov 27 00:05:28 2010
--- Log closed Sat Nov 27 00:10:29 2010
--- Log opened Sat Nov 27 00:10:56 2010
00:10 --- Users 663 nicks [0 ops, 0 halfops, 8 voices, 655 normal]
00:13 --- Channel #git was synced in 137 seconds
00:14  silver_hook: What's the best way to guarantee that what you committed was really you?
00:15  patrikf: silver_hook: in what sense? i.e. what do you intend to use that information for?
00:16  silver_hook: patrikf: Well, let's say that it'd be crucial that it was me who commited and I'd have to prove that to someone.
00:26  patrikf: silver_hook: as opposed to (a) someone else faked the commit or (b) you faked the commit?
00:30  silver_hook: patrikf: Both really.
00:31  patrikf: silver_hook: you can't prove (b)
00:31  silver_hook: patrikf: OK, how about {a} then?
00:33  patrikf: silver_hook: you somehow need to transmit the sha1 hash of the last commit in the series you want to make a statement about over a secure channel
00:33  patrikf: i.e. send a mail containing the hash, make a tag and sign it as proposed before, etc.
00:34  silver_hook: OK.
00:35  patrikf: silver_hook: in a more real-world scenario, ssh access to the git repo for your customer/other end might be a convenient implementation
00:37  patrikf: i.e. you set up the repo on the server so that only you have write access to it, and the server identifies itself to the customer (and you claiming that whatever $server has in $path comes from you)
00:37  silver_hook: OK, so IRL SSH + sign-tagging often is the way to go.
00:38  patrikf: nah, with ssh you wouldn't need the sign-tagging to ensure trustworthy results.
00:38  silver_hook: I think I get the ideaâ€¦
00:38  silver_hook: Oh, cool.
00:39 --- Reviou is now known as Evious
01:03  sterlo: How does one tag a specified SHA1 ID?
01:04  rudi_s: sterlo: git tag tag-name sha1
01:05  sterlo: rudi_s: thank you.
01:05  rudi_s: np - most git commands can use sha1s directly.
01:06 --- ChanServ sets modes [#git +v ArseneRe1]
01:11  Seq: Hi. Is there a way to merge/fast-forward another branch up to my current one without switching to it first?
01:13  offby1: oh sure
01:14  offby1: man git-update-ref
01:14  jast: the 'git-update-ref' manpage can be found at http://git.or.cz/man/git-update-ref [automatic message]
01:14  offby1: Seq: not much point, though, if you ask me.
01:15  planet8: Suddenly while working on a local repo, not a cloned one, I get the following error trying to commit changes: "error: bad index file sha1 signature fatal: index file corrupt", how can this happen?
01:16  silver_hook: Thank you everyone for explaining stuff to me :) I'm off to bed now.
01:17  planet8: A couple of hours ago I updated from 1.7.1 to 1.7.2.3, I don't know if this has anything to say.
01:19  planet8: found the answer, never mind
01:19  patrikf: planet8: not sure how it happened, but in case you want to know how to fix it: unless you have changes that you have only in the index and not elsewhere, you can safely rm .git/index
01:19  planet8: patrikf, thanks
01:20  patrikf: how did it corrupt?
01:20  planet8: I had a power failure earlier and I am using XFS
01:32  gk: hello, is there a way to git archive project with all submodules (recursively)?
01:34  homekevin: Hey, can't I add just part of a new file? "git add -p <file>" doesn't seem to work when git doesn't know about the file.
01:34  homekevin: It gives "No changes."
01:38  kaseano: Hi, I'm on rails, I have a bunch of images in root/public/system
01:38  kaseano: i think git made a symlink from /current/public/system to /shared/public/system
01:38  kaseano: er shared/system
01:39  patrikf: homekevin: you probably already staged it then
01:39  kaseano: none of the images were deployed tho
01:39  patrikf: homekevin: git status will tell you (and also how to un-stage)
01:39  homekevin: patrikf: I did stage it, then unstaged it and tried again.
01:39 +ArseneRe1: patrikf: I just reproduced it, on 1.7.0.
01:39  kaseano: cant actually tell if it's capistrano or git, cus there's nothing but the root directory on github
01:39  patrikf: er, didn't think.
01:39  homekevin: I couldn't find any way to do it, starting with it staged or unstaged.
01:40 +ArseneRe1: homekevin: What are you trying to accomplish? That doesn't sound terribly atomic.
01:40  patrikf: homekevin: of course it doesn't work, as what add -p does is diff and then splitting the hunks by finding unchanged parts in-between
01:40  homekevin: ArseneRe1: I'm just trying to commit the new file in it's current state, minus some "TODO"-style notes.
01:41  patrikf: what's so bad about committing TODO-style notes?
01:41 +ArseneRe1: homekevin: Well...I don't think that's bad...
01:41  kaseano: nvm got it
01:42  homekevin: There's nothing particularly wrong with committing them, I just find them ugly. It's also easier to spot them in git diff than in the committed files.
01:42  patrikf: prefix them with TODO and grep
01:42  homekevin: I sometimes leave them out of a commit when I intend to fix them right away.
01:42 +ArseneRe1: If you're set on it, you can add the file, commit, remove the TODOs, commit, and meld the commits.
01:43 +ArseneRe1: Ah, and revert that "remove TODOs" commit, so that they're separate.
01:43  patrikf: homekevin: if you're doing it right away, why do you write TODOs in the first place?
01:43  homekevin: I already worked around it, I just thought it seemed like a reasonable thing to be able to do...
01:43  patrikf: sorry, I don't get the scenario. ;-)
01:43 +ArseneRe1: But again...this isn't making sense to me. Are you going to push this commit?
01:44  homekevin: patrikf: I'll forget otherwise. By "right away" I mean "the next thing I'm going to work on", but it might not be today or tomorrow.
01:44  patrikf: homekevin: then you should IMO commit them.
01:45  homekevin: ArseneRe1: No, in a situation like this it's usually that I want to commit it but not push until the TODOs are done.
01:45  homekevin: It's sort of a "I know there are some bugs in this, but I can fix them in another commit" situation, where I want to commit now because there's already quite a bit of work done.
01:46 +ArseneRe1: homekevin: Hm...at least for me it makes perfect sense to commit the TODOs. You can prefix your commit with WIP in that scenario.
01:46  patrikf: homekevin: you know about commit --amend or rebase -i?
01:46  homekevin: Yeah, I do.
01:46  homekevin: I agree, there's nothing wrong with doing it that way, ArseneRe1.
01:47  patrikf: homekevin: that's what I use for having commits introduce one change at a time
01:47 +ArseneRe1: homekevin: git's flexible, but I guess they missed a spot. :p
01:47  patrikf: homekevin: and if you squash the commit adding the TODO and the one removing the TODO, it won't show up at all
01:47  homekevin: Yeah, I know what you mean patrikf.
01:48  patrikf: homekevin: the main advantage is that you can have a clean working tree and are thus more likely to embrace branching
01:48  patrikf: (which is a good thing)
01:48  homekevin: I find it a little easier to modify the file in Vim, suspend it, git-add the file, then resume Vim and undo.
01:48  patrikf: homekevin: nah, I wasn't talking about a solution to your original problem.
01:49  homekevin: Oh, OK.
01:49  homekevin: I didn't understand then, but I think I'm with you now.
01:49  patrikf: homekevin: I'm saying if you commit buggy code with TODOs in it saying so, then later commit a fixed version, you can squash the two commits as if you never made $stupid_error in the first place.
01:49  homekevin: Sure, that works.
01:50  homekevin: I'm not sure why I don't do that more often, really.
01:50  homekevin: I usually save my --amending and such for when I actually unintentionally commit the wrong thing.
01:50  homekevin: Or commit something I didn't realize was buggy.
01:51  Seq: offby1: Thanks. It looks like that just repoints the ref, rather than doing a merge.
01:51  Seq: offby1: But it gives me a lead. Thanks
01:52  patrikf: homekevin: I'm usually developing on a feature branch, commiting rather often, and then do a rebase -i before merging.
--- Log closed Sat Nov 27 16:37:05 2010
--- Log opened Sat Nov 27 16:37:28 2010
16:37 --- Users 667 nicks [0 ops, 0 halfops, 9 voices, 658 normal]
16:39 --- Channel #git was synced in 128 seconds
16:42  fakingfantastic: how do you make a branch and pull all the modified files in master into that branch, so master has no modified files anymore?
16:44 +teuf: fakingfantastic: git checkout -b newbranch; git commit -a; git checkout master
16:44  fakingfantastic: oh, lol. I'm still in SVN mode, keep forgetting branches are just pointers - thanks
16:49 * acs waked up
16:49 +acs: How can I edit and replace an old patch with something new ?
16:52 +acs: BZZzzzzz
16:53  JKL_: acs: what is patch in this context?
16:54 +acs: patch = a commit object
16:54 +acs: JKL_:  patch = a commit object
16:55  JKL_: then you should rebase with -i
16:55 +acs: JKL_: figure that commit is a file within the git file system , and I want to edit that file
16:55  JKL_: and mark your commit with edit
16:55 +acs: JKL_: Hm.... can you show me an example on the web ?
16:57  JKL_: acs: how about this: http://book.git-scm.com/4_interactive_rebasing.html
16:57 +acs: JKL_: Thanks . let me seee....
16:58 * hyperair wonders why people actually need books to learn how to use git.
16:58  hyperair: aren't the manpages good enough?
16:58  JKL_: hyperair: trying to understand rebasing only with man page seems very hard way for me :)
16:59 +acs: hyperair: NO! I tell you for sure
16:59  hyperair: =\
16:59  hyperair: okay, i'll admit it took me quite a while to wrap my head around git rebase, but i mastered it with nothing but the manpage.
16:59 +acs: 2 weeks ago I knew nothing about git. I had to send a patch to emacs, and I could not
16:59 +acs: so I had to learn it from scratch
17:00 +acs: I saw a few videos
17:00  hyperair: acs: er. git commit -a, and git format-patch HEAD^
17:00  hyperair: is that so hard?
17:00  hyperair: two commands needed to send patches
17:00 +acs: hyperair: I know now
17:00  napster_123: is it possible to know the hashcode of a commit, a tag is based on?
17:00 +acs: hyperair: 2 weeks ago I did not understand at all. And I decided to study it
17:00  hyperair: acs: most projects that use git have a nice wiki page for that.
17:01 +acs: emacs has a few major modes for that . lol
17:01 +acs: napster_123: can you be more precise ?
17:02  JKL_: tag is an alias for a hash. so I answer yes :)
17:02  napster_123: acs: i have a tag named foo and i want to know the commit's hash that foo tag was build from?
17:02  napster_123: JKL_: commnad?
17:02 +acs: napster_123: I see... a second
17:03  JKL_: you want to see the name of commit that your tag references to
17:03  napster_123: JKL_: yes the hashcode of that commit
17:03  JKL_: hahs is the name of a commit
17:03  JKL_: hash
17:03  napster_123: JKL_: i see
17:04 +acs: napster_123: you use gitk, and look at the commit the tag points to
17:04  napster_123: actually right now when i am checking out the tag, i only get parent folders and there are no source files... so i want to verify that the original parent commit had those files or not
17:04 +acs: napster_123: from command line , I do not know, but I look now
17:04  napster_123: acs: ok
17:05  doener: napster_123: git rev-parse your_tag^{commit}
17:06  doener: napster_123: or "git rev-parse your_tag^0" for short
17:06 +acs: napster_123:  git show <tagname>
17:06  napster_123: doener: you mean 'git rev-parse foo' will give me commit name?
17:06  napster_123: acs: ok let me try that
17:07  napster_123: acs: yeh that seems to show me all attributes... thanks
17:07 +acs: that shows you all list, and the first entry from that list is the onject the tag points to.
17:07  hyperair: acs: well git major modes in emacs suck.
17:07  doener: napster_123: no, "git rev-parse foo" will tell you the object that "foo" resolves to, which might be a tag object, the ^{commit} modifier makes it peel the object till it finds a commit, so you'll get the tagged commit, if any
17:07 +acs: napster_123: you can apply a constraint , to show you only the 1st entry
17:07 +acs: hyperair: I did not use git major modes yet
17:08 * hyperair shrugs
17:08  napster_123: doener: that's cool
17:08 +acs: hyperair: so far I used gitk, as Linus T recommended it
17:08  napster_123: acs: or i can grep for 'commit'
17:08  JKL_: how about git tag -v foo
17:08  napster_123: JKL_: interesting ... trying that too
17:08 +acs: napster_123: ya, you can grep, but grep takes time
17:08  hyperair: acs: ah gitk. well gitk is fugly but that's beside the point. i still don't know how to use it, by the way.
17:09 --- boban21 is now known as boban22
17:09  doener: acs: WTF? You give him "show" instead of rev-parse, so a diff and all that is generated, but you complain about grep taking extra time?!
17:09  napster_123: JKL_: that works.. cool
17:09 --- boban22 is now known as boban23
17:10 +acs: napster_123:  git show <tagname>~ shows you only the first entry
17:10  napster_123: acs: ok
17:10  doener: JKL_: "git tag -v <tag>" only works for annotated tags, and only really makes sense for signed tags
17:11  doener: acs: "git show <tagname>~" show the first parent of the tagged commit, which is something totally different...
17:13 --- axiom is now known as majoh
17:16 +acs: doener: thanks
17:16 +acs: Now I try something like
17:17 +acs: git log --abbrev-commit  --pretty=format:%H <tagname>
17:29  banisterfiend: hi
17:29  banisterfiend: i just accidentally commited to (no branch) while im on a 'dettached head'
17:29  banisterfiend: how do i get the changes i just made and stick them on 'master' ?
17:31  engla: banisterfiend: you can make a new branch where you are (git branch newbranchname)  and then you merge that to master. or cherry-pick.
17:31  engla: banisterfiend: sorry I mean (git checkout -b newbranchname)
17:31  banisterfiend: engla: hmmm. would it work if i merge in the SHA-1 of the commit i made on the dettached head?
17:31  engla: sure, that works too.
17:32  banisterfiend: engla: also i see it's at HEAD@{1}. can i just merge in HEAD@{1} into master?
17:32  engla: yes, any way of giving a name to the commit is the same. but HEAD@{x}  will change if you checkout something
17:33  engla: also note that merge will merge in a branch, so it matters what you based the commit on too of course.
17:33  banisterfiend: engla: why doesnt this work? git diff HEAD:app/meteor.rb HEAD~1:app/meteor.rb
17:34  banisterfiend: oh wait it does
17:34  banisterfiend: sorry
17:54  edulix: hi people
17:54 --- fivetwentysix_ is now known as fivetwentysix
17:55  BuGo_laptop: i initialize git-daemon. how do i verify that it is working. when i try to clone from it i get fatal: unable to connect a socket (No route to host)
17:55  selckin: use a hostname that works
17:56  avar: you clone from localhost on the machine it's on first.
17:56  BuGo_laptop: it is hosted on different machine
17:56  avar: then log into that machine and clone from there
17:56  edulix: I want to create a git tool, preferibly in python, where is the devs documentation for newbies?
17:56 * edulix looking at the wiki, lost
17:57  avar: edulix: There isn't any. What do you want your tool to do.
17:57  BuGo_laptop: avar, i said that i cannot clone i get fatal: unable to connect a socket (No route to host)
17:57  avar: BuGo_laptop: Yes, I'm telling you to log into the host you're trying to clone from and clone from there, from localhost.
17:57 +acs: JKL_: I played now with git rebase -i, and I managed to edit the commit header, but not its contest (the patch lines)
17:57  BuGo_laptop: git clone git://192.168.0.101/brain.git while pinging this machine works
17:57  avar: BuGo_laptop: Then you see if the daemon is working
17:57  BuGo_laptop: ok
17:57 +acs: I want to edit the patch, can I ?
17:58  avar: acs: yes, change "pick" to "reword" or "edit"
17:58  edulix: avar: there isn't any? sounds bad. I want my tool to insert *specific* information in commits. probably internally it would use git notes
17:58  BuGo_laptop: avar, it clone worked
17:58  JKL_: acs: sc2 final ongoing atm :) naama is going to pnw
17:58  avar: BuGo_laptop: Then your network setup is at fault, what interface is it listening on.
17:59  parasti: edulix: there is no Git API, you use the low-level command line tools
17:59  avar: edulix: There's Documentation/{CodingStyle,SubmittingPatches} and Documentation/*/*.txt
17:59  parasti: edulix: so manpages is the documentation
17:59  edulix: ok thanks
17:59  avar: But yeah, that. You should use some "plumbing" tools.
17:59  avar: And ask on the mailing list, describing what your tool should do. Someone probably wrote it already, or wrote something you can use.
18:00  edulix: avar: sb wrote something I can probably use: git notes
18:01  BuGo_laptop: yes somewhy i cannot clone from other computers
18:01  boban23: hi
18:01  avar: edulix: depends on what you mean "insert info into commits", you mean when they're made, or after the fact?
18:02  avar: But yeah, something autogenerated should use notes
18:02 +acs: JKL_: it does not work for me
18:03 +acs: JKL_: I cannot manage do it
18:03  JKL_: :(
18:03  JKL_: when you mark your commit with edit
18:03  JKL_: rebasing stops
18:03  JKL_: then start to edit your files
18:03  JKL_: and add them to index
18:04 +acs: aah!
18:04  edulix: avar: I want to add something like: "time-spent: 2 hours 50 minutes" for each commit. I would have something like git timetracker start, then when when doing the commit, the timetracker "stops" and inserts the time spent
18:04 +acs: I think I see
18:04  avar: edulix: Have you considered using something like org-mode instead?
18:05 * acs uses org mode all the time
18:05  edulix: avar: what's that?
18:05 * edulix searches for org mode
18:06 +acs: edulix: org mode is a major mode to organize yourself
18:06  edulix: it's just for emacs right? I use kdevelop :P
18:06  parasti: a workflow like that kind of goes against the workflow that Git encourages
18:06  edulix: parasti: you mean like orgmode?
18:07  parasti: with Git you don't commit when you're "done", you commit pretty much constantly and clean up afterwards
18:07  avar: edulix: You can use Emacs to use org-mode, just like you can use Qt to use kdevelop.
18:07  avar: Anyway, I use it to do exactly that. I track the time I spend on everything at work, and it doesn't make any sense to do it per commit
18:07  avar: (I do it because I like it, not because I actually have to, and it's only for my own notes)
18:07 +acs: edulix: hehe . start using emacs ;_
18:07 +acs: ;)
18:07  edulix: acs: :P
18:09  edulix: parasti: the idea is to log the amount of time spent per commit with the commit. each commit has some info attached: a date when it was created, an author, a message, I just want to add a little more piece of extra info: amount of time spent on it
18:10  edulix: parasti: it doesn't need to be exact of course, but it's better than nothing
--- Log closed Sat Nov 27 18:16:08 2010
--- Log opened Sat Nov 27 18:16:35 2010
18:16 --- Users 674 nicks [0 ops, 0 halfops, 9 voices, 665 normal]
18:17  edulix: I wonder, for example, how does git svn work, does it use git notes?
18:17  avar: no, it adds crap to the commits themselves
18:18 --- Channel #git was synced in 134 seconds
18:18  avar: git svn is very badly/anciently written. Don't use it as a rolemodel for anything.
18:18  BuGo_laptop: avar, so what can be the problem that git deamon is not accessible from any other computer? it opens port somehow just locally or what?
18:18  edulix: but it could be done using git note right? becuase the idea is similar: adding metadata (svn commit id) to commits
18:19  edulix: git notes*
18:20  avar: BuGo_laptop: Maybe, check what interface it listens on.
18:20  avar: edulix: yes.
18:20  BuGo_laptop: avar, how do i do that? i am not very good at networking
18:21  parasti: git notes didn't exist when git svn was written
18:21  parasti: also, any problems you may see in git svn are cleary the direct result of having to interface SVN :P
18:23  avar: BuGo_laptop: what OS is it?
18:23  {aaron}: is there a quick way to take a look at a file on another local branch?
18:23  BuGo_laptop: CentOs
18:23  parasti: {aaron}: git show $branch:$path
18:23  avar: sudo netstat -ldnp | grep git-daemon
18:24  {aaron}: parasti, awesome thanks
18:24  BuGo_laptop: tcp        0      0 0.0.0.0:9418                0.0.0.0:*                   LISTEN      21415/git-daemon
18:24  BuGo_laptop: tcp        0      0 :::9418                     :::*                        LISTEN      21415/git-daemon
18:24  avar: You should also bookmark this: http://cb.vu/unixtoolbox.xhtml
18:24  avar: that means it's listening on the wildcard interface. Can you access other services on that machine?
18:24  BuGo_laptop: yes i just ssh'd to it
18:24  BuGo_laptop: git pull and git push seems to be working too
18:25  avar: uh, push/pull to that daemon works?
18:27  BuGo_laptop: avar, i am quite new to git so not sure how it organizes push/pull but it works without a daemon
18:28  avar: can you paste your .git/config file from the repo that push/pull works from?
18:29  avar: w 7
18:29  LauJensen: Hey - I have a branch which Im looking to merge with my MASTER, however a single commit in this branch has an error in its commit-msg. How do I merge while giving myself the oportunity to fix this commit message?
18:30  selckin: fix it on the branch then merge (rebase -i), or merge it then fix it
18:30  LauJensen: selckin: if I run rebase -i, then there's no reason to fix it on the branch first is there?
18:31  selckin: depends on where things are coming from, and what is on remotes
18:32  kanzure: hi all.. i have a huge svn repo i just converted to git
18:33  kanzure: i got a little too happy and showed everyone the repo but now there's tags/ trunk/ and all sorts of crap laying around
18:33  kanzure: shouldn't tags/ and trunk/ have been converted into, i dunno, branches?
18:33  kanzure: or is there something i'm missing
18:33  avar: they are if you invoke your tool correctly. What did you use?
18:33  kanzure: git-svn --init
18:33  avar: man git-svn -> --stdlayout
18:33  jast: the 'git-svn' manpage can be found at http://git.or.cz/man/git-svn [automatic message]
18:34  avar: you'll still need to fix it, since the tags will be branches. But that's easy.
18:34 +acs: JKL_: I marked the last commit with "edit", I re-changed the files with an editor, what do I do next for edititing the patch ?
18:34 --- unreal_ is now known as unreal
18:35  avar: stage them, then git rebase --continue
18:35  kanzure: avar: i'm looking at the manpage and in particulary the text for --stdlayout and i'm not sure if that's what i need
18:35  zoeb: is there a way to automatically get git to use --no-ff every time I merge a branch, something I can put in my config file perhaps?
18:35  kanzure: it sounds like it's primarily for tracking an svn repo remotely and only focusing on one branch?
18:35  BuGo_laptop: avar, this is weird.... i am hosting it using gitosis and it seems to have no .git folder in repository directory
18:35  avar: kanzure: No, it's for what you want.
18:35 +acs: JKL_: I did git commit, then git rebase --continue, and a new patch appeared
18:36  JKL_: acs: and you're a happy man now?
18:36 +acs: JKL_: my purpose was however to edit the last patch
18:36  avar: BuGo_laptop: What? I mean your repo that *you* push/pull from, not the one on your server.
18:36  avar: acs: don't do git commit, just stage
18:36 +acs: JKL_: I am sad
18:36  JKL_: then you have to squuze
18:36  avar: or since you have a new patch now just "fixup" it
18:36  BuGo_laptop: OH. Sorry!
18:36  JKL_: if you made a new commit
18:36 +acs: avar: what means stage ?
18:36  JKL_: git add
18:36  avar: acs: "git add -u"
18:37 +acs: JKL_: what means squuze
18:37 +acs: ?
18:37 +acs: ah!
18:37 --- zoeb is now known as ZoeB
18:37  avar: He means "squash", which is a git-rebase -i option.
18:37  JKL_: mis spelled squash
18:37  BuGo_laptop: avar, http://pastie.org/1328292
18:38  avar: BuGo_laptop: that's using ssh, not the git daemon.
18:38 * acs listens the radio, and hears something about the end of Berlusconi. What happenned there?
18:38  avar: Try to git remote add it and fetch from it.
18:38 --- _Unode is now known as Unode
18:39  BuGo_laptop: avar, what i was trying to do is to make git daemon to share my git repo without authentication i have read that git deamon is used to do that
18:40  avar: It is, you're just not setting it / your network up correctly
18:40  avar: Do "strace git clone URL_TO_YOUR_GIT_DAEMON" and past that output.
--- Log closed Sat Nov 27 18:46:09 2010
