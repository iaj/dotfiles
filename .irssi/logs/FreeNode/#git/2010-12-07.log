--- Log opened Tue Dec 07 00:00:08 2010
00:00 +Xxoulz: SethRobertson: It's more about "autonomy"
00:01  SethRobertson: 4: Give the teaching style a fancy name so that people don't realize they are being scammed
00:01  patrikf: e
--- Log closed Tue Dec 07 00:05:02 2010
--- Log opened Tue Dec 07 00:15:26 2010
00:15 --- Users 733 nicks [0 ops, 0 halfops, 9 voices, 724 normal]
00:16 --- briahn10_ is now known as briahn10
00:17 --- Channel #git was synced in 153 seconds
00:20 --- jzacsh_ is now known as jzacsh
00:24  ProLoser|Work: wereHamster: and if i don't like the merge?
00:24  wereHamster: undo it
00:25  wereHamster: throw it away
00:25  wereHamster: forget it
00:25  wereHamster: flush it down the sink
00:37  aleray: hi, are hooks included when "clone" ?
00:39  patrikf: aleray: no, that would be a security nightmare
00:40  aleray: patrikf, any idea to set up automatically a post-commit hook? I working on a repo with a font file in it, I want to automatically update the ufo and ttf versions on commit
00:41  patrikf: aleray: sounds like a bad idea, just provide a shell script or makefile and then everyone can regenerate the files when they want
00:41  aleray: patrikf, ok
00:42 --- o_o is now known as Guest73644
--- Log closed Tue Dec 07 11:09:52 2010
--- Log opened Tue Dec 07 11:10:16 2010
11:10 --- Users 706 nicks [0 ops, 0 halfops, 11 voices, 695 normal]
--- Log closed Tue Dec 07 11:59:49 2010
--- Log opened Tue Dec 07 12:00:13 2010
12:00 --- Users 714 nicks [0 ops, 0 halfops, 11 voices, 703 normal]
12:02  offby1: myme: if you can't figure it out on your own, try emailing Eric Wong (the author of git-svn); I've done so, and found him to be helpful
12:02 --- Channel #git was synced in 149 seconds
12:02  offby1: leo2007: I don't think "git diff" does anything special for particular programming languages
12:03 +myme: offby1: Thanks for the tip.
12:03 +myme: doener: I've tried something similiar, I'll do it again to make sure I didn't overlook something.
12:03 +myme: Thanks for the reply though.
12:04  leo2007: offby1: I want to config git diff to show the function/variable/class name for lisp, any suggestions?
12:05 --- yaotti_aw is now known as yaotti
12:06 --- ChanServ sets modes [#git +v Nicklas`]
12:06 +Nicklas`: Hi
12:07 +Nicklas`: I use git svn proxy ; So I have already done the git svn clone
12:07 +Nicklas`: Then I want to add the AUTHORS file ; so I do git config svn.authorsfile = "....."
12:07 * tzafrir finally managed to commit with git-svn to a https (with certificates) repo
12:07 +Nicklas`: But how rebuild the git log to use this AUTHORS file ?
12:08  tzafrir: Nickeeh, didn't you use -A (--authors-file?) in the git clone command?
12:08 +Nicklas`: no
--- Log closed Tue Dec 07 12:20:52 2010
--- Log opened Tue Dec 07 12:21:15 2010
12:21 --- Users 712 nicks [0 ops, 0 halfops, 12 voices, 700 normal]
12:21  tzafrir: I enabled gnome-keyring in .subversion/config . Nothing changed.
12:21  tzafrir: IIRC git-svn does not read that file
12:22  leo2007: offby1: i use         xfuncname = "^\\(def.*$" and it seems to work.
12:23 --- Channel #git was synced in 149 seconds
12:28  offby1: leo2007: I've never heard of xfuncname ... interesting
12:29  offby1: tzafrir: I don't know how gnome-keyring works
--- Log closed Tue Dec 07 12:46:39 2010
--- Log opened Tue Dec 07 12:47:06 2010
12:47 --- Users 719 nicks [0 ops, 0 halfops, 12 voices, 707 normal]
12:49 --- Channel #git was synced in 152 seconds
12:55 --- yaotti_aw is now known as yaotti
13:12  cocoadaemon: ola. I'm starting with git ( hosting repo on own network ). Any advice ?
13:15  cbreak_work: gitolite
13:15  cbreak_work: if you want permissions
13:16  paulweb515: cocoadaemon: if you already have ssh connectivity, you can just use that
13:17  cocoadaemon: mmm paulweb515 ?
13:17  cocoadaemon: ssh to replace git ?
13:17  paulweb515: cocoadaemon: no, ssh as the protocol to connect to the hosted repo
13:18  cocoadaemon: ah, right
13:18  paulweb515: cocoadaemon: ex: ssh://pwebster@dev.eclipse.org/gitroot/e4/org.eclipse.e4.search.git
13:19  cocoadaemon: mmm otherwise, commiting is open to public by default ?
13:19  paulweb515: cocoadaemon: but as cbreak_work mentioned, if you want to host a couple of repos and control permissions, you need something like gitolite
13:19 * cocoadaemon uses OsX on the dev box and it doesn't come with SSH public key
13:20  cocoadaemon: it's a simple project with only me as dev, just want to avoid later headaches
13:20  paulweb515: cocoadaemon: but you can generate ssh keys relatively easily with openssh
13:21  paulweb515: cocoadaemon: if it's only you now and you control the machine, why not check out something like gitolite
13:21  cocoadaemon: paulweb515: i think I read that already but didn't mind so far. might think again.
13:21  cocoadaemon: ok so gitolite is a simple yet effective server ?
13:22  paulweb515: cocoadaemon: switching to ssh later is easy, since it's just about the host machines setup
13:22  cocoadaemon: with all the goodies of git plus extra special ACL topping?
13:23  paulweb515: cocoadaemon: I've never tried it myself, since it was easier for me to just use ssh and depend on unix groups for permissions
13:24  cocoadaemon: I see
13:29  cocoadaemon: I think I'll go for SSH since I won't deploy through web
13:40  mdpatrick: Any of you using gitosis? From my machine the git repository is hosted on I can clone and push just fine, but the moment I try to push a new project I made (which I added to the config file on gitosis-admin) I get a "repository read access denied" error
13:44  zxy_64: i'm having a problem with git gc. After it conts, compresses, wwrites and removes duplicate jects then i get this:  Removing duplicate objects: 100% (256/256), done.
13:44  zxy_64: Unable to open directory ./objects
13:44  zxy_64: Unable to open directory objects/pack
13:44  zxy_64: but the objects directory is there and is writable by user and by group
13:56  zxy_64: could it be ^^^ because git-daemon is running at the same time
13:58  mdpatrick: Wish I knew, zxy, sorry :)
14:02  tzafrir: zxy_64, can you try: ls .git/objects ?
14:02  tzafrir: Also: try creating a file there
14:05  walt: is there a decent git client for mac? Suitable for artists
14:06  tango_: is there a smarter way than git reset --hard HEAD to abort a merge?
14:06  tango_: git merge --abort
14:08  QuiltPants: Hi all. I'm having quite a confounding time. We have a branch that has gotten confused as to what it's called. This happened because somehow locally I have the name in lower case whilst someone else has it in upper case. Each time I now do a pull the remote branch name changes change from lower to upper case. I have tried to rename my local branch to delete the remote branch and try again, but it seems to not be deletable! Any idea?
14:15 --- yaotti is now known as yaotti_aw
14:15  offby1: QuiltPants: someone's using Windows?
14:15  QuiltPants: offby1: no, we all use osx
14:15  offby1: hm, is someone using a case-insensitive file system?
14:16  zxy_64: tzafrir, in objectsdir i did tousch testfile and rm testfile and it worked without problems
14:16  cbreak_work: mac os x' default file system is not case sensitive
14:17  offby1: QuiltPants: I think you need to find a case-sensitive file system on which to do the rename, and then the push
14:17  cbreak_work: or you can just delete it
14:17  offby1: I've never run into this problem before
14:17  cbreak_work: git push remotename :branchname
14:17  banisterfiend: how do i find out if im in the middle of a merge?
14:17  cbreak_work: and then recreate it with the new name
14:17  offby1: banisterfiend: "git status" ought to tell you
14:18  QuiltPants: cbreak_work: I've tried that but it came back down when I next pulled
14:18  QuiltPants: cbreak_work: I'll try again though as I may have not done it correctly
14:18  cbreak_work: QuiltPants: that would update the branch on the remote
14:18  cbreak_work: maybe the stuff in your .git/config is wrong?
14:18  cbreak_work: (upstream info)
14:25  QuiltPants: cbreak_work: ok it looks like when I tried that command my .git/config was wrong. It has now worked (for the time being) :)
14:25  QuiltPants: thanks for the help guys
14:26  cbreak_work: neat :)
14:26 * offby1 idly wonders just what was in .git/config
14:26  offby1: core.actfunny = true
14:27  cbreak_work: upstream with different case? :)
14:27  cbreak_work: so the remote replied to it, because for the remote, case didn't matter
14:27  cbreak_work: so he got the wrong one always
14:27  cbreak_work: because he ASKED for it
14:27  cbreak_work: that's my guess
14:38  eagles0513875|2: hey guys bout to start setting up my first git repo
14:38  eagles0513875|2: :)
14:42  offby1: hoo ray
14:42  eagles0513875|2: :)
14:42  eagles0513875|2: hey everyone can someone whose on ubuntu tell me how accurate this git wiki is
14:42  eagles0513875|2: https://help.ubuntu.com/community/Git
14:43  offby1: geez, I don't want to read it all
14:43 * cocoadaemon rolls D2 
14:43  offby1: it's one major version behind, and has a silly spell-o in the first bullet point.
14:43  offby1: From those facts I deduce that it was not written with care.
14:43  cocoadaemon: mmm... 0. It's not accurate.
14:44 * offby1 consults the Magic Eight Ballâ„¢
14:44  offby1: "Outlook is uncertain"
14:45 --- yaotti_aw is now known as yaotti
14:46  eagles0513875|2: ffs
14:46  eagles0513875|2: :( what documentation should i follow
14:46  eagles0513875|2: gitosis is this version
14:46  eagles0513875|2: Candidate: 0.2+20090917-2
14:46  reuss: http://progit.org/book/
14:47  patrikf: forget gitosis, use gitolite
14:47  eagles0513875|2: -git-core:   Installed: 1:1.7.0.4-1
14:47  eagles0513875|2: im guessing git-core is grossly out of date?
14:48  eagles0513875|2: t
14:48 +Fangorn_: i'm running git-core 1.7.3.2 (via MacPorts on Mac OS X), and that's the latest available
14:50  eagles0513875|2: Fangorn_: im on kubuntu lucid on my server
14:50  eagles0513875|2: and they get their packages from upstream debian
14:50  eagles0513875|2: blah
14:50  eagles0513875|2: if debian isnt on the latest version then ubuntu wont be unless a bug is filed to have it upgraded
14:51 +Fangorn_: you can check yourself and command line: dpkg -l  | grep git-core
14:52  patrikf: why would you need the latest version anyway?
14:52  eagles0513875|2: dunno just hate how distros sometimes let things get grossly out of date
14:53 +Fangorn_: you're still up-to-date with the latest minor version revisions...not a big deal
14:53  eagles0513875|2: true but what about any possible bugs etc
14:54  eagles0513875|2: the version that ubuntu server has is 1.7.0
14:58  patrikf: eagles0513875|2: yeah, what about possible new bugs? there's always two faces to it.
14:58  eagles0513875|2: true as well
14:58  eagles0513875|2: viva la double edged sword
14:59  eagles0513875|2: any other documettnt recommendations on how to setup gi
15:00 +Fangorn_: you can browse the release notes here if you cared to http://www.kernel.org/pub/software/scm/git/docs/RelNotes/
15:00  eagles0513875|2: ok
15:01  eagles0513875|2: any other recommended documentation instead the ubuntu documentation for setting up a git repo?
15:03  offby1: I'd download & install gitolite, and read its docs.
15:03  offby1: It probably has pointers to stuff
15:13  tzafrir: eagles0513875|2, not sure about ubunto, but I suppose it is similar to Debian
15:15  tzafrir: I just use git-web for a simple setup. To make it run, install gitweb
15:27 --- cillybabe is now known as cilly
15:35  urbanmonk: anyone here know if ghunit is any good?
15:37 * offby1 stares blankly
15:39 * PerlJam wonders what ghunit has to do with git
15:39  urbanmonk: whoops
15:40  urbanmonk: wrong channel
15:40  urbanmonk: on another note ... is there a way to setup a repo so that it will automatically download and track all remote branch refspecs when you clone a repo?
15:40  oteren: trying to find some resources on providing http access to a git repo, anyone got any links to share?
15:42  bremner: perhaps "man git http-backend"
15:42  jast: the 'git' manpage can be found at http://git.or.cz/man/git [automatic message]
15:42  bremner: perhaps "man git-http-backend"
15:42  jast: the 'git-http-backend' manpage can be found at http://git.or.cz/man/git-http-backend [automatic message]
15:43  oteren: thanks, just what i was looking for bremner
15:43  ppawel: hmm, it's not possible to stash given path? do I have to stash whole working directory? :(
15:44  jaeckel: ppawel: a work-around could be to stage all features that shouldn't be stashed away and do a 'git stash --keep-index'
15:47  ppawel: but other files are also work in progress, I don't want to stage them, just want to stash some of them to temporarily revert some of the changes I made
15:48  ppawel: ah but stage does not mean commit... duh
15:48  offby1: urbanmonk: sounds like you want "git clone --mirror"
15:49  ppawel: btw I really like git add -i
15:51  jaeckel: ppawel: yeah, on console it's very nice
15:51  jaeckel: like the git gui
15:52  jaeckel: when you like guis :)
15:52  urbanmonk: ppawel: that's not really what I want .. that essentially creates a mirrored bare repositories ... basically i'm helping my team transition to git ... I would like an easy way for my team to clone the repo and bring along the master and devel branches and have the tracking already setup for the devel branch ... right now they have to create a local branch and then use the branch command to setup the up-stream tracking
15:53  urbanmonk: it's not that hard but I would like to make it easier if I can
15:53  ppawel: urbanmonk, I believe you meant to address offby1
15:53  urbanmonk: crap
15:53  urbanmonk: yes
15:53  urbanmonk: offby1: that's not really what I want .. that essentially creates a mirrored bare repositories ... basically i'm helping my team transition to git ... I would like an easy way for my team to clone the repo and bring along the master and devel branches and have the tracking already setup for the devel branch ... right now they have to create a local branch and then use the branch command to setup the up-stream tracking
15:54  offby1: yeah yeah
15:54  offby1: they _might_ be able to get away with "git checkout devel"
15:54  urbanmonk: hmmm lemme try that
15:54  offby1: in certain circumstances (I'm not sure which) that'll automagically set up tracking
15:54  offby1: sometimes it doesn't, though
15:54  jaeckel: there's still the -t option
15:55  urbanmonk: offby1: oh sweet .. the checkout worked
15:56  urbanmonk: i didn't know you could do that
15:57  ptor: It does that automatically since 1.7.1 IIRC.
15:58  urbanmonk: i see
15:58  urbanmonk: and all this time i've been creating local branches and manually setting the upstream
15:58  ptor: pre-1.7.1 that would have been the only approach, yes.
15:59  jaeckel: yeah, that's right ptor
15:59  zxy_64: git fsck gives me:   fatal: index file open failed: Too many open files
15:59  zxy_64: any ideas what to do
15:59 --- jzacsh is now known as jzacsh_
15:59  jaeckel: the default is now something like 'git checkout --track -b foo origin/foo'
15:59  offby1: zxy_64: yikes
16:00  jaeckel: when you do 'git checkout foo' and foo exists as remote branch
16:01  rgr_: I have a top level git repo in dire D1. D2 and D3 are both sub dirs on level 1. I now wish to make D1 and D2 their own git repos. What is the best approach? Simply create a git repo in D1 and D2?
16:02  rgr_: s/dire/dir
16:02  offby1: probably
16:02  offby1: not sure actually
16:02  ptor: zxy_64: what does 'ulimit -n' (if you're in bash) say?
16:02  rgr_: what, if anything should I do at D1? I wish to remove D2 and D3 from the D1 git repo.
16:03  zxy_64: ptor, $ ulimit -n
16:03  zxy_64: 1024
16:03  jaeckel: rgr_: possibly "man git-filter-branch"?
16:03  jast: rgr_: the 'git-filter-branch' manpage can be found at http://git.or.cz/man/git-filter-branch [automatic message]
16:04  ptor: zxy_64: Looks quite normal. So maybe you've opened too many file descriptors via your shell already.. try logging in as yourself and then do git fsck again, i.e. ssh localhost
16:05  rgr_: I'm not sure I see how git-filter-branch helps.
16:06  jaeckel: git filter-branch --subdirectory-filter <foldername> -- --all
16:06  jaeckel: but you must create a copy of the repository before you do this
16:06  jaeckel: and execute this in the copy
16:06  jaeckel: :)
16:06  rgr_: heh! http://stackoverflow.com/questions/1978304/make-subdirs-of-git-repository-their-own-git-repos
16:07  rgr_: I sometimes wonder if theres a problem that hasnt already been solved ...
16:07  rgr_: and yes it mentioned git-filter-branch! Thanks
16:08  Plouj: hi
16:09  Plouj: I attempted to merge and I got conflicts in the parent repo's files plus a submodule is shown as modified. After resolving the conflict in the parent repo, do I need to do anything with the submodule before doing 'git rebase --continue'?
16:12  zxy_64: ptor, i su-ed to the user again and i'm doing git fsck again
16:14  ptor: zxy_64: Hopefully you used 'su -' and not just 'su'.. the latter doesn't log in again
16:14  zxy_64: i did su -
16:14  zxy_64: :D
16:14  ptor: ok
16:17  oteren: i've set up my http-backend now, and if you have authtype basic, it just uses system users, right? i'm getting auth errors
16:22 --- yaotti is now known as yaotti_aw
16:23  zxy_64: ptor, do you know maybe if when doing git gc i need to shutdown all programs like git-daemon and cgit
16:24  jast: usually not
16:27  ppawel: jaeckel, heh, I was using gitk but now that you mentioned it I'm hooked on git gui...
16:28  zxy_64: ptor, the same again
16:30  bartek: Hi. Any insight on git and symbolic links? We use AutoFS to mount a media server across 4 servers. When we do a git pull with any changes to the media-server directory, it removes the symbolic link and just begins rebuilding the directory with the changed files. How can I make it follow the link
16:31  fbits: We want to switch a SVN repository to Git but some users still need a SVN repository. How can we synchronize Git with SVN?
16:31  bremner: fbits: man git-svn
16:31  jast: fbits: the 'git-svn' manpage can be found at http://git.or.cz/man/git-svn [automatic message]
16:32  fbits: bremner, jast: yes, but it synchronizes the wrong way
16:32  bremner: really, that seems to be the only semi-supported option. It means keeping the svn repo as long as you have svn users.
16:32  fbits: ah there's dcommit. Is this the right tool for me?
16:34  ptor: zxy_64: I don't know what git-fsck is doing internally, or what could cause it to use so many file descriptors. But just in case it's not really where the problem is, you may try to shut down everything and restart the box, then try again. And there's the option of increasing the number of file descriptors in /etc/security/limits.conf
16:36  bremner: fbits: dcommit allows a git user to update a svn repo
16:36  fbits: bremner: yes, I was looking for this
16:36  fbits: bremner: my next step is doing this automatically by a post-commit hook
16:38  bremner: why use git at all if you force it to be non-distributed?
16:39  oteren: can i... 'push' a git repo to a fresh location?
16:39  fbits: bremner: we love Git and want to use the distributed features
16:39  fbits: bremner: anyway, some clients still use SVN and aren't able to switch but need access to the repository
16:42  oteren: i have a git project on my local machine, that i want to push or 'put' to a remote server, can i just tarball my project, unpack at host and git init it?
16:43  curtana: oteren, do you want to have a shared repo that both push to/pull from? or do you want to always pull from one to the other interactively
16:45  oteren: the first
16:45  oteren: or rather, i use it as a inter-machine backup
16:45  oteren: it's only me
16:45  oteren: maybe it clarifies if i just say i want the 'general' svn usecase behavior
16:45  curtana: ok
16:46  curtana: and where is the shared repository to be hosted -- or is that what you want to create now?
16:46  oteren: how do i make the initial repo in the central server?
16:46  oteren: i already have a git project on one of my dev machines
16:46  curtana: it is customary to make a directory, myproject.git
16:46  oteren: i want to mirror it to the central server
16:46  curtana: then inside it, run git init --bare
16:46  curtana: then in your workign repositories: git remote add origin [url] && git push origin master:master
16:47  zxy_64: ptor: it might be due to the repo is about 2.5G in size and has around 1.8 million objects
16:47  oteren: git remote, got it
16:47  curtana: then git branch --set-upstream master origin/master
16:47  oteren: i'm using EGit in eclipse though, but i guess i'll find the analogy
16:47  curtana: at that point, it should be exactly as if you initially cloned from the shared repostitory
16:48  bremner: fbits: generally, post-commit hooks that push things to remote repositories are a bad idea, because the mean that git is no long distributed in any meaningfull way.
16:56 --- slyphon_away is now known as slyphon
16:57  homa_rano: what does it mean when merge-base has an error code of 1?
16:57  glenngillen: hey guys, is there a way to tell if a given commit SHA has been included in a tag?
16:57  fr0sty: git tag --contains <sha> |grep "tagname"
16:58  glenngillen: cheers
16:58 --- yairgo_ is now known as yairgo
16:59  homa_rano: hmm, it apparently means that there is not common ancestor
17:00  s0enke: gitg manages to show me the hstory of commits that are only in my current branch (well the colors change, but by clicking on the arrows the right parent/child is selected). what's the corresponding git log command? (git log --no-merges shows also commits from other branches).
17:00  homa_rano: my script interprets return code of 1 as an error...except with status, commit, and now merge-base
17:08  s0enke: ahhh it's git log --first-parent
17:11  s0enke: so the output of git log --first-parent shows the right commits that i want to be used in a rebase. i guess there is no option in rebase?
17:14 --- ivey_off is now known as ivey
17:15 --- ivey is now known as ivey_off
17:24 --- tj- is now known as tjholowaychuk
17:36  kylehayes: mornin' #git
17:38  kylehayes: We recently switched over to git and went from one big repository in P4 to many little ones for each of our code modules. One thing we are having trouble managing is ensuring all the modules are on the "same" branch and tag. Currently to do that, we are using a combination of shell and ant scripts run as loops over each repo. Is there an easier way to manage this type of behavior?
17:38  d-snp: hey, just checking, git reset --hard is the same as git reset;git checkout -f right?
17:39  d-snp: kylehayes: are you using submodules?
17:39  kylehayes: d-snp: No we are not
17:39  curtana: kylehayes, submodules.
17:39  kylehayes: submodules didn't provide the functionality we desired
17:39  curtana: d-snp, that sounds reasonable
17:40  curtana: kylehayes, hm, what was that?
17:40  d-snp: maybe, I have no practical experience with this whatsoever, but you could make a project that just consists of all git repos as submodules
17:40  d-snp: then you have one central place where you manage and version-track which versions of which modules your project is using at any time
17:41  kylehayes: curtana: well, we didn't like how when you pulled a project that used submods you disconnected those submods from the tree
17:41  d-snp: disconnected from the tree?
17:42  bartek: Ugh. Has anyone dealed with git and mounted directories? I used to have a symbolic link to the mounted directory with Subversion, but Git does not seem to follow symbolic links. Can't mount inside my repo directory (for obvious reasons) .. Any one ahe ideas?
17:42  kylehayes: "Submodules allow foreign repositories to be embedded within a dedicated subdirectory of the source tree, always pointed at a particular commit."
17:42  kylehayes: key phrase being " always pointed at a particular commit."
17:42  kylehayes: Plus you cannot modify the history of the submodule from within the main project which is something we desire
17:43  curtana: ok. i don't have an answer to your problems, but now you have stated them, someone else more knowledeable might be able to suggest something :)
17:43  kylehayes: as of right now, our projects that need references to the other modules symlink in those modules to their appropriate directories. That way, even if we cd in to one of those modules we'll still be within the repo we think we're in
17:43  kylehayes: curtana: haha
17:44  d-snp: so weird, everytime I merge from svn, and I pull from another git repo, it has a conflict in the same file
17:44  d-snp: for some commit made ages ago
17:44  kylehayes: This almost identical to what we are doing now: http://stackoverflow.com/questions/36862/how-do-you-organise-multiple-git-repositories
17:44  kylehayes: the answer of that question that is
17:46 --- DrNick2 is now known as DrNick
17:56  nfrs: hi
17:56  bluenovember: Hello nfrs
17:57  nfrs: I've done some changes to the local files on a wrong branch (haven't committed them yet). is it possible to switch to another branch and bring over the working tree changes?
17:58  bluenovember: just checkout that branch and it will pull the changes along
17:58  dr_lepper: nfrs, if those file do not differ across branches and you haven't staged the changes, just checkout the other branch
17:58  bluenovember: alternatively, "git stash" (hide away current changes) checkout, then "git stash pop"
17:58  nfrs: error: You have local changes to 'some/file.txt'; cannot switch branches.
17:58 * d-snp rams some commits down the central repo's throat with git push -f :P
17:58  d-snp: I love it :P
17:59  bluenovember: d-snp, "git push --all -f". screw you all!!!!111
17:59  bluenovember: :P
18:00  d-snp: first thing I always do after git init --bare --shared is setting it to allow forcepushes :P
18:00  bluenovember: it can be ok depending on your team's workflow
18:00  bluenovember: nfrs, did you get your problem resolved? "git stash, git checkout ..., git stash pop"
18:00  nfrs: bluenovember: yes, I think that did it. thanks
18:01  d-snp: you use git in a team? :P
18:01  bluenovember: cool
18:03  d-snp: my team consists of me, me and me
18:04  bluenovember: frequent conflicts, d-snp?
18:04  d-snp: on a laptop, a desktop and on a server :P
18:04  d-snp: sadly, more often than you'd think -_-
18:04  bluenovember: xD
18:04  bluenovember: Yeah I often find I'm working on two parallel branches. I go to merge in, get conflicts, and think "damn, who's been messing with my stuff"
18:04  bluenovember: "oh, it was me"
18:05  d-snp: sometimes I forget to pull before going on the train
18:05  d-snp: and then I reimplement stuff in the train :P
18:05  Obelich: hai
18:05  Obelich: hola buenos dias
18:06  Obelich: ohayou gozaimasu :)
18:06  bluenovember: Croeso
18:21  mansour: how do I find the files that changed in a specific commit ?
18:22  FauxFaux: mansour: git show commitid # or git log --diffstat commit #.
18:22  mansour: all I need is to list them, for example if I have a commit abcdef, what are the files that changed ?
18:22  mansour: FauxFaux: thanx, will try this
18:33  Dreamr_3: ok i have a branch and tag with the same name
18:33  Dreamr_3: how can i tell git to remove the remote branch with that name?
18:34  Dreamr_3: "tagname" doesn't work since it's ambiguous
18:34  SethRobertson: kylehayes: still around?
18:35  kylehayes: SethRobertson: Yes
18:35  tango_: Dreamr_3: you don't remove remote branches
18:35  SethRobertson: kylehayes: Are you still unhappy with submodules?  I have an alternative which might be better (or worse) for you depending on your workflow.
18:36  Dreamr_3: tango_: i mean git push origin :blah
18:36  Dreamr_3: the : removes it from the branch list
18:36  kylehayes: SethRobertson: heh, yes still unhabby with submodules
18:36  Dreamr_3: but it isn't working because the name is ambiguous
18:36  Dreamr_3: so how do i specify the longer version?
18:36  SethRobertson: kylehayes: gitslave (http://gitslave.sf.net) is useful when you control and develop on the subprojects at more of less the same time as the superproject, and furthermore when you typically want to tag, branch, push, pull, etc all repositories at the same time.
18:36  tango_: Dreamr_3: :heads/blah ?
18:36  SethRobertson: kylehayes: git-subtree is better when you prefer to have a single-repository "unified" git history and only need to pull changes in from external sources--not contribute your own changes back
18:36  Dreamr_3: tango_: thanks :)
18:36  kylehayes: SethRobertson: Intriguing, if it is what you say it is, could be exactly what we need
18:36  tango_: Dreamr_3: it works? good
18:37  kylehayes: SethRobertson: I will look up both, thank you so much for responding!
18:37  SethRobertson: kylehayes: no problem.  Let me know if you have questions.
18:37  kylehayes: SethRobertson: will do
18:45  kylehayes: SethRobertson: I really like what I'm reading about GitSlave...I'm almost sure this is what we need. As I mentioned before, we are using a combination of ant and shell scripts to manage all the repos right now
18:45  SethRobertson: I'm glad it might be useful
18:45  kylehayes: SethRobertson: have you used this?
18:45  SethRobertson: Rather
18:58  FauxFaux: Can you make stash stash ignored files?  Basically, I want git new-worktree, I think.
19:00  tango_: FauxFaux: there i a git new-workdir
19:00  FauxFaux: Yeah, that's what I meant.
19:00  tango_: there is such a script in contrib. it creates a new directory with a (usually different) branch checked out
19:02  FauxFaux: Yeah, that's what I meant. :)
19:03 --- Vampire0_ is now known as Vampire0
19:04  Obelich: anyone can speak spanish
19:04  Obelich: ?
19:05 +[exa]: Obelich: http://translate.google.com/ ayuda
19:09  Obelich: anyone can give some help we have this error http://pastebin.com/WtMjerWW
19:09  Obelich: in git at try to push
19:11  SethRobertson: faq push-f
19:11  jast: If you use push -f, others might get into problem when pulling: please see https://git.wiki.kernel.org/index.php/GitFaq#push-f [automatic message]
19:11  SethRobertson: Obelich: faq non-bare
19:11  jast: Obelich: Pushing to non-bare repositories is discouraged: please see https://git.wiki.kernel.org/index.php/GitFaq#non-bare [automatic message]
19:12  Obelich: SethRobertson: wakatta :)
19:20  malesca: Say I create a new branch: "git checkout -b foo". Then I push it to origin: "git push origin foo". Then I "git pull" and get "You asked me to pull without telling me which branch you want to merge with". I would like "git pull" to always assume same branch. Possible?
19:20  malesca: What I've been doing is adding '[branch "foo"]; remote = origin; merge = refs/heads/foo' to .git/config, but it gets kind of annoying.
19:21  TheUni: malesca: git push -u, i believe
19:22  malesca: TheUni: Nice, that did work. Thank you.
19:23  TheUni: np
19:23  TheUni: you can probably set in config somehow, not sure without looking
19:24  malesca: TheUni: I'll see if I can find it, thanks
19:35 --- ivey_off is now known as ivey
19:48 --- adamholt is now known as adamholt_away
19:48 --- adamholt_away is now known as adamholt
20:14  nakkor: using stdin to clone a https repo that needs a password fails for me, I am writing the password via stdin but the process is never continuing.  Any hints?
20:19  slonopotamus: nakkor: git clone via http fetches things silently here. maybe your case too?
20:20  nakkor: slonopotamus: in the standarderror it asks for "Password: "
20:20  nakkor: so I am guessing that it needs one to continue :)
20:21  slonopotamus: nakkor: so, it continues asking for password?
20:21 --- ChanServ sets modes [#git +v zivester_]
20:21 +zivester_: i pulled a colleagues repo branch, and I want to track it on my own repo... I tried `git branch --set-upstream branchname zivester2/branchname` but I get "fatal: Not a valid object name: 'zivester2/branchname'
20:21  nakkor: slonopotamus: no, it seems that it just never continues, even though I stdin a password to it
20:22  patrikf: nakkor: typing or piping it?
20:22  nakkor: zivester_: do: git branch -vv and get the branch names from that
20:22  slonopotamus: nakkor: try du -sh .git several times while it "never continues" :) does it grow?
20:22 --- yaotti_aw is now known as yaotti
20:23 +zivester_: well branchname is there, along with master... master is trcking to another repo, and branchname is tracking to his repo
20:23  nakkor: patrikf: I am calling git directly, so not through terminal or bash, and so I am using just stderr, out, and in
20:23  AntoineSolutions: Is there a recommended tutorial for setting up a personal server similar to how git-hub works?
20:23  slonopotamus: nakkor: or "never" is much longer than expected time it should take to fetch remote repo contents?
20:23  nakkor: slonopotamus: I have tried that, and it doesn't grow :(
20:23  nakkor: slonopotamus: well, it is not even starting the clone, bc it isn't getting the pw
20:24  nakkor: from what I can tell
20:24  AntoineSolutions: When I say similar to how github works, I just mean integrated with Apache with the nice Web App interface?
20:25  slonopotamus: AntoineSolutions: asking yourself looks strange
--- Log closed Tue Dec 07 21:50:41 2010
--- Log opened Tue Dec 07 21:51:06 2010
21:51 --- Users 745 nicks [0 ops, 0 halfops, 11 voices, 734 normal]
21:52  eblake: can anyone help me figure out how to get 'git format-patch' to include notes in refs/notes/commits, the same way as 'git log' already does?
21:52  eblake: I'd really like to have my notes included between the '-- ' and diffstat portion of the 'format-patch' output
21:53 --- Channel #git was synced in 156 seconds
21:59 --- ries_ is now known as ries
22:00  parasti: eblake: maybe fake git format-patch --stdout with git log --format=email --show-notes
22:00  parasti: eblake: git log -p, rather
22:01  parasti: although it would break note display in the upstream repo
22:03 --- ChanServ sets modes [#git +v bright_]
22:03 --- bright_ is now known as perlstein
22:03 +perlstein: hey so
22:04 +perlstein: how do i tell what my parent branch is on the command line?
22:04  jast: "parent branch"?
22:04 +perlstein: like
22:04 +perlstein: what i branched from?
22:04  jast: git doesn't explicitly store that information
22:04  fr0sty: perlstein: that is not a coherent concept in git.
22:04 +perlstein: er
22:04 +perlstein: ok, so here's the deal
22:05 +perlstein: i have a master which tracks a remote svn branch
22:05 +perlstein: now i have a "release"
22:05 +perlstein: but i'm keeping that on a branch
22:05 +perlstein: now i want to give it to my team
22:05 +perlstein: but continue to develop for a while
22:05 +perlstein: so i figured i'd branch again
22:05  jast: and with git-svn everything is different anyway...
22:05 +perlstein: but when i need to slurp in updates from SVN master...
22:05 +perlstein: it gets confusing
22:05 +perlstein: well i'm not making branches in SVN
22:05 +perlstein: just branching in git on top of svn
22:06  jast: with git-svn, every branch remembers from which *SVN* branch it was cut
22:06 +perlstein: well
22:06  jast: i.e. all git branches based on a branch that is based on svn branch foo are based on foo
22:06 +perlstein: in my case i'm on trunk
22:06 +perlstein: i see
22:06 +perlstein: ok
22:06  jast: you can see it in the log
22:06 +perlstein: i guess
22:06  jast: those git-svn-id lines contain the branch URL
22:06 +perlstein: i want to be able to "tag" where i am
22:06  jast: git-svn determines the corresponding SVN branch by finding the most recent commit with a git-svn-id line
22:07 +perlstein: in case my coworkers need a minor fix to this branch
22:07 +perlstein: but i'm going to be developing forward
22:07 +perlstein: er
22:07 +perlstein: so
22:07 +perlstein: basically, if i have a bunch of code, i can't branch off it? that doesn't make sense
22:07  cbreak: subversion rarely makes sense
22:07  jast: well, sure you can
22:08 +perlstein: i should be able to branch off my current branch
22:08  cbreak: best you can do is to just always rebase
22:08 +perlstein: then go back to it
22:08 +perlstein: yes
22:08  jast: no problem with that
22:08 +perlstein: that's what i do
22:08 +perlstein: i should be able to branch off my current branch
22:08 +perlstein: then go back to it if i need any updates for that older patchset
22:08 +perlstein: ?
22:08  jast: not only should you be able, you *are* able
22:08  jast: but
22:08 +perlstein: ok, well is there anything that tells me that linkage?
22:08  jast: well, let's supposed your 'master' is based on svn trunk
22:08  cbreak: be aware that svn commits are *destructive*
22:09  jast: and you branch 'foo' off of 'master'
22:09 +perlstein: cause it's annoying to have to "checkout branch 1 -> 2 -> 2" to rebase each
22:09 +perlstein: ok
22:09 +perlstein: jast: yes?
22:09  parasti: cbreak: what does that even mean?
22:09  cbreak: it means that it rewrites history
22:09  jast: in that case running 'git svn rebase' inside 'foo' will update foo with new stuff from svn trunk
22:09  jast: and git rebase master will rebase against your local master instead
22:09  cbreak: so it destroys the original history
22:10  cbreak: so branches that are based o nthe old history still have it
22:10  jast: but git does not remember that you branched foo off of master
22:10  cbreak: but you have new history that is incompatible with the old history
22:10  cbreak: anyway, just listen to what jast says :)
22:10  jast: cbreak: that's a property of git-svn, not svn
22:10  cbreak: yes
22:10  cbreak: real svn doesn't even have branches
22:10  jast: git-svn is, shall we say, a bad solution to a difficult problem
22:11  jast: or a mediocre solution at best
22:11  jast: admittedly, SVN merge tickets did not exist back when git-svn was developed
22:11  parasti: it's the only solution, too
22:11  jast: now that they do exist, one could use merges instead of continually rewriting history, thus eliminating all the pain on the git side
22:11 +perlstein: ok folks thants
22:11 +perlstein: thanks
22:11 * perlstein goes off to use RCS
22:12  jast: well, it's your funeral. :)
22:12  jast: anyway, I don't see full merge support getting added to git-svn. it's just too darn complex.
22:12  cbreak: just use folders with time stamps in the name
22:12  cbreak: you can even pretend to have branches with some more folders
22:13 +perlstein: way ahead of you
22:13 +perlstein: i'm using tarballs
22:13 +perlstein: they are more space efficient
22:13  jast: cbreak: why timestamps? I suggest suffixes like "-old", "2", "-test", "tmp", "~", "-foo"
22:13  cbreak: since when does tar compress?
22:13  jast: cbreak: nitpick much?
22:13  cbreak: jast: that's what the tag subfolders are for :)
22:13  ^Simon^: so once I've cloned an svn repository into git using git-svn, is it better to just push back to a git repository and ditch svn completely instead of trying to muddle through using git-svn?
22:14  cbreak: ditching svn is always better, if you can do it :)
22:14  eblake: parasti: but I want to feed my notes via 'git send-email' for commentary on the patches that will not be pushed upstream
22:14  jast: ^Simon^: git-svn is okay to use as a subversion client as long as you don't try to push stuff like merged history back to subversion... but if you have the choice, I'd probably go for converting to git
22:14 * ^Simon^ is head of the department (of 3) so if I say we're ditching svn, we'll ditch svn :p
22:14  eblake: so I don't care if 'git log -p' can't transfer the notes upstream, but I don't see any way to make 'send-email' or 'format-patch' even acknowledge that notes exist
22:14  parasti: eblake: I see, so not included in the commit message?
22:14  eblake: let alone put the notes where I want them in my email
22:15  jast: one important thing to note is that using git-svn with several developers does not mix well with also trading work via git itself
22:15  eblake: parasti: exactly - I am rebasing a series, so as part of that rebase, I added a note stating what changed in v2, v3, ...
22:15  eblake: the rebase notes are extremely useful for email-based review (why is the series better this time around)
22:16  eblake: but pointless for the upstream repository (who cares how many revisions it took me to get to a stable series, when git bisect only sees the final series)
22:16  jast: format-patch doesn't seem to have that feature
22:16  jast: sounds like an idea for a patch
22:16  eblake: jast: my problem is that I don't know the git code base well enough to write such a patch
22:17  eblake: is anyone here likely to step in and help out, or should I propose it as a feature idea on the list?
22:17  jast: let me see how much work it is
22:17  ods15: assuming the git repo i use contains some *code-generated* content (i.e., running "make" changes them), (I've tried talking my way out of this, seems i'm stuck with this situation) - what can i do to prevent constant conflicts? is there a "conflict hook" git script, that i can tell it, "if the conflict is in a/b/c, just run "make bla", get the new file, and move on..."?
22:18  jast: ods15: no such hook, sorry
22:18  eblake: jast: thanks for the help! that's one of the reasons I love git - it includes a community of very responsive hackers
22:19  ods15: jast, i considered trying to replace the binary "git-rerere" with my own script, but that wouldn't completely automate it, still need something to tell it "conflict is resolved, continue.."
22:21  parasti: eblake: how does that work, though?  you rebase once and all your notes refer to dangling commits, no?
22:22  eblake: parasti: you can configure 'git notes' to move notes across rebases, right?
22:23  parasti: eblake: oh, neat.  didn't know that
22:23  eblake: if not, that sounds like another feature request - to have git notes.rewrite.rebase have the ability to remove the note off the old commit after putting it on the rewritten commit
22:24  eblake: parasti: at any rate, I'm a relative newcomer to 'git notes', and thought I would start using them in my workflow
22:24 --- _W is now known as _W_
22:25  eblake: so I don't know if notes attached to abandoned commits ever get garbage collected, or if they stick around and also prevent the annotated commits from gc
22:26  parasti: pretty sure that's been thought of
22:27  parasti: I just didn't know they get carried over across rebases, that's all
22:28  eblake: parasti: per my reading of 'git notes --help', you have to set  notes.rewriteRef=* in your .gitconfig to carry all notes across
22:29  ods15: what are custom merge drivers? could this help me?
22:29 --- ivey is now known as ivey_off
22:34  fr0sty: ods15: that could probably help.
22:34  fr0sty: why are your build artifacts tracked, again?
22:37  cbreak: ods15: just git rm the file, if it's generated, it should not be tracked
22:37  ods15: cbreak, fr0sty, :( i agree of course
22:37  jast: eblake: gets pretty deep into the revision walking machinery, apparently. I'd probably take ages until I understand it, so perhaps you'd better post to the list after all.
22:39  mdunham918: how do i push to a remote folder im still reading my progit book and haven't gotten that far but im at work and want to push my current commit to my remote server so i get checkit out when i get home
22:39  ods15: i've had this discussion several times with co workers, i keep forgetting the reason, something to do with java builds with separate projects..
22:39  mdunham918: do i pass a ssh:.. ftp style call
22:39  mdunham918: sftp
22:40  mdunham918: or does git need something on the remote server to accept it or can it just push to a remote directory as long as i give it ftp info
22:40  cbreak: mdunham918: you can only push to repositories
22:40  mdunham918: and can it use normal ftp
22:40  mdunham918: how do i setup a remote repository?
22:40  cbreak: and the destination needs to have git
22:40  mdunham918: well then
22:40  cbreak: and you need to use a push aware transport such as ssh
22:41  SethRobertson:  ods15: http://thomasrast.ch/git/local-config.html
22:41  mdunham918: so i'd have to have git on my remote server and i just use ssh to get there
22:41  cbreak: no
22:41  ods15: i looked up merge driver, i think it wont help for these built files, but it might help for some other files which currently have comething like "version number".. i could tell it to automatically advance...
22:41  cbreak: once you have ssh on the server
22:41  cbreak: and git installed
22:41  jast: pushing via stupid protocols is possible but fairly inefficient... and you need to use a few crutches
22:41  cbreak: and a bare repository on the server that you can access
22:41  cbreak: then you can do git remote add ssh://server/path/some.git
22:41  cbreak: (of course with the correct syntax)
22:42  cbreak: then push
22:42  mdunham918: i understand how to install git on my server via ssh just not sure how git on the remote server knows im pushing to it
22:42  mdunham918: git would need to be a global command on the server wouldnt it
22:42  eblake: jast: thanks for the heads up; I'll go ahead and write the feature request email, then
22:42  cbreak: no
22:42  jast: mdunham918: usually, yes
22:42  cbreak: git just has to be in path
22:42  SethRobertson: ods15: also you could have a make target which would delete all of the autogenerated files and then re-check them out from git
22:42  jast: but with a bit of trickery, such as what cbreak said, it's not necessary
22:43  SethRobertson: ods15: I wonder if a smudge/clean hook could do something similar
22:43  mdunham918: i wonder how to make git a global function on my linux server
22:43  mdunham918: thanks
22:43  cbreak: you have a server but no clue how to install an app?
22:43  mdunham918: hmm maybe i should use a central version control deal
22:43  ods15: SethRobertson, that wouldn't work well enough because i frequently rebase, not pull.. we're still using git-svn
22:43  mdunham918: im just starting with git
22:43  mdunham918: its my dev server
22:44  cbreak: I install git with make and make install
22:44  mdunham918: i dont linux completely yet
22:44  cbreak: (of course with some more parameters, such as prefix)
22:44  cbreak: hmm. that's a problem.
22:44  mdunham918: i really want to learn git
22:45  mdunham918: once i learn it i can teach my dev team
22:45  mdunham918: no more overwrites!
22:45  mdunham918: hells yea
22:45  SethRobertson: ods15: I'm not sure which "that" you were talking about, but AFAIK all of the proposed solutions will work with rebase instead of merge
22:46  ods15: SethRobertson, how would having a make target help?
22:46  ods15: say i have a local branch, i changed the code and hence the generated files several times in several commits
22:47  ods15: when i rebase and there was an update to those files, i will have a conflict on every single one of those commits...
22:47  SethRobertson: ods15: Before you commit (or diff or whatever) you run the make target to reset those dynamically generated files.  It wouldn't seem to hurt you that these files are out of date (you can just auto-regenerate them again, no?) and if you wanted to commit a clean version at the end, feel free.
22:49  SethRobertson: If you didn't care about committing, you could try and figure out a way to get the filter clean operation to feed the committed version back into git so it wouldn't realize you changed anything
22:49  ods15: SethRobertson, hmm, i think i understand, and the answer is no.. even though the files are generated, i need them up to date in every single commit
22:49  cbreak: I haven't read why you want to commit them... :)
22:49  cbreak: and I don't want to know
22:49  cbreak: I'd probably just lose brain cells if I understand it :)
22:50  ods15: cbreak, frankly, i dont want to know anymore either :(
22:50  ods15: i'm just trying to make a bad situation not worse... i can't really fix this problem at its root
22:51  SethRobertson: ods15: That doesn't make a lot of sense, but it seems like your team has painted themselves deep into a corner.  I'm not sure why each commit has to be individually valid--are you sure that just your push upstream cannot be the only one which is valid?
22:52  SethRobertson: ods15: that would allow you to commit everything except those files each time, allow incoming changes to not conflict, and only when you are fully up to date and ready to push do you commit the autogenerated files.
22:53  ods15: SethRobertson, like i said, we're still on svn (transition to git doesnt seem very likely), so there is "push upstream" that needs to be the one that is good...
22:54  ods15: maybe i'll try getting rid of these files again, see how it goes... i've repeatedly tried, and i keep forgetting why i gave up
22:55  ods15: anyway, there is another file which also gets constant conflicts, it is something like a "version" file, just a running number, and i think the merge driver would help in this case...
22:56  peterjmag: On a similar note to mdunham918's question: can anyone recommend a decent *nix basics book? Since git is so linux-like, the commands are somewhat intuitive to me, but not as much for the coworkers whom I'm trying to encourage to use git more frequently. I think it might help them if they were generally more comfortable working with the command line.
22:57  mdunham918: yep
22:57  cbreak: git on mac os x is better than git on linux :)
22:57 * cbreak learned by doing, without a book, but lots of man page reading
22:58  peterjmag: cbreak: haha, I should clarify that by *nix basics I mean OSX-specific unix stuff
22:58  Sajaki: i tried using git on win7, it sucks compared to osX
22:59  cbreak: you should try TortoiseGit. It sucks even more :)
23:00  peterjmag: cbreak: I learned most of my command line stuff in Terminal.app, but most of that transfers over nicely to my Ubuntu system, for instance
23:03 --- andrewwatts_ is now known as andrewwatts
23:08  mdpatrick: Any of you using gitosis? From my machine the git repository is hosted on I can clone and push just fine, but the moment I try to push a new project I made (which I added to the config file on gitosis-admin) I get a "repository read access denied" error
23:08  ^Simon^: Yup.
23:09  ^Simon^: Umm, never had that problem before.
23:09  ^Simon^: Although I've not really used it a whole lot so far.
23:10  zxy_64: miki3koki
23:10  zxy_64: oops
23:10  tango_: mdpatrick: does the repository you'd like to push to exist?
23:10  tango_: the one for the new project
23:13  mdpatrick: tango_: Maybe thats the issue. What's the gitosis way to accomplish that???
23:13  tango_: mdpatrick: I have absolutely no idea
23:14  mdpatrick: OK, what's the normal way to accomplish that? It's on a locked down user account called "git"
23:14  cbreak: with gitolite, you have to mention a new repository in the config file
23:14  cbreak: and then commit the config file and push it
23:14  cbreak: you need gitolite-admin.git for that
23:14  cbreak: no idea how it's done in the ancient one
23:15  mdpatrick: Oh wait, gitosis is ancient?
23:15  cbreak: it is.
23:15  mdpatrick: Curse you google, curse you
23:15  tango_: gitosis is not ancient
23:15  cbreak: https://github.com/sitaramc/gitolite
23:15  cbreak: less ancient :)
23:16  tango_: it's prehistoric 8-D
23:16  bartek: Why does g it svn rebase do this? "First, rewind ghead to replay your work on top of it..."; Applying: meow; Applying: meow meow; Applying meow and repeats. "meow" is a commit I really don't want in my history as well
23:17  fr0sty: bartek: where did it come from?
23:18  bartek: fr0sty: It was a commit I made to test something, but I thought I had rebased it out. It came from a clone of the formal git repo (without the svn extras)
23:21 --- yaotti_aw is now known as yaotti
23:21  bartek: It's causing my history to be polluted with a bunch of meows, as weird as that sounds ;-)
23:21  fr0sty: well, you apparently failed to rebase it away...
23:21  bartek: of course
23:21  fr0sty: git rebase -i to the rescue, then.
23:21  bartek: I did that
23:21  bartek: Killed the lines
23:21  bartek: They stick around
23:25 * fr0sty is not convinced...
23:26  fr0sty: so every time you rebase -i you get the commits listed again, and removing the lines remove the commits?
23:26  SethRobertson: If you delete all lines the rebase is cancelled, you need to keep at least one other line around
23:26 * fr0sty has to run, sadly. good luck.
23:32 --- shennyg_ is now known as shennyg
23:33  shenson: is there a way to remove a commit object from a repository?
23:33  cbreak: yes
23:33  shenson: I've already removed it from any references, but gc doesn't seem to want to clean it up, nor does prune
23:33  cbreak: it's called *HISTORY REWRITING*
23:33  shenson: yeah, I did that
23:33  cbreak: afterwards, just clone the repo and throw away the original
23:33  SethRobertson: shenson: read the CHECKLIST at the bottom of man git-filter-branch
23:33  jast: shenson: the 'git-filter-branch' manpage can be found at http://git.or.cz/man/git-filter-branch [automatic message]
23:33  zangetsu: http://codepad.org/NJ90SVQy Someone can help me?
23:33  Eridius: did you try `git gc --prune=now`?
23:34  Eridius: also make sure it's not referenced from a reflog
23:34  cbreak: you will have to rexpire the reflog if you go the hard way :)
23:34  cbreak: just cloning it is the easy way
23:34  SethRobertson: zangetsu: You are in trouble.  Ideally you can clone again from upstream and ignore your current repo
23:35  shenson: the checklist at the botom of git filter-branch did it, thanks
23:35  SethRobertson: There are various articles on the internet about repairing a corrupted repo, but they all require backups or clones or stuff
23:42 --- Unknown[NF] is now known as Unknown[OFF]
23:42  tim: hi all, i've merged two repositories and removed one git submodule. however when initializing the submodules, i get messages like: No submodule mapping found in .gitmodules for path 'path/to/removed/submoduleâ€™. it seems, that the submodule is still somehow referenced. how can i remove all references to it?
23:44 --- q0rban is now known as q0rban|afk
23:46  SethRobertson: You at least need to `git rm` the submodule as well as .gitmodules
23:46  SethRobertson: and of course commit
23:47  tim: SethRobertson, thanks ... actually i had to `git rm --cached'
--- Log closed Wed Dec 08 00:00:50 2010
