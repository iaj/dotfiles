--- Log opened Sun Dec 05 00:00:32 2010
00:06 --- airborn_ is now known as airborn
00:12  daze21: How come I'm only prompted for my password as associated with my SSH key on my laptop, but not my desktop machine?
00:12  daze21: ...when I push/pull?
00:14  rudi_s: daze21: No key on your desktop? ssh-agent?
00:14  daze21: uh-oh.... might anything bad happen if I changed my global setting for my email and username?  I can't pull anymore!
00:15  rudi_s: daze21: No, that's just used for commits.
00:15  daze21: weird! then why can't i pull anymore...
00:17  daze21: it didn't prompt me for my password anymore!
00:18  mmattice: are you really yelling about this?
00:20  daze21: um I'm curious about why...
00:23  bremner: daze21: start by running "ssh -v mygithost"
00:24  daze21: "no address associated with name"
00:25  daze21: when it says name, does it mean my user.name as set in git config?
00:25  bremner: did you literally type "mygithost"?
00:25  daze21: um i dunno what it is
00:26  daze21: and yes <_<
00:27  daze21: trying git pull yields "no address associated with name"
00:27  bremner: what about "git remote show origin"
00:27  daze21: is it bad that renamed my remote place "github" ?
00:28  daze21: "git pull github" gives the same error...
00:28  daze21: "git remote show origin" yields the same error :(
00:29  bremner: daze21: yes. but is there output before that?
00:29  daze21: yet git remote -v still shows the remotes I expect...
00:29  daze21: oh
00:30  daze21: "ssh: github.com: no address associated with name"
00:30  daze21: and then "fatal: (...) "
00:30  bremner: daze21: you have a local dns problem, I guess. github.com works fine here.
00:30  bremner: I mean, to resolve the name.
00:31  daze21: oh wow my laptop's internet connections snapped. bleh.
00:31  daze21: that's why. >_>
00:31  bremner: la la la
00:36 --- theoros_ is now known as theoros
00:39  daze21: what determines when there is a .git directory in your application?  i have one that uses git, but there's no .git directory
00:44 --- ivey is now known as ivey_off
00:48 --- adamholt is now known as adamholt_away
00:48 --- adamholt_away is now known as adamholt
00:54  daze21: okay did I ask a really silly question, or ... ?
00:55  workmad3: daze21: well, a git repository has a .git directory in either the directory or a parent directory
00:56  workmad3: there's only the one .git directory in the repository root
00:56  SethRobertson: If there is a working dierctory it will have .git, if it is a bare directory it will not.  (Absent GIT_DIR and similar tricks)
00:56  workmad3: oh yeah, that's assuming it's a non-bare repo :)
00:58  daze21: what's that?
00:58 --- Unknown[NF] is now known as Unknown[OFF]
00:59  workmad3: daze21: basically, a git repository can be bare or have a working directory (and is non-bare)... a bare git repository is essentially the contents of the .git directory in a non-bare repository
01:01  bremner: daze21: you might find the command "git rev-parse --git-dir" interesting
01:03 --- Unknown[OFF] is now known as Unknown[NF]
01:08  daze21: for a public project, how is it that some stranger who clones your project and makes changes can't push it to your main project on github?
01:09  workmad3: daze21: because they don't have a push-able repo URL
01:10  daze21: and that URL is where?  how did I set it up to work for myself, so I can work on my laptop and my desktop?
01:11  workmad3: daze21: your github account either has the two public SSH keys for your laptop and desktop, or you used the same SSH keys on both
01:11  daze21: OH!
01:11  daze21: thank you
01:11  workmad3: and then you cloned through a git-SSH URL instead of a git:// URL
01:12  workmad3: bah
01:18  ProLoser: hello
01:18  ProLoser: can anyone help me install gitflow with msysgit?
01:20  ProLoser: uh
01:20  ProLoser: anyone know gitflow?
01:23  wereHamster: is'nt that just a bunch of shell scripts/
01:24  wereHamster: ?
01:27  ProLoser: i'm on windows/msysgit
01:27  ProLoser: so it's not that simple lol
01:28  ProLoser: i'm surprised it's not more popular in here
01:28 --- rgrig is now known as Guest21817
01:29  wereHamster: msysgit uses bash, right?
01:29  ProLoser: ya it has a git-bash shell
01:29  wereHamster: so shell script should run there just fine
01:29  ProLoser: well no, i have no idea where to put the files
01:29  ProLoser: https://github.com/nvie/gitflow
01:30  ProLoser: and https://github.com/nvie/gitflow/issues/issue/25
01:30  ProLoser: but it's not really a great set of instructions
01:30  wereHamster: put them into your PATH
01:30  ProLoser: i don't know where to clone to, and should i put gitflow-shFlags in the root of the git install dir, next to git-cheetah or in the bin folder?
01:30  ProLoser: ah
01:30  ProLoser: so i can put them anywhere
01:30  scogit: hello i get an error then i exec git push "error: unpack failed: unpacker exited with error code "
01:31  wereHamster: Installing git-flow -> Windows
01:31  scogit: how can i fix it?
01:31  wereHamster: did you try to follow what's in the readme?
01:31  scogit: its my own server
01:31  ProLoser: wereHamster: yes, but like i said it's not fully fleshed out
01:31 --- Unknown[NF] is now known as Unknown[OFF]
01:31  wereHamster: so what *exactly* seems to be the prbolem?
01:31  wereHamster: scogit: paste the full output (to a pastebin, not here)
--- Log closed Sun Dec 05 12:03:07 2010
--- Log opened Sun Dec 05 12:03:18 2010
12:03 --- Users 660 nicks [0 ops, 0 halfops, 9 voices, 651 normal]
12:04 --- Unknown[OFF] is now known as Unknown[NF]
12:05 --- Channel #git was synced in 151 seconds
12:07  antgel: jast: thanks for the update.  but phase3_dev *should* be associated with origin/phase3_dev.  i don't understand how the association can have broken
12:10  antgel: jast: git branch -vv indeed shows that it's not associated with origin/phase3_dev.  i'll try git push origin HEAD
12:11  jast: antgel: I can't tell you that, I wasn't watching. you can restore it using 'git branch --set-upstream phase3_dev origin/phase3_dev'
12:11  antgel: jast: thanks!
12:14 --- Unknown[NF] is now known as Unknown[OFF]
12:43  tim: hi, i am using submodules to track external libraries. now i am trying to move them from one directory of my source tree to another one. to achieve this, i replaced the oldlib path with newlib in .gitmodules. but now `git submodule' complains with: `No submodule mapping found in .gitmodules for path 'oldlib/mylib''. what am i doing wrong?
12:45  doener: tim: looks like you forgot to actually move the submodule, but just modified the config
12:45  doener: tim: git mv oldlib/mylib newlib/mylib
12:46  tim: doener, i will try it
12:59  cbreak: tim: also, be aware that .gitmodules is only read when you do git submodule init
12:59  cbreak: read the man page, there should be something about sync and --init
13:03  banisterfiend: cbreak: imin love with git show-branch
13:04  cbreak: what's it good for?
13:05  cbreak: looks a bit like git log --graph --decorate --all
13:05  banisterfiend: cbreak: show's me exactly where all my branches are in relation to eachother
13:05  banisterfiend: it's semi-graphical
13:06  banisterfiend: it just packs so much info into such a tiny space
13:06  banisterfiend: it's awesome
13:07  cbreak: hmm... I usse gitx for that, but I rarely care
13:07  banisterfiend: took me a while to figure out how to read it
13:07  banisterfiend: cos the info is kinda condensed
13:07  cbreak: only branch type I really use is feature branch, and I rebase them on top of master all the time anyway :)
13:18  Eiler: if i have an alias like: "git config --global alias.lg "log --p" where do i put this?
13:19  cbreak: you mean log -p?
13:19  cbreak: you just type it in a shell
13:19  cbreak: that will configure the alias
13:19  tim: cbreak, doener: when i try to move a submodule with `git mv' it tells me: fatal: source directory is empty, source=oldlib/mylib, destination=newlib/mylib
13:19  cbreak: it'll end up in ~/.gitconfig
13:22  Eiler: and how do i remove an alias?
13:23  frogonwheels: Eiler:  man git-config
13:23  jast: Eiler: the 'git-config' manpage can be found at http://git.or.cz/man/git-config [automatic message]
13:24  jast: or just edit ~/.gitconfig :)
13:24  jast: it's what I do
13:24  Eiler: aha
13:25  Eiler: when i type "git log" it opens up like an editor or something, it doesnt print it to console, how come?
13:25  jast: quite a few commands that generally produce lots of output use a pager (like less) by default
13:26  jast: generally that's more useful for people since it makes it easier to read the output
13:26  doener: tim: sorry, IIRC you have to add --cached
13:26  Eiler: aha can i change this somehow?
13:26  Eiler: i dont want a paper
13:26  jast: Eiler: you can turn it off for individual commands or set core.pager to cat
13:27  Eiler: how do i turn it off for an individual command then?
13:27  tim: doener, git-mv does not support --cached
13:27  doener: tim: argh, I confused that with rm (thinking of submodule removal...)
13:28  jast: Eiler: pager.<command name> set to on or off
13:28  doener: tim: mv oldlib/mylib newlib/mylib; git add -A oldlib/mylib newlib/mylib
13:29  tim: doener, ah ... that seems to do the job!
13:29  tim: doener, thanks!
13:30  Eiler: ah
13:30  Eiler: ok
--- Log closed Sun Dec 05 13:39:40 2010
--- Log opened Sun Dec 05 13:39:53 2010
13:39 --- Users 675 nicks [0 ops, 0 halfops, 10 voices, 665 normal]
13:40 +andrew2: for alsa, read blah
13:40  cbreak: tried git rm --cached blah
13:41 +andrew2: hmm will that remove my new files in the new dir?
13:41  cbreak: no
13:41 +andrew2: ok trying...
13:42 --- Channel #git was synced in 154 seconds
13:42 +andrew2: I get fatal: not removing 'lore/alsa' recursively without -r
13:43  cbreak: hmm. maybe just move the folder out of the way for now
13:43 +andrew2: but it was git added (with its contents
13:43  cbreak: that worked? didn't you say it was fatal error?
13:44  cbreak: well, git rm --cached -r maybe?
13:44  cbreak: --cached means "only change the index" in this case.
13:44 +andrew2: yes - it's trying to delete the cached new dir and files
13:44 +andrew2: dont think so
13:44  jast: git adding the directory should, in theory, automatically clobber the index entry of the file that used to be in its place
13:44 +andrew2: so why the error?
13:44  jast: that's a good question :)
13:44  cbreak: maybe his git is too old?
13:44  cbreak: I never had that error myself
13:45 +andrew2: version 1.7.2.3
13:45 +andrew2: very new
13:45  cbreak: (since all my files have extensions and most of my folders don't)
13:45  jast: what I wonder is why that error shows up during *commit*
13:45  cbreak: commit? I thought during add... weird.
13:46 +andrew2: exactly. status shows the file as deleted!
13:46 +andrew2: yes commit
13:46  piotr: which is an advisable git frontend for windows?
13:46  bremner: linux
13:46  bremner: (sorry)
13:46 +andrew2: ;)
13:46  cbreak: gitbash
13:46  cbreak: if you want to suffer, there's tortoisegit
13:47  cbreak: but I am assuming you are opposed to suffering
13:47  jast: one person's suffering is another's salvation ;)
13:47  bremner: what's wrong with tortoisegit, still not stable?
13:47  cbreak: it's so svnish
13:47 +andrew2: oh well I will try to unstage teh new dir and files, move them aside, git rm the original file....
13:47  cbreak: you can't even stage stuff
13:48 +andrew2: yes new stuff already staged
13:48  jast: cbreak was just talking about tortoisegit rather than about your problem :)
13:48  cbreak: yeah. your problem is just weird.
13:49  cbreak: I'd just git reset HEAD the whole index and stage again
13:49  jast: I wonder... does git write-tree succeed?
13:49  cbreak: but ... fixing is better :)
13:50  jast: not even that should really have to 'index' anything, though
13:53 +andrew2: ok now. to go over the problem again:
13:53 +andrew2: existing commit file, alsa
13:53 +andrew2: rm alsa
13:53 +andrew2: mkdir alsa
13:54 +andrew2: create some files in alsa
13:54 +andrew2: git add alsa
13:54 +andrew2: git commit -> fatal error error: unable to index file lore/alsa
13:54  wereHamster: try rm --cached alsa before the add
13:55  jast: andrew2: what does 'git write-tree' say?
13:55 +andrew2: woah - let me make a sandbox
13:55  jast: it doesn't destroy anything, don't worry :)
13:56 +andrew2: you want me to get to pointy of failed commit then git write-tree?
13:57 +andrew2: ok - here goes
13:57  jast: write-tree is essentially one of the steps of commit
13:58  jast: oh, hey, are you using 'git commit' or 'git commit -a'?
13:58 +andrew2: git commit
13:59  jast: right
13:59  jast: had it been with -a, I would have had more of an understanding of what might be going on
13:59 +andrew2: hangon - let me reproduce this in a sandbox - back in a mo
13:59  jast: but without -a I still don't know what could have caused the error message
14:01  jast: as far as I can see, the 'fatal' part of the message can only appear if you do a partial commit
14:05 +andrew2: Ok jast, easy to reproduce:
14:06 +andrew2: $ mkdir test
14:06 +andrew2: $ cd test
14:06 +andrew2: $ git init .
14:06 +andrew2: Initialized empty Git repository in /home/user/dump/test/.git/
14:06 +andrew2: $ echo "hello" > blah
14:06 +andrew2: $ git add blah
14:06 +andrew2: $ git commit -m "insane" .
14:06 +andrew2: [master (root-commit) f70abf3] insane
14:06 +andrew2:  1 files changed, 1 insertions(+), 0 deletions(-)
14:06  wereHamster: pastebin!
14:06 +andrew2:  create mode 100644 blah
14:06 +andrew2: $ rm blah
14:06 +andrew2: $ mkdir blah
14:06 +andrew2: $ echo "hello2" > blah/argh
14:06 +andrew2: $ git add blah
14:06 +andrew2: $ git commit -m "take that" .
14:06 +andrew2: error: unable to index file blah
14:06 +andrew2: fatal: updating files failed
14:06 +andrew2: sorry :|
14:07 +andrew2: what d'ya reckon jast?
14:07  jast: see, that's a partial commit
14:07  jast: exactly what I said :)
14:07  jast: "git commit" is not the same thing as "git commit ."
14:08 +andrew2: so git commit would work ok?
14:08  jast: almost certainly
14:08 +andrew2: ok, trying...
14:09  jast: actually, 'git add'ing your changes and using 'git commit .' is a pretty nonsensical combination if you intended to commit all changes anyway
14:09  jast: 'git commit .' says: 'ignore which changes are staged, and instead just commit all changes in .'
14:09 +andrew2: but the deleted file is in . ??
14:10 +andrew2: admitedly it's gone...
14:10  wereHamster: so.. ? Do you even know what 'git commit .' is doing?
14:10 +andrew2: commiting all staged changes in the current dir I thought
14:11  wereHamster: no
14:12  wereHamster: andrew2: man git-commit
14:12  jast: andrew2: the 'git-commit' manpage can be found at http://git.or.cz/man/git-commit [automatic message]
14:12  wereHamster: see the <file>… option
14:13 --- JKL___ is now known as JKL_
14:13 +andrew2: ok - will read ;) git commit with '.' works fine BTW. Egg, face etc etc. Thanks guys
14:14 +andrew2: s/with/without/
14:14  jast: well, something new learned, right? that's what counts :)
14:15  wereHamster: you should avoid using the <file>... option if possible. Using an explicit add is almost always better
14:15  jast: as a rule of thumb, if you're using 'add' anyway, just run vanilla 'git commit'
14:17 +andrew2: git -a allows me to auto stage 'rm' deletions, as in my example?
14:18  hyperair: was there a git -a?
14:18 +andrew2: sorry - git commit -a
14:18  hyperair: oh
14:18  hyperair: i dunno, try it and see?
14:18  hyperair: i think it doesn't
14:18  hyperair: i generally use git rm
14:19  jast: git commit -a picks up deletions and changes
14:19  jast: as explicitly stated in the manpage
14:20 +andrew2: just checking ;) Git manpages are flippin enormous
14:20  jast: -a is the first option listed in the git-commit manpage
14:20  jast: :P
14:21 +andrew2: for good reason it seems. Ok back to work now problem solved. thanks jast!
14:21  jast: you're welcome
--- Log closed Sun Dec 05 15:35:24 2010
--- Log opened Sun Dec 05 17:19:30 2010
17:19 --- Users 686 nicks [0 ops, 0 halfops, 9 voices, 677 normal]
17:21 --- Channel #git was synced in 151 seconds
17:26  zxy_64: hi is there a possibility to use something like pre_clone hook with git-daemon, where i could set some options for git, or send the person some text back?
17:26  zxy_64: in documentation i didn't find pre_clone hook though, but it would really be handy
17:27  cbreak: I don't think so
17:27  zxy_64: what i want to do is to use --depth 1 option as default for any clone command people do if not otherwise specified
17:28  bremner: yikes
17:28  cbreak: you are evil
17:28  zxy_64: i tred it in git config, but it doesn't do it later in practice
17:28  cbreak: there are easier ways to corrupt the clones of people
17:28  bremner: why not set up git-archive access via gitweb?
17:28  sitaram: zxy_64: any hook that comes in via clone is a *major* security risk for the cloner
17:30  sitaram: you want to pass some information or "git config" setup to the cloner, use a README :)
17:30  sitaram: helps you separate the smart ones from the dumbos too; (smart one read docs!)
17:32  zxy_64: sitaram, good point, though dumb ones stress the server too much
17:33  bremner: zxy_64: don't allow anonymous clone then, and provide a way for people to get snapshots
17:34  sitaram: zxy_64: hide the main clone URL behind a page that has a built-in README.  In bold.
17:35  sitaram: all caps, red font, underlined
17:35  cbreak: please, don't suggest <blink>
17:35  sitaram: cbreak: no... I'm an old-timer
17:35 * sitaram *has* used punch cards.  Honest, no jokes, no kidding
17:44  edbaffei: hi .. i have screwed up mu repo... i'd like to go back to a prevous state.. should i checkout  the sha1 id?
17:45  cbreak: no
17:45  cbreak: you can use git reset to nuke away stuff
17:45  edbaffei: cbreak: git reset ??
17:45  cbreak: yes
17:46  edbaffei: reset to where ?
17:46  edbaffei: how.. i have the commit id and thats it
17:47  cbreak: where you want to be
17:47  cbreak: do a git log
17:47  cbreak: or git log -g
17:47  cbreak: find a hash of a commit where you want your current branch to be
17:47  cbreak: then git reset --hard <sha>
17:54  v0lksman: I'm working in a branch, I checkout master and make some changes that I now want to bring into my working branch...do I merge mybranch master?  or do I pull?
17:58  SethRobertson: achromic?
18:01  SethRobertson: v0lksman: Your answer depends, of course.  If you are willing to take any other change that occurred on master since you branched "mybranch" then you can merge (or rebase) master.
18:01  v0lksman: so in branch "mybranch" I can run git rebase master and it will bring in all changes from master?
18:01  SethRobertson: rebase vs merge is a question about aesthetics.    Do you prefer a linear history or a linear commit-time.
18:02  bremner: and sharing.
18:02  Ashfire908: Hi. I, uh, pushed a branch, removed it from the remote, edited the history on that branch locally, then pushed it to the remote. Now one of the old commits is on the server and keeps popping up. Is there a way to fix this?
18:02  SethRobertson: v0lksman: Yes, assuming mybranch was branched from master.  (It will work in either case, but may not do unexpected things if the branches are not related)
18:02  v0lksman: hrm...I code alone...hahaha...I'd rather have linear history I think... :)
18:04  SethRobertson: Ashfire908, the old commits will generally be on the server, but they should not be popping up in your history.
18:04  SethRobertson: Unless someone else is on your project and did a "merge" with the new history into the old history instead of a rebase.  You must use rebase when rewriting history.
18:04  SethRobertson: This is why it is not suggested to rewrite published history
18:05  Ashfire908: I'm running a modified ViewGit and it's appearing in the RSS feed.
18:06  SethRobertson: I'm afraid that doesn't really help me.  You could `clone` the repo and see what a unmolested repo looks like for correction purposes, but...it seems unlikely that ViewGit would adjust a repo's history
18:07  Ashfire908: I mean it's poping up in the RSS feed, which is generated from git rev-list.
18:09  SethRobertson: That information does not affect any (most specifically the previous three) of my comments
18:11  Ashfire908: Well, I just want to know how I would fix this.
18:16  SethRobertson: You need to rewrite history again, do a force push (or delete/add), and then get everyone else who might have pulled and =definitely everyone with commit privs to re-`git pull --rebase`
18:16  SethRobertson: They will need to rebase any private branches off that rewritten branch and rewrite any tags off that rewritten branch
18:16 --- MarqueI is now known as Marquel
18:17 --- fedesilva_ is now known as fedesilva
18:17  bremner: Ashfire908: can you duplicate the problem with "git log" or "gitk"?
18:17  SethRobertson: Or...do a revert of that patch and live with it in history
18:17 --- madduck_ is now known as madduck
18:18  mmattice: anybody know if hg-git actually works?
18:18  Ashfire908: Ok.
18:19  Ashfire908: bremner, ...Actually I already started doing it a different way... But it didn't come up in the log, just from rev-list (which is what viewgit uses to make the feed).
18:20  SethRobertson: How about `git log --full-history`?
18:20  SethRobertson: How did you rewrite history?  With rebase or revert?
18:20 --- axiom is now known as majoh
18:21  Ashfire908: I used rebase.
18:25  Ashfire908: I resolved it now, so it doesn't matter anymore... Though this has (re)taught me not to push edited history...
18:34  zxy_64: sitaram, thx for the ideas, now there is no clone address on cgit site, but addres to clone instructions where things are explained
18:35  PovAddict: <Sho_> great, the original phonon.git actually has a repo data error that doesn't get past modern git versions
18:35  PovAddict: <Sho_> "error: object 95f644268432563cc17a85d86949788e9b677b09:invalid author/committer line - missing space before email"
18:35  PovAddict: is it possible to change the author/committer line in a commit without changing all the SHA1s that follow? maybe hack something with grafts?
18:36  wereHamster: no
18:37  paradigm: PovAddict: if you could, then that also means those bits could become corrupt or altered by nefarious people and it wouldn't be reflected in the hash
18:39  PovAddict: then what can be done with this repo? git complains about that object, but fixing it would break everybody's clone
18:40  wereHamster: it appears as youhave no choice
18:45 --- adamholt is now known as adamholt_away
18:45 --- adamholt_away is now known as adamholt
18:57 --- rlb` is now known as rlb
19:16 --- ChanServ sets modes [#git +v Fangorn_]
19:16 +Fangorn_: what would be the equivalent git-fetch and git-merge commands that git-pull does?
19:17  wereHamster: git fetch and git merge
19:17  khaije|amalt: this may be a redundant/obvious question... is it possible to read a file into stdin from a bare repo, without checking it out first?
19:17  wereHamster: khaije|amalt: git show <rev>:<path>
19:18  PovAddict: wereHamster: doesn't pull add some switches to fetch+merge?
19:18  khaije|amalt: wow, thank you
19:19  wereHamster: PovAddict: I don't think it does in the plain 'git pull' mode. But ifyou want to be sure, RTFS
19:21  PovAddict: ah, didn't know this one was (still) shell
19:43  jaalto: After git-tree-filter, how do I completely prune objects that are not in use any more? I'd like to do that before I push this new repo elsewhere
19:43  kpreid: that are not in use? that sounds like a job for git-gc
19:43  wereHamster: jaalto: git-tree-filter ?
19:43  PovAddict: you mean git filter-branch --tree-filter?
19:43  wereHamster: jaalto: man git-filter-branch -> scroll to the bottom of the man page
19:43  jast: jaalto: the 'git-filter-branch' manpage can be found at http://git.or.cz/man/git-filter-branch [automatic message]
19:43  jaalto: PovAddict: Yes
19:44  PovAddict: jaalto: the git-filter-branch manpage tells you what to do to shrink the repo afterwards
19:44  wereHamster: Checklist for Shrinking a Repository
19:44  SethRobertson: The man page should describe.  git-gc, git-prune, git-repack, git-revlog are all command that you should examine along with args
19:46  jaalto: PovAddict: .. Hm, I don't understand the part which talks about "--tag-name-filter cat".
19:46  SethRobertson: If you have tags you need to keep around, you need that argument
19:47  SethRobertson: w/o it the tags are not on the new branch
19:47  jaalto: SethRobertson: ah. That should say so in the docs. Time for doc patch.
19:47  PovAddict: without "--tag-name-filter cat -- --all", you could have some branches or tags still pointing to the commits before filtering
19:57  jaalto: PovAddict: What happens to other brached where I'm running git-filter-branch ?
20:16  zc00gii: mmm, can someone walk me through setting up a private git repo, that has a protected gitweb?
20:17  zc00gii: well
20:17  zc00gii: I can do the git part
20:17  zc00gii: but not the gitweb
20:18  dr_lepper: what do you mean?
20:18  dr_lepper: do you want the gitweb to be password-protected?
20:18  SethRobertson: I think he wants to know how to configure apache for password or IP based restriction
20:18  zc00gii: dr_lepper: yes
20:18  zc00gii: SethRobertson: actually, I can probably manage
20:18  zc00gii: also, apache sucks, nginx++
20:18  dr_lepper: zc00gii, you should configure your web-server for access restrictions
20:19  zc00gii: dr_lepper: yeah]
20:19  zc00gii: anywawy
20:19  dr_lepper: http://wiki.nginx.org/HttpAuthBasicModule
20:29 --- Unknown[OFF] is now known as Unknown[NF]
--- Log closed Sun Dec 05 20:39:27 2010
--- Log opened Sun Dec 05 20:39:55 2010
20:39 --- Users 685 nicks [0 ops, 0 halfops, 10 voices, 675 normal]
--- Log closed Sun Dec 05 20:43:48 2010
--- Log opened Sun Dec 05 21:00:03 2010
21:00 --- Users 690 nicks [0 ops, 0 halfops, 11 voices, 679 normal]
21:02 --- Channel #git was synced in 151 seconds
21:07  fualo: I have a merge conflict, but I'm sure I want to overwrite with what I'm pulling in. Is there a quick way to do this?
21:08  sgronblo: hmm if I remember correctly its git checkout --theirs
21:09  sgronblo: and the path ofc
21:09  SethRobertson: `git merge -s recursive -X theirs` or something like that
21:16  fualo: how can I just pull in and overwrite though?
21:16  fualo: when I git pull origin branch, I'm already in a merge conflict
--- Log closed Sun Dec 05 21:22:59 2010
--- Log opened Sun Dec 05 21:28:40 2010
21:28 --- Users 690 nicks [0 ops, 0 halfops, 11 voices, 679 normal]
21:30 --- Channel #git was synced in 153 seconds
21:34  Luyang: Can I merge the current branch to a different branch without doing checkout first?
21:35  teuf: Luyang: you've got to checkout first
21:36  Luyang: teuf: But does that mean all my files will be removed?
21:36  Luyang: I just did the initial commit in master and thereafter worked in luyang-download
21:37  Luyang: if I do git checkout master... won't that delete all the files which were added in luyang-download?
21:37  teuf: are they committed ?
21:38  Luyang: yeah
21:39  teuf: so these files won't be lost when you checkout the luyang-download branch
21:40  teuf: but yeah they will "go away" when you checkout master
21:40  Luyang: I'm on luyang-download now
21:40  Luyang: yeah... sounds unnecessary to me since I just want to integrate it into master
21:40  Luyang: I don't want it to physically delete the files when I checkout master
21:40  teuf: why ?
21:40  Luyang: and then recreate them when I merge luyang-download
21:41  Luyang: I just feel I shouldn't have to?
21:41  teuf: things would be weird when there are conflicts if you could trigger a merge on a non checked out branch
21:42  Luyang: yeah, but if conflict does not exist, then it should be a neat way to change branch
21:42  parasti: your files must be huge for this to be a problem
21:42  Luyang: it's not a problem =)
21:43  Luyang: ok so I did git checkout master
21:43  Luyang: now it said error: untracked working tree file 'xsdlfj' would be overwritten by merge
21:43  Luyang: so checkout didn't happen
21:44  teuf: this file is probably present in master, not present in luyang-download, but present in your working directory
21:45  Luyang: can I list the files that are present in master?
21:49  jaalto: I ran 'git filter-branch' to remove everyting but one file. After it finished, the 'git log' still shows lot of entries that have noting to do with the files. If I check out any of the commits mentioned in 'git log' I can see those files, that I though were gone by 'git filter-branch'
21:49  jaalto: Ho do I really remove all files but ONE?
21:49  wereHamster: which filter did you use?
21:49  wereHamster: and did you use --prune-empty
21:49  wereHamster: ?
21:50  jaalto: wereHamster: --tree-filter with 'rm <all but that ONE file>'
21:52  jaalto: wereHamster: That --prune-empty was not there. Do I need to do it all again? It's considerable slow process.
21:52  wereHamster: yes you will
21:53  jaalto: wereHamster: Oh well, takes an hour
22:00  jaalto: wereHamster: Even --prune-empty option doe snot get rid of the history unrelated to the the ONE file left with 'git filter-branch'. Any suggestion?
22:01  wereHamster: what does 'log -p' show for these revisions?
22:01  jaalto: wereHamster: Lot of patches to other files
22:02  wereHamster: so your filter-branch command didn't run successfully, or your filter is wrong
22:03  jaalto: wereHamster: Judging from the seen files, nothing more was left byt that ONE. But "git log" lists unrelated commits, and once checked out, those files appear.
22:04  jaalto: wereHamster: The command was simply:   git filter-branch --tree-filter 'rm -rf <list of files and dirs>' --prune-empty --tag-name-filter cat -- --all HEAD
22:04  wereHamster: HEAD is not needed
22:04  wereHamster: and use an index filter instead of the tree filter
22:04  wereHamster: no wonder it's so slow...
22:05  jaalto: wereHamster: Ok, trying again..
22:06 --- Unknown[NF] is now known as Unknown[OFF]
22:14  Diverdude: is it possible to easily fetch all repos under from this project:https://github.com/prajnashi ?
22:16  jaalto: wereHamster: I chnaged the --tree-filter to --index-filter, but now I see all the files. Is this normal with --index-filter option? With --tree-filter, the files were physically removed from my local directories
22:18  wereHamster: jaalto: the index filter ahs a different syntax. did you accont for that
22:18  wereHamster: ?
22:18  wereHamster: Diverdude: yes. Clone each one individually
22:19  Diverdude: wereHamster, how so? is there a simple command?
22:19  teukka: Diverdude: something like this: curl https://github.com/api/v2/yaml/repos/show/prajnashi | awk '$1 ~ ":url:" { sub("^https", "git", $2); print $2 }' | while read uri; do git clone "$uri"; done
22:19  wereHamster: Diverdude: yes. git clone <url>
--- Log closed Sun Dec 05 22:23:40 2010
--- Log opened Sun Dec 05 22:29:11 2010
22:29 --- Users 703 nicks [0 ops, 0 halfops, 10 voices, 693 normal]
22:31 --- Channel #git was synced in 156 seconds
22:32  jaalto: wereHamster: No joy. I can't seem to get rid of history. With --index-filter, or --tree-filter, all the files were removed but ONE. Still the "git log" shows commits that should not be there.
22:33  jaalto: I have git 1.7.2.3
22:34  wereHamster: jaalto: does 'git log --name-only' show any other files than the one you want to keep?
22:34  jaalto: wereHamster: Yes
22:34  wereHamster: tne your filter is incorrect
22:35  jaalto: wereHamster: Judging from results on disk: both (--tree-* and --index-*) optoions left beind only that ONE file
22:35  wereHamster: the index filter doesn't touch the disk at all
22:36  jaalto: wereHamster: Hm. I used  =>  git filter-branch --index-filter 'git rm --cached --ignore-unmatch -r <list of dirs and files>' --prune-empty --tag-name-filter cat -- --all
22:36  jaalto: Can you spot the error?
22:37  wereHamster: not unless your <list of dirs and files> is somehow wrong
22:38  jaalto: wereHamster: Judging from results, nothing more was left on disk but that ONE file. Still "git log" shows unrelated commits.
22:39  wereHamster: are you using a plian 'git log'? or 'git log <branch>' ?
22:42  jaalto: wereHamster: Plain "git log"
22:42  wereHamster: are you on detached head?
22:42  jaalto: wereHamster: Here is the test script, you want to verify: http://nopaste.snit.ch/26695
22:43  wereHamster: which file do you want keep?
22:43  jaalto: wereHamster: The ONE file I want to shrink to is bin/ripdoc.pl whic I want to make a separate project
22:43  jaalto: wereHamster: the rm command delete everything else
22:46  netsan: hey , how can i restore one commit backword?
22:47  jaalto: netsan: git reset --soft HEAD~1
22:48  netsan: and push? :-0
22:48 * parasti observes telepathy
22:48  jaalto: netsan: You don't. It's simple "git checkout COMMIT"
22:50  theoros_: it depends what "restore" means
22:51 --- ivey_off is now known as ivey
22:55 * jim misread that as git checkout DAMMIT
22:56  jim: what's something I can add to netbeans (and which version of netbeans) to fully add git as one of its methods of source control?
22:58 --- theoros_ is now known as theoros
22:59  wereHamster: jaalto: try this: 'b="$(git rev-parse :0:bin/ripdoc.pl 2>/dev/null)"; git read-tree 4b825dc642cb6eb9a060e54bf8d69288fbee4904; if [ "$b" != ":0:bin/ripdoc.pl" ]; then git update-index --add --cacheinfo 0775 $b bin/ripdoc.pl; fi;'
22:59  wereHamster: (index filter)
23:01  jaalto: wereHamster: Whoa. What that does?
23:01  wereHamster: jaalto: it loads an empty tree into the index and adds only that one file.. instead of deletiing all other files
23:02  jaalto: wereHamster: I run that before filter-branch?
23:02  wereHamster: jaalto: git filter-branch --index-filter 'b="$(git rev-parse :0:bin/ripdoc.pl 2>/dev/null)"; git read-tree 4b825dc642cb6eb9a060e54bf8d69288fbee4904; if [ "$b" != ":0:bin/ripdoc.pl" ]; then git update-index --add --cacheinfo 0775 $b bin/ripdoc.pl; fi;' --prune-empty --whatever -- else -you want
23:04  xrogaan: wereHamster: your kungfu is the best
23:04  jaalto: wereHamster: Ok, here did you get the SHA?
23:04  jaalto: where
23:05  wereHamster: it's the well-known sha of an empty tree
23:06  xrogaan: did you put those digit and letters out of mind ?
23:07  wereHamster: of course
23:09  wereHamster: I hope you didn't believe me.. beacuse typing it would take much longer than `git grep -A1 EMPTY` in the git.git repo and then copy-paste it...
23:09  jaalto: wereHamster: Re-running....
23:10  wereHamster: jaalto: btw, your original command didn't work because you missed the files from your rm command. That's why I suggested your <list of dirs and files> might be incomplete
23:11  jaalto: wereHamster: What would have been the correct command?
23:11  wereHamster: list all files in <list of dirs and files>
23:11  wereHamster: for example you missed bin/copyright-update.pl
23:12  wereHamster: or bin/ddir.pl.. and I could go on
23:13  jaalto: wereHamster: Got it. Next time I use find + grep -v
23:13  wereHamster: that's why I used the 'read empty tree and add only that one file' approach. Much safer than removing all other files except the one
23:15  jaalto: wereHamster: 1/3 completed...
23:21  jaalto: wereHamster: Thanks. All looks like in order now.
23:26  xrogaan: wereHamster: less impressive but ingenious
23:31  wereHamster: ingenious would be to keep that sha in a env variable...
23:36  patrikf: "git ls-files | grep foo | git update-index --index-info" would probably do as well, wouldn't it?
23:36  patrikf: ls-files -s*
23:40 --- nohk_ is now known as nohk
--- Log closed Mon Dec 06 00:00:07 2010
