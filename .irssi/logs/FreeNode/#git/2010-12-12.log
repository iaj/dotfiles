--- Log opened Sun Dec 12 00:00:40 2010
00:03 --- offby1` is now known as offby1
00:29 --- AlexP_ is now known as AlexP
00:32 --- adamholt is now known as adamholt_away
00:32 --- adamholt_away is now known as adamholt
00:47 --- Vampire0_ is now known as Vampire0
00:58  Ethan1: hi
00:59  wereHamster: itaylor57: yes
00:59 --- Ethan1 is now known as Ethan
00:59  Ethan: hi
00:59  wereHamster: you already said that...
01:00  Ethan: I was just wondering what is the equivalent of svn revert because git revert seems to be something else
01:00  wereHamster: what does svn revert do?
01:00  Ethan: I just want to remove all the changes that I did not commit
01:00  wereHamster: git reset --hard
01:01  Ethan: oh, that's maybe the option I was missing
01:01  patrikf: http://git.or.cz/course/svn.html
01:01  Ethan: I will look at it
01:01  Ethan: thanks
01:01  Ethan: thanks for the link
01:10  itaylor57: wereHamster: what download did you use?
01:11  itaylor57: wereHamster: I have it installed on my unbuntu distro
01:23  Neurotiquette: I'm trying to remove a ssubmodule and incorporate it into the normal master branch
01:23  Neurotiquette: but I deleted the .git
01:27  wereHamster: itaylor57: just follow the official documentation
01:28  amerinese: i remembering hearing that using a vcs for storage of a wiki is a bad idea.  what's the reasoning for that again?
01:30  necromancer: i mean
01:30  necromancer: it's kinda like using twitter for a blog
01:30  necromancer: same concept, different scope
01:30  patrikf: amerinese: i don't think it's a bad idea per se, it's just an off-label use. although my view might be biased because i wrote a git-based wiki once ;-)
01:30  wereHamster: UGFWIINIF
01:31  necromancer: i'd think it would just be a little annoying to get together
01:31  amerinese: hmm, yeah i dunno, i can't remember the reasoning...
01:31  itaylor57: wereHamster: Duh, I totally missed the obvious section in the install doc
01:31  amerinese: it was something about a git repo for each file in the wiki might make sense
01:31  amerinese: i believe
01:32  necromancer: why would you go that far?
01:32  necromancer: i think 1 repo per wiki would work
01:32  necromancer: because each file has its own list of commits
01:32  necromancer: the problem is just that git wasn't meant for that kind of thing so you'd basically have to write your wiki as a git client
01:32  kevlarman: necromancer: because finding a list of commits for a particular file and for all files are the same operation
01:32  kevlarman: e.g. expensive if you use it like a wiki
01:32  amerinese: is it easy to just output an old version of a file?
01:33  kevlarman: git show <commitish>:<path>
01:33  amerinese: ah
01:33  amerinese: it is
01:33  Neurotiquette: is there a way to delete a redundant commit?
01:33  Neurotiquette: so its not showing up in my log?
01:33  wereHamster: Neurotiquette: not without rewriting history
01:33  amerinese: you could use rebase --interactive
01:34  Neurotiquette: OK... i'll chalk that up to some future education for now then hehe
01:34  Neurotiquette: thanks
01:34  amerinese: you can also --amend when you forget to do something
01:34  amerinese: commit --amend
01:39  Neurotiquette: What is this... '95? <banisterfiend`> are you female
01:39  Neurotiquette: I mean just... wow.
01:58  Neurotiquette: If I rename the name of a folder that I created a project in... if I then clone that project from elsewhere, will it use the old name or the new folder name? (assuming its had a commit since then, of course)
01:59 --- Unknown[NF] is now known as Unknown[OFF]
02:01  kevlarman: assuming you commit the "rename", then the new folder name
02:05 --- necromancer is now known as necromancer`bzzy
02:05  patrikf: Neurotiquette: if you're talking about the name of the top-level directory, git doesn't care about that
02:05  patrikf: (clone will use it as a default, i.e. will use the new name regardless of whether you committed or not, but you can also explicitly give a directory to clone to)
02:13  Seppoz: hello, how would i diff my current local copy against the master branch and get patch files for the diffs?
02:15  wereHamster: Seppoz: git diff master
02:16  listrophy: I just reduced the size of a ginormous git repo locally from 25GB to 106MB with a simple `git gc`. How do I do effectively the same thing for the gitosis repo?
02:20  listrophy: hrm. never mind. it just works in the bare repo
02:21  listrophy: i figured the failure of git-status would lead to git-gc not working either.
02:45  engla: hm how did you end up with a 25GB repo in the first place?
02:47  Freeaqingme: he's been working? :P
02:48  engla: hehe
02:51  hagabaka: wow
03:08  listrophy: engla: we're using git for hourly backups =)
03:09  listrophy: i think the main reason has to do with the fact that a mysql dump changes one line per table, making a line-by-line patch really ineffective.
03:12 +Fangorn_: listrophy: what do you mean that it just worked on the bare repo?
03:30 --- o_o is now known as Guest47728
03:33 --- ivey_off is now known as ivey
03:37  sjuxax: If I did a shallow clone with git svn by saying git svn clone -r10BACK or whatever, how can I get the rest of the history?
03:52 --- linusoleander_ is now known as linusoleander
04:18 --- Guest47728 is now known as robotarmy
04:21 --- dwmw2 is now known as dwmw2_gone
05:28  matiu: how do I get back to trunk if I'm looking at a branch ..
05:28  matiu: please :)
05:29 --- yaotti_aw is now known as yaotti
05:30 --- yaotti is now known as yaotti_aw
05:33  rtyler: this question is bound to be only very loosely on-topic, please don't light me on fire
05:33  rtyler: does git's tree do any semblance of integration testing with `git-daemon`, if so, anybody mind pointing me to how/where
05:34 * rtyler is trying to do some integration testing with memcached 
05:34  SethRobertson: The git test suite is extensive
05:34  rtyler: indeed :D
05:40  Oxyde: Can you 'git commit --amend' to your 2nd most recent commit? How?
05:40  rtyler: IIRC `git rebase -i HEAD~2` will let you reword that commit
05:41  Oxyde: Thanks, but I want to amend the commit with new changes, not just change the commit header
05:50  cxreg: Oxyde: the simplest way is to make a new commit, then use rebase -i to reorder and squash
05:50  cxreg: i do that all the time
05:50  cxreg: usual caveats about rebasing pushed commits, etc
05:51  Oxyde: cxreg: thanks, I'll do that.
05:53 --- ivey is now known as ivey_off
05:54  Oxyde: Is there a way to destroy local a commit? I currently 'git rebase -i origin^' and delete the commit line. Is there a faster way?
06:01  SethRobertson: If it is the last commit you can use `git reset --hard HEAD^`
06:10 --- necromancer`bzzy is now known as necromancer
06:13  archeleus: hello
06:14  archeleus: how do I un-apply a patch?
06:14  rtyler: first, you'll need a flux capacitor..
06:14  SethRobertson: archeleus: have you pushed?  Have you committed?
06:15  archeleus: not yet
06:15  cxreg: the one-liner for removing a single commit from HEAD is "git rebase --onto commit^ commit" i believe
06:15  SethRobertson: Two questions enter.  One answer leaves.
06:15  archeleus: Not pushed, not commited
06:16  SethRobertson: archeleus: To undo _all_ changes since the last commit:  git reset --hard
06:16  archeleus: SethRobertson, cxreg: thanks
06:17  cxreg: archeleus: actually that was for Oxyde
06:17  cxreg: but you might find it useful one day :p
06:18  archeleus: heh I guess so
06:21 --- cytrinox_ is now known as cytrinox
06:45  dhruvasagar: Hi, I am trying to get gitosis up and running on ubuntu, could anyone be kind enough to help ?
06:46  dhruvasagar: I have referred to several online articles and followed all the steps
06:46  dhruvasagar: but when I try cloning the gitosis-admin repo on my local system, it asks me for a password, but no password is accepted :(
06:47  dhruvasagar: and just so you know, I have generated the ssh key, transfered it to the server and ran the gitosis-init with it...
06:47  dhruvasagar: it would be really nice if someone could help me out, I am sure I am missing something very small and simple
06:51  dhruvasagar: anybody ?
06:59  zkirill: Hey guys, we have one repo on github.com and one repo on our server serving a development sub-domain. We want to be able to push to github.com master branch and a development branch. The development branch must be synced with the repo on the development server. As soon as we push, we want to have the updated code to start serving on the development sub-domain. Is this possible? (we're using PHP)
07:02  kevlarman: zkirill: not easily, since you'll need to install hooks on the server you're pushing to
07:02  kevlarman: (and faq non-bare applies here)
07:02  jast: Pushing to non-bare repositories is discouraged: please see https://git.wiki.kernel.org/index.php/GitFaq#non-bare [automatic message]
07:03  Arrowmaster: dhruvasagar: gitosis is deprecated
07:04  zkirill: kevlarman: Thanks for your help! Can't we install hooks to github?
07:05  Arrowmaster: i didnt think github allowed arbitrary hooks
07:05  Arrowmaster: you might be able to use some of the ones they provide to do it
07:06  dhruvasagar: Arrowmaster: what do I use then ?
07:06  Arrowmaster: gitolite
07:06  dhruvasagar: Arrowmaster: that was a reply to my question ?
07:06  Arrowmaster: yes
07:06  dhruvasagar: Arrowmaster: if I get it working, a treat is of the order :)
07:09  zkirill: Arrowmaster: Cheers mate!
07:09  Arrowmaster: zkirill: i guess you can do it with this http://help.github.com/post-receive-hooks/
07:09  zkirill: Arrowmaster: Yup! That's what we're looking at right now.
07:13  zkirill: Arrowmaster: Also looking at http://help.github.com/deploy-keys/
07:13  rtyler: yay github
07:15  zkirill: Is it a fairly common thing to use git to push changes to the development server?
07:18  kevlarman: zkirill: faq non-bare exists pretty much for that specific use case
07:18  jast: zkirill: Pushing to non-bare repositories is discouraged: please see https://git.wiki.kernel.org/index.php/GitFaq#non-bare [automatic message]
07:18  kevlarman: ...and jast's script is way too smart for me :(
07:19  zkirill: kevlarman: haha, thanks
07:19  kevlarman: was hoping a couple of bold charac...oh +c
07:21 --- ChanServ sets modes [#git +v aforgue]
07:21 +aforgue: Arrowmaster: gitosis is deprecated in favor of what?
07:21  Arrowmaster: gitolite
07:22 +aforgue: hm
07:23  rtyler:  >>> actual for "Conn" must be a variable
07:23  rtyler: whoops, wrong window
08:15  silv3r_m00n: hi there , I am new to git , I managed to create a repository , I am wondering , how will another peer take a copy of this to his own computer and work on it ?
08:18  kenyon: he could git pull it or some non-git way, like rsync, tarball, USB stick, whatever
08:19  silv3r_m00n: so for another machine on LAN , how should the command be ? git pull ....... ?
08:20  silv3r_m00n: I guess somekind of git daemon runs on the machine ?
08:22 --- ChanServ sets modes [#git +v jjore]
08:22 +jjore: Hi, how do I extract the contents of a blob when cat-file tells me "fatal: Out of memory, malloc failed"?
08:22 +jjore: http://pastie.org/1369501
08:24 +jjore: I seem to be hitting a 32-bit process size limit.
08:27 +jjore: I would be happy just extracting the blob, whether by hook or by crook.
08:29 --- yaotti_aw is now known as yaotti
08:30 +jjore: I imagine those 7-bytes of header before the "blob $size\0" tell me how to interpret the blob.
08:31  italic: is there a command line option to determine the date of the last commit?
08:32 +jjore: italic: do you care which branch?
08:33  italic: no, whatever im on. i'm just trying to get the date in a script
08:35 +jjore: italic: I ask because you've got a bunch of options in `git for-each-ref' to enumerate branches and such, `git rev-parse' documents a bunch of options for specifying a commit (like "the last thing in this branch")
08:35 +jjore: and `git show' has a bunch of options to print info about commits.
08:36 +jjore: The name "HEAD" is just whatever's the current tip of your checked out branch.
08:37  italic: jjore: ok i'll look at that then, thanks
08:38 +jjore: `git show --format=%ad` apparently, after I just checked the documentation I'd cited.
08:39 +jjore: Well, there's several date formats. Choose something appropriate.
08:40  silv3r_m00n: hi there
08:41  silv3r_m00n: is it ok to use something like this >> git clone ftp://192.168.10.51/code   ?
08:42 +jjore: Checking `git clone`, the GIT URLS section sez yes.
08:43  italic: jjore: just what i needed, thanks
08:43  kandinski: hi. I just fixed a commit message with git --amend, but I can't push the fixed commit to the origin repo. I am checked out in the branch I am supposed to be in and have issued a "git push origin HEAD". what am I doing wrong? Thanks.
08:44  kandinski: oh, I should add I had already pushed the commit with the wrong message, but nobody else has seen it yet.
08:46 +jjore: You could push --force.
08:49  kandinski: jjore: I feel a bit dirty but it did work. Thanks.
08:50 +jjore: Oh btw, uh, do always specify the branch you're pushing or *all* your local branch version will be pushed.
08:51 +jjore: A co-worker once did `push -f origin` but didn't designate the branch name and *all* her local branches updated on the server
09:03  albel727: jjore: did you try inflating the blob directly? iirc, it's just deflated (or maybe zipped) file with a header prepended (before compression).
09:03  albel727: of course, you'll have to cut the git header afterwards...
09:10 +jjore: What, like use libz for deflate?
09:10 +jjore: I'll try that.
09:10  albel727: jjore: yeah. zlib
09:13  albel727: jjore: I'm not sure about that "header prepended before the compression" part, though. you may have to remove it first, before trying to deflate. =/
09:13  albel727: s/deflate/inflate
09:13 +jjore: Yes, right now just coding to skip over it
09:17  kandinski: jjore: thanks for that advice as well. I actually didn't mind pushing  all the local branches this time, but it's good to know.
09:19  albel727: jjore: actually, now that I look at my own objects, "header prepended before the compression" sounds like a good guess to me, b/c I don't see that "blob <size>\0" type prefix in any of them.
09:23 +jjore: So, just trying to start using zlib deflate on several different start points on the blob, none are working.
09:23  albel727: jjore: now that's really strange. I see zlib used in reading blobs in git source itself =/
09:24  albel727: jjore: is your blob really that big?
09:24  albel727: jjore: as to trigger 32bit limit, that is.
09:24 +jjore: http://pastie.org/1369577
09:25 +jjore: My blob is only 1.4G but things like read_object() might want to hold the object in memory roughly twice
09:26  albel727: jjore: yeah, it might =/ still, I don't see any problem in your script, either.
09:27 +jjore: I mean, I just did a `for skip in $(seq 1 30);do dd skip=$skip | ./deflate;` to see if any start point was going to work.
09:28  albel727: nice idea. guess I'm out of ideas, then, if you don't count installing some 64bit os. sorry =/
09:30 +jjore: Lol.
09:30 --- yaotti is now known as yaotti_aw
10:04  cbreak: jjore: not all get pushed with git push remotename
10:04  cbreak: only those that match a branch name already on the server
10:05  cbreak: this is default behaviour, it can be changed
10:05  cbreak: jjore: man git-config, push.default
10:05  jast: jjore: the 'git-config' manpage can be found at http://git.or.cz/man/git-config [automatic message]
10:22  westoque: is it still a good thing to use gitosis? the last commit was june of 2009
10:23  cbreak: take a look at gitolite
10:26  westoque: it says that gitolite needs to create a userid & password on the server -- so if we have 10,000 git users like github, does that mean our servers will have 10,000 users too?
10:27  Arrowmaster: no
10:40  cbreak: westoque: you're not reading the gitolite documentation
10:40  cbreak: because that surely doesn't contain anything like that
10:42 +jjore: albel727: hey, I was just using deflate incorrectly.
10:42 +jjore: It works sweet.
10:43 +jjore: Roughly, ./deflate < .git/objects/xx/xxxxxx | dd bs=1 skip=16 | tar tzf -
10:43 +jjore: :-)
10:45 +jjore: "16" is just length("blob 1479741449\0")
10:52  SethX: hey, is there a way to resume a git clone which has ben "connection reset by peer" from the remote?
10:52  SethX: its a huge repo, and the inet connection isnt exactly stable
10:52  SethX: and the process is beginning to be a pain in the lower back
10:53  SethX: or, is there a way to failsafe it against this kind of network events?
10:54 +jjore: Does it work to fsck your partial repo or use --reference?
10:54  SethX: jjore: who you writing at?
10:55 +jjore: you
10:55  SethX: i have no clue what both of those are
10:55  Arrowmaster: just try git pull origin
10:55  SethX: oh, well afaik there is no git folder
10:55  matthiaskrgr: can I undo "git commit -a -m " somehow?
10:56  SethX: since it died in a clone
10:56  doener: Arrowmaster: clone cleans up after itself when it fails
10:56  SethX: jjore: anyhow, what were you suggesting?
10:56  doener: SethX: what are your means of accessing the repo? Just via git://?
10:57  Arrowmaster: oh, you could do git init; git remote add origin url; git pull origin
10:57  westoque: I just added a new key to my gitolite keydir and it was put in its .ssh/authorized_keys but when I push to it, it thinks im another user.. I have 2 public keys in my machine a id_rsa and id_dsa and it always thinks im id_rsa
10:57  Arrowmaster: and if it fails git pull origin again
10:57  SethX: doener: git clone user@server:/repo.git
10:57  doener: Arrowmaster: that would just start over, since git can't make any use of the partial pack it got from the failing fetch
10:58  doener: SethX: so ssh. Including regular shell access?
10:58  cbreak: matthiaskrgr: you can easily undo commits with git reset
10:58  cbreak: just reset to the commit you want your branch tip to be at
10:58  cbreak: use --hard if you want to reset the working dir too
10:59  SethX: doener: no, using gitolite
10:59  SethX: but i am root
11:00  SethX: ie, no regular shell access using the git user, but otherwise yes, i have full access to both peers
11:00  SethX: the server is a *nix box, the client is a cygwin installation on windows
11:00  matthiaskrgr: it worked! thanks! :)
11:01  doener: SethX: you could create a bundle then, which you can transfer by other means (e.g. rsync), to initialize the repo
11:02  doener: SethX: e.g.: git bundle create project.bdl --branches --tags
11:03  SethX: doener: and that includes all i need? how do i transform a bundle into a repo?
11:03  cbreak: SethX: or you could rsync the repo to localhost
11:03  doener: SethX: then somehow get project.bdl to the other box and there run: mkdir project; cd project; git init; git fetch --tags /path/to/bundle refs/heads/*:refs/remotes/origin/* ; git remote add origin user@host:repo
11:04  Arrowmaster: i thought you could just git clone /path/to/bundle
11:04  doener: hm, indeed, that works, too
11:05  Arrowmaster: does it? i havent checked but it seems logical
11:06  doener: SethX: ok, so to simplify the process: git bundle create project.bdl --branches --tags HEAD
11:06  SethX: ok..
11:06  doener: SethX: copy that to the other box, then: git clone /path/to/project.bdl /path/for/clone; cd /path/for/clone; git remote set-url origin user@host:repo.git
11:07  SethX: hokai
11:10  matthiaskrgr: hmm, I somehow fixated my master branch of git svn to a revision, when I try to do    git checkout `git svn find-rev r*latestrevision*`   it doesn't seem to work
11:10  matthiaskrgr: "You are in 'detached HEAD' state. "
11:11  cbreak: why do you think it doesn't work?
11:11  matthiaskrgr: when I checkout master , I am still at "(no branch)"
11:12  matthiaskrgr: something is very strange
11:12  cbreak: how do you check out master?
11:12  matthiaskrgr: git checkout master
11:12  cbreak: weird!
11:12  matthiaskrgr: oh
11:12  matthiaskrgr: maybe i fixed it somehow
11:14  SethX: thanks doener, i'll try this
11:14  SethX: transferring the repo will take a few hours though
11:14  SethX: :)
11:15  cbreak: what is the advantage of making a git bundle instead of just rsyncing the whole repo?
11:15  cbreak: it's not like he wants only part of the repo, but all of it
11:15  matthiaskrgr: I want to have master at the latest svn revision 3533
11:16  matthiaskrgr: http://pastebin.com/F59rpjc7
11:16  SethX: cbreak: guess that its better to transfer only one file
11:16  SethX: that way if it fails rsync/wget wont bitch around that much
11:17  matthiaskrgr: actually I want to have master always up-to-date, not only on rev  3233 :)
11:25  matthiaskrgr: ideas what I can do?
11:35  level09: I want to restore all *.config files from a earlier commit
11:36  wereHamster: level09: ls-tree -r <commit> | <parse the output to only print paths of the config files > | while read path; git checkout <commit> -- <path>
11:37  level09: thats pseudo code right :D ?
11:38  wereHamster: deciding that is left as an excercise to the reader
11:38  wereHamster: it could be real code if you had a computer which could read your mind though...
11:49  level09: :DD
11:51  matthiaskrgr: I want to have master at the latest svn revision (which is currently 3533)
11:51  matthiaskrgr: http://pastebin.com/F59rpjc7
11:51  matthiaskrgr: Ideas what I can do?
11:53  albel727: jjore: Cool. =D So in the end, blob header gets added before the compression, just as I thought. Damn, how could I not notice that your first script assumed the other way round? Damn. Oh well, thanks for the info. =)
12:00  emgent: some oper around ?
12:00  emgent: someone from security team around ?
12:01  deanc: Whenever I make changes to files they are all appearing under "Changed but not updated:". But oddly modified changes are there, not just add/rm
12:04  negev: hi, is there a way to list the files that were changed in a given commit hash?
12:06  petran: git show --pretty="format:" --name-only bd61ad98
12:06  matthiaskrgr: it is somehow possible to get a git svn with all upstream revision  on my hdd so i can check them out without web access
12:06  matthiaskrgr: how do I do that?
12:06  matthiaskrgr: I forgot the command
12:11  negev: thanks petran :)
12:11  petran: negev: you're welcome
12:12  wereHamster: matthiaskrgr: git svn clone
12:12  emgent: some fucked people from security team around ?
12:12  wereHamster: emgent: which security team?
12:12  emgent: git secrutiy team.
12:12  wereHamster: emgent: there is no security team
12:12  emgent: i have a 0day security hole to notify.
12:13  emgent: i prefer do it in responsible disclosure, but not seems possible if i will not found some devel.
12:13  wereHamster: emgent: in which part? The remote transport? Or when operating in a local repo?
12:14  matthiaskrgr: wereHamster: thanks's I'll try that
12:14  emgent: i can not share information about it sorry.
12:15  wereHamster: emgent: you can send an email directly to junio...
12:15  emgent: wereHamster: can you paste in pm him mail.
12:15  emgent: ?
12:16  banisterfiend: emgent: what are you wearing
12:16  wereHamster: a tinfoil hat? :)
12:17  emgent: brb
12:22  jast: new 'bot' auto-message: use the word "!gitosis" within your text
12:31  level09: how do I ignore all config.php files recursively in a directory ?
12:31  level09: dir/*/config.php doesn't seem to work
12:32  level09: actually it works :D
12:37  banisterfiend: level09: stop programming in php, noob
12:37  level09: eh
12:37  level09: what do u want me to use then?
12:37  drizzd: level09: well, it does not work recursively
12:37  drizzd: only rules without / apply recursively
12:38  banisterfiend: level09: something decent, python, ruby, etc
12:38  level09: it doesn't matter, I make alot of money out of php
12:38  drizzd: so if you want to ignore config.php in all subdirectories, of dir, you have to use "echo config.php > dir/.gitignore"
12:38  frogonwheels: !gitosis
12:38  jast: gitosis is no longer maintained and supported by the author; we usually recommend gitolite instead which has much better documentation and more features: http://github.com/sitaramc/gitolite [automatic message]
12:38  frogonwheels: jast:  cool :)
12:39  banisterfiend: level09: yeah and britney spears made a lot of money singing crap music
12:39  level09: money is importnat
12:39  level09: it pays my bills
12:39  level09: :DD
12:40  banisterfiend: self respect is more important
12:41  level09: yeah but it doesn't pay your bills
12:41  banisterfiend: if you're any good you can have both
12:42  level09: no time to start over in python
12:42  level09: although I spent some time playing with it
12:42  level09: my company only uses php
12:43  banisterfiend: what other languages do you know besides php
12:43  level09: almost all
12:43  banisterfiend: ....?
12:43  level09: played with python ruby, java, asp
12:43  banisterfiend: you know all languages?
12:43  level09: c , c++
12:43  level09: c#
12:44  banisterfiend: i dont believe you know C
12:44  level09: let's have a contest
12:44  banisterfiend: sure
12:44  level09: i build php extensions using c
12:44  banisterfiend: char array[3]; what is the type of &array ?
12:45  wereHamster: banisterfiend: if you want to discuss the C language -> ##c please
12:46  level09: that's not even a question
12:46  level09: :D
12:47  banisterfiend: level09: yes it is, what's the type of &array ?
12:48  level09: i dont like pointers
12:48  banisterfiend: hhaha
12:48  banisterfiend: ok
12:48  banisterfiend: you dont know C
12:48  banisterfiend: :)
12:48  level09: I know how to make money out of what I know
12:48  level09: then i can hire people who know c
12:49  level09: :DD
12:50  banisterfiend: anyone can make money, the point is are you making money programming what you love, or programming php
13:01  jast: banisterfiend: I hate all languages. therefore, PHP is just as acceptable as any other language to me.
13:02  jast: well, okay, some things are just not on, such as java and visualbasic
13:05  level09: :D
13:05  level09: java ?
13:38  dhruvasagar: Hi guys
13:39  dhruvasagar: I have been working all day today, I am stressed out
13:39  dhruvasagar: I am trying to configure gitolite
13:39  dhruvasagar: could someone help me understand things a little ?
13:39  dhruvasagar: I was able to get it working once, but haven't since been able to reproduce it :(
13:39  dhruvasagar: i'd really appreciate someone helping me out a bit
13:45  wereHamster: dhruvasagar: theres quite extensive documentation...
13:45  gebi: dhruvasagar: gitolite is an ssh/authorized_keys config generator
13:45  dhruvasagar: yes I know
13:45  gebi: so where is your problem :)?
13:46  dhruvasagar: I have been reading and trying to replicate the documentation all day
13:46  dhruvasagar: I got it working once though
13:46  wereHamster: we can't read minds, let alone over great distances and the internet. You'll have to explain what your problem is
13:46  dhruvasagar: well from what I am undersanding, gitosis' bypass to ssh using the keys is something where I am getting wrong
13:47  dhruvasagar: first of all
13:47  dhruvasagar: can you tell me one thing
13:47  dhruvasagar: when I generate the keys
13:47  dhruvasagar: the passphrase that I use
13:47  dhruvasagar: isn't that the password that I would have to use when cloning the gitolite-admin repo ?
13:47  dhruvasagar: I have transfered the key file etc
13:48  dhruvasagar: I am getting 2 weird errors / problems
13:48  wereHamster: how did you install gitolite?
13:48  dhruvasagar: I cloned the git repo and followed the process
13:48  dhruvasagar: I have done it at least 10 times since morning
13:48  wereHamster: there are about four ways how to install gitolite. Which one did you choose?
13:49  dhruvasagar: so I am very confident that I understand the process quite well now, in general
13:49  dhruvasagar: non-root method
13:49  dhruvasagar: manual installation
13:49  dhruvasagar: without root access
13:50  dhruvasagar: first when I try to clone repo, I get this warning - Agent admitted failure to sign using the key.
13:51  dhruvasagar: second is, it is not able to authenticate with the passphrase, instead if I enter the password of the git user it is able to authenticate
13:51  dhruvasagar: however
13:51  wereHamster: please pastebin the whole transcript of your attempt
13:51  dhruvasagar: in that case it says that there is no repo with gitolite-admin
13:52  dhruvasagar: wereHamster: https://github.com/sitaramc/gitolite/blob/pu/doc/1-INSTALL.mkd - (non-root method) directly on the server, manually, without root access
13:52  dhruvasagar: wereHamster: I have followed the process exactly how it says there
13:52  wereHamster: you must have done something differently
13:52  dhruvasagar: yes
13:53  dhruvasagar: the only thing different is
13:53  wereHamster: to start all over again, delete everything, icluding the git user and its home directory
13:53  dhruvasagar: ssh-keygen
13:53  dhruvasagar: I deleted all gitolite related folders under /home/git and tried the steps 3-4 times
13:53  dhruvasagar: I will do what you said too
13:54  dhruvasagar: but at the moment I want to clear somethings before I do that
13:54  dhruvasagar: so regarding ssh-keygen
13:54  dhruvasagar: the thing is
13:54  dhruvasagar: that I already have a few other keys
13:54  dhruvasagar: one which is for github
13:54  wereHamster: if it still fails, pastebin the whole session.
13:54  dhruvasagar: and another which is for codebasehq
13:54  dhruvasagar: for gitolite I created a new ssh-keygen with name /home/dhruva/.ssh/dhruva
13:55  dhruvasagar: that is the only thing different from the steps
13:55  dhruvasagar: I will repeat the process, but I want to kindof understand how gitolite works
13:55  wereHamster: dhruvasagar: it's described in the documentation
13:55  dhruvasagar: how does it bypass the shell with the gl-auth-command
13:56  dhruvasagar: bypass the ssh*
13:56  wereHamster: how bypass?
13:56  dhruvasagar: wereHamster: in the docs there is this line - There is no gitolite "daemon"; it gets invoked via sshd which calls "gl-auth-command" via the "command=" option in the authkeys file (see gitolite and ssh for more).
13:56  dhruvasagar: right now I am trying to understand what this is...
13:56  dhruvasagar: and how it works
13:56  wereHamster: that is described in the gitolite docs
13:57  dhruvasagar: you mean some other doc besides this ?
13:57  dhruvasagar: ok reading the ADMIN doc
13:58  dhruvasagar: but can someone tell me
13:58  dhruvasagar: see gitolite and ssh for more
13:58  dhruvasagar: where do I see that ^ ?
13:58  dhruvasagar: ok I think I found it
13:59  dhruvasagar: I am a little fatigued tbh
13:59  wereHamster: dhruvasagar: https://github.com/sitaramc/gitolite/blob/pu/doc/gitolite-and-ssh.mkd
13:59  dhruvasagar: wereHamster: yea I did a google search and found it, reading it now
13:59  dhruvasagar: wereHamster: thanks
14:02  dhruvasagar: wereHamster: btw, in the docs it does not say much about the process of creating the *git* user, its possible I am doing something wrong with that ... any suggestions ?
14:09  wereHamster: dhruvasagar: it very much depends on the OS you're using
14:09  wereHamster: adduser, useradd, GUI admin panels etc...
14:10  dhruvasagar: wereHamster: :) I didn't mean which commands...I meant like should the user be an admin, should the user be enabled etc etc
14:10  wereHamster: the only requirement is that the user is allowed to log in through ssh
14:11  dhruvasagar: ok
14:11  wereHamster: (which is, IMHO, quite obvious)
14:11  dhruvasagar: then i'll remove it from the admin group once I am done
14:15  dhruvasagar: wereHamster: i've done the entire thing from scratch
14:15  dhruvasagar: wereHamster: https://gist.github.com/738032
14:15  dhruvasagar: I hope that can help you help m
14:15  dhruvasagar: me*
14:16  dhruvasagar: gebi: perhaps you ?
14:17  wereHamster: dhruvasagar: on the client, which private key corresponds to /tmp/dhruvasagar.pub  ?
14:17  dhruvasagar: ~/.ssh/dhruva.pub
14:17  wereHamster: dhruvasagar: therein lies the problem
14:17  dhruvasagar: hmm
14:17  dhruvasagar: should I rename it ?
14:17  wereHamster: ssh uses .ssh/id_rsa by default
14:17  dhruvasagar: to dhruvasagar ?
14:18  dhruvasagar: yes I know
14:18  dhruvasagar: I tried tell you about the ssh-keygen thing before
14:18  dhruvasagar: so then I have to use the ssh config hack here and specify the IdentityFile ?
14:18  wereHamster: either use 'ssh -i ~/.ssh/dhruva', or rename it (to id_rsa), or edit ~/.ssh/config appropriately
14:18  dhruvasagar: or is there something better ?
14:18  wereHamster: ssh-keygen has nothing to do with your problem
14:19  dhruvasagar: well I didn't mean the generation
14:19  dhruvasagar: but the fact that I have multiple priv/pub keys
14:19  wereHamster: me too
14:19  dhruvasagar: yes I understand
14:19  dhruvasagar: well
14:19  dhruvasagar: in anycase
14:19  dhruvasagar: now my question stil standas
14:19  dhruvasagar: when I do the git clone
14:19  dhruvasagar: I have to enter the passphrase I set while generating the key
14:19  dhruvasagar: right ?
14:20  dhruvasagar: it has nothing to do with the password of user git
14:20  dhruvasagar: am I right /?
14:20  wereHamster: correct only if you configure ssh to use the .ssh/dhruva key
14:20  dhruvasagar: yes i'll do that
14:20  dhruvasagar: i'll use ssh config
14:22  dhruvasagar: :(
14:22  dhruvasagar: I am soo stressed out man
14:22  dhruvasagar: the ssh config didn't help either
14:23  wereHamster: dhruvasagar: pastebin your ssh config file
14:23  wereHamster: and the command you're using to clone the gitolite-admin repo
14:25  dhruvasagar: wereHamster: http://pastebin.com/WFiUgGBG
14:25  dhruvasagar: the ssh config is simple man :(
14:25  wereHamster: and the clone command?
14:25  dhruvasagar: wereHamster: if you see my last gist you will see the clone command in the end
14:26  wereHamster: dhruvasagar: you have to use git clone git@Gitolite:gitolite-admin.git
14:26  wereHamster: otherwise ssh wont' use your custom sshkey
14:26  dhruvasagar: hmm
14:26  dhruvasagar: but I specify the user
14:26  wereHamster: it doesn't matter
14:26  dhruvasagar: I was using this - git clone Gitolite:gitolite-admin
14:26  dhruvasagar: will try git@ then
14:27  dhruvasagar: :(
14:27  wereHamster: oh man. You have to be *exact* when you want to get help. "if you see my last gist you will see the clone command in the end" is obviously wrong because in the earliear pastie you used git clone git@dhruvasagar.net:gitolite-admin
14:27  dhruvasagar: yes I know
14:28  dhruvasagar: sry
14:29  dhruvasagar: wereHamster: http://pastebin.com/NyPb2dJQ
14:29  dhruvasagar: do you know about this Agent admitted failure thing ?
14:29  dhruvasagar: when I google for the error
14:29  dhruvasagar: I read that ssh-add is supposed to fix it perhaps
14:29  dhruvasagar: but that asks for a passphrase
14:29  dhruvasagar: and that too for id_rsa
14:30  wereHamster: dhruvasagar: try GIT_SSH="ssh -vvv -i $HOME/.ssh/dhruva" git clone ... and see if it uses the correct ssh key file (and why it fails)
14:30  dhruvasagar: ok let me understand that first
14:31  dhruvasagar: I supposed I should do an export GIT_SSH
14:31  wereHamster: no
14:31  dhruvasagar: ok
14:31  dhruvasagar: then what's this GIT_SSH ?
14:31  wereHamster: dhruvasagar: man git
14:31  jast: dhruvasagar: the 'git' manpage can be found at http://git.or.cz/man/git [automatic message]
14:31  tango_: ask for a prassphrase? is your key file passphrase-protected?
14:31  dhruvasagar: tango_: yes
14:31  hyperair: it probably means your agent is malfunctioning
14:32  dhruvasagar: should I not give a passphrase ?
14:32  hyperair: e.g. if seahorse detects you're not connecting frmo the same DISPLAY it'll deny
14:32  tango_: dhruvasagar: then I believe it's normal it asks for a passphrase when adding it
14:32  dhruvasagar: but then if I don't give a passphrase, what is the password ?
14:32  wereHamster: dhruvasagar: ssh somehow fails to use your ssh key and falls back to password authentication
14:32  dhruvasagar: tango_: of course it does
14:32  Furkan: Hello. Can anybody tell me how to use git commit? When I do it it asks me to enter the commit message but I don't know how?
14:33  wereHamster: dhruvasagar: that's why it asks for "git@dhruvasagar.net's password: "
14:33  dhruvasagar: wereHamster: ok
14:33  tango_: Furkan: does it fire up your editor?
14:33  wereHamster: hence my suggestion to use ssh -vvv to see why it's failing
14:33  dhruvasagar: wereHamster: you should have read what I said earlier
14:33  Furkan: tango_: It opens in konsole.
14:33  dhruvasagar: GIT_SSH is an environment variable acc to docs
14:33  tango_: Furkan: what opens in console?
14:33  dhruvasagar: so I have to do an export GIT_SSH = ... (what you said)
14:34  wereHamster: dhruvasagar: no
14:34  hyperair: dhruvasagar: GIT_SSH=asdadsasd command; is the same as export GIT_SSH=asdadsas; command;
14:34  wereHamster: dhruvasagar: GIT_SSH="ssh -vvv -i $HOME/.ssh/dhruva" git clone git@dhruvasagar.net:gitolite-admin.git
14:34  Furkan: tango_: It asks me to enter commit message and even when I add something I don't know what to do next!
14:34  hyperair: wereHamster: i think he's confused because he's not familiar with that syntax of setting env variables.
14:35  tango_: Furkan: save and exit the editor
14:35  cbreak: Furkan: save and exit. With vim that's :wq
14:35  tango_: if you're not comfortable with vim, set your editor to something else
14:35  Furkan: tango_: How can I do that?
14:36  dhruvasagar: error: cannot run ssh -vvv -i /home/dhruva/.ssh/dhruva: No such file or directory
14:36  dhruvasagar: WTF man...
14:36  dhruvasagar: the file is there
14:36  tango_: Furkan: you can set the EDITOR variable if you want to change your default editor for all contexts, or use git config --global core.editor appname if you only want to change your git editor
14:37  Furkan: tango_: Thank you!
14:37  tango_: you're welcome 8-)
14:37  wereHamster: dhruvasagar: ah crap, it's trying to execute that whole string as a file
14:39  dhruvasagar: wereHamster: I separated the two commands and tried again
14:39  dhruvasagar: I am really baffled by this...the only thing which stops me from changing names of key files is the fact that it worked once!
14:40  dhruvasagar: a sysadmin friend of mine had mentioned that setting up a git server is painful
14:40  dhruvasagar: i have experienced it first hand now
14:40  dhruvasagar: entire weekend wasted
14:40  dhruvasagar: damn
14:41  wereHamster: dhruvasagar: it's generally very easy, just a matter of minutes. Unless, of course, you're using a non-standard setup.. in which case it can get complicated, especially if you don't know anything about how ssh works (and interacts with gitolite)
14:42  dhruvasagar: wereHamster: but my setup is not that complicated...I don't understand why it doesn't play good with multiple keys :(
14:42 --- khmarbaise_ is now known as khmarbaise
14:42  dhruvasagar: it can't expect me to ssh only to this 1 server...of course I need multiple keys
14:42  dhruvasagar: I am not going to rename and change key names every time I have to work with a new server
14:42  dhruvasagar: that will be ridiculous
14:43  wereHamster: gitolite works just fine with multiple keys... if you set your ssh config file up properly
14:43  dhruvasagar: trying to read more on ssh & multiple keys now
14:43  dhruvasagar: wereHamster: you saw the config file...
14:43  dhruvasagar: wait
14:43  dhruvasagar: wereHamster: I have found something new
14:43  wereHamster: dhruvasagar: 'ssh -vvv -i $HOME/.ssh/dhruva git@dhruvasagar.net' and pastebin the whole output
14:43  dhruvasagar: workstation#1 $ scp ~/.ssh/id_rsa.pub user@remote.server.com:.ssh/authorized_keys
14:44  dhruvasagar: wereHamster: do I need to put my pub key in the authorized_keys ?
14:44  wereHamster: NO! Don't do that!!
14:44  dhruvasagar: ok good
14:44  dhruvasagar: wereHamster: ok will do what you said above, although i've done it before and I can't say I liked the output...
14:45  dhruvasagar: wereHamster: http://pastebin.com/sN0yatmh
14:45  dhruvasagar: wereHamster: btw thanks for your patience
14:46  dhruvasagar: wereHamster: I am not as dumb as I sound, i've just been working for far too long on this, i don't feel this tired so often
14:47  wereHamster: dhruvasagar: ssh isn't even trying to use the dhruva key
14:47  dhruvasagar: :)
14:47  dhruvasagar: so it is confirmed now
14:47  dhruvasagar: maybe I should try to do a git clone on a different machine
14:48  dhruvasagar: wait
14:48  wereHamster: dhruvasagar: what does 'file $HOME/.ssh/dhruva' say?
14:50  dhruvasagar: home/dhruva/.ssh/dhruva: PEM RSA private key
14:50  wereHamster: I see the problem. You're executing git clone as the git user, but your key is in /home/dhruva
14:50  wereHamster: dhruvasagar: see the http://pastebin.com/sN0yatmh pastie again
14:50  deanc: Whenever I make changes to files they are all appearing under "Changed but not updated:". But oddly modified changes are there, not just add/rm. Any ideas why this might be?
14:50  dhruvasagar: but wait
14:50  wereHamster: dhruvasagar: Warning: Identity file /home/git/.ssh/dhruva not accessible: No such file or directory.
14:51  dhruvasagar: dhruva is the local user, git the remote user. they shouldn't have to be the same
14:51  dhruvasagar: wereHamster: why does it say not accessible ?
14:51  dhruvasagar: ahh
14:51  wereHamster: dhruvasagar: git@blog:~$ ssh -vvv -i $HOME/.ssh/dhruva git@dhruvasagar.net - you are logged in as the 'git' user. It's quite obvious that it doesn't have access to /home/dhruva
14:51  dhruvasagar: I tried on the worng machine
14:52  dhruvasagar: sorry
14:52  dhruvasagar: git@blog is the server
14:52  dhruvasagar: doing again
14:54  dhruvasagar: wereHamster: http://pastebin.com/qqNYaxgM
14:54  dhruvasagar: wereHamster: line 94...
14:55  wereHamster: dhruvasagar: what happens when you 'ssh-add $HOME/.ssh/dhruva' ?
14:56  dhruvasagar: wereHamster: it asked me to enter the passphrase
14:56  wereHamster: and when you repeat the ssh command, it fials again with that agent failure?
14:57  dhruvasagar: you mean git clone ?
14:57  wereHamster: no, ssh -vvv ..
14:57  dhruvasagar: damn...
14:58  dhruvasagar: it worked now
14:58  dhruvasagar: but it didn't ask any password
14:58  dhruvasagar: git clone worked
14:58  dhruvasagar: ok so when we have multiple ssh keys, we should use ssh-add to add identities
15:00  dhruvasagar: ssh was working anyways
15:00  dhruvasagar: git clone was the problem
15:00  wereHamster: dhruvasagar: it appears your ssh agent is broken
15:00  dhruvasagar: wereHamster: agent as in the ssh server ?
15:00  dhruvasagar: wereHamster: or my client ?
15:01  wereHamster: no, as in man ssh-agent
15:01  wereHamster: (or whatever ubuntu is using)
15:01  dhruvasagar: although I don't want a password less login
15:02  dhruvasagar: I don't want ssh-agent
15:02  wereHamster: dhruvasagar: run ssh-add -D after each clone
15:02  dhruvasagar: well
15:02  dhruvasagar: I don't really understand what does it do
15:02  dhruvasagar: I know what it says it does
15:02  dhruvasagar: but it doesn't seem to do anything
15:02  dhruvasagar: even after a -D
15:02  dhruvasagar: when I do a -l
15:02  wereHamster: what is 'it'?
15:02  dhruvasagar: I still see the same lsit
15:03  dhruvasagar: I meant I know what its supposed to do, but it doesn't appear to be doing it, -D doesn't change the output of -l
15:03  dhruvasagar: ok it does
15:03  wereHamster: dhruvasagar: well, take it up with #ubuntu, that has nothing to do with git anymore.  In fact, none of your problems had anything to do with git. First, you ran the commands on the wrong host, and then you have a malfunctioning ssh agent.
15:04  dhruvasagar: yea I came here from ubuntu :)
15:04  dhruvasagar: I knew from the beginning that the problem is with the ssh keys or whatever
15:05  dhruvasagar: but I assumed that it could be a *configuration* I am missing or doing wrong which is causing that
15:18  sven^: Someone pointed me to http://git.kernel.org/?p=git/git.git;a=blob;f=contrib/completion/git-completion.bash . Now my problem is, that my prompt does not get updated when I change into another directory. It only gets updated if I source .bashrc after changing dir
15:18  wereHamster: sven^: how does your .bashrc look?
15:19  sven^: wereHamster: what is relevant?
15:19  sven^: sec
15:19  sven^: I'll paste it
15:19  tango_: pasteBIN it I hope
15:20  sven^: http://codepad.org/b15f2QAC
15:20  sven^: here you go
15:21 --- ivey_off is now known as ivey
15:35 --- ChanServ sets modes [#git +v Cipher-0]
15:35 +Cipher-0: Anyone using Git's GUI? I'm trying to set up my first repository but I'm getting nowhere and I can't seem to find helpful documentation on the GUI version.
15:36  tango_: Cipher-0: git init from the command line?
15:38  bremner: Cipher-0: there isn't really a gui version. There is a gui tool, which can do some, but not all of the things the command line can.
15:40 +Cipher-0: Fair enough. Being a Windows guy (yea, I know... I'm working on my addiction. :P) I matually gravitate to the GUI.
15:41 +Cipher-0: s/matuarally/naturally/;
15:41  bremner: Cipher-0: yeah, I understand the instinct. Did you read man gittutorial?
15:41  jast: Cipher-0: the 'gittutorial' manpage can be found at http://git.or.cz/man/gittutorial [automatic message]
15:42 +Cipher-0: I've been working through that, actually. It's in the bookmarks.
15:43 +Cipher-0: ... it would help if Strawberry Perl would stop making the TERM environment variable =dumb...
15:43 --- yaotti_aw is now known as yaotti
15:43  bremner: Cipher-0: I an old-school command line guy, so I have my own biases, but I think your best bet is to get at least as far as that whole tutorial, and then ask, how can git-gui make these steps easier.
15:44 +Cipher-0: Sounds like a plan. Thanks!
15:45  tango_: otoh, git gui does have a create new repository command
15:46 +Cipher-0: I've never been able to get it to work. It asks for a revision expression and I've been unable to suss what it's asking for.
15:49  tango_: Cipher-0: how are you starting the gui?
15:49  tango_: also, what version of git are we talking about
15:50 +Cipher-0: The installed on Win7 drops an icon on the desktop. The version is... *checks* GUI version = 0.13.GUTGUI, Git version = 1.7.3.1.msysgit.0 tcl/tk = 8.5.9
15:52  tango_: sounds recent enough. so what happens when you launch git gui?
15:54 +Cipher-0: The GUI comes up fine into the Master repository, but no files are there and I can't seem to find a way to add existing files to that repository. (Mind, this is for my own stuff and it's what I'd call a true production environment.)
15:54  tango_: what master repository?
15:55 +Cipher-0: All it says it Current Branch: Master.
15:56  tango_: Cipher-0: so you create a repository somewhere
15:56 * Cipher-0 suspects he's got a LOT of reading and blowing things up to do yet. :)
15:57  tango_: either by clicking on the first link git gui presented the first time you launched it, or by running git init on the command line
16:03 +Cipher-0: Tell you what: Rather than waste everyone's time on the channel, I'm going document diving into the man pages. :) It's ll likely  be better for all.
16:04 --- alphagod is now known as Unknown[NF]
16:13  frogonwheels: Cipher-0: with an attitude like that, you'll be welcome back when you do need to reassable a blown up repository :)
16:13 +Cipher-0: I try to be smart, or at least Least Dumb. :P
16:14  frogonwheels: lol
16:14  frogonwheels: indeed, good policy.  gn   :)
16:15 +Cipher-0: As I've told $BIGNUM bosses, I try to be smart about what I'd dumb about.
16:16 +Cipher-0: This has afforded me the ability to tell a CEO when he asks for things, "You're living in a fantasy world if you think that's going to happen."
16:16  tango_: happening what, switching to git or being smart about what you're dumb about? 8-D
16:17  tango_: Cipher-0: anyway, my bet is that there is a .git directory (possibly hidden) in the working directory of git gui (i.e. the directory where git gui is launched from, see what it is from the thingie you click on)
16:18 +Cipher-0: When they want impossible things, or to automate something that takes less than five minutes a month to do already.
16:18 +Cipher-0: There is indeed a hidden .git directory under the CodeBase directory.
16:19  tango_: Cipher-0: my diagnosis: on the first time you started git gui, you clicked on "create a new repository" but left the "where" blank
16:19 +Cipher-0: Pretty safe bet.
16:19  tango_: Cipher-0: therefore, now git gui starts from a git repository and that prevents you from creating new ones
16:20  tango_: Cipher-0: delete that hidden .git directory
16:20  tango_: now, when you start git gui, it will present you with three choices: creating a new repo, cloning one, or opening one
16:21  tango_: Cipher-0: if you want to start tracking a new project which is on your computer, choose create a new repo and on the next window there will be a field which you can point to the current workdir of the project you want to start tracking
16:22 * Cipher-0 nods and copies the chat window.
16:27  harryman100: Hi, been searching for this for a while, is there any way to find out from a git repository, the URL of the remote it was originally cloned from?
16:30  tango_: git remote -v
16:31  harryman100: tango_: nice one
16:33 +Cipher-0: Hmm. Did that tango_, but... oh! Where I thought the repository was (codebase\.git) wasn't it. That would explain a lot.
16:34 +Cipher-0: And there we go. Thanks!
16:34  tango_: Cipher-0: you're welcome
16:52 --- yaotti is now known as yaotti_aw
17:01  nkuttler: is there a bug tracker for git? or should i just mail the git mailing list?
17:01  brain0: hello
17:01  brain0: I have cloned something using 'git svn clone', moved it to another computer and changed the svn remote to another location
17:01  brain0: now, git svn rebase tells me "Unable to determine upstream SVN information from working tree history"
17:02  brain0: can I fix that?
17:02  brain0: can I even fix that?
17:19  piotr: how to checkout next commit with git?
17:19  piotr:             
17:19  piotr: hi?
17:20  bremner: piotr: what do you mean "next commit"
17:20  piotr: let's say I did git checkout somerev
17:20  piotr: I do git log and see only past
17:20  _rane: somerev^ maybe?
17:20  piotr: I'd like to get next commit to somerev
17:20  piotr: isnt'at that previous?
17:20  _rane: oh wait
17:20  _rane: yeah
17:20  bremner: piotr: you should checkout a branch probably
17:21  bremner: piotr: commits don't know the future
17:21  piotr: so I have to go to the head of the branch and then back?
17:21  bremner: basically.
17:21  piotr: I'd like to replay history forwards :)
17:22  bremner: piotr: if you do something like "gitk branch", you can scroll around to your heart's content
17:23  bremner: or magit (emacs) or tig
17:23  cbreak: or gitx
17:23  cbreak: or git bisect
17:24  cbreak: for some special purpose seeking
17:24  bremner: cbreak: well, buying a mac may be overkill ;)
17:24  cbreak: ... having a mac is never a bad thing :/
17:24  piotr: bremner: thanks
17:24 * bremner locks cbreak in a closet with RMS
17:25  cbreak: he'll trip over his beard before he can catch up to me
17:37  leOn: hrm .. hello. I'm a dumbass and i've pushed some changes to which i'd like to make an amend ... What's my best option here?
17:37  brain0: push -f == evil
17:37  brain0: but people who already pulled will be angry if you push -f the amended commit
17:37  brain0: if nobody pulled yet, no harm done
17:37  leOn: nobody pulled, that i'm shure of
17:37  leOn: sure, even
17:38  leOn: so basically i can perform a local amend and then push -f ?
17:38  brain0: I think so, yes
17:38  brain0: never did it though
17:38  brain0: I am not evil
17:39  leOn: eheh
17:40  leOn: awsome
17:40  leOn: brain0: evil is not so evil after all ;)
17:40  leOn: thanks
17:41  jaalto: Would someone know the email address of repo.or.cz server admin? I have torubles connecting to it
17:42  mmc: maybe  pasky knows?
17:42  doener: admin@
17:43  jaalto: doener: I tried that, but after 2 weeks no reply.
18:21  rendar: can i go backward to commits, so having all old files in my working directory? or, if i extrapolate only 1 old file from an old commit?
18:24 +[exa]: rendar: git checkou -f <old_commit_hash_af4d2f6....>
18:24 +[exa]: *checkout
18:24  rendar: [exa], thanks, and if i want to extrapolate an old file from the old tree?
18:24 +[exa]: I would do checkout and just copy it, but you can perfectly do git checkout on one file afaik
18:25 +[exa]: like git checkout -f commithash path/to/file
18:29  rendar: [exa], ok, i'm in the first checkout now, but if i type git log, all other new commits are not printed of course. how i can reset HEAD to the latest commit, or to another commit? i just need to see the sha1 id of other commits..
18:29  patrikf: note that checkout -f is potentially dangerous
18:30  rendar: patrikf, i've lost all new commits?!
18:30  cbreak: rendar: git checkout master
18:30  rendar: ok
18:30  patrikf: nah. it may discard working dir changes though
18:30  cbreak: that'll bring you back to your master branch
18:31  rendar: oh
18:32  rendar: so 'master' always points to the latest commit's has
18:32  rendar: hash*
18:33  patrikf: ... on branch master
18:33  rendar: ok
18:33  rendar: if i have a branch named 'goofy', then 'goofy' always points to the latest commit's hash of that branch of course
18:33  patrikf: also, checkout <branch> is different from checkout <hash>
18:33  rendar: patrikf, uhm, why?
18:34  patrikf: with the former, you'll change the branch with subsequent commits
18:34  patrikf: with the latter, not
18:34  rendar: right, as i supposed
18:38  rendar:  rewrite k.bmp (76%) --in the last commit, git prints this, this means that git has rewrited only the 76% of the k.bmp, and not the _entire_ file at the  new commit, right?
18:38  cbreak: if you're in a detached head state, and not on a branch, your commits go into the nether
18:38  cbreak: lost in the void, and gone as soon as you forget about them
18:39  rendar: oh!
18:39  rendar: so there is the possibility of the status where git points to no branches
18:40  rendar: i did think that git would not permit this
18:40  cbreak: sure it does
18:40  rendar: i see
18:40  cbreak: when ever you check out a tag or sha directly
18:41  rendar: cbreak, what about that '76%' stuff?
18:41  cbreak: ignore it
18:42  rendar: cbreak, uhm, just for the sake of curiosity, but when i commit something, git does compress that (with gz, bz2 or what?!), and at every commit (as far as i understood) git recompress the _entire_ file and put the new compressed blob in the tree....right?
18:43  kevlarman: rendar: git tries to do delta compression
18:43  rendar: mmm
18:44  wereHamster: rendar: git uses zlib compression. And the blob is added to the object store (as a loose file) when you run git-add
18:44  wereHamster: s/loose file/loose object/
18:44  wereHamster: delta compression is only used in pack files
18:44  rendar: uhm, what you mean with pack files? files already compressed (tar.gz) or binary files in general?
18:45  wereHamster: rendar: man git-pack-objects
18:45  jast: rendar: the 'git-pack-objects' manpage can be found at http://git.or.cz/man/git-pack-objects [automatic message]
18:45  rendar: ok
18:47  rendar: oh, it's very flexible tool
18:47  cbreak: rendar: no
18:47  cbreak: git stores a compressed version of each file you commit each time
18:47  rendar: why? i'm reading a lot of useful options
18:47  cbreak: it will ocasionally repack them, but not into one thing for each commit
18:48  cbreak: and not after each commit
18:48  rendar: cbreak, mmm, so for example, if i have a 200 mb .avi file already compressed in xvid (so the zlib compression can't reduce it so much) and do 2 commits, my repository will be ~400mb big?
18:48  wereHamster: in fact, I've rarely seen automatic git-gc kick in...
18:48  wereHamster: rendar: yes
18:48  rendar: i got it
18:49  wereHamster: however, if you then run git-repack or git-gc, it might shrink.
18:49  rendar: i see
18:49  cbreak: rendar: only if you changed the file
18:49  rendar: cbreak, yes, of course
18:50  rendar: cbreak, so, also if i changed that file of 1 byte, git repository will be ~400mb big
18:50  cbreak: for example, if you change the fourcc from XVID to DIVX, then each movie will take up the full space
18:50  rendar: so the space will be doubled for that simple operation, ok, i got it
18:51  cbreak: not doubled
18:51  cbreak: added to
18:51  rendar: well, yes
18:51  cbreak: repack might or might not reduce the size :)
18:52  rendar: cbreak, consider i make a repository of a 200 mb .avi file, even if i had just created the repository and i didn't any modifies to the file, the repository itself will be big ~400mb, because when i add the file, the blob (of ~200mb) will be created
18:53  cbreak: the working dir isn't part of git's repo size
18:53  rendar: you're right
18:55  rendar: so, when i do a checkout, git simply uncompresses blobs and overwrite my working_dir's files with that blobs (using just the system api for do that, open() write() etc) --right?
18:55  cbreak: don't know what API it uses
18:56  rendar: well, i'm not interested to exactly what api, but just for understanding the concept
19:09  linuxfreaker: Hi
19:09  linuxfreaker: I need one help related to git
19:10  linuxfreaker: I am new to git
19:10  linuxfreaker: I want to know its usage
19:10  linuxfreaker: I can see that kernel releases runs on git
19:13  cbreak: what kernel might you be speaking of?
19:13  cbreak: I can't think of anything that runs on git
19:13  linuxfreaker: Linux Kernel project runs on git right?
19:13  linuxfreaker: Big Boss created it :)
19:13  cbreak: no
19:14  cbreak: just uses git as scm
19:14  linuxfreaker: yeah thats what I mean
19:14  linuxfreaker: Now I usually compile new kernel -rc
19:14  linuxfreaker: Now 2.6.37-rc5 is on mainline
19:14  linuxfreaker: I manually compile kernel through steps
19:15  linuxfreaker: make menuconfig, make , make modules et c
19:15  linuxfreaker: etc
19:15  linuxfreaker: I want to download it and compile through git
19:15  linuxfreaker: How to do that?
19:16  cbreak: git clone
19:17  cbreak: to get your own repository
19:17  cbreak: git pull to update
19:17  cbreak: git checkout to switch branches
19:23  hemmecke: What exactly does depth =0 in the [pack] section of .git/config mean in contrast to depth=1? http://kerneltrap.org/mailarchive/git/2009/11/8/15751/thread seems to propose depth=1, but using git fetch showed that some compression was going on while depth=0 showed nothing. What exactly happens with depth=0? (Here is my .git/config that seems to do what I want, I am just looking for confirmation. https://gist.github.com/738226)
--- Log closed Sun Dec 12 19:36:44 2010
--- Log opened Sun Dec 12 19:52:10 2010
19:52 --- Users 722 nicks [0 ops, 0 halfops, 14 voices, 708 normal]
19:52 --- Server: [barjavel.freenode.net] [freenode-info] channel flooding and no channel staff around to help? Please check with freenode support: http://freenode.net/faq.shtml#gettinghelp
19:53 --- Channel #git was synced in 117 seconds
20:10 --- Anti-X is now known as torvalamo
--- Log closed Sun Dec 12 20:18:37 2010
--- Log opened Sun Dec 12 20:23:59 2010
20:23 --- Users 724 nicks [0 ops, 0 halfops, 14 voices, 710 normal]
20:25 --- Channel #git was synced in 120 seconds
20:42  hemmecke: charon: What is TFS? My use case is a repo of photos (each item roughly 2mb). core.compression=-1 is ok, but delta packing the source repo while git fetch would not be, because it is useless. OK, so delta=0 does what I want. Thanks.
20:45  wereHamster: team foundation server?
20:45  wereHamster: oh, the f*ing source ?
20:53 --- yaotti_aw is now known as yaotti
21:03  charon: the fine source ;)
21:03  charon: but yeah, the source
21:09 --- yaotti is now known as yaotti_aw
--- Log closed Sun Dec 12 21:18:55 2010
--- Log opened Sun Dec 12 21:24:18 2010
21:24 --- Users 729 nicks [0 ops, 0 halfops, 14 voices, 715 normal]
21:26 --- Channel #git was synced in 114 seconds
21:29 --- Anti-X is now known as torvalamo
22:03  Xeross: http://paste.pocoo.org/show/304063/ What can I do to resolve this ?
22:04  Xeross: Don't know exactly what I broke but it doesn't sound very good
22:06  Xeross: Seems the branch push just faile
22:06  Xeross: failed*
22:17  tango_: Xeross: it would seem like repository corruption or maybe just bad connection
22:17  tango_: Xeross: try again?
22:20  Xeross: Hmm it was just the branch that was bad
22:21  Xeross: Deleted the remote branch and pushed it again, then it worked
22:31  rendar: if i do a checkout of a prev commit, and change data, and make another commit, if i do checkout master, i lost that commit. how i can move that "middle" commit to a new branch?
22:31  krang: Hey all. I have a branch I'm working on, and want to merge *one* file in from my master branch. How can I do that?
22:32  krang: rendar: git stash
22:32  rendar: thanks you dude
22:32  krang: np :)
22:32  rendar: 'no local changes to save
22:34  krang: rendar: Hang on, let me think this over
22:35  krang: rendar: my bad, I didn't realise that you'd already made the commit in the master branch
22:35  rendar: yep
22:35  krang: rendar: so, you've checked out your old commit and changed it, and committed it, and that's where you are, yes?
22:35  rendar: i've just to "unlink" that commit from the branch to another
22:35  rendar: yep
22:36 --- ajpi is now known as ajpiano
22:36  kerloi: Hi everybody. I'm getting made trying to understand how to use a remote repo with git. I have a local repo "/home/blabla/..." and a apache server with a git repo in /var/www/localhost/htdocs/MY_REPO the server is running and I can access the repo. I followed instructions at http://www.kernel.org/pub/software/scm/git/docs/howto/setup-git-server-over-http.txt but now if I try to clone the repo It just says it is empty.
22:36  krang: so your changes are sitting in the working directory?
22:36  rendar: yep
22:37  kerloi: I don't understand why. If someone could tell me how to do I'll be the happiest geek in the world ...
22:38  krang: rendar: you should just be able checkout the other branch and commit. last time I looked, checking out a branch didn't reset the working dir
22:39  krang: rendar; wait, my bad, don't do that :)
22:39  rendar: krang, yes is what i tought, indeed i've created another branch, but the modifies are up to date, so i should modify a little the file and commit in the new branch, but it's a binary file and i can't
22:43  krang: rendar: hmm, if you could force git to stash your commit, that'd help. I'm messing around here trying to do this myself
22:44  rendar: i see, thanks dude!
22:44  rendar: :)
22:44  Mannequin: hi. I'm pushing a large commit (a few megas). As I wait it to finish, is it safe to open another terminal and doing more git stuff (particularly, creating another local branch)?
22:51  krang: rendar: so, you're at the HEAD of master right now, why not checkout other_branch, then git merge master?
22:51  krang: rendar: after that, you should be able to reset master anywhere you want
22:52  krang: rendar: you have no local changes, since you already committed, so you shouldn't lose anything
22:57  krang: rendar: or if you checked out/modded/committed in other_branch, you could just git checkout master and git merge other_branch
22:58  rendar: krang,  http://codepad.org/a5GqKeKU
22:58  krang: rendar: crap, i forgot it was a binary file
22:59  krang: rendar: are you just making changes in the one file?
23:00  rendar: yes
23:00  rendar: krang, why git differences binary files or non-binary files?
23:00  krang: rendar: git is designed for text files. it can track what is changing and manage it intelligently.
23:01  rendar: i see
23:01  krang: rendar: you should have renamed copies of the file in your working dir right now
23:02  krang: just take a look
23:02  rendar: ok
23:02  krang: see if you can open them, one should be the old, one the new
23:04  krang: rendar: it is just that one file you're dealing with?
23:05  krang: rendar: because i just realised that the easiest way to resolve your problem is to copy it outside your git repo, change branches, replace the file in the working tree with the one you wanted, and commit that.
23:08  krang: rendar: you should be able to reset to pre-merge state by issuing git reset --hard (Just to confirm, you had committed the state you wanted and haven't changed branches yet). I have to go now, but if you just copy the file, it'll work. Sorry i couldn't help more!
--- Log closed Sun Dec 12 23:19:05 2010
--- Log opened Sun Dec 12 23:24:28 2010
23:24 --- Users 718 nicks [0 ops, 0 halfops, 14 voices, 704 normal]
23:26 --- Channel #git was synced in 114 seconds
23:29 --- OuLouFu is now known as orafu
23:32  adiabatic: Newbie question. I'm working on adiabatic/qlmarkdown on github, and I'd like to apply a change that was made to ktf/qlmarkdown (someone I didn't clone from). How can I do this? I've tried `git pull https:.../ktf/qlmarkdown.git a44b...`, but I get an error message saying git "couldn't find remote ref a44b...". Do I need to add a remote, and then fetch from that?
23:34  charon: adiabatic: first, you can only fetch refs, not sha1s. and then you may also want to cherry-pick (take only that single changeset) instead of pull (merge all changes leading up to that commit)
23:34 +[exa]: adiabatic: pull his _branch_ to another repo, then you can for example cherrypick from it
23:34  charon: adiabatic: so try: git remote add -f ktf $url ; git merge a44b... # or cherry-pick
23:35  adiabatic: ooh, thanks
23:42 --- thick_mcrunfast is now known as blast_hardcheese
23:42 --- MikhX_ is now known as MikhX
23:42 --- sadmac2 is now known as sadmac
23:46 --- airborn_ is now known as airborn
--- Log closed Mon Dec 13 00:45:14 2010
