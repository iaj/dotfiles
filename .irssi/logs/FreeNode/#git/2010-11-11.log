--- Log opened Thu Nov 11 00:00:39 2010
00:08 --- adamholt is now known as adamholt_away
00:08 --- adamholt_away is now known as adamholt
00:13  bronson: I'm trying to copy a giant git tree to perforce...  git-p4 is slick, but it wants to do everything in a separate commit.
00:14  bronson: Doesn't look like there's a way to tell it to ignore history.
00:14  fr0sty: bronson: are you trying to do a shallow import?
00:14  bronson: Anyone know if I can create a branch that has a single commit, but will still accept merges from the original 10,000 commit branch?
00:15  bronson: fr0sty, exactly, but more like a shallow export.
00:15  bronson: from git to p4 without history
00:15  fr0sty: bronson: git checkout -b to-p4 --orphan HEAD
00:16  fr0sty: and use git-p4 on the to-p4 branch.
00:17  fr0sty: you probably want to 'git checkout <realbranch>; git merge to-p4' as well so the two histories are still related.
00:17  bronson: fr0sty, and I can merge master to to-p4?
00:17  bronson: right.
00:17  bronson: OK, I'll play with that, thanks!
00:19  fr0sty: bronson: I'm suprised that you can't do a shallow export... shouldn't be too hard...
00:19  bronson: error: unknown option `orphan'
00:19  bronson: fr0sty, agreed...   I might dig into that script and see what it would take.
00:21  fr0sty: bronson: git --version?
00:22  fr0sty: maybe: 'git checkout --orphan -b to-p4' instead
00:22  bronson: git version 1.7.1
00:22  bronson: ah, probably
00:23  fr0sty: git is occasionally very picky about the order of arguments.
00:24  bronson: arg, looks like orphan was added 448 commits after 1.7.1
00:24  bronson: time to compile
00:29  richcollins: How do I fix "To prevent you from losing history, non-fast-forward updates were rejected" when I push?  I did a pull and there were no changes:
00:29  richcollins: https://gist.github.com/c7564cc78ea74e648359
00:29  frogonwheels: richcollins: you probably haven't merged/rebased your local changes when you fetched?
00:30  richcollins: frogonwheels: How do I check to see what is unmerged?
00:30  frogonwheels: richcollins:  personally, I use gitk
00:30  richcollins: frogonwheels: How about with a command?
00:31  frogonwheels: git log  master ^origin/master    ??
00:31  bronson: richcollins, git log master..origin/master
00:32  richcollins: bronson: No output
00:32  frogonwheels: richcollins:  which should be exactly the same unless I stuffed up the ordering of mine
00:32  bronson: sorry, reverse them then.  origin/master..master
00:32 --- hobodave_ is now known as hobodave
00:32  bronson: I alwasy get that wrong.
00:32  richcollins: It shows the entire history of commits
00:34  percious_: hey guys, im having some trouble getting git to work in hudson
00:35  ScottO_: how do i ignore all Thumbs.db files?
00:35  bronson: richcollins, git log origin/master..master
00:35  richcollins: bronson, frogonwheels: What should I be looking for
00:35  percious_: i have gitosis running
00:35  bronson: if there's no output then everything's merged.
00:35  percious_: and im trying to hit locally
00:35  richcollins: bronson: It shows every commit in the history
00:35  bronson: richcollins, ah...  then it sounds like you have unrelated branches or something.
00:35  percious_: hudson hangs on: git fetch -t git://xxx.xxx.com/ssc.git +refs/heads/*:refs/remotes/ssc/*
00:36  percious_: xxx.xxx.com is my server name
00:36  bronson: richcollins, you sure these two branches have a common ancestor?
00:36  richcollins: bronson: I don't see why they wouldn't have
00:36  richcollins: just been working from a private github repo w/ someone else
00:36  richcollins: The remote shows only master
00:37  bronson: richcollins, and you didn't rebase or anything?
00:37  richcollins: nope
00:37  ScottO_: *Thumbs.db is not working to ignor all possible locations of that file
00:37  bronson: what does git describe master and git describe origin/master show?
00:37  richcollins: fuck
00:37  richcollins: I checked out master
00:38  richcollins: and now the other local branch is done
00:38  richcollins: *gone
00:38  ScottO_: how do i ignore all files named a specific name?
00:38  richcollins: along with the files that I added
00:38  frogonwheels: richcollins: unlikely to be gone
00:38  richcollins: bronson: There was a nameless branch somehow
00:38  bronson: richcollins, if you committed, no big deal.
00:38  bronson: it'll be in your reflog.
00:38  richcollins: ok, it doesn't appear when I type git branch -v
00:38  frogonwheels: richcollins: ahh.. you had a detached head probably
00:38  richcollins: how does that occur?
00:39  frogonwheels: richcollins:  it won't get garbage collected for a couple of weeks :)
00:39  frogonwheels: richcollins: you checked out a commit rather than a branch
00:39  frogonwheels: or a label
00:39  richcollins: I didn't check out anything afaik
00:39  richcollins: I just did pulls, pushes and commits
00:40  frogonwheels: richcollins: just try  git checkout -b tmpbrn  HEAD@{1}
00:40  richcollins: Ah that worked :-)
00:40  richcollins: thanks
00:41  frogonwheels: ok - so now you've got a temporary branch pointing to where you checked in stuff
00:41  frogonwheels: richcollins: you working in a submodule perhaps?
00:41  richcollins: frogonwheels: Nope
00:41 * frogonwheels shrugs.
00:41  richcollins: repo was created only a few days ago
00:41  richcollins: afaik, its just involved pulls, pushes and commits
00:42  bronson: richcollins, git checkout -b NAME to create a branch.
00:42  bronson: so this doesn't happen again.
00:52  j4cbo: how do i *change* a branch to point to a different commit?
00:53  frogonwheels: j4cbo: git checkout branch && git reset --hard  {commitid}
00:53  j4cbo: i.e. i made a branch "too early" by accident, so now i want to change master to point to somehere else
00:53  j4cbo: gotcha
00:53  frogonwheels: j4cbo: --hard indicates  'be careful, it's clobbering time'
00:53  frogonwheels: ie it will clobber anything in your working dir :)
00:55  bronson: j4cbo, sounds like you can use a fast-forward merge.
00:55  j4cbo: frogonwheels: fine by me.
00:56  frogonwheels: j4cbo: presumably you won't orphan any commits by doing that?
01:06  witquicked: okay, so what's the accepted practice for .gitignore in submodules? If don't add it, then I get the "modified blah/blah (untracked content)" status, if I do add it to my local copy of the submodule, then I get the "modified blah/blah (new commits)" status
01:06 --- adamholt is now known as adamholt_away
01:06 --- adamholt_away is now known as adamholt
01:07  witquicked: that's assuming the parent doesn't want to add one, or that I haven't asked them to yet....
01:07  SethRobertson: witquicked: Perhaps you should consider gitslave as an alternative to git-submodule, depending on your development workflow it may be better (or worse).
01:07  witquicked: SethRobertson, never heard of it.... hmmm
01:07  SethRobertson: gitslave (http://gitslave.sf.net) is useful when you control and develop on the subprojects at more of less the same time as the superproject, and furthermore when you typically want to tag, branch, push, pull, etc all repositories at the same time.
01:07  SethRobertson: git-submodule is better when you do not control the subprojects or wish to fix the subproject at a specific revision even as the subproject changes
01:07  frogonwheels: witquicked: either put it in your .git/info/exclude
01:07  SethRobertson: ^^
01:07  frogonwheels: witquicked: or you can set up a global ignore
01:08  witquicked: frogonwheels, global ignore via config, yes?
01:08  frogonwheels: witquicked: yeah you can set a global ignore file in the confi
01:08  frogonwheels: config
01:08  witquicked: oic
01:08  witquicked: hmmmm
01:09  witquicked: okay.. so now that I've added the .gitignore files to the submodules, what's the quickest way to get them out (rollback the commit)?
01:09  witquicked: since they're now in the tree locally...
01:10 --- LeLutin_ is now known as LeLutin
01:10  frogonwheels: witquicked: are the changes in a branch?
01:10  witquicked: nice... so set the core.excludesfile to my top-level .gitignore, and I'm done...
01:10  frogonwheels: witquicked: (by default, submodules are detached heads)
01:10  witquicked: frogonwheels, ohhhh.... still learning here. They're committed to the detached head.
01:10  frogonwheels: witquicked: that's one way to do it :)  or you can set a global core.excludesfile  to wherever you want
01:11  frogonwheels: witquicked: :) so just git submodule update in the  parent ...
01:11  frogonwheels: or git checkout HEAD~1
01:12  witquicked: okay... excellent... thank you both for your help!
01:13  witquicked: SethRobertson, gitslave isn't what I want, since I'm not in control of the parents... but it's good to know about.
01:13  SethRobertson: comitting to the detached head will make the subproject dirty---I think
01:13  witquicked: yeah... I'm just now figuring that out.
01:13  witquicked: :(
01:14  SethRobertson: use the .git/info/exclude
01:14  witquicked: fortunately, this is early enough in my efforts that I can start over. :)
01:14  witquicked: SethRobertson, why not the core.excludesfile?
01:14  SethRobertson: You can.  That just requires editing two files
01:14  SethRobertson: config and the file it points to
01:34 --- _richcollins is now known as richcollins
01:41  Andrii_: Would git fit as a database for online text-file editing service? not in real time
01:43  FauxFaux: Andrii_: Probably not, most filesystems are going to hate you if you store all the text files seperately for more than n hundred thousand posts.
01:44  FauxFaux: Unless you render directly from the bare repo, and incur the massive hate of getting stuff out of the middle of a pack file.
01:46  Andrii_: I see
01:48 --- qDot_ is now known as qDot|Away
01:49 --- _richcollins is now known as richcollins
01:51  Andrii_: FauxFaux: but what if it will be a one huge single file?
01:51  witquicked: So, I've asked around in other channels, and been directed to git, what would the folks here recommend as a master-master file synch utility (rsync sux if you aren't carefull about timing [--delete is a killer], and unison is old and doesn't do well with unicode filenames)?
01:51  FauxFaux: Andrii_: So you're going to use csv as the backend for your huge, webscale database, and commit it every time you make a change?
01:52  Andrii_: FauxFaux: yes
01:52  FauxFaux: Think carefully about that for a moment.
01:52  Andrii_: FauxFaux: should I go with MongoDB?
01:53  FauxFaux: Is it webscale?
01:53  Andrii_: FauxFaux: you troll me?
01:54  witquicked: Andrii_, he's asking you leading questions because you're clearly not thinking your questions through properly. You could get your answers on the Google.
01:54  witquicked: it's not like it hasn't been done before.
01:55  Andrii_: witquicked: sorry, I will. check it out btw http://www.xtranormal.com/watch/6995033/
01:56  ke_: i have a branch with a new feature, which i like to merge with the master branch. to do that, i wanted to rebase the commits in the feature branch to one single commit and merge that with the master branch with git rebase -i master. now, i get conflicts between several commits, is there a way to let git just choose the latest commit in that case?
01:58  bob2: ke_: that's a two step process right
01:58  ke_: bob2, exactly
01:58  bob2: I don't get what the issue is then
01:58  bob2: squash the branch, which is conflictless
01:59  bob2: rebase the resulting commit
01:59  bob2: (maybe conflicty)
01:59  ke_: bob2, do you mean git rebase -i and then squash the commits ?
01:59  ke_: bob2, or git merge --squash master?
02:01  bob2: I don't really get what you mean
02:01  bob2: rebase the branch so it has one commit
02:01  bob2: then rebase that branch on to master
02:02  ke_: bob2, right. to do the first step, i did git rebase -i master and then selected "squash" to get one single commit out of it. however the rebase fails with conflicts, which shouldn't be, as i already did a git merge --squash master where i fixed the conflicts
02:03  bob2: the first step has nothing to do with master
02:03  bob2: git checkout whateverbranch
02:03  bob2: git rebase -i HEAD~howevermanyrevisions
02:03  bob2: <squash>
02:03  bob2: done
02:03  bob2: git checkout master
02:04  bob2: er, not checkout master.  git rebase master
02:05  bob2: or just not bother, and instead 'git checkout master ; git merge whateverbranch'
02:05  ke_: bob2, on git rebase -i HEAD~howevermanyrevisions however i get several conflicts
02:06  bob2: I don't see how squashing contiguous commits from a branch could conflict
02:06  Andrii_: When I use grit ruby library as a wrapper for git repository I get diff in plain text, if I want to style the changes in CSS should I parse the lines for '+' and '-' or there is a better way?
02:06  bob2: but i'm not a git expert
02:07  ke_: bob2, me neither, and that's why i am asking
02:16 --- MikhX_ is now known as MikhX
02:18  Dreamer3__: how can i get all my remote branches local?
02:20  Dreamer3__: nm
02:30  picasso: hi guys. im evaluating a new vcs to migrate to from subversion. git and hg are my top choices. one key developer really wants to use perforce for his team, but i'd like to stay consistent. what are the best arguments favoring git over perforce, other than cost?
02:34  HadiM: hi
02:35  HadiM: hown can i pull all my remote branch in same time ?
02:35  sitaram: picasso: http://sitaramc.github.com/other-stuff/git-links.html#perforce
02:38  sitaram: picasso: well, some broken links there, sorry -- bitrot
02:38  picasso: yeah, thanks tho
02:38  picasso: i have 0 experience
02:38  picasso: this blog post showing some of the examples of svn vs perforce is scary
02:38  sitaram: picasso: the last link works though and is pretty detailed.  I myself have no p4 knowledge
02:39  picasso: of course im sure this is the worst case
02:39  sitaram: which one? lukepalmer?
02:39  picasso: harukizaemon
02:40  sitaram: http://www.harukizaemon.com/2006/09/no-really-perforce-does-suck.html ??
02:40  picasso: yeah
02:41  picasso: i love how the git-is-better-than-x page says git is easy to learn, because it has more help commands than mercurial :)
02:43  sitaram: picasso: git may not be easy to learn but it is most definitely the most powerful.  It's good to have that power sometimes, even if you don't need it always
02:48 * frogonwheels is wondering how to deal with a team member is scared by a 3-way diff :(
02:50  sitaram: make him use VSS
02:50  bremner: promote him
02:50  frogonwheels: sitaram: given that we've come from TeamCoherence, he would find VSS very comfortable :(
02:51  frogonwheels: sitaram: .. and I've used VSS, so I _do_ know how bad it is.
02:51  sitaram: bremner has the right idea; make him a manager :)  He'll become one soon anyway at this rate
02:51  frogonwheels: bremner: .. yes dishwasher in an IT firm would be a suitable promotion :) .
02:52  sitaram: frogonwheels: never heard of TC.  Where does it fit on the scale of the VCSs most people know about?
02:52  frogonwheels: sitaram: somewhere between VSS and StarTeam
02:53  frogonwheels: sitaram: VSS with a reasonable issues database maybe? oh.. and it groups files   (like  myform.dfm and myform.pas  ) .. like *wow*
02:54  sitaram: :)
02:54  frogonwheels: sitaram: haven't found an alternate issues database yet..
02:56  frogonwheels: oh.. except that it has a Client/Server over TCP - so that's an improvement on VSS - I'd forgotton that VSS works over network shares !!
--- Log closed Thu Nov 11 03:21:38 2010
--- Log opened Thu Nov 11 03:27:04 2010
03:27 --- Users 682 nicks [0 ops, 0 halfops, 0 voices, 682 normal]
03:28  k_sze: the man page for git-add says this: "but with some options it can also be used to [...] remove paths that do not exist in the working tree anymore." What option is it really?
03:28  k_sze: -f?
03:29 --- Channel #git was synced in 149 seconds
03:48  NickyP: win7/64 bit
03:48  NickyP: C:\Users\Bill>ssh git@github.com
03:48  NickyP: PTY allocation request failed on channel 0
03:48  NickyP: has anyone received this and solved it?
03:50  quiznilo: is anyone else getting SSL cert issues when trying to checkout code from github?
03:51  bremner: quiznilo: maybe ask on #github
03:52  quiznilo: ah ok pardon me
03:59  bremner: ah, not trying to yell, just think you will get better answers there.
04:00  quiznilo: bremner: of course, thanks, they helped, I didn't know I was OT here
04:02  frogonwheels: NickyP: looking at ssh -v git@github.com   might help
04:04  NickyP: yes i did that with github/support. We couldn't solve it.
04:05  sitaram: NickyP: bet you're using openssh 5.6
04:05  NickyP: checking/
04:06  sitaram: NickyP: actually, you haven't said what the *problem* is.  "ssh git@github.com" by itself should do nothing anyway
04:07  NickyP: it is suppose to come back with some failed hand shake messages
04:07  sitaram: quadz: not OT, more like second preference compared to #github if it seems to be an operational problem
04:07  NickyP: not that error
04:07  sitaram: NickyP: try adding -T
04:08  sitaram: ssh -T git@github.com
04:08  sitaram: NickyP: and if that works, head over to https://github.com/sitaramc/gitolite/blob/pu/doc/ssh-troubleshooting.mkd#_basic_ssh_troubleshooting_for_the_admin and read the "NOTE" at the bottom of bullet number 1
04:09  NickyP: C:\Users\Bill>ssh -T git@github.com
04:09  NickyP: ERROR: Hi NickyPerian! You've successfully authenticated, but GitHub does not pr
04:09  NickyP: ovide shell access
04:09  NickyP: worked
04:09  sitaram: it would
04:09  sitaram: are you telling me folks on #github could not solve this?
04:10  sitaram: damn; I'm doing ssh support for *other* projects than gitolite now.  Time to back off...
04:10  bremner: or get paid
04:10  NickyP: yes
04:11  NickyP: Now waht
04:11  sitaram: did you read the note on that link I gave you.  Looks like they upgraded their servers to openssh 5.6
04:11  NickyP: what
04:12  sitaram: now nothing -- you still haven't said what is the *problem*.  You were expecting a message, you got it.  "Now what" is something you have to tell us :)
04:13  NickyP: i need to try a push and get back
04:13  NickyP: what is -T switch
04:13  sitaram: NickyP: that will *always* work.  The only problem was when you try to get a pty, which only happens when you do a bare "ssh git@github.com".  Even "ssh git@github.com pwd" would not request a pty and would have gone through
04:14  sitaram: NickyP: man ssh for -T switch
04:14  NickyP: k
04:14  NickyP:   thanks
04:17  kbond: what is the best way to move a repo from one remote to another?
04:18  DrNick: kbond: you want to change the URL of a remote?
04:19  kbond: yeah, i'm switching git hosts
04:19  DrNick: kbond: git remote set-url
04:20  kbond: so that sets the origin to the new url?
04:22  kbond: how do i get all the branches/tags to the new url?
04:23  kbond: do i have to push them all individually?
04:24  friskd: i keep getting this error: No submodule mapping found in .gitmodules for path 'plugins/meio_upload'
04:25  friskd: but i can't find any reference for that in my config or gitmodules file
04:25  friskd: how do i stop this from happpening?
04:31  jim: I would like an introduction to submodules... also, say I have an app with a plugin architecture... would I have a separate repo per plugin? if I went that way, what are the mechanisms where I could grab stuff from the main repo and have it grab (possibly a subset of) the plugins?
04:34  NickyP: sitaram: A little credit. thanks again http://support.github.com/discussions/accounts/1121-key-file-permissions-will-not-stick
04:36  friskd: i can't seem to find any reference anywhere in git to this supposed path 'plugins/meio_upload'
04:36  friskd: yet just running git submodule update
04:36  friskd: i get o submodule mapping found in .gitmodules for path 'plugins/meio_upload'
04:37  friskd: *no
04:37  friskd: where should i look to remove that reference ...
04:41  sitaram: NickyP: updated with additional info
04:42  jim: ok, I just read man git-submodule and I'm unsure submodules are really what I want
04:42  SethRobertson: Perhaps you should consider gitslave as an alternative to git-submodule, depending on your development workflow it may be better (or worse).
04:43  SethRobertson: gitslave (http://gitslave.sf.net) is useful when you control and develop on the subprojects at more of less the same time as the superproject, and furthermore when you typically want to tag, branch, push, pull, etc all repositories at the same time.
04:43  SethRobertson: git-submodule is better when you do not control the subprojects or wish to fix the subproject at a specific revision even as the subproject changes
04:43  frogonwheels: jim: hmm.. possibly if you wanted to have the ability to have seperate repos per plugins, I would have a submodule which defines the plugin interface - that way any plugins could have that repo as a submodule
04:43  SethRobertson: git-subtree is better when you prefer to have a single-repository "unified" git history and only need to pull changes in from external sources--not contribute your own changes back
04:43  SethRobertson: frogonwheels/jim: that sounds more like a job for gitslave than submodules, actually
04:43  jim: so I have a dir structure that has a /main
04:44  jim: err a main dir
04:44  jim: and inside are several subdirs, one is called packages/
04:44  frogonwheels: jim:  doing it that way (or similar) would facilitate other people having a submodule that represents the plugin interface to the main projects.. it's a thought anyway
04:44  jim: and there are a few core packages, and noncore
04:45  jim: frogonwheels, trying to get my head around that... not sure how that would work
04:46  jim: the project lead proabably wants main/packages/(core packages) in the main repo and main/packages/(each not core package) in its own separate repo
04:46  jim: I think what might be easier is if all packages, core and not core, each had their own repo
04:46  jim: but
04:47  frogonwheels: jim:  submodules work better if the dependency goes the other way  (ie the main project is dependent on a particular library version in a submodule, rather than the submodule being dependent on the main library.
04:47  frogonwheels: s/main library/main project/
04:48  jim: when soemone wants to check out the core, they should get main/, everything other than packages in main/ and all of main/packages/(core packages)
04:48  SethRobertson: gitslave less so. Just saying
04:49  frogonwheels: jim: I'm not familiar with gitslave, so just talking about attribtues of submodules.  their usage workflow is fairly narrow.
04:49  jim: ok... would something like this work:
04:50  jim: main/, main/.git, main/(other stuff) AND THEN main/packages/foo-package/.git (etc)
04:51  frogonwheels: jim:  is foo-package a plugin for main?  or a library main depends on?
04:51  jim: a plugin
04:51  jim: like an app or a service that supports an app
04:51  frogonwheels: I think you might find that submodules would cause you some grief with this model
04:51  jim: and btw this is all interpreted, there's no C
04:52  jim: yeah, after reading man submodules I would agree
04:52  frogonwheels: jim:   projects/main/.git     projects/main/interface/.git    projects/foo-package/.git   projects/foo-package/interface/.git      would work with submodules
04:53  jim: ok,got some things to think about... bbiaw :) thanks.
04:53  frogonwheels: jim:  gl
04:59  interopcop: what's the proper method for updating .gitignore?
05:00  interopcop: i.e. I have a client that only does git pull and is now complaining about /log/development.log.0 since I added development.log to logrotate
05:00  interopcop: so I need to update .gitignore to include log/*.log*
05:01  interopcop: so I changed it on the master
05:01  frogonwheels: interopcop: then change it and commit it  ..   the point of .gitignore  vs .git/info/exclude is that it is comitted
05:01  frogonwheels: (or that you would normally comit it)
05:01  interopcop: but the client still errors out: "error: Untracked working tree file 'log/development.log.0' would be overwritten by merge."
05:02  frogonwheels: interopcop: that sounds like somebody has comitted (and possibly deleted) that log
05:02  interopcop: yes, by mistake
05:02  frogonwheels: interopcop: well, you either need to filter-tree it out of the repo - or rename it?
05:02  frogonwheels: interopcop: there is one other soln
05:02  frogonwheels: interopcop:  use sparse checkout and ignore that file.
05:02  interopcop: I don't ever need it in the repo
05:03  interopcop: how do I delete it from the repo?
05:03  interopcop: git rm?
05:03  frogonwheels: interopcop:  you can filter-branch it out - but that will require rewrting history
05:03  frogonwheels: interopcop: and force-pushing up.
05:03  frogonwheels: interopcop: but if you're the only one pushing, that's not too bad.
05:04  frogonwheels: interopcop: if you delete it from the repo, it will still remain as a tracked file.. which you can get around using sparse-checkout features.
05:05  frogonwheels: sorry if you 'rm' it from the repo that is  (filter-tree will make it like it never existed)
05:06  interopcop: frogonwheels: are you saying if I rm it, the repo will say "there was once a file, but it got rm'd in this version"
05:06  interopcop: if I'm ok with that then go ahead?
05:07  frogonwheels: interopcop:  yes - but you might still have the 'untracked working tree file'  problem.
05:07  interopcop: but filter-tree would be like having a hot tub time machine, and going back and slapping me in the head before I committed it?
05:07  frogonwheels: interopcop: lol. exactly. well put :)
05:08  frogonwheels: interopcop: and anybody downstream from you has to deal with the time-paradoxes you just created ;)
05:08  interopcop: I don't regret *individual things* about my past (re:high school), I regret *everything* about my past (re:high school) so a hot tub time machine would have no real value to me
05:08  interopcop: thanks for your help - that fixed it
05:13  friskd: if i do this: git submodule status
05:13  friskd: i get this: No submodule mapping found in .gitmodules for path 'app/models/behaviors/plugins/meio_upload'
05:13  hachi: meieio
05:14  friskd: that doens't exist... nor does a reference
05:14  friskd: in the .git/config or the .gitmodules
05:14  friskd: how to i clear git so that it doesn't think its there?
05:29  jim: friskd, I'll echo you, I'm not sure what you mean "how to I clear git so (it #1) doesn't think (it #2)s there?"
05:30  jim: what;s it #1 and it #2?
05:30  friskd: #1 = git, #2= that file.
05:31  friskd: meio_upload
05:31  friskd: actually i figured it out.
05:31  friskd: jim: thanks though. Jim.
05:31  jim: check man git-rm, maybe it's git rm --cached (file)
05:31  jsmelquist: 98910519!
05:32  jim: memimaemoemuu!
05:32  jsmelquist: haha
05:32  jim: what else can I say...
05:32  jsmelquist: Sorry bluetooth keyboard acting up
05:32  jim: oh, no worries :)
05:33  jim: friskd: thanks; I probably have info enough to help with about 5-10% here, but what I can do to get more is be curious
05:34  jsmelquist: I have a question... A co-worker created a branch (branchB) but the origin of the branch was branchA and we could like to not include the branchA content and instead make branchB soley based on Master
05:34  jsmelquist: I am thinking we need to use git rebase
05:34  SethRobertson: quite right.  More complicated if it has been pushed
05:34  jim: hmm, so JUST to satisfy my curiousity...
05:35  jsmelquist: these branches have both been pushed
05:35  jim: the co-worker, did commit to branchA?
05:35  jsmelquist: he did have commits on branchA yes
05:36  jsmelquist: he basically meant to create his branch on master, but forgot he was in branchA when he 'git checkout -b branchB'
05:36  SethRobertson: this is an example in the git-rebase man page
05:36  jim: ok, and there is his own repo that may have been cloned from a remote, and the remote which is like the main central repo?
05:37  jsmelquist: right, with the git rebase --onto master branchA branchB
05:37  jim: ok, so branchB was created along the development path which could be defined by branchA?
05:37  jsmelquist: yeah
05:38  jsmelquist: yes sir
05:38  jsmelquist: we basically want to remove branchA out of the equation and branchB would act as if it was branched off master
05:38  jim: and... now, there could be a lot of different things you could want :)
05:39  jim: so is it that you want to rebase branchB onto master?
05:39  jsmelquist: I will be doing the operation yes
05:39  jim: or, could it be...
05:40  jim: that you want to first rebase branchA onto master, and then branchB would then be a commit along master but not merged yet?
05:41  jsmelquist: branchA is already based on master
05:41  jim: but you say you want branchA gone
05:41  jsmelquist: I would like to remove any reminents of branchA from branchB
05:41  SethRobertson: this is an example in the git-rebase man page
05:41  jsmelquist: but I will personally continue to work on branchA
05:42  jim: so you want branchA based off master, and branchB based off master, and neither based off the other
05:42  jsmelquist: when doing the git rebase --onto command, from the man page, which branch am I supposed to be in? or master? or does it matter
05:42  jsmelquist: yes you have it correct
05:42  jim: ok, just wanted to clarify exactly what you want
05:47  jsmelquist: so is git rebase --onto what I am looking for then?
05:49  Utoxin: What's the snippet to get verbose SSH debug out of git pull?
05:58  kylefox: jsmelquist: thanks
06:06  sitaram: Utoxin: only way I know is to add "host your.host.name<newline>loglevel debug3" to the top of ~/.ssh/config.  Temporarily, of course
06:08  Utoxin: sitaram: Figured it out. Sorry, should have said. Using GIT_SSH, and a wrapper.
06:09  sitaram: Utoxin: yeah true, but as the documentation for that option says, it's easier to do it in ~/.ssh/config :)
06:10  Utoxin: I dunno. Wrapper was pretty easy. ;)
06:10  Utoxin: One line bash script.
06:11  Utoxin: Woo. Hook worked beautifully. Heh.
06:12  Utoxin: Setup: Gitosis repo on one server. Working copy on another server that drives the dev website. I edit a clone on my comuter, push to gitosis, post-update ssh's into the dev webserver, and triggers a git pull.
06:13  Utoxin: I've done the auto-pull on the same server as gitosis before. This was my first attempt at doing it through an ssh to another server. Heh.
06:20  person: Hey all, when I try to do git commit -a -m "my message" I'm getting an error saying that 'Paths with -a does not make sense.'
06:22  sitaram: git --version?
06:22  person: 1.7.04
06:22  person: 1.7.0.4*
06:23 * offby1 suspects an alias
06:23  sitaram: hmm that's odd; should have worked.  Works here...
06:23  person: It normally works.
06:23  offby1: person: try hiding your ~/.gitconfig -- i.e., rename it
06:23  person: I noticed something odd happened last night in which i did git add on a file
06:23  offby1: if that doesn't help, type "type -a git" at your shell
06:23  sitaram: offby1: you can't alias git's own commnads (like commit)
06:23  offby1: ok ok
06:23  offby1: (that's a good design)
06:24  sitaram: yup
06:24  person: And then I believe I did a git checkout
06:24  person: and then when I tried to git rm on that file I added earlier it gave an error message (sorry I can't remember) so I just rm'd it normally.
06:29  bob2: person: type -a git
06:29  person: ?
06:29  person: Command not found..
06:30  person: Wow you know what it is....
06:31  person: Quotes embedded in my message. Dumb.
06:31  person: On my part.
06:31  person: Peace!
06:31  sitaram: I was going to ask you to paste a complete transcript as next step :)
06:32  SethRobertson: Why would `git log -p |grep sql/vera-schema.sql | grep diff | wc` produce more output than `git log --oneline sql/vera-schema.sql | wc`  I have identified specific commits which are missing
06:35  DrNick: because the first does a string search and the second limits git log to changes that touch sql/vera-schema.sql
06:55  devians[w]: hey guys, if im working on branch a, and i find out i have to do x before i can continue, so i checkout master, branch b, work for a while, merge branch b back into master, if i want those changes in branch a, do i just merge master into branch a? is that the best practice?
07:00  Raphomet: that seems generally right, devians[w]
07:00  devians[w]: kk, was just curious if that was the go, or if there was some better course of action
--- Log closed Thu Nov 11 07:22:24 2010
--- Log opened Thu Nov 11 07:22:45 2010
07:22 --- Users 667 nicks [0 ops, 0 halfops, 0 voices, 667 normal]
07:25 --- Channel #git was synced in 144 seconds
07:32 --- qDot|Away is now known as qDot_
--- Log closed Thu Nov 11 09:02:32 2010
--- Log opened Thu Nov 11 09:02:57 2010
09:02 --- Users 684 nicks [0 ops, 0 halfops, 0 voices, 684 normal]
09:05 --- Channel #git was synced in 151 seconds
