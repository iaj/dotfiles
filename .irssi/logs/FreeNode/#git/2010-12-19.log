--- Log opened Sun Dec 19 02:03:01 2010
02:03 --- Users 662 nicks [0 ops, 0 halfops, 7 voices, 655 normal]
02:04 --- Channel #git was synced in 120 seconds
02:12  wereHamster: brain0: no, http-backend does not work for old pre-smart-http clients
--- Log closed Sun Dec 19 10:12:26 2010
--- Log opened Sun Dec 19 14:47:18 2010
14:47 --- Users 655 nicks [0 ops, 0 halfops, 7 voices, 648 normal]
14:48 --- yaotti_aw is now known as yaotti
14:49 --- Channel #git was synced in 120 seconds
14:52  ProLoser: http://pastebin.com/sFUmJBFg
14:54 --- nohk_ is now known as nohk
15:02 --- nohk_ is now known as nohk
15:08  jamescarr: hey, when I do a git rm *png it has the unexpected side effect of actually deleting the file
15:08  jamescarr: I dont want to do that :(
--- Log closed Sun Dec 19 15:12:44 2010
--- Log opened Sun Dec 19 15:33:10 2010
15:33 --- Users 651 nicks [0 ops, 0 halfops, 7 voices, 644 normal]
15:33  petaflot: hello! I have a problem with git under windows, and I don't really know wat to look for. I created the git repo on a linux box (J), cloned it on another linux box (A) that acts as a samba file server. now, on the windows client (W), git tells me ALL files have changed when in fact none have. if I run git status on (A), it properly states that no files have changed. I suspect this is related to line feeds, but this is just a guess...
15:33  jamescarr: hmmm... is it possible for me to add some post-checkout hook that rsyncs resources?
15:35 --- Channel #git was synced in 120 seconds
15:35  patrikf: petaflot: man git-config, core.autocrlf
15:35  jast: petaflot: the 'git-config' manpage can be found at http://git.or.cz/man/git-config [automatic message]
15:36  petaflot: patrikf: thanks! I will dig into this right now
15:36  drizzd_: petaflot: the changes will probably disappear of you clone the repo on the windows box
15:37  petaflot: drizzd_: what do you mean? if I run the git clone command on the windows box directly?
15:38  patrikf: petaflot: also, sharing a working tree over SMB might not be the best idea (maybe use a bare repo as an intermediary instead)
15:39  drizzd_: petaflot: yes
15:40  petaflot: drizzd_: but if I do git stuff on (A) after this, will it have the same problem the other way round?
15:41  rdz: hi all. how can I included the current version of file foo of branch bla in the current branch?
15:43  drizzd_: petaflot: yes
15:44  drizzd_: petaflot: you cannot reasonably share one clone with different core.autocrlf settings
15:45  drizzd_: and as others have noted, sharing a clone can have other issues as well
15:47  petaflot: patrikf: so you say I should have a repo locally on the windows box? this is quite unconvenient, as ALL its files are on SMB
15:49 +Borg-: petaflot: using MSYS GIT?
15:49 +Borg-: or some IDE?
15:49 +Borg-: and what windows?
15:49 +Borg-: vista?
15:49  patrikf: petaflot: i'm just saying there shouldn't be more than one person working on that repo
15:50  patrikf: if this cannot happen even though it's on SMB, then you should be fine
15:50  petaflot: Borg-: box is windows XP
15:51  petaflot: I'm not really sure where the git installer comes from, it's not my box and the friend installed it. right now I can see the GUI, copyright shawn pearce. it includes gitk as well command line tools
--- Log closed Sun Dec 19 15:55:32 2010
--- Log opened Sun Dec 19 16:03:16 2010
16:03 --- Users 655 nicks [0 ops, 0 halfops, 7 voices, 648 normal]
16:03  bremner: working on embedded systems? (brain explodes)
16:03  petaflot: bremner: uh yeah... webplatform if you know. allows us to do TCP/IP stuff on very simple hardware
16:03 * petaflot 's brain is exploding as well. lots of code to look at and tune before we can actually start doing something useful
16:03  bremner: it sounds like a cool project, anyway.
16:04  petaflot: cooler than you think :-) we're trying to get network transparency and abstraction for any type of IOs
16:04 +Borg-: petaflot: ah.. then ENOLUCK
16:04 +Borg-: im using git via cygwin here.. to have unified envifonment between UNIX and Windows
16:04 --- Channel #git was synced in 232 seconds
16:05 +Borg-: no issues
16:05 +Borg-: I have ever do clone and push both ways (SSHD running on cygwin)
16:05  petaflot: probably a smart thing to do
16:05 +Borg-: petaflot: if ever need this: http://borg.uu3.net/~borg/?cygwin
16:06 +Borg-: its special crafted cygwin.. works fine on 2000/XP/2003
16:10  petaflot: Borg-: thanks, will keep a bookmark to your cygwin port. for now, I'll tell my mate to do git stuff directly on his linux box. too bad for him, he just shouldn't use windows
16:11 +Borg-: ;)
16:11 --- ivey_off is now known as ivey
16:15  petaflot: thanks for your help guys!
16:16 * petaflot will go for now
16:25 --- adamholt is now known as adamholt_away
16:25 --- adamholt_away is now known as adamholt
16:28  slashbeast: Hi there.
16:29  slashbeast: I have problem with Git I think. Looks like `git pull` does not update all branches. I have to checkout branch, I am getting message that I am behind remote branch X commits and then git pull upgading it. Why?
16:29  slashbeast: is it feature?
16:30  pratz: hey guys just now i messed up, i did not added some of the important files to git, ie. i missed the untraced files and then cloned the repository again for some reason. Now i have lost all the files
16:30  bremner: slashbeast: yes
16:30  bremner: slashbeast: pull = fetch + merge, and merge needs a working tree
16:30  slashbeast: bremner: can you please point me to right docs or maybe just tell how can I upgrade all branches and why git have this strage feature?
16:31  pratz: please any one is there a way that a user can not push the code before he adds or deletes the untracked files
16:31  pratz: hey guys please help me
16:31  bremner: pratz: patience
16:31  slashbeast: bremner: but what if I want checkout few files from other branch without checkouting it? Like git checkout branch -- foo/bar?
16:32  bremner: slashbeast: you can use the remote branch, origin/branchname for that
16:32  pratz: bremner: man is there a way to do it, and i will remember your advice in future
16:32  slashbeast: checkout origin/branc -- foo/bar?
16:32  bremner: should work
16:32  slashbeast: I thought that my local 'branch' = origin/branch
16:32  patrikf: slashbeast: you cannot (should not) ever work on the remote-tracking branch origin/branch
16:33  patrikf: slashbeast: which is why you have a copy of that, named "branch"
16:33  slashbeast: well I am doing checkout brach and loks like it doing copy of origin/branch
16:33  bremner: patrikf: except I just gave an example of when you want to work directly with the remote branch
16:33  cbreak: you can't check out remote tracking branches :)
16:33  slashbeast: I think I understand that.
16:33  slashbeast: thanks
16:33  patrikf: bremner: for me, "work on" = "commit to"
16:33  bremner: patrikf: ok
16:34  slashbeast: I does not quite understand why I have some branches in `git branch` and some in `git branch -a`.
16:34  bremner: is there a faq entry about this?
16:34  cbreak: pratz: your question makes no sense.
16:34  slashbeast: I have checkouted one branch what I does not need, can I do git branch -D not-needed-local-branch?
16:35  patrikf: sure
16:35  slashbeast: and I will not destroy my local cloned repo? I want check it twice, repo have few GB. ;-)
16:36  patrikf: it won't, but why does your repo have a few GB?
16:36  cbreak: cloning is not destructive, making a clone does not delete files
16:36  slashbeast: I am working on a big repo, what's wrong with it?
16:37  bremner: well, it often indicates craziness like versioning large binary blobs
16:37  cbreak: slashbeast: a branch is less than a kilobyte in size.
16:37  cbreak: deleting them won't save you much
16:38  slashbeast: but I want avoid 'your foobar branch is X commits behind'
16:38 --- yaotti is now known as yaotti_aw
16:38  patrikf: slashbeast: if you never work on that branch, don't have it.
16:39  patrikf: slashbeast: if you do work on that branch, git has to handle the case where your changes conflict with changes on the remote end, which is why it works that way.
16:39  slashbeast: I already checkouted for that branch, tabfail.
16:40 --- ChanServ sets modes [#git +v nhojpatrick]
16:40 +nhojpatrick: anyone know how to create svn patches? i was assuming "git svn diff"
16:42  cbreak: what's an svn patch?
16:42  cbreak: git has format-patch
16:45 * engla urges: always create your patches with format-patch. no "patches" from git diff please
16:46  slashbeast: why?
16:46  cbreak: git diff is for viewing stuff
16:46  cbreak: it's not for machine consumption
16:46  slashbeast: well ok, I always used git diff > foo.patch
16:46  patrikf: er...
16:46  doener: "git diff" doesn't show vital information like author, date and commit message
16:47  cbreak: machines would just get confused from the color codes in the output
16:47  slashbeast: well when I use > it save it without colors.
16:47  patrikf: cbreak: that's why you set that config option to "color on tty only"
16:47  cbreak: why should I? I want color always.
16:47  patrikf: git diff is perfectly fine for generating diffs...
16:47  cbreak: and the purpose of a diff is to look at it
16:47  cbreak: to see what changed
16:48  patrikf: or to apply it
16:48  patrikf: in case whatever wants to use the diff cannot or does not use git
16:48  cbreak: if he doesn't have git, then git diff seems rather worthless
16:49  patrikf: how so? there's that standard utility called "patch"
16:49  cbreak: yeah, and what does it work on? On patches.
16:49  cbreak: -> git format-patch
16:50  engla: Because the git patch has all that info, log and all as well as information to 3-way merge in the patch. It's the gold standard for patches
16:50  patrikf: cbreak: you got something wrong here. what makes you think git diff does not output patches?
16:50  cbreak: it writes diffs
16:50  slashbeast: diff is patch
16:50  cbreak: some of those can-t even be restored
16:50  patrikf: same thing
16:50 --- ivey is now known as ivey_off
16:52  doener: from git-diff(1):
16:52  doener:        -p, -u, --patch
16:52  doener:            Generate patch (see section on generating patches). This is the default.
16:54  engla: disappointment, n. : When receiving a "patch" in email and discovering it's merely the output of git diff
16:55  patrikf: engla: then you should probably have asked for "the output of git format-patch"
16:56  engla: yeah I do that in the contributor guidelines. Also, I don't get aggressive, just a tad disappointed :-)
17:00  cbreak: you've probably not yet tried --color-words. I like it much more than the standard mode in many situations.
17:01  doener: cbreak: I often prefer --word-diff
17:02  cbreak: that's not supported in my git diff :/
17:03  engla: can git apply apply --word-diff  diffs?
17:03  doener: cbreak: added in v1.7.2-rc0~124^2
17:03  cbreak: still on 1.7.0 here :/
17:04  doener: engla: no
17:04  engla: doener: ok
17:09  cbreak: doener: looks weird. --color-words mode seems cleaner than the plain word diff stuff with all those brackets
17:13  mmattice: $
17:15 --- ChanServ sets modes [#git +v nhojpatrick]
17:22  divVerent: how to "cleverly" bisect performance differences?
17:22  divVerent: goal would be the commit introducing the largest performance difference
17:27  cbreak: divVerent: git bisect? :)
17:27  divVerent: cbreak: I know THAT :P
17:27  cbreak: just consider slow == buggy
17:27  cbreak: and answer that way
17:27  wereHamster: divVerent: bisect always starts between two known points. Measure the initial performance difference and then always take the side which has the greater performance impact
17:27  divVerent: of course, but how do I properly distinguish between that
17:27  cbreak: benchmark? :/
17:27  divVerent: no, no
17:27  divVerent: this not what I mean to ask :P
17:28  divVerent: currently, my approach is to measure at start and at end of the range
17:28  divVerent: choose a "random" value in between
17:28  divVerent: and consider anything worse bad, anything better good
17:28  divVerent: but this also seems to often hit minor things
17:28  divVerent: so I'd like some more clever method than that
17:28  wereHamster: divVerent: of course, if you have 100 commits and each decreases the performance by 1% then there is no single commit which you can pinpoint, so stop when the impact is at least some percentage of the initial impact
17:29  divVerent: wereHamster: assume I have 50 commits
17:29  divVerent: 49 of them decrease performance by 1%
17:29  divVerent: and one decreases by 30%
17:29  divVerent: I want to hit THAT one
17:30  cbreak: impossible to do without testing each of them
17:30  divVerent: basically, I'd like a "more binary" search approach than what I do with the fixed threshold
17:30  divVerent: cbreak: sure, but approximately
17:30  cbreak: IF you consider it possible that performance can be increased
17:30  divVerent: I have an algorithm idea, but do not know how to do that with git bisect run
17:30  divVerent: my decision would be:
17:30  divVerent: when bisecting and at point X, I already know a point X0 that is worse, and a point X1 that is better, with X somewhere in between
17:31  divVerent: then I take thresh := (t(X0) + t(X1)) / 2
17:31  divVerent: and decide based on t(X) < thresh
17:31  divVerent: I could do that, if I knew X0 and X1 in my bisect run script
17:31  divVerent: i.e. the current "best" and "worst" commit that is still being considered
17:31  divVerent: and that has been previously tested
17:31  divVerent: is there a way to get that info out of git-bisect?
17:32  cbreak: you could just manually bisect
17:32  divVerent: do not want :P
17:32  divVerent: that is what I currently do, and I hate it
17:32  divVerent: is there a way to get that info out of git-bisect?
17:32  cbreak: divVerent: considered googling for numerical algorithms to find maxima and minima in black box functions?
17:32  divVerent: git bisect visualize seems to show it
17:32  patrikf: divVerent: in principle, you have to bisect for each performance change
17:33  cbreak: that sounds about like what you want
17:33  divVerent: cbreak: let me ask another way
17:33  divVerent: git bisect visualize shows me a worst and best still considered commit
17:33  divVerent: can I somehow get their hashes from a script?
17:33  divVerent: the rest could be done with a temp "database file"
17:34  divVerent: that should yield a quite reliable although not perfect algorithm for finding one of the "more evil" commits
17:39  divVerent: ah... refs/bisect/good and refs/bisect/bad seem to be roughly what I want...
17:39  divVerent: so I GUESS I can safely say "a good commit is one better than the average of refs/bisect/good and refs/bisect/bad, a bad commit is another one"
17:40  cbreak: why?
17:40  cbreak: you can't say that if both are equal
17:40  divVerent: I assume they are not
17:40  divVerent: if the function is non monotonic, this won't work
17:40  divVerent: but if the function IS non monotonic, I may end up concentraitng on a "small decrease" instead of the big one anyway
17:41  cbreak: just test all increases and find the biggest one
17:41  divVerent: but then I have to test all revs
17:41  cbreak: the increases of computational time required between the commits is independent
17:41  divVerent: for 1000 ones it's a bit much
17:42  cbreak: you have to test all revs anyway
17:42  cbreak: since they are not in any relation
17:42 --- gebi_ is now known as gebi
17:42  charon: divVerent: if you can spare a factor of two you can always compare HEAD with HEAD^ during bisection
17:42  charon: oh wait, no, you can't.
17:42  divVerent: [rpolzer@grawp darkplaces]$ ls .git/refs/bisect/
17:42  divVerent: bad
17:42  divVerent: good-a315e532aafafc62929aeed9662cdcb66a454172
17:42  divVerent: this is evil
17:42  divVerent: why is it not refs/bisect/good?
17:47  charon: divVerent: you're poking around in bisect's internal data... you have no rights to complain about anything :)
17:47  divVerent: charon: why does bisect not provide this data to me?
17:47  divVerent: git bisect visualize does show it
17:48  charon: divVerent: here's a hint: read visualize() in git-bisect.sh
17:49  divVerent: cbreak: basically, my approach is... to find the point of largest increase in a function f(x), I do this:
17:49  divVerent: I assume the interval I look in is [a, b], and I set c := (a+b)/2
17:49  divVerent: then I compare f(c)-f(a) and f(b)-f(c)
17:50  divVerent: and follow the subinterval where this difference is larger
17:50  divVerent: this is what I am trying to do
17:50  charon: divVerent: here's another hint: read the docs for --bisect in man git-log
17:50  jast: divVerent: the 'git-log' manpage can be found at http://git.or.cz/man/git-log [automatic message]
17:50  patrikf: divVerent: won't work
17:50  divVerent: why not?
17:50  patrikf: divVerent: consider +3,+1,+1,+1,+1,+1,+1
17:50  divVerent: patrikf: sure, it CAN fail
17:50  divVerent: it is an approximation
17:51  divVerent: the only way to find the commit FOR SURE is an exhaustive search
17:51  divVerent: but I am talking over 1000 revisions
17:51  patrikf: you only need to look at commits that introduce performance changes
17:51  divVerent: measurement is not perfectly exact
17:51  patrikf: if that's all 1000 commits, then yes, you've got a problem ;-)
17:51  divVerent: it is a fps measurement of a quake engine :P
17:52  divVerent: it is not trivial to decide whether a minor change is an actual change, or measurement error
17:52  divVerent: but I am looking for the major change
17:52  patrikf: well, i'd just ignore changes below a certain threshold
17:53  divVerent: I have ONE fact on my side though
17:53  divVerent: I have linear history
17:53 --- Unknown[NF] is now known as Unknown[OFF]
17:53  divVerent: so modelling it as a mathematical function is actually sensible
17:54  pngl: Hi, how do I make sure a local branch perfectly mirrors a remote branch? I just realized that the local branch can silently get out of sync if I do local changes that do not conflict with the remote.
17:54  wereHamster: pngl: checkout <branch> && git reset --hard @{u}
17:55  wereHamster: or replace @{u} with whatever branch you want it to mirror
17:56  pngl: wereHamster: I don't see any @{u} syntax on git-reset's man page, could you give me an example? Did you mean @{origin/mybranch}?
17:56  wereHamster: pngl: it's described in man gitrevisions
17:56  jast: pngl: the 'gitrevisions' manpage can be found at http://git.or.cz/man/gitrevisions [automatic message]
17:57  pngl: wereHamster: thanks.
18:00 --- Unknown[OFF] is now known as Unknown[NF]
--- Log closed Sun Dec 19 18:06:09 2010
--- Log opened Sun Dec 19 18:11:32 2010
18:11 --- Users 666 nicks [0 ops, 0 halfops, 8 voices, 658 normal]
18:13 --- Channel #git was synced in 122 seconds
18:26  anirudhr: Hey, I have a very basic question. How would I version control a CMS website like Wordpress, since dynamic content is in the database?
18:27  wereHamster: anirudhr: you wouldn't
18:31  anirudhr: wereHamster: Thanks. So what analogue should I do.
18:33  wereHamster: maybe you should use a cms which has builtin support for versioning
18:33  wereHamster: but I don't see how wordpress + git could ever work together
18:34  theoros: you could spend a week going through every file and putting only the relevant ones under version control, i guess
18:35  theoros: but that obviously won't give you version control over the content
18:38  anirudhr: theoros: Yeah, that is the problem. How about versionning a database export?
18:40  theoros: you could but why?
18:40  theoros: get your cms to support versioning and then keep backups
18:40  anirudhr: theoros: Yeah, I guess using inbuilt revision control would be best.
19:16  amerinese: Anyone using a GUI on windows for git?  Any recommendations?
19:22  naderman: is there any way I can use an alias to overwrite what an existing git command does?
19:23 --- JEEBcz is now known as JEEB
19:24  wereHamster: naderman: no
19:24  naderman: damn :/
19:24 --- AAA_awright_ is now known as AAA_awright
19:24  wereHamster: naderman: which you would you want to overwrite?
19:24  naderman: init and clone
19:25  wereHamster: why? how?
19:25  naderman: well I would overwrite them with a wrapper which calls the regular init/clone and does some extra magic
19:25  naderman: I mean there is no way I can make init/clone call some code of mine, is there?
19:26  wereHamster: no. But why don't you make an alias which does init/clone + your own stuff?
19:26  AAA_awright: amerinese: http://code.google.com/p/tortoisegit/
19:26  naderman: well cause I want to provide this to other people, but let them continue to use git as they are used to
19:26  naderman: so they won't have to remember to use the special command
19:26  wereHamster: naderman: what is it you're trying to do after init/clone?
19:27  naderman: well at the moment just setup some hooks which I could use the template directory for
19:27  naderman: but I would like to respect the template directory people use
19:27  naderman: so I don't want to overwrite that
19:28  naderman: wereHamster: I mean I can't specify multiple templates, eh? ;-
19:28  naderman: ;-)
19:29  naderman: hmm maybe I can provide them with a default template directory, and instruct them on adding my hooks to theirs if they already use one
19:29  naderman: wereHamster: any better idea?
19:30  amerinese: AAA_awright: cool
19:31  wereHamster: naderman: no, what you propose sounds like the only way
19:36  naderman: wereHamster: oh but that also means the default hook samples will not be there :/
19:40  wereHamster: naderman: well, I would just put up a guide to instruct your users how to add your custom hooks/files
19:41  wereHamster: and then leave everything else up to the uesrs
19:41  naderman: well that's just really complicated compared to a simple "run the install script and that's it"
19:47  wereHamster: naderman: you could wrap the whole git binary..
19:47  naderman: yeah I guess I'll end up doing that
19:47  naderman: but well rather annoying
19:47  naderman: was trying to avoid that
19:47  naderman: wish git had some kind of plugin system ;-)
19:49  charon: naderman: we're trying very hard to give a backwards compatible scripting interface, so anything of that sort (plugins or overriding commands by alias) is right out
19:50  naderman: charon: not sure I see how that would break backwards compatibility?
19:50  naderman: I mean I don't need to output anything etc.
19:51  naderman: and I don't want to change any options or arguments either
19:51  charon: well, backwards compat *and* in general how a command behaves
19:51  naderman: I just want to add something to it
19:51  charon: you may not want to do that, but many people would do it
19:51  naderman: well if they want to install this thing, they probably do want it?
19:51  naderman: I mean otherwise they wouldn't be installing it
19:52  charon: sure, but then we'd have several "dialects" of scripts that drive git *really* quickly
19:52  varnie: good day. how one should remove some redundant files and untrack them in the git repository ?
19:52  naderman: I am providing the tool in a way that you have to do all the work manually, but I'm pretty sure a lot of people would appreciate to just have it happen automatically
19:52  wereHamster: varnie: git rm <file> && git commit
19:52  varnie: tnanks for quick response!
19:53  naderman: charon: well if you look around, there are tons of people are providing replacements for the git binary now to wrap individual commands
19:53  naderman: I don't see how that is better, if anything it's worse
19:53  naderman: you're not stopping people from doing these things
19:53  naderman: you are making them use more error prone methods
19:54  wereHamster: naderman: if done properly they are not more error prone
19:54  patrikf: but that way users know they're not using git, but some variant
19:54  patrikf: (also, i haven't seen a single such script and never had a need for one)
19:54  naderman: wereHamster: well the problem there is, that you can typically find the actual git binary somewhere, and if some programme starts making calls to that instead of your wrapper things become inconsistent
19:55  wereHamster: naderman: correct. But that's how it should work. External apps which call the git binary should be able to rely on its interface. If you change it without telling the applications they might misbehave
19:55  wereHamster: that's exacly what charon meant earlier
19:55  naderman: wereHamster: I will not change the interface
19:55  naderman: but I need to be made aware of all calls to git
19:56  wereHamster: naderman: you not. Others may
19:56  naderman: and act upon them
19:56  naderman: for my tool to be useful
19:56  naderman: so you are saying because some people might misuse a feature, you cannot add it for all the people who would do something valuable with it?
19:56  naderman: that seems rather backwards
19:56  wereHamster: naderman: the only binary you need to replace are those in $PATH (git and a couple other ones). It's really not that hard
19:57  naderman: wereHamster: now what if I want to install a second "plugin"
19:57  wereHamster: right. Then you're in trouble :)
19:58  charon: out of curiosity, what is "extra magic"?
19:59  naderman: charon: well in my case for example, I would like to fetch merge and push notes for a certain ref automatically, when you are trying to push
19:59  wereHamster: naderman: what if the user doesn't want that?
19:59  naderman: wereHamster: well then they don't install my plugin?
19:59  naderman: I'm not suggesting that everyone wants this
19:59  naderman: I'm trying to provide a tool that does exactly this
20:00  naderman: which people who do want this, can install
20:01  charon: my gut feeling is that this is almost a good enough case for a pre-push hook
20:01  charon: seeing as we're still exploring what notes can do, and what notes merge is good for
20:01  naderman: well that'd work perfectly for me
20:02  naderman: but working with notes like this is a bit difficult for most new users
20:02  naderman: so I need to provide them with some simpler way of working with them essentially
20:02  charon: not sure what the opinions of others would be, but you could at least ask
20:02  naderman: + the kinds of notes I have here I can always merge with -X theirs, so it can happen automatically
20:02  charon: so far the stance on such hooks has been that it's not a case for a hook if it can be solved by an alias or wrapper script around the command
20:03  naderman: huh? but I can't wrap push?
20:03  naderman: can I?
20:03  naderman: that's what I was trying to do
20:03  naderman: but was told I can't?
20:03  charon: wrap in the sense: my_git_push() { do_foo; git push; do_bar; }
20:03  wereHamster: naderman: alias, wrapper don't need to modify git itself
20:03  amerinese: Is it a bad idea to store binary files in a git repo (ie images)?
20:03  naderman: charon: ah right
20:04  charon: naderman: ... but i was going to say, if you can make a good case that "half the world" will want to merge notes, and i can see why they would, then it would probably make sense to provide *some* support for this
20:04  naderman: heh well ok, I'll write something up and send it to the list
20:04  naderman: but that doesn't really help me with what I'm doing now ;-)
20:05  charon: the question of course, is whether it's "right" to do that at push time, maybe it would be better to do the fetch&merge at fetch (or pull) time?
20:05  naderman: well you would have to make them manually fetch the notes if the notes push does not fast forward then
20:06  charon: but they already know to do that for ordinary refs, so what's the big deal
20:06  naderman: so it's definitely more convenient to do it at push time
20:06  charon: also, no complaining here is going to help you with what you're doing now since we've already told you why it's not possible short of fully wrapping the git binary ;)
20:06  naderman: charon: more work more typing, dealing with something you wouldn't otherwise have to think about
20:06  naderman: charon: oh heh I'm not complaining, don't get me wrong
20:07  naderman: at this point just trying to convince you that plugins are not a bad thing ;-)
20:07  naderman: but what I guess I really want is just a ton more hooks
20:07  naderman: my problem with alias/wrappers is just that a user always needs to remember to use a different command
20:08  patrikf: well, the command does something different, so...
20:08  naderman: I think in a lot of cases it'd be more convenient if you could just keep on working the way you are used to
20:08  charon: one big problem with too many hooks is that many git commands internally call other git commands
20:08  naderman: patrikf: well it does something additionally, not different
20:08  charon: (prime case being the scripts like git-rebase)
20:08  patrikf: naderman: yes, that's different from the original behaviour, where it didn't to extra stuff
20:09  patrikf: do*
20:09  naderman: patrikf: well ok then, my point remains though
20:09  naderman: just because I now have a new feature in git pull, I don't want to start typing git pullandnewfeature
20:09 --- AAA_awright_ is now known as AAA_awright
20:10  naderman: patrikf: afterall git does add new features to, just keeps it backward compatible
20:10  naderman: so I understand why you would want a new name if it is not backward compatible
20:10  naderman: but if you just add something and it's fully compatible I don't think requiring a new name makes sense
20:10 * charon thinks it would be fun to have git pull{,andnewfeature,andotherfeature,andcrazyfeature,andfixednewfeature}
20:10  jast: amerinese: nah, no problem. just be careful with really big files
20:11  naderman: charon: yeah that sounds like a great idea :D
20:11  amerinese: jast: did it used to be a problem?  or what am i thinking of...
20:11  amerinese: the diffs will be weird right?
20:11  naderman: charon: well anyway thanks, I'll write something to the list as I said, and replace git for the time being
20:12  charon: naderman: well, my honest assessment is that any plugin idea right now has zero change of getting past the list, much less junio. a pre-push hook with a well-thought-out interface and a PoC notes-merging script as a use case has a chance.
20:12  jast: amerinese: normally you won't see binary changes in a diff, but git does have a binary diff format and it does a pretty good job internally anyway.
20:12  charon: naderman: besides once you have the pre-push hooked in, instead of telling people to install your wrapper, you can just tell them to install git from $your_git.git
20:12  amerinese: oh ok
20:13  naderman: charon: well that's not really an option for people who just want to use the git that comes with their distribution
20:13  naderman: or god forbid are using windows ;-)
20:18  charon: naderman: how is installing a wrapper different from installing git? both mean putting something in a custom directory and prepending that to PATH
20:18  amerinese: jast: ah, so poking around a bit, i guess you need to garbage collect to keep the git repo size down relative to svn right?
20:18  amerinese: so then it's probably about the same as with svn
20:19  naderman: charon: oh sorry I was going to do it with a shell alias
20:19  patrikf: amerinese: the problem with big files is that with git you have the full history everywhere
20:19  naderman: so you can install my program and it'll just call the regular git binary
20:20  naderman: and with the shell alias you can type git instead of mybinary
20:20  jast: amerinese: actually, it's usually smaller than a svn repository. and yes, 'git gc' should be run every now and then for optimizing a bunch of things.
20:20  amerinese: patrikf: any work arounds for that?
20:20  jast: (frequently even smaller than a svn working copy, though)
20:20  jast: s/,.*\)//
20:20  patrikf: amerinese: that's a core feature of git.
20:21  jast: well, you have the same thing in svn
20:21  jast: after all that's pretty much the point of version control, to have old versions kept somewhere
20:21  patrikf: amerinese: you can always store the binary blobs separately, and then rsync it together for deployment or something.
20:21  amerinese: if the assets don't change often, maybe you can just checkout the current version
20:21  amerinese: from a separate repo
20:21  jast: 'checkout' means a different thing in git than in svn
20:22  amerinese: or i mean... hmm... i guess i don't know how to just get a copy of a file at a certain revision
20:22  jast: and usually to get something from another repository you fetch the entire history. usually that's still faster than subversion, though. :)
20:23  patrikf: amerinese: as long as you don't need to work on it, you can use git archive. also, there's "shallow clones" where you clone only to a certain depth, but i've never used that
20:23  amerinese: patrikf: storing separately, would still need to track the rev number somewhere right?  probably something like a textfile and then i would need to script the rsync or whatever
20:24  patrikf: amerinese: i thought it was something you didn't necessarily need to version control, such as imagery
20:25  amerinese: something that needs vc but the devs don't need to really need to work, just need a copy of the right version that goes with the code
20:39 --- yaotti_aw is now known as yaotti
20:46  mancha: hi folks. is there a way to have git show (or git log) default to the first parent to display merge commits?
20:46  mancha: right now, so-called trivial merge commits don't show the actual diffs on git-show or git-log
20:48  charon: mancha: there's -m, but it only restricts to first parent if you also give --first-parent
20:48  midgetspy: hey all, I have cherry-picked three commits to my branch and I'd like to combine them into a single commit. can rebase do this for me?
20:48  biomass: How do I ignore a file (*~) across all directories in a repo through .gitignore ?
20:50  mancha: charon, i don't see -m in my manpage for git-show, what is the flag?
20:51  charon: mancha: -m
20:51  charon: as man git-show says, "This manual page describes only the most frequently used options." -m is documented in man git-log
20:51  jast: the 'git-show' manpage can be found at http://git.or.cz/man/git-show [automatic message]
20:51  jast: it's documented in git-rev-list(1)
20:51  jast: sorry, git-log(1) actually
20:52  mancha: aha, many thanks, this is exactly what i needed!
20:52  mancha: -m --first-parent indeed does the trick. cheers.
20:55 --- yaotti is now known as yaotti_aw
20:56  mancha: charon/jast: thanks
20:57  patrikf: biomass: just like that
20:57 --- AAA_awright_ is now known as AAA_awright
20:58  patrikf: midgetspy: rebase -i HEAD~4 or so
20:58  biomass: patrikf: ah yes, I was reading on stackoverflow that it didn't work but looks like it did. I guess the follow up question would be how to only ignore a file in the root directory
20:58  patrikf: midgetspy: also, you could have used cherry-pick -n and then commit
20:59  patrikf: biomass: /foo
20:59  biomass: patrikf: great, thanks
--- Log closed Sun Dec 19 21:08:29 2010
--- Log opened Sun Dec 19 21:18:53 2010
21:18 --- Users 664 nicks [0 ops, 0 halfops, 7 voices, 657 normal]
21:20 --- Channel #git was synced in 123 seconds
21:25  eventualbuddha: I have a file whose filename is MMMediatypeTableCell.j, but I want it to be MMMediaTypeTableCell.j
21:25  eventualbuddha: I'm on a case-insensitive-but-case-preserving file system
21:25  eventualbuddha: so git-mv doesn't work
21:26  eventualbuddha: is there a way to do that without creating two commits?
21:28  offby1: perhaps if you do the git mv on a case-sensitive file system
21:28  offby1: or, do two commits; but then squash them together before pushing, so that the end result is one commit.
21:32  Pieter: well, that works
21:41  wereHamster: eventualbuddha: git mv MMMediatypeTableCell.j foo; git mv foo MMMediaTypeTableCell.j
21:41 * davetoo starts again to try to wrap brain around git
21:50  offby1: davetoo: general-purpose git advice: 1) Read "Git For Computer Scientists" (http://eagain.net/articles/git-for-computer-scientists/); 2) Run "gitk --all"; 3) Learn about "git reflog"
21:50  offby1: aka "Becoming a Git Black-Belt In Three Easy Steps"
21:50  davetoo: heh
21:51 --- adamholt is now known as adamholt_away
21:51 --- adamholt_away is now known as adamholt
21:51  davetoo: I was trying a few weeks ago to import a rather large (1.5GB) SVN repo into git, and the SVN repo seems to have an inconsistency that the git import tool couldn't handle,
21:52  offby1: heh
21:52  offby1: been there
21:52  offby1: done that
21:52  davetoo: so if I'm ever goign to make that work I need to learn the nuts and bolts
21:52  davetoo: the other problem was that I really don't want all the way back to rev 1
21:52  offby1: well, you may never make it work :-|
21:52  offby1: ah
21:52  davetoo: it's a ten year project,
21:52  davetoo: I only want the last year :)
21:52  offby1: you might try "git fast-export"
21:52  offby1: if you have access to the svn repo's disk.
21:52  davetoo: offby1: I don't but I made my own mirror
21:53  davetoo: local mirror with svnsync
21:54  davetoo: anyway, I'd looked at #1 before, but not #2 and #3
21:54  davetoo: Thinking about it as a graph structure does help me though
22:05  davetoo: Any opinions on the Pragmatic book?
22:20  amerinese: davetoo: it's okay, but it doesn't go that in depth
22:20 --- kornbluth.freenode.net sets modes [#git +vv jjore myme]
22:20 --- kornbluth.freenode.net sets modes [#git +v broonie]
22:20  davetoo: *nod*
22:21  davetoo: I just bought/downloaded Scott Chacon's PDf from Peepcode.  just because.
22:21  davetoo: will see.
22:21  davetoo: I can read Pro Git and the O'Reilly book on Safari, but PDF is easier to use
22:22  tek0: is it possible to git-add all lines matching a regex?
22:44 --- shadowmaster is now known as shadowm_the_know
22:44 --- shadowm_the_know is now known as shadowm_th_known
22:45 --- shadowm_th_known is now known as shadowmaster
23:09 --- albel727_2 is now known as albel727
23:30  charon: tek0: no built-in way, but it's pretty easy to script
23:32  charon: as a first approximation it's probably enough to use git diff | perl -ne 'print if /^[^+-]|^+++|^+.*your_pattern/' | git apply --cached
23:32  charon: (untested)
23:32  charon: oh, you need another arm for the --- line
23:32  charon: so
23:32  charon: git diff | perl -ne 'print if /^[^+-]|^+++|^---|^+.*your_pattern/' | git apply --cached
23:34  charon: and you obviously need to backslash all those +es. sigh.
23:38  tek0: charon: nice, I'll look into that, thanks
--- Log closed Sun Dec 19 23:44:18 2010
