--- Log opened Mon Dec 20 00:00:07 2010
00:00 --- Users 665 nicks [0 ops, 0 halfops, 6 voices, 659 normal]
00:00  charon: http://mid.gmane.org/20091021030608.GA18997@atjola.homenet
00:00  cbreak: push is the opposite of push
00:01 --- Channel #git was synced in 145 seconds
00:05  banisterfiend: charon: what book do you find discusses all these thorny issues best? im thinking of purchasing one git book
00:05  banisterfiend: is 'pro git' the way to go? or is there a better one on the market?
00:06  charon: banisterfiend: hrm, i think you'll have to ask around for the opinions of people who actually read them. i got started with git before progit and gitbook existed
00:08 --- adamholt is now known as adamholt_away
00:08 --- adamholt_away is now known as adamholt
00:16  workmad3: banisterfiend: I found progit went into a fair bit of depth
00:16  workmad3: banisterfiend: not that much point buying the dead-tree version though... the online one is kept up-to-date
00:18  banisterfiend: workmad3: how much is the online version?
00:18  workmad3: banisterfiend: free
00:18  banisterfiend: ah
00:18  workmad3: progit.org/book
00:18  banisterfiend: i still haven't adjusted to really reading e books though
00:18  banisterfiend: guess i should get over that
--- Log closed Mon Dec 20 00:25:15 2010
--- Log opened Mon Dec 20 00:30:40 2010
00:30 --- Users 662 nicks [0 ops, 0 halfops, 6 voices, 656 normal]
00:31 --- Unknown[NF] is now known as Unknown[OFF]
00:32 --- Channel #git was synced in 131 seconds
00:39 --- yaotti_aw is now known as yaotti
00:45 --- tmz_ is now known as tmz
00:55  kenneth: afternoon gitters
00:55  kenneth: question for y'all, is there a way to pass an argument or something similar to the pre-receive hook on git push
00:56 --- yaotti is now known as yaotti_aw
00:56  charon: kenneth: no
00:56  kenneth: i've got a pre-receive hook that executes php -l for anybody who pushes code, and i want to allow for a way to bypass it
00:57  cbreak: you can push to a specific branch
00:57  kenneth: hmm
00:59  kenneth: so, something like this then, create remote branch bypass-hook, have the hook detect that branch is being used, automatically merge it back into master and bypass other verifications
01:00  cbreak: no
01:00  cbreak: automatic merging is dumb
01:01  rohanpm: kenneth: environment variable
01:01  kenneth: rohanpm: of you can do that?
01:02  rohanpm: kenneth: you can pass environment variables from the pusher to the recipient, although you need some special configuration of ssh
01:03  kenneth: that sounds like a good solution, rohanpm. lemme google that
01:03  rohanpm: kenneth: SendEnv and AcceptEnv are the relevant ssh settings
01:03  rohanpm: but if you can't reconfigure the sshd you're out of luck
01:04  cbreak: hope those are off by default
01:05  kenneth: lemme see if i can get my sysadmin to enable those
01:06  charon: kenneth: if you want to go for the "magic branch" thing, note that pre-receive gets all branches at the same time so it can recognize that you are sending an update of the magic branch along with the real one
01:06  charon: (i still think that is crazy and if your hook requires an exception then it probably shouldn't be there in the first place, but whatever floats your boat)
01:07  kenneth: well, the idea is to prevent people from pushing code errors unless they specifically know what they're doing
01:09  rohanpm: kenneth: another solution would be to allow a certain pattern in the commit message to skip the check
01:12  cbreak: you can't check for those in pre-receive
01:12  cbreak: hmm... or is pre-receive executed post receiving?
01:12  rohanpm: cbreak: you do have the objects at pre-receive time
01:13  cbreak: so it's a post-receive hook?
01:14  cbreak: I think the names are wrong.
01:15  rohanpm: hmm... actually, yes, all the data has been "received" already at that time, the only remaining thing to be done is updating the refs, which I don't think you could really refer to as "receiving"
01:19  charon: "update" was taken, so meh
--- Log closed Mon Dec 20 01:24:42 2010
--- Log opened Mon Dec 20 01:30:12 2010
01:30 --- Users 657 nicks [0 ops, 0 halfops, 6 voices, 651 normal]
01:31 --- Channel #git was synced in 119 seconds
01:32  kenneth: argh. ok rewriting this script in php, i can't deal with bash.
01:34  kenneth: which is better, git show $BLOB, or git cat-file blob $BLOB
01:37  offby1: whichever gives you the results you want, is better.
01:38 --- thiago_home is now known as thiago
01:39  kenneth: afaik i get the same result, offby1
01:41  kenneth: haha i came up with a good solution for this, rohanpm charon. i just make people comment their code with //INTENTIONALLY_FUCKY to bypass the check on that file
01:42  kenneth: hopefully management won't mind my use of profanities :p
01:42  rohanpm: hmm, you implement per-push checks and yet allow/encourage swear words in code
01:42  rohanpm: it's unusual
01:47  kenneth: yeah
01:47  kenneth: maybe a little
01:47 --- ChanServ sets modes [#git +v newcode]
01:48 * Fissure makes note to grep codebase at work for swear words tomorrow
01:48 +newcode: Hello there
01:48 +newcode: got a newbie question
01:48 +newcode: I'm getting thie error:
01:48 +newcode: fatal: Untracked working tree file 'trunk/www/cache/.boost' would be overwritten by merge
01:49  thiago: newcode: what do you read there
01:49  thiago: break down the message
01:49 +newcode: I'm trying to pull from my master
01:50  thiago: yes
01:50 +newcode: and I get this
01:50  thiago: what does the error message tell you?
01:50 +newcode: just that
01:50  thiago: I know
01:50  thiago: now read it
01:50  kenneth: other question for the pre-receive hook. Is there a way to tell where the push is coming from? I want to disallow pushing to certain branches except from anywhere except one clone
01:50 +newcode: fatal: Untracked working tree file 'trunk/www/cache/.boost' would be overwritten by merge
01:50  kenneth: (or one user / box)
01:50  thiago: newcode: yes. Now read it. What is it telling you?
01:50 +newcode: how do I do that ?
01:51  thiago: kenneth: you might be able to get the IP address from the environment, if SSH sets it.
01:51  thiago: newcode: by using your brain
01:51  thiago: newcode: read it. What does it tell you?
01:51 +newcode: hey come on - don't be rude
01:51 +newcode: I don't get aything else
01:51  thiago: newcode: the message is straightforward
01:51  thiago: newcode: what do you understand of it?
01:52 +newcode: that it is untracked
01:52  thiago: what is untracked?
01:52 +newcode: the .boost file
01:52  thiago: right
01:52 +newcode: I want to ignore it
01:52  thiago: what is it telling you about that untracked file?
01:53  kenneth: or maybe i can do the SendEnv // AcceptEnv thing
01:53 +newcode: I appreciate your help thiago
01:53  thiago: newcode: it's telling you it would be overwritten by the merge
01:53  thiago: that means the commit you're merging has that file
01:53  thiago: you can't ignore it. The commit has that file.
01:53 +newcode: alright
01:53  thiago: so you have two options: don't merge the commit, or remove the file
01:53 +newcode: can I remove it from the commit ?
01:54  thiago: not with this file on this clone
01:54  thiago: you have to either remove the file first, or you have to clone again
01:54 +newcode: clone without that file ?
01:54  thiago: no, simply clone
01:54  thiago: then remove the file, commit, push again
01:55 +newcode: not sure I get it, but will research on that
01:55 +newcode: thx
01:55  thiago: my suggestion: simply remove your local file
01:55 +newcode: and commit again ?
01:56  thiago: after you remove it, you'll be able to pull
01:56  thiago: once you've pulled, you can remove the file from the repository, commit and push
01:56 +newcode: get it
01:56 +newcode: and can I ignore the cache folder for further commits ?
01:57  thiago: add to .gitignore
01:57 +newcode: cool
01:57 +newcode: thank you for your help
01:57 +newcode: I should be good now
01:58 +newcode: hey you're from Lithuania ?
01:58  thiago: no
01:58 +newcode: ok - thx man
01:58 +newcode: have a good one
02:37  mw44118: I just upgraded to my production app to a new batch of code, and now I want to tag the commit in the repo for future reference.  I did $ git tag v1.0; but other people don't see this tag.
02:37  nevyn: mw44118: you need to push the tag.
02:39  mw44118: nevyn: ok, that worked!
02:40  mw44118: but I don't know why...  I thought tags were just human-friendly aliases for commits, and they lived within branches.
02:40  thiago: no
02:40  thiago: tags are a global thing
02:40  thiago: but you still need to push them
02:41  thiago: an annotated tag (the -a parameter) is an individual thing that is discoverable
02:41  mw44118: without that -a, the tag will only be in my repo, right?
02:41  thiago: no
02:41  thiago: that's not the difference
02:42  mw44118: hmm
02:44  mw44118: what's the difference?  What does -a do?
02:47  offby1: b
02:47  offby1: b
02:47  offby1: gaah
02:47  offby1: mw44118: Try It And Seeâ„¢.  But failing that, I think without the -a, "git tag" just makes a ref; but with -a, it also makes an actual object.
02:48  offby1: And if _that_ isn't clear to you, then you need to read "Git For Computer Scientists" (http://eagain.net/articles/git-for-computer-scientists/).
02:48  banisterfiend: offby1: i like your nickname
02:49 * rudybot does too
02:49  thiago: mw44118: it creates an annotated tag
02:59  mw44118: So, everybody always is explicitly pushing tags after making them.
02:59  mw44118: Is that right?
03:00  offby1: ?
03:00  offby1: not always.
03:00  offby1: depends on the tag's point.  If it's something like "this commit is version 2.0", then sure; I'd probably push that.
03:01  offby1: But occasionally I'll make a tag that says "this is the last commit before Marianne f***ed everything up", or something; that's not meant to be public :)
03:03  mase_wk: you don't have to push all tags afaik
03:03  mase_wk: only the refs you specify
03:05  offby1: you can push any tags you want.
03:05  offby1: You can syndicate any boat you row.
03:05  mw44118: sorry, what i meant was that tags don't leave my repo unless i explicitly push them.
03:06  thiago: they do
03:07  thiago: if a tag is part of the past history of a branch being pushed, the tag is pushed too
03:08  offby1: thiago: but are you talking about a tag _object_, or a tag _ref_?  I wouldn't be surprised if the rules for those two differ.
03:09  thiago: they might
03:09  thiago: I know that this applies to annotated tags
03:10  thiago: and I know that when a tag object is pushed, the ref goes along
03:10  offby1: is an "annotated tag" an object, a ref, or both?
03:10  offby1: not sure I've ever seen that term definied.
03:10  offby1: defined.
03:11  thiago: an annotated tag is a tag that is backed by a tag object
03:11  offby1: so, "both", then.
03:12  thiago: an annotated tag that doesn't have a corresponding ref is broken
03:12  thiago: an fsck might re-create it
03:12  offby1: huh, didn't know that.
03:12  offby1: You can tell how often I use tags.
03:12  thiago: or gc might delete it
--- Log closed Mon Dec 20 03:25:01 2010
--- Log opened Mon Dec 20 03:30:28 2010
03:30 --- Users 643 nicks [0 ops, 0 halfops, 6 voices, 637 normal]
03:32 --- Channel #git was synced in 115 seconds
03:32 --- theoros_ is now known as THEOROS
03:39 --- THEOROS is now known as theoros
03:52 --- Paleo is now known as qwertyqwertyqwer
03:52 --- qwertyqwertyqwer is now known as Paleo
04:02  djustice: how do i clone a certain branch? git clone -b $branch $foo ?
04:02  thiago: you clone repositories, not branches
04:04  djustice: thiago: well yea..
04:04  djustice: should i git clone $foo; git checkout $branch; ?
04:04  cirwin: yes
04:04  djustice: cirwin: thx
04:13 --- yaotti_aw is now known as yaotti
04:55  kassah: if this isn't the right channel, please direct me. My work SVN repository (which I track with git svn) has a standard layout, except for one directory of root that really is a branch named v1-rewrite, is there any way to make git track this as an individual branch?
05:01  ProLoser: hello
05:01  ProLoser: i can't figure out why git submodule init doesn't work when i import a gitmodules file
05:05  ProLoser: anyone around?
05:07  cirwin: ProLoser: probably, you'll have to be more specific than "doesn't work" though
05:08  ProLoser: i added another submodules file to my project and ran git submodule init and it didn't work
05:08  ProLoser: it shows no output
05:08  ProLoser: is there a reason i can't import an external gitmodules file?
05:15  ProLoser: anyone?
05:15  ProLoser: any ideas/suggestions?
05:16  ProLoser: like if someone gives me a gitmodules file shouldn't i be able to drop it in and run git submodule init?
05:16  ProLoser: or is there more to it than that?
05:16  cirwin: ok â€” I've never used submodules, perhaps someone will be able to help you though
05:26 --- frakturfreak_ is now known as frakturfreak
05:56  jcromartie: I do not understand what git log is showing me when I use: git log A..B
05:56  DrNick: the commits reachable from B but not from A
05:57  jcromartie: hmm
05:57  jcromartie: so, let's put it this way: "git log A..C" shows 100 commits, and includes B
05:57  jcromartie: now maybe "git log B..C" shows 120 commits and does not include B
05:59  jcromartie: git help log says "Show only commits between the named two commits."
06:01  DrNick: that's an oversimplification
06:01  jcromartie: hm
06:07  rohanpm: jcromartie: A..B is actually shorthand for ^A B - which you can interpret as "(not A) and B"
06:07  jcromartie: weird
06:10  banisterfiend: jcromartie: not half as weird as aslan, that freaking talking lion that's supposed to be symbolic for jesus in the narnia stories
06:10  jcromartie: ooooooookay hten
06:10  jcromartie: then
06:31  obsd123: hey, where are the checksums for the git source?
06:31  obsd123: they're not in the release notes or downloads page on the main site . . .
06:55  mase_wk: could you not just clone directly  from the git repo ? :)
06:55  crab: is there a recommended os x gui client for git?
07:01  mase_wk: crab: do you use a particular IDE? lots of people like to use one with their IDE eclipse etc..
07:11 --- ChanServ sets modes [#git +v mstk]
07:12 +mstk: this is a really basic question, but i couldn't seem to find an answer anywhere.  i have an already-existing project in a directory.  is there a way to start git-ting this current project besides backing up the project, making a new git repo, and pasting everything into the new repo directory?
07:12  selckin: cd dir; git init; git add . ; git commit
07:13  frogonwheels: mstk: you might want to make youre .gitignore before doing git add .   .. but it's _that_ easy :)
--- Log closed Mon Dec 20 08:31:21 2010
--- Log opened Mon Dec 20 09:19:45 2010
09:19 --- Users 638 nicks [0 ops, 0 halfops, 7 voices, 631 normal]
09:21 --- Channel #git was synced in 119 seconds
09:28  ironcamel: if i delete a branch with git branch -d devel, do i need to git push that somehow?
09:28  ironcamel: the devel branch is still showing up in github
09:29  banisterfiend: use git push :devel
09:30  ironcamel: banisterfiend: ssh: Could not resolve hostname : Name or service not known
09:30  banisterfiend: git push origin :devel
09:30  ironcamel: banisterfiend: thanks.  what does the : mean?
09:30  banisterfiend: well if you were to go: git push origin friend:horse
09:31  banisterfiend: it would mean that the local 'friend' branch is named 'horse' on the remote repo
09:31  ironcamel: ah, thanks
09:31  banisterfiend: if you specify nothing for the local branch
09:31  banisterfiend: then it means to delete it
09:31  banisterfiend: to delte the remote one*
09:33  stewart_: hello just wondering say i have a subfolder with in a get repo can i clone that sub folder and create a new repo based on that subfolder
09:33  ironcamel: this is a very noob question, how do i get the changes i did on my master branch into my devel branch?
09:34  stewart_: ironcamel: git merge
09:34  ironcamel: stewart_: just git merge?
09:34  stewart_: well make sure you are on the branch you want to merge to
09:35  ironcamel: stewart_: how would it know what branch to merge from?
09:35  banisterfiend: ironcamel: git checkout devel; git merge master
09:35  stewart_: what he said
09:35  ironcamel: stewart_: what if i add one file to my master branch and committed it.  is there a way to just merge that file?
09:36  stewart_: yep that will happen with the above command from banisterfiend
09:36  banisterfiend: git doesnt work that way
09:36  ironcamel: banisterfiend: it's all or nothing?
09:36  stewart_: oh.. sorry i misunderstood
09:37  stewart_: yea again what banisterfiend said
10:07  kandinski: sanity check: I commit to the origin server, only to realise I left in some debugging statements. I know for sure nobody has pulled from there but myself from the deployment server. Is it okay to git commit --amend, then git push --force, then pull --force from the server again?
10:09  frogonwheels: kandinski: you might sstill want to tell your colleagues,  i'm not sure why you want to pull --force tho'.
10:10  kandinski: frogonwheels: well, just by superstitious simmetry with the push --force, really
10:10  frogonwheels: kandinski: -- for superstitious symmetry then :)
10:10  kandinski: thanks
10:12  kandinski: frogonwheels: my fix didn't work
10:12  kandinski: the pull --force was intended to clobber the previous commit
10:12  kandinski: instead of that I got a merge
10:12  kandinski: not what I intended
10:13  bremner: kandinski: you probably want fetch followed by reset --hard
10:13  bremner: but that will lose the current state of your branch
10:14  deploy: How do you diff two branches? git diff master..development isnt showing me anything when I'm sure there are differences.
10:14  kaseano: hi :) this tutorial says to run, git clone git://github.com/maccman/juggernaut.git --recursive
10:14  kaseano: git says recursive is an unknown option tho, this tutorial says it's really important
10:16  shruggar: deploy, try: git diff master development
10:17  deploy: shruggar: git diff origin/master..origin/development worked. Guess I just dont get git well enough!
10:18  shruggar: ah, so diff two non-local branches, then :)
10:19  deploy: well, I mean both branches are checkout out so I would have expected it to work locally ...
10:21  shruggar: deploy, I assume that "checked out" isn't the word you're looking for. In terms of references, "git diff A B" is going to look for refs/heads/A and refs/heads/B. Those would be "local branches", as opposed to "local references to remote branches" (remote-tracking branches)
10:22  deploy: shooom (the sound of what shruggar just said going over my head)
10:23  frogonwheels: kaseano: you  have an older git.   you can leave it out and then do   git submodule init  && git submodule update
10:23  kaseano: oh ok, thx frogonwheels
10:23 --- Unknown[OFF] is now known as Unknown[NF]
10:23  kaseano: I might as well just update right :)
10:24  frogonwheels: kaseano: and I would have expected it to be  git clone --recursive  git://&c
10:25  shruggar: deploy, in short: when you clone a repository, the position of all the remote branches is stored in one place, which is in a different namespace to where the local branches are kept. By default, operations such as "diff" operate on local branches.
10:28  deploy: shruggar: Okay, but what confuses me is that my local copies and the remotes should contain the same stuff (recently pushed to the origin) so I dont get why the diff only shows results when run against the remotes.
10:32  frogonwheels: deploy: those are the remote 'tracking branches'  (what you are calling the 'remotes) ... they are local, but strictly track upstream changes..
10:33  frogonwheels: deploy: your local branches that have those 'remote tracking branches' as their upstream branches are still where they were..
10:34  frogonwheels: deploy: when you next checkout   A, you will need to merge/rebase  it with  your  origin/A    -  if there are no changes to A, then origin/A will be reported as being 'ahead' of A and 'you can do a fast-forward merge'..
10:34  deploy: frogonwheels: I fear youre wasting your time trying to explain to me, but I appreciate the effort. A stab in the dark here, if I were to pull both branches would that mean the diff would should results when run locally.
10:35  frogonwheels: deploy: well it's kind of important that you understand it.
10:35  frogonwheels: deploy:  git checkout  A    && git pull A      then   git checkout B  && git pull B      would do it I guess..
10:36  frogonwheels: deploy: a fast forward merge is just moving the   refs/heads/A   up to point to   origin/A
10:36  deploy: I suppose I should read a book ...
10:37 --- ChanServ sets modes [#git +v matt1982]
10:46  frogonwheels: deploy: git is simple.  it's just a little unexpected in places :)
10:46  wereHamster: it's consistent though
10:47  _rane: origin/master vs. origin master
10:47  frogonwheels: yes. an important point wereHamster
10:47  _rane: bothers me a bit
10:47  frogonwheels: _rane:  why?
10:48  wereHamster: _rane: origin/master is a single string, and means the master branch in the origin remote. origin master are two strings (=two arguments)
10:48  _rane: yes, still inconsistency
10:48  _rane: to me
10:48  wereHamster: it's like 'rm foo/bar' and 'rm foo bar'
10:48  wereHamster: are those two inconsistent, too?
10:49  _rane: no, because rm is a simple tool
10:49  frogonwheels: _rane: and so is git in the same way
10:49  wereHamster: git is too
10:49  _rane: to you, maybe
10:49  frogonwheels: _rane: no, really, it's an important thing to realise, that all the git operations and syntaxes are simple
10:49  _rane: sigh
10:50  frogonwheels: _rane: which is not to say it doesn't take some time to learn.
10:50  wereHamster: actually, my example is not good, because you don't use origin/master and origin master in the same command. So it should be more like 'rm foo/bar' vs 'touch foo bar'
10:51  gangil: Hi I am using git send-email and getting the following error
10:51  gangil: Unable to initialize SMTP properly. Check config and use --smtp-debug. VALUES: server=localhost encryption= maildomain=ubuntu at /usr/lib/git-core/git-send-email line 1040.
10:51  _rane: I'm not a git newbie by any means, I just haven't been able to figure out a mnemonic for those cases
10:52  gangil: In my /gitconfig file I just have my name and email address
10:52  gangil: is there anything else that needs to be there?
10:52  wereHamster: _rane: origin master is used in fetch/pull. And there you need two different arguments because you need to specify *where* to fetch from and *what* to fetch. origin/master simply wouldn't work there
10:53  gangil: anyone? :-/
10:54  frogonwheels: gangil: just a guess, but you probably need to configure the mail transport.
10:54  _rane: wereHamster: sure, it makes sense if you remember it takes two arguments instead of magically parsing both from a single string
10:55  wereHamster: _rane: remember that there is very little magic in git. It tries not to outsmart you
10:56  wereHamster: and that 'magicaly' parsing wouldn't work anyway..
10:58  gangil: frogonwheels: um.. I am new to this, can you please elaborate
10:58  gangil: or show me an example .gitconfig file
10:59  frogonwheels: gangil: sorry, i've not configured git for mail.  from what you pasted that's where I'd be going next though..
10:59  kaseano: the git update worked for --recursive, thx frogonwheels
10:59  frogonwheels: gangil: have you had a look at man git-config ?
10:59  jast: gangil: the 'git-config' manpage can be found at http://git.or.cz/man/git-config [automatic message]
11:17  jds: I'm trying to merge a file that has both functionality changes, and indentation changes, where large blocks of code have been re-indented
11:17  jds: Are there any decent merge tools that might help with this sort of change?
11:17  jds: I'm currently using FileMerge, and it completely fails to find common lines due to the indentation changes
11:21  workmad3: jds: DiffMerge may handle it
11:22  gangil: frogonwheels: thanks! got it right finally :)
11:26 --- yaotti is now known as yaotti_aw
11:28  aberceanu: hi guys
11:30  aberceanu: im using github, and have one repository with one branch. i made some changes to the files on another computer and now i cant manage to update my local files
11:34  wereHamster: aberceanu: commit, push, pull
11:35  aberceanu: wereHamster: well thats what im trying to do
11:35  aberceanu: wereHamster: so if i look on the website of github, i can see that its up to date
11:35  wereHamster: and what is it that I (or anyone else in this channel) can do about it?
11:35  aberceanu: wereHamster: so i just need to do a fetch i think
11:36  aberceanu: wereHamster: but that doesnt do anything
11:36  wereHamster: define 'anything'
11:36  wereHamster: you run 'git fetch' and then what?
11:37  aberceanu: wereHamster: i run git fetch origin and it takes a few secs, then finishes without any message
11:37  wereHamster: so you're already up to date.
11:37  aberceanu: wereHamster: then when i look at the files, they are still the old version
11:38  wereHamster: aberceanu: what about 'git merge origin/master' ?
11:38  aberceanu: wereHamster: yey, that did it!
11:39  aberceanu: wereHamster: :) so i have to fetch AND merge before i see any changes
11:39  aberceanu: wereHamster: cool, thanks a lot
11:41  Arafangion: Is it just me, or does this website assume a fairly traditional VCS way of thinking? http://nvie.com/posts/a-successful-git-branching-model/
11:41  wereHamster: why traditional?
11:42  Arafangion: It seems to be working with the assumption that for a given commit, you can find its branch.
11:42  wereHamster: where does it assume that?
11:43  Arafangion: Well, it seems to imply it at the very least throughout... But one place in particular when the implication is very strong is when it begins talking about "git merge --no-ff".
11:43  Arafangion: Just above "Release branches".
11:43  wereHamster: what does that have to do with that assumption?
11:44  Arafangion: It's trying to keep the commits under the original branches, so that you can see where it came from. Perhaps I'm reading too much into the images.
11:44  wereHamster: no, it's not
11:44  Arafangion: So, how does --no-ff help you see that the commits in question came from a particular feature?
11:44  wereHamster: it's not about the branch name. It's about being able to quickly see which features have been introduced, and their history
11:45  wereHamster: using --no-ff is particularly useful with log --first-parent
11:46  Arafangion: Ahh, I suppose it does let you easily look at what's been developed concurrently, and therefore, the distinct features.
11:47  pharvey: Does anybody know off-hand if git-svn improved from 1.7.0.4 -> 1.7.3.4? Specifically tracking multiple branches that aren't exactly standard layout
11:47 * pharvey digs release notes
11:49  Arafangion: wereHamster: Actually, let me get back to that...  See, in their diagrams, they show each branch as vertical lines.  I wasn't aware that you could have that, strictly speaking?
11:50  wereHamster: Arafangion: you weren't aware that  you can have branches?
11:50  JoeCoolDesk: How do you know if a file hsa been Added or not, it doesn't seem to show in git diff?
11:51  Arafangion: wereHamster: I was under the impression that a branch is merely a named reference to a particular commit in the DAG?
11:51  wereHamster: Arafangion: correct
11:51  pharvey: JoeCoolDesk, git status
11:51  wereHamster: Arafangion: that graph is just a visualization
11:51  wereHamster: Arafangion: the arrows between the points are the DAG
11:51  Arafangion: wereHamster: In other words, if you have two branches, Alpha and Beta, and they each point to two commits, 'a' and 'b', both of whom share a parent, which happens to be 'ab'...  which branch does 'ab' belong to?
11:52  wereHamster: depends
11:52 --- unreal_ is now known as unreal
11:52  Arafangion: wereHamster: Under my line of thinking, it belongs to neither, it's just a parent.
11:54  charon: Arafangion: usual terminology is that it belongs to both ("is contained in both branches")
11:56  Arafangion: charon: Thanks, I'll remember that - I would think of it as belonging to neither, because it isn't identified with either - saying that it "belongs" to both implies that you can, for a given commit, easily say which branches it belongs to, when that's not the case. (You have to exhaustively search back from known branches until you've found the commit)
11:57  Arafangion: charon: That's actually why I'm struggling with the website I referred to.
11:57  kaprasanna: Hi git experts. In a bit of a problem here. Stashed in a branch. Checked out master. Got the files wanted. Instead of checking out the previous branch, popped in master. Now unable to go back to previous branch. Get needs merge message for various files. Plz guide.
12:00  charon: Arafangion: well of course it does not belong in the sense of *ownership* (no commit ever does). the only thing you can talk about is whether a commit is contained in a branch or not. :)
12:00  charon: (and even to find out whether it is contained, you have to search all branches like you say)
12:00  curtana: kaprasanna, does 'git stash list' still show that stash? since it didn't apply cleanly, it should do
12:01  kaprasanna: curtana: Yes it does.
12:01  wereHamster: Arafangion: lunch. I'll be back in 1 hour
12:02  Arafangion: charon: Right, but even so, it doesn't do much to suggest that http://nvie.com/posts/a-successful-git-branching-model/ is the right way to do it?  Actually, I suppose it does, but it seems to be misleading when it shows the commits under the given branch line?
12:02  curtana: kaprasanna, then you can do 'git reset --hard master' and all changes to your working tree and staging area will be undone
12:02  Arafangion: wereHamster: I'll probably be off to bed...
12:02  charon: wereHamster: sorry for hijacking your thread ;) enjoy
12:02  Arafangion: wereHamster: Enjoy your lunch. :)
12:03  kaprasanna: curtana: After doing 'git reset --hard' in master, when I go back to other branch (checkout) will i be able to pop and get back where I was? Have some
12:04  curtana: that should work
12:04  kaprasanna: curtana: crucial changes yet to push. So..
12:04 --- yaotti_aw is now known as yaotti
12:04  kaprasanna: curtana: ok. thanks
12:04  charon: Arafangion: i think of that graph as more of a conceptual ownership. e.g., even if you merged a topic to master, you'd still speak of commits "in that topic" or so, because conceptually they still form a side arm consisting of a topic. even though after-the-fact you can no longer tell (unambiguously and only from history)
12:04  curtana: kaprasanna, the key thing is to stop git being in 'i am trying to merge stuff but waiting for user intervention' mode -- reset will do that
12:05  Arafangion: charon: Perhaps a useful way to think of it...  But you can really only use that conceptual model with a forwards-looking mindset. You can't use that same model to figure out what the heck happened in the past.
12:06  kaprasanna: curtana: I understand.
12:06 --- airborn_ is now known as airborn
12:06  kaprasanna: curtana: Brilliant. Solved in a flash.
12:06  Arafangion: kaprasanna: I usually commit a temporary commit to a different branch to cover my backside when doing reset, especially if I'm not entirely sure what I'm doing. :)
12:06  leo2007: Hello, I am in a shell that can display color but not a full terminal emulator. How to tell git that it can't display colors in it without forcing it to do it?
12:06  charon: Arafangion: maybe, but honestly i never had to worry about the shape of history in the past (maybe because i never had the bad luck of bisecting a bug to a merge and then having to figure out what's wrong in the resolution). past history as far as git.git is only important to me in the simplified form provided by various tools (log -- path, blame, log -L)
12:06  kaprasanna: curtana: You have a twitter handle? I'll credit you.
12:07  Arafangion: kaprasanna: (Actually, it'd need not be a separate branch, since the reflog will still catch it)
12:07  curtana: kaprasanna, are you using linux? if you set up the bash prompt thingy then you can have the current branch, and whether it's tidy/rebasing/mergeing etc in your prompt
12:07  kaprasanna: curtana: Yes I am on linux. Was exploring that. But was sh scared. So approached you all
12:08  curtana: :)
12:08  Arafangion: charon: You're lucky that you're in a sufficiently stable team to do that. :/
12:08  kaprasanna: curtana Arafangion : Thanks again.
12:08  curtana: source /etc/bash_completion.d/git from in your .bashrc, then put %(__git_ps1 '(%s)') in your PS1 variable to get it
12:10  kaprasanna: curtana : Got it.
12:11  charon: Arafangion: i think if you want to stand any chance of connecting the dots of past history, you'll have to train your team to use --no-ff with topic merges at the very least. then the merge messages will more or less explain what was merged where.
12:12  Arafangion: charon: Well, my team prefixes every single commit with the issue number, so it's easy enough anyway. (I work with two teams, one is excellent with git, one is terrible).
12:13  Arafangion: charon: But how does --no-ff actually help with connecting the dots?  wereHamster seemed to suggest that merges have a "first parent", but isn't the first parent arbituary?
12:13 +matt1982: I have some software that I want to deploy using GIT however each system needs its own config and theme. Which I was going to setup using hooks. However I am not sure how I would in future be able to patch these deployments. Would it be a case of just ignoring files?
12:13  charon: Arafangion: first parent in the no-ff case is what was HEAD when you said 'git merge ...'
12:14  charon: matt1982: you could read this writeup of what i do for a bunch of setups: http://thomasrast.ch/git/local-config.html
12:14  Arafangion: charon: Ahh, right, and that would normally be master?
12:14  Arafangion: charon: (Actually, I would typically do my merge from the feature branch...)
12:15 +matt1982: charon, ahh excellent, I have been googling and it's got me so far but I think i was struggling with incorrect terms etc
12:15  Arafangion: charon: I expect all my merges when I'm in master to be fast-forwards.
12:15  charon: Arafangion: yes, in a workflow like that in gitworkflows(7) or the nvie graph, you would typically merge a topic into an integration branch (master, next, whatnot) so integration is first parent and topic is second
12:16 +matt1982: charon, looks good thanks!
12:17  Arafangion: charon: Hmm, fair enough - I guess most people avoid doing two merges...  I just try to keep the merge while in master "trivial", preferring to have a horrible merge done while I'm in the feature branch - because that's where I was doing the work!
12:18  charon: Arafangion: tbh i have so far never heard a compelling reason to avoid merges. the prevalent reason seems to be "they are ugly".
12:18  Arafangion: charon: That's what I'm often told, actually.  Most people say that rebased histories are "clean and easy to understand".
12:18  charon: Arafangion: and well, if the merge into master is non-trivial, then it is indeed a viable option to tell the feature author to do the merge himself and thus resolve the conflict
12:19  Arafangion: charon: Ahh, that's what happens with my "good" team - with my other team, I end up doing my own merges myself.
12:19  charon: they're also painful to maintain and don't scale to large numbers of people
12:19  strixv: So, I've changed my working directory and just now discovered that I need to merge my work into a new branch instead of master. Anybody know a simple way to do that?
12:20  charon: Arafangion: (or in fact large numbers of topics, which happens every so often even to projects limited to myself. maybe i just frequently can't make up my mind...)
12:20  Arafangion: charon: That's true...  We used Perforce before. :)
12:21  Arafangion: charon: I personally like to have one branch per feature - deleting the branch once it's merged into master.
12:21  Arafangion: win 5
12:21 +matt1982: charon, excellent read, I think i understand it more. So basically I need to create a new branch for config changes?
12:23  Arafangion: charon: Thanks for your help. :)
12:24  Arafangion: charon: I think the big thing people are trying to do with Git, is to have it show a "timeline", in the perforce view of the world.
12:24  Arafangion: (which SVN also shares)
12:24  sgronblo: sitaram: Why can't I specify R for @all to @all repos?
12:37 --- ChanServ sets modes [#git +v VooDooNOFX]
12:38 +VooDooNOFX: can I set a git config hooks.mailinglist from a cloned repo and expext a push to update the server, or do these need to be configured somewhere special?
12:42  silv3r_m00n: hi there
12:43  silv3r_m00n: git pull says already uptodate , but git push gets rejected master -> master (non-fast forward)
12:43  silv3r_m00n: how to fix ?
12:45  thiago: are you in the master branch?
12:48  silv3r_m00n: yes
12:48  silv3r_m00n: thiago :hi
12:49  silv3r_m00n: by mistake I had created a branch some days back and I unknowingly kept working in that , thinking that it was master
12:50  goldroger: hi, is it possible to apply a patch of a git clone on one machine, to the same git clone (of the same remote repository ) on another machine ?
12:50  cbreak: silv3r_m00n: get git-bash extensions
12:51  cbreak: that'll help knowing on which branch you are
13:04  patrikf: goldroger: maybe you're looking for git format-patch
13:08  goldroger: patrikf: thanks
13:19  sou_: What to do with the git version control how to make. KURA the beginning of the hidden files / folders are included within the control?
13:21  cbreak: sou_: in english please?
13:21  charon: matt1982: yes, that's the idea.
13:21  sitaram: sgronblo: it should work; doesn't it?  what error do you get?
13:23  pharvey: I'm having trouble (ab)using git-svn ...
13:24  sgronblo: sitaram: well the docs said "don't try giving @all users some permission for @all repos" and also it didnt work when i tried repo @all R = @all
13:24  pharvey: I thought I had successfully converted our ~500 extensions spanning 10k commits on svn, into their own little git-svn repo - each with trunk, release01x01, release01x00, scratch branches all self-contained
13:25  pharvey: so, 500 separate FooPlugin.git (bare) repos
13:25  pharvey: now, when I clone any one of them, I seem to only get the master (trunk) branch
13:25  cbreak: phantomcircuit: git branch -a
13:26  pharvey: git reflog on the original bare .git repo on the server shows three different heads (for example) for an extension that has trunk, Release01x00 and Release01x01 branches
13:26  cbreak: what do you see?
13:26  pharvey: but git reflog on the clone'd repo only shows one head
13:26  cbreak: git reflog does not show ANY HEADS AT ALL
13:26  cbreak: it shows the reflog
13:27  sgronblo: But I already created a repo group named public_group and gave it R = @all and then it worked.
13:29  pharvey: cbreak, any idea why the clone isn't giving me all the branches that existed on the original repo?
13:29  cbreak: what do you see?
13:29  pharvey: * master
13:29  pharvey:   remotes/origin/HEAD -> origin/master
13:29  pharvey:   remotes/origin/master
13:29  cbreak: pastebin git branch -a
13:29  pharvey:   remotes/trunk
13:30  pharvey: I'll pastebin the output from the original repo
13:30  cbreak: so it seems you have the only branch that exist on the original repo: master
13:30  pharvey: http://pastebin.com/e66Pb1CE
13:31  charon: pharvey: note that reflog shows the *local evolution* of a branch head over time, which is different from its history. (in particular i can make a branch head jump between disconnected chunks of history with 'reset', and reflog will show this)
13:31  pharvey: cbreak, so why does the original repo show me more branches?
13:31  cbreak: pharvey: on that one, you seem to only have one single branch: master
13:31  cbreak: the rest are remotes
13:31  charon: that's normal for a git-svn import
13:31  cbreak: but it's weird
13:31  pharvey: yeah, I did weird things
13:32  cbreak: just make local branches out of those remote things
13:32  cbreak: what ever they are
13:32  charon: pharvey: you can make them "local" (i.e. non-remote/) branches by the following magic incantation: git fetch . refs/remotes/*:refs/heads/*
13:32  cbreak: normally those should be folders, but in your case it's probably a text file
13:32  charon: (or you can do it by hand, obviously)
13:32  sitaram: sgronblo: doc bug (more like doc obsolescence in this case)
13:32  sitaram: sgronblo: as for why it didnt work for you, I'd like details
13:34  pharvey: cbreak, charon thanks for the tip... shall ponder whether I ask for an rsync dump of the svn repo instead of waiting another 20 hours for my script  to hammer the svn server :}
13:34 --- adamholt is now known as adamholt_away
13:34 --- adamholt_away is now known as adamholt
13:34  cbreak: you're not working on a local svn?!
13:35  pharvey: it seemed like a good idea at the time? (I'm just a random contributor)
13:35  pharvey: (and no, I won't be running it again)
13:42  pharvey: charon: your magic incantation is perfect, everything is great now thanks :)
13:43  charon: pharvey: it's just git's way of spelling "copy all remotes/* branches to the (local) heads/* namespace" :)
13:44  workmad3: charon: does that make the local branches automatically tracking branches of the remote?
13:44  pharvey: cool :)
13:44  charon: workmad3: no
13:44  workmad3: charon: ah, shame
13:44  strk: I've lost the tree I imported using 'git svn clone', but I still have the git part on github... is there a way to re-attach to the svn repo ?
13:44 --- khmarbaise_ is now known as khmarbaise
13:45  workmad3: still pretty nice though :)
13:45  pharvey: so I'll ... need to delete those branches, git svn fetch --all, then repeat the refs copy?
13:45  charon: pharvey: skip the deletion, they'll fast-forward
13:46  pharvey: k
13:46  charon: strk: you have to restore all the refs/remotes/* put in place by svn. then run 'git svn init <original args to git svn clone>; git svn fetch'
13:46 * pharvey hopes our migration from svn doesn't last too many years
13:46 --- adamholt is now known as adamholt_away
13:46  charon: pharvey: if they don't fast-forward, it's a bug in git-svn (and you could force the fetch by putting a + in front of the fetchspec)
13:46 --- adamholt_away is now known as adamholt
13:47  pharvey: k
13:47  strk: charon: I don't understand the "restore fers/remote/*" part :/
13:48  sgronblo: sitaram: maybe I'm using an older version of gitolite?
13:48  strk: charon: is it fine if I start from a clone from github ?
13:48  sitaram: sgronblo: maybe; a lot has changed in that aspect in the last few months
13:51  charon: strk: git-svn puts heads for the svn-mirrored branches in refs/remotes/svn/*, revs/remotes/*, or similar depending on the arguments used for git svn clone
13:51  charon: strk: you need to reinstate those heads so they match the arguments again
13:51  strk: I probably did run it with no args
13:51  strk: (the initial clone)
13:52  strk: if at all, don't really remember what I did
13:52  strk: https://github.com/strk/geos <--- can I tell from history there ?
13:52  charon: then your svn branch should have ended up in refs/remotes/git-svn, so you could 'git update-ref refs/remotes/git-svn master' to put master's current value there
13:52  pharvey: you want at least -s if your project has a standard layout... learnt that the hard way :)
13:54  strk: I still need a git svn init after a brandh new clone from github, right ?
13:54  charon: yes
13:54  strk: and svn fetch is safe before the update-ref ?
13:55  charon: no, that would re-clone
13:55  charon: see, git-svn has three items of state
13:55  charon: 1) its config 2) its remote branches 3) its cache
13:55  strk: ah, ok
13:55  charon: (3) is auto-generated at fetch time if the history allows it to (i.e., if you didn't use --no-metadata)
13:55  charon: so you have to reinstate (1) and (2) before running fetch
13:55  strk: so, from scratch then
13:56  charon: and usually the easiest way to get (1) is via 'git svn init'
13:56  strk: (0) git clone
13:56  strk: (1) git svn init  http://svn.osgeo.org/geos/trunk
13:56  strk: now... the update-ref I guess
13:57  strk: git update-ref refs/remotes/git-svn  master
13:57  charon: yes
13:57  strk: didnt' change anything in .git/config ?
13:57  charon: but either github is hiding it, or it's deep down, or you don't have any git-svn-id: lines
13:57  charon: (meaning you used --no-metadata in the initial clone)
13:57  charon: in which case there's no way for git-svn to recreate the cache
13:57  strk: yeah, I used --no-metadata
13:58  strk: but I do see svn-id in commit logs
13:58  strk: example: https://github.com/strk/geos/commit/5fb90f5d2a28747cf69a11b38faa3145b98cd235
13:58  strk: ther'es a git-svn-id in there
13:59  charon: good
14:00  strk: so, update-ref should have done what ?
14:00  strk: .git/refs/remotes/git-svn and .git/refs/heads/master are equal now
14:00  strk: dunno if they were before too
14:01  strk: maybe cause didn't get the cache down
14:01  charon: strk: update-ref is a sort of internal 'git branch' that lets you create remote refs, too
14:02  strk: gah... I'll get back on it after lucnh, hope you'll be here still. Thanks so far.
14:02 --- strk is now known as strk_away
14:18 --- ymasory_ is now known as ymasory
14:18  Znow: Hi!.... ive made a new project... I have created a repo on github,, and now im trying to commit my project and so on by git, but nothing seems to appear at my repo on github.com?
14:19  charon: Znow: man git-push. commit is strictly local in git, you have to explicitly tell it to copy something to github
14:19  jast: Znow: the 'git-push' manpage can be found at http://git.or.cz/man/git-push [automatic message]
14:20  Znow: ah okay, cheers charon... but hwen I try to git push --all it doesnt have destination to push to it says
14:20  Znow: that is weird
14:21  charon: Znow: look for 'git remote add' in man git-remote. also read a tutorial.
14:21  jast: Znow: the 'git-remote' manpage can be found at http://git.or.cz/man/git-remote [automatic message]
14:21  Znow: read a tutorial, 2 to be exact... but find git abit confusing sometimes
14:21  Znow: specific when its cmd line based as ive never been used too
14:22  Znow: to*
14:24  Znow: hmm now it seems I cant find a .gitconfig file anywhere....
14:25  Znow: all though ive done --global user.anem etc
14:25  Znow: name*
14:25  charon: it'll be in your home directory, try: less ~/.gitconfig
14:26  Znow: nope nothing so far....
14:26  Znow: got a .git folder in my project folder
14:26  Znow: and in my user folder aswell
14:26  charon: sounds like you typed 'git init' in $HOME
14:26  Znow: havent
14:26  Znow: cd'ed to my app folder
14:27  Znow: and did git init
14:27  charon: so i'm supposed to believe that the .git in your "user folder" (= $HOME?) just magically came into existence?
14:28  Znow: well, an old git init it must be then
14:28  Znow: anyhow, ive just removed it, no harm done or?
14:30  charon: how should i know :) but since you didn't remember putting anything in that repo, presumably nothing was in the .git anyway
14:30  Znow: oh okay... well just trying to start on fresh...
14:31  Znow: anyhow, how do I set my repo in the config file?
14:31  Znow: so I can do git push
14:31  charon: i already pointed you at 'git remote add'
14:31  Znow: oh yeah my mistake :p
14:31  Znow: sorry
14:34  FransWillem: Is there a command to forget all local commits, and completely revert to the upstream repository ?
14:35  charon: FransWillem: basically 'git checkout master && git reset --hard @{upstream}', though that won't delete any other branches you created locally (nor handle special options to git-clone etc)
14:35  Arafangion: FransWillem: "sudo rm -rf && insert-operating-system-cd && reboot". (Command deliberately mistyped)
14:36  Arafangion: FransWillem: Followed, of course, by a git clone.
14:36 * Arafangion might be too literal with the term "completely".
14:37  FransWillem: Hmmm
14:37  FransWillem: charon: "Your branch and 'origin/master' have diverged," :/ not quite sure how to handle that.
14:38  FransWillem: Basically I did a quick local fix and committed it locally, but then someone else patched the same thing upstream, so I'd like to simply ignore my commit and revert back to upstream :/
14:38  charon: FransWillem: well did you do the reset?
14:38  cbreak: FransWillem: either resolve it properly, or do a git reset --hard
14:39  FransWillem: yep, did a git reset --hard, and the commands you told me to earlier :/
14:39  Arafangion: FransWillem: And keep in mind that you probably should learn how to resolve it properly so that you can deal with it when it's more complex.
14:39  charon: FransWillem: good. the message about diverging was from the first 'git checkout'. if you re-run 'git checkout master', it should have disappeared.
14:39  FransWillem: arafangion: I know how to resolve it properly, but I really have no use for my own commit anymore, and I'd rather have everything identical to upstream so git pull stuff will actually work :/
14:40  FransWillem: charon: Nope, won't work: http://pastebin.com/gUW15dQ8
14:40  cbreak: FransWillem: don't randomly type shit without having a clue what it does
14:41 * charon ponders
14:41  charon: cbreak: that random shit was my advice, btw
14:41  cbreak: git reset --hard?
14:41  cbreak: that won't change head at all
14:41  charon: not the first one, true
14:42  cbreak: did you do a git remote update first?
14:42  cbreak: have you checked what upstream is for  your master?
14:42  charon: ...
14:42  FransWillem: Hmmm, how about rebasing master on the previous commit, and then doing a git pull ?
14:42  cbreak: no
14:42  charon: FransWillem: how old is your git? i suspect your git treats @{upstream} the same as @{0} for some reason. can you try 'git reset --hard origin/master' instead?
14:43  charon: cbreak: no questions you asked him change the fact that 'git reset --hard @{upstream}; git checkout' should *never* indicated they have diverged, since the reset made them agree. so something in that reset went wrong.
14:43  FransWillem: hmmm, seems to have worked :/
14:43  charon: FransWillem: git --version?
14:43  cbreak: charon: the pastebin seems to indicate that all resets reset to the same thing, HEAD
14:44  charon: cbreak: hence my theory about that git interpreting @{upstream} the same as @{0}.
14:44  cbreak: I don't trust that notation yet
14:44  cbreak: not used it myself
14:45  FransWillem: git version 1.6.3.3
14:48  charon: seems this was changed in 93cfa7c7, which was only in 1.6.6.2
14:48  charon: anyway, upgrading to 1.7.x is worth it in other ways than @{upstream}, too
14:53 --- adamholt is now known as adamholt_away
14:53 --- adamholt_away is now known as adamholt
14:55  JeffJohnson: howdy
14:57  JeffJohnson: we have an eclipse project in an git repository including project config, problem is most users need different paths in the eclipse project setting file. How could we still manage the eclipse project settings in the git repository but have different configs for different users?:D
14:59  charon: if the configs are user-specific, what's the benefit to tracking them?
15:00  JeffJohnson: simply checkout, import them in eclipse without configuring the project 30min
15:00  cbreak: JeffJohnson: just cp the config file, and only use the copy
15:00  charon: if anything i think they'd have to be a separate repo (or branch at least)
15:00  cbreak: git will happily track the template, but since no one changes it, no problem
15:00  bremner: JeffJohnson: track a template, and give a script to customize it?
15:00  charon: or that
15:00  bremner: if it can't be easily customized with a script, file an eclipse bug :)
15:00  cbreak: or switch to a better IDE like apple's XCode
15:00  JeffJohnson: :)
15:01  cbreak: it separates user specific settings from the project global stuff
15:01  JeffJohnson: building a script for this cost too much time, is only an university "homework" :=)
15:02  jaeckel: use workspace environment variables?
15:03  jaeckel: so everybody defines his variables in the way he needs 'em
15:03  jaeckel: and in the project all stuff is referenced on these variables
15:03  jaeckel: that's how we do it
15:04  JeffJohnson: that sounds great:) thx
15:04  jaeckel: Window -> Preferences -> General -> Workspace -> Linked Resources
15:04  jaeckel: :)
15:04  JeffJohnson: thx:)
15:05  jaeckel: np
15:06 --- strk_away is now known as strk
15:07  strk: charon: so, I've dont git clone && git svn init && update-ref && svn fetch
15:07  strk: charon: seems all fine, except git log shows a mix of commits with git-svn-id and others w/out
15:07  strk: the ones w/out are merges
15:08  strk: this means the git repo is always ahead of svn
15:08  strk: svn dcommit --dry-run shows the merge will be attempted to be committed to svn, possible ?
15:08  charon: yes and no
15:09  charon: strk: dcommitting a merge M means: dcommitting a squashed commit w.r.t. M^ to svn, then rewriting M in git to some M' that has the correct git-svn-id: tacked on
15:09  charon: M' keeps the parent list of M, however. so it remains a merge in git, but is squashed in svn.
15:11  strk: I feel like piperita patty
15:13  strk: bah... I wiped out the github branch... too hard for me to understand git-svn interactions
15:24  Jesdisciple: I had a similar problem before but ended up cutting a corner, and would like to try understanding the proper solution again...
15:24  Jesdisciple: one second, let me get the exact message
15:24  Jesdisciple:  ! [rejected]        master -> master (non-fast forward)
15:25  FauxFaux: FAQ.
15:25  strk: Jesdisciple: means the remote master has changes your local one doesn't know about
15:25  strk: Jesdisciple: usually a pull fixes it
15:26  strk: or (I start thinking, after many months of using git) rebase
15:26  Jesdisciple: and a pull won't overwrite my changes?
15:26  strk: Jesdisciple: if it would, that'd be a "conflict"
15:26  FauxFaux: strk: If only pull had some kind of pull --rebase flag. :)
15:26  strk: Jesdisciple: in taht case you'd get a chance to resolve the conflict
15:26  Jesdisciple: gah, the system seems totally opaque - I suppose that's the nature of the beast for such a project though
15:27  strk: FauxFaux: thanks for the tip :)
15:27  FauxFaux: What messages do other vcses print for that case?
15:28  carpet_the_walls: hi, can anyone suggest a way of getting git > 1.7.0 on PPC Mac running Leopard please?
15:30  FauxFaux: http://pastie.org/1392061
15:30  FauxFaux: carpet_the_walls: Build it.
15:31  carpet_the_walls: i Hvae been looking for instructions, can't find any
15:33  wereHamster: carpet_the_walls: get the source, compile, use it
15:34  carpet_the_walls: wereHamster: easier said than done, looking for a guide now
15:35  wereHamster: carpet_the_walls: curl http://kernel.org/pub/software/scm/git/git-1.7.3.4.tar.bz2 | tar -xf - && cd git-1.7.3.4 make && ./git --version
15:36  Jesdisciple: wereHamster: I get the impression that a standard compile gives him errors
15:37  wereHamster: well, how can I know what those errors are ??
15:38  carpet_the_walls: Jesdisciple: nope, i just didn't know how, however...
15:38  carpet_the_walls: wereHamster: i tried your suggestion, but getting "Archive is compressed. Use -j option
15:38  carpet_the_walls: tar: Error is not recoverable: exiting now", so...
15:39  carpet_the_walls: i tried adding a -j
15:39  wereHamster: and then .. ?
15:40  carpet_the_walls: tar: -j: Cannot open: No such file or directory
15:40  carpet_the_walls: tar: Error is not recoverable: exiting now
15:40  wereHamster: curl http://kernel.org/pub/software/scm/git/git-1.7.3.4.tar.bz2 | tar -xjf - && cd git-1.7.3.4 make && ./git --version
15:42  wereHamster: carpet_the_walls: why don't you use homebrew / macports?
15:43  carpet_the_walls: wereHamster: i was looking at that, which do you suggest?
15:43  carpet_the_walls: isn't macports old hat now?
15:43 * wereHamster uses homebrew
15:44  cbreak: I use repositories or other sources
15:44  cbreak: nothing of that packaged stuff that usually only works with itself and gets updated once a year
15:44  carpet_the_walls: hmmmmm
15:46  wereHamster: cbreak: homebrew is very quick in updating the packages. Usually within one or two days of the release.
15:47  cbreak: I don't really care about releases
15:47  wereHamster: (or even the same day, in the case of git itself)
15:47  cbreak: with git I just pull and build when I feel like it
15:47  cbreak: same with mplayer
15:48  cbreak: if I'd wait for a release, I'd get something that's half a year out of date there :/
15:49  carpet_the_walls: wereHamster: cbreak: do these instructions look good? https://gist.github.com/423308
15:50  cbreak: do you use an ancient version of git in your example for a reason?
15:50  wereHamster: carpet_the_walls: you don't need to run autoreconf
15:50  wereHamster: just make
15:50  cbreak: I usually use make prefix=/usr/local
15:50  wereHamster: carpet_the_walls: and install the man pages with make quick-install-doc/man
15:50  cbreak: then sudo make prefix=/usr/local install
15:50  sgronblo: Is there a way to run a command for each commit in a branch? Should you use filter-branch for it even if you don't intend to change the repo with the command?
15:51  wereHamster: you don't need asciidoc for that
15:51 --- strixv is now known as hunterloftis
15:51  wereHamster: carpet_the_walls: I still find macport/homebrew much easier to use, especially if the users are not that familiar with compiling software themselves
15:52  cbreak: I think users should know the tools they use
15:52 --- yaotti is now known as yaotti_aw
15:52  carpet_the_walls: wereHamster: ok, will try that first, thanks for help guys
15:52  carpet_the_walls: cbreak: ^
15:53  wereHamster: cbreak: sure. But using git != installing git (or compiling C apps on a unix). There are plenty of users who don't know anything about that but still want to use git
15:54  pgib: question, I have branches master and experimental. experimental was forked from master and has a bunch of commits.  master has some commits cherry-picked from experimental.  I now want to 'merge' in almost all commits from experimental into master.
15:54  cbreak: pgib: you can't merge commits
15:54  cbreak: only histories
15:54  pgib: So, I use 'git rebase --interactive experimental' The list it gives seems right, but what should I do about the commits that have since been cherrypicked?
15:55  pgib: i know I can't FF
15:55  cbreak: you want to rebase master?
15:55  divVerent: sgronblo: git rev-list <branch> | xargs -n 1 mycommand
15:55  divVerent: that runs "mycommand" for each revision hash
15:55  pgib: well some history, the experimental build was broken, and now I want to pull in all commits from experimental into master except for a few that I think are bad
15:56  pgib: I know about bisect, but I need to be more selective here
15:56  pgib: and since then, master has a few commits of its own
15:56  serard: hello
15:58  cbreak: well, just make a filtered version of exp then, and merge that
15:58  serard: I have two users on different computers; on machine A i have a git repository, on machine B i have git clone this repository using git clone ssh://computer/var/projects/myProject
15:59  pgib: cbreak, you mean git-filter-branch?
15:59  cbreak: git checkout -b tmpexp exp
15:59  cbreak: then git rebase -i master
15:59  cbreak: then change what you want in the list
15:59  cbreak: then it'll be rebased onto masater
15:59  cbreak: master
15:59  cbreak: you can test each commit
15:59  cbreak: and then you can fast-forward it into master
15:59  pgib: oh interesting, I was doing it backwards I guess
16:01  serard: now I want to push my commits to this repository but it reports me an authorization error; is there an user permission thing in git ?
16:02  cbreak: serard: do NOT push to non-bare repositories
16:02  cbreak: also, do NOT push to the repositories of other people
16:03  cbreak: if you want one to push to, create a new one that is bare, and that has shared access permissions
16:03  serard: what do you mean by "bare" ?
16:03  pgib: ok, of course, --interactive shows the commits of the current repo being rebased, not what we are rebase onto
16:03  cbreak: serard: man git-init --shared --bare
16:03  jast: serard: the 'git-init' manpage can be found at http://git.or.cz/man/git-init [automatic message]
16:03  serard: ok, thank you cbreak  :)
16:03  cbreak: bare means: has no working tree
16:06  serard: I'm running this : git init --bare --shared=developer .
16:06  serard: and I get this "fatal: bad config value for 'arg'"
16:07  cbreak: yeah
16:07  cbreak: what the hell is developer?
16:07  cbreak: you should read the man page that you were linked
16:07  wereHamster: --shared[=(false|true|umask|group|all|world|everybody|0xxx)] - nope, no developer there
16:08  serard: ah ok, I thought I could replace "group" by "my group" :)
16:08  serard: ok
16:08  cbreak: you can replace it with true
16:10  curtana: 'bad config value for 'shared', try one of false|true|...' would be a better error though :)
16:11  Angel-SL: d
16:12  curtana: e
16:15 --- ivey_off is now known as ivey
16:19  serard: I get this now : fatal: Out of memory? mmap failed: No such device
16:19  serard:  :)
16:19  wereHamster: buy more memory
16:20  serard: I have 6GB oO
16:20  serard: :)
16:21  serard: try reboot
16:21  wereHamster: and you're trying to add big files to the git repo?
16:32 --- mcdebugger is now known as mcde[special_for
16:36 --- ivey is now known as ivey_off
16:39 --- mcde[special_for is now known as mcdebugger
--- Log closed Mon Dec 20 16:50:57 2010
