--- Log opened Sun Nov 28 00:57:13 2010
00:57 --- Users 653 nicks [0 ops, 0 halfops, 7 voices, 646 normal]
00:59 --- FauxFaux_ is now known as FauxFaux
00:59 --- Channel #git was synced in 130 seconds
01:03  sitaram: abstrakt: gitolite *can* be made to work with multiple real users, fedora does it like that.  But I won't document it because of support issues.  Fedora folks (Jesse Keating to be precise) figure out how to make it work that way
01:04  abstrakt: sitaram, you won't document it? that's a bit odd... why not document it and say "we won't support you if you do this, but this is how it should be done"
01:04  sitaram: abstrakt: I'm not getting into a doc discussion with you
01:04  abstrakt: sitaram, dude, you won't document it but then you make mention of it in the install doc?
01:04  sitaram: you do things like calling me a dick then logging off in 4 seconds
01:05  sitaram: so I cant respond
01:05  abstrakt: sitaram, yeah you do things like calling your audience a dick immediately off the bat in your own docs
01:05  abstrakt: sitaram, don't be too fucking surprised if people react poorly to your poorly written documentation
01:06  abstrakt: sitaram, and you do insulting stuff like make mention that gitolite can do something, but then you just admitted that they never should... to the point that you won't even document the technique yourself!
01:06  sitaram: in fact I only responded now to sort of rub it in that it *can* be done, not to actually help you ;-)
01:06  abstrakt: sitaram, yes that much is obvious
01:06  abstrakt: sitaram, that you are a sad little man is also obvious, get a life
01:06  sitaram: and I dont mucy like swear words unless they're obviously in fun
01:06  tmz: abstrakt: Don't be surprised it people react poorly to your trolling.  Please go away.
01:07  abstrakt: sitaram, no you just subtly jab at people without using swear words and laud this dumb ass superiority complex over your users
01:07  sitaram: abstrakt: if you know ssh as well as you claimed, you'd figure it out too
01:07  abstrakt: sitaram, get off your high horse
01:07  abstrakt: sitaram, the point is I don't want to have to figure it out... I *did* figure it out, I opened my keys file and said to myself "hmm, gitolite duplicated the key"
01:07  abstrakt: so I knew that wasn't right
01:07  abstrakt: and I came here to find out what was going on
01:08  cbreak: abstrakt: gitolite doesn't duplicate keys
01:08  cbreak: must be a user error on your part
01:08  abstrakt: cbreak, or a documentation writing fail on sitaram's part
01:08  cbreak: no
01:08  abstrakt: cbreak, which, historically it was, and he basically admitted as much
01:08  abstrakt: yes
01:08  cbreak: I read the docs. They are fairly clear.
01:08  sitaram: abstrakt: I never admitted a doc fault on keys
01:08  abstrakt: cbreak, I did read the docs, I'm not going to go into this dicussion with you because my name is now immortalized in the gitolite repo comments
01:08  cbreak: everything they describe is true.
01:09  abstrakt: sitaram, of course not, because you're fucking the perfect image of god
01:10  abstrakt: "<sitaram> in fact I only responded now to sort of rub it in that it *can* be done, not to actually help you ;-)" <- that sums it up right there, in a nutshell... anyone who's not socially retarded is likely able to see that sitaram is a fucking douche
01:10  sitaram: abstrakt: the stuff I changed based on our "discussion" is https://github.com/sitaramc/gitolite/commit/ad727488fc9882e39295b32168618309ebadaa6b -- and I think I sent you this link once and thanked you
01:10  jim: the perfect image of god is jessica alba?!
01:10  abstrakt: sitaram, yes I remember that
01:10  cbreak: abstrakt: I bet you did something like adding the same key several times to gitolite-admin, or edit the key file manually
01:10  abstrakt: cbreak, dude, go away
01:10  cbreak: if you do that, you shouldn't complain about duplicate keys
01:10  cbreak: why?
01:10  cbreak: if you don't want answers, don't ask
01:11  abstrakt: cbreak, I definitely did not ask you for any of the comments you are providing
01:11  cbreak: and get out of this channel if all you can do is being rude.
01:11  abstrakt: so, fuck it, I'll go away
01:11  abstrakt: cbreak, fuck you I will
01:11  cbreak: what a rude person
01:11  cbreak: I say one line and he attacks me like a rabid white killer bunny straight out of monty python
01:11  jim: doesn't like to be wrong, has problems with authority
01:12  cbreak: authority? He seems to have problems with answers :/
01:12  sitaram: abstrakt: please recall that even on that day, *after* you called me retarded or something, I still helped, but as I said, I dont take kindly to people who call me a dick and then log off within 4 seconds.  I dont remember which day you did it, but it's in the logs
01:12  jim: and is fairly retarted socially... glad he at least had the intelligence to leave
01:13  jim: cbreak: hence, doesn't like to be wrong
01:13  sitaram: jim: it's not authority per se, but doesn't like to be wrong is true
01:14  SethRobertson: So while you are relaxed and everything, do you know of a program to identify a file to see if it is committed in some version of the git repo?  I was thinking of writing such, but obviously not if it already exists.
01:14  cbreak: SethRobertson: you can use git hash-object to get a hash of a file
01:14  jim: SethRobertson, you mean like compare files by name?
01:14  cbreak: and then ask git cat-file if it exists
01:14  SethRobertson: Yes, but can you find out the pathname and rev where that hash exists?
01:15  cbreak: just search all trees that contain the hash
01:15  jim: or by name and content?
01:15  cbreak: he said file, so I doubt the name is relevant in any way
01:15  SethRobertson: Exactly, the searching bit is the necessary glue that the program would provide (assuming cat-file is not that glue)
01:15  cbreak: anyway, git itself must do something like that
01:16  cbreak: for GC alone at least
01:16  cbreak: cat file will only tell you the content and type of a thing from it's hash
01:16  cbreak: you can use it to look if something is inside a repo, not from where it is referenced :/
01:16  cbreak: not sure if there's something that tells you that
01:18  jim: sitaram, it may be that "doesn't like to be wrong" (which is really "doesn't like to be presented with a claim to be wrong, especially in front of people") is a form of "problem with auth"
01:20 --- kpreid_ is now known as kpreid
01:20  sitaram: SethRobertson: in the past when I needed it, I just did this: http://pastebin.com/eGhHUB2H
01:21  sitaram: jim: probably; I did not think of it that way.  I know it started with him telling me my docs suck because I had not said *upfront* (like in first few lines of README) that it touches the authkeys file.
01:21  SethRobertson: That looks like a good core
01:21  pfifo: i am utterly confused by how to use git, and the more i read about it the worse it gets, re reading confising material doubles my confusion, and being confused makes me read over more material and reread confising material
01:22  pfifo: please help me
01:22  SethRobertson: Read the ProGit book
01:22  sitaram: jim: I pointed out that ssh is mentioned in multiple places as being "critical" to gitolite, so it is obvious... but anyway that is when things went south :(
01:22  SethRobertson: pfifo: have you used another revision control program before?
01:22  pfifo: SethRobertson, svn
01:23  sitaram: pfifo: not to confuse you even more, but some people told me this helped them: http://sitaramc.github.com/concepts/0-terminology.html
01:24  SethRobertson: These might help, but I still recommend the ProGit book.  http://git-scm.com/course/svn.html http://www.ibm.com/developerworks/linux/library/l-git-subversion-1/
01:24  sitaram: pfifo: and then, as Seth said the progit book is of course one of the best sources
01:25  SethRobertson: http://progit.org
01:25  pfifo: I was doing fine with git while i was the only one making changes. but as soon as the other guy working on the code started doing stuff all git commands came to a screeching halt and demanded that i fix a colission
01:25  SethRobertson: That happens with svn too
01:25  pfifo: yeah and i do a svn revert and svn update
01:26  pfifo: i tried the git stash thing, but since i hadnt made any changes there was nothing to stash
01:27  SethRobertson: Um, ouch.  That isn't the recommended way to resolve conflicts in svn.
01:27  cbreak: pfifo: just resolve it
01:27  cbreak: and commit the conflict resolution
01:27  SethRobertson: Generally people edit the file `git status` to see what file, or use `git mergetool`
01:27  cbreak: (assuming it's a merge conflict)
01:27  cbreak: svn revert doesn't resolve conflicts
01:28  pfifo: yeah it just delets all my work
01:28  cbreak: you can do that with git too
01:28  cbreak: just use git reset --HARD to delete all commits you made
01:28  pfifo: ctrl+c ctrl+v add it back in
01:28  cbreak: since the last time you diverged from what ever you want to merge
01:29  cbreak: obviously, this is a very dumb way to "resolve" conflicts :)
01:29  pfifo: diff syntax is the devil imho, thats the hardest thing to read, might as well be cihnese
01:29  cbreak: ?!
01:30  cbreak: what the hell are you talking about?
01:30  cbreak: even my little sister can read diffs, and she doesn't even know what they are.
01:30  SethRobertson: They are industry standard and svn uses the same format
01:30  pfifo: one line is ok, but when you start looking at hundreds of replacements, what were they thinking
01:30  cbreak: lines with + in front are added, those with - are removed...
01:30  cbreak: easy
01:32  pfifo: so they say, but i still have alot of trouble with it, enough so that starting with a fresh copy is much easier
01:33  cbreak: but there are no fresh copies
01:33  sitaram: pfifo: may I suggest installing meld or kdiff3 and then using "git difftool -t kdiff3" instead of "git diff".  The extra info, esp in coloring, etc., that a GUI output provides may help you understand the diff better.  I know I often have to resort to that in large diffs
01:33  cbreak: you have your version, their version and the original version that is the last common ancestor of your and their version
01:34  cbreak: git can show you all of those
01:34  atula: hello. I am new to git. I commit and push a few times... then finally I experienced some weirdness.  But it committed and now in history/log I see: master | origin/HEAD | origin/master [my commit message]
01:34  atula: what does that mean and how should I read it?
01:35  pfifo: ok so now i have made a fork on github of the project im trying to work on, unfortunatly when i try to clone it, it only gives me the master branch, my code is in my branch 'pfifo' but git seems to have no method of checking out BOTH master and pfifo
01:36  sitaram: pfifo: you cant checkout 2 branches at the *same* time, if that's what you meant
01:37  SethRobertson: atula: What command did you use to generate your confusing output?
01:37  atula: show log (git tortoise on windows)
01:37  sitaram: pfifo: just do "git checkout -t pfifo origin/pfifo
01:37  SethRobertson: atula: Ah, I cannot help you with confusing stuff that tortoise does, only with confusing stuff that git does.
01:38  SethRobertson: perhaps someone else has some tortoise experience here
01:40  cbreak: atula: maybe it's normal.
01:40  cbreak: pfifo: just do a git branch to show local branches, git branch -r to show remote ones
01:41  cbreak: do you see one you want to have checked out?
01:41  sitaram: yeah I was also wondering if what he is seeing is just a weird form of "--decorate" output
01:41  cbreak: git checkout branchname for local ones, git checkout -t branchname for remote ones
01:41  cbreak: remote branches will get copied into a local one that way
01:41  cbreak: so you only have to do that once
01:42 --- Unknown[NF] is now known as Unknown[OFF]
01:44  cbreak: I have had tortoise experiences that made me hate it.
01:44  pfifo: the resulting gitrepo that clone gives me DOSE NOT HAVE 2 branches, it ONLY has either 'master' OR 'pfifo'
01:44  cbreak: it couldn't even do proper commits
01:45  pfifo: damn free node
01:46  sitaram: pfifo: can you paste the output of "git branch -a -v"?
01:47  pfifo: guess its only proper to paste to gist here https://gist.github.com/718443
01:48  cbreak: pfifo: looks like you have both branches
01:48  cbreak: just pick one and switch to it
01:48  pfifo: well yeah, cause i typed 'git branch pfifo' to recreate it
01:49  cbreak: no
01:49  sitaram: pfifo: as I said earlier, you just need to "git checkout -t pfifo origin/pfifo"
01:49  cbreak: pfifo: look lower
01:49  cbreak: there's a remote tracking branch for it
01:49  cbreak: just do what I told you above
01:49  cbreak: obviously, first delete your new pfifo branch
01:49  sitaram: (now he'll have to move to master, delete pfifo, and *then* setup pfifo properly)
01:50  cbreak: you can't delete branches you are on? why not?
01:51  pfifo: sitaram, fatal: Missing branch name; try -b
01:51 --- Leonidas_ is now known as Leonidas
01:52  pfifo: i deleted the new pfifo and am currently checking out master, but i cannot run the command sitaram gave me
01:52  sitaram: pfifo: I may have the syntax wrong; give me a min to check
01:52  pfifo: sitaram, i got it, i did the same
01:53  sitaram: pfifo: git checkout -t -b pfifo origin/pfifo
01:53  cbreak: it's git checkout -t origin/pfifo
01:53  cbreak: as I told you above
01:53  cbreak: everyone ignoring me tonight? :)
01:54  sitaram: cbreak: no :)
01:54  pfifo: cbreak, no, i sat sitaram's and thought it was the same as yours, didnt compare side by side
01:54  cbreak: the -b newname is redundant.
01:54  pfifo: saw even
01:54  cbreak: if it's the same as the last part of the remote name
01:55  sitaram: cbreak: I missed what you said and typed my own (wrong!) version of the command; sorry :)
01:56  sitaram: cbreak: git checkout has progressed from *both* -t and -b being required, through inferring the -b, to now "git checkout pfifo" will do it.  But without knowing what version of git he's running, I was shooting for the oldest syntax
01:56  cbreak: sitaram: let's hope he uses a git from this century... :)
01:56  sitaram: :)
01:57  sitaram: or he could be running debian stable ;)
01:57  cbreak: when I installed gitolite at work
01:57  cbreak: I had to compile git from git.git, because the repository version was so ancient
01:57  pfifo: ok now im back to the original conflict, and 'git difftool -t kdiff3' is not using a gui
01:57  cbreak: it had 1.5.4 or something like that
01:57  cbreak: conflict?
01:58  cbreak: checking out a branch should never conflict unless you have uncommited changes
01:58  pfifo: wait
01:58  sitaram: pfifo: for conflicts, replace "difftool" with "mergetool"
01:59  cbreak: do it in vim like real men
01:59  pfifo: https://gist.github.com/718456
02:00  cbreak: HEAD?!
02:00  cbreak: wth...
02:00  pfifo: i did nothing besides recreate pfifo, and to be safe created and switched to a branch i dubbed merging
02:01  cbreak: why not pull from a branch?
02:01  pfifo: and i get that error when I run the commands that were given to me from my 'co-worker'
02:01  cbreak: and when you do that, just resolve the conflicts
02:01  cbreak: which error?
02:01  pfifo: https://gist.github.com/718456
02:01  cbreak: that's not an error
02:02  pfifo: and i get that (not expected it todo what i thought it was going todo incident) when I run the commands that were given to me from my 'co-worker'
02:02  cbreak: just resolve the conflict in  src/craftd.c
02:03  cbreak: you obviously edited that file
02:03  cbreak: they edited that file
02:03  cbreak: so both edited that file
02:03  vanity: I have a fundamental question concerning the fate of the universe. How does git stash work ?
02:03  cbreak: at the same place
02:03  pfifo: so 'HEAD' is wrong?
02:03  cbreak: not wrong, but very unusual
02:03  cbreak: usually you would pull from a branch
02:03  cbreak: directly that is
02:04  cbreak: vanity: magic? :/
02:04  cbreak: it just does. somehow.
02:04  sitaram: vanity: define stash.  As in "git stash" or something else...?
02:04  cbreak: I speculate it does use some kind of temporary branch
02:04  vanity: sitaram: yeah; "git stash"
02:04  cbreak: from which it can then cherry pick stuff
02:04  sitaram: vanity: best way is to make a dummy change, run git stash, then "gitk --all" to see it graphically
02:06  vanity: whoa
02:06  vanity: graphics
02:06  vanity: pretty colors
02:07  sitaram: not just pretty; gitk is amazingly powerful...
02:07  vanity: so it's like Salt
02:08 --- sadmac2 is now known as sadmac
02:09  sitaram: Angelina Jolie?
02:09  sitaram: gitk is not *that* pretty!
02:09  pfifo: ok kdiff3 is extremly complex
02:10 --- FauxFaux_ is now known as FauxFaux
02:11  jim: pfifo so you're overloaded with info... do more examples
02:11  sitaram: pfifo: complex == powerful
02:11 * sitaram nods; agrees with jim
02:11  jim: simple can create power as well
02:12  jim: just so's ya knowz :)
02:13  jim: pfifo, why are you even thinking about git? let's start with that
02:13  sitaram: aah good; a philosophy discussion; let me get the popcorn!
02:13  sitaram: :)
02:15  jim: if you put a popcorn popper in the forest, and turn it on, has there been the fresh smell of popcorn if no one is there to smell it?
02:15  pfifo: jim, its what the project uses
02:15  pfifo: if i had my way it would be svn
02:15  jim: ok, and your relation to the project is?
02:15  pfifo: developer
02:16  jim: so you're a known developer that does core work? let me guess, it was recently decided to move to git
02:17  cbreak: why would anyone voluntarily use SVN?
02:17  cbreak: that crap can't even do branches
02:17  jim: because he knows it.
02:17  cbreak: you can't even commit without anyone else suffering from incomplete stuf
02:17  jim: as compared to git, he can't use git, he can use svn
02:17  jim: but
02:18  jim: he wants to change that
02:18  jim: btw, you and I both know that he can use git... it's just going to take a little time to convince him of this
02:18  pfifo: honestly i could give a crap, but i need this to work, 99% fuss and 1% coding is never a good thing
02:19  jim: ok, what's the most basic thing about git you're confused about?
02:20  jim: cbreak: so, he's been thrown into a fire here
02:20  cbreak: I am not sure if git's the problem
02:20  cbreak: if resolving a simple conflict in a text editor is a hurdle :/
02:20  sitaram: pfifo: I have fresh-from-college devs with 2 months of Windows dev experience using git
02:21  sitaram: pfifo: not "experts" but day-to-day work happens.  Tell us what you're having trouble with and we can help
02:21  sitaram: pfifo: but do expect to spend a wee bit of time learning; it's not instant.  (I teach git to my team by the way)
02:22  jim: and you need to be -specific-
02:22  cbreak: I teach git to my superiors. more dangerous :)
02:22  jim: you have a lot of things happening all at once, and it'
02:22  sitaram: cbreak: :)
02:22  pfifo: not when im complaining!
02:22  pfifo: if i decided to ask a question, ill provide details
02:23  cbreak: let's all make fun of pfifo until he has a problem he wants to have solved.
02:23  pfifo: what you thought i have been seeking help this whole time?
02:23  jim: wait, so why are you here and engaging us again?
02:23  jim: that matches one of many "troll" patterns
02:24  cbreak: maybe he's just not able to muster enough understanding to isolate his problem.
02:25 * jim is very different now... 
02:25  pfifo: however this kdiff3 tool is going to be a godsend
02:26 * sitaram nods; loves kdiff3.  Very powerful, and capable of being driven entirely by keyboard too!
02:27  jim: pfifo, complaints to /dev/null... please don't waste my time. read "git from the bottom up", and progit too... and when you want to occupy time of people who may be willing to help and are listening and waiting for you to be specific about what, be specific, on-topic, concise, complete and informative
02:28  jim: in short, be a socci
02:28  cbreak: read git-for-computer-scientists
02:28  sitaram: socci?
02:28  cbreak: once you understand that, everything will be clear
02:28 --- kpreid_ is now known as kpreid
02:28  cbreak: socci = soccer ball?
02:28  jim: that too (but I got more from git from bottom up, in the way of understanding the basics)
02:28  cbreak: I think jim wants to kick him
02:29  jim: I do now... he's admitted that he's lazy and drama-producing, and a time waster
02:29  cbreak: most of my git knowledge comes from the man pages, this channel and for-comp-sci
02:30  jim: did you check out bottom up?
02:30  jim: it's good
02:30  pfifo: it should not be this confusing, I now rank git as the number 2 hardest program in linux, right under postfix, and bumping squid to #3
02:30  jim: your rankings are your business
02:30  cbreak: if the user is a morron, even git can be complicated.
02:30  bremner: pfifo: a little venting is fine, but at some point, either ask a question, or be considered a troll.
02:30  cbreak: we accept that
02:31  bremner: (as you can tell from the fact people are getting hostile)
02:31  cbreak: but really, check out Blender.
02:31  pfifo: bremner, ok, i got this working so I need to do some actual coding
02:31 * pfifo leaves
02:31  jim: let me set my tone a little, I'm not overly hostile
02:32  cbreak: blender is one of the most complicated programs I've ever seen
02:32  jim: but I don't like it when I'm sitting waiting and then it's not going to come across
02:32 --- fedesilva_ is now known as fedesilva
02:32  cbreak: I share my office with an artist, he can use it, but I have no idea how...
02:33  bremner: cbreak: probably lack of pre-conceptions
02:33  jim: when I go into clubs and see the laptops the djs are using, I find that complex... not quite sure how they're doing what they're doing
02:34  cbreak: I can use Cinema 4D rather well, and get around in Maya enough to make short movies
02:34  cbreak: but blender... *shiver*
02:35  jim: pfifo: generally you have to try things out of the context of real work. many people report that some things git does are surprising, and you don't want to be surprised by those things when you're working on code that's about to become production
02:38  pfifo: if I make 15 different commits, all with undescriptive comments, can I somehow make them all appear as one bulk change with a descriptive comment when i push it to github?
02:38  jim: pfifo: just like any other instrument, if you're trying to improvise, you need to learn the basics and practice them
02:39  jim: I think there are ways to do that... but you've already spent the time I've allocated to you
02:39  jim: so you're going to have to -search-
02:41  cbreak: pfifo: yes
02:41  cbreak: pfifo: man git-rebase, look for -i and squash
02:41  jast: pfifo: the 'git-rebase' manpage can be found at http://git.or.cz/man/git-rebase [automatic message]
02:41  cbreak: warning: this rewrites history
02:42  pfifo: is that a bad thing todo? im trying to switch branches but it wont let me cause of outstanding changes
02:43  cbreak: just commit the changes
02:43  jim: and when you consider that you're in a society of developers, one among many, rewriting history is going to be annoying to the other devs (especially if you end up rewriting history that they have a copy of in their personal project repo
02:43  cbreak: or kill them
02:44  cbreak: don't rewrite public history of course
02:44  cbreak: but if you publish history with non-descriptive commit messsages, you're fucked anyway
02:44  cbreak: you can't rebase with uncommited changes either
02:44  jim: other members of the society won't know whether to accept your work
02:45  cbreak: well... maybe they can read the diffs...
02:46  cbreak: unlike him :D
02:46  jim: reading man git-stash might be helpful
02:46  jast: the 'git-stash' manpage can be found at http://git.or.cz/man/git-stash [automatic message]
02:46  jim: but are they going to want to
02:46  jim: perhaps they see him coming a mile away, and they know all this about him
02:47  cbreak: ... maybe we're too evil with the little troll :)
02:47  jim: just evil enough I'd say :P
02:49 --- TheUni_ is now known as TheUni
02:49  jbmsegundo: Hi guys, I'm .net developer and recently started to migrate my project to git repositories. How do I open visual studio solution of the branch?
02:50  cbreak: unrelated
02:50  cbreak: visual studio has nothing to do with git
02:50  cbreak: and git doesn't care about visual studio at all
02:50  spb: same way you'd open any other visual studio solution
02:50  spb: probably by double clicking on it in windows explorer
02:51  cbreak: he wants to open a visual studio solution of a branch
02:51  cbreak: but branches do NOT HAVE visual studio solutions
02:51  cbreak: the only thing they have, even though implicit, is a name, and a ref they point to
02:54  jbmsegundo: I understood! tks!
03:00 --- jdav_gone is now known as jdav
03:17 --- jdav is now known as jdav_gone
03:31 --- BP{k}_ is now known as BP{k}
03:32 --- jdav_gone is now known as jdav
03:34 --- offby1 is now known as offby2
03:35 --- offby2 is now known as offby1
03:36 --- offby1 is now known as offby2
03:41  chessguy: stupid question, but i can't seem to find the answer. i've cloned a repository and committed some things to my clone. how do i see a list of those commits?
03:42  patrikf: chessguy: git log, or git log origin/master..master if you don't want to see commits from upstream
03:44  chessguy: git log doesn't tell me which commits have been since the last pull/push
03:44  chessguy: or what commits i have that the remote doesn't have
03:44  patrikf: chessguy: yes it will
03:45  chessguy: patrikf, hmm, ok. maybe i'm not looking at it right
03:45  chessguy: how can i tell that from git log?
03:46  patrikf: i'm not sure what you mean. git log (without arguments) will show you the "topmost" commits, and these should be yours
03:46  patrikf: (or merge commits in case you pulled in the meantime)
03:47  chessguy: patrikf, right, but i can't remember when i last pushed commits. that shows me the whole history. i can't remember which commits i've pushed, and which i haven't
03:48  patrikf: chessguy: right, that's what the second command I suggested will show you
03:48  patrikf: chessguy: i.e. all commits that your local repo has, but the remote doesn't have
03:48  patrikf: (or didn't have the last time you did a git fetch or something that calls git fetch)
03:48  chessguy: oh! sorry
03:48  chessguy: ok, i get it now
03:51  chessguy: patrikf, thanks
03:59 * tlvb thought my ($x, $y, $z) = @_; would assign $x to $_[0] and so on...
04:03 * tlvb thought he was in #perl
04:05  patrikf: tlvb: you got me curious now. that works fine here
04:06 --- jdav is now known as jdav_gone
04:06  tlvb: patrikf: yes, it does here to, the error was all mine
04:06  patrikf: heh, alright then
04:07  tlvb: I thought I was sending an array to a sub, but I had join()-ed the array before when I meant to join /another/ array.
04:10  patrikf: perl... it's been a while
04:10  patrikf: who needs perl when there's ruby? :P
04:16  gorakhargosh: Can one use a project-wide .gitconfig shared among team members on the project?  I'd like my team mates to have certain aliases when working on the code.
--- Log closed Sun Nov 28 12:13:15 2010
--- Log opened Sun Nov 28 12:13:46 2010
12:13 --- Users 634 nicks [0 ops, 0 halfops, 5 voices, 629 normal]
12:15 --- Channel #git was synced in 135 seconds
12:22 --- deepakk is now known as dkannan
12:27  Angel-SL: erm
12:29  tango_: so I'm coding up a bunch of changes to git web--browse, does anybody here have any suggestions for things to add before I send the patchset?
12:31  drizzd: read Documentation/SubmittingPatches
12:33  tango_: drizzd: I know how to submit patches 8-) what I meant is: are there feature requests for web--browse
12:35  Angel-SL: hi
12:35  Angel-SL: erm
12:35  drizzd: is it possible to use git describe/branch --contains with gitweb?
12:35  Angel-SL: how do I add a gitsvn remote to an existing git repo?
12:35  drizzd: Angel-SL: faq svn-mirror does that
12:35  jast: Angel-SL: How to mirror SVN to git: please see https://git.wiki.kernel.org/index.php/GitFaq#svn-mirror [automatic message]
12:43  Angel-SL: drizzd: i'm forking a svn-hosted project using git... how do i allow anyone who has write access to be able to update the fork with changes from the original project?
12:43  Angel-SL: is there really no other way that to have to get everyone to git svn clone that repo themselves?
--- Log closed Sun Nov 28 14:34:44 2010
--- Log opened Sun Nov 28 14:40:06 2010
14:40 --- Users 638 nicks [0 ops, 0 halfops, 5 voices, 633 normal]
14:40  flavius: cbreak: how?
14:40  cbreak: did you ever read the git push man page?
14:40  cbreak: git push remotename branchname
14:41  flavius: what is remotename supposed to be?
14:41  cbreak: the name of the remote
14:41  flavius: I don't have a "remote name" afaik
14:41  flavius: a special one
14:41  cbreak: then you can-t push
14:41  cbreak: well... you could push directly to a URL...
14:41  cbreak: but you should really git remote add one
14:42  cbreak: type git remote -v to list the remotes that you already have
14:42 --- Channel #git was synced in 134 seconds
14:42  jsquared: There are a few hunks in a file foo.txt I want to keep but don't want to commit just yet. Other parts I want to throw away. How do I throw away those other hunks?
14:43  cbreak: jsquared: git checkout -p filename
14:43  cbreak: you can answer "yes" if you want to revert that hunk, "no" if you don't
14:43  cbreak: ... or was it vice versa? hmm... just try it out.
14:43  flavius: cbreak: it says: origin X (fetch), origin X (push), origin Y (push), which kind of looks like what I need
14:44  cbreak: what you need is "origin"
14:44  cbreak: the name of your remote
14:44  flavius: I see
14:45  flavius: now it says "error: src refspec Y does not match any."
14:45  jsquared: cbreak: Thanks! That did it.
14:46  cbreak: np
14:47  flavius: cbreak: look what I'm trying to do http://stackoverflow.com/questions/4296706
14:48 --- unreal_ is now known as unreal
14:48  cbreak: nah
14:48  cbreak: completely unrelated
14:48  cbreak: what you want is to push something to a remote
14:48  cbreak: that is just git push remotename branchname
14:49  flavius: Ok, so I have to add a remote first
14:49  cbreak: you already have one
14:49  cbreak: origin
14:49  banisterfiend: how do i connect my newly created 'dev' branch to the origin/dev ?
14:50  cbreak: banisterfiend: easiest way is git branch -set-upstream or git push -set-upstream
14:50  cbreak: for details see man pag
14:50  cbreak: but note that the argument order is confusingly different :)
14:50  flavius: cbreak: thanks, git push origin master did it
14:50  engla: is it that complicated? is it not better to just use either  git checkout -b dev origin/dev ; or git push origin dev, whichever of the two is appropriate?
14:51 --- dwmw2 is now known as dwmw2_gone
14:51  cbreak: engla: no, neither will set up tracking
14:52  doener: cbreak: the checkout one will (by default), as origin/dev is a remote tracking branch
14:52  cbreak: only if you specify -t
14:52  cbreak: or have a very new git
14:52  banisterfiend: doener: ah, so: git checkout -t origin/dev ?
14:52  cbreak: that won't work
14:52  doener: cbreak: checkout does that for ages
14:52  cbreak: you alraedy have a dev branch
14:53  doener: just like "branch"
14:53  doener: of course, if you already have the local branch head, that won't work
14:53 * engla is a longtime git user and this matching stuff is the most complicated, lots of ways to configure it. No, /me doesn't like it. Just use checkout -t :-)
14:54  doener: cbreak: the implicit use of --track  for "branch" and "checkout -b" was added in v1.5.0.3-354-g0746d19
14:54  doener: cbreak: hardly "very new" ;-)
14:55  cbreak: interesting
14:58  banisterfiend: hmmm
14:59  banisterfiend: doener: i already have a local dev branch, i pushed it to origin. Now it automaticlaly does  a 'push' to origin/dev. How come it doesnt do a 'pull' from origin/dev ?
14:59  cbreak: push does matching by default
14:59  cbreak: pull needs upstream info afaik
15:00  cbreak: easiest in your situation would be git push -u
15:00  doener: banisterfiend: "pull" needs an explicit upstream, push ... what cbreak said
15:00  cbreak: probably
15:00  banisterfiend: hmm
15:01  banisterfiend: so how do i give it 'upstream info' ?
15:01  banisterfiend: man git-push
15:01  jast: the 'git-push' manpage can be found at http://git.or.cz/man/git-push [automatic message]
15:04  doener: banisterfiend: "push -u" automatically sets upstream so that the source branch head will have the destination branch as its upstream
15:04  doener: banisterfiend: so with the default "name matching", dev would track origin's dev (same name)
15:04  doener: argh...
15:05 * doener slaps himself for saying "track"
15:05  cbreak: I like track
15:05  doener: banisterfiend: dev would get origin's dev as its upstream
15:05  cbreak: it'll get tracking info for what ever it was pushed to :)
15:05  doener: banisterfiend: if you want to explicitly specify the upstream, use: git branch --set-upstream <branch> <upstream>
15:05  doener: banisterfiend: e.g. git branch --set-upstream dev origin/dev
15:06  cbreak: you can also set the stuff in .git/config
--- Log closed Sun Nov 28 15:32:07 2010
--- Log opened Sun Nov 28 15:42:32 2010
15:42 --- Users 643 nicks [0 ops, 0 halfops, 5 voices, 638 normal]
15:44 --- Channel #git was synced in 134 seconds
15:48  Quibus: so, bug in git? How do I force a commit?
15:52  parasti: Quibus: I don't see how Git prevents you from commiting.  it may warn you, but not prevent anything
15:53  Quibus: wel, it doesn't, it lists the suspicious patch lines and that's it
15:54  parasti: then you might have a custom hook enabled
15:54  Quibus: how do I check? I started this git from a literal copy of someone else
15:54  parasti: read up on hooks, "git help hooks"
15:54  Quibus: so there might be some non-default things setup which I don't know of
15:55  Quibus: myabe try -n?
15:56  Quibus: that helps
15:58  Quibus: maybe that pre-commit hook script was just broken
--- Log closed Sun Nov 28 16:11:09 2010
--- Log opened Sun Nov 28 16:11:37 2010
16:11 --- Users 640 nicks [0 ops, 0 halfops, 5 voices, 635 normal]
16:13 --- Channel #git was synced in 134 seconds
16:18  flavius: The staging area is what will go to the next commit, right?
16:19  spb: if you mean the index, usually
16:19  flavius: why usually?
16:20  cirwin: you can do git commit <filename> <filename>.. which commits the current versions of those files
16:20  spb: or git commit -a, which commits everything in your working tree
16:21  flavius: Oh right
16:21  flavius: I thought there would be one more concept kicking in
16:22  engla: it's always the staging area that is turned into the next commit.. it's just that it doesn't have to be "the" but can be "a staging area". So in those cases a side index is created for the commit
16:23  flavius: Yeah got it
16:26  brahmana: Hi all,
16:26  brahmana: We (I and my friend) have a repository setup on github
16:27  brahmana: I pushed two commits to the remote master a few hours ago.
16:27  brahmana: And my friend did a "git push --mirror" without pulling my changes.
16:28  brahmana: Now when I look at the commit history on github.com my two most recent commits are not seen.
16:28  brahmana: Two questions : 1) Does this mean "git push --mirror" will just wipe out the remote and replace with the local one?
16:29  brahmana: 2) Is there any way to get back to the point before this "git push --mirror"?
16:30  brahmana: We have a hook for the push which will email the links to the commits pushed. Those links in my email still show the commits.
16:31  brahmana: So the missing commits are there somewhere, but somehow not in the hisory of the tree in the website.
16:31  brahmana: Any idea what's gone wrong and what can be done to set it right?
16:32  engla: mirror pushes will force-update all branches so your branch updates were overwritten
16:33  engla: I think you should merge your local changes with the remote changes and push the new branch again. then advice all to not use mirror..
16:33  engla: brahmana: since you don't have local access to github repos (IIUC) you can't get the old branch back from the remote. but you still have it in your local repo right
16:33  brahmana: So if I initialize an empty repo and do a mirror push then it will effectively wipe out my remote repo?
16:34  brahmana: engla: Yes, I have my commits in my local repo and I haven't yet pulled after my friend did the mirror push.
16:34  engla: brahmana: quite possibly, see git help push for documentation.
16:35  engla: maybe your collaborator wanted to push all, then you use git push --all
16:37  brahmana: Well, actually, the URL of the remote changed and he thought that mirror push to the new URL will do the necessary migration. !
16:38  brahmana: Anyways, in what case is a mirror push useful?
16:38  engla: when you want an exact mirror repository, just like in mirror websites
16:40  brahmana: aah...
16:40  cbreak: if someone initializes an empty repo, --mirror can't delete anything
16:40  cbreak: because nothing is there
16:41  cbreak: well... unless you push *from* the empty repo... which seems rather useless to even attempt... :)
16:41  brahmana: cbreak: well ok I just add one file with one letter and then mirror push it..
16:41  brahmana: cbreak: yes indeed.. just wanted to understand the possibilities..
16:42  brahmana: or rather the risks involved.. :)
16:42  engla: brahmana: I think you are right in this point -- if misunderstood, --mirror can be destructive
16:42  brahmana: engla: In an irreversible manner?
16:43  cbreak: only if you don't have any backups :)
16:43  brahmana: :)
16:43  engla: well there are reflogs etc, but you have no access to them on github repos
16:43  cbreak: do bares have reflogs nowadays?
16:44  brahmana: ok.. I wonder if github guys do that for those who take premium support (if at all there is such a thing)
16:45  brahmana: engla: Just for understanding it properly, if it were our own setup, how would I recover it?
16:45  engla: cbreak: maybe they don't? why?
16:45  cbreak: because I think they don't
16:46  engla: cbreak: ok, you are right
16:47  brahmana: What are bares?
16:47  engla: brahmana: there is no procedure for recovering it if you are in the remote bare repository and it doesn't have reflogs enabled
16:47  engla: then you have to restore it from backups
16:47  cbreak: if you're lucky you can push from an other repo
16:47  cbreak: that still has the old branches
16:47  patrikf: engla, cbreak: is there a reason for this, besides the fact that nobody implemented it?
16:48  cbreak: oh, you can just turn them on in the config I guess
16:48  engla: patrikf: you can enable reflogs. and you can log all pushes
16:48  cbreak: but... not sure if the reflog would save you from _branch_ deletions
16:48  engla: true then you need a log of pushes
16:50  flavius: in such cases as brahmana's, supposing I don't know that my collegue did a messy operation, what can I do to check it prior to git pull?
16:52  cbreak: git pull will never delete anything local
16:52  engla: I always use git fetch
16:52  cbreak: but you'll get weird merge commits
16:53  patrikf: engla: is there a built-in push-log feature, or did you think of a hook?
16:54  flavius: how would I have to pull it to delete local changes (without being given the chance to react)?
16:54  engla: patrikf: a hook
16:55  patrikf: flavius: you want to get what's on the remote, throwing away all local changes and commits?
16:55  patrikf: i.e. like a fresh clone?
16:57  flavius: patrikf: no, I want to know what I should never be using :-)
16:57  engla: we always get questions about git pull here. I really don't like that, it shouldn't exist. Everyone should just use git fetch + appropriate actions..
16:57  flavius: patrikf: as in "show me the big red button"
16:58  patrikf: flavius: just look for the signs ;-) if you're applying too much force (-f, --hard) things might go wrong.
16:58  patrikf: but in most cases, the reflog can still save you.
16:59  patrikf: except for uncommitted changes, so don't accumulate too many of them. (or make a backup before executing something you're not totally sure about)
16:59  flavius: patrikf: so everything that looks like bad should be avoided, and the defaults will never do something unrecoverable to the data
17:00  patrikf: flavius: no, it should not be avoided, there's a reason it exists
17:00  patrikf: flavius: just like rm -rf is not bad per se
17:00  Quibus: well thanks
17:00  Quibus: see you later
17:00  flavius: yeah, sure, I mean it in the constructive sense, usually one doesn't want to destroy data
17:01  flavius: especially when versioning stuff. you want it at least in the history
--- Log closed Sun Nov 28 17:10:42 2010
--- Log opened Sun Nov 28 17:11:06 2010
17:11 --- Users 642 nicks [0 ops, 0 halfops, 5 voices, 637 normal]
17:11 --- Server: [kornbluth.freenode.net] [freenode-info] if you're at a conference and other people are having trouble connecting, please mention it to staff: http://freenode.net/faq.shtml#gettinghelp
17:13 --- Channel #git was synced in 133 seconds
17:15  edulix: how can I make git notes store my notes in .git/refs/foo/* ? I've tried doing something like git notes --ref refs/foo add -m "mynote" but doesn't seem to work..
17:16  edulix: it stores them in .git/refs/notes/refs/foo..
17:17  wereHamster: edulix: why do you want to store it in refs/foo ?
17:17  parasti: git help config, /notes
17:18  edulix: wereHamster: well I just want to store them in a place that doesn't mess with my normal notes
17:18  flavius: engla: I've followed your advice (learning git now) of using fetch first. There are changes on the origin, how do I show the diff?
17:18  jast: yeah, I think some people use a separate namespace for caching purposes, too
17:18  wereHamster: edulix: fatal: Refusing to add notes in refs/foo (outside of refs/notes/)
17:18  wereHamster: looks like you can't do that
17:18  edulix: and then add a fetch: and a push: related to that in .git/config
17:18  edulix: wereHamster: ok
17:19  wereHamster: you can still use separate namespaces within refs/notes.
17:19  jast: works for me
17:19  cbreak: flavius: man git-diff
17:19  jast: flavius: the 'git-diff' manpage can be found at http://git.or.cz/man/git-diff [automatic message]
17:20  cbreak: fetch usually fetches stuff into remote tracking branches, like remotes/<remotename>/<branchname>
17:20  jast: hmm, but puts it into refs/notes, too :\
17:20  edulix: wereHamster: ok so if I use refs/notes/foo, then the fetch line would be.. fetch = refs/notes/foo/*:refs/notes/foo/* ?
17:20  wereHamster: yes
17:20  cbreak: so git diff localbranchname..remotename/branchname
17:21  flavius: cbreak: thanks
17:22  flavius: so I'll do git diff master..origin/master
17:22  cbreak: or git log
17:22  cbreak: or git log -p
17:23  cbreak: ... countless methods :)
17:23  edulix: wereHamster: ?
17:24  parasti: if foo is a single ref, not a namespace, the "/*" part is wrong
17:24  wereHamster: edulix: what?
17:26  edulix: parasti: but is it a ref? :P will it upload all the notes I stored in ref/notes/foo ?
17:26  wereHamster: the notes ref is indeed a ref. If it wasn't it wouldn't be called a ref
17:27  parasti: so... it is wrong
17:28  edulix: wereHamster:  ok my missunderstanding then. I want to store a bunch of notes in a subdir, if  that's possible ¿?
17:29  c00kiemon5ter: can I pull but discard new changes ?
17:29  cbreak: what you want is not pull then
17:30  cbreak: it's git fetch followed by a git reset --hard to what you fetched
17:30  c00kiemon5ter: yes.. it's useless changes in a project, that I need to pull to push back (forward commits only)
17:30  c00kiemon5ter: good :)
17:30 * edulix doesn't get how this notes thing work yet
17:31  bremner: c00kiemon5ter: err. you want to discard the remote changes?
17:31  c00kiemon5ter: yes
17:32  bremner: that is a bit trickier.
17:32  parasti: edulix: you treat a notes ref just like you would a branch ref
17:32  wereHamster: edulix: yes
17:32  flavius: How to tell git merge origin/master to fire up the $EDITOR with those placeholders, so I can resolve the conflicts?
17:32 --- Adam__ is now known as Adam
17:32  wereHamster: edulix: you can store the notes in refs/notes/foo, or refs/notes/bar/baz or any other ref under the refs/notes namespace
17:33  bremner: c00kiemon5ter: if you rewrite history on the remote, you may make life difficult for other people that have fetched it.
17:33  edulix: wereHamster: ok thanks
17:33  patrikf: bremner: he could merge -s ours
17:34  bremner: patrikf: yes. Or revert the commits he doesn't like. But I'm still not sure what the goal is.
17:34  c00kiemon5ter: bremner: I'll pull and manually remove the changes then
17:34  patrikf: agreed, if you need to throw away changes you're doing something wrong
17:35  bremner: c00kiemon5ter: well, git revert is kindof made for this.
17:46  kanzure: how do i undo this? git tag Distribution tags/Distribution
17:46  kanzure: caveat: there is a remote branch called "Distribution" as well as another called "tags/Distribution" (before i ran that command)
17:47  jast: just so I'm sure I understand you correctly, can you please pastebin the output of: git show-ref | grep Distribution
17:48  kanzure: sure. one sec
17:48  wereHamster: kanzure: git tag -D Distribution
17:48  wereHamster: -d
17:48  kanzure: refs/remotes/Distribution, refs/remotes/tags/Distribution, refs/tags/Distribution the latter two have the same hash
17:49  jast: and you just want the tag to disappear?
17:50  jast: if so, what wereHamster said
17:50  kanzure: okie dokie.
17:50  kanzure: p.s. i hate namespace conflicts or tags in branches and branches in tags
17:50  kanzure: you've got your tag in my branch!
17:50  kanzure: there's a joke in there somewhere
17:50  jast: "git tag" only works on tags and "git branch" only on branches, fortunately
17:50  kanzure: yes but git svn converted tags into branches O_O
17:50  wereHamster: kanzure: it looks like you imported a svn repo into git
17:51  kanzure: git branch -r lists all these "refs/remotes/tags/Distribution" stuff
17:51  kanzure: wereHamster: yes
17:51  jast: yes, but "git tag" creates actual tags :)
17:51  kanzure: actual tags are good right? :x
17:51  wereHamster: refs/remotes/tags/Distribution is actually a branch. Because svn doesn't know real tags
17:51  jast: if this is part of an effort to permanently convert the svn repository to git, sure
17:51  kanzure: jast: it is
17:51  kanzure: so, what about refs/remotes/Distribution versus refs/remotes/tags/Distribution
17:51  jast: might wanna use annotated tags if you want the tags to carry a message
17:51  kanzure: presumably remotes/Distribution is a branch
17:52  kanzure: and remotes/tags/Distribution is a tag
17:52  jast: the latter is a "tag"
17:52  jast: it used to be tag in svn, but right now git pretty much treats it as a remote branch
17:52  kanzure: so i'm reading http://pauldowman.com/2008/07/26/how-to-convert-from-subversion-to-git/
17:53  kanzure: and i think i should do: git tag tags/Distribution tags/Distribution ?
17:53  wereHamster: kanzure: no, you shold not
17:53  wereHamster: git tag Distribution refs/remotes/tags/Distribution
17:53  kanzure: it suggests "git tag tagname tags/tagname"
17:53  kanzure: ok that's much less ambiguous
17:54  kanzure: it then suggests to run git branch -r -d tags/tagname so i'm thinking git branch -r -d refs/remotes/tags/Distribution ?
17:54  wereHamster: no, that won't work
17:54  wereHamster: git branc -r -d tags/Distribution
17:54  kanzure: hum. okay.
17:54  wereHamster: just follow the guide
17:55  jast: branch -r automatically prepends the refs/remotes to the "main" argument
17:55  kanzure: i see
17:55  jast: similar things apply to git branch without -r and git tag
17:55  jast: refs/heads and refs/tags, respectively
17:56 --- Leonidas_ is now known as Leonidas
18:01  kanzure: my other issue is that these branches are 'remote'- how do i make them.. uh.. not remote?
18:01  wereHamster: why?
18:01  wereHamster: make local branches as you need them
18:01  cbreak: just create them locally
18:02  kanzure: huh?
18:02  kanzure: so when i push this repo over to my public bare repo nobody else can see these other branches
18:02  kanzure: this is bad, yes?
18:02  cbreak: ...
18:02  wereHamster: probably
18:02  kanzure: okay, so uh..
18:02  cbreak: depends on which branches you push
18:03  wereHamster: so push the branches which you want to have there..
18:03  cbreak: you can't push repositories
18:03  kanzure: oh. i forgot to push all of my branches
18:03  jast: well, we can push them correctly all in one go
18:03  jast: once everything else is done
18:03  kanzure: does this apply to tags too?
18:03  kanzure: i.e. do i have to push tags
18:03  cbreak: yes
18:03  cbreak: if you want to
18:03  kanzure: ok thank you
18:03 --- ShikadiLord is now known as shadowmaster
18:03  cbreak: you don't have to do it
18:03  kanzure: don't maaaake meee
18:03  cbreak: but if you don't push the tags, no one else will either
18:04  kanzure: oh man.. tags/release-1.0.1_2008-05-06_0815-EST
18:04  kanzure: i am tempted to rewrite these names. but that will probably break documentation and bug tickets :(
18:04  cbreak: weird tag name
18:04  wereHamster: a date in the tag.. -.-
18:05  cbreak: in the tag NAME even :/
18:05  cbreak: maybe a heavy tag would have been better
18:06  wereHamster: if only svn had the
18:06  wereHamster: m
18:06  cbreak: it has tags?
18:06  kanzure: so this might be an opportunity for me to improve the tagnames
18:06  kanzure: http://stackoverflow.com/questions/2006265/is-there-an-standard-naming-convention-for-git-tags
18:06  kanzure: one suggestion someone gave me is to name it v1.0.1_2008-05-06_0815-EST
18:06  kanzure: but that still has a timestamp.. thing
18:06  cbreak: most of my tags are either named like dead/somename, where somename is the name of some experimental branch which didn't work at all
18:07  cbreak: or they are named like v1.0-release1
18:07  bremner: dead/like-me
18:07  xiong: I used git-mv to move and rename a file. Then, I checked out another branch and attempted to do the same thing. On the second branch, the file is... where it was. But git-mv raises the error: "fatal: renaming lib/Test/Ranger.pm failed: No such file or directory" I tried git-gc. What?
18:07  jast: bremner: you have just won two internets
18:07  wereHamster: kanzure: just v1.0.1
18:08  wereHamster: xiong: did you commit the move?
18:08  xiong: wereHamster, Before stupidly opening my mouth, I will check.
18:10  edulix: if the refs/notes/foo was updated in the server and also in my local repo, there's a non fast forward and it won't automatically pull. how do merge them? I want to do it in the most automated way
18:10  cbreak: xiong: git is transactional, nothing happens to the history until you commit it.
18:10  xiong: wereHamster, Okay. I scanned, checked out the other branch, scanned again, checked out the second branch, ran git-status. All okay.
18:10  xiong: I did in fact commit the mv on the first branch. gitk confirms.
18:11  jast: xiong: and ls, unlike git mv, finds the file?
18:11  xiong: Um, naturally, when I check out the second branch, the file is still unmoved. So, I don't see why git-mv complains.
18:11  cbreak: git status is clean?
18:12  xiong: jast, Indeed; ls lib/Test/Ranger.pm shows it. git-status is clean.
18:12  jast: xiong: does the target directory exist?
18:12  xiong: !
18:13  xiong: Thank you, jast
18:13  jast: you're welcome :)
18:13 * xiong wears the dunce cap in the corner, or at least makes coffee for all
18:13  jast: to be fair, that's a somewhat surprising interpretation of the error message
18:14  cbreak: it's kind of true though
18:14  jast: sure
18:14  jast: few of git's messages and documents suffer from not being true
18:15  jast: many more suffer from being opaque in conveying that truth :)
18:16  cbreak: there should be a dictionary. git<->english
18:17  jast: you mean the gitglossary manpage? ;)
18:17  xiong: The error was literally true; I have no cause to complain.
18:21  xiong: No! Waitaminnit. The dry run succeeded. Doing it for real failed as before. (??)
18:22  xiong: Okay, now. Dumberer: Created target dir in the wrong place. Now why did the dry run succeed?
18:24  xiong: NM. Time to mv on.
18:26  xiong: The dangers of work before coffee.
18:26 --- jogla_ is now known as jogla
18:32  kanzure: how can i grab all remote branches that git branch knows about? do i have to run git checkout -b namehere remotes/namehere?
18:35  pfifo: every time I type 'git pull upstream master' there is a merge conflict, even if I have not modified any code on my part. afterwards if i simply type "git commit -a" it makes a commit with the files in question contining "<<<<< HEAD" and other bad data. Why is git doing this?
18:36  wereHamster: because there is a conflict
18:36  wereHamster: either you made local changes, or upstream rebased their branch
18:36  wereHamster: also, here you see why you should avoid 'commit -a'
18:36  pfifo: all i want is to have the latest upto data code, i DO NOT want to have to mannually apply a patch line for line every time. How can I perform an operation like this?
18:36  wereHamster: pfifo: git remote update && git checkout upstream/master
18:38  jast: are you sure you want to recommend detaching HEAD?
18:38  wereHamster: if he just wants the latest code and doesn't want to work on it..
18:39  jast: but it'll make subsequent updates more complicated
18:39  wereHamster: no
18:39  jast: he'll have to run two commands for each update
18:39  pfifo: yeah i need to work on it
18:39  jast: well, I assume that you committed some kinds of changes earlier on
18:39  wereHamster: he'll have to anyway. The other option is git remote update && git reset --hard upstream/master
18:39  jast: is that correct?
18:39  wereHamster: 'all i want is to have the latest upto data code' ...
18:40  pfifo: man git is a problem at ever corner
18:40  jast: the 'git' manpage can be found at http://git.or.cz/man/git [automatic message]
18:41  jast: I can't help you if you don't answer my questions
18:41  jast: and complaining certainly isn't gonna help ;)
18:42  pfifo: jast, no, when i pulled upstream at the START of my workday I hade made ZERO changes unless i am coding in my SLEEP
18:42  jast: pfifo: no, I meant at any point in time before that pull, in the same local repository
18:43  pfifo: NO, i was SLEEPING, there is no possible way anything could have changed unless my computer is compromised and there is some hacker helping me on my code
18:43  jast: you slept for your whole life before the pull?
18:43  jast: you were sleeping while you cloned the original repository? ;)
18:44  wereHamster: pfifo: if you are 100% sure that you had no local changes, it's still possible that upstream rewrote history
18:44  jim: I'm trying to set up a gitorious, and in the process trying to decide which rails I should use, rails-2 or rails-3?
18:44  wereHamster: jim: -> #gitorious, thanks
18:44  jast: jim: probably best to ask the gitorious folks
18:44  pfifo: look, I read the diff file, EVERY SINGLE change that it described was done by the other guy!!!
18:44  jast: what diff?
18:44  jast: merge generates something other than a diff
18:44  wereHamster: so he rewrote history. Go complain to him..
18:44  jim: sorry... but I've been on that channel for several days with no response
18:44  jast: yeah, sounds like unannounced history rewriting to me, too
18:44  wereHamster: jim: then wait longer
18:45  jast: jim: perhaps they're better reachable some other way, or perhaps there's some kind of gitorious forum or mailing list or something
18:45  pfifo: jast, regardless of filetype, ALL THE CHANGES WERE DONE BY THE OTHER GUY
18:45  wereHamster: SO HE REWROTE HISTORY
18:45  jim: that sounds like a good idea
18:45  wereHamster: god.. one of these days..
18:46  pfifo: WHY DO I HAVE TO MERGE THIS LINE BY LINE BY HAND?!?!?!?!?!?
18:46  jast: pfifo: in that case, ask him whether he rewrote history, and if he did, it's his fault
18:46  wereHamster: it's pointless...
18:46 * wereHamster gives up
18:46  jast: history rewriting makes merges difficult to impossible
18:46  jast: that's why we tell people who do history rewriting to only do it with stuff that they haven't shared with anyone, or at least to tell everyone else about it
18:46  pfifo: git is difficult to impossible, how do I get the latest code?
18:47  wereHamster: pfifo: git remote update && git reset --hard origin/master
18:47  jast: note that you'll have to redo that whenever the upstream guy thinks it's, once again, time to screw over everyone who clones from him
18:47  jim: pfifi, so if you want to impossible, in git that will be difficult,,,
18:47  jast: also, please lay off the rudeness. it's neither our fault that you are having problems nor are we more likely to help you if you annoy us. :)
18:48  jim: yesterday was an interesting precursor to that comment
18:49  pfifo: wereHamster, then to work on the code I can do 'git checkout -b pfifo' to make something I can work on?
18:49  jast: pfifo: yep
18:49  pfifo: jim shut up ive had enough of you
18:49 --- ChanServ sets modes [#git +o jast]
18:49  wereHamster: pfifo: yes
18:49 --- jast sets modes [#git +b *!*pfifo@68.204.56.*]
18:49 <-- jast has kicked pfifo from #git (please moderate your tone, thank you.)
18:50  wereHamster: he had it comming...
18:50 @jast: can't say I didn't warn him
18:50  jim: since at least yesterday
18:50 --- jast sets modes [#git -b *!*pfifo@68.204.56.*]
18:50 --- jast sets modes [#git -o jast]
18:54  allaire: sometimes I get this error when I git pull  ->   error: Ref refs/remotes/origin/master is at 47efd7c0fec0de5784f265697ee0a9e0300b5134 but expected 3498ec981916c5147f0a9d8eb39b077ed3c825bb     — and it happens, I have to git pull a second time
18:54  allaire: when it happens*
18:54  allaire: it works the second time, but I would like to know why it gives me an error on the first time
18:58  doener: allaire: looks like the ref got changed while fetching
18:59  allaire: doener: when does this happens?
19:00  doener: allaire: could you pastebin the result of: git config --get-regexp remote.
19:02  allaire: doener: this? http://pastie.org/private/ija8rwdfmux32jx5bk7hq
19:02  danigm: Hello. I'm trying to collaborate with git-notes, but I'm getting non-fastforward, how can I merge notes branchs?
19:03  danigm: http://pastebin.ca/2004581
19:03  doener: allaire: ok, and: git branch -r | grep -- '->'
19:03  jast: isn't notes merge a work in progress?
19:03  jast: I haven't been following development all that closely, though
19:03  kanzure: jast: when i ran git-svn, i ended up with lots of refs/remotes/somebranch branches
19:03  kanzure: i would call those "remotely tracked branches" right?
19:04  allaire: doener: this gives me nothing
19:04  kanzure: what i'm wondering is why "remotes" doesn't show up on "git remote"
19:04  jast: kanzure: git-svn is a bit special. :)
19:04  kanzure: got it
19:04  jast: 'git remote' doesn't show branches at all, it only shows remotes that are configured in .git/config
19:04  doener: allaire: hm, maybe an old git version.
19:04  kanzure: right
19:05  kanzure: jast: so git branch -a lists them as remotes/branchname because ..?
19:05  allaire: doener: git version 1.7.3.2
19:06  jast: kanzure: because it's shorter than refs/remotes/branchname? I don't know the exact reasoning :)
19:06  doener: allaire: hm, what's the output of just "git branch -r"?
19:06  wereHamster: kanzure: because those are remote branches
19:06  kanzure: i guess it's something to do with remotely tracked branches
--- Log closed Sun Nov 28 19:12:10 2010
--- Log opened Sun Nov 28 19:12:32 2010
19:12 --- Users 651 nicks [0 ops, 0 halfops, 5 voices, 646 normal]
19:13  kanzure: one of the branches in the svn repo was "cad" http://diyhpl.us/cgit/nanoengineer-fixed/tree/?h=cad
19:13  kanzure: all of these folders look like they were supposed to be tags
19:13  kanzure: i have no idea what's going on :x
19:14 --- Channel #git was synced in 132 seconds
19:14  kanzure: if i decided to fix this does anyone have a suggestion?
19:15  edulix: how do I do a manual git notes merge?
19:15  doener: allaire: hm, could you pastebin the whole of "git config -l"?
19:20  allaire: doener: sorry I also had   origin/HEAD -> origin/master  when I did branch -r
19:21  allaire: doener: http://pastie.org/private/u7wpxb1aoeaz7za7ykgrq
19:23  doener: allaire: hm, why didn
19:23  doener: 't the grep keep that?
19:23  doener: allaire: anyway, that allows for my first idea
19:23  doener: allaire: I guess "git ls-remote origin" lists refs/heads/HEAD, right?
19:25  allaire: yes
19:25  doener: that is "unusual"
19:25  allaire: http://pastie.org/private/3tryoz9thbt1n5irxj6lq
19:25  doener: and it means that git fetches that ref and tries to store it in refs/remotes/origin/HEAD, which is a symref that points at refs/remotes/origin/master
19:26  doener: so what happens is that refs/remotes/origin/master gets updated twice, once for the remote's refs/heads/master and once for refs/heads/HEAD
19:26  allaire: hurm
19:26  allaire: weird
19:27  allaire: how could I fix this :s
19:27  doener: allaire: get rid of refs/heads/HEAD
19:27  doener: allaire: ... in the remote repo
19:28  allaire: doener: I'm still a git noob, how could I do this =/
19:28  doener: allaire: if you're ok with just deleting it: git push --delete origin refs/heads/HEAD
19:31  allaire: doener: ok done, so it should be alright now? when I do git ls-remote origin I only have HEAD and refs/head/master
19:31  doener: allaire: looks good
19:31  allaire: ok
19:32  allaire: and now when I do git branch- r, i get   origin/HEAD -> origin/master
19:32  allaire: how come it aint just origin/master
19:32  allaire: ?
19:32  allaire: like in my other repo
19:33  allaire: is it because I cloned this one?
19:33  doener: allaire: yup, clone creates that symref as a convenience
19:33 --- o_o is now known as Guest29679
19:34  doener: allaire: origin/HEAD works as an alias for origin/master, and as things named foo/HEAD may be abbreviated as just "foo", so just "origin" will work as an alias for "origin/master"
19:35  doener: allaire: i.e. the origin/HEAD symref marks the "primary" branch for that remote, and you get "origin" as a shortcut for it
19:35  doener: allaire: you can alter that symref using "git remote set-head"
19:36  allaire: doener: and only have origin/master?
19:37  doener: allaire: sorry?
19:38  allaire: doener: it there any advantage of doing git remote set-head?
19:38  allaire: doener: it will simply remove the symlink?
19:38  allaire: doener: should I do git remote set-head -d or git remote set-head -a ?
19:41  doener: allaire: totally up to you. As I said, it's just for your convenience, so you can say e.g. "git log origin" instead of "git log origin/master"
19:41  doener: allaire: if you don't want/like that, feel free to drop the symref, using set-head -d
19:42  allaire: doener: will I still be able to do git push and not git push origin master?
19:45  doener: allaire: sure
19:45  doener: allaire: push by default just looks for branch heads that exist in both the source and the destination repo
19:46 --- danigm is now known as danigm_out
19:47  allaire: doener: oh, so if I get it right, if I'm on another branch, and I do git push, it will push to the branch I'm on my computer?
19:48  allaire: (if it's on the remote)
19:50  kanzure: hrm still playing around with git-svn stuff..
19:51  kanzure: does svn have hierarchical tags or branches?
19:51  cbreak: doesn't even have normal tags and branches
19:51  kanzure: i.e. if there's a file in svn: branches/cad/something_else/finally_code is cad/something_else a branch?
19:51  cbreak: all it has is copies
19:51  kanzure: i've noticed :(
19:51  kanzure: but is it within the realm of reason to think that people might have used this svn repo in that way
19:51  cbreak: and svn loses history all the time
19:52  cbreak: maybe there's a trick though
19:53  allaire: doener: thanks alot for your time :)
19:53  cbreak: but when someone moved a project in svn for me, it seemed to have no history at all
19:54  kanzure: cbreak: i see.
19:56 --- danigm_out is now known as danigm
20:06 --- napster_123_ is now known as napster_123
20:35  homa_rano: how can I see which local branches are tracking which remote branches?
20:35  jast: git branch -vv
20:37  homa_rano: jast: thanks, is there some more machine parsable format?
20:38  bremner: .git/config ?
20:38  jast: the config file
20:39  homa_rano: ah, that would work
20:41  jast: you can even let 'git config' extract the relevant parts for you
20:42  homa_rano: jast: what would be an example for seeing what master is tracking?
20:43  jast: git config branch.master.remote and branch.master.merge
20:43  jast: not literally, of course :)
20:44 --- BeerPerson is now known as BearPerson
20:46  homa_rano: jast: so remote is which repo, and merge is which branch in that repo?
20:46 --- ferai is now known as jefferai
20:47  jast: homa_rano: yes
20:47  homa_rano: thanks
20:55 --- danigm is now known as danigm_out
21:07 --- danigm_out is now known as danigm
21:09  joeyh: what do people do in gitignore or gitattributes in order to match any files under a directory, including those in subdirectories? dir/* dir/*/* dir/*/*/* ...?
21:10  SethRobertson:  /dir works for me
21:10  SethRobertson: I imagine dir/ would also work
21:10  joeyh: maybe for gitignore but not for gitattributes does it?
21:11  SethRobertson: I only tried for .gitignore.  However, would a * in dir/.gitattributes work?
21:11  joeyh: oh, maybe I could, I was thinking in terms of a toplevel .gitattributes
21:12  joeyh: yes, that works
21:12  joeyh: seems it should be doable toplevel too, but I can't see how to
21:13  joeyh: dir/ does not work
21:13  joeyh: hmm, * in dir/.gitattributes works if you're not in dir.. but if you're in dir, it doesn't!
21:15  SethRobertson: Both /foo and foo/ work for me in .gitingore
21:16  joeyh: that is, `cd dir; git check-attr foo bar` doesn't work, but `git check-attr foo dir/bar` does work
21:16  joeyh: I guess that's a different problem tho
21:19 --- paradig is now known as paradigm
21:21 --- borior_ is now known as borior
21:21  SethRobertson: joeyh: the problem you mention appears to be something that git-check-attr does (specifically it does not handle relative paths).  I imagine that if you are actually using gitattributes in anger it will work
21:22  SethRobertson: If you submit a patch for it, it probably would be applied
21:22  joeyh: yeah, ok, it expects dir/bar even when in dir
21:22 --- o_o is now known as Guest62552
21:23 --- sid3k` is now known as sid3k
21:26  kanzure: so i'm starting to think that git-svn failed to treat all of the branches under svn:/branches/a/* properly
21:27  kanzure: is there anything i can do to fix this? now i have a branch remotes/a under git but files like remotes/a/folder/blah.py don't have their commit history
21:37  monkeytail: when i change something in a not mergeable file.. do i have to delete the conflict markers <<<, === etc ?
21:37  patrikf: monkeytail: what's a not mergeable file?
21:38  monkeytail: patrikf: ehmm.. i mean a file thats gives a merge conflict
21:39  patrikf: monkeytail: oh, right. yeah, you remove the markers
21:40  monkeytail: patrikf: ty
21:58  jaalto: I this a local problem or is http://repo.or.cz/ gone?
21:58  jaalto: git clone git://repo.or.cz/anything-config.git => repo.or.cz[0: 62.24.64.27]: errno=Connection refused
21:58  edulix: how do I solve a conflict when pulling refs/notes?
21:59  jaalto: edulix: REsolev as usualy (edit confluct markers, followed by "git add")
22:01  edulix: jaalto: I want to do it in automatic manner, and I don't understand why there's a conflict when origin has added a note when I didn't do a pull and I added a note
22:03 * kanzure tries svn-all-fast-export
22:03  kanzure: thanks cbreak, doener, jast, wereHamster :)
22:10  edulix: git notes drives me crazy grr
22:38  jaalto: edulix: Unfortunately conflicts can't be resolved automatically. If both sides added A, then you need to pick one of them. (git checkout --ours|--theirs)
22:39  edulix: ok
22:40  edulix: how can I execute a script before a git fetch or a git pull is done?
22:40  FauxFaux: Is there no hook for it?
22:40  smik: Any free private Git reposotory?
22:41  edulix: FauxFaux: that's what I cannot find, there's a post-merge hook, but that's not what I want
22:42  frogonwheels: smik: host your own on gitolite ?
22:45  smik: frogonwheels: Hmm, so for what I have skimmed, Gitolite allows me to create my own Repo server.
22:46  frogonwheels: smik: yes
22:47  smik: frogonwheels: I was interested in knowing if some service (similar to Github) allowed hosting my repo (even with limited space) which is private.
22:47  edulix: isn't there a way to wrap git pull? or to add a pre-pull hook?
22:48  patrikf: edulix: what are you trying to achieve?
22:48  edulix: patrikf: I need to execute a script before pulling
22:49  patrikf: edulix: I got that part. to do what?
22:49  edulix: mercurial for example has an easy way to wrap commands, doesn't git have any?
22:49  edulix: patrikf: to merge my notes with remote branch
22:50  patrikf: maybe an alias would do?
22:52  edulix: patrikf: if I create an alias that overwrites git pull, how do I call the original git pull ?
22:53  patrikf: I meant an alias with a different name
22:53  patrikf: don't know if you even can override builtin commands
22:53  edulix: no, I don't want that...
22:53  edulix: I want a proper wrapper
22:54  cbreak: edulix: that will never be a problem
22:54  cbreak: since aliases can not overwrite built in commands
22:54  edulix: cbreak: which is what I wanted xD
22:55  cbreak: not possible.
22:55  edulix: cbreak: so again, how do I wrap a built-in command like pull?
22:55  cbreak: at least not with aliases
22:55  cbreak: don't
22:55  edulix: or get a pre-pull hook
22:55  cbreak: or just patch git
22:55  patrikf: I've never used notes, but your approach seems overly complicated
22:55  edulix: cbreak: I'm writting an extension
22:55  cbreak: just don't use pull if you don't want it
22:56  edulix: cbreak: I want it. I just want to do some stuff before it gets called
22:56  cbreak: then make a new command that you use instead
22:56  edulix: you know, what would do that? a hook, but there doesn't seem to be a pre-pull hook
22:56  cbreak: pre pull makes no sense
22:56  cbreak: pull is just a fetch and merge combined
22:56  edulix: well then pre-fetch
22:57  edulix: as I said at the begining :P
22:57  cbreak: what for?
22:57  cbreak: there's no such hook though
22:59  edulix: cbreak: I said, to pull correctly notes from a remote. why? because they don't merge correctly. you will say... so fix it! that's being done by sb (Johan), but in the mean time, I want a solution for current git version
22:59  cbreak: notes? never used those.
22:59  cbreak: can't help with that
23:04  emdete: hi, i am using gitattributes and while the man page says it is using pathnames for the pattern it doesn'seem so. it uses the basefilename in fact, a directory part is not used correctly. is that intended or did i do something wrong?
23:11  DrNick: emdete: .gitattributes uses the same patterns as .gitignore, so you should probably read that man page
23:11  frogonwheels: emdete:  did you start with  /  for your pathname?
23:12  emdete: frogonwheels: no
23:13  frogonwheels: emdete: worth a try  / is the project root  (not the system root)
23:13  emdete: hm, it's strange. i need it for archive to ignore files. it only does ignore it if its the plain name without dir.
23:13 --- lbt is now known as lbt_away
23:14  emdete: gitignore(5) says you can have it in any dir, those were not working also. when is the match done? i use --prefix= with archive too
23:14  patrikf: emdete: what's your file called, what's your pattern and where did you put it?
23:15  patrikf: (number 1 and 3 relative to the project root)
23:15  emdete: the file to ignore is called "Makefile". it is in a subdir. is put a line "subdir/Makefile export-ignore" in .gitattributes
23:16  emdete: which did not work as expected. simple "Makefile export-ignore" works but for all those files.
23:16  frogonwheels: emdete: did you try    /subdir/Makefile  export-ignore           ?
23:17  emdete: putting the .gitattributes into subdir/ having "Makefile export-ignore" did not work either.
23:17  emdete: wait, let me try
23:17  edulix: uhm, is there any hook executed post-push (in my local repo)?
23:17  Eiler: anyone here uses git in gentoo?
23:17  tbrock: hey guys, i'm trying to merge two branches
23:17  tbrock: one called master and the other called tb
23:18  patrikf: Eiler: maybe. can you please just ask your question?
23:18  tbrock: it's saying that two files need merge and that i need to resolve my current index first
23:18  parasti: edulix: why do you need a hook?  just make an alias
23:18  Eiler: what is needed or preferred to make git work in gentoo (and possibly vim)?
23:18  edulix: parasti: because I'm writting a git command/extension?
23:19  patrikf: Eiler: uh, well, that's probably a question for #gentoo then
23:19  jim: Eiler: a compiler? the build requirements for git?
23:19  emdete: no, a '/' doesnt help
23:19 --- ChanServ sets modes [#git +v carpii]
23:19  Eiler: jim its already in portage
23:19  thiago_home: tbrock: fix the conficts, git add the two files, git commit
23:19  jim: what version?
23:19  Eiler: does it matter?
23:20  frogonwheels: Eiler: for vim, uses tpope's fugitive + vim-git  repos on github
23:20  jim: maybe
23:20 +carpii: how can i roll back the past 3 commits on a branch, check that out to another branch and then reapply the 3 commits ?
23:20  banisterfiend: man git-push
23:20  jast: the 'git-push' manpage can be found at http://git.or.cz/man/git-push [automatic message]
23:20 +carpii: reapply to the new branch
23:20  frogonwheels: Eiler:  .. and I suggest vim-pathogen  first to manage them
23:20  tbrock: how do i do that?
23:20  tbrock: would you be able to help me
23:22  Eiler: ah neither of those are in portage
23:22  frogonwheels: Eiler: no - just get them from  https://github.com/tpope
23:22  frogonwheels: Eiler: once you install git of course.
23:22  Eiler: yep, i've installed git, thats it
23:23  parasti: carpii: git format-patch --stdout HEAD~3 > commits.mbox; git reset --hard HEAD~3; git checkout otherbranch; git am commits.mbox
23:24  Eiler: frogonwheels ah these are just scripts, so they will be easily installed
23:24 +carpii: nice, thanks :)
23:24  frogonwheels: Eiler: exactly.  and pathogen first - 'cause that makes installing/updating the others really easily
23:24  Eiler: aha
23:25  frogonwheels: Eiler: modifies the 'runtimepath'  so you don't have to copy files around from the other repos
23:25  Eiler: when using git, can i do only some people can access the project or does every got access through it with github? or can i keep it totally private just local on my computer?
23:25  jhelwig: Well, that's kind of annoying... "jhelwig #git :Cannot change nickname while banned on channel".  What did I miss?
23:26  tbrock: i'm trying to remove the two files from git
23:27  tbrock: and it's not working
23:30  wereHamster: tbrock: git rm <file
23:30  wereHamster: <file>
--- Log closed Mon Nov 29 08:19:23 2010
