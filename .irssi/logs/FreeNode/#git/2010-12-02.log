--- Log opened Thu Dec 02 15:16:28 2010
--- Log closed Thu Dec 02 15:16:28 2010
--- Log opened Thu Dec 02 16:28:53 2010
16:28 --- Users 700 nicks [0 ops, 0 halfops, 6 voices, 694 normal]
16:28  bremner: so is shooting yourself in the foot
16:28  bremner: orion: what history of your fork is there in the parent project?
16:28  wereHamster: orion: yes, it's fairly easy. But in most cases _not_ what repo owners want to do
16:28  orion: bremner: I made one commit to my fork. None of my code ever touched the parent project.
16:29  bremner: so there should be nothing to remove from the parent project if you only committed to your fork
16:29  wereHamster: orion: then what is it you are trying to remove from the parent projcet?!?
16:30  orion: wereHamster: See PM
16:30  orion: I am green.
16:31  wereHamster: so? Delete your repo.. then you're done
16:31 --- Channel #git was synced in 224 seconds
16:31  Phally: bremner: fixed it.. just told the story to a friend of mine and he had something similar, the cause was two git repos somehow conflicting.. i had added a submodule which caused it, i did nothing out of the ordinary, i have like 10 submodules. i removed the submodule folder and git status works again
16:31  thiago: orion: green orion?
16:31  orion: thiago: See PM
16:31  orion: I did delete the repo.
16:31  orion: but it's not going away
16:31  wereHamster: orion: the graph data is cached. You'll be removed once github updates the graph data the next time
16:31  orion: wereHamster: Oh ok
16:32  karihre: EnderMB: that is probably because the S drive repository is not "bare", git will not allow you (unless forced) to update the checked out branch
16:33  orion: wereHamster: But, I don't need the project owner to rewrite history to accomplish what I want to accomplish, right?
16:33  wereHamster: orion: no, because your commits were never applied to the original project
16:33  orion: Alright, awesome. Thanks. :)
16:34  EnderMB: karihre: I think I'm misunderstanding. I have a repo and files on my S drive, and I clone to my C drive. Now I've changed the files on the C drive and I want to update the S drive with these changes. Is "push" what I need to do?
16:34  orion: I have a sort of OCD with coding and git. I have to have the tree look pretty.
16:34  orion: If it doesn't look pretty, I will go crazy.
16:34  bremner: there is medication
16:34  orion: And od forbid I make a grammatical/spelling mistake in a commit message.
16:35  orion: God*
16:35  sitaram: what about spelling mistakes on IRC?  How do you take them back?
16:35  orion: I don't,
16:35  orion: But I correct them.
16:36  karihre: EnderMB: yes, but because the "master" branch is checked out in the S drive repository it won't allow you to push to that repository, the index and working tree would become out of sync and you would need to do git reset --hard to update the working directory on the S repository
16:36  orion: But, there is something about git that is so final.
16:36  parasti: orion: isn't Git the perfect tool for you then :P
16:36  orion: haha
16:36  orion: Yeah
16:36  sitaram: orion: tell that to the SVN Johnnie who keeps saying "svn is immutable, git is not"
16:36  orion: I love git. I just hate not being perfect/pretty with code and grammar.
16:37  karihre: EnderMB: you can change the receive.denyCurrentBranch setting on the S repository if you really want to be able to push to it and are ready to update the working directory manually or via hook or something
16:37  orion: If I made a mistake on a git repo, I feel like it's a mark against my character.
16:37  karihre: EnderMB: better question is probably, is someone working directly on the code on the S drive?
16:37  wereHamster: sitaram: ssh into SVN Johnnie's svn server and change the history behind his back :)
16:38  EnderMB: karihre: Nope. I want to eventually move the share drive to my website so I can automatically update my site from my local, cloned repository
16:39  orion: sitaram: Publishing keys on pgp keyservers is another one. I wish I could have my old keys removed.
16:39  karihre: EnderMB: okay, then the S drive repository should be a "bare" repository (with no working directory), then you can push to it without errors
16:39  wereHamster: orion: why?
16:39  orion: sitaram: Instead, I have a bunch of old keys back from when I was like 11 years old.
16:39  orion: wereHamster: Because those keys were never actually used to identify me.
16:39  orion: And they had dumb stuff in them.
16:40  wereHamster: orion: there's *lots* of dumb stuff you did in the intertubes already
16:40  orion: So when people search for my email, it's like a wart on my reputation.
16:40  orion: wereHamster: Like what?
16:41  karihre: EnderMB: and you can probably do a rename of the S:\Repo to S:\Repo.old and then "git clone --bare file:///S/Repo.old file:///S/Repo" to convert it
16:41  bremner: orion: you know this channel is logged, right? :)
16:41  orion: haha
16:41  orion: Of course. I am logging it too.
--- Log closed Thu Dec 02 16:45:47 2010
--- Log opened Thu Dec 02 16:51:15 2010
16:51 --- Users 701 nicks [0 ops, 0 halfops, 6 voices, 695 normal]
16:51  Leonidas: hmm, does anyone know of some tools to manage my home directory dot files with git?
16:53 --- Channel #git was synced in 150 seconds
16:54  Utoxin: How do I resolve a conflict that needs to result in deleting the conflicted file?
16:56  Utoxin: Nevermind. Figured it out.
17:12  Gitzilla: Demonen: This may help: http://git.rsbx.net/Documents/Git_Data_Formats.txt
17:12 --- dwmw2_gone is now known as dwmw2
17:14  wereHamster: Gitzilla: long time no see in this channel :)
17:15  Gitzilla: My client is almost always lurking and I do read (skim) the logs for interesting bits.
17:19  Number5: hello friends, how can I show a tag. I tagged once a commit, but now I want to see which commit I tagged, without knowing the tag is.
17:20  wereHamster: git tag will list all your tags
17:20  Number5: I want something like: git log --pretty=oneline , but with tag concatenated.
17:20  Number5: just git tag?
17:21  Number5: ok I see, but how to see from which commit I added the tag?
17:21  wereHamster: git show the tag
17:22  Number5: wereHamster: really? Damn, sometimes google don't just give me such simple results...
17:23  Number5: wereHamster: git show the tag didn't work for me. I mean, it's not like it has a built in intelligence to understand what you type.
17:23  wereHamster: or git rev-parse <tag>^{commit} if you just want the hash
17:24 * wereHamster usually expects at least a drop of intelligence from people around him
17:25  Number5: wereHamster: anyway thnx for your help, it's just not what I wanted to see.
17:26  wereHamster: so what is it you want to see?
17:26  wereHamster: a hash? The subject? The committer name, date? ..
17:28  Number5: wereHamster: I want to see in which commit I added the tag. I want a list of commits, so I can see where my tag began. It's not weird to know which commit started version v1.xx
17:28  wereHamster: git log <tag>
17:29  doener: tags don't "begin"...
17:29  karihre: maybe he wants git log HEAD...tag
17:29  mengu_: hi. i had a directory called admin in my repo but it was not in the repo.
17:29  mengu_: i have used git add
17:29  wereHamster: more like tag..HEAD, but oh well...
17:29  mengu_: but then i did a git rm -rf admin
17:29  doener: karihre: or maybe --decorate
17:29  offby1: it was in the repo, but not in the repo.
17:29  offby1: how very Zen.
17:30  mengu_: is it possible to bring that directory back?
17:30  Number5: wereHamster: thanks, this was at least something I can go on with.
17:30  FauxFaux: mengu_: Does it still show in git status?
17:30  mengu_: FauxFaux: no.
17:31  mengu_: it was in the dir where the repo was
17:31  mengu_: i did a git add and then did git rm
17:31  FauxFaux: Oh, git rm -rf.  Yes, it's technically possible to get it back but afaik there's no tools to help you.  The contents will probably show in git fsck -v?
17:31 +broonie: dc
17:31  FauxFaux: Uh, just git fsck.
17:31  Number5: doener: that is what I was looking for!
17:32  Number5: I wanted something like that: git log --decorate --pretty=oneline
17:32  mengu_: FauxFaux: i'm waiting for the output
17:32  Number5: So I can see a list of commits and next to it the tags, merges and comments.
17:33  Number5: So now I'm satisfied! Well you are really great guys!
17:33  mengu_: FauxFaux: http://paste.pocoo.org/show/299028/
17:33  mengu_: that is the output
17:33  mengu_: of git fsck
17:35  FauxFaux: mengu_: Yeah, one of those is your admin tree, and some of the others are the files.  | awk '{print $3}' | xargs -n1 git show etc.
17:36  FauxFaux: Unless someone knows of a less retarded way to do this.
17:37  mengu_: FauxFaux: i did not get how do i get them back
17:38  kanzure: doener: why is the "committer" and "author" value different in all of my commits now? (after my yesterday's rebase)
17:38  FauxFaux: mengu_: I think you have to use git read-tree?  Again, I'm just guessing from low-level stuff here.
17:40  doener: kanzure: during a rebase, you commit, so you become the committer
17:40  kanzure: doener: now all of my web interfaces are saying the commits were done "14 hours ago"
17:41  doener: kanzure: you could use filter-branch with a trivial env-filter to make the committer data equal to the author data
17:41  kanzure: even though the timestamps are clearly from 2004
17:41  doener: kanzure: probably the web-interface shows the commit date, not the author date
17:41  kanzure: right
17:41  kanzure: ok i'll probably go use an env-filter then
17:41  kanzure: (or maybe i should fix cgit?)
17:45  doener: your choice ;-)
18:01  mengu_: when i use "git add file" it is not in the repo until its committed right
18:01  mengu_: then why git rm is working on a file which is not in the repo
18:02  mDuff: mengu_, it's not in the repo, but is in the index
18:02  mDuff: mengu_, ...and git commands frequently have defined and documented behavior relating to the index.
18:02  wereHamster: mengu_: git does complain (error: 'foo' has changes staged in the index, use --cached or -f ..)
18:03 --- _psychic__ is now known as _psychic_
18:04 --- _Unode is now known as Unode
18:11 --- unreal_ is now known as unreal
18:16  mengu_: FauxFaux: thanks for the help
18:19  homa_rano: is there any way I can pull or fetch a commit that isn't mentioned by any ref in a remote?
18:19  homa_rano: someone seems to have pushed an unrefed commit to github and I can't pull it...
18:19 --- shennyg__ is now known as shennyg
18:20  wereHamster: no
18:21  homa_rano: related question: how did this happen?
18:21  wereHamster: and you can't push a commit to no ref on the remote. The only explanation is that he pushed the commit and later removed the ref or pushed an older commit to that ref
18:21  homa_rano: I see
18:25 +[exa]: I don't think there's some way to do this,.. but is there some command that has reverse effect of git-repack?
18:25 +[exa]: Like git-unpack-stuff
18:25 +[exa]: I doubt it's practical to have, I'm just curious
18:26  wereHamster: git-unpack-objects
18:28 +[exa]: oh. thanks
18:31 --- ChanServ sets modes [#git +v ded`]
18:33 +ded`: Ayone know of software to automatically watch for and pull changes from a repo? I know I could use chron, just wondering whether anyone's developed anything specifically for this.
18:34  wereHamster: don't you get an email?
18:34 +ded`: wereHamster, is that in reply to me?
18:41  SethRobertson: ded`: There are two options:  first, do it periodicly, second, do it in a (or as a result of a) hook on the server
18:41  SethRobertson: ded`: Email notification is pretty common, so you could have the incoming email trigger the pull.  A hook could also ssh to the remote and manually pull
--- Log closed Thu Dec 02 18:46:49 2010
--- Log opened Thu Dec 02 18:47:10 2010
18:47 --- Users 713 nicks [0 ops, 0 halfops, 7 voices, 706 normal]
18:47  SethRobertson: You have to work with what github provides you.  Email notification of commits is something they provide, so you could trigger off the receipt of that email, which might be faster for you
18:48 +ded`: Thanks, that was useful.
18:49 --- Channel #git was synced in 150 seconds
18:54  JimmyTheKid: how do I bring back a file I accidenty removed
18:54 +ded`: JimmyTheKid, were you tracking it in the repo?
18:54  JimmyTheKid: yes
18:55 +ded`: Have you made any changes /other than/ deketing that file, since the last commit?
18:55  JimmyTheKid: yes
18:55  JimmyTheKid: I have it deleted on my server
18:55  JimmyTheKid: but I made changes to it locally
18:55  JimmyTheKid: but the one on the server is so wrong, that I've deleted it
18:56  JimmyTheKid: but now I want to bring in the one I've committed locally
18:56 +ded`: One safe way is to stash away your current work (e.g. make a temporary commit containing all the outstadning work)
18:56 +ded`: Then checkout an earlier commit from before you deleted the file.
18:56  SethRobertson: JimmyTheKid: What does `git status` say?  Did you commit the delete?
18:56 +ded`: Then copy that file someplace outside your repo.
18:57 +ded`: Then go back to your working branch where you stashed away your current work.
18:57 +ded`: And retrieve that copy.
18:57  JimmyTheKid: says I'm on my latest branch
18:57  JimmyTheKid: no I didn't commit the delete
18:57  JimmyTheKid: I just typed git stash now
18:57  JimmyTheKid: and the delete "change" went away
18:57  halcyon918: Does anyone use gitweb and clone from their repos with "http://"?  I'm having trouble getting the latest copy of the repo from Apache...
18:58 +ded`: right.
18:58 +ded`: so copy it somewhere
18:58  JimmyTheKid: oh I have it now
19:00  kenichi: i've used interactive rebase in the past to ditch revs, but... this time, one of them is a merge, and it doesn't show in the list of revs to mess with.  what's my best option here?  (need to kill the last two revs, one is a merge gone awry)
19:02  SethRobertson: kenichi: Have you pushed?
19:02  kenichi: SethRobertson: not my commits, they were pushed to a github repo.
19:02 --- adamholt is now known as adamholt_away
19:02  SethRobertson: kenichi: If not, then just `git reset --hard <SHA>` to the SHA before the merge (or whatever the last valid SHA is.
19:03 --- adamholt_away is now known as adamholt
19:03  SethRobertson: kenichi: It is not recommended to change history on a repo other people might have access to
19:03  SethRobertson: They have to do special things to work around the change
19:03 --- adamholt is now known as adamholt_away
19:03  kenichi: SethRobertson: understood, it's private and everyone who accesses it is aware of this.
19:04 --- adamholt_away is now known as adamholt
19:05  kenichi: so.... in light of what is and is not recommended, this bad merge was pushed, and now it needs to be gone.  am i looking at revert here or is there a better way?
19:06  SethRobertson: If everyone else is aware and can do those special things, then you can use the reset like I mentioned
19:06  kenichi: use reset and push --force?
19:06  SethRobertson: yes.  The others need to `git pull --rebase` I believe
19:08  kenichi: SethRobertson: thank you very much :)
19:12  g3d: hi, I wanted to have my .git directory separate from working directory. I can set GIT_DIR env variable and this works. But this isn't very convenient, because when I go out of that working dir I don't want other repositories to use that GIT_DIR, obviously. I wanted to set a local config file, but you can only have a config in git repository, not in working dir. So it won't work either. Any suggestions please?
19:15  resno: is there any ide that has "good" git intergration. ie highlights diffs, and other things?
19:17  mDuff: resno, lots of 'em.
19:17  mDuff: resno, a better question would be along the lines of "I like IDEs $foo, $bar and $baz; which of them have mature git plugins available?"
19:17  resno: im looking at eclipse, and i dont get/understand its egit plugin... netbeans doesnt have one
19:18 * mDuff (that said) tends to look down his nose at anyone who needs more than vim
19:18  resno: mDuff: ah, your a vim snob
19:18  mDuff: ...well, "good" is relative; IDE plugins for git are as a whole relatively immature compared to their kin for mercurial
19:18  mDuff: resno, indeed -- same as any other right-thinking individual :P
19:19  resno: mDuff: vim is a text editor more then a ide right? it doesnt do code sensing or anything of that nature right?
19:19  mDuff: ...but last I knew anything implementing Eclipse's common interface would provide the color diff viewing and such you're asking about
19:19  mDuff: if you need "code sensing", you're using an insufficiently expressive language :P
19:21  mDuff: ...yes, vim is an editor -- it has a fairly powerful plugin interface, but it's not really into IDE territory. (Its prime competitor, emacs, _is_ in IDE territory in terms of functionality... but that's an entirely different holy war)
19:21  SethRobertson: emacs certainly does code sensing and typically colors up the wazoo, but it doesn't, for instance, really have refactoring support
19:22  mDuff: SethRobertson, depends on the language -- there are refactoring plugins for several target languages
19:22  mDuff: s/plugins/modes/
19:23 --- shennyg_ is now known as shennyg
19:23  resno: ok, maybe ive missed the vim boat.. when i vim something i dont get anything more then a text editor similar to pico, etc am i missing something?
19:23  mDuff: "similar to pico"?!
19:23 * mDuff is horrified
19:24  mDuff: resno, ...if you don't have your vim configured to have syntax highlighting, support for code indexing/navigation, auto-indenting to your local preferences, etc etc, yes, you're missing the boat.
19:25  resno: mDuff: indeed  i am... looking at the installs now
19:25 +[exa]: resno: you definitely should read some simple vim book
19:25  NfNitLoop: even without all of that, vim still has some nice text formatting commands that pico/nano lack.
19:26  resno: ive always ran from vim because of the saving and editng syntax lol
19:26  NfNitLoop: It's a bit oscure.  But less so than eclipse. ;)
19:26  NfNitLoop: er.
19:26  NfNitLoop: emacs.
19:26  parasti: Emacs has all that on by default (also we have cookies)
19:26  NfNitLoop: the other bbig bloated editor. :p
19:27  poindontcare: how to merge a branch to master so as to take newer files from the other branch , rather than have conflicts generated ?
19:28  NfNitLoop: poindontcare: --strategy=theirs
19:29  NfNitLoop: but that's not so much a merge as an overwrite.
19:30  poindontcare: yeah it should be fine  thanks !  strategy seems a nice concept :) , NfNitLoop
19:32  Orbixx: Can I ask about gitweb here?
19:34  resno: Orbixx: whats your question?
19:36  Orbixx: resno: I have gitweb 'working' with apache, despite no obvious config file being located (assuming its just defaulting to some internal vars at the moment).
19:36  Orbixx: However, I'm not entirely sure how it detects repos.
19:37  resno: oh, i dunno know that...
19:37  Orbixx: (gitweb config file, that is, not talking about the apache config for gitweb, which does exist and is working)
19:40  cubuanic: hello guys, which is the default value for core.excludesfile option? i don't see anything in manual about defaults for it
19:42  gp2k: Hi everyone.  Is there a way in git to find out where I cloned a particular repository from?
19:42 --- ChanServ sets modes [#git +v Cocytuz]
19:42  halcyon918: Orbixx: I'm just starting to use gitweb myself, and there's a config file that gitweb uses to point to the repos
19:42 +Cocytuz: cubuanic: empty?
19:42  Orbixx: halcyon918: I'm using the EPEL repos version of gitweb, which didn't seem to come with one.
19:43  Orbixx: Though, I'm just trying to use the one that came with gitosis.
19:43  halcyon918: Orbixx: there's a property in the Apache config that points to it, but I think by default it looks in /etc/gitweb.conf
19:43  cubuanic: Cocytuz: you asking me, or just not sure in your answer?... :)
19:43  halcyon918: mine has two lines that look like this:
19:43  halcyon918: $GIT= "/usr/bin/git";
19:44  halcyon918: $projectroot = "/<path to repos>/repos";
19:44  gp2k: ah, it is in ${REPO}/.git/config
19:44  Orbixx: halcyon918: Can you show me what your projects.list looks like?
19:45  halcyon918: Orbixx: I'm not really sure what that is (I'm new to Git)
19:45  Orbixx: halcyon918: Mine has similar, but it still doesn't show any repos.
19:46  halcyon918: Orbixx: maybe your Apache config is pointing elsewhere for the gitweb.conf file?
19:47  bremner: is there any important difference between force pushing a branch and deleting it and pushing it? (assuming nothing happens between).
19:47 +Cocytuz: cubuanic: not sure of my answer. git config -l gives no value, so..
19:48  cubuanic: ok, thanks, understood
19:48  d1zzy: bremner: I guess in the latter case there is a point in time in which the btranch does not exist
19:48  bremner: right.
19:48  cubuanic: i have no time to look into sources, but seems it's really just empty
19:48  d1zzy: bremner: if gc runs after that it will remove all dangling objects
19:48  Orbixx: halcyon918: Checked, it's pointing to the correct place.
19:49  d1zzy: the subsequent push will reupoad them
19:49  poindontcare: on git rebase it says need to remove rebase-apply directory
19:49  poindontcare: seems to be  on *(no branch)
19:49  poindontcare: any ideas ?
19:52 --- unreal_ is now known as unreal
20:01  dvaske: hi, anyone got a good howto/guide on using git fast-import. Preferably with a lot of examples.
20:02  cbreak: what do you think it's good for?
20:03  Orbixx: Why is gitosis not populating projects.list?
20:19  Orbixx: Does gitweb function as a method of providing a place to clone read-only from?
20:19  Orbixx: (If so, I can't figure it out ;o)
20:21  FauxFaux: Orbixx: No, it doesn't.  It just shows the things you put in .git/cloneurl at the top.
20:21  PovAddict: I have a history like this (square brackets indicate branches): A -- B [one] -- C -- D -- E [two] -- F -- G -- H -- I [master], how do I rebase so that two..master commits start from [one], iow so that B is the parent of F'?
20:21  FauxFaux: PovAddict: The --onto bit of the man page. :)
20:22  Orbixx: FauxFaux: Ah okay, thanks.
20:22  PovAddict: I spent an hour of excited coding and frequent committing and *then* noticed I was in [two] and not in [one]
20:22  Orbixx: FauxFaux: 'Best' way of providing read-only clones with git-daemon, yes?
20:22  FauxFaux: Yep.
20:22  Orbixx: Right you are.
20:22  Orbixx: Thanks.
20:23  PovAddict: rebase --onto one two master?
20:25  PovAddict: yes, perfect!
20:50  JimmyTheKid: how do I do a switch --relocate on git?
20:51  PovAddict: git remote set-url
20:52  parasti: or edit .git/config
21:03 --- ChanServ sets modes [#git +v jpeazy]
21:03 +jpeazy: What is the command to revert my working directory to the last origin/master? I've tried git reset and git checkout but I want to reset the entire directory to mirror the branch(e.g. discard newly added files). Would a viable option to be destroy/delete the directory and clone a new one?
21:04  SethRobertson: git reset --hard origin/master
21:04 +jpeazy: ooh okay, missing the branch on my reset cmd -- thanks SethRobertson
21:04  SethRobertson: Obviously this will destroy any changes, committed or otherwise, on your local branch.  We wary!
21:04  SethRobertson: Be wary.  We isn't so wary.
21:05 --- Freeaqingme is now known as Guest23346
21:05 +jpeazy: Yah I made a serious mess, I just didn't want to re clone the directory
21:08 --- MikhX_ is now known as MikhX
21:13 --- ChanServ sets modes [#git +v dropandho]
21:14 +dropandho: hey all! I was wondering if I could get some help on a really basic git function...ignoring a file so that it never gets committed to the repository...i tried reading the man and what i got out of it is that i should run gitignore...but i received an error....i see it's not a git command- any clues?
21:14  baccenfutter: dropandho: man gitignore
21:14  jast: dropandho: the 'gitignore' manpage can be found at http://git.or.cz/man/gitignore [automatic message]
21:14  theoros: dropandho: it's a file
21:16 +dropandho: thanks, i already read the man...but i had no idea that gitignore is just a file!
21:31  ajpiano: if git branch -r isn't showing branches that i know exist on the remote.... what's going on?
21:32  parasti: you haven't fetched them
21:32  ajpiano: yea i just realised that
21:32  ajpiano: :/
21:34  kanzure: huh this didn't work git filter-branch --env-filter "export GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME; export GIT_COMMITTR_EMAIL=$GIT_AUTHOR_EMAIL; export GIT_COMMITTER_DATE=$GIT_AUTHOR_DATE;"
21:34  kanzure: i mean, it worked, but it didn't do what i thought it should do
21:35  kanzure: doener left me :(
21:37  SethRobertson: What did it do and what did you think it would do?
21:37  theoros: did you know you typed COMMITTR
21:38  kanzure: theoros: the other two didn't work either.
21:39  kanzure: SethRobertson: i thought this would reset the committer name/email/date to the author name/email/date for all of the commits
21:39  kanzure: SethRobertson: in reality i only need to do it for a range of commits A to B including A and B
21:40  SethRobertson: What did it actually do?
21:44  parasti: double quotes might be screwing you over
21:44  SegFaultAX: Is it possible to commit to an empty svn repo through git-svn?
21:44  SegFaultAX: Or does the initial commit have to come from svn?
21:44  parasti: it has to come from SVN
21:45  SegFaultAX: parasti: How can I do an empty commit in SVN to a bean stalk repo? I'm not an SVN user :/
21:46  parasti: do I look like an SVN user? :P
21:47  parasti: sorry, no idea about that one
21:47  SegFaultAX: I hate svn :(
21:47  SegFaultAX: And I hate being forced to work with it.
21:47  parasti: maybe commit an empty .gitignore with svn
21:48  SegFaultAX: Hmm.
21:48  kanzure: SethRobertson: i'm not really sure. it had a typical run- it went through all of the commits and "did stuff"
21:48  kanzure: SethRobertson: but when i look at git show -s --format="%cd" id it just shows the original committer values (i.e. my name)
21:48  parasti: kanzure: sorry I didn't highlight you, did you try single quoting the command?
21:49  SethRobertson: So when you run `git branch -a` you see the original and new branch?  You are currently checked out on the non-original branch?
21:50  kanzure: parasti: huh, i'll try single quotes too
21:50  kanzure: SethRobertson: after i run filter-branch i should see a new branch? i'm presently on master, and i was on master before i started filter-branch
21:51  parasti: my reasoning is that $var references might be expanded by your current shell (to nothing)
21:51  parasti: singe quotes prevent that from happening
21:51  parasti: single*
21:52  SethRobertson: kanzure: The original copy of the branches should appear under refs/original.  If you are on master then you are cool.  Make sure you fix the "COMMITTR" problem when you fix the quoting
21:52  SethRobertson: that is ref/heads/master and not ref/original/master
21:53 --- ciaranm is now known as np
21:54  kanzure: SethRobertson: what should i do with the stuff in refs/original? git filter-branch suggests i can run -f to overwrite it
21:54 --- np is now known as ciaranm
21:54  SethRobertson: If you are re-running, go ahead and -f.  You will eventually want to delete all of those once you are done
21:57  eean: is there a meta command of some sort that will do all the stuff to make a git repo as small as possible?
21:57  kanzure: SethRobertson: i get "Rewrite 8039488f7e826d6af043b334c6d732eda82b1d79 (1/11649)export: 1: +0000: bad variable name"
21:58  kanzure: i probably also don't need to rewrite all 11649 commits here
21:58  baccenfutter: eean: git help gc
21:58  eean: gc does pruning and all that?
21:58  SethRobertson: kanzure: No clue
21:59  SethRobertson: eean: man git-gc  Specifically look at --aggressive and --prune.  Also look at git-prune and git-repack
21:59  jast: eean: the 'git-gc' manpage can be found at http://git.or.cz/man/git-gc [automatic message]
21:59  SethRobertson: The reflog may also cause references to remain unpruned
21:59  parasti: don't bother with --aggressive, it doesn't do anything useful
21:59  poindontcare: is there any possible reason that git rebase -i will go to a much older commit than the one specified on command line
21:59  SethRobertson: kanzure: However, a `git fsck --full` might be in order
21:59  eean: well I usually do git gc, git prune etc
22:01  parasti: as far as I understand, --aggressive drops all the incremental deltas created over time and tries to find new ones, which are not necessarily going to be any more optimized
22:01  eean: well this repo is 1.2g, I need whatever I can get :)
22:02  parasti: point being, it could end up being worse if your repo is already well packed
22:02  eean: I think it used to have a bunch of PNGs in it, obviously you can only compress so much.. might have to filter-branch that out
22:03  kanzure: SethRobertson: i could just clone from the last stable/acceptable point (before my committer/author rewrites)
22:03  kanzure: i guess git fsck on that copy would be a good idea too
--- Log closed Fri Dec 03 13:04:41 2010
