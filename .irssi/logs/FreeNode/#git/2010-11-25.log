--- Log opened Thu Nov 25 12:30:51 2010
12:30 --- Users 694 nicks [0 ops, 0 halfops, 9 voices, 685 normal]
12:30 --- Channel #git was synced in 1 seconds
12:30  iaj: lo there
12:30  cbreak_work: history is public if you don't control every instance of it :)
12:30  sinelaw: and may have done pull --all
12:30  sinelaw: does it matter?
12:31  sinelaw: they aren't touching my branch though, for sure
12:31  iaj: I got trouble... just trying to get my first git repo to my http github storage.. but I somehow fail : http://pastebin.com/j3aeRHBe
12:31  iaj: what's going wrong?
12:31  cbreak_work: http is read only
12:32  cbreak_work: iaj: read the error messages?
12:33  iaj: cbreak_work: why is it read-only tho? I don't quite get it :)
12:33  cbreak_work: read the error message
12:34  cbreak_work: http is read only because it is not possible to push to http repos
12:34 --- Unknown[OFF] is now known as Unknown[NF]
12:34  cbreak_work: you seem to try to use ssh, but you fail, among others because you don't read the error message
12:39  iaj: nah that's my local machine... permission denied (publickey)  that's confusing me "\
12:47  iaj: cbreak_work: it is not possible to push to http repos?  huh..?  how do I sync stuff then ?
12:54  cbreak_work: no
12:59  KeeperOfTheSoul_: wondering the best way to handle when preparing for a release, removing a particular feature
12:59  KeeperOfTheSoul_: is it best to revert that feature from the dev branch, then create a new feature branch and revert the revert?
12:59  zomg: Why not just create a release branch and revert the feature in it
12:59  zomg: Seems simpler that way to me
13:00  KeeperOfTheSoul_: zomg: could do, then merge release back in to dev and revert the revert?
13:01  zomg: Why would you need to merge the release back to dev?
13:01  doener: zomg: forward porting of bugfixes
13:01  KeeperOfTheSoul_: zomg: well I have to revert the revert at some point, otherwise when I create the next release and merge that in to master that feature won't come over
13:01  zomg: You could just do bugfixing in your dev and merge it to the release branch
13:02  doener: zomg: that would merge the whole "dev" history, not just the bugfixes
13:02 --- Putr is now known as Putr|Away
13:02  zomg: True, could be trickier that way
13:02  Bombe: There needs to be an option that tells Git to take the width for --stat from the current terminal.
13:02  doener: zomg: if you do the bugfixes on "dev", you'll have to resort to cherry-picking, which makes it easy to forget to pick some commit
13:03  KeeperOfTheSoul_: well even then, what happens when you create the next release?
13:03  KeeperOfTheSoul_: master has a revert merged in to it, so that feature doesn't come over (since it was reverted)
13:03  KeeperOfTheSoul_: so I still need to revert the revert somewhere, somehow ?
13:04  zomg: If you plan on doing more than one release without a certain feature maybe it would be best to move it to a feature branch as you suggested
13:04  shepherd: Would someone help me with this error please: "Stopping at filesystem boundary (GIT_DISCOVERY_ACROSS_FILESYSTEM not set)." ?
13:07  KeeperOfTheSoul_: zomg: and if I wern't, its how to neatly handle the revert so it doesn't get forgotten and people wonder why the feature magically disappeared when merging to master
13:07  KeeperOfTheSoul_: or is there a flag I can pass to merge to tell it to make everything identical to the release branch
13:08  KeeperOfTheSoul_: hmm, but then there's no need for master at all, only the release branches
13:09  iaj: lo there mhh I got a question - can't i just make a folder... and drop symlinks to it... and then use that dofiles folder as a repo?
13:10  KeeperOfTheSoul_: iaj: you want to create a symlink in your repo to a folder outside the repo, then commit that symlink?
13:10  iaj: KeeperOfTheSoul_: exactly
13:10  iaj: I just tried but the files are empty :\
13:11  KeeperOfTheSoul_: iaj: I'd advise against that, there are ways to commit a symlink to git, but it means if someone else checks out that repo they would need to have the same folder structure as you (outside the repo)
13:11  iaj: KeeperOfTheSoul_: oh..... so what is the best way to keep track of ones dotfiles?
13:12  selckin: ppl usually make install scripts to copy/symlnik from the repo to $home
13:12  KeeperOfTheSoul_: iaj: oh, and if the fs you checkout on doesn't support symlinks then you get nothing really
13:12  selckin: just look for dotfiles on github
13:12  KeeperOfTheSoul_: iaj: symlink the .file in home to the one in the repo
13:13  iaj: selckin: oh that would be a way
13:14  iaj: KeeperOfTheSoul_: huh... isn't that the way I wanted to achieve?
13:14  iaj: like in ~/dotfiles   ln -s ~/.vimrc .
13:14  selckin: other way around
13:15  iaj: ahhh now I see
13:15  alus: wereHamster: the plot thickens. https://github.com/37signals/fast_remote_cache#readme
13:15  KeeperOfTheSoul_: iaj: for vim I just have; source ~/vimfiles/.vimrc in my .vimrc file
13:15  alus: wereHamster: so in this case it is not actually copying, it is creating hardlinks
13:15  iaj: selckin: im trying to find this copy script you mentioned
13:16  KeeperOfTheSoul_: iaj: but that's just to stop me doing :e $MYVIMRC then saving (where upon vim's delete file/copy file write method breaks the symlink)
13:16  iaj: KeeperOfTheSoul_: i see hmmm yeah thanks :)
13:16  wereHamster: alus: I've been thinking about using snapshots (btrfs/zfs) instead of cp/ln
13:17  KeeperOfTheSoul_: don't know if vim handles that better on linux, but on windows it just deletes the sym and writes the file in to ~/.vimrc rather than overwrites the ~/vimfiles/.vimrc one
13:17  wereHamster: KeeperOfTheSoul_: vim likes to be stupid, eh?
13:18  KeeperOfTheSoul_: wereHamster: don't know, could just be vim on windows doesn't understand windows symlinks yet
13:18  alus: wereHamster: really?
13:18  KeeperOfTheSoul_: though that was 7.2
13:22  wereHamster: alus: realy what?
13:22  alus: wereHamster: have you really been thinking that?
13:22  wereHamster: yes. Just didn't have the chance yet to implement
13:22  alus: interesting
13:23  wereHamster: theoretically snapshots should be even faster than ln
13:23  wereHamster: don't know about zfs, but in btrfs almost guaranteed
13:42  sgronblo: cbreak_work: you can't push over http? is that only for the dumb http or?
13:43  FabianB_: for read only
13:49  sgronblo: yeah but http doesn't mean readonly by default does it?
13:49  josefrichter: guys, can I "merge" a file on HEAD with one of it's previous versions a few commits back, please?
13:50  wereHamster: yes you (we?) can
13:53  josefrichter: wereHamster: good. and how? :-)
13:53  wereHamster: you'll have to rewrite history, are you fine with that?
13:53  selckin: depends on what you meant with "merge"
14:05  josefrichter: selckin: I've made some changes in the past which I want to revert now. But I've also made other changes in the same file meanwhile, which I want to keep :-)
14:05  josefrichter: wereHamster: dont wanna rewrite history :-o
14:06  wereHamster: too bad for ya then
14:14  ssbr: (on windows) some of my local files have LF endings instead of CRLF. Can I make git be quiet about them? Everything is committed to the repo as LF, so I don't care about the local line endings.
14:14  ssbr: "warning: LF will be replaced by CRLF in path/to/file"
14:16  selckin: man git-config /autocrlf
14:16  jast: the 'git-config' manpage can be found at http://git.or.cz/man/git-config [automatic message]
14:20  alus: say I do not have a local checkout, but I have a remote url and a hash. is there a way to get the commit log message and committer's name?
14:23  wereHamster: clone the repo, then you can get the log message
14:23  alus: but cloning takes so much time
14:24  wereHamster: not my problem
14:25  alus: so the answer is "no" then
14:25  wereHamster: the answer to your question is yes, but you'd need to clone it first.
14:29  alus: well, the answer is also yes if I put on my shoes and walk to the github office and bribe the right number of people to let me access their servers so I can take them out plug them in to my own computer and grep the partition for the commit message
14:29  alus: so perhaps I should rephrase and say "efficiently"
14:29  wereHamster: you never said you didn't want nor coudn't clone the repo. You only said you didn't have a local clone to begin with
14:30  cirwin: is it possible to get git log --graph to show graphs with two heads? (i.e. git log topic...master --graph just shows me a list of commits, I'd like to see both heads coming from the mergebase)
14:30  wereHamster: knowing how to ask questions ftw...
14:30  Knirch: I have a local clone with references that I can't figure out how to get rid of, I've run git pack-refs --prune, git remote update --prune, git pull --prune, but they're still around. I can probably solve it by moving the cloned repo out of the way, clone it again and add my odd repository as a remote and recreate the branches I need
14:31  Knirch: but it just irks me that I can't find a clean way to weed those refs
14:31  alus: wereHamster: I thought "I do not have a local checkout" was a sufficient hint that I did not want one either. sorry.
14:31  KeeperOfTheSoul_: Knirch: reflog?
14:42 --- ChanServ sets modes [#git +v carpii]
14:42 +carpii: how do i create a local branch which is a mirror copy of remote branch ?    I tried just doing git branch m248, then git pull origin m248, but this has included all the commits to master, up to the point I created my local m248
14:42  wereHamster: carpii: git checkout -t -b <branch> origin/<branch>
14:42 +carpii: ahh thanks
14:43 +carpii: i was trying the track feature but was passing it to git branch instead of git checkout
14:43  wereHamster: branch creates a branch, you'd need to check it out after that
14:44 +carpii: well i couldnt get the syntax right either :)
14:45 +carpii: git branch m246b --track origin/m246
14:45 +carpii: fatal: Not a valid object name: 'origin/m246'.
14:46  wereHamster: options go before other arguments
14:46 +carpii: ahh gotcha. thanks
14:47 +carpii: is my cmd equivalent to the checkout ?
14:47 +carpii: if i then checkout out m246b
14:47  wereHamster: no.
14:47  wereHamster: yes
14:47 +carpii: ok :)
14:50 --- Guest57533 is now known as Freeaqingme
14:52 +carpii: do you know why this would still fail, with options before branch name?  -- git branch --track origin/m246 m246b
14:52 +carpii: not a valid object name m246b
14:52  wereHamster: git branch --track <branch you want to create> <branch you want to track>
14:53 +carpii: thanks again :D
14:53  wereHamster: carpii: man git-branch
14:53  jast: carpii: the 'git-branch' manpage can be found at http://git.or.cz/man/git-branch [automatic message]
14:54 +carpii: oki :)
14:56 +carpii: im still struggling even after reading manpage :/
14:56 +carpii: git branch --track m256b origin/m256   -- fatal: Not a valid object name: 'origin/m256'.
14:56  wereHamster: does 'origin/m256' exist?
14:56 +carpii: heh, actually i uh
14:56 +carpii: think ill go back to bed :(
14:57  wereHamster: good night
14:57 +carpii: todays not working out for me :)
14:57 --- Freeaqingme_ is now known as Guest17284
14:57 --- Guest17284 is now known as Freeaqingme
14:59 +carpii: the remote branch did exist, but local git didnt know about it until i did a git fetch
15:01  tasslehoff: I need a way to to a live backup of a git repo on a server. Any common ways to do that?
15:02 +carpii: rsync ?
15:03  tasslehoff: carpii: will that be safe if someone pushes to the repo during the commit?
15:04 +carpii: not 100% sure tbh
15:05 +carpii: theres some ideas here
15:05 +carpii: http://stackoverflow.com/questions/2129214/backup-a-local-git-repository
15:07  wereHamster: tasslehoff: git fetch/push
15:08  wereHamster: tasslehoff: rsync is not, push/fetch is
15:08  tasslehoff: wereHamster: as simple as that :) thanks
15:26  puchu: hi
15:26  puchu: how can i create a git diff output that looks like diff -burN?
15:27  wereHamster: what dose burN do?
15:27  jast: ISTR that -b is for ignoring whitespace changes
15:27  puchu: there are no lines like
15:27  puchu: diff --git a/Configure b/Configure
15:27  puchu: index 98e52c1..53d3d31 100755
15:28  puchu: a patch without this diff --git and index lines
15:28  jast: those lines are ignored by patch tools anyway
15:28  wereHamster: puchu: which tool can't handle those lines?
15:28  puchu: it can handle it but the patch is smaller and i update patches that dont use this lines
15:29  jast: git diff -b [...] | egrep -v '^(diff --git|index)'
15:30  puchu: jast: thanks
15:54  tasslehoff: I installed gitolite the deb-way, and the repos are put in /var/lib. I want the gitolite user to have a /home/gitolite folder and put them there. Is this something I can set in a config file?
15:54  wereHamster: tasslehoff: ln -s ...
15:56  tasslehoff: wereHamster: I'd prefer the real thing :)
15:58  alus: ln -f ... ;)
16:00  teukka: tasslehoff: the reconfiguration of the package is bit broken. but you can just move/copy the home dir and change it to the user (sudo usermod --home /home/gitolite gitolite)
16:00  Phillemann: How can I temporarily check out an earlier version of a file (early as in: a few commits away)?
16:01  wereHamster: checokut <sha1> -- <path>
16:01  Phillemann: Ah, thanks
16:09 --- ChanServ sets modes [#git +v dr_lepper]
16:11  sitaram: tasslehoff: (1) move the files as you want (2) change $REPO_BASE in the rc file to point to the new location
16:12  tasslehoff: thanks
16:17  _ikke_: How can you find the commits in one branch that are not in antoher branch?
16:17  wereHamster: _ikke_: git log --oneline <not here>..<but here>
16:18  tango_: which _will_ list cherry-picks though
16:18  wereHamster: ti will list commits
16:18  _ikke_: wereHamster: Ok, thank you
16:44  tasslehoff: I did a "git svn clone --stdlayout" to clone my svnrepo with all branches and tags. That worked, but when I did "git clone --bare" afterwards, the git clone seems to only have master, not the brances and tags.
16:44  wereHamster: correct.
16:45  wereHamster: are you trying to create a git mirror of a svn repo?
16:46  tasslehoff: wereHamster: we're moving from svn to git, and I'm testing the process on my machine.
16:46  tasslehoff: wereHamster: so what I want to end up with is a bare git-repo with everything from svn
16:47  wereHamster: create a bare repo, run git svn init, adjust the fetch refspecs so that git-svn fetches the refs into local branches. then run git svn fetch
16:52  ToreadorVampire: Hey all - does git have a way of specifying that I'd like to "hide" certain revision labels (branches and tags) within my local git config?
16:52  wereHamster: no
16:53  ToreadorVampire: This post-release project is beginning to mature and I'm seeing umpteen tagged versions and old branches that 99.9% of the time I (personally) don't care about and would like to suppress from the output of "git branch"
16:53  wereHamster: delete them
16:53  LiamH: Is repo.or.cz down?
16:54  wereHamster: LiamH: http://downforeveryoneorjustme.com/repo.or.cz
16:54  tasslehoff: how do I "adjust the fetch refspecs"
16:54  wereHamster: you edit the config file
16:55  ToreadorVampire: I tried that wereHamster but they are all on the public 'origin' repos, so every time I `git fetch` they get re-created within my local repos
16:55  LiamH: wereHamster: nice, thanks
16:56  ToreadorVampire: I sort of want a "delete this tag and don't fetch it anymore" function, allowing it to remain on the origin repos but have my local repos ignore it
16:57  wereHamster: ToreadorVampire: or you can change your fetch refspec if you only need to fetch certain branches
17:00  ToreadorVampire: wereHamster: Hrm, is there a per-repos git-config option that would allow me to specify "When performing a default fetch, ignore these refspecs" ?
17:00  wereHamster: no
17:00  ToreadorVampire: Rats
17:00  ToreadorVampire: OK, thans
17:00  ToreadorVampire: OK, thanks
17:01  ToreadorVampire: Will just have to be more explicit when I fetch - I'll use something like "git fetch origin just-the-branch-I-want" in the future rather than just a "git fetch", which is the shorthand I had been using
17:01  _ikke_: How can you find the commits in one branch that are not in another branch (4). I created a new branch (merge_improvements) based on master. I then executed git rebase improbements, and expected those 4 commits to be rebased onto that branch. But the result is that a lot more commits are now on the new branch. Can anyone maybe explain what happened, and how I can fix it?
17:02  wereHamster: _ikke_: where did you create the 4 additional commits? In master or the other branch?
17:03  _ikke_: Those 4 commits were in the improvement branch
17:03  wereHamster: in which branch were you when you did the rebase?
17:04  _ikke_: git log master..improvements shows those 4 branches
17:04  _ikke_: merge_improvement
17:04  _ikke_: s
17:04  wereHamster: and you run git rebase master ?
17:05 --- ChanServ sets modes [#git +v zeev]
17:05  _ikke_: git checkout master; git checkout -b merge_improvements; git rebase improbements
17:05  _ikke_: improvements*
17:05  wereHamster: ah, so you have three branches
17:05 +zeev: Hi, I try to install gitolite according to this tutorial: https://github.com/sitaramc/gitolite/blob/pu/doc/1-INSTALL.mkd using DEB package method and run into problems with the first step - su - gitolite . What password am I suppose to enter here? root's password didn't work
17:06  wereHamster: _ikke_: the rebase wold take the commits 'improvements..merge_improvements' and apply them on top of merge_improvements
17:06  _ikke_: wereHamster: Yeah, I crreated the new branch so i could see what the new changes would breng
17:06 +zeev: how do I check whether gitolite user was created?
17:06  tasslehoff: zeev: ubuntu?
17:07 +zeev: debian
17:07  tasslehoff: sudo su - gitolite I guess. Worked for me on Ubuntu at least.
17:07  _ikke_: wereHamster: So I should have done it the other way around?
17:07 +zeev: without password?
17:08  wereHamster: _ikke_: I have no idea what you wanted to do
17:09  _ikke_: wereHamster: I wanted to rebase those 4 commits onto master (merge_improbements
17:10  wereHamster: _ikke_: yep, you should have done the other way around
17:13 +zeev: any ideas?
17:13  _ikke_: Is there an easy way to fix it?
17:13  wereHamster: _ikke_: checkout improbements; rebase master
17:13  tasslehoff: zeev: on Ubuntu I did "sudo su - gitolite", and gave my users password
17:13  _ikke_: Ok, thanks
17:14  curtana: what is it with ubuntu users and 'sudo su'
17:14  curtana: have they never head of the -u option to sudo? :)
17:14  wereHamster: curtana: because you aren't allowed to use su, but can use sudo
17:14 +zeev: it doesn't work for me...
17:15  curtana: i mean... 'sudo su bob' v.s. 'sudo -u bob -s'
17:15  wereHamster: less typing.. ?
--- Log closed Thu Nov 25 17:22:01 2010
--- Log opened Thu Nov 25 17:22:24 2010
17:22 --- Users 705 nicks [0 ops, 0 halfops, 10 voices, 695 normal]
--- Log closed Thu Nov 25 23:41:49 2010
--- Log opened Thu Nov 25 23:47:21 2010
23:47 --- Users 689 nicks [0 ops, 0 halfops, 10 voices, 679 normal]
23:47  PointMan: ;-)
23:47  frogonwheels: :)
23:47  frogonwheels: PointMan: unfortunately I can't tell you how they are different
23:48  PointMan: thanks
23:48  frogonwheels: np
23:49 --- Channel #git was synced in 127 seconds
23:54 --- adamholt is now known as adamholt_away
23:54 --- adamholt_away is now known as adamholt
--- Log closed Fri Nov 26 00:00:49 2010
