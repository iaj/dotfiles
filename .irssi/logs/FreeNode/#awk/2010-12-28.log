--- Log opened Tue Dec 28 00:00:04 2010
02:15  krzie: i have this line
02:15  krzie: awk -v var=Jay '$1 == var{num=$2} END {print num+0}' file
02:15  krzie: file has this line:
02:16  krzie: Jay  1421179.11
02:16  krzie: why does awk give me this: 1.42118e+06   instead of this:  1421179.11  and more importantly, can i change this?
02:20  cthuluh: you should be using printf()
02:20  cthuluh: mawk and gawk seem to differ on this point
02:25  krzie: as in awk -v var=Jay '$1 == var{num=$2} END {printf num+0}' file ?  i get the same result
02:26  cthuluh: see how to use printf(). it's different from print
02:26  krzie: ahh ok
02:28  g0pher: or how about treat $2 as string ? eg print $2 ""
02:29  g0pher: ment print num ""
02:30  krzie: i guess i could do that, then check if it is set and make 0 in another process
02:35  steve___: krzie: have a look at CONVFMT in the man page
02:37  krzie: fixed it temp with g0pher's solution, still trying to make it happy with printf
02:37  krzie: and will read that as well =]
02:38 --- yitz__ is now known as yitz_
02:38  krzie: ahh i see!
02:38  krzie: thats what i need to make printf happy =]
02:39  cthuluh: I don't see how CONVFMT helps :P
02:39  krzie: it showed me the default %g
02:40  krzie: mix that with what i was reading re: printf, its exactly the hint i needed
02:40  g0pher: wroks here C:\!> %awk% "{num=$2} END {print num \"\"}" Jay  1421179.11 ^Z 1421179.11
02:40  krzie: g0pher, yep that does work, and im currently using it as a workaround
02:40  cthuluh: krzie: oh, you meant that it helped you to find a usable format for printf 
02:41  krzie: but if i treat it as a number with a high %g, i can use +0 and turn null values into 0
02:41  krzie: cthuluh, exactly
02:41  g0pher: eg $2 is a string - so is num - to make print use it as string append "" to num
02:43  krzie: if i set %.#g exactly, it works right... if i pad it too high so it will always work in the script, i get extra #s
02:44  krzie: 1421179.1100000001024
02:45  cthuluh: not all numbers are representable using ieee 754 float numbers
02:45  cthuluh: this leads to this kind of weird things
02:45  krzie: seems i can pad it some and be ok, at least for this example
02:47  krzie: %.9g is exact for this situation, i can get to .16 without error, so maybe ill just leave it at 15 in my script
02:50  krzie: it will certainly never be that high anyways... thanks cthuluh / g0pher 
02:51  steve___: cthuluh: oops OFMT
02:53  cthuluh: steve___: CONVFMT was fine, I believe ;)
03:19  krzie: ya it was perfect, gave me the exact clue i needed, since i was already reading on printf per cthuluh'S recommendation
03:28  pr3d4t0r: Hola.
03:34  cthuluh: hi pr3d4t0r 
03:47  pr3d4t0r: cthuluh: :)
04:02 --- WinstonSmith_ is now known as WinstonSmith
04:30  enferex: I'm piping tail -f data to awk.  I need to flush awk, so that the output doesnt buffer.  However: awk '{print $1; system("");}' does not seem to be doing any flushing
04:32  yitz_: Either that or tail needs flushing...
04:35  enferex: yitz_: I believe you are correct, any idea on how to do that.  The man page dos not mention it.
04:36  yitz_: I'm gonna point you to http://mywiki.wooledge.org/BashFAQ/009 without actually knowing all the contents
04:36  enferex: yitz_: thanks
04:37  enferex: ohh nice!
04:38  yitz_: And try asking one channel at a time in the future
04:38  enferex: hehe
04:39  g0pher: nojoy fflush(); ?
04:41  yitz_: Oh. Cute. My box has a awk(1p) and a gawk(1) man page
04:56 --- maxim is now known as Guest45994
05:31 --- GinoMan is now known as GinoSleeps
05:35  g0pher: pr3d4t0r: is not fflush() legitimate response ?
05:43  pr3d4t0r: g0pher: ?
05:43  pr3d4t0r: g0pher: w0t?
05:47  g0pher: pr3d4t0r: does not the awk function fflush() flush all buffers - so was legitimate response to above ?
05:49  yitz_: (gawk function)
05:49  yitz_: That helps if awk is buffering. If it's tail, that doesn't help
05:59  pr3d4t0r: g0pher: I don't believe awk has that.
05:59  pr3d4t0r: g0pher: Let me look.
05:59  pr3d4t0r: g0pher: Yup, no such thing.
06:00  pr3d4t0r: g0pher: yitz_ is probably right.  gawk may offer that.  I don't believe on using gawk functions because they don't port well to other systems.  Non-standard crap is a pain to fix if you come to rely on it.
06:01  pr3d4t0r: g0pher: There are enough goodies in gawk that I wish POSIX would adopt it as the next awk reference implementation, but until that happens I try to avoid using it.
06:01  g0pher: no fflush() in awk ??
06:01  pr3d4t0r: g0pher: Or rather, to use the gawk-specific functions.
06:01  pr3d4t0r: g0pher: Nope.
06:01  pr3d4t0r: g0pher: You have close().
06:02  pr3d4t0r: yitz_: Does fflush() work on pipes, or only streams?
06:02 * pr3d4t0r checks the man page for gawk.
06:02  g0pher: pr3d4t0r: awk has had fflush() for Many years
06:02  yitz_: Dunno? man gawk says --posix kills fflush()
06:02  pr3d4t0r: "fflush was added to the Bell Laboratories research version of awk in 1994; it is not part of the POSIX standard and is not available if `--posix' has been specified on the command line."
06:03  pr3d4t0r: g0pher: It looks interesting.  fflush() works on streams and pipes.  That could be helpful.
06:04  pr3d4t0r: g0pher: If you have data < BUF_LEN it could be helpful.  Right now, since close() is the only option, you kinda have to wait until you're done to flush small chunks of data.  Lame.
06:05  pr3d4t0r: g0pher: If it's any consolation, BSD (Mac) awk supports fflush().
06:05 * pr3d4t0r checks his Solaris boxen.
06:05  pr3d4t0r: g0pher: So does mawk.
06:06 * pr3d4t0r wonders if he's got nawk installed anywhere; he removed it and put gawk on Solaris.
06:06  g0pher: Jan 1, 2002:         fflush() or fflush("") flushes all files and pipes.
06:06  pr3d4t0r: g0pher: nawk also supports it.  That's good.
06:06  g0pher: from the awk FIXES file
06:06  pr3d4t0r: g0pher: So it looks like every major awk out there supports it anyway.  I'd use it :D
06:07  pr3d4t0r: g0pher: It's still non-POSIX.
06:07  pr3d4t0r: g0pher: I can see this royally fucking things up if someone is stupid enough to use UNIX Services for Windows instead of Cygwin on a Windows server, for example.
06:08  g0pher: How is `non-POSIX.` an Issue ?
06:10  g0pher: pr3d4t0r" Real issue is that You did Not believe me that fflush() was not a legitimate awk function call
06:25  pr3d4t0r: g0pher: The issue is that I try to adhere to POSIX calls whenever I use awk.
06:26  pr3d4t0r: g0pher: Or at least validate that a given call is available across all the major awk versions (gawk, mawk, nawk, BSD awk).
06:26  pr3d4t0r: g0pher: Most of the stuff I do must be guaranteed to be portable - often contractually.  I can't afford to write some awk script and then find out that it blew up.
06:27  pr3d4t0r: g0pher: That's why I often wish that gawk were taken as the default new POSIX standard and be done with it.
06:27  pr3d4t0r: g0pher: Until then, and as long as I have clients dumb enough to run things like AIX, I kinda have to set the baseline to the known working level, and that's POSIX.
06:29  g0pher: pr3d4t0r: Excellent issues - eg i have awk/gawk/mawk back to 2000 - just to see what is viable back then
--- Log closed Tue Dec 28 08:45:52 2010
--- Log opened Tue Dec 28 08:58:12 2010
08:58 --- Users 86 nicks [0 ops, 0 halfops, 0 voices, 86 normal]
08:58 --- Server: [lindbohm.freenode.net] [freenode-info] channel flooding and no channel staff around to help? Please check with freenode support: http://freenode.net/faq.shtml#gettinghelp
08:59 --- Channel #awk was synced in 95 seconds
09:19  g0pher: pr3d4t0r: thought you were java person ?
09:22  pr3d4t0r: g0pher: Java is something I do, yes.
09:23  g0pher: OT - is that any easyier knowning which version of Java they have ?
09:25  pr3d4t0r: g0pher: java -version
09:43  pr3d4t0r: Have a great night, peeps!
10:53 --- The-Compiler is now known as Compiler^27c3
12:54  ashren: is it possible to filter regexp output, so only numbers are displayed - without piping to a new awk (or sed or grep)? Selective printing I guess you could call it.
12:55  j_wright: for example?
12:57  ashren: awk '/rem|full/ {print $3, $4}' /proc/acpi/battery/BAT0/*
12:58  ashren: I'm only interested in the values here.
12:59  j_wright: use match or the relop ~
12:59  j_wright: or you could change your pattern to match numbers
13:00  ashren: J_wright: Yes, but it is only the numbers from the lines matching the regexp /rem|full/
13:00  j_wright: yes
13:01  j_wright: so change the match so that it matches rem whatever number|full whatever number
13:03  j_wright: or only do the print if $3 and $4 match numbers
13:03  ashren: That last bit sounds interesting. How would I do that?
13:04  j_wright: awk '/rem|full/ {if ($3 ~ /[0-9]/  && $4 ~ /[0-9]/) { print $3, $4} }'
13:05  j_wright: well
13:05  j_wright: that's contains a number so not exactly what you need, but you get it
13:06  ashren: thanks! I have something to work with now. Have a nice day.
13:06  j_wright: just change it to /^[0-9]+$/
13:06  j_wright: nvm
15:56  pr3d4t0r: Hello.
--- Log closed Tue Jan 04 09:45:52 2011
