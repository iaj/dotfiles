--- Log opened Thu Nov 18 08:46:38 2010
--- Log closed Thu Nov 18 08:51:39 2010
--- Log opened Thu Nov 18 08:52:02 2010
08:52 --- Users 97 nicks [0 ops, 0 halfops, 0 voices, 97 normal]
08:53 --- Channel #awk was synced in 103 seconds
08:56  romy: nm, match() in gawk does what I want
--- Log closed Thu Nov 18 12:48:02 2010
--- Log opened Thu Nov 18 12:49:26 2010
12:49 --- Users 96 nicks [0 ops, 0 halfops, 0 voices, 96 normal]
12:50 --- Channel #awk was synced in 130 seconds
13:02  Zet: I have these two files, both with two fields per line. most of the field #1 data are also present in file #1, but some are only present in file #2. how do I find the data which are only in file #2, but not in file #1?
13:12  geirha: By only field 1 or the whole line?
13:16  geirha: awk 'FNR==NR{a[$1]++;next} !a[$1] {print}' file1 file2
13:20  Zet: only field 1
13:24  Zet: thanks a lot
13:45  alek{xmb}{bottz}: what was the name for the unset |remove |erase array function
14:09  trumpen: alek{xmb}{bottz}: delete?
15:52 --- ucasano_ is now known as ucasano
16:36  trash: hi, hm - is there a preferred way to print column 10-end, without a loop?
16:37  gnubien: trash: awk '{for(i=10;i<=NF;++i) printf "%s ", $i;print ""}' filename
16:38  trash: So a loop.
16:38  yitz_: cut -f10-
16:39  trash: Well, I think I'll just rewrite this part in bash, if I'm touching someone else's code anyway.
16:44  j0shua: tail -10
16:44  j0shua: oh column, sorry
16:45  trash: I didn't join #awk to get some external commands anyway. ;-)
16:45  waldner: awk.freeshell.org/RangeOfFields
16:45  gnubien: trash: echo "1 2 3 4 5 6 7 8 9 10 11 12" |sed 's/\(\w\+[[:space:]]\)\{10\}\(.*\)/\2/'  #prints 11 12
16:46  trash: *shrug*
--- Log closed Thu Nov 18 18:39:12 2010
--- Log opened Thu Nov 18 18:44:37 2010
18:44 --- Users 97 nicks [0 ops, 0 halfops, 0 voices, 97 normal]
18:46 --- Channel #awk was synced in 103 seconds
--- Log closed Fri Nov 19 09:59:40 2010
