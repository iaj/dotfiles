--- Log opened Mon Nov 01 00:00:27 2010
04:37  white_magic: is is possible to have a range of fields assigned to a string variable? for example, I want to concatenate fields 1 through (NF-3) to variable firstFields..
04:38  jwillia3: white_magic, s=''; for (i=1; i<NF-3; i++) s=s $i;
04:38  white_magic: oh, i guess it's always gonna be a for loop, ty
04:39  white_magic: well I think you mean s+=$i, not s=s $i, right?
04:40  jwillia3: white_magic, no. + adds numbers not catenates strings
04:40  jwillia3: a b is the catenation of a and b.
04:41  white_magic: i see
--- Log closed Mon Nov 01 09:01:47 2010
--- Log opened Mon Nov 01 09:01:57 2010
09:01 --- Users 97 nicks [0 ops, 0 halfops, 0 voices, 97 normal]
09:03 --- Channel #awk was synced in 103 seconds
--- Log closed Mon Nov 01 11:10:22 2010
--- Log opened Mon Nov 01 11:11:07 2010
11:11 --- Users 95 nicks [0 ops, 0 halfops, 0 voices, 95 normal]
11:12 --- Channel #awk was synced in 107 seconds
11:24  waldner: = and == are different things
11:33  stockholm: yes
11:34  stockholm: how do i get all indices in an associative array?
11:34  stockholm: for i in array... ?
11:34  stockholm: for i in $array... ?
11:34  stockholm: what is the syntax?
11:43  geirha: for (key in array) {Â print key, array[key]; }
--- Log closed Mon Nov 01 13:04:22 2010
--- Log opened Mon Nov 01 13:17:27 2010
13:17 --- Users 96 nicks [0 ops, 0 halfops, 0 voices, 96 normal]
13:18  mmckinst: I read the manual wrong and thought I needed quotes. the goal is replace the 8th field, or whatever happens to be the last field, with something else
13:19 --- Channel #awk was synced in 103 seconds
13:19  mmckinst: echo "foo bar" | gawk '{sub($8, "baz &", $8)};1'  seems to do it 
13:19  mmckinst: formatting looks bad but it gets the job done
13:20  mmckinst: err. ignore the ampersand in the sub function. 
13:56  pgas: mmckinst: if you want to replace the 8th field by baz, just do: $8="baz"
14:00  pgas: last field would be: $NF="baz"
14:05  mmckinst: darn. I always make things too complex :). what about if I wanted to append the 8th field with something else?
14:06  mmckinst: I've got a line that looks like 'AuthOrder mod_sql.c' or 'AuthOrder mod_sql.c mod_auth_unix.c'
14:07  mmckinst: I want 'mod_auth_pam.c' to following mod_sql.c 
14:11  mmckinst: gawk 'sub($3, "mod_auth_pam.c &", $3)' is works works. is there a more elegant way?
14:17  pgas: mmckinst: $3="mod_auth_pam.c " $3  
14:17  pgas: well, that prepends "mod_auth_pam.c " to $3 
14:18  pgas: if you want to append $3=$3 "blah"
--- Log closed Mon Nov 01 14:56:13 2010
--- Log opened Mon Nov 01 15:01:36 2010
15:01 --- Users 96 nicks [0 ops, 0 halfops, 0 voices, 96 normal]
15:03 --- Channel #awk was synced in 105 seconds
--- Log closed Mon Nov 01 16:20:35 2010
--- Log opened Mon Nov 01 16:31:04 2010
16:31 --- Users 96 nicks [0 ops, 0 halfops, 0 voices, 96 normal]
16:32 --- Channel #awk was synced in 102 seconds
--- Log closed Mon Nov 01 16:58:30 2010
--- Log opened Mon Nov 01 16:58:58 2010
16:58 --- Users 98 nicks [0 ops, 0 halfops, 0 voices, 98 normal]
17:00 --- Channel #awk was synced in 95 seconds
17:46  skered: I think awk (maybe gawk only?) suffers (might not be the write word) from have the --posix flag... When to comes to regex --posix removes the need to escape some sepcial regex characters [](){} to name a few..
17:47  skered: Along with removing any GNU (maybe pcre?) type \n type extensions?
17:48  skered: Is it POSIX.2 that allows someone to write for basis vs modern regex where if you're using basic an escape will be needed where as with modern and escape isn't needed?
--- Log closed Mon Nov 01 17:57:23 2010
--- Log opened Mon Nov 01 17:58:01 2010
17:58 --- Users 95 nicks [0 ops, 0 halfops, 0 voices, 95 normal]
17:59 --- Channel #awk was synced in 92 seconds
--- Log closed Mon Nov 01 19:57:29 2010
--- Log opened Mon Nov 01 19:57:59 2010
19:57 --- Users 94 nicks [0 ops, 0 halfops, 0 voices, 94 normal]
19:59 --- Channel #awk was synced in 98 seconds
20:56  pgas: skered: hmm?
20:57  pgas: awk never uses basic regular expressions
20:57  pgas: \n is not an extension
20:58  skered: n being a valid character
20:58  pgas: like?
20:58  skered: maybe wasn't a good example to represent \w, \b etc...
21:00  skered: \< \> \y \w \W anything that's an extension
21:01  pgas: ok \b is not an extension, but some like  \w are
21:02  skered: But one feature of --posix is to not require items like [] {} and () to be escaped
21:02  skered: ?
21:02  pgas: nope
21:02  skered: For gawk?
21:03  pgas: yes
21:03  pgas: the only difference is that traditionally you can't use  .{1,4} to match one to 4 chars
21:04  skered: umm you're right.. i don't know why I was thinking that.
21:04  pgas: but posix defines it, so --posix enables this
21:04  pgas: it's also enabled in recent gawk IIRC
21:05  skered: My underlying gripe was some utilities require you to escape regex's to death
21:06  skered: I was thinking it had to do with if the user programmed the utility to be basis vs modern
21:06  pgas: in basic regexp you need to use \{3,5\}
21:06  pgas: but it also means that you need to escape less when you need to match a {
21:07  skered: Wouldn't you just use [{] ?
21:08  pgas: because in basic regexp you can just use {?
--- Log closed Mon Nov 01 23:57:24 2010
--- Log opened Mon Nov 01 23:57:47 2010
23:57 --- Users 92 nicks [0 ops, 0 halfops, 0 voices, 92 normal]
23:59 --- Channel #awk was synced in 94 seconds
--- Log closed Tue Nov 02 00:00:13 2010
