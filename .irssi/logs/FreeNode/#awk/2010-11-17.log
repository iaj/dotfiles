--- Log opened Wed Nov 17 11:21:13 2010
--- Log closed Wed Nov 17 11:21:13 2010
--- Log opened Wed Nov 17 11:53:51 2010
11:53 --- Users 94 nicks [0 ops, 0 halfops, 0 voices, 94 normal]
11:55 --- Channel #awk was synced in 107 seconds
11:56  Mohan_: Is this active?
12:00  Mohan_: I have tab seprated .csv file with 10 column. I using match function to remove the specific row like this :match($0,"@gmail.com)
12:00  Mohan_: how do I give the input string from variable?
12:01  Mohan_: I have the @gmail.com in another variable
12:01  taylanub: match($0, variable)   ?
12:02  Mohan_: Ok
12:02  Mohan_: thanks
12:04  Mohan_: taylanub: I have number of string like @gmail.com,@yahoo.com etc in one file
12:05  Mohan_: I want to search the csv file with the above string 
12:05  Mohan_: If the string matches I want to remove the entire row
12:05  Mohan_: from the csv file
12:06  Mohan_: The string I going match may contain in first and fourth column in the csv file
12:06  Mohan_: what is the best way to achive this?
12:07  taylanub: could you pastebin an example csv file?
12:29  Mohan_: taylanub: Are you there?
12:31  Riviera: The string could also occur in other than the first and fourth columns?
12:31  Riviera: But then it should not matter?
12:32  taylanub: Mohan_: yup
12:33  Mohan_: No it only there in the first and fourth column only
12:33  Riviera: Mohan_: grep -vF 'string' file.csv
12:35  Mohan_: I have all the string in text file
12:35  Riviera: Mohan_: grep -vFf textfile file.csv
12:54  Mohan_: Riviera : It works.  but If I have the string in other column that also removed. I think this not the good way to go.  Is there a way to check only first and second column ?
12:57  Riviera: 12:31 <Riviera> The string could also occur in other than the first and fourth columns?
12:57  Riviera: 12:33 <Mohan_> No it only there in the first and fourth column only
12:58  Riviera: Mohan_: as you said, the string will not appear "in other column", so you are safe.
12:58  Mohan_: I thougt like that. but in the case \N
12:58  Riviera: Mohan_: yes, there is a way, but it involves a csv parser.
12:58  Mohan_: other column also have \N
12:59  Riviera: Assuming the columns are separated by "," and assuming no "," might appear within the fields:
13:00  Riviera: ah, no, sorry.
13:24  karthee: Mohan_: can you explain your problem ?
13:59  Mohan_: Karthee : are you there? I think I am disconnected 
14:00  karthee: Mohan_: sure go ahead .. 
14:01  Mohan_: How to delete a row in a csv file bases on a specific string?
14:01  Mohan_: in awk
14:01  karthee: as Riviera mentioned .. grep -v  will do .. 
14:02  Mohan_: it searches the string in all column
14:02  karthee: ohh .. 
14:02  Mohan_: but I want to search column 1 and 2 only
14:03  karthee: oh .. awk '$1!~/string/ || $2!~/string/ { print }' 
14:06 --- maxim is now known as Guest72963
14:06  Mohan_:  awk 'BEGIN{FS=OFS="\t"} {print $2"\t"$3"\t"$6"\t""1""\t"$9"\t"$10"\t"$11"\t"$12"\t"$13}' user.txt | awk '$1!~/test/ || $2!~/@gmail.com/ { print }'
14:07  Mohan_: karthee : Is there any syntex error on the above?
14:08  karthee: Mohan_: what exactly are you trying to do ?
14:08  Mohan_: I have csv file Tab seprated file with 20 column
14:09  Mohan_: I need only specific column only
14:09  Mohan_: awk 'BEGIN{FS=OFS="\t"} {print $2"\t"$3"\t"$6"\t""1""\t"$9"\t"$10"\t"$11"\t"$12"\t"$13}' user.txt 
14:09  Mohan_: I am doing like this to get
14:10  Mohan_: I sending the output    to awk '$1!~/test/ || $2!~/@gmail.com/ { print }'
14:10  karthee:  awk  -F, '$1!~/test/ || $2!~/@gmail.com/ { print $2"\t"$3"\t"$6"\t""1""\t"$9"\t"$10"\t"$11"\t"$12"\t"$13}'  user.txt
14:13  Mohan_: Karthee : the user.txt is Tab seprated 
14:13  Mohan_: So I changed awk -F "\t"
14:13  karthee: ohh .. you said csv right ?
14:14  karthee: you can ignore -F in that case .. 
14:14  Mohan_: sorry, Tab seprated txt file
14:15  Mohan_: contain output of mysql script
14:17  karthee: Mohan_ : okay .. does it work now ?
14:17  Mohan_: No
14:17  karthee: huh .. 
14:18  Mohan_: the first column test 
14:18  Mohan_: shows again
14:18  Mohan_: It is not removing the row
14:18  Mohan_: matching "test"
--- Log closed Wed Nov 17 20:28:19 2010
--- Log opened Wed Nov 17 20:28:41 2010
20:28 --- Users 96 nicks [0 ops, 0 halfops, 0 voices, 96 normal]
20:30 --- Channel #awk was synced in 103 seconds
20:44 --- Natch is now known as Natch|
--- Log closed Wed Nov 17 21:41:41 2010
--- Log opened Wed Nov 17 21:42:01 2010
21:42 --- Users 97 nicks [0 ops, 0 halfops, 0 voices, 97 normal]
21:43 --- Channel #awk was synced in 114 seconds
--- Log closed Wed Nov 17 22:35:34 2010
--- Log opened Wed Nov 17 22:35:44 2010
22:35 --- Users 99 nicks [0 ops, 0 halfops, 0 voices, 99 normal]
22:37 --- Channel #awk was synced in 102 seconds
--- Log closed Wed Nov 17 22:55:49 2010
--- Log opened Wed Nov 17 22:56:16 2010
22:56 --- Users 100 nicks [0 ops, 0 halfops, 0 voices, 100 normal]
22:56  cthuluh: actually it's the first option described in all my awk versions manpages
22:57 --- Channel #awk was synced in 108 seconds
22:58  seanjohn: cthuluh, awk is for grabbing data from fields; I understand that. I just need an example to work with, instead of words, to show how to grab and separate the data form the field name with ':'. Can you show me in your example you gave?  awk 'NR == 3 { print $3 }'
22:58  seanjohn: data from files, not fields
22:58  seanjohn: sorry
22:59  seanjohn: Isnt awk only usable in a bash script? :-|
22:59  k[a: what!
23:00  k[a: #!/usr/bin/awk
23:00  seanjohn: nevermind, it was implemented in bash AND other languages
23:00  cthuluh: I don't get what you mean
23:00  cthuluh: seanjohn: about the example, I'm sorry. it's not that I don't want to help, but is that so hard to ttake a look at a manpage?
23:01  seanjohn:  awk 'NR == 3 { print $3 }'  << where do I put the : to say the field name separates from the data it holds with ':'. Like "server: 72.83.253.221
23:01  cthuluh: 22:56 < cthuluh> actually it's the first option described in all my awk versions manpages
23:02  seanjohn: because I learn by examples
23:02  seanjohn: im sorry
23:02  cthuluh: don't be sorry.
23:02  pr3d4t0r: seanjohn: awk can be even used as its own shell, if that's what you're into.
23:02  pr3d4t0r: seanjohn: And has arguably better programming constructs than bash.
23:03  pr3d4t0r: seanjohn: Anyway.
23:03  seanjohn: pr3d4t0r, how would that be usable?
23:03  seanjohn: oh, so its not one function. Its a language
23:03  pr3d4t0r: seanjohn: For text manipulation.  Yes, it's got a programming language.
23:05  seanjohn: thats why im trying to get a hold on bash as this is a simple script to bring up interfaces and store the variables in a file. Then, create the routes and iptables rules. The file is needed for the reverse of bringing the interfaces down and deleting the rules.
23:05  seanjohn: now im being told I have to learn awk too.
23:05  seanjohn: :)
23:06  seanjohn: the file is like /dev/null
23:06  seanjohn: just long term.
23:07  seanjohn: i just need one example so I can finish.
23:07  seanjohn: manning awk
23:07  seanjohn: thank you
23:08  k[a: excuse me: awk can be run as a shell?: kind of how like python and ruby do run..
23:08  yitz_: Nope
23:09  seanjohn: why is it every time ive came in bash, and now here, my questions' responses, from others, start an argument
23:09  seanjohn: :-?
--- Log closed Thu Nov 18 08:46:38 2010
