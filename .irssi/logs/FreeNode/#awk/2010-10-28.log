--- Log opened Thu Oct 28 00:00:55 2010
00:19 --- galaxywatcher_ is now known as galaxywatcher
01:47 --- _Lewellyn is now known as lewellyn
03:21  dangerous77: Anyone know how I could go about getting rid of lines 3, 4, 5 from http://pastebin.com/sSuz1r7a ... basically I want the first column to be unique ... it is sorted by the first column,  and within that, by the second column (time and date)
03:44  g0pher: something like: {...; if($1 in A) next; else A[$1]++}
04:11  g0pher: rather  {if($1 in A) next; print; A[$1]++} this saves $1 in array A; skips lines matching $1 
--- Log closed Thu Oct 28 08:43:30 2010
--- Log opened Thu Oct 28 08:43:54 2010
08:43 --- Users 104 nicks [0 ops, 0 halfops, 0 voices, 104 normal]
08:45 --- Channel #awk was synced in 100 seconds
--- Log closed Thu Oct 28 08:58:00 2010
--- Log opened Thu Oct 28 08:58:20 2010
08:58 --- Users 103 nicks [0 ops, 0 halfops, 0 voices, 103 normal]
08:59 --- Channel #awk was synced in 99 seconds
--- Log closed Thu Oct 28 09:48:49 2010
--- Log opened Thu Oct 28 09:49:13 2010
09:49 --- Users 104 nicks [0 ops, 0 halfops, 0 voices, 104 normal]
09:50 --- Channel #awk was synced in 99 seconds
10:20  pown: sup
16:04 --- project2501a is now known as TheUltimateDouch
16:05  Snader_LB: hi all
16:06 --- TheUltimateDouch is now known as project2501a
16:06  Snader_LB: what is the difference in usage of `"foo"' and `/foo/' in "awk '"ab" {print}'" and "awk '/ab/ {print}'"?
16:07  Snader_LB: s/ab/foo/g, there
16:07  pgas: /ab/ is interpreted as $0 ~ /ab/
16:07  pgas: while "ab" is just "ab" which, as a string is true as it's not the null string
16:08  Snader_LB: both are regular expressions in any case, right?
16:08  pgas: no
16:08  pgas: in your example "ab" is not interpreted as a regular expression
16:09  project2501a: a
16:09  pgas: "ab" is used as a regular expression only if you put it after ~ or if you use it in gsub or sub etc...
16:12  Snader_LB: what does ``'$1 ~ "ab"'' mean, then?
16:12  Snader_LB: i mean, `"ab" does _not_ simply mean `true' then?
16:12  gnubien: Snader_LB: ~ means match
16:13  Snader_LB: gnubien: indeed
16:15  Snader_LB: but does the ``"ab"'' part _not_ simply mean `true' there, as it does without ``$1 ~'' prepended before it?
16:15  pgas: didn't I just said that after ~ "abd" is used as a regular expression?
16:15  Snader_LB: yes; just checking
16:16  pgas: it's recommended to use / / rather than a string unless you need a computed regexp
16:17  Snader_LB: so aiui, "awk '$1 ~ /ab/ {print}'" and "awk '$1 ~ "ab" {print}'" are fully equal.  right?
16:17  pgas: they do the same thing yes
16:18  Snader_LB: (this was my actual question's example, but i though i could make it simpler by removing ``$1 ~''.  incorrect thought, there.)
16:19  Snader_LB: well; i was thinking in using `""' since it's what is used in a `print' statement
16:19  pgas:  /ab/ is more efficient (as it compiles the regexp only once IIRC) and you the handling of the \ are different
16:19  Snader_LB: thank you!
16:20  pgas:  /a\\b/ is equivalent to  "a\\\\b"
16:20  s0xxx_: could someone paste 3-4 lines above? my conection snapped
16:20  s0xxx_: thx
16:20  Snader_LB: s0xxx_: what was you last line?
16:20  Snader_LB: s/you/your/
16:20  s0xxx_: [16:19] <pgas>  /ab/ is more efficient (as it compiles the regexp only once IIRC) and you the handling of the \ are different
16:21  Snader_LB: s0xxx_: i'll PM, one sec
16:21  Snader_LB: pgas: what do you mean `computed regexp'?
16:22  s0xxx_: Snader_LB: http://www.gnu.org/manual/gawk/gawk.html#Computed-Regexps
16:24  pgas: if you want to pass the regexp or part of the regexp as a variable, you can't use / /
16:24  pgas: eg: awk -v var=foo '$1 ~ /foo/ var' # doesn't work
16:24  pgas: you have to use " " 
16:25  pgas: the regexp is not known at the time you write the program, so you can't use / / for a literal regexp
16:25  landstalker: hi, I've got an awk query to search a file for lines longer then 1024 characters, but I also need to print the line numbers. I wondered if you knew how this is done?
16:26  landstalker: this is the awk command: awk -F "|" 'length > 1024'  file
16:26  pgas:  'length>1024{print NR}'
16:27  landstalker: ok, and that is printing out all the line numbers that are over 1024?
16:27  landstalker: when I got a list of numbers previously I thought I'd done something wrong
16:28  pgas: yes if you have more than one file, you might want FNR instead
16:29  landstalker: thanks, looks like this will work :)
16:41  landstalker: ok, any idea how I can then go on to delete all the lines listed? I'm trying sed
16:43  Snader_LB: "awk '! length>1024 {print}'?
16:45  landstalker: that didn't seem to do anything
16:47  Snader_LB: no; i guessed
16:47  Snader_LB: one sec
16:50  landstalker: I did start going through manually, but once I delete a line, I need to subtract 1 from the next line, and so on
16:50  Snader_LB: "awk 'length<1024 {print}'"
16:50  pgas: deleted from the file or what?
16:50  landstalker: yeah, I have lines in this file which are too long for this other program to process. So I need them done basically. I then need to do the same on another file
16:51  landstalker: sorry, I mean deleted not done
16:51  pgas: and to print the numbers at the same time?
16:51  landstalker: no no, just remove the lines which are longer then 1024
16:52  landstalker: I was printing the numbers to then go and remove them
16:52  pgas: well then what Snader_LB 
16:52  pgas: said awk 'length<1024' > newfile && mv file newfile
16:53  landstalker: I see
16:53  landstalker: thanks
16:59  landstalker: hmm, not so sure now actually.
17:00  landstalker: I'll do it one at a time
17:00  landstalker: thanks anyway
--- Log closed Thu Oct 28 20:58:53 2010
--- Log opened Thu Oct 28 20:59:18 2010
20:59 --- Users 109 nicks [0 ops, 0 halfops, 0 voices, 109 normal]
21:01 --- Channel #awk was synced in 115 seconds
23:13  sharp15: Does awk have any major competitors?  i'm trying to make an informed decision, not start a flame war.
23:15  jwillia3: python, ruby, perl.
23:17  sharp15: so awk is a full scripting language and  not something purpose built?
23:29  pgas: awk's purpose is to process text files with records of fields. It can do a lot more, but lacks some things to make it a really 
23:29  pgas:  "full scripting language"
23:30  pgas: (like maybe some pointers, or reference, a nice way to make package/modules)
23:31  sharp15: pgas: ok. thank you. 
23:33  pgas: there is also no standard way to extend it. But it's the most versatile interpreter specified by posix and it's a lot smaller than perl or python
23:45  j_wright: doesn't posix specify m4?
--- Log closed Fri Oct 29 00:00:50 2010
