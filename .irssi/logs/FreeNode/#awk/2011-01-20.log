--- Log opened Thu Jan 20 08:34:25 2011
--- Log closed Thu Jan 20 08:37:26 2011
--- Log opened Thu Jan 20 08:37:46 2011
08:37 --- Users 90 nicks [0 ops, 0 halfops, 0 voices, 90 normal]
08:39 --- Channel #awk was synced in 103 seconds
11:00  nicola_pav: hello. can i apply parameter expansion when i use awk '{print$5}' for example?
11:01  igi: nicola_pav, are you need a variable from shell?
11:02  nicola_pav: i am reading from a file
11:02  nicola_pav: i want to print out the 5th value
11:02  nicola_pav: those are paths to files
11:03  nicola_pav: i want to remove the folders where those files are in and remove the extension
11:03  nicola_pav: i can remove the extension by piping cut -d'.' -f1
11:03  nicola_pav: but the preceding path?
11:03  igi: example please?
11:04  nicola_pav: i have /path/to/my/file
11:04  nicola_pav: fle.sh
11:04  nicola_pav: by cut i will get file
11:04  nicola_pav: i want to remove the /path/to/my
11:04  nicola_pav: and get only file
11:05  nicola_pav: can i use awk
11:05  nicola_pav: or should i use sed?
11:05  igi: echo /path/to/my/file | awk -F/ '{print $NF}'
11:06  igi: 4# echo /path/to/my/file | awk -F/ '{print $NF}'
11:06  shbot: igi: file
11:07  igi: 4# echo /path/to/my/file | sed 's#.*/##'
11:07  shbot: igi: file
11:08  igi: is that what you need?
11:08  nicola_pav: yeahh, great
11:08  nicola_pav: thank uuu
11:12 --- xok_ is now known as xok
11:15  xok: nicola_pav: basename $(echo /path/to/file) will do the same IMHO...
11:16  nicola_pav: xok: sed did the job, thank u
11:17  xok: nicola_pav: you're welcome... ;-)
11:18  pgas: $(echo /path/to/file) is often better written /path/to/file
11:18  pgas: if you have it in a var ${var##*/} is the fastest
11:19  xok: damn, what I crappy thing I wrote... ;-D
11:19  xok: s/what I/what a/
11:20  xok: nicola_pav: basename /path/to/file you won't need any $(echo blah-bah)
11:21  nicola_pav: pgas: i know yeah, parameter expansion is great
11:22  nicola_pav: pgas: i don't have it in variable though, i am applying it to a cat
11:22  nicola_pav: and so i need to awk, sed, cut, etc.
11:23  igi: so it is the reason you ask in this channel , not bash channel
11:24  igi: : )
11:24  nicola_pav: igi: i thought i could use parameter expansion in awk :)
11:45  doonie: I have this string "STAT bytes_written 28099710261" and tried echo "STAT bytes_written 28099710261" | awk '{print $$3}' but gives an error (I want the digits only) any idea? awk: (FILENAME=- FNR=1) fatal: attempt to access field -2147483648
11:46  waldner: print $NP
11:46  waldner: print $NF
11:47  geirha: only one $
11:47  doonie: nice both nf and one $ worked
11:47  doonie: weird that all examples I found (for my case) use two $$
11:47  geirha: really?
11:48  doonie: hmm maybe it escapes it in my case
11:48  waldner: were they in a makefile?
11:48  doonie: http://addmoremem.blogspot.com/2010/10/zabbixs-template-to-monitor-memcached.html
11:48  doonie: for a plotting app
11:48  doonie: it must be escaping the $
11:48  doonie: that would make sense :)
11:48  waldner: yes it must be some zabbix escaping thing
11:48  geirha: doonie: Also, don't do grep|awk, awk can do the grepping
11:49  doonie: probably, one just needs to know how heh I just took the quick way and used the template this guy made
11:53  waldner: but if you have to use it in zabbix, then you probably need the $$3 thing, of course
12:03  doonie: yah, thx for the help guys :) now on to the next problemto see why it wont find the key :) 
--- Log closed Thu Jan 20 14:12:25 2011
--- Log opened Thu Jan 20 14:17:35 2011
14:17 --- Users 92 nicks [0 ops, 0 halfops, 0 voices, 92 normal]
14:19 --- Channel #awk was synced in 102 seconds
--- Log opened Thu Jan 20 14:41:22 2011
14:41 --- Users 91 nicks [0 ops, 0 halfops, 0 voices, 91 normal]
14:43 --- Channel #awk was synced in 135 seconds
--- Log opened Thu Jan 20 17:07:20 2011
17:07 --- Users 90 nicks [0 ops, 0 halfops, 0 voices, 90 normal]
17:09 --- Channel #awk was synced in 112 seconds
17:30  gimpy4682: In this example I want it to not print the first line and also not print any line which has the text "bar".  I'm not sure why this is not working.  printf "foo \nbar\nroo\n" | awk '{ if (NR!=1 || !/bar/) print }'
17:34  pgas: well, in english you say "and" but in awk you say or:  || 
17:35  pgas: awk  'NR!=1 && !/bar/'
17:36  steve___: printf "%s\n" foo a bar b c d bar e | awk 'NR!=1 && !/bar/'
17:39  steve___: oops, too slow.
17:50  gimpy4682: Works, thanks.
--- Log closed Thu Jan 20 19:27:59 2011
--- Log opened Thu Jan 20 19:28:55 2011
19:28 --- Users 88 nicks [0 ops, 0 halfops, 0 voices, 88 normal]
19:30 --- Channel #awk was synced in 133 seconds
--- Log closed Thu Jan 20 19:55:25 2011
--- Log opened Thu Jan 20 19:55:50 2011
19:55 --- Users 89 nicks [0 ops, 0 halfops, 0 voices, 89 normal]
19:57 --- Channel #awk was synced in 104 seconds
--- Log opened Thu Jan 20 20:01:25 2011
20:01 --- Users 89 nicks [0 ops, 0 halfops, 0 voices, 89 normal]
20:03 --- Channel #awk was synced in 111 seconds
--- Log closed Thu Jan 20 21:55:02 2011
--- Log opened Thu Jan 20 21:55:28 2011
21:55 --- Users 87 nicks [0 ops, 0 halfops, 0 voices, 87 normal]
21:57 --- Channel #awk was synced in 115 seconds
--- Log closed Thu Jan 20 23:14:16 2011
