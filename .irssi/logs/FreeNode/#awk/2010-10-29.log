--- Log opened Fri Oct 29 00:00:50 2010
--- Log closed Fri Oct 29 00:18:35 2010
--- Log opened Fri Oct 29 00:19:00 2010
00:19 --- Users 105 nicks [0 ops, 0 halfops, 0 voices, 105 normal]
00:20 --- Channel #awk was synced in 118 seconds
01:05  gnomon: j_wright, m4 is not particularly well suited to extending awk, if that's what you're implying.
01:05  gnomon: For that matter, m4 is not particularly well suited to extending any language, really.
01:14  aixenv: is it possible to use awk to print some test that happens after the last instance of a deliter at the beginning of each line?
01:15  aixenv: s/test/text
01:15  aixenv: bah delimiter
01:15  aixenv: IE: /some/random/path/to/some/file/foo.mp4 TO foo.mp4 /some/random/path/to/some/file/foo.mp4 ?
01:15  aixenv: usind -F'/' ?
01:16  aixenv: using
01:16  geirha: -F/ '{print $NF}'
01:16  aixenv: i tried that it didnt work
01:16  aixenv: let me retry maybe i had a syntax error
01:17  jwillia3: aixenv, you mean that the delimiter is the first character on the line?
01:17  aixenv: well it's random lengths of subdirs
01:17  aixenv:  could be /foo/foo/foo/foo.mp4 or /foo/foo/foo/foo/foo/foo.mp4
01:18  jwillia3: oh, print the filename before the full path?
01:18  aixenv: yes
01:18  aixenv: geirha: that kind of works, how would i then combine that list into the existing list though?
01:18  jwillia3: aixenv, is there any reason why you can't use basename?
01:20  aixenv: jwillia3: there is a root dir, but within that root dir there is varying subdirs 
01:20  aixenv: if that answers your question?
01:21  jwillia3: it doesn't. basename is a program built to give you the filename if you give it a path. is there any reason you need to use awk, specifically, to do your task?
01:21  aixenv: i have a file list in a file, so im trying to manipulate the text of said file with either awk/sed/vim
01:22  jwillia3: aixenv, the shell can iterate over a list file.
01:22  aixenv: this kind of worked but it filters out the old referenced path, how could i do th print $NF and then like " " and keep my original output ?
01:23  jwillia3: print $NF, $0
01:23  jwillia3: err, nevermind
01:24  aixenv: the -F/ '{print $NF " " print ??}'
01:25  geirha: $NF is the last field, $0 is the whole line ...
01:26  aixenv: $0 didnt work
01:26  geirha: Having a list of filenames separated by newlines in a file is bad practice
01:27  aixenv: i tried -F/ '{print $NF " " $0}' = no workie
01:27  aixenv: geirha: not a new line, just a space :)
01:28  geirha: Oh, even worse.
01:28  aixenv: im massaging this file into a file i can run an rsync 
01:29  geirha: Then you're approaching it the wrong way.
01:29  aixenv: possibly
01:29  aixenv: not gonna dispute that
01:29  geirha: Most likely rsync can do all this without any other tools.
01:29  aixenv: ok so here's the thing, 800 files in ONE directory, that need to be rsync'd/transfered back to their ORIGINAL dir, which is within a myriad of various subdirs
01:30  aixenv: so from the original directory point, i got a full path list of each file and made a file out of it
01:30  aixenv: then if i could copy the name to the beginning and keep the fullpath/filename i could then run that script from the ONE dir which has all the 800ish files and rsync them back to their original location
01:30  aixenv: if you can think of a better way to accomplish this im all ears
01:32  jwillia3: aixenv, the shell or xargs with basename
01:33  aixenv: care to enlighten me?
01:33  aixenv: i can submit sample output
01:33  geirha: cd /ONE && find /ORIGINAL -type f -exec bash -c 'for file; do base=${file##*/}; rsync "$base" "$file"; done' _ {} +
01:33  geirha: #rsync might know a better way.
01:34  geirha: hmz. Should've been   rsync "./$base" "$file"  in there
01:34  geirha: Anyway, that'll handle files with spaces, newlines, or any other special characters, safely.
01:38  aixenv: so cd /ONE && find /my/origina/root/path -type f -exec bash -c 'for file; do base=${file##*/}; rsync "./$base" "$file"; done' _ {} + ? 
01:40  geirha: Yes, that will invoke rsync for each file though
01:40  aixenv: awk -F/ '{print "rsync -av --progress " $NF " " $0}' file_with_path <= is this really that bad?
01:47  geirha: And then execute awk's output?
01:50  geirha: The find I showed you will handle any pathnames, no matter what characters they may contain ... your awk will break on any odd character in the path, like spaces, tabs, newlines, quotes, questionmarks, asterisks, brackets ... basicly any character special to the shell...
01:52  geirha: s/your awk/your solution with awk writing a shell script/
02:22  g0pher: gotchas - thought this code would strip leading trailing "
02:23  g0pher: C:\!> echo."BEGIN" | %awk% {print(substr($0,2,length($0)-2))} 
02:23  g0pher: get: BEGIN"
02:30  geirha: You're probably stripping a \r at the end
02:32  geirha: 4# printf '"BEGIN"\n' | awk '{print(substr($0,2,length($0)-2))}'
02:32  shbot: geirha: BEGIN
02:32  geirha: 4# printf '"BEGIN"\r\n' | awk '{print(substr($0,2,length($0)-2))}'
02:32  shbot: geirha: BEGIN"
02:33  g0pher: even more simple - echo echos its Complete args - eg 
02:34  g0pher: C:\!> echo."BEGIN" | %awk% {print(length($0),substr($0,2,length($0)-3))}
02:34  g0pher: gives 8 BEGIN
02:35  g0pher: eg the trailing space between " and | is echoed
02:36  geirha: So   echo."BEGIN"| %awk% {print(length($0),substr($0,2,length($0)-3))}  gives a different result?
02:36  g0pher: yes should have said : echo."BEGIN{}"| %awk% {print(substr($0,2,length($0)-2))}
02:37  g0pher: gives BEGIN{}
02:37  geirha: Oh, weird
02:53  g0pher: eg printing: hello, world
02:54  g0pher: C:\!> echo."BEGIN{print "hello, world"}"| %awk% {print(substr($0,2,length($0)-2) )} | %awk% -f -
02:54  g0pher: gives: hello, world
02:55  g0pher: else must do C:\!> awk "BEGIN{ print \"hello, world\"}"
03:43  g0pher: geirha: just the irrationality of cmd.exe shell whereas ^ is the escape char
--- Log closed Fri Oct 29 04:18:55 2010
--- Log opened Fri Oct 29 04:19:18 2010
04:19 --- Users 104 nicks [0 ops, 0 halfops, 0 voices, 104 normal]
04:21 --- Channel #awk was synced in 113 seconds
05:25  g0pher: is their an alternative to freenode to discuss awk ? eg freenode has Ban on t-mobile users ?
05:30  pr3d4t0r: g0pher: . . .
05:30  pr3d4t0r: g0pher: What do you mean "ban on T-Mobile users"?
05:31  pr3d4t0r: g0pher: Are you sure it isn't T-Mobile blocking your ports instead?
05:42  g0pher: pr3 - apology - but freenode has had a ban on t-mobile for last week
05:42  pr3d4t0r: g0pher: Interesting.
05:42  pr3d4t0r: g0pher: I didn't know that.  What caused it?
05:43  pr3d4t0r: s/caused/prompted/
05:45  gnomon: g0pher, and can it be circumvented with appropriate SASL authentication?  This may have caused Rob Landley some small grief within that timeframe.
05:46  g0pher: seems some of those persons came on - abused #freenode channel - they banned the whole t-mobile domain
05:49  pr3d4t0r: g0pher: I'm clarifying that with the netops.
05:50  pr3d4t0r: g0pher: It wasn't abuse on SASL as much as abuse on the abuse@ email address.  It got flooded big time.
05:50  pr3d4t0r: g0pher: How are you connected right now?
05:51  g0pher: am on a web client - not my usual irc client - do /whois 
06:00  pr3d4t0r: g0pher: So, the offer stands.
06:15  g0pher: pr3d4t0r - which offer was that ?
06:49  g0pher: pr3d4t0r: which offer was that ?
--- Log closed Fri Oct 29 08:17:13 2010
--- Log opened Fri Oct 29 08:17:34 2010
08:17 --- Users 103 nicks [0 ops, 0 halfops, 0 voices, 103 normal]
08:19 --- Channel #awk was synced in 117 seconds
--- Log closed Fri Oct 29 13:09:38 2010
--- Log opened Fri Oct 29 14:02:01 2010
14:02 --- Users 103 nicks [0 ops, 0 halfops, 0 voices, 103 normal]
14:03 --- Channel #awk was synced in 115 seconds
15:16  pgas: j_wright: or do you mean m4 is more versatile than awk? I admit I don't know much about m4 but somehow I feel it's even more difficult to use m4 as a general purpose language
--- Log closed Fri Oct 29 20:02:18 2010
--- Log opened Fri Oct 29 20:02:58 2010
20:02 --- Users 109 nicks [0 ops, 0 halfops, 0 voices, 109 normal]
20:04 --- Channel #awk was synced in 129 seconds
--- Log opened Fri Oct 29 20:27:34 2010
20:27 --- Users 111 nicks [0 ops, 0 halfops, 0 voices, 111 normal]
20:29 --- Channel #awk was synced in 104 seconds
20:31 --- pr3d4t0r is now known as pr3d4k4t
20:32 --- calmar_ is now known as calmar
20:58  taylanub: why do i need three backslashes in e.g.:   "echo foo\\\"bar" | getline var    ?
20:59  taylanub: oh it's the shell ... stupid me :/
--- Log closed Sat Oct 30 00:29:52 2010
