--- Log opened Tue Oct 12 06:14:55 2010
06:14 --- Users 706 nicks [0 ops, 0 halfops, 0 voices, 706 normal]
06:16 --- Channel #python was synced in 89 seconds
06:30  shut: Hello, I am using python2.7 and would like to know if there is any way to debug specifically what sorted() is doing/not doing to a list of tuples I have.
06:30  _habnabit: Like what?
06:30  shut: I've followed the tutorial in the FAQ for it, but specifically
06:31  shut: I am running the following on a list of tuples; each tuple has two elements, a unicode formatted string, and a number
06:31  shut: sorted(f,key=lambda t : t[1])
06:32  shut: I was hoping that'd return a sorted list by the number
06:32  _habnabit: It does indeed.
06:32  shut: [(u'\u6708\u7d99', 24), (u'No M\xe1s', 10)] for example
06:33  shut: Oh you know what i am a huge idiot
06:33  shut: nevermind
06:33  shut: Thank you
06:33  shut: I assumed sorted was acting on the list and not a function which returned a sorted list, so I should go to sleep
06:33  noisymouse: Anyone know of a website where I can enter numbers and have it find the frequencies for each of those numbers?
06:34  _habnabit: shut, list.sort oes that.
06:34  _habnabit: shut, also, operator.itemgetter(1)
06:34  ssbr: noisymouse: write a program to do it?
06:34  shut: _habnabit: Yes, haha, thanks for your help
06:36  shut: Sometimes it just takes asking for me to realize that stuff, so again, thanks
06:37  eklo: for a dice game, how would I continuously check to see if either of the players has gotten the max score limit
--- Log closed Tue Oct 12 08:47:14 2010
--- Log opened Tue Oct 12 08:47:37 2010
08:47 --- Users 702 nicks [0 ops, 0 halfops, 0 voices, 702 normal]
08:50  sig^: =_=__==o-<
--- Log closed Tue Oct 12 08:50:43 2010
--- Log opened Tue Oct 12 08:51:03 2010
08:51 --- Users 702 nicks [0 ops, 0 halfops, 0 voices, 702 normal]
08:51  sig^: _o_  -o-  _o_
08:52 --- Channel #python was synced in 85 seconds
08:52  ssbr: sig^: eh, stop that
08:54  PascalHunger: any of you guys ever try tokyo cabinet? how is performance between that and say mysql?
08:55  ssbr: PascalHunger: dude it doesn't do anwyhere near the same thing as MySQL except in the vague sense of "store stuff"
08:56  PascalHunger: ssbr: yea :\ sorry I don't know much about this, I have been using sql for years, i just need a system for a simple db
08:57  PascalHunger: ssbr: I thought maybe it might be a good choice for a simple schema
08:57  ssbr: tokyo cabinet doesn't have schemas, it's just a flat key-value datastore
08:58  PascalHunger: ah
08:58  PascalHunger: hmm
08:58  PascalHunger: but you can use tables right?
08:58  PascalHunger: so it sorta fakes the whole relational db thing in a way?
08:58  _habnabit: (If you want a relational DB, why not use a relational DB?)
08:59  PascalHunger: I can use anything
08:59  PascalHunger: trying to just use the fastest technology I can find
08:59  _habnabit: That... doesn't seem to be like a good criterion.
09:04  PascalHunger: its my little hobby project
09:04  _habnabit: You should find something that fits your data, and not bang on your data until it fits a database.
09:04  PascalHunger: its just a hobby project _habnabit just wanted to use something different
09:04  ssbr: if Tokyo Cabinet were fast for all data, everything would use tokyo cabinet.
09:04  _habnabit: Well, that's a wholly different criterion than "I want to use the fastest thing I can find"
09:04  ssbr: if you want something different, but not a silly flat thing, maybe try mongodb?
09:04  ssbr: except, if your data is relational, just try a different RDBMS. Maybe Postgres?
09:04  ssbr: Use an ORM, maybe!
09:05  PascalHunger: all data is relational
09:05  PascalHunger: you can "normalize" it to that system
09:05  PascalHunger: ssbr: an orm?
09:06  PascalHunger: I did back in 2005 but I dont find them fun anymore :)
09:06  PascalHunger: tokyo cabinet is like 300x faster then mysql for a write ....with an orm I bet it could easily go over 800x faster
09:07  ssbr: PascalHunger: not all data involves relations, no
09:07  _habnabit: PascalHunger, but that doesn't mean anything.
09:08  ssbr: I mean you can say, "hey, it's a relational thing but with ONE TABLE" but then that's pointless.
09:08  _habnabit: PascalHunger, if your data is denormalized, you have to update the data in more than just one place.
09:08  PascalHunger: I have no data
09:08  ssbr: PascalHunger: anyway, you seem to be confused about what ORMs are about
09:08  PascalHunger: this is just a db for a content mangement system
09:08  ssbr: really they'll probably make your code slower, not faster
09:08  ssbr: PascalHunger: well you have to figure out how the CMS works
09:08  PascalHunger: ssbr: I used sqlobject back in 05 and used sa as well .....i know them very well
09:09  ssbr: PascalHunger: and yet you think they'll give you 800x speed improvements over "mysql"
09:09  PascalHunger: I didn't say that .....at its peak sure
09:09  PascalHunger: ssbr: please look at benchmarks
09:09  ssbr: PascalHunger: except that doesn't make sense.
09:09  PascalHunger: berkely db is super fast as well
09:09  ssbr: PascalHunger: ORMs are written on top of SQL databases
09:09  PascalHunger: I know what they are man
09:10  ssbr: your statement that they can be 800 times faster at peak is ludicrous on its face.
09:10  PascalHunger: jsut because I asked for a db to be recommended does not mean I dont know what they are :)
09:10  PascalHunger: ssbr: its the truth and thats it
09:10  PascalHunger: most open source relational db's are slow
09:11  PascalHunger: oracle and ms sql are the fastest ones
09:11  ssbr: PascalHunger: how can an ORM that uses MySQL be 800 times faster than MySQL?
09:11  PascalHunger: ssbr: the orm to me generates tons of code that is not needed
09:11  ssbr: maybe you mean Oracle or MS SQL can be 800 times faster, but that has nothing to do with ORMs really. An ORM is at best as fast as the database you build it on.
09:11  Jerub: ssbr: he means an ORM using tokyo cabinet
09:12  ssbr: Jerub: that's not an ORM at all
09:12  ssbr: (and it still doesn't make sense. 500x -> 800x?)
09:12  PascalHunger: anything that binds something to objects is an orm to me?
09:12  _habnabit: PascalHunger, you're forgetting about the R in ORM.
09:13  ssbr: PascalHunger: ORM means "Object-Relational Mapping"
09:13  PascalHunger: in the end it does alot of the same things _habnabit , orm's were just built with those in mind
09:13  PascalHunger: yea i am not really a fan of orm's that much :\ I sitll write tons of sql although they are cool from time to time
09:13  ssbr: No, an ORM works totally different from an object-wrapper around a K-V store.
09:14  PascalHunger: I would assume so, sure
09:14  PascalHunger: I was just doing a small project, a hobby thing and wanted the fastest db....performance wise only
09:15  PascalHunger: for reads and writes tokyo looks much faster then mysql
09:15  PascalHunger: or any sql
09:15  _habnabit: PascalHunger, hey, I wrote a database that outperforms tokyo cabinet.
09:15  _habnabit: infobob, redent PascalHunger def get(key): pass;; def set(key, value): pass
09:15  ssbr: PascalHunger: who cares? it'll make your life crap, and will get inconsistencies when your server chokes in the middle of a thing.
09:15  infobob: PascalHunger, http://paste.pocoo.org/show/274340/
09:16  ssbr: PascalHunger: for a CMS, it's practically worthless, because, sure, it's fast, but it's also total crap.
09:16  PascalHunger: what is total crap?
09:16  PascalHunger: tokyo?
09:16  ssbr: Yeah, for a CMS.
09:16  PascalHunger: it runs the largest social network in japan
09:17  PascalHunger: I am just curious what the fastest storage model I could use would be
09:18  ssbr: PascalHunger: um, no it doesn't
09:18  ssbr: it's used for caching
09:18  ssbr: it's not used to actually store stuff
09:18  PascalHunger: ....hmm?
09:18  _habnabit: PascalHunger, what does 'fastest' mean?
09:19  PascalHunger: _habnabit: I am sure you could guess man
09:19  _habnabit: PascalHunger, I could guess, but that wouldn't be what *you* think it means.
09:19  PascalHunger: I do a select/get/xx and i get it back the fastest
09:19  PascalHunger: same with write
09:20  _habnabit: PascalHunger, so you want to use whichever database performs best at 'hello world', basically.
09:20  _habnabit: PascalHunger, you don't care about real-world situations or complex data.
09:20  ssbr: PascalHunger: you're referring to mixi.jp, right?
09:20  ssbr: http://en.wikipedia.org/wiki/Mixi
09:20  ssbr: They mostly use MySQL.
09:20  PascalHunger: _habnabit: no because this is not complex data
09:20  ssbr: Tokyo Cabinet is used for caching.
09:21  ssbr: PascalHunger: CMSes require "complex data"
09:21  ssbr: "complex data" meaning, anything more than just a single key-value pair.
09:21  PascalHunger: so maybe a document db then?
09:21  ssbr: sure, use mongodb.
09:21  ssbr: Whatever. Don't pretend this is just about speed.
09:22  PascalHunger: this is just a super uber simple site, just wanted to try the fastest thing out
09:22  ssbr: PascalHunger: the fastest thing is /dev/null
09:23  PascalHunger: ssbr: come on man, you know what im trying to do
09:23  PascalHunger: I just didn't want to install another db on the box etc etc
09:23  PascalHunger: postgresql is slow
09:23  ssbr: PascalHunger: Yes. You're trying to use something fast, because it's fast, and ignoring other important considerations.
09:23  PascalHunger: mysql is a little better
09:23  ssbr: Those other considerations are very important, and ignoring them is foolhardy.
09:24  _habnabit: ("Fast" doesn't meany anything without considering context, anyway.)
09:24  PascalHunger: its not like its going to get tons and tons of traffic
09:24  ssbr: the /dev/null example illustrates an extreme case of this (and is cliche because of its strawmanness)
09:24  ssbr: PascalHunger: it's not traffic you have to worry about, necessarily.
09:24  ssbr: it's just, "hey, two people tried to write at the same time". Now what?
09:25  ssbr: with something like Tokyo Cabinet, that can result in disaster.
09:25  PascalHunger: ssbr: so what would you suggest for the fastest "db" for a cms
09:26  ssbr: PascalHunger: I wouldn't. I think you're massively overvaluing speed.
09:26  _habnabit: PascalHunger, premature optimization is the root of all evil.
09:26 * lewellyn knows better than to chime in, but...
09:26  ssbr: _habnabit: choosing a database is a pretty irreversible decision sometimes
09:26  PascalHunger: its for fun _habnabit
09:26  lewellyn: PascalHunger: sqlite ;)
09:26  ssbr: PascalHunger: it's for *learning*
09:27  PascalHunger: I do like sqlite heh, but its still sql but i did forget about that one
09:27  ssbr: PascalHunger: if it's "just for fun", who the hell cares about speed? even postgres is faster than you can blink for small datasets and low load
09:27  lewellyn: but yeah. for many/most "mainstream" needs, a db is overkill.
09:27  _habnabit: ssbr, okay? he's trying to pick one without evaluating it.
09:27  lewellyn: if you're using a sane OS, your flat files will be memory-backed. yay cache.
09:28  lewellyn: you're waiting for a disk flush either way, if you value the data.
09:29  lewellyn: i personally love walking into a site and discovering that they dedicate 2gb ram to mysql for 250mb data
09:30  PascalHunger: I will just use sqlite
09:30  shylent: PascalHunger: http://howfuckedismydatabase.com/sqlite/
09:30  lewellyn: PascalHunger: there's a fair number of large sites which use it for mostly-read data. it's "good enough" and prevents the holy wars ;)
09:31  lewellyn: shylent: i visited that site and decided that db2 must be the best choice!
09:32  Alberth: PascalHunger: you are aware that 'fastest' at DB level does not mean 'fastest' at page serving level?
09:33  PascalHunger: I wonder how postgresql performance is doing these days
09:33  Alberth: apparently not :)
09:33  gjvc: better than you think
09:33  lewellyn: and "fastest" is one of those great vague words. like calling something "pure" or "best" or "scalable"
09:34  ssbr: Way better than he thinks.
09:34  ssbr: lewellyn: but it's web scale!
09:35  lewellyn: PascalHunger: if it's just a hobby thing. use sqlite. it's fast enough, it's not a memory hog, it's simple, you can "upgrade" to a "better" db later (if you do it right), etc.
09:35  lewellyn: ssbr: so's my 28.8kbps modem!
09:36  ssbr: sure, if you get 50 000 of it
09:36  lewellyn: it all depends on your needs
09:36  lewellyn: if you're serving "web bugs", it's probably more than sufficient
09:37  cteng04: does anybody have experience with pysimplesoap?
09:37  lewellyn: the problem, as always, is that people don't know what they're optimizing because they're trying to do it before they get far enough to have enough concrete details to even start on it.
09:39  ssbr: lewellyn: http://120.146.162.194:8080/ :D
09:39  lewellyn: ssbr: yes. thank you for helping prove my point. ;)
09:39  lewellyn: i was thinking more along the lines of http://www.aux-penelope.com/ but yours is more vivid illustration ;)
09:50  cteng04: bradleyayers: hey are you still around?
09:51  bradleyayers: yup
09:51  cteng04: hey!
09:52  cteng04: so i found another client called pysimplesoap
09:52  cteng04: http://code.google.com/p/pysimplesoap/wiki/SoapClient
09:52  bradleyayers: does it work?
09:52  cteng04: not yet
09:52  bradleyayers: haha
09:52  cteng04: but im getting a 500 error
09:52  cteng04: haha
09:52  cteng04: can you take a look at my traceback?
09:52  bradleyayers: ya
09:52  cteng04: k cool thanks
09:52  cteng04: i owe u big time
09:53  cteng04: http://dpaste.com/256701/
09:53  cteng04: and this is the actual code: http://dpaste.com/256702/
09:53  cteng04: so a few interesting things going on
09:53  bradleyayers: can't work anything out from that
09:54  bradleyayers: basically they have a bug in their system
09:54  cteng04: hrm
09:54  bradleyayers: they shouldn't be returning a 500 response unless something broke
09:54  cteng04: would it be something on my end?
09:54  cteng04: or is that unclear
09:54  bradleyayers: well, you're sending something that they aren't expecting
09:55  bradleyayers: what they SHOULD do is realise they don't know what's going on, and send back a 400 bad request
09:55  cteng04: oic
09:55  cteng04: is this error (http://code.google.com/p/pysimplesoap/issues/detail?id=2) related?
09:56  bradleyayers: that looks unrelated
09:57  bradleyayers: i'm not totally convinced yet that suds was doing GET requests rather than POST
09:57  bradleyayers: we didn't really prove it
09:57  cteng04: thing is the client is working
09:57  cteng04: if i invoke the getTransaction method with the incorrect parameters it'll spot it
09:57  bradleyayers: and i don't know enough about SOAP or suds to say whether or not all methods use POST by default
09:57  cteng04: and i can see all the wsdl methods in the response
09:58  cteng04: yea i resorted to trying simplesoap
09:58  cteng04: just bc the xml request was completely different when we used suds
09:58  cteng04: and with ZSI
09:58  cteng04: i got an attributeerror that i couldnt get around
09:58  mgeary: bah
09:59  mgeary: i'll never fully understand text encoding. i've got a unicode value that looks like this: u'TRANSPORT DE R\xc9FUGI\xc9S'. But that's not right, is it? if it's unicode, it ought to show the actual characters, not the \x sequences, no?
10:00  bradleyayers: mgeary, unless ofcourse the characters \ x c 9 are actually in your string
10:01  _habnabit: mgeary, that's the repr()
10:01  mgeary: which they're not
10:01  lokieee: hi, so what I'm trying to do is search through 1000's of files, i'm searching the .cpp files and if I find a function, such as   void foo(int lol, char *merr);  I want to generate /** *@description: function name: @param lol @param merr */    any good idea about doing this? or simply search each file, find a function name and insert above or is there a better way
10:01  _habnabit: mgeary, repr() doesn't support non-ASCII strings, so they're represented using ASCII.
10:01  mgeary: so, what should i do to it to get the real unicode representation?
10:01  _habnabit: mgeary, I don't know what that means
10:01  mgeary: i've tried encode('utf-8'), but that didn't do it
10:02  _habnabit: mgeary, what are you trying to do?
10:02  mgeary: _habnabit: i want to get TRANSPORT DE RÉFUGIÉS
10:02  _habnabit: mgeary, "get" how?
10:02  mgeary: like this: u'TRANSPORT DE RÉFUGIÉS' :)
10:02  _habnabit: mgeary, why?
10:03  _habnabit: mgeary, you can't change the repr().
10:03  mgeary: i'm trying to put it into a sqlite db, and i'm getting errors as it is
10:03  bradleyayers: cteng04, if i were you i'd persist with suds
10:03  mgeary: i'm not intentionally getting the repr()
10:03  _habnabit: mgeary, well, that's a completely different matter.
10:03  _habnabit: mgeary, sqlite supports unicode wonderfully. What's the error?
10:04  mgeary: _habnabit: UnicodeEncodeError: 'ascii' codec can't encode character u'\xc9' in position 14: ordinal not in range(128)
10:04  _habnabit: mgeary, yeah, that's not something sqlite sould raise.
10:04  _habnabit: mgeary, pastebin the full traceback.
10:05  mgeary: _habnabit: http://dpaste.com/256706/
10:06  _habnabit: mgeary, oh eeeeew. You're using sqlobject.
10:06 * mgeary hangs his head
10:06  _habnabit: mgeary, that's not the same thing at all.
10:06  _habnabit: mgeary, and it kinda sucks.
10:07  mgeary: hrm
10:07  mgeary: well then
10:07  mgeary: i just wanted to keep it nice and abstracted, didn't want to have to generate code
10:07  _habnabit: mgeary, so use sqlalchemy
10:07  _habnabit: mgeary, it doesn't suck.
10:07  mgeary: what i'm writing is a tool to convert an Excel sheet into a table of a sqlite database
10:08  mgeary: okay. i don't know beans about sqlalchemy, but maybe it's time to change that
10:09  mgeary: it just seemed SQLobject had a gentler learning curve
10:09  _habnabit: I doubt it.
10:09  _habnabit: sqlalchemy is really easy.
10:09  lokieee: anyone good at regex?  I'm trying to search for patterns of return_type class_name::function_name() { or \n {
10:10  _habnabit: lokieee, er.
10:10  _habnabit: lokieee, you probably want a real parser.
10:10  TheSheep: parsing c++ is too hard even for context-free parsers, not to mention regular ones
10:10  Wild_Cat: especially if it's C++ you're trying to parse.
10:10  lokieee: IT IS~!!!!  I'm trying to insert doxygen comments, like a template above the function if its found
10:10  Wild_Cat: C++ *compilers* already have the hardest time parsing C++. That's how fucked up that syntax is.
10:11  _habnabit: Yeah, C++ kinda sucks.
10:12  lokieee: It doesn't sound that hard doing it a non-regex way, just search for :: and parse that line
10:13  Wild_Cat: lokieee: except that :: occurs in tons of places that aren't method definitions.
10:13  Wild_Cat: e.g. new std::Vector<std::string>();
10:13  hampusw: and it may not be a single line
10:13  lokieee: well once I see the :: i will analyze the line futher for example, if it has a :: does it also have a {
10:13  lokieee: if it doesn't look at the next line, and see if it has a {
10:14  lokieee: it will be messy as hell though >_<;;
10:14  xrmx: hello, is possible to query installed package version with easy_install?
10:15  _habnabit: lokieee, so use a parser.
10:15  lokieee: _habnabit, what type of parser
10:15  lokieee: is there a good parser for C++ in python?
10:16  ssbr: lokieee: C++ doesn't just get "parsed".
10:16  mahmul: lokieee: http://www.stack.nl/~dimitri/doxygen/starting.html#extract_all ?
10:18  lokieee: mahmul, what i'm trying to do is enforce doxygen commments in the code, rather than having the programmer have to go back and put all the javadoc style doxygen comments, I wanted to generate a template for them, so they just have to fill in a few things
10:18  sedulous: lokieee: if your program is supposed to work with arbitrary C++ programs, you'll need a macro preprocessor as well
10:22  zwollex: Hi, can some one help me out or point me in the right direction?
10:22  _habnabit: Probably not.
10:23  confluency: Go south.
10:23  zwollex: I have created a small webserver in python, I can connect to it and see the page I have written in the code, but now I want to display information from a linux /proc file system
10:24  zwollex: while 1:     csock, caddr = c.accept()     cfile = csock.makefile('rw', 0)     line = cfile.readline().strip()     cfile.write('HTTP/1.0 200 OK\n\n')
10:24  Dyresen: pastebin please!
10:25  zwollex: do I need to open /proc or write or open it and put in a variable and read from there?
10:25  _habnabit: zwollex, any particular reason you're writing a web server from scratch?
10:26  Dyresen: var = commands.getoutput("cat /proc/whatever")
10:26  _habnabit: Dyresen, wow that's at least three kinds of wrong!
10:26  zwollex: well, I could have used cherrypy, but I only needed to create a webpage that displays system info
10:26  _habnabit: zwollex, use bottle.
10:27  zwollex: oh and I am kind of new to python/programmering, so this was one of my own project to get better at programming
10:27  eggy_: zwollex: yeah, you should definitely go for the bottle
10:27 * ssbr chugs his hooch
10:28  Dyresen: If want's to write it from scratch, I can't see what is wrong with it.
10:28  zwollex: well, I already have the webserver and I can display a page.. but I don't know how to read from a file
10:28  _habnabit: Dyresen, except he obviously hasn't even pretend to read the HTTP spec.
10:29  zwollex: http://fpaste.org/gxdT/
10:29  Dyresen: So what, let him play with it.
10:30  _habnabit: Dyresen, if we're going to "let him play with it", that would entail that we don't waste our time babying him along with it.
10:30  zwollex: I only need you guys to point me in the right direction, in that code which I pasted I want a line that reads from the /proc/net/dev
10:30  _habnabit: zwollex, so, you're trying to write a web server before you know how to read from a file?
10:30  _habnabit: zwollex, that seems a bit... counterproductive.
10:30  _habnabit: zwollex, networking is really hard.
10:31  Dyresen: _habnabit: you are not even touching the question he asked.
10:31  mgeary: so, _habnabit, i'm trying this with sqlalchemy, and i've got it successfully creating a table, but it appears that in order to insert data into the table, i need to create a class for that table. That's what i've been trying to avoid, since this script is entirely abstract/generic. It takes an Excel sheet with arbitrary columns and creates a table and imports the data into it.
10:31  eggy_: Dyresen: we try to prevent people from blowing themselves up
10:31  _habnabit: mgeary, okay, so?
10:32  _habnabit: mgeary, doesn't sqlobject have classes for tables too?
10:33  mgeary: sort of. So the issue i now have is creating a class on the fly that has an __init__ that takes all the fields from the sheet and assigns them to class variables
10:34  mgeary: should i use new.classobj() for that? i've done that a bit, but i've never tried creating an __init__ on-the-fly :/
10:34  _habnabit: mgeary, I make a base class for all my mappes sqlalchemy classes that takes **kwards and unpacks it as instance attributes.
10:34  _habnabit: mgeary, no, don't use the 'new' module, and 'classobj' is old-style classes.
10:34  mgeary: that's what i read, but i didn't see the "new" way to do it
10:34  _habnabit: mgeary, it's type(), but you don't need that.
10:35  _habnabit: mgeary, just make the classes explicitly.
10:35  mgeary: how do you mean?
10:35  Wild_Cat: mgeary: class Foo(object): # stuff stuff stuff; return Foo
10:35  _habnabit: What
10:35  mgeary: Wild_Cat: can't do that because "Foo" and the init params would be different every time
10:36  mgeary: that's the whole point, NOT having to do that
10:36  thorwil: hi! an if block with "if var:" shouldn't be executed if var is None, right?
10:36  _habnabit: thorwil, it won't be, no.
10:37  _habnabit: mgeary, http://svn.habnabit.org/trunk/hab/levellist/levellist/levellist/model/__init__.py <- here's how you do it.
10:37  _habnabit: mgeary, scroll most of the way down.
10:37  mgeary: _kwinit_object?
10:37  _habnabit: Right.
10:37  mgeary: so if i just define a base class like that
10:37  _habnabit: In my newer projects it's called _KwinitObject
10:38  mgeary: and have my sqlA just-in-time objects inherit from it
10:38  _habnabit: Again, why are you trying to make classes dynamically?
10:38  _habnabit: Are you making tables dynamically too?
10:38  mgeary: yes
10:38  mgeary: that's the point
10:38  _habnabit: From what?
10:38  mgeary: Excel spreadsheets
10:38  _habnabit: p/e
10:38  _habnabit: Er.
10:39  mgeary: ..?
10:39  _habnabit: You don't know what the schema is before you read the spreadsheet?
10:39  mgeary: right
10:39  mgeary: i'm typing all fields as strings
10:39  mgeary: the deal is that some of these spreadsheets have tens or hundreds of thousands of rows
10:39  mgeary: and using xlrd is great, but not when it has to keep all that in memory at once
10:40  mgeary: so i want to spin them off into a database to do some crud and them spit them back out as Excel when i'm done
10:40  mgeary: so even though the typing of fields is sloppy, it's still a significant performance/utility gain
10:41  neumaennl: mgeary: but how can you operate on the data if you don't know what it looks like?
10:41  mgeary: neumaennl: i do, but what i'm writing right now is intended to be a generic tool that i can then wrap situation-specific code around to do the actual processing
10:42  mgeary: e.g. step 1: convert to database(s), step 2: do situation-specific data crunching
10:42  mgeary: step 1 is always the same, but with different inputs
10:43  mgeary: and the nature of the crunching tends to be similar: look for correlations between tables of similar data and do stuff with matches
10:44  mgeary: so, given 2 spreadsheets as inputs, "elsa" and "eva", i want to create 2 tables with (as it turns out in this case) identical schemas, and then iterate through the rows and process matches
10:45  mgeary: so THAT's why i think i need to spawn a class definition at runtime
10:47  avu: mgeary, do what Wild_Cat suggested with a baseclass like _habnabit showed you?
10:47  mgeary: yep. just did that
10:48  mgeary: i think i may have it now
10:48  avu: mgeary, (you said 'Foo' will be different every time but a classes name really isn't anything (that) special)
10:49  Wild_Cat: well, if it's really the class name that's a problem, you can still change its __name__ attribute before returning it. Just sayin' ;)
10:49  avu: so it doesn't matter if all the classes are generated in the function using 'class cls: ...;; return cls'
10:49  avu: true dat
10:50 --- simonrvn_ is now known as simonrvn
10:55  mgeary: bang. got it working
10:57  mgeary: beautiful. it's all there
10:58  mgeary: unicode and all ;)
10:58  Beoca: Should i learn python 2.x or 3.x ?. I am confused
10:59  Dyresen: 2.x
10:59  Dyresen: 3.x will take you an hour to learn if you know 2.x
10:59  Beoca: Advise ?
11:00  Wild_Cat: +1
11:00  Beoca: Get it.
11:00  Dyresen: Most libs are still in 2.x
11:01  b52: is a list a good way to store a few thousend entries while checking if this list has a special entry?
11:01  Wild_Cat: b52: depends what you want to do with the list. If you're going to test "foo in my_list" a lot and don't care about the order, a set may be a better solution
11:01  Wild_Cat: (__contains__ is O(n) in lists and O(1) in sets)
11:02  b52: sounds good, ill go with a set
11:05  Suv123: hi, i recommended my friend to include imports at the top of file. later he asked me what are pros and cons of importing in the top. Can anyone make it clear?
11:05  Dyresen: improves readability as a starter
11:05  Suv123: we can use import in middle of python script for lazy loading. thats the positive aspect of importing in the middle
11:06  Suv123: so is it all about readability only ?
11:07  Suv123: are they any situation i may get screwed while importing in middle? since its suggested in PEP 8. i wanna know more :)
11:07  mtx_init: would checking for library existence be affected?
11:07  Dyresen: Im sure someone has a better explanation
11:07  mtx_init: to add to Suv123, question.
11:10 --- cnc-away is now known as cncfanatics
11:39  Octave: Hi, I'm wondering if there is a way to assign values with boolean operators to a variable? Or return it from a function.
11:40  Alberth: Octave: the best approach (most readable) is to use an 'if' statement
11:41  Octave: as in: val ~val2 & val3>val4
11:41  Alberth: what does that do?
11:41  DanGer: Octave: you can't just do foo = val ~val2 & val3 > val4 ? or just return ....
11:42  Octave: just an example. It's the sort of end result I will need as my output.
11:42  Octave: return & val, will not work.
11:42  DanGer: put it in ()
11:43  Alberth: Octave: ~ is not an operator in Python, and & is binary 'and', so it needs 2 operands
11:43  Wild_Cat: careful, & is the bitwise and, not the logical and.
11:44  Wild_Cat: Octave: which means that the logical operation "a and b" (C/C++'s "a && b") is written "a and b" in Python, *not* "a & b".
11:44  Wild_Cat: likewise with the "or" and "not" operators. For more information, read the tutorial.
11:45 --- mukul_afk is now known as mukul
11:46  Alberth: Suv123: most, if not all, programming is about readability
11:46  Octave: Ok, thanks.
11:46  Octave: Going to do some more experimenting.
11:54  bahamas: Alberth: ~ is an operator, but a unary one
11:55  votz: Why does "re.search( r'([-+]?(0[xX][\dA-Fa-f]+|0[0-7]*|\d+))', '-1' ).groups()" return ('-1','1') and not just ('-1')?
11:55  cybercobra: is there something in the std lib for forming query string urls? e.g. foo("http://a.com/foo", {'b':'c', 'd':'e'}) => "http://a.com/foo?b=c&d=e"
11:55  Yhg1s: votz: because you have two groups.
11:55  votz: that regular exprssion is the expression given to replace %i in scanf
11:56  Alberth: bahamas: Indeed, I looked for it too briefly.       Thanks for the correction.
11:56  Yhg1s: cybercobra: urllib.urlencode
11:56  cybercobra: Yhg1s: thanks
11:56  votz: Yhg1s: what are the two groups? looks like one group to me
11:56  Yhg1s: votz: count the parentheses.
11:57  votz: one nested pair
11:57  Yhg1s: two sets of parentheses, two groups.
11:57  Yhg1s: neither of the set is modified to be non-matching.
11:57  votz: if I remove the outer parens re.match(...) returns ('1') instead of ('-1')
11:57  Yhg1s: yes, that would change the meaning.
11:58  Yhg1s: do you understand that parentheses create groups?
11:58  votz: yes
11:58  Yhg1s: so if you want the first group, why are you calling .groups()? Just get the first group explicitly.
11:58  votz: well, I think I do but Im not quite following why the minus sign is being truncated
11:58  Yhg1s: it's not 'being truncated'.
11:58  Yhg1s: it's part of the first group, but not the second group.
11:58  votz: sorry, not being matched
11:59  Yhg1s: if you remove the outer parentheses, you *remove* the outer group. And the plus or minus sign is not included in the inner group.
11:59  Yhg1s: I still don't understand why you're worried about the returnvalue of .groups(). If you want the first group, get the first group.
12:00  votz: Yhg1s: Im migrating a big scanf(...) line to python, so the total number of groups returned in groups() should be the total number of items looked for
12:01  votz: so with one case I could just select the '-1' from ('-1', '1'), but that doesn't work if I want to match a number of things
12:01  Yhg1s: votz: then you should not use non-grouping parentheses.
12:01  Yhg1s: votz: or, better yet, use named groups to collect the groups you actually care about.
12:01  votz: Yhg1s: this goes a bit beyond my knowledge of regex. How can I use non-grouping parens?
12:01  votz: named groups would be a workable option
12:02  Yhg1s: votz: (?:...) is non-grouping. (?P<name>...) is named.
12:02  votz: but the former would be easier
12:02  Yhg1s: votz: docs.python.org/library/re has the details.
12:03  votz: Yhg1s: yep, I'm there looking. That's where I got '[-+]?(0[xX][\dA-Fa-f]+|0[0-7]*|\d+)' as the replacement for %i w/ scanf
12:03  mgupta: mukul: Hi Mukul.
12:03  mgupta: Around?
12:04  votz: Yhg1s: which is why I'm a little confused it's not working as-is
12:05  Yhg1s: votz: it *is* working as-is, you're just expecting something the example doesn't do, namely provide you with the minimal groups you want.
12:05  votz: right, but that's not the behavior of scanf
12:05  Yhg1s: because scanf does something *entirely different*.
12:05  Yhg1s: regular expressions are not a drop-in replacement.
12:05  votz: anyhow, I tried '(?:[-+]?(0[xX][\dA-Fa-f]+|0[0-7]*|\d+))' but that still returns ('1')
12:06  Yhg1s: because you've turned the *wrong parentheses* into non-grouping versions.
12:06  Yhg1s: You're now explicitly not capturing the plus or minus sign.
12:06  votz: Yhg1s: ah, you're right. '([-+]?(?:0[xX][\dA-Fa-f]+|0[0-7]*|\d+))' works as expected
12:07  votz: turning the inner parens into non-grouping
12:09  winterweaver: how do I match a regex that does NOT start with http:// ?? I tried (?!^http://) but it does not seem to work
12:11 --- mukul is now known as mukul_afk
12:14  kll: winterweaver: it should
12:14  manixor: hi all
12:16 --- cncfanatics is now known as cnc-away
12:16  ssbr: winterweaver: why not make a regex that matches anything with http:// , and then negate the result of the match?
12:16  ssbr: (think "grep -v": not reobj.search(s))
12:16  winterweaver: ssbr, just thought of that now actually
12:17  kll: winterweaver: but you're negative lookahead is correct, how does the rest of your code look?
12:19  killown: winterweaver, [(?!^http://)]
12:19  Octave: I am trying to build an expression programmatically and pass the expression as an argument to a function (it's a library function which has overloaded the operators I think)
12:19 --- mukul_afk is now known as mukul
12:20 --- cnc-away is now known as cncfanatics
12:20  Octave: I'm having trouble assinging or returning an expression involving logical operators.
12:20  flupke: hello, how can I cdef an empty numpy array ? my attempt gave this traceback: http://paste.pocoo.org/show/274396/
12:22  mukul: mgupta: Hi
12:22  flupke: (the '^' is misplaced in my paste, it points to the 'dtype=' declaration)
12:24  BrettS: So I've run across something a little odd, anyone have any thoughts as to why someone would do this? http://fpaste.org/QsYL/
12:24  mukul: Can anyone give me some idea how to use sys.excepthook ?
12:26  mgupta: mukul: Thank you for pointing this.
12:26  BrettS: Well something like that, I've simplified it for the sake of example
12:26 --- cncfanatics is now known as cnc-away
12:27  ssbr: BrettS: that code is dumb
12:28  BrettS: Yeah I'm not sure why it was written like that : /
12:28  ssbr: there is no good reason.
12:28  BrettS: Ok that's what I thought, just wanted to make sure that I wasn't missing something
12:28  BrettS: thanks
12:29  ssbr: You certainly might be missing something.
12:29  ssbr: That paste was, as you said, simplified.
12:29  mukul: dash, papna-work : Around?
12:29  mgupta: Will appreciate if someone can provide us the idea to use sys.excepthook in reference to Sugar environment. We brainstormed on how the implementation of this functionality could be done, and found that whenever any uncaught exception is raised, the interpreter calls the sys.excepthook(type,value,traceback).
12:30  ssbr: mgupta: what?
12:30  mgupta: Wish to have the feedback on whether excepthook implementation would be helpful to our use-case both short-term and long-term. Also, it would be wonderful if feedback could be shared on its implementation in the context of Sugar, or otherwise.
12:30  mgupta: ssbr: We are working on developing a feature to manage unhandled Python exceptions in Sugar environment.
12:31  Jerub: mgupta: oh right
12:31  ssbr: mgupta: Do you work in marketing?
12:31  Jerub: mgupta: yes, sys.excepthook is awesome, use it. make it log intelligent traceback
12:31  Jerub: ssbr: shush
12:31  ssbr: Jerub: At this point I am honestly curious
12:31  Jerub: mgupta: i use it in my own work to email me problem reports when my software crashes
12:32  BrettS: True, though that appears to be what it does every time without fail. It's all a big mess of java/perl/python/batch files that a number of people have worked on so who knows
12:32  mukul: Jerub: Can you elaborate on its implementation?
12:32  mgupta: ssbr: I have my own organization, http://seeta.in, which focuses on development and deployment of learning tools and applications. We use Python in almost all our projects.
12:32  Jerub: uh, i basically have a sys.excepthook that renders a super verbose traceback (i use a cut down version fo cgitb's renderer), put that in an email, then send that email to a central email address
12:33  Jerub: you could quite easily make it post the tb to the school server or something
12:34  Jerub: it's also possible to do a neat thing where you use the logging module to log tracebacks.
12:34  Jerub: i have syslog-ng set up so that when fatal or above messages come in, they get emailed through
12:34  Jerub: so i can do log.fatal("Oh gosh a super bad thing happened", exc_info=True)
12:34  Jerub: and that logs the traceback to syslog, syslog repeats the messages into an email.
12:35  mgupta: Jerub: Thank you for the feedback. Appreciate it.
12:35  Jerub: by 'super verbose' i mean, including the local variables from each level of the backtrace as well as 5+ lines of context
12:36  Jerub: that's enough to be able to debug most problems without having to use a debugger or put more logging in
12:36  mgupta: Jerub: Yes, completely agree.
12:37  mgupta: Jerub: At this juncture, the school server is not in a good shape in reference to development. Could you please recommend a fix that might not need a submission process to the server.
12:38  mgupta: Jerub: The deployment team suggested to pop up a dialog when the exception occurs, while the school server is getting fixed.
12:38  votz: Yhg1s: thank you very much for your help
12:38  votz: have a great night
12:38  mgupta: Jerub: How do you find this from a usability perspective?
12:39  Jerub: mgupta: um. gosh. keep them in a directory that gets flushed to somewhere? use smtp?
12:39  Jerub: mgupta: occasionally i have to delete a million emails from a mail folder
12:39  Jerub: but it mostly works
12:40  Jerub: mgupta: it's terribly ironic. i've not done anything with olpc for years, and today i dig out my old XO-1 b2 unit to use as a video camera and you turn up here asking for advice 20 minutes later :P
12:40  Jerub: it all depends on how much connectivity you have and what you're comfortable doing.
12:40  Jerub: i'm in a situation (managed services) where i'm allowed to have passive and potentially invasive monitoring of hosts that can report directly to me.
12:41  Jerub: but you might be deploying in very bandwidth constrained environments with people with potential privacy concerns.
12:42  mgupta: Jerub: That is indeed a coincidence :-) How is your XO-1 B2 working?
12:43  mgupta: Jerub: Yes, connectivity is a major problem right now in regions where OLPC has been deployed.
12:44  Jerub: mgupta: i think the battery is dead
12:44  Jerub: yeah, so perhaps saving them locally on the XO in temporary storage and then pushing to a local school server might be a good idea
12:44  mgupta: Jerub: You should report to support@laptop.org. They do have spare parts available at this juncture.
12:45  mgupta: Jerub: Sure.
12:47  mukul: Jerub: We actually want to bring up an alert to the user whenever an unhandled python exception occurs.
12:47  mukul: <mukul> Jerub: and I thought maybe sys.excepthook could be used for this.
12:48  Jerub: mukul: yep, that may be possible.
12:48  Jerub: mukul: the problem you may face is that you have to make sure that it doesn't get caught at the layer above the gtk mainloop
12:49  Jerub: otherwise you'll have to carefully save the exception and then run another program or restart the mainloop to show a dialog
12:50  mukul: Jerub: How can I use excepthook in this case?
12:50  Habbie: ja
12:50  Habbie: oops
12:50  Jerub: oh, you want a code example?
12:50  Jerub: which case specifically? :)
12:52  mukul: Jerub: Can you give a code example that would help me determine the usage of excepthook?
12:52  mukul: Jerub: :P
12:52  Jerub: oh right.
12:54  mukul: Jerub: By the way I was working on http://bugs.sugarlabs.org/ticket/2063 . Any help is appreciated.
12:55  Jerub: http://paste2.org/p/1033292
12:56  ssbr: Jerub: a codepad for youuuu http://codepad.org/Zt9cA0s6
12:57  mukul: Jerub: Thanks.
13:01 --- mukul is now known as mukul_afk
13:03  Jerub: oh woot. the battery actually works
13:03  Jerub: just needed to be charged for a couple of hours before it started reporting its state
13:05  phoe6: I need to monitor a directory for file-downloads and on completely downloaded files, move them to a different location. ( I can do the monitoring and moving part), but I am trying to think of good strategies for finding of 'completely written files'.
13:06  Jerub: phoe6: uh, hard to tell. usually you either query the software doing the downloading, or you wait for it to 'finish' the download by removing a .part extension
13:06  Jerub: i.e. foo.exe.part isn't done. foo.exe is.
13:08  Octave: Hi, still working on my problem with generating an expression to pass to a method. Code: http://pastebin.com/BdhCrDNa
13:08  infobob: http://paste.pocoo.org/show/274417/ (repasted for Octave)
13:09  phoe6: Jerub: is the .part thing done by OS?
13:10  Octave: Hi, still working on my problem with generating an expression to pass to a method. Code: http://paste.pocoo.org/show/274419/
13:10  phoe6: If I do a glob.glob('*.log.gz') It may exclude the .log.gz.part
13:11  Octave: Hi, I'm still working on a problem with generating an expression to pass to a method. Code: http://paste.pocoo.org/show/274419/
13:12  Jerub: phoe6: no, the downloader :P
13:12  Jerub: phoe6: when i download with my torrent client all the files have .part extensions until they're "done"
13:12  Octave: I'm  pretty sure I'm doing something retarded :P
13:12  phoe6: hmm..
13:12  phoe6: It may not be a generic solution, then.
13:13  nosklo: phoe6: there's no indicator of "file is finished" in the file itself, no
13:13  Octave: basically I'm trying to be able to return an expression or assign one to a variable.
13:13  nosklo: phoe6: you need to coordinate with the program doing the downloading
13:13 --- mukul_afk is now known as mukul
13:13  Yhg1s: Octave: that's not how expressions work.
13:14  Yhg1s: Octave:  the expression is evaluated and the *result* is returned or assigned to a variable..
13:14  phoe6: nosklo: ohh. then what strategies people adopt when they don't have control on the program doing the download?
13:14  phoe6: seems difficult.
13:15  Octave: I get that. I'm trying to generate an expression, perhaps in one line when I call the method.
13:15  phoe6: or lets say, file is not be handled by two processes.
13:15  nosklo: phoe6: it's *impossible* to know that the download is over, without coordinating with the process doing the download.
13:15  Octave: My weird ideas aren't working. :P
13:15  Yhg1s: Octave: so what's the problem?
13:15  phoe6: nosklo: I see.
13:15  nosklo: phoe6: you can wait for it to stop growing but that can mean slow network
13:16  nosklo: phoe6: so, unless the program doing the download sends you "a sign", you can't do it
13:16  phoe6: what about file is not "open to writing" by another process indicator?
13:16  phoe6: Only for the moment
13:16  Octave: Yhg1s: I have a list of values and definitions for what the operators will be, I need to take that and convert it to an expression to place into a method.
13:16  nosklo: phoe6: it doesn't mean anything. The program could close the file even if it is not fully downloaded
13:16  phoe6: I mean, the process may write later.. But I assume that the process would have done its task in a gone.
13:17  Yhg1s: Octave: it's the "placing into a method" part that I don't understand. How do you expect to do that?
13:17  Yhg1s: Octave: also, I don't understand what the problem is with the code you already have. Does it not work? Does it do the wrong thing? Produce an exception?
13:18  Octave: Yhg1s: normally it's done by; query.where(val == 1 and val2 > 10)
13:18  neumaennl: phoe6: what we (here at my job) do in such cases is monitor the file size and if it doesn't change for a configurable amount of seconds consider the download finished.
13:18  Yhg1s: Octave: so by 'placing it into a method' you are talking about 'passing an evaluated expression to a method'?
13:19  Octave: Yhg1s: Yes. Sorry. As for the code, it silently fails and the second part is not added.
13:19  Yhg1s: Octave: so find out what branches are being taken. Add some debug prints.
13:19  phoe6: okay. thanks guys. I think, I shall workout a strategy with the down loader application, with some indicator for finish.
13:20  Octave: Yhg1s: I've done that. It follows all branches.
13:20  nosklo: Octave: I suppose you want to use an ORM to do database queries? What do you think of sqlalchemy? http://paste.pocoo.org/show/274420/
13:21  Yhg1s: Octave: if you want us to help you'll have to show us what you're doing, in detail. Where did you add prints? What is being executed, exactly? How does the result differ from doing the same thing manually?
13:21  Octave: nosklo: That's what I'm using. Except I need to generate an sqla query from a definition. (Users can completely customize the queries)
13:23  tomkmem: hi, sorry for the question, but i would like to know how to do this. I have a list like this ["name","paul","age","20","home","london"]. How can i iterate through it and put 1 with 2, 3 with 4 ...etc?
13:24  Yhg1s: tomkmem: usually you change how the list is generated, to make it a list of pairs instead.
13:24  Yhg1s: but if you can't, 'it = iter(L); for a, b in zip(it, it):'
13:24  tomkmem: ah
13:25  tomkmem: yes because the data is from a log file
13:25  tomkmem: trying to process it to restructure the data
13:25  tomkmem: let me try
13:27  nosklo: tomkmem: with open('mylogfile.log') as f: for thisline, nextline in izip(f, f):
13:35  tuxx-: Hey guys, whats a good way to get back a return value from a script that runs with popen / call inside a thread?
13:36  Yhg1s: tuxx-: the same way as when you don't run it inside a thread. (Why are you running it inside a thread?)
13:37  tuxx-: It needs to be multithreading, writing a communication daemon that handles file configurations + reloading of several daemons, in this case dhcp.
13:37  tuxx-: but when i use popen / call inside my thread, and i exit the python script, the called application is still running
13:38 --- Walt is now known as lightningsaxopho
13:38 --- lightningsaxopho is now known as lightningflute
13:38  Yhg1s: it doesn't sound like anything that needs to be multithreaded. And if you don't want to exit while the process is running, don't exit while the process is running?
13:38  Yhg1s: I'm not sure what behaviour you're looking for here.
13:39  tuxx-: actually, i want to somehow fork the process, so its not attached to my python script, but still be able to get the returnvalue
13:39  Yhg1s: that's what subprocess.Popen() and subprocess.call() does. The process is a separate process.
13:40  Yhg1s: but for your program to be able to get that process's exitcode, you do need to have an attachment of sort.
13:40  Yhg1s: You can call the 'poll' method of the subprocess.Popen object to see if the process has exited yet, and get the exitcode.
13:50 --- mukul is now known as mukul_afk
13:58  Octave: Yhg1s: Thanks for your help before. I read the docs for the nth time and I think I have it sorted. Sorry for using up your time. :P
14:03  uffiole: hi. Is it possible to do an "import module_xy" and calculate xy in script (ie i want to give it as cmd line arg)
14:05  uffiole: http://stackoverflow.com/questions/301134/dynamic-module-import-in-python ok
14:13  e110c0: I got a problem with pythons socket.sendto once in a while I get an error: [Errno 13] Permission denied
14:13  e110c0: has someone any clue where this comes from?
14:13  sternocera: Why doesn't my shell recognise a python script as such? I've added a #!/usr/bin/python
14:14  sternocera: It's a linux system
14:14 --- jonesy_ is now known as jonesy
14:14  e110c0: did you add the executable bit?
14:14  papna_: sternocera: You put that on the wrong line, your script isn't +x, you're running it wrong, or Python isn't there.
14:14  papna_: sternocera: Also, the typical shebang line is `/usr/bin/env python`.
14:14  papna_: With the #! of course.
14:15  sternocera: papna_: It is +x ( I get syntax errors and whatnot, but not when I "python my_File.py")
14:15  sternocera: Silly me, there was a space in front on it.
14:15  papna_: sternocera: Pastebin an interpretter session where you ls -a, head your file, then run it.
14:19  e110c0: any idea on the  [Errno 13] Permission denied with socket.sendto?
14:19  e110c0: happens in Linux and MacOS
14:21  Yhg1s: e110c0: hard to say without seeing the code and the traceback.
14:22  e110c0: http://pastebin.com/m0sN1EnF
14:22  infobob: http://paste.pocoo.org/show/274443/ (repasted for e110c0)
14:22  Alberth: looks like an OS error, are you sure you can write to the socket?
14:22  e110c0: I write a couple of thousand packets and then it breaks
14:22  Yhg1s: e110c0: oh dear.
14:23  e110c0: what did i do?
14:23  Yhg1s: the OS is giving you this error. are you perhaps using the same socket in multiple threads at the same time?
14:23  Yhg1s: e110c0: well, you're using threads and sockets.
14:23  Yhg1s: that's usually enough reason to say 'oh dear'.
14:24  e110c0: oops, didnt thought that pythondns would use the same socket for every request ..
14:27  e110c0: hmm, lsof lists 10 open sockets while using 10 threads...
14:30  xro: hi, i have some string in different encoding... Is there a simple way to transform them in UTF-8? i thougth about myString.decode('UTF-8') but i get UnicodeDecodeError: 'utf8' codec can't decode bytes in position 8-10: invalid data....
14:30  Yhg1s: xro: well, the string is in a particular encoding.
14:31  Yhg1s: you can turn the bytestring into a unicode string using 's.decode(encoding)', and then you can turn that into a UTF-8-encoded bytestring using 'u.encode('utf-8')'
14:31  xro: <Yhg1s>, so i have to know the current coding?
14:32  Yhg1s: yes, in order to interpret the bytes you need to know how to interpret them.
14:33  xro: <Yhg1s>, ok.... so myString.decode(myEncodingTape).encode('UTF-8') should work?
14:33  Yhg1s: that would result in a UTF-8 bytestring, yes.
14:34  Yhg1s: (usually you want to keep text as unicode everywhere in your application, and only encode it again as it goes to something that requires bytes, like files or sockets.)
14:35  xro: Yhg1s>, it's to store it in a db
14:35  Yhg1s: xro: and what kind of db are you storing it into?
14:35  xro: <Yhg1s>, mysql, innodb and utf-8
14:36  Yhg1s: then no.
14:36  Yhg1s: you should pass it to the DB-API module as unicode, and let it encode and decode for you.
14:37 --- cnc-away is now known as cncfanatics
14:37  xro: <Yhg1s>, so, you mean that i should just decode it (myString.decode(myEncoding)) then send it to mysql and mysql will encode it right?
14:37  Yhg1s: if you use a DB-API module to send it to mysql, yes.
14:37  Yhg1s: (and you should.)
14:38  xro: Yhg1s>, i use mysqlDb for the moment (oursql in my next version)
14:38  Yhg1s: then yes.
14:38  Yhg1s: (both of those are DB-API modules.)
14:38  xro: <Yhg1s>, ok, great... thanks for your precious help
14:39  sevard: I'm on a box that I can't upgrade, it's running python 2.2.1.  I'm trying to use google's ipaddr-py module to do some ip math.. but when I import the module I get     @property
14:40  sevard: erm, a syntax error for those lines, @property.
14:40  VladDrac: python 2.2 doesn't support decorators
14:40  sevard: I'm assuming this isn't backwards compatible.. does anyone know of a module I could use with this old version?
14:40  Yhg1s: sevard: then you can't use the ipaddr module.
14:40  Yhg1s: sevard: nothing that looks like ipaddr.
14:40  sevard: damn.
14:40  Yhg1s: sevard: 2.2.1 is really, really old, and buggy, and insecure.
14:41  sevard: i know, but my sysadmin won't upgrade it
14:41  Yhg1s: and do you have a compiler for the machine?
14:41  sevard: there's.. gcc 3.2
14:41  Yhg1s: so build your own Python version.
14:42  sevard: i've never gone about installing a local version, wouldn't I have to get an asston of libraries and link them somehow
14:42  Yhg1s: that depends on what's already installed on the system and what you need for your application.
14:42  Yhg1s: it's going to be a lot less painful than trying to use third-party libraries with Python 2.2.1, which is antique and utterly unsupported and laughably old.
14:42  gronlund: python2.5 cant find module lxml, could it be because the lxml files are under python2.4 ?
14:43  gronlund: and how to resolve that ?
14:43  Yhg1s: gronlund: you need to install lxml for Python 2.5.
14:43  Yhg1s: you can't just use extension modules for 2.4 in 2.5.
14:43  gronlund: okey
14:44  gronlund: which lxml is for python 2.5 ? im looking at this.. http://pypi.python.org/pypi/lxml/
14:45  Yhg1s: gronlund: those would be source packages. You download them and install them with the Python version you want to use it with.
14:45  sternocera: Is it possible to receive an asynchronous notification when a file has changed with the python std lib?
14:45  gronlund: ok
14:45  Yhg1s: sternocera: nope, you need an inotify or dnotify module.
14:45  Yhg1s: gronlund: how did you install Python 2.5?
14:45  sternocera: I want to detect that a file is changed, and reload it from python...do I need those modules?
14:46  Yhg1s: sternocera: well, reloading doesn't really work.
14:46  sternocera: What do you mean?
14:46  gronlund: Yhg1s: source
14:46  Yhg1s: sternocera: if you want asynchronous notification, you need something like inotify or dnotify, yes. If you just want to check if a file has changed, you can do that manually.
14:46  Yhg1s: gronlund: then you'll have to install any extension modules from source as well, yes.
14:46  gronlund: Yhg1s: can i install the egg ?
14:46  sternocera: Yhg1s: But there must be a better way than checking that in an infinite loop
14:47  Yhg1s: sternocera: reloading modules doesn't really work. references to old contents of the module stick around, causing weird behaviour.
14:47  Yhg1s: sternocera: yes, but not in the standard library.
14:47  sternocera: Yhg1s: Sorry, I don't mean reloading a python module
14:47  Yhg1s: gronlund: no idea, sorry.
14:47  sternocera: I mean opening a file when it is known to have been changed by another application
14:48  sternocera: There has to be some callback mechanism for doing that
14:49  sternocera: (or at least I hope that there is)
14:49  Yhg1s: sternocera: yes, inotify and dnotify.
14:49  Yhg1s: we've already been over this.
14:49  sternocera: Alright, I'll investigate, thanks.
14:51  uffiole: hi. i have /my/cur/dir in sys.path and do "from mymod import *" and there is mymod.py with permissions 755 in that dir. But "ImportError: No such mo..."
14:51  uffiole: on python prompt and in script
14:52  Yhg1s: uffiole: and does sys.modules['mymod'] exist before you do the import?
14:52  papna-work: uffiole: Pastebin a terminal session where you show all of the relevant facts.
14:52  papna-work: (Also, never ever ever use import *.)
14:54 --- mukul_afk is now known as mukul
14:54  lieuwe: not really python related, but i need a dictionary file for guess-the-word esque games, it only needs to be a list, no defenitions or teh like.
14:55  Yhg1s: lieuwe: on what platform?
14:56  uffiole: my bad. was a typo.... thx anyway
14:56  mukul: Jerub: http://codepad.org/Zt9cA0s6 Here what does repr ? and if No unhandled exception had occured what would have happened?
14:59  Yhg1s: mukul: if no unhandled exception had occurred, newexcepthook wouldn't have been called.
14:59  Yhg1s: and repr() there does the same thing as repr() everywhere, gives you a string representation of the arguments.
14:59  FRockstock: hi I'm not so good at python, I've got the little code a friend gave me, can someone help me with trying to understand this
14:59  FRockstock: http://dpaste.com/254576/
14:59  Yhg1s: FRockstock: what do you need help with?
15:00  FRockstock: Yhg1s I need to figure out which directories in that script are .svn and then  not included into appending that list
15:00  FRockstock: Yhg1s I may not be wording that correctly
15:00  Yhg1s: FRockstock: so read the os.walk documentation and notice how modifying the 'dirs' list will affect what directories os.walk traverses into. So, remove the '.svn' entry from dirs.
15:01  Yhg1s: I already told you this last time.
15:01  FRockstock: do you mean manually on my hard drive?
15:01  Yhg1s: no.
15:01  Yhg1s: I mean from the *list*.
15:01  FRockstock: yea I haven't had a change to look at this agai
15:02  FRockstock: isn't there a way that I could just pickup the current directory and see if it matches with .svn?
15:02  FRockstock: then not included it
15:02  Yhg1s: you could, but it would be stupid.
15:02  Yhg1s: because then you would still make os.walk recurse into that directory and anything beneath it.
15:02  FRockstock: yea ok
15:02  Yhg1s: What is wrong with simply removing the '.svn' entry from the dirs list?
15:03  FRockstock: k looking at the docs
15:03  FRockstock: see if I understand these
15:10  solsTiCe: hi. I am finishing a C module. I have added a new file and header but I got a warning like '...' used but never defined where i insert my .h and '...' defined butn ot used in my c file. this is helper function in C but not in the interface of the module. may i change the setup file more than just adding the c filename ?
15:11 --- elpargo_ is now known as elpargo
15:12  MTecknology: So.. how hard would it be to convert json returned by one python script into just space delimited output? Like this --> http://dpaste.com/256783/
15:14  MTecknology: I'm very much a python noob so anything that should be obvious.. I'm clueless to :)
15:14  zk: MTecknology: that'd be really easy, just import json from standard library and do json.dumps(input
15:14  zk: )
15:14  zk: that will decode json for you, and then you can format it however
15:14  zk: http://docs.python.org/library/json.html
15:15  MTecknology: :D
15:16  Yhg1s: solsTiCe: that sounds like a C question, not a Python one, but without seeing some actual code it's hard to answer it.
15:17  Yhg1s: zk: json.load/json.loads, not json.dumps, to load data
15:17  zk: whoops yeah
15:17  solsTiCe: it seems the file is not linked and caused the warning. and when I run the module i got an undefined symbol error
15:18  Yhg1s: solsTiCe: so you did something wrong. hard to say what from the vague description.
15:18  xro: <Yhg1s>, we spoke together 30min before... if i do: s=unicode(myString) and send s to mysql thought mysqlDb, all will be ok, right?
15:18  Yhg1s: xro: if you use DB-API correctly, yes.
15:19  solsTiCe: Yhg1s: I didn't do much. just writing a .c file. with its header file. insert the header file in another .c file and voilà
15:19  Yhg1s: solsTiCe: pastebin the actual code and the actual error messages you get.
15:19  solsTiCe: if i #incldue "util.c" instead of #include "util.h" it works
15:20  Yhg1s: solsTiCe: ..
15:20  Yhg1s: solsTiCe: if you have two separate .c files, then you need to link them together, yes.
15:20 --- mukul is now known as mukul_afk
15:20 --- mukul_afk is now known as mukul
15:20  Yhg1s: #including .c files is not the right thing to do (and it's likely to break the one-definition rule.)
15:20  solsTiCe: I supposed setup.py d that. and it already does because the module is alredy multiple file
15:21  Yhg1s: then you did something wrong.
15:21  Yhg1s: again, impossible to tell without seeing actual details.
15:21  Yhg1s: like the setup.py file, the source and the error messages.
15:22  solsTiCe: http://paste.pocoo.org/show/274462
15:22  xro: <Yhg1s>, (just to be sure, i send it thought a string )thanks for the confirmation...
15:22  solsTiCe: I have to go
15:22  Yhg1s: xro: 'sending it through a string' doesn't sound right.
15:23  solsTiCe: http://paste.pocoo.org/show/274463/
15:23  Yhg1s: solsTiCe: and util.h and util.c contain what, exactly?
15:24  solsTiCe: http://paste.pocoo.org/show/274465/
15:24  Yhg1s: solsTiCe: yes, 'static' doesn't make sense there.
15:24  Yhg1s: and that's why other files can't see it.
15:24  solsTiCe: OK!
15:25  solsTiCe: i just copy pasted the code and did not even look at that /o\
15:25  solsTiCe: Yhg1s: thank you
15:26  solsTiCe: I knew i did nothing wrong. except that mistake
15:26  Yhg1s: sure, only the thing that's wrong is wrong.
15:28  solsTiCe: I was not looking on the right direction
15:28  xro: Yhg1s>, http://dpaste.com/256790/ like that
15:28  Yhg1s: xro: yes, that should be fine.
15:29  lieuwe: how do i check if a certain key is in a dict? just do if(key in dict) right?
15:29  Yhg1s: lieuwe: except 'if' is not a function, yes.
15:30  lieuwe: Yhg1s: yeah, bad habbit i know.
15:30  xro: <Yhg1s>, sorry for your time... and thanks again
15:36  barfster: can I place a conditional in the place of a variable? instead of saying a = b can I do a = if( b = 0{'urgent'} else {'normal'} ) ?
15:36  Yhg1s: barfster: not with those parentheses, no.
15:37  Intertricity: Is there a module for making a flowchart? I need to convert a list of steps into a one-after-the-other style flowchart
15:37  Yhg1s: barfster: I'm also not sure what you're trying to do there.
15:37 --- jbake_ is now known as jbake
15:38  lvh: Intertricity: graphviz is pretty good at making flowcharts
15:38  lvh: Intertricity: graphviz also has great python bindings
15:38 * barfster forks out pastie
15:38  Intertricity: lvh, thanks :)
15:39  barfster: http://pastie.org/private/lpqmsm6ed8iwlsfymxr5q
15:40  Yhg1s: barfster: looks fine to me.
15:40  ousado: barfster: x = 1 if condition else 2
15:40  barfster: but on inline and replacing the part tight of the ? sign
15:41  Yhg1s: barfster: I don't know what that means, sorry.
15:41  barfster: but on one line and replacing the part right of the = sign
15:41  Yhg1s: there's the if-else expression, but it wouldn't provide any benefit here.
15:42  Yhg1s: (or anywhere, frankly.)
15:44  mukul: Yhg1s: if http://codepad.org/e5VSlF0j the exception was handled, would the function newexcepthook be called?
15:45  Yhg1s: mukul: no, sys.excepthook is only called for unhandled exceptions.
15:45  Xeross: For some reason my trac install still uses python2.5 while I changes the symlink to python2.7 http://paste.pocoo.org/show/274478/ is this due to some env variable or something ?
15:46  barfster: http://pastie.org/private/65wkv0ziha9jk41flaptq
15:46  dash: probably due to trac not using that symlink
15:46  Yhg1s: Xeross: 'the symlink'?
15:46  dash: Xeross: what's wrong with trac using 2.5 though
15:46  Yhg1s: barfster: depends on who you ask. I'm saying "stick with the first"
15:46  Xeross: Yhg1s: I have multiple python installs the /usr/bin/python links to /usr/local/bin/python2.7
15:46  Yhg1s: Xeross: well, don't change that symlink.
15:46  barfster: What if there are more options?
15:46  Yhg1s: Xeross: install trac for Python 2.7 instead.
15:47  Xeross: dash: I prefer using python2.7 everywhere
15:47  Yhg1s: barfster: all the more reason to stick with option #1.
15:47  Xeross: Yhg1s: I did
15:47  dash: Xeross: it's not worth it
15:47  Yhg1s: Xeross: that symlink is provided by the OS. messing with it is a bad idea.
15:47  Yhg1s: if you want to use python2.7 with specific applications, make them use python2.7 instead of python.
15:47  Xeross: Yhg1s: Hmm I just added python2.7 to update-alternatives
15:47  Xeross: Yhg1s: How would I do that then for trac
15:47  barfster: http://pastie.org/private/gtifgkf5uvjnif5zcwcna
15:47  Yhg1s: Xeross: depends on how trac is executed.
15:48  Xeross: Yhg1s: WSGI
15:48  Yhg1s: Xeross: using what, mod_wsgi?
15:48  Xeross: aye
15:48  Yhg1s: barfster: yes, you pasted that already.
15:48  Yhg1s: Xeross: then what mod_wsgi is compiled with determines the Python version.
15:48  Xeross: oh great
15:48  barfster: Yhg1s: http://pastie.org/private/dpmvx0lc8xv9trazaioha
15:49  barfster: Now with 3 options
15:49  Xeross: Why is it so hard to make the system use 2.7 :/
15:49  sternocera: Is it possible for me to see the definition of an object directly from the interpreter?
15:49  barfster: Still stick with option 1? Why?
15:49  Yhg1s: barfster: because it's explicit.
15:49  dash: Xeross: why does it matter?
15:49  Yhg1s: barfster: if 'a' is actually *supposed* to be an idex in the B list, that's a different matter. But we can't tell that from your snippet.
15:49  Yhg1s: sternocera: what is 'the definition of an object'?
15:49  barfster: Hmm
15:50  Xeross: dash: Everything I develop is for 2.7 so I keep hitting these errors when it gets run by the default python interpeter, and having to run them as python2.7 script.py isn't ideAL
15:50  Xeross: ideal*
15:50  sternocera: Yhg1s: the declaration then
15:50  Yhg1s: Xeross: the system expects 2.6. everything is built against 2.6. extension modules are installed for 2.6. You hvae to recompile and reinstall everything to make it use a different Python version.
15:50  barfster: I use lists for frequently used stuff, also Yes No in some projects
15:50  Yhg1s: sternocera: can you give an example?
15:50  dash: sternocera: just open it in your editor
15:50  Xeross: Yhg1s: It uses 2.5 :/
15:50  barfster: But I am not very much used to python
15:50  Yhg1s: Xeross: fine, 2.5. same difference.
15:50  barfster: What counts for/against the two approaches?
15:50  Xeross: Yhg1s: Sounds like a nice project
15:50  Yhg1s: barfster: they do conceptually different things.
15:50  Yhg1s: barfster: option #1 works when 'a' is not just an index in the B list.
15:51  Yhg1s: Xeross: that's what OSes and distributions do for you. it's a lot of work to switch Python versions, so they don't do it lightly.
15:51  barfster: ok, so option 2 is what I need for now
15:51  barfster: thanks
15:51  sternocera: How can I determine the location of the .py on the filesystem then?
15:51  Yhg1s: sternocera: depends. which .py file?
15:52  sternocera: Well, I've installed pyinotify
15:52  Yhg1s: ok?
15:52  sternocera: I need to see the declaration of various things
15:52  Yhg1s: ok, such as what?
15:52  sternocera: to understand what methods can be called
15:52  Yhg1s: usually you use documentation for that. But like what?
15:52  dash: sternocera: did you try help(someobject)?
15:53  sternocera: dash: No, but that looks interesting
15:58  flatpit: how to overload the "dot" operator for a class?
15:58  dash: flatpit: mmm, not really
15:58  TheSheep: flatpit: __getattr__, __setattr__ and __delattr__
15:58  dash: flatpit: what are you trying to accomplish?
15:58  dash: TheSheep: not a great place to start
15:58  lack: Argh, distutils.  I need a way to tell distutils sdist "Yes use your default MANIFEST but don't bother creating the actual MANIFEST file, and don't warn me that you're doing it"
15:59  Rawrcasm: OH HAYY.
15:59  flatpit: TheSheep: aha, that'd do. Thanks :)
15:59  TheSheep: dash: can you please stop telling everybody around what they should be helping with?
15:59  flatpit: dash: trying to use the "dot" :P
15:59  lack: Or just some thing like "Don't create the MANIFEST file in the source directory, put it $HERE instead"
15:59  dash: TheSheep: No.
15:59  dash: flatpit: Why?
15:59  Rawrcasm: TheSheep: Owned.
15:59  dash: Rawrcasm: behave
16:00  dash: lack: why? MANIFEST is the thing that distutils uses to determine what to pack up
16:00  Rawrcasm: dash: Sir, yes sir.
16:00  dash: lack: it's how it works
16:00  dash: flatpit: what are you writing?
16:01  barfster: TypeError: list indices must be integers
16:01  barfster: Is there a string2int()?
16:01  flatpit: dash: to allow/create/modfy/papmer access to an attribute after dealing with it.
16:01  flatpit: s/papm/pamp
16:01  bahamas: barfster: int(your_string)
16:01  dash: flatpit: Eh? do you perhapse what property()?
16:01  dash: blergh
16:01  dash: flatpit: er, do you want property()
16:02  pozic: def domain_specific_name(): return self.field_of_generic_data_structure is considered to be too slow by some people. Is there a technical argument that I can use to crush that? Not that I think for a second that it is actually 'important' or 'matters for performance'.
16:02  flatpit: dash: not just the property, even methods.
16:02  flatpit: dash: i mean, anything
16:02  dash: flatpit: i'm confused
16:03  TheSheep: pozic: you mean using a function to get to an attribute?
16:03  MTecknology: zk: I'm feeling pretty dense.. I'm still lost
16:03  TheSheep: pozic: don't do that
16:03  dash: flatpit: i don't understand what you mean by "after dealing with it"
16:03  TheSheep: pozic: access the attribute you want directly
16:03  MTecknology: zk: this is also my first ever python script..
16:03  dash: pozic: too slow for what?
16:04  dash: pozic: the fundamental problem is that slowness should only be considered after profiling :)
16:04  flatpit: dash: okay, I'll explain it later to you (if u interested), I'm in the middle of something at present. brb, since thesheep already told me how to do that.
16:05  dash: flatpit: __getattr__ is almost definitely not what you want
16:05  dash: and i rather suspect what you want is not what you need :)
16:06  TheSheep: flatpit: there are at least 3 or 4 ways of doing what you want, each of them slightly different, getattr is the most universal but the most painful way
16:07  zk: MTecknology: that's cool, i just started using python a few months ago
16:07  MTecknology: zk: this is what I have so far.. http://dpaste.com/256807/
16:09  zk: should be json.loads() to decode, i said that wrong earlier
16:09  dash: MTecknology: line 35 is useless
16:09  dash: and thus the whole function is :)
16:10  pozic: TheSheep: yes, I meant that. The name of the attribute does not reflect the intention. There is another field which could have the same role or reversed. By having a domain specific name the problem is resolved.
16:10  MTecknology: dash: ya.. I imagine that if I tried to run it it would crash miserably
16:10 --- mukul is now known as mukul_afk
16:11  pozic: TheSheep: that Python is so dynamic that it cannot even optimize that away can also be seen as a bad point.
16:11  dash: pozic: btw property() is handy in that case.
16:11  dash: pozic: yes, python is terrible
16:11  pozic: dash: property simply allows foo.bar to be foo.somefun(), no?
16:11  dash: people should be comfortable with that by niow.
16:11  dash: pozic: sure
16:12  dash: pozic: so you can look up foo.goodname instead of foo._internalname
16:12 --- Twinkletoes is now known as Guest55037
16:12  pozic: dash: it's more efficient?
16:12  pozic: dash: I didn't know that.
16:12  Yhg1s: no, it's less efficient.
16:12  papna-work: No, it's not about efficiency.
16:12  Yhg1s: but it makes for better code than __getattr__.
16:13  pozic: The whole point was about efficiency _and_ being able to still understand it after a year.
16:13  pozic: Or for a new programmer.
16:13  dash: pozic: focus on the second thing first :)
16:13  pozic: Basically the argument was 'you know the system, so you know.'
16:13  dash: pozic: worry about efficiency when your program is slow
16:13  ousado: pozic: are you writing realtime DSP-code or something?
16:14  pozic: dash: I don't worry, I more worry about convincing people without them starting to cry. ;)
16:14  Yhg1s: pozic: well, the function won't get any faster than that attribute access, other than removing the function.
16:14  dash: pozic: tears aren't always bad
16:14  TheSheep: pozic: do you mean to have two names pointing to the same method?
16:14  TheSheep: pozic: you can just do an assignment
16:14  dash: it's true that hardly anything is slower than a python functional call
16:14  dash: er function cal
16:14  dash: l
16:14  dash: (sorry, jet lagged typing skills here)
16:14  pozic: TheSheep: no, there is one method and one field.
16:14  Yhg1s: dash: except more than one.
16:15  TheSheep: pozic: http://paste.pocoo.org/show/274493/
16:15  pozic: If I could control the whole environment, I would simply write a partial evaluator which makes certain assumptions (that are true for this code base) which compiles to the same code.
16:15  TheSheep: pozic: will work with a mutable data type too
16:15  Yhg1s: but that's not how compiling to bytecode works.
16:15  pozic: I hate social problems that have a technical solution.
16:15  Yhg1s: compiling with cython, perhaps. but not at this stage.
16:16  dash: pozic: the social problem is your colleagues who don't understand how to think about efficiency and optimization =/
16:16  pozic: dash: right, but that turns me into the one who doesn't agree with them.
16:16  dash: and um yeah
16:16  dash: pozic: sure
16:17  dash: pozic: that's called "professional integrity"
16:20  sternocera: I'm having a problem with a python script I'm hacking on that uses pyinotify: AttributeError: type object 'EventsCodes' has no attribute 'IN_MODIFY'. However, it patently does - help(EventsCodes) indicates that it does.
16:21  a-st: hello =)
16:21  sternocera: What might I be doing wrong?
16:21  a-st: how do i convert "def __new__(cls, (subject, predicate, object), context):" to new python3 syntax?
16:22  Se7h: sternocera, check the source
16:22  cryzed: Is there an easy way to add an arbitrary form field to a mechanize Browser instance while avoiding "mechanize._form.ControlNotFoundError"?
16:22  sternocera: Se7h: How can I find the right .py file?
16:22  Yhg1s: a-st: 'def __new__(cls, t, context): subject, predicate, object = t'
16:23  Yhg1s: sternocera: hard to say. pastebin the code and the traceback
16:23  Se7h: sternocera, you should have the traceback telling you that
16:24  a-st: Yhg1s, thank you ;)
16:24  a-st: And what about 'return tuple.__new__(cls, ((subject, predicate, object), context))'?
16:24  Yhg1s: a-st: what about it?
16:25  a-st: Yhg1s, How do I convert it to python3 syntax?
16:25  dash: a-st: are you sure it isn't
16:26  Yhg1s: a-st: I don't see how that isn't python3 syntax.
16:26  a-st: oh python says IndentationError: unexpected indent
16:26  sternocera: Here's the paste: http://fpaste.org/TDcp/
16:27  a-st: Here is my file http://paste.pocoo.org/show/274496/
16:28  a-st: And this happens if I want to run it with python: http://paste.pocoo.org/show/274497/
16:28  dash: a-st: Did you read the error message?
16:29 --- fif0 is now known as fif0_afk
16:30  dash: a-st: Delete all the tab characters from your code.
16:31  a-st: dash, okay and should i replace it with whitespaces?
16:32  Hazel|work: >>> t = re.compile(r"d")
16:32  dash: yes space characters.
16:32  Hazel|work: >>> t.sub("dog","")
16:32  Hazel|work: ''
16:32  Hazel|work: ^ why does this not work?
16:32  Hazel|work: I expect 'og', but I get ''
16:32  Hazel|work: I've looked at the manual, but I don't understand
16:32  dash: Hazel|work: did you read what the order of args is supposed to be?
16:33  sternocera: Hazel|work: Fancy seeing you here
16:34  Hazel|work: dash: whoops
16:34  Hazel|work: *headdesk*
16:34  Hazel|work: thanks! :)
16:34  Hazel|work: sternocera: indeed!
16:34  a-st: dash,  now i get http://paste.pocoo.org/show/274502/
16:35  dash: a-st: so now fix the indentation to be correct
16:37  a-st: dash, it's like in all the other lines :-\
16:37  dash: a-st: no it isn't
16:38  dash: a-st: did you delete _all_ tabs from the entire file?
16:38  dash: (and replace them with spaces)
16:38  a-st: Yes i think so :(
16:41  Luyt_: Is there some obvious solution to split a string like "   ape note   " on spaces such that leading and trailing spaces are kept?  In this case that'd be ("   ape","note   ").
16:42  dash: Luyt: re.split i guess
16:43  Luyt_: My approach was to first determine the leading and trailing spaces, strip them off, use the string's split() method, then tack them on again on the first and last part.
16:43  dropdrive: Luyt_: strip, index, split, add back?
16:43  dash: Luyt_: not the craziest thing i've heard
16:43  greg_f: I have file with data in json, how I should read data then rewrite any field in data?
16:44  Luyt_: Right. I see it's not as trivial as I first thought ;-) Okie, merci beaucoup!
16:44  dash: greg_f: json.reads() and json.dumps()
16:44  dash: Luyt: or, you know, a regex that specifies 'whitespace with non-whitespace on either side"
16:44  dash: '
16:45  sternocera: Could someone please speculate why the class EventsCodes doesn't have a IN_MODIFY attribute, despite indications that it should both from its help() output and the pyinotify docs?. Here's the paste: http://fpaste.org/TDcp/
16:47  abstrakt: anyone have recommendations for learning functional programming? specifically any ideas for a good project or task that would be suitable for or well served by functional programming?
16:47  goshawk: hi, can someone help me with this simple task  http://paste.pocoo.org/show/274509/ ?
16:47  dash: abstrakt: first tell me what "functional programming" actually is
16:48  Yhg1s: sternocera: the docs are apparently wrong.
16:48  dash: goshawk: write a loop
16:48  abstrakt: dash: "In computer science, functional programming is a programming paradigm that treats computation as the evaluation of mathematical functions and avoids state and mutable data."
16:48  abstrakt: dash: you don't know what functional programming is?
16:48  abstrakt: http://en.wikipedia.org/wiki/Functional_programming
16:49  sternocera: Yhg1s: Right, so how can I open up the relevant .py file to investigate?
16:49  Yhg1s: sternocera: import pyinotify, print pyinotify.__file__
16:49  Yhg1s: sternocera: that will give you the .pyc file. .py files are generally alongside the .pyc file.
16:49  sternocera: cool, thanks
16:49  dash: abstrakt: I know what it is
16:49  dash: abstrakt: I was asking if _you_ know what it is
16:50  goshawk: dash, ok
16:50  dash: abstrakt: I see that you can quote somebody else's definition.
16:50  dash: abstrakt: Anyway
16:50  abstrakt: dash: no, you gave me an imperative command. you didn't say "do you know what it is?" you just said "tell me what it is." there's a subtle but distinct difference there
16:50  Yhg1s: sternocera: looks like this is a bug in the module, really. it tries to set those attributes, but somehow it fails.
16:50  dash: abstrakt: functiona;l programming is a concept suited to everything
16:51 * abstrakt sighs
16:51  dash: abstrakt: use of immutable structures to represent values helps improve program understandability
16:51  dash: abstrakt: as does referentially transparent functions
16:52  lemiffe: hey guys, if I have a list a[0:10] and I do for text in a... I can get the value using print text... but how do I get the position it represents in the list?
16:52  Yhg1s: sternocera: looks like you should just be able to use pyinotify.IN_MODIFY
16:52  Alberth: abstrakt: 'batch' computing (ie computing a result from inputs by some steps)  is the simplest to express in a func. prog. language, usually
16:52  Yhg1s: lemiffe: 'for idx, item in enumerate(a):'
16:52  lemiffe: thanks :)
16:52  a-st: argghh I'm still getting unexpected indent error :(
16:52  dash: abstrakt: python supports these ideas in a very limited way
16:53  abstrakt: dash: I'm aware that python has some "support" for "functional" programming
16:53  Alberth: a-st: replace all TABs by spaces ?!
16:53  abstrakt: which is why I asked in here
16:53  dash: abstrakt: strings, numbers, and tuples are the only common immutable structures in python (ok there's also frozensets)
16:53  abstrakt: because there doesn't seem to be a #functionalprogramming channel
16:53  _jam: assuming I have cpickle, is it faster to (un)pickle 100k tuples or to write them to a flat file with something doing something like '\t'.join(mytuple)
16:53  a-st: Alberth, Yes :(
16:53  a-st: Alberth, http://paste.pocoo.org/raw/274511/
16:53  dash: abstrakt: and there's no trivial way to verify that a function is stateless
16:54  dash: _jam: don't use pickle when you can avoid it
16:54  Yhg1s: a-st: nd the traceback?
16:54  a-st: Yhg1s, http://paste.pocoo.org/show/274513/ :)
16:54  abstrakt: yeah the main issue I'm trying to wrap my head around, is what good is functional programming if it avoids state?
16:55  abstrakt: that seems, borderline useless... at least for a large majority of tasks that I can think of in the every day world
16:55  dash: abstrakt: my point is that "functional programming" is not a thing that you choose for specific tasks, it's a way of thinking about code/data organization that's always valuable.
16:55  Yhg1s: a-st: your indentation is messed up, yes.
16:55  abstrakt: dash: I'm aware of this
16:55  dash: abstrakt: your question indicated otherwise :)
16:55  abstrakt: same thing for "object oriented" it's a way of thinking that's valuable
16:55  Yhg1s: a-st: you need to put the expression at the end of line 827 inside the block instead.
16:55  abstrakt: dash: no, you assumed otherwise
16:55  Yhg1s: eh, statement, even.
16:56  Alberth: a-st: return """%s(%s)""" % (clsName, ", ".join(args))  <-- you don't need triple quotes there
16:56  abstrakt: dash: you never asked me any questions to verify this, you simply gave me an imperative command and then made some further clarifications about functional programming, which I am thankful for... I'm interested in knowing more about the topic, so any information is interesting to me
16:56  _jam: why no pickle?
16:56  dash: abstrakt: well, you said "project or task that would be suitable for or well served by functional programming". my point is that it's equally suitable for all situations
16:56  _jam: *not
16:57  abstrakt: dash: ok well then that brings up my main question
16:57  abstrakt: dash: how do you track state?
16:57  Alberth: a-st:   except:    <-- that cannot be good, you should specify the exception you want to catch
16:57  abstrakt: it seems to me that a paradigm that explicitly, by definition, avoids state, could not possibly be used to represent state
16:57  dash: abstrakt: that's possible the most important and poorly-answered problem in computing ;-)
16:57  vbgunz: what would be pythonic way to launch a GUI with no means to interact with it other than to make sure it's up and running? also, what I cannot seem to do is how to leave it running when my script is done with it... my script keeps killing it.
16:57  dash: or at least in system/language design
16:57 --- lightningflute is now known as Walt
16:57  abstrakt: ok well I'll asked it again another way though, just to be absolutely verbose and clear
16:58  Yhg1s: abstrakt: functional programming means thinking about problems as transformations of data, mathematical functions that describe data in terms of other data. The result is code that doesn't depend on order of execution, and in which individual functions can be treated as isolated units (because they are.)
16:58  a-st: Alberth, it's not my code ;) I just try to fix it to work with python 3
16:58  abstrakt: how do you or should you, track state, while maintaining a functional paradigm in coding?
16:58  dash: abstrakt: there are a lot of different answers to this
16:59  abstrakt: dash: k, got any suggested reading? suggested starting places?
16:59  abstrakt: I've been thinking about reading through SCIP
16:59  Yhg1s: There's this nice Haskell tutorial that does a decent job.
16:59  dash: abstrakt: the ones I personally like are the answers languages like Clojure and E pick, where there's strong support for both dealing with mutable objects and with immutable values
16:59  abstrakt: that's a fairly large task though
16:59  dash: abstrakt: you're addressing a large subject
16:59  dash: :)
17:00  Alberth: a-st: that's not an excuse to keep broken code like 'except:' imho.
17:00  _jam: would marshal be better/faster? I've not seen a recommendation against pickle before. This is for caching short term (alive for 12-48 hours) but large data sets (40GB-2TB in flat text files).
17:00  abstrakt: ehh, I guess, seems like there's gotta be some fairly concrete answers, even if there are multiple approaches, there's gotta be only a few basic real solutions to the problem...
17:00  dash: abstrakt: there's other major categories of answers, sure
17:00  abstrakt: I mean, are there like 500 different ways to maintain/represent state within a functional paradigm/language?
17:01  dash: abstrakt: there's the Python/C/Java approach which is "make (nearly) everything mutable and hope for the best"
17:01  arkanes_: _jam: neither marshal nor pickle will be even close to acceptable on anything even approaching that size
17:01  abstrakt: dash: but then isn't that by definition, no longer a "functional" paradigm? because functional programming, by the wikipedia definition avoids mutability and state...
17:01  arkanes_: _jam: you will need to do something else
17:01  Yhg1s: abstrakt: the short answer is that in a purely functional language you "maintain state" by describing new state every time.
17:01  Alberth: a-st: indenting looks ok at first sight, but my 2.5 python cannot eat it, so I cannot test-parse it
17:02  _jam: well, right now I'm just sorting each file in chunks and writing back out as plaintext
17:02  abstrakt: Yhg1s: right, I sort of got that... I watched Rich Hickey's video at th 09 JVM summit
17:02  dash: abstrakt: and then there's the haskell approach which is 'state is not directly representable in the language, but is simulated via arguments to functions'
17:02  _jam: and then re-reading a line at a time
17:02  abstrakt: hmm...
17:02  abstrakt: dash: so then what about extended state? and what about user input?
17:02  dash: abstrakt: not sure what "extended" means
17:03  Wild_Cat: _jam: plain text is good. Is that approach not working?
17:03  Yhg1s: abstrakt: but in practice, even in purely functional languages, you do mantain state the traditional way, there's just some hiding in functions or constructs that the compiler can efficiently turn into not-really-functional state-maintaining machinery.
17:03  abstrakt: dash: state, stored for an extended period of time... common example, relational database of employee records
17:03  a-st: Who the f*ck wrote this code :(
17:03  dash: abstrakt: right, that falls in the same category as user input, stuff external to the program
17:03  abstrakt: or, some other format of a database of stocks and bonds history for the past 20 years
17:03  Yhg1s: abstrakt: the environment is a big issue in purely functional languages, because it doesn't fit (unless you do something weird like monads in haskell.)
17:04  Yhg1s: abstrakt: so most languages cheat, and just don't treat those parts as functional.
17:04  _jam: well it requires me to a) write extra functions to store and reparse the data after I initially parse it and sort it and b) it isn't particularly fast, that is for sure
17:04  dash: abstrakt: well a database of stocks and bonds history isn't state it it never changes :)
17:04  Yhg1s: _jam: it'll be a lot faster than letting pickle handle it, not to mention more robust and secure.
17:04  abstrakt: dash: er, ok yeah I guess that's true...
17:04  _jam: ok
17:04  abstrakt: dash: so ignore that (although I answered I think a question on what functional programming could be good for)
17:04  dash: abstrakt: but anyway, haskell handles all that via a magic type called 'IO'
17:05  _jam: speed is my primary concern, so if that is the case, i'm ok with that
17:05  dash: abstrakt: where basically any IO operation returns a new 'state of the world' value
17:05  abstrakt: but yeah, it seems to me that the most common task I usually perform in my day to day coding duties (at least right now) is building CRUD systems, and given the nature of what they are, and the nature of the definition of "functional programming" it seems they are almost polar opposites
17:05  dash: abstrakt: nah
17:06  dash: abstrakt: functional concepts are valuable in every program.
17:06  pantsman: abstrakt: have you read Rich Hickey's essay on State and Identity?
17:06  abstrakt: I guess I need to go brush up on my haskell and the IO types
17:06  dash: abstrakt: just like object-oriented concepts are valuable in every program
17:06  abstrakt: pantsman: nope, just saw that one video so far
17:06  Thiryal: Is looking through the result of os.listdir(...) the best way to check if a given filename [with wildcards] exists? My exact usage case is that I need to know if a particular library exists, but I don't care if it's a .a / .so / etc, so I would like to just check for libtcmalloc.*
17:07  dash: abstrakt: OO concepts being valuable doesn't mean everything has to be a mutable object with methods; functional concepts being valuable doesn't mean everything has to be immutable
17:07  abstrakt: dash: sure, I guess I'm just trying to get a little bit "purist" at first with my learning of the functional paradigms
17:07  lack: dash: Sorry, was AFK for a bit.  I know that MANIFEST is what distutils uses, but if I don't supply my own MANIFEST, it's already able to properly create it.  So if I don't have any manual overrides, what's the use in having it around?
17:07  dash: abstrakt: honestly, i'd ignore haskell
17:07  abstrakt: dash: hehe, ok then :)
17:08  abstrakt: scheme?
17:08  dash: if you're interested in lisp then clojure is a way better choice
17:08  dash: scheme is mostly the same as python
17:08  Alberth: Thiryal: there is the glob module for finding such patterns at the disk, or fnmatch for matching in strings, or in your case  s.startswith('libtmalloc.') ?
17:08  pantsman: even though I hate the syntax and some of the method naming, I'd have to recommend clojure
17:08  Wild_Cat: abstrakt: if you have to learn one FP language, I'd pick Scala (because it runs on the JVM) or Haskell (because it's globally interesting).
17:08  abstrakt: hmm, ok... isn't clojure a java thing?
17:08  dash: abstrakt: it runs on the JVM
17:08  dash: but so do a lot of things. :)
17:08  abstrakt: ok
17:09  abstrakt: Wild_Cat: why Scala vs Clojure? any reason?
17:09  Wild_Cat: abstrakt: but honestly, I'd first get awesome at Python (if I wasn't already, that is :p ).
17:09  pantsman: clojure will force you much further in programming functionally, Scala will just allow you to choose to do so
17:09  dash: scala is way more complicated than it should be
17:09  Thiryal: Alberth: Yeah, I was currently doing [l for l in os.listdir(libpath) if l.startswith('libtcmalloc.')] and checking if I got any results.
17:09  abstrakt: Wild_Cat: I wouldn't say I'm awesome at pythong, but I'm just fine with it
17:09  Thiryal: Alberth: Just wasn't sure if I was missing something that'd be a better way to do it.
17:09  Wild_Cat: abstrakt: Clojure is a Lisp. That's (reason (enough (to (avoid (it))))).
17:09  dash: abstrakt: the problem is that a lot of people who like developing functional programming ideas also love static typing a lot
17:10  abstrakt: Wild_Cat: at this point in my career, it takes me usually less than a couple days to get up and running, and within about two weeks of use I'm basically "fluent" in most languages
17:10  dash: Wild_Cat: Wrong wrong wrong wrong.
17:10  Alberth: Thiryal: there is also os.walk()
17:10  Wild_Cat: that, and Scala has type inference.
17:10  dash: Wild_Cat: that's reason enough to avoid it. :)
17:10  Wild_Cat: dash: you dislike type inference?
17:11  Thiryal: Alberth: Yeah, it seems to use listdir as a base for the file lists though, and since I only need to check one directory it seemed like overkill [unless it doesn't actually have to create the whole list?].
17:11  dash: Wild_Cat: Yes. A good bit.
17:11  pantsman: according to Scala, it turns out that most of the problems of Java can be solved with an insanely complex type system that hardly anyone understands
17:11  pantsman: (I still like Scala though.)
17:11  dash: pantsman: Exactly.
17:11  Wild_Cat: dash: interesting. Me, I think it's the best of both worlds.
17:11  thieusoai: why   is   0.375 * 0.7    giving me  0.26249999999999996   instead of  0.2625  ?
17:11  vbgunz: man, im stuck, I am not all that familiar with subprocess and os but no matter how hard I try, I cannot just call up a gui program to make sure it's running and then quit my python script *without* taking the gui with me... where do I look for this?
--- Log closed Tue Oct 12 21:16:56 2010
--- Log opened Tue Oct 12 21:17:09 2010
21:17 --- Users 797 nicks [0 ops, 0 halfops, 0 voices, 797 normal]
21:17  dapal: papna-work: the processing takes a while, that's why I'm using a daemon+queue (currently, it's all in the webapp, and if 2-3 users start that, it becomes sloooow)
21:17  verma: Thiryal: http://paste.pocoo.org/show/FXupWy3jEQqThaKKJaxE/
21:18 --- Channel #python was synced in 81 seconds
21:18  Luyt: Ok, my draft rant about 'Ugly Python' is ready... http://www.michielovertoom.com/python/ugly-python/  Did I oversee something?
21:18  verma: Thiryal: it won't really run, I am working on ConferenceRoom.getUsers method
21:18  papna-work: dapal: What causes it to take a while? And why does this lend itself to daemonization rather than concurrency in the app itself/
21:19  papna-work: Does the webapp live on that computer?
21:19  papna-work: And what are the threads for>?
21:20  dapal: papna-work: the webapp lives on the same host, the threads are just taken from googling around (haven't tried removing them yet), and it takes a while because it asks for data over the net
21:20  papna-work: dapal: It sounds like you may simply want to add concurrency to the webapp and not have a daemon at all.
21:20  papna-work: dapal: You can be doing other stuff while waiting on a download.
21:21  papna-work: dapal: Look into twisted.
21:21  kerio: Luyt: the fact that both sorted(sequence) and list.sort() exist
21:21  Luyt: I must say I've never seen the '_' variable used in such a way to shift instrumentation code out of the 'meat' of the code.
21:21  dapal: papna-work: I understood what you mean, but the webapp is just making graphs out of the requested data
21:21  Luyt: kerio: thanks
21:21  dapal: papna-work: so I can't really do anything else other than waiting for the data
21:21  kerio: so that code is pretty much useless
21:21  dapal: papna-work: however, I'll look into twisted. Ty!
21:22  papna-work: dapal: I don't see where the daemon comes in.
21:22  dapal: it would ask for all the needed data on start, so I would avoid requesting it at every request
21:22  Luyt: Actually. it's profiling code. Maybe it'd be better to use profile/cProfile to profile the efficiency of sorting methods.
21:22  kerio: dapal: twisted is not just async io, it's also good abstraction from networking
21:23  Kronuz: in a datetime.timedelta, the seconds attribute does not always have all the full seconds of the timedelta (i.e. if there are many days or years there) does it?
21:24  Kronuz: how can I get timedelta full the seconds (even if years or months are in the timedelta)
21:24  Kronuz: ?
21:24  ousado: Luyt: relevance.
21:25  Thiryal: verma: Well, I don't have any idea about the modules you're using, but what it looks like you're actually wanting is to store a list of key/value pairs for each object, and later compose those lists into a dictionary to pass to another object.
21:25  papna-work: dapal: The daemon is for caching?
21:25  dapal: papna-work: also, yes
21:25  Luyt: ousado: Could you elaborate on that?  I can't deduct what you mean with just that word
21:25  papna-work: dapal: I do not understand how this is a sue case for a daemon.
21:25  dapal: papna-work: maybe I just mistought it then :)
21:25  verma: Thiryal: yes,
21:26  ousado: Luyt: Are you writing a style guide?
21:26  Luyt: ousado: No, just a rant to pump up my blog
21:26  papna-work: dapal: How are you writing your webapp?
21:26  Thiryal: verma: So you store a key/value list via a dict's .items(), you don't really operate on those like dicts internally as I understand it, then you just compose them and use .update() to build the dictionary when passing it.
21:26  dapal: papna-work: bottle
21:27  verma: Thiryal: yes, I am using .items because I want to be able to pass certain attributes (e.g. about Users) without explicitely knowing about them.
21:27  papna-work: dapal: Why don't you just build cacheing right into your webapp?
21:28  dapal: papna-work: it currently does so, I originally thought the daemon to split the "processing" from the "presentation"
21:28  LV-426: python 2.6, git 1.7.1: any idea why subprocess.Popen(['git','checkout', ...], ...) would fail with a usage error while Popen(['git-checkout', ...] ) succeeds ? 'git' is a ELF executable.
21:28  verma: Thiryal: this is actually working quite good: http://paste.pocoo.org/show/274664/
21:29  kerio: Luyt: that code doesn't work!
21:29  verma: man, I love partial functions
21:29  kerio: how does that code work
21:29  Luyt: kerio: I haven't even tried to run it yet ;-)
21:29  papna-work: verma: Your \ are all pointless.
21:29  papna-work: dapal: You can do this inside of one application.
21:29  kerio: it has a "stats" *class* that defines some members in the constructor
21:29  kerio: but the code references the class itself
21:29  papna-work: dapal: Many web frameworks are fundamentally designed with that in mind. I don't think bottle is.
21:29  kerio: which is never instantiated
21:30  kerio: that jeremiah kant really, really sucks
21:30  verma: papna-work: well, at certain points they help with indentation, and at some places they avoid syntax errors, so I just stay consistent.
21:31  papna-work: verma: I don't understand why you'd love partial so much. That code would be better with partial and lambda both replcaed by def.
21:31  verma: Luyt: that _ tip is priceless! ...
21:31  papna-work: verma: My editor doesn't need them to indent well, and the official recommendation is to be consistent by not using them at all.
21:31  papna-work: verma: http://www.python.org/dev/peps/pep-0008/
21:31  verma: papna-work: oh really? :P
21:32  Luyt: People will see me as a style Nazi, I expect.
21:32  kerio: Luyt: wait, you have to instantiate your own stats() object, and pass it around
21:32  kerio: the fuck
21:32  verma: papna-work: ok, I gotta give that a read
21:32  kerio: really, what the fuck
21:32  Luyt: kerio: Or somehow hide the comparisons in an object which also does the 'bookkeeping'
21:32  kerio: yeah but... ew
21:33  Thiryal: verma: All I was suggesting is that you tended to operate internally on those things as if they were lists; hence why you keep running into issues trying to do list operations on dictionaries. You can just use key/value lists internally, then create the dictionary when you send it off to other areas.
21:33  papna-work: verma: http://paste.pocoo.org/show/274667/
21:34  verma: papna-work: lol, you are right, I just need a def :) .. I think I was just too inclined towards using lambda, partial, reduce and all the funky functional stuff
21:34  verma: :P
21:34  dapal: verma: NO LOL!
21:35  dapal: (aaah, I wanted to say it as soon as I saw the topic.)
21:35  LV-426: verma, just curious - what's that _ tip ?
21:35  kerio: LV-426: that horrible, horrible code defines _ to be a harmless string to be able to do _                                ; some code here
21:35  verma: LV-426: Just something from functional langauges, the values you don't care about go as _ .. so you can do a = (dontcare, 1, dontcare) .. _, val, _ = a
21:35  kerio: to fuck up with the program flow, i think
21:36  papna-work: _ is used the same way in Python.
21:36  papna-work: idiomatically
21:36  Thiryal: LV-426: Have you confirmed that 'git checkout' and 'git-checkout' both actually work outside of Python? That's the first thing I'd check before looking at Popen.
21:36 * kerio uses ...
21:36 * LV-426 remembers seeing that some time ago... cool.
21:36  papna-work: I was thinking the other day that if I had a blog I'd write an article "_ considered harmful"
21:36  verma: papna-work: yes, I know :) .. that would work as well :P
21:37  verma: Thiryal: but does that not mean, that in my class I would need to access things like this: self.vals['interesting
21:37  Luyt: Well, it's usually used as a junk variable placeholder.
21:37  verma: '], instead of self.interesting ?
21:37  LV-426: Thiryal, yup - the variant with 'git-checkout' succeeds both from shell & in python
21:38  LV-426: Thiryal, i suspect some fork issue but it's just a hunch
21:39  Thiryal: verma: possibly; storing keyword args and self attributes as two separate things is already in dangerous territory though.
21:39  Thiryal: LV-426: Err, so does the "git checkout" variant work in both as well?
21:39  papna-work: A usual better placeholder actually says what something is.
21:39  papna-work: firstname, slash, lastname, slash, email, slash, dogsname = s.split("/") rather than _, _, lastname, _, email, _, _ = s.split("/")
21:40  vext01: is there a way to prevent object fields from being defined in methods other than __init__ ?
21:40  kerio: vext01: well... not doing it?
21:40  Thiryal: LV-426: Or rather, work in shell but not Popen? In my experience if there's a Popen problem like that, it can be reproduced easily outside of Popen by just using the exact same command line.
21:40  tos9: vext01: You could intercept them in __setattr__, but why do you want to?
21:40  papna-work: verma: Why would you do that?
21:40  vext01: to prevent typos making bugs
21:40  papna-work: vext01: *
21:40  LV-426: Thiryal, 'git checkout' works only in shell
21:41  kerio: don't make typos
21:41  papna-work: vext01: Have a test suite for that.
21:41  tos9: vext01: That doesn't sound like a good way to prevent typos.
21:41 * vext01 crys
21:41  tos9: vext01: There's no crying in programming.
21:41  papna-work: vext01: If you want a more static language, know one.
21:41  papna-work: *use oen
21:41  papna-work: *use one
21:41  kerio: *cries
21:41  verma: Thiryal: hmmm .. that's true
21:41  kerio: not crys
21:41  papna-work: vext01: If you want to avoid bugs in Python, write tests.
21:42  vbgunz: how can I call a gui program from python without worrying about communicating with it? I just want to launch it and not have it depend on my script to keep running. if I kill/close my script, I don't want to kill/close the gui. How?
21:42  kerio: vbgunz: that's a stupid idea
21:42  vext01: yes, i am regretting starting this task in python, but thats how it is - never mind then
21:42  Thiryal: LV-426: I don't know git at all, but that sounds like it could just be a shell env vs .profile evn issue as well.
21:42  vbgunz: kerio: really?
21:42  RonaldJ: how can I change the first character of a string into a capital?
21:42  vbgunz: I'd just take it you have no idea how to do it which is why I am asking
21:42  papna-work: vext01: A project isn't through until you've regretted it.
21:42  papna-work: vext01: __slots__ almost does what you want, but you're not using it for its purpose.
21:43  vext01: papna-work: will take a look
21:43  tos9: Oh yeah, forgot about slots...
21:43  Thiryal: Sorry, s/evn/env/ there. I've had Popen fail when I tried to run something that was actually an alias for another command, that sort of thing.
21:43  papna-work: vext01: No, don't have a look.
21:43  papna-work: vext01: Have a look at the unittest module.
21:43  eblume: Hello! I'm meditating on dictionaries vs attribute lookups in python, coming from a Lua background. In Lua, collection['key'] is *exactly equivalent* to collection.key  . "How true" is this in Python?
21:44  ousado: vbgunz: which OS?
21:44  papna-work: vext01: You're kidding yourself. Python doesn't work like you want it to work. You'll only screw up more if you pretend it is.
21:44  vbgunz: ousado: Kubuntu
21:44  papna-work: eblume: Not at all.
21:44  papna-work: eblume: docs.python.org/tut
21:44  kerio: what's the use of weakref?
21:44  vext01: papna-work: its only a proof of concept program, so like fuck I will unit test the damned thing
21:44  vext01: ;)
21:45  papna-work: vext01: You're thinking wrong.;
21:45  Luyt: and wtf are these variables named 'Amy', 'Ben' and 'Carrington' ?
21:45  kerio: vext01: are you really so scared of yourself
21:45  papna-work: vext01: You're thinking *VERY* wropng.
21:45  kerio: Luyt: a, b, c
21:45  kerio: but way cooler
21:45  vext01: im going back to work now...
21:45  papna-work: kerio: memoization. Dealing with cycles with the gc off.
21:45  Thiryal: RonaldJ: mystring.capitalize()
21:45  Luyt: One shouldn't choose 'funny' variable names
21:45  Luyt: They're not meaningful.
21:45  kerio: are you analyzing that piece of code like it was written by someone with a clue?
21:46  Luyt: I make no assumptions on the author (except that he's probably from Java/C/C++ heritage)
21:46  eblume: papna-work: Thanks. I'm actually fairly familiar with python, but have always used the [<immutable>] lookup syntax because it is considered a best practice in Lua. My coworker swore up and down that the two syntaxes worked in Python as well but I see now that she was wrong!
21:46  RonaldJ: Thiryal that simple :) was thinking about e regexpr to get the fist and then a way tomake it capital en then join again.
21:46  RonaldJ: Thiryal thanks
21:46  papna-work: eblume: that would be trivially tested.
21:46  eblume: papna-work: my mistake was trusting someone else before simply trying it. I shall hang my head in shame now.
21:46  eblume: papna-work: Yes indeed.
21:47  Luyt: Anyway, data is allowed to be funny: http://en.wikipedia.org/wiki/Crunchy_Frog
21:47  Thiryal: RonaldJ: Yeah, think simple first. :) Even just grabbing mystring[0].upper() + mystring[1:] would be better than throwing a regexp at the problem.
--- Log closed Tue Oct 12 21:50:19 2010
