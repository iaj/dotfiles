--- Log opened Tue Dec 21 00:00:17 2010
--- Day changed Tue Dec 21 2010
00:00  kerio: 0xFF ^ your_byte?
00:00  kerio: but really, what are you trying to do?
00:00  Rajko: bitflip a byte.
00:00  kerio: yeah but why
00:00  Rajko: what does it matter ?
00:01  BrianE: In Python, characters of a string aren't bytes. Right?
00:01  kerio: because eventually we get a little tired of XY questions
00:01  kerio: you ask us about X when your problem is Y
00:01  explodes: Rajko: correction it doesnt work :p
00:01  Rajko: then why is file.read returning a string
00:01  kerio: maybe we can solve Y way better than you think
00:01  bob2: BrianE: in 2.x they are
00:01  bob2: Rajko: what are you doing in general?
00:02  Rajko: reading chunks from file, parsing each chunk, outputting its info, have to flip 24th byte of each chunk before writing it out in a separate file
00:02  regebro: Rajko: import operator; operator.xor(0xF8, 0xFF)
00:02  kerio: regebro: we have a xor operator you know
00:02  kerio: it's "^"
00:02  geosav: bob2   http://pastebin.com/LNKvR6vC     i've highlighted what I'm looking for
00:02  kerio: and i already gave him the right answer
00:03  infobob: http://paste.pound-python.org/show/752/ (repasted for geosav)
00:03  papna: regebro: That's a funny way to write 0xF8 ^ 0xFF
00:03  kerio: i just want to know what is that for
00:03  kerio: it seems... arbitrary
00:03  explodes: rajko: now it does. http://pastie.org/1393511 Use this concept with the struct package.
00:03  explodes: rajko: read your file in as integers, and flip the integers.
00:03  kerio: explodes: or not
00:03  regebro: kerio: Oh, whaddayouknow. I though that was a logical xor working on True/False.
00:03  Rajko: kerio, crappy chinese software flips that byte on file open because their input files have t flipped
00:03  explodes: kerio: or how would you do it.
00:03  regebro: OK, so 0xF8 ^ 0xFF it is.
00:03 --- f8l is now known as f|l
00:03  kerio: regebro: nope, we don't have a logical xor
00:03  kerio: not sure why
00:03  Rajko: normal input files dont, so i have to flip mine so that it gets accepted
00:04  papna: Rajko, Sorry, I was thinking Python's ~ worked slightly different.
00:04  bob2: geosav: cool
00:05  BrianE: #python-es is quiet =\
00:05  regebro: kerio: Well, a logical one is less useful as it's easy to implement with normal logic.
00:05  kerio: regebro: well, how?
00:05  Rajko: xor 0xFF did nothing.
00:05  regebro: Rajko: Then you did it wrong.
00:06 --- `Fuco` is now known as Fuco
00:06  Rajko: oh wait it did
00:06  papna: Rajko: If you're thinking it works in place, it doesn't.
00:06  Rajko: in place ?
00:06  geosav: infobob  will do. that was my first time
00:06  Rajko: chr(ord(hdr[0x17]) ^ 0xFF)
00:07  regebro: kerio: a and not b or b and not a
00:08  kerio: regebro: that evaluates a and b twice
00:09  regebro: kerio: Yeah? They True or False. It's not a heavy operation. :)
00:09  Rajko: what if a or b was a MACRO
00:09  Rajko: what THEN
00:09  kerio: wtf is a macr
00:09  kerio: o
00:09  locojay: hi  i m having a strange behaviour : doing a log.debug in a for loop and mem goes up to 1GB
00:09  papna: kerio: You can do it evaluating the underlying expressions only once.
00:09  locojay: comment out me at 50mb
00:09  papna: kerio: But you can't fully short circuit, so there's no use in an operator.
00:09  bob2: geosav:  t.xpath('//table')[1].xpath('//tr/td/text()')[::2]
00:10  kerio: regebro: compute_p_equals_np() and not demonstrate_riemanns_conjecture() or demonstrate_riemanns_conjecture() and not compute_p_equals_np()
00:10  regebro: Rajko: Well, if you find macros in Python tell me.
00:10  papna: kerio: xor(d(), c())
00:10  Rajko: naw im good
00:10  regebro: kerio: Well, now why would you do that?
00:11  ccxCZ: bool(a) ^ bool(b)
00:11  kerio: ccxCZ: yeah, i was getting to that
00:11  kerio: but it's ugly :(
00:11  locojay: anyone experiencing this behaviout with logging
00:12  geosav: bob2    xpath is new to me
00:13  geosav: can you point me to a decent resource/tutorial
00:13  seiflotfy: ccxCZ, 		payload = str("äöü").encode("utf-8")
00:13  seiflotfy: is this right
00:13  seiflotfy: ?
00:13  Peng: seiflotfy: No.
00:13  regebro: ccxCZ: Ah, see, so that's why I though they were logical operators. :-)
00:13  seiflotfy: Peng, :(
00:13  bob2: geosav: no, sorry
00:13  bob2: geosav: it's nto lxml-spepcific, though
00:13  Peng: seiflotfy: encode is used to convert a unicode to a str. You aleady have a str. It's already in an encoding -- in this case, apparently UTF-8.
00:13  Peng: seiflotfy: Unless you're on Python 3?
00:14  seiflotfy: Peng, i am i n2
00:14  Peng: seiflotfy: OK, then what I said applies. (The situation is different in Python 3.)
00:14  seiflotfy: Peng, when i try to send this string as a bytearray over dbus it complains
00:14  cwillu_at_work: u"äöü".encode("utf-8")
00:15  Peng: seiflotfy: As I said, you're doing it wrong. cwillu_at_work is right. Once you fix that, if it continues to complain, pastebin the traceback.
00:16  seiflotfy: http://pastebin.com/DTBXdgvd
00:16  infobob: http://paste.pound-python.org/show/753/ (repasted for seiflotfy)
00:16  seiflotfy: Peng, cwillu_at_work ^
00:16  cwillu_at_work: seiflotfy, sounds like you're passing an int somewhere that a string or a list or something is expected
00:17  bob2: ie the last arg
00:17  seiflotfy: cwillu_at_work, if i turn the payload = "asd" it works
00:17  bob2: read the docs for this dbus call again
00:17  cwillu_at_work: seiflotfy, where's the source?
00:17  seiflotfy: but when i use some non asci stuff it doesnt
00:17  geosav: bob2  seems like stackoverflow may have some examples. thanks for the help
00:18  Peng: seiflotfy: There's a "228" in the arguments that...shouldn't be.
00:18 --- `Fuco` is now known as Fuco
00:18  explodes: rajko: this is the whole solution ... http://pastie.org/1393511
00:18  Rajko: explodes, too late
00:18  Rajko: yeah, thats crazy
00:18  explodes: ;c
00:18  explodes: well i learned.
00:19  jrabbit: How woudl I best interact with a webservice (google tasks) that doesn't offer an API?
00:19  regebro: jrabbit: For interaction I'd use mechanize.
00:20  Peng: jrabbit: Beat the developers until they provide an API.
00:20  jrabbit: Peng: they've been asked for YEARS
00:20  jrabbit: they don't seem to think anyone needs it
00:20  regebro: If you just want to get data, lxml (or BeautifulSoup, butr I like lxml).
00:20  explodes: jrabbit: really? google has python api for everything else...
00:20  Peng: jrabbit: Well, then, what regebro said. But also write some sort of beating-tool in Python.
00:20  jrabbit: thanks regebro I didn't know where I was headed
00:20  seiflotfy: Pelalil, cwillu
00:20  seiflotfy: http://pastebin.com/AsRhrrZ9
00:20  jrabbit: explodes: yeah
00:20  infobob: http://paste.pound-python.org/show/754/ (repasted for seiflotfy)
00:20  regebro: +1 For beating tool.
00:20  jrabbit: regebro: I have a read out already made
00:20  seiflotfy: cwillu_at_work, Peng, so the first test case works but the second does not
00:21  craiggles: is the standard varName or var_name
00:21  jrabbit: regebro: I assume mechanize won't work with javascript? :P
00:21  regebro: jrabbit: Unfortunately true.
00:22  jrabbit: maybe it works without js
00:22 * jrabbit doubts
00:22  craiggles: oh cool python has mechanize?
00:22  craiggles: i used it with ruby.
00:22  seiflotfy: Peng, cwillu_at_work  http://paste.pound-python.org/show/754/
00:22  Sub_Zero: How is it possible to add a text resource to a PE executable file in Python?
00:23  Rajko: python doesnt have executables
00:23  geosav: bob2 question  how do i implement xpath. is it a module I have to download?  I'm using Python3
00:23  bob2: geosav: ? you need python 2 to use lxml
00:24  bob2: Sub_Zero: by looking on pypi for a suitable library
00:24  papna: Nope
00:24  bob2: it is ported to python 3?
00:25  accipter: I have some text that is in unicode and I want to convert it to ascii and I don't mind ignoring the errors. However, when I do unicode(s, errors='ignore'), I get the following error: TypeError: decoding Unicode is not supported.
00:25  papna: bob2: For some time.
00:25  bob2: geosav: ah, well go get lxml
00:25  bob2: accipter: .encode
00:26  geosav: there now thanks
00:26  bob2: accipter: unicode() is almost never used and in any case does the opposite of what you want
00:26  geosav: think I'm gunna need some therapy after this
00:26  accipter: so I should be using unicode.encode()?
00:26  Sub_Zero: Rajko is it not possible to open Notepad.exe on windows and add a text resource to it? bob2 there isn't any suitable library there
00:26  bob2: it is some pretty terrible html
00:26  seiflotfy: Peng, cwillu_at_work ?
00:26  cwillu_at_work: seiflotfy, you didn't type what I said to type though
00:26  bob2: Sub_Zero: if you know how to modify it yourself, you can of course write python code to do that
00:26  cwillu_at_work: "äöü".encode("utf-8") is not u"äöü".encode("utf-8")
00:27  bob2: accipter: the unicode instance method encode, yes
00:27  Sub_Zero: bob2 I don't know how to add a resource to a file at all at the moment
00:29  Sub_Zero: there is a module called pefile but it's rather limited and doesn't add resources as I am wanting
--- Log closed Tue Dec 21 09:20:17 2010
--- Log opened Tue Dec 21 09:25:40 2010
09:25 --- Users 676 nicks [0 ops, 0 halfops, 0 voices, 676 normal]
09:25 --- Server: [gibson.freenode.net] [freenode-info] channel trolls and no channel staff around to help? please check with freenode support: http://freenode.net/faq.shtml#gettinghelp
09:25  aminpy: VooDooNOFX, like -> a[2:2] = ["Amin", "Oruji"]
09:26  A3K: Spirits-Sight: you also don't need file = part in file = output.write(file.read()) as write doesn't return anything
09:26  aminpy: VooDooNOFX, but I don't want to use -> : <-
09:26  aminpy: VooDooNOFX, I want to use a function
09:27 --- Channel #python was synced in 90 seconds
09:28  jorrit: aminpy, and why is that?
09:29  aminpy: jorrit, just I want to know
09:30  VooDooNOFX: i do'nt believe you can do it with a builtin
09:31  ross`: http://foo.mx/~ross/log.txt
09:31  VooDooNOFX: for e in newlist: oldlist.insert(2, e) perhaps ;)
09:31  ross`: does this look correct
09:31  aminpy: so, there's not
09:31  ross`: http://foo.mx/~ross/python/log.txt
09:31  ross`: that sorry
09:32  VooDooNOFX: ross: see http://docs.python.org/library/os.html#os-file-dir for additional items of interest
09:32  VooDooNOFX: os.F_OK, os.R_OK, et. al.
09:33 --- airtonix_ is now known as airtonix
09:44  gen0cide: im stuck, after i get the data in the 2nd <tr> tag by: (links) = data.findAll('tr')[1]        i try to get the 4th link by:  (linkss) = (links).findAllNext('a')[3]
09:44  jorrit: gen0cide, what's with the weird (bla) notation?
09:45  Spirits-Sight: anyone see any issue or even know how to write this so its python3 usable? http://codepad.org/wlYiPE8V ?  it now carries the .ext over
09:45  gen0cide: But that returns title, alt, and img src also
09:45  gen0cide: jorrit: Im going to change it soon
09:46 --- zobbo is now known as zobbo|school
09:47  gen0cide: this is whati have currently
09:47  gen0cide: the (linkss) = (links).findAllNext('a')[3] returns:  <a href="http://torrents.thepiratebay.org/6054940/Two_and_a_Half_Men__TVSeries_(divx)__S01E01-04__NL_Subs__DMT.6054940.TPB.torrent" title="Download this torrent"><img src="http://static.thepiratebay.org/img/dl.gif" class="dl" alt="Download" /></a>
09:47  gen0cide: When i only want the link of the .torrent, and not the other stuff
09:48 --- Viper is now known as Out`Of`Control
09:49  gen0cide: would i have to use strip, or is there a better way?>
09:53  Ademan: how do you guys use virtualenv with web application deployment? do you keep the virtualenv under version control? or what?
09:57  SophieB_: join irc://matilda.kotnet.net/#botnet to see a botnet
10:06  JoeCoolDesk: Who was talking about twisted.words?
10:14  ross`: does os.path.exists work on files and directories
10:14  ross`: or directories only
10:14  cwillu_at_work: both
10:15  cwillu_at_work: and symlinks, device nodes and fifo's too!
10:16 --- zobbo|school is now known as zobbo
10:24  ross`: hmm is it possible to keep the python interpretor open after a script finishes
10:24  Dynetrekk: ross`: I think it's something like python -i scriptname.py
10:25  ross`: like could you have a script that loaded a bunch of variables and then left you with the interpreter open so you could do stuff with those vars
10:25  ross`: Dynetrekk: ty
10:25  Dynetrekk: ross`:  run python --help, read the doc there
10:25  Dynetrekk: ross`: there is also a PYTHONSTARTUP (or similar) env var which you can set, to run a script every time at startup
10:26  ccxCZ: ross`: ipython does that
10:28  aliquis: Hi! I'm bad at working with files, but now I've come across a problem where I need to save a red-black tree in a file/system of files. This has to be done in Python. The tree could potentially contain hundreds of GB of data, so I necessarily need to work with files. The data structures in the tree nodes are not guaranteed to be of the same size. How can I represent the structure in one or several files, while maintainin
10:28  aliquis: editing capabilities with the original complexity O(log n)? I'd also prefer not to leak disk space. Please don't flame me if I'm using the wrong channel, but I couldn't find a channel about file systems.
10:29  ross`:     f = open("log/logfile","w")
10:29  ross`: IOError: [Errno 2] No such file or directory: 'log/logfile'
10:29  bob2: ross`: python -i whatever foo.py
10:29  ross`: isnt that command supposed to make the file?
10:29  bob2: ross`: sure, the log dir doesn't exist
10:29  bob2: ross`: the file, yes, the dir, no
10:29  ross`: Dynetrekk: the dir exists
10:29  ross`: the file doesnt
10:29  ross`: that command should make the file
10:29  bob2: ross`: os.listdir("log")
10:30  ross`: my bad
10:30  ross`: its fine now
10:34  jimbauwens: For pygtk'ers: I want to remove a menuitem from a menu, but fail to figure out how. menuitem.destroy() doesn't work. Anyone here now howto do it?
10:35  jimbauwens: thanks
10:37  ccxCZ: aliquis: you are free to use any dbm module python has, I don't know which one is preferred atm
10:39  Juhaz: jimbauwens, "doesn't work"? that most certainly will remove a menuitem, though it'll also destroy it like the name says so it can't be later re-added or something like that
10:39  ccxCZ: aliquis: http://docs.python.org/library/anydbm.html
10:40  jimbauwens: Juhaz, the menuitem will stop functioning, but it will still sit in the menu
10:41  azareth: how can i do XOR of two python lists
10:42  mahmul: azareth: is their ordering important?
10:42  aliquis: ccxCZ: thanks a lot!
10:42  azareth: mahmul : lets say no
10:42  bob2: is that the same as set difference?
10:42  mahmul: azareth: convert them to sets and do .difference()
10:43  azareth: thanks mahmul i`ll give it a try
10:43  mahmul: bob2: yeah, i assumed it was.  i guess we'll find out
10:44  Juhaz: jimbauwens, that's pretty much impossible unless you're doing something really crazy. Any widget will remove itself from any containers it's in when destroyed.
10:45  azareth: mahmul: : set(a) ^ set(b) was the easiest solution
10:45  jimbauwens: Well, then i'll go check my code =)
10:46  Juhaz: jimbauwens, menu.remove(menuitem) or just menuitem.hide() should work too, but of course all bets are off if something is so far off the kilter. pastebin code.
10:47  jimbauwens: Juhaz: I'm a beginner in both python and gtk, so I'm sure I'm making mistakes. I'll first try to look again at my code, and If I don't figure it out, i'll report back
10:47  jimbauwens: thanks
10:47  mahmul: azareth: yeah, i guess you wanted .symmetric_difference(...)
10:50  skamster_: hello all
10:50  skamster_: i've got a problem with configparser, hope someone could help me.. i'm programming with python 2.6..
10:50  skamster_: http://pastebin.com/9uVXxwUJ
10:50  infobob: http://paste.pound-python.org/show/761/ (repasted for skamster_)
10:50  jimbauwens: Juhaz, maybe the reason it doesn't work it because I access the menu item like this: menu.get_children()[1]
10:51  skamster_: the method clicked(self) should be my example-method to prevent me from double-entrys.. but they always exist
10:52  bob2: skamster_: what do you mean?
10:52  skamster_: bob2: i've pasted my code.. it doesn't modify one section, it makes a new one
10:52  skamster_: :s
10:53  bob2: I don't know what you mean
10:53  skamster_: i have a method
10:53  skamster_: which use configparser
10:53  bob2: yes
10:53  skamster_: i like to save configs with this
10:53  bob2: I'd say opening it for append is bad
10:53  skamster_: if i save a option more than one time, i've the same section more than once
10:54  skamster_: mh, what would be better? if i use write, i have to create the whole config once again..
10:55  skamster_: (if i want to modify just one section, it's more "work" then)
10:55  bob2: ok
10:56  magicblaze007: anyone using python on android here?
10:56  skamster_: bob2: do you have a idea?
10:57  ross`: how would i organize time to look like this
10:57  ross`: 12/21/2010 04:53:27
10:57  bob2: do you mean "how do I output a datetime object in that above format?"?
10:57  ross`: yes
10:57  bob2: strftime
10:57  ross`: ty
10:59  Axius: I get a syntax error while runnig this code:http://paste.pocoo.org/show/307780/
11:00  bob2: skamster_: open for read, parse, close, open for write, write, close
11:00  bob2: Axius: did you read the exception?
11:00  jorrit: Axius, on what line?
11:00  bob2: if so, pastebin it
11:00  bob2: if you're on arch, that will be why
11:01  Axius:  line 6
11:01  bob2: so you're on arch
11:01  bob2: print is a function, print(whatever)
11:02  ross`: bob2: can i get a link. the page on docs.python.org doesn't show an example
11:02  ross`: with output
11:02  bob2: yeah it does
11:02  skamster_: bob2: ok, i will try it this way.. thx..
11:02  Axius: bob2: ok, thanks
11:03  bob2: Axius: you're probably better off using python 2, it has much better library and documentation support
11:04  marel: Is there any python module for dealing with spreadsheets ?
11:04  bob2: do you mean "excel files"?
11:04  marel: Yes
11:05  Axius: bob2: I wish I were able to do that.
11:05  bob2: ross`: http://docs.python.org/library/datetime.html#datetime.date.strftime , second block has a couple of things
11:05  bob2: Axius: ok!
11:05  Axius: bob2: Do you use arch too?
11:05  bob2: hah no
11:05  bob2: I don't believe archc has completely removed python2, however
11:07  Axius: bob2: I have Python 2.7.1 intalled but I dont know hoe to use that version instead; without breaking my system.
11:07  bob2: marel: http://pypi.python.org/pypi?%3Aaction=search&term=excel&submit=search
11:07  bob2: Axius: sure you do
11:07  bob2: pythno2.7
11:09  aliquis: ccxCZ: how do I know which modules are installed? it says "if none of these modules is installed, the slow-but-simple implementation in module dumbdbm will be used." the software will run on a debian lenny system. where can i read about complexity? the software has to perform well even with billions of entries
11:09  aliquis: "slow-but-simple" sounds scary
11:10  Axius: bob2: How can I use python2.7 instead of Python 3.1.3?
11:10  skamster_: bob2: http://pastebin.com/T5eABTGM it does regenerate the file with just one section.. i use the read-method to parse it..
11:10  infobob: http://paste.pound-python.org/show/762/ (repasted for skamster_)
11:10  bob2: Axius: by typing that
--- Log closed Tue Dec 21 12:10:49 2010
--- Log opened Tue Dec 21 12:11:11 2010
12:11 --- Users 654 nicks [0 ops, 0 halfops, 0 voices, 654 normal]
12:11  BrianE: bsod1: BeautifulStoneSoup or lxml?
12:11  bsod1: BrianE: stonesoup
12:11  BrianE: =\
12:11  BrianE: I feel bad now
12:12  nosklo: BrianE: don't worry, you'll have other opportunities of suggesting lxml.html :)
12:12  frerich: I have a class which represents a ConfigurationFile. On shutdown, the file should be saved (it maintains a 'dirty' flag to decide whether it actually needs to save). So what I did was to do the 'if self.dirty: self.write()' check in the __del__ implementaiton of a class. However, a colleague now wrote "NEVER use __del__()! It may never be called!"; does anybody know more about this reasoning? Is __del__() not
12:12  frerich:  a good idea for code to be executed when the object gets destructed?
12:12  nosklo: BrianE: meanwhile, get yourself familiar with it, and the xpath support!
12:12  BrianE: nosklo: It has xpath support?!!
12:12 --- Channel #python was synced in 90 seconds
12:12  nosklo: BrianE: Did I mention it has xpath support?
12:12  BrianE: No way!
12:13  nosklo: frerich: don't use __del__
12:13  bob2: frerich: tour colleague is correct, __del__ may or may not ever be called
12:13  nosklo: frerich: instead, make a close() and call it explicity
12:13  bob2: frerich: and it can mess up garbage collection
12:14  frerich: nosklo: Yes, that's what he suggested as well. However, I'd like to avoid having to call such a function explicitely (because I cannot forget it then). Is there any other way by any chance?
12:15 * frerich wonders what the "raison d'etre" for __del__ is if it's to be avoided.
12:15  nosklo: frerich: not reliably. But your tests should catch that pretty soon
12:15  nosklo: frerich: I'm pretty sure you can lay out your code in a way that makes it possible to call yourobj.close()
12:15  nosklo: frerich: maybe in a try/finally clause
12:15  nosklo: frerich: having it explicit saves you lots of headaches
12:17  nosklo: frerich: hmm, you can also use a context block...
12:18  frerich: Context block? Never heard of that before, let me google...
12:18  nosklo: frerich: with myobj: code_here # and have it call .close() automatically
12:18  bob2: you could register an atexit handler
12:18  bob2: but that might not be run either
12:19  eurisko: hell o
12:19  frerich: I don't need a perfectly save way. I was just looking for something which approximates the semantics of C++ destructor so that I can use a RAII-style of programming (creating an object acquires the resource, destroying the object releases it)
12:19  bob2: python has gc, c++ does not
12:19  nosklo: frerich: there's no way to destroy an object in python, that's the problem with RAI
12:19  bob2: the rought equivalent to raii in python is context managers
12:20  nosklo: frerich: the object gets destroyed automatically, you can't destroy it. By putting something in the way like __del__ you end up messing with the automatic collection mechanism
12:20  ross`: how do i make the last element in a list null
12:20  frerich: nosklo: It's been some time since I embedded Python in to a C++ program, but wouldn't a PyObject get destroyed if it's reference count dropped to zero?
12:21  ross`: when i don't know how many elements there are in a list
12:21  bob2: ross`: null?  you mean None?
12:21  bob2: ross`: what for?
12:21  ross`: bob2: im mkaing a script that will for a path like /dir/to/path
12:21 * bob2 imagines some convuluted replacement for a for loop
12:21  ross`: it will mkdir and then chdir each item
12:21  ross`: the problem is
12:21  ross`: its mkdiring the filename at the end
12:21  frerich: nosklo: I see. Getting destroyed automatically (i.e. via GC) is fine. I don't really care *when* the object gets destroyed (As long as it's not too early ;-)). I just want to execute some code shortly before it's destroyed.
12:21  bob2: ross`: maybe describe what your program is meant to do, overall?
12:22  bob2: this sounds like a complicated way to get anything done :)
12:22  VooDooNOFX: i think list[-1] = None will do it for you
12:22  ross`: bob2: may i engage you in query, its alot
12:22  bob2: ross`: no
12:22  bob2: ross`: just explain what you're trying to do, overall
12:22  ross`: bob2: i don't want to spam here
12:22  nosklo: frerich: if you define a close() method, you can use it in a context block by using contextlib.closing like this: http://bpaste.net/show/12421/
12:22  bob2: ross`: /msg requires agreeing to my consulting rates ;)
12:23  bob2: ross`: just explain your problem succintly, here
12:23  ross`: alright
12:23  frerich: nosklo: Yes, that looks pretty code. I assume the close() function will even be called in case the scope is left due to an uncaught exception (or due to a return, of course)?
12:23  ross`: well i have this function writelog
12:23  ross`: def writelog( string, file="log/main.log" ):
12:23  frerich: nosklo: s/pretty code/pretty good/
12:23  bob2: ross`: no, don't hit enter after every half though
12:23  nosklo: frerich: yes.
12:23  bob2: ross`: and provide a pastebin link for your current program
12:23  ross`: ok
12:25  ross`: bob2: http://foo.mx/~ross/python/log.py
12:25  ross`: bob2: http://foo.mx/~ross/python/main.txt
12:25  ross`: bob2: http://foo.mx/~ross/python/log.txt
12:25  ross`: sry
12:25  frerich: nosklo: I'm tempted to introduce a 'Program' class with a close() method and wrapping my whole script into a context block like that; the close() method on the Program object would then save the configuration and whatnot. Even though I'm just a Python amateur it feels very non-idiomatic (it is a very OO-centric approach).
12:25  ross`: gotta fix my apache mime types
12:25 * frerich tries to avoid real hard to write Python with a C++ mindset :-}
12:25  frerich: keyboard, behave...
12:25  frerich: s/tries to avoid real hard to write/tries real hard to avoid writing/
12:25  ross`: bob2: anyway as you can see, i want it so users can customize where it writes their log too
12:25  nosklo: frerich: well, I would also advocate having a explicit save() method and not saving on close...
12:25  BrianE: ross`: Are you trying to recursively create directories if they don't exist?
12:26  BrianE: Like mkdir -p?
12:26  ross`: BrianE: YES
12:26  nosklo: frerich: it makes easier to test the code
12:26  BrianE: Python has os.makedirs() for that
12:26  bob2: ross`: os.makedirs
12:26  nosklo: frerich: and to change the file atomically (i.e. not having partial changes written back)
12:26  ross`: ok.. that still doesnt solve my last issue
12:26  bob2: ross`: also, don't do ' == False' or '== True', do 'if foo' or 'if not foo'
12:26  ross`: how do i make it so it ignores/deletes the last item from the list
12:26  bob2: ideally use 4 spaces instead of tabs
12:27  bob2: ross`: I think you're still asking a question about your partial solution rather than your actual problem
12:27  ross`: so it doesnt mkdir file.log
12:27  BrianE: ross`: There's no point in checking if a file exists, then opening with mode a else w
12:27  BrianE: ross`: Just open it with mode 'a '
12:27  BrianE: (Will create it if it doesn't exist)
12:27  ross`: 'a' and 'a ' are differnt?
12:27  bob2: ross`: e.g. in this case what you really want is 'for element in path[:-1]'
12:27  frerich: nosklo: I think the modularity wouldn't be improved (I'd just have to wrap the configuraiton file object in a context lbock). However, a save() method would allow re-using the object (so you could change/save/change/save), that's true.
12:27  BrianE: 'a' and 'a '?
12:27  BrianE: Yes
12:27  ross`: BrianE: thank you
12:27  frerich: nosklo: I think I'll go for both: close() calling save().
12:27  jorrit: ross`, of course they are different. Why wouldn't they be?
12:28  nosklo: frerich: suppose you have to write two changes, and have some exception between them. You'll call save() with only one of the two changes
12:28  BrianE: Also, you could look into using `with`... would make that look a lot cleaner, IMO
12:29  nosklo: frerich: if there's an error, I wouldn't save the file. I would save it after each set of changes, instead.
12:29  ross`: BrianE: path[:-1] is all items but the last one?
12:29  ross`: bob2: sorry*
12:29  BrianE: Yes
12:29  ross`: nice
12:29  BrianE: Though... you should use os.path to get the basename, etc, rather than parsing it yourself
12:29  frerich: nosklo: Yes, such an atomic 'commit-and-rollback' semantic would be very desireable.
12:29  Spira: Anyone help me? Whenever I use a report hook to display the progress of a URL download (urllib2) and I try to read the file afterwards, it's always blank. But if I remove the report hook it reads just fine.
12:30  nosklo: Spira: pastebin the code?
12:30  Spira: ok
12:30  BrianE: ross`: To get the path WITHOUT the filename, use os.path.dirname(file)...
12:30  BrianE: To get the filename, use os.path.basename(file)
12:31  BrianE: Looks cleaner than doing it manually, and should be more cross-platform (eg. Windows paths that use \ instead of /)
12:32  ross`: ok refresh my source files
12:32  ross`: it works right now
12:32  ross`: can you guys give me any tips on improving the process as i have it now?
12:32  kerio: what process?
12:32  ross`: kerio: http://foo.mx/~ross/python/log.txt
12:33  BrianE: ross`: Update log.txt
12:33  frerich: Another thing: I have a function which shall remove all elements from a list which starts with any of the strings in a different list. The latter list is fixed. Right now I have this: http://bpaste.net/show/12422/ <-- is there maybe a more elegant way?
12:33  BrianE: Oh, you did
12:33  ross`: BrianE: yes
12:33  ross`: it no longer makes directories its not supposed too
12:33 * frerich assumes that funciton can be optimized by storing the value of the len() call somewhere.
12:33  ross`: the only difference between my copy and that copy is i removed the print line
12:34  ross`: also can i use my writelog function in itself
12:35  bob2: frerich: normally you make a new list instead
12:35  nosklo: frerich: ok, there's a number of things with that which could be improved
12:35  kerio: ross`: we have a perfectly good "logging" module
12:35  nosklo: he is making a new list already
12:35  bob2: frerich: wow
12:35  ross`: kerio: this is my first night using python
12:35  kerio: with multiple logging levels and stuff
12:35  nosklo: frerich: first thing. Don't use identifiers that start with two underscores
12:35  ross`: kerio: i don't understand why people think i should know all this stuff on day 1 id say im doing very good for my first few hours
12:36  kerio: ross`: oh, sure
12:36  frerich: nosklo: Oh, oops - I thought that was the way to denote 'private' functions (which should get special name mangling).
12:36  kerio: but what you're doing is pointless because the stdlib does that better :)
12:36  nosklo: frerich: to denote private, use a single underscore
12:36  frerich: Ooops.
12:36  nosklo: frerich: two underscores do name mangling, which has nothing to do with private
12:36  bob2: ross`: my only suggestion is to explain your /problem/ rather than the half-solution you have
12:36  ross`: bob2: well i don't think there is a problem anymore
12:36  nosklo: frerich: name mangling is to avoid clash on subclasses - it's _rarely_ useful
12:36  bob2: ross`: e.g. if you'd asked how to do something like 'mkdir -p' in python, you wouldn't have needed to write any of that
12:36  ross`: it does what i want (i think)
12:36  bsod1: how can I see docstring of a func or class in vim?
12:37  frerich: nosklo: I see. I thought the same effect would also be used to avoid that outside callers 'accidentally' call the function (by giving it a contrived name).
12:37  ross`: bob2: yes but in order to do the mkdir -p thing i would need to do regexp or something to take away everything including the last / at the last /
12:37  kerio: ross`: no, you need os.path
12:37  bob2: ross`: of course not
12:37  frerich: nosklo: (the ### commit is by my colleague, by the way)
12:37  ross`: oh...
12:37  bob2: ross`: that would be an insane way to do it
12:37  ross`: then how do i do this in two lines?
12:37  nosklo: frerich: the single underscore is already enough warning - everybody knows that it means "private"
12:37  bob2: ross`: do /what/?
12:37  BrianE: ross`: Here: http://paste.pound-python.org/show/763/
12:37  bob2: ross`: all we have is your buggy code to try to guess what your goal is
12:38  ross`: turn file into a directory path without the file
12:38  BrianE: You don't need to parse any of it
12:38  bob2: ross`: os.path.dirname
12:38  kerio: frerich: we're all consenting adults here
12:38  frerich: nosklo: Ok, thanks. Thanks for your patience by the way, it's exactly this kind of thing I'm interested in (how seasoned Python developers would read code).
12:38  BrianE: When creating the directories recursively, you need to get the directory path without the filename...
12:38  BrianE: So, use os.path.dirname, as in that paste
12:38  kerio: there's no "accidentally" calling a _method
12:38  bob2: ross`: os.makedirs(os.path.dirname(whatever))
12:39  BrianE: ^
12:39  BrianE: But, your log function is likely to be called more than once, and os.makedirs() will raise an OSError if the directory already exists
12:39  BrianE: So, catch and dismiss that error (as in that paste)
12:39  ross`: BrianE: i see
12:39  BrianE: Then, it's "a ", not "a "
12:39  BrianE: (a plus, in case you can't see the plus)
12:39  ross`: i can't see the plus
12:39  ross`: :P
12:39  ross`: but ty
12:39  bob2: it's fine to tell the user that the log file they ask you to use must be in a dir that exists
12:39  BrianE: And, time.strftime() will use time.localtime() be default, WITHOUT having to pass time.localtime() yourself
12:39  ross`: the one thing i don't recognize is the with before open
12:39  ross`: what does that do
12:40  ross`: BrianE: ahh thanks, thats another one of those things i had no way of knowing :p
12:40 --- atrapado is now known as roper
12:40  Spira: Here:
12:40  Spira: http://pastebin.com/YWUM6vAL
12:40  infobob: http://paste.pound-python.org/show/764/ (repasted for Spira)
12:40 --- roper is now known as atrapado
12:40  BrianE: ross`: It's syntactic sugar for "I want to do [what's indented] with [this object], and when I'm done [after the indent], call its .close() method"
12:40  nosklo: frerich: here's how I'd do it http://bpaste.net/show/12425/
12:40  Spira: If you uncomment the lines that are commented
12:40  Spira: It will not work
12:40  nosklo: frerich: er, no, wait
12:41  kerio: BrianE: well not really
--- Log closed Tue Dec 21 12:43:37 2010
