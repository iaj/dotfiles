--- Log opened Wed Jan 19 02:03:52 2011
02:03 --- Users 717 nicks [0 ops, 0 halfops, 0 voices, 717 normal]
02:04  lightcatcher: but cls.__iter__ != cls.__getitem__ according to Python
02:04  KirkMcDonald: lightcatcher: Here's a fun Python fact: Define a class with a "foo" method. Now check whether C.foo == C.foo
02:05  sproingie: it has something to do with defining a closure in a loop
02:05 --- squishy is now known as SquishyNotHere
02:05 --- Channel #python was synced in 99 seconds
02:05  sproingie: http://code.activestate.com/recipes/502271-these-nasty-closures-caveats-for-the-closure-enthu/
02:05 --- SquishyNotHere is now known as squishy
02:05  bob2: the closure stores the name 'key'
02:06  bob2: and looks it up in the parent namespace when wrapper gets called
02:06  bob2: = they all see the last value assigned to it
02:06  lightcatcher: KirkMcdonald: they do
02:06  sproingie: and the parent namespace is merely the whole function, and not scoped every time through
02:06  lightcatcher: bob2: any idea how I get around this? I realize I could just type out the different methods, but it might end up being a lot of methods
02:07  sproingie: i think you need to pass it as an arg to another function that returns your closure
02:07  lightcatcher: I was just thinking that. This is getting ugly
02:08  sproingie: for i in [a,b,c]: myclosure = make_closure(i)
02:08  bob2: I forget, I always give up at this point
02:08  sproingie: that should capture i properly
02:08  lightcatcher: thanks sproingie. The activestate post describes this well
02:08  sproingie: just realize that the only place you can introduce a new scope is in a new function
02:09  sproingie: a new scope and thus a new extent
02:09  bob2: what's an 'extent' in this context?
02:10  sproingie: lifetime of the variable.  in this case the closure
02:10  lightcatcher: is there any role for functools.wraps in this?
02:10  RandIter: if i want a copy y of an int x, should i do y=copy.copy(x) or y=x?
02:10  sproingie: possibly, but do you need to add even more layers?
02:10  KirkMcDonald: lightcatcher: Are you in Python 3?
02:10  bob2: RandIter: copying ints is pointless
02:10  lightcatcher: my thoughts sproingie. easy to just set func.__name__
02:10  bob2: RandIter: so 'y = x'
02:11  lightcatcher: KirkMcdonald: nope, 2.7
02:11  RandIter: bob2: i assume i won't lose the value of y if x later gets reassigned
02:11  Thorn: maybe I should post my question to some mailing list or something?
02:11  lightcatcher: I tried pickling the function and then deserializing, didn't change anything, actually pickle raised an Exception
02:12  bob2: RandIter: 'y = x' (always, not just for ints) means "hey python, point y at the object x currently points at "
02:12  KirkMcDonald: lightcatcher: Oh, of course, bound methods define comparisons. It is "C.foo is C.foo" which is false.
02:12  lightcatcher: this is pretty interesting to me, I wasn't familiar to these late binding closures
02:12  sproingie: i'm not sure i follow the activestate explanation about closures being bound at the end of the definer.  it's just that they're all pointing into the same scope.
02:12  bob2: RandIter: so they're just sticky notes on the same object
02:12  sproingie: so you need a new one if you want to capture it uniquely
02:12  _habnabit: Thorn, oh didn't I answer you
02:12  _habnabit: Thorn, you forgot re.UNICODE
02:13  lightcatcher: KirkMcDonald: where is the "is" keyword documented? I don't know much about it, I only use it with None. and its hard to search for "is" haha
02:13  lvh: lightcatcher: FWIW, it checks for identity
02:13  RandIter: bob2: my fear is that if i later do x=123, y will still be equal to x, and i don't want this to happen
02:13  Thorn: _habnabit: thanks much
02:13  bob2: RandIter: ?
02:13  lvh: lightcatcher: a == b checks if a and b are equal. a is b checks if and b are literally the same object
02:14  bob2: RandIter: no, it'll be unchanged
02:14  lightcatcher: thanks lvh. And None, True, and False are singletons, right?
02:14  RandIter: bob2: okay i get it now. thanks.
02:14  KirkMcDonald: lightcatcher: http://docs.python.org/reference/expressions.html#notin
02:14  k[l: i apologize for the ongoing recons: please do not ban me -- i am human..
02:14  KirkMcDonald: Huh, that's an odd name for that anchor...
02:15  RandIter: bob2: i assume that doing x=123 later writes to a different memory location
02:15  lightcatcher: definitely kirk
02:15  bob2: RandIter: that's not really how it works
02:15  RandIter: bob2: then just how is y unchanged?
02:15  bob2: RandIter: "x = 123" # hey python, make an integer with thevalue 123, also point the name "x" at it
02:15  bob2: RandIter: "y = x" # hey python, find the object x points at, then point y at it
02:16  bob2: RandIter: "x = 0" # hey python, make the integer 0 and point x at it
02:16  RandIter: ok
02:16  bob2: RandIter: all names are equal and are just labels for objects
02:16  bob2: (lie)
02:16  RandIter: got it
02:17  RandIter: i guess i don't need to know the full truth just yet
02:17  bob2: actually, I think it's 100% true
02:17  sproingie: python has bindings as opposed to variables, so there's no concept of "reference to x"
02:17  bob2: I was thinking of def and class, which fiddle the object to refer to the name too
02:19  sproingie: def and class are fairly thin syntax sugar.  you could replace class entirely with its component statements
02:19  sproingie: def you couldnt because there's otherwise no way to put multiple statements in a function definition
02:19  KirkMcDonald: sproingie: Bah! Who needs multiple statements?
02:20  sproingie: damn straight.  bring on the monads.
02:20 --- Kyso is now known as KyleXY[2]
02:20  bob2: compile module?
02:20  sproingie: using compile is cheating
02:22  lightcatcher: thanks everyone, code is working
02:24  sproingie: beer o clock
02:24 * sproingie &
02:26  sprzybilla:     return [wordDict[wordKey][wordIndex], wordKey]  Any idea why that is invalid syntax?
02:26  bob2: missing ]
02:26  bob2: oh, no
02:26  Peng: It is?
02:27  bob2: missing ) on previous line
02:27  Peng: Oh.
02:27  Peng: sprzybilla: That looks like valid syntax. You'd have to paste the full code and traceback to see what's really wrong.
02:27  Peng: sprzybilla: But bob2 is probably right.
02:27  lightcatcher: invalid syntax messages are the worst
02:27  sprzybilla: bob2: thanks, you were right, but now I have another problem! As is always the case with us noobs
02:27  ironfroggy_: gosh guys, Parrot reached 3.0.0
02:28  ironfroggy_: i guess we should celebrate or something
02:28  ironfroggy_: by yawning
02:28  lightcatcher: by far least useful error messages
02:28  Luyt_: hooray!
02:28  ironfroggy_: whoops wrong channel
02:28  lightcatcher: still slightly relevant here ironfroggy_
02:28  sprzybilla:     wordIndex = random.randint(0, len(wordDict(wordKey)) - 1)     I get an error stating that a dict object is not callable?
02:28  ironfroggy_: lightcatcher: but i should not be mean spirited in an on-topic channel. my bad.
02:28  bob2: sprzybilla: which is true
02:28  bob2: sprzybilla: [wordKey]
02:29  sprzybilla: bob2: doh! You are the man! As usual ;)
02:29  sprzybilla: thanks!
02:31  denysonique__: datetime.datetime.date(datetime.today()) -- is this the shortest way of getting a datetime object for today?
02:31  RandIter: datetime.datetime.now()
02:32  denysonique__: I missed datetime.dateâ€¦
02:32  RandIter: do you want the time
02:32  bob2: your way does something else and does it weirdly
02:33  bob2: d.d.now() is probably what you want
02:36  RandIter: what is a locale correct way to print a datetime object?
02:37  RandIter: never mind i got it
02:46  RandIter: locale.D_T_FMT returns an int, but strftime expects a str for formatting
02:47  Peng: Wait what?
02:47  RandIter: never mind. locale.nl_langinfo(locale.D_T_FMT) does it
02:47  Peng: Oh.
02:49  atoi: is there a way to conditionally return in one line?
02:50  redduck666: atoi: for simple stuff yes. print False or 'test'
02:51  _habnabit: redduck666, what does that have to do with returning anything
02:51  redduck666: _habnabit: well, print can be "return"
02:51  atoi: I don't think it can, actually.
02:51  atoi: I tried that.
02:51  atoi: :D
02:51  redduck666: http://dpaste.com/330964/
02:52  _habnabit: atoi, what does 'conditionally return' mean
02:52  atoi: redduck666, yeah, that doesn't do it. :)
02:52  atoi: I want "if x != y: return"
02:52  atoi: but I guess I can smash that on one line.
02:52  _habnabit: atoi, nah, just put it on two.
02:52  _habnabit: atoi, more readable that way.
02:52  atoi: well, technically I want "if x != y: return something..."
02:53  atoi: _habnabit, I have to copy-pasta it in like 6 places, was hoping to at least only copy one line. :D Sounds silly, I know.
02:53  _habnabit: atoi, if you're copy-pasting code, you're doing something wrong.
02:54  atoi: generally, yes.
02:54  atoi: I can't really do a decorator, since the object in question changes in each function...
02:55  ivazquez|laptop: Why not let the object tell you what you need to return?
02:55  atoi: and moving it to a method doesn't really work.
02:55  atoi: it's not what I need to return it's _if_ I need to return.
02:55  Varriount: I never understood what a decorator DOES
02:55  _habnabit: Varriount, it's pretty simple.
02:55  bob2: http://paste.pocoo.org/ may lead to more productive conversation
02:55  ivazquez|laptop: Takes a function or class and returns something.
02:55  ivazquez|laptop: Might be the same type, but doesn't have to be.
02:55  _habnabit: infobob, redent Varriount @deco; def f(): pass;; "is the same as"; def f(): pass;; f = deco(f)
02:55  infobob: Error: GeneratorExit()
02:56  _habnabit: rrrrrr
02:56  razamatan: is http://bpaste.net/show/13020/ ok to do?  specifically, the dynamic binding of __enter__ and __exit__ on the instances....?
02:56  _habnabit: infobob, codepad Varriount @deco; def f(): pass;; "is the same as"; def f(): pass;; f = deco(f)
02:56  infobob: Varriount, http://codepad.org/xGYSE86k
02:56  redduck666: Varriount: wraps every call of callable giving you oportunity to execute some code in between
02:56  _habnabit: redduck666, nope.
02:56  bob2: razamatan: don't think so
02:56  ivazquez|laptop: It doesn't have to do an wrapping.
02:56  redduck666: well, i guess classes can be decorated too
02:56  ivazquez|laptop: That's just the most common usage.
02:56  _habnabit: redduck666, it has nothing to do with 'every call'
02:56  redduck666: _habnabit: or is there more i'm missing?
02:56  _habnabit: redduck666, decorators are applied exactly once.
02:56  razamatan: bob2: it works, but you say don't think so b/c?
02:56  ivazquez|laptop: *any
02:57  bob2: razamatan: also os.path.splitext
02:57  atoi: bob2, http://paste.pocoo.org/show/323037/
02:57  atoi: there you go. :)
02:58  bob2: razamatan: because it is so much grosness for nothing, since real file and gzip objects are context managers already
02:58  _habnabit: atoi, this is only one function!!!!
02:58  ivazquez|laptop: obj.get_ident()
02:58  atoi: _habnabit, sorry, what?
02:58  bob2: atoi: let me guess django
02:58  razamatan: bob2: i'm using 2.6, so gzip doesn't have the context manager goodness
02:58  atoi: bob2, sure, but makes no diff. ;)
02:58  _habnabit: bob2, of course it is. It has functions as views.
02:59  razamatan: so i was trying to backport it of sorts
02:59  bob2: atoi: it does because it'd not be needed in another framework
02:59  bob2: atoi: e.g. pyramid passes you the context instead of making you look it up all thetime
02:59  atoi: I don't think you understand what "view" means in Django.
03:00  atoi: A Django "view" is a controller, essentially. You put together the context there.
03:00  atoi: Anyhow, it doesn't really matter what system it is, the principle is the same.
03:00  ivazquez|laptop: A view is still just a Python function though.
03:00  atoi: yup.
03:00  tolj: I have a non standard module, Can I just import "/opt/module/mc.py" to import it?
03:01  tolj: whats the right syntax?
03:01  atoi: anyhow, it's fine. I just was looking for a "return x unless y" type statement I could use to elegantly get this in one line so that if I'm repeating myself it's just one statement.
03:01  bob2: tolj: put it somewhere that is in the module search path
03:01  tolj: bob2: how do i check the module search paths?
03:02  bob2: tolj: meh
03:02  razamatan: bob2: so what's the purpose of having types.MethodType if not to bind dynamically?  i mean, new.instancemethod provided just this functionality in the past and the new module docs suggest using types.* now...?
03:02  bob2: razamatan: ok!
03:02  bob2: it's there because sometimes it is sensible to add instance methods to instances
03:02  redduck666: tolj: if you insit on non standard stuff imp.load_module should be able to help
03:03  razamatan: so my usage isn't sensible?  would i be better served by making a dynamic type every time?
03:04  bob2: I didn't say that
03:04  bob2: razamatan: if you really want to do this thing and work with gzip fiel objects on 2.6, I can't htink of a better solution
03:04  razamatan: ok
03:05  razamatan: i wonder why the fix in 2.7 wasn't backported to 2.6
03:05  razamatan: sigh
03:07  yechuah_: whats the shorthand of creating an array [11..30]
03:08  ivazquez|laptop: range()
03:08  ivazquez|laptop: And it's a list, not an array.
03:09  ellimistd: salvete!
03:09  yechuah_: ivazquez|laptop: cheers, yeah realised that as soon as typed
03:09  ellimistd: I'm a bit stuck on a program, and i thought I'd come here to talk about it
03:10  yechuah_: ellimistd: what program is it
03:10  ellimistd: I'm writing a script for a game (minecraft) to generate palaces
03:10  ellimistd: and I have no idea how to handle floorplans
03:10  ellimistd: I thought of a hallway with rooms branching off
03:10  ellimistd: but that wouldn't always work well
03:10  ellimistd: and every one would look the same
03:11  ellimistd: the way I've got the walls working is as alternating bays (windows) and interbays (decorative bits between windows)
03:12  ellimistd: the walls need to be on the interbays, so that I don't have a window looking into a wall
03:12  ellimistd: so i'm thinking I deal with it in terms of square bays
03:12  ellimistd: a bedroom has to be 4, a dining hall 6-8, and so on
03:27  diracdelta: hi! I have a list of lists, [[1,2,3],[4,5,6]], and I want to apply some function to each element of the list (say square it), so the result is [[1,4,9],[16,25,36]], currently, I'm saying map(lambda x: map(lambda xp: xp**2,x),[[1,2,3],[4,5,6]]), is there a better way?
03:27  _habnabit: diracdelta, map+lambda is hella silly, yo
03:27  _habnabit: diracdelta, [[cell ** 2 for cell in row] for row in L]
03:28  diracdelta: _habnabit, thanks, forgot about list comprehensions :)
03:28  _habnabit: diracdelta, any time you're using 'map', 'filter', or, 'reduce', you're doing it wrong.
03:30  diracdelta: _habnabit, true. Thanks for reminding me :)
03:31  diracdelta: reduce should usually be replaced with explicit for loops, right?
03:31  _habnabit: Yes.
03:31  ssbr_: diracdelta: my personal policy, inspired by guido, is that reduce is only acceptable with associative operators
03:31  ssbr_: like you can do reduce on operator.mul, but not operator.div
03:32  ssbr_: (a / b) / c != a / (b / c)
03:32  _habnabit: ssbr_, yaaaay quadratic performance.
03:32  ssbr_: _habnabit: well, if it has quadratic performance then I feel bad for you son
03:33  ssbr_: I got 99 problems and performance ain't one
03:33  Skola: rofl
03:33  ssbr_: (please shoot me)(
03:33  Skola: are you kidding me, I was about to say that
03:33  Skola: except my conscience stepped in
03:33  ssbr_: right, see, I have no conscience
03:33  Skola: clearly
03:33  ssbr_: I inflict really bad references wherever I go
03:33  ssbr_: I deserve to be put down
03:36  coldboot|home: I'm using expat to parse XML, and it takes handler functions for when you start an element, and parse its char_data. I can't seem to get one of the handlers to assign a value to a variable that's in the scope just outside that handler function. How can I get a handler function to assign a value to keep track of state?
03:37  coldboot|home: And how do you guys tend to type one-line code samples in IRC when Python has no start-scope and end-scope characters like Perl?
03:38  redduck666: coldboot|home: codepad.org or just fake it with ';'
03:38  ssbr_: coldboot|home: it's not about scopes, but blocks
03:38  ssbr_: coldboot|home: the only thing we have to simulate is indent/dedent
03:39  ssbr_: which you can do with repeated semicolons. Not valid python, but people get it
03:39  ssbr_: e.g. for x in y: x();; y.append(lambda: None)
03:39  ssbr_: is not supposed to run forever
03:39  ssbr_: but now we've gone off track from the original question
03:40  ssbr_: coldboot|home: I'd just use a method on an object, and keep state inside the object
03:40 * redduck666 notes expat hasn't been updated in 3+ years
03:41  ssbr_: you can't create new variables in outer scopes, just the local scope, nor can you assign new values to variables in outer scopes, just the local scope
03:41  ssbr_: that is, you can't write to outer scopes. You can read, though, and, say, call methods etc.
03:41  ssbr_: so it's possible, if you, e.g., have a dict in the outer scope and just mutate that dict
03:41  ssbr_: but it's cleaner to use an object and attributes, don't you think?
03:46  pythonirc1011: when i run my source code base -- I get -- <type 'exceptions.TypeError'> exceptions must be old-style classes or derived from BaseException, not str<traceback object at 0x05C8AF58> -- how do i debug this error? Where is the actual error? Any hints?
03:46  ayust: lol Luyt_ - one of the sysadmins at my work had something to contribute: http://ismysqlwebscale.com/
03:47  coldboot|home: This doesn't seem to be assigning a value to "current" properly: http://codepad.org/ywH5orqq
03:47  _habnabit: pythonirc1011, are you catching all exceptions and printing sys.exc_info
03:48  coldboot|home: ssbr_: I'll use an object, I guess.
03:48  _habnabit: coldboot|home, ew
03:48  coldboot|home: ssbr_: The documentation says you can use the "global" keyword, but it doesn't work.
03:48  coldboot|home: _habnabit: heh
03:48  coldboot|home: _habnabit: Not so nasty coming from Perl. ;)
03:48  ssbr_: coldboot|home: that's for creating globals
03:49  _habnabit: coldboot|home, what, you never used moose?
03:49  coldboot|home: _habnabit: I do, but I still use global variables for convenience sometimes.
03:49  pythonirc1011: _habnabit: with modules, probably I'm running 100k + lines of python code -- how do i tell if there is an except catching all exceptions somewhere?
03:49  _habnabit: coldboot|home, in my experience, it's completely the opposite of convenient.
03:50  ssbr_: hm
03:50  ssbr_: what's convenient about global variables?
03:50  ssbr_: I mean other than avoiding a bit of object boilerplate
03:50  ssbr_: pythonirc1011: grep for "except", check if anything is overbroad
03:50  pythonirc1011: _habnabit: I tried python -m pdb myscript.py -- its been 5 minutes...and nothing has happened yet...(its a core i7 machine)
03:50  ssbr_: if there are too many of those (quite likely), maybe grep for a few likely catch-everythings
03:50  lvh: it's trading convenience *now* for inconvenience *later*
03:50  ssbr_: such as except:
03:51  lvh: _habnabit: monkeys are incapable of deferred gratification
03:51  pythonirc1011: ssbr_: Tons of "except:"!
03:52  ssbr_: pythonirc1011: oh.
03:52  lvh: I'm pretty sure except: should be a syntax error
03:52  ssbr_: pythonirc1011: you're kinda screwed. They may very well all be terribly wrong.
03:52  ssbr_: grey with -a 20 for except:, see what they do.
03:52  ssbr_: (-a20?)
03:52  pythonirc1011: how come there are not tools to track exceptions at runtime?
03:52  ssbr_: pythonirc1011: there are. except: disables all of them. :>
03:53  ssbr_: unless you mean something else, which you probably do. Might be interesting to write a debug hook that graphs out exceptions and where they're raised / caught etc.
03:54  lvh: pythonirc1011: Except works at runtime
03:54  pythonirc1011: ssbr_: or just track the exceptions and print them out as the code runs
03:54  coldboot|home: ssbr_: So in this example, would you just make a class above those two functions in the outer scope, and make some class variables. Then do `MyClass.current = foo` in the functions?
03:54  ssbr_: coldboot|home: what does that change?
03:54  ssbr_: coldboot|home: no, I'd encapsulate changing state within an instance
03:54  pythonirc1011: i thought python -m pdb would do that? wont it? Of course in my case, its not done anything for the past 10 minutes...
03:55  ssbr_: pythonirc1011: doesn't that run the debugger?
03:55 * ssbr_ has never used the debugger like that
03:56  pythonirc1011: ssbr_: I thought so too...just hangs for my case thou
03:56  pythonirc1011: perhaps it cant handle large code bases?
03:56  ssbr_: doubtful.
03:56  _habnabit: ... 'handle' ?
03:56  coldboot|home: ssbr_: Where do you instantiate the instance?
03:56  _habnabit: pythonirc1011, guessing doesn't really help anything.
03:57  ssbr_: coldboot|home: right before I register the callbacks and parse the XML stream
03:57  pythonirc1011: _habnabit: I guess I'm stuck...
03:57  _habnabit: pythonirc1011, well, the exception means you tried to raise a string exception.
03:58  _habnabit: pythonirc1011, how much of the code you're running is yours?
03:58  coldboot|home: ssbr_: http://codepad.org/4zqjmn57 The instance `s` doesn't seem to persist in def char_data...
03:58  pythonirc1011: _habnabit: grepping for string raises...
03:58  ssbr_: coldboot|home: um, I meant to make them methods and alter self
03:59  ssbr_: coldboot|home: also, what do you mean
--- Log closed Wed Jan 19 04:02:50 2011
--- Log opened Wed Jan 19 04:03:11 2011
04:03 --- Users 705 nicks [0 ops, 0 halfops, 0 voices, 705 normal]
04:04  coldboot|home: ssbr_: Oh nevermind, I'm retarded...
04:04 --- Channel #python was synced in 93 seconds
04:07  coldboot|home: ssbr_: So what I thought was weird scope rules was just expat running the char_data function multiple times for encryption_key, even though the XML tag appears only once. Oh, expat.
04:07  ssbr_: I like lxml
04:07  pythonirc1011: _habnabit: Fortunately, found the problem!
04:07  pythonirc1011: Thanks
04:07  nosklo: coldboot|home: why use expat
04:07  ssbr_: dunno if it has a mode that reads stuff in like expat
04:07  pythonirc1011: ssbr_: Thanks. The grep did work :)
04:07  coldboot|home: ssbr_: I just want the value of one tag, can it do that?
04:07  ssbr_: coldboot|home: right, I don't know.
04:07  ssbr_: If the document is small, well, who cares, right?
04:08  ssbr_: dunno for large documents
04:08  coldboot|home: nosklo: First XML module I found, and I know it from using it in C years ago, it sucked then, too.
04:12  speps: hi guys i've got a path like /some/thing/usr/lib/some, how can i (possibly one liner) strip off the part before /usr? ex /some/thing/usr/lib/some -> /usr/lib/some  Thanks
04:15 --- Varriount is now known as Varraway
04:16  tos9: speps: uh, s[s.index("/usr"):] would probably be the quickest
04:17  speps: tos9: yep, this seems like short enough thanks
04:21 --- squishy is now known as SquishyNotHere
04:24  pythonirc1011: Another problem: I've a package structure that calculates file paths using resource_filename() -- so far so good, till the package is compiled into single executables...now all paths are messed up. Anyone knows of a good solution to this problem?
04:28 --- SquishyNotHere is now known as squishy
04:37  offbyone: I'm trying to figure out how to implement a decorator that makes use of the self object.
04:37  offbyone: https://gist.github.com/785644
04:37  offbyone: This is sort of pseudocode for what I want to do.
04:37  bob2: not gonna happen
04:38  offbyone: I know
04:38  bob2: define the decorator outside the class
04:38  ojacobson: offbyone: there's no "self" at the point where the function definition that is eventually turned into a method is parsed
04:38  offbyone: I'm trying to figure out how to accomplish the same aim
04:38  offbyone: so that I can use subclass-specific implementations of _report_* in the example
04:38  ojacobson: however, since 'self' is nothing more than a positional argument, you don't need any magic that relies on other methods of self
04:38  bob2: ojacobson: call it in the decorator
04:39  ojacobson: Wrong tab complete :)
04:39  bob2: sorry!
04:39  ojacobson: hint: def deco(self, *a, **kw): try: return f(self, *a, **kw)
04:39  offbyone: Hm.
04:42  offbyone: Something like this then? https://gist.github.com/785652
04:42  pythonirc1011: Any recommendations on maintaining paths for large projects that have to be shipped/installed? I was using resource_filename() but that seems not to be a good idea..
04:42  ojacobson: offbyone: you're going to be sad if you don't put a 'return' in there.
04:43  bob2: pythonirc1011: I guess that's fine but that your real question is about py2exe
04:43  offbyone: ojacobson: I know, that's gonna be there too; that's just the outline.
04:43  offbyone: but thanks :)
04:43  bob2: pythonirc1011: http://stackoverflow.com/questions/1939883/py2exe-embed-static-files-in-exe-file-itself-and-access-them
04:43  pythonirc1011: bob2: I think the problem is more generic. I used pyinstaller...anytime a package collapses to a single executable...the paths will get messed up? isnt it?
04:43  bob2: pythonirc1011: hah generic
04:44  pythonirc1011: so pkg_resources is supposed to work?
04:45  pythonirc1011: I was using --> from pkg_resources import resource_filename -->that article claims resource_string() works! hmmm...i'm suspicious.
04:46  bob2: read all of it
04:47  SeanInSeattle: Hey all.  I'm wondering how to create a timer thread that repeats/restarts on exit?
04:48  bob2: by doing that, I don't believe the threading module has any support for making that easier
04:48  bob2: (but maybe you want to step back and explain what your original problem is)
04:49  _habnabit: Timer events with threads are pretty much the worst way to do timer events.
04:50  SeanInSeattle: Basically what I want is to be able to execute a single function or a code block, and then upon completion that it would repeat after some interval (e.g. 10min).  I can achieve this behavior simply on the Windows/C#/.NET side pretty easily with a timer on a windows service, but now I'm in python on Debian.
04:51 * ojacobson introduces SeanInSeattle to cron(1)
04:51  offbyone: ojacobson: sorry to pester you... but how do I pass parameters in to the decorator, as in the example I suggested just now?
04:51  offbyone: As in, how do I pass the message parameter?
04:52 --- Varraway is now known as Varriount
04:52  SeanInSeattle: ojacobson:  cron != [behavior that I want].  1)  I don't want to mess with having to add a cron job.  2)  I want to have the functionality start up again 10min after it last finished.  So, if the last time it took 30min to complete, then it still waits another ten min to startup.
04:52  ojacobson: Ah, at(1), then.
04:53  offbyone: SeanInSeattle: Depending on what the specific nature of the task is, you might see some benefit from using a task server like celery and its deadline support for tasks
04:56  _habnabit: SeanInSeattle, you want a message queue
04:57  pythonirc1011: found my problem: http://www.pyinstaller.org/wiki/FAQ -- wasnt my mistake
04:57  SeanInSeattle: _habnabit:  Would you be able to help me understand why the message queue might be a good solution to the problem I've outlined?
04:58  _habnabit: SeanInSeattle, basically you're trying to reimplement something that already exists
04:58  _habnabit: SeanInSeattle, except doing it with threads is entirely pointless
04:59  SeanInSeattle: _habnabit:  That is like saying "you're doing things wrong" without telling the person how to do things right.
04:59  _habnabit: 19:56:02 < _habnabit> SeanInSeattle, you want a message queue
05:00  _habnabit: http://celeryproject.org/
05:00  bob2: beanstalk is another python message queue thing
05:01  SeanInSeattle: Would it be too much for me to ask what a message queue is?
05:01  _habnabit: It's a queue
05:01  _habnabit: And it contains messages
05:02  _habnabit: He's going to use threads. :T
05:12  smw: I am writing a tutorial. What should I call what is returned by urlopen? I want to call it a "file like object".
05:12  ssbr_: smw: that'd be accurate.
05:12  _habnabit: Sounds fine.
05:12  smw: cool
05:12  ssbr_: (i.e., yes, that's what they're called)
05:12  ssbr_: also I'd honestly just take an existing tutorial and modify it :(
05:12 --- Varriount is now known as Varraway
05:12  smw: hm...
05:13  smw: ssbr_, got an idea on what to take? I started a blog and I am going to try and write a bunch of posts on using python for web scraping
05:13  _habnabit: smw, scrapy
05:14  smw: _habnabit, by "take" I mean what tutorial to take on urllib(2)
05:14  smw: _habnabit, I use scrapy, but it is not for everything, I am first going over stuff without scrapy
05:14  _habnabit: smw, if you're doing scraping, you want scrapy
05:15  smw: _habnabit, I use scrapy for big scraping jobs. However, sometimes the scraping is not the main part of the program and using a dedicated framework does not make sense.
05:15  _habnabit: smw, you can use scrapy as part of a program
05:15  smw: _habnabit, I am first going over urllib2 + lxml, then I will make tutorials on scrapy
05:15  _habnabit: smw, it's a twisted library
05:15  _habnabit: smw, it supports that
05:15  smw: _habnabit, I know that
05:15  bob2: smw: I wrote a thing like mechanize using urllib2 and lxml
05:16  smw: bob2, interesting
05:16  bob2: if you want to steal codez
05:16  smw: bob2, ISC or GPL? (or something else)
05:17  smw: bob2, if it ain't my definition of free (ISC) I won't take it :-P
05:17  bob2: mit or whatever lxml is
05:17  smw: sweet
05:17  _habnabit: smw, there's another definition of free?
05:17 * bob2 will not be copylefttrolled today
05:17  smw: _habnabit, I keep being told there is.
05:18  RedEyess: hi
05:18  smw: _habnabit, I personally use scrapy for my scraping programs. However, there are times when it just doesn't make sense to use it. Especially since many people don't know twisted.
05:18  ssbr_: I have a challenge for all of #python
05:18  RedEyess: how do I complete a comparison of a python object ( eg. if type( object ) == "MyClass" )
05:19  _habnabit: RedEyess, eh, don't do that.
05:19  ssbr_: RedEyess: eeeee that's generally a bad idea, why do you want to do it? :<
05:19  smw: RedEyess, why do you want to do that?
05:19  _habnabit: RedEyess, why do you care what type it is?
05:19  ssbr_: _habnabit: you! will you take on my challenge?
05:19  _habnabit: ssbr_, what
05:19  _habnabit: smw, that should be fixed
05:19  ssbr_: _habnabit: the challenge is to clean your room! right now!
05:19  _habnabit: ssbr_, I'm in a hotel
05:19  ssbr_: _habnabit: oh
05:19  RedEyess: because I want to know the type of class prior to executing a particular method
05:19  ssbr_: that does sort of make that difficult
05:19  _habnabit: RedEyess, why do you care
05:20  bob2: RedEyess: nah, don't bother
05:20  RedEyess: well, how do I do it anyways
05:20  smw: _habnabit, I am still trying to learn it. I understand how it works, but I am still learning the libraries.
05:20  bob2: RedEyess: http://paste.pocoo.org/ your code
05:20  offbyone: How can I prevent pdb from stepping into site-package python modules?
05:20  bob2: n instead s I guess
05:20  offbyone: I want it to skip all frames that are in site-package code, and only step through code that's in my project
05:21  offbyone: bob2: the problem is @contextmanagers
05:21  offbyone: stepping into that decorator is a pain in the ass
05:21  offbyone: it's really easy to lose one's place, plus it adds about 8 's' steps to each method call :/
05:22  _habnabit: RedEyess, here's the issue with checking types
05:22  _habnabit: RedEyess, there's an infinite number of types that act exactly like the one you need
05:22  _habnabit: RedEyess, but you can't check for them all
05:23  _habnabit: RedEyess, and there's no reason you should arbitrarily restrict your code when you don't have to
05:23  smw: _habnabit, ssbr_, here is a time when scrapy could not help but lxml was incredibly useful. http://stephenmw.wordpress.com/2011/01/18/abiword_recovery/
05:23  RedEyess: well... I am iterating over a list with objects of different types
05:23  RedEyess: i only want to execute a method that exists with a particular type
05:23  _habnabit: RedEyess, where did you get the list.
05:24  ssbr_: smw: what are we talking about?
05:24  RedEyess: from a library
05:24  ssbr_: RedEyess: You know, some programming languages make that illegal
05:24  ssbr_: ooh, what library?
05:24  RedEyess: it was generated while walking over an HTML document
05:24  _habnabit: BeautifulSoup? :(
05:24  RedEyess: maybe ...
05:24  ssbr_: lxml.html > beautifulsoup
05:24  RedEyess: opinions about BeautifulSoup?
05:24  _habnabit: It's pretty terrible.
05:25  smw: ssbr_, why I want to do a tutorial on lxml.
05:25  ssbr_: RedEyess: this particular part of the API sucks
05:25  ssbr_: smw: oh, an lxml tutorial
05:25  ssbr_: so what's wrong with the original?
05:25  RedEyess: any suggestions on parsing HTML?
05:25  _habnabit: RedEyess, lxml.html
05:25  _habnabit: RedEyess, BS used to be okay, but then lxml.html overtook it hard.
05:25  smw: ssbr_, ssbr_ I want to do one that focuses on web scraping :-).
05:25  RedEyess: ok
05:26  RedEyess: will look into it
05:26  smw: ssbr_, and a urllib2 tutorial that focuses on many of the details I found useful in scraping like changing useragent, gzip, etc
05:27  smw: ssbr_, on one on using chromium to reverse engineer websites...
05:30  TheX1le: so im being stupid...
05:31  TheX1le: wait nm i think the anwser just poped in my head... feel free to ignore
05:32  offbyone: How can I apply decorators to @contextmanager-decorated functions?
05:33  ivazquez|laptop: The normal way isn't working?
05:33  offbyone: https://gist.github.com/785692
05:33  offbyone: No
05:34  offbyone: because (I think!) when @contextmanager decorates @my_decorator, it expects a yield statement inside
05:34  ivazquez|laptop: Why are you using @contextmanager when you're handling the exception yourself?
05:34  neataroni: how do i append to a numpy array?
05:34  offbyone: and when the two are reversed, my decorator ends up decorating the returned generator object, not its next() method.
05:34  offbyone: ivazquez|laptop: there's more stuff below that...
05:34  ivazquez|laptop: Better to just implement the whole interface yourself.
05:35  _habnabit: neataroni, you have to reshape it.
05:35  offbyone: Basically, i use 'with self.make_workspace()' to scope the existence of the workspace temp dir; when that generator ends, the workspace is cleaned up.
05:35  smw: neataroni, I suggest reading a tutorial.
05:35  neataroni: _habnabit: so is it common to make something as a list and then cast it as a numpy array?
05:35  _habnabit: neataroni, python doesn't have casting
05:35  _habnabit: neataroni, but sure you could convert a list to an array I guess????
05:36  neataroni: _habnabit:  yea thats what i mean
05:36  _habnabit: neataroni, casting and conversion are completely opposite things
05:37  neataroni: _habnabit: ok, i guess i shouldnt use that term loosely
05:38  neataroni: if i want to imap with multiplication as my function, how do i write that?
05:39  offbyone: ivazquez|laptop: the trick is, I intend to apply the with_report_status decorator to methods that are _not_ contextmanagers, as well as some that are.
05:39  offbyone: at least, I want to.
05:39  smw: neataroni, product(myIterable)
05:40  neataroni: smw: nice, easier than i thought
05:43  neataroni: smw: i actually dont want the cartesian product, just list_a[0] * list_b[0], list_a[1]* list_b[1] etc...isnt there something in numpy actually?
05:44  Skola: can anyone point me to good python basics video tutorials? (wanna learn about classes methods decorators lists etc)
05:44  smw: neataroni, yeah lista * listb I think
05:44  ivazquez|laptop: ShowMeDo
05:44  neataroni: smw: that looks to be a winner
05:44  smw: neataroni, I read a tutorial on numphy, I am not an expert in it.
05:50  anomaly: showmedo.. 608 python vids.. 7 perl vids.. heh
05:53  tomas_: anomaly: 608 python vids where?
05:53  anomaly: tomas_ ...? showmedo.com as I said.
05:54 * ssbr_ thought showmedo was a nick
05:56  tomas_: yeah anomaly if you wanna say showmedo.com then say showmedo.com not showmedo.. as .. is not .com it's ..
05:56  tomas_: (:
05:56  anomaly: tomas_ I was following the conversation.  Skola asked for videos.. ivazquez recommended showmedo, implying a website to my mind.
05:57  anomaly: perhaps we are just wired differently, no worries.
05:57  Skola: showmedo looks promising, thanks for the tip
05:59  pratz: hey guys how can i find the module maintaner person name of python modules ??
05:59  anomaly: ivazquez, thanks from me too.  never heard of it until you mentioned it.  I may have a new time vacuum.
06:00  bob2: pratz: what module
06:01  pratz: bob2: any module, ex- python logging module
06:02  Kaedenn: pratz: __author__ if it's defined
06:02  Kaedenn: otherwise you'd have to examine commit data or crap like that
06:02  bob2: svn blame, relevant peps
06:02  pratz: Kaedenn: bob2: k, thanks
06:05  dropdrive: Any recommended ways for implementing a "namedtuple" *except* that it's mutable and has default values?
06:05  gusg: open('path','w')  is not creating the file 'path' if it doesn't exist. How can I create a file?
06:06  ssbr_: gusg: it isn't? that's not good
06:06  ssbr_: what happens?
06:06  ssbr_: well, are you closing it?
06:06  ssbr_: (might be relevant, might not, don't know enough about common OSes/FSes to tell)
06:07  gusg: ssbr_: hmm. so I thought that was the behavior too. the path is like '~/myfile.txt' . Maybe I need to use the os.path library to handle the tilde
06:08  ssbr_: it's possible you'd want to do expanduser first, sure
06:08  gusg: hopefully os.path.abspath() will resolve it all.
06:09  ssbr_: don't think abspath expands user directories. Might be wrong.
06:09  gusg: How can I do "from os import path" but still have path under the "os" namespace (so that I can refer to it as os.path)
06:09  ssbr_: gusg: huh?
06:09  ssbr_: just import os
06:09  Dude-X: as of now, are there any web frameworks (popular or not) that support python 3?
06:10  bob2: dropdrive: I think tat's called an 'instance' ;)
06:10  ssbr_: Dude-X: I think cherrypy does
06:10  bob2: gusg: import os.path
06:10  gusg: ssbr_: yeah, I can import it all. But I see a lot of python code that doesn't import all of a module
06:10  bob2: you're imagining things
06:10  bob2: if you do 'from foo import bar' you refer to it as bar, not foo.bar
06:11  ivazquez|laptop: But it still imports all of foo.
06:11  gusg: bob2: thanks. I did not mean to imply that I saw code that used the "from foo import bar" and still had bar under the foo space.
06:11  ivazquez|laptop: It just skips the reference.
06:11  gusg: ivazquez|laptop: I did not know that
06:12  Dude-X: ssbr_, it seems it does support python 3. that's sweet
06:12  ivazquez|laptop: Importing a module runs it the first time, even if not all of it is pulled into the current namespace.
06:12  ssbr_: Dude-X: too bad cherrypy isn't that good :/
06:12  gusg: so what's the benefit in  doing "import os.path" vs "import os"
06:13  bob2: they do different things
06:13  ssbr_: gusg: it lets you pretend in your head that os is a real package
06:13  Dude-X: ssbr_, in your opinion; what do you like?
06:13  ssbr_: but it isn't
06:13  bob2: in this case the effect is the same because os.path is imported magic
06:13  ssbr_: Dude-X: I like django and pyramid. I wish Django took a more pyramid-like approach, and Pyramid took a more Django-like approach.
06:14  ivazquez|laptop: Accessing os.path after only importing os works because os imports the appropriate module as path.
06:14  ivazquez|laptop: But to be strictly correct you should always import os.path.
06:15  gusg: well I'll keep the illusions to a minimum and just do "import os". Thanks
06:15  ssbr_: I don't believe in that particular idea of strict correctness
06:18  derferman: where is the best place to learn how to package applications with distribute?
06:18  bob2: the distribute docs I guess
06:19  bob2: http://jcalderone.livejournal.com/39794.html also
06:24  ssbr_: distutils packages packages pretty well...
06:24  ssbr_: ridiculously well actually
06:24  derferman: better than distribute?
06:24  derferman: i'm just not sure which one to use
06:25  bob2: only important difference is distutils has no concept of dependencies
06:29  tomas_: can anyone tell me how can I preserve certain html tags from my html string? at the moment I'm removing all using: stripped = ''.join(BeautifulSoup(html).findAll(text=True)) but I think I could use <p> and <li> tags
06:30  bob2: probably with difficulty, especially with bs
06:30  bob2: what are you trying to do?
06:30  tomas_: bob2: I think I found my answer http://stackoverflow.com/questions/4423953/using-beautiful-soup-to-strip-html-tags-from-a-string
06:30  tomas_: I'm using BeautifulSoup
06:36  Grouchotron: Hello everyone, I was hoping to get some help using xmpppy, anyone experts here who's brains I can pick?
06:36  bob2: best to just ask
06:38  Thorn: I wonder if this is ever going to be fixed http://bugs.python.org/issue5876
06:38  Thorn: still exists in 2.7.1
06:41  _habnabit: Thorn, notabug
06:41  Grouchotron: Haha, ok. Well I guess the best question to ask, is if anyone knows of any references for using xmppp in creating a Facebook chat application. I've found a handful of tutorials to use it with gchat, and been largely successful, However none of the guides work with facebook, and I'm not really sure what the difference between how they work, or where to find out.
06:42  _habnabit: Thorn, I'm surprised it's not closed as invalid
06:44  bob2: so __repr__ in 2.x should return bytesa nd in 3.x unicode?
06:44  _habnabit: bob2, __repr__ should return an instance of `str`
06:44  bob2: touche
06:47  Thorn: I just run into it in a pylons app, I was getting the famous Unicode??codeError when accessing a certain class instance in the session
06:47  _habnabit: Thorn, it's only 'famous' to people who don't understand how unicode works
06:47  Thorn: that class had def __repr__(self): return self.text and text was unicode
06:47  _habnabit: Thorn, unicode is rather simple, and python has a rather simple implementation
06:47  _habnabit: Thorn, also that's a pretty bad __repr__
06:48  sproingie: you do know there's a __unicode__ method
06:48  Thorn: and Beaker calls that __repr__ for some reason even though it does not seem to use it
06:48  Thorn: the class in question has __unicode__
06:49  Thorn: which didn't help
06:49  sproingie: i suppose the bug is in under-specifying what __repr__ is required to return
06:49  _habnabit: Thorn, so basically you're complaining that you wrote meaningless nonsense code and python called you on it
06:49  Thorn: can you show me the chapter & verse on that?
06:49  _habnabit: On what
06:50  sproingie: Thorn: what is the behavior in 3.x?
06:50  Thorn: on my code being meaningless
06:50  _habnabit: Thorn, __repr__ returns a str. You return a unicode.
06:50  sproingie: i think it's reasonable that if __str__ is expected to return a bytestring that __repr__ should too
06:50  _habnabit: Thorn, because python 2.x allows implicit conversion between the two, it tries to put up with it
06:50  _habnabit: Thorn, but that doesn't make it a good idea
06:50  sproingie: i also think that 3.x should absolutely make __str__ and __repr__ return unicode
06:51  _habnabit: sproingie, in 3.x __str__ and __repr__ both return str
06:51  sproingie: _habnabit: which is unicode, right?
06:52  _habnabit: sproingie, right
06:52  sproingie: _habnabit: sounds like the resolution is "fixed in 3.0"
06:52  _habnabit: sproingie, I guess
06:52  sproingie: __str__ is well-documented to return a str.  __repr__ is expected to follow
06:53  bob2: is 3.x as fascist with implicit conversion as dash's codec is?
06:53  sproingie: which i suppose sucks if you want unicode in your repr.  oh well.
06:53  _habnabit: bob2, 3.x doesn't /have/ implicit conversion
06:53  Kaedenn: YAY
06:53  bob2: hot
06:53  Kaedenn: so to go from 3 to 3.0 I have to be explicit?
06:53  Kaedenn: ...bad example.
06:53  Kaedenn: because there isn't a good one
06:54  Thorn: the problem is, many people assume that a str is all you always need. I happen to write software for non-English speaking users though
06:54  sproingie: there is actually a real problem there in that __repr__ can't be relied on to eval back to the original value
06:54  _habnabit: Thorn, okay, and
06:54  sproingie: i don't think there's a good solution tho.  "fixed in 3.0"
06:54  Thorn: even if I do it right some library may not
06:54  _habnabit: Thorn, yes, libraries can be badly written
06:54  _habnabit: Thorn, what is your point
06:55  Thorn: and python itself doesn't help it by having two string types, one default, the other spoorting unicode
06:55  Thorn: *supporting
06:55  sproingie: Thorn: this is a well-known problem, that's why 3.0 fixed it
06:55  _habnabit: Thorn, how else can it work
06:55  _habnabit: Thorn, bytes and text are /different things/
06:55  sproingie: Thorn: 3.0's string type is unicode, and if you want raw bytes you have to ask for them.  we're still in the transition period
06:56 --- just6979_ is now known as just6979
06:56  Thorn: I don't think 3.0 can fix a problem in 2.x because it's effectively a different language. most large frameworks andl libraries can't be expected to support python 3 any time soon
06:57  _habnabit: Thorn, 3.x fixes these problems /because/ it's a different language
06:57  sproingie: arguably if 2.4's behavior was benign, it should probably be reinstated
06:57  Thorn: sproingie: I fully agree on that.
06:57  just6979: especially now that 2.7 has been declared pretty much the last 2. IIRC. not much back-porting, just bug fixes
06:58  _habnabit: Thorn, why do you care about this, anyway
06:58  _habnabit: Thorn, I really don't get it
06:58  sproingie: still, it went through 2.5 and 2.6 and didn't break things, i don't think 2.7.x is going to deliberately change it
06:58  lobak: hello
06:58  Thorn: _habnabit: care about what?
06:58  _habnabit: Thorn, returning unicode from __repr__ in 2.x
06:59  sproingie: basically, someone might have relied on undocumented behavior of __repr__, and it broke in 2.5.  that sucks, but that's life
06:59  prsteele: packaging question: if I have a package foo with unit tests in foo/tests, what's the best way to for tests to import foo? Have foo on my path?
06:59  lobak: is it possible to use os.system() to execute external program, and at the same time, allow me to send data and receive output from the external program?
06:59  Thorn: okay if I find a real problem caused by this in some library I'll raise the issue with library authors. thanks for the discussion
06:59  _habnabit: lobak, no; os.system sucks
07:00  _habnabit: lobak, use the subprocess module instead
07:00  sproingie: i tend to think that since unicode stringifies so easily, that __repr__ *should* be allowed to return unicode
07:00  _habnabit: lobak, never use os.system
07:00  sproingie: however, i'm not up for changing it in a 2.7.x patchlevel
07:00  _habnabit: prsteele, well, same as how any code in foo imports other code in foo
07:00  bob2: lobak: subprocess module
07:00  _habnabit: prsteele, it's all exactly the same
07:00  bob2: prsteele: http://jcalderone.livejournal.com/39794.html
07:01  bob2: prsteele: so when someone untars your thing, their test runner will put . in the module search path, so 'import foo' will work
07:01  bob2: prsteele: if it's installed, then it'll already be on the path
07:01  lobak: _habnabit, bob2: ok, will try it now
07:01  _habnabit: prsteele, you are doing `from foo import m1` in foo/m2.py to import foo/m1.py, right?
07:01  prsteele: _habnabit: yes
07:02  bob2: lobak: the bottom of the html docs for subprocess have a big pile of examples, it might have the exact thing you're looking for
07:02  prsteele: bob2: thanks
07:02  just6979: lobak: what about having the external system open a pipe (unix or tcp) and send/receive data that way?
07:02  _habnabit: just6979, ha ha ha no
07:02  sproingie: subprocess.call(shell=True) is basically exactly the same as os.system
07:02  _habnabit: just6979, os.system is terrible
07:02  sproingie: now to make it not suck, remove shell=True
07:03  sproingie: if you're not piping or redirecting, you can do subprocess.call(cmdline.split())
07:03  _habnabit: prsteele, yeah, so do the same thing in your tests
07:03  prsteele: _habnabit: so foo still needs to be on the path, i.e. I'm not using relative imports?
07:04  sproingie: piping, redirecting, using logical operations, shell builtins, or environment settings.  anything else that's shell-magical?
07:04  prsteele: _habnabit: more directly, I know relative imports are supported, but are they bad practice?
07:04  _habnabit: prsteele, /implicit/ relative imports have been bad practice forever
07:04  _habnabit: prsteele, and explicit relative imports are just silly.
07:04  sproingie: aren't implicit relative imports the default behavior?
07:05  _habnabit: sproingie, yes :(
07:05  sproingie: python wart #12341234
07:05  bob2: sproingie: shlex.split
07:05  sproingie: i'm thinking of writing a python guide called "Python Sucks (but you'll love it anyway)"
07:05  prsteele: _habnabit: thanks
07:05  bob2: do it
07:05  _habnabit: sproingie, __future__ said it would be removed in 2.7, but then it wasn't.
07:05  _habnabit: sproingie, it made me so sad
07:06  sproingie: that import behavior would be a definite suckitude
07:06  sproingie: i'm thinking #1 would be the indent thing.  i'd cover the cases where it screws copy/paste examples and embedding.  but what sucks the most is how totally uninteresting indent syntax is after you've used it for a few weeks
07:07  _habnabit: hahaha
07:07  sproingie: #2 might be the deployment situation of 3.0
07:07  _habnabit: sproingie, you have to mention that python only uses 8-space tabstops and everything else is wrong
07:08  sproingie: _habnabit: that it has a hardwired idea of how wide tabs are is definitely sucky
07:08  Kaedenn: this is why you never have literal tabs in source code
07:08  sproingie: especially since i use 4-space tabs
07:08  Kaedenn: sproingie: you're wrong
07:08  Kaedenn: the standard is 8
07:08  Kaedenn: this is why you don't use tabs
07:08  Kaedenn: you use spaces
07:08  Thorn: why isn't there tabsize: n just like coding: foo?
07:09  sproingie: MY standard is however wide it is when i hit ctrl-alt-, or ctrl-alt-.
07:09  sproingie: unfortunately python's standard is 8
07:09  jcp: Is there a way to mess with the documentation pydoc shows for a particular class? I want to have a bunch of properties accessible via __getattr__ and __setattr__, but I want them to be documented in "data and other descriptors" or some similar section when using the help function on the class. The problem with using properties is that the properties are different for every instance of the class.
07:09  cgc17: excuse my ignorance as I'm pretty new to programming as a whole, but why is tabsize important?
07:09  sproingie: Thorn: i suspect it's because python coding standards want hard tabs to die
07:10  sproingie: Thorn: as it is mixing them tends to error out anyway
07:10  jcp: (Right now I'm essentially overriding __new__ to create a new subclass for every instance, which is quite wasteful and convoluted, so I'd like to find a better solution.)
07:10  prsteele: cgc17: opening other people's code in your editor can make it look different...
07:10  sproingie: i grew up with python 1.5 which made no attempt to reject such mixing.  i had a hatred of the indent syntax that lasted for years.  but it was also because i was using infoseek.
07:10  prsteele: cgc17: at least to me its a consistency thing
07:11  sproingie: anyone who remembers infoseek and programmed for it will know exactly what i'm talking about
07:11  cgc17: prsteele: gotcha, thanks for clearing that up for me
07:11  Thorn: every time I use a new editor it manages to break my python code in a bad (curse, hg update -C, repeat) way
07:11  Definity: is it possible to allocate memory in python?
07:12  jcp: Definity: What do you mean by allocating memory?
07:12  seen_: sproingie: Use 4 spaces per indentation level. http://www.python.org/dev/peps/pep-0008/
07:12  bob2: sproingie: they had a product?
07:12  KirkMcDonald: Thorn: That tends to be an editor specific thing.
07:12  sproingie: bob2: they were one of the leading search engines of the time
07:12  Definity: as in storing varibles in a peice of memory regardless of them being a string or tuple or list
07:13  Thorn: KirkMcDonald: which doesn't happen with code in any other language...
07:13  bob2: sproingie: I know that, just wondering in what sense you 'programmed for it'
07:13  sproingie: bob2: second only to inktomi
07:13  jcp: Definity: That's what normal variables do...
07:13  sproingie: bob2: infoseek pages used embedded python
07:13  bob2: sproingie: you worked there?  they had a web api?
07:13  _habnabit: Definity, what does that mean
07:13  sproingie: bob2: i worked for sun, we used infoseek for internal docs
07:13  bob2: Definity: maybe step back and explain what you want to do?
07:13  jcp: Definity: Python allocates memory for such an object whenever you create it.
07:13  bob2: sproingie: ah
07:13  Definity: don't matter
07:13  KirkMcDonald: Thorn: I'm not sure what you mean. Keeping whitespace consistent is hardly unique to Python.
07:14  sproingie: KirkMcDonald: yes, though it's not quite as critical in other languages
07:14  sproingie: haskell also has whitespace rules, but it's about lining things up more than indent levels
07:14  kerio: from __future__ import braces
07:14  kerio: duh
07:14  prsteele: haha
07:14  sproingie: miranda had a whitespace rule and i do believe it's older than python
07:15  sproingie: ISWIM proposed the whitespace rule and it's from the 60's
07:15  KirkMcDonald: Regardless of its importance to the language, there's nothing about Python which makes it more difficult to configure your editor correctly.
07:16  Thorn: kerio: I got IndentationError :(
07:16  kerio: Thorn: boo hoo
07:16  kerio: grow a spine
07:16  Thorn: ;_;
07:16  Definity: ahah
07:16  sproingie: so what should #3 be?
07:17  bob2: the stdlib quality is uneven, deal
07:17  sproingie: "corroded batteries included"
07:17  bob2: haha
07:17  Thorn: why do re functions require re.UNICODE even when passed ur'...' regexps?
07:17  sproingie: that could be a nice long list of stdlib modules you should avoid
07:18  bob2: "things they forgot to kill in python 3"
07:18  sproingie: "Simple*Server modules are toys.  Don't use them"
07:18  Definity: So the project i was working on which i thought was simple turns out to bee a bit too hard for me (noob) any of you guys got any recomendations or websites that rather give's you tasks to do than tutorials?
07:18  sproingie: "sched is for the guy who wrote it.  if you can figure it out, you can write a better sched"
07:19  prsteele: Definity: projecteuler.net
07:19  Definity: thanks dude
07:19  bob2: "almost everything in the string module was deprecated in 1913, yes, I know it's confusing that everyone pronounce the type str as string"
07:19  _habnabit: Definity, hahaha don't bother with project euler
07:19  sproingie: string still has a few uses
07:19  kerio: _habnabit: why do you hate math so much ;_;
07:19  sproingie: _habnabit: what's wrong with euler?
07:19  _habnabit: Definity, write a diplomacy adjudicator
07:19  prsteele: _habnabit: the first few aren't bad...
07:19  _habnabit: sproingie, it doesn't teach you programming
07:19  Definity: ha
07:19  _habnabit: prsteele, ^
07:19  mtx_init: Definity: project euler is pretty good for those things
07:20  sproingie: i don't like math stuff, i don't like the euler problems, but they do make you think hard
07:20  bob2: "staticmethods are there as a trap for java programmers"
07:20  Definity: well i dont care aslong as i have some stuff to do and its progressive
07:20  kerio: bob2: haha
07:20  mtx_init: I think writing a web scrapper is a really good way to learn python
07:20  sproingie: staticmethods are too obscure to even have in such a guide
07:20  Eevee: staticmethods are a wart
07:20  sproingie: naw they're there for completeness
07:20  mtx_init: atleast parts of it
07:20  prsteele: I think they're useful as documentation
07:21  _habnabit: Definity, I gave you a suggestion
07:21  bob2: __new__ uses them somehow
07:21  sproingie: you've got instancemethod which curries self, you've got classmethod which curries the class, and you've got staticmethod which doesn't curry
07:21  Definity: prsteele
07:21  prsteele: Definity: ?
07:21  kerio: sproingie: why are they in a class then?
07:22  kerio: :<
07:22  sproingie: mind you i'm totally abusing the term "curry"
07:22  bob2: never even noticed "stringprep" or "fpformat" before
07:22  sproingie: kerio: namespaces that are a bit more portable than modules.  actually it'd be cool if modules and classes merged.
07:22  kerio: it wouldn't
07:22  bob2: heh
07:22  sproingie: why?  what is the basic breakage if they did?
07:22  kerio: and modules are totally portable
07:22  sproingie: you can't instantiate a module from a statement
07:23  kerio: thank god for that
07:23  sproingie: blah blah
07:23  sproingie: anyway, no one uses staticmethod, you have to go out of your way to use it anyway
07:24  sproingie: i'd probably want to look at what newspeak is doing WRT modules before i thought of unifying classes and modules anyway
07:24  sproingie: maybe SML functors but those are probably too much about typing
07:24  bob2: have you seen dash's module thingo? (exocet)
07:24  prsteele: sproingie: Isn't there a way to __import__("something") ?
07:24  markoso: hello
07:24  Definity: A diplomacy adjudicator sounds a bit complex for me still, i have only  been doing python for a few weeks
07:25  sproingie: prsteele: you can import dynamically but it still takes much magic to create a new module dynamically
07:25  sproingie: bob2: never heard of it.  url?
07:26  bob2: sproingie: http://bazaar.launchpad.net/~washort/exocet/main/files / https://launchpad.net/exocet
07:26  bob2: blah lp you suck
07:27  kerio: Definity: meh, diplomacy is not hard to parse
07:27 --- crypticsquared is now known as cryptics_
07:27  sproingie: i could go a long ways with the cruft in the stdlib.
07:27  sproingie: maybe "batteries NOT included: twisted, gevent"
07:27  sproingie: netsplit of -159 nicks over with one join?
07:27  _habnabit: sproingie, please point out that async{ore,hat} are toys as well
07:27  prsteele: Definity: if your math background is decent, projecteuler.net can be fun, even if it doesn't explicitly teach you python
07:27  Definity: woah
07:27  sproingie: _habnabit: oh hell yah
07:27  _habnabit: sproingie, basically any network server vs. network client
07:27  Definity: is it me or is EVREYONE /split
07:27  sproingie: you were on the bad node then
07:27  sproingie: i've been there
07:28  Definity: prsteele, ok thanks il check it out, my maths is pretty rubish but i can leran along the way
07:28  markoso: should i learn python before venturing into web dev and gui
07:29  bob2: markoso: well the other two sound hard without you first learning whatever programming language you intend to use :)
07:30  sproingie: exocet looks neat
07:30  markoso: i know web dev with php but it seems more comlplex with python
07:30  sproingie: tho other than the shadowing problem, i don't actually think there's a lot of suck about imports
07:30  sproingie: at least not enough for a guide
07:31  sproingie: pfft he /quit awful fast
07:45  arvind_khadri: hi, is it possible to assign value to __name__ ??
07:47  sproingie: it's possible, it's just another variable.  won't really do much though.
07:53  arvind_khadri: sproingie, i actually want to pass a class's name to another file. How can I achieve that? using __class__  is it??
07:54  _habnabit: arvind_khadri, what does that mean, and what do you think it would do
07:54  sproingie: "pass to another file" suggests a pretty confused idea.
07:54  sproingie: but if you really must, .__class__.__name__
07:55  sproingie: you can in fact assign to a class's __name__ if your aim is to cause maximum confusion
07:55  arvind_khadri: _habnabit, I am calling a function written in another module/file , to which I want to pass the name of the class from which it is being called..
07:56  sproingie: mm hmm
07:56  sproingie: arvind_khadri: consider using the traceback module
07:57  arvind_khadri: sproingie, its not so complicated :)
08:13  Definity: if i use the fuction POP in a list dose the result come in as a string
08:14  due: So what is the accepted standard: super(DerivedClass, self).__init__() or DerivedClass.__init__(self)? Is there a difference?
08:14  due: Definity: Only if the value you popped off is a string.
08:14  lrh9: Definity: Methods are case sensitive. Don't get fancy when spelling them.
08:14  lrh9: Definity: pop removes and returns the last element by default.
08:14  Definity: ok so if it is poped off a list it stay in list format?
08:15  due: Definity: ... no, you get the actual object.
08:15  due: Definity: If it's a string, you get a string; an integer, an integer, etc.
08:15  lrh9: No. It just returns the last element. Whatever that may be.
08:15  Definity: ok thanks
08:15  kerio: i read that as "pooped off a list"
08:15  _habnabit: due, always always use super.
08:15  due: _habnabit: Okay, sure. Why? ;)
08:15  kerio: due: you mean super(YourClass, self).__init__()
08:15  _habnabit: due, DerivedClass is not always the next class in the MRO.
08:16  _habnabit: due, and you can't know what it'll be until you have an instance.
08:16  _habnabit: due, that's why super works correctly.
08:16  due: _habnabit: Ahh. Interesting.
08:16  kerio: well, multiple inheritance sucks anyway, unless you have mixins
08:16  due: kerio: No, I meant exactyl what I said in my example.
08:17  due: I just said "DerivedClass" instead of "DerivedFromClass", my bad.
08:17  due: That's even unclear. I guess my brain is dead.
08:17  lrh9: Use "Foo" and "Bar" more.
08:18  due: lrh9: I like verbosity.
08:18  _habnabit: due, in my examples I typically say `ThisClass` and `ParentClass`
08:18  kerio: due: ok, so you mean DerivedFromClass.__init__(self) in your second example
08:18  kerio: otherwise you get a nice stack overflow
08:19  kerio: infinite recursion and all that
08:19  due: Hah, yeah.
08:21  due: MRO is thus defined by the order of derived classes in the definition? ie, class Deriver (First, Second):?
08:22  _habnabit: due, it's /influenced/ by that, but not defined by it.
08:22  _habnabit: due, google for descrintro
08:22  due: Okay.
08:26  due: _habnabit: Thanks, that explains a lot.
08:26  due: _habnabit: And actually made sense!
08:27  girasquid: Is there a way to unit test a function call?
08:27  _habnabit: What
08:28  bob2: what do you mean?
08:28  girasquid: Hmm, I guess that's a dumb way of putting it
08:28  girasquid: I'm calling a function on an object, and I want to test that the object called a method on itself
08:28  bob2: ah
08:29  bob2: you can do that, but usually you just want to check that the result or the object's state match what you expect
08:29  bob2: instead of being too finnicky about what it did inside
08:29  girasquid: Yeah, that's true - I guess I should fill in more
08:29  due: Okay, so it looks like my only quibble with "super(Class, self).__init__()" is that it is slightly unsightly.
08:30  _habnabit: due, you'll get over it
08:30  seen_: girasquid: you could mock the object: import mock
08:30  due: I guess that can just be one of the things I can put up with.
08:30  due: _habnabit: Yeah.
08:30  girasquid: I'm trying to test a django app that uploads things to S3 - I don't really like the idea of my tests relying on S3 being around to pass
08:30  bob2: it is a bit less ugly in 3.x
08:30  due: bob2: So I've read.
08:30  bob2: girasquid: oh, sure, structure your code so you replace the S3Uploader with a FakeUploader instance or whatever
08:30  girasquid: the second test case is that when I hit a certain URL, an object should move itself *to* S3 - but because of the speed involved, I have no way of knowing when the job's finished (because it's done in a thread)
08:31  _habnabit: girasquid, eh no don't do that kind of stuff in threads
08:31  girasquid: Oh, awesome - that should solve both problems
08:31  girasquid: _habnabit: what would you recommend?
08:31  _habnabit: girasquid, you want to use a message queue
08:31  _habnabit: girasquid, and a separate daemon for doing tasks like that
08:31  girasquid: We're planning on moving it to a gearman queue eventually, but we wanted to get something up and running quickly
08:47  girasquid: I know you can use import_module() to import a module when all you have is a string - but how do you import a class from that module?
08:47  bob2: I've not heard of import_module
08:47  girasquid: http://docs.python.org/dev/library/importlib.html
08:47  bob2: oh ugh
08:47  bob2: anyway, getattr
08:48  girasquid: ugh? What should I be doing instead?
08:48  lrh9: Why can't you just use the regular import mechanism?
08:48  bob2: why are you importing by string?
08:48  girasquid: I want to make the uploader for that function from earlier configurable, instead of something I pass in
08:49  girasquid: Is there such a thing as module-level variable I could use instead?
08:49  girasquid: Set it to S3Uploader by default, and then in my tests say MyModule.UPLOADER = FakeUploader, and have the code inside MyModule use that one?
08:50  bob2: yes, exactlylike that
08:50  girasquid: oh - sweet
08:51  girasquid: I'll do that then - thanks
08:54 * girasquid pasted http://pastie.textmate.org/private/wvrztsgdjs4oi2hvjo5sa
08:54  girasquid: When I try to set models.UPLOADER_CLASS in that code, I get an error about the global variable 'models' not being defined - what gives?
08:54  Definity: is this valid.  if stack <= stack.pop(0):
08:54  bob2: girasquid: http://glyf.livejournal.com/70684.html is a related thing
08:54  bob2: Definity: not really a sensible thing, but it isn't a syntax error
08:55  bob2: girasquid: you indeed did not import models
08:55  bob2: girasquid: 'import models'
08:55  girasquid: Oh, whoops
08:55  girasquid: I see that now - thanks bob2
08:55  Definity: how would you express that statement?
08:55  _habnabit: Definity, what statement
08:55  bob2: Definity: what are you trying to do now?
08:56  bob2: (I'm not sure what you think comparing a list item to a list does, you seem to have been doing it for a couple of days)
08:56  Definity: that statement, but in a more sensible format
08:56  _habnabit: Definity, nobody knows what you think that statement does
08:56  Definity: yeah im not gonna give up untill i learn how to do it right
08:56  pr3d4t0r: Good morning.
08:56  Definity: oh ok let me explain
08:57  bob2: Definity: why do you keep applying <= to a list and a list element?
08:57  bob2: what do you think it does?
08:57  Definity: becuase i want it to compare the last number on the list to the second
08:57  Definity: second to last number*
08:58  bob2: ok, so if x[-2] >= x[-1]:
08:58  lrh9: ^
08:59  lrh9: Don't know why you'd ever need that.
08:59  bob2: are you checking if the list is sorted?
08:59  bob2: if so, _habnabit has quite the code snippet for you
08:59  lrh9: Be nice.
09:00  lrh9: Definity: So what is it?
09:00  Definity: ok thanks il try it out
09:01  Definity: oh, im trying to make a program that count the cards in a card game( not in a dogey way) becuase soemtime there a huge back log of cards you have to remember and it gets tedious
09:02  lrh9: That's not clear. You mean how many of each card there are in a collection of cards?
09:03  Definity: erm kinda of, you get certain cards that will start a fork untill that fork has been reset, but you can also have a fork with in a fork
09:04  lrh9: Sounds like just the thing for a recursive function, to me.
09:05  Definity: il look into that, thanks
09:20  vagvaf: hello :)
09:22  mtx_init: oh hi
09:27 --- nook is now known as 15SABD9V2
09:29  lrh9: Let me clear scrollback.
09:30 --- prusajr is now known as kilment
09:31 --- kilment is now known as prusajr
09:41  primepie: anyone knows of a library that can take text as an input and returns wether it is spam or not?
09:41  fluter: primepie, spamassian?
09:41  fluter: primepie, you mean email text, right?
09:42  primepie: fluter: any text
09:42  fluter: primepie, so what is your definition of spam?
09:42  primepie: fluter: porn/advertising/etc..
09:43  bob2: you can run the SA client
09:43  TheSheep: or akamai
09:44  primepie: bob2: thinking of doing so
09:44  bob2: akamai has a spam classification api thing?
09:47  TheSheep: bob2: no ideea, but can be used for filtering spemmers
09:48  TheSheep: by ip, but still
09:52  unRuhe: hi there
09:53  unRuhe: What can I do when an sqlite.execute() failes because there are too many incoming queries?
09:53  jorrit: 1) Don't do that many queries at the same time.
09:53  jorrit: 2) Catch the exception and try again later.
09:53  unRuhe: Oh I mean not parallel
09:54  unRuhe: sequential
09:54  jorrit: Well but you are starting one query before the previous one has finished?
09:54  bob2: http://paste.pocoo.org/ your code
09:54  unRuhe: no i think not
09:54  jorrit: unRuhe, I think you do.
09:55  Alberth: please explain what 'too many incoming queries' means then
09:55  unRuhe: Im creating a list of Objects that fetch their data from the DB in __init__
09:56  jorrit: unRuhe, we will need to see the code.
09:56  Alberth: ie if 1 query is too many, the only alternative is to do 0 queries
09:56  unRuhe: be like 10k+ objects
09:56  unRuhe: ok I'm doing a pastebin
09:56  jorrit: unRuhe, not pastebin. pocoo
09:56  unRuhe: ok
09:56  bob2: doing stuff in __init__ is probably a bad idea
09:57  pratz: hey guys, which is fast - iterating over a dict of dicts or iterating over a list of dicts ??
09:57  bob2: kind of an odd question
09:57  _habnabit: pratz, yes
09:57  bob2: can you really pick either?
09:57  bob2: can you really not benchmark them?
09:57  jorrit: Will be roughly similar I think but it is a weird question.
09:57  bob2: are they really both as clear as one another?
09:58  jorrit: pratz, a dict is not a replacement for a list or vice versa.
09:58  unRuhe: jorrit: what is pocoo?
09:58  Alberth: pratz: worrying about speed at that level is premature optimization (or even, useless optimization)
09:59  jorrit: unRuhe, <bob2> http://paste.pocoo.org/ your code
09:59  unRuhe: ok
10:02  unRuhe: http://paste.pocoo.org/show/323131/
10:02  jorrit: unRuhe, in that __init__ you are executing multiple queries at the same time.
10:03  jorrit: unRuhe, there are multiple execute() statements that aren't concluded.
10:03  bob2: unRuhe: and you unsafely interpolate strings
10:03  bob2: unRuhe: http://wiki.python.org/moin/DbApiFaq
10:03  bob2: and your init does a thousand things too many
10:04  unRuhe: bob2: ok ty
10:04  jorrit: unRuhe, also don't make sql like that using string formatting.
10:04  jorrit: unRuhe, that's very dangerous.
10:05  jorrit: unRuhe, give parameters to execute() itself instead.
10:05  bob2: if this is all sqlite, you might want a row factory instead
10:06  unRuhe: why is it dangerous? secrutiy or bugs?
10:06  bob2: both
10:06  rhkfin: Generated a GUI with Qt Designer and now I'm trying to use it. Can someone see something wrong here what causes the error: http://pastebin.com/tpg9GTr0
10:06  infobob: http://paste.pound-python.org/show/1751/ (repasted for rhkfin)
10:07  rhkfin: haha :)
10:07  unRuhe: jorrit: why aren't the statements concluded?
10:08  bob2: commenting out line 25 is probably a terrible idea
10:08  rhkfin: bob2: is that for me?
10:08  bob2: and I suspect the cause judging by random google results
10:08  bob2: rhkfin: yes
10:09  rhkfin: Hmm.. indeed it actually solved that error and now gives me something else to solve (AttributeError: 'GUI' object has no attribute 'textbrowser). Not really familiar with the class / self / object things of python.. trying to learn & understand..
10:10 --- silex is now known as Silex
10:10  bob2: it is quite easy
10:10  bob2: it means whatever GUI is, it has no 'textbrowser' attribute :)
10:11  bob2: btw by removing super, you stop the QMainWindow being initialised, which is rarely a good idea
10:11  bob2: you almost always want to upcall in __init__
10:11  rhkfin: bob2: so how do I refer to elements in the GUI? not self.textbrowser, but... hmm.. self.ui.textbrowser seems to work better..
10:11  bob2: rhkfin: they're just attributes
10:13  rhkfin: whoa, got it working :) So instead of self.uielement I need to refer to self.ui.uielement.
10:14  bob2: if uielement is an attribute of self.ui, yes ;)
10:14  rhkfin: yes :)
10:21  thomaschaaf: hey is there a function to split a string into a list after every x chars?
10:22  crass: it seems there's a bug in the dis.disassemble_string function
10:22  verte: you don't need a function for that
10:22  crass: huh?
10:23  thomaschaaf: verte: so I'll use a for loop thanks :)
10:23  verte: [s[i:i + n] for i in xrange(0, len(s), n)]
10:23  bob2: [''join(bits) for bits in zip(*([iter(yourstr)] * x))] is a hilarious way to do it
10:25  crass: has anyone here tried to disassemble bytecode for a compiled module?
10:26  bob2: many have tried
10:26  bob2: maybe skip to the bit where you say what you think the dis module does wrong
10:27  crass: haha, bob2 are you suggesting that you don't know of anyone doing it successfully?
10:27  bob2: I'm suggesting that it'd save time if you pastebined whatever you did
10:28  NelleV: :-)
10:31  crass: bob2: good idea here's a simple example: http://paste.pound-python.org/show/1752/
10:31  crass: basically I think it barfs on any pyc (I've tried several)
10:31  bob2: is it a 2.6 pyc?
10:32  crass: yeah, is that a problem?
10:32  jorrit: It must be a pyc from same platform and version of python.
10:32  jorrit: pyc's are not compatible.
10:32  bob2: wouldn't think so
10:32  crass: yeah it is
10:32  bob2: same os, cpu?
10:32  crass: its from the python's install
10:32  crass: so yes
10:33  crass: I wouldn't be so surprised if it were an opcode thing, but its strange that is the arg to compare
10:34  crass: I looked at the code a little, and it looks like that opcode arg should represent what type of compare used (like == or !=, etc..)
10:35  crass: but the decoded value of the oparg is out of the compare op type range of ops
10:36  NelleV: guys, I have a stupid question... I'm deploying an app using virtualenv. In order to check that I have cx_Oracle, I opened bpython and tried to install it, and it worked perfectly. Yet, when I try with python, it doesn't
10:36  NelleV: actually, that's not a question...
10:36  bob2: virtualenv --no-site-packages means no site packages
10:37  NelleV: bob2: yep, that's why the first time I installed it I didn't use that option :s
10:37  NelleV: man, that's annoying
10:39  whyking: hi
10:39  whyking: are class decorators having an effect on inherited classes?
10:41  TheSheep: whyking: a decorator is equivalent to just calling the function on the class yourself
10:42  TheSheep: whyking:  @foo class Foo():   is the same as  class Foo: ...; Foo = foo(Foo)
10:42  lrh9: So it depends on what the function does and returns.
10:42  whyking: TheSheep: OK, so it only matters during instantiation
10:43  whyking: TheSheep: and hence there is no effect on inheritance in any way
10:43  crass: I should have noted that the bug is generated by: python -c "import dis; dis.dis(open('/usr/lib/python2.6/os.pyc').read()[8:])"
10:45  dmarkey: If i have a sigalarm set, will the thread that sets the alarm get the signal?
10:46  jorrit: crass, why skip the first 8 bytes?
10:46  ov3rmind: :) morning...
10:46  crass: jorrit: the first byte is a magic number and the second is a timestamp
10:47  crass: you can verify that doing marshal.loads on the string being disassembled gives back a valid code object
10:48  jorrit: crass, it works with me without the 8:
10:48  jorrit: crass, with python 2.6
10:48  bobo_b: Hi. If i have a method add_something_new_to_a_dictionary(key, value) and someone submits a key that is already in the dict, do I raise a ValueError (or a KeyError)?
10:49  jorrit: crass, but it also works with the [8:]. The first 8 bytes may happen to be some kind of opcode :-)
10:49  bobo_b: or a ThisKeyAlreadyExistsError? :-)
10:49  crass: jorrit: what version of python do you have?
10:49  lrh9: bobo_b: Can you use a set? That has a method that will raise an error when adding something all ready a member.
10:49  jorrit: crass, see above. Already told you.
10:50  crass: jorrit: more specific: python -c 'import sys; print sys.version'
10:50  crass: mine is "2.6.5 (r265:79063, Apr 16 2010, 13:09:56)"
10:50  jorrit: 2.6.4
10:50  bob2: bobo_b: ValueError seems ok, but if set does something in particular do whatever it does
10:50  crass: I've tested on 2.5.4 and 2.5.2 as well
10:50  lrh9: crass: Try looking in importlib\_bootstrap.py around line 401 (on 3.x).
10:51  bobo_b: lrh9: my question is more about naming. what would be - semantically - the right error
10:51  jorrit: lrh9, he has 2.6
10:51  mahmul: bobo_b: why do you want to raise an error at all
10:51  lrh9: I know, but I don't happen to have the 2.6 module, so I can just give my best guess where it will be around.
10:51  mahmul: bobo_b: set.add() doesn't raise errors if it encounters dupes
10:51  lrh9: bobo_b: And my answer is trying to give you a better design. Yours is not good.
10:52  bobo_b: bob2: that's what i thought
10:52  bobo_b: lrh9: erm, no. my data is logically a dictionary. so using a set makes absolutely no sense
10:52  crass: hmm, I don't see an importlib or bootstrap as a substring of any path in 2.5.2 source
10:53  bobo_b: mahmul: because the method is add_something_new_to_a_dictionary :-)
10:53  bobo_b: anyway, thanks guys
10:53  mahmul: bobo_b: you could create a class, instances of which have a set and a dict.  all the keys for the dict have to go through the set
10:53  lrh9: bobo_b: We can't always tell if the person knows which data structure to use. Normally he or she doesn't.
10:54  lrh9: bobo_b: I have a different suggestion.
10:56  bobo_b: mahmul: true. but the "external" access to this dict all goes through one method, so i just catch it there
10:56  bobo_b: lrh9: which is?
10:58  mahmul: i dunno, i'm still cagey about throwing an exception when a duplicate key is added
10:58  mahmul: i guess i don't see the point
10:59  lrh9: bobo_b: raise a KeyError.
10:59  lrh9: Just thinking about how you should do it.
10:59  snot: I'm making a small script which will execute the same command on a bunch of ssh servers. Reading http://docs.python.org/library/subprocess.html there sure is a lot of options... normally I would just use system. However I was informed that it was bad pratice. which one do you guys recommend? (I need both stdout and stderr... just so I can print them to stdout and stderr... so soemthing which does this by default would be nice)
11:00  lrh9: bobo_b: Why is your function a method?
11:01  snot: I dont mind deadlocks btw. time isnt of the essense here
11:01  josePhoenix: I thought that read "dreadlocks"
11:01  josePhoenix: Was confused, checked to see it was #python
11:02  bob2: snot: eh, the child gets the parent's stdout/stderr by default
11:02  bob2: so just leave them alone
11:02  ded: I have a data structure involving dicts of dicts / arrays. (It originated as JSON). How do I create an abbreviated/outline text description of the data structure, suitable for pasting into a docstring?
11:03  snot: bob2: nice, but which method do you recommend, call, Popen... or what?
11:03  bob2: (lists likely)
11:03  ded: Something like {d1: { key1: val1, ...}, ...}
11:03  bob2: snot: call is easy if you don't need to capture the output
11:03  bob2: ie just want it on the screen
11:03  snot: bob2: cool, thanks
11:03  bob2: ded: not really clear to me what you want
11:03  bob2: ded: do you just want the keys of the top level dict?
11:04  crass: lrh9: jorrit: looking at the actual string at the choke point it turns out to be a doc string, so I'm guessing that dis is expecting code with no doc strings
11:04  vishnu_s: hi, is there a method to append a key:value to a dictionary?
11:04  ded: bob2: No, I want a succinct overview of the entire data structure, using ... to save space.
11:04  bob2: vishnu_s: d[key] = value
11:04  ded: bob2: I want a text picture, not a functional bit of python code
11:05  vishnu_s: bob2: thank you :)
11:05  bob2: right but I don't get how you want to summarise it
11:05  ded: Something like {d1: { key1: val1, ...}, ...}
11:06  lrh9: ded: Have you just tried import pprint; pprint.pprint(foo)?
11:06  ded: lrh9: That prints out the entire data structure
11:06  bob2: so some random key from each level of dict?
11:07  vishnu_s: I want to pass some options to my python script. eg myscript.py --opt1 value1 --opt2 value2. What's the best way to do this, the options can be specified randomly and some options are optional too.
11:07  lrh9: vishnu_s: Learn to use the argparse and optparse modules.
11:07  vishnu_s: lrh9: cool! thank you
11:08  ded: bob2, i see what you mean. I guess I was thinking of a data structure with lists, in which successive elements can be assumed to be repetitive.
11:08  dmarkey: any idea anyone?
11:09  ded: bob2, so perhaps I should just stick the pprint output in a text editor.
11:09  lrh9: dmarkey: I think I missed your question.
11:09  bob2: dmarkey: threads and signals are hard
11:09  bob2: I think it's the head of the process group
11:09  bob2: er leader?
11:09  MiratCanBayrak: hi i need a file like object that stands at memory not at disk. can i create something like that?
11:09  bob2: MiratCanBayrak: StringIO module
11:10  lrh9: Just remember, on certain operating systems memory gets paged to disk, so there may not be a way to guarantee it never touches disk if your doing this for some security project.
11:10  MiratCanBayrak: bob2, thanks
11:10  bob2: MiratCanBayrak: what in particular are you doing?
11:11  gwork: Can i ask anyone here about suds and authentication?
11:11  MiratCanBayrak: bob2, i working on a text editor
11:11  bob2: like always, best to just ask
11:12  jorrit: MiratCanBayrak, I don't think using StringIO for that is the best approach.
11:12  bob2: MiratCanBayrak: how does a StringIO help?
11:12  jorrit: MiratCanBayrak, you usually want a better data structure that keeps track of lines and such.
11:12  jorrit: MiratCanBayrak, for example a list of strings might already be better (depends of course).
11:14  MiratCanBayrak: jorrit, bob2 .. i want to use file-like objects becouse at future i can easly grow project for editing online files, or huge files. at the moment i am reading file to memory but i think using StringIO would be healtier
11:14  jorrit: MiratCanBayrak, even then it is not a good idea.
11:14  MiratCanBayrak: why
11:14  MiratCanBayrak: ?
11:14  jorrit: MiratCanBayrak, StringIO is basically a single string. How are you going to insert a line at line 10000 if you have a huge file?
11:14  bobo_b: re
11:14  bobo_b: lrh9: why should my method be a function?
11:15  jorrit: First count 10000 newlines and then manipulate this huge string to insert a line? That's not efficient.
11:15  jorrit: MiratCanBayrak, it is simply not a good data structure for editing files. Especially not for big files.
11:15  bobo_b: lrh9: don't think KeyError is the way to go
11:15  bobo_b: but thanks for your help
11:16  MiratCanBayrak: jorrit, hmm... i think that may be i can use directly files. when user writes a character i can seek to that place than write :) when you are writing fast it can burn hdd lol :P
11:16  jorrit: MiratCanBayrak, no. That doesn't work for files.
11:16  jorrit: MiratCanBayrak, if you write in the middle of a file you overwrite.
11:17  jorrit: MiratCanBayrak, it will not move the characters after that.
11:17  jorrit: MiratCanBayrak, so writing/editing a file in place is an even worse idea.
11:17  NelleV: I've got an import that works on a computer and not on another one. The difference is that I use python2.6.4 on the computer where it works, and python2.6.4 on the computer where it doesn't. I know I've seen this problem mentionned before
11:18  MiratCanBayrak: jorrit, what do you suggest than?
11:18  NelleV: anyone can point me in the right direction ?
11:18  jorrit: MiratCanBayrak, well what I suggested above is one way.
11:18  lrh9: You use 2.6.4 on both?
11:18  jorrit: MiratCanBayrak, i.e. a list of strings.
11:18  neumaennl: NelleV: copy-paste error?
11:18  jorrit: MiratCanBayrak, that way you can VERY quickly find line 10000 for example.
11:18  NelleV: lrh9: nope. As I just said, I use 2.6.6 on one and 2.6.4 on the other one
11:19  jorrit: MiratCanBayrak, but even that is not 100% perfect for very big files. If you want to support really big files that don't even fit in memory you have to use much smarter systems.
11:19  neumaennl: NelleV: you just said 2.6.4 twice
11:19  MiratCanBayrak: jorrit, may be i can use temprory sql to keep lines
11:19  lrh9: ^
11:19  gwork: I'm heaving a hard time understanding authentication (windows integrated over http..) when i query the wsdl in the browser (ff+ie) i'm asked for creds so i enter the AD credentials and succeed. using suds i only get an 401, no matter what i try.
11:19  gwork: I've tried suds.client.Client(username=,password=), tried the wsse option and tried transport using suds.transport.http.HttpAuthenticated(u,p)... please help
11:19  MiratCanBayrak: jorrit, thanks a lot
11:19  jorrit: MiratCanBayrak, using sql might work but inserting a line in the middle remains a lot of work as you have to modify the line numbers of all subsequent lines.
11:19  bob2: NelleV: http://paste.pocoo.org/
11:20  jorrit: MiratCanBayrak, so not sure that's a good idea. I would use a list of strings. That's easy and reasonably fast to start with.
11:20  NelleV: from sqlalchemy.databases.oracle import OracleDialect
11:20  NelleV: http://paste.pocoo.org/show/323151/
11:20  bob2: gwork: that AD SSO stuff requires special support
11:21  bob2: NelleV: did you install cx_oracle
11:21  gwork: bob2: in the docs it says"As of 0.3.8, suds includes a NTLM transport based on urllib2. This implementation requires users to install the python-ntlm. It is not packaged with suds. " - so i figure i'm doing something wrong if it doesn't work
11:21  NelleV: http://paste.pocoo.org/show/323152/
11:21  NelleV: bob2: of course
11:21  NelleV: bob2: with the paste below you can see it isn't an installation probleÃ¹
11:22  bob2: NelleV: print oracle
11:22  bob2: gwork: did you install python-ntlm?
11:22  NelleV: bob2: <module 'sqlalchemy.dialects.oracle.base' from '/usr/lib/python2.6/dist-packages/sqlalchemy/dialects/oracle/base.pyc'>
11:23  gwork: bob2: yes i did
11:24  bob2: NelleV: two pastebins, one with each version, include version in each, of 'import sqlalchemy.dialects.oracle'?
11:26  bob2: gwork: not sure then, sorry
11:26  NelleV: bob2: when you say include version with each, you just mean I say "this paste is 2.6.6" ?
11:26  bob2: NelleV: yeah
11:26  bob2: I'm getting mixed up
11:26  gwork: bob2 thanks for the help anyway
11:26  bob2: gwork: good luck
11:26  bob2: ntlm auth is something i always give up on
11:27  neumaennl: yeah ntlm sucks
11:27 --- timj__ is now known as timj
11:27  NelleV: bob2: the import doesn't work with python2.6.4, and it does with python2.6.6
11:27  gwork: yeah, but it's the bst integration for sql server stored procedures via soap
11:28  bob2: I'm so sorry man :-)
11:28  gwork: so am i :D
11:28  bob2: sql server, stored procedures, soap
11:28  gwork: bob2 : yeah, i know :P
11:29  bob2: NelleV: python2.6.4 -c "import sqlalchemy ; print sqlalchemy ; import cx_oracle ; print cx_oracle"
11:30  NelleV: bob2: one sec, I might have done something stupid...
11:33  NelleV: bob2: http://bpaste.net/show/13033/
11:34  kheeper: hi guys http://paste.ubuntu.com/555711/ who knows what I do wrong
11:35  jorrit: kheeper, first you have to tell us why you think it is wrong.
11:36  kheeper: jorrit: because of this http://paste.ubuntu.com/555715/
11:43  nosklo: kheeper: seems that you're trying to return a image object as HTTP response
11:44  nuxil: if i have a dict like this d = {1 :["foo",1], 2:["bar",0].....} how can i make a list of each 2nd iteam of each key? so it get a list llie [1,0,...]
11:44  kheeper: nosklo: I trying to get a picture from webcam to website
11:44  nosklo: kheeper: however wsgi application() return value must be a interable of *strings* - you can't return a image object there
11:44  nosklo: kheeper: yes, I understand that part
11:44  nosklo: nuxil: does order matter?
11:45  nuxil: nosklo, nop
11:45  kheeper: nosklo: cat give me a bit more I have no experience with wsgi I start yesterday
11:45  nosklo: nuxil: [v[1] for v in d.itervalues()]
11:45  verte: nuxil: why do you have lists with elements of inconsistent type?
11:46  nosklo: kheeper: as I said, the problem is that you're trying to return an image object, and that doesn't work
11:46  nosklo: kheeper: you have to return raw bytes
11:46  kheeper: nosklo: ok
11:47  whyking: what does TypeError: Error when calling the metaclass bases function() argument 1 must be code, not str
11:48  whyking: mean?
11:48  Phazorx: whyking: upgrading to 3?
11:48  whyking: this is the code: @kabuki.hierarchical class Theta(hddm.model.HDDM)
11:48  whyking: Phazorx: nope
11:48  whyking: it's not a metaclass
11:48  nosklo: whyking: that class you're inheriting from might have a broken metaclass
11:48  whyking: nosklo: but it's not a metaclass
11:49  whyking: nosklo: it is decorated however, wit hierarchical
11:49  nosklo: whyking: but it could *have* a metaclass
11:49  whyking: could that be a problem?
11:49  verte: no, it *has* a metaclass
11:49  whyking: hm
11:49  nosklo: whyking: hddm.model.HDDM could have a metaclass, and it could be broken
11:49  verte: and I guess it could
11:49  whyking: I never really got metaclasses
11:49  whyking: what should I do?
11:49  verte: the decorator could return something that is not the class
11:49  whyking: yeah, it's not
11:49  nosklo: whyking: stop subclassing - that should fix things
11:49  nosklo: whyking: use class Theta(object) instead
11:49  whyking: nosklo: can't
11:49  verte: get a closser look at the base class
11:50  verte: closer*
11:50  nosklo: whyking: why not?
11:50  whyking: nosklo: my design demands it
11:50  whyking: nosklo: otherwise I'd have to copy a lot of code
11:50  nosklo: whyking: your design is yours, you command it. You can change it as you wish
11:51  nosklo: whyking: why would you have to copy code?
11:51  whyking: nosklo: how would I else use the code from the parent?
11:51  nosklo: whyking: use composition - create an instance of the other class and store it as attribute of the new class' instance
11:51  whyking: nosklo: I'll have to think about that
11:52  whyking: thanks
11:53  whyking: nosklo: you don't like subclassing then?
11:55  nosklo: yes, I think subclassing is overrated, and should be avoided in lots of situations where it is used
11:55  nosklo: specially when subclassing types from other people
11:55 * jorrit agrees with nosklo 
11:56  nosklo: a wrapper composition-style type is much more maintainable
12:00  lrh9: What if you want your object to have the same interface as similar objects?
12:00  jorrit: lrh9, you don't need inheritance for that. At least not in python.
12:01  jorrit: lrh9, in order to behave like a list and be useful to functions that work on lists you only need to implement the appropriate functions. You don't have to subclass list.
12:01  jorrit: lrh9, duck typing
12:02  kerio: why doesn't {k: list(v) for k, v in itertools.groupby(...)) work? :(
12:02  kerio: er, match the parentheses at the end
12:03  jorrit: kerio, why that weird k: list(v) notation? What is that colon doing there?
12:03  kerio: jorrit: dict comprehension
12:03  lrh9: jorrit: But what if you didn't need to implement them? What if they work the exact same way. How do you expose a composite's attributes and methods?
12:03  jorrit: lrh9, def fun(x): return embedded.fun(x)
12:03  jorrit: or rather: return self.embedded.fun(x)
12:04  jorrit: kerio, can you show the exact code with right parens?
12:04  kerio: {k: list(v) for k, v in itertools.groupby(...)}
12:04  lrh9: Aha. And if you needed to do a bunch of those?
12:04  kerio: dude, it's a dict comprehension
12:04  jorrit: kerio, put } after list(v)
12:04  kerio: the problem is groupby()
12:04  jorrit: [{k:list(v)} for k,v in ...]
12:05  kerio: what? no
12:05  nosklo: kerio: what doesn't work about that?
12:05  nosklo: kerio: it works here
12:05  kerio: nosklo: i only get empty lists :<
12:05  jorrit: It is a syntax error for me if I try that.
12:05  nosklo: jorrit: try python 2.7+
12:05  jorrit: ah
12:06  nosklo: kerio: {k: list(g) for k, g in groupby(['a', 'b', 'c', 'ab', 'ac', 'abc'], key=len)} => {1: ['a', 'b', 'c'], 2: ['ab', 'ac'], 3: ['abc']}
12:07  kerio: nosklo: :( doesn't work here, not sure why
12:07  kerio: this is a list of dicts
12:07  nosklo: kerio: because you did something else wrong
12:07  kerio: i correctly get the list of keys
12:07  nosklo: you're not telling something :)
12:07  nosklo: list of keys?
12:08  nosklo: you aren't calling list(groupby()) are you?
12:08  nosklo: because that would be a reason
12:11  nosklo: kerio: I mean, if you iterate to next key on groupby iterator *before* consuming the group iterator, then you can't have it anymore
12:11  lrh9: Ugh. Trying to pound out an expert system shell.
12:11  lrh9: http://paste.pound-python.org/show/1755/
12:11  nosklo: kerio: you "skip"
12:12  nosklo: lrh9: sounds like fun
12:12 --- elpargo_ is now known as elpargo
12:13  lrh9: It's interesting, but I tend to panic when I don't know something.
12:13  verte: I would like an expert system system shell.
12:14  verte: "you probably want to read this pdf you downloaded the other day"
12:14  verte: "you probably want to run that test again now"
12:15  flexy89: Hi everybody!
12:15  lrh9: You're enthusiastic!
12:15  verte: Hi Dr Nick!
12:15  nosklo: "you probably want to play this new roguelike game instead of working"
12:15  lrh9: Heheheh.
12:16  NelleV: guys, anyone has any idea with the problem I mentionned before ?
12:16  NelleV: I seem to be able to import submodules but not functions directly. And this happens with any module I use
12:16  NelleV: I saw this problem mentionned before here
12:17  nosklo: NelleV: hm... what? can you do "from sys import exit" ?
12:17  verte: "directly" ?
12:18  NelleV: nosklo: I can
12:18  NelleV: :'(
12:18  nosklo: NelleV: then I don't see what the problem is
12:18  nosklo: NelleV: but it's probably related to using setuptools
12:19  NelleV: nosklo: yeah probably. I'll try once again something else :(
12:19  nosklo: NelleV: setuptools adds *code* to .pth files
12:19  verte: oh, you have the curse of setuptools
12:19  nosklo: NelleV: does it happen with a specific package/function or set of packages?
12:20  nosklo: NelleV: which error message do you get?
12:20  NelleV: nosklo: it happened twice. I'm going to start the deploy script from scratch. Maybe I missed something
12:21  nosklo: yeah.
12:21  NelleV: nosklo: it happened with sqlalchemy module, and I just changed the code (cause I could) then with some enthought package, that I obviously cannot change
12:21  nosklo: lets repeat the same test case, it could fix himself
12:22  WintermeW: reminds me the windows way to troubleshoot things
12:23  lrh9: Um... Is your computer plugged in?
12:23  vishnu_s: I've a file with contents KEY1=value1, how can I parse this file in python and get the value?
12:24  lrh9: vishnu_s: Best bet? configparser.
12:24  whyking: TypeError: super() argument 1 must be type, not function
12:24  whyking: super(ClassName, self).__init__()
12:24  whyking: wtf?
12:25  whyking: the class is decorated, but that shouldn't influence anything, should it?
12:25  vishnu_s: lrh9: thank you, I'll check the details
12:25  lrh9: whyking: Again, it depends on what the decorator returns.
12:26  WintermeW: vishnu_s: else, line.split('=')[1] will give you the value
12:26  whyking: lrh9: sorry, I don't get that.. why does that matter.. self is still self..
12:26  vishnu_s: WintermeW: how to read the line from the file.
12:26  whyking: lrh9: but the decorator returns another object
12:27  whyking: lrh9: a different one
12:27  whyking: when I print self it is the type of the subclass
12:27  WintermeW: vishnu_s: simply , eg with filehandle.readlines()
12:27  lrh9: whyking: If it is a class decorator, the decorator should return a class.
12:27  vishnu_s: WintermeW: ok, got it, thank you
12:27  whyking: lrh9: oh!
12:28  lrh9: whyking: Also, simplify your syntax. I think super().__init__() should work as well as anything else.
12:28  whyking: lrh9: it doesn't matter what the decorator returns (I think), because @func ClassName is func(ClassName), so it's a function
12:28  whyking: lrh9: with python < 3.?
12:29  crass: in case anyone is curious, it turns out that a pyc file is not pure python byte code, its in fact a marshalled object, so I had to unmarshal it first
12:29  lrh9: whyking: When you use the decorator syntax, whatever the decorator returns is assigned to the identifier you decorate.
12:29  whyking: lrh9: right, but super(ClassName, self) expects a type, not a function
12:29  lrh9: whyking: I can't speak for 2.x.
12:29  whyking: hm.. that's kinda weird corner case
12:30  whyking: one can't use super in a decorated class
12:30  whyking: in general
12:30  lrh9: ...
12:30  lrh9: No. You just have to write your decorator correctly.
12:31  whyking: lrh9: type(ClassName) is <type 'function'>
12:32  whyking: lrh9: irrespective of what the decorator returns
12:32  lrh9: http://paste.pound-python.org/
12:32  lrh9: Source.
12:35  CatKiller: Hi there. Does anybody know whether calling file.open("file", 'r'), writing to the file and calling file.close() actually forces the data to be sent to that file?
12:36  CatKiller: i.e., if another process than python opens the file at the next tick after file.close() returns, will the data be up to date?
12:36  ivan`: you can't write a file opened in 'r'
12:36  lrh9: Mode 'r' is by definition read only.
12:36  CatKiller: oops sorry let's say that file is opened in 'a+' or 'w'
12:36  ivan`: yes, .close() flushes everything
12:37  lrh9: ^
12:37  CatKiller: but the important part is: it returns and then flushes everything, or does it only return when everything is flushed?
12:37  SpComb: whyking: correction, `@func class ClassName : ...` is `class ClassName: ...; ClassName = func(ClassName)`
12:37  SpComb: whyking: if your decorator returns something non-classy, then you can't use it for super()
12:37  ivan`: CatKiller: returns after the data is flushed to the OS
12:38  whyking: lrh9: you are correct
12:38  CatKiller: ivan': Thanks a lot. That's exactly what I was wondering.
12:38  lrh9: SpComb: I'm not going to worry about it anymore without source.
12:38  whyking: SpComb: I see
12:38  whyking: lrh9: I coded an example, but it depends on what the decorator returns :)
12:39  lrh9: Just line source for whatever it is you are producing.
12:39  lrh9: s/line/link
12:39  whyking: lrh9: ok, one second
12:44  paxcoder: how do i get first N members of the array? special keyword?
12:44  paxcoder: or rather, of an "iterative", or whatever you guys call it
12:45  lrh9: Are you talking about a list?
12:45  jorrit: paxcoder, you probably mean list instead of array. And you can use slices.
12:45  jorrit: paxcoder, l[:5] for example
12:46  paxcoder: lrh9, what's the difference?
12:46  paxcoder: jorrit, ty
12:48  lrh9: x = list() will work. x = array() is a NameError.
12:48  lrh9: "How do I get the first n elements of a list?" will receive a quick response.
12:48  paxcoder: lrh9, didn't know how you guys called it. it quacks like a duck
12:48  lrh9: Now you know, so just call a list a list.
12:49  paxcoder: lrh9, i do. lisp lists are very much different from arrays in the way they're used ;-)
12:49  paxcoder: :-P
12:49  paxcoder: lisp lists are actuall lists i think. dunno how python lists are implemented.
12:50  lrh9: Doesn't matter.
12:51  paxcoder: lrh9, this may be stretching it, but is there something like .join that concatenates iterators with iterators (alternatively one and the other) as in: ('1','3').join('2','4') == '1234'?
12:52  lrh9: paxcoder: Something that serves that purpose is in itertools. One sec.
12:54  DeadPanda: paxcoder, itertools.chain
12:54  whyking: lrh9: so my decorator returns an object, not a class
12:54  whyking: lrh9: but I now don't user super
12:54  paxcoder: DeadPanda, thanks. ping: lrh9
12:55  lrh9: paxcoder: Actually. Didn't catch your last part. Alternating the elements is trickier.
12:55  CatKiller: Quick question: If I use os.rename to rename a temporary file to an existing config file, will the move have happened as soon as os.rename returns?
12:55  lrh9: whyking: Source.
12:55  CatKiller: (i.e., If I read the file with a different process on the next tick will it read the renamed temporary file or the original one)
12:56  whyking: lrh9: http://code.google.com/p/kabuki/source/browse/trunk/kabuki/models.py#184
12:57  paxcoder: lrh9, DeadPanda, right. actually, it's ok. i just realized i don't need it, i can do it with .join
12:59  mgarces: hi guys and gals!
13:00  CatKiller: hi
13:05  lrh9: whyking: Can you explain why you want every class to return a Heirarchical object?
13:06  Alberth: CatKiller: that is largely a OS question, in particular since you cannot read a file without having it opened first.
13:07  Alberth: CatKiller: ie you have the guarantee that the os primitive has been executed. what that means exactly depends on the os
13:07  CatKiller: Mhhh
13:07  CatKiller: In this case this is Linux 2.6.26
13:08  DeadPanda: CatKiller, is something happening that you're not expecting; if so, what?
13:09  CatKiller: DeadPanda: Indeed, a nasty race condition of sorts: I have  a script that updates "smbd.conf" and as soon as this file is updated, I call on signal.kill(<smbpd PID> signal.SIGHUP) to reload the configuration
13:09  whyking: lrh9: so that the class is composited by the hierarchical object
13:09  Alberth: CatKiller: why is it a problem? both files have the same content
13:09  groundnuty: hey, is there some package manager that can be used to download/install/upgrade packages from pypi ?
13:09  whyking: lrh9: just to make the interface a little bit nicer. otherwise the user has to: myobject = Hierarchical(MyClass)
13:09  CatKiller: DeadPanda: If doing the latter (send a SIGHUP to smbd) right after "updating" that config file it does not work
13:10  whyking: lrh9: now he can do: myobject = MyClass()
13:10  CatKiller: DeadPanda: If I put a time.sleep(1) between updating the file and reloading Samba it works
13:10  CatKiller: Alberth: Both files have a different content. The initial one contains my original configuration, the temporary one contains the new configuration. I then rename the temporary one to the original one and reload Samba.
13:10  Alberth: CatKiller: so you have a smb kernel driver question, actually :)
13:11  CatKiller: Alberth: Sounds like it, but I can't understand how it is possible for it to load the old file if it does not exists anymore (renamed)
13:12  CatKiller: Alberth: I wanted to make absolutely sure that that config file was gone after calling renamed.
13:12  Alberth: CatKiller: unix has no problems with renaming or even removing opened files
13:12  Alberth: CatKiller: you need to ask the #linux gurus, it is not Python related
13:13  CatKiller: Alberth: Thanks, I just wanted to make sure of that it was not a python related issue.
13:14  Alberth: CatKiller: python just has a very thin layer to the os (basically just pass-through) to give access to the system, that's all what happens in python
13:15  CatKiller: Alberth: Ok, I wasn't sure of that. More importantly I just wanted to make sure that when the os.rename was returning when the kernel had returned and not when it had passed on the request to the kernel
13:16  CatKiller: Alberth: I kind of guessed it was but wasn't 100% sure. Thanks all for all your help.
13:16  vishnu_s: if os.getenv('MY_VAR'):
13:16  vishnu_s:         my_variable = os.getenv('MY_VAR')
13:17  Alberth: CatKiller: you could read the source code of os.rename if you want to know exactly, it is very readable
13:17  vishnu_s: is there a way to compress this code to a single liner or something?
13:17  jorrit: vishnu_s, why would that be useful?
13:17  jorrit: vishnu_s, compact code != readable code
13:18  CatKiller: Alberth: Will try, did not think it was going to be that easy ;)
13:18  lrh9: whyking: If it is only for convenience, I'm thinking you could do a convenience function like this: http://paste.pound-python.org/show/1756/
13:18  vishnu_s: jorrit: :) just curious
13:18  CatKiller: Thanks again everyone
13:18  vishnu_s: jorrit: I agree
13:19  jorrit: vishnu_s, however in your case you can do: my_variable = os.getenv('MY_VAR')
13:19  Alberth: vishnu_s: v = os.environ.get('FOO') ; if v is not None: ...
13:19  jorrit: vishnu_s, i.e. you don't have to test at all. Just assign.
13:19  CatKiller: bye
13:19  vishnu_s: jorrit: it's mandatory that I should test, that's the use case
13:19  jorrit: vishnu_s, ?
13:19  jorrit: vishnu_s, and what should happen with my_variable if the variable is not set?
13:26  whyking: lrh9: OK, but the user would also want to write his own classes that somehow have to be composited
13:27  Alberth: vishnu_s: did you read the doc about os.getenv() ?
13:29  whyking: lrh9: but I can use the decorator if I call the base methods directly instead of via super
13:35  lrh9: whyking: OK. What about this way then:
13:35  lrh9: http://paste.pound-python.org/show/1757/
13:36  lrh9: s/line 11/return New_Heirarchical_Class
13:37  lrh9: g2g bbiab
13:38  vishnu_s: Alberth: just went through the basics, will it crash if the var is not set? do I've to do an try: statement and catch the error?
13:38  vishnu_s: jorrit: if the variable is not set, I'll assign a value to my_variable
13:39  Alberth: vishnu_s: you ask that after reading the documentation of os.getenv()?
13:39  vishnu_s: Alberth: infact I didn't read it completely, lemme do that now.
13:41  vishnu_s: Alberth: seems like, it defaults to None if the value doesn't exist. so I'm good
13:41  Alberth: yep, no need for complicated stuff
13:44  whyking: lrh9: ha! that's genius!
13:44  lrh9: You got the gist of it then?
13:44  whyking: lrh9: yes, very clever
13:45  whyking: lrh9: I didn't know the trick with super(self.__class__, self)
13:46 * SpComb tries to remember why that doesn't happen per default
13:46  SpComb: maybe it's just intended to annoy you when you rename your class
13:47  lrh9: It's a 2.x peculiarity I guess. In 3.x you don't have to give super any arguments most of the time.
13:48  whyking: lrh9: thanks a bunch!
13:49  lieuwe: how do I calculate ETA from passed time since start, processed units, and units still to do?
13:51  neumaennl: (passed time)/(processed units)*(units still to do)
13:51  lieuwe: right now I'm using elapsed*todo/done, but it doesn't seem to wrok correctly.
13:51  lieuwe: it just keeps counting up whilst processing speed stays the same
13:52  FND: hi - if I have a command like `echo foo "lorem ipsum" bar` in a config file, how best to parse that to make it suitable for Popen (ending up as list ['echo', 'foo', 'lorem ipsum', 'bar'])?
13:52  FND: I would assume there's prior art, perhaps even something in the standard library - but it's kinda hard to goolge
13:55  Habbie: FND, shlex split
13:55  Habbie: FND, shlex.split even
13:56  FND: thanks Habbie
13:56  lrh9: lieuwe: Whenever you have a relatively complex expression, use parentheses to group. Does the number of remaining units change. (Excluding the ones that get processed.)
13:56  lieuwe: lrh9: nope
13:56  lieuwe: lrh9: anyway, the multiplication/division order here doesn't matter
13:56  lieuwe: lrh9: it just seems to need some time to balance
14:00  solvik: hi. i'm would like to get the content of a page and also use it to do an http request to submit form. using urllib2. because i have to get a token which changes everytime the page is reloaded. but i can't see how I can do that. if i get the page content and then i do the request, the token has changed
14:00  solvik: anybody could point me out how i can achieve that ?
14:01  infernow: if I use CERT_REQUIRED on a server side SSL socket, will the SSL layer verify the notBefore, and notAfter paramters of the client certificate? or do I have to get the certificate and verify them myself?
14:01  hopthrisC: solvik: what?
14:02  Habbie: infernow, http://docs.python.org/library/ssl.html answers this question
14:02  infernow: Habbie: does it?, I can't find anything about that
14:03  Habbie: infernow, look for 'validated'
14:03  infernow: CERT_REQUIRED (required and validated)
14:03  ojacobson: hopthrisC: Looks like he's trying to automate some form submission that involves a CSRF-prevention token
14:03  infernow: doesn't say what validated means
14:03  ojacobson: solvik: There's no magic for this. You'll need to parse the response (BeautifulSoup or what have you) and dig out the token that way, then compose the form properly to include the token
14:04  solvik: hopthrisC: I have a page with a form. The form needs a token in order to submit its content. The token is in the source code. So I get the content of the page in order to get the token, and then I do the http request with my POST arguments. But when I do the request, it's a new request (= different from the one i used to get the token), so the token cahnged
14:04  solvik: ojacobson: it's already how i do it
14:04  ojacobson: solvik: It's always going to be a different request. There are no inter-request affinities in HTTP.
14:04  hopthrisC: solvik: so what do you care that the token changed _after_ you posted the form?
14:04  hopthrisC: solvik: also, use mechanize
14:04  Juhaz: solvik, mechanize and lxml.html both have functionality for submitting a form with defaults and whatnot from the page
14:05  Habbie: infernow, keep on reading
14:05  Chopinn: i try insert statement with mysqldb.. but the data just doesn't insert.. i can see AUTO_INCREMENT increase, but the data is just not there. no error! and its nothing wrong with the query because i tested it. select statements works fine! i use the newest mysql 5 version on windows..
14:06  DeadPanda: Chopinn, #mysql; and check you committed your transaction.
14:06  solvik: hopthrisC: with mechanize i can "save" the session and read the page, then submit the form ?
14:06  WintermeW: Chopinn: i think you must commit your cursor for the insert to work..i think
14:06  Chopinn: commit?
14:06  WintermeW: yes, commit()
14:06  DeadPanda: Chopinn, oh dear
14:06  Chopinn: hmm
14:06  Chopinn: ::p
14:06  hopthrisC: solvik: you didn't mention a session before
14:06  DeadPanda: Chopinn, http://en.wikipedia.org/wiki/ACID
14:07  solvik: hopthrisC: it's not like a session
14:07  Chopinn: thanks guys!! :)
14:07  hopthrisC: solvik: now you make even lesse sense
14:07  solvik: but the form has a token (csrftoken), so i do need it to send the form
14:07  hopthrisC: solvik: a session that is not a session
14:07  lieuwe: hopthrisC: the form has a token to verify it was sent from the right website
14:08  solvik: voila
14:08  lvh: Hello.
14:08  lieuwe: hopthrisC: the token changes every reload
14:08  lieuwe: solvik: doesn't the form have a field for dem token then?
14:08  lieuwe: solvik: like a hidden input?
14:08  solvik: yep
14:08  solvik: it's for that reason i parse the page before send the form
14:09  hopthrisC: solvik: django, right?
14:09  solvik: right
14:09  hopthrisC: solvik: you need to carry the cookie, stupid
14:09  solvik: i'm not sure, even with the cookie, if the csrftoken is not in my POST variables, it doesn't work
14:10  hopthrisC: of course you have to put the token in the post as well
14:10  hopthrisC: man, get firebug and _watch_ what's happening when you do it in the browser
14:10  hopthrisC: .oO(a little understanding)
14:11  NelleV: hopthrisC: hey... Could you be a bit more understanding and polite ?
14:11  infernow: Habbie: can't find anything about it, could you point me to the section?
14:11  NelleV: hopthrisC: seriously, people may not know anything. As long as they try to learn, that's not a problem
14:12  Phazorx: hmmm.. any tweepy users?
14:12  Phazorx: or generaly OAuth-savvy actully?
14:12  lvh: Phazorx: I wish I didn't understand OAuth 2.
14:13  lvh: Phazorx: I started implementing OAuth. Then I read the spec.
14:13  Phazorx: i get 401 from a OAuth authorized service... it could be a bug in code or bad authentication data... how can i figure out which is it?
14:13  hopthrisC: NelleV: what, for one affectionate "stupid"
14:13  Phazorx: lvh: heh
14:13  hopthrisC: you seriously harsh my mellow
14:13  Phazorx: that bad?
14:13  Habbie: infernow, SSLSocket.getpeercert()
14:13  lvh: hopthrisC: Text, and by extension IRC, is bad at conferring intent. You might want to reconsider calling people stupid.
14:14  solvik: hopthrisC: i know that i have to put the token in the POST variable. but i don't succeed in getting the token in the page source code and send the form (with the token in my POST variable) with the same connection. in order to do not make a new connection (like a reload) when i send the form
14:14  Phazorx: lvh: i havet seen oa2 spec... did they make it like 4-way 18 step process or sometihng?
14:14  infernow: Habbie: yea, I think that section is a bit ambiguous on that part
14:14  Habbie: infernow, then read the code
14:14  lvh: Phazorx: It's ridiculously complex, and it misunderstands crypto on a number of levels.
14:14  hopthrisC: solvik: the connection doesn't have anything to do with it
14:15  lvh: Phazorx: I can replace all of OAuth, but better, by 1) understanding that SSL is just PKI, b) DNSSEC.
14:15  Phazorx: lvh: security by obscurity then?
14:15  infernow: (the time after which the certificate should not be trusted) "should not" is kind of ambiguous
14:15  infernow: Habbie: yea I guess I have to, thought somebody here knew
14:15  lvh: Phazorx: Well, no, it's not quite Kerkhoff's principle. Perhaps they are assuming attackers will die of laughter.
14:16  pythonirc1011: lvh: what is the easiest way to login into gmail system without using non-standard libraries. I want to establish a tcp-ip connection after authentication
14:16  lvh: Phazorx: Anyway, the spec says that 401 is for missing tokens, or whatever word it is they are using for "token" this week.
14:16  hopthrisC: solvik: http://docs.djangoproject.com/en/dev/ref/contrib/csrf/?from=olddocs#how-it-works
14:16  hopthrisC: solvik: read step 3 until you understand it
14:16  Phazorx: lvh: sad... but... that being said - the realuty bites and i have to deal with twitter and Oauth as-is
14:16  lvh: pythonirc1011: Please don't ping me with questions that involve the programming equivalent of walking over a snake pit on a tightrope with your hands tied behind your back and blindfolded
14:16  Phazorx: lvh: well okay... yweey does not complaion and i can see with tshark that some data is being passed
14:16  pythonirc1011: :)
14:16  lvh: pythonirc1011: My solutions involve the best possible tool for the job, oftentimes this does not include the stdlib
14:16  Phazorx: and what i have as data matches what i can see on tweeter oauth management page
14:17  hopthrisC: solvik: step 4 might apply as well
14:17  Phazorx: on the other hand i only see half of data
14:17  pythonirc1011: lvh: ok, I want to login to me@gmail.com at port 5222 -- authenticate and get an xml stream over tcp-ip. What is the best tool to do this?
14:17  Phazorx: so consumer k/s are valid i'm sure but access k/s i dont even know if they are correct/proper
14:18  Phazorx: or if they are being passed
14:19  lvh: Phazorx: There is no obvious way you can tell if a 401 is a legitimate bad token or a bug in the server. Twitter usually behaves pretty well and returns 5xx statuses for server problem, though
14:19  lvh: pythonirc1011: Doesn't Gdata let you access Gmail now
14:19  Phazorx: lvh oh... i didnt even consider it could be server issue
14:19  Phazorx: but how do i differenciate between no data and bad data based on 401?
14:20  pythonirc1011: lvh: Its not gmail! -- its gmail chat at that port.
14:20  lvh: Oh, okay. Google Talk, you mean?
14:20  solvik: hopthrisC: i understand it. now i want to login in the website. 1. first request -> i download the cookie 2. second request -> i parse the page and get the token 3. i send a new request to the action page with my post variable, the token and the cookie. is that correct ?
14:20  pythonirc1011: yes
14:21  lvh: pythonirc1011: Just text chat, or do you need video too
14:21 --- elake is now known as etank
14:21  the_isz: there was a class which you could derive from to easily add members (and their setters/getters?) to your deriving class. what was its name again?
14:21  JimmyTheKid: does python have a title() function on a string
14:21  lvh: JimmyTheKid: Method, and yes.
14:21  pythonirc1011: lvh: Just text chat...no video/sound. Just xml interchange over tcp-ip. And do not give me twisted or sleekxmpp or xmpppp or any other python library that doesnt work correctly all the way. (and are hard to debug)
14:22  lvh: the_isz: I have no idea what you're talking about. It sound vaguely like a property.
14:22  hopthrisC: solvik: you should be able to get cookie and token in one request
14:22  lvh: pythonirc1011: It's just Jabber/XMPP.
14:22  nosklo: pythonirc1011: wokkel
14:22  the_isz: it was something like  class MyClass(thatClass("a b c"))  and MyClass would have members a, b and c
14:22  lvh: the_isz: namedtuple?
14:22  the_isz: lvh: that might have been it!
14:22  hopthrisC: solvik: use mechanize. it makes that stuff easy
14:22  lvh: Although you shouldn't subclass that.
14:22 * the_isz looks up
14:23  lvh: pythonirc1011: That sounds pretty ridiculous coming from someone who wants to write his own XMPP lib.
14:23  lvh: pythonirc1011: What makes you think you'll do better, or make it easier to debug?
14:23  pythonirc1011: nosklo: I'm waiting for twisted+words author = wokkel's author to respond to my bug request for 3 days now! It eats away "subscribe" stanzas for some reason. Can we move on?
14:24  pythonirc1011: lvh: At least i wont eat away stanzas that were supposed to be handled to myself?
14:24  the_isz: lvh: that was what i was looking for, thank you
14:24  nosklo: pythonirc1011: don't wait - fix it yourself and submit the patch
14:24  lvh: pythonirc1011: ralph's on holiday (an important one, but not divulged for obvious privacy concerns)
14:24  pythonirc1011: nosklo: I cant for some reason...if you can help, that would be great
14:25  nosklo: pythonirc1011: you can't fix that bug, but want to develop your own library that uses raw tcp to talk to a xmpp service?
14:25  pythonirc1011: It seems that the class hierarchy is deep, and everywhere i can trap and print the stanzas, i've already lost the stanza i'm looking for...pidgin  gets it correctly
14:25  lvh: pythonirc1011: I never said the existing thing was perfect, I'm just saying it sounds ridiculous that writing something from scratch would be easier than fixing a supposed bug in existing software
14:26  lvh: It probably eats that because it correctly implements XEP 60
14:26  lvh: (Pidgin ignores it)
14:26  pythonirc1011: lvh: It eats away a subscribe? how can that be conformant to anything...lemme check xep 60
14:27  lvh: pythonirc1011: Do you know what an XMPP subprotocol is?
14:27  lvh: I'm just saying, when it comes to implementing that spec I'm going to need some evidence it's actually a bug (eg a reference to a spec that says it should do X, and some evidence that it actually does Y)
14:27  lvh: Especially since Ralph actually *wrote* that spec
14:28  pythonirc1011: lvh: section 6.1.2 of xep 60. Thats what is the prbolem.
14:28  JimmyTheKid: whats python's equivelent of exploding
14:28  JimmyTheKid: split?
14:28  nosklo: JimmyTheKid: I don't know what exploding is
14:28  pythonirc1011: didnt know ralph was on vacation. Thanks for the update.
14:28  nosklo: JimmyTheKid: os.kill(os.getpid()) ?
14:28  nosklo: JimmyTheKid: no, that's suicide
14:29  JimmyTheKid: where it seperates a string by spaces and places it into a string
14:29  lvh: pythonirc1011: Okay, I'm at 6.1.2. What does it get wrong?
14:29  JimmyTheKid: nosklo hilarious
14:29  nosklo: JimmyTheKid: oh, s.split()
14:29  lvh: I was under the impression it did that in PubSubService and PubSubClient
14:29  nosklo: JimmyTheKid: except it returns a list instead
14:29  lvh: And then correctly does not leak that information to anything else.
14:29  pythonirc1011: lvh: http://twistedmatrix.com/trac/ticket/4810 -- seems like it hasnt been fixed for 5 years?
14:30  pythonirc1011: if you want more details -- here -- http://bytes.com/topic/python/answers/31513-jabber-twisted (Its linked on that ticket)
14:30  lvh: pythonirc1011: Five years? That's a 3 day old bug
14:30  JimmyTheKid: list array...
14:30  pythonirc1011: lvh: Read!
14:30  JimmyTheKid: it's all the same thing
14:30  lvh: pythonirc1011: Yes, yes, I'm reading, relax
14:31  lvh: pythonirc1011: That basically got deferred to a different mailing list, let's see if we can find the equivalent thread there
14:32  lvh: pythonirc1011: I see no evidence that's a bug, because the supposed client doesn't use PubSubService/PubSubClient
14:32  lvh: pythonirc1011: Just because someone had the same issue 5 years ago doesn't mean it was a bug then or it was one now
14:33  lvh: Hang on while I try to find the equivalent thread in the right mailing list
14:34  pythonirc1011: thanks
14:34  nosklo: JimmyTheKid: you said "string"
14:35  lvh: pythonirc1011: Apparently, it's doing the right thing because of section 7.3 of the docs
14:35  lvh: (Without casting judgement if that makes sense or not)
14:35  JimmyTheKid: yea, what takes the leading white spaces off a string
14:35  JimmyTheKid: so "    hello     "
14:35  JimmyTheKid: become "hello"
14:35  lvh: not of that XEP though, of the XMPP-IM spec
14:35  lvh: JimmyTheKid: s.strip()
14:35  JimmyTheKid: trans?
14:36  Alberth: JimmyTheKid: that's not just leading white space. You should read about string methods
14:36  pythonirc1011: lvh: thanks -- didnt know you knew so much about xmpp.
14:37  Alberth: JimmyTheKid: that saves you a lot of questions
14:37  pythonirc1011: lvh: indeed 7.3 is what pidgin uses...verbatim..and works.
14:37  pythonirc1011: actually its section 8 i think
14:38  lvh: Um, no
14:38  lvh: http://xmpp.org/rfcs/rfc3921.html#roster
14:38  lvh: If an available resource does not request the roster during a session, the server MUST NOT send it presence subscriptions and associated roster updates.
14:38  lvh: Now, my XMPP is rusty, it's been a few years
14:38  lvh: *But*
14:39  lvh: IIRC eating that stanza is what it's supposed to use, because subprotocol information should *not* leak down
14:39  pythonirc1011: lvh: I've tried sending presence, twisted.words doesnt get back the subscribe -- pidgin does -- I've even tried matching the presence stanzas
14:39  lvh: pythonirc1011: By "Um no" I meant "I'm not talking about section 8"
14:39  lvh: I'm taling very specifically of 7.3
14:40  lvh: pythonirc1011: Does your code use PubSubService or PubSubClient, or a similar subprotocol implementer?
14:40  pythonirc1011: lvh: sorry, its section 6.1-- that does not work...
14:41  lvh: pythonirc1011: Yes, my point is that because of the (admittedly not entirely sensible) stipulation of 7.3, "not work" might actually mean "is correct"
14:41  pythonirc1011: lvh: My code just chats...and its able to without any problems. I also can get rosters. Accept friends. Send friend requests...The only thing that doest work is when I send a subscribe, twisted eats it away when the xmpp server sends it to the other side..do i make any sense?
14:42  lvh: Yes, I think I understand the problem
14:42  DeadPanda: are there any built-in collections with iterators that won't break (either skipping items or failing) if items are removed from the left of a list, or appended to its right?
14:42  lvh: I'm just trying to figure out if it's actually a bug or not
14:42  lvh: Actually, that vaguely rings a bell
14:42  pythonirc1011: whats a good mailing list to find things like this? especially since 5 years ago someone saw the same problem...cant believe anyone hasnt seen this since then.
14:43  lvh: If an available resource does not request the roster during a session, the server MUST NOT send it presence subscriptions and associated roster updates.
14:43  lvh: That's the part that makes me think that Wokkel is actually correct
14:44  pythonirc1011: i did request the roster...and i got everything except the "subscribe" stanzas...all the other IM Clients do get it.
14:44  lvh: pythonirc1011: You haven't answered my question yet about Service and Client and subprotocol implementations
14:44  lvh: aha
14:44  lvh: okay
14:44  Alberth: DeadPanda: I wouldn't bet on it. Why not make a new collection instead of modifying the one you iterate over?
14:44  nosklo: pythonirc1011: "all other IM clients get it" is not very relevant
14:45  pythonirc1011: nosklo: It means that pidgin is getting it from my xmpp servers...and they are less likely to be at fault. Initially I was blaming the xmpp server or my code...
14:45  lvh: pythonirc1011: All other clients might be doing something else, hence my hesitation.
14:45  pythonirc1011: lvh: I started by modifying the twisted example xmpp client...just added things to it
14:46  lvh: (spec by implementation is pretty dangerous, it wouldn't be the first time that stuff just blatantly ignores it because it's easier, see also: facebook chat)
14:46  lvh: pythonirc1011: So the answer is "no"?
14:46  pythonirc1011: I guess what the example does, i do too.
14:46  DeadPanda: Alberth, well, ideally the iterator would have to be aware of the extension to the list
14:46  nosklo: pythonirc1011: does the example use a subscribe stanza?
14:46  DeadPanda: Alberth, it'll probably be easier to just wrap up the functionality myself
14:47  lvh: Okay, let me rephrase to a non-open question: "Does your code contain the sequence of bytes PubSubClient or PubSubService"
14:47  pythonirc1011: lvh: no
14:47  pythonirc1011: lemme check again, but as far as i've seen, no
14:47  nosklo: getattr(foo, 'PubSub' + 'Service')
14:47  lvh: pythonirc1011: Right, okay. So, in that case, I'm not sure if it's actually a bug or not -- it might be, it might not be
14:48  pythonirc1011: lvh: I use XMPPClientFactory from twisted. It perhaps actually does that part?
14:48  pythonirc1011: lvh: http://mimir.ik.nu/trac/changeset/51/trunk/mimir/monitor -- it seems those words are used in XMPPClientFactory...?
14:49  Alberth: DeadPanda: if the order does not matter, you can do something like    todo = [ ... ] ; while todo != []:  y = todo.pop(); ...# do stuff with todo and y
14:49  lvh_: Woo flakey internet connections
14:49 --- lvh_ is now known as lvh
14:49  pythonirc1011: lvh: dont know if you got this: http://mimir.ik.nu/trac/browser/trunk/mimir/monitor/client.py?rev=51 -- I was modifying this... http://mimir.ik.nu/trac/changeset/51/trunk/mimir/monitor -- it seems those words are used in XMPPClientFactory...?
14:50  DeadPanda: Alberth, sadly, the order does matter - basically I've got a set of Buchi automata I'm using to recognise sequences within the string (list)
14:51  pythonirc1011: lvh: These seem to be classes hidden beneath the XMPPClient -- PubSubClient...
14:51  DeadPanda: Alberth, but the list's being generated so fast, I need to prioritise processing the automata, so a) it's helpful to update the list in-place, and b) I need to account for automata being pushed off the left-side of the list
14:52  lvh: pythonirc1011: Right: either you do that manually or the default XMPPClient does it for you -- unfortunately XMPPClient was written after I stopped using XMPP, so I don't know *how* it exposes subscriptions
14:52  DeadPanda: Alberth, and obviously, operations will only ever happen at the left or right-most sides of the list
14:52  pythonirc1011: lvh: I mainly use  factory = client.XMPPClientFactory(jid,password) and then add functions to it....factory.addBootstrap(xmlstream.STREAM_CONNECTED_EVENT,self.connected) ...
14:52  pythonirc1011: lvh: Its pretty simple it seems. You add callbacks to events...Those in turn add call backs to events...events are mostly xmpp stanzas
14:53  Alberth: DeadPanda: collections.deque may be useful then, in combination with my  while-loop
14:53  lvh: pythonirc1011: That's what I'd expect, but apparently that doesn't work, and I don't know how it's *supposed* to work
14:53  DeadPanda: Alberth, sadly, I can't just pop the items being processed; the automata are at different points in the string and I need to keep at least some history because that's the interesting part of the output
14:54  DeadPanda: Alberth, *shrug* it's challenging :) thanks, anyway
14:54  pythonirc1011: lvh: xmpp_client.py : http://twistedmatrix.com/documents/current/words/examples/xmpp_client.py
14:54  Alberth: DeadPanda: seems like it indeed :)     Best solution seems to be managing an index yourself
14:55  DeadPanda: Alberth, yeah, when items are pushed off the list decrement the indices for all current automata positions
14:55  lvh: pythonirc1011: You should probably be using wokkel and not twisted.words' xmpp
14:56  lvh: pythonirc1011: Wokkel is basically t.words with a bunch of ralph's patches tacked on
14:56  lvh: (the problem is twisted demands code review and we didn't have anyone that understood XMPP)
14:56  lvh: other than ralph that is
14:56  DeadPanda: Alberth, it's a nightmare, there are hundreds of these lists in memory, each ~1000 items long; since performance actually is an issue here, as much as I like it, I'm wondering if Python's entirely appropriate
14:56  pythonirc1011: lvh: interesting...
14:57  lvh: pythonirc1011: Note: I don't know if that fixes your issue, obviously
14:57  pythonirc1011: lvh: This must be something that either i am doing wrong OR twisted.words has this problem for 5 years...And I'm still hoping its the prior.
14:58  Phazorx: hrm
14:58  Phazorx: lvh: could you take a look at
14:58  Phazorx: http://dpaste.com/332569/
14:58  anonnonaim: http://dpaste.com/332569/
14:59  anonnonaim: http://dpaste.com/332569/
14:59  anonnonaim: http://dpaste.com/332569/
14:59  anonnonaim: http://dpaste.com/332569/
14:59  pythonirc1011: and thanks for all the help. I'll just wait for ralph to return from vacation. If you know him, can you ping him about that ticket please? I dont think there are any other xmpp tickets in there in any case...
14:59  anonnonaim: sorry about that
14:59 --- ChanServ sets modes [#python +o lvh]
14:59 @lvh: anonnonaim: What the hell are you doing.
--- Log closed Wed Jan 19 14:59:34 2011
