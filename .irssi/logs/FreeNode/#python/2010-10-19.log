--- Log opened Tue Oct 19 00:00:01 2010
--- Day changed Tue Oct 19 2010
00:00  ezzieyguywuf: I will be using sin and cos but unless the sin and cos in numby/scipy is "optimized" compared to those found in math, I don't see how it can help.
00:00  exarkun: ezzieyguywuf: I suspect that's a really good fit for PyPy's JIT.
00:00  _Zappy_: habnabit, i just feel that developping in Python is very fast. Once Python executes too slow, profile it and see hwere the bottleneck is
00:00  habnabit: _Zappy_: Way to repeat what I just said
00:00  ezzieyguywuf: pypy looks interesting
00:01  adahlin: ezzieyguywuf, I can't speak of those functions in particular, but numpy is generally fairly optimized. you could always go old school and do look up tables
00:01  _Zappy_: habnabit, Forgive me for not reading all of your lines ...
00:01  ezzieyguywuf: I actually will be using lookup tables for airfoil data
00:01  ezzieyguywuf: forgot to mention that, so i/o to hdd is a factor
00:01  adahlin: how big are the tables?
00:01  ezzieyguywuf: _Zappy_: to be fare to habnabit, it was all of one line.
00:01  ezzieyguywuf: adahlin: I don't know, I haven't downloaded them yet :-P
00:02  ezzieyguywuf: I'm at the first stages of this prog, i.e. pen-and-paper
00:02  adahlin: haha, i doubt they are bigger than your memory, so you might not even have to go to the HD
00:02  ezzieyguywuf: well, they will be stored on my hd
00:02  ezzieyguywuf: I guess what you're saying is when I myfile = open('somefile', 'r'), it gets stored in memory?
00:02  ezzieyguywuf: makes sense.
00:02  adahlin: ezzieyguywuf, there's a lot of guys out there using scipy/numpy for giant data sets (stars and junk)
00:03  adahlin: ezzieyguywuf, you have to do more than that... that just opens the file.. you could just read it all into an array when you open it though
00:03  ezzieyguywuf: I guess I just find it hard to believe that a python module could make the code run any faster, given that it still has to use the python interpreter
00:03  daws: any way to easily override only the setter of a sublcass's property?
00:03  papna-work: Your C is already using lookup tables for sin and cos.
00:03  daws: leave the getter to the superclass
00:04  adahlin: ezzieyguywuf, a lot of the heavy lifting is done in c/fortran with in numpy
00:04  ezzieyguywuf: maybe I'm not giving credit where credit is due, but I imagine python with its interpreter is akin to starting your comp and waiting for the gui to popup and then pulling up a terminal emulator as opposed to just booting int cli.
00:04  fission6: KirkMcDonald or anyone else, is this an okay way to see if one dictionary has the same keys and values of another dictionary, all([d2[i]==d1[i] for i in d1.iterkeys()]) i'd have to wrap it in a KeyError block most likely but it seems to work
00:04  papna-work: daws: Use a property with a getter and a setter, where they both call other methods.
00:04  papna-work: daws: Probably on the superclass, calling a virtual getter.
00:04  raijin: would it help to use an older python with code from 2007
00:04  raijin: ?
00:05  pielgrzym: _, addresses = parser.parse_args() <- what does the underscore mean? Does it by chance say: ignore first element of the retured tuple?
00:05  papna-work: fission6: You want to test whether a dictionary is a subdictionary of another?
00:05  fission6: yes
00:05  fission6: both key and value
00:05  fission6: and for iterable values
00:06  KirkMcDonald: fission6: all(v == d2[k] for k, v in d1.iteritems())
00:07  fission6: nice
00:07  daws: papna-work: I think I see what you mean
00:07  papna-work: KirkMcDonald: http://paste.pocoo.org/show/277190/
00:07  papna-work: Erm
00:07  papna-work: fission6: http://paste.pocoo.org/show/277190/
00:07  verte: d1 == f2f
00:07  verte: d2 *
00:07  KirkMcDonald: Yeah, that'd do it.
00:07  adahlin: ezzieyguywuf, ehhh, sorta but not really. you can have python call c externals.. so the part of the code that's processor heavy gets run there quickly, but all the fluff around it can be written easily in python
00:08  adahlin: ezzieyguywuf, i'm in the aerospace industry and it's being used a decent amount
00:08  daws: papna: that'll work. thanks!
00:08  KirkMcDonald: all(v == d2.get(k, object()) for k, v in d1.iteritems())
00:08  fission6: coool
00:08  exarkun: ezzieyguywuf: Also, a lot of your program's performance will depend more on you than on the language you choose to implement it in.
00:08  papna-work: KirkMcDonald: Mine's better.
00:08  KirkMcDonald: papna-work: Sure.
00:09  verte: KirkMcDonald: d1 == d2
00:09  KirkMcDonald: verte: The idea is to check whether one dict is a subdict of the other.
00:09  verte: ah.
00:10  ezzieyguywuf: adahlin: that is good to hear, and heartening
00:11  papna-work: adahlin: What do you do?
00:11  fission6: thanks papna-work
00:12  adahlin: I'm a software engineer, but I work at a small engineering company that does a lot of contract R&D
00:13  papna-work: adahlin: What part of the industry?
00:13  papna-work: SBIR farm?
00:16  adahlin: papna, haha, you got it
00:16  adahlin: papna-work, (with the occasional sttr!)
00:17  papna-work: I used to work for a mostly-aerospace SBIR farm.
00:17  adahlin: papna-work, yeah... it keeps the work, uh, diverse
00:18 --- |kesselhaus| is now known as kesselhaus
00:22  admishra: hi
00:22  admishra: please help me out
00:22  habnabit: Never
00:22  admishra: i have downloaded a package of keylogger designed in python
00:22  admishra: then how to install this
00:22  admishra: ??
00:24  habnabit: If you can't figure this out, maybe you shouldn't be playing with keyloggers
00:24  admishra: yupp i'm playing 1st time
00:24  Yhg1s: admishra: this is a channel for helping you program in Python, not helping you with programs written in Python.
00:25  admishra: Yhg1s: i did not mean that
00:25  Yhg1s: I did.
00:26  admishra: actually there were editing script but i couldn't get the path there in my python libraries
00:26  admishra: thats why i did ask you
00:26  Yhg1s: I'm not sure what you asked.
00:26  Yhg1s: perhaps you should be more specific.
00:26  admishra: Yhg1s: sorry for such a silly help :(
00:26  Yhg1s: the only silly part so far is you not asking any actual questions.
00:29  admishra: i have to edit this file but it does not exist /etc/X11/xorg.conf/
00:29  admishra: instead i find xorg.conf.d
00:29  Yhg1s: admishra: that's not a Python question at all.
00:29  Yhg1s: you'll have to ask the author what he intended for you to edit, or your system administrator about the filesystem layout on your system.
00:30  admishra: during which i didn't find the section "module" to edit it
00:33  adahlin: admishra, this is a *nix/X11 configuration issue. not a python issue, you might have better luck in a more appropriate channel
00:33  Yhg1s: better yet, ask the author.
00:34  admishra: Yhg1s: well thanks for your quick replies :)
00:34  admishra: Yhg1s: yupp i got that
00:34  admishra: Yhg1s, adahlin thanks :)
00:34  tarpsocks: heh how useful is codingbat.com python exercises?
00:35  Somelauw: How many euler problems did you complete?
00:35  habnabit: tarpsocks: Not very
00:39  tarpsocks: Somelauw: I haven't completed any yet
00:44  sjuxax: If I have a thing that imports a thing and then that thing imports the thing that imports it, but the code paths don't collide at all (i.e. we import x for function y in the z and we import z for function u in x), does that sound dangerous?
00:44  Thiryal: sjuxax: Your sentence sounds dangerous, for sure.
00:44  comhero: what file in the python libs can i find the definition for intersection() in class Set
00:44  Yhg1s: sjuxax: it's often better to avoid it, yes.
00:44  Yhg1s: sjuxax: it will work as long as you don't reference things in 'x' or 'y' until both modules are done loading, but leaving the circular import means a *future* change may break the situation.
00:45  Yhg1s: sjuxax: it's better to avoid the circular dependency by refactoring things, possibly into a third module.
00:45  sjuxax: Right, I see. Thanks
00:46  Yhg1s: comhero: there's sets.Set, which would be the 'sets' module written in Python, and there's the builtin type 'set' (which is newer, and faster, and better) which is written in C.
00:46  Yhg1s: comhero: which would you like to see?
00:46  comhero: Yhg1s, sets.Sett
00:47  comhero: Yhg1s, found it in my 2.7 directory. thanks
00:48  verte: print inspect.getsource(sets.Set.intersection)
00:48  ghostrocket: how does one convert an integer to its binary equivalent? google returns a million different examples but my suspicion is there is already an easy way to do this in python
00:48  p3rror: hello
00:48  KirkMcDonald: ghostrocket: For what purpose?
00:48  p3rror: well my python script block
00:48  Yhg1s: ghostrocket: do you mean 'binary string representation'?
00:48  bob2: ghostrocket: as in for displaying to a user?  bin()
00:49  p3rror: when i do a strace i got that the script block at futex call system
00:49  p3rror: futex(0x6990d320, FUTEX_WAIT_PRIVATE, 0, NULL
00:49  p3rror: any idea ?
00:49  Yhg1s: p3rror: it's waiting on a thread or lock or mutex or semaphore.
00:49  ghostrocket: new html5 functionality allows javascript to submit binary data, packed as a string
00:49  ghostrocket: each byte is represented as an integer 0..255
00:49  ghostrocket: i'd like to unpack it
00:50  Yhg1s: ghostrocket: into what?
00:50  ghostrocket: a file on disk
00:50  Yhg1s: which bytes mean what?
00:50  bob2: surely your http server web thing gave you a byte string
00:50  Yhg1s: a file on disk also just contains a string, so you just write it.
00:50  p3rror: Yhg1s, yep great so the kernel set up a lock
00:50  Yhg1s: p3rror: no, your process did.
00:50  p3rror: Yhg1s, right
00:51  ghostrocket: it's not that easy because of how the js seems to be encoding the data
00:51  Yhg1s: ghostrocket: well, how does it seem to be encoding the data?
00:51 --- PythonNub is now known as ThePythonMaster
00:52 --- ThePythonMaster is now known as PythonNub
00:52  ghostrocket: honestly, i'm not exactly sure and i'm a bit off the reservation because this is fairly new (only works in chrome and FF4)
00:52  ghostrocket: but the documentation says it packs each byte into an integer
00:53  ghostrocket: i can successfully convert the raw post data to a byte array
00:53  ghostrocket: which makes sense
00:53  ghostrocket: and when i loop through, i can print numbers 0 to 255
00:54  ghostrocket: so i just want to write that data to disk somehow
00:54  ghostrocket: perhaps it's as easy as using the byte array?
00:54  Yhg1s: ghostrocket: ok, here's where you're losing us:
00:54  smcq: How do I get a reference to the function object of the currently executing function object?
00:55  Yhg1s: ghostrocket: a string *is* a bytearray. A string *is* an array of 'numbers 0 to 255', but represented as a string in Python.
00:55  KirkMcDonald: smcq: With its name.
00:55  Yhg1s: ghostrocket: furthermore, bytes sent over the wire or written to a file are also a string.
00:55  Yhg1s: ghostrocket: so where is this 'encoding' coming in? What is it you're actually receiving?
00:55  ghostrocket: it seems the js is doing the encoding
00:56  bob2: smcq: if you don't want to use the name, 'with difficulty'
00:56  Yhg1s: ok, but *what* encoding? What are you actually receiving?
00:56  ghostrocket: 1 sec brb apreciate the help
00:57  KirkMcDonald: ...
00:58  smcq: KirkMcDonald, I don't have the name
00:59  KirkMcDonald: smcq: You're in the function.
00:59  bob2: sure you do, it's < 10 lines up :p
00:59  KirkMcDonald: smcq: And Python is lexically scoped.
00:59  KirkMcDonald: smcq: Why don't you have the name?
01:00  smcq: the function isn't named, is one case, or it's been replaced at runtime
01:00  smcq: anyway, my actual goal is to grab the function object 2 levels up, but I figured I'd start with the easy case
01:00  Yhg1s: then things get very hard.
01:00  KirkMcDonald: smcq: Then give it a name, or assign it to a second name. Or perform the recursive call into the object that replaced it.
01:01  Yhg1s: the problem is that Python doesn't really have the function object, it has the code object.
01:01  Yhg1s: and the same code object can be tied to multiple function objects.
01:02  bob2: can that happen in normal use, or do you need to explicitly assign .func_code?
01:02  Yhg1s: bob2: it happens quite often. When the same 'def' statement gets executed multiple times, like with nested functions.
01:03  bob2: ahhh
01:03  smcq: sadly, I do weird things like define functions in loops
01:04  raijin: i do not
01:04  KirkMcDonald: smcq: Sounds like you want a closure, then.
01:04  raijin: so i need halps
01:04  bcj: Quick one: if I pickle a class, will the pickled output contain a definition of the class or just the instance?  I.e. can someone unpickle my class without my source file?
01:04  raijin: i am attempting to assist in the development of openindiana
01:05  Yhg1s: bcj: it contains the name of the class, as you imported it, and no.
01:05  KirkMcDonald: bcj: The object must be unpickled in the same environment which pickled it.
01:05  bcj: Cheers
01:05  raijin: the chm reader is broken and i know next to nothing about python, but the code is a few years old and i wondered if this code would run better using an older python
01:05  raijin: i try it
01:05  raijin: oh yea
01:06  raijin: my question was- how do you uninstall a python program?
01:06  Yhg1s: raijin: depends on how you installed it.
01:06  pantsman: just bal33t it
01:06  KirkMcDonald: pantsman: Use your words.
01:06  raijin: Yhg1s: with the setup.py
01:06  pantsman: (that's the technical term, right?)
01:07  Yhg1s: raijin: then there's no uninstall, you'll have to manually delete the things it installed.
01:07  ivan`: if you install again, distutils can make a list of the files it installs
01:07  raijin: Yhg1s: mkay
01:07  Shapeshifter: Mh. If anyone cares about this, archlinux now has python 3 as the default python with python2 being in an extra package. Not sure what to think about this. I was convinced pretty much nobody was using python 3...
01:07 * raijin scrolls 
01:07  ivan`: Shapeshifter: right
01:08  ivan`: Shapeshifter: does arch have signed packages yet?
01:08  Shapeshifter: ivan`: nah ._.
01:08  Shapeshifter: worst lacking feature ever
01:09  bob2: so /usr/bin/python is python3?
01:09  Shapeshifter: bob2: yep.
01:09  p3rror: Yhg1s, you there
01:10  Shapeshifter: bob2: not too much of a change because all of the packages in the "official" repos use the python2 package now, but it sure makes python 3 more prevalent
01:10  Shapeshifter: And any script you might have written with a /usr/bin/python shebang will now use python 3...
01:12  bob2: Shapeshifter: insane
01:13  Shapeshifter: yeah I'm pretty surprised
01:13  Shapeshifter: so, I'm not too wrong in thinking that pretty much no one uses python 3?
01:14  bob2: that's kinda unrelated to the above, which is that everyone else considers (and has for 19 years) 'python' to be python1/2
01:14  bob2: but dunno how prevalent it is
01:14  Shapeshifter: well just *that* isn't really an argument. just because stuff has been some way for a long time doesn't mean that it's important to keep it that way
01:14  Shapeshifter: some day, change arrives
01:15  bob2: of course it is important
01:15  Shapeshifter: just seems to me like it's kinda early
01:15  bob2: python3 is source incompatible with python 1 and 2
01:15  DigitalKiwi: Shapeshifter: this is python, where deprecated features still exist after like 8 years ;D
01:15  Shapeshifter: well they cared for a smooth transition
01:15  Shapeshifter: so it's no desaster
01:15  bob2: eh, they've broken every third party python program ever written
01:16 --- kibosh is now known as kibosh_
01:16 --- kibosh_ is now known as kibosh
01:16 --- whoever is now known as binkyTheClown
01:16  DigitalKiwi: Shapeshifter: want to try out freebsd with me? :D
01:16  Shapeshifter: DigitalKiwi: heh. I've been thinking about that for a while
01:17 --- binkyTheClown is now known as OptimusPrime
01:17  DigitalKiwi: me too, only before i was just "well i kind of want to try it" now it's like "well they seem to be screwing everything up"
01:17 --- OptimusPrime is now known as TinyWienie
01:18 --- TinyWienie is now known as whoever
01:18  Shapeshifter: I dunno. for now stuff seems to work out fine and I'm always for pushing forward...
01:18  Shapeshifter: For me it's more about the kernel
01:18  DigitalKiwi: freebsd is about as up to date as arch on oswatershed.org
01:19  kibosh: hmm.
01:19  Yhg1s: p3rror: if you have a question, just ask it.
01:19  DigitalKiwi: which is often broken but still
01:19  p3rror: Yhg1s, can you explain to me what make process set a lock accessing an address memory
01:21  Yhg1s: p3rror: I already did. threads, locks, semaphores, mutex, and anything that uses any of those directly or indirectly.
01:21 --- whoever is now known as whoever_
01:22  DigitalKiwi: Shapeshifter: only problem I see is my home is encrypted with luks+dmcrypt and i don't think that'll fly too well in freebsd ? :(
01:22  Shapeshifter: DigitalKiwi: I've got no clue.
01:29  sjuxax: DigitalKiwi: from what I can tell LUKS won't work with FreeBSD atm, but all the threads about it are old so you may want to check now. Incidentally, LUKS works on Windows ;)
01:33 --- whoever_ is now known as whoever
01:33  qwerty1793: hi, does anyone know if there's a python module for working with polynomials? things like detecting irreducibility, determining roots etc. thanks
01:34  vitorlobo: what's the method for reset the IDLE python mode? exist?
01:35  vitorlobo: mode interative
01:35  vitorlobo: python 2.6
01:37  bob2: qwerty1793: http://docs.scipy.org/doc/numpy/reference/routines.poly.html
01:38  _Zappy_: Hello. Sorry, but I had to run to a meeting after asking a cprofile and pstats question. I'll ask again ...
01:39  _Zappy_: Hello, does anyone know how to have pstats print a heirarchy structured procs list ?
01:39  _Zappy_: Like method A calls method B which calls method C. Have a result printed with B as child of A, C as child of B , etc. instead of one flat list
01:39  qwerty1793: bob2: is there anything more advanced? this cant detect irreducibility, factorize, work over unusual fields or calculate grobner bases
01:40  bob2: no idea
01:40  vitorlobo: what's the method for reset the IDLE python mode? exist? in interative mode?
01:40  Yhg1s: vitorlobo: I don't think anyone can figure out what that means, sorry.
01:40  Yhg1s: vitorlobo: what are you trying to ask?
01:42  vitorlobo: Yhg1s: clean the source of the interactive mode IDLE
01:42  vitorlobo: understand?
01:42  Yhg1s: vitorlobo: restart it.
01:42  vitorlobo: not clean? :P only restart? o.O
01:42  Yhg1s: yes.
01:43  vitorlobo: thanks =]
01:43  Yhg1s: If I understand what you are asking, that is.
01:44  _Zappy_: No pstats feedback ?
01:45  _Zappy_: Sigh ...
01:46  Yhg1s: _Zappy_: just take a look at the pstats module. it's not really complicated code.
01:47  _Zappy_: Yhg1s, Thought I might ask first before re-inventing the wheel. Thanks.
01:55  jmcantrell: ok, so with argparse, i give a class to formatter_class, but how do I pass arguments to __init__ for the formatter class?
01:56  fencepost: Do I have to do anything to register my exception type?
01:56  Yhg1s: fencepost: nope.
01:56  fencepost: I'm having the following error:
01:56  fencepost: when I have the line: "except InProgressError as e:" I get  global name 'InProgressError' is not defined
01:57  bob2: fencepost: you need to import InProgressError
01:57  bob2: fencepost: it's a class like any other
01:57 --- whoever is now known as cyclops
01:57  fencepost: but I can execute the line "raise InProgressError" no problem
01:57  Yhg1s: jmcantrell: you can't. formatter_class is called with the 'prog' keyword.
01:57  Yhg1s: fencepost: then the InProgressError name is known when you raise it, but not when you try to catch it.
01:57  fencepost: *raise InProgressError("foo")
01:58  bob2: fencepost: http://fpaste.org/ the file, perhaps the import was in a function or something
01:58  Yhg1s: fencepost: it's all really just variable lookup.
01:58  jmcantrell: Yhg1s: i need to increase max_help_position for ArgumentDefaultsHelpFormatter. is there no way to change this?
01:59  Yhg1s: jmcantrell: subclass ArgumentDefaultsHelpFormatter to have this different default, or pass a function to formatter_class that then calls ArgumentDefaultsHelpFormatter with the arguments you want to pass.
01:59  jmcantrell: Yhg1s: thanks
02:00 --- Seahorse_ is now known as Seahorse
02:01  fencepost: Yhg1s: I'm confused because I have the following:raise InProgressError("foo")
02:01  fencepost: myfunction()
02:01  Yhg1s: fencepost: then the 'InProgressError' name is known at that point.
02:02  bob2: http://fpaste.org/ and you can have a solution in 15 seconds
02:02  fencepost: and myfunction() throws a name error
02:02  Yhg1s: and not at the point you're catching the exception.
02:02  Yhg1s: fencepost: pastebin your code and the traceback.
02:02  fencepost: trying to avoid that - its like 5 files
02:02  Yhg1s: so only paste the relevant bits.
02:03  Yhg1s: When you catch the exception, where are you expecting the code to get the 'InProgressError' name from?
02:03  fencepost: I've defined it at the very beginning of my script
02:03  Yhg1s: well, that means it's defined in that module.
02:03  jmcantrell: Yhg1s: but if i want the max_help_position to be based on a variable, how would that function look?
02:03  Yhg1s: you said 5 files. that means (at least) 5 modules.
02:05  Yhg1s: jmcantrell: 'def foo(prog): return argparse.ArgumentDefaultsHelpFormatter(prog=prog, max_help_position=...)'
02:05  jmcantrell: Yhg1s: yeah, i got that part, but how do i give the max_help_position to foo()?
02:06  Yhg1s: jmcantrell: depends on where you *have* it. Perhaps you want to use a nested scope, or grab it from some other place in the function.
02:06  jmcantrell: Yhg1s: yeah, i guess nested is the only way in my case
02:14  chrysanthemum: Hi all, is there a good interactive python console -- one that does syntax highlighting, autocompletion etc?
02:14  bob2: bpython
02:14  jmcantrell: Yhg1s: is there anyway to change the "optional/positional arguments" text to something else?
02:14  chrysanthemum: ty bob2
02:16  Yhg1s: jmcantrell: no idea, sorry.
02:16  jmcantrell: Yhg1s: np. thanks anyway
02:18  chrysanthemum: are there any good python plugins specifically for vi?
02:19 --- Seahorse_ is now known as Seahorse
02:19 --- cyclops is now known as textbook
02:20  ivazquez|laptop: You mean vim?
02:20  chrysanthemum: ivazquez|laptop, yes vim
02:20  cbane: Licensing question: I have a script that uses a GPLv2 library (specifically, mutagen: https://code.google.com/p/mutagen/), but I currently have my script licensed under the GPLv3+. Do I need to relicense my script to GPLv2+?
02:21  Yhg1s: cbane: you'd have to ask a lawyer.
02:21  Yhg1s: or, the FSF.
02:21  ivazquez|laptop: There's talk that the GPL linking clause doesn't apply to Python, but I am not a lawyer.
02:21  synx`: I am also not a lawyer, and I approve that message.
02:22 * ivazquez|laptop licenses his stuff LGPL2.1+ anyways, to avoid the whole ball of wax
02:23  kibosh: synx`: Are you learning c as well as python?
02:23 --- textbook is now known as whoever
02:25  t1l7: good evening (GMT -3)
02:27  raijin: Yhg1s: thanks
02:29  magicblaze0071:  in eclipse+pydev, how does one comment  out a selection? still cant find it...
02:30 * ivazquez|laptop hugs geany
02:32  Dulak: magicblaze0071: you need to practice your google-fu.  Highlight the block, right-click, choose comment/uncomment from the context menu
02:33  vitorlobo: exist women working with python programming for here? :P i'm curious
02:33  Dulak: magicblaze0071: ctrl-\ and ctrl-/ are the keybinds
02:34  magicblaze0071: Dulak: the context menu doesnt show comment/uncomment on my eclipse for some reason!
02:34  Dulak: you have to have entire lines highlighted for it to work any partial lines and it doesn't give the option
02:35  magicblaze0071: Dulak: do you have a pointer to where i can find this info on the web? The keybindings do work. Thanks
02:35  Dulak: magicblaze0071: http://www.rossenstoyanchev.org/write/prog/eclipse/eclipse3.html
02:35  magicblaze0071: Dulak: Perhaps that was my problem. That is a bug?
02:35  Dulak: Yeah it's a known issue I guess, scheduled for fix in the next version of eclipse
02:36  magicblaze0071: Thanks.
02:36  bob2: that's annoying, in emacs M-; toggles block commenting
02:36  magicblaze0071: I thought these key bindings were for java and pydev redefines them...i guess not.
02:36  Dulak: magicblaze0071: http://help.eclipse.org/helios/index.jsp?topic=/org.eclipse.cdt.doc.user/tasks/cdt_t_comment_out.htm
02:37  Gorroth: mmmm, love emacs M-;
02:38  magicblaze0071: I like eclipse now :)
02:38  Dulak: I think pydev just makes all the specifics python, doesn't change the keys at all that I remember, just makes them apply the python specific bits
02:38  Gorroth: also like CEDET for emacs but have only just started using it
02:38  Gorroth: so i pretty much suck at it
02:41  cbane: "Open source programmers have an awesome resource available to them in the Software Freedom Law Center. Unfortunately the only answer they were able to give me to the question 'Does a Python import on a GPL library invoke the GPL?' was 'maybe', as there is zero legal precedent or case law for it."; 1st comment here: http://jacobian.org/writing/gpl-questions/
02:41  cbane: ung
02:42  Dulak: the law sucks like that, it's all speculation till a judge makes a ruling and sets precedent.
02:43  cbane: i think i'll go ahead and relicense, just to be safe
02:45  kosh: my guess would probably be yes if that program could only work with that library
02:46  cbane: my script transencodes flac files to mp3, and uses that library to copy the metadata
02:46  kosh: since linking to a gpl library at runtime will still put your program under the gpl if it is specific to that library, if lots of libraries with the same interface can be swapped out then it did not apply since that was considered an interface
02:47  cbane: so it has a fairly fundamental dependancy on it
02:47  kosh: then it would probably fall under the gpl
02:47  kosh: which is the intent
02:48  cbane: i've already put my script under the GPLv3+, it's mainly a question of whether i should relicense to GPLv2+
02:48  cbane: and since the library just says GPLv2, i'll go ahead and to it to be safe
02:49  vitorlobo: exist women working with python programming for here? :P i'm curious
02:49  thunderbolt: cbane: GPL v3 and GPL v2 are incompatible, so unless the library has the "or any later version" they can't be linked.
02:49  _habnabit: Don't you just love the GPL~?
02:49  papna: thunderbolt: "linked"?
02:50  vitorlobo: hauhauhaa
02:50  Dulak: It's great, like a legal virus.
02:50  cbane: yeah, i knew they were incompatible, my main question was if "import mutagen" counted as linking
02:50  Dulak: It's quite nifty imo
02:50  _habnabit: Maybe if you don't care about freely releasing your code it's nifty.
02:50  thunderbolt: papna: "Combined" *waves arms*
02:50  bob2: vitorlobo: perhaps, but this is a channel for talking about python itself
02:51  thunderbolt: cbane: The most conservative interpretation is to consider imports "linking".
02:51  papna: It turns out that the GPL was written with a fairly specialized software packaging model in mind.
02:51  KirkMcDonald: papna: Meaning C.
02:51  KirkMcDonald: And things that smell like C.
02:52  exarkun: Yea, man, C.  What an obscure corner case.
02:52  papna: Actually, yeah, it is.
02:52  Tim1357: How can I read my mail with python? (The mail that is put in my mail folder locally)
02:53  Tim1357:  /var/mail/
02:53  bob2: Tim1357: http://docs.python.org/library/mailbox.html
02:53  bob2: (read the warning)
02:54  KirkMcDonald: I see an opportunity for someone to write a context manager.
02:56  papna: cbane: That link is wow.
02:59  papna: cbane: hahaha "Mir Nazim:
02:59  papna: Great list of question. I am a noob when it comes to legal talk. It would be great if you would turn this into an FAQ once you get answers to these questions.
02:59  papna: "
03:00  cbane: i mostly skimmed over the later questions, since they quit talking about python, but i think most of them are fairly settled
03:00  exarkun: cbane: Except you can't settle licensing questions on a mailing list.
03:01  shugotenshi: LOL
03:01  papna: cbane: They're really good.
03:01  cbane: yeah, i mostly linked it because the first commenter said that that he hadn't been able to get a firm answer out of the SFLC
03:02  mordy: still trying to figure out how to debug my memory usage all over my packages
03:02  mordy: according to heapy my program uses 150MB on load without me even writing much code
03:03  mordy: i'm just checking after various import statements, very little initialization
03:10  mar77i: hi there python!
03:10  phayte: Hi mar77i
03:12  mordy: so what's the "right" way tos ee how much my application is using?
03:13  mar77i: say, I just switched to py3, just jumping into the deep end. why is petcat.stdin.write(((" %5i " % int(i)) + self.basic[i] + "\n").encode()) explicitly asking for bytes, while sys.stdout.write() is asking for str explicitly :S
03:13  _habnabit: mar77i, what's petcat?
03:14  mar77i: a subprocess object
03:14  thunderbolt: mordy: What's your goal. Do you have a target system you want to use it on?
03:14  _habnabit: mar77i, pipes can only have bytes written to them.
03:14  _habnabit: mar77i, sys.stdout has its encoding divined from $LANG
03:14  mordy: i'd like to keep it below 100MB if possible
03:14  mordy: it's a desktop chat client
03:14  _habnabit: mar77i, but pipes have no analogue.
03:15  thunderbolt: mordy: Why? Did you set that goal arbitrarily?
03:15  mar77i: *facep...
03:15  mar77i: *headscratch*
03:16  mordy: it's just a limit i think is reasonable considering what it does
03:17  mordy: it's something i would look at if i were considering which application to use, for example
03:17  thunderbolt: mordy: Eh, it probably matters more how much that stuff has to be paged in and out.
03:18  mar77i: _habnabit: there's no way to print out just bytes?
03:18  thunderbolt: Of course, you're talking to someone who has a 24 GB workstation, so such a trifle as 130 MB is nothing ;-)
03:18  _habnabit: mar77i, I don't know what that means
03:18  mordy: i have 12GB to use too, and will probably upgrade to 24 soon
03:18  mordy: but i'm aware my users will not have such luxury
03:19  domino14: how do i pass a number in by reference? does it not change because a number is immutable?
03:19  mar77i: _habnabit: my code is supposed to output binary data. I'm piping to hexdump if I need to have a look at it or usually redirect it to files.
03:19  thunderbolt: mordy: So, the real question is: How does your chat client perform and interact with other applications on a low-end system?
03:19  mordy: the most low-end system i have is a macbook pro, on which it seems rather decent
03:19 * thunderbolt nods
03:19  mordy: let me see how much memory usage it reports, actually
03:19  _habnabit: mar77i, okay, so, what's the issue?
03:20  _habnabit: domino14, python only has 'pass by value.
03:20  _habnabit: domino14, no pass by reference.
03:25 * mordy wishes Qt didn't absolutely suck on mac
03:25  thunderbolt: It does? :(
03:26  mordy: horribly.. from using it, it seems pre-alpha
03:27  mordy: i mean it might have no problems displaying simple dialogs.. but anything remotely complex and poof
03:27  papna-work: domino14: Python always passes things the same way.
03:28  papna-work: domino14: The terms "pass by value" and "pass by reference" tend only to confuse.
03:29  Dulak: I really really really like python.
03:29  thunderbolt: Thanks good! :)
03:30  mordy: with such enlightening error messages such as :
03:30  tdelam: python sucks but we have a love/hate relationship.
03:30  tdelam: :)
03:30  mordy: 2010-10-18 18:30:12.696 Python[68668:a0f] error in CoreDragDispose: -1850
03:31  papna-work: Python does suck.
03:31  tdelam: Indeed, but it's like the girl who got away, you just keep going back.
03:31  thunderbolt: I've come to accept python's foibles more than, say Java's.
03:31  papna-work: No, it's like the wife you settled for.
03:31  tdelam: Hahah
03:32  papna-work: You were in love at the time.
03:32  tdelam: perfect
03:32  papna-work: Completely blind to even her most glaring faults.
03:32  papna-work: But at this point, you're so close and it's not like you can do better.
03:32  Dulak: I'm still in the honeymoon phase I guess.
03:33  tdelam: Great stuff papna-work. The wife is glaring at me curious as to why I'm laughing at my laptop.
03:33  papna-work: Besides, her health insurance is better than yours and you don't want to kids to grow up.
03:33  tdelam: haha
03:33  papna-work: So you start the late nights, excessive drinking.
03:33  papna-work: Become colder and distant.
03:33  Dulak: You know the honeymoon is over when she glares at you for laughing.
03:33  papna-work: The kids are growing up without a father anyway.
03:33  tdelam: hahahahah
03:34  tdelam: I sense a big hate with papna.
03:34  Dulak: 'how dare you get to laugh without me!'
03:34  papna-work: You know it's all true, but even at the intervention you tell everyone you just like to have a good time.
03:34  mordy: hrrm.. on all three platforms i've tried it does seem to reach about 100MB
03:34  tdelam: then you get super() slapped when you get out of line.
03:34  mordy: i have no idea why heapy prints out these monstrous numbers
03:34  tdelam: the hate deepens
03:36  tdelam: papna-work: Do you have any secret lovers besides Python?
03:36  tdelam: you're model-wife; if you will :)
03:36  sku11knight: html...
03:36  thunderbolt: mordy: I haven't used heapy in a while, but I'd bet some of it has to do with the instrumentation.
03:36  tdelam: hah
03:36  tdelam: you guys are a riot in here.
03:37  papna-work: tdelam: Well, I had this one night stand with Haskell once.
03:37  mar77i: oh found it in the docs :)
03:37  papna-work: tdelam: You're asking if I know of a language better than Python?
03:37  thunderbolt: Haskell makes my brain melt.
03:37  tdelam: papna-work: Yep. I've been here for a while, never really picked at that question.
03:37 * thunderbolt wants to learn OCaml, though.
03:37  mordy: holy crap that was depressing
03:37  mar77i: btw, does anyone know what I have to do with my type(dict) == types.DictType test?
03:37  mar77i: thunderbolt: lol
03:37  papna-work: tdelam: Don't really know of one.
03:37  tdelam: I believe Ruby was a favourite among Pythoneers.
03:37  Dulak: I've been considering erlang for a little piece on the side myself.
03:38  papna-work: tdelam: Eh, Ruby and Python has mostly the same faults.
03:38  mordy: i like python.. glad i learned it
03:38  papna-work: mar77i: Don't typecheck. Know a priori how an object works.
03:38  mordy: it's got a library for anything under the sun
03:38  tdelam: :)
03:38  mordy: might have to learn perl soon
03:38  papna-work: tdelam: Python has a wider scope of use in its community.
03:39  tdelam: Oh definitely.
03:39  sku11knight: my brother forced me to learn python.
03:39  Dulak: I started on perl, it's pretty unique.
03:39  papna-work: tdelam: And some of the shared faults are more encouraged in Ruby.
03:39  mordy: well, most people jsut mean PCRE when they say perl
03:39  Dulak: Some butt-ugly code from perl
03:39  papna-work: mordy: They do
03:39  papna-work: ?
03:40  tdelam: I started on Python back in 2001, went to Perl, had a one night stand with c and got deathly sick but always came back to Python.
03:40  mordy: well, at least from my experience. i haven't done a global survey or anything
03:40  thunderbolt: My first was JavaScript, then C++, then python. After that I learned C and java.
03:40  mar77i: papna-work: ouch: it's my symbol stack dictionary wrapper... I'll paste it if I can't make it dict based. give me a minute, ok? :)
03:41  tdelam: I won't mention my 4 year with C# (ASP.NET); that is a piece of my life that has been shoved to the deepest dark corner of my brain.
03:41  papna-work: thunderbolt: print sorted(thunderbird.languages())
03:41  papna-work: *bolt
03:41  papna-work: I made you into cheap wine for a moment.
03:41  thunderbolt: Hehehehe
03:42  thunderbolt: Sorted by what criteria?
03:42  papna-work: print sorted(thunderbolt.languages(), key=goodness)
03:42  tdelam: hehe
03:42  tdelam: [-1] :P
03:43  thunderbolt: So, I'd say the following, based on my work: Python, JavaScript, C, Java, C++
03:43  Dulak: Perl, PHP, Javascript, Applescript, AutoIT, Python in order learned
03:43  thunderbolt: However, Python and Javascript have disjoint domains (in my experience) and C is well, C.
03:43  papna-work: thunderbolt: I have to agree with all or almost-all of that.
03:44  tdelam: Interesting.
03:44  _habnabit: thunderbolt, yeah, I was going to say, it's a sensible order but it doesn't *mean* anything.
03:44  papna-work: _habnabit: Pffft.
03:44  tdelam: I suspected there would be more Perl -> Python coders.
03:44  thunderbolt: Yup.
03:44  tdelam: Mind you there are only 4 out of 714 talking about the languages learned, but still.
03:45  Dulak: perl to php is much more common, since cgi sucks in perl and the web got real big, real fast and php being a DSL got to ride that wave
03:45  _habnabit: Dulak, s/is/was/
03:46  thunderbolt: Another thing is that sometimes languages are okay, but it's just the horrible libraries associated with them.
03:46  thunderbolt: Java could be a livable language, if it wasn't for some of the god damned horrible libraries.
03:46  _habnabit: Nah.
03:46  tdelam: Dulak: I never used perl for web back then, infact I barely had the internet to even visit the awesome "web". I had a lot of fun messing with FreeBSD and jailed shells and just basically messing about with the system.
03:46  _habnabit: If anything, the libraries are the only decent part of java.
03:46  DigitalKiwi: scala!
03:46  papna-work: I don't know Java very well, but many of its design attributes seem misguided.
03:46  _habnabit: It's way too full of boilerplate.
03:46  Dulak: I look at java and feel bad for qwerty typers, that is one verbose language
03:47 * thunderbolt nods
03:47  thunderbolt: DigitalKiwi: Yes, Scala looks pretty nice.
03:47  tdelam: Much like C#, thisCanGetReallyAnnoying = new AnotherreallyAnnoyingName(string followedByAnother);
03:47  Dulak: tdelam: I got lucky being brought up in a unix shop and as the young guy I got thrown the crap scripting jobs which perl excelled for at the time
03:48  tdelam: Yep, was a lot of fun.
03:48  thunderbolt: tdelam: And add some generic types! ReallyBigClass<Type1, Type2> = new ReallyBigClassImplemenation<Type1, Type2>();
03:48  dabbish: I need to know how many months have passed since a perticular date to today. E.g 2009-08-01 and 2010-10-18 = 14 months. How do I do that with Python?
03:48  tdelam: thunderbolt: ya :( Generics was when I left that world, C# 3.0 I believe when it was first added.
03:49  thunderbolt: dabbish: Probably with a timedelta object and subtracting date times.
03:49  magicblaze0071: anyone understands how to check whether an element is present in an xml for this object = http://twistedmatrix.com/documents/8.2.0/api/twisted.words.xish.domish.Element.html ?
03:49  dabbish: thunderbolt: problem is that every month has different number of days
03:49  tdelam: When I left they were using a lot of List<T> from the built in classes.
03:49  dabbish: timedelta.month doesn;t exist
03:49  _habnabit: dabbish, dateutil.relativedelta
03:49  thunderbolt: dabbish: http://labix.org/python-dateutil ?
03:50  DigitalKiwi: yes
03:50  Dulak: dabbish: datetime.timedelta
03:50  _habnabit: Dulak, not quite.
03:50  _habnabit: Dulak, that's only for absolute deltas.
03:52  mar77i: in python 2.x sorting a list of strings consisting of digits resulted in '10', '100', '2', '20'... this has changed for 3.0, right?
03:52  _habnabit: Nope.
03:52  _habnabit: Changing that wouldn't make sense.
03:52  Dulak: _habnabit: nifty, I am gonna refactor some stuff
03:54  dabbish: ok thanks for the tips guys, gonna look into relativedata
03:58  Dulak: I wish we did time in base 2 or base 10, so many edge cases with the way we do time
03:58  Dulak: Damn whoever invented the double 12 hour clock
03:59  _habnabit: Timezones are worse.
03:59  thunderbolt: Daylight savings time is worser.
03:59  thunderbolt: Also, GPS time.
03:59  thunderbolt: Why couldn't they just use universal atomic time?
03:59  thunderbolt: They're like, 17 milliseconds different or some nonsense.
04:00  Dulak: although base 12 is nifty, time doesn't exactly qualify
04:03  amikrop: Hi, what do I need to define for controlling my_object[some_key] ?
04:03  avalon2: Greetings
04:04  papna-work: amikrop: __getitem__ for getting.
04:04  papna-work: amikrop: __setitem__ for setting.
04:04  amikrop: papna: ok, thanks
04:04  papna-work: amikrop: You're not inheriting anything, are you?
04:04  amikrop: papna: object
04:04  papna-work: Perfect.
04:05  avalon2: This is a tricky one: Given a class, how would I get the names of the arguments in the __init__ method?
04:05  papna-work: avalon2: Why would one do that?
04:06  thunderbolt: avalon2: Something in the inspect module?
04:06  papna-work: avalon2: One would avoid using inspect.getargspec etc on Foo.__init__.im_func
04:08  tnzr: hey guys, say I do something like: answer = raw_input("Input: ")   ... say the next time through a loop, I prompt them again, but if they just hit enter, is there a way to make it use the answer from before?
04:08  avalon2: I want to write a decorator that automatically assigns the arguments handed to a class to attributes on the class
04:08  coderanger: Using either seutptools or distutils (or heck, distribute) is there any way to include data files that aren't in a package?
04:08  coderanger: As in a data file at the same level at setup.py itself
04:08  _habnabit: coderanger, with sdist or bdist?
04:08  papna-work: tnzr: Sure. You'd have to implement this yourself.
04:08  coderanger: sdist
04:08  avalon2: so:  a =  MyClass("hello"), where __init__(self, title, extra=None, extra2=None)  means  a.title  == "hello"
04:09  papna-work: avalon2: =(
04:09  tnzr: papna-work: would I just check for "\n"?
04:09  _habnabit: coderanger, MANIFEST.in
04:09  tnzr: or check for nothing? :)
04:09  tnzr: like ""?
04:09  coderanger: _habnabit: Trying that, it isn't working
04:09  avalon2: I'm tired of doing: self.name = name, self.colour = colour
04:09  papna-work: tnzr: `if x` or `if x == ""`
04:09  coderanger: _habnabit: It gets the data files in the package, but not the top level stuff
04:09  _habnabit: coderanger, try being more vague.
04:09  tnzr: papna-work: ok sweet thanks
04:09  papna-work: tnzr: raw_input doesn't give you the \n
04:09  coderanger: buildout.cfg is next to setup.py
04:10  coderanger: How do I make my sdist include that file
04:10  tnzr: cool that makes it easy :)
04:10  avalon2: but now it's mostly an interesting problem
04:10  coderanger: "include buildout.cfg" in MANIFEST.in doesn't do it
04:10  coderanger: Nor does package_data={'': ['buildout.cfg']}
04:10  avalon2: It is inspect.getargspec
04:10  avalon2: thanks papna-work
04:10  papna-work: avalon2: =(
04:11  avalon2: papna-work: You've just made Baby van Rossum cry
04:11  avalon2: :)
04:13  coderanger: There doesn't seem to be any way to force setuptools (or anything else) to include a data file that isn't in a package that is in the setup list
04:13  DiesIgne: Need help
04:13  DiesIgne: I fail much
04:13  DiesIgne: I need help making a bot
04:13  papna-work: DiesIgne: What kind of bot?
04:13  DiesIgne: I forgot almost ALL of using python
04:14  DiesIgne: An Irc bot that kicks users if they cuss
04:14  _habnabit: coderanger, MANIFEST.in
04:14  DiesIgne: I know its possible, there was one once
04:14  _habnabit: DiesIgne, why the fuck would you want that
04:14  papna-work: DiesIgne: Don't make that bot.
04:14  DiesIgne: _habnabit, for power on a chan
04:14  DiesIgne: Op elections soon
04:14  coderanger: _habnabit: http://paste.pocoo.org/show/277255/ That is what I have now. It doesn't work.
04:14  DiesIgne: Please just help me?
04:15  _habnabit: DiesIgne, docs.python.org/tut
04:15  DiesIgne: Thank you MUCH
04:15  _habnabit: coderanger, what is the file that's not being included?
04:15  coderanger: _habnabit: All 3 buildout configs
04:16  DiesIgne: Is OT discussion permitted here?
04:16  kaitlyn:  /win 43
04:16  _habnabit: coderanger, `rm -rf build dist && python setup.py sdist`
04:16  _habnabit: coderanger, pastebin the full output of that.
04:16  _habnabit: DiesIgne, no.
04:16  DiesIgne: Ok
04:17  DiesIgne: I will idle in case I need further assistance
04:18  coderanger: _habnabit: http://paste.pocoo.org/show/277257/
04:19  _habnabit: coderanger, oh, I know what it is
04:19  _habnabit: coderanger, rm -F MANIFEST and try again.
04:19  _habnabit: -f
04:19  coderanger: No such file, there is a sources.txt in egg-info though
04:20  sku11knight: is there anyone thats cool with letting me private chat them about this problem im having in python?
04:20  _habnabit: Are you invoking setuptools.
04:20  _habnabit: sku11knight, why can't you ask the channel?
04:20  coderanger: _habnabit: Yes, I am using setuptools
04:21  sku11knight: _habnabit, i dont know terminology well enough to make it not sound retarded and i dont want to spam anyone.
04:21  papna-work: sku11knight: The best etiquitte is to ask here.
04:22  Dulak: It's a support channel, and we all started at some point.  Nobody is gonna insult you for what you don't know.
04:24  sku11knight: Righto then. My code as it stands right now is here http://pastebin.ca/1966422 I was at the pygame channel before but that place is vacant. All i'm trying to do right now is make the variable oneletter get +1 every x amount of seconds.
04:24  mar77i: umm, I'm overriding dict's __setitem__ function and got a recursion. what's the right way to assign stuff?
04:25  mar77i: self.__base__.__setitem__(self, key, value) ?
04:25  _habnabit: mar77i, not even close.
04:25  _habnabit: mar77i, why are you subclassing dict?
04:25  coderanger: mar77i: super(MyClass, self).__setitem__(key, value)
04:26  papna-work: mar77i: Stop inheriting dict.
04:26  papna-work: There are no worthwhile reasons to inherit dict.
04:26  coderanger: Also use a collections class
04:26  papna-work: mar77i: Perhaps you want a class whose instances have a dict?
04:27  mar77i: papna-work: you're totally right. I don't want to be such a bad programmer using complex stuff like that...
04:28  _habnabit: coderanger, a what
04:28  papna-work: _habnabit: He means "Inherit one of the abstract base classes in the collections module."
04:28  coderanger: _habnabit: ABC from the collections module, often when you want when you start subclassing builtins
04:28  _habnabit: papna-work, I was hoping he didn't and was waiting for him to correct himself.
04:28  _habnabit: papna-work, alas.
04:28  pigdude: papna, django has stuff that inherits dict :^)
04:29  papna-work: _habnabit: It's not awful advice.
04:29  panfist: .j #linux
04:29  panfist: sorry!
04:29  papna-work: pigdude: If Django jumped off a bridge, would you too?
04:29  _habnabit: pigdude, django is not a shining example of python implementation.
04:29  pigdude: papna-work, yes
04:29  _habnabit: papna-work, ABCs suck
04:29  mar77i: papna-work: http://www.pastie.org/1231635 suggestions welcome
04:29  papna-work: _habnabit: Those ABCs are useful.
04:30  sku11knight: so.. how exactly do i add stuff to a variable every x amount of seconds?
04:30  thunderbolt: sku11knight: Lots of ways, depends on the exact context.
04:30  thunderbolt: Are you using some sort of event driven framework?
04:31  sku11knight: well im making this magic8ball in python
04:31  pigdude: sku11knight, one way http://docs.python.org/library/time.html#time.sleep
04:31  spinningcompass: sku11knight: Does it connect to IRC? :)
04:32  papna-work: pigdude: ..................
04:32  sku11knight: currently it barely works. so. no? =P
04:32  papna-work: _habnabit: They would be better if they were mixins....and if Python had a formal mixin system.
04:33  pigdude: papna-work, ........... .. . ... ... . . ?
04:33  sku11knight: pigdude: thats sortof kindof close. the problem im having with using that is i'm not really sure how to implement it to what im currently doing.
04:33  mar77i: papna-work: ping?
04:33  pigdude: sku11knight, well you sleep however many seconds
04:34  papna-work: mar77i: I figured if I ignored you maybe I could be lazier.
04:34  papna-work: pigdude: That isn't a good plan.
04:34  sku11knight: pigdude: but if i wanted it to add 1 to a variable every second how could i use sleep?
04:35  exarkun: LoopingCall(increment).start(1.0)
04:35  pigdude: sku11knight, sleep(20); i += 1
04:35  pigdude: sku11knight, http://twistedmatrix.com/documents/8.1.0/api/twisted.internet.task.LoopingCall.html
04:35  sku11knight: pigdude: i have no clue what im talking about but wont that just make it wait 20 seconds and then add 1 to the variable?
04:35  pigdude: sku11knight, yes
04:36  sku11knight: pigdude: oh holycrap i think i just had a brainblast.
04:36  papna-work: mar77i: http://paste.pocoo.org/show/277261/
04:36  pigdude: sku11knight, while condition: sleep(n); i += x
04:36  sku11knight: pigdude: i can just make it wait 1 second and then redo it.
04:36  tnzr: how do you format sigfigs with floating point values?
04:37  sku11knight: pigdude: right?
04:37  dabbish: ok finally solved it with dateutil.relativedelta and time.localtime, thanks again
04:37  pigdude: sure
04:37  sku11knight: fuck yeah. bear my children.
04:37 * pigdude runs
04:37  tnzr: round() doesnt seem to do what i want
04:38  pigdude: tnzr, what do you want
04:38  TheBilgeRat: yeah, I'd run that was an imperative statement
04:38  tnzr: if I do round(x, 3) and x is .00042323  I want it to return 0.000423
04:39  papna-work: mar77i: possibly http://paste.pocoo.org/show/277262/
04:39  tnzr: is there not a string-formatting/replace operator that will let me control that?
04:40  pigdude: tnzr, math.floor(423.23)*10e-7
04:40  papna-work: tnzr: tnzr http://docs.python.org/library/stdtypes.html#string-formatting
04:40  papna-work: pigdude: Your arithmatic is unrelated to formatting for strings.
04:40  tnzr: eww
04:40  pigdude: papna-work, he referred to arithmetic
04:41  papna-work: pigdude: If he knew how to solve this problem, he wouldn't be here.
04:41  papna-work: tnzr: Ew what?
04:41  tnzr: math.floor(423.23)*10e-7 :)
04:41  pigdude: well round rounds to integers
04:41  papna-work: pigdude: Incorrect.
04:41  tnzr: round can do floats as well
04:41  pigdude: ah I was not aware of that, sorry :^)
04:41  papna-work: pigdude: However, round is for a different problem class.
04:42  tnzr: it just does it to decimal places rather than significant figures
04:42  papna-work: tnzr: Using %g basically lets you do sigfigs.
04:42  tnzr: ooh cool
04:43  sku11knight: do i have to do something special to put a while loop in an if statement?
04:43  _habnabit: No.
04:44 --- init is now known as ElizabethM
04:44  pigdude: sku11knight, indent it
04:44  papna-work: sku11knight: Are you making this while loop to do something every n seconds?\
04:44  _habnabit: That's not special.
04:44  sku11knight: papna-work : yeah
04:44  pigdude: _habnabit, rather, extraordinary
04:44  papna-work: sku11knight: Doing that in an if statement's really weird.
04:44  sku11knight: _habnabit : maybe not for you but hey i think its pretty darn cool.
04:45  papna-work: sku11knight: How are you running pygame? Doesn't the mainloop have something for this?
04:45  sku11knight: papna-work: i looked into this documentation http://www.pygame.org/docs/ref/time.html#pygame.time.Clock but i couldn't really think of a way to implement it in my code.
04:46  pigdude: sku11knight, pygame.time.set_timer
04:48  sku11knight: pigdude: so i would put that in the if statement?
04:48  pigdude: no
04:48  pigdude: read the docs
04:48  pigdude: I mean sure it could be used under a certain condition
04:48  fluter: hi, does rpc object need dispose, like close or sothing similiar?
04:48  pigdude: so yes it could be under an if statement
04:49  tnzr: papna-work: sweet, works perfectly thanks
04:49  fluter: ServerProxy.close
04:51  zero-1: hi, Im on a mac and Im getting this error when trying to run a python script
04:51  zero-1: from language.language import Language ImportError: No module named language.language
04:52  papna-work: zero-1: You don't have a module language.language installed.
04:52  zero-1: what is the name of that module or how do I install it? unfortunately Im not python wiz and I didn't write this script
04:53  zero-1: is wapiti by the way
04:56 --- RiCOM is now known as RiCON
04:57  zero-1: is this something that comes with an specific version of python?
05:16  x0rs: is there a way to tell if a certain index exists in a list similarly to the has_key method for dictionaries?
05:18  KirkMcDonald: x0rs: if 0 <= x < len(L):
05:18  x0rs: KirkMcDonald, ahh yes, that will work, thank you
05:19 --- unreal_ is now known as unreal
05:24  dropdrive: Wait, it should be -len(L) <= x < len(L) :)
05:25  mar77i: papna-work: well, this makes it actually better and thx for your help, I need to get some sleep.
05:27  mar77i: papna-work: btw, doesn't solve the problem that a _stack passed to init may be a SymbolStack instance OR a dict
05:27  mar77i: I'd have to implement copy(), then?
05:35 --- prusajr_ is now known as prusajr
05:40  mar77i: okay, I'm now able to initialize it with a dict or another old instance.
05:43  deever: anyone very familiar with the imp module? why do imp.load_module/imp.load_source not properly set __path__ in the module?
05:43  mar77i: papna-work: in case you care: http://paste.pocoo.org/show/277268/
05:47  papna: mar77i: If they's what you want.
05:47  papna: mar77i: I've never had anything where something like that made sense.
05:47  x0rs: is there an easy way to trim the extra numbers off of a floating point number? ie convert 9.7500000009 to 9.75?
05:47  papna: mar77i: Also, never ever use += with a list.
05:48  d_m: x0rs: if you want a string representation you can do something like "%.2f" % 9.750001
05:48  papna: x0rs: Those aren't exactly extra numbers. http://docs.python.org/tutorial/floatingpoint.html
05:48  papna: x0rs: To change how to display a real number, use string formatting. http://docs.python.org/library/stdtypes.html#string-formatting
05:49  x0rs: papna: I know, but I am formatting a file to turn in for mileage reimbursements, and that 00000009 is important for the request. I just want them to reimburse me $9.75 =)
05:49  x0rs: papna: gotcha, thanks
05:49  x0rs: d_m: thank you
05:51  x0rs: d_m: That's an easy fix, cause I was already using '%f' to format the string
06:01  bob2: x0rs: there's also the decimal module in modern python, if you want to do the calculations exactly
06:01  x0rs: bob2: excellent, I will check it out. thanks a lot
06:03  nanotube: hey guys... what's the best/easiest way to create an rss feed? i'm getting some items from irc, and i want to stuff them into an rss feed as they arrive. any nice modules you'd recommend?
06:04  thunderbolt: There's a nice flask recipe, iirc.
06:05  thunderbolt: Oh, Atom, not RSS.
06:05  thunderbolt: Which is technically superior and does the same thing :)
06:05  FFForever: Does anyone happen to know of a library for linux that gets an event hook when a usb device is plugged in?
06:05  thunderbolt: nanotube: http://flask.pocoo.org/snippets/10/
06:06  bob2: if you mean 'modern linux desktop distribution', dbus
06:10  FFForever: Is glade worth using as a shortcut for writing gtk ui's?
06:11  nosklo: FFForever: yes.
06:12  nosklo: FFForever: knowing how to write them by hand is useful, even if you don't, though.
06:12  FFForever: nosklo, I know a bit of it by hand but I don't really like doing everything manually over and over again till I get it the way I want it.
06:12  Epona666: Whats the best JDK for python
06:13  Epona666: does anyone have an opinion?
06:13  thunderbolt: JDK?
06:13  bob2: do you mean jython?
06:13  nosklo: FFForever: I mean, the knowledge is useful when you're trying to do some stuff with the gui in runtime
06:13  Epona666: im not sure. Ive never really worked with this software before
06:13  bob2: perhaps take a step back and explain what you're tryign to do
06:13  nosklo: Epona666: What do you want to do?
06:14  nanotube: thunderbolt: yea don't really care rss or atom... but that snippet you posted seems to require writing to external urls... and a giant web framework dependency. i just want to write to a local file. no frills...
06:14  Epona666: netbeans is asking for a jdk, and im not entirely sure if im using the right program for python, nosklo
06:14  thunderbolt: nanotube: Oh, then the werkzeug stuff may help. But I don't know of what to use, exactly.
06:14  nosklo: Epona666: why are you using netbeans?
06:15  nosklo: Epona666: netbeans is a java program. to use it you need java.
06:15  nosklo: Epona666: ask at ##java
06:15  Jerub: hehehe ##java
06:15  Epona666: Im trying to deploy stuff to the web, is that possible through another program that supports python instead of netbeans?
06:16  Jerub: i love ## channels. they're so 'about' and everything
06:16  Epona666: im not familiar with java so that might be a bad idea to use that
06:16  nosklo: Epona666: you can use any plain text editor
06:16  nosklo: Epona666: to write your program
06:16  bob2: I think this might be a V W X Y Z problem
06:16  Jerub: Epona666: i don't know how to 'deploy stuff to the web'. never had to do it.
06:16  Jerub: Epona666: i run a heap of python web servers. does that help?
06:17  bob2: Epona666: are you asking "how do I write a web app in python"?  "how do I deploy a python wsgi web app"?  something else?
06:17  nosklo: boring troll sensor beeped
06:17  Epona666: the first one
06:18  bob2: Epona666: the channel topic has a couple of links for learning python, check them out.  http://wiki.python.org/moin/UsefulModules#WebDevelopment has some links to python web frameworks.
06:24  textbook: having a problem wite ansi escape color codes , is there a good doc some where
06:34  bsmntbombdood: I have an [abstract] class that has classmethod that manipulates a dictionary stored in a class variable of its children. What's the python way to initialize it?
06:35  bob2: do you really need to do it that way?
06:35  bsmntbombdood: yeah
06:36  bsmntbombdood: Right now I'm just catching the AttributeError
06:36  bob2: what's the broader story?
06:37  bsmntbombdood: Parent class is doing some bookkeeping for its children.
06:41  papna: Doesn't sound good nor abstract.
06:41  papna: bsmntbombdood: Post your code.
06:45  chrisbdaemon: hey, I need a bit of help, I'm trying to watch a logfile for changes by polling the modified timestamp, I can detect the change, but when i try to read it, it doesn't return anything
06:45  bsmntbombdood: papna: http://fpaste.org/pk1p/
06:45  chrisbdaemon: do i have to reopen the file or what is happening?
06:46  papna: bsmntbombdood: That doesn't really explain what's up.
06:46  papna: bsmntbombdood: Don't use global mutable state.
06:46  bsmntbombdood: that's not global, it's per child class
06:46  papna: bsmntbombdood: False.
06:46  Habbie: chrisbdaemon, you may need to re-seek to your 'current' end to see new data
06:46  bob2: bsmntbombdood: that is global
06:47  papna: bsmntbombdood: It's stored on the class object itself, which is global (and shouldn't store state)
06:47  chrisbdaemon: Habbie: howso?
06:47  Habbie: chrisbdaemon, like in http://code.activestate.com/recipes/157035-tail-f-in-python/
06:47  Habbie: chrisbdaemon, note: if you use this code, don't call your file object 'file'
06:47  bsmntbombdood: It's metadata about a class, how can it not be stored on the class?
06:48  chrisbdaemon: Habbie: would it work if I do "file.seek(file.tell())"
06:48  papna: bsmntbombdood: That makes your program have global mutable state, so it's less modular, less testable, and less extensible.
06:48  Habbie: chrisbdaemon, probably
06:49  bsmntbombdood: papna: in practice, it's not mutable
06:49  bsmntbombdood: it's write-once
06:49  bsmntbombdood: and, you didn't answer the question
06:49  chrisbdaemon: thanks
06:50  chrisbdaemon: that worked, thanks Habbie
06:51  papna: bsmntbombdood: Class objects aren't supposed to do crap. Classes aren't supposed to think about their subclasses, since they don't think.
06:51  papna: bsmntbombdood: A literal answer would be http://paste.pocoo.org/show/277271/ , but that's likely an answer to the wrong question
06:52  papna: bsmntbombdood: Also, the posted code has a bug in that you re-use the name "metadata" when you mean not to.
06:53  papna: bsmntbombdood: If it's not called on the parent class, it's almostsorta okay, but you could avoid it and potential confusionby choosing different names.
06:53  bsmntbombdood: Ok good, so now I have some pontification and a typo pointed out, but no answer.
06:54  omfgitsasalmon: Hi, I need help with something
06:54  papna: bsmntbombdood: To what??
06:54  omfgitsasalmon: How do I actually
06:54  bsmntbombdood: Your code doesn't implement the desired behavior, each child class need to have a different dict.
06:54  omfgitsasalmon: do a "If A = b: do x, if A != b: do y"
06:55  Thiryal: omfgitsasalmon: http://docs.python.org/reference/compound_stmts.html#the-if-statement
06:55  papna: bsmntbombdood: To initialize a class object, you define its metaclass.
06:55  papna: bsmntbombdood: Which you don't actually want to do.
06:56  bob2: omfgitsasalmon: that's redundant, surely.  if A == b: x() ;; else: y()
06:56  omfgitsasalmon: oh
06:56  omfgitsasalmon: ok
06:56  omfgitsasalmon: Hmm
06:56  omfgitsasalmon: Interesting
06:57  bsmntbombdood: papna: I don't understand the first statement
06:57  papna: bsmntbombdood: A class is an instance of a metaclass.
06:57  papna: All initialization is done when instantiating the metaclass.
06:58  bsmntbombdood: I thought classes where instances of type
06:58  papna: bsmntbombdood: That's one metaclass.
06:58  papna: bsmntbombdood: type doesn't do what you want.
06:58  papna: Since you don't want a normal class, you want something initialized weird.
07:00  papna: bsmntbombdood: http://codepad.org/Vr0NdE9d
07:02  sameerynho: hi, i there any way to iter a class properties
07:02  bob2: not in general
07:02  bob2: what specifically are you doing?
07:03  bsmntbombdood: papna: Cool, I didn't know about that
07:03  bsmntbombdood: Even if it's not what I want.
07:04  sameerynho: bob2, i find a good way thanks
07:05  _habnabit: sameerynho, it probably isn't a good way. :(
07:05  bob2: iter(f.__dict__) yo
07:06  sameerynho: _habnabit, instead of itering a class properties i simply can i assign that class
07:06  _habnabit: Ew no
07:07  brick: i found a cool trick to turn named HTML entities into UTF8 with htmlentitydefs.name2codepoint but i still need to convert the numbered ones. should be easy no?
07:07  brick: any known solutions?
07:08  _habnabit: brick, yes: use an HTML parser
07:08  _habnabit: brick, much simpler
07:08  brick: beautifulsoup, that kind of thing?
07:08  _habnabit: lxml.html
07:08  brick: thank you _habnabit
07:09  vitorlobo: what's the best books for learning python?
07:10  omfgitsasalmon: Hmm
07:10  bob2: vitorlobo: if you know another language well, the tutorial in the topic is quite good
07:10  omfgitsasalmon: Guys
07:11  omfgitsasalmon: I want something to loop endlessly
07:11  omfgitsasalmon: I tried using for 1 == 1:
07:11  bob2: vitorlobo: if you don't, I gather the book in the topic is pretty good (but I haven't read it)
07:11  bob2: omfgitsasalmon: while True:
07:11  omfgitsasalmon: tell me syntax error
07:11  _habnabit: omfgitsasalmon, docs.python.org/tut
07:11  tos9: vitorlobo: Or you could try Thinking in Python + Something to bring you up to date. Think others in here like that one too.
07:12  omfgitsasalmon: Hmm
07:12  omfgitsasalmon: Damn it, I keep thinking Java
07:12  omfgitsasalmon: =/
07:12  omfgitsasalmon: bob2: I'm using a while false
07:12  omfgitsasalmon: haha
07:12  omfgitsasalmon: while True:
07:12  omfgitsasalmon: 	while False:
07:12  tos9: omfgitsasalmon: for True works in java?
07:12  omfgitsasalmon: 		filecmp.cmp('/Users/omfgitsasalmon/Documents/RP/Y2S2/Systems_Scripting/P02/Work/master/index.html', '/Users/omfgitsasalmon/Documents/RP/Y2S2/Systems_Scripting/P02/Work/published/index.html')
07:12  omfgitsasalmon: 		replace();
07:12  omfgitsasalmon: 		time.sleep(6)
07:12  tos9: Whoa.
07:12  omfgitsasalmon: nope
07:12  omfgitsasalmon: as in
07:12  omfgitsasalmon: in java
07:13  omfgitsasalmon: I use 1 == 1
07:13  omfgitsasalmon: haha
07:13  omfgitsasalmon: This is what I wanted to do
07:13  tos9: omfgitsasalmon: Dude. Your enter key is not a period.
07:13  bob2: please hit enter less :|
07:13  omfgitsasalmon: Whoops
07:13  omfgitsasalmon: =X
07:13  kibosh: Jesus.
07:13  hachque: i'm trying to include a copy of python (without installing it) on Windows
07:14  hachque: however, no matter where i place _ctypes.lib, python doesn't find it
07:14  hachque: any ideas?
07:14  mordy: why isn't this working? http://paste.pocoo.org/show/277275/
07:14  bob2: hachque: have you seen 'portable python'?
07:14  hachque: no
07:15  hachque: oh, so it's a compile time constant that defines where _ctypes is?
07:16  hachque: hmm no Portable Python 2.7
07:16  code-shah: hey guys, I want to search articles for matches with a list of 30,000 names ... :) what is the best / fastest way to do this?
07:17  KirkMcDonald: code-shah: Create a set of names, check each word in the article against the set.
07:17  code-shah: k...
07:17  mordy: maybe create a set of the words in the article too?
07:17  code-shah: the names can be up to 5 words, so I guess I will have to check each word and sets of words?
07:17  mordy: ahh
07:18  mordy: well, a string is a string
07:18  Nonpython`: ls
07:18  mordy: but it rules out placing words in a sert
07:18  mordy: set
07:18  code-shah: ah, yes
07:19  mordy: anyone see my paste? why isn't it matching?
07:19  mordy: ahh one sec.
07:19  mordy: hrrm.. nv.. still can't see what's wrong ti it
07:19  mordy: with
07:22  mordy: grrr
07:25  mordy: gah stupid escapes
07:25  bob2: escape $ btw
07:25  mordy: yeah, just realized
07:25  mordy: got traumatized a bit
07:25  omfgitsasalmon: Hmm, let's say, I want A to replace B if they are different. so I use this?
07:25  omfgitsasalmon: while False:
07:25  omfgitsasalmon: 	filecmp.cmp('/Users/omfgitsasalmon/Documents/RP/Y2S2/Systems_Scripting/P02/Work/master/index.html', '/Users/omfgitsasalmon/Documents/RP/Y2S2/Systems_Scripting/P02/Work/published/index.html')
07:25  omfgitsasalmon: replace();
07:25  mordy: starting a new job tomorrow that deals a lot with regexes
07:25  bob2: omfgitsasalmon: stop pasting code
07:26  omfgitsasalmon: bob2: If I don't paste code, how do I get help?
07:26  omfgitsasalmon: =/
07:26  bob2: omfgitsasalmon: /topic
07:26  mordy: pastebin...
07:26  bob2: omfgitsasalmon: fpaste.org
07:26  omfgitsasalmon: oh ok
07:26  bob2: omfgitsasalmon: and that makes no sense, since we can't see what replace() does, and while False: means the code doesn't run anyway
07:27  bob2: omfgitsasalmon: so pastebin the whole program :)
07:27  omfgitsasalmon: oh crap
07:27  omfgitsasalmon: k
07:27  omfgitsasalmon: http://pastebin.com/gi61S5SD
07:27  omfgitsasalmon: done
07:27  omfgitsasalmon: Ah, crap, I forgot to include teh top
07:27  omfgitsasalmon: wait
07:28  omfgitsasalmon: http://pastebin.com/xzGBnz6j
07:28  hachque: bob2: i tried portable python
07:28  hachque: but i still get No module named _ctypes
07:28  hachque: i'm executing python from the folder that python.exe is in
07:28  bob2: omfgitsasalmon: f.close does nothing (you need () to call it)
07:29  omfgitsasalmon: What I want is for it to replace the index.html in the published folder with the index.html in the master folder if they are different. Oh so I do a f.close() ?
07:30  bob2: omfgitsasalmon: http://fpaste.org/SPD8/
07:31  bob2: omfgitsasalmon: oops, http://fpaste.org/7Lmp/
07:31  omfgitsasalmon: haha thanks
07:31  omfgitsasalmon: I'll see what I can learn from that
07:31  omfgitsasalmon: Hmm...
07:31  omfgitsasalmon: But if I do that this way.
07:31  omfgitsasalmon: It is short, but if I were to...
07:32  omfgitsasalmon: Want to change other files instead of just index.html isn't it gotta be troublesome? Is there anything like java like I can do a "/Users/omfgitsasalmon/Documents/RP/Y2S2/Systems_Scripting/P02/Work/master/" +page name+ ".html"
07:32  bob2: yes, of course
07:32  bob2: python is a real programming language :)
07:32  bob2: I think you might have overspecialised your question a bit
07:33  bob2: is your real problem "I want to sync two directories, overwriting file A in dir d2 if d1/A is different to d2/A"?
07:33  teratorn: probably easier to just unconditionally replace the file with shutil.copyfile
07:34  bob2: or rsync
07:34  teratorn: rsync is good :)
07:35  omfgitsasalmon: bob2: Yeah, That's want I want to do, but somehow, I'm trying to learn to do it slowly rather then just skipping to the solution haha
07:35  omfgitsasalmon: like, be able to replace one by one, then maybe let the program cycle through a list of the directory file.
07:39  braoru: hello
07:39  omfgitsasalmon: hello
07:39  omfgitsasalmon: Btw bob2, I tried, your code, it doesn't replace the file =/
07:39  bob2: yeah it does
07:39  bob2: omfgitsasalmon: I'd read through the tutorial in the topic, it'll teach you the basics of python
07:40  omfgitsasalmon: Hmmm, I've ran it three times.
07:40  omfgitsasalmon: No errors
07:40  bob2: oh, it's backwards
07:40  omfgitsasalmon: but the index page is still the same
07:40  omfgitsasalmon: OH
07:40  omfgitsasalmon: OK
07:40  bob2: sorry
07:40  omfgitsasalmon: Sorry haah
07:40  bob2: no, my fault
07:41  omfgitsasalmon: Nah, I read through it so many times and I dind't figure it out
07:41  omfgitsasalmon: haha
07:42  omfgitsasalmon: I'm reading the python documentation. Oh btw bob2. I'm researching on whether I can make this auto-run itself every 5 minutes
07:42  bob2: unrelated to python
07:42  bob2: or java
07:42  omfgitsasalmon: so can I use time.sleep(300)
07:42  omfgitsasalmon: I was thinking of
07:42  bob2: oh, ok
07:43  omfgitsasalmon: Making it an indefinite loop, and using the sleep to pause, haha.
07:43  omfgitsasalmon: I'll apologize in advance for being a burden haha. =/
07:44  bob2: no worries
07:44  bob2: while True: + time.sleep sounds like a winner
07:44  verte: remember, there are no stupid questions, only stupid people.
07:44 * soundNICK gets a python error after trying to run  scribes  editor...  no module named SCRIBES.main found   
07:45  w83: hi, can I get 'somehow' the current level of system sound
07:46  soundNICK: but... if there is no python module on the system with that name... where can it be gotten ?
07:46  soundNICK: or is this a "touch" type thing
07:46  verte: ask the people who wrote scribe
07:46  verte: also
07:47  soundNICK: really a good idea...
07:47  ArdRigh: quick question, is there any way in Python to manage x.509 certs similar to java keytool?
07:47  omfgitsasalmon: Hmm, so basically...
07:48  verte: "how many editors you know code like this, how many editors you know flow like this"
07:48  tos9: w83: platform dependent, or even dependent on what audio lib you're using I think
07:49  bob2: ArdRigh: the ssl module has some very very basic stuff in it
07:49  w83: tos9, yeah the audio lib .. stupid me :)
--- Log closed Tue Oct 19 08:37:19 2010
--- Log opened Tue Oct 19 08:42:43 2010
08:42 --- Users 722 nicks [0 ops, 0 halfops, 0 voices, 722 normal]
08:44 --- Channel #python was synced in 89 seconds
08:46  tomas_: mh.. it's a bit more complicated than that, I have a list of dicts, and one of the keys in each dict is 'updated_parsed':time.struct_time(<date goes here>)
08:47  tomas_: what is the easy way to extract the dict from this list with newest and oldest dates?
08:48  tomas_: *extract 2 dicts
08:48  mordy: what's the best way to make a number be between a certain value?
08:49  mordy: e.g. foo should be 0 if less than 0 or 255 if greater than 255 otherwise leave it alone
08:49  verte: max(dicts, key=lambda d: d['updated_parsed'])
08:53  tomas_: verte: thanks, what does key=lambda mean?
08:57  verte: see the documentation for max(). it takes a key argument that gets the value to use for comparisons.
08:58  tomas_: thanks it worked
08:59  verte: in this case, lambda d: d['whatever'] is a function which takes a dict d and gets its 'whatever' value.
09:00  sid3k: is there any other way to write this: root = self \n while root.index: root = root.index
09:00  tomas_: verte: thanks for explanation
09:01  [flaming]: question
09:01  sid3k: * a better way, of course
09:01  sid3k: any ideas?
09:01  filePeter: Hi, I want python (scipy?) to filter my periodic measurements how can I do this? There is a function "gaussian_filter" but I can get it to work on a python array....
09:01  Brend: verte: Surely you mean operator.itemgetter('whatever') !
09:02  [flaming]: does AJAX syntax work for python as well?
09:02  Brend: [flaming], AJAX syntax?
09:02  [flaming]: that is, if I had some clever eval() statements, could I turn an AJAX file/string into a dict object?
09:03  Brend: [flaming], maybe you want the json module.
09:03  Brend: Or an XML parser
09:03  Brend: Depending on what you think "AJAX syntax" is
09:04  rz: [flaming], in Python, `null`, `true` and `false` are called None, True and False, other than that AJAX's {} and [] are very similar to python's dictionaries and lists
09:05  Brend: I wish you guys would stop calling json "AJAX"
09:05  [flaming]: sorry, sorry, I got the disease
09:05  Habbie: rz, how is that a flame?
09:05  Habbie: Brend, yes, at least call it AJAJ :)
09:05  Brend: AJAX is not a serialization format, it's a technique.
09:05  [flaming]: JSON is indeed the correct term, I have had less than eight hours of sleep in the last 59
09:06  _habnabit: rz, the similarities are only superficial.
09:06  verte: then use the json module
09:08  [flaming]: k
09:08  rz: _habnabit, other that null, boolean literals and maybe some escaping issue, json values is valid python literals
09:09  _habnabit: rz, incorrect.
09:09  rz: _habnabit, example?
09:10  _habnabit: rz, strings have a completely different set of escapes.
09:10  _habnabit: rz, and are all unicode; no bytes.
09:10  rz: well, that's what i called escaping issues
09:11  rz: in python3, all strings are unicode too
09:11  _habnabit: Incorrect.
09:11  Habbie: i feel that a good summary is 'parsing json with eval (a) usually works (b) is a very dumb thing to do'
09:11  _habnabit: 3.x has bytes too.
09:11  _habnabit: Habbie, er, no, not in python.
09:11  _habnabit: Habbie, maybe in javascript.
09:12  Habbie: _habnabit, (a) is usually true for me. i'm not recommending it at al
09:12  rz: _habnabit, correct. bytes are not strings
09:12  _habnabit: Habbie, then I guess you rarely work with nonprintable/non-ASCII characters.
09:13  Habbie: _habnabit, correct
09:16 --- FlaPer87_ is now known as FlaPer87
09:22  victorho: Know this isn't  strictly a python question, but people here seem knowledgeable about everything. For some reason the emails my site sends my users goes into the spam bucket for yahoo (it works well in gmail and hotmail). Is there anything I'm doing wrong?
09:22  victorho: Here is a paste of my email with headers from yahoo: http://dpaste.com/260019/
09:23  VladDrac: the content does resemble common spam / phishing mails a bit
09:24  victorho: VladDrac: we also tried it with text only content (e.g., "hi, how are you doing?") and it still goes to spam
09:25  VladDrac: not sure if supporting SPF would help, no experience with that
09:25  victorho: what is SPF?
09:25  VladDrac: lmgtfy ;)
09:25  victorho: haha ok I will look it up
09:25  VladDrac: it may also be the sender containing "Apartments"
09:25  victorho: hmm ok
09:25  VladDrac: it's not casino or watches but it may be considered spammish
09:26  victorho: I was hoping it was something wrong/unclean about the headers
09:26  victorho: =)
09:26  victorho: that would be an easy fix
09:31  jefimenko: does anyone know off hand if there is a decorator in the python stdlib that when applied to a function will thread-lock it (protect it against multiple threads entering simultaneously)
09:32  isolat3sh33p: hello guys, is it a bad to declare a function inside a function? (a 'def' in another 'def')
09:33  jefimenko: isolat3sh33p: not necessarily. it depends on how it's used
09:33  Brend: isolat3sh33p, sometimes it's good, when you want to make a closure.
09:34  isolat3sh33p: jefimenko, Brend, when does it became bad? The function became private right to the function containing it right?
09:34  Brend: isolat3sh33p, it's bad when you don't have a good reason to do it
09:34  Brend: What's your reason?
09:35  jefimenko: isolat3sh33p: i would say it's bad if you're using it in a programming pattern that makes no sense and in fact would make your code more difficult to understand
09:36  _habnabit: jefimenko, it's not exactly a thing you can implement in the general case.
09:36  _habnabit: jefimenko, you should avoid using threads anywayl
09:36  _habnabit: anyway.
09:36  jefimenko: hatabou: i do like to avoid threads, but in this case i don't have that level of control
09:36  isolat3sh33p: Brend, I use it to generate error within functions. Also, when the action only required within that function.
09:37  Amadiro: I'm having a function that expects a list of keyword-arg pairs, ala Function(a = "b", c = "d", e = "f"). I have these key-value pairs in a dictionary. Can someone enlighten me as to how I can get them applied to the function? I do not seem to be allowed to use variable names/expressions as keys.
09:37  Brend: isolat3sh33p, I'm not sure what the first part means, and I wouldn't use it for the second part
09:37  Brend: Because you never know when you might want to do the same thing somewhere else.
09:37  jefimenko: _habnabit: i meant to address that to you of course
09:37  _habnabit: jefimenko, oh?
09:37  jefimenko: _habnabit: so just use the normal threading.Lock i guess
09:37  isolat3sh33p: Brend, good point. Thanks. :)
09:38  _habnabit: jefimenko, I pretty much guarantee that you don't actually need threading.
09:38  _habnabit: jefimenko, every day I see people who swear that up and down, and they're all wrong.
09:38  Brend: isolat3sh33p, you might stick an underscore in its name though, e.g. _myUtilFunc
09:38  isolat3sh33p: jefimenko, thanks. :)
09:38  Brend: isolat3sh33p, just to let people know it's not part of your normal API.
09:38  isolat3sh33p: Brend, I did that :D
09:39  jefimenko: _habnabit: i'm not saying it's impossible, just that there are other modules/frameworks that i'm working with that i don't have the authority to change right now
09:39  jefimenko: _habnabit: i hate threads
09:39  _habnabit: jefimenko, still. What are you doing?
09:40  kilon: is it possible to make 2 python programms that run in diffirent iterpreters , exchange data between themselves on the fly ? and if yes how ?
09:40  jefimenko: _habnabit: i can't give all the details, but i'm working with code that is called by a threaded webapp
09:41  jefimenko: _habnabit: which i would rather do with something like twisted
09:41  Amadiro: kilon there are a bunch of ways to do that, you could for instance use pipes or sockets.
09:42  kerio: killown: IPC is os-dependant
09:42  bob2: socket module is pretty portable ;[
09:42  bob2: er ;p
09:42  kerio: bob2: :<
09:42  kilon: Amadiro: thats a start, can pipes and socket work between 2 python apps run in diffirnet python inpreters
09:42  bob2: Amadiro: section 4.7.1 of the tutorial
09:43  kilon: let me exaplin what i try to do, itry to make the python intpreter in GIMP comunicate with python inpreter in Blender
09:43  Amadiro: kilon, yes. For a very simple one-to-one communication, you could for instance spawn one script from the other, and let them communicate via stdin/stdout.
09:43  Amadiro: bob2, thanks.
09:43  kerio: kilon: you're not making two python apps run in different interpreters connect - you're making two processes connect
09:43  kerio: period
09:43  kerio: *ran
09:44  filePeter: how to use signal.convolution?!!? I can’t tell from the documentation... :-/
09:44  kilon: kerio, processes are multiprocessing module?
09:44  filePeter: Anyothwer doc somewhere?!
09:44  kerio: kilon: not in your case
09:44  kilon: Amadiro: thanks, I will try to look into pipes and sockets
09:45  kilon: kerio: so that mean i have to google for python processes ?
09:46  Nate75Sanders: Is there a de-facto standard python module for making your process a daemon?  I see several at PyPI and would like some guidance in differentiating them.
09:46  kilon: i just checked pipes and it seems to operate on files, but is read and write file fast enough for real time communication ?
09:46  KirkMcDonald: Nate75Sanders: http://www.python.org/dev/peps/pep-3143/
09:46  _habnabit: Nate75Sanders, twistd
09:48  Nate75Sanders: KirkMcDonald: Good to hear -- this is the one I was looking at.  And your link shows that it's the reference implementation of the PEP I had seen before.
09:48  Amadiro: kilon, usually it is, yes. Data needs to be serialized/deserialized, though
09:48  Nate75Sanders: _habnabit: Your reasons for twistd over python-daemon?
09:49  _habnabit: Nate75Sanders, you get twisted for free!
09:49  Amadiro: kilon, if you need to exchange large volumes of data, other IPC mechanisms are better, like shmget (but I don't think that's platform-independent)
09:49  _habnabit: Nate75Sanders, which includes a bunch of stuff, including logging and debugging.
09:49  Nate75Sanders: _habnabit: hah -- Yeah I've been meaning to learn twisted soon, and I will...but right now I'm just putting little pieces together.
09:50  kilon: Amadiro: that was my initial plan to write and read files , if you say its fast enough then its fine, what I want to do is to exchange bitmap data graphics 2d between gimp and blender, use blender asn extension to gimp, importing 3d graphics to a 2d environment. I am not tlaking havy processing here
09:51  Amadiro: kilon, pipes are not really files, they just kinda behave like file-descriptors.
09:51  _habnabit: They *are* file descriptors.
09:51  Amadiro: Well, yes. But they have some gotchas when compared to normal file-file-descriptors.
09:51  Nate75Sanders: _habnabit: can you elaborate on the debugging included in Twisted?
09:52  kilon: Amadiro: I  am looking into it, i am new with this, excuse my ignorance, I am searching for tutorials as we speak
09:52  _habnabit: Nate75Sanders, it can drop you into a debugger on unhandled exceptions or when you receive a signal.
09:52  Nate75Sanders: oh, nice
09:52  Amadiro: kilon, exchanging bitmaps and the like something like a pipe will certainly be plenty fast.
09:53  kilon: Amadiro: that sound great, thanks for the help man, you are god sent
09:53  sku11knight: how do i center myfont.render in pygame?
09:53  Amadiro: Uh-huh
09:54  Amadiro: kilon, just be aware that not all IPC mechanisms are platform-independent, for instance, I don't think windows supports UNIX-sockets.
09:54  kilon: Amadiro: oups , that a problem, my main paltform is macos, but it would be cool to support windows as well
09:55  Amadiro: kilon, I don't really know much about either windows or mac os, sorry, but I suspect something basic as communicating via stdin/stdout should work on pretty much all systems.
09:56  omfgitsasalmon: I have a file with text1:text2/n text 3:text4"
09:56  omfgitsasalmon: how do I put it into a dictionary
09:56  omfgitsasalmon: was thining of using read lines
09:57  kilon: Amadiro: its a start, I will try to post in some forums as well
09:57  Wild_Cat: omfgitsasalmon: d = dict(line.split(":", 1) for line in my_file)
09:58  tomas_: longest quit message ever
09:58  tomas_: anyway...
09:58  tomas_: how do I check if my string has any special characters like new line
09:58  tomas_: or other?
09:59  Wild_Cat: tomas_: "if special_char in my_string:", or "if set(my_string).intersection(special_chars):"
09:59  omfgitsasalmon: Hmm
10:00  smorg: tomas_: By "special" you  mean non-alphanumeric?
10:01  Wild_Cat: omfgitsasalmon: please ask your questions in the channel, not in PM. And yes, you built a set, not a dict.
10:01  omfgitsasalmon: oh
10:01  omfgitsasalmon: how do I build a dict them
10:01  Wild_Cat: {foo, bar, baz} is a set literal. dict literals are of the form {k1: v1, k2: v2, k3: v3}
10:01  tomas_: basically I'm extracting a post from rss feed and that post has new lines when viewed in browser
10:02  Wild_Cat: omfgitsasalmon: you may want to read the tutorial.
10:02  tomas_: but when I get it it doesn't have any
10:02 --- oracle_ is now known as oracle
10:02  tomas_: \n
10:02  tomas_: and Im thinking if it's feedparser or I'm just not seeing the chars
10:03  ajavid: hey
10:03  ajavid: thats a crazy nickname
10:03  ajavid: omfgitsasalmon... wow.
10:03  ajavid: stoned much?
10:04  ajavid: :D
10:04  tomas_: (:
10:09  mordy: yo
10:15  smorg: tomas_: I'd test whether a search expression returns none for a non-whitespace character class: [True if re.search("\W", "abcda!") else False]
10:21  mahound: i want to have some kind of optional feature in my lib that is only active if a specific library is installed. i know there is some kind of functionality in setuptools that allows me to define optional features that can be required by other modules... but if i understood it well, there is no way to tell the setup script to install my lib with features X and Y activated... am i right?
10:21  Dynetrekk: how can I check if a variable is set? if 'varname' in locals() ?
10:21  smorg: tomas_: Hm for some reason it doesn't work to go "[ \W]". to allow spaces. You have to go re.search("[^ \w]", "ab cd!a").group()
10:22  Brend: Dynetrekk, why don't you know whether it's set?
10:22  Dynetrekk: Brend: I am importing matplotlib. I want to check if it has been imported, because I get the annoying 'backend' warning, which I don't really want to see.
10:22  ronny: mahound: extras?
10:22  Brend: Dynetrekk, if it hasn't been imported, you'll get an ImportError, no?
10:22  Dynetrekk: Brend: by the way, checking if it's set won't  help me. d'oh.
10:23  Dynetrekk: Brend: do you know how I can check if pylab or pyplot has been imported?
10:23  Brend: Sometimes people do stuff like this: "try: import matplotlib; except ImportError: matplotlib = None;" ... and then later: "if matplotlib is not None: enableOptionalFeature()"
10:23  ronny: mahound: note that this will currently completely chain you to setuptools/easy_install, as pip does not support extra requirements
10:23  Brend: Dynetrekk, again, don't check, just try to import them. If they were already imported, nothing new happens.
10:24  Dynetrekk: Brend: sorry, my first question was incorrect. I need to check if it was imported in _another_ module. now, how to do that, I have no idea.
10:24  Brend: Dynetrekk, why don't you know whether it was imported in the other module
10:25  Dynetrekk: Brend: hm... well, I know it was imported, come to think of it
10:25  Dynetrekk: I just want to set the backend before importing the other module
10:25  Dynetrekk: or have the module being imported understand that it shouldn't call 'matplotlib.use()'
10:25  Dynetrekk: possibly impossible
10:25  Brend: Not impossible, just not usually a good idea
10:25  mahound: ronny: yeah, makes sense
10:25  Dynetrekk: you're probably right
10:26  Dynetrekk: I guess I can let the other module decide everything
10:26  Brend: Dynetrekk, consider Twisted's reactors, where they just say "if you want an alternate reactor, import and install it before importing the main reactor module"
10:26  Brend: Dynetrekk, and then leave it up to developers to make sure things happen in the right order
10:27  Dynetrekk: Brend: I don't know twisted, and I'm the developer of this code. but I think I get the gist
10:28  tomas_: what should I use to lstrip string until char x is reached icluding char x
10:28  Dynetrekk: Brend: thanks for your help, even if it wasn't what I expected :)
10:29  Brend: tomas_:
10:29  Brend: >>> re.sub("^(.*?x)", "","foo bar xwib")
10:29  Brend: 'wib'
10:29  tomas_: Brend: thanks
10:29  tomas_: another question (:
10:29  tomas_: what should I use to rstrip? (:
10:30  Dynetrekk: Brend, tomas_ isn't it easier to just find the index of character x? with the index() method?
10:30  Brend: >>> re.sub("(x.*)$", "","foo bar xwib")
10:30  tomas_: I like Dynetrekk's idea
10:30  Brend: 'foo bar '
10:30  Brend: Dynetrekk, is it?
10:30  Dynetrekk: and there's rindex() to search from the right
10:30  tomas_: regex has this feature, whenever I use it I need to relearn (:
10:30  nphilipp: tomas_: read up regexes in the "re" module docs
10:30  Dynetrekk: Brend: you don't need a regexp and it's presumably faster and easier code to read?
10:31  Brend: Dynetrekk, I mean, including catching the potential ValueError, that's like five lines of code
10:31  Dynetrekk: Brend: the 'find' and 'rfind' doesn't raise errors
10:31  Dynetrekk: if that's an issue
10:31  Brend: Then you have to do a comparison instead.
10:31  Dynetrekk: that's 1 line
10:31  saju_m: which are the popular python modules used for Social Network Authentication
10:32  Dynetrekk: and the fewest lines possible isn't the best code...
10:32  Dynetrekk: by the way - how can I find where a numpy warning originates? what line of code?
10:33  tomas_: yeah oneliners are fine and good, but when you look at them months later you can't figure out wtf
10:33  saju_m: i want to login my site using facebook, twitter or gmail account
10:33  Dynetrekk: tomas_: so use find and rfind, or index and rindex :)
10:33  Brend: Dynetrekk, I dunno, something like "i = s.find("x"); s = s[i+1:] if i >= 0 else s" doesn't seem more readable to me.
10:33  tomas_: (: that's what I'll do
10:35  ronny: Brend: s.split('x')[0] ?
10:35  ronny: or s.split('x', 1)[0]
10:35  luks: you have to catch IndexError
10:35 --- prusajr is now known as prusajrSleepForR
10:36  ronny: luks: you mean me?
10:36  luks: yes
10:36  ronny: luks: split given a caracter doesnt return empty lists
10:37  luks: oh, my bad
10:37  ronny: luks: ''.split() == [] but ''.split('x') == ['']
10:37  Dynetrekk: Brend: any python noob can read this, I think: http://paste.pocoo.org/show/277305/
10:37  Brend: Dynetrekk, sure, I'm just saying I don't find it more readable than the regexp.
10:38  Dynetrekk: Brend: no need for an else, or whatever. and it's 3 lines instead of 1
10:38  Dynetrekk: Brend: but your colleagues might not know regexp, and regexp is slower (if I understand things correctly) than a simple string operation like this
10:38  Brend: Dynetrekk, the regexp is probably slower, yes.
10:38  Brend: And all my colleagues know regexps.
10:39  smorg: (lambda x, y: y[re.search(x, y).end():])('x', "foo bar xwib")
10:39  smorg: thought that would be shorter for some reason
10:39  Dynetrekk: Brend:  I don't think any of mine do. but then, they're not programmers as such.
10:42  smorg: probably depends on the complexity. The regex engine actually compiling the search is probably faster than letting python manage it in some cases.
10:44  Dynetrekk: smorg: isn't python strings written in C? how can a regexp beat that? (I'm asking because I don't know here)
10:44  ronny: Dynetrekk: regex starts to win for slightly more complicated things
10:45  Dynetrekk: ronny:  I see. but searching for a char is probably the simplest thing imaginable?
10:45  smorg: Dynetrekk: I'm not positive of the implementation but I assume when you do re.compile you're actually producing some optimized externalish subroutine which does the job
10:45  smorg: re.compile is like compiling some specialized custom code for searching a specific string
10:46  smorg: especially faster if you're doing the same thing over and over.
10:46  Dynetrekk: right, that makes sense if you're searching a lot of text for the same string
10:46  Dynetrekk: but not for a single char, right?
10:47  smorg: probably have to benchmark to figure that out. That's "fast enough" either way
10:47  smorg: regex is probably still faster unless you need to do some intermediary processing for each step of the search
10:49 --- merlin83_ is now known as merlin83
10:50  Dynetrekk: hm... I find that hard to believe, but that's probably because I don't understand something here
10:51  smorg: Jist of the matter is Interpreters are slow at CPU bound anythings.
10:52  Dynetrekk: smorg: sure. but if python strings are implemented in C, I guess the search would end up as a C loop over a char[] or similar datatype?
10:52  shylent: twisted has a ReconnectingClientFactory, which uses exponential backoff when retrying. maybe I've missed some built-in functionality, but I've written a little class, that performs retries, given an iterable of timeout values and it is not tied to reconnecting/whatever, so it can be used anywhere when multiple retries might be neccessary. would anyone please care to look at the code? there are only, like, 3 meaningful methods, t
10:52  shylent: he rest is boilerplate: http://gist.github.com/633843
10:52  shylent: hmm.. maybe I should've actually sent this to #twisted
10:53  smorg: cpython being implemented in C, and python code being compiled to C would be very different things. Bash is implemented in C - doesn't make looping in Bash as fast as looping in something compiled
10:54  smorg: (actually I have no idea what bash is implemented in... probably C.)
10:56  Dynetrekk: smorg: that's right. I thought a string would have a char[] datatype under the hood that would be looped over in C code without going through the python complexities
10:56  cheater99: it's probably implemented in bash.
10:56  smorg: bash-bash :)
10:56  Dynetrekk: cheater99: wouldn't that be too slow anyway? and weird, too
10:57  shylent: Dynetrekk: no, he is just being unfunny :P
10:57  cheater99: :p
10:57  cheater99: but other than that, what do you think gcc compiles under?
10:57  Dynetrekk: right. but I've got to admit, I was annoyed when I found out that gcc is written in C
10:57  cheater99: there you go
10:57  Dynetrekk: I know it's possible, it just sounds weird to me
10:58  efphe: hello, do you know a way to display verbosely an urllib2 request?
10:58  efphe: I would like to see details about data sent
10:59  kerio: Dynetrekk: not weirder than pypy
10:59  kerio: and pypy kicks ass
10:59  shylent: it does?
10:59  smorg: It doesn't matter technically how the compiler is programmed. You could write a C compiler in $slowLanguage which produces machine code just as good as any other.
10:59  Dynetrekk: kerio: no, but I just think it's weird that you can write $language in $language. conceptually, I mean. and pypy; what's so great about it?
10:59  kerio: JIT makes stuff go faaaaaaaaast
10:59  Dynetrekk: kerio: so pypy is faaaast?
10:59  kerio: so i've been told
11:00  shylent: kerio: maybe I should read more about it, I am not really keeping track of it
11:00  kerio: i never got through the 30min of translation
11:00 * shylent coughs
11:00  ronny: kerio: you computer is that good?
11:00  ronny: (i need 3-4 hours for a pypy translation)
11:00  shylent: are you guys kidding?
11:00  kerio: the website said half an hour
11:00  Dynetrekk: what is a pypy translation?
11:00  kerio: \_o_/
11:00  smorg: Well pypy is implemented in python, and since (c)python is an interpreted implemenetation, pypy can never be faster than cpython. If there were a compiled implementation of python however, then pypy could be faster than cpython.
11:01  ronny: smorg: uhm
11:01  ronny: smorg: pypy is faster than cpytohn these days
11:01  ronny: smorg: and if you enable the jit its orders of magnitude
11:01  Dynetrekk: ronny: but does pypy link to all the good ol' cpython libs?
11:01  smorg: ronny: which *python does pypy run on top of?
11:01  ronny: Dynetrekk: since they added cpyext that works
11:02  Dynetrekk: ronny: cool
11:02  ronny: smorg: pypy can compile itself to c/java bytecode/CLI
11:02  Dynetrekk: I guess it would make it easier to link C and java etc together, too
11:02  ronny: smorg: and the result is fast
11:02  ronny: and has a better gc
11:02  smorg: ronny: Ah okay - I was talking about a hypothetical python interpreter executed by another interpreter.
11:03  ronny: smorg: pypy can be executed that way
11:03  ronny: smorg: but thats only interesting for debugging
11:03  ronny: after all pypy is written in python
11:04  ronny: smorg: imho the most interesting part of pypy is the jit generator
11:04  ronny: they didnt write a jit for an interpreter
11:04  ronny: they wrote a generator for jits
11:04  ronny: (which can be applied to different interpreters)
11:04  smorg: so pypy is a compiler-compiler?
11:05  smorg: :)
11:05  Dynetrekk: sounds cool and at least level 42 geek
11:05  shylent: yeah, that's pretty kickass
11:05  ronny: i suppose one cold consider pypy as one of the holy grails of metaprogramming
11:06  smorg: That'd be GHC
11:06  Taos: anyone know how I can check the mode of a open file?
11:08  Bonaparte: Taos, wouldn't you know it at the time of opening it?
11:08  Nate75Sanders: Taos: f.mode ?
11:08  Taos: Thanks nate
11:08  Taos: :D
11:09  Nate75Sanders: Bonaparte: he might change the way he opens it in one place in his code and then use the file object elsewhere
11:09  Taos: Or never know the mode to start with when handing it to a function :)
11:09  Nate75Sanders: Taos: yeah, that's what I'm talking about
11:10  Nate75Sanders: Taos: well, there's some ambiguity, but whatever -- same type of scenario
11:11  smorg: Taos: Why don't you already know it's mode? The fact that it has a mode implies you opened it and specified a mode.
11:11  smorg: python3 doesn't have mode btw
11:12  smorg: f.readable or f.writable
11:12  farciarz84: http://www.jetbrains.com/pycharm/demos/quick_overview/pycharm_getting_started.html
11:12  Taos: hmmmm
11:13  Taos: smorg: is f.writeable a boolian?
11:14  smorg: 0 or 1 (so yes)
11:17  blubbi: mmh, how would I sort this kind of string? I would like to get the [] values seperate (with the brackeds) form the other values so this string 1,2,4,[1,212,2],123,11,[23,5,22],232,111 gets split up like a= 1,2,4,123,11,232,111 and b = [1,212,2],[23,5,22]
11:17  smorg: blubbi: this entire thing is a string datatype?
11:18  blubbi: yes
11:18  blubbi: reg = re.compile("\[[0-9]+,[0-9]+,[0-9]+\]") does the last part
11:18  shylent: unless there can be nested grouops
11:18  blubbi: and reg.findall(str)
11:19  blubbi: but how to sort out all the , seperated numbers (except those wrapped in the brackeds)
11:19  blubbi: smorg: would it make more sens to convert it to a list?
11:19  smorg: warning, highly stupid hack: list(eval("1,2,4,[1,212,2],123,11,[23,5,22],232,111"))
11:20  blubbi: smorg: hrrhrr
11:21  smorg: I wouldn't use eval unless you have really good input validation though.
11:21  shylent: "I wouldn't use eval" - fixed
11:21  blubbi: mmh, I could strip the results found by my re and replace ,, with ,
11:22  shylent: I would probably use pyparsing for this, just for kicks
11:22  Taos: if a file on 3.x is open for writing then F.writeable == 1?
11:22  blubbi: shylent: I guess this is overpowerd
11:22  blubbi: :-)
11:23  blubbi: shylent: but when you have a line at hand, I will try it (never used pyparsing before)
11:23  smorg: shylent: Well hacking the symbol table is probably easier than exploiting the turing-completeness of the input processor anyway in the case of Python :)
11:23  Dulak: in a unittest do you do imports in setUp()?
11:23  shylent: Dulak: why?
11:24  shylent: I do them as usual, on the module level, is there anything wrong with that?
11:24  Dulak: that's what I'm asking, any reason one way or the other?
11:25 * shylent checks Twisted source
11:26  shylent: well, they do it on the module level, so I guess there's nothing wrong with that at all
11:26  shylent: I didn't even think about it, to be honest, before you asked
11:26  bmjames: I'm not a fan of imports scattered throughout the code
11:27  Yhg1s: Dulak: if you do imports in a function, the names will only be introduced in that function.
11:27  Dulak: ahhhh, ok, thanks
11:28  Yhg1s: There is *some* value if you do them in a method and assign to instance attributes; it allows a subclass of the testcase to change the module that is being tested without reimplementing each test.
11:28  Yhg1s: but that's not a very common desire.
11:29 * shylent did what Yhg1s described a number of times
11:29  shylent: thats a special case, though
11:30  Dulak: what would you be changing in the module though?
11:30  shylent: predefined defaults?
11:30  shylent: 'constants' (even though there are no constants)
11:32  Dulak: they are just module level properties right?
11:32  Dulak: or module scope I guess?
11:33  shylent: more or less (although 'property' means something else in python)
11:33  Dulak: what is the right word for them then?
11:34  smorg: man python3 should really have all slices be islices
11:35  Dulak: also in a unit test assertion can you use the in operator?
11:35  shylent: Dulak: you can use anything, self.failUnless(foo in bar, 'Foo must be in bar!')
11:36  Dulak: assertTrue(thing in create_list())
11:36  jorrit: Dulak, is it just python.
11:36  Taos: if a file isnt writeable on py3, then F.writeable == 0?
11:36  bmjames: Dulak: you are just creating a boolean. It isn't special syntax for the assert.
11:37  bmjames: I think the django version of unittest has an assertContains
11:37  bmjames: which will generate a smarter failure message
11:37  smorg: Taos: Yes. If you try opening a file in 'r' mode writable becomes 0
11:38  Dulak: thanks all, I'm roughly porting a ruby library to python and figured doing the unit tests first would be about the best way to start and I barely mess with unittests, though I want to get better at it
11:38  bmjames: oh, unittest has an assertIn and an assertNotIn anyway.
11:38  shylent: oh :P
11:38  bmjames: I wonder what assertContains does that's different...
11:38  bmjames: ah, assertIn and assertNotIn were added in 2.7
11:39  Dulak: yeah I'm on 2.6 atm
11:39  shylent: that's why I don't "remember" about them, I suppose :p
11:39  Taos: How do you do, if something == 'a' or 'b' properly?
11:39  Yhg1s: Taos: 'something == 'a' or something == 'b''
11:39  Yhg1s: or, 'something in ('a', 'b')'
11:40  Taos: Thanks
11:41  Dulak: talk about run on sentences
--- Log opened Tue Oct 19 11:58:10 2010
11:58 --- Users 728 nicks [0 ops, 0 halfops, 0 voices, 728 normal]
11:58  Yhg1s: or maybe you want to use values[len(primary_keys):] for the second use of values, it's hard to tell.
11:59 --- Channel #python was synced in 92 seconds
11:59  teratorn: very hard to tell, still
12:00  Nate75Sanders: I think Yhg1s is solidly on the right track
12:00  Taos: It sounds good im just about to test :D
12:00  emilevictor: Hi all, is there a specialised channel for PySerial?
12:01  Yhg1s: emilevictor: I doubt it.
12:02  emilevictor: hmm... thanks - i am having major issues with it - I have installed it via the exe installer on windows 7
12:02  emilevictor: yesterday it was working
12:02  emilevictor: today every time any part of the package is used it brings up this massive wall of errors
12:02  emilevictor: i reinstalled it
12:02  emilevictor: and reinstalled python
12:02  emilevictor: still the same problem
12:02  Habbie: so, something else changed
12:02  Habbie: what kind of errors?
12:03  emilevictor: it is the same issue as seen in this thread: http://bytes.com/topic/python/answers/598775-pyserial-example-program-error-win32file-setupcomm-reports-incorrectfunction
12:03  emilevictor: however, reinstalling everything does nothing
12:03  kerio: pypy needs precompiled binaries imo
12:05  kerio: hmm, translating pypy with pypy should be faster, right?
12:06  emilevictor: ??
12:07  emilevictor: I've reinstalled *everything* but it's still giving me the same error
12:08  emilevictor: ctypes.WinError() ValueError: Cannot configure port, some setting was wrong. Original message: [Error 1] Incorrect Function
12:08  kerio: so... stop trying to reinstall
12:08  kerio: and fix the problem
12:08  emilevictor: Fix what problem? I'm running the example scripts they provide on the website.
12:08  emilevictor: scan.py etc
12:09  emilevictor: Yesterday it was working, today it isn't.
12:09  emilevictor: same pc, nothing new installed
12:09  emilevictor: :/
12:09  emilevictor: same ftdi driver, same piece of hardware plugged in
12:09  kerio: you clearly changed something
12:10  emilevictor: :|
12:11  Antonis: Hello folks. I have a question. I am using sqlite3 with python and do a try: sqlitecommand except sqlite3.OperationalError, errmsg: I use print errmsg and then try to use an if errmsg = "what the print gives me": to catch a specific error and do something when it occurs but it won't work. why is that?
12:11  Antonis: I mean the if always return false even if I usethe exact same text
12:12  metalfoo: Is there a way to reference the callers name in the callee? like def bar(): foo()  def foo(): print("I was called from " + <inserthere>)
12:13  shylent: Antonis: you are doing it wrong :/
12:13  pantsman: Antonis: the exception has a string representation, that doesn't mean the exception is equal to the string
12:13  teratorn: Antonis: the "errmsg" variable you define won't be a string, it will be an Exception instance
12:14  Antonis: oh :\ I thought it was a string since it printed well using print errmsg.. how do I catch an exception then? I mean how do I check what kind of exception it is?
12:14  pantsman: 'print 1' prints a "1"; that doesn't mean 1 == "1" does it
12:15  teratorn: Antonis: so you can check out what attributes the instance has... like .args
12:15  Nate75Sanders: metalfoo: Look into sys._getframe()
12:15  metalfoo: Thank you
12:15  robertpayne: is there any reason struct.pack('L', 10) would pack the long as 8 bytes instead of 4?
12:15  teratorn: Nate75Sanders: please don't help people do things that are almost certainly bad
12:15  Antonis: teratorn, where in the manual (which one? python or sqlite3) can I read more about this?
12:16  Taos: Yhg1s: Remember that answer you gave me, can i make it more tricky :S
12:16  Nate75Sanders: teratorn: "We're all consenting adults here"
12:16  teratorn: Nate75Sanders: that's no defense :)
12:16  pantsman: this is a PG channel when it comes to poor advice
12:17  Nate75Sanders: teratorn: My mind isn't even close to changed.  If he wants to know how to see who called him, that's fine.
12:17  Yhg1s: Taos: I'm not sure what you mean.
12:18  teratorn: Nate75Sanders: I don't really care...
12:18  Taos: dw I think i solved it anyway
12:18  teratorn: Nate75Sanders: it's one of those unwritten rules of #python
12:18  Yhg1s: Nate75Sanders: not without ample warning it isn't.
12:18  Yhg1s: metalfoo: sys._getframe() is unportable and slow, and possibly wrong.
12:18  Yhg1s: metalfoo: what are you trying to do?
12:21  metalfoo: Yhg1s: I'm about to customize the Logging class for my purpose. But I saw, the information I want is already available on logging.LogRecord class
12:25  lvh: Greetings.
12:28  Antonis: thanks guys
12:31  efphe: ehm
12:31  efphe: i'm encountering a really, really, really strange behaviour
12:32  efphe: and i'm wondering if i encountered an heavy python bug
12:32  efphe: or, maybe, something I can't understand
12:32  efphe: can I explain my case?
12:32  bagu: that remains to be seen
12:32  efphe: ok
12:32  efphe: i have something like:
12:32  efphe: A=1
12:32  efphe: B=2
12:32  efphe: ....
12:32  efphe: after that, I build a dict like this:
12:32  efphe: d= {
12:32  efphe:  A: 'a',
12:33  efphe:  B: 'b',
12:33  efphe:  ...
12:33  efphe: }
12:33  efphe: now
12:33  efphe: when i define a new symbols (the number 16), the dict goes crazy
12:33  efphe: when i define a new symbol (the number 16), the dict goes crazy
12:33  efphe: ie
12:33  efphe: if I do:
12:33  efphe: A=1
12:33  efphe: B=2
12:34  efphe: ...i define here 15 symbols...
12:34  efphe: the dict behaves as I expect
12:34  efphe: when I define the 16
12:34  efphe: the dict has an additional key! the 64!
12:34  efphe: it's crazy
12:34  bob2: man
12:34  pantsman: have you ever heard of a pastebin?
12:34  efphe: yes
12:34  efphe: i'm going to wgetpaste it
12:35  bob2: Don't paste in here: use http://fpaste.org
12:35  bagu: I'm curious what you expect the dict to do though
12:35  bob2: that appllies basically everywhere
12:35  bob2: but pastebin a runnable example
12:36 --- oracle is now known as bladerunner
12:36  impulze: heya, when using urllib.open(...).info() i receive the following information: http://dpaste.com/260080/ how would i obtain the .zip file attached as binary?
12:36  Yhg1s: impulze: urllib.open().read()
12:38  impulze: Yhg1s: that's the html document isn't it?
12:38  impulze: or is it the content in general?
12:38  Yhg1s: there is no 'html document'.
12:38  Taos: Yay I finished my module :D
12:38  Yhg1s: the headers you show say the data is a zipfile. the zipfile you want.
12:39  Taos: For reading and writing files in the BED format, feel free to rip me apart for my foolish errors, http://codepad.org/mrdoms8J
12:40  impulze: Yhg1s: thanks :)
12:41  bob2: Taos: typechecking like on line 26 is discouraged - e.g. your code will fail if someone passes a StringIO in
12:42  efphe: bob2, bagu, i can't reproduce debug outside my libraries :/
12:42  efphe: i'm trying to do it
12:42  bob2: actually, 25-34 are probably best just gone
12:42  Taos: what is a StringIO and why can't I make sure that a file is writeable before I use it
12:43  efphe: crazy
12:43  bob2: ditto 80-89
12:43  bob2: Taos: a file-like object that would work fine in this case
12:43  bob2: just let the .write fail
12:44  [diablo]: morning all...
12:44  bob2: python people are used to that happening
12:44  bob2: and the IOError will be plenty clear
12:44  bob2: then all the version foo can die
12:45  [diablo]: anyone offer any ideas on sending out an HTML email via python but with 2.4 ... seems it has no MIME support
12:45  farciarz84: why best python IDE are written in java?
12:45  Taos: Yea it can now I removed those lines
12:45  Yhg1s: [diablo]: what makes you say that?
12:45  Yhg1s: farciarz84: 'best' is rather subjective. I would disagree that they are.
12:46  [diablo]: Yhg1s, in the email module there on python 2.4 there is no MIME support
12:46  Yhg1s: farciarz84: however, people who like IDEs are usually people who *need* IDEs for their language to be remotely useful, like Java programmers. So they write it in the language they know.
12:46  [diablo]: Yhg1s, 2.6 onwards seems to have email.mime
12:46  Yhg1s: [diablo]: this is not true.
12:46  [diablo]: email.mime.multipart is what I need sorry
12:46  Yhg1s: [diablo]: the modules are just named differently in 2.4. See the docs.
12:47  Taos: Bah all you need is a compiler or interprator and vim/emacs
12:48  efphe: bob2, bagu, this snippet doesn't reproduce the bug, anyway, beleive me, what I describe here is happening inside my libs:
12:48  efphe:  http://paste.pocoo.org/show/277347/
12:48  Yhg1s: efphe: we don't believe you. *Something* is different, or it would reproduce.
12:49  efphe: Yhg1s, patience
12:49  farciarz84: Yhg1s: if you say emacs/vim is better then pycharm/eclipse+pydev then what you say may be right. But to be objective IDE, current IDE halps a lot in debugging, unittesting, GAE deployment, code completion and much more which is also helpfull for python
12:49  efphe: if you can find something interesteing, good
12:49  efphe: oteherwise, I solved by avoiding to use the key 16
12:49  Yhg1s: efphe: show us the actual code that behaves the way you describe.
12:49  efphe: becuase it breaks the dict
12:49  Yhg1s: farciarz84: it may help *you*, it certainly doesn't help *me*. I don't even use emacs or vim.
12:50  NelleV: farciarz84: this is a question of personal preferences. I'd rather use vim than pycharm/eclispe+pydev. It doesn't mean that everyone should use vim
12:50  Taos: (i have code completion in my vim)
12:50 * bob2 rolls the dice...confusion about instance attributes vs class attributes
12:51  farciarz84: NelleV: vim does'nt have such features as rich IDE has
12:51  Taos: farciarz84: unless you add them yourself
12:52  Yhg1s: farciarz84: why are you worried about this? If you want to use eclipse and its knobs and bells, that's fine. Nobody objects to you doing so.
12:52  NelleV: farciarz84: and ? i don't need them
12:52  Taos: Its all choice and likes in the end so long as the code is good ^^
12:53  NelleV: farciarz84: eclipse would just not run on my computers anyways :p
12:53  farciarz84: I'm just curious what stops python programmers to built such good IDE as those written in java
12:53  Yhg1s: farciarz84: usually because they already exist, so why would you waste time and effort recreating them?
12:53  Yhg1s: and also because many Python programmers don't care for such features.
12:53  NelleV: and also because IBM hasn't decided yet to build an Eclipse for python.... :p
12:54  bagu: (thank god)
12:54  farciarz84: Yhg1s: why they dont' care and why they(you) don't need them?
12:54  Yhg1s: farciarz84: I don't understand why I *would* need them. I do fine without them. And even if I did, why would I care what language it's written in?
12:54  Yhg1s: Why do *you* care?
12:55  NelleV: vim/emacs has all the features I need/want.
12:55  farciarz84: I use emacs and noticed that with pydev + eclipse it's just faster
12:56  Yhg1s: "it"?
12:56  farciarz84: coding
12:56  NelleV: maybe it is just that you don't use emacs properly :p
12:56  Taos: farciarz84: Have you tried vim?
12:56  Yhg1s: good for you. The same is not true for many people. It's subjective.
12:56  NelleV: (I don't use emacs but I've heard it is very powerful)
12:56  farciarz84: Taos: emacs is better then vim;P
12:56  Taos: farciarz84: Opinnion, ^^
12:56  zoidberg-: Hey guys, I am learning python and trying to figure out why this one liner does not work, yet if i break it up it works: Python
12:57  Taos: zoidberg-: whats the line?
12:57  Yhg1s: zoidberg-: use a pastebin to show us, makes for easier discussion.
12:57  zoidberg-: Hey guys, I am learning python and trying to figure out why this one liner does not work, yet if i break it up it works:  http://codepad.org/o9mDGnLd
12:57  zoidberg-: Pasted the wrong thing then, "Python" instead ot the link :)
12:58  Yhg1s: zoidberg-: yes, you can't stuff everything on one line.
12:58  Taos: zoidberg-: because each line doesnt work like that
12:58  zoidberg-: Basically an if statement that i'd like to do on one line
12:58  Yhg1s: too bad.
12:58  Taos: Why not do it in several lines?
12:58  bob2: you can't readably do that
12:58  zoidberg-: Well I wanted to enciorporate it into something like this:
12:58  zoidberg-: [elements for elements in li if elements == "a" ] <-- that works for nstance
12:58  zoidberg-: so i wanted to add more options to the if
12:58  Yhg1s: well, you can't.
12:59  zoidberg-: Ok thanks
12:59  bob2: write a function
12:59  zoidberg-: so much mis information on the nternet
12:59  bob2: (with def, not lambda)
12:59  Yhg1s: that's a list comprehension. a list comprehension can contain an expression. if statements are statements. Also, print is a statement.
12:59  Yhg1s: Use a normal for loop.
12:59  zoidberg-: ok just working through dive into python thought i'd play with that some ore
12:59  Taos: You can only set one for lambda?
12:59  Yhg1s: Taos: what?
13:00  zoidberg-: ok thanks guys
13:00  Yhg1s: zoidberg-: I wish Dive Into Python was a less bad book.
13:00  Taos: lambda x: print x | lambda x y: print x
13:00  Yhg1s: Taos: I don't understand what that means.
13:00  Taos: creating a lambda function that takes two arugments
13:00  Yhg1s: Taos: print is a statement. it doesn't fit in lambda expressions, which can only contain an expression.
13:00  Taos: ah i see
13:00  bob2: Taos: lambdas can take two args, but print is a statement so can't be used in a lambda at all
13:01  Taos: ok..
13:01  Yhg1s: and there's nothing you can do with 'lambda' that you can't do with 'def' on the line before.
13:01  lvh: (except piss off Yhg1s)
13:01  Taos: Yhg1s: I used to think that ^^ I still do mainly
13:01  Yhg1s: nah, you can piss me off with a 'def' statement just as well.
13:02  Yhg1s: Taos: where do you think you can only use a lambda?
13:02  Taos: I use lamda in sorted() sometimes
13:02  lvh: Yhg1s: Did you catch the part where someone was trying to use a global in order to get a value in a thread for an IRC bot yesterday?
13:03  Yhg1s: nope.
13:03  Taos: lvh: did you see someone take irc input and pass it through eval()
13:03  lvh: Taos: Yeah
13:03  bob2: Taos: have you seen the key arg + operator.itemgetter/operator.attrgetter?
13:03  Yhg1s: Taos: sure, you *can* use lambda for many things, but there's never a case where def won't work just as well.
13:03  Taos: bob2: nah
13:03  bob2: that's like 99% of what people end up using lambda for with sorted
13:05  Taos: Threading is just wrong at the best of times
13:05  lvh: Taos: Nah, there are cases where you don't have a choice
13:06  Yhg1s: no, unlike lambda, threads *do* have a unique usecase. it just isn't what most people think it is.
13:06  lvh: Thankfully deferToThread covers them
13:06  Taos: Yhg1s: I have never used threads recently for anything
13:06  lvh: Taos: Well, yes -- most people don't need them
13:06  Taos: I dont see the point for 99.9%
13:06  Yhg1s: that's fine. most people don't need to, because they don't use libraries that require it, or they use libraries that do the threading part behind their back.
13:07  Taos: Even the .1% I dont understand but I get there might be a strange case
13:07  Yhg1s: it's mostly to do with libraries and systems that have no asynchronous interface bar threading.
13:07  Taos: I see
13:07  lvh: I was thinking: a) bad blocking APIs, b) CPU blocking that uses too much of the current process' objects for a subporcess to make sense
13:08  lvh: but admittedly (b) is a very debateable edge case :-)
13:08  Taos: Multiprocessing at all for a?
13:08  lvh: Taos: multiple processes is probably a bad idea for 99% of blocking APIs
13:08  Taos: Really?
13:08  lvh: Taos: IPC is cheap, but it's still more expensive than not-IPC
13:09  Yhg1s: and it depends greatly on what the blocking call does, and needs.
13:09  Taos: Mhm fair enough...
13:09  Yhg1s: you can't always do the same thing in a separate process without copying large amounts of data.
13:10  Taos: Im still trying to learn the finer points of this language
13:12  Taos: im sure there is more i could be learning
13:12  Taos: there is always more to learn
13:14  Taos: What do you people think is important skills for an experienced python programmer
13:14  lvh: Taos: Not knowing what metaclasses are
13:14  lvh: Taos: Not knowing what type/3 does
13:14  sid3k: why r'(\.\.\/)+' doesn't match all "../" strings?
13:15  Taos: type/3 huh?
13:15  bob2: lvh: I am glad that raises typeerror
13:15  lvh: Taos: Not knowing what type/1 does either
13:15  GISDataMonkey: Hello, noob here. If I can import a python site-package when running a script directly. Is there any reason why importing the same site package may kick up an error is run via python CGI (IIS). Here is my error log http://fpaste.org/KdwE/. Thanks!
13:15  PeanutHorst: are there at present any fully compatible python 2 implementations other than the canonical Cpython? i'm thinking of pulling one apart to experiment on >_>
13:15  lvh: bob2: I don't know how to express n-aryness of functions in Python
13:15  Yhg1s: sid3k: what makes you say it doesn't?
13:15  bob2: lvh: oh, right
13:15  lvh: bob2: I mean type(a, b, c) ;-)
13:16  bob2: Taos: that clarity beats fancpantsiness
13:16  bob2: PeanutHorst: jython, ironpython and pypy are more or less complete
13:16  Taos: Oh I try to keep clean code with a simple process
13:16  bob2: aside from c extension support
13:16  sid3k: Yhg1s: re.findall('^(\.\.\/)+','../../foo') returns ['../']
13:17  Taos: And what is metaclassing
13:17  PeanutHorst: bob2: thanks kindly. that's a mild relief, i poked into the python source a bit and found it rather intimidating t_t'
13:17  lvh: Taos: evil mostly
13:17  lvh: Taos: Also occasionally required
13:18  bob2: PeanutHorst: dunno if the others will be less mindblowy :)
13:18  atrapado: hi. any way to call a defined function like f(a,b,c) given a vector of size 3 with the values of a,b and c like [1,2,3] ?
13:18  Taos: lvh: I thought they could be used for great good when understood
13:18  bob2: atrapado: yup, section 4.7 of the tutorial in the topic
13:18  d_m: atrapado: f(*vector)
13:18  bob2: atrapado: works with dictionaries, too
13:18  sid3k: any ideas? it's a fucking weird situation
13:18  PeanutHorst: bob2: well, worth a try, thanks :)
13:18  Yhg1s: sid3k: because your group matches only '../', twice. Only the second occurrence of '../' is captured.
13:18  lvh: there is one great thing about metaclassing: it convinces people to never subclass anything
13:18  atrapado: mmm ok thanks bob2 and d_m
13:18  sid3k: Yhg1s: what should I do?
13:18  Yhg1s: sid3k: depends on what you really want. Perhaps you don't want to use re for this at all.
13:19  Yhg1s: but if you do, make the group non-matching, and possibly make a group that does match what you want.
13:19  Taos: why is subclassing bad?
13:19  sid3k: Yhg1s: I need to extract the part that consists of "../" strings
13:19  lvh: Taos: well, that was a bit of a blanket statement, but the short version is that you should be composing instead
13:19  Yhg1s: sid3k: to what end?
13:20  Yhg1s: PeanutHorst: the CPython source is probably the most readable Python implementation out there.
13:20  lvh: Taos: my rule of thumb is: only ever use other thing's public API, regardless of what you're doing
13:20  Yhg1s: PeanutHorst: and one of the most readable C applications, for that matter
13:20  sid3k: to what end?
13:20  lvh: Taos: subclassing is occasionally useful for removing boilerplate code: eg Twisted's base IProtocol implementation
13:20  Yhg1s: sid3k: yes, to what end. what are you trying to achieve? What is the end goal?
13:20  bahamas: Taos: here's a good resource about metaclasses http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python
13:21  Yhg1s: GISDataMonkey: looks like something in the environment was not the way this arcgis thing expected.
13:21  seiflotfy: hey guys
13:21  seiflotfy: http://pastebin.com/bhPCJuY2
13:21  seiflotfy: which piece of code is quicker
13:21  seiflotfy: top or bottom
13:21  lvh: seiflotfy: please use a decent pastebin
13:22  lvh: seiflotfy: use the timeit module to find out
13:22  lvh: infobob: ping! why aren't you repasting that
13:22  seiflotfy: and memory
13:22  Yhg1s: seiflotfy: try it and find out.
13:22  Taos: Top code would be more efficient and faster I think, iteration is faster than creation
13:22  Yhg1s: Taos: they both iterate, and they both create.
13:22  GISDataMonkey: Yhg1s: Thanks The package is located in a .pth file.  Will the path change if accessed via cgi?
13:22  sid3k: Yhg1s: I just need to match that text, does it matter?
13:23  seiflotfy: http://paste.pocoo.org/show/277359/
13:23  seiflotfy: what about memory
13:23  Yhg1s: seiflotfy: try it and find out.
13:23  lvh: seiflotfy: Neither of them differes significantly in terms of memory or CPU time
13:23  sid3k: Yhg1s: How can I capture all match?
13:23  lvh: seiflotfy: use the bottom one, though
13:23  Yhg1s: sid3k: by grouping appropriately, or not having any groups.
13:23  Yhg1s: sid3k: but if you're dealing with paths, perhaps there's a better way of doing what you're trying to do.
13:24  lvh: seiflotfy: Also you appear to be using self inside something that isn't a method
13:24  Yhg1s: GISDataMonkey: nope, but other stuff in the process might be different. Such as ownership, permissions, etc.
13:24  sid3k: Yhg1s: nope, this is a specific situation
13:24  Yhg1s: sid3k: and yet that doesn't mean there's not a better way.
13:24  lvh: seiflotfy: So either you've pasted part of a closure (and the indentation is wrong) or you forgot about explicit self
13:24  d_m: sid3k: you might want to look at os.path
13:25  sid3k: Yhg1s: I know and use os.path as like my name
13:25  Yhg1s: sid3k: I wasn't the one suggesting os.path.
13:25  sid3k: arright
13:25  sid3k: still I don't know what is wrong with my pattern
13:25  Yhg1s: I guess you missed the explanation.
13:25 --- cna_ is now known as cna
13:26  Yhg1s: make the group a non-capturing one and you'll see.
13:26  sid3k: '^(\.\.\/)+' matches right in javascript
13:26  Yhg1s: it does match the right thing, re.findall just returns the contents of the *group*, and since it's a repeated group, it returns the contents of the *last match of the group*.
13:26  Yhg1s: perhaps you don't want to use re.findall, instead.
13:27  sid3k: Yhg1s: could you give an example please? I've tried non-grouped pattern, too and doesn't change anything
13:27  Yhg1s: >>> re.findall('^(?:\.\.\/)+','../../foo')
13:27  Yhg1s: ['../../']
13:27  sid3k: ah. thanks
13:28  Yhg1s: >>> re.match('((?:\.\.\/)+)','../../foo').groups()
13:28  Yhg1s: ('../../',)
13:28  Yhg1s: I don't understand why you're using re.findall if you only expect one match.
13:28  sid3k: arright, get it now
13:28  d_m: Yhg1s: maybe so it will break on "../../foo/bar/../duh" ;)
13:28  Yhg1s: d_m: notice the anchor.
13:28  d_m: Yhg1s: right, in your version
13:29  Yhg1s: also in his original.
13:29  d_m: ah ok
13:30  sid3k: d_m: normpath fixes that one
13:41  blubbi: is there a way to get everything that die _not_ match this regexp re.compile("\[[0-9]+,[0-9]+,[0-9]+\]")
13:42  blubbi: s/die/did
13:42  Yhg1s: blubbi: that depends. do you want 'every line that does not match this regexp', or 'the data with all matches stripped out', or something else?
13:42  lvh: blubbi: yes: make a regular expression that negates that one completely
13:43  blubbi: it is a plain string which is checked
13:43  Yhg1s: lvh: you make that sound possible.
13:43  blubbi: lvh: i was trying but without success... :-(
13:44  blubbi: lvh: something like 1,3,5,[6,20,1],21,30,[31,35,1], 34,222,33
13:44  blubbi: without the " " in front of the 34
13:44  Yhg1s: and what do you want to get?
13:44  blubbi: everything that is not in the []
13:45  Yhg1s: re.sub(r"\[[0-9]+,[0-9]+,[0-9]+\]", "", data) comes to mind then.
13:45  Yhg1s: or, not using a regular expression, and just tokenizing the string yourself.
13:45  blubbi: with re_range = re.compile("\[[0-9]+,[0-9]+,[0-9]+\]") I get the braces witht the contetnt, but now I would like to get the rest
13:45  blubbi: lets test it
13:45  lvh: s.split(",") sounds like a million times better
13:45  blubbi: lvh: and then?
13:46  blubbi: does it split into lists and sublists?
13:46  lvh: No, that would be less helpful
13:46  blubbi: ack
13:47  blubbi: just tried it
13:47  blubbi: how would split help me
13:49  jedbrown: I have a project that uses python and has not yet transitioned to python3 (due to lagging dependencies and need to support back to python-2.3).  I just learned that OS-X does not provide the "python2" link so I can't use /usr/bin/env python2.
13:49  Yhg1s: jedbrown: so use '/usr/bin/env python'
13:49  Yhg1s: any system that doesn't have 'python' be a python2 is inherently broken.
13:49  jedbrown: Is there a satisfactory solution so that it works on systems where /usr/bin/python = python3.
13:49  Yhg1s: /usr/bin/python shouldn't be python3 for many years yet.
13:50  jedbrown: Archlinux now has /usr/bin/python = python3
13:50  Yhg1s: so file a bug with ArchLinux. they're being stupid.
13:50  teratorn: jesus that is retarded
13:50  lvh: http://bpaste.net/show/10221/
13:50  Yhg1s: it will be an issue with huge amounts of projects.
13:50  teratorn: 'python' should be python2 forever
13:50  jedbrown: And this is just delaying the problem, there will be a period where we need to support old versions of python, yet python=python3 is also common.
13:51  jedbrown: Wow, strong response.  Interesting.
13:51  lvh: jedbrown: Yeah, we're *nowhere near* that point yet
13:51  lvh: jedbrown: Like, off by five years
13:51  Yhg1s: jedbrown: the problem needs to be delayed to the point where either people forget about /usr/bin/python altogether (and just use python3 for python3.x) or python2 is available everywhere (which it isn't *at all* at this point.)
13:51  lvh: blubbi: Did you get that paste? That was for you
13:51  blubbi: lvh: uh sry no , where?
13:52  lvh: http://bpaste.net/show/10221/
13:52  blubbi: ah thanks
13:52  Yhg1s: jedbrown: this is not a unique or new situation, perl had this same situation with perl4 and perl5 for decades.
13:52  mar77i: why should I not use += with a list? this not okay? dumbitems=[]; for blah in list: if blah is dumb: dumbitems += [blah]
13:52  jedbrown: Well, everything packaged for Arch is working fine after this transition.  It's just a problem when the packages come from upstream.
13:52  lvh: blubbi: That's basically Yhg1s' advice about "tokenize yourself", although I'm not sure that's exactly what he had in mind
13:52  jedbrown: Yhg1s: Yeah, understood.
13:52  Yhg1s: mar77i: it's redundant and inefficient. dumbitems.append(blah) is what you should use. += is syntax for list.extend(), not list.append().
13:53  mar77i: okay, it is in this case... :)
13:53  jedbrown: I though python2 has been available for a long time, I was quite surprised that it wasn't there even on recent OS X.
13:53  lvh: blubbi: I relinquish copyright if this is for a permissively licensed project
13:53  blubbi: lvh: lol
13:53  Yhg1s: jedbrown: it used to be available on RedHat, because /usr/bin/python was 1.5 even when the rest of the world was happily using 2.1 and 2.2. Other than that, it's not common at all.
13:53  blubbi: lvh: no it is academic :-)
13:54  lvh: blubbi: Next time, please mention up front when people are doing your homework for you ;-)
13:54  lvh: blubbi: In that case, you just have to mention copyright
13:54  blubbi: lvh: nope, no Homwark, I am a scientist ;-) I Finished my Diploma some years ago :-)
13:55  jedbrown: Yhg1s: Okay, good to know.  I've seen it on all the 2.3 .. 2.7 Linux systems I've been on for the last few years, which is why I was surprised it was not pervasive.
13:56  Taos: Could you measure distance vs responce time over wireless?
13:57  Yhg1s: Taos: that doesn't seem like a Python question.
13:57  lvh: Taos: no
13:57  Taos: lvh: to many variables?
13:57  impulze: Yhg1s: when i read the binary file with response.read() the length is 0 :S
13:57  lvh: Taos: You can measure things that are close, though
13:57  Yhg1s: impulze: then you did something wrong.
13:57  Yhg1s: impulze: pastebin your code and we can take a look.
13:58  lvh: Taos: there's mo way for your wifi card to know if you've suddenly decided to put wire gauze in between the transceivers
13:58  mar77i: Taos: take this cupboard box and your distance grows by 100% at least :)
13:58  lvh: Taos: but I'm fairly sure it'll negatively impact communication
13:58  Taos: would the lazer point in a optical mouse be any good for a wall?
13:58  Taos: measuring distance
13:59  lvh: Taos: Nope.
13:59  Taos: Hmmm
13:59  lvh: Taos: Measuring distance is harder than it sounds. How precise does it have to be?
13:59  Taos: ironicly quite precise
13:59  Taos: but
13:59  Taos: it was just a thought game
14:00  mar77i: measure outside, schrödinger :)
14:04  Taos: (off topic but scary as: http://www.youtube.com/watch?v=R_w4HYXuo9M its math)
14:04  blubbi: okay, call me stupid, but why am I not able to append two lists? L = RESIDS.append(RESID_L) when printing L I get "None" http://paste.pocoo.org/show/277370/
14:04  aj-dneg: is there a default decorator for functions defined in classes?
14:04  jorrit: blubbi, show us the code
14:04  bob2: blubbi: .append returns None
14:05  bob2: blubbi: instead, you're mutating RESIDS
14:05  jorrit: But indeed. append doesn't return anything.
14:05  blubbi: http://paste.pocoo.org/show/277371/
14:05  jorrit: blubbi, question was answered.
14:05  rmancy: Hi, I was trying to use NamedTemporaryFile() to create a file which another process could use. Obviously though the file is cleaned up before I can get to it. Am I stuck with having to use something like open() ?
14:06  pantsman: blubbi: would be far more helpful if you pasted the input and output in the same paste...
14:06  papna: rmancy: If you need to manually manage the lifetime of a file, you can't have tempfile do it automatically.
14:06  papna: aj-dneg: What? No.
14:07  papna: aj-dneg: Are you trying to figure out how functions become methods?
14:07  blubbi: pantsman: next time
14:07  rmancy: papna, thats a shame, but I guess the only logical conclusion
14:07  mar77i: Taos: I'm with the comments section: Im glad I watched this it is extremely relevant to my day to day﻿ life
14:07  aj-dneg: papna: my method is defined def foo(self) but when i decorate it with my own decorator, it doesn't get called with the instance of the class...:(
14:07  papna: aj-dneg: Your decorator returns an instance of a class?
14:08  aj-dneg: papna: yes actually (one that implements __call__)
14:09  papna: aj-dneg: Implementing __call__ isn't enough. You also need to implement __get__ so that you're using the descriptor protocol.
14:09  aj-dneg: papna, ah...
14:09  papna: aj-dneg: Methods work by a thing called "descriptors", which means that when they're stored on a class when you look them up, they're asked for more information.
14:09  papna: aj-dneg: In your class, put def __get__(self, obj, type=None): return types.MethodType(self, obj, type)
14:10  Reenen: portable python: complains: No module named pygtk - 100% can I install pygtk on the portable version... how?
14:11  aj-dneg: papna: awesome. btw i'm still py2.5, do i need to inherit from object?
14:11  papna: aj-dneg: Yes.
14:11  papna: aj-dneg: (Which you should have been doing anyway.)
14:11  aj-dneg: i tend to forget until something breaks...
14:12  laR0che: hi all, I'm getting the error "SerialException: call to ClearCommError failed" when I call pyserial's inWaiting() function. It works perfectly fine on my "non-classified" version, but the version that required the file to be classy fails with that error. PySerial does not appreciate tuxedos
14:14  blubbi: This is not my day... why is RESIDS = sorted(RESIDS) working and RESIDS.sort() returns None. RESIDS is a plain list with only REAL numbers
14:14  aj-dneg: papna: thanks muchly, i never got the hang of this descriptor thing till now!
14:14  Alberth: blubbi: X.sort() sorts in-place
14:14  jorrit: blubbi, sort() sorts in place.
14:14  blubbi: i know
14:14  jorrit: blubbi, so it doesn't return anything.
14:14  Alberth: blubbi: X.sort(); print X
14:14  spliffi: hi community
14:15  blubbi: Alberth: mmh okay, so i cant "print X.sort()"
14:15  blubbi: I understand...
14:16  Alberth: blubbi: you can, but it prints "None", as x.sort() returns None as value :)
14:16  blubbi: *G*, okay
14:16  Tau: how could i test whether a given number x is integer or rational ? in other words, suppose that i have x = 4. 553, i want a function is_int(x) which would return False.
14:16  Tau: is there such a function ?
14:16  Yhg1s: Tau: depends. do you expect 4.000 to be an integer or a float?
14:17  mahound: does anybody know if there is a way to check whether a an extra is enabled in a setuptools package?
14:17  Tau: Yhg1s: well. in that case, 4.000 must be a integer.
14:17  Yhg1s: Tau: int(x) == x then.
14:17  Alberth: laR0che: we know all about the Python language, but a lot less about arbitrary python modules
14:18  Tau: Yhg1s: ohh, good job, heh :)
14:18  Yhg1s: Tau: but keep in mind that floats can be really close to an integer value and still not identical.
14:18  Tau: Yhg1s: hmm, true.
14:18  jorrit: Tau, why do you need this?
14:18  Tau: all right, thank you.
14:18  Yhg1s: Tau: and floats aren't rationals. You may want to read chapter 14 of the tutorial at docs.python.org/tut, if you haven't already.
14:18  Tau: jorrit: cause i am solving a problem.
14:18  jorrit: Tau, yes. And I'm asking what problem :-)
14:18  Tau: Yhg1s: all right, i will try.
14:18  Tau: jorrit: yeah. it is a mathematical problem.
14:18  Tau: jorrit: something about pythagorian numbers.
14:19  nvictor: heu hi python
14:19  Tau: jorrit: http://projecteuler.net/index.php?section=problems&id=9
14:19  nvictor: didn't habnabit write an irc client?
14:19  jorrit: Tau, note that you cannot trust comparisons with floating points really.
14:19  jorrit: Tau, usually you have to do an epsilon test.
14:20  Tau: jorrit: yes. i am noticing it now. cause python will approximate the values when the operations are done.
14:20  tomas_: can anybody tell me how to make string: start=2010-01-11,end=2010-01-20,allocate=qe into dict?
14:20  Tau: jorrit: yeap.
14:20  jorrit: Tau, that's not python that is doing that.
14:20  blubbi: lvh: okay, I donÄt now if this more complicated, or slower then your code, but it works :-) http://paste.pocoo.org/show/277376/
14:20  jorrit: Tau, that's your computer hardware.
14:20  Tau: jorrit: yea.
14:20  Tau: jorrit: i will be back in some minutes.
14:21  spliffi: I've compiled python 2.7 from source on my debian lenny and like to play around with pyxmpp. Therefore I need libxml2. Of course it is not in the repos so I need to compile it somehow. there is my problem :)
14:21  nvictor: tomas_: split twice, form tuples, pass to dict()
14:21  lvh: blubbi: what was wrong with my code that made you not use it
14:21  tomas_: nvictor: str.split first with = and then with ,?
14:22  lvh: blubbi: FWIW I think that is completely illegible
14:22  lvh: I seriously have no idea what it does
14:22  Alberth: tomas_: fist on ,    I'd say
14:23  blubbi: lvh: well i needed both inside and outside and I already had the first part this is why I not used your code, but I'll try it any way with your code
14:23  jorrit: blubbi, why do you do RESIDS = sorted(RESIDS)? Just do RESIDS.sort()
14:23  blubbi: jorrit: just wanted to print it for example reasons
14:24  jorrit: blubbi, you can still print it then.
14:24  blubbi: in the not pasted code I just have RESID.sort()
14:24  jorrit: RESIDS.sort(); print RESIDS
14:24  jorrit: On two lines
14:24  blubbi: okay, same effect :-)
14:24  wolfe: 754 x.x
14:25  lvh: blubbi: you never said you needed both inside and outside
14:26  blubbi: lvh: because I had that one already with the regexp :-)
14:30  bob2: spliffi: libxml is of course in debian
14:30 --- cna_ is now known as cna
14:30  nvictor: tomas_: like Alberth said
14:30  spliffi: @bob2 yes but it supports just python < 2.6
14:31  blubbi: Okay, no lets come to the esay part. I need to start some supprocesses prallel. Each takes ~30 minutes to complete. Is it better to use multiprocessing or threads?
14:31  bob2: do you mean python-ibxml2?
14:31  spliffi: yes
14:31  jorrit: blubbi, multiprocessing
14:31  blubbi: okay sweet, i was guessing this answere
14:31  papna: blubbi: If you're starting subprocesses, you'd use subprocess
14:31  papna: You wouldn't use multiprocessing or threads.
14:32  blubbi: papna: but subprocesss cant run in parallel
14:32  papna: blubbi: Sure it can.
14:32  papna: Popen is non-blocking.
14:33  blubbi: curently I call this here seriel "charmm = subprocess.Popen(cmd, stdin=open('unwrap.inp', "r"), stderr=open(CHARMMlog+".err", "w"), stdout=open(CHARMMlog+".log", "w"))"
14:33  blubbi: around 60 times and now I want to split in multiple tasks
14:34  blubbi: papna: and you say I don't need thread ot multiprocessing?
14:34  papna: blubbi: Popen doesn't block.
14:34  spliffi: no idea how to get python-libxml2 to work on python2.7 :( google gives no clue
14:34  blubbi: papna: okay, sweet
14:34  spliffi: I could fall back to python2.6.5 or such too
14:34  papna: Don't do anything to block, and they will be separate processes which can run in parallel if your system can give them separate cores.
14:34  spliffi: in ubuntu there is libxml2 support for this version
14:35  spliffi: could I simply use a ubuntu repo in my debian lenny environment ?
14:35  blubbi: papna: and if I want to split it in more parts then cores?
14:35  lvh: blubbi: http://bpaste.net/show/10222/
14:35  spliffi: or does it screw up everything?
14:35  papna: blubbi: That's not a problem, but they won't all run in parallel. (They will run concurrently.)
14:36  blubbi: lvh: okay, this is really cute and way more readable then my approach
14:36  blubbi: papna: mmh, okay
14:36  blubbi: papna: thans a lot
14:37  blubbi: lvh: thanks
14:37  lvh: blubbi: yw
14:37  spliffi: the reason why I need to use python > 2.6 is because of SMTP_SSL which is missing in former versions :(
14:37  lvh: blubbi: the name of the function is wrong now though
14:37  mahound: setuptools, extras, anyone has a clue?
14:37  blubbi: lvh: no problem
14:37  blubbi: i guess i can fix it ;-)
14:39  Alberth: spliffi: download the source, and install with the new python should work
14:39  blubbi: papna: but how do i make my code to wait for the last process to finish?
14:39 --- el_kevino_afk is now known as el_kevino
14:39  Alberth: spliffi: the 'source' being the python bindings of course)
14:39  blubbi: i consider dispatching subprocess.Popen via a for loop
14:40  Alberth: blubbi: 60 sub-processes is not very useful unless you have that many CPUs
14:40  blubbi: Alberth: something around 12
14:41  blubbi: two hexacores on one board
14:41  jorrit: Alberth, well unless they do IO from time to time.
14:41  papna: blubbi: After you are done starting them all, you would call all of their wait methods (or, in a different case than you have, their communicate methods).
14:42  blubbi: mmh
14:42  papna: blubbi: You could also use twisted.internet.protocols.ProcessProtocol and just put callbacks on them or put callbacks on a DeferredList of them.
14:42  lvh: blubbi: Do you need to communicate with them while thye are running
14:42  blubbi: lvh: no, but it would be nice to see if it terminated correctly
14:42  spliffi: @Alberth yes, I downloaded the sources, switches to the dir python and did /usr/bin/python2.7 setup.py
14:43  spliffi: apart of some warnings it did install the libxml2.py and others to the python2.7-site-packages
14:43  blubbi: lvh: but this is no must
14:43  spliffi: but if I wanna install pyxmpp now, it still says libxml2 bindings are missing :(
14:44  blubbi: But I must make sure that the rest of the code is not executed before all processes have finished (I know how to do it with threads an multiprosessing, but not with subprocess.Popen
14:44  Alberth: spliffi: can you import the installed libxml thingie in 2.7?
14:45  papna: blubbi: Call all of their wait methods.
14:45  moreati: spliffi: if you run your newly installed python 2.7 can you import lxml, and are you running the pyxmpp with the same python interpreter?
14:45  lvh: blubbi: I'd still use t.i.r.spawnProcess
14:45  lvh: blubbi: but ymmv
14:45  moreati: s/pyxmpp/pyxmpp setup.py/
14:47  blubbi: papna: how do I find them? if I do the follwing for i in range(0,3); p = subprocess.Popen(cmd)
14:47  papna: blubbi: Don't store them as p.
14:47  papna: blubbi: Put them in a list.
14:47  papna: blubbi: Same way you'd find anything else you made in a loop.
14:47  blubbi: ah, okay
14:48  blubbi: You mean: [a = subprocess.Popen(cmd), b =  subprocess.Popen(cmd),...]  and iterate on the list
14:48  papna: SyntaxError
14:49  blubbi: papna: ?
14:49  Alberth: blubbi: x = [] ; for i in range(3): p = subproces.Popen(cmd); x.append(p)
14:50  jorrit: Or x = [subproces.Popen(cmd) for _ in range(3)]
14:50  blubbi: ah, okay, and in x the methds are stored?
14:51  Alberth: blubbi: subprocess.Popen() gives you an object that reprsents the child process. You can query that object with .wait() to get whether the child process is finished
14:52  blubbi: Alberth: x[0].wait() ?
14:53  Alberth: yes, and then x[1].wait()  etc. I am sure you can make a nice loop for that :)
14:53  blubbi: ack
14:53  spliffi: ImportError: /usr/local/lib/python2.7/site-packages/libxml2mod.so: undefined symbol: xmlPreviousElementSibling
14:53  blubbi: oookay, now I understand
14:53  spliffi: when I try to import libxml2
14:53  blubbi: thanks a lot!
14:54  spliffi: I recon this was one f the warnings during the install
14:54  Tau: hey.
14:54  Tau: i got it jorrit .
14:54  Alberth: spliffi: so the build was less successful than you hoped it would be
14:54  Tau: even by using int(x) == x.
14:55  spliffi: yes, I will paste the output, mom
14:55  rsavu: hi all. why does chaining replace().replace() on a string gives me this error? - expected a character buffer object?
14:56  spliffi: http://pastebin.com/e28U9FLT
14:56  Tau: thank you all.
14:56  spliffi: oops, next time I will use the right paste-site :)
14:56  kerio: you expected what?
15:00  spliffi: hm what are these missing type converters?
15:01  spliffi: Maybe I just lack of another packgae again ^^
15:01  Alberth: spliffi: not sure what is causing this, some random things to check: is your installed libxml2 lib 64bit? did you install the development package of libxml2 as well (probably you did), are the python bindings compatible with the library that you have?
15:01  Alberth: spliffi: no idea what 'type converters' are
15:03  spliffi: libxml2-dev is installed
15:03  Alberth: rsavu: is the source really a string? (ie try to do only the first replace)
15:04  tdelam: type converters in python? that's a missing package or C library if you're getting that.
15:05  spliffi: hm, and which one?
15:05  tdelam: spliffi: are you trying to compile python?
15:05 * tdelam just got in
15:05  spliffi: no it's done already
15:05  spliffi: I try to compile pyxmpp
15:05  spliffi: which has a couple of dependencies
15:06  tdelam: can you paste the error in pastebin?
15:07  mar77i: small question concerning dicts and sorted():g?
15:07  mar77i: umm...
--- Log closed Tue Oct 19 16:01:03 2010
--- Log opened Tue Oct 19 16:06:13 2010
16:06 --- Users 777 nicks [0 ops, 0 halfops, 0 voices, 777 normal]
16:06  papna-work: flashingpumpkin: This is why stuff like distutils is designed to do it.
16:07 --- Channel #python was synced in 91 seconds
16:08  flashingpumpkin: papna-work, well. i'm just asking how to do it and not really why not do it
16:08  papna-work: flashingpumpkin: Yes. You're asking the wrong question.
16:09  papna-work: flashingpumpkin: The tools are designed not to do it because it's a bad idea.
16:09  papna-work: Most of the people who want to do it want to do it for misguided reasons.
16:09  Yhg1s: flashingpumpkin: the way to do it would be "by hand".
16:09  Yhg1s: but it's easy to do it wrong, so don't.
16:09  flashingpumpkin: papna-work, Yhg1s - hm. ok. that's more like an answer. thanks
16:10  Yhg1s: flashingpumpkin: why do you want to, at all?
16:10  ezzieyguywuf: if I need to use sin(alpha) twice, would it be computationaly faster to do sin_alpha = sin(alpha) and then use the sin_alpha variable in place of my two sin(alpha) calls?
16:10  papna-work: ezzieyguywuf: hahahahaha
16:11  ezzieyguywuf: well, serious question :-[
16:11  flashingpumpkin: Yhg1s, err... is "it's a  requirement" a good enough reason? ;)
16:11  papna-work: ezzieyguywuf: Write your program in the clearest, most maintainable, readable way you can.
16:11  papna-work: ezzieyguywuf: Run the working program. If it's slow, use a profiler to find where you're spending your time.
16:11  papna-work: ezzieyguywuf: Then test multiple options by implementing them both and timing them.
16:12  grawity: Is there a fast way to format a file size? (kB, MB, etc)
16:12  papna-work: ezzieyguywuf: The multiple options are ideally things like "this is a better algorithm", not thinks like, "what if I switch from compuling sin(alpha) once instead of twice"
16:12  Yhg1s: flashingpumpkin: but *why* is it a requirement? What benefit do you or the people setting the requirement think it has?
16:12  Yhg1s: flashingpumpkin: depending on the answer there may be better solutions.
16:13  ezzieyguywuf: papna-work: well, the code in which sin(alpha) is used twice is looped over
16:13  papna-work: ezzieyguywuf: Yawn.
16:13  flashingpumpkin: Yhg1s, no direct access to source files. i'm aware that this is not really a hindrance to find out how the thing works, but it's at least a little more difficult than just opening the source file
16:13  ezzieyguywuf: papna-work: ok, obviously I'm boring you :-P
16:13  papna-work: ezzieyguywuf: Implement your code in the clearest, easiest, most maintainable way you can.
16:13  Yhg1s: flashingpumpkin: heh, not really. Or rather, really not.
16:13  ezzieyguywuf: I'll go ahead it write it normally, then see what this profiling thing is all about
16:14  papna-work: ezzieyguywuf: If at that point it's too slow, you optimize. Optimization is an empirical process.
16:14  Yhg1s: flashingpumpkin: the .pyc files are trivially compiled back to the exact same code, with the same identifiers throughout.
16:14  Yhg1s: but as long as you realize it doesn't protect anything, knock yourself out.
16:14  papna-work: ezzieyguywuf: You find out what options are quicker by timing them, not by asking people who also don't know and are lying if they say they do.
16:16  flashingpumpkin: Yhg1s, aight. Forwarded.
16:17  Yhg1s: flashingpumpkin: I suspect putting the .py files in a zipfile you sneakily didn't give the '.zip' extension would be better protection.
16:17  Yhg1s: (Python can import from zipfiles.)
16:18  papna-work: A lawyer would be better protection
16:18  Arsanerit: Is it possible to disable multiprocessing for a single python-run? I'd like to see whether a problem is caused by it.
16:18  papna-work: Arsanerit: Not really.
16:19  papna-work: You'd have to, like, have something to do instead.
16:19  ezzieyguywuf: papna-work: I appreciate your insights. thank you.
16:20  Arsanerit: papna-work: What would the same code do on a system that has only one core?
16:20 --- Dengar_ is now known as Dengar
16:21  papna-work: Arsanerit: It would launch multiple processes, which would all get turns on that one core.
16:21  flashingpumpkin: Okay, thanks papna-work and Yhg1s
16:21  papna-work: Arsanerit: Python can only make processes. It can't decide anything about using processors.
16:21  papna-work: Arsanerit: The os decides what cores to run which processes on when.
16:21  Arsanerit: Oh, I'm mixing up things.
16:22  Arsanerit: I'm mixing up multiprocessing as in multiple processors and multiple processes
16:22  papna-work: Arsanerit: If you want to disable all but one cores, your OS might have something for that. It probably won't tell you anything useful.
16:23  Arsanerit: Hmm. Can I tell the OS to allocate only one processor for a process and all its children?
16:23  lvh: Arsanerit: Well, multiprocessing on a box with multiple processors *generally* leads to multiple processors being used at the same time.
16:23  lvh: Arsanerit: Not sensibly or portably. Why would you want that?
16:23  Arsanerit: lvh: To debug, to find out if that's what causing the problem her.
16:23  papna-work: Arsanerit: Not within Python. Probably without. That depends on your OS.
16:23  lvh: Arsanerit: (There is such a thing as 'affinity')
16:23  Arsanerit: lvh: I recall having problems on this machine running code on all 8 cores, due to some kernel bug, so we limited it to 6 cores
16:24  papna-work: Arsanerit: You are probably wrong that making all the processes run on the same core will help you debug.
16:24  lvh: Arsanerit: It seems extremely unlikely that running it on multiple cores will change anything
16:24  lvh: It's still IPC
16:24  ezzieyguywuf: if I have a dictionary with keys such as: mydict[z,theta] , where any z-theta pair is unique but the theta range is the same for each z, how can I iterate over theta for a given z?
16:24  ezzieyguywuf: or would I be better of using a list?
16:24  papna-work: Arsanerit: Making it run on one core won't make it a serial program.
16:25  Arsanerit: papna-work: Ok. What could possibly make self._recv() in /usr/lib/python2.6/multiprocessing/queues.py hang? I'm running a pytables unittest, on one system (8 cores) it hangs on this line, on another system (2 cores) it doesn't.
16:25  lvh: Arsanerit: There's taskset(1), but I don't think you can actually make that run something on one core.
16:25  papna-work: ezzieyguywuf: It sounds like a dict with tuple keys doesn't suit you.
16:25  lvh: Arsanerit: It may be possible for that to deadlock yes
16:26  agaskins: Hi, is it possible to have items in a combobox such as '<item name> (<item description>)' and have the description portion of the text be a different color (lightly greyed out)? Sorry to ask in two places, but #wxpython isn't active at the moment.
16:26  lvh: Arsanerit: If you want to be sure you may want to ask Yhg1s
16:26  papna-work: ezzieyguywuf: Maybe you want a collections.defaultdict(dict) and mystuff[z][theta], or maybe you want a numpy array
16:27  papna-work: Arsanerit: Communication deadlocks are generally hard and unpredictable.
16:27  Arsanerit: lvh: I'm suspecting the problem is somewhere on a low level, hence my attempts in this direction "do not do this and see if it works then"
16:27  Arsanerit: papna-work: This one is perfectly reproducable.
16:27  papna-work: Arsanerit: Maybe.
16:27  papna-work: Arsanerit: Not really.
16:28  Arsanerit: Well, each time I run the test, it hangs at the exact same place.
16:28  papna-work: Arsanerit: So far. Under current load conditions.
16:28  ezzieyguywuf: papna-work: I think mystuff[z][theta] will be the route I take.
16:28  ezzieyguywuf: I considered a numpy rec object.
16:29  papna-work: Arsanerit: You can run it restricting the processor use. You haven't mentioned what your OS is, so we wouldn't be able to tell you how. Perhaps you should tell us or ask in your OS's channel.
16:29  Arsanerit: papna-work: I'm on ubuntu.
16:29  Arsanerit: papna-work: Note that this happens on multiple machines.
16:29  flashingpumpkin: hm. Yhg1s & papna-work: what about http://svn.python.org/view/python/trunk/Tools/freeze
16:29  blubbi: is there a more pythonic way for removing 0 from a list then this: [token.remove(0) for i in range(token.count(0))]
16:30  Arsanerit: papna-work: I'll ask in the OS channel
16:30  papna-work: blubbi: token.pop(0)
16:30  papna-work: blubbi: Also, not doing that.
16:30  papna-work: Oh.
16:30  papna-work: blubbi: I misread.
16:30  flashingpumpkin: still not much. but it's a standalone. *goes off
16:30  papna-work: blubbi: token = [t for t in token if t != 0]
16:30  blubbi: papna-work: I just want to get rid of the number 0 :-)
16:31  rz: blubbi: token = [i for i in token if i != 0]
16:31  gilaniali: I wanted to know the suggested way to use a virtual env. Should every project I make should have its own virtual env or I should have one virtualenv for a group of related projects?
16:31  blubbi: okay, I guess this is even faster
16:31  papna-work: gilaniali: that depends on what "related" means.
16:31  blubbi: thanks
16:32  papna-work: gilaniali:
16:32  papna-work: gilaniali: Probably per project.
16:32  VladDrac: blubbi, using a list comprehension as a for-loop, not for its generated list is definately not pythonic
16:33  blubbi: VladDrac: okay, thanks
16:33  papna-work: Never ever use a list comprehension just for its side effects
16:33  aminpy: what does "The Zen of Python" mean?
16:33  aminpy: I don't understand that concept?!
16:33  VladDrac: aminpy, type "import this" in python
16:33  moreati: aminpy: open a python interpreter and type import this
16:34  aminpy: VladDrac: moreati I did
16:34  aminpy: Beautiful is better ...
16:34  aminpy: what does it means?
16:34  Prometheus: so what's the question?
16:34  papna-work: aminpy: If you don't get it, don't bother.
16:34  gilaniali: papna-work: I have a a fodler that contains virtual env for pinax0.9a1 projects. And I activate the env and start the project wihin the folder. Should I instead create a virtual env for every project and have to install django and pinax over and over again?
16:34  VladDrac: it means beautiful is better than ugly
16:34  moreati: aminpy: they're a set of principals that reflect how many python developers feel and think (or aspire to think)
16:34  VladDrac: if you disagree, #perl or #php
16:35  Arsanerit: papna-work: Thanks.
16:35  aminpy: moreati: thank you
16:36 --- Evixion` is now known as Evixion
16:36  papna-work: gilaniali: You can make a base relocatable virtualenv and copy it repeatedly.
16:37  gilaniali: papna-work: but that would require me to be online so it can download django and pinax right?
16:37  moreati: aminpy: you can climb a mountain and meditate on their meaning if you wish.
16:37  moreati: aminpy: the story behind it is http://www.wefearchange.org/2010/06/import-this-and-zen-of-python.html
16:37  papna-work: gilaniali: I don't think so.
16:38  grawity: How do I round a float to the specified precision?
16:39  papna-work: grawity: Do you want to display a float to a certain precision, or to do maths?
16:40  papna-work: grawity: http://docs.python.org/library/stdtypes.html#string-formatting
16:40  grawity: papna-work: actually, just display
16:40 * grawity discovers round() in the meantime.
16:40  grawity: ahh, it's "%.2f"
16:41  papna-work: I'm not sure I've ever seen anyone who actually wanted round. Maybe someone finding the nearest integer.
16:41  grawity: Thanks
16:42  grawity: wouldn't the nearest integer be just int(x)?
16:42 --- ajavid is now known as stoned
16:42  agaskins: I'm confused, I use round() all the time to make fp numbers managable for reports
16:43  Scala: grawity: int(1.9) is 1
16:43  moreati: agaskins: much better not to alter the acual value, and use string formatting to _display_ the value to a number of dp
16:44  papna-work: agaskins: round isn't appropriate for that. You want string formatting.
16:44  agaskins: do you have an example of this?
16:44  papna-work: agaskins: "%.3f" % 1.234567
16:45 --- luist_ is now known as luist
16:45  agaskins: That still rounds? It doesn't just return a portion of the string?
16:45  papna-work: There isn't a string.
16:45  papna-work: It MAKES a string.
16:45  agaskins: wouldn't it be 1.234568 if rounding was done properly?
16:45  papna-work: and my example was carefully designed to answer that question.
16:46  papna-work: What?
16:46  papna-work: No.
16:46  papna-work: My number was 1.234567
16:46  agaskins: oh, sorry, I see now
16:46  papna-work: Did you bother to run or understand my example?
16:46  agaskins: I'm just chatting, sorry...
16:46  agaskins: trying to understand before I copy and paste code.
16:47  agaskins: trying it now, thanks for the help papna
16:49  papna-work: I think the answer to "does it round" is technically, "Yes, unless you have a REALLY bad libc"
16:50  agaskins: yep, works great. Thanks alot papna! Why is this preferred over round? Does it avoid the binary conversion errors?
16:50  papna-work: agaskins: This lets you display the right thing.
16:50  papna-work: agaskins: How would you display it otherwise? %s?
16:51  papna-work: str(f)?
16:51  papna-work: Those aren't.....controllable or predictable.
--- Log closed Tue Oct 19 17:58:22 2010
--- Log opened Tue Oct 19 17:58:43 2010
17:58 --- Users 775 nicks [0 ops, 0 halfops, 0 voices, 775 normal]
17:58  victorho: the function I want to call "delete_expired_users" seems like I should only have to call it once and it would delete all expired
17:59  shylent: well, yes, that's what the managers are for, basically
17:59  victorho: so does that imply I need to get all objects from the user model
17:59  shylent: although I would probably do it another way
17:59 --- amerinese_ is now known as amerinese
17:59  shylent: (maybe you should ask in #django after all (I am there if I can help))
17:59  victorho: and do all_objects.RegistrationManager.delete_expired?
17:59  victorho: k thx shylent. will go back tehre
17:59  Znupi: When using httplib, is there a way to get all the headers that were *sent* to the server?
18:00 --- Channel #python was synced in 88 seconds
18:01  Znupi: Any other http lib that can do that?
18:02  Znupi: I suppose you don't encourage the use of pycurl?
18:03  coldpizza72i: is the floor function in python 3
18:03  Beat1823: Elllo, So I may need help again, with that string list sorting
18:04  Beat1823: But I actutally have a link to my code
18:04  fasta: I am using PyGTK, but it appears that you cannot have read-only closures pointing to self in a call-back. Is that documented somewhere?
18:04  lvh: coldpizza72i: Yeah. round/int still work
18:04  lvh: coldpizza72i: math.floor if you explicitly want to use your libc's thing
18:04  Beat1823: http://ethercodes.com/wVbFHBPPrS
18:05  coldpizza72i: im getting global name floor is not defined lvh
18:05  fasta: I also am a bit amazed that such fundamental features are broken just because someone wrote a binding to GTK.
18:05  Beat1823: So the big problem is that os.walk is returning about 5020 folders in thsi folder
18:05  coldpizza72i: i imported math
18:05  lvh: coldpizza72i: perhaps you should learn how python imports work
18:05  lvh: coldpizza72i: (math.floor, not floor)
18:05  lvh: coldpizza72i: why do you want floor anyway
18:05  lvh: coldpizza72i: ie why not int?
18:05  Beat1823: So... im not 100% sure how to make it so it doesnt check every...single folder name
18:06  Juhaz: fasta, why don't you start from the beginning?
18:06  lvh: Beat1823: I don't understand why it returning 5020 of them is a problem
18:07  Beat1823: Hahah theres really just that many folders in out project pipeline
18:07  Beat1823: ...its pretty retarted
18:07  lvh: Beat1823: didn't we fix your problem like yesterday
18:07  lvh: Beat1823: what's the new part of the problem
18:08  Beat1823: hahah maybe... I just didnt get it 100%? Cause I tried, but maybe I was doing it terribly wrong
18:09  torbjorn: im using emacs on a linux machine to edit a python script, that in turns runs on windows (accessed over smb), windows python seems to modify the py file which in turn causes emacs to go haywire.
18:09  lvh: Beat1823: can you please use a less useless pastebin
18:09  lvh: Beat1823: I can't even get that code out
18:09  torbjorn: should I fix emacs or python?
18:09  lvh: Beat1823: oh hey it's bespin
--- Log closed Tue Oct 19 18:15:37 2010
--- Log opened Tue Oct 19 18:16:02 2010
18:16 --- Users 785 nicks [0 ops, 0 halfops, 0 voices, 785 normal]
18:16  fasta: Juhaz, I think it also works in a lot of cases here, just not in the particular one I have.
18:16  TFKyle: rmrfslash: that would do it :)
18:16  Juhaz: fasta, do you keep a reference to the object? I've seen errors like that sometimes, that have been caused because the instance has been collected.
18:16  d_m: rmrfslash: os.path.join doesn't put stuff on the front. so os.path.join("foo", "bar") -> "foo/bar" on linux
18:16  fasta: Juhaz, to self?
18:16  d_m: if you want xyz("foo", "bar") -> "/foo/bar" you need to do something extra
18:16  rmrfslash: TFKyle: Clearly I'm too quick to pull the Python IRC trigger.
18:16  Juhaz: fasta, the same object that should be passed as self, yes.
18:17 --- Channel #python was synced in 93 seconds
18:17  tzanger: hmm. I'm trying to strip out newlines from data coming at me from pexpect.before and pexpect.match. I tried b = str(p.before) b.replace('\n', '.') and while there aren't any errors, it doesn't seem to match the output either. I'm very much a python newb so if you could give me a hint I'll hopefully figure this out more quickly
18:17  Beat1823: Iaj: I got the code uup in http://paste.debian.net/97266/
18:18  lvh: Beat1823: perhaps you should explain what the code is supposed tod o
18:18  Beat1823: I just like eathercodes cause it can be edited a bit more real time
18:18  lvh: Beat1823: also: tell your boss he's doing a shitty job educating you
18:18  fasta: Juhaz, yes
18:18  Beat1823: Hahah no kidding... 2.5 months in and ive got python down better then em. Pretty lame
18:18  chrisbdaemon: anyone know if nevow is still under active development?
18:18  chrisbdaemon: trying to find a web framework
18:19  lvh: Beat1823: That's disheartening
18:19  lvh: chrisbdaemon: It's being developed
18:19  lvh: chrisbdaemon: but not very actively
18:19  lvh: chrisbdaemon: which is super unfortunate because it's actually pretty good
18:19  lvh: chrisbdaemon: the underlying thing is t.web and that's still actively being developed
18:20  chrisbdaemon: lvh: ok, thanks
18:20  Beat1823: But Ok, so That part of the code im showing, I want it to return any folders that have "__". So what im using it for is that he has his way of orgnizing our directories at work. Im creating a UI that basically works with that
18:21  Znupi: When using httplib, is there a way to get all the headers that were *sent* to the server?
18:21  Beat1823: So lets say a project... "Epic" has a folder called "__characterName__"
18:22  Beat1823: My code finds that, and allows the user to type in a new name, select the folders they want to create it in, and create the new folder with all the folders in that "__characterName__" folder
18:22  Beat1823: ...its actutally kidna disorgnized
18:22  Beat1823: Cause when a project has 5020 directories, you know sooomething wrong
18:22  Beat1823: But anyway
18:23  Beat1823: So right now, im a searching for any folders with that "__foo__". I think its not gonna work. Im thinking of trying it a compleatly different way, if this is too insane
18:23  ironfroggy: I loose track. what is the good online book to point new-pythoners to?
18:24  Beat1823: ironfroggy: Just check the docs on python, the starter pages are a great intro
18:24  cwillu_at_work: ironfroggy, Tutorial: http://docs.python.org/tut/ | FAQ: http://effbot.org/pyfaq/ | New Programmer? http://bit.ly/40CBHF
18:24  cwillu_at_work: it's only in the channel topic :p
18:24 * shylent laughs out very loudly
18:25  wagnerrp: is there any way to 'bake' a variable into a lambda function?
18:26  ironfroggy: wagnerrp: you mean, you want to bind the object referenced at time of lambda creation, rather than follow the reference at call time from the closure?
18:26  wagnerrp: correct
18:26  ironfroggy: [(lambda i=i: i%5) for i in range(10)]
18:26  Juhaz: fasta, hard to make any more guesses without actual code, if it works in most cases, try to make a minimal runnable standalone example of the one that does not...
18:26  ironfroggy: see what that does?
18:27  wagnerrp: yeah, didnt know lambda functions accepted default arguments, thanks
18:27  cwillu_at_work: wagnerrp, an object or such is easier to follow
18:28  anev: how do i escape the \x from a string that looks like "\xeb" ?
18:28  anev: i was trying .decode('string_escape')
18:29  ironfroggy: anev: is that the repr or the actual value?
18:29  _habnabit: anev, where are you getting this string from?
18:30  anev: _habnabit: ironfroggy: i'm actually reading in a file i.e. f.read(1) in a while loop to get each char
18:30  _habnabit: anev, and the file contains \x escapes? What kind of file is this?
18:30  anev: _habnabit: cmopiled MZ file
18:30  ironfroggy: anev: why the hell are you doing that
18:30  anev: compiled*
18:30  anev: ironfroggy: simple xor decryption script
18:30  anev: well, not totally xor, it's a little customised
18:30  anev: it's just to help with an analysis i'm doing
18:31  _habnabit: Reading in one byte at a time is going to be kinda slow, anyway.
18:31  _habnabit: But it just sounds like you're being confused by the implicit repr() in the interactive interpreter.
18:31  anev: _habnabit: i don't mind if it's slow - it'll do it faster than i will manually
18:32  cwillu_at_work: anev, I (and everybody else) suspect that the file doesn't contain those four literal bytes, but rather a single byte which is represented as \xeb
18:32  anev: _habnabit: perhaps.. i'm pretty new to python. trying to use it for simple scripts to get the hang of it
18:32  anev: cwillu_at_work: yeah, it's a single byte.
18:32  cwillu_at_work: anev, okay, so what's your question again?
18:33  anev: cwillu_at_work: i want to xor the single byte, so i first attempted to print it to the screen using print "%02X" % char.decode('string_escape')
18:34  cwillu_at_work: anev, but it'
18:34  anev: once i escape the \x part, i want ot pass it to my xor function
18:34  cwillu_at_work: it's _already_ a single byte
18:34  anev: i'm only printing to confirm
18:34  cwillu_at_work: it's only the repr that looks like "\xab"
18:34  dash: raaaaagh
18:34  anev: cwillu_at_work: ah ok
18:34  dash: good morning from california
18:34  anev: cwillu_at_work: if i xor it using char ^ key it'll error out
18:35  anev: "unsupported operant type(s) for ^ with str and str
18:35  cwillu_at_work: anev, yes, you want to operate on the numeric value of the character, not the character itself
18:35  anev: if i convert to int it still errors out.
18:35  cwillu_at_work: anev, ord is the function you want
18:36  cwillu_at_work: int('1') -> 1
18:36  anev: "invalid literal for int() with base 19L: '\xb1'
18:36  cwillu_at_work: ord('1') -> 49
18:36  anev: with base 10:
18:36  cwillu_at_work: anev, see what I just did?
18:36  anev: ahhh ok
18:36  anev: ord()
18:36  _habnabit: anev, ord, not int.
18:37  anev: "expected a character, but string of length 2 found"
18:37  cwillu_at_work: anev, int() is what you use if you need to interpret a string containing a number to a number (i.e., what a newbie might use "eval" for)
18:37  anev: cwillu_at_work: ahhh i see what you mean.
18:40  anev: cwillu_at_work: _habnabit got it working, thank you
18:41  triyo: Regarding the email.message.Message, how do I go about getting the "From" address in the original message that is being forwarded?
18:41  triyo: ref* http://docs.python.org/library/email.message.html#email.message.Message
18:42  code-shah: hey guys, I want to have python periodically connect to my gmail IMAP and get unread emails then parse the content... - what is the best way to do this?
18:43  Sub_Zero: What's wrong with my encrypting method? http://pastebin.com/0dgAuext
18:43  ivan`: code-shah: use mbsync, then handle the text files
18:44  cwillu_at_work: Sub_Zero, define 'wrong'
18:44  _habnabit:  http://pastebin.com/0dgAuext
18:45  infobob: http://paste.pocoo.org/show/277500/ (repasted for _habnabit)
18:45  _habnabit: That's better.
18:45  ironfroggy: Sub_Zero: doing all of those manually is a terrible idea. you are mismatching the letters and codes.
18:45  cwillu_at_work: Sub_Zero, '55 '.replace('5 ', 'c') = '5c'
18:47  cwillu_at_work: Sub_Zero, also, I know you probably don't care a whole lot, but any encryption scheme like that is trivially breakable by matching up the character frequencies with the language it's expected it's written in
18:48  cwillu_at_work: (I'm assuming this is just a learning exercise, but yeah)
18:48 --- unreal_ is now known as unreal
18:48  _habnabit: cwillu_at_work, he left.
18:49  cwillu_at_work: hmm
18:49  cwillu_at_work: yes, yes he did.
18:49  papna: cwillu_at_work: That's why I always send my messages in obscure languages.
18:50  papna: Obligatory http://xkcd.com/257/ ?
19:09  iman: i am a java developer about 4 years and i want to start learning python - you think this is good work?
19:09  xacidoz: yes
19:10  Walt: iman, you could try jython, sa you would be able to use your old java code while using python
19:10  Walt: so*
--- Log closed Tue Oct 19 19:16:38 2010
--- Log opened Tue Oct 19 19:17:01 2010
19:17 --- Users 785 nicks [0 ops, 0 halfops, 0 voices, 785 normal]
19:17 --- NelleV` is now known as NelleV
19:17 --- NelleV is now known as NelleV`
19:18 --- Channel #python was synced in 90 seconds
19:18  dash: iman: jython is not a good place to start
19:18  Dynetrekk: iman: cpython has more libraries and such. I would only recommend jython if you have an explicit need to use certain specificjava libraries
19:18  dash: Walt: shame on you.
19:18  Dulak: when I import a module it doesn't run __init__(), why?
19:18  dash: iman: i'd start here: http://python.org/doc/tut/
19:19  dash: Dulak: importing modules doesn't invoke any callables in them at all
19:19  iman: dash, i am learning from this tutorial from last day
19:19  kerio: Dulak: if you need any module-specific initialization, just put it in the body of the function
19:20  kerio: er
19:20  kerio: of the module
19:20  Dulak: ok, I'm trying to do a uuid for each user, a module attribute is not good for this it seems
19:21  kerio: a what?
19:21  Dulak: a module property?
19:21  Dulak: I don't know the python word for them, a var you set at the module scope
19:22  shylent: what is the source of encoding at sys.getdefaultencoding?
19:22  kerio: no, i mean
19:22  shylent: I mean, what does the value actually come from?
19:22  shylent: where*
19:22  kerio: what are you trying to do?
19:22  kerio: shylent: i'd say locale
19:22  Dulak: shylent: uuid.UUID ultimately
19:22  shylent: Dulak: what?
19:22  kerio: nick confusion :)
19:22  shylent: kerio: well I thought so, but that doesn't look like it to me
19:23  shylent: I have utf-8 all over `locale`, but sys.getdefaultencoding() returns 'ascii'
19:23  kerio: shylent: beats me
19:23  kerio: i se
19:24  kerio: *i set locale and it worked
19:24  Dulak: I suppose I should be using a class and instantiating it for what I want not using a module at all
19:24  shylent: kerio: well, what is *your* value for it?
19:24  dash: shylent: getdefaultencoding is a fairy tale the man tells the masses as he puts them to bed
19:25  shylent: dash: well, I am just curious, really, as this was brought up in a discussion
19:25  shylent: I never even thought about it much, because I encode/decode explicitly when I need to
19:26  giampaolo: hi all, I've just installed a a brand new Ubuntu and I would like to install multiple python versions from sources without messing with default system interpreter. Is "./configure --prefix=/usr/local/bin" enough?
19:26  MrToad: Hello all.
19:27  dash: giampaolo: sure
19:28  KirkMcDonald: giampaolo: Yes. Even better, use epkg, too.
19:30  BlueAidan: yeah... so anyone using buildout on freebsd?
19:33 --- NelleV` is now known as NelleV
19:33  Xeross: This windows file monitoring api call is a mess, now I have to filter out all duplicate updates n stuff :/
19:33  BlueAidan: giampaolo: there's a buildout setup for building python from source if you want
19:34  BlueAidan: http://svn.plone.org/svn/collective/buildout/python/
19:34  giampaolo: BlueAidan: no thanks, I already use buildout at work and I don't particularly like it. I don't want to use it at home as well =)
19:35  htoothrot: xeross, yeah, you can potentially miss updates too
19:36  Xeross: htoothrot: Hmm annoying, wish periodic scanning was viable for what I am attempting
19:36  htoothrot: I'm using it on a project, and when I detect changes in a single file in a directory, I rescan the whole directory
19:37  htoothrot: of course i have many small subdirectories, so this works ok
19:38  htoothrot: not ideal whatsoever..
19:39  lieuwe: hey guys, i've got an error somewhere, but aperantly Tkinter+shelve breaks tracebacks...
19:39  lieuwe: any ideas?
19:42  lvh: lieuwe: Didn't we tell you not to use shelve like a million times
19:42  lieuwe: lvh: no, pickle, not shelve, i like it anyways
19:42  lieuwe: shelve is awesome
19:42  lvh: lieuwe: shelve is pickle
19:43  lieuwe: lvh: don't really care
19:43  dash: shelve is a pile of crap on top of another pile of crap
19:43  dash: lieuwe: #python is for people who care.
19:43  lieuwe: lvh: i had an if branch wrong somewhere
19:43  lvh: lieuwe: Okay then, enjoy your broken software
19:43  lvh: lieuwe: Well, it's not like you provided anyone with the means to help you
19:44  lieuwe: lvh: anyway, you haven't given me any viable alternative to pickle/shelve
19:44  lieuwe: neither have you given any valid reasons
19:45  dash: lieuwe: sqlite is a nice place to start.
19:45  lvh: lieuwe: I find it hard to believe you wouldn't have gotten them if you'd asked
19:45  dash: structured data, stored in a reliable fashion.
19:45  lvh: axiom, storm...
19:45  papna-work: lieuwe: pickle is insecure, unportable, and bug-prone.
19:45  lvh: or yeah, just use sqlite manually
19:46  lieuwe: papna-work: i don't need it to be portable, and i haven't found it bug-prone
19:46  dash: as opposed to shelve, which is almost-structured data stored entirely unreliably
19:46  papna-work: lieuwe: pickle will try to serialize anything, but it cannot possibly be righrt.
19:47  lieuwe: papna-work: hm
19:47  lieuwe: papna-work: corrupted data throwing an exception is not really a problem tho...
19:47  box2: if i want to request an ajax call that returns json, should i use pycurl to make the request?
19:47  papna-work: lieuwe: You might not get an exception.
19:47  dash: box2: no.
19:47  lvh: lieuwe: Who said you'd get an exception
19:47  papna-work: lieuwe: It can just be wrong.
19:47  lieuwe: papna-work: now that might be a good reason to switch
19:47  lieuwe: hm
19:48  lvh: lieuwe: the cases where it doesn't give you an exception and instead just gives you bogus crap are far more numerous
19:48  lieuwe: lvh: well, thats bad
19:48  box2: dash: what do you recommend?
19:48  lieuwe: lvh: but meh, cba to use sqlite
19:48  dash: box2: what are you writing?
19:48  papna-work: lieuwe: Unpickling the wrong thing can also delete your files.
19:48  lieuwe: papna-work: don't unpickle the wrong thing then.
19:48  Taos: Anyone know how I can find out more infomation after catching an exception in except ValueError: ?
19:48  box2: dash: there is a site that makes an ajax call once a second, i want to put what it returns into a database
19:48  dash: Taos: what do you want to know?
19:48  papna-work: lieuwe: There is 0 chance of my doing that.
19:49  papna-work: (Actually, that's not true. I'm using pickle at this very second. But do as I say, not as I do....)
19:49  lieuwe: papna-work: :P
19:49  lvh: box2: twisted
19:49  Taos: I wanna get this info ValueError: "day is out of range for month"
19:49  dash: Taos: call str() on the exception object
19:49  lvh: box2: LoopingCall, lxml
19:49  lvh: box2: and twisted.web.client.getPage
19:49  lieuwe: papna-work: the work/reward ratio for other dbs is just too damn high
19:49  _habnabit: Taos, dependong on error messages isn't exactly a good idea.
19:49  _habnabit: Taos, I hope you're not trying to compare against that string.
19:49  Taos: God no
19:49  lvh: lieuwe: So use Axiom
19:49  Taos: I just want to print it
19:49  Taos: But
19:50  lvh: or Storm, or whatever
19:50  box2: lvh: couldn't i just go lxml.parse().getroot() a bunch of times then?
19:50  Taos: Problem is both Exceptions pass the same exception with different info
19:50  lvh: box2: hang on, wait, what, why?
19:50  lieuwe: Taos: use the traceback module
19:50  kerio: giampaolo: why do you want to compile from source so much?
19:50  kerio: also, apt-get source will build you a nice .deb
19:50  box2: lvh: i want to parse json that is returned from an ajax call once per second
19:51  box2: i dont think lxml does json though
19:51  lvh: box2: Oh, JSON, sorry
19:51  box2: but i don't think i'd need to import all of twisted for that
19:51  lvh: box2: you don't need to import "all of twisted" for that, so that's fine
19:51  papna-work: AJAX, a technology not necessarily using JavaScript or XML.
19:52  box2: heh
19:52  lvh: box2: I figured since you said AJAX, you would have, you know, XML.
19:52  lvh: And Javascript.
19:52  lvh: As opposed to "neither".
19:52  giampaolo: kerio: I work on stdlib development so I need the latest svn source
19:52  dash: so it sounds like you just have A
19:52  dash: so, twisted
19:52  box2: a fair assumption
19:52  dash: ;)
19:53  lvh: box2: You could probabaly do it using the stdlib
19:53  lvh: box2: Good luck!
19:53  box2: twisted.web.client.getPage you were saying huh
19:53  box2: hm
19:53  dash: box2: what else does your program do?
19:53  Taos: iwhy is sys.exc_info returning only none
19:53  box2: dash: nothing, just storing the reported data
19:54  dash: Taos: don't mess with sys.exc_info
19:54  dash: box2: then urllib might be just fine
19:54  lvh: Taos: Two things
19:54  papna-work: lvh: I think you mean, "No XML? Thank god."
19:54  lvh: Taos: 1) don't use sys.exc_info :-(
19:54  papna-work: ;)
19:54  lvh: Taos: 2) it does that when no exception is currently on the stack
19:54  box2: dash: you mean like an urllib2.urlopen() ?
19:55  qwerty1793: hi is there a way to do [x, -x for x in L]; for example when L = [1,2,3] i want to produce [1,-1,2,-2,3,-3]
19:55  blubbi: in theorie i got my code running (CHARMM segaults but this has nothing to do with the python code) but I dont't get any logs. Is .communicate possible in this case: http://paste.pocoo.org/show/277538/
19:55  Taos: Fair enough but im lazy and cant be bothered to write my on validater for datestamps, so im using datetime, but when datetime raises an exception for ether a date or month they are both ValueErrors, so how can i diferentiate between them?
19:55  _habnabit: Taos, why aren't you using strptime?
19:56  papna-work: qwerty1793: new = []: for x in L: new.append(x); new.append(-x)
19:56  papna-work: qwerty1793: Also, itertools.chain.from_iterable((x, -x) for x in L)
19:56  qwerty1793: is there a list comprehension way of doing it in 1 line?
19:56  papna-work: qwerty1793: Who cares?
19:56  tafryn: Is there an equivalent to reload in Python3?
19:56  papna-work: qwerty1793: It clearly isn't obvious to you.
19:56  blubbi: when I remove the redirects I can see CHARMM segfaulting, but with redirection to a file the logs are empty
19:57  Taos: _habnabit: Huh why do i need strptime? the exception is thrown on creating the date object
19:57  papna-work: tafryn: Don't use reload in any Python.
19:57  papna-work: tafryn: Perhaps what you want is to close and restart Python.
19:57  dennda: In order to do sound analysis, like FT & co, what library would i best use? (cross-platform)_
19:57  blubbi: dennda: scipy.signal IMHO
19:57  dash: Taos: where's this data coming from?
19:57  lvh: dennda: numpy/scipy, scipy.signal specifically
19:57  dash: qwerty1793: you can do anything in one line
19:58  dash: qwerty1793: but why bother?
19:58  Taos: bunch of strings '33/12/2010' for example
19:58  tafryn: papna-work: That will probably accomplish the same thing, but take longer and destroy my environment in the process. Is there no alternative?
19:58  dash: Taos: so use dateutil.parser.parse
19:58  KirkMcDonald: tafryn: It was demoted from a builtin and moved to the imp module.
19:58  dash: tafryn: Not really
19:58  lvh: tafryn: There's no reasonable way of doing hot code reloading in Python, sorry
19:58  KirkMcDonald: tafryn: Precisely because it's not as useful as it appears to be.
19:58  papna-work: tafryn: reload isn't something you can do in sane code.
19:59  Taos: dash: What or where is dateutil
19:59  qwerty1793: dash: ive got loads of lines doing list comprehension, it would be 'pretty' to not have one stand out
19:59  lvh: tafryn: Except exocet! Eventually
19:59  blubbi: dennda: be carefull with scipy.signal.fftconvolve it had a bug which made it never come to a result when using a unfortunate length of data
19:59  tafryn: papna-work: It's not in the code. I use it for debugging.
19:59  dash: Taos: which part confuses you
19:59  Taos: Where do I find dateutil
19:59  papna-work: tafryn: Maybe you want to use the unittest module.
19:59  KirkMcDonald: tafryn: That's almost worse!
19:59  dash: qwerty1793: write code that is easy to understand, not pretty.
19:59  blubbi: dennda: I could by the way check if the bug is gone
19:59  shylent: ok, so apparently getdefaultencoding returns a hardcoded constant, unless you alter it in site.py/sitecustomize.py
19:59  shylent: at least that's what I've gathered from python source
19:59  tafryn: KirkMcDonald: Well it's a good thing it's not actually worse, or I'd be in trouble.
20:00  Xeross: The windws folder monitor api tihng doesn't list moves ?
20:00  KirkMcDonald: tafryn: It means you're debugging against an environment which has a high probability of not being the same as if you just restarted the process.
20:00  lvh: shylent: yeah please don't change that ever
20:00  dash: tafryn: well, the problem is the reload() results in a program state that's different from both a process that loaded the new code at the start and one that loaded the old code
20:00  tafryn: papna-work: I also use unittest, and no it is not what I want here.
20:00  dash: tafryn: so it's not a reliable way to debug things
20:01  Taos: dash: where do i find dateutil
20:01  shylent: lvh: er, I am not going to, I was just asked what exactly it does and I've found the exact answer, thats all
20:01  shylent: lvh: I am not *that* bad
20:01  dash: Taos: sheesh dude i don't memorize urls
20:01  dash: well I do, but not that one
20:01  lvh: shylent: okay <3
20:01  Taos: Oh external module :D
20:01  dennda: blubbi: sure
20:01  tafryn: dash: I can see how that could cause some headaches.
20:01  lemiffe: Hey guys, does anyone know why a text file would have \r instead of \n as a line terminator?
20:01  dash: lemiffe: spite
20:01  lemiffe: spite?
20:02  shylent: because it hates you!
20:02  lemiffe: pff
20:02  ch1zra: hai, can i unzip file from a zip archive (obviously) without replicating dir structure ?? file i need is for example arch.zip/folder1/folder2/fileIneed.doc
20:02  lemiffe: nah ;p
20:02  dash: lemiffe: somebody hates you, that is why.
20:02  lemiffe: I guess, but that wouldn't be the reason :)
20:02  papna-work: lemiffe: \r or \r\n?
20:02  lemiffe: I'm doing just a standard file = open(...) and then for line in file:
20:02  fencepost: Is there list somewhere of all the __methods__ that exist for overwriting?
20:02  lemiffe: but it is not splitting it into a list as I have \r apparently instead of \n
20:02  dennda: blubbi: what i want to do for the beginning is really simple: for a sound file (say, a song) get a list/tuple of values representing the 'intensity' of a frequency at a time (like the bar-visualizations in music players)
20:02  lemiffe: I get a single string
20:03  KirkMcDonald: fencepost: http://docs.python.org/reference/datamodel.html#special-method-names
20:03  fencepost: thnks
20:03  lemiffe: Would it have anything to do with the encoding of the file?
20:03  papna-work: ch1zra: Open the file with the zipfile module, grab that specific file, write it out somewhere else.
20:03  ch1zra: papna-work so i cant use zipfile.extract ?
20:04  papna-work: ch1zra: Sure.
20:04  dennda: blubbi: doesn't even have to be realtime
20:04  ch1zra: k ty
20:05  blubbi: dennda: okay then if you need a correlationfunction, use numpy.correlate or write your own :-)
20:05  blubbi: if the dataset is a lucky one, use scipy.signal.fftconvolve it's very fast, but only if the data has the correct elngth
20:06  dennda: blubbi: keeping things simple, how would i start to load that file & get that list of values for one particular milisecond of the track?
20:06  blubbi: never worked on soundfiles.... sry
20:07  dennda: ah ok, thanks
20:07  lemiffe: linesList = file.readlines() gives me ['Hello\rWorld']
20:07  blubbi: dennda: http://tim.oreilly.com/pub/a/python/2001/01/31/numerically.html <-- this is what you want to read
20:08  blubbi: dennda: and this http://wiki.python.org/moin/PythonInMusic
20:08  dennda: thanks
20:08  blubbi: dennda: and the last one I have http://www.acronymchile.com/sigproc.html
20:09  blubbi: dennda: and when using a wave file... look out for scipy.io.wavfile.read
20:09  dennda: yup
20:09  dennda: format doesn't matter
20:10  blubbi: scipy.signal.fftconvolve in scipy 0.7.2 not fixed
20:10  dennda: what do i need to watch out for?
20:10  lvh: did you file a bug
20:11  lvh: sorry, every time I've needed signal mixing or FFTs I had hardware to do it
20:11  blubbi: lvh: ther was a bug and I talked to the devs in scipy and they told me that they are aware of this bug
20:11  blubbi: but this was half a year ago
20:12  dennda: this is going to be an offline process
20:12  paddy_m: i'm dealing with a conflict between apt-get installed django and pythonpath django.  the two directory trees diff the same.  but there are unit tests for my codebase that only pass with apt-get installed django.  What is the best place to ask this question
20:12  dennda: so it's not too bad if it's slow
20:12  dennda: paddy_m: the django channel
20:12  kerio: lemiffe: wait, what?
20:12  blubbi: dennda: then stick to numpy.correlate
20:12  lvh: blubbi: yeah some of the code in scipy/numpy is reallllllly stupid
20:12  lvh: blubbi: http://paste.pocoo.org/show/140351/
20:12  kerio: that's... weird
20:13  lvh: blubbi: from twisted.positioning.util import _invncdf is mine, and it's pure python
20:13  lemiffe: nothing, thanks anyway kerio... I just found out I had to read it with universal mode
20:13  lemiffe: rU
20:13  lemiffe: instead of r
20:13  kerio: yeah but... a single \r?
20:13  lvh: blubbi: It also produces better results
20:13  kerio: instead of \r\n?
20:13  lemiffe: yep
20:13  kerio: are you on a really old mac?
20:13  blubbi: lvh: interesting
20:13  lemiffe: nope, win7, Heavens knows what I did to that text file, it looks alright in notepad
20:13  lvh: blubbi: if I use AbramowitzStegun as a reference
20:14  dennda: blubbi: this looks good, too bad the images are broken http://tim.oreilly.com/pub/a/python/2001/01/31/numerically.html
20:14  lvh: blubbi: I did go kind of mathy on it -- it's a chebyshev rational
20:14  lvh: blubbi: still, it's numerical code and pure-python, Cython should make it completely fly
20:14  blubbi: lvh: Timing for numpy.correlate: 114.347277164 (on my dataset = 304000 values)
20:15  blubbi: lvh: where can I get the code?
20:15  lvh: blubbi: bzr branch lp:~lvh/twisted/positioning-statistics
20:16  lvh: blubbi: twisted.positioning._stats (or is it util? I forget)
20:16  blubbi: lvh: how to get it?? Didn't understand what you wrote
20:16  lvh: blubbi: it's in a bzr repo
20:17  lvh: blubbi: I was assuming you had bzr
20:17  blubbi: no
20:17  lvh: blubbi: What OS?
20:17  blubbi: Linux
20:17  blubbi: what a question ;-)
20:17  lvh: blubbi: What distro
20:17  blubbi: Gentoo
20:17  dash: so this weekend i turned python's parser into an extension module
20:18  lvh: blubbi: It's available under the MIT license, so you can do whatever you want with it as long as you keep my name on it
20:18  dash: parser and ast module, i should say
20:18  dash: now i'm going to try some syntax changes!
20:18  blubbi: sry to ask again, but has anyone an idea why nothing gets written to the log files: http://paste.pocoo.org/show/277538/
20:18  lvh: dash: sounds like fun, are you going to try and get it into the stdlib
20:18  blubbi: lvh: okay, so where to get the code?
20:19  shylent: ok, make it look more like perl! :P
20:19  dash: lvh: no
20:19  lvh: blubbi: the easy way is getting bzr
20:19  dash: lvh: are you nuts
20:19  lvh: blubbi: http://bazaar.launchpad.net/~lvh/twisted/positioning-statistics/annotate/head:/twisted/positioning/_statistics.py
20:19  lvh: dash: yes
20:19  dash: shylent: I think i'm going to adopt the syntax of an existing language!
20:20  daedra: oh wow my distro's default python version is now Python3
20:20  dash: daedra: which distro
20:20  daedra: archlinux
20:20  shylent: eheh
20:20  dash: hahahahaha
20:20  dash: oh man, arch.
20:20  dash: those guys
20:20  daedra: indeed
20:20  shylent: thats kind of crazy, really
20:20  daedra: YES IT IS
20:20  shylent: but that s a good thing of course :P I mean someone has to test it, right?
20:20  dash: well that confirms my impression
20:20  lvh: daedra: It's okay, Ubuntu still works
20:21  dash: that arch was invented by a bunch of guys who thought gentoo was too stable and easy to use
20:21  lvh: dash: hahahahaha
20:21  dash: shylent: no, not really
20:21  dennda: daedra: srsly? the DEFAULT python?
20:21  blubbi: lvh thanks
20:21  shylent: dash: "no" in what way?
20:21  dash: shylent: no one _has_ to test it.
20:21  dash: it's entirely optional.
20:21  dennda: http://www.archlinux.org/news/python-is-now-python-3/
20:21  daedra: http://www.archlinux.org/news/python-is-now-python-3/
20:21  dennda: omfg
20:22  lvh: dash: http://twitter.com/lvh_/status/27857112098
20:22  muraii: http://www.archlinux.org/news/python-is-now-python-3/
20:22  shylent: dash: ahh optional as in 'pain is inevitable, suffering is optional'?
20:23  dash: shylent: as in there's no reason we can't continue using python 2 for as long as we feel like it
20:23  shylent: well, of course
20:24  dash: shylent: especially after i finish modifying this parser code
20:24  dash: shylent: so that you can load python 3's parser as a python 2 extension module
20:24  muraii: That sounds entirely too rational a statement to live on the internet.
20:24  shylent: I've heard somewhere that 2.7 is the last major release of 2.x. is that not true then?
20:24 --- NelleV is now known as NelleV_
20:24  dash: shylent: prediction is hard, especially about the future
20:24  _habnabit: I do like how arch demonstrates again and again that they have no idea what they're doing.
20:24 --- NelleV_ is now known as NelleV
20:25  dash: shylent: they don't _plan_ to do another 2.x release
20:25  dash: shylent: but that doesn't mean they won't, or that somebody else won't. :)
20:25  muraii: <insert off-color poorly formed joke here>
20:25  dash: to quote Chesterton:
20:26  box2: <font color="off"><b><u>joke</b></font></u>  (poorly formed off-color joke)
20:26  dash: 'There is one metaphor of which the moderns are very fond; they are always saying "You can't put the clock back." The simple and obvious answer is "You can."'
20:26  muraii: box2: Thank you for your support.
20:27  box2: heh
20:27  dash: 'A clock, being a piece of human construction, can be restored by the human finger to any figure or hour.'
20:30  lemiffe: Is there any function from class Dictionary to sum all values without having to iterate on the dictionary?
20:31  dash: lemiffe: no.
20:31  KirkMcDonald: sum(d.itervalues())
20:31  lemiffe: ok, thanks, I'll just iteritems then
20:31  lemiffe: oh
20:31  lemiffe: thanks a lot KirkMcDonald
20:32  lemiffe: that worked :)
20:34  box2: dash: urllib is working out great, thanks for the advice
20:34  and7ey: na
20:35  and7ey: hi all, I've installed the Poster, but not quite sure how to use it (looking at example there - http://atlee.ca/software/poster/#example), multipart_encode({"image1": open("DSC0001.jpg", "rb")}) - image1 is it the field which will be used in my post request, right? what should I pass instead of DSC0001.jpg? I received the file in the form upload (self.request.get(argument)).
20:40  and7ey: who understand how Poster works?
20:40  dash: i have a poster on my wall
20:40  and7ey: do you understand how it works? :D
20:40  dash: and7ey: sticky-tack
20:41  and7ey: ok, seriously speaking I need help with http://atlee.ca/software/poster/
20:41  kaff: i am using pcapy to capture packets, i would like to output the packet to a pcap. I can write the actual data from the packet to a file but I cant write the header for some reason. the header is saved as a read only object. Can anyone offer me some advice?
20:42  dash: and7ey: aah, never seen that.
20:49  paranoidi: uhh, interesting .. one user was trying to install my app http://pastebin.com/6GqYFzr7
20:49  infobob: http://paste.pocoo.org/show/277565/ (repasted for paranoidi)
20:50  paranoidi: how can easy_install find FlexGet from pypi even though the project is set as hidden (at the moment) .. and what's even more confusing it manages to find the tar.gz from the project page
20:50  dash: paranoidi: easy_install is full of hate.
20:50  muraii: ...and crunchy goodness.
20:50  kaff: i am using pcapy to capture packets, i would like to output the packet to a pcap. I can write the actual data from the packet to a file but I cant write the header for some reason. the header is saved as a read only object. Can anyone offer me some advice?
20:51  dash: muraii: except without the goodness
20:51  paranoidi: dash: I know, but the path it has taken is so unlikely
20:51  muraii: dash: And, let's be honest, the crunch is underwhelming.
20:51  dash: nothing surprises me about it anymore
20:51  Anacleto: hi guys
20:51  paranoidi: and pypi is working a bit wrong here, it shouldn't show my hidden project
20:51  Anacleto: can i ask you something?
20:52  Arimoto: Anacleto: you just did.
20:52  Anacleto: oh shi-
20:52  bombshelter13b: Hi guys. I need to write a python script, running on Windows (unfortunately) that will tell me whether a particular binary file contains the contents of another smaller binary file. What tools will I be needing to do this?
20:52  Arimoto: Next question!
20:52  Anacleto: lol
20:52  Anacleto: how to convert from .glade to python code?
20:53  Anacleto: glc doesn't work and gladepyc is even worst
20:53  Juhaz: Anacleto, bad idea
20:53  seanthegeek: If I compile a py file to pyc, does the end user need to have the same modules installed?
20:53  Anacleto: why juhaz?
20:53  Anacleto: how should i design interfaces with gtk?
20:54  Anacleto: i've never realized an interface, that's why i really don't know how to proceed
20:54  Juhaz: Anacleto, glade is fine, just use libglade (or preferably gtkbuilder) to load the interface file at runtime to your app, instead of code generation
20:54  Anacleto: mmm
20:55  Anacleto: i'm not sure i would be able to do that, i never did such a thing, i've alwais programmed scientific-oriented application
20:55  Anacleto: in C or php
20:55  Anacleto: i don't know how that should work
20:56  dash: Anacleto: pygtk has functions that load glade files and give you gtk widgets.
20:57  Anacleto: oh
20:57  Anacleto: i knew that for pyqt
20:57  Anacleto: i tried to find the same for pygtk
20:57  Anacleto: but i found nothing
20:57  Anacleto: i will search again
20:57  Anacleto: if you say i can load glade files
20:57  Anacleto: ty
20:58  Anacleto: ok i found how i should do that
20:58  dash: http://faq.pygtk.org/index.py?req=show&file=faq22.001.htp
20:58  Anacleto: it looks so easy...
20:58  dash: <3
20:58  Anacleto: yeah same thing i was looking to
20:58  Anacleto: ty so much
21:00  Willfon: Which version of python did float get a {0.g} representation?
21:00  Willfon: I get: AttributeError: 'float' object has no attribute 'g'
21:00  Willfon: contrary to http://docs.python.org/library/string.html
21:00  dash: Willfon: erm. what?
21:00  lvh: Willfon: That's not how you do string interpolation
21:01  lvh: Willfon: That thing is a single-element set literal that does attribute access of 'g' on 0
21:01  lvh: which never worked and most likely never will either
21:01  lvh: (Why don't there need to be parens around the 0? I thought that was required.)
21:02  Willfon: hmm, and heres me thinking {0.g} ment format argument number 0, set formatting to g
21:03 * Willfon rereads the format_spec ::=
21:07  Juhaz: Willfon, :, not .
21:08  Willfon: Ah, {0:g} - BTW, anyone remember the name of that syntax declaration, like foo ::=  [bar|bahz] ? Its ben 13 years since I had that in uni.
21:08  Willfon: Juhaz: thanks ;)
21:08  eblume: Hi - a peice of software I've written with a coworker is nearing a stage where we want to take it from a collection of modules to some sort of produceable. In an ideal world, it might be something like a .jar file which bundles all of the python modules and identifies a main function and an interpreter. What should I be looking at for python?
21:08  SegFaultAX: Willfon: Look up BNLS?
--- Log closed Tue Oct 19 21:14:35 2010
--- Log opened Tue Oct 19 21:14:55 2010
21:14 --- Users 784 nicks [0 ops, 0 halfops, 0 voices, 784 normal]
21:14  lemiffe: cheers
21:15  papna-work: lemiffe: You want an arbitrary, nonrandom n items of a dict?
21:15  lemiffe: yep
21:15  Willfon: eblume: got freeze and pyinstaller from a google search (and 'tarballs' ;)
21:16 --- Channel #python was synced in 89 seconds
21:21  lemiffe: papna-work: When doing an islice on a dictionary I end up with a itertools.islice object, is there any way to convert this into a dictionary again?
21:21  plouffe: How can I break up an if statement over several lines?
21:21  [diecast]: press enter
21:22  plouffe: that doesn't work
21:22 * [diecast] waits for laughs
21:22  lemiffe:  maybe \
21:22  lemiffe: if blabla = x and omg = y \
21:22  plouffe: lemiffe, I tried that but it fails at the second line
21:22  tos9: plouffe: Yes it does. You mean break up the predicate?
21:22  tos9: Don't use \ it's ugly. Use () if you must
21:23  bahamas: == not =
21:23  plouffe: tos9, I used parentheses around the conditions
21:23  plouffe: I have 3 conditions, that are rather long
21:23  plouffe: I'd like to have them on separate lines, so I can still read them at once
21:23  tos9: plouffe: "conditions"? "condition." (condition1 and condition 2 and goes here)
21:23  [diecast]: turn them into functions instead and return true?
21:24  plouffe: if (cond1) && (cond2) && (cond3)
21:24  plouffe: :
21:24  tos9: plouffe: forget your c++ please.
21:24  lemiffe: lol @ &&
21:24  papna-work: lemiffe: You would use `dict` for this.
21:24  Kaedenn: lemiffe: the rules, please follow them
21:24  papna-work: lemiffe: What are you doing?
21:24  tos9: plouffe: if cond1 and cond2 and cond3
21:24  Treyno: Guys, say if i had a tuple of inventory = ("sword", "armor") etc, and if i put in:     for item in inventory:
21:24  lemiffe: understood Kaedenn
21:24  Treyno: print (item)
21:25  Treyno: it prints out my inventory
21:25  bahamas: it's plouffe the one doing
21:25  plouffe: ok, the problem is still the same
21:25  Treyno: but i havent assigned item to my inventory
21:25  tos9: plouffe: If you want multiple lines, youd do if (cond1 and cond2      on the first line say and then cond3) on the second line
21:25  _habnabit: Treyno, yes?
21:25  eblume: dash: I suppose where I'm getting hung up here is that I'm not sure that the 'application' I coded in python (as a bunch of modules, one of which has a #! line) is in fact a 'package' as required by distutils.
21:25  _habnabit: Treyno, what part is confusing you.
21:25  plouffe: ok working, thx
21:25  Treyno: why it prints out my inventory as a list
21:25  lemiffe: papna-work, lst = itertools.islice(mg.ngramProbabilities, 0, 10) ... Now I want to iterate over lst to obtain the first 10 keys/values
21:26  eblume: I suppose what I'm asking is, should I really be setting up my application (again, a bunch of modules, one of which is the 'leader') as a package?
21:26  Treyno: what does the word 'item' mean to python
21:26  papna-work: lemiffe: dicts aren't in any particular order
21:26  papna-work: Treyno: Multiple things.
21:26  _habnabit: Treyno, nothing.
21:26  Treyno: because i havent assigned 'item' to do anything.
21:26  papna-work: Treyno:
21:26  _habnabit: Treyno, yes you did. `for item in inventory:`
21:26  lemiffe: papna-work: I know that, I just wanted 10 random elements
21:26  papna-work: Treyno: lemiffe They aren't random.
21:27  lemiffe: Well... any items in whichever order they are kept
21:27  papna-work: lemiffe: You can iterate over that thign.
21:27  papna-work: lemiffe: It's an iterable.
21:27  papna-work: Also, don't call it or anything else "lst"
21:27  eblume: lemiffe: Stepping in the middle of this conversation - using the 'for X in <iterable>' syntax uses a strict ordering, however that ordering is specified by the <iterable>. For dictionaries, the order is unspecified.
21:28  keepguessing: I have started to use python today. I am going thorugh dive into python book. I am at this url http://tinyurl.com/2bcb53d of the the tutorial [pretty beginnning. When I try to run a python shell command print 'hello world' I get an error "SyntaxError: invalid syntax"
21:28  keepguessing: Please help
21:28  lemiffe: papna-work: itertools.islice object has no attribute 'iteritems'
21:28  papna-work: lemiffe: islice(d.iteritems(), 0, 10)
21:28  _habnabit: keepguessing, you're using python 3.x and you should be using 2.x.
21:28  papna-work: lemiffe: Did you read the documentation for islice?
21:28  papna-work: Do you get what it does?
21:28  lemiffe: yes I did
21:29  lemiffe: but it gets the values, not the key-value pairs
21:29  keepguessing: _habnabit: I am learning python and have no production use. Then why not start with the latest.
21:29  lemiffe: let me read it again
21:29  lemiffe: I guess I'm being daft today
21:29  _habnabit: keepguessing, it isn't the latest.
21:29  _habnabit: keepguessing, use 2.x.
21:30  tos9: Arch migrated to 3.x yesterday. I have a feeling headaches are waiting for me when I get home...
21:30  dash: tos9: hee hee.
21:30 * _habnabit shakes his fist at arch.
21:30  lemiffe: hmm... I think it was enumerate(iterable)
21:30  papna-work: keepguessing: What do you want to do?
21:30  keepguessing: _habnabit: I got point your by the way. The issue is with shell of 3.x. Am I correct. Can you explain why I am getting this error
21:30  dash: keepguessing: is python your first programming language?
21:30  _habnabit: keepguessing, because 3.x is different from 2.x.
21:30  _habnabit: keepguessing, they are not the same language.
21:30  _habnabit: keepguessing, so, use 2.x.
21:31  _habnabit: keepguessing, since you're reading a 2.x tutorial.
21:31  eblume: keepguessing: I would recommend reading the link in the title line of this channel.
21:31  keepguessing: dash: I am not new programmer. I have worked extensilvey on java perl and c#
21:31  papna-work: keepguessing: What do you want to do?
21:31  keepguessing: eblume: thanks for the link ...
21:31  keepguessing: papna-work: just learn python
21:32  tos9: keepguessing: yes, he means with what goal
21:32  papna-work: keepguessing: That's a silly goal.
21:32  papna-work: Well, that's a silly non-intermediate goal.
21:32  resixian: hey, wondering if anyone would take a peek at my 'multiprocess aware' logger module? http://pastie.org/private/qzsli7nrdbke7vc6ctytdg
21:32  dash: keepguessing: i'd just read the python.org tutorial then, and skip diveintopython (it gets a lot of things wrong)
21:32  lemiffe: papna-work: Thanks for that, it was the .iteritems() I was missing on the dictionary inside islice... Cheers!
21:32  keepguessing: papna-work: sorry to disappoint you ;-)
21:33  tos9: What's with all the new loggers popping up in the past month...
21:33  resixian: it seems to be working, but was wondering if anyone could see problems?
21:33  resixian: (the read function is probably horrible)
21:34  papna-work: keepguessing: I recommend you replace it with a worthwhile goal, such as "Build a website for my Go club", "Perform molecular dynamics simulations", or "Go SCUBA diving".
21:34  keepguessing: tos9: I am new to python. I will just work around learning it. No particular goal. I like to learn.
21:34  papna-work: The last is most highly recommended and doesn't require knowing any Python.
21:34  _habnabit: papna-work, but it means you have to go in the water.
21:34  lemiffe: keepguessing: Start by the interactive python program
21:35  keepguessing: papna-work: Sure I would do so. Once I learn atleast the basics.
21:35  ponaboy: in a try/except expression, does the "try" part fire off again if "except" catches or do I need to code the retry myself?
21:35  lemiffe: keepguessing: www.trypython.org if you haven't seen it yet, great in-depth tutorial for beginners
21:35  papna-work: keepguessing: Python 3.x is suited for many fewer interesting tasks for the forseeable future.
21:36  resixian: ponaboy: it does not re-enter the try
21:36  keepguessing: papna-work: goals are good but I will not plan for olympics until I know I am good at swimming/or whatever sport.
21:36  eblume: keepguessing: Anyway, the immediate snarky comments aside, python 3.x is still pretty new and I'm not sure how developed the tutorials for it are. Most python programmers I know are still using the 2.x series (2.6 or 2.7, mostly). You'll have much better luck starting there - at least for now.
21:36  lemiffe: keepguessing: In my experience 2.6 has been the best for me (considering all the 3rd party extensions/libraries)
21:36  papna-work: keepguessing: It pays to think about a useful thing to be accomplished, otherwise you never know if you are making a good choice. "If a man does not know to what port he is steering, no wind is favourable"
21:36  papna-work: keepguessing: On the contrary, you correct your stroke as soon as possible or there's no way you're ever going to the olympics.
21:36  lemiffe: keepguessing: papna-work is right, set yourself goals, work upon that, if not you will just be running around in circles.
21:37  eblume: Guys, he didn't come in here asking for life coaching advice, he asked why his print statement wasn't working. For crying out loud.
21:37  keepguessing: papna-work: My short term goal is a helloworld. Long term is say a game !!!
21:37  papna-work: keepguessing: If your goal is to write useful programs or get good documentation, Python 3 probably isn't the right choice.
21:38  papna-work: keepguessing: If you wanted for example a 2d graphical game engine, you would use pygame, which doesn't have full Python 3 support.
21:39  _habnabit: eblume, context is very important.
21:39  keepguessing: papna-work: thanks. But will I end up learning something that may be available for long if I choose to learn 2.x.
21:40  lemiffe: 2.6 is good keepguessing and it will be around for quite a while still
21:40  iman: the python is good language for writing virus ?
21:40  resixian: eblume++
21:40  lemiffe: iman: ...
21:41  _habnabit: resixian, SyntaxError
21:41  resixian: lol
21:41  _habnabit: iman, sure, why not.
21:42  lemiffe: viruses... on an interpreted language? god almighty
21:42  iman: _habnabit, i am java developer and by java we can't create exploit or virus
21:42  lemiffe: of course you can
21:42  _habnabit: lemiffe, what's an interpreted language
21:43  roxfan: pfft, i remember seeing .bat viruses
21:43  lemiffe: _habnabit you know what I'm referring to even though I did not use the correct word
21:43  lemiffe: you can create a virus in whichever programming language you want... the bottom line is efficiency
21:43  _habnabit: lemiffe, no, I really don't.
21:43  lemiffe: and exploitability
21:43  lemiffe: _habnabit, ok, a language that requires an intermediate compiler
21:43  _habnabit: lemiffe, no language requires that.
21:43  lemiffe: c# (CLR) ?
21:43  keepguessing: just reading the url in the title wrt 2.x vs 3.x > It is helpful in answering a lot of question I posed here. Should be able to choose something once I am done there.
21:43  lemiffe: PHP (PHP engine) ?
21:44  _habnabit: lemiffe, you're talking about implementations of languages.
21:45  ezzieyguywuf: is there a built-in method to check whether any of the first indices in a list of lists is a certain value?
21:45  _habnabit: ezzieyguywuf, 'any'
21:45  lvh: first indices?
21:45  ezzieyguywuf: i.e. if mylist = [[1,2],[2,3],[4,5]], I'm looking for a way to see if for item in mylist: item[0] == somval
21:45  lemiffe: e.g. not i.e.
21:46  ezzieyguywuf: sorry.
21:46  _habnabit: If it portrays christianity as archaic, ...
21:46  _habnabit: Er.
21:46  ezzieyguywuf: s/i.e./e.g./g
21:46  _habnabit: 12:45:24 < _habnabit> ezzieyguywuf, 'any'
21:46  ezzieyguywuf: AttributeError: 'list' object has no attribute 'any'
21:46  ezzieyguywuf: am I doing something wrong here?
21:46  lvh: ezzieyguywuf: Yes, any is a builtin
21:46  _habnabit: :V
21:47  lemiffe: ezzieyguywuf, read http://docs.python.org/library/functions.html (3rd function)
21:47  lvh: any(sublist[0] == val for sublist in l)
21:47  _habnabit: lemiffe, anyway, as I said, you're talking about implementations of languages.
21:47  _habnabit: lemiffe, C# needn't run exclusively on the CLR.
21:47  ezzieyguywuf: ok
21:48  lemiffe: _habnabit, yes, you are absolutely right, however, since the start I believe you had a clue to what I was trying to express with my rather poor language
21:48  _habnabit: lemiffe, you're trying to express something that doesn't exist.
21:49  ezzieyguywuf: the any function seems to check every singel elemente in my iterable though. I want it to check only certain elements
21:49  psyferre: Hey folks, I can't imagine there's not a better way to write this...  caveat: I have to do it in a oneliner (for weird and complex reasons).  Zipcode = Zip + ' - ' + ZipPlus if ZipPlus != '' else Zip
21:49  lemiffe: ok, I am, however, you must agree that generally speaking C# programs are ran through the CLR
21:49  _habnabit: ezzieyguywuf, which?
21:49  lemiffe: Why is everyone so specific about everything here?
21:49  _habnabit: lemiffe, see, there's a thing called 'communication'
21:49  tos9: psyferre: "for weird and complex reasons"?
21:49  _habnabit: lemiffe, and to have it, we have to use the same terms for the same things.
21:49  lemiffe: I understand that, but not everyone is good at it
21:50  psyferre: tos9: I'm pulling the code from an xml file.  Weird.  I know.
21:50  ezzieyguywuf: _habnabit: well, in this case, the zeroeth index of each element
21:50  _habnabit: psyferre, you're running arbitrary code you get from an XML pfile?
21:50  _habnabit: ezzieyguywuf, and that's what lvh's code does.
21:50  lvh: lemiffe: C# is more often executed in a context that involves the CLR than in a context that does not involve CLR, correct.
21:50  psyferre: _habnabit: not quite from the noob-pile :)  The code in the xml file is my own
21:51  _habnabit: psyferre, why would you ever put code in an XML file?
21:51  bob2: psyferre: s/ != ''/
21:51  bob2:  /
21:51  lemiffe: indeed, lvh, I intended to express such a thing nonwithstanding my poor lexicon
21:52  lvh: lemiffe: Okay, so what's your point
21:52  Raydiation: hm, is there a way to tell a script explicitely to be executed by python 2.x?
21:52  _habnabit: Raydiation, as opposed to...?
21:53  psyferre: _habnabit: The xml file is a catch-all configuration file that contains settings used by multiple processes in multiple languages.  One thing pulled from the file is what sort of string operations might need to be performed on a specific set of variables by a python script
21:53  Raydiation: _habnabit: python 3.1
21:53  Raydiation: just got an update here on arch linux which messed up python a bit
21:53  bob2: ha ha arch
21:53  Raydiation: :)
21:54  tos9: Raydiation: It didn't "mess it up".
21:54  tos9: They migrated.
21:54  lrojas: Raydiation: how about putting the path to python 2.x binaries in the shebang of the script?
21:54  bob2: basically, arch has fucked every script written for 2.x that they haven't packaged
21:54  Raydiation: woot?
21:54  bob2: Raydiation: you need to alter the shebang
21:54  Eevee: I guess that was inevitable
21:54  crashanddie: Hey guys, how can I figure out what encoding a unicode string has been encoded with?
21:54  Raydiation: bob2: lrojas: ty
21:54  bob2: crashanddie: ideally you'd know
21:54  Eevee: crashanddie: what?  unicode strings aren't encoded
21:54  lemiffe: lvh: The point was that creating a virus in a language that is generally-speaking executed through an interpreter is stupid
21:54  tos9: bob2: basically. But it was coming anyhow, it's just a question of how early you're willing to jump into the pool. I give them a bit of credit for it.
21:54  tos9: Even if it's gonna make my afternoon suck.
21:54  lvh: tos9: Judging by the amount of people complaining about everything falling apart, I'd say "mess it up" is a very fair assessment
21:55  lemiffe: lvh: but that's too far off-topic now
21:55  bob2: tos9: now is far too early
21:55  johnny5ive: I'm trying to follow PEP8, and I need a piece of advice. I want variables that are passed to a function be be differentiated between ones that I have created inside the variable. What is the best way, following the PEP, to do this?
21:55  lvh: lemiffe: But that doesn't make sense, C# uses an interpreter
21:55  Raydiation: bob2: that explains the huge gnome update today
21:55  johnny5ive: er, inside the function
21:55  Eevee: bob2: SOMEone has to jump in the pool, eventually
21:55  _habnabit: johnny5ive, 'differentiated' how?
21:55  lvh: lemiffe: In fact, pretty much all code you run on a modern Intel CPU is interpreted
21:55  _habnabit: Eevee, library support is coming along, slowly.
21:55  psyferre: _habnabit: So yeah... not doing anything stupid, so far as I am aware.  The xml "settings" file is not accessible to end users.  if someone manages to hack their way in that far they've already got enough access to do whatever they wanted anyway.
21:55  tos9: bob2: They migrated all of their own packages. Anyone else's packages generally shouldn't be being installed without writing a PKGBUILD anyhow. So basically the only things affected are the stuff in AUR, which is a huge chunk but just needs to get done by all the maintainers.
21:56  lemiffe: Yeah, I was saying that to iman who came in asking if Python was good for writing viruses, and I basically said that it would be stupid in any such language like C#, PHP, etc.
21:56  psyferre: _habnabit: Just weird and hard to explain.
21:56  Raydiation: anyway, python 3 is nice
21:56  Eevee: _habnabit: now anyone who devs on arch will make it come along faster, I guess
21:56  papna-work: Python 3 is about the same.
21:56  _habnabit: Eevee, and give us more work in the meantime. :V
21:56  johnny5ive: _habnabit I want to look at a function and quickly be able to tell between variables that were passed to the function, and ones there were created inside the function...
21:56  lemiffe: lvh: I understand that, however, it is different having an interpreter, or an exe that includes run-time dinamic libraries, than having to download an interpreter/compiler to run code
21:56  _habnabit: johnny5ive, if you're having problems with that, you probably have too many parameters.
21:57  Eevee: arch always struck me as very "if we break it, you get to keep all the pieces"
21:57  johnny5ive: _habnabit I don't have too many at all, actually just a few, it just feels like good practice.
21:57  lvh: lemiffe: What languages force you to download an interpreter/compiler to run code
21:57  crashanddie: Eevee: eh? So UTF-16, UTF-8 and cp1252 aren't encodings?
21:57  psyferre: Any input on how I might write  "Zipcode = Zip + ' - ' + ZipPlus if ZipPlus != '' else Zip" in a oneliner more elegantly?  Just want to improve my code so it doesn't look unwieldy.
21:57  _habnabit: johnny5ive, it's never been a problem for me ever.
21:57  lemiffe: .net to start with, you need the framework
21:57  papna-work: crashanddie: Thsoe are encodings.
21:57  lvh: lemiffe: I can turn Python things into executables with everything linked in
21:57  papna-work: crashanddie: unicode strings are not encoded.
21:57  johnny5ive: _habnabit alrighty, well then i'll skip it
21:58  papna-work: crashanddie: They are sequences of abstract unicode codepoint.
21:58  papna-work: s
21:58  lemiffe: lvh: OK, I wouldn't have known that, I've only been doing python for a couple of weeks
21:58  crashanddie: papna-work: oh, ok
21:58  lemiffe: lvh: Point taken with regards to Python
21:58  lvh: lemiffe: who cares? pretty much every recent win32 virus relies on IVs in software that needs .NET anyway
21:59  lemiffe: lvh: I guess you are right, I guess I hadn't thought about it that way. point taken
21:59  lvh: lemiffe: People write malware in *JS* (which, for most browsers on the internet, is completely interpreted)
21:59  lvh: lemiffe: There's an entire massive class of viruses that are written in VBScript and VBA
21:59  Eevee: "to install this virus, please install the python interpreter available from..."
21:59  lemiffe: yeah but JS malware many times (in some exploits) is just a means to download and run some executable file on the machine
22:00  papna-work: Someone is posting about a better reload on Python-ideas.
22:00  papna-work: Only it's actually a worse reload.
22:00  davidcramer: How can I get the argspec (inspect.getargspec) of a decorated function? (not the decorator itself)
22:00  _habnabit: psyferre, hahaha
22:00 * _habnabit kicks irssi.
22:00  papna-work: Someone should tell him about exosette.
22:00  _habnabit: papna-work, got a link?
22:01  papna-work: _habnabit: I subscribe.
22:01  _habnabit: papna-work, lame
22:01  lvh: lemiffe: that's not a requirement at all, see VBA/VBS
22:01  _habnabit: davidcramer, what do you want the argspec for
22:01  papna-work: _habnabit: http://mail.python.org/pipermail/python-ideas/2010-October/date.html I guess
22:01  _habnabit: papna-work, oh, thanks.
22:01  papna-work: I also spell exocet absurdly bad today.
22:01  psyferre: _habnabit: okay.  As unwieldy as python code nestled in an xml file can be. :)
22:02  papna-work: psyferre: That's insane.
22:02  davidcramer: _habnabit, for some doc generation
22:02  davidcramer: _habnabit, and to do some runtime introspection
22:02  _habnabit: davidcramer, pydoctor handles that stuff already
22:02  psyferre: papna-work: Possibly.  Though you might not think so if you had any information regarding my situation or the application I'm supporting....
22:02  davidcramer: gross, launchapd :)
22:03  davidcramer: anyways, i need it for more than just docs
22:03  lemiffe: lvh: Yeah, I am aware of VBA's exploits... I guess you are right.
22:03  lemiffe: brb
22:04  papna-work: psyferre: Wellllllllllllll, I meant direct embedding is insane.
22:04  crashanddie: OK, I have a few unicode strings (type() returns "type 'unicode'"), which I'm concatenating and then passing to hashlib.sha1(). It works as long as the characters that are in the unicode strings aren't anything funky (as in, ASCII). If not ASCII, I'm getting a UnicodeEncodeError.
22:05  _habnabit: crashanddie, yes. hashing hashes bytes.
22:05  _habnabit: crashanddie, and unicode strings aren't bytes.
22:05  _habnabit: crashanddie, pick an encoding.
22:05  papna-work: psyferre: Some sort of escaped thing would be only be slightly unfortunate.
22:05  lvh: crashanddie: encode it to utf-8 first
22:05  lvh: then hash it
22:05  crashanddie: _habnabit: so I should string.encode('utf8') it first?
22:05  crashanddie: aah, that makes sense. Thanks guys.
22:05  papna-work: Which is best, .tar.gz, .tar.bz2, or .zip?
22:06  _habnabit: papna-work, yes
22:06  psyferre: papna-work: What do you mean?
22:06  papna-work: psyferre: Putting Python code *directly* into an XML file is insane.
22:07  tos9: psyferre: Yeah. At least take a jpg of it and put the file name in the xml
22:07  papna-work: Yeah.
22:07  psyferre: tos9: I can't imagine why I didn't think of that before!
22:08  tos9: psyferre: Inexperience.
22:09  lvh: I suppose you could serialize asts into XML
22:09  _habnabit: papna-work, do you subscribe to python-ideas for a reason other than masochism?
22:09  lvh: but yes, embedding languages that care about whitespace into languages that don't...
22:09  psyferre: Okay... so the last time I explained my situation to folks on here it was eventually decided that, while unorthodox, my situation made sense.  There's probably a better way to do what I'm doing but I'm not terribly interested in rewriting thousands of lines of code in both python and coldfusion because you say what I'm doing is "insane".  It's worked quite well for me for 4 years now.
22:10  davidcramer: http://stackoverflow.com/questions/3972290/how-can-i-get-the-argument-spec-on-a-decorated-function
22:10  davidcramer: :)
22:10  psyferre: I really was just hoping someone might have input on my awkward-looking string processing... :)
22:10  _habnabit: davidcramer, there is no way to do this.
22:10  _habnabit: davidcramer, it requires cooperation from all of the decorators.
22:10  lvh: _habnabit: Liiiieeees!
22:10  davidcramer: hrm really?
22:10  lvh: _habnabit: okay that's not a very big lie
22:10  davidcramer: i can make decorators cooperate I suppose
22:10  _habnabit: davidcramer, introspection of argument lists is rarely useful, anyway.
22:11  davidcramer: _habnabit, this is for a RESTful API controller, so we want to cache those required arguments at runtime, and if one is missing int he request params state that as an error
22:11  davidcramer: basically, we want to be lazy
22:11  papna-work: davidcramer: Posted so we can all downvote you? ;)
22:11  davidcramer: papna-work, downvote a question?
22:12  papna-work: All the time!
22:12  psyferre: lvh: Agreed... whitespace would be a problem if I was doing something other than what I'm doing. :)
22:12  davidcramer: why the hell can you downvote a question :P
22:12  _habnabit: davidcramer, okay, so, why does this require you knowing the parameters?
22:12  papna-work: Bad questions are easily as common as bad answers, and more insidious.
22:12  davidcramer: _habnabit, so I can say "hey you're missing FOO parameter" and I dont have explicitly say that
22:12  davidcramer: this isnt a bad question :)
22:13  _habnabit: davidcramer, python does that for you
22:13  lvh: psyferre: Perhaps I misunderstand what you are doing. How come whitespace doesn't affect you?
22:13  _habnabit: davidcramer, why do you want to do what python already does
22:13  davidcramer: _habnabit, and it throws a standard exception
22:13  Raydiation: btw, in a for i in LIST loop, is there some fine way to get a counter?
22:13  davidcramer: not a specific "invalid argument" or "missing argument" exception
22:13  _habnabit: Raydiation, enumerate
22:13  _habnabit: davidcramer, ... okay, and?
22:13  Raydiation: _habnabit: so i=0 and i++ in the loop?
22:13  papna-work: Raydiation: enumerate, but that vast majority of time you don't need the indices.
22:13  davidcramer: it throws a generic TypeError -- what if something else throws that within the function?
22:13  _habnabit: Raydiation, ... no. enumerate
22:14  papna-work: Raydiation: Very much not. The enumerate function
22:14  papna-work: Raydiation: What are you going to use the indices for?
22:14  _habnabit: davidcramer, so, like, do you have an actual problem you're trying to solve?
22:14  davidcramer: _habnabit, I want to know that I failed to pass "foo" in the function, explicitly, and to be able to send that to the end user
22:14  _habnabit: davidcramer, oh, 'RESTful API'
22:14  Raydiation: papna: _habnabit: ty, thats what ive looked for :) understood it wrongly
22:15  davidcramer: and id prefer to not inspect the string
22:15  _habnabit: davidcramer, sounds like you've bound it waaay too tightly to your parameter list.
22:15  davidcramer: _habnabit, i wanted it to be like writing a function :)
22:15  psyferre: lvh: well, for one thing, I'm not using xml to store any large bits of code.  Just string processing.  I essentially have a collection of variables, each one a string.  These bits of data all need to eventually go into a database, but their source and contents is something I have no control over.
22:15  davidcramer: its still decorator heavy, but its pretty clean, and straightforward for a dev right now -- hoping to keep it that way
22:15  psyferre: lvh: for each field in my database I may have to combine several of those "bits", or process them in different ways based on many other factors.
22:15  davidcramer: i can make all the decorators store the original function if need be
22:16  davidcramer: _habnabit, using @wraps wont help me will it?
22:16  _habnabit: Nope.
22:16  psyferre: lvh: so for each one of the fields, I have an xml element that identifies what bits and what string processing
22:16  lvh: psyferre: The only way I can imagine it not mattering is if you're only storing expressions within matched delimiters
22:16  _habnabit: davidcramer, you should look at werkzeug. It gets this kind of routing right.
22:17  _habnabit: davidcramer, without writing stupidly fragile decorators.
22:17  davidcramer: k ill go harass them
22:17  psyferre: lvh: basically, yeah.  The expression is the text of the element.
22:17  psyferre: lvh: example: <Trans CurrentVar="Zip_Code_5" DBField="zip" Int="0">singlequote.sub("", str(Zip_Code_5) + '-' + str(Zip_Code_Plus) if str(Zip_Code_Plus) != '' else str(Zip_Code_5))</Trans>
22:18  lvh: psyferre: still looks super-creepy to me but slightly less bad I suppose
22:18  lvh: at least not broken
22:19  davidcramer: _habnabit, In [4]: inspect.getargspec(BlacklistEndpoint.add.original) Out[4]: ArgSpec(args=['self', 'request', 'forum', 'type', 'value', 'notes'], varargs=None, keywords=None, defaults=(None,))
22:19  davidcramer: good enough for me
22:19  davidcramer: ill live w/ my butchery
22:19  _habnabit: davidcramer, I hope you don't release this as a library!
22:19  davidcramer: :)
22:19  psyferre: lvh: this of course seems a weird way to get the expression, but now imagine that there are many different sources all giving me the same information in different "bits".  For each source, I now have an xml config file that controls what bits go into each db field and what string processing needs to happen to them
22:19  davidcramer: i wont
22:20  Noldorin: hi. i just updated docutils from 0.6 to 0.7 but now rendering is completely messed up
22:20  Noldorin: any ideas?
22:20  lvh: psyferre: I don't understand what the "bits" are
22:20  psyferre: lvh: so lots of unstandardized data from different sources can get processed based on the parameters of the source.
22:20  lvh: psyferre: but if I understand correctly you've got lots of things giving you data in different formats
22:21  lvh: psyferre: and the XML contains information on how to turn those formats into non-crazy formats
22:21  psyferre: lvh: yup.  Along with lots of other data specific to the source, like information for display on the internet
22:21  Raydiation: hm, do i have to import raw_input() in python 3?
22:22  psyferre: lvh: so the same xml file can be consulted by any language and the relevant data used for processing, display, etc
22:22  papna-work: Raydiation: It's been renamed "input".
22:22  Raydiation: papna-work: ty
22:22  papna-work: Raydiation: Are you reading Python 2 documentation and using Python 3?
22:23  davidcramer: _habnabit, hrm seems it doesnt even like to give me the defaults properly
22:23  psyferre: lvh: Xml just happened to be the most human-readable format we could come up with at the time so that managing them all wouldn't suck too bad.  And any language will have a way to parse the file
22:23  davidcramer: in that example notes=None as the default
22:23  Raydiation: papna-work: hm, is this still 2.x? http://docs.python.org/library/functions.html#raw_input
22:23  _habnabit: davidcramer, again, werkzeug does this right.
22:24  ss0: Does anyone have a moment to help me with a snippet of python code?  It's the startup script for a daemon. http://pastebin.com/YJuMqzYp
22:24  infobob: http://paste.pocoo.org/show/277641/ (repasted for ss0)
22:24  Raydiation: papna-work: ah, ty
22:24  cheater99: _habnabit: werkzeug?
22:24  davidcramer: _habnabit, digging into the source now
22:24  krelian: What's a great python library to read for learning purposes about how to write good python and design good python programs?
22:25  davidcramer: cheater99, its a wsgi handler
22:25  psyferre: lvh: So.  I need a oneliner so it can be the text of an xml element for that collection of "bits".  I have one, but it seems more verbose than it needs to be.  :)
22:25  cheater99: what does a wsgi handler do?
22:25  cheater99: is it like mod_wsgi?
22:25  davidcramer: _habnabit, doesnt that jsut do it from the routing expressions?
22:25  davidcramer: cheater99, no its an application handler
22:25  ss0: I was thinking that i would read in the elements that I wanted it to start with as a list. like so. http://paste.pocoo.org/show/277643/
22:25  davidcramer: e.g. routes etc
22:25  _habnabit: davidcramer, yes.
22:25  davidcramer: _habnabit, ya that doesnt help me :(
22:25  cheater99: davidcramer: i don't understand
22:25  _habnabit: davidcramer, why not
22:25  ss0: Is that the right way to handle it?
22:26  davidcramer: i suppose i could use inspect.getsource
22:26  psyferre: lvh: And if anyone else has been reading, hopefully they think i'm a lot less crazy, or at least not just stupid and inexperienced. ;)
22:26  davidcramer: cheater99, google it
22:26  _habnabit: davidcramer, jesus christ
22:26  _habnabit: davidcramer, what is wrong with how werkzeug does this
22:26  davidcramer: _habnabit, im not specifying routes, i just have a controller that calls methods and args come from POST/GET
22:26  cheater99: davidbonnet: so does it, for example, run *in* mod_wsgi?
22:26  papna-work: Raydiation: The default documentation is for Python 2.7, because everyone is using Python 2.x
22:26  lvh: psyferre: I don't understand how other languages are going to use python expressions
22:26  _habnabit: davidcramer, why are you mashing the POST arguments into the argument list?
22:26  davidcramer: e.g. a url looks like foo/bar.json?key=value, and the method would be def bar(request, key=value)
22:26  psyferre: lvh: they don't.  It's just "one config file to rule them all".
22:27  davidcramer: call it a microframework, to make things dead simple for us
22:27  papna-work: davidcramer: Sounds complicated and messy.
22:27  davidcramer: im sure the pydoctor/etc just inspect the sourcecode and parse it
22:27  papna-work: Don't think so
22:27  davidcramer: papna-work, its complicated, but its an up front cost, thena fterwards its super fast/simple
22:27  _habnabit: davidcramer, you can validate and unpack the data without using the argument list.
22:27  davidcramer: _habnabit, how would you approach it?
22:27  papna-work: davidcramer: There already exist microframeworks which work better than this.
22:27  _habnabit: davidcramer, and that's assuming you get it perfectly right the first time.
22:28  _habnabit: davidcramer, any problems will lead to much more complicated debugging.
22:28  papna-work: davidcramer: And maintainance is a cost. Usually the biggest cost.
22:28  davidcramer: http://www.pastethat.com/sVRZM -- thats what an api method looks like right now
22:28  davidcramer: we're not some small python shop full of noobs, we can maintain our framework ;)
22:28  psyferre: lvh: The file contains settings for that "source"... a list of assets, where they come from, how to retrieve them, what they contain, how to process what they contain, and how to display them on a website.  We have python scripts and coldfusion pages that parse out this information and use it
22:28  papna-work: davidcramer: With experience would come a recognition that software has to be maintained, and that maintainance is the biggest cost.
22:29  papna-work: So I'm sure you guys realise that.
22:29  davidcramer: Ya, this isnt as complex as it sounds
22:29  davidcramer: right now the code is very thin
22:29  davidcramer: i just need to deal w/ introspection
22:29  _habnabit: davidcramer, ... so, with @validate, why do you need the argspec?
22:29  davidcramer: _habnabit, i dont want to write validators for all arguments
22:29  _habnabit: davidcramer, why not?
22:29  psyferre: lvh: That make sense?
22:30  davidcramer: _habnabit, shouldnt need to
22:30  _habnabit: davidcramer, why not?
22:30  lvh: psyferre: Only the "why the hell would you ever use XML" part doesn't
22:30  davidcramer: ok well im not finding an example where we dont
22:30  davidcramer: but then id also have to pass in whether an argument is required or not
22:30  _habnabit: davidcramer, okay, so?
22:30  davidcramer: gross :)
22:31  _habnabit: davidcramer, I think your suggestion is far more gross.
22:31  psyferre: lvh: What would you use?  Xml is very human-readable, so the "config" file can be easily understood and altered if the source changes something.  Any application that needs the data it contains can surely parse it and get the data it needs.
22:32  davidcramer: _habnabit, well I still need it for doc generation :/
22:32  davidcramer: and not just generic python docs, embedded / custom docs
22:32  _habnabit: davidcramer, and pydoctor deals with that nicely. Not an issue.
22:32  psyferre: lvh:  Even after four years of dealing with it and learning other languages and techniques, i still can't think of a more flexible way to do it =-/
22:33  giampaolo: by using print, is there a way to delete some characters I've just printed? I'm trying to implement somthinig similar to a progress bar
22:33  giampaolo: I remember there were some characters ("\t"?) to do this
22:33  kerio: giampaolo: use curses or urwid
22:33  kerio: or yeah, \b
22:34  kerio: but it makes the cursor go back
22:34  kerio: it doesn't delete
22:34  psyferre: lvh: "It" being: "A way to hold configuration details for any number of uncontrollable data sources that is accessible to any application in any language simultaneously"
22:35  kerio: psyferre: why do you need configurations details for any number of uncontrollable data sources accessible to any application in any language simultaneously
22:35  psyferre: kerio: It's my job :)
22:35  kerio: sounds like a useless job :<
22:35  kerio: why do we need *one* format for everything
22:36  psyferre: kerio: Maybe, but I've been doing it for years and getting paid for it... so someone thinks otherwise :)
22:36  psyferre: kerio: we don't...
22:36  papna-work: giampaolo: You might also be looking for \r
22:36  papna-work: Also, check if you have a tty before displaying this crap.
22:36  papna-work: Also, there's about 1000000000 progress bars out there.
22:38  psyferre: kerio: read my conversation with lvh above... I'm storing "settings" for a data source in a large xml file for access between multiple languages.  One of the things I need information on is string processing for bits of data from the source.  So, one thing stored in the xml file is python expressions.  Nothing more major than string processing.
22:38  ss0: is there a newbie python channel where people can get help?
22:39  kerio: ss0: yup
22:39  kerio: it's called #python
22:39  ss0: kerio:  I have never programmed in python before, but I am having to modify a solaris daemon startup script. Could I ask you a few questions?
22:39  kerio: no, but you can ask here a few questions
22:40  psyferre: Anyhow, givin' up on the original question.  Thanks for the conversation, lvh.  Maybe I'll think of a way to make my code more elegant on my own. :)
22:40  lvh: psyferre: I still don't understand what the problem is actually
22:40  ss0: kerio:  I did ask and received no response, that was why I asked if there was a channel for simple questions.
22:40  lvh: psyferre: I now know what your stuff looks like
22:40  ss0: kerio:  thanks anyway.
22:40  lvh: (Okay, that looks wrong out of context)
22:40  idefine: when working with xml is there anyway to do something similar to javascript's document.getElementById in python
22:41  kerio: ss0: what's the problem?
22:41  kerio: and how is start_daemon defined?
22:41  psyferre: lvh: I was just looking for a way to write:  "Zipcode = Zip + ' - ' + ZipPlus if ZipPlus != '' else Zip" more elegantly.  It seems to me there should be a better way, even in a oneliner
22:42  ss0: kerio:  its xend a python script on solaris to start xenconsoled and some other daemons. the function that im interested in is here. http://paste.pocoo.org/show/277652/
22:42  kerio: psyferre: strings are true if they're not ""
22:42  kerio: also, why are you adding Zip twice?
22:42  kerio: :o
22:43  kerio: zipcode = "%s - %s" % (zip, zipplus if zipplus else zip)
22:43  psyferre: .... I'm not....
22:43  kerio: or, well, zipcode = "{0} - {1}".format(zip, zipplus if zipplus else zip)
22:44  kerio: ss0: i still don't see a question
22:44  ss0: kerio:  would the proper way to add more startup options be to copy the         args += "--log=" + XENCONSOLED_TRACE line and add them? like         args += "--log-dir=/var/log/xen/console/" + XENCONSOLED_TRACE
22:44  kerio: ss0: depends
22:44  kerio: what is XENCONSOLED_TRACE?
22:45  kerio: you can just set args with whatever you need, just leave a space at the end
22:45  kerio: if it's something fixed
22:45  ss0: it's a binary that needs the right arguments fed to it when it starts.
22:45  ss0: sorry about slow typing speed broken hand.
22:45  kerio: yeah, i get that
22:45  psyferre: kerio: ah, didn't think about the string var evaluating false if it's empty.  Thanks, I can use that to make it look a little better
22:45  kerio: what do you want it to be?
22:45  psyferre: Have a good one folks, gotta go
22:46  Raydiation: can i loop thorugh
22:46  psyferre: Thanks for the help and conversation
22:46  ss0: kerio:  multiple values, --log=all --log-dir=/var/log/xen/console/ -t all
22:46  Raydiation: 2 lists at the same time, like for a, b in (lista, listb)
22:46  kerio: ss0: just set the args variable as you want
22:46  kerio: and maybe remove the check for that environment variable
22:46  Eevee: Raydiation: for a, b in zip(lista, listb):
22:46  nosklo: Raydiation: http://docs.python.org/library/functions#zip
22:46  kerio: and add comments to explain :)
22:46  Raydiation: Eevee: nosklo: ty
22:47  kerio: Raydiation: zip() if they're not too big, otherwise itertools.izip()
22:47  ss0: kerio:  I'm not sure I understand where, when you say to set it, please forgive my ignorance. do you mean in the arg = " " or the section that already has —log
22:48  kerio: ss0: http://paste.pocoo.org/show/277654/
22:49  ss0: kerio:  just for my own edification, why is args defined initially as " " instead of just going straight to defining the terms?
22:49  kerio: ss0: no idea
22:49  ss0: kerio:  interesting.
22:50  kerio: maybe because start_daemon sets some options of its own?
22:50  ss0: kerio:  what does += mean exactly?
22:50  kerio: foo += bar  means foo = foo + bar
22:50  arkanes: usually
22:50  petrilli: ss0: for integers, it's basically an increment, for lists, it appends
22:51  ss0: 	petrilli thank you!
22:51  ss0: kerio:  than you as well!
22:51  kerio: petrilli: it doesn't append
22:51  kerio: it adds in place
22:52  davidcramer: _habnabit, just wanted to show you my awesome hack: func.__func__.args = dict(zip(list(argspec.args), [NoDefault] * (len(argspec.args) - len(argspec.defaults)) + list(argspec.defaults)))
22:52  davidcramer: :)
22:52  petrilli: listfoo += bar ~= listfoo.append(bar)
22:52  ss0: kerio:  when reading in command line variables, they don't have to be in list format like so ["—flag", "value", "—anotherflag", "anothervalue"]
22:52  kerio: petrilli: wrong
22:52  kerio: listfoo += bar   is listfoo.update(bar)
22:52  kerio: er
22:52  kerio: how's it called
22:52  kerio: extend
22:52  kerio: you can't add 3 to a list
22:53  kerio: you can add [3]
22:53  petrilli: ack, you're right
22:55  papna-work: Never ever use += with a list.
22:55  papna-work: It is confusing and bad.
22:55  petrilli: THAT I'll agree with :)
22:56  kerio: papna-work: worse than overloading bitshift for cout/cin in c++?
22:56  d0ugal: kerio: Yes.
22:57  papna-work: kerio: Apples and oranges, but possibly.
22:57  kerio: apples and oranges are awesome
22:58  SammyF: kerio: mangos are better
22:59 --- stoned is now known as ajavid
22:59  ss0: kerio:  thoughts on kiwi fruit?
22:59  MindVirus: Anyone familiar with wxPython?
22:59  nosklo: MindVirus: running a survey?
22:59  nosklo: MindVirus: or hiring?
23:00  nosklo: MindVirus: or maybe you want statistical information
23:00 --- petrilli_ is now known as petrilli
23:00  MindVirus: nosklo: Asking a general question is an easy way to get attention from people who could possibly answer my detailed question that people don't want to read.
23:00  resixian: MindVirus: i am somewhat familiar
23:00  MindVirus: See?
23:00  nosklo: MindVirus: that's against the channel rules
23:00  MindVirus: nosklo: Oh, sorry.
23:00  nosklo: MindVirus: just ask your question instead
23:00  Yhg1s: MindVirus: if you have a question, just ask it.
23:00  Yhg1s: MindVirus: doing otherwise just antagonizes people who would otherwise help you.
23:01  nosklo: MindVirus: if you can't take the time to write your question in first place, why would I bother to help?
23:01  MindVirus: Trying to wx.TaskBarIcon.SetIcon results in TypeError: in method 'TaskBarIcon_SetIcon', expected argument 1 of type 'wxPyTaskBarIcon *'.
23:01  nosklo: MindVirus: pastebin the full error traceback
23:01  MindVirus: nosklo: I can. I just want people to pay attention to the question, as opposed to the others.
23:02  MindVirus: The strategy obviously worked.
23:02  nosklo: MindVirus: if you write a well-thought, well explained question, with reproductible examples, you will certainly have attention
23:02  MindVirus: nosklo: Not according to my experience.
23:02  TML: MindVirus: That's making a pretty big assumption that no one would have answered the question had you asked it in the proper manner.
23:02  MindVirus: And I ask great questions with great examples.
23:02  Yhg1s: MindVirus: we can make the strategy not work, so please observe channel policy next time.
23:02  MindVirus: OK.
23:03  Yhg1s: MindVirus: so, what are you doing and what is the exact traceback?
23:03  MindVirus: http://pastebin.com/b0UpXac6
23:03  infobob: http://paste.pocoo.org/show/277662/ (repasted for MindVirus)
23:03  MindVirus: Want the related code?
23:03  nosklo: sure
23:03  nosklo: MindVirus: seems like "icon" is not a wxPyTaskBarIcon
23:04  MindVirus: nosklo: Of course it does. The reference states it needs a wx.Icon.
23:04  Yhg1s: so what are you passing it?
23:04  MindVirus: http://paste.pocoo.org/show/277663/
23:04  MindVirus: It errors on .__init__().
23:04 --- CHOCOBY is now known as chocoby
23:04  MindVirus: (I am not actually calling that.)
23:04  nosklo: MindVirus: do you have a small, reproductible example I could run in my system that also presents the same error?
23:05  MindVirus: nosklo: Sure. Just append a = NovostyIcon() to the end of that file without tabs.
23:05  papna-work: MindVirus: Don't have people run code for debugging that you yourself have not actually ran
23:05  resixian: tyhats not the same, you also would need to start the wxpy mainloop etc
23:05  MindVirus: resixian: False.
23:06  Yhg1s: MindVirus: as I recall, the wx.Icon needs to have an icon-specific type, like wx.BITMAP_TYPE_ICO
23:06  MindVirus: Yhg1s: The reference says _XPM works.
23:06  nosklo: MindVirus: If I try to run the way you suggested, I get "wx._core.PyNoAppError: The wx.App object must be created first!"
23:06  MindVirus: Right. I'll make a minimal example.
23:07  Yhg1s: Actually, the problem might be that you aren't calling wx.TaskBarIcon.__init__()
23:07  MindVirus: http://paste.pocoo.org/show/277664/
23:08  MindVirus: Yhg1s: Ah, that makes sense. I'll see about it.
23:08  Yhg1s: keep in mind to do it *before* calling self.SetIcon.
23:08  MindVirus: Yhg1s: Could you explain why it should be wx.TaskBarIcon instead of super(NovostyIcon, self)?
23:08  Yhg1s: it shouldn't be.
23:08  resixian: there doesnt seem to be a wx.PyTaskBarIcon anywhere i can find.
23:09  resixian: MindVirus: you asked in wxpython?
23:09  Yhg1s: resixian: it's just wx.TaskBarIcon.
23:09  atxq: did you try using wx.Image()?
23:09  MindVirus: Yhg1s: For wx.Frame it must be wx.Frame instead of the super constructor.
23:09  shylent: dash: er, did I mention, that your advice re twisted.internet.task.Clock helped *tremendously*?
23:09  nosklo: it works if I do as Yhg1s suggested
23:09  resixian: Yhg1s: ah, some of the wxPython api explcity adds 'Py' to the beginning, ala wx.PyScrolledWindow
23:10  nosklo: MindVirus: http://paste.pocoo.org/show/277666/
23:10  MindVirus: Yhg1s' suggestion worked.
23:10  MindVirus: Thank you.
23:10  Yhg1s: MigoMipo: I don't see why super() won't work there.
23:10  MindVirus: Whoops.
23:10  MindVirus: Yhg1s: I'll give some test code. Maybe by the time I do the error will fix itself.
23:10  MigoMipo: ?
23:10  Yhg1s: eh, MigoMipo: sorry.
23:13  MindVirus: http://paste.pocoo.org/show/277670/
23:13  MindVirus: Try it.
23:14  Yhg1s: MindVirus: remove the second 'self' on line 9.
23:14  MindVirus: Nice.
23:15  MindVirus: Yhg1s: You're good.
23:15  MindVirus: I've seen you around before. Good you haven't left.
23:15  resixian: does super actually gain you anything there though?
23:15  MindVirus: resixian: Doesn't ever gain anything ever AFAIK. It's just the thing to do for new-style classes instead of the other method.
23:15  Yhg1s: Depends on what you mean by "gain".
23:15  MindVirus: Sure, you gotta use it if you're overloading.
23:16  Yhg1s: it makes you repeat the class instead of the parent (in Python 2.x), it provides with consistent behaviour, and it makes your class work correctly in multiple inheritance situations.
23:17  MindVirus: Does XPM not support transparency or something?
23:17  resixian: 'super' is the proper way to do this?
23:17  Yhg1s: MindVirus: and in case you were wondering, I would not have replied "yes" to "are you familiar with wxPython".
23:17  Yhg1s: resixian: yes.
23:17  MindVirus: Yhg1s: You're not most people.
23:17  MindVirus: It works in my Linux support channel.
23:17  kerio: super() in python 3 is even better
23:18  MindVirus: I understand that the practice is frowned upon here but I will keep doing it elsewhere.
23:18  kerio: python3 is awesome
23:18  d0ugal: kerio: Have you used python3 for anything “real”?
23:18  kerio: i never did anything real anyway
23:18  resixian: how does repeating the class differ from the parent? perhaps there is a discussion of this somehwere i could be pointed to?
23:19  kerio: resixian: when you call the parent class you don't really want to call that particular class
23:20 --- luist_ is now known as luist
23:20  kerio: you just want the parent class of your class
23:20  kerio: it's more generalized
23:20  kerio: if you change the parent, you don't have to change your code
23:20  _habnabit: resixian, there can be another class in the MRO between your class and the superclass.
23:20  _habnabit: resixian, and there's no way for you to tell.
23:21  resixian: how does the call to super resolve that?
23:22  _habnabit: resixian, super examines the MRO when you call it.
23:22  _habnabit: resixian, and Does The Right Thing
23:22  resixian: sorry, im trying to google/read while also asking here
23:22  resixian: well thats usually good. :)
23:27  resixian: is all this fud then? ?http://fuhm.net/super-harmful/
23:27  Buttons840: can anyone suggest a program which would assist in tracking programming tasks and goals for a probject?  something simple?
23:27  resixian: flyspray?
23:27  dash: Buttons840: for a team?
23:27  _habnabit: resixian, it explains well how super works, but comes to the wrong conclusion at the end.
23:28  dash: resixian: it's not fud
23:28  dash: resixian: if you write code that needs super to work, you could have written it better.
23:28  resixian: _habnabit: for the short term i'd be most worried about the 'superclasses must use super if there subclasses do'
23:28  resixian: dash: i've never used super
23:29  _habnabit: resixian, everything should use super.
23:29  Buttons840: dash: maybe for a small team, it would be nice but not needed;   i mainly want something easier than my current appending of notes and thoughts to a text file
23:29  dash: Buttons840: well, what's wrong with that? :)
23:29  resixian: Buttons840: thats pretty easy
23:29  dash: resixian: habnabit's opinion is not universal ;)
23:30  Buttons840: dash: maybe nothing, but if there's something easier, then that's even better :)
23:30  atxq: super is not essential; it really comes down to people's own preferences
23:30  resixian: dash: is anyone's opinion ever universal, well except mine which is always right
23:30  _habnabit: atxq, I prefer my code to work, so.
23:30  dash: resixian: yes
23:30  dash: resixian: some opinions are universal.
23:30  dash: Buttons840: i'm trying to imagine how something could be easier than that
23:30  ikanobori: dashing
23:30  atxq: well, that is your preference I guess; mine works fine without super
23:30  dash: resixian: for example! spaces are the correct way to indent python code
23:31  dash: resixian: and pickle is never appopriate to use for data storage.
23:31  _habnabit: atxq, except when people use your code in ways you didn't anticpate, and it breaks horribly.
23:31  dash: _habnabit: yeah but that happens anyway
23:31  _habnabit: atxq, (which wouldn't break with super.)
23:31  dash: _habnabit: so how's that an argument
23:31  _habnabit: dash, because it's preventable in some caes.
23:31  _habnabit: cases
23:32  dash: _habnabit: some cases?  all cases
23:32  dash: _habnabit: as in, like, "don't have stupid inheritance DAGs"
23:32  _habnabit: dash, yeah yeah
23:33  dash: hm
23:33  _habnabit: dash, remember my issue with twisted using inheritance somewhere it should've used composition?
23:33  dash: yes
23:33  dash: twisted is bad.
23:33  dash: at least, the pre-code-review era code is bad.
23:33  _habnabit: dash, super would've fixed the badness with less extra bad.
23:33  atxq: if code breaks, than it was not well thought; but implying it has to do with not using super is a stretch;
23:34  atxq: it is just preference in the end
23:34  _habnabit: atxq, yeah, uh, no.
23:34  dash: _habnabit: well it was a mistake for inheritance to be a primary method of interaction
23:34  dash: atxq: no
23:34  Arsanerit: atxq: Is code that breaks when upgrading the language or its libraries poor-written code?
23:34  Arsanerit: *poorly
23:34  dash: Arsanerit: what does "upgrading the language" mean
23:34  Arsanerit: dash: Upgrading the minor version
23:34  Arsanerit: e.g. from 2.6 to 2.7 or 3.1 to 3.2
23:34  _habnabit: atxq, I'm talking about when somebody uses MI with your code.
23:35  atxq: there is more than one way to do stuff; no need to make it a standard. let people decided how they want to code
23:35  Arsanerit: that shouldn't break any code imho
23:35  dash: atxq: anything that is "just preference" should be completely removed
23:35  _habnabit: atxq, if you don't use super, code *will* break.
23:35  _habnabit: atxq, and it would've Just Worked if you'd used super.
23:35  dash: since it is not essential to a good program
23:35  dash: _habnabit: and again, the answer is "no diamond inheritance". :)
23:35  Arsanerit: I am considering the transition from Matlab to Python, because I like the latter language much better, but I am a bit hesitant to depend on 3rd party libraries for NetCDF, HDF, neural networks, plotting. How stable are those libraries? Will code that I write today still run the same way in 5 years time?
23:35  _habnabit: dash, yeah yeah
23:36  dash: Arsanerit: Of course. Why wouldn't it?
23:36  dash: Arsanerit: Assuming you've got ECC memory, at least
23:36  _habnabit: dash, but on the technical side of things, it's an easily avoidable issue.
23:36  resixian: Arsanerit: in my experience yes. and i *love* ipython -pylab
23:36  dash: _habnabit: yes exactly
23:36  atxq: not saying nothing bad about super; just saying that people have a choice how they want to code;
23:37  dash: atxq: unfortunately
23:37  resixian: well sth like that should be standard
23:37  dash: choices should be removed wherever possible
23:37  dash: python allows far too many.
23:37  atxq: hahahhahha
23:37  _habnabit: atxq, and I'm saying that the 'choice' you're talking about is "code works" vs. "code doesn't work"
23:37  dash: well, more than it really has to, i should say
23:37  Arsanerit: dash: It might not because maintainers of 3rd party libraries might decide to change the API, since the code is "in beta". My supervisor had this problem with Matplotlib some 6 years ago. He wrote some code, and one or two years later the code didn't run anymore because the API had changed.
23:37  davidcramer: blargh the decorator module is transforming kwargs into args
23:37  davidcramer: :(
23:37  Eevee: atxq: people are bad at making choices
23:37  _habnabit: atxq, which shouldn't be a choice at all.
23:37  Eevee: dash: the trick with that is, ^
23:38  dash: Arsanerit: Eh?
23:38  WBC: Hello, is making recrusive functions "bad" to do? Like calling the function inside of itself, to "go back to the top"??
23:38  dash: Arsanerit: if you don't want new versions of things, don't install new versions of things
23:38  _habnabit: WBC, recursion is not a way to 'restart' a function, no.
23:38  _habnabit: WBC, use a loop.
23:38  dash: WBC: there's often better ways to do stuff.
23:38  Yhg1s: Arsanerit: APIs can always change, even for software that's not in beta. Decent software doesn't make such changes in patch releases, and if youw orry about breaking things the only thing you can do is not upgrade.
23:38  WBC: is recrusing "a bad thing to do"?
23:38  dash: WBC: No, but it's not a good thing to do either
23:38  WBC: so while loops would be much better?
23:38  _habnabit: WBC, not inherently, but it's silly in the case you're talkingabout.
23:39  dash: WBC: it's the right choice in some situations, wrong in others.
23:39  WBC: okay. I just got a huge traceback after recrusing a few times then sys.exit'ing
23:39  WBC: which was scary
23:39  Arsanerit: Yhg1s: It's possible to change an API without breaking backward compatibility. And it's not always easy to just "not upgrade" for five years.
23:40  dash: Arsanerit: sure
23:40  Arsanerit: dash: One might want the new features or the security fix without having to rewrite a lot of code...
23:40  Eevee: WBC: recursion is okay for recursive algorithms.  is that what you have
23:40  dash: Arsanerit: it's not an easy balancing act
23:40  Arsanerit: dash: I'm not sure what you mean by 'ECC memory'.
23:40  dash: Arsanerit: RAM that's less affected by cosmic rays
23:41  dash: Arsanerit: so that your system is more stable
23:41  WBC: Eevee: can you give me an example?
23:41  Eevee: WBC: can you just tell us what you're actually trying to do?
23:42  WBC: a game of chess
23:42  Arsanerit: dash: I'm talking about the software, not about the hardware. It's easier to replace RAM than to go through a large codebase adapting it every time one of the libraries decides to break backward compatibility.
23:42  WBC: against the computer
23:42  WBC: or actually computer-vs-computer
23:43  Eevee: ...what are you doing that needs recursion, specifically
23:43  dash: Arsanerit: i wouldn't expect matlab to be any better than python &co in this regard
23:43  Arsanerit: dash: To be honest, it's matlab that has failed me in this just now
23:43  WBC: I am calling computervscomputer() over and over until someone wins
23:43  Arsanerit: dash: So there I agree with you
23:44  Arsanerit: It's not Python that I'm worried about. I'm sure enough that if I write code for Python 2.7 now, I will be able to run it for a looong time in the future
23:44  _habnabit: WBC, yes, use a loop.
23:44  _habnabit: WBC, recursion there is very silly.
23:44  WBC: okay then
23:44  dash: Arsanerit: python 2.7 is going to be around for at least 5 years
23:44  Arsanerit: dash: Yes. It's not Python I'm worried about.
23:45  WBC: bloody arch though
23:45  dash: then i'm not sure what you're worried about
23:45  WBC: ``python'' now is py3
23:45  _habnabit: WBC, arch is bad
23:45  WBC: I realized this after http://www.archlinux.org/news/python-is-now-python-3/
23:45  WBC: >_>
23:45  Arsanerit: It's not numpy or matplotlib either. But why are there six different NetCDF bindings, and there appear to be several packages for artificial neural networks too; there I am less sure that they're "stable".
23:45  Raydiation: WBC: hehe, the next victim
23:45  blub: aarrrg I hate thos RHEL based Linux distributions.... installing python26 parallel to the old 2.4 version was easy... but now al the required packages like numpy scipy etc... arrg
23:45  dash: Arsanerit: sure
23:46  WBC: _habnabit: so what to use?
23:46  dash: Arsanerit: so maintain your own copy and pull in upgrades when you feel like it's worth it
23:46  blub: are there any repos with python modules for 2.6 parellel to 2.4?
23:46  _habnabit: WBC, OS X
23:46  dash: Arsanerit: no need for an all-or-nothing approach
23:46  WBC: lolol
23:46  dash: blub: what?
23:46  WBC: 10/10 bud
23:46  dash: WBC: ubuntu's nice.
23:46  Eevee: WBC: so run stuff with python2 now
23:46  WBC: I would rather compile gentoo without the manual than use osx
23:47  blub: dash: I need python 2.6 on Scienttific linux but per default only 2.4 is installed
23:47  dash: Eevee: sure, arbitrarily inconvenience yourself, no reason not to
23:47  dash: blub: ok
23:47  blub: dash: via the IUS repo I installed python 2.6
23:47  blub: but now I am missing numpy für 2.6 scipy and others
23:47  _habnabit: WBC, I'm sorry you don't want to use a stable, developer-friendly OS.
23:47  Arsanerit: dash: Yeah; well; just means I should be careful upgrading things.
23:47  dash: blub: you may need to install them manually if you can't find packages for it
23:47  dash: Arsanerit: of course.
23:48  Eevee: dash: one byte in an entry point vs switching operating systems...
23:48  Raydiation: WBC: xD dont feed the troll
23:48  blub: args this sux
23:48  _habnabit: Raydiation, hee hee, you think I'm not being serious.
23:48  WBC: _habnabit: feel free to give me money for a mac and id get one in a heartbeat haha
23:48  dash: _habnabit: heh i wish
23:48  dash: WBC: no buy a mac
23:48  dash: also an ipad
23:48  WBC: no money
23:48  dash: apple's stock price is down today
23:49  dash: it needs your help.
23:49  Arsanerit: dash: But, to come back to your earlier point; there is a reason I might expect a commercial package to do better than OSS in this respect, and that is because commercial vendors have something to lose. They have customers and money to lose, but what does a small 3rd party library or a mid-sized project lose if they lose users?
--- Log closed Tue Oct 19 23:55:12 2010
