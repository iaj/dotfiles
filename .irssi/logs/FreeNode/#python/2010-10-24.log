--- Log opened Sun Oct 24 00:00:02 2010
--- Day changed Sun Oct 24 2010
00:00  habnabit: infinity25: There's links to these things somewhere.
00:02  habnabit: infinity25: Just crawl all the links.
00:03  infinity25: I looked.. only found info about text encryption, not much on integer encryption
00:04  infinity25: so thats why im on here asking
00:04  habnabit: Well. Now you know the answer to your actual issue.
00:04  habnabit: Not just your perceived issue.
00:09  infinity25: I'm well aware of the real issue. but you can't just redesign a system with multiple legacy clients
00:09  infinity25: I'm one of these clients
00:10  infinity25: so I can just protect myself from script kiddies
00:10  hopthrisC: infinity25: ignore habnabit. he's just that smug because he doesn't actually know what he's talking about
00:10  habnabit: :V
00:10  merijn: infinity25: Looking back at the past few screens of text I can tell you "stay away from implementing encryption code because you do not know enough to not screw it up"
00:11  infinity25: merijn: yeah certainly. i was only considering using a standard and tried and true encryption method
00:11  habnabit: hopthrisC: You never said why you think this isn't security through obscurity.
00:12  hopthrisC: habnabit: because it does not depend on secrecy about the _method_
00:13  infinity25: habnabit: without the secret key/salt, it would take an attacker many years to brute force all IDs
00:13  infinity25: thus not obfuscation
00:13  habnabit: infinity25: Yes, and if all of these pages are linked to publicly anyway, ...
00:13  merijn: infinity25: The better and more obvious solution is the following: associate session IDs with IPs
00:14  merijn: That way anyone trying to change their session ID will get stuck since the ID was not authenticated from their IP
00:14  infinity25: I was trying to simplify the sitation when describing this earlier.. actually these ids are not all public. but each user has access to a fair amount of them
00:15  merijn: infinity25: If you require a username and password to create a session and associate that session with an IP, problem fixed.
00:15  habnabit: So... You want access control.
00:15  merijn: Well, not really
00:15  infinity25: yes this is not the problem
00:15  merijn: But saner then the things you suggested before
00:16  habnabit: Trying to obscure valid links won't work. This is what authentication is for.
00:16  infinity25: our use case is similar to netflix's
00:16  infinity25: netflix offers you their whole catalog for streaming
00:16  infinity25: but that doesn't mean they want you to be able to easily rip all their catalog to your own hard drives
00:17  merijn: infinity25: The second you send me data, it is mine
00:17  Eevee: I would think netflix uses access control and bandwidth/request monitoring and so forth
00:17  merijn: Netflix is as easily rippable as for example Spotify
00:17  Eevee: and probably some sort of DRM garbage but, yes, if I can play it then I can save it
00:17  infinity25: absolutely
00:18  infinity25: but its not trivial to write a script that just scrapes their catalog and downloads it to your 100 TB server
00:18  merijn: infinity25: If I understood right your problem is people accessing links they shouldn't be able too?
00:18  merijn: infinity25: Sure it is, just that no one can be arsed and it would take a long time to do it
00:18  merijn: There's much easier ways of downloading those films
00:18  Eevee: infinity25: you have to define your problem (at least to yourself) before you can solve it
00:19  Eevee: "I don't want anyone downloading everything" isn't really a concrete problem to solve
00:19  hopthrisC: does anybody here actually listen?
00:19  Eevee: I came in late; maybe I missed something
00:19  merijn: Same
00:20  merijn: hopthrisC: It is channel policy to not help people implement stupid solutions, and so far I'm still convinced his current idea/solution is stupid
00:20  infinity25: merijn: what Im tyring to do is to make it "hard" to write a script that just downloads all our files
00:20  infinity25: there's no real security possible
00:20  infinity25: anyone with enough time in their hands can figure out a hack
00:21  Eevee: why do you care if someone downloads all your files
00:21  infinity25: but it's my responsability to at least make this hard
00:21  merijn: infinity25: Run the id's + salt through a SHA256 hash, problem solved
00:21  merijn: Anything harder is not worth the time investment
00:21  infinity25: I don't care, the legal department cares
00:21  infinity25: merijn: yes thats the idea, but on the fly
00:21  Eevee: ok why does anyone care
00:21  merijn: infinity25: What's hard about doing this on the fly?
00:22  infinity25: my question was very simple. Any pointers on int to int symmetric encryption methods
00:22  merijn: infinity25: Why does it have to be symmetric? You can't simply throw a table column in the table or something similar?
00:23  infinity25: no access to the database.. I'm using a service which I have no control over
00:23  infinity25: and I'm just protecting my layer
00:23  Eevee: so use your own database?
00:23  infinity25: I don't use a database either.. I just act as amiddle man
00:24  merijn: infinity25: Just pick an arbitrary crappy symmetric cypher and be done with it then
00:24  infinity25: so when user requests content ID 197266132
00:24  Eevee: hell just make something up
00:24  merijn: Especially since you don't really care anyway whether someone finds out
00:24  infinity25: the server decodes this into ID 123
00:24  Eevee: swap arbitrary pairs of bits, xor it with some constant
00:24  infinity25: thats all
00:25  infinity25: Eevee: yeah thats exactly the idea. just wondering if someone knows a good algorithm for this
00:26  exarkun: infinity25: Don't give the encrypted ID to the client.
00:26  exarkun: infinity25: Give an opaque token and look up the corresponding ID in a database.
00:26  exarkun: Or dispense with the IDs and just use the opaque tokens as keys directly.
00:27  hopthrisC: infinity25: you should pad the id with a random number before encrypting it, or there won't be enough entropy to be any good
00:27  infinity25: exarkun: this is more secure indeed. but I would rather not have to keep a map
00:27  infinity25: hopthrisC: yeah just like AES does
00:27  exarkun: infinity25: Do you want security or not?
00:28  infinity25: exarkun: I just want to deter the casual script kiddie
00:28  exarkun: ah, not.
00:28  TheoMurpse: I've written a little multithreaded program, where each thread does a urlopen. Sometimes I'll get a urlopen error: Too many open files. How can I verify the max number of open files I can have? Then I should just be able to set the threadpool size smaller than this, and this shouldn't happen again, right?
00:28  ikanobori: Meh. I need something to do!
00:29  infinity25: alright guys thanks
00:29  exarkun: ikanobori: Appreciate a poem.
00:29  ikanobori: Poems are too cultural for me :-(
00:29  pantsman: answer TheoMurpse with a haiku
00:29  exarkun: ikanobori: Get more culture
00:29  TheoMurpse: ikanobori: Your name, as in squid climbing/swimming upstream? ;)
00:30  ikanobori: Ah. I will answer TheoMurpse in haiku form.
00:30  ikanobori: TheoMurpse: As in kite.
00:31  TheoMurpse: ikanobori: That's odd. "Kite" is "tako" in Japanese, which is a homophone for "octopus" (not squid!)
00:31  ikanobori: TheoMurpse: I know, ikanobori is the old word, apparently.
00:31  TheoMurpse: Interesting.
00:31 * Eevee consult denshi jisho
00:31  TheoMurpse: Makes sense based on what they look like.
00:31  TheoMurpse: (i'm seeing a fat body with streamers hanging down like legs in my head)
00:31  ikanobori: Yes, especially the older kites :-)
00:32  hopthrisC: somebody _please_ explain to me why http://user:password@example.com/file is more secure than http://example.com/user/password/file
00:32  ikanobori: hopthrisC: Isn't that a HTTP question?
00:32 --- rodasc is now known as crodas
00:32  Eevee: hopthrisC: in...  what context
00:32  TheoMurpse: you learn something new every day. You know, "jibiki" is an old word for dictionary. While we're talking about old words... 字引 if my Japanese makes it through via these muddied IRC tubes...
00:32  exarkun: hopthrisC: A browser has the opportunity to *not* transmit the password cleartext in the former case.
00:32  hopthrisC: in the context of habnabit spouting that nonsense about security through obscurity
00:33  ikanobori: hopthrisC: Anyway, I believe the authority part of an URI can be encrypted.
00:33  Eevee: hey that's the ji from kanji
00:33  Eevee: I think
00:33  exarkun: hopthrisC: Look up "digest authentication".
00:33  ivazquez|laptop: Don't they use "jiten" these days?
00:33  TheoMurpse: That's one of the words you can use, yes.
00:33  hopthrisC: *sigh*
00:33  ivazquez|laptop: Eevee: It is.
00:33  ikanobori: I don't speak japanese, stop all the japanese talk!
00:33  ivazquez|laptop: tomaranai
00:33  Eevee: don't use a japanese name around nerds then!
00:33 * TheoMurpse names himself something in Japanese, is SHOCKED!! when people talk to him in the language ;)
00:33  ikanobori: Teehee.
00:34  TheoMurpse: So about this urlopen too many open files error...
00:34  ikanobori: It's just my last name in japanese and I thought it'd be funny to have a .jp domain :-)
00:34  TheoMurpse: I just limited myself to 10 threads, and I still get the error after some indeterminate amount of code execution.
00:34  exarkun: TheoMurpse: Sounds like you're failing to close some files, then.
00:34  ikanobori: exarkun: urllib is failing to close some files.
00:34  exarkun: ikanobori: urllib is a library
00:34  ikanobori: See: http://bugs.python.org/issue1208304
00:34  exarkun: ikanobori: it can't do anything
00:34  TheoMurpse: exarkun: I have not opened anything except urllib
00:35  exarkun: ikanobori: TheoMurpse is the actor.
00:35  exarkun: TheoMurpse: Clearly you should be using Twisted, though.
00:35  ikanobori: exarkun: Well, if TheoMurpse is using urllib well then urllib should take care of that for him.
00:35  exarkun: ikanobori: What an unobjectionable moral stance.
00:35  TheoMurpse: oh balls, I hate having to learn new frameworks just to do something that shouldn't take me more than five minutes to code in the first place
00:35  Eevee: ikanobori: urllib2 is a bad bad boy, apparently
00:35  exarkun: TheoMurpse: Maybe in five more years urllib2 won't leak file descriptors.
00:35  exarkun: TheoMurpse: So, just wait.
00:36  ikanobori: It is. Read the source :-)
00:36  TheoMurpse: ikanobori: Yes, I saw that bug in Python. But the bug was reported five years ago!
00:36  ikanobori: exarkun: It actually seems to have a cyclic reference somewhere which makes it not close files.
00:36  ikanobori: TheoMurpse: Yes, and the last comment was added last month :-(
00:36  exarkun: ikanobori: That's not very interesting.
00:36  TheoMurpse: Great. So I guess I'm off to code it in Java or something? :/
00:36  ikanobori: Well, we could dig deeper.
00:36  ikanobori: Why are you using threads?
00:36  exarkun: TheoMurpse: What is the purpose of the application?
00:37  TheoMurpse: my own edification
00:37  exarkun: That's a totally useless answer.
00:37  Eevee: TheoMurpse: there's a comment on this ticket that reading from the handle at least once prevents the fd leak
00:37  Eevee: and some socket hackery fixes it as well
00:37  TheoMurpse: exarkun: Haha. I'm pulling data from a forum and doing text analysis to test my code that (hopefully) can spot sock puppets
00:38  ikanobori: TheoMurpse: I assume you are using threads to do multiple requests alongside eachother, if this is the case I strongly suggest taking a look at Twisted which makes that easy :-)
00:38  ikanobori: And maybe mechanize.
00:38  TheoMurpse: ikanobori: Yes, I've got a tab for Twisted open right now. Looking at it.
00:38  htoothrot: TheoMurpse, i think most here are pretty down on it, but eventlet can monkeypatch urllib to work asynchronously
00:38  ikanobori: But mechanize wraps urllib so you might get the same.
00:39  htoothrot: with the warning that i've never used or tried it
00:39  TheoMurpse: Eevee: What does "reading from the handle" mean? That I could just do blah=urllib2.urlopen(URL) // blah.read()? That would solve my problem?
00:39  exarkun: htoothrot: It's a total hack that no one should ever use.
00:39  Eevee: TheoMurpse: http://bugs.python.org/msg76298  http://bugs.python.org/msg60751
00:39  exarkun: htoothrot: Even the author recently pointed out that it doesn't work all that well.
00:41  htoothrot: i see...
00:42  htoothrot: maybe scrapy deserves a look
00:42  htoothrot: i don't guess it's needed though
00:43  TheoMurpse: Eevee: Thank you for that. I'm testing my code with that fix. So far so good. It's already run longer than ever before. *knocks on wood*
00:43  TheoMurpse: Thanks for all the help, everyone. I'll be looking at Twisted, too, ikanobori.
00:43  ikanobori: That'll make exarkun happy ;-)
00:44  exarkun: Don't worry, nothing ever makes me happy.
00:46 * TheoMurpse makes some comment about destroying Jedi Praxia
00:47  exarkun: TheoMurpse: You know what you said earlier about people talking to you in japanese
00:47  exarkun: ditto
00:47  TheoMurpse: haha
00:50  Kronuz: hello
00:50  Kronuz: hey, how come Decimal doesn't accept floats to do operations?
00:50  Kronuz: I just don't get it!
00:51  Kronuz: Decimal(1) + float(2) fails …Decimal(float(2.5)) fails as well
00:51  Kronuz: but why isn't it supported?
00:51  exarkun: Because it was deemed confusing
00:52  exarkun: Try Decimal("2.5")
00:52  Eevee: I assume because Decimal can't reliably make a decimal out of 2.5
00:53  exarkun: 2.5 can be represented exactly in ieee754 :)  but many other values can't be, right.
00:53  Eevee: oh, yes, duh.  8)
00:54  exarkun: if Decimal(0.1) were allowed, you'd end up with Decimal("0.10000000000000001"), for example
00:54  Eevee: Rational(0.1)  # 10000000000000000001/100000000000000000000?
00:57  bobperson0: What's the best way to extract the arguments from sys.argv as a string, and concatenate it?
00:58  Gentle: " ".join(sys.argv)
00:58  exarkun: bobperson0: Uh
--- Log closed Sun Oct 24 01:04:35 2010
--- Log opened Sun Oct 24 01:04:59 2010
01:04 --- Users 719 nicks [0 ops, 0 halfops, 0 voices, 719 normal]
01:05  mwizard: getframe method is ugly
01:05  wolfelwlu: mwizard: OK, I've used that method before.
01:05  bobperson0: mwizard: works the way you described for me in 2.7
01:05  mwizard: (i mean var = [None], var[0] = 123)
01:05  mwizard: bobperson0: that's strange
01:05  wolfelwlu: mwizard: The global method appeared to be working on 2.6.1 so I attempted that. Thank you.
01:05  mwizard: i have 2.7 too and I'm quite surprised (i've thought about error in my offset counter)
01:06 --- Channel #python was synced in 98 seconds
01:06  mwizard: wolfelwlu: global keyword can address only f_globals dict, which is module-level. if you have "def a" inside "def b", and "def a" has var "lol", you cannot set it with "global lol", unfortunately
01:06  cousteau: is this line excessively obfuscated?   print ''.join([mydict[c] if c in mydict else c for c in string[::-1]])
01:06  mwizard: at least in 2.*. I've even seen PEP to solve this
01:06  wolfelwlu: mwizard: Must be a bug that it works in 2.6.1 and earlier.
01:07  Eevee: cousteau: mydict.get(c, c)
01:07  cousteau: Eevee: ok, it's better
01:07  mwizard: wolfelwlu: eh, going to fill issue
01:07  cousteau: but less cool
01:07  mwizard: *an issue
01:09  exarkun: mwizard: You cannot reliably modify locals by mutating f_locals.
01:09  exarkun: mwizard: Also, gross.
01:09  wolfelwlu: mwizard: I'm just going to use the single item list method. I've used that before.
01:10  mwizard: exarkun: i've noted that it's ugly. moreover, it's cpython specific
01:11  mwizard: much interestier is to write bytecode hack to introduce pseudokeyword like "outer" to use as "outer(variable, depth = 2)" and modify variable in normal way
01:11  exarkun: mwizard: http://pastebin.com/K8GerRLN
01:11  infobob: http://paste.enzotools.org/show/1278/ (repasted for exarkun)
01:11  exarkun: mwizard: Not even CPython specific.  Just doesn't work.
01:12  exarkun: mwizard: You probably accidentally observed a case where f_locals was identical to f_globals.
01:12  mwizard: g() is not closure of f()
01:12  mwizard: your argument is invalid
01:12  mwizard: place "def g" inside "def f" and you will see what I've meant
01:13  exarkun: mwizard: No, the difference is irrelevant.
01:14 --- CHOCOBY is now known as chocoby
01:15  exarkun: http://pastebin.com/F12VZTFK
01:15  infobob: http://paste.enzotools.org/show/1279/ (repasted for exarkun)
01:19  exarkun: f_locals simply is not a mutable structure.
01:19  exarkun: It's a totally insane structure that you should avoid basically always.
01:19  mwizard: you seem to be right just now. I'll try to reproduce my example
01:20  exarkun: infobob: slow
01:22  mwizard: exarkun: unfortunately, you are are right now, I cannot reproduce the case where I've able to hack into outer scope using frames. Do you know cases where approach similar to mine will work?
01:22  mwizard: I can guarantee, that I've did something like this, but I can't do it now, neither in 2.7 nor in 2.5
01:22  exarkun: mwizard: Make the outer frame a global scope
01:22  exarkun: I don't know how you could have done it with a closure, where the outer frame can't be a global scope (by definition)
01:22  exarkun: As far as I know that has never worked on CPython
01:23  mwizard: i've worked only with CPython and Stackless for all time, so it definitely can't be "false memory"
01:23  exarkun: Mmm, that reasoning is flawed :)
01:23  exarkun: "I believe it to be true really hard, therefore it is true"
01:24  mwizard: nope, I don't just "believe" that it's possible, I remember I've somehow modified outer scope being in the closure (so parent frame is function too)
01:24  mwizard: ok, I'll try more now
01:30  davetoo: hmm
01:31  davetoo: exarkun: you're a Twisted hacker, no?
01:32  davetoo: One of these months I want to write a Zenoss daemon
01:37  davetoo: I'm having trouble finding my way through the setuptools/distrubute docs; I'm working on a toolkit that has a couple of packages (and using Eclipse/PyDev).  Where's a good place to put my unittest test suites?  I suppose I should probably distribute them with the package, but PyDev sometimes gets grumpy about multiple imports of the same library.
01:38  davetoo: (also scratching my head over relative imports, and how IPython interacts with unittest and pdb :(    )
01:39  dash: davetoo: your tests should go in a sibpackage named 'test' inside the package it tests
01:39  dash: er subpackage
01:39  dash: also you shouldn't use relative imports
01:39  exarkun: davetoo: Yes I work on Twisted
01:39  tos9: Yhg1s, _habnabit: Not to belabor a dumb point from yesterday, I was just curious though how easy it was to do it myself, so in case you're curious here's the "right" way to iterate over the rationals: ((y, x - y) for x in itertools.count() for y in range(1, x))
01:39  exarkun: davetoo: working on Zenoss will not be a representative Twisted experience though
01:40  dash: tos9: haha.
01:40  exarkun: davetoo: Just keep that in mind when you find it appalling.
01:40  tos9: dash: :P
01:41  scyth: I have two clasess in one file. I want to create new object inside one class, object of type "otherclass". Is that possible?
01:41  dash: scyth: sure
01:42  scyth: dash, any specifics? My class doesn't seem to have otherclass in its namespace
01:43  mwizard: do you want to create "factory"? e.g. class that being instantiated returns instance of other class?
01:43  dash: scyth: are you writing code for django?
01:43  scyth: dash, no
01:43  dash: ok great
01:43  scyth: mwizard, nope
01:43  dash: that means you have a chance to do it right
01:43  Cam: How do I play a .mp3 with python, what library?
01:43  scyth: :)
01:44  dash: scyth: can you pastebin what you're trying and how it fails?
01:44  scyth: sure
01:45  Cam: Does anyone know any?
01:45  mwizard: Cam, http://pypi.python.org/pypi/mp3play/0.1.15
01:45  Cam: Thanks.
01:46 --- tos9_ is now known as tos9
01:46  scyth: dash, something like this: http://pastebin.com/5RdUX6rb
01:46  infobob: http://paste.enzotools.org/show/1280/ (repasted for scyth)
01:47  lewis1711: ah, #python. the land of no laughter.
01:47  Cam: scyth; what failes?
01:47  Cam: *fails
01:47  dash: scyth: that should work just fine
01:47  mwizard: should work
01:47  Cam: It does work.
01:48  Cam: <__main__.otherclass object at 0x100454fd0>
01:49  scyth: hm, my otherclass is actually of type (threading.Thread). Does that matter?
01:49  Cam: scyth; Yes.
01:49  Bmsod: anyone has a good rec. about how to work with activex in python?
01:49  dash: scyth: probably a ton! what are you doing with threads?
01:49  dash: Bmsod: pywin32 has COM integration stuff, with examples
01:49  scyth: dash, yea yea, I know I should use twisted ;)
01:50  Cam: scyth; IRC Bot?
01:51  scyth: no, it's a modular daemon with input and output modules, input ones take stuff from wherever, puts data in shared place, output modules parse stuff and outputs somewhere else
01:52  Bmsod: dash: i've played with it a bit...not that good
01:55  scyth: so, what do you think? Should I just have threads as subclasses or I should split thread classes in other files and import?
01:59  mwizard: scyth: i don't see an issue to instantiate threading.Thread wherenever you want. can you pastebin actual failing example with threads?
02:00  Cam: mwizard; doesn't work with OSX>
02:01  mwizard: Cam, look for package note: "if you are looking for complex cross-platform audio control, try pyglet."
02:01  Cam: Ok.
02:05  scyth: mwizard, http://pastebin.com/WJSUHbCZ
02:05  infobob: http://paste.enzotools.org/show/1281/ (repasted for scyth)
02:06  scyth: UnboundLocalError: local variable 'manager' referenced before assignment
02:06  scyth: that's what I get
02:07  mwizard: you have class named "manager" and trying to assign it's instance to variable "manager'
02:07  mwizard: same names == python thinks it's local variable (it's assigned in local scope)
02:08  mwizard: so it cannot get value of "manager" to instantiate
02:08  mwizard: solution: rename manager class to Manager
02:08  scyth: aaah
02:08  mwizard: :)
02:08  scyth: damn
02:09  scyth: thanks :)
02:09  Cory: Hey there! I'm completely new to programming and would like to learn some Python 3. I understand that http://docs.python.org/tutorial/ won't help me. Any pointers where to start?
02:09  magcius: Cory, don't learn Python 3 for now
02:09  davetoo: learn Perl 6 instead :)
02:09  Cory: Lol
02:09  scyth: haha
02:10  davetoo: They should rename it to Perl 95
02:10  magcius: Cory, just because there isn't really a good guide for it yet. The language isn't too different to be helpful.
02:10  mwizard: screw perl, learn assembler.
02:10  magcius: Cory, I would recommend Think Python: http://tinyurl.com/thinkcspy
02:10  davetoo: I'm just making a very obscure reference to the 2.x/3.x conundrum
02:10  Cory: Well, I've downloaded Dive into Python 3 but I've heard that isn't the most-recommended book around here.
02:11  Cory: Why should I learn Python 2 over 3?
02:11  dash: scyth: first, class names are LikeThis
02:11  davetoo: Because all the libraries wrok
02:11  davetoo: work
02:11  davetoo: All the Batteries are Included,
02:11  davetoo: and they still work :)
02:11  scyth: dash, yeah.. I actually do that always
02:12  Cory: I don't plan on doing anything big or important with it yet.
02:12  magcius: Cory, Python 3 is too new and not different enough.
02:12  davetoo: actually, I haven't even looked at 3 yet.  Too busy making things with 2.6+
02:12  dash: Cory: look at the '2 or 3' link in the topic
02:12  scyth: dash, I was just trying out different structuring .. and some quick testing..
02:12  Cory: And I figure when/if I do decide to do something important, I should know 3 because it will be better?
02:12  magcius: dash, except the Python people at the wiki polluted it with their pro-v3 bias
02:12  dash: Cory: it'll be better in 5 years or so
02:13  dash: maybe 2
02:13  magcius: dash, oh, you changed it back to the outdated version at python-commandments :)
02:13  dash: "outdated"?
02:13  magcius: dash, "There’s at least one more 2.x release planned (2.7)"
02:14  magcius: dash, additionally, some of the libraries listed in there now actually have prototypes working in 3.x
02:14  Cory: I've heard that 2.x will not get any new features, only bugfixes.
02:15  dash: Cory: Features aren't all that important.
02:15  dash: Python hasn't gained any really important features since 2.3.
02:16  magcius: Programming languages don't really need new features.
02:16  lewis1711: Cory: I use 2 because there are very few libraries that support 3
02:16  lewis1711: at least for what I want to do
02:16  dash: magcius: Except the ones I want, of course.
02:17  magcius: The Python3000 plan was supposed to clean up the language and try to make it a bit more friendly.
02:17  Cory: Will there be more in the future?
02:17  lewis1711: does 3 cast to floats when you do something like "3/4"?
02:17  dash: yes
02:17  magcius: lewis1711, yes.
02:17  lewis1711: well, that's one good thing
02:17  magcius: But unfortunately, people cried from the rooftops that their precious broken code couldn't be broken any longer
02:17  magcius: (see: asyncore)
02:17  cousteau: in python 3.x, yes
02:18  lewis1711: Cory: converting code from 2 to 3 should be trivial anyway. can you program already or are you just learning?
02:18  magcius: lewis1711, should be, not is
02:18  t`2: hi, is it a bug in python, or am i getting this wrong.. __repr__ seems to fail if i return a unicode string
02:18  lewis1711: magcius: that bad huh? the transition from D1 to D2 for me was easy, so I just assumed:P
02:19  magcius: lewis1711, D1? D2?
02:19  t`2: i have something like def __repr__(self): return "%s %d" % (self.unicodeStr, self.id),  and when i print that object, i get a unicode error
02:19  t`2: UnicodeEncodeError: 'ascii' codec can't encode character u'\u2019' in position 73: ordinal not in range(128)
02:19  lewis1711: magcius: the language D
02:19  magcius: lewis1711, different languages have different semantics about what a major version change should entail
02:19  Cory: lewis1711: I can't program anything.
02:19  t`2: anyone know how i can fix this? i would like to be able to print the object which has some data in unicode
02:19  magcius: t`2, print doesn't use __repr__
02:20  dassouki: is it weird that i'm enjoying learning c#?
02:20  magcius: t`2, it uses __str__ or __unicode))
02:20  magcius: er
02:20  magcius: __unicode__
02:20  lewis1711: Cory: I reckon go with 2 then. The info you will find online will all be for 2. Python is a new language so don't worry about it being "outdated"
02:20  x0rs: Is this a decent way to grab sections out of a config file without using the ConfigParser module? http://paste.pocoo.org/show/279392/
02:20  magcius: t`2, so implement __unicode__
02:20  t`2: magcius, i want my object to be printed in a specific way
02:20  t`2: magcius: oh i didn't realize thats doable.. thanks, i'll try now
02:20  magcius: t`2, ok
02:21  t`2: magcius: and no need to touch __repr__ right? editing __unicode__ gives me the same effect with print?
02:21  magcius: t`2, print doesn't use __repr__ at all
02:21  magcius: x0rs, probably not the best way
02:22  magcius: x0rs, if the section doesn't exist, it will fail with an error
02:22  magcius: x0rs, among other things I can think of
02:22  magcius: x0rs, it also reads the file every time
02:23  t`2: magcius: print isn't showing what i put in __unicode__.. what do i do after i implement __unicode__(self) ?
02:23  x0rs: magcius: any suggestions on how not to read the file each time?
02:23  magcius: x0rs, I'm working on it
02:23  x0rs: magcius: also, I will add try blocks to take care of errors
02:23  t`2: magcius: print is def using __repr__ here.. i see output from __repr__ if i implement it
02:23  x0rs: magcius: nice thanks
02:23  magcius: x0rs, I'll help you in a minute
02:23  x0rs: magcius: np, i appreciate it
02:23  magcius: t`2, because __str__ defaults to __repr__
02:23  tos9_: t`2: print won't show what you have in __unicode__. print will print str(obj)
02:24  tos9_: t`2: unicode(obj) gets you what's in __unicode__
02:24  magcius: tos9_, I thought it depended on your tty config
02:25  tos9_: magcius: it does iirc
02:25  t`2: tos9_: ah ic
02:25  t`2: tos9_: the issue is, i have some web data and it has a \u2019 in it.. so i can't str(obj) as it errors on this
02:26  t`2: tos9_: anyway i can clean this character or print it?
02:26  tos9_: t`2: sure. print unicode(obj)
02:28  t`2: tos9_: can i do the same with log.info("some obj: %s", unicode(obj))
02:28  dash: tos9_: no, never.
02:28  amoffat: anyone know of a better way to iterate over an iterable N "chunks" at a time?  http://stackoverflow.com/questions/1162592/iterate-over-a-string-2-or-n-characters-at-a-time-in-python/1162636#1162636
02:29  amoffat: the problem with that solution is that if the iterable s isn't a multiple of N, it leaves off any partial chunks
02:29  tos9_: dash: was that "never" to whether it depends on the tty, or never to what I told him heh?
02:29  dash: first: calling unicode() on a unicode object never makes sense
02:29  dash: second, printing a unicode object never makes sense
02:30  dash: instead, do yourunicodestring.encode('utf8')
02:30  dash: or whatever codec
02:30  dash: that gives you a utf8 byte string
02:30  extor: Is it true that python has different versions and that code is not portable between them and just breaks?
02:30  Juhaz: amoffat, the third answer there should print partial chunks.
02:30  dash: extor: yes, python 2.x and python 3.x are different languages
02:30  MrElendig: extor: to some minor extent
02:31  dash: extor: there's 2to3 for assisting in porting 2.x programs to 3.x though.
02:31  extor: dash, wow...is 4.x planned to be diff too?
02:31  amoffat: Juhaz, slicen?  i'll try it
02:31  tos9_: dash: And then if you want human-readable? Print that?
02:31  dash: extor: 4.x probably won't happen.
02:31  dash: tos9_: yes.
02:31  extor: Oh mang I'm a beginning programmer...just not sure what to make of this
02:31  extor: dash, python has been axed?
02:31  dash: extor: just start with 2.7
02:31  tos9_: dash: K, thanks.
02:31  extor: why 2.7? why not 3.x???
02:32  dash: extor: 2.x has more tools, docs, and libraries available for it right now
02:32  amoffat: Juhaz, works!  i should've tried all of them before asking...thanks
02:32  dash: 3.x may be the main version in a few years
02:32  dash: but it'll be easy to convert then.
02:32  Juhaz: extor, incompatible 4.0 might happen eventually, who knows, but it's been twenty years before 3.x so it's extremely unlikely to happen anytime soon
02:32  tos9_: dash: And can you return that with __repr__ / __str__ or do they expect ascii byte strings?
02:32  extor: dash, should I just cut my losses while ahead and just go to ruby instead? My usage was going to be sys admin and network socket scripts for the most part
02:32  dash: tos9_: those return bytes strings.
02:33  magcius: extor, that's what a major version change means
02:33  dash: extor: No, of course not.
02:33  dash: extor: python 2.x is going to be around for at least 5 years
02:33  magcius: extor, rarely does it mean "better", it means incompatible
02:33  magcius: It means "your shit will break"
02:33  extor: dash, does 2.x have most of the tcp/ip libraries?
02:33  dash: extor: and 3.x is not very different.
02:33  magcius: extor, what does "most of" mean?
02:33  dash: extor: sure.
02:33  magcius: extor, it has several networking libraries
02:33  extor: magcius, I want to write a few scraping scripts
02:33  magcius: extor, scraping?
02:34  extor: magcius, like web scraping
02:34  magcius: Well yes.
02:34  dash: extor: here's a nice thing for that: http://scrapy.org/
02:35  lewis1711: IMO the most significant python project is scipy, and scipy is married to 2.x until further notice
02:35  tos9_: dash: i.e. that's a yes
02:35  tos9_: (they'll take a byte string of any encoding)
02:35  extor: so scrapy is a language in of itself it seems
02:36  extor: scipy???
02:43  magcius: x0rs, you still around?
02:43  x0rs: magcius: yes
02:46  lewis1711: ah crap this person has used tabs instead of spaces in their code. I'm screwed!
02:47  dash: lewis1711: search and replace yaaay
02:47  verte: lewis1711: see the scripts directory in your python dir for a program to fix them.
02:47  dash: extor: scrapy isn't its own language
02:47  dash: extor: but it does use xpath.
02:47  lewis1711: verte: huh, didn't know about that. thanks
02:47  lewis1711: I always set my editors to have tab = 4 spaces
02:48  verte: although M-% tab ret space works
02:48  verte: you mean, indent = 4 spaces
02:48  verte: you should leave your tab at 8
02:48  papna: tab key --> 4 spaces
02:49  dash: verte: if you're using emacs just do M-x untabify
02:49  verte: otherwise you see something different to what python sees, and seeing what the compiler sees is the entire point of having whitespace as block syntax
02:49  magcius: x0rs, sorry, I'm almost done
02:49  lewis1711: Verte: no I mean i set it so pressing tab doesn't actually insert a tab, it inserts 4 spaces
02:50  verte: cool.
02:50  x0rs: magcius: cool, np
02:50  lewis1711: or at least I've never had issues with it in vim or gedit
02:50  verte: I mean that your tabstop should still be set at 8 spaces, though
02:50  lewis1711: no idea, I never truly use tabs
02:51  verte: it's not a problem for source you've written, but then you can completely misunderstand sources that do use tabs
02:52  verte: you won't understand the indentation errors you get unless you see tabs for what they are
02:52  tos9_: dash: sorry to be a bit annoying, so now if I've defined __str__ to return "{0}".format(title.encode("utf-8")), say, and I call print on that object, I'm gonna get what I (he) wants right (printing a unicode byte string)?
02:53  magcius: x0rs, http://codepad.org/1AwBBjXu
02:53  x0rs: magcius: excellent, thank you so much
02:53  magcius: x0rs, did you take a look at the output?
02:54  x0rs: magcius: putting it in right now
02:54  tos9_: x0rs: Wait what? Why are you making that so complicated. Just use an easier format for your config file
02:54  magcius: x0rs, the output is right on that page
02:54  magcius: tos9_, that's not complicated at all
02:54  magcius: tos9_, it's saner than most things I've seen
02:54  magcius: (like real XML)
02:55  tos9_: magcius: Then either use XML and a parser, which would be all of 2 lines, or just use JSON or an actual module and be done with it
02:55  tos9_: Whatever.
02:55  magcius: tos9_, there's several problems with using XML or JSON as a config file format
02:55  magcius: tos9_, additionally, it's a simple example of a state parser, which is very useful
02:56  magcius: tos9_, first is that likely it won't validate
02:56  tos9_: magcius: It just looks like he's serializing. But ok I'll take your word for it since I definitely don't know much about what I'm talking about here.
02:56  magcius: tos9_, since you would need to do "Mortanshire &amp; Richershire Village" in the locations for example
02:56  magcius: tos9_, also, you would need to deal with whitespace issues
02:57  verte: why not yaml?
02:57  magcius: tos9_, and make sure you put plain text in <![CDATA[ blocks
02:57  lewis1711: Verte: huh, thanks for that info. my vim is actually set so tabstops = 4, will make a note to replace that :O
02:57  lewis1711: I never used it for other peoples code
02:57  magcius: verte, because this is a very simple config format that doesn't need complexity
02:58  magcius: verte, it's also very easy to ambigiously serialize
02:58  magcius: which YAML does not have
02:58  magcius: verte, it also needs to be human-editable
02:58  magcius: verte, having multiple serialization methods like the JSON-subset may not be the best thing
03:00  verte: we haven't had a problem with it. both our user config stuff and our fixture files are yaml (we generate the latter)
03:00  magcius: verte, I remember there being problems where it wouldn't serialize exactly what I had in mind
03:02  magcius: x0rs, is that good?
03:03  x0rs: magcius: quite yes, I am going over the whole thing to learn how to use the parser module for future apps. I appreciate, thanks much
03:04  pionar: Good evening everyone
03:06 --- ultimatebuster is now known as c0p
03:11  Biaise: Hi every one
03:12  verte: unfortunately, nobody quite says it like Dr Nick
03:12  Cam: How do I convert from time.asctime() format to time expressed in seconds?
03:13  Cam: I tried looking in the docs but I don't know what to do.
03:13  Cam: Nevermind, time.mktime() works!
03:14  dash: verte: heh, how did you know what i was thinking.
03:18  metalfoo: May I iterate over to iterables at the same time? I.e. step through two lists in common?
03:18  ivazquez|laptop: zip() or itertools.izip().
03:19  metalfoo: Thank you
03:19  metalfoo: Now you have said it, I do remember I read about it.
03:28  t`2: whats the best way to parse a string which has a format like "32 day(s)" .. i want to read the 32... looking for someting like strftime(), but for generic strings
03:30  verte: that's a good one
03:31  verte: I wonder if ICU can deal with that sort of stuff
03:32  mtx_init: this adding () to print is annoying
03:32  papna: print having syntax is silly.
03:33  verte: flame flame flame
03:33  dash: printing stuff is a bad idea
03:34  Cory: How is Notepad++ for editing/creating Python code?
03:35  papna: Cory: Okay.
03:35  ivazquez|laptop: geany
03:39  verte: oh wow, ICU came out of Taligent.
03:39 * verte connects the dots
03:39  dash: verte: Heh
03:39  dash: verte: i used to work in the old Taligent building :)
03:39  dash: (amusingly, the office I'm in now used to belong to Tymnet!)
03:39  verte: no way! doing what?
03:39  verte: ha
03:40  dash: "TYMNET" is still painted on the curb in the parking lot
03:40  dash: verte: both buildings belong to Apple now :)
03:40  mtx_init: Cory: I have found a few problems with ++ and the way it handles characters
03:41  extor: With all these libraries and stuff being for python 2.x isn't it suicide for a noob to even venture to play with 3?
03:41  verte: I had better not make any NeXT jokes, then
03:41  extor: I wanted to write a TCP port scanner in python...is that a decent first project for a noob?
03:42  dash: extor: "suicide"? of course not
03:42  dash: you can't die from programming python
03:42  dash: (you just might want to, some times)
03:42  verte: but 2.x is a wise choice
03:42  dash: extor: why would you write a port scanner when there's nmap? :)
03:42  extor: dash but the main advantage of python is the libraries already written for it is what Im reading everywhere
03:42  dash: extor: sure
03:42  dash: that's why i use 2.6 :)
03:42  extor: "if you want to do something in python chances are someone has done it already blah blah"
03:43  extor: ok so 2.6 has all the goodies then
03:43  sirpengi: 2.7 is the way to go
03:43  extor: why 2.7 over 2.6?
03:44  papna: 2.6 is fine
03:44  extor: Python 2.6.5 (r265:79063, Apr 16 2010, 13:09:56)
03:44  Juhaz: no point in not using the latest and greatest, but 2.7 is still not very common in the wild
03:44  extor: That's my python in my ubuntu
03:45  dash: some of us still use 2.4.
03:45  papna: extor: That version's great.
03:45  extor: omg redhat uses python 2.4 can you believe it
03:45  verte: and there are lots of people using 2.5 or earlier
03:45  papna: Lots of us still use 2.4.
03:45  dash: extor: yes.
03:45  sirpengi: so far I haven't found any library I used in 2.6 that wasn't compatible with 2.7
03:45  Juhaz: exactly. Ubuntu doesn't have 2.7 (well, okay, it will tomorrow once 10.10 is released), and neither does anything else
03:45  extor: so which one has MORE libraries and free code...2.4 or 2.6?
03:45  sirpengi: but that might just be what I'm using
03:45  dash: extor: stuff that works for 2.4 works on 2.6 :)
03:46  extor: does 2.4 have fewer libraries than 2.6?
03:46  sirpengi: anyhow, it's moot what version your OS provides since there's altinstall and virtualenv
03:46  extor: dash but vice versa?
03:46  sirpengi: well, unless you're programming GAE, which is 2.4 only I think
03:46  Juhaz: extor, probably. some things are starting to drop compability for 2.4
03:46  dash: extor: there's probably a couple things that don't support 2.4.
03:46  SHJordan: hi
03:46  SHJordan: i have a quest
03:46  papna: extor: A few, but most of the most important libs support 2.4.
03:46  SHJordan: question*
03:46  papna: sirpengi: Not 2.5?
03:46  sirpengi: papna: I forget which one... but it isn't 2.6
03:46  extor: does debian use 2.6 by default or does it use 2.4 like centos does
03:46  spaceone: good afternoon
03:46  sirpengi: ahh, it's 2.5
03:47  mtx_init: if I use subprocess.call instead of Popen, how can I print stderr, considering call returns the return code and not the io.
03:47  extor: debian uses 2.5? lawl...
03:47  SHJordan: what would be equivalent to import UserString on 3.1.2?
03:47  papna: extor: Different versions of Debian support different Pythons.
03:47  dash: SHJordan: what do you want to do?
03:47  extor: I mean the regular debian stable..whatever it is now
03:47  extor: lenny
03:47  papna: SHJordan: bytes, but you wouldn't use UserString in Python 2
03:47  extor: yeah lenny I think
03:47  Juhaz: lenny uses 2.5
03:47  SHJordan: i'm trying to use s = UserString.MutableString('Python')
03:47  dash: SHJordan: Why?
03:48  papna: SHJordan: That's a horse of a different colour.
03:48  SHJordan: i'm learning python xD
03:48  dash: SHJordan: yeah that's not something you really ever want to do
03:48  papna: SHJordan: There's a chance you want a bytearray, but that's not really a common thing.
03:48  SHJordan: Hmm..
03:48  ronnie_vd_c: how can i set strings to only contain a-z,A-Z,+,-,.       ?
03:49  SHJordan: I'm reading a book.. it is for python 2.6 i think... but somethings i'm adapting pretty well
03:49  verte: mutable strings are a bad idea, there are good reasons they are in exactly one popular modern language
03:49  SHJordan: like print, that is print() now
03:49  verte: SHJordan: get a python version 2 to learn with
03:50  dash: SHJordan: which book?
03:50  SHJordan: verte: that's not a retrocesse?
03:50  SHJordan: {sorry for my bad english}
03:50  verte: SHJordan: most people use python 2, and most will for a long time
03:50  SHJordan: dash: wait a min.
03:51  verte: SHJordan: python 2 is still in active development
03:51  extor: Is ruby very similar to python in some way by chance or totally not? I notice a lot of people compare ruby and python but Im not sure why
03:51  papna: extor: They're more similar than we'd like to admit.
03:51  extor: Ruby is just written and maintained by one jap guy
03:51  extor: papna, why do you have trouble admitting it
03:51  davetoo: It is supposedly more "purely" object-oriented
03:52  papna: extor: Myopia.
03:52  dash: extor: ruby and python are very similar
03:52  papna: davetoo: That's a silly claim.
03:52  dash: davetoo: Only by ignorant people
03:52  dash: extor: i might go so far as to say the differences between them are all minor
03:52  extor: So if someone learns python then ruby will be a lot easier for them to pick up I take it
03:52  verte: davetoo: that hasn't been true since python 2.2
03:52  dash: extor: sure
03:53  davetoo: I only played with it for a few days, before work requirements led me to python
03:53  lewis1711: ruby is a lot easier to extend with C. a lot more libs for python though
03:53  extor: would it be fair to say that both ruby and python are very english-like in their syntax when compared to stuff like perl and bash and of course C?
03:53  davetoo: I'll have to go back to it (ruby) when I star playing with Puppet and/or Chef
03:53  dash: lewis1711: Oh? python is extremely dang easy to extend with C
03:53  dash: extor: no
03:53  extor: Oh ruby can use C libraries?????
03:53  dash: lewis1711: how's ruby easier?
03:53  dash: extor: anything can :)
03:53  davetoo: perl does NOT have to be write-only.
03:53  dash: yeah, puppet is a nice thing.
03:53  SHJordan: dash: this one: http://ark4n.wordpress.com/python/
03:54  dash: aah.
03:54  verte: davetoo: really, we have a more powerful meta-object protocol, a more hygenic module system and multiple inheritence, so you could honestly argue the reverse
03:54  lewis1711: dash: you think so? a lot of boiler plate required
03:54  davetoo: but it is a lot easier to make write-only code in Perl than Python, I think
03:54  dash: lewis1711: oh? such as?
03:54  papna: lewis1711: Are you familiar with Cython?
03:54  lewis1711: reference counting, etc.
03:54  dash: lewis1711: oh, well.
03:54  dash: lewis1711: minor details :)
03:54  dash: and yes, cython is the secret weapon
03:54  davetoo: Verte: I'm actually making some decorators right now, and monkey-patching some classes with a new __new__ and __getattribute__ :)
03:55  dash: davetoo: Don't be terrible.
03:55  lewis1711: I am experimenting with weaves inline C
03:55  SHJordan: dash: i read that mutablestring consumes pretty much more cpu power. is this why it was dropped?
03:55  dash: lewis1711: i can't imagine that's a good idea
03:55  lewis1711: why?
03:55  dash: SHJordan: no, that's not true
03:56  dash: SHJordan: it's just not a good idea
03:56  dash: SHJordan: anything you can do with it, you can do better without it
03:56  davetoo: dash:  it's just a proof-of-concept
03:56  dash: davetoo: what's the concept?
03:56  dash: and how is that an excuse for being terrible? ;)
03:56  davetoo: Are you familiar with matplotlib?
03:56  dash: yes
03:56  verte: I'm sorry.
03:56  SHJordan: dash: Hmm... i think i'll skip it so...
03:56  lewis1711: inline C is the fastest option out there, according to the one benchmark I read:P looks net enough anyway
03:57  dash: lewis1711: what did you read?
03:57  davetoo: I'm giving all the Artist subclasses new-style cbook.CallbackRegistry callbacks
03:57  dash: lewis1711: fastest at what?
03:57  lewis1711: laplace transforms on a big matrix I think it was
03:57  lewis1711: one moment
03:57  dash: lewis1711: why?
03:57  davetoo: Before I go making patches, I'm monkeying around with it to see if it's useful
03:57  dash: lewis1711: oops
03:57  dash: davetoo: why are you doing that?
03:58  lewis1711: dash: http://www.scipy.org/PerformancePython
03:58  davetoo: I'm writing a GUI editor to tweak settings on existing matplotlib figures
03:58  verte: lewis1711: did they compare it with pypy's numpy port?
03:58  lewis1711: dash: I think cyrex is similar to cython?
03:58  dash: lewis1711: yes cython is a fork of pyrex
03:58  davetoo: and I want to be able to have it redraw whenver anything interesting is modified
03:58  SHJordan: dash: could you tell me if there is a better IDE than PyScripter? for windows?
03:58  davetoo: optional, of course
03:58  davetoo: Eclipse/PyDev :)
03:59  lewis1711: Verte: nope.  I thought pypy was slower than regular python...bleh I lose track:P
03:59  davetoo: or Python(x,y)/Spyder
03:59  davetoo: SHJordan: that was for you.
03:59  verte: lewis1711: not for number crunching
03:59  dash: SHJordan: never heard of "PyScripter"
03:59  SHJordan: davetoo: links? xD 2l2s
03:59  lewis1711: hmmm
03:59  davetoo: Eclipse is pretty heavyweight though
03:59  SHJordan: davetoo: newbiefriendly?
03:59  lewis1711: the main thing python is slow at is library calls and loops. in my experience, which isn;'t a great deal
03:59  sirpengi: Eclipse has gotten a lot better throughout the years
04:00  papna: lewis1711: Huh?
04:00  davetoo: SHJordan: depends on how smart the newb is :)
04:00  sirpengi: especially if you start off with the base install and then only add-on what you need
04:00  SHJordan: dash: code.google.com/p/pyscripter/
04:00  dash: SHJordan: last time i had to run an editor on a windows box, i used gvim
04:00  davetoo: SHJordan: which python distro are you using?
04:00  lewis1711: I am not a fan of eclipse. it's too full on, changing options is a nightmare
04:00  davetoo: native, or cygwin?
04:00  verte: lewis1711: it's a language, it can't be slow or fast
04:00  SHJordan: davetoo: distro? you mean version? i'm using 3.1.2
04:00  davetoo: SHJordan: no, how did you install it?
04:00  lewis1711: verte: then it's more viscuous then:P
04:00  SHJordan: davetoo: idk =\
04:01  SHJordan: SHJordan: installed python 3.1.2
04:01  lewis1711: just pretend i said Cpython you pedantic bastard:P
04:01  davetoo: Where'd you get it from?
04:01  SHJordan: davetoo: then installed pyscripter
04:01  SHJordan: http://code.google.com/p/pyscripter/
04:01  davetoo: ok, my recommendations is this:
04:01  davetoo: uninstall python 3 :)
04:01  davetoo: and/or install this:
04:01  SHJordan: x_x
04:01  davetoo: http://www.pythonxy.com/
04:01  davetoo: They can probably co-exist
04:02  SHJordan: hmm
04:02  SHJordan: gonna try co-exist so xD
04:02  davetoo: That package comes with the SpyderLib IDE which is good,
04:02  davetoo: lighter-weight than Eclips,
04:02  davetoo: bute also installs Eclipse and PyDev if you want to try that
04:02  SHJordan: should i?
04:03  SHJordan: davetoo: is it optional? or default?
04:03  lewis1711: hmm I must try the python plugin for netbeans at some stage. though I am happy enough with gedit right now
04:03  davetoo: http://code.google.com/p/pythonxy/wiki/StandardPlugins
04:03  dash: i'm sitting in front of a windows box now
04:04  dash: but i'm using ssh and emacs to write python code :)
04:04  davetoo: you can choose, but I'd recommend letting *them* choose at first :)
04:04  davetoo: argh
04:04  davetoo: emacs is alien spawn
04:04  SHJordan: davetoo: hmm what python does it uses?
04:04  dash: hmm
04:04  dash: only four lines not covered by tests now...
04:04  davetoo: SHJordan: 2.6.5
04:04  SHJordan: davetoo: it seems 2.6 is it?
04:04  davetoo: yep
04:04  SHJordan: davetoo: isn't it walking backwards?
04:04  davetoo: You're going to get more help from people if you start to learn with Python 2
04:05  dash: this code is making my eyes cross a little
04:05  SHJordan: hmm
04:05  davetoo: dash: are you using any kind of code-folding mode?
04:05  davetoo: what is available?
04:05  SHJordan: 2.6 for newbies and 3.1.2 for pros?
04:06  lewis1711: 2.6 is for people that want useful libs;)
04:06  papna: 2.6 is for people who want to get most stuff done.
04:06  papna: And 3.1 is for people who use blender
04:06  davetoo: I tried to start learning emacs a few years ago, because of a certain email mode (I forget), but my finger muscles have been trained for vi for 20 years and I just couldn't do it
04:06  verte: I'm not really sure of the need for code-folding when you can split the buffer
04:06  avo: Hey all. Excuse the noobish question, but I've got a for loop that is iterating over something. I would like the for loop to skip to the next iteration if certain conditions are true. Is there something like 'next'? or something of that nature? Thanks so much!
04:06  dash: davetoo: code folding never made sense to me
04:06  davetoo: Verte: it helps my ADD :)
04:06 * davetoo has CRS
04:06  mtx_init: if I use subprocess.call instead of Popen, how can I print stderr, considering call returns the return code and not the Pipe.
04:06 * spinningcompass has BBC
04:06  papna: avo: There isn't some magic way to do that.
04:06  dash: avo: 'continue'
04:06  SHJordan: ok ok ok
04:07  papna: avo: You can use a flag and continue.
04:07  SHJordan: gonna drop to 2.6 so =\
04:07  davetoo: Big Black Co.... no, not going there
04:07  SHJordan: that's awkards
04:07  papna: avo: Oh, I misread.
04:07  papna: avo: continue
04:07  avo: dash, That sounds like exactly what I'm looking for! Thanks :)
04:07  dash: mtx_init: probably you can't
04:07  avo: papna, No worries. Thanks anyhow
04:07  lewis1711: jokes on you papna, magic does exist
04:07  papna: lewis1711: SHHHHHHHHHHh
04:07  dash: lewis1711: but it's always bad
04:07  mtx_init: dash: Is there a way to get the returncode with Popen maybe?
04:08  papna: mtx_init: Sure.
04:08  SHJordan: davetoo: WOW... 460mb? thats HUGE
04:08  davetoo: dash: I started migrating from vi to folding editors (SciTE) and then an IDE about a year ago.  Helps my brain work better.)
04:08  papna: mtx_init: The attribute of that name.
04:08  davetoo: SHJordan: yes it is rather large.
04:08  davetoo: Ecilpse is a big part of that
04:08  verte: p = Popen(...); either .communicate() or .wait(); p.returncode
04:08  dash: SHJordan: pythonxy.com's bundle is python plus the kitchen sink
04:08  SHJordan: davetoo: gonna get it from university tomorrow i think... my internet links would crush... xD
04:08  dash: SHJordan: most people don't use it
04:08  teratorn: davetoo: vim is a folding editor if you want it to be :)
04:09  verte: I wonder why it isn't return_code. that would be more pep-8.
04:09  lewis1711: hmm I don't feel the need for IDEs much, unless I am working with java. but maybe I just haven't used a nice C IDE
04:09  dash: verte: only if you think it's two words!
04:09  magcius: since when does the standard library follow pep8?
04:09  verte: there is already a popular kitchen sink, it's called twisted
04:09  davetoo: teratorn: emacs is from Jupiter; vim is from the Moon; vi is from New Jersey :)
04:09  SHJordan: dash: python 3.1.2 + pyscripter = ~10mb
04:09  teratorn: heh New Jersey
04:09  papna: magcius++
04:09  SHJordan: can't compete with that
04:09  SHJordan: xD
04:09  davetoo: Bell Labs
04:09  verte: magcius: quite true
04:10  magcius: might I remind you of the logger module ported from Java?
04:10  verte: magcius: I hate that they don't follow it consistently for class names
04:10  davetoo: SHJordan: you can pick and choose packages from there;
04:10  verte: classes like super and classmethod
04:10  magcius: verte, I hate that they don't follow it at all
04:10  papna: I hate that they keep releasing new classnames that don't follow it.
04:10  magcius: verte, well super and classmethod are supposed to be methods
04:10  davetoo: doing so will help you learn what is what, when thigns don't work :)
04:10  magcius: or something
04:10  magcius: they're supposed to act like functions
04:11  magcius: decorators should be all lower-case
04:11  magcius: in my opinion
04:11  SHJordan: davetoo: seems more robust
04:11  davetoo: what about decorators that are class instances, not functions?
04:11  magcius: things that are more function-like than class-like
04:11  magcius: davetoo, class instances?
04:11  papna: verte: For stuff like property, classmethod, partial, etc., I kind of excuse it...stuff you're not *really* supposed to think of as classes.
04:11  magcius: davetoo, like things with __call__ methods?
04:11  verte: davetoo: well, classes and functions are class instances :)
04:11  davetoo: yes
04:11  mtx_init: ok good, I guess I missed returncode
04:11  papna: davetoo: functions are class instance.s
04:12  magcius: right
04:12  davetoo: I have a 23-character-long decorator name here :)
04:12  dash: heh heh
04:12  dash: yeah that raises the question
04:12  SHJordan: davetoo: i'm learning vectors on C, is it a good thing to learning python right now?
04:12  davetoo: I need camelcase to read it
04:12  dash: 'frozendict', or 'FrozenDict'? :)
04:12  magcius: I heard they fixed the logger module for 3.1 though
04:12  magcius: dash, ooh, good one
04:12  papna: davetoo: FrozenDict
04:12  papna: dash
04:12  magcius: dash, if it's a builtin, then frozendict
04:12  papna: dash: It should also have been Dict
04:12  magcius: dash, otherwise, types.FrozenDict
04:12  davetoo: SHJordan: no clue.  I don't know much C, and don't know *any* numerical methods
04:12  magcius: or something like that
04:12  magcius: papna, types.Dict
04:12  magcius: papna, but builtins should feel different IMHO
04:13  SHJordan: any other opinion ppl?
04:13  dash: magcius: it's gonna be a builtin
04:13  magcius: dash, then frozendict
04:13  papna: magcius: Python 3 should have had Dict, Int, DefaultDict, etc.
04:13  dash: SHJordan: now is always the best time to learn python! ;)
04:13  SHJordan: dash: the zen xD
04:13  magcius: papna, int? No.
04:13  papna: Int
04:13  papna: Yes.
04:13  magcius: papna, to me that means you can make an Int instance with Int(1000)
04:14  magcius: which acts differently or something
04:14  papna: magcius: Well that's not what it should mean.
04:14  magcius: and you can do a = Int(100); a.foo = 3
04:14  dash: mmmm
04:14  papna: It should mean what int(100) means now.
04:14  magcius: papna, as I said, builtins act differently.
04:14  papna: magcius: Why should it mean that?
04:14  dash: i think i have different plans for 'Int' :)
04:14  papna: magcius: Not really.
04:14  verte: why should builtins act differently?
04:14  magcius: papna, a = dict(); a.foo = 3;
04:14  magcius: verte, I'm not saying they should, I'm saying they don't
04:14  papna: magcius: Do you have a point?
04:14  dash: o/` a little nonsense now and then is relished by the wisest men o/`
04:15  magcius: papna, yes.
04:15  magcius: papna, additionally, int is a type and a function
04:15  papna: magcius: The fact that you can't put new attributes on a dict has nothing to do with it being a builtin.
04:15  papna: magcius: int is a type.
04:15  magcius: papna, it doesn't?
04:15  papna: It used to be a function.
04:15  papna: magcius: Correct, something doesn't have to be a builtin not to support new attributes.
04:15  verte: it doesn't, you can create your own classes that behave exactly the same.
04:16  verte: class Foo(object): __slots__ = ()
04:16  magcius: oh man
04:16  magcius: I've actually never used __slots__
04:16  magcius: never, ever, once
04:16  dash: you should read slotmachine.py
04:16  verte: you clearly have not been hacking pypy long enough :)
04:17  magcius: verte, oosupport is much cleaner than pairtype
04:17  papna: Besides, you shouldn't be giving anything else (except MAYBE functions) new attributes.
04:17  magcius: verte, and I appreciate that
04:17  magcius: papna, right.
04:17  magcius: dash, this? http://divmod.org/trac/browser/trunk/Axiom/axiom/slotmachine.py
04:18  dash: that.
04:18  dash: man
04:18  dash: i need to get a better perspective
04:19  dash: i still don't feel at ease writing 12 lines of test code to increase coverage by a single line
04:19  SHJordan: dash: how do i declare a unicode string?
04:19  papna: dash: You let that get past code review?
04:19  papna: Man.
04:19  dash: papna: what?
04:20  dash: SHJordan: does your book not tell you?
04:20  papna: SHJordan: Python doesn't have declaration.
04:20  papna: SHJordan: Are you still trying to work in Python 3 from a Python 2 book?
04:20  magcius: dash, I assume hes' reading Dive Into Python 3?
04:20  magcius: or whatever
04:21  SHJordan: papna: kind of...
04:21  papna: SHJordan: That will make all this more confusing.
04:21  papna: Stop it.
04:21  SHJordan: papna: hmm...
04:21  magcius: SHJordan, what's there to think about?
04:21  SHJordan: papna: good reference book for newbies on python 3.1.2?
04:21  magcius: SHJordan, you wouldn't pick up a C# book to learn Java.
04:22  magcius: SHJordan, no, because Python 3 is worthless right now
04:22  papna: SHJordan: The underdocumentation is one of the drawbacks to Python 3.
04:22  SHJordan: ic
04:22  papna: SHJordan: Why are you using Python 3?
04:22  SHJordan: that's sad.
04:22  SHJordan: well... i'm disapointed. =\
04:22  verte: and dive in has many obvious mistakes, magcius counted double digits in a casual reading of a chapter or two
04:22  SHJordan: papna: seems more updated... don't know...
04:22  magcius: SHJordan, well, Java was underdocumented too in the first 2-3 years of its release
04:23  papna: SHJordan: You have misunderstood the situation.
04:23  magcius: verte, did I tell you?
04:23  SHJordan: papna: seems so.
04:23  magcius: verte, Mark told me that if I forked the book and corrected the mistakes, he would update it.
04:23  papna: SHJordan: Python 2 is still developed, has recently-enhanced features, and is in wide use.
04:23  verte: magcius: I did see that
04:24  magcius: verte, I corrected about half of them on a single chapter and sent it for him to review. He didn't update it because he didn't want to review my changes on what he considered a "dead book"
04:24  SHJordan: papna: OH! didn't know that... thought it was like firebird... don't know... i'm mean on release stages.
04:24  magcius: verte, fucking Mark Pilgrim
04:25  magcius: papna, is there going to be a 2.8 afterwards?
04:25  magcius: papna, I didn't realize it was "still developed"
04:25  papna: magcius: No, none is planned.
04:25  Rhamphoryncus: SHJordan: python3 isn't worthless, but a big strength of python is all the third-party libraries available, and they're not all ported to 3.x yet
04:25  papna: magcius: 2.7.n for large n are expected.
04:25  SHJordan: papna: should i get 2.7? or a older 2 version?
04:25  verte: so pull it from the internet so people stop attempting to learn python with it!
04:25  magcius: papna, are any of those feature releases or just bugfixes?
04:25  verte: or at least note it as such
04:26  magcius: verte, right.
04:26  verte: SHJordan: it is unlikely to matter
04:26  SHJordan: verte: no huge changes? on 2.x versions?
04:27  gh0st3r: in python on *nix, i want to be able to create an instance of tcpdump, then end it later
04:27  verte: SHJordan: no
04:27  verte: SHJordan: they are mostly backwards compatible
04:27  gh0st3r: whats the easiest way to do this? would it be creating an instance of tcpdump, then ps aux'ing its pid, then killing it later or?
04:27  dash: gh0st3r: subprocess module
04:27  dash: or using pcapy or such instead
04:27  gh0st3r: dash, thank you
04:27  gh0st3r: pcapy...
04:28  gh0st3r: that could work :p
04:28  magcius: verte, additionally, Dive into Python is what I consider the bad mode of tutorials
04:28  gh0st3r: thanks
04:28  papna: magcius: They should be bugfixes.
04:28  SHJordan: so userstrings should work there
04:28  papna: SHJordan: 2.8 is not planned.
04:28  magcius: verte, which is: "Here's a useless piece of code, let's go through it line by line"
04:28  magcius: verte, the things that I love are the ones that seem more natural in their evolution
04:28  verte: indeed. didn't it use its own library code, too?
04:28  verte: or was that something else?
04:29  magcius: verte, "its own library code"?
04:29  verte: some library you had to install to run later examples. that must have been some other terrible tutorial. it's hard to keep track.
04:30  magcius: verte, good books do that too: Think Python had swampy
04:30  magcius: verte, http://www.bit-101.com/blog/?p=2802
04:30  magcius: verte, that's an example of my favorite kind of tutorial: it has a natural evolution
04:30  magcius: "Well, we want gravity, so let's take the motion out of the game loop and put it in its own function"
04:31  SHJordan: should i use utf8 over latin1?
04:31  tessier: That's odd...doesn't string.split() collapse whitespace?
04:31  SHJordan: [downloading 2.7 right now]
04:32  magcius: tessier, "collapse"?
04:32  verte: tessier: when used with no argument (or None argument), yes
04:32  tessier: magcius: If I have "foo  bar" I seem to be getting a "foo " and a " bar"
04:32  magcius: >>> "foo  bar".split()
04:32  verte: tessier: what makes you think you are getting those?
04:32  magcius: ['foo', 'bar']
04:33  tessier: OH...I know why: print "/sbin/mdadm --remove /dev/", mddevice, " /dev/", disk2
04:33  magcius: ?
04:33  tessier: I should be using . concat
04:33  magcius: . concat?
04:33  verte: tessier: . is attribute access
04:33  magcius: tessier, remember, we don't have perl's . concat
04:33  tessier: er...nevermind. + then
04:33  verte: do you want #php ?
04:33  magcius: verte, he's trying to port some random script from perl
04:34  tessier: I'm not porting from perl. This is an original creation.
04:34  x0rs: Anyone ever tell jokes or riddles in python? http://paste.pocoo.org/show/279424/
04:34  tessier: Just confusing myself with all kinds of different language syntaxes I've learned and forgotten.
04:34  tessier: x0rs: I think I saw that one on Conan
04:35  x0rs: tessier: if you did, I am smarter than I thought, because I just made that up =P However, there might have been something very similar
04:36  dash: x0rs: the big problem with making jokes in python is someone will take it seriously and use it in a real program.
04:36  dash: ;)
04:37  x0rs: dash: I guess that could be true =P
04:37  spinningcompass: if not dog.hasattr('nose') : assert smell(dog) is Terrible
04:37  gh0st3r: i can't seem to work out how to do this, or whether it can be down with Subprocess....
04:38  gh0st3r: Can I create a process... do some other code.... then close the process?
04:38  gh0st3r: via subprocess?
04:39  dash: sure
04:39  gh0st3r: dash, so i use popen... then how do i close the process though?
04:39  dash: it has a kill() method
04:40  gh0st3r: oh wait :p
04:40  gh0st3r: foun it :p
04:40  gh0st3r: thanks guys
04:41  magcius: x0rs, did you like the parser I made earlier?
04:42  x0rs: magcius: yes I do, I plan on using it to update multiple programs I am working on, thank you
04:43  magcius: x0rs, may I see what you've done so far? Need any help understanding it?
04:43  verte: spinningcompass: not usually. have you read many in perl?
04:43  spinningcompass: verte: I'm sorry, I don't understand. I'm slightly ashamed to admit, I've not written a Perl script in 10 years. :-
04:44  magicblaze0071: how do you tell python to only compile all py files but not run them?
04:44  dash: magicblaze0071: at install time, you mean?
04:45  verte: I do not actually know perl, which is unusual because it was the first language I tried to learn and the last time I tried I could count 30 that I was confident in
04:45  magicblaze0071: dash: I mean, if i want to run a piece of code, I would like to generate the byte code to run but not run it
04:45  magcius: I have to find lvh's perl thing again.
04:45  dash: magicblaze0071: What
04:45  dash: magicblaze0071: do you want to run it or not?
04:45  magicblaze0071: nope
04:46  dash: then what do you mean by "if i want to run a piece of code"
04:46  magcius: dash, why do you want to do that?
04:46  magcius: er
04:46  magcius: magcius, why do you want to do that?
04:46  magicblaze0071: I would like to see how fast my code is
04:46  verte: the first sign of madness
04:46  dash: magicblaze0071: so time it
04:46  dash: magicblaze0071: what's compilin' got to do with it
04:46  magicblaze0071: I just want to know if its possible?
04:47  dash: magicblaze0071: anything is possible
04:47  dash: so yes/.
04:47  magicblaze0071: .py -> .pyc file conversion.
04:47  dash: magicblaze0071: distutils does this for you
04:47  magcius: magicblaze0071, you want to see how fast your code compiles?
04:48  magicblaze0071: i just want to know how to compile it...perhaps using commandline python
04:48 * dash pokes magicblaze0071 
04:48  dash: magicblaze0071: Why?
04:49  magicblaze0071: dash: to know how its done?
04:49  dash: magicblaze0071: Why?
04:50  magicblaze0071: dash: do .pyc files run faster than .py files?
04:51  dash: .py files don't run
04:52  dash: python always runs bytecode.
04:52  dash: so no.
04:52  magicblaze0071: then how do i turn .py code to .pyc before running it?
04:52  dash: python does it for you.
04:52  SHJordan: what is the difference from .py to ,pyo?
04:52  dash: SHJordan: .py files contain python source
04:53  dash: which then is compiled to bytecode, and saved in a .pyc/.pyo file.
04:53  verte: .pyo files don't contain docstrings or assert statements
04:53  dash: you basically never have to worry about them.
04:53  verte: since people don't use assert statements, and code takes up so little of your cache, there is barely noticable performance difference between the two
04:53  magcius: is the marshalled format described somewhere?
04:54  SHJordan: hmm... but there is a diffrence between .pyo and .pyc?
04:54  magcius: SHJordan, .pyo files don't contain docstrings or assert statements
04:54  magcius: SHJordan, they're "optimized"
04:55  SHJordan: magcius: oh... so .pyc for portability?
04:55  magcius: no
04:55  magicblaze0071: can you take a .pyc file from one machine and run it on another?
04:55  magcius: of course
04:55  magcius: since Python never actually runs .py files
04:55  verte: these days, .pyo is pedantry
04:56  magicblaze0071: what if there are calls to C++ code that are windows specific linked to the byte code?
04:56  magicblaze0071: and you want to run it on linux...dont think that'll work, right?
04:56  verte: magicblaze0071: 'linked' ?
04:56  dash: nothing's ever "linked" in python.
04:56  verte: magicblaze0071: there is nothing platform specific in the bytecode
04:57  magcius: the whole point of bytecode is that it's platform-independent
04:57  SHJordan: can't find a codification that allows ü char
04:57  magcius: and also that it's much easier to compile to than a VM
04:57  SHJordan: tried latin1 and utf8
04:57  magcius: er
04:57  magcius: than native code
04:57  magcius: SHJordan, both allow "i'
04:57  magcius: ER
04:57  magcius: ü
04:58 * magcius grumbles at Windows
04:58  SHJordan: not showing
04:58  SHJordan: magcius: word is: Hüsker Dü
04:58  verte: SHJordan: encoding of what? what encoding your editor is set to?
04:58  Ademan: does anyone recommend a particular module for making curses UI creation easier? (easier than the curses module that is)
04:59  SHJordan: verte: brb i'll show u the code
04:59  magcius: Ademan, urwid?
04:59  verte: SHJordan: and your terminal, of course. no point trying to print utf-8 to a cp15whatever terminal.
--- Log closed Sun Oct 24 05:05:42 2010
--- Log opened Sun Oct 24 05:06:07 2010
05:06 --- Users 684 nicks [0 ops, 0 halfops, 0 voices, 684 normal]
05:06  verte: is that what it does display?
05:07 --- Channel #python was synced in 94 seconds
05:07  verte: SHJordan: what if you print repr(s) as well?
05:10  verte: SHJordan: do note that writing a coding line does not magically make the text that encoding, your editor needs to be told to produce that encoding too
05:10  SHJordan: verte: it displays: H?sker D? => <type 'str'> u'H?sker D?' => <type 'unicode'>
05:11  verte: and how about printing reprs?
05:11  SHJordan: verte: printing what?
05:11  verte: print repr(s)
05:11  magicblaze0071: I've a directory name and I would like to add a regular expression to it -- like "C:\xyz" + "*.txt" -- the problem is I'mmissing a "\" on the end of the directory. What is the correct way to add it cross-platform in python?
05:12  SHJordan: verte: 'H?sker D?'
05:12  Gentle: magicblaze0071: os.path.join
05:12  dash: also, that's not a regular expression
05:13  magicblaze0071: Just trying it...
05:13  magicblaze0071:  that worked, thankx
05:13  SHJordan: verte: should i set it pyscripter to utf8 and change latin1 over my code?
05:14  verte: SHJordan: can you please pastebin the output of this: http://fpaste.org/yFIy/
05:17  SHJordan: verte: http://fpaste.org/LWdU/
05:18  verte: SHJordan: no, the code I pasted
05:19  verte: I would like to see reprs of the originals, that will tell us a bit about the encodings your editor sees compared to latin1
05:21  SHJordan: verte: http://fpaste.org/zdun/
05:23  verte: ok. so something between the source and the compiler is clueless, but manages to handle it as one character.
05:23  SHJordan: verte: yep
05:23  lewis1711: how can I access the docstring of a module from the interpreter?
05:24  dash: lewis1711: help(thatmodule)
05:24  SHJordan: verte: should i set latin1 elsewhere?
05:24  verte: because *even if* the character is ascii unprintable, the third print should leave it \x escaped, not ?
05:24  verte: SHJordan: have you tried opening it in a different editor?
05:24  SHJordan: verte: should display this: Hüsker Dü => <type 'str'> u'H\xfcsker D\xfc' => <type 'unicode'>
05:24  lewis1711: thanks dash
05:25  SHJordan: verte: no, i haven't.
05:26  verte: SHJordan: you will never get u'' when printing unicode, it should try to encode to the terminal's encoding
05:26  SHJordan: verte: how?
05:27  dash: magic
05:27  verte: infobob: codepad SHJordan print u'hello'
05:27  infobob: SHJordan, http://codepad.org/uSKXUUGS
05:27  dash: that's why you shouldn't do it
05:28  magcius: magicblaze0071, additionally, try glob
05:28  magcius: magcius, http://docs.python.org/library/glob
05:29  SHJordan: verte: infobob, WHAT?
05:29  verte: SHJordan: codepad has run some code for you
05:30  verte: it prints a unicode object
05:30  SHJordan: verte: yep, that's what i mean
05:30  verte: ok. so there is probably something more fundamental going wrong here.
05:30  verte: you aren't using ipython, are you?
05:32  magcius: was that just a very small netsplit?
05:32  SHJordan: verte: no, i'm not. i'm using PyScripter.
05:32  verte: or one person
05:33  SHJordan: verte: it uses Python 2.7 directly
05:33 --- ElizabethM is now known as init
05:33  verte: no idea then. this sure isn't how python normally behaves.
05:33  ivazquez|laptop: Might have been an issue with the IPv6 gateway.
05:33  magcius: ivazquez|laptop, ah
05:34  SHJordan: verte: found it. -_-' i'm stupid.
05:35  SHJordan: verte: so... pyscripter, begins with:def main(): then pass then if __name__ == '__main__':     main() <<< would it matter?
05:35  SHJordan: seems so...
05:35  SHJordan: when i "washed" the screen... and just put the code, worked flawless... =\
05:36  SHJordan: http://codepad.org/t31OBDmS
05:36  SHJordan: what does def main(): pass do?
05:37  verte: it defines a function called main that does nothing
05:37  verte: the if block attempts to call it
05:38  verte: the if block usually goes at the end of the file
05:38  SHJordan: yes
05:38  SHJordan: is in the end
05:38  magcius: argh
05:38  magcius: is the format for .pyc documented anywhere?
05:38  verte: it says 'only run this if this module is invoked as a program'
05:38  ivazquez|laptop: Not really.
05:38  magcius: It's apparently not a marshal'd file
05:38  SHJordan: verte: it was like this: http://fpaste.org/vRZb/
05:39  verte: it's not documented because it changes frequently
05:39  SHJordan: verte: no bugs were reported that times.
05:39  magcius: SHJordan, that's because the # -*- coding: latin1 -*- has to go at the top of the file always
05:40  magcius: verte, is there anything that can parse it?
05:40  SHJordan: magcius: let me try now
05:40  verte: no idea. I always thought it was marshal. see what pypy does.
05:40  magcius: verte, does pypy execute the same bytecode format?
05:41  SHJordan: magcius: not. same old problem
05:41  verte: a superset of cpython 2.5 bytecode
05:41  magcius: SHJordan, can I see what it looks like now?
05:41  magcius: $ python -c 'import marshal; marshal.load(open("p.pyc"))'
05:41  magcius: ValueError: bad marshal data
05:42  magcius: I already tried open(filename, "rb") too
05:42  SHJordan: magcius: http://fpaste.org/xWa4/
05:42  verte: magcius: I do know that, as a minimum, it has version magic
05:43  magcius: verte, marshal isn't versioned?
05:43  verte: magcius: to prevent python 2.5 loading 2.4 bytecode etc
05:43 * magcius thought it was
05:43  magcius: maybe they put a simple header on it
05:43  verte: not just marshal, but the python objects themselves
05:43  verte: maybe
05:44  magcius: SHJordan, try: http://codepad.org/1CkVtTYk
05:44  Cam: Can someone check some of my codE?
05:45  dash: pastebin it :)
05:45  Cam: inb4 I get shit on :P
05:45  SHJordan: magcius: same problem: H?sker D? => <type 'str'> u'H?sker D?' => <type 'unicode'>
05:45  magcius: Cam, we'll only tease if you're doing really stupid things, and if you're doing that we'll probably rewrite it for you
05:45  verte: the repr is much more useful than the type
05:45  Cam: magcius; Don't re-write it, just tell me I am an idiot.
05:46  magcius: Cam, sure
05:46  Cam: magcius; dash; http://pastie.org/private/yanhths3589x7nx1yjstq
05:46  NelleV: Cam: you are an idiot
05:46  magcius: Cam, rewriting bad code is a fun challenge for me
05:46  Cam: NelleV; :)
05:46  Cam: magcius; My code is perfect bra
05:46  NelleV: Cam: you asked :p
05:46  Cam: nvie; <3
05:46  Cam: NelleV; * <3
05:46  SHJordan: xD
05:46 --- tarpsocks is now known as sonichu
05:47 --- sonichu is now known as SoniChu
05:47 --- SoniChu is now known as Guest84148
05:47  Cam: :D
05:47  Cam: GUESSSSTTTTEDDDDDD
05:47 --- Guest84148 is now known as tarpsocks
05:47  magcius: Cam, first thing I noticed: you seem to be using check_vals a lot even though you're only using parts of it every time
05:48  Cam: magcius; Ok.
05:48  magcius: Cam, splitting things out into check_day and check_month might be better
05:48  Cam: I do that a lot.. using args to split a function into different parts
05:48  Cam: magcius; does it make a difference?
05:48  magcius: Cam, yes, it does
05:48  Cam: How?
05:48  magcius: Cam, because you're using functions incorrectly
05:48  SHJordan: def main() stills a mystery to me...
05:48  ivazquez|laptop: It will make the person that follows you less likely to look up your address.
05:48  verte: because you don't have to type-check, now
05:49  Cam: magcius; Ok.
05:49  magcius: Cam, functions are supposed to be reusable pieces of code
05:49  Cam: Ah.
05:49  verte: type checking is a capital offense
05:49  Cam: So those should be in get_input()?
05:49  Cam: magcius; Also, I could've made compose_msg a lambda function.. would that've been better?
05:49  magcius: Cam, no
05:49  Cam: ok.
05:50  magcius: Cam, additionally, I tend to keep things that aren't related to the working out of the class outside of it
05:50  magcius: Cam, for instance, I wouldn't make days and months instance variables
05:50  Cam: Ok.
05:50  Cam: I shouldn't even have them, because they are only in one function >.<
05:50  Cam: I shouldn't make them class variables.
05:51  magcius: Cam, I would make them module-level
05:51  Cam: magcius; as in globals?
05:51  magcius: Cam, sort of
05:51  Cam: Ok.
05:52  magcius: Cam, the general rule is: if a function or something doesn't need "self", don't make it an instance function,
05:52  Cam: But a class contains it..
05:52  magcius: Why does it need to?
05:52  Cam: If I add this class to a HUGE file I might have a function names get_input and they would clash
05:52  SHJordan: cam commented lines become a problem on code?
05:52  Cam: SHJordan; Hm?
05:53  SHJordan: sorryu
05:53  Cam: SHJordan; Those were for debugging.
05:53  SHJordan: can*
05:53  magcius: SHJordan, depends on what you consider a commnet
05:53  magcius: Cam, he wasn't talking to you
05:53  SHJordan: seems to be the problem
05:53  Cam: Oh ok.
05:53  SHJordan: on that
05:53  Cam: SHJordan; no, he was talking to me.
05:53  SHJordan: i'll show you
05:53  Cam: magcius; 23:52 <  SHJordan> cam commented lines become a problem on code? -> "Cam"
05:53  Cam: Unless me meant "can"
05:53  magcius: Cam, right, he meant "can"
05:53  Cam: Alright.
05:54  Cam: magcius; Thanks so much, I will report back!
05:54  magcius: Cam, hold on a minute, I'll show you what I mean
05:54  Cam: Ok....
05:54  magcius: Cam, additionally, construct_msg is a bit confusing
05:54  magcius: Cam, one-liners aren't appreciated that much in Python
05:54  Cam: >.<
05:54  Cam: Alrighty.
05:54  SHJordan: http://codepad.org/DSg1NDhd <<< the comment after the code, was before it. and were returning incorrect code
05:54  Cam: I could loop.
05:54  SHJordan: code = output xD
05:54  Cam: SHJordan; remove the encoding.
05:55  coldpizza72i: whats the pastebin to use
05:55  magcius: SHJordan, right, I said that the the encoding needs to go at the top of the file
05:55  Cam: Also, SHJordan no need for "pass".
05:55  magcius: coldpizza72i, you can use anything you want
05:55  magcius: SHJordan, if there was the comment before it, the encoding wasn't at the top of the file
05:55  SHJordan: Cam: that's default on pyscripter, that's why i'm asking
05:55  magcius: coldpizza72i, as long as it's a pastebin: http://paste.pocoo.org/, http://codepad.org/, http://fpaste.org
05:55  Cam: SHJordan; Oh..
05:55  magcius: Cam, the pass is for empty blocks
05:56  Cam: magcius; Hm?
05:56  magcius: er
05:56  magcius: sorry
05:56  Cam: No need to pass a function if there is content in it >.<
05:56  coldpizza72i: im not tooo family with python classes..... but why is this printing like the memory addresses http://pastebin.com/wFV1PT7W
05:56  magcius: meant to talk to SHJordan
05:56  infobob: http://paste.pocoo.org/show/279474/ (repasted for coldpizza72i)
05:56  magcius: coldpizza72i, don't use __slots__
05:56  Cam: coldpizza72i; Let me fix it and explain
05:56  Cam: brb cycling internet
05:56 --- tarpsocks is now known as asperchu
05:56  verte: asperchu: please stop that
05:56  coldpizza72i: magcius: what should i use
05:57  asperchu: stop what
05:57  papna: coldpizza72i: The default way to print an object is what you're seeing.
05:57  verte: rename rename rename
05:57  verte: it's spammy
05:57  papna: coldpizza72i: To define a non-default way, you'd define a __str__ method.
05:57  papna: coldpizza72i: Rather than slots, use nothing.
05:57  asperchu: i think if you'll look, i haven't changed my name in at least 10 minutes
05:58  papna: coldpizza72i: Your for loop is highly misguided. You mean `for bag in bags: print bag`
05:58  dash: hay guys
05:58  SHJordan: magcius: http://codepad.org/jscAZPh8 you're absolutely right. working flawless now THANK YOU! ;D 1k $HJ to you! ;D
05:58  dash: plz review my code
05:58  Cam: brb internet
05:58  Cam: dash; :3
05:59  magcius: coldpizza72i, http://paste.pocoo.org/show/279477/
06:00  SHJordan: lol... with utf8 it becomes FUGLY
06:00  dash: http://paste.pocoo.org/show/279478/
06:01  SHJordan: i'll be using latin1 on windows
06:01  dash: it is a program i wrote.
06:01  SHJordan: gonna try the same code on linux later
06:01  dash: (not finished)
06:02  SHJordan: dash: what does it do?
06:02  dash: SHJordan: it's like dicts
06:02  dash: except it's immutable
06:03  SHJordan: hmm
06:04  dropdrive: status
06:04  verte: alive
06:04  SHJordan: s = u.encode('latin1') <<< great and does not change what i wrote on the pad. but s = u.encode('utf') outputs this: HÃ¼sker DÃ¼ => <type 'str'>
06:04  Cam: Who wrote that code..
06:04  Cam: The bags code.
06:04  Cam: I have a fix for you.
06:05  Cam: Don't make me look at my logs.
06:05  verte: SHJordan: your terminal will only be in one encoding, that is the only encoding you should give it
06:05  papna: Cam: He left.
06:05  Cam: Faawwkkk
06:05  Cam: papna; http://pastebin.com/1A6DRUad was that what he wanted?
06:05  infobob: http://paste.pocoo.org/show/279480/ (repasted for Cam)
06:05  Cam: Thanks infobob.
06:06  Cam: coldpizza72l.
06:06  Cam: Did infobob REALLY notice me about my shitty pastebin choice? The dude originally pasted in PB.com and so I did the same.
06:07  verte: that's not a notice, that's a reply in channel
06:07  verte: (and yes, we can't stand reading pb.c)
06:08  Cam: verte; he noticed me.
06:08  Cam: 00:05 [notice(infobob!~infobob@python/bot/infobob)] in the future, please use a less awful pastebin (e.g. paste.pocoo.org) instead of pastebin.com.
06:08  SHJordan: verte: where can i set my terminal default?
06:08  papna: Cam: Your replacement is misguided. I think magcius's version is what he wants.
06:08  Cam: papna; can I get a link?
06:08  Cam: I pinged out..
06:08  verte: cute
06:08  verte: SHJordan: on windows? probably a locale thing. you might need to install something.
06:08  magcius: Cam, http://paste.pocoo.org/show/279477/
06:09  magcius: Cam, also, I'm rewriting your alarm code at the moment
06:09  Cam: magcius; ogawd.
06:09  Cam: magcius; out of 10, was it at least a 6?
06:09  magcius: Cam, it was certainly better than the shit I see daily
06:09  Cam: Hrmmm
06:09 * Cam didn't know abs
06:10  SHJordan: verte: using latin1 is OK for accentuation and other cyrillic chars. I'm just wondering why utf-8 isn't displaying it right. you know?
06:10 * Cam didn't know abs() was a default command.. he thought it was part of math.*
06:10  verte: SHJordan: your terminal doesn't know the difference, all it sees are bytes
06:14  verte: so, if you have a unicode string which you write as utf-8 and someone else reads as latin1, they will get different text, even though the bytes are the same. your ü will come out as two characters to them, for example.
06:15  verte: dash: is the comment at the top still relevant?
06:17  tkup: Hi, can someone please take a look at the error I'm getting: global name 'pdesc' is not defined. http://fpaste.org/cWZ1/
06:17  papna: tkup: pdesc isn't a thing.
06:17  papna: tkup: Also, it looks like you want append, not to use indices.
06:17  papna: Also, use 4-space indents.
06:18 --- asperchu is now known as tarpsocks
06:19  tkup: papna, if pdesc isn't a thing so is pval. No?
06:19  papna: tkup: Somewhere else, you'd have to do `pdesc = `, which you didn't.
06:20  papna: tkup: Also, don't use the readlines method of file ever. Do `for line in f`.
06:24  Ademan: is there a list of operator names somewhere? I didn't notice one in the operator module, but maybe I missed it
06:24  papna: Ademan: What's an operator name?
06:24  papna: You might be looking for http://docs.python.org/reference/datamodel.html
06:25  Ademan: papna ['__eq__', '__lt__', '__mul__, ...] and I literally mean a list
06:26  Ademan: oops missing single quote
06:26  magcius: Cam, almost done
06:26  papna: Ademan: What? Why?
06:26  Cam: magcius; No problem.
06:26  verte: Ademan: there's a big ugly list in pypy, in the objspace somewhere
06:27  Ademan: papna: I want to filter the output of dir()
06:27  papna: Ademan: To what end?
06:28  Ademan: papna: to not have to look at every __*__ when I really just want to see what operators an object supports
06:28  papna: I don't understand at all.
06:28  verte: why not just filter out __*__ ?
06:29  Nisstyre65: Ademan: dir is a list, so you can do whatever you want to it
06:29  Nisstyre65: I mean dir outputs a list
06:29  amstan: hey guys, i have a c++/python hybrid project. How could i access a c++ file stream from python?
06:29  Ademan: verte: well I want an operator, but NOT __superclass__ __init__ __class__ etc
06:29  verte: pypy.interpreter.baseobjspace.ObjSpace.MethodTable is the one I was thinking of
06:30  Ademan: sounds like I just need to construct a little list for myself though
06:30  Ademan: verte: thanks, I'll probably avoid depending on pypy when I'm inspecting objects ;-)
06:31  verte: it's a good start, though
06:31  Ademan: indeed
06:31  George_e: I have a question about the gettext module... if I have one module that creates a translation object, how can I access it from another module? The first module imports the second.
06:31  George_e: Alternatively, a 'global' object would be nice.
06:32  Ademan: that *is* a big ugly table verte, thanks
06:32  Ademan: a regex or two away from being useful I think
06:32  verte: George_e: if module x has a name y, then other modules can access it as x.y after importing x
06:32  amstan: nvm, how can i access a C FILE*, from python?
06:32  dash: amstan: what're you doing?
06:33  amstan: dash: i'm extending this c app with some python, and the C is oppening a tempfile for storing something big, i want to be able to access that from python too
06:33  George_e: verte: Yes, but continuing your example, y wants to reference something in x - but x imports y.
06:33  George_e: How does that work?
06:33  Ademan: ctypes
06:34  dash: Ademan: no
06:34  amstan: it's this filestream class: http://github.com/amstan/hyperserv/blob/master/src/shared/stream.cpp
06:34  verte: George_e: y could also import x, or x could do y.foo = bar
06:34  dash: amstan: hmm. why not wrap the C++ code as an extension module?
06:35  Ademan: dash: if we assume that his goal is a good idea in the first place, why not ctypes?
06:35  dash: Ademan: 'cause there are way better ways to interface with C
06:35  George_e: verte: Hmmm.... I'll try that last one.
06:35  Ademan: if by better you mean tied to CPython, sure
06:35  amstan: dash: it's more complicated than that, there's a lot more c++ code than python
06:35  Cam: magcius; Shall I race to the end?
06:35  magcius: Cam, sure
06:36  Cam: magcius; I am *just* startingnow.
06:36  dash: amstan: that doesn't matter much :)
06:36  papna: Ademan: Not really.
06:36  Biaise: Good night
06:36  verte: Ademan: he means that with the other methods, you don't have to do a bunch of type mangling and definition yourself
06:36  Cam: Blaise!
06:36  amstan: dash: at this point the hybrid stuff works, i just want an extra feature, i don't want to redesign from scratch
06:36  papna: Ademan: IronPython has the potential of working with Cython.
06:37  verte: you know what would be cool? something that generates ctypes interfaces from C source
06:37  papna: Ademan: And I don't think Jython has ctypes.
06:37  armence: What does that error mean: ImportError: cannot import name MuseumObject ?
06:37  armence: It doesn't seem very descriptive
06:37  dash: verte: ha ha.
06:37  papna: armence: You did `from foo import MuseumObject`, but there's no such thing in foo.
06:37  Cam: magcius; I am not going to do it right now. Too tired
06:37  papna: armence: Either you have circular imports or simply don't define such a thing.
06:38  papna: armence: Also, "MuseumObject" doesn't sound like a good name.
06:38  dash: amstan: so you want PyFile_FromFile probably
06:38  magcius: Cam, good luck then! http://fpaste.org/d0NU/
06:38  Cam: magcius; Thanks!
06:39  amstan: dash: yeah, thanks
06:39  armence: papna, OK, I fixed it. Why is it a bad name? It refers to an object that is stored in a museum...
06:39  Cam: magcius; holy shit, so organized.
06:39  Ademan: papna: Jython does have it, which makes ctypes portable to all four "major" python implementations, suggesting Cython ties you to CPython and if you're really, really lucky, you might be able to use IronPython one day. No thank you
06:39  magcius: Cam, :)
06:39  verte: MuseumItem then. Object has connotations.
06:39  Cam: magcius; teach me your magic.
06:39  magcius: Cam, no magic. Years of coding.
06:40  papna: Ademan: ctypes extensions often don't work, frequently quietly.
06:40 * Cam sticks with magcius.
06:40  Cam: What is @property?
06:40  armence: verte ok... I see...
06:40  magcius: Cam, after a while you learn the many tricks
06:40  Cam: Also, what is "hr, _, mn" why _?
06:40  papna: Ademan: And "really, really lucky, you might be able to use IronPython one day" isn't a great assessment of the state of such things.
06:40  Cam: What is @property though..
06:40  papna: Ademan: If by the last you mean PyPy, I thought that also worked, but have zero experience.
06:40  Nisstyre65: Ademan: what about something like this? http://pastie.org/1244281 maybe not the best solution
06:41  dash: Ademan: whatever, cpython is the only thing people use for real python programs
06:41  papna: Except when they don't.
06:41  magcius: Cam, http://docs.python.org/library/functions#property
06:41  Cam: magcius; why .partition, why not .split()?
06:41  Ademan: papna: the last? Cython generates a ton of code that directly accesses CPython struct internals
06:42  magcius: Cam, I'm a bit more used to it, since it always generates a three-tuple instead of a variable-length-list
06:42  Cam: magcius; Ok
06:42  verte: you've also got to consider the whole cpyext/ironclad thing
06:42  papna: Ademan: IronPython and I thought PyPy have stuff for interfacing with that.
06:42  magcius: Cam, "a:b:c".partition(":") would return "a", ":", "b:c"
06:42  Cam: wtf? Why would you want that
06:42  magcius: Cam, the middle part is just the separator you pass in.
06:42  Ademan: dash: and this will continue to be the situation until the end of time, so we should make CPython the only implementation we can interface with
06:42  magcius: Cam, it's so that you can ''.join the tuple and get back the original string, however useful that is
06:43  magcius: Cam, the reason that I use it is that string.split will generate a list
06:43  Ademan: papna: well PyPy can in theory interact with *well behaved* CPython extensions, which means *not* poking around in internal structures, because they don't exist in PyPy.
06:43  Cam: magcius; oh....
06:43  Cam: magcius; @property allows multiple functions to have the same name?
06:43  papna: There's no reason Cython couldn't be used to generate stuff for other APIs anyhow.
06:43  Cam: Basically.
06:43  magcius: Cam, it could be variable-length, ["a", "b", "c"] for hte example above
06:43  dash: Ademan: Prediction is hard, especially about the future.
06:43  Ademan: papna: as far as IronPython, I believe they create some proxy structs, so it may handle it better, but last I heard that compatibility was very flaky
06:43  magcius: Cam, that would break with hr, mn = hour_minute.split(":")
06:43  Cam: oops.
06:43  magcius: Cam, that would break with hr, mn = hour_minute.split(":")
06:43  papna: Ademan: IronClad seems to work quite well.
06:43  Cam: magcius; No..
06:44  magcius: Cam, if hour_minute is "a:b:c:d", sure it will
06:44  verte: Cam: a property overrides attribute access for a given name
06:44  papna: The thing with ctypes is you don't ever look at the header, so you cannot assess whether your code is utterly insane.
06:44  Cam: magcius; if it is ":" it will get rejected by my check function :)
06:44  Cam: is "a:b:c" *
06:44  Ademan: papna: that wasn't my impression at all, but I haven't personally used it
06:44  magcius: Cam, it would actually break before that
06:44  magcius: Cam, if it was "12:34:56" it would break
06:45  Cam: magcius; My function would get it with the int() check.
06:45  papna: Ademan: NO AMBIGUOUS ANTECEDENTS
06:45  Cam: int ("24:56") is an error.
06:45  magcius: Cam, it would break before that
06:45  Cam: >.>
06:45  Ademan: papna: regarding IronClad*
06:45  Nisstyre65: http://www.youtube.com/watch?v=DybE_cNHJP8
06:45  Nisstyre65: oops
06:45  Nisstyre65: wrong channel
06:45  Cam: magcius; why pass then raise Error?
06:46  Cam: Why not raise it in the except?
06:46  Ademan: as far as ctypes goes, that's true about the headers, but we can certainly generate type information from headers somewhat reliably
06:46  magcius: Cam, there could be cases where we don't return things, and still don't raise an error
06:46  Cam: Oh.
06:46  Cam: I seee.
06:46  Cam: So if it gets there.. after missing 3 returns it will error?
06:46  Cam: magcius; did you test it?
06:47  magcius: Cam, "after missing 3 returns"?
06:47  Cam: magcius; nevermind.
06:47  magcius: Cam, for all I could, yes
06:47  Ademan: brb though, I need to relocate
06:47  Cam: magcius; I am going to time our two codes.
06:47  Cam: And see whose is faster.
06:47  amstan: dash: so why does PyFile_FromFile need the name and mode, shouldn't FILE *fp be enough?
06:48  magcius: Cam, why does it matter whose is faster?
06:48  Cam: magcius; because that is the better code, is it not?
06:48  magcius: Cam, no, not at all
06:48  Cam: >.
06:48  Cam: Most efficient is best.
06:48  magcius: Cam, the better code is the one you can easily change and adapt
06:48  magcius: Cam, as I said, 16 years
06:48  magcius: Cam, I've been in the business a while
06:48  Cam: magcius; my years of two trumps your years of many.
06:48  magcius: If you wanted the most efficient code, write in assembly language or C, not python
06:48  Cam: :)
06:49  Cam: I see what you are saying.
06:49  Cam: I have an IRC bot that I can adapt easily.. well put.
06:49  magcius: right
06:49  magcius: count on maintainability
06:49  magcius: which is "if I die, can someone else pick this up and work on it right afterwards"?
06:49  magcius: lvh had a great article on it recently
06:49  armence: magcius, Actually, I seriously doubt many people could write more efficient assembly than a C optimizer
06:50  magcius: armence, right
06:50  magcius: armence, believe me, I know
06:50  magcius: armence, for the longest time the instruction sets have been for the compilers, not for the human
06:51  magcius: armence, but still: http://catb.org/jargon/html/story-of-mel.html
06:51  Cam: magcius; <3
06:51  samsjl: is there a simple python function where i can convert one time stamp to another, based on the ISO standards, so like transform an MM-DD-YYYY HH:mm:ss to M-D-YY H:mm
06:52  samsjl: id rather not have to do regular expressions and things
06:52  armence: magcius, I remember reading this. Honestly, the only reasons to write assembly these days are hardware code (only a little bit), boot loaders (again, only a little bit) and masochistic fun.
06:52  samsjl: my own regular expressions, splitting up variables, etc*
06:52  magcius: samsjl, strftime and strptiem?
06:53  magcius: armence, yep
06:54  amstan: for PyObject* PyFile_FromFile(FILE *fp, char *name, char *mode, int (*close)(FILE*)), what does int (*close)(FILE*) do?
06:54  teratorn: amstan: looks like it's a function pointer
06:55  amstan: teratorn: to what?
06:55  teratorn: amstan: it's not documented?
06:55  amstan: nope
06:56  teratorn: amstan: well, I guess you need to read some sources
06:56  samsjl: magcius thank you i think thats what im looking for, will try it
06:57  dash: amstan: yes it is
06:57  dash: http://docs.python.org/c-api/file.html#PyFile_FromFile
07:21  conathan: hmm,  what is the return type of PyMarshal_WriteObjectToString?  I tried using PyObject_Print, which causes a segfault
07:22  initx: What edit tools do you use in linux for dep. python
07:23  verte: dep?
07:31  initx: developer
07:32  initx: like Geany VIM, EMACES etc. etc.
07:33  roryy: eMace - effective troll removal
07:33  verte: :)
07:34  verte: most here use emacs or vim, though there are (eclipse + pydev) users and users of dedicated python editors and IDEs
07:34  initx: o
07:36  initx: sounds vim is best for me
07:37  detly: I have ftp access to a webserver, but no shell access. I know it has python 2.5.1 installed and able to be used for CGI, but I don't know what modules are installed ... is there a way to do this from within a python script?
07:38  verte: do what?
07:38  detly: oops
07:39  detly: to see what modules are installed
07:39  detly: sorry, type speed > brain speed sometimes
07:39  detly: third party modules, to be more specific
07:39  verte: maybe iterate over sys.path, listing directories
07:40  detly: good thought
07:40  detly: should give me enough to go on
07:41  detly: okay, thanks :)
07:53  forrestv: is there a name for the process of removing print statements used for debugging? :/
07:53  verte: not specifically, but there should be
07:53  teratorn: forrestv: decrapification
07:53  verte: we use the term decruft, but that applies more broadly
07:54  verte: dedebugprinting?
07:55  papna: "Cleaning up"?
07:57  papna: Someone needs to get the word out.
07:58  papna: stdout isn't somewhere you just dump stuff.
07:58  papna: stdout isn't a big truck.
07:59  verte: teratorn: I had no idea you were an op. that's new.
08:00  teratorn: quite an old one, actually :)
08:00  Brend: They make just anyone an op these days
08:00  teratorn: i got seniority and shit
08:03  NelleV_: Brend: are you op ?
08:03  verte: NelleV_: is he anyone?
08:04  verte: (is that a Ginsberg quote?)
08:04  NelleV_: that was the question :p
08:04 --- NelleV_ is now known as NelleV
08:04  verte: yes, he is an op
08:05  NelleV: they really make anyone an op these days :p
08:05  KB1JWQ: Yup. :-)
08:05  verte: he's been an op since before I was a programmer
08:06  NelleV: verte: since when are you a programmer ?
08:06  NelleV: (this discussion shouldn't really be here)
08:06  verte: probably coming up to three years?
08:06  verte: indeed
08:07  Brend: NelleV, I am approximately vertical, but I have not yet had coffee.
08:08  NelleV: Brend: I have no idea what I'm supposed to understand from that...
08:09  verte: up/op
08:09  Brend: Oh!
08:09  Brend: Misread that. Maybe I should have some coffee.
08:10  NelleV: yeah, I think you should... What time is it in your very far far away country ? o_O
08:10  Brend: 2pm
08:11  NelleV: Brend: then take at least 3 cups...
08:24  inari: anyone awake?
08:25  verte: no
08:25  inari: good
08:26  inari: i wonder if it is possible to loop over the actual array here: http://fpaste.org/B5XJ/
08:27  inari: as in not it's length..
08:28  verte: you could always iterate over zip(posarray[1:], posarray)
08:28  verte: er, zip(posarray[1:-1], posarray), so you don't get the last element
08:29  inari: just feels, well, not perfect..
08:29  inari: but that is better..
08:29  verte: you could also use enumerate to avoid one of the indexes, but meh
08:30  inari: don't bother with it?
08:30  verte: yeah
08:30  inari: thanks though!
08:30  verte: no worries
08:30  inari: never any worries..
08:57  mouche: hi. I have a for loop to count to 100, but I'd like 0's to fill in the digits that are empty (001, 002, etc.). I know I've done this before, but I can't remember how. Anybody know?
08:58  verte: '%02d' % (i,)
08:58  mouche: verte, ah, there we go. thanks
--- Log closed Sun Oct 24 09:04:49 2010
--- Log opened Sun Oct 24 09:05:13 2010
09:05 --- Users 679 nicks [0 ops, 0 halfops, 0 voices, 679 normal]
09:06  verte: I'm pretty sure you need to do something in your environment to activate your virtualenv, so the user apache is running your wsgi app in probably needs to do the same thing
09:06 --- Channel #python was synced in 95 seconds
09:07 --- mikemac is now known as mikemac_
09:08  dark_soul: hmm
09:14  amstan: what's the worst that can happen if i have an open("/tmp/%s.ogz" % (name)), where name is an unsanitized string from the user?
09:14  verte: you may read sensitive data
09:14  amstan: you can have name=../etc/passwd, but it'll still append .ogz
09:15  amstan: so it'll try oppening /etc/passwd.ogz
09:15  amstan: is there a way that the user could make that ogz be ignored?
09:16  verte: not sure
09:16  verte: how does it deal with embedded nulls, for example?
09:28  amstan: well, how could i sanitze such an input?
09:29  Tze: amstan: Well I have no idea!
09:29  Tze: Oh thought you highlighted me. Stupid client picked the tze in the word though.
09:30  dr0id: python or ruby ?
09:30 --- ChanServ sets modes [#python +o verte]
09:31 <-- verte has kicked dr0id from #python (dr0id)
09:31 --- ChanServ sets modes [#python -o verte]
09:33  ssbr: Tze: Get a better client. :(\
09:34  Tze: Well it is a conversation starter
09:35  ssbr: bad clients are bad conversation starters. Good conversation starters include good clients and video games
09:38  verte: anyway, we have #python-offtopic for that
09:50  richardus: cprofiler question: what's the difference between tottime and cumtime?
09:51  ssbr: richardus: http://docs.python.org/library/profile.html#module-pstats
09:51  ssbr: (cumtime includes calls to subfunctions)
09:52  richardus: well damn, i was on the right manual page but wrong section.  thank you
09:52  verte: those are inappropriate sounding classifications
09:52  ssbr: richardus: when reading documentation, I tend to ctrl+f a lot.
09:52  ssbr: I just did ctrl+f for total.
09:53  verte: forward a character?
09:53  ssbr: verte: in what web browser does ctrl+f do that?
09:54  verte: oh, right. well, conkeror, but that's fairly unique. search should be C-s consistently!
09:55  ssbr: but then what would save be?
09:55  verte: how often do you save in a web browser?
09:55  ssbr: you seem to be out of touch with common keyboard conventions from the past decade or two.
09:55  ssbr: verte: fairly often.
09:55  verte: C-x w probably
09:56  ssbr: Unlikely.
09:56  ssbr: Conventions from a single editor to not override conventions from three different desktop environments on two different operating systems.
09:56  verte: if I save a page, I use wget's recursive feature
09:56  ssbr: Well, that's a lie.
09:56  ssbr: Actually it's more like four different desktop environments on like 20 OSes
09:56  ssbr: but I would prefer to understate my case.
09:57  cnf: i just press ⌘S
09:57  verte: if they are better, of course they should
09:57  ssbr: Sorry, I think it should actually be five different desktop environments.
09:57  ssbr: It might even be six.
09:57  ssbr: verte: what does "better" mean? Does it mean it will cause the greatest increase in productivity?
09:57  ssbr: switching to emacs keybindings won't do that.
09:58  verte: of course
09:58  ssbr: Even my mother uses keyboard shortcuts, and they are the windows standard ones.
09:58  ssbr: And it took her nearly twenty years to learn to do that.
09:58  verte: of course it will. having navigation at nearly-home-row makes a huge productivity difference.
09:58  ssbr: verte: you're ignoring the human factor.
09:58  cnf: keyboard shortcuts are overrated
09:59  ssbr: My mother isn't going to learn new keybindings. She's just going to get confused and switch to the GUI. You'll undo 20 years of effort.
09:59  cnf: people can use a handful, maximum, efficiently
09:59  cnf: after that, they slow you down
09:59  verte: CUA neumonics aren't any easier to read than emacs ones, in general
09:59  verte: recall
10:00  cnf: consistency across your OS does help keep the number of shortcuts you need to know down, though :P
10:00  ssbr: oh goodness yes, I forgot. Consistency!
10:00  ssbr: think of all the apps that must be upgraded...?
10:00  ssbr: This is simply an unthinkable proposition.
10:00  verte: is it?
10:00  verte: I think it should be done
10:01  ssbr: verte: Yeah, it should be, if you could actually do it without breaking consistency and usability of everything that isn't emacs, for the next decade.
10:01  verte: I don't use anything without emacsy keyboard bindings now, and life is much nicer
10:01  ssbr: But you can't, so it shouldn't be.
10:01  cnf: what should be done?
10:01  cnf: oh, i'm not a fan of emacs keybinds
10:01  cnf: meh
10:02  verte: cnf: the short answer to that is, everything should be converted to use emacs keybindings
10:02  ssbr: verte: the end point is that you know damned well what I meant by ctrl+f, and I'm bloody sick and tired of console-mode fanatics insisting on "correcting" my usage of it. I don't get what's so tempting about "ctrl+f" that you must bring up that this is a thing that is only used in *most* of the computing world.
10:02  verte: cnf: the long answer is, why isn't there a common way to let the user specify their keybindings? you have to configure for each app.
10:02  ssbr: Instead of, I guess, your part.
10:02  cnf: verte: they are consistent across all my apps
10:02  cnf: verte: and that includes part of emacs keybinds
10:03  verte: ssbr: impedence mismatch, I'm just not that quick
10:03  ssbr: verte: ...
10:03  ssbr: verte: Get out of your hole, then.
10:03  cnf: also, once again, you can only use a handful of shortcuts efficiently
10:03  cnf: more then that actually slows you down
10:04  verte: cnf: very true
10:04  spinningcompass: I'm so confused.
10:04  cnf: and the reason that, for example copy and past are c and v, is because cut is x and undo is z
10:04  cnf: they are next to each other
10:04  cnf: it's that simple ^^;
10:05  Jacob-: Text editor talk? I like Geany.
10:05  ssbr: Jacob-: keybinding talk. Subtly different.
10:05  verte: Jacob-: keybindings
10:05  Jacob-: Aha. Well, I have little to say about that. I usually take what they give me.
10:05  Ademan: everything should be modal!
10:05  ssbr: also Geany is the editor of heathen witches.
10:06  Jacob-: Aw c'mon. Geany works. ;)
10:06  ssbr: Jacob-: yeah but sometimes what they give you is amazingly right! or wrong!
10:06  ssbr: unix graphical editors pathologically insist on "shift" being the "do the opposite" modifier key, and it's pretty cool. And emacs does the same sort of thing with C and M IIRC.
10:07  verte: that's kind of the point, though. you find something 'right', and you can't have it in more than the one place.
10:07  ssbr: verte: that's a different issue.
10:07  cnf: verte:  btw, on a mac, "regular" keybindings are done with the command ket
10:07  ssbr: verte: nobody in their right mind would disagree that being able to modify keybindings for all apps would be great.
10:07  cnf: verte: but control emacs bindings work almost everywhere
10:08  ssbr: actually IIRC mac was pretty damned configurable in this regard
10:08  cnf: verte: and i have a keybindings file that lets me rebind 95% of all stuff there, for all cocoa apps
10:08  verte: oooh.
10:08  cnf: ~/Library/KeyBindings/DefaultKeyBinding.dict lets me rebind close to anything
10:09  cnf: verte: http://github.com/walter/additional-mac-os-x-emacs-key-bindings/blob/master/DefaultKeyBinding.dict as an example
10:10  cnf: verte: also, anything in here can be remapped, at least http://www.hcs.harvard.edu/~jrus/Site/System%20Bindings.html
10:11  cnf: also, my mac doesn't have a caps lock ^^;
10:11  cnf: it has 2 control keys
10:13  Jacob-: I was offered a free iMac the other day. An old one from 1999 or so.
10:14  Jacob-: Only reason I refused was I didn't have the means to pack it home.
10:14  cnf: it's ok
10:14  cnf: they have places where they sell new ones
10:14  verte: very nice
10:14  dark_soul: can someone look at this traceback and enlighten me a little: http://dpaste.com/262806/
10:15  verte: dark_soul: you ran out of memory
10:15  Jacob-: New Macs only cost you arms, your legs, and your soul.
10:15  ssbr: dark_soul: what the heck created that traceback?
10:15  ssbr: also, you ran out of memory. FUn.
10:15  dark_soul: Verte & ssbr: django/mod_wsgi/virtual env/python2.6
10:15  dark_soul: that combo
10:15  dark_soul: i can't figure what the heck is going on
10:15  ssbr: must be wsgi.
10:15  ssbr: dark_soul: you ran out of memory
10:16  dark_soul: something misconfigured then
10:16  verte: oooh, or not. really, invoked from C?!
10:16  dark_soul: cause there's no way i ran out of memory
10:16  dark_soul: for a simple app
10:17  verte: could be a PIL bug
10:17  verte: this could be interesting
10:17  dark_soul: everything works fine if i use the django development server
10:17  dark_soul: i'm runninng Centos 5.5
10:17  cnf: Jacob-: don't be silly
10:18  ssbr: Jacob-: Yeah, don't exaggerate. They only cost your soul.
10:18  dark_soul: python2.6 is an altinstall and virtualized
10:18  Jacob-: I do want a Mac at some point. I've never worked with a big endian machine, not that it's very Python related.
10:19  cnf: Jacob-: you know macs are intel based, right?
10:19  dark_soul: Mac will no longer be packaging and updating Java client on their OS, if thats of any useful information
10:19  Jacob-: Oh, right. So they're not big endian anymore?
10:19  ssbr: They've run on intel for years.
10:19  cnf: dark_soul: it's useful, it's good
10:19  MiratCanBayrak: hi when i crete instance of class, can i get name of creator? for example foo = FooClass(), i want to get "foo", from FooClass()
10:19  pantsman: those quirky macs, I hear they use \r for line endings too!
10:19  ssbr: Jacob-: I thought PPC was Bi-endian.
10:20  cnf: we shouldn't be using java on the desktop anymore
10:20  ssbr: Or was it both? You know I never really knew what bi-endian meant anyway.
10:20  verte: MiratCanBayrak: variable names don't mean anything
10:20  cnf: pantsman: same line endings as most any unix
10:20  ssbr: MiratCanBayrak: Nope.
10:20  verte: MiratCanBayrak: a good compiler will eliminate them where possible
10:20  pantsman: cnf, o rly
10:20  ssbr: cnf: he's making a joke about 9-
10:20  ssbr: or maybe he's not.
10:20  dark_soul: guys, lets put our (yours rather, since i'm out of ideas, really) brains together and try to solve this problem i have
10:20  cnf: ssbr: :P
10:20  ssbr: pantsman: OS X is Unix.
10:20  ssbr: that means \n.
10:20  pantsman: I know, ffs.
10:21  ssbr: Then don't act like you don't.
10:21  MiratCanBayrak: verte, ssbr ,how django does it? when you create form instance django gets its name from creator
10:21  dark_soul: think of it like a game puzzle
10:21  ssbr: MiratCanBayrak: Django does not get the name of the variable you put it in.
10:21  cnf: Jacob-: and no, they aren't
10:21  verte: MiratCanBayrak: I don't know what 'creator' means in that case, but no idea, you'd have to ask the django people. django does some really gross things.
10:22  ssbr: verte: it doesn't do anything *that* gross.
10:22  pantsman: I forget that people here assume "idiot" before "sarcastic dick"
10:22  MiratCanBayrak: ssbr, where it does? when you create form element like name = TextInput, than you render it it render <input type="text" name="name"..
10:22  ssbr: pantsman: excuse me? I assumed sarcastic dick first.
10:22  ssbr: pantsman: and then you pushed the joke too far, and I reverted to "idiot".
10:23  MiratCanBayrak: okey ill ask there
10:23  dark_soul: maybe i should open a ticket with PIL
10:23  cnf: pantsman: yeah, it's a safer bet :P
10:23  dark_soul: although i think they haven't updated their package for a while
10:23  dark_soul: iirc
10:23 * NelleV counts the points
10:23  pantsman: cnf, true
10:23  ssbr: MiratCanBayrak: what are you talking about exactly?
10:24  verte: dark_soul: really unusual that it fails in ctypes init
10:24  dark_soul: verte: what does that even mean
10:25  dark_soul: i'm still new to python..1.2 years actually
10:25  dark_soul: my first programming language
10:25  verte: it fails when importing ctypes, which means that ctypes doesn't start. why is that? maybe something special about the apache user?
10:26  dark_soul: the weir d thing is it runs find using django's testing webserver
10:28  MiratCanBayrak: ssbr, i am creating an instance of an object, i need to get creators name, for example when i create foo instance of FooClass / foo = FooClass() / i need to get "foo" from my class, is it clean?
10:28  pantsman: that would suggest there's nothing wrong with the module itself
10:28  pantsman: but something else funny going on
10:28  verte: dark_soul: my ctypes is only 538 lines long, yours fails on line 546 :)
10:28  dark_soul: verte: thats very comforting
10:28  pantsman: haha
10:30  ssbr: MiratCanBayrak: you can't.
10:31  MiratCanBayrak: ssbr, django does :\ i need to learn how
10:31  pantsman: MiratCanBayrak, sounds like a dubious "need"
10:31  ssbr: MiratCanBayrak: django does something different.
10:31  Jacob-: MiratCanBayrak: at the risk of an arcane explanation, why do you need that?
10:31  ssbr: MiratCanBayrak: you can't do what you're asking for, and Django doesn't do it.
10:31  verte: MiratCanBayrak: I think you may just misunderstand what django does
10:31  pantsman: MiratCanBayrak, Django doesn't get it from FooClass
10:31  ssbr: Django looks at the contents of a class. That's all.
10:31  ssbr: i.e. if you have class X: foo = bar() , you can introspect X to associate bar() with 'foo'
10:31  ssbr: but you can only do this *after* the fact.
10:32  ssbr: and you can only do it with something like class contents, etc.
10:32  pantsman: pro tip: read the django code :)
10:33  ssbr: The Django code is full of terrible tricks that will give him bad ideas.
10:33  MiratCanBayrak: hmm, okay than ill try to find another way thanks
10:33  pantsman: yeah, true, but if it's his aim to do what django does...
10:33  ssbr: pantsman: then his aim is misguided
10:33  ssbr: (my god, the metaphors overlap!)
10:34  Jacob-: I've never needed to muck with the details of classes and their creation in my Python stuff. In fact I'm somewhat intimidated by metaclasses.
10:34  ssbr: Jacob-: one never needs to.
10:35  teratorn: easy to say
10:35  verte: the name of a variable shouldn't matter to the code using it. it shouldn't be user visible in any possible way
10:35  ssbr: teratorn: it's very easy to say. Because it's true.
10:36  teratorn: right
10:36  ssbr: teratorn: it's also an easy principle to live by.
10:37  verte: and we know it is true, because many languages don't have these features
10:37  teratorn: maybe you should grep for __metaclass__ in Twisted
10:38  ssbr: the results, either way, would not change my opinion.
10:38  Jacob-: Once upon a time, I'd write __metaclass__ = type at the top level of my modules, so I could get newstyle classes without subclassing object.
10:38  Jacob-: But #python gave a collective hiss.
10:38  Jacob-: So I stopped. ;)
10:38  verte: :)
10:39  teratorn: ssbr: well it would indicate that you might need metaclasses 4 or 5 times in 100 Ksloc :)
10:39  ssbr: teratorn: No?
10:40  ssbr: teratorn: it would indicate that metaclasses are the right choice 4 or 5 times in 100Kloc
10:40  ssbr: teratorn: at *best*
10:40  ssbr: In reality, it would indicate that the Twisted developers thought that.
10:40  teratorn: *whatever*
10:40  verte: *totally*
10:40  ssbr: teratorn: what it does not indicate, is that you ever need metaclasses to get the job done.
10:40  teratorn: believe me, we avoid metaclasses whenever possible
10:40  ssbr: teratorn: Nor could anything indicate that, because it is false.
10:40  ssbr: teratorn: It is always possible.
10:40  teratorn: anything is possible
10:41  ssbr: teratorn: No, there are far more impossible things than possible things.
10:41  ssbr: teratorn: it would be infinitely more accurate to state that nothing is possible. But that would also be a lie. Just a more obvious one.
10:41  teratorn: ssbr: now you're just being annoying :(
10:41  ssbr: teratorn: No, you're being imprecise and wrong.
10:41  teratorn: uh hu
10:42  mr_daniel: What information can I pull from an exceptiopn, e.g. froma EOFError exception? On the documentation I can only find a short list and hierarchy of exceptions, but no descriptions what methods/attributes are available http://docs.python.org/library/exceptions.html
10:42  ssbr: mr_daniel: you can treat an exception object as a sequence. That's as much as is guaranteed.
10:43  ssbr: mr_daniel: some exception objects offer more, like specific attributes. e.g. an OSError should give you an errno attribute
10:43  ssbr: (All EnvironmentErrors, IIRC-- that means OSError, WindowsError, and IOError. I think.)
10:47  richardus: toy optimization question: is there a faster way to do "if not foo in list_of_foo:"
10:47  ssbr: richardus: yes: stop using lists.
10:47  ssbr: (also, please to be using the "not in" syntax)
10:47  verte: and use not in
10:48  Brend: I saw some code once that had "if not x not in y:"
10:49  LgZ-optical: blows your mind eh.
10:49  verte: probably thought not binds tighter than not in
10:49  verte: to be sure, I don't know
10:49  Brend: It doesn't
10:49  cheater99: Brend: maybe it was a refactor
10:53  varnie: i have a question. i have two modules, and first module is where program starts, i.e. it has '__main__' function. i have several functions in this module as well, and this 1st module has import 2nd_module. now i am wondering how to access these 2st module's functions in 2nd module?
10:53  varnie: *these 1st module's functions in 2nd module?
10:53  richardus: ssbr: noob question: what should i use in place of lists?
10:54  verte: varnie: you can't.
10:54  ssbr: richardus: you *should* use whatever makes the most sense.
10:54  mr_daniel: ssbr: how can I handle an exception as a sequence? If I understand correctly, then a sequence is a very general concept in python
10:54  verte: varnie: well, not sensibly.
10:54  ssbr: richardus: sets have O(1) containment while lists take O(n)
10:54  verte: varnie: move the functions out of the if __name__ == '__main__': module
10:54  mr_daniel: ssbr: can you tell me what the 'specific attributes' of EOFError are? Or better: what attributes EVERY Exception has?
10:54  verte: varnie: or pass them to the second module where needed.
10:54  ssbr: mr_daniel: e.g. errmsg, errcode = Exception("Error message", 12)
10:55  mr_daniel: the point is that I have a single catch-clause where I catch a lot of exceptions
10:55  varnie: verte, how can i 'pass' them to the 2nd module?
10:55  ssbr: mr_daniel: the only thing they all share is the sequence API.
10:55  verte: varnie: as an argument to the function that needs them.
10:55  mr_daniel: an example:
10:55  mr_daniel: except (socket.timeout,socket.error,paramiko.SSHException) as e:
10:55  ssbr: and equivalents to the sequence API, like an args attribute.
10:56  mr_daniel: and in the body I use 'str(e)' and 'str(e.reason)' to get useful information
10:56  mr_daniel: are there more useful things to print except str(e) and str(e.reason?)
10:56  verte: what was the story with .message?
10:56  verte: mr_daniel: tracebacks
10:57  verte: mr_daniel: see the traceback module for portable ways of formatting them
10:57  varnie: verte, i just want to make refactoring and to move some classes to standalone modules. but this classes invokes these functions... but they're from 1st module. and that's my problem.
10:57  verte: varnie: well, the first module can't be __main__, then
10:57 * ssbr is going to bed.
10:57  ssbr: I've said all I can. *shrug*
10:57  varnie: and these functions use some variables being instantiated there in __main__
10:58  verte: varnie: __main__ modules shouldn't have anything interesting in them. they should be about 10 lines max.
10:58  varnie: verte, good point. i fully agree.
11:09  Ademan: er, my version of urwid doesn't have TreeWidget, does yours?
11:09  Ademan: my version is: 0.9.9.1
11:09  s0nny: has someone tried to create a trigger (or executing the DELIMITER command) to a mysql db via mysql-python?
11:10  verte: s0nny: any reason you aren't using oursql?
11:11  s0nny: verte, which sql do you mean?
11:11  verte: rather than mysql-python
11:12  thyko: is that what django uses?
11:12  verte: I haven't heard of it. most of the world has gone MySQLdb, but that was really poorly implemented, so oursql was written
11:12  Ademan: please? python -c 'import urwid; print urwid.__version__; print hasattr(urwid, "TreeWidget");'
11:12  verte: Ademan: urwid isn't installed by default
11:13  Ademan: verte: well, someone has to have it installed...
11:13  s0nny: verte, i am trying to create a trigger on a custom table on a django app. But executing the DELIMITER command to the database to be able to create a complex statement in the trigger, i get a mysql error. The same command works in the mysql console.
11:13  s0nny: so i think the mysql backend does something with my query
11:14  verte: it probably does all sorts of hideous things
11:14  verte: which is why oursql might be worth a try
11:15  s0nny: since its a django app, i dont think that this is under my control.
11:15  verte: I don't know django, so I don't know. but I can't imagine why you wouldn't be able to tell it which dbapi2 driver to use.
11:16  s0nny: i just specify a backend implementation of the db connection, and django use mysql-python
11:21  s0nny: Ah, i got around this issue: i have simplified the trigger command so no delimiter is needed in the command.
11:33  __Hybris__: I get 'ImportError: No module named numpy' when running my program, even though I have numpy installed. WTH?
11:36  __Hybris__: Anyone know why I get that error?
11:39  thyko: is there a free private svn service out there? I would use google code but it then displays your commits to the entire universe
11:39  __Hybris__: Program-code: http://github.com/FranzZdyb/IntermediatePython/blob/master/euler166.py
11:39  thyko: __Hybris__: install numpy
11:39  thyko: *reinstall
11:39  ssbr: thyko: No. But there's free private hg.
11:39  ssbr: And free private other-DVCSes, also, most likely.
11:40  __Hybris__: thyko: Already reinstalled. Btw, git is great.
11:40  ssbr: And there's probably even a wrapper around hg that acts exactly like svn.
11:40  ssbr: (Bitbucket gives unlimited free private repos, provided you have fewer than five registered maintainers)
11:40  ssbr: (per repo)
11:41  ssbr: maintainers? project members.
11:42  thyko: ssbr: thanks man
11:42  damagednoob: __Hybris__, are you sure numpy is in your PYTHONPATH variable?
11:42  damagednoob: (environment variable)
11:43  __Hybris__: damagednoob: I haven't checked, but I've used this same python + numpy installation for a month. I don't know what could've changed.
11:43  damagednoob: aaah i c
11:50  __Hybris__: Dammit, rebooting didn't work.
11:50  KB1JWQ: __Hybris__: Is this a Windows box you're working on?
11:51  __Hybris__: __Hybris__: No, it's Arch Linux.
11:51  KB1JWQ: Talking to yourself is a sign of insanity. :-)  And rebooting almost never fixes things under Linux.
11:51  kerio: then why would reboot make it work
11:52  __Hybris__: KB1JWQ: Well, I tried everything I knew before rebooting. That was only a desperate last try..
11:52  KB1JWQ: Next is "defragment your hard drive." :-p
11:52  KB1JWQ: What's the exact error you're seeing?
11:52  __Hybris__: KB1JWQ: :P
11:52  __Hybris__: KB1JWQ: ImportError: No module named numpy
11:53  __Hybris__: KB1JWQ: I tried reinstalling numpy.
11:53  ssbr: You appear to be suffering from magical thinking.
11:53  ssbr: Debug the source directly.
11:54  ssbr: Does "import numpy" work?
11:54  __Hybris__: I'm doing everything like I usually do (and it works). http://github.com/FranzZdyb/IntermediatePython/blob/master/euler166.py
11:54  __Hybris__: ssbr: Nope, no variation of import numpy works. Wait, I'll try importing other modules.
11:54  ssbr: if so, the problem is interesting. If not, you have not installed numpy correctly on the version of python you are using.
11:54  ssbr: __Hybris__: then you need to install numpy.
11:55  __Hybris__: ssbr: Weird. Neither numpy nor scipy works, but re works.
11:55  ssbr: __Hybris__: that isn't weird at all.
11:55  ssbr: Install numpy and scipy.
11:56  __Hybris__: ssbr: Well, I've used numpy and scipy regularly for the last month, and suddenly it stops working. They ARE installed for sure.
11:56  ssbr: __Hybris__: Python disagrees.
11:56  __Hybris__: ssbr: I even made sure, and reinstalled numpy.
11:56  ssbr: They are not installed correctly.
11:56  ssbr: If you've reinstalled them, where are they installed now?
11:56  ssbr: what is sys.path?
11:58  __Hybris__: python is in /usr/bin/python
11:58  ssbr: __Hybris__: I didn't ask where python was installed.
11:58  ssbr: I asked where "they" were installed.
11:58  ssbr: This is after I told you to install numpy and scipy.
11:58  ssbr: Draw your own (sane) conclusions.
11:59  __Hybris__: ssbr: Oh, right. Just a second.
11:59  Ademan: is there a "good" way to find out what references a given object? (this is for debugging, not normal programming)
12:00  ryan[WIN]: oh hai
12:02  xro: hi, i have a simple question about unicode... how can i get the char from unicode? --> http://dpaste.com/262863/
12:02  __Hybris__: /usr/lib/python2.7/site-packages/numpy
12:03  __Hybris__: /usr/lib/python2.7/site-packages/scipy
12:04  ssbr: __Hybris__: and you're using python 2.7?
12:05  ssbr: what are the contents of /usr/lib/python2.7/site-packages/numpy ? if there's an __init__.py file, what does python -vc "import numpy" give you? (in a pastebin, please)
12:06  __Hybris__: ssbr: Yes.
12:06  __Hybris__: ssbr: Oh ****
12:07  deepy: It's not less rude if you censor it
12:07  __Hybris__: ssbr: I use IPython with python 2.7, but when I just run python, it's 3
12:07  __Hybris__: ssbr: Explains everything. Thank you for your patience.
12:07  ssbr: ipython for the lose yet again!
12:07  damagednoob: lol
12:08  __Hybris__: Only question is, how I let python know where scipy and numpy is installed.
12:08  __Hybris__: Python 3, that is.
12:08  __Hybris__: 3.1.2
12:08  lotrpy: Hybris, are you installed scipy/numpy already?
12:09  lotrpy: do you, maybe sorry for my broken english
12:09  verte: __Hybris__: python 2.7 numpy won't work with python 3.1.
12:10  verte: C-extensions usually only work with the version they were compiled for.
12:10  __Hybris__: verte: Oh...? Well, I'll just keep using ipython then.
12:12  ssbr: __Hybris__: ... no, you switch to using python 2.7
12:12  ssbr: that arch makes python be python3 is a mistake.
12:12  ershad: i've a small doubt in python, could you help?
12:12  ssbr: change the symlink to point to python2.7 instead!
12:12  __Hybris__: ssbr: Can you tell me how I do that?
12:13  thyko: ershad: ask
12:13  ssbr: __Hybris__: rm /usr/bin/python ; sudo ln -s /usr/bin/python2.7 /usr/bin/python
12:13  ssbr: or something like that. I don't remember the order for ln
12:13  kerio: xro: u'000A' is a unicode string made of three 0s and one A
12:13  __Hybris__: ssbr: Ok, thanks.
12:13  ershad: thyko: I'm using a python module which cannot be installed since i've no root access. Is there anyway to use it ?
12:13  kerio: you're looking for u"\u000a"
12:13  ssbr: also to be properly general you'd use `which python` instead of /usr/bin/python ...
12:14  thyko: ershad: you can install it in your home directory and add it to PYTHONPATH
12:14  ershad: thyko: it's tweepy. http://github.com/joshthecoder/tweepy/
12:14  ershad: thyko: could you please say how ?
12:14  __Hybris__: ssbr: Great, it uses python 2.7 now.
12:14  ssbr: dwoop dwo dwoooo
12:15  __Hybris__: ssbr: You dislike ipython?
12:15  ershad: thyko: it would be very nice if you could give me a link that explains the steps. I'm a beginner in python
12:15  thyko: ershad: the way i do it is to add this line at the top of my script sys.path.append('/home/me/module_dir')
12:15  _habnabit: thyko, yeah, uh, no.
12:15  _habnabit: ershad, just install it with --user
12:15  _habnabit: ershad, no sys.path munging needed.
12:15  xro: kerio, ohh... yes... thanks
12:16  ssbr: __Hybris__: python has a very bad habit of confusing people.
12:16  ershad: _habnabit: python setup.py --user says "--user is not recognised"
12:16  ssbr: um
12:16  ssbr: ipython :)
12:16  _habnabit: ershad, install --user
12:17  thyko: _habnabit: works for me man
12:17  __Hybris__: ssbr: :P Yeah, but it also has lots of handy features, good for quick interactive programming.
12:17  _habnabit: thyko, 1) it breaks if you ever move between computers, or rename that directory.
12:17  ershad: happybob: "python setup.py install --user" says the same thing
12:17  thyko: _habnabit: and by the way, how did you get infobob to paste to codepad? and is that the only place it can paste
12:17  _habnabit: thyko, 2) --user is built-in and is pretty much guaranteed to work.
12:17  _habnabit: ershad, are you on python 2.5?
12:17  ssbr: __Hybris__: there are things that offer those, that aren't ipython
12:18  __Hybris__: ssbr: Really, do you use any of them?
12:18  thyko: _habnabit: yes it does, its definitely not for portable code
12:18  ssbr: __Hybris__: on *nix bpython is supposed to be good. On windows there is, uh, haha, dreampie.
12:18  _habnabit: thyko, well... why do a shitty thing when you can do a thing that works consistently?
12:18  ssbr: __Hybris__: I use the standard python interpreter.
12:18  thyko: _habnabit: point taken. now about infobob
12:18  ssbr: I've never seen the appeal of other things.
12:19  _habnabit: thyko, you just post a form???
12:19  _habnabit: thyko, I don't understand the question.
12:19  thyko: _habnabit: wait, I'll just check the code
12:20  __Hybris__: ssbr: Hmm, bpython does look good. Thanks mate.
12:21  damagednoob: ssbr, thanks for the heads up with bpython, looks really cool
12:21 * ssbr throws his head in his hands
12:21  magcius: hey
12:22  __Hybris__: ssbr: :P
12:22  magcius: I haven'
12:22  magcius: I haven't seen bob_f in a while
12:22  verte: he got married and now works at google
12:22  ssbr: magcius: he was here this one time.
12:22  ershad: thyko: _habnabit : sorry, i lost connection in between
12:22  thyko: _habnabit: either im nuts or you took it off your site
12:22  magcius: verte, srs?
12:22  ssbr: verte: no, that ended last month
12:22  ssbr: he's at Microsoft now
12:22  thyko: ershad: use _habnabit's solution
12:22  ershad: _habnabit: I get this while using easy_install "error: can't create or remove files in install directory"
12:23  _habnabit: ershad, ew. Why are you using easy_install?
12:23  ershad: thyko: could you please repeat his solution?
12:23  __Hybris__: If anyone wants to explain why my program is extremely slow/won't do what it's supposed to do, please do: http://github.com/FranzZdyb/IntermediatePython/blob/master/euler166.py
12:23  ershad: _habnabit: while using "python setup.py install --user", i get "error: option --user not recognized
12:23  ershad: "
12:23  thyko: ershad: give the --user switch to the setup.py of the package you're installing
12:24  _habnabit: ershad, are you on python 2.5?
12:24  ershad: thyko: tried, getting error. yeah, using python 2.5.2
12:24  __Hybris__: It seems to be a problem with my usage of numpy.linalg.solve
12:24  _habnabit: ershad, --prefix=$HOME/.local
12:26  thyko: _habnabit: you're no longer opensourcing infobat?
12:26  _habnabit: thyko, /ctcp infobob source
12:26  ssbr: infobat is already open-source isn't it?
12:26  scummos: decorators absolutely do need a line for their own, is that right? :)
12:26  ershad: _habnabit: I'm getting this error: http://fpaste.org/QxOZ/
12:26  _habnabit: scummos, yes.
12:26  scummos: _habnabit: ok cool, thanks
12:26  _habnabit: scummos, at least, with @
12:27  scummos: okay...
12:27  _habnabit: ershad, yeah, setuptools blows.
12:27  ershad: _habnabit: sorry ?
12:28  ershad: _habnabit: what can i do now ?
12:32  thyko: _habnabit: nice
12:33  ershad: thyko: _habnabit : i'm helpless now. --user is not working
12:34  thyko: ershad: ok, i'll guide you. run $python setup.py --help
12:34  thyko: ershad: tell me what it says, paste it on codepad please
12:35  ershad: thyko: done, got a list of commands
12:35  ershad: yes, i will paste now
12:35  Arsanerit: One of Pythons rules is "There should be one, and preferably only one, obvious way to do it". Then why are there three modules for parsing command-line arguments: getopt, optparse, argparse?
12:36  _habnabit: Arsanerit, each successive one deprecated the last one.
12:36  ershad: thyko: http://fpaste.org/kUG0/
12:36  Arsanerit: aha
12:36  _habnabit: Arsanerit, but they can't be removed because of backward compatibility.
12:38  thyko: ershad: ok, now type --help-commands and give me that output
12:39  _habnabit: Arsanerit, but the API changed so radically between each that incremental improvements couldn't have been done.
12:39  _habnabit: Arsanerit, so.
12:39  ershad: thyko: http://fpaste.org/sP7p/
12:43  thyko: ershad: this package seems not to let you choose the install dir
12:44  ershad: thyko: I see
12:44  thyko: ershad: what package is this?
12:45  ershad: thyko: tweepy. api for twitter
12:46  thyko: ershad: easy_install tweepy --install-dir=~/mybin/tweepy
12:46  __Hybris__: Has anyone done euler problem 166, or just want to help me out with a program?
12:46  thyko: ershad: first create mybin
12:46  thyko: in your homedir
12:47  ershad: done
12:49  thyko: ershad: so you're sorted?
12:49  ershad: thyko: pardon ? :D
12:49  thyko: ershad: is your problem gone now?
12:50  ershad: thyko: no, should i do something after creating that directory >
12:50  thyko: ershad: easy_install tweepy --install-dir=~/mybin/tweepy
12:50  thyko: ershad: easy_install tweepy --install-dir=~/mybin/
12:51  thyko: that last one
12:51  ershad: thyko: "[Errno 13] Permission denied: '/usr/lib/python2.5/site-packages/test-easy-install-25807.write-test'" :(
12:53  naquad: will it be ok if I'll do like that: with open(path, mode) as f: return f.read() ? will file be closed?
12:54  verte: ershad: great! that means setuptools can't crap all over your site-packages!
12:54  verte: ershad: you probably need to install setuptools as root.
12:54  ershad: verte: hmm.
12:56  ershad: thyko: _habnabit , verte . Thank you very much. Lemme see whether i could get root access. It's actually a remote server, i'm accessing through ssh. i will write to admins. Nice day :)
12:56  _habnabit: You really shouldn't need root.
12:56  _habnabit: But setuptools is being a whiny babby.
12:56  ershad: _habnabit: I see.
12:56  thyko: ershad: mmmm .... http://github.com/joshthecoder/tweepy copy the tweepy directory into your project directory, and make sure the .py file you import tweepy into is *immediately* outside the tweepy directory. Then from that directory, type $python -c "import tweepy.utils"
12:56  thyko: then do the same in the python file
12:58  ershad: thyko: getting this error : http://fpaste.org/H8ds/
--- Log closed Sun Oct 24 13:04:55 2010
--- Log opened Sun Oct 24 13:05:24 2010
13:05 --- Users 704 nicks [0 ops, 0 halfops, 0 voices, 704 normal]
13:06 --- Channel #python was synced in 98 seconds
13:18  elricL: Anyone here use pyDev?
13:18  lvh: elricL: Some people, yes. Why?
13:19  elricL: I have trouble installing it.. and could use help
13:23  doddo: hello !! ive got encoding trouble! why does u'potatisgrat\xe4ng' look like u'potatisgrat\xe4ng'
13:24  doddo: sorry
13:24  doddo: was nopthing
13:29  Kiliko: How could I parse this text into more advance(not just parse line by line) and get every thing in a proper list all Physical devices and all Logical drives into one. someting like: [{phy0:0.0,vendor:IBM,...,status:Online},{phy1:0.1:...},{log0:/dev/rd/c0d0,raid:5,status:Online,...}] http://www.mjmwired.net/kernel/Documentation/README.DAC960#311
13:29  lvh: elricL: consider downloading aptana studio 3
13:29  Kiliko: could some one point me to a guide or tutorial?
13:30  lvh: Kiliko: That looks like it's JSON
13:31  lvh: oh, wait, no; you probably don't want the 0.0 in phy0:0.0 to be a float
13:31  lvh: Kiliko: pymeta, pyparsing
13:31  elricL: lvh: downloading it now
13:36  Kiliko: lvh: ty, i will look into it
13:41  nvictor: vim forever >:(
14:04  __Hybris__: I have a function calc_lastpiece which solves a linear equation to get a 2x2 matrix. Now I want only positive integer solutions, so I wrote this boolean equation: len([calc_lastpiece().flatten(1)[x] for x in range(len(calc_lastpiece().flatten(1))) if calc_lastpiece().flatten(1)[x]==abs(int(calc_lastpiece().flatten(1)[x]))])==4, but it's not working.
14:05  __Hybris__: Wait, I'll make a pastebin.
14:05  __Hybris__: http://pastebin.com/McUwSXrt
14:05  infobob: http://paste.pocoo.org/show/279577/ (repasted for __Hybris__)
14:06  __Hybris__: Thanks.
14:07  __Hybris__: Whole file is here: http://github.com/FranzZdyb/IntermediatePython/blob/master/euler166.py
14:09  __Hybris__: Any help is appreciated.
14:10 --- krufflwuffl is now known as 64MAASL8D
14:17  khaije|minder: this is going to sound simple, but could i have an example of how time differencing works...?
14:19  khaije|minder: as in adding and subtracting time
14:20  sipsniffa: i have python 2.5 and 2.6 on my linux dev box. how do i target a specific version when using easy_install to install a package? thanks
14:26  sipsniffa: ah, found it here: http://peak.telecommunity.com/DevCenter/EasyInstall#id12
14:26  sipsniffa: now need to install easy_install for all versions
--- Log opened Sun Oct 24 15:08:11 2010
15:08 --- Users 700 nicks [0 ops, 0 halfops, 0 voices, 700 normal]
15:08  lvh: manhole does that for you
15:08  Iceland_jack: What if it's not a program using a socket?
15:08  lvh: also, if you actually want to update modules (ie reload() but actually working this time) you would kill the subporcess
15:08  lvh: Iceland_jack: what does it use that isn't a socket
15:09  Iceland_jack: Well maybe it's just a Python process running locally
15:09 --- Channel #python was synced in 91 seconds
15:09  Iceland_jack: and I want to change one string at run-time
15:10  lvh: Iceland_jack: yes, like I already said: manhole
15:10  lvh: you ssh into it and change whatever you wnat
15:10  sipsniffa: @ivh just seen your reply
15:10  sipsniffa: why not easy_install?
15:10  Iceland_jack: I'm not familiar with manhole, is that a part of ampirc?
15:10  lvh: Iceland_jack: No, it is part of twisted
15:11  Iceland_jack: So I shouldn't use ampirc..
15:11  lvh: ampirc is built on top of ampoule, which is what you would use to build whatever it is you're doing
15:11  lvh: Iceland_jack: well, you didn't want something irc-specific
15:11  lvh: Iceland_jack: I quoted ampirc because a) your original question *was* IRC specific, b) ampirc's basic design is simply applied to IRC, there's no reason why it wouldn't work over arbitrary byte ITransports
15:11  lvh: ampoule is built on top of twisted, so all of it used twisted
15:12  lvh: just through some layers of abstraction
15:12  Iceland_jack: That's right, I should've clarified my question
15:12  lvh: at the end of the day AMP will serialize/deserialize pretty much anything you throw at it if you teach it how
15:12  Iceland_jack: but thank you, I'll look into twisted and ampirc
15:12  lvh: and it doesn't need much teaching to do ITransports
15:13  lvh: sipsniffa: My nick is "LVH".lower() not "IVH".title()
15:13  sipsniffa: yeah, sorry about that
15:13  kerio: how can you misspell a nickname
15:13  kerio: you can tabcomplete another one, but misspelling...
15:14  sipsniffa: why the whining?
15:14  lvh: sipsniffa: easy_install is part of setuptools. it has a tendency to screw up existing Python instlalations if they are already governed by eg a package manager
15:14  lvh: which on linux is almost always the case
15:14  lvh: kerio: it's not like tab completion is useful for a three letter nick
15:14  kerio: good point
15:14  lvh: kerio: there's a bunch of people that start with "l" and "lv<TAB>" is just as many keystrokes as "lvh"
15:15  lvh: and to make things easier there is also an lv in here
15:16  lvh: sipsniffa: one way to avoid this is to use pip, and to use distribute for your own packages instead of setuptools
15:16  sipsniffa: thanks, lvh. i'll take a look at pip
15:16  lvh: sipsniffa: eventually distutils2 will replace all of these
15:16  lvh: sipsniffa: the short version is: never ever ever let setuptools near your system-wide install
15:16  lvh: sipsniffa: pip doesn't fix that
15:16  lvh: so you should still be using pip install --user/pip install --install-opts=--user or installing into a virtualenv
15:16  lvh: or just sticking to distro packages
15:17  lvh: (or waiting until distutils2 becomes a legit thing)
15:17  sipsniffa: @lvh i'm running two versions of python: 2.6 is installed by apt package management system, but developing google app engine requires 2.5
15:18  lvh: sipsniffa: so use virtualenv
15:18  sipsniffa: @lvh ok, something else to look i guess - i'm relatively new to python dev
15:19  sipsniffa: @lvh thanks for pointers
15:19  pavanky: Hi, can anyone help me out with this error
15:19  lvh: sipsniffa: yw
15:19  pavanky: I am trying to get started with qt
15:20  pavanky: http://pastebin.com/vMQLPgKs
15:20  infobob: http://paste.pocoo.org/show/279604/ (repasted for pavanky)
15:24  carpi: hi. In "def hi(x = Object())", does the instance 'x' get created everytime it is called?
15:24  kerio: no
15:24  kerio: created once, used for all the calls
15:25  kerio: use a sentinel if you want to create it multiple times
--- Log closed Sun Oct 24 15:31:15 2010
--- Log opened Sun Oct 24 15:31:38 2010
15:31 --- Users 704 nicks [0 ops, 0 halfops, 0 voices, 704 normal]
15:32 --- Channel #python was synced in 89 seconds
15:35  PyDon: hi
15:36  SpiderFred: how to find out why isnt my program working? like what exactly is it doing when I run it?
15:36  dassouki: so niche products, should they be released under opensource or closed source licenses ?
15:47  papna: dassouki: There isnt' really a "should" there.
15:47  papna: SpiderFred: You might be interested in pdb, or in print statements.
15:48  khaije|minder: how do i go from a epoch_seconds count to a datetime.datetime.now() format?
15:49  dassouki: papna: that's the thing, I wrote an implementation of 3 processes we use in my industry using python/pyqt. the 2 other alternatives (commercial) cost anywhere between $20 to $30k per license
15:50  magicblaze0071: Why doesnt this work? --> [LL.append(x) for x in L if x not in LL] -- L is a list of items and LL is []
15:51  ikanobori: magicblaze0071: Well you should not be using listcomps for their side-effects anyway.
15:51  ikanobori: If you just want uniques: set(L)
15:52  magicblaze0071: just did that...just wanted to know what was wrong with the other line?
15:52  ikanobori: Well, what "doesn't work"?
15:52  magicblaze0071: it gives me all none?
15:53  magicblaze0071: L is not empty, shouldnt LL be non-empty as well?
15:53  ivazquez|laptop: List methods operate in-pace.
15:53  ivazquez|laptop: *place
15:54  magicblaze0071: ivazquez|laptop: that does not explain why LL is empty...can you please elaborate?
15:54  ivazquez|laptop: Are you binding something else to LL?
15:55  magicblaze0071: here are the three commands LL=[]; L = [1 2 3 4];  then [LL.append(x) for x in L if x not in LL] -- gives [none, none, none, none] -- ah now i understand...it does work...just that the output is a set of none's
15:56  ironfroggy_: magicblaze0071: why are you using a list comprehension where you should be using a for loop?
15:56  ironfroggy_: magicblaze0071: list.append() returns None, because that is the default return value for all functions. if they have nothing else to return, they return None, and append has nothing to return.
15:57  magicblaze0071: Thanks. I was just trying to understand...not using it anywhere
16:00 --- Haxbeertje is now known as Gerwin
16:00  naquad: i've got a list of dicts and i need to get only unique values. is there any way to do that?
16:01  papna: naquad: Unique values from where?
16:03  naquad: papna, some_black_magick([{'x': 1}, {'x': 2}, {'x': 1}] ) #=> [{'x': 1}, {'x': 2}]
16:03 --- ajavid is now known as stoned
16:04  nvictor: naquad: why are you using a list of dicts?
16:04  naquad: nvictor, long story
16:04  nvictor: and not a dict directly?
16:04  nvictor: oh ok
16:11  magicblaze0071: if I've an int (range 0-65536)? how do i get access to those two bytes?
16:13  magicblaze0071: I want to write a bunch of these 2 byte ints into a file.
16:15  magicblaze0071: I guess "array" is the answer
16:18  magicblaze0071: hmm...array type code 'I' prints out "itemsize  = 4". It should print out 2.
16:20  Juhaz: struct is the answer
16:21  magicblaze0071: Juhaz: Thanks for the pointer. I need to convert L=[1,2,34,...] into a list of bytes, where each integer is 2 bytes long
16:24  pielgrzym: hi :)
16:25  sipsniffa: what's best practice for installing python 2.5 on an ubuntu 10.10 development box?use a ppa or is there some other
16:25  sipsniffa: (apt repos no longer support 2.5)
16:25  pielgrzym: I'm wondering. Can I make cursor.execute("INSERT <some stuff with autoincrementing id in db>") and then get the id of new item without executing another query?
16:25  pielgrzym: sqlite3/postgresql
16:28  guisf: I just finished a program, that is working nice with distutils in Linux, and I need to distribute it in windows, but I dont have a windows machine, does any one know how I can do it?
16:32  papna: guisf: A well-written distutils script is platform-independent.
16:32  papna: To know that something works on Windows, you have to test it on windows.
16:33  Blzn: guisf, install the virtual box and use windows in it
16:33  guisf: papna: yes, i know, but the problem is, the client should install python on his windows os... what i was trying to do, is to build an EXE file for him, using py2exe, but py2exe seems to be windows only
16:34  guisf: Blzn, can you tell me what I should look for to install this virtual box?
16:34  adrianp: guisf: mv script.py script;chmod a+x script for linux exe
16:34  Blzn: guisf: http://www.virtualbox.org/
16:35  guisf: Blz, thanks ... I will see, I have 0 experience with windows, maybe this would let me run py2exe in this virtual box
16:35  SpiderFred: guys how to enable usb ports in virtualbox?
16:38  Blzn: SpiderFred: look if this can help you
16:38  Blzn: http://ubuntuforums.org/showthread.php?t=957630
16:39  papna: guisf: Of course.
16:39  SpiderFred: Blzn, thx
16:39  lvh: thta hardly sounds windows-related
16:39  papna: guisf: You build Windows software on Windows.
16:39  lvh: err, #python related even
16:40  papna: guisf: Also, I don't understsand what you mean "the client should install python on his windows os"
16:40  guisf: papna: i think I will have no way to escape that, I was thinking in running py2exe thought wine
16:40  guisf: maybe I will have to install windows, against my will :)
16:41  papna: guisf: If you want to package Windows software, you'd do it in Windows.
16:42  guisf: papna: ok
16:47 --- RichGuk_ is now known as RichGuk
--- Log closed Sun Oct 24 17:04:48 2010
--- Log opened Sun Oct 24 17:05:08 2010
17:05 --- Users 710 nicks [0 ops, 0 halfops, 0 voices, 710 normal]
17:06 --- Channel #python was synced in 90 seconds
17:07  lvh: Does anyone have any experience using BDD tools to test documentation? I'm wondering if it at all makes sense to keep doing that.
17:07  lvh: I'd love to use lettuce for everything but given Twisted reactors aren't restartable that's a bit annoying.
17:07  papna: Code is supposed to be ran by a computer, so we have computers test them. Documentation is supposed to be ran by a meatbag, so that's probably the main place it would be tested.
17:08  lvh: papna: Yeah, my first thought was 'computers are terrible at processing human languages'
17:09  lvh: papna: Also there's no reason my blah.ws/doc/* 404 pages couldn't inform developers
17:09  papna: I said "main place"
17:10  lvh: papna: Okay. Do you think there's a reasonable way to automatically test documentation?
17:11  armence: I am trying to remove an object from a set and I am getting a KeyError. What does that mean?
17:11  lvh: armence: the object isn't in the set in the first place
17:11  arkanes_: lvh: depends on what you mean by test. Many aspects of documentation can be tested, but probably not the most important one
17:12  papna: If you want to remove the value if it's there else do a no-op, use the discard method
17:12  armence: lvh: But I got the object by iterating over the set. The code is something like: for i in set: if i == something: set.remove(i)
17:13  armence: And then return out of the if statement obviously
17:13  lvh: armence: Don't iterate over mutable collections while mutating them.
17:13  armence: lvh: Even if I return immediately afterwards?
17:13  papna: armence: Post reproducing code.
17:14  lvh: armence: Well, you're not doing that, otherwise you wouldn't get that bug :-)
17:14  arkanes_: that won't raise a KeyError though, but a RuntimeError
17:14  arkanes_: so clearly you're doing something else wrong, pastebin code
17:14  lvh: armence: produce a new set instead: set(e for e in s if cond)
17:14  arkanes_: (I suspect that you think 2 sets are the same when they aren't)
17:15  armence: OK, let me extract the code that's producing that and paste it
17:15  naquad: i need to profile methods of one class, nothing else. how do i do that?
17:15  arkanes_: naquad: with a profiler
17:15  arkanes_: pstats has ways to filter results
17:16  lvh: xb
17:16  lvh: Whoops.
17:16  papna: lvh: I wonder if documentation shouldn't be cross-linked to tests, such that if a test changes, you can say "The relevant sections of documentation are X, Y, and Z"
17:17  naquad: arkanes_, seems to be not my case. i need to profile a plugin for application
17:17  naquad: and i can't run it in standalone mode
17:17  lvh: papna: that sounds great
17:18  lvh: papna: unfortunately doing it is a whole different ball game
17:18  papna: I don't know how realistic it is.
17:18  lvh: papna: I'll worry about it later, working code is the only measurement of progress
17:19  arkanes_: cross lining code and tests is great though
17:19  arkanes_: I really do need to finish my new-and-improved coverage reporting stuff
17:19  papna:  Maintaining up-to-date documentation isn't something I am aware of there being good software for.
17:20  lvh: papna: Mechanical Turk is software right?
17:21  papna: I guess.
17:21  papna: I wonder if the real solution to literate programming is shared documents for tests and documentation, not code and documentation.
17:22  dassouki: is there a way to code python apps on iphone/ipad ?
17:22  lvh: Oh, I've asked this before but I don't remember getting a good answer.
17:22  papna: dassouki: Not legitimately.
17:22  lvh: papna: AFAIK that's not true anymore
17:22  papna: Oh.
17:23  papna: dassouki: My information may be out of date.
17:23  lvh: papna: They changed their TOS again so that there's no reason why python couldn't work afaik
17:23  lvh: then again I don't really care about apple, so I'm not sure either
17:23  dassouki: lots of double negatives
17:23  lvh: dassouki: intentional
17:23  lvh: dassouki: "there's no reason it couldn't work" != "it works"
17:23  armence: http://codepad.org/mpyx0AYz
17:23  armence: That should reproduce
17:23  dassouki: thanks
17:24  armence: OK, here is the updated code still throws the same KeyError but I removed all the getters and setters... http://codepad.org/McutEcSn
17:24  armence: Should be more readable
17:25  lvh: armence: hang on, why are you copying anything
17:25  lvh: armence: you already went through a lot of trouble to make everything immutable
17:26  lvh: armence: Also why are you using iteration and == to find something in a set
17:26  armence: lvh: As opposed to?
17:27  lvh: armence: using a dict
17:27  armence: lvh: That
17:27  armence: lvh: That's a very good idea... But I may start searching for items based on different characteristics later on
17:29  armence: lvh: I didn't make my object immutable, did I?
17:29  armence: I thought I only made it hashable
17:32  armence: :(
17:32  armence: Apparently my code was so bad lvh left is disgust... :(
17:33  sly007: What's people opinion about werkzeug here? I need minimalistic WSGI client interface, and was hesitating againgt web.py
17:33  dash: sly007: from everyting i've seem werkzeug is a much better choice
17:33  dash: armence: if it's not immutable it shouldn't be hashable
17:35  armence: dash: Because if I forget to make a copy of it and changing the copy instead of the orginal object and the original object is in a set, that will screw things up? Kind of like is happening right now?
17:35  armence: :)
17:36  magicblaze0071: is this a good way to write a string to a file and close it? --> open("ids.txt","w").write(ids_string)
17:36  papna: That doesn't guarentee anything will get closed.
17:37  magicblaze0071: thanks
17:37  armence: And it's kind of sparse on error checking magicblaze0071
17:41  dash: armence: error checking isn't a good idea.
17:41  armence: dash: Really? I tend to think a "this file could not be found" is nicer to your end-user than a stack trace
17:42  papna: armence: 1) That's not possible in this case, 2) Occasionally, but not generally.
17:42  papna: Tracebacks are something you can send to debug errors.
17:42  htoothrot: magicblaze0071, use a context manager
17:42  papna: User-friendly error messages are something you catch at the top.
17:43  papna: armence: Normal exceptions are catchable when you do you re-use code later.
17:43  papna: armence: Real tracebacks lie a lot less often than the ones you make on the fly each time.
17:43  armence: OK, makes sense
17:45  armence: But I personally would prefer to stick the traceback in a file and give the user a message that asks to send that file to me...
17:45  armence: Though obviously higher up in the stack is better
17:45  papna: armence: That can make sense for production apps sometimes.
17:45  dash: error handling isn't the same as error checking, anyway
17:45  papna: armence: But isn't something you put in for something YOU'LL run.
17:46  papna: And even then it's not necessarily true.
17:46  armence: papna, OK
17:48  papna: yum spits out a Python traceback if something bad enough goes wrong.
17:51 --- lv is now known as Aphelion
17:52  armence: dash: btw, thanks for the advice on immutable/hashable, turns out I didn't even need it to be hashable...
17:52  armence: Didn't realize you could use "in" with simple arrays
17:53  papna: lists support `in` with O(n) complexity.
17:53  papna: sets' `in` is O(1) amortized.
17:53  armence: papna: Which when it comes to running unit tests is really no big deal...
17:54  papna: When it comes to small n, it's no big deal, right.
18:01  juanmabc: it is interesting how in computers there is always not small n, efficiency by design
18:03  lvh: Remind me, why don't we use pylint + a config file to get rid of the anally retentive bits
18:04  lvh: Is there anything bad about pylint except that it complains too much?
18:04  damd: this is a long enough question that i pasted it on SO: http://stackoverflow.com/questions/4008960/pytz-and-etc-gmt-5
18:04  damd: any ideas?
18:04  NelleV: lvh: it's french
18:05  lvh: Oh, yeah logilab did it
18:06  NelleV: :p
18:16  michelem: hello folks
18:16  michelem: some years ago I implemented a crawler using Queue and Threading
18:16  michelem: Today I found the module multiprocessing. I don't quite get the difference between Process and Thread, what is the catch?
18:17  michelem: is it actually the OS meaning?
18:17  ivazquez|laptop: Only one thread can be running Python code at a time.
18:17  ivazquez|laptop: multiprocessing spawns additional processes.
18:17  lvh: michelem: Processes don't share memory.
18:18  michelem: lvh: I want to make parallel a dnspython query with degree about 1000. Would that suit?
18:18  michelem: so are they actually OS processes?
18:18  lvh: michelem: no, both threads and processes are a terrible idea for that
18:19  lvh: michelem: use async IO, twisted knows how to do dns asychronously
18:19  michelem: uhm
18:20  michelem: I'm letting another guy take the code and make it parallel. If it takes such leap I think I'd probably go for C right away, there's nearly no logic besides the DNS query
18:20  lvh: michelem: There is no reason why you would use threads or processes to concurrently do IO
18:20  lvh: michelem: what's C got to do with it
18:21  lvh: michelem: your solutions are for making CPU-limited things go faster
18:21  lvh: your thing is not CPU limited, it's IO limited
18:21  lvh: doing sockets in C would barely change anything about your thing's total runtime
18:21  michelem: rather I actually expect major memory gains
18:21  lvh: (especially since the socket heavy lifting in Python happens in C, as well)
18:23  lvh: michelem: threads and processes are both significantly worse in terms of memory use than async IO, that is correct
18:23  lvh: michelem: http://code.google.com/p/gevent/downloads/detail?name=gevent.pdf&can=2&q=europython
18:23  lvh: michelem: See slide 10
18:24  lvh: it's about 10x worse, to be precise
18:24  michelem: thx
18:24  lvh: michelem: C will not magically make things better
18:24  lvh: michelem: A good C solution would use libev or libevent
18:24  michelem: man poor dog #6
18:24  michelem: lvh: indeed
18:25  lvh: michelem: so you're still using async IO
18:25  lvh: except in a terrible language this time
18:25  michelem: the point is indeed, if I have to take the async leap, I'd go for C
18:25  NelleV: I don't understand why
18:26  lvh: NelleV: You don't understand why what
18:26  NelleV: lvh: why michelem would do it in C
18:26  michelem: I'm trying to grasp what amount of code using twisted would incur
18:26  lvh: michelem: scrapy
18:26  lvh: michelem: less than it took you to understand threads and sockets and dnspython, since we already have a scraper that doesn't suck
18:29  michelem: there's so little about twisted with DNS
18:29  lvh: michelem: that's because you don't need to know
18:30  lvh: michelem: Twisted has abstraction layers that do it for you
18:30  michelem: alright, let me go full blown :)
18:30  lvh: michelem: I have no idea why people think it's acceptable you would still have to manually do dns lookups in 2010
18:30  michelem: lvh: I *need* to do lookups, it's a part of the backend of www.buddyns.com
18:31  lvh: michelem: Is this a domain squatter tool
18:31  michelem: each primary is contacted and asked for the SOA version
18:32  michelem: a bunch of resolvers do queries sequentially, but some domains take some seconds so aio is required
18:33  michelem: I thought of going C+libev right away, but an intermediate step is more time-efficient until domains don't grow beyond 10k
18:33  lvh: michelem: right -- I don't quite understand why you would ever block for DNS, but at least we agree that DNS should be async :)
18:33  michelem: sure, I'm only assessing in terms of time per benefits
18:33  lvh: michelem: even then, I don't see the bottleneck being CPU there
18:33  michelem: I'm trying to go extremely incremental here
18:33  michelem: lvh: no, rather memory
18:34  lvh: michelem: yeah, too bad local search doesn't get you global optima ;-)
18:34  lvh: michelem: anyway: http://twistedmatrix.com/trac/wiki/TwistedNames
18:34  michelem: yeah was looking in there
18:34  lvh: michelem: http://twistedmatrix.com/documents/current/names/examples/gethostbyname.py
18:35  michelem: btw, thanks for suggesting without insulting like 99% of IRC folks do, with no idea of the context
18:37  lvh: michelem: I am usually ruder!
18:37  lvh: michelem: I thought I was, but seeing as you're happy with the help: you're welcome
18:37  michelem: so just to get if I got it
18:38  michelem: in the gethostbyname.py example I can just replace any lookup*() function, they'll all work alike
18:38  michelem: yeah, all type Deferred
18:38  cncfanatics: Hello people, I'm currently using %.2f to display a floating point number
18:39  cncfanatics: however, I'd like the digits after the comma to only be displayed if they're actualy there
18:39  cncfanatics: (50 instead of 50.00)
18:39  cncfanatics: how do I do such ?
18:39  lvh: michelem: right
18:39  lvh: michelem: Note: I am not intricately familiar with t.names, I just use it indirectly
18:39  lvh: michelem: Consider asking #twisted or the twisted-python mailing list if you have specific questions
18:40  lvh: michelem: itamar, glyph, exarkun should know it better than I do, and are quite active on both
18:40  lvh: cncfanatics: not using %.2f
18:40  Diverdude: I am considering using gstream together with gst-python. Does anybody have any experience with that? Any comments on that?
18:40  michelem: ok
18:41  cncfanatics: lvh: well, then how do I display a number with up to 2 digits after the comma ? But only if they matter (= are not zero)
18:41  lvh: cncfanatics: s = "%.2f" % n if n % 1 else "%i" % n
18:41  lvh: cncfanatics: But please don't do that
18:41  lvh: cncfanatics: being zero is information too, they do matter
18:41  cncfanatics: they don't in this case
18:41  cncfanatics: its for a gui , heh
18:41  lvh: that doesn't reallllly matter
18:49  SeanInSeattle: Hey all.  I'm wondering if there is a library out there that I could use to plot points, lines, and shapes using latitude and longitude values on a new image (PNG preferrable).
18:49  lvh: SeanInSeattle: Longitude and latitude? As in on a sphere?
18:50  lvh: SeanInSeattle: Or do you mean h/w pairs (as in, pixels)
18:51  SeanInSeattle: lvh: I mean, if I have vectors or shapes that exist in a db that use lat/long values, aka street data, is there a python module that I can use to draw the data onto a new image?
18:52  lvh: SeanInSeattle: depends on the projection of the image
18:52  lvh: SeanInSeattle: Why not just use OSM's stuff? they already have renderers
18:53  lvh: plus everything understands wkt
18:54  SeanInSeattle: lvh:  I don't necessarily want to render them.  I would prefer to create images with the data.  Is that possible with the OSM libraries?
18:54  lvh: SeanInSeattle: If I know what you're trying to acchieve, that's usually not done by drawing "onto the image" as you say
18:54  moreati: create images with the data is the definition of render
18:54  lvh: SeanInSeattle: it's done by projecting the image onto something and then rendering that
18:54  lvh: (Just like you would project said streets)
18:55  lvh: Typically that happens by having an image that doesn't cover a lot of ground (unless you know what projection it's in), and having a few points in the image that you know the exact coordinate for
18:55  lvh: (basically, pixels -> vector world, shapes -> vector world, vector world -> pixels)
18:56  lvh: I don't know if the OSM stuff supports projecting arbitrary PNGs onto surfaces -- I would imagine it does
18:56  JodaZ: can one sandbox python ? like java applets ?
18:57  lvh: JodaZ: Sort of
18:57  lvh: JodaZ: Not quite for CPython
18:57  SeanInSeattle: lvh:  OK.  Given that I have numbers that are precise up to the 6th decimal, is it possible to create images using those as (x,y) pairs using a commonly known image creation lib of some sort?
18:57  lvh: JodaZ: GAE did it so it must be possible ;-)
18:57  JodaZ: GAE ?
18:57  SeanInSeattle: lvh:  I don't really care if its super accurate for geographical representations.
18:57  lvh: SeanInSeattle: Not that I know of, everything I know that knows how coordinates work first translate into geographical reprs and then back into pixels
18:58  lvh: SeanInSeattle: Then again I have never cared about almost-accurate presentations so that doesn't mean it doesn't exist
18:58  lvh: JodaZ: Google app engine
18:58  lvh: JodaZ: haypo (victor stinner) wrote some sandboxing code but I have not used it so I do not know how good it is.
18:59  lvh: JodaZ: Jython can be sandboxed by virtue of running in a JVM
18:59  lvh: I'm not sure how codepad does it
18:59  lvh: JodaZ: Why do you want to sandbox?
19:01  JodaZ: hmm, lvh, hard to explain, but i'd need one
19:02  moreati: SeanInSeattle: what are those coordinates stored in - plain tables with a lat and lon column, or a dedicated geographic package such as PostGIS or Oracle Spatial?
19:02  lvh: JodaZ: import this; If the implementation is hard to explain,...
19:03  JodaZ: lvh, its just a idea that has been ghosting the back of my mind for quite some time now
19:03  lvh: JodaZ: So, you don't actually need it for a real project?
19:03  JodaZ: lvh, yeah
19:03  lvh: JodaZ: The optimal solution depends on what you want
19:04  JodaZ: lvh, well, a sandbox is a sandbox
19:04  lvh: JodaZ: Yeah, no.
19:05  lvh: JodaZ: Jython is properly sandboxable, but that doesn't help you if you need C extensions.
19:05  JodaZ: well, jython is also disqualified from the start in my eyes because of the J
19:05  lvh: JodaZ: Virtualization can get you robust, real sandboxes, but they will generally be slower.
19:05  lvh: JodaZ: Yes, so now do you understand my point
19:06  lvh: a sandbox is *not* just a sandbox, what you want changes the answer
19:06  astrojp: will r('text') keep regexes just as sane as r("text")?
19:06  lvh: If Jython isn't acceptable because of the J, clearly "a sandbox" is not a complete representation of the problem
19:06  lvh: astrojp: I think you mean r'' and r""?
19:06  JodaZ: well, i just don't like the J
19:07  astrojp: lvh: yes, i do.
19:07  lvh: JodaZ: that doesn't change that it's not a complete specification of the problem
19:07  lvh: astrojp: They are identical except for escaping the quotes themselves
19:07  moreati: astrojp: and once you remove the brackets, yes they will keep regexes equally (in)sane
19:07  astrojp: lvh: thank you. :)
19:07  astrojp: moreati: :)
19:08  lvh: regexen are why I think everyone should be forced to do perl, that experience now makes me produce beaker-like noises and facial expressions when I see regex cdoe
19:08  JodaZ: lvh, look at it like this, you also don't want any of your software to murder your boss or crapp all over the place, but do you put that in its specification ?
19:09  sim_sim: Hi all, i have a dictionnary that i want to make a copy of - deepcopy() - Problem this dict contains a buffer (readonly one..) and thus can not be copied. It fails hard with : File "/home/djcoin/minitage/dependencies/python-2.6/parts/part/lib/python2.6/copy_reg.py", line 94, in __newobj__ --> return cls.__new__(cls, *args). At his deepest. Any help would be greatly appreciated
19:09  SeanInSeattle: moreati:  I've stored them in a postgis environment.
19:09  lvh: JodaZ: And you consider "not JVM-based" to be equivalent to "murdering your boss" or "crapping all over the place"?
19:09  sim_sim: Important note : The buffer contains binary data ;
19:09  Sub_Zero: So there's two parts of my application, The parent and the child, The parent Python built app always comes in exe form so no one can steal my source, Now the child scripts are getting compiled via py2exe, I'm trying to alter it to compile the source of a py file via passing such inside of a variable.
19:09  Sub_Zero: Substituting all fp.reads()'s for the var containing my source doesn't work, It still compiles the wrong py file, Any help?
19:10  lvh: JodaZ: There are multiple ways of sandboxing Python. Most of them are imperfect. The best solution depends on what you're doing with it.
19:10  lvh: sim_sim: Aaargh. Why are you copying?
19:10  moreati: SeanInSeattle: Then you can use UMN MapServer, and render to a file http://mapserver.org/mapscript/python.html
19:10  lvh: sim_sim: In general, deepcopy is a sign of very broken code
19:10  lvh: Sub_Zero: "so no one can steal my source" is a lie
19:11  Sub_Zero: ivh You can make it harder though
19:11  sim_sim: lvh, in fact - lol -, this is what happens in the django sql code. I m giving him some dictionnary full of params for my query. And at some points, i do not know why, it tries to copy it.
19:11  lvh: Sub_Zero: My nick is "LVH".lower(), not "IVH".title()
19:12  lvh: Sub_Zero: Yeah, there are still only two kinds of software: software worth stealing and software not worth stealing
19:12  JodaZ: whats deepcopy ?
19:12  Kaedenn: JodaZ: bad. don't use it. don't worry about it until it comes up
19:12  sim_sim: JodaZ, copy a dictionnary recursively
19:12  sim_sim: with all it s content
19:12  JodaZ: sim_sim, recursively ?
19:13  sim_sim: lvh, maybe i could get away by reading this buffer full of binary data and give him as a raw string of something
19:13  lvh: JodaZ: a = {1: [], 2: []}; b = dict(a); del b[2] # does not affect a;; b[1].append(1) # affects a
19:14  lvh: JodaZ: deepcopy would also copy the lists
19:14  lvh: sim_sim: I'm sorry for your pain.
19:14  lvh: sim_sim: Consider asking #django, we don't really have a lot of smart django people here
19:15  sim_sim: lvh, in fact, i already did
19:15  sim_sim: but I guess i can find a work around that is not django specific
19:15  JodaZ: lvh, yeah, this is another issue with python not having first class references :(
19:16  lvh: JodaZ: What
19:16  lvh: JodaZ: Actually, no, never mind.
19:17  lvh: sim_sim: Difficult. You could read it and just use the string, but I'm guessing there's a reason there's a buffer there in the first place?
19:18  sim_sim: lvh, it's a buffer because this comes from a C++ lib. And I need those data to perform my SQL query
19:18  lvh: sim_sim: *Ouch*. Yeah, okay, reading the buffer seems like the least bad option.
19:23 --- bojo__ is now known as bojo
19:25  lvh: Argh, why do people leave so quickly
19:25  lvh: polymaps might be just what SeanInSeattle wanted
19:26  cebru: Hmm, does Sqlalchemy not support python3?
19:26  cebru: I get an exception in one of their classes...
19:27  papna: cebru: There is a Python 3 version of sqlalchemy.
19:29  cryptic0: is there a PDF version available for Downey's intro python book?
19:29  cebru: papna: Just saw the py3kstuff.... I missed that before.
19:33  sly007: Hello, in "foo %r bar %r" % (team, misc), what is the %r for? I don't know where in the doc i hould look for this
19:33 --- mukul_afk is now known as mukul
19:35  lvh: sly007: String interpolation.
19:35  lvh: sly007: %r uses the repr of an object.
19:36  lvh: sly007: reprs are debug representations of objects.
19:36  sly007: lvh: thanks, where is that in the doc?
19:36  Yhg1s: http://docs.python.org/library/stdtypes.html#string-formatting-operations
19:39  sly007: Yhg1s: thanks!
19:49  mukul: What is a gtk widget?
19:50  moreati: A widget is a Graphical User Interface element like a text box, or a button
19:51  moreati: A gtk widget is just a wisdget that is implemented by GTK toolkit library
19:51  Cam: magcius; <3
19:52  magcius: Cam, ?
19:52  Cam: Just a good morning heart.
19:57  xor: Hi there.
19:59  xor: I have a question. Generally speaking in C++ for instance, when we have an iterator and for some reason delete an element of the list that iterator points to, there can be trouble with that operation.
19:59  xor: Can the same thing happen in Python with the dictionary iterators?
19:59  xor: Or views, as I think they are called.
20:01  zaltekk: xor: do you mean the fact that STL iterators are invalidated when you modify what they iterate over?
20:02  xor: zaltekk: Yes, that's what I'm worrying about.
20:02  mukul: magcius: How to make a gtk widget?
20:02  magcius: Cam, good morning!
20:03  magcius: mukul, what do you mean?
20:03  mukul: magcius: Sorry, misdirected to you.
20:03  magcius: mukul, well, what OS are you on?
20:03  mukul: moreati: Can you give a code example?
20:04  magcius: mukul, because I know a lot about gnome/GTK+
20:04  mukul: magcius: Ubuntu 10.04
20:04  magcius: mukul, hold on, I'll see if you can get pygi
20:04  mukul: magcius: thanks
20:04  cnf: I LOVED YOU PYGI, I LOVED YOU!!!
20:06  magcius: cnf, well it's now pygobject, since the branches merged
20:06  zaltekk: xor: hmm. i would assume not, but i'm not actually sure.
20:06  magcius: cnf, but I agree, it's much better than the PyGTK+ generated bindings POS
20:06  cnf: guess no one got that reference...
20:06  magcius: cnf, no?
20:06  cnf: i don't like gtk
20:06  cnf: i don't use gtk
20:06  shiftingcontrol: i want to code for android mobile using python,but i m unable to install ase,i downloaded .hg file from code.google.com and i m unable to install in ubuntu can anyone help me out
20:06  magcius: cnf, fine.
20:06  xor: zaltekk: I'll mess around in interactive mode and figure it out myself.
20:06  xor: Thanks for the help
20:07  cnf: magcius: what was a zim quite
20:07  cnf: well, a gir one, really ^^;
20:07  magcius: cnf, oh.
20:07  magcius: cnf, I haven't watched Zim that much, just because it was like listening to the annoying 12-year-olds next door
20:08  cnf: zim is so funneh ^^;
20:11  nixfreak: is it possible to use python to scrape multiple websites and once but also be able to input the fields also , for instace I have a web UI that I can look for customer info can I write a python script to input into that field
20:12  nixfreak: I don't want to use 5 different web UI I just want to combine all of them and get the out on commandline
20:12  nixfreak: does that make sense ?
20:12  zpoley: yes
20:13  nixfreak: ok is there an example I can see of what libs I need just to get me started
20:13  zpoley: http://wwwsearch.sourceforge.net/mechanize/
20:13  zpoley: i haven't used that particular version of mechanize, but i've used perl and ruby mechanize
20:13  mcantor: How do I dynamically define tests to run with nosetests?
20:14  zpoley: i think that's probably what you want
20:14  nixfreak: very cool thanks
20:14  mcantor: That is, how can I make it so that an arbitrary number of tests are run from a single class or method?
20:14  mcantor: I want the granularity of seeing exactly which test failed, but I don't want to have to physically create every single test.
20:15  mukul: How to create a gtk pango widget? Can someone give an example?
20:17  mcantor: Ah... figured it out.  Have to make generators: http://stackoverflow.com/questions/1193909/pythons-unittest-and-dynamic-creation-of-test-cases
20:17  tasslehoff: I`m using Emacs with pymacs/rope/ropemacs. Completion works, but only for one level. It completes to os.path, but not to os.path.abspath. Anyone have a better working setup?
20:17  shiftingcontrol: have anybody tried python in android ?
20:19  moreati: shiftingcontrol: I played _very_ briefly with ASE, don't think you could write an app with it that you intended to distribute
20:20  shiftingcontrol: moreati:its basically to learn,i don't like to program with java sdk whick google offers,i am comfortable with c/python/php
20:20  moreati: mukul: What do you mean by a gtk pango widget? What do you want it to do?
20:21  moreati: shiftingcontrol: what's to say then, install ASE and you have an interactive interpreter, but no platform UI bindings
20:23  shiftingcontrol: moreati:i m unable to install it,.hg file i m seraching for hw to install .hg files .few min back i found the site
20:23  moreati: shiftingcontrol: I'm not sure what a .hg file is, I installed  from a .apk
20:24  shiftingcontrol: moreati:hg is mercurial file u need ,i ve downloaded .apk next wot shuld i do with it ?
20:24  moreati: shiftingcontrol: I didn't use mercurial, why do you think that's needed?
20:25  shiftingcontrol: moreati:.hg file can be opened oly by tad
20:25  bahamas: nixfreak: you can also look at scrapy
20:25  SpiderFred: what this "iteration += 1" does? I mean that += part
20:25  moreati: shiftingcontrol: what?
20:25  bob2: SpiderFred: same as: iteration = iteration + 1
20:25  moreati: SpiderFred: it's in place incrementing,
20:26  bob2: SpiderFred: but you very rarely do manual loop counting in python - have you seen enumerate() and range()?
20:26  bob2: it's not in place
20:26  SpiderFred: oh ok thx
20:26  shiftingcontrol: moreati:to open .hg file yu need separate package,
20:27  moreati: shiftingcontrol: You aren'tmaking sense, why do want to open a mercurial repository? Android Scripting Environment doesn't need mercurial
20:28 --- MrElendig is now known as Mion
20:28  shiftingcontrol: moreati:http://code.google.com/p/android-scripting/downloads/detail?name=ase092209.hg&can=2&q=
20:29  kerio: enumerate() is godly
20:29  MTecknology: so.. time to learn python for realz this time
20:29  kerio: MTecknology: that was about time, yeah
20:29  shiftingcontrol: moreati:am i doing ryt thing ?
20:30  MTecknology: kerio: I've dabbled... I'm going through diveintopython.org
20:30  halberd: I used from mymodule import *
20:30  moreati: shiftingcontrol: no you aren't
20:30  halberd: mymodule has a function that sets a global, myglobal
20:30  kerio: MTecknology: do you know how to program?
20:30  bob2: don't do import *
20:30  MTecknology: kerio: some of their syntax is ugly though....
20:30  MTecknology: kerio: some..
20:30  halberd: but after I run the function, myglobal is not set
20:30  shiftingcontrol: moreati:so wot am i supposed to do ??
20:30  halberd: even though I declared it as global in the function
20:30  bob2: halberd: http://fpaste.org/, pastebin your program and give us the link
20:30  kerio: the python tutorial is really great for people who know how to program
20:30  kerio: it teaches python, not programming with python
20:31  MTecknology: kerio: where's that at?
20:31  kerio: http://docs.python.org/tutorial/
20:31  moreati: shiftingcontrol: you want http://code.google.com/p/android-scripting/downloads/detail?name=sl4a_r3.apk and http://code.google.com/p/android-scripting/downloads/detail?name=python_for_android_r1.apk
20:31  shiftingcontrol: moreati:i ve downloaded .apk file then hw can i install ?
20:31  bob2: halberd: but the answer is probably that 'from blah import foo' and  'foo = bar' creates a /new/ foo, it does not affect the eisting one
20:31  MTecknology: kerio: thanks, I'll go through both
20:32  moreati: shiftingcontrol: you nede to download those apks onto your android phone, then open them to  install them _on the phone_
20:32  MTecknology: kerio: http://diveintopython.org/getting_to_know_python/index.html
20:32  MTecknology: kerio: is that seriously good syntax?
20:33  shiftingcontrol: moreati:oops,i dont android android phone,is it not possible to install in linux system and try ?
20:33  kerio: woah, no
20:33  halberd: bob2, but shouldn't it, if I use the global declaration in the function?
20:34  MTecknology: kerio: this a little better? http://dpaste.com/263171/
20:34  moreati: shiftingcontrol: you might be able to install them in the emulator that comes with the android sdk
20:34  bob2: halberd: pastebin your code
20:34  kerio: MTecknology: still no
20:34  kerio: i'm not even sure that's ok according to the python syntax
20:34  sly007: Hello, how do I use the C version of the json library which is said to be simplejson (which has a c extension)?
20:34  bob2: sly007: it almost certainly Just Works if built correctly
20:34  MTecknology: kerio: could you please show me it cleaned up so I know what good syntax looks like?
20:35  dassouki: python to java (Android) .. I wonder how easy learning java is
20:35  halberd: bob2, http://pastebin.com/mezgTxRH
20:35  infobob: http://paste.enzotools.org/show/1282/ (repasted for halberd)
20:35  MTecknology: dassouki: I bet it's miserable..
20:35  sly007: bob2: I mean, if I import json, will it be the pure python decoder or the c version? I want to use the c version
20:35  bob2: sly007: that's not what you asked
20:35  sly007: bob2: I mean the C extension
20:35  bob2: sly007: simplejson should just import the C library if it was built correctly
20:36  bob2: sly007: I believe the json module in 2.6 has the C version removed
20:36  shiftingcontrol: moreati:so tad means i need install android sdk first from developer.android.com ?
20:36  tos9: halberd: With what you have, you realize you don't need global right?
20:36  kerio: MTecknology: http://dpaste.com/263173/ this is better, imo
20:36  sly007: bob2: I have python 2.7, what you are saying is that there's no C extension for parsing json?
20:37  sly007: (by default)
20:37  halberd: it's just a sample tos9 the actual case is more complicated
20:37  moreati: shiftingcontrol: yes, out of morbid interest what does 'tad' mean?
20:37  bob2: halberd: you're misudnerstanding what the global keyword is for
20:38  shiftingcontrol: moreati:tad means that
20:38  halberd: what am I misunderstanding?
20:38  moreati: shiftingcontrol: why do you write 'tad' and not 'that'?
20:38  bob2: halberd: no need for lines 5 and 6
20:38  shiftingcontrol: moreati:less chars
20:38  MTecknology: kerio: thanks, I like that comment part on its own line
20:38  halberd: bob2, in the actual code I do have a need for line 6
20:38  bob2: halberd: 'global foo' means that reassigning foo in the current scope will alter the global 'foo' rather than making a new local 'foo'
20:38  moreati: shiftingcontrol: also less understanding, please use proper words
20:38  bob2: halberd: then pastebin the real code
20:38  shiftingcontrol: moreati:truth is sms lang and got used to
20:39  shiftingcontrol: moreati:sure and thanks for the support
20:39  bob2: sly007: I'm saying that the json module in 2.6+ does not afaik include the C optimisations that simplejson does
20:39  MTecknology: kerio: can line 7 be made prettier?
20:39  moreati: shiftingcontrol: you're welcome, good luck
20:39  kerio: MTecknology: hmm, probably not
20:39  kerio: but it's efficient
20:39  kerio: although you can get rid of the tuple unpacking/tuple packing
20:40  shiftingcontrol: moreati:hope i install sdk and try hello word python code atleast,go to sleep. . .
20:40  MTecknology: kerio: probably a good idea to s/k/key/ and s/v/value/ ?
20:40  MTecknology: brb
20:40  kerio: nah, iterating over k, v or i is standard
20:40  cebru: I have a Game and Developer class. A Game has a Developer. Both class have a custom __str__ that returns a string. I can create a Game and a Developer just fine and print the object. However, if I print game.developer (developer is a property of type Developer) I get an error.
20:40  cebru: __str__ returned non-string (type Developer)
20:40  kerio: you don't go "for index in range()"
20:41  bob2: cebru: pastebin your code (http://fpaste.org/) + the exception
20:41  kerio: http://dpaste.com/263177/ is about the same
20:41  moreati: cebru: please pastebin actual code and traceback
20:41  kerio: although it's more efficient
20:41  kerio: because items() creates a list of tuples
20:41  halberd: bob2, http://pastebin.com/2cfucYya
20:41  infobob: http://paste.enzotools.org/show/1283/ (repasted for halberd)
20:41  shiftingcontrol: moreati:sdk got all python and .apk files
20:41  tos9: kerio: ew, no if you want no list built you use iteritems
20:42  tos9: *tuple
20:42  cebru: My code can be found here: http://git.farmbot.dk/cgit/cgit/game_catalogue/tree/ . Error here: http://pastebin.com/99CHuTTm
20:42  infobob: http://paste.enzotools.org/show/1284/ (repasted for cebru)
20:42  bahamas: MTecknology: you can replace .items() with .iteritems()
20:42  halberd: well I actually suppose I could do without lines 16-17
20:42  tos9: kerio: also, this is really a minute point for him, he should just use the tut and not worry about this at this point
20:42  bob2: sly007: though I can't find a source, but it is missing _speedups.so
20:42  bahamas: ah, tos9 already said it
20:42  halberd: but I still want to know why it works when I do import eulertools, but not when I do from eulertools import *
20:43  kerio: halberd: because import eulertools and from eulertools import * are two different things
20:43  halberd: that doesn't tell me why
20:43  bob2: halberd: think about it
20:43  bob2: halberd: also, just don't use 'import *'
20:44  bob2: halberd: when you do 'from foo import bar ; bar = 0', you create a new local called bar, which hides the thing you just imported
20:44  bob2: halberd: when you do 'import foo ; foo.bar = 0' you alter an attribtue of foo
20:44  bob2: halberd: which is viisble to any code access the module 'foo'
20:45  halberd: but if I append to bar and use from foo import bar it is visible and not the local?
20:45  tos9: cebru: Are you coming from Java?
20:46  cebru: tos9: Is it that obvious? :(
20:47  tos9: cebru: Heh. Get rid of your java! Python lets you have multiple classes per module :D
20:47  bob2: halberd: yes
20:47  halberd: well why?
20:47  bob2: halberd: since you're just altering an object
20:47  bob2: cebru: so much overengineering :)
20:47  bob2: cebru: no need for properties on Developer
20:48  halberd: but how come if I set bar it makes a new local bar - but ONLY if I use import *
20:48  cebru: How come?
20:48  tos9: cebru: yeah and also that ^
20:48  bob2: cebru: what's the point?
20:48  bob2: halberd: that's not the case
20:48  halberd: but if I append to bar it always refers to the existing bar?
20:48  bob2: halberd: it would happen if tou did 'from foo import bar', too
20:48  halberd: well okay but it doesn't happen if I do import foo
20:48  tos9: cebru: If you're not doing anything with your properties, there's no point in hiding the attrs.
20:48  Rotham: anyone know any CRM software written in python?
20:48  tos9: "hiding"
20:48  bob2: cebru: in java, moving from an attribute to getters/setters causes the api to change
20:48  bob2: cebru: in python it does not
20:48  moreati: cebru: in set_developer you're assigning to self.developer, elsewhere you've used self._developer, but as others said you don't need to use properties and setters/getters
20:48  bob2: cebru: so do it if you ever need to, and not before
20:49  cebru: And yeah, I did actually put them all in one module a commit back I think...
20:49  halberd: this doesn't make sense
20:49  bob2: halberd: this is unrelated to importing, really
20:49  bob2: halberd: ok, stop, I'll show you some examples
20:49 --- Yvemath_ is now known as Yvemath
20:50  cebru: So I should just access the string like it was a public variable in Java?
20:50  tos9: cebru: Yes. Also in the future, when you actually do need a property, you probably don't ever want to be modifying / accessing the "internal" var unless you really mean it.
20:51  moreati: cebru: just do self.developer = developer in the __init__() and delete the propery lines
20:51  tos9: cebru: (i.e. __str__ would have returned self.developer_name)
20:51  halberd: in the original example I posted, http://pastebin.com/mezgTxRH, if I did from test import foo, and then from test import myglobal, does that make a new myglobal?
20:51  infobob: http://paste.enzotools.org/show/1282/ (repasted for halberd)
20:51  bob2: halberd: http://paste.pocoo.org/show/279848/
20:51  bob2: halberd: does that output make sense to you?
20:52  halberd: bob2, now what if you put a "global foo" line in x
20:52  halberd: it does make sense but what if you do that
20:52  bob2: halberd: no, first, does the output make sense to you?
20:52  cebru: moreati: I see, will change it and see how it goes.
20:52  bob2: halberd: ok, good, so you get the difference between reasigning and mutation?
20:52  delaney: when sending an instance of a class to multiprocessing.map it appears to be sending by value instead of reference, any way to change that?
20:53  cebru: tos9: What do you mean with internal variable?
20:53  halberd: yeah it makes sense
20:53  halberd: yes
20:54  MTecknology: bahamas: what's the actual difference there?
20:54  Diverdude: which types of files may be included using from gstreamer import *  ?
20:54  tos9: cebru: _developer_name. By convention, the leading underscore indicates you're making that an internal var (i.e. one that is meant to handle internal implementation behavior, not exposed behavior. python doesn't have "private" vars)
20:54  Diverdude: ehhh no just from lib import *
20:54  bob2: Diverdude: don't do import *
20:55  Diverdude: bob2, okay...but which types of files may be imported?
20:55  bob2: Diverdude: the import statement can import .py, .pyc, .pyo, packages and dynamic libraries (extension depends on OS)
20:55  cebru: tos9: I see. Thanks for clearing that up.
20:55  magcius: Diverdude, that's a gstreamer question, not a python one
20:56  magcius: Diverdude, so, #gstreamer is the place you want to ask
20:56  halberd: I suppose, answering my own question, that "global" only looks for a reference in the module the function is originally defined in
20:56  halberd: not the module that it has been imported into
20:56  magcius: halberd, hm, that's a good question
20:57  magcius: halberd, http://docs.python.org/reference/simple_stmts.html#the-global-statement
20:57  bob2: halberd: global only looks for a reference in the enclosing scope
20:57  magcius: halberd, it's a parser directive
20:57  bob2: er, top level enclosing scope
20:57  bob2: I'm not sure what's going on with your code
20:57  magcius: bob2, right, it's an interesting question
20:58  halberd: well bob2 it does seem to behave that way
20:58  magcius: bob2, def foo(): global test
20:58  magcius: bob2, from libfoo import foo
20:59  bob2: http://effbot.org/zone/import-confusion.htm says "And if name in X is changed to point to some other object, your module won’t notice."
21:00  bob2: so I think I was just wrong and went on a big erroneous rant
21:00  halberd: bob2, magcius http://paste.pocoo.org/show/279853/
--- Log closed Sun Oct 24 21:05:59 2010
--- Log opened Sun Oct 24 21:06:22 2010
21:06 --- Users 734 nicks [0 ops, 0 halfops, 0 voices, 734 normal]
21:06  MTecknology: bahamas: to the coder is it basically the exact same thing and one is just more efficient?
21:07  bob2: halberd: so I think the answer is: that's a quirk of import *, sorry for leading you down the garden path :)
21:07  tos9: MTecknology: Not exactly. You can't index it for example.
21:07 --- Channel #python was synced in 91 seconds
21:08  MTecknology: oh
21:08  MTecknology: makes sense
21:08  RixiM: bob2: thx
21:09  sneak: i need a string representation indicating an object.  i don't want to reproduce it, i'd just like to see the methods and attributes that are on it, a-la perl's Data::Dumper
21:09  sneak: i've been using pprint but that only works for non-objects
21:09  moreati: MTecknology: 95 times out of a hundred you aren't indexing the items, you're just looping over them. So for every day purposes it's the same
21:09  sneak: how can i go about doing that?
21:09  moreati: sneak: look at dir()
21:09  tos9: sneak: Don't understand the question, nor know any perl. But it sounds like you want dir()
21:10  MTecknology: I feel like there's a crap ton to learn in python but once you dive into it for about a week you'd get a solid understanding of it..
21:10  sneak: ok, what about methods available on that object?
21:10  cebru: Maybe I am just getting __str__ all wrong. Is it not the equivalent of toString() in Java?
21:10  bahamas: sneak: that also shows you the methods
21:10  tos9: MTecknology: Work through the tutorial. Worry about details later. After the tutorial you should have a fairly solid base.
21:10  bahamas: there is no visual difference though
21:11  moreati: sneak: http://docs.python.org/library/functions.html#dir
21:11  tos9: cebru: If I remember my Java, yeah, it is. Did you answer bob2's question above? What do you get for print type(self._developer_name)?
21:12  Aufwind: Why does this little peace of code not work? I wanted to alter an element of the list by iterating through it and... http://fpaste.org/74kq/
21:12  bob2: sneak: methods are just attributes
21:12  MTecknology: bleh.. hating the time to download a fresh linux source tree
21:12  bob2: Aufwind: that does nothing, it just makes a new 'l' that has some value
21:12  Aufwind: bob2: What would be the right approach?
21:12  bob2: Aufwind: normally you make a new list
21:13  MTecknology: 2.3MiB/s and somehow I'm complaining about slow :P
21:13  Aufwind: Is it not possible to alter an element this way? (delete, change)?
21:13  bob2: Aufwind: http://fpaste.org/74yT/ mutates that list
21:13  sneak: bob2: that's helpful to know, thanks
21:13  sneak: ahh, i see them now.
21:13  bob2: Aufwind: of course it's possible, just not the way you were doing it
21:13  cebru: tos9: No longer have the _developer_name, just developer_name. But the first print ('print (Developer("TestName"))') returns a string, the second print ('print (game.developer)') a class. My problem is I don't understand why they are treated differently.
21:13  sneak: thanks guys
21:14  lvh: if cmp(l,'b') == 0: # wtf
21:14  Aufwind: bob2: I see!
21:14  bob2: Aufwind: cmp is pointless there, though
21:14  bob2: and just about everywhere, really
21:14  lvh: also, that code causes NameError
21:14  Aufwind: bob2: It was just an example to show my problem? Why is cmp pointless, everywhere?
21:15  mukul: http://paste.ubuntu.com/519373/ Please check this.I'm new to pygtk. I want to get pixel size of a character.
21:15  tos9: cebru: K, good. Did you get rid of all the properties in your Game class too?
21:15  lvh: Aufwind: if you wanted to show the problem just use l == 'b'
21:16  lvh: Aufwind: also, cmp is simply not something you generally use in code
21:16  bob2: Aufwind: how often do you want to get -1,0,1 rather than a boolean?
21:16  lvh: practically everything uses key functions and __lt__ now
21:16  lvh: (well, operator.lt)
21:16  cebru: tos9: Nope. It is not that I don't agree with you now that they are no longer needed, but I am just experimenting with the language and want to keep some of the properties for future reference. But are they causing the problem?
21:17  bob2: Aufwind: making new lists is often done using listcomps, btw: http://docs.python.org/tutorial/datastructures.html#list-comprehensions
21:17  tos9: cebru: Could be, dunno, I'm just trying to track down your bug with the code you're working with. If it's the same I'll take another look at what you have here.
21:17  johnny5ive: do I need to put decorator functions inside the class that is using them?
21:18  bob2: johnny5ive: no
21:18  Aufwind: bob2: I see,... Didn't thought about it that way. My focus was somehow, that a function called "cmp" / compare would be the right one for comparing elements ^^ This list-comprehensions seems to be the thing I need. Thank you very much!
21:18  bob2: in fact that is super hard
21:18  cebru: tos9: Tried removing the properties and accessing it from self.developer, but same error
21:18  bob2: cebru: what does 'print type(self._developer_name)' do in developer.py:18?
21:19  bob2: or whatever you call it now
21:20  johnny5ive: can someone look at the example code and tell me what i'm doing wrong? I'm getting a NameError on the decorator. http://pastebin.com/gDhrFCE3
21:20  infobob: http://paste.enzotools.org/show/1287/ (repasted for johnny5ive)
21:21  bob2: johnny5ive: move the decorator function above the class
21:21  bob2: johnny5ive: python files execute from top to bottom, remember :)
21:21  cebru: bob2: print (Developer("TestName")) gives <class 'str'>, print (game.developer) gives <class 'domain.developer.Developer'>
21:21  tos9: johnny5ive: Which still won't work how you think it will though
21:21  tos9: johnny5ive: You're returning the function object, not the result
21:22  moreati: mukul: From the docs I can't tell what the proper way to do that is. Your best bet is probably to ask on the PyGTK mailing list
21:22  johnny5ive: "not the result".. meaning it won't print "stuff"
21:22  johnny5ive: tos9 ?
21:22  bob2: johnny5ive: it will print that, but it won't decorate the function
21:22  tos9: Right.
21:22  johnny5ive: how do I need to change that example to decorate the function? decorators are new to me, obviously
21:22  bob2: johnny5ive: it'll print that once, when the class body is executed, not when the method is called
21:23  bob2: johnny5ive: return another function, that prints + calls the original function
21:23  johnny5ive: so put another function definition inside the decorator?
21:23  bob2: yes
21:23  bob2: cebru: what's the current traceback?
21:24  bahamas: johnny5ive: here's one long explanation of python decorators http://stackoverflow.com/questions/739654/understanding-python-decorators#1594484
21:24  johnny5ive: Thanks guys. :)
21:25  cebru: bob2: http://paste.enzotools.org/show/1288/
21:25  bob2: cebru: __str__ needs to return a string
21:26  bob2: it won't recursively call down forever
21:27  nondraj: Whats wrong with this one ?
21:27  nondraj: http://codepad.org/g8F2hJb0
21:27  cebru: bob2: I just don't see where I am not returning a string. All my __str__ returns a self.name of some sort.
21:28  tos9: nondraj: What is that supposed to be doing?
21:28  bob2: cebru: which is great, but .name isn't a string, it's a Developer instance, right?
21:29  bob2: btw, I know you want to keep the proprties and stuff, but such verbose code makes it harder to see what is going on
21:29  tos9: nondraj: line 4 I mean. And why are you (seemingly) using python3?
21:30  nondraj: tos9: the book i have is using python3
21:30  cebru: bob2: Yes, game.developer is an instance of Developer. But when I print that, shouldn't it return the __str__ of the developer instance? In Java it would.
21:30  bob2: cebru: changing line 18 of developer.py to return str(self.developer_name) is probably the fix
21:30  bob2: cebru: no, it doesn't magically keep calling __str__ on things
21:31  cebru: bob2: That did it! Thanks :)
21:31  cebru: and yeah, I am removing most of the properties now
21:31  nondraj: tos9: it should display  invalid literal for int() with base 10:"3.5"
21:32  nondraj: and if add there 10 it should display valid integer entered: 10
21:32  bob2: and the factory
21:32  tos9: nondraj: Why are you catching the exception and then printing it?
21:32  bob2: and rename .developer_name to .developer
21:33  bob2: ditto platform_name to platform
21:33  tos9: nondraj: and what's "3.5".i? That's a str, what do you think that should get you?
21:34  nondraj: tos9: well thank you for help i need to go
21:34  bob2: return self._game_name + " by " + self._developer.__str__() + "[" + self._genre.__str__() + "]" -> return "%s by %s [%s]" % (self._game_name, self._developer, self.genre)
21:34  cebru: bob2: Then it would be developer.developer to get the name... isn't that confusing?
21:34  Aufwind: The word "of" is (the only one, that is) not found in this comparison in the loop. I can't figure out why... http://fpaste.org/YRIS/
21:34  bob2: cebru: it's not the name, it's a Developer isntance
21:34  cebru: bob2: right...
21:34  damd: Aufwind: could it be that the index jumps over it?
21:35  Aufwind: damd: How does this happen?!
21:35  julienb: hi all !
21:35  bobperson0: Hello
21:36  julienb: How can I convert a string to a float ? Like convert "2.45" to 2.45 ?
21:36  damd: Aufwind: well, i guess you delete some items in that list, making the index point one step ahead so to speak
21:36  damd: Aufwind: add this below "del": index -= 1
21:36  damd: see if that helps
21:36  moreati: julienb: float('3.5')
21:36  tos9: damd: whoa, what? no
21:36  damd: no?
21:36  bobperson0: julienb: float("2.45")
21:36  julienb: thanks !
21:37  Aufwind: damd: No it doesn't...
21:37  tos9: Aufwind: You don't need ' ' in split, it will by default split by spaces, but anyways, you want str.replace or list.remove most likely
21:37 --- sudarshan is now known as progs
21:38  moreati: or new_list = [x for x in list1 if x not in list2]
21:38  tos9: Yeah, if you have multiples you're gonna need to use that list comp.
21:38  kerio: moreati: or just iterate over the list like that
21:39  tos9: And it's probably smarter in general, moreati's right.
21:39  Aufwind: thank you all. I ll try moreatis suggestion. :)
21:39  moreati: new_list could of course be list1 if you want to replace the original
21:44  cebru: bob2: http://git.farmbot.dk/cgit/cgit/game_catalogue/tree/
21:44  Aufwind: I've tried it this way: http://fpaste.org/XrQJ/ But my result is [None, None, None, None]
21:45  Aufwind: Not really what I expected...
21:45  cebru: bob2: Should now work properly and not as many properties. A few kept for future reference.
21:46  moreati: Aufwind: http://fpaste.org/PAac/
21:46 --- mukul is now known as mukul_afk
21:46  cebru: bob2: The %s was a nice touch, thanks for that one :)
21:47  moreati: Aufwind: me idiot, try this http://fpaste.org/2LhX/
21:48  Aufwind: moreati: Thanks, but the result is still [None, None, None, None]
21:48  bob2: cebru: I don't get why you're wrapping objects in themselves
21:48  GrIM147: with wxpython can you call a dialog from within a dialog ?
21:48  bob2: cebru: line 12 of g_c.py creates a Developer object, then you jump through 17 hoops to end up assigning that as an attribute of another Developer instance
21:49  Aufwind: moreati: The idiot was me this time :D
21:49  Aufwind: moreati: I forgot to remove the old line of code :D
21:50  Aufwind: moreati: Thank you
21:51  cebru: bob2: Ah yeah... Shouldn't create the Developer in g_c.py
21:52  bob2: cebru: the _foo_name prefixes seem a tad redundant, too - somedeveloperinstance.name might be clearer?
21:52  ts00000: what's the correct way to determine if a key is defined?  I would use try: for variables, but it seems to throw a keyerror when doing it on keys themselves.
21:52  ts00000: e.g. try: foo['bar']
21:53  bob2: ts00000: using try: to catch NameError is just about always a terrible idea
21:53  moreati: ts00000: if 'key' in some_dict
21:53  bob2: ts00000: for checking keys, you can catch KeyError or "if key in some_dict"
21:53  cebru: bob2: It does, yes... changing...
21:53  ts00000: KeyError is what I was looking for :)
21:53  ts00000: thanks
21:53  x0rs: If Python has been my first learned programming language, will it hinder my attempts at learning other lower-level languages in the future since a lot of things are automated in Python? (I LOVE Python btw, already a fanboy)
21:53  bob2: ts00000: which to use is a matter of taste, really - KeyError if it should almost always be there, 'in' if not
21:54  ts00000: is has_key more efficient in some way?
21:54  papna: ts00000: When you want to check if there's a key in a dict, you can use either of those methods, but dict.get, dict.setdefault, and collections.defaultdict are usually what you want.
21:54  ts00000: or try is the right way?
21:54  papna: ts00000: has_key is long deprecated in favour of in.
21:54  bob2: ts00000: don't use has_key
21:54  ts00000: ok, thanks
21:54  bob2: x0rs: nah
21:54  papna: x0rs: Not really.
21:55  x0rs: bob2, papna: excellent, thanks =)
21:56 --- bobperson0 is now known as conley
22:02  Diverdude: Is it correct understood that the difference between    import from fibo import fib, fib2    and import fibo     is that if i use the latter i can refer to functions in the fibo module as just fib and fib2, and in the first i have to go fibo.fib and fibo.fib1 ?
22:03  papna: Diverdude: You have it backwards, and you have an extraneous "import" in the former.
22:04  papna: Should I dependency inject my gettext?
22:04  Diverdude: papna, ohh yeah of course i meant the other way around
22:04  Diverdude: papna, yes hehe youre right...ok good i get it...thx
22:05  dash: Diverdude: that's it.
22:06  Diverdude: dash, what?
22:06  dash: never mind. what papna said :)
22:06  papna: dash: I thought you'd had it with these motherfucking snakes on this motherfucking plane.
22:06  Diverdude: dash, hehe yeah....im a bit confused....sorry bout that
22:07  dash: papna: no, that's fine
22:07  dash: papna: it's snakes in a Riemannian manifold that really get on my nerves.
22:08  Diverdude: aha....so its possiblt to byte compile .py files to .pyc files?
22:08  papna: Diverdude: Python will do this for you. Don't worry about trying to do this special on your own.
22:09  Diverdude: papna, okay, so the reason why i have not seen .pyc files in my directory is because the .pyc file is created on the fly, executed and disposed?
22:11  papna: Diverdude: It is because you aren't importing the py modules or because you don't have write rights or because you are running with weird environment variables or command line options.
22:11  papna: I suspect the first.
22:12  Diverdude: papna, but if i just write a small python script and save it in a .py file
22:12  papna: Diverdude: You don't ever need to think about pycs. They are an unimportant thing.
22:12  Diverdude: allright....just wanted to understand
22:13  dash: Diverdude: it's just caching
22:20  x0rs: Once I learn the basics about how to use data type (strs, numbers, lists, dicts, tuples, etc...) as well as the basics of loops, functions, classes, and modules of Python. What should i begin doing next? Learning how to use specific modules?
22:20  moreati: x0rs: that depends what your goal is. What do you want to do with python?
22:21  x0rs: moreati: I am just learning to program for the first time period. So, I am trying to become well rounded with a language, so that I can use it for many things.
22:22  dash: x0rs: well
22:22  dash: why do you want to learn how to program? :)
22:23  moreati: x0rs: write an application - even a simple one. What bugs you? Write a program to scratch your itch
22:23  x0rs: dash: well, I am a heavy linux user, and I want to write personal programs to automate things that normally take time to do. Just to make my own life easier for now
22:23  dash: x0rs: sounds like a great place to start
22:23  moreati: x0rs: name one task that you want to automate
22:24  zoidberg-: work
22:24  zoidberg-: :p
22:24  x0rs: moreati: uploading updated files from my pc to my web-server to quickly update my blog
22:25  moreati: (I mean that in a make-you-think/sinprie you way. Please don't think I'm trying to dismiss you)
22:25  x0rs: moreati: thats just one of many that I probably will want to do
22:25  dash: x0rs: hmm. are you familiar with rsync?
22:25  x0rs: dash: nope, not yet
22:25  dash: x0rs: probably easier to use that than to write something new :)
22:25  zoidberg-: rsync is the bomb diggity, synchronize files man.
22:25  x0rs: dash: nice, I will check that out
22:27  tos9: Or dropbox if you'd like too.
22:31  jonathanj: hi
22:31  thyko: yo
22:32  jonathanj: is there an IRC channel for Sphinx-related questions?
22:32  thyko: just ask
22:32  dash: jonathanj: you mean, like
22:32  dash: riddles you have to get right, or be killed?
22:32  jonathanj: i'm wondering if it's possible to show hyperlinks in manual pages
22:32  jonathanj: dash: haha, no ;)
22:33  jonathanj: there is an option to show hyperlinks for latex output
22:33  jonathanj: but not manpages
22:33  jonathanj: (unless i'm blind)
22:39  papna: jonathanj: #pocoo
22:40  jonathanj: thanks
22:42  blast_hardcheese: Regarding the sqlite3 library, I understand why using ? is a good idea, but why can't I use it for things other than values? Is using percent escapes the preferred way of dealing with SELECT %(cols)s FROM %(table)s WHERE %(cond)s?
22:43  moreati: blast_hardcheese: it's the only way, but doing so is generally bad design. Unless you're writing a generic SQL Query tool
22:44  blast_hardcheese: moreati: I'm writing a library
22:45  moreati: blast_hardcheese: A library to do what?
22:46  blast_hardcheese: moreati: interface with my web app; I'm writing a general purpose duplication detection script based on md5 and sha1
22:47  blast_hardcheese: I'm allowing definitions for other file types in the library though, I'm starting with mp3
22:47  blast_hardcheese: so you can change id3 tags and not alter the actual hash of the mp3 data
22:47  blast_hardcheese: I'm using python-mp3, which looks perfect
22:48  moreati: blast_hardcheese: none of what you've said implies to me dynamic select or from clauses is appropriate
22:49  blast_hardcheese: I'm allowing extra column definitions to be specified in a script that uses my library, so they could invent a new hashing algorithm "superhash" and just say lib.HASHTYPES.append('superhash')
22:50  blast_hardcheese: then when my database checking function runs, it performs a select against the database for that column
22:50  moreati: blast_hardcheese: if you have many hash types you should be using a hashes table with (hashtype, file_identifier, hash_data)
22:50  blast_hardcheese: moreati: Hmm, I guess that would be better
22:51 --- progs is now known as sudarshan
22:51  blast_hardcheese: What about allowing the user to override the database information, like table name?
22:51  moreati: blast_hardcheese: why would they want to do that?
22:52  elryry: Is this the correct channel to ask for guidance with something?
22:52  moreati: elryry: if it's python related, yes
22:52  shylent: depends on what 'something' is
22:52  blast_hardcheese: moreati: If they had multiple instances of this application targeting the same database, or if they didn't like my name;
22:53  moreati: blast_hardcheese: if multiple instances then you want a 'session' column, and they provide a string of some sort or you generate one.
22:54  elryry: I was curious of how to go about writing a script for the following: I have about 1200 folders, ~90% with .log files and ~10% respectively without .log files. I would like to make a quick script search through the folders and any folder without a .log file get moved (cut) into a different location.
22:54  moreati: blast_hardcheese: if they don't like the table_name then they can change it in the source
22:54  blast_hardcheese: moreati: hmm.
22:54  moreati: blast_hardcheese: there is such a thing as _too many options_
22:55  blast_hardcheese: I guess
22:55  blast_hardcheese: I hate configuring things with too many options as well, but I'm providing sane defaults
22:55  blast_hardcheese: I hate having to modify the source to use a library I've installed via a package manager or something.
22:55  blast_hardcheese: that's really frustrating.
22:56  dKingston: heh
22:56  blast_hardcheese: I'm starting to use virtualenv and pip more though, so maybe I'll just stop using package managers for modules altogether
22:56  moreati: blast_hardcheese: add dynamic table names if someone asks for it, for now I'd stick with simplicity of bells n whistles
22:56  blast_hardcheese: moreati: alright
22:57  moreati: s/of/over/
22:57  blast_hardcheese: It's only two functions that even deal with the database anyway, so not THAT huge of a deal.
22:57  blast_hardcheese: and if they want, they can just override those functions.
22:58  blast_hardcheese: moreati: Thanks for the advice
22:59  moreati: elryry: your script will consist of an overall for dirpath, dirnames, filenames in os.walk() loop
23:01  moreati: elryry: and you'll be using shutil.move()
23:02  elryry: alright
23:02  kerio: hmm, will a shutil.move() call between filesystems block?
23:02  moreati: kerio: I think yes
23:02  moreati: kerio: test it
23:03  kerio: i don't have two filesystems here :(
23:04  verte: so make one and test it via loopback
23:04  moreati: kerio: surely you have a usb stick or portable hard drive...
23:04  kerio: moreati: well, not now
23:04  kerio: i'm in the bathroom
23:05  moreati: kerio: remember to wash your hands, and then find a usb stick.. any questions?
23:07  mercutio22: Can someone tell me which is better and why: when adding a series of elements to a list I could do list.append(element) or list += [element].
23:08  kerio: mercutio22: append is faster
23:08  kerio: but they're two different things
23:08  kerio: no, wait, they're not
23:08  kerio: stupid __iadd__
23:09  kerio: anyway, use append
23:09  mercutio22: kerio: ok. Thanks!
23:09  shylent: uhh, isnt __iadd__ actually 'extend'?
23:09  mercutio22: kerio: can you tell me why its faster?
23:10  kerio: because you're appending a single item, you're not parsing a list
23:10  kerio: i mean, the difference is minimal
23:10  moreati: and building the list
23:10  mercutio22: kerio: alright, I see..
23:10  verte: they are different when appending to a list via a non-local name
23:11  kerio: oh, they're the same with a local name?
23:12  verte: += does an unnecessary rebind, which means the name must be local or you will get an error
23:12  conley: Is there a builtin module or simple way to adjust color temperature?
23:12  kerio: conley: i don't think so
23:12  moreati: conley: nothing built in
23:12  kerio: but it should be a matter of simple calculations
23:13  conley: kerio: but what would I apply the calculations to?
23:13  kerio: no idea - what do you want to do?
23:13  conley: kerio: lower the color temperature at night
23:14  kerio: for what? the screen?
23:14  kerio: that's a matter of monitor
23:14  conley: It can be done through software, though
23:14  kerio: so... find out if you can automate it by interfacing with the proprietary software
23:14  kerio: or try to figure out what the software does
23:15  arkanes_: they're different always
23:15  conley: Yea, the latter is what I'd like to accomplish.
23:15  arkanes_: because += does not do append()
23:16  arkanes_: mercutio22: it's important that you got that, which may have been missed in the other discussion. += does not append to the list
23:17  kerio: arkanes_: we're comparing list.append(foo) with list.__iadd__([foo])
23:17  arkanes_: kerio: yes I knoe
23:17  arkanes_: kerio: += *does not append*
23:17  kerio: += is the same as extend, isn't it
23:17  arkanes_: kerio: it does the same as *extend*, which is a very different thing
23:18  papna: kerio: += shouldn't be used.
23:18  mercutio22: arkanes_: yeah I lost that. Whats is the difference between append and extend?
23:18  kerio: papna: then why is it there :\
23:18  arkanes_: mercutio22: append works on items, extend works on sequences
23:18  magcius: arkanes_, is there any difference between += and extend, fundamentally?
23:19  kerio: mercutio22: append adds one item, extend adds a sequence of items
23:19  arkanes_: magcius: sure lots
23:19  arkanes_: magcius: you'll end up with the same list in the end, though
23:19  verte: magcius: += binds
23:19  mercutio22: kerio: I see
23:19  magcius: verte, binds?
23:19  verte: it is an assignment.
23:19  magcius: verte, well yes.
23:20  magcius: verte, but if I did def __iadd__(self, L): self.extend(L); return self;
23:20 --- SpiderFred is now known as johannstein
23:20  magcius: verte, would it work perfectly?
23:20  arkanes_: mercutio22: if you have an already-existing sequence of items that you want to add to a list, then use extend
23:20  arkanes_: magcius: it would work the same way that lists build in __iadd__ does
23:21  kerio: verte: so if you have a list returned by a property, and you iadd to that...
23:21  kerio: you'd end up against the setter of the property?
23:21  magcius: arkanes_, right
23:22  verte: infobob: codepad kerio def f(): things.append(7);; things = []; f()
23:22  infobob: kerio, http://codepad.org/feeBcVC3
23:22  verte: kerio: yes
23:22  kerio: verte: how's that paste helpful?
23:22  verte: kerio: and that is an unbound local error where append would work correctly
23:22  verte: oops
23:23  kerio: i see
23:23  verte: change append to +=
23:23  kerio: wait, why doesn't that work?
23:23  kerio: because things becomes a local variable?
23:23  verte: exactly
23:24  kerio: that...
23:24  kerio: i'm not sure if i like that, actually
23:24  verte: its hygienic, which makes it different to other languages
23:24  arkanes_: well, if it didn't work that way it would be the only example of a non-local assignment operator in python
23:25  arkanes_: it'
23:26  moreati: verte: is there a list of infobob's commands?
23:26  verte: ctcp source
23:27  moreati: verte: thanks
23:27  kerio: is that a standard ctcp command?
23:28  verte: I think so! they have always confused me.
23:29  verte: he doesn't really do much these days, this is the old redent command but allowing certain pastebin names
23:33  sipsniffa: is there any way to get the path to the current virtualenv from within the current shell environment?
23:34  magcius: verte, he's also an admin bot of sorts now
23:35  magcius: verte, additionally, in -offtopic he can do eval/exec
23:36  verte: cool
23:36  verte: I know he maintains ban information
23:52  Tim1357: Can I recieve data from a socket in one thread, and send in annother?
23:53  dash: anything's possible
23:53  dash: but why use threads at all when you don'thave to?
23:53  Tim1357: :\
23:53  papna: Tim1357: Why would you do that/
23:53  Tim1357: Multithreaded calls to an API and a mySql database.
23:53  papna: Tim1357: Why the hell would you do that?
23:54  Tim1357: Because it
23:54  Tim1357: ...'s too slow otherwise.
23:54  Tim1357: I've done multithreading with the API and it /does/ speed it up quite a bit.
23:54  dash: Tim1357: what's "an API"
23:55  Tim1357: I'm not creating a new thread for each request, I'm just keeping a thread pool.
23:55  dash: that's about as specific as "some code" :)
23:55  Tim1357: Something you post HTTP Forms to, and get results from.
23:55  Tim1357: A url api.
23:55  dash: Tim1357: so "HTTP calls"
23:56  dash: and you want to make more than one at a time?
23:56  papna: Tim1357: Why not do them concurrently using async IO?
23:56  Tim1357: website.com/api.php?foo=bar.
23:56  Kaedenn: ... I've never heard "application-program interface" used in the context of CGI
23:56  Tim1357: Dash:Yes.
23:56  dash: Tim1357: so use twisted.web.client
23:56  papna: Tim1357: Or why not at least do your actual IO in one thread?
23:56  dash: Tim1357: and you can do multiple http requests simultaneously in a single thread
23:57  Ademan: hrm, help(enumerate) doesn't show the start optional arg...
23:58  papna: Ademan: File a bug report.
23:58  dash: Ademan: in which python version?
23:59  Ademan: dash: 2.6....5?
23:59  Ademan: yeah 2.6.5
--- Log closed Mon Oct 25 00:00:31 2010
