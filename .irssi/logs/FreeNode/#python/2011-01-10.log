--- Log opened Mon Jan 10 00:00:08 2011
--- Day changed Mon Jan 10 2011
00:00  Tyrope: oh, i noticed i spelled "slipt" wrong, it's written correctly in the code though.
00:01  laurus: bob2, I didn't know about iter()
00:01  laurus: Very interesting and useful!
00:01  bob2: it's quite neat
00:02  laurus: bob2, by the way, why did you do the formatting the old % way?
00:02  bob2: laurus: I'm old fashioned =)
00:02  bob2: also use 2.5 a lot
00:03  laurus: bob2, ah ok :) Just wasn't sure if you knew about the new way
00:03  Tyrope: kerio: fixed version (includes more code, i forgot the first part) http://paste.pound-python.org/show/1430/
00:05  laurus: bob2, let me ask you a follow-up, a modification
00:06  laurus: For each of these entries, the img link will be to "yo_01.jpg", "yo_02.jpg", etc, in order. How would you recommend I put the numbering in there?
00:06  verte: %02d
00:06  magicblaze007: which module for finding all ".py" files in a given directory recursively?
00:06  laurus: verte, right, but what about the counter.
00:07  laurus: I mean, I could put an i += 1 inside that if, but I thought there might be a better way
00:07  bob2: laurus: http://paste.pocoo.org/show/317928/
00:07  bob2: magicblaze007: os.walk I guess
00:07  bob2: magicblaze007: or is this some secret plugin system qyuestion
00:07  verte: for i in xrange(N) ?
00:08  laurus: bob2, ah, excellent, thanks!
00:08  laurus: I thought there might be something like that :)
00:08  magicblaze007: bob2: nope. just forgot...was looking at glob...Thanks.
00:09  bob2: magicblaze007: ah, I don't htink glob or fnmatch can do it recursively
00:10  laurus: bob2, what is that blah supposed to be?
00:10  bob2: the list of dictionaries
00:11  laurus: Oh, whoops, ok
00:11  laurus: Thanks.
00:14  magicblaze007: whats the easiest way to replace a line in a text file? (sitting on disc)
00:15  EntityReborn: Hey, looking for some help with PyQT, where would be a good place to ask for help?
00:15  magicblaze007: Can this be done using only one open?
00:16  laurus: bob2, that next() doesn't work
00:16  laurus: It doesn't give an index
00:16  Tyrope: magicblaze007: should be... open, search, write (should be overwriting, but i'm no expert on this), close.
00:16  laurus: Should I just do i+= 1?
00:17  Jerub: laurus: that's rarely the right thing to do.
00:17  Jerub: it looks like you may need something of the form:
00:18  Jerub: for i, part in enumerate(parts): f = open("part_%02d.jpg" % i, 'w'); f.write(part); f.close()
00:18  laurus: Jerub, also, is there a way to do %02d with the new way of doing string formatting?
00:18  browncustard: hmm ... papna_: would that be because functions are first-class in python, and it therefore doesn't make sense to draw a distinction (unless referring to functors as they term is applied in ML or Haskell)?
00:18  Jerub: laurus: oh, are you on python 3?
00:19  laurus: Jerub, no, just preparing for it
00:19  Jerub: laurus: okay, then don't use the new string formatting, use the old style or your code will only run on python2.6+ for no good reason.
00:19  laurus: Jerub, well I'd like to know for future reference anyway
00:19  kerio: why?
00:20  laurus: kerio, so I can use it later when I have a similar issue in a few years
00:20  kerio: also 2.6 was released in... 2008?
00:20  tarpsocks: is python doomed because of python 3?
00:20  kerio: laurus: no, i agree with you
00:20  tarpsocks: (serious question)
00:20  kerio: {:02d}
00:20  kerio: tarpsocks: "meh"
00:21  kerio: laurus: i think
00:21  tarpsocks: no library support
00:21  tarpsocks: performance decrease
00:21  laurus: Jerub, also, I can't do a for loop that way I don't think because I'm already doing a for loop over the lines in the input
00:21  papna_: browncustard: It's becasue of Python's scoping, type semantics, and community.
00:22  laurus: Ahh, I see a way to do it
00:22  MostAwesomeDude: tarpsocks: Is there a practical point to this question?
00:23  tarpsocks: because I want to put all my energy into learning python MostAwesomeDude, and I want to make sure job opportunities will be there when I am ready
00:24  laurus: tarpsocks, Python 3 is better than Python 2 overall...
00:24  bob2: laurus: works for me
00:24  MostAwesomeDude: tarpsocks: Come work on X.org. You will have ample job opportunities. You may need to increase your drinking habits though.
00:24  bob2: laurus: d = enumerate([1]) ; index, item = next(d) ; print index, item
00:25  MostAwesomeDude: tarpsocks: Also, learning Python 3 is easy once you've learned Python 2, and vice versa. They're not that different.
00:26  laurus: bob2, yes, I got it working a different way
00:27  laurus: kerio, I figured it out:
00:27  laurus: '{0:02d}yo'.format(3)
00:27  laurus: for example :)
00:27  woozly: how to know how long time executed block of code?
00:28  woozly: I want to know how long executed my parsing block
00:28  woozly: time of running of piece of code
00:28  KirkMcDonald: woozly: Either the timeit module, or the profiler.
00:29  laurus: Is there a way to read out data from sqlite3 into a dictionary rather than just a list?
00:30  tos9: laurus: with what as the keys / values?
00:30  laurus: tos9, the keys being the column names, and the values being the row values.
00:31  seemant: smw: thanks again -- I got it to work, just using urllib2 :)
00:31  smw: seemant, np
00:31  KirkMcDonald: laurus: http://docs.python.org/library/sqlite3#accessing-columns-by-name-instead-of-by-index
00:31  tos9: laurus: to do exactly that probably not, but using Row objects it's more or less the same / perfectly doable
00:32  laurus: KirkMcDonald, oh, that's great
00:32  smw: seemant, I really need to make a giant tutorial (or maybe many tutorials) on webscraping :-)
00:32  laurus: tos9, that's great, thanks
00:32  laurus: Thanks!
00:32  laurus: :)
00:32  tos9: Mhm.
00:33  seemant: smw: that's a good idea
00:33  smw: seemant, after talking to you, it occured to me that people would want to read something like that.
00:34  browncustard: thanks for the help :)
00:36  seemant: smw: this was my very first time doing anything like this
00:36  seemant: smw: the pointers and help you gave me: invaluable
00:36  MostAwesomeDude: Wait, scraping without scrapy?
00:38  smw: MostAwesomeDude, yep. I use scrapy for big projects, but when scraping is not the main part or it is a bot (filling out forms and acting human) scrapy is not the right tool for the job.
00:38  smw: MostAwesomeDude, although, I must admit the scrapy shell still comes in handy :-)
00:39  MostAwesomeDude: smw: I've never had to actually use scrapy, because I view scraping as a last resort. Still, if you need to scrape, you might as well use a specialized tool.
00:39  eoc: heya; any idea how I can implement the following while still staying human-readable but avoiding duplication?
00:39  eoc: for i in ('a','b','c','foo'): i_variable = ("large expression only depending on " + i + " with string concatenation")
00:39  MostAwesomeDude: eoc: Could you give us a bit more context?
00:40  Jerub: eoc: that looks fine
00:40  MostAwesomeDude: eoc: Are you looking for l = [some_expression(i) for i in ("a", "b", "c", "foo")]
00:40  smw: MostAwesomeDude, scrapy is a great tool for jobs that is about pulling down large amounts of data. Many scraping cases don't involve that.
00:40  eoc: the i_var name needs to be name-adapted, too
00:40  MostAwesomeDude: smw: If you say so. :3
00:40  MostAwesomeDude: eoc: What.
00:40  eoc: hich is my problem right now
00:40  MostAwesomeDude: eoc: What are you working on? Could you show us some of the code?
00:41  bob2: eoc: nah, that's silly
00:41  azeth: Hello. I'm using python 2.6.6 version I have problem with smtplib: http://pastebin.com/LYLQGR83
00:41  infobob: http://paste.pound-python.org/show/1431/ (repasted for azeth)
00:41  tos9: Yay for typechecking.
00:41  bob2: azeth: first arg should be a string
00:42  azeth: bob2: what line?
00:42  bob2: azeth: whatever sender is
00:43  azeth: bob2: lemme check
00:43  bob2: it's a bug in 'postman', whatever that is
00:43  azeth: it's my program :)
00:44  azeth: yeah, sender has type Header (from email.header)
00:44  bob2: remember from_addr is the envelope-from
00:44  bob2: so should be some VERP-alike-encoded thing
00:45  azeth: code for processMessage
00:45  azeth: http://pastebin.com/aHPvWxAK
00:45  infobob: http://paste.pound-python.org/show/1432/ (repasted for azeth)
00:46  bob2: 4 space indents dude :(
00:46  azeth: I like 2 space ones :)
00:46  azeth: but ok...
00:46  bob2: so hard to read
00:46  jeffszusz: 4-space is the standard, azeth
00:47  AlexMax: Who recommended node.js to me in this channel?
00:48  azeth: bob2: here you are: http://pastebin.com/qUPkLYKB
00:48  infobob: http://paste.pound-python.org/show/1433/ (repasted for azeth)
00:48  azeth: 4-space one
00:48  bob2: don't know what it is meant to do
00:49  azeth: it's meant to broadcast messages like mailing list amnager
00:49  smw: bob2, I like 8 spaces. It looks nicer on my eyes
00:49  azeth: *manager
00:49  bob2: I like scotch
00:49  jeffszusz: 8! woah
00:50  azeth: I can give you example message that throws the exception
00:50  bob2: I think you could make it more readable by factoring things out
00:50  bob2: and not using a regexp to parse the From: header (?!?)
00:50  Jerub: using a MIME parser is the best thing generally for that kind of task
00:51  jeffszusz: what's a mime parser
00:51  AlexMax: I dunno who it was, maybe lvh, but thanks.
00:52  azeth: bob2: why shouldn't I use regexp?
00:52  bob2: azeth: because it is insane
00:52  jeffszusz: lol...
00:52  azeth: ^^
00:53  bob2: jeffszusz: mind the rules
00:53  bob2: use email.utils.parseaddr
00:53  papna_: smw: You should do what everyone else is doing, though.
00:53  smw: papna_, I switched to 4 spaces
00:53  papna_: smw: Sweet.
00:53  azeth: yep, I will correct it, but that's not a problem
00:53  smw: papna_, I am just not happy about it :-P
00:53  lvh: AlexMax: Huh what
00:54  azeth: the problem lies entirely in newMessage.as_string()
00:54  lvh: AlexMax: Oh, node.js.
00:54  azeth: as seen in backtrace
00:54  lvh: AlexMax: It's not a bad idea, no.
00:54  bob2: azeth: what traceback
00:54  lvh: AlexMax: node is basically twisted for javascript
00:54  smw: papna_, I was not given a choice... I used 8 spaces when I first started and liked it more
00:54  AlexMax: Somehow node is tons easier to wrap my head around than twisted
00:54  lvh: AlexMax: javascript is *mostly* a worse language, but the advantage is that nobody has ever tried to write code for js that's blocking
00:55  azeth: bob2: the first one I gave you: http://pastebin.com/LYLQGR83
00:55  vext01: is it possible to use native functions that return structs in ctypes?
00:55  infobob: http://paste.pound-python.org/show/1431/ (repasted for azeth)
00:55  lvh: (okay, *mostly*)
00:55  smw: papna_, What I really want is an IDE that would show 8 spaces and put 4 :-D
00:55  Jerub: lvh: well, not twice
00:55  bob2: azeth: I'm unconvinced that the problem is the thing you said
00:55  vext01: im getting junk in my parameters on such functions
00:55  AlexMax: in spite of the fact that I knew very little about js before I started
00:55  AlexMax: enough to do the occasional DOM manipulation
00:55  lvh: Jerub: Huh?
00:55  bob2: azeth: print type(sender)
00:56  lvh: AlexMax: I know both node.js and twisted very well, and that doesn't make sense to me at all
00:56  vext01: and when i say "return" i mean by value
00:56  lvh: but hey, I'm not going to argue with vague statements like "easy to wrap my head around" so instead im going to bed
00:56  Odigem: Hello
00:56  AlexMax: lvh: probably best for you
00:56  AlexMax: night night
00:56  CharlesB: I'm having a problem working with dictionaries in Python 2.5:  exceptions.ValueError: dictionary update sequence element #0 has length 1; 2 is required  with "kwargs.update(dict(arg))"
00:57  azeth: bob2: <type 'instance'>
00:57  azeth: should be string?
00:57  Odigem: I want to make .pyd module, what make this? I have py script what next?
00:57  tpratt_home: CharlesB, whats 'arg'?
00:57  papna_: CharlesB: The thing you're passing isn't a dict or a lsit of key-value pairs.
00:57  papna_: CharlesB: What is it?
00:57  eoc: MostAwesomeDude: I now used your list approach, leaving out the naming of variables depending on i
00:57  eoc: with some more comments this will still work, thanks for the idea ;)
00:58  CharlesB: papna, tpratt_home, This is someone elses code I am trying to use, MostAwesomeDude's Packet code infact.  However, in my version of python, that request dies  whereas in his it works fine.
00:58  Odigem: Hello!
00:58  CharlesB: Arg is part of *args , taken as an argument to the function
00:59  papna_: CharlesB: I suspect something wrong is being passed somewhere. It sounds like you or that person should debug the code, checking whether everything is what you think it is.
00:59  CharlesB: What SHOULD arg be, for that call to work?
00:59  CharlesB: Would a string suffice ?
00:59  Odigem: HELLO
00:59  CharlesB: Odigem,  what the hell do you want >_>
00:59  CharlesB: Odigem, HELLO
00:59  papna_: CharlesB: No. Do you know what a dict is and what dict.update does?
01:00  Odigem: "[01:57:22] <Odigem> I want to make .pyd module, what make this? I have py script what next? "
01:00  papna_: CharlesB: dict.update takes the same stuff as the dict constructor, basically a dict or an iterable of key-value tuples.
01:00  CharlesB: papna, Nope, hence why I'm using his (working) code to generate packets for me, as it's better than the way I was doing it.
01:00  CharlesB: papna, I don't know what a dictionary is either (not in Python anyways), it's his code :/
01:00  CharlesB: Hence why I thought what I'm sending as arguments is probably the problem.
01:00  papna_: CharlesB: You'll have to learn Python or have someone else fix this code.
01:00  CharlesB: Moment, I'll link you to his function.... then hopefully you can tell me what I'm supposed to feed it.
01:01  Odigem: Ебланы нахуй
01:01  CharlesB: I know enough Python to make my code >_>  I'm using his bit of code to make packets for me because my method was slow.
01:01  CharlesB: Not knowing what X is doesn't mean I don't know the entire language <_<
01:01  papna_: CharlesB: You don't know enough to debug your code. =)
01:01  CharlesB: ... double negative
01:01  CharlesB: papna, I do, but make-packets is HIS CODE
01:01  CharlesB: not my code :P
01:01  vext01: hmm, just found a thread that rightly says c functions returning structs do magic
01:02  vext01: they dont fit in the return register, obviously
01:02  tpratt_home: CharlesB, you can look at python docs to see what a dict() takes, but it seems you should know what to feed it.
01:02  papna_: CharlesB: If you weren't unable to debug this code, you wouldn't be here. ;)
01:02  Odigem: If you write to me, use private :\
01:02  CharlesB: That's the thing papna, his use of dictionaries confuses me.
01:02  CharlesB: for arg in args: kwargs.update(dict(arg))
01:03  CharlesB: HOWEVER, kwargs is an ARRAY OF ARGS when passed
01:03  CharlesB: (( def make_packet(packet, *args, **kwargs): ))
01:03  CharlesB: His usage doc bit tells me to just pass the function the header of the packet, and key valued data.
01:03  papna_: CharlesB: That isn't an array of anything. ;)
01:03  CharlesB: IE:  make_packet("handshake", {"username": username})
01:04  CharlesB: Wouldn't {"username": username} be a valid arg ?
01:04  CharlesB: for dictinoary ?
01:04  papna_: CharlesB: that's a dict, and hence is valid to pass to some_dict.update(...)
01:05  CharlesB: Yeah.... so what's wrong with what I'm passing it, it seems fine :/  Even in the dict specs it shows passing keypairs as valid.  Now i'm confused.
01:06  CharlesB: make_packet("handshake", {"username": username}) << That should work then.
01:06  CharlesB: Why is it not?
01:06  papna_: CharlesB: I do not have the applicable information to answer that. I would need at least the code and full traceback.
01:07  CharlesB: Fair enough papma_  I think I'll eat at it a bit more before posting that.  Your input has been helpful though, in showing me the dict page :P
01:07  cwillu: CharlesB, make_packet("handshake", **{"username": username})
01:07  CharlesB: Why ** ?
01:07  laurus: when doing index, hello = data.next() where data = enumerate(alist), is there a way to make the index start at 1?
01:07  cwillu: or preferably, just make_packet("handshake", username=username)
01:08  cwillu: CharlesB, because otherwise you're passing a dict
01:08  CharlesB: laurus, Why is 0 bad ?
01:08  cwillu: (and not a keyword argument)
01:08  laurus: CharlesB, er, because I like things to start at 1 when they're part of filenames
01:08  cwillu: laurus, you mean you want to skip the first item?
01:08  laurus: cwillu, no
01:08  cwillu: laurus, then you can't
01:09  laurus: I just want it to be human readable. I guess I'll manually add 1 before printing it :)
01:09  laurus: Thanks CharlesB and cwillu
01:09  cwillu: laurus, that's not how indexing works in python (or any sane language :p)
01:09  laurus: cwillu, of course
01:09  laurus: I'm talking about converting it for human readability
01:09  CharlesB: laurus if for filenames, you could just index+1 when writing... but that could be bad
01:09  laurus: CharlesB, thanks, that's what I just did :)
01:09  CharlesB: Or pre-fill the 0 index of the data array
01:09  CharlesB: Both would work.
01:09  cwillu: laurus, actually, I missed part of what you said
01:09  laurus: cwillu, it's okay
01:10  cwillu: enumerate takes an optional start
01:10  laurus: Thanks
01:10  laurus: Oh, wait, it does?
01:10  laurus: That's exactly what I'm looking for
01:10  cwillu: enumerate(list, 1)
01:10  laurus: Thanks cwillu! :)
01:10  cwillu: laurus, thought you were looking for 1-based indexing, not just getting them numbered :p
01:11  laurus: cwillu, ah, no :)
01:11  bob2: azeth: yes
01:14  laurus: When you insert a row into an sqlite3 database, is it possible to get returned the id of the row you just inserted?
01:14  cwillu: laurus, http://www.sqlite.org/c3ref/last_insert_rowid.html
01:15  laurus: cwillu, I meant through the Python module sqlite3
01:15  cwillu: laurus, nothing to do with python
01:15  laurus: Oh, I see, I add it into the query string?
01:15  laurus: As in 'SELECT last_insert_rowid()'
01:16  cwillu: something like that, yeah
01:16  laurus: Thanks :)
01:16  cwillu: laurus, also, you know how to pass parameters to sql queries? :p
01:16  laurus: cwillu, yeah, thanks.
01:16  laurus: :)
01:22  twobitsprite: does anyone know if pygtk supports python 3.0+?
01:22  bob2: believe not
01:23  twobitsprite: thought so, but I couldn't find anything conclusive on the pygtk website
01:23  papna_: twobitsprite: Nope.
01:23  papna_: twobitsprite: (Most stuff doesn't.)
01:23  twobitsprite: yeah, figures... thanks
01:23  bob2: most by volume, but increasingly the things people care about do
01:23  bob2: aside from web stuff
01:24  bob2: laurus: cursor.lastrowid
01:24  twobitsprite: are you insinuating that people don't care about pygtk? :P
01:24  laurus: bob2, ah, that works a lot better, thanks
01:24  laurus: I was just running into problems on that
01:24  laurus: twobitsprite, you should use PyGObject
01:24  laurus: Instead of PyGTK
01:24  twobitsprite: oh?
01:24  twobitsprite: does it support glade?
01:25  laurus: I know very little about it to be honest
01:25  twobitsprite: then how do you know I should use it? :P
01:25  laurus: Take a look at http://live.gnome.org/PyGObject
01:25  laurus: twobitsprite, it's not well known yet, but it is replacing PyGTK
01:25  twobitsprite: replacING? is it stable and production ready?
01:25  cwillu: twobitsprite, it's kinda like twisted in that respect :p
01:25 * cwillu ducks
01:26  laurus: twobitsprite, not sure.
01:26  bob2: that doesn't look like much of a replacement
01:26  twobitsprite: you seem awfully convinced that I should use it without knowing much about it...
01:26  laurus: twobitsprite, go ask in the GNOME channel for the details.
01:26  laurus: I'm just trying to let you know
01:27  laurus: twobitsprite, take a look at http://blog.tomeuvizoso.net/2010/09/get-latest-pygobject-and-introspection.html if you don't believe me
01:27  laurus: You want to be using introspection.
01:27  twobitsprite: from their site: "At this point we need documentation, stability and users!" Yeah, I think I'll stick with pygtk :P
01:27  twobitsprite: thanks thoguht
01:27  twobitsprite: though*
01:28  TheSheep: pygobject is a part of pygtk, I think
01:28  laurus: No problem.
01:28  Stormx2: Hi. Some users of my script are just going to be launching it stand-alone (in which case the console window will close on completion) and some are running in a terminal (where this won't happen). I want to pause the app at the end for the stand-alone users. Is it possible to detect this?
01:28  laurus: twobitsprite, for examples look at http://git.gnome.org/browse/pygobject/tree/examples
01:28  bob2: Stormx2: have your main script's extension be .py
01:28  twobitsprite: ahh yes... it is a part of pygtk it seems
01:28  laurus: Also, here's a bigger demo of it: http://git.gnome.org/browse/pygobject/tree/demos
01:29  Stormx2: bob2: I'm using py2exe to "compile" to exe
01:29  laurus: twobitsprite, I feel like I'm doing your work for you: "PyGTK 2.22.0 has been released. This is the first stable release supporting the GTK+ 2.22 API.
01:29  laurus: New users wishing to develop Python applications using GTK+ are recommended to use the GObject-Introspection features available in PyGObject."
01:30  laurus: That's from the front page of http://pygtk.org/
01:30  twobitsprite: laurus: my work for me? you're the one that brought it up while not knowing anything about it
01:30  bob2: Stormx2: dunno then
01:30  nomad111: is either of the following preferred over the other:
01:30  nomad111: if obj is not None
01:30  nomad111: or
01:31  nomad111: if obj
01:31  bob2: nomad111: they do different things
01:31  papna_: nomad111: The former, if that's what you mean.
01:31  bob2: nomad111: if you want to see if obj is None, the first
01:31  laurus: twobitsprite, I know you should be using it, that's enough
01:32  twobitsprite: ugh...
01:32  SoftwareMaven: bob2: Can you give an example of when "if obj is not None" and "if obj" would give different results?
01:32  bob2: SoftwareMaven: obj = []
01:32  laurus: Anyway good luck on your project!
01:32  papna_: SoftwareMaven: obj = False
01:32  bob2: SoftwareMaven: the former checks if obj is actually None, the second checks if obj is false-y or not
01:32  SoftwareMaven: bob2: Oh, yeah, duh.
01:32  bob2: SoftwareMaven: lots of things are false-y: empty lists, empty strings, empty dicts, False, but only one thing is None
01:33  SoftwareMaven: bob2: Yeah, I knew that. Brain apparently isn't working today... Better not code today. :)
01:33  tpratt_home: Stormx2, are you going to have an installer that creates a shortcut?
01:33  nomad111: cool thanks all
01:33  bob2: SoftwareMaven: hehe
01:35  Stormx2: tpratt, possible, which installer builder would you recommend?
01:36  tpratt_home: Stormx2, I don't know, but I was going to suggest passing an option from the shortcut that pauses at the end.
01:39  tarpsocks: what the hell
01:40  tarpsocks: oh sorry, wrong channel
01:50  tarpsocks: dermoth_: are you there
01:55  traceback0: Is there any way to import something have it be instantiated, and if you import again from another place it has the same state. I am tired of passing an object to 10 different places.
01:55  traceback0: kind of like pylons.app_globals
01:55  MostAwesomeDude: traceback0: Yes.
01:55  MostAwesomeDude: traceback0: http://glyf.livejournal.com/70684.html
01:56  bob2: haha, snap
02:06  traceback0: MostAwesomeDude: Interesting, thanks--played and tested.
02:06  smw: Does anyone know of a good program for making diagrams? I want to make a database diagram first and then maybe one for mapping program flow.
02:07  TheSheep: DIA, but not so good
02:07  bob2: it's ok
02:08  TheSheep: a little on the geek side of the ui
02:08  Eevee: smw: inkscape possibly
02:08  tpratt_home: I usually use oo draw, but it's nothing special either
02:08  smw: bob2, I have never found one that people thought highly of.
02:08  laurus: smw, take a look at graphviz
02:08  laurus: Although it's not for databases specifically...
02:08  daemonkeeper: dia is a general purpose tool (rather good actually) for (E)ERM and UML better solutions do exist (e.g. umbrello)
02:08  smw: Eevee, great idea. I will fallback on that as a last resort.
02:09  bob2: smw: yeah
02:09  papna: haha umbrello
02:09  TheSheep: smw: that apple one is nice, I've heard
02:09  seen_: smw: you could use existing tools to generate database, program flow diagrams automatically
02:09  bob2: smw: windows people all seem to like visio and os x people omnigraffle or something
02:09  davetoo: heh
02:09  davetoo: I"m using Enterprise Architect
02:09  daemonkeeper: Yes, crashes a lot papna, but works for what it is supposed to do.
02:09  smw: bob2, I am a linux person :-\
02:09  papna: umbrello, filling the "isn't even as good as Rose" market.
02:09  laurus: GNU/Linux
02:09  bob2: oh java: "To add to the point about scopes; it's kind-a obvious that a  session-scope instance can be injected into a request-scope instance,  because the session is the "parent" of the request... but a nice trick  that JSR-299 has is that it also allows for a request-scope instance to  be injected into a session-scope instance.  How?  Well, it uses a bit of  bytecode proxying (javassist in the case of Weld) so that when called  the proxy dispatches to the "cur
02:10  smw: laurus, I refuse to call it gnu/linux
02:10 * smw takes cover
02:11  laurus: smw, no problem, just being annoying
02:11  laurus: gadflyesque :P
02:11  bob2: smw: heh
02:11  daemonkeeper: papna: Of course I'd like to see a better tool, but until then I'll continue to use it for EERM and UML.
02:11  bob2: dia seems to be the best thing we have
02:11  bob2: my solution is to just diagram things only once a year in an orgy of dia-interface-hatred
02:12  tarpsocks: are there any open-source python projects that have room for a relative noob that anyone in here would like to plug
02:12  seen_: smw: , in the same family as pycallgraph http://pycallgraph.slowchop.com/
02:12  smw: bob2, yeah, I have heard that a few times, but no one seems to speak in the positive about any of them
02:13  woozly: why I can create variable and function with same names?
02:14  tarpsocks: pm me if that is against the rules
02:14  woozly: how to access to function -> simple, by default, need to type it's name(), but how to access to variable, I don't know
02:14  smw: woozly, you can not have them both in the same scope/namespace
02:15  TheSheep: woozly: you can't, one will overwrite the other
02:15  woozly: swm, try to create variable and then create func, with same name. In IDLE shell
02:15  woozly: ohh
02:15  TheSheep: woozly: or shadow it, if the scopes are different
02:15  woozly: okay, thanks
02:15  woozly: it overrides
02:15  smw: woozly, yep
02:16  TheSheep: a function is a value for a variable like any other
02:17  cwillu: woozly, some languages have separate namespaces for functions and variables;  python doesn't.
02:18  woozly: cwillu, okay, thank you. I understand :)
02:18  cwillu: http://hornbeck.wordpress.com/2009/07/05/lisp-1-vs-lisp-2/ illustrates the difference in lisp, where both approaches are taken by different dialects
02:25  donCams: hi. i'm learning python, I'm usually developing with php on wamp. How can I run python on wamp? any good tuts?
02:31  TheSheep: donCams: you don't need wamp, most python web frameworks come with their own development server
02:31  ormaaj: What's the difference in the input() function between python 2 and 3?
02:32 --- Unknown[NF] is now known as Unknown[OFF]
02:33  ormaaj: python2 for some reason wants to call whatever gets passed to it
02:33  mdeboard: ormaaj: Fundamentally the difference is security
02:33  ormaaj: er not passed... whatever happens on stdin
02:33  mdeboard: ormaaj: You probably want raw_input() for python2.x
02:33  donCams: TheSheep: I'm still developing in php and I want to keep my wamp install. Wouldn't that have conflicts with my wamp?
02:34  ormaaj: mdeboard: Oh thats right I forgot about that one ty... been a long time since i've used it
02:35  mdeboard: ormaaj: Npp
02:36  deepa: Does anyone have a tool for visualizing the "flow" of a python program?
02:37  mdeboard: deepa: logical flow?
02:37  ormaaj: deepa: like a debugger?
02:38  deepa: mdeboard: any is fine
02:38  deepa: ormaaj: to be used as wallpaper and debugger yes
02:39  ormaaj: trying to find the graphviz thing I'm thinking of...
02:55  tos9: ormaaj: Perhaps you were thinking of http://code.google.com/p/jrfonseca/wiki/Gprof2Dot
02:56  tos9: I've used it before, more interesting than useful, but nice to see.
02:56  tos9: Unless you really meant a graphviz thing, in which case ignore me, heh thought you were still talking about code flow.
03:05  karlF: Hi, I'm trying to use cairo on windows, and it says that I don't have an __init__.py file. How do I install this correctly? Here's the full error: http://pastie.org/1444145
03:06  Juhaz: karlF, that's not what it says. Do you have cairo (as in the C library) installed? pycairo itself is not enough
03:07  karlF: Juhaz: I'm not entirely sure. I followed the instructions here
03:07  karlF: Under "Windows" : http://cairographics.org/download/
03:08  karlF: Juhaz: Those dlls are in my GTK runtime folder, which seems to have been automatically added to my path
03:11  Juhaz: okay, so you installed it alongside gtk, which gtk packages? There are a few different links on that page,
03:11  karlF: lemme check
03:11  SlowBait: hi
03:12 --- wgwang is now known as waha33
03:12  SlowBait: is there a way to know wich python version is the script running on?
03:12 --- waha33 is now known as wawa33
03:12  tos9: Sure. It'll run on whichever you tell it to run.
03:13  SlowBait: but lets say that the script needs to behave differently in different versions of python
03:14  tos9: SlowBait: which versions?
03:14  smw: SlowBait, If you want the script to know where it is running, you can check sys.version and sys.version_info
03:14  tos9: Ech no, you don't need to do that
03:14  SlowBait: tos: Python2.x and Python3.x
03:14  tos9: SlowBait: yeah don't do that.
03:14  tos9: You can't develop code that'll work simultaneously on both.
03:14  tos9: Don't force it.
03:15  SlowBait: well, its like import a module for python3 and another for python2
03:15  SlowBait: bad idea?
03:15  tos9: Probably, because if you're on 3 the whole rest of your module isn't necessarily going to work syntactically.
03:15  karlF: Juhaz: OK, I downloaded the all-in-one bundle of the GTK 2.2 stack, and put all of those DLLs in my GTK+ bin directory in Program Files. Still getting the same error
03:16  tos9: Pick 1 or the other, use 2to3 to help you port to the other and fix whatever else needs manual attention
03:17  Juhaz: karlF, ok, that one should definitely work (assuming you added it to path, and reopened all console windows after that)
03:17  SlowBait: tos9: ok. but there is a way to let the feature available in 2.x and unavailable in 3.x?
03:17  tos9: I can't parse that sentence
03:17  smw: SlowBait, rephrase that question please
03:18  Juhaz: karlF, maybe there's another version somewhere in the path that is causing a mixup? bundled with gimp, inkscape, gaim, etc... perhaps
03:18  smw: tos9, I am going to remember that one :-)
03:19  SlowBait: tos9: Let the Python2.x version untouched, and limit certain features of Python3.x (that are unavailable)
03:19  karlF: Juhaz: Perhaps I can try copying the dlls into my working directory?
03:20  karlF: Juhaz: Ah, that seems to have worked out. It's messy, but it works for my purposes.
03:21  SlowBait: smw: Let the Python2.x version untouched, and limit certain features of Python3.x (that are unavailable)
03:21  smw: SlowBait, still don't understand
03:22  smw: SlowBait, you can not make 1 program that works in python 2 and 3
03:23  ivazquez|laptop: Well... you can, but it can be inordinately difficult.
03:23  tos9: SlowBait: that'd be highly unlikely
03:23  tos9: SlowBait: Is this a hypothetical, or do you have an actual case
03:23  nosklo: smw: the easy way is to write the code for python 2.7, and then use 2to3 to convert the code to python3
03:23  nosklo: er
03:23  nosklo: SlowBait: ^^
03:24  SlowBait: tos9, smw: I have a GUI in python2, and a text interface in python3 already coded
03:24  smw: ivazquez|laptop, if it would take less time to maintain 2 version than to make one work in both, then it is impossible ;-)
03:24  tos9: SlowBait: and the shared code?
03:24  smw: ivazquez|laptop, just like a car that is totaled can not be fixed ;-)
03:25  tos9: It runs on both with no changes?
03:25  SlowBait: tos9, smw: its compatible with both in a separate .py
03:25  jasonsmr: hello channel
03:25  jasonsmr: ;)
03:25  babyjeezus: I'm new to programming and have a quick question.  I have a class in module1 and import it(interactively) and I create a module2 that has a class that tries to inherit from the class in module1.  After I import module1 I try to import module2 and it fails(name FirstClass is not defined).  Can someone tell me what I'm doing wrong here?
03:26  nosklo: babyjeezus: if module2 uses a class from module1, module2 should import it from module1, not you
03:26  babyjeezus: I'm VERY new to programming at all so If i ask a question poorly sorry
03:26  nosklo: babyjeezus: there are some good books I can suggest
03:26  nosklo: babyjeezus: http://learnpythonthehardway.org/  http://www.greenteapress.com/thinkpython/thinkpython.html
03:28  SlowBait: tos, smw: I was thinking something like http://paste.pound-python.org/show/1436/
03:28  babyjeezus: ok, I think I see what I did wrong.  thank you
03:28  jasonsmr: I too am new to programming and I am building a xen hyperrvisor which has python packages in it
03:28  jasonsmr: my build root is misbehaving  something about the file
03:28  jasonsmr: /usr/bin/osc
03:34  lightcatcher: anyone have any advice for generating safe javascript with python?
03:34  lightcatcher: I'm trying to write MapReduce queries for Riak, but I have little experience with string sanitation and injection attacks and etc
03:35  nosklo: babyjeezus: the books will be great help
03:35  nosklo: jasonsmr: that seems unrelated to python
03:36  nosklo: lightcatcher: "safe javascript" ??
03:36  nosklo: is there such thing?
03:36  lightcatcher: well, escaped.
03:36  lightcatcher: i'll pastebin my code in a second
03:36  jasonsmr: yea. I see its a suse build toolchain prob.
03:36  jasonsmr: thanks anyway ~ no worrys
03:37  nosklo: jasonsmr: if you want to learn programming, then python is a great choice of language
03:37 --- EntityReborn is now known as Setis
03:37  nosklo: jasonsmr: start with the books I gave to babyjeezus, they're really good for beginners
03:37  jasonsmr: yea? I heard it
03:38  jasonsmr: thanks for the push in the right direction, ill bookmark those for certian
03:38  lightcatcher: I'm not a fan of learn python the hard way
03:39  lightcatcher: http://paste.pocoo.org/show/318000/ is my code nosklo
03:39  Setis: SlowBait do you speak Spanish?
03:39  lightcatcher: i'm sure for some value of email, the code will explode
03:41  jasonsmr: the second book looks promising, I love a good explanation, the hard way sounds ,well like hard probably lots of memorization?
03:41  lightcatcher: jasonsmr: do you know any programming at all?
03:42  nosklo: jasonsmr: it's actually very easy book
03:42  lightcatcher: oh, and the second book is exactly what I would recommend
03:42  jasonsmr: just bash script and basic logic
03:42  wutang: being a programmer is very much like being an author...the only way you get good is by lots of writing / coding
03:42  wutang: that's it
03:42  wutang: there's no other way
03:42  nosklo: lightcatcher: looks like you want to json.dumps(text)
03:42  wutang: sit down and code
03:42  jasonsmr: im a computer design specialist for CAD
03:43  jasonsmr: I use PRo /E through collage
03:43  CharlesB: Is anyone here good with twisted?
03:43  nosklo: your code just made me form opnion over riak now, though
03:43  lightcatcher: I would definitely recommend the second book more. It actually teaches thing about computer science, rather than having you blindly type examples
03:43  jasonsmr: I never touched a language except in math classes or physics or chemistry
03:43  SlowBait: Setis: si
03:43  lightcatcher: well nosklo, searching (through a lucene/solr like interface) just got added
03:43  CharlesB: I want to take non-blocking console input while my twisted network connectiong oes on, and I was told to use Twisted.Internet.StandardIO , however it has NO DOCUMENTATION
03:43  Slix`: Hmm.. why is python easy to learn? I'm trying to convince some of my classmates to use it instead of a graphical language called LabView, and I want to figure out how to say this right.
03:43  jasonsmr: then just basic logic, using an excel
03:44  nosklo: CharlesB: I can provide some example code.
03:44  KirkMcDonald: Slix`: It smells like English sometimes.
03:44  lightcatcher: Slix: it depends what they would be learning it for. for many cases, I might recommend LabView
03:44  CharlesB: nosklo, Thank you, someone gave me a bit of example code, but didn't tell me how to call it from the reactor.
03:44  Slix`: Programming a robot.
03:44  CharlesB: nosklo, Give me a moment to paste this
03:44  nosklo: CharlesB: http://twistedmatrix.com/trac/browser/trunk/doc/core/examples/stdin.py
03:45  nosklo: CharlesB: it's very simple
03:45  CharlesB: http://paste.pocoo.org/show/318002/
03:45  CharlesB: http://paste.pocoo.org/show/318002/ << I have roughly the same thing already
03:45  CharlesB: But how does it implement, automatically ?
03:46  nosklo: CharlesB: ok, what's wrong with your code?
03:46  CharlesB: I don't know how to call start_console
03:47  CharlesB: What is the argument "factory"
03:47  nosklo: CharlesB: the argument factory seems to be stored as an attribute of the protocol instance, at line 5
03:47  jasonsmr: thanks wutang
03:47  nosklo: CharlesB: then you don't use it anywhere else in the code you pasted
03:47  CharlesB: \ self.factory = factory
03:47  CharlesB:    for l in run_command(self.commands, self.factory, line):\
03:48  CharlesB: It's used there, but I don't know what taht does
03:48  CharlesB: that *
03:48  nosklo: CharlesB: yeah, then you pass it to run_command()
03:48  Jerub: CharlesB: that's quite odd because factories aren't usually used in twisted StandardIO situations. maybe it's the server factory for a TCP server
03:48  nosklo: CharlesB: you didn't paste run_command() so I don't know what it does
03:48  CharlesB: Alright, I'll remove that altogether then
03:48  CharlesB: He didn't include run_command, as it was unrelated
03:48  CharlesB: so I guess I can take out the factory bits too?
03:48  Jerub: CharlesB: you're storing a reference to it. maybe it's so you can run a program that's a network server as well as have a console ui.
03:48  nosklo: CharlesB: it seems you don't need it
03:49  CharlesB: Jerub, This is all for a network client, not a server :)
03:49  nosklo: CharlesB: what do you want to do with the lines you get from stdio?
03:49  CharlesB: So I'm not sure
03:49  CharlesB: I want to take them and send it as input from the bot.
03:49  nosklo: CharlesB: I suppose that if you start from the example I pasted, you'd be less confused
03:49  dassouki: is there an easy way to detect circular reerences or improts ?
03:49  CharlesB: IE: on line received:  this.bot.sendMessage(line)
03:49  Jerub: CharlesB: there are factories used for client connections too. a factory is responsible for creating the protocol object after communication is established.
03:49  nosklo: CharlesB: yeah, then instead of passing the factory, pass the bot
03:49  CharlesB: Oh, wait a sec, my bot is a ClientFactory -_-
03:49  Jerub: (one factory, multiple network connections)
03:50  CharlesB: class Connection(ClientFactory):
03:50  CharlesB: ?
03:50  CharlesB: This would be much easier if I just commited this to the git
03:50  CharlesB: moment
03:51  CharlesB: http://bit.ly/g4JxB1 << Github
03:52  CharlesB: https://github.com/cbroughton/Crafti/blob/master/SMP.py#L229 specifically
03:54  CharlesB: nosklo, Can you please tell me how I would implement what I am trying to do?
03:55  lightcatcher: charlesB, do you think there is demand for a minecraft mod/skin hosting site?
03:55  lightcatcher: looking at your project, I'm assuming you are at least slightly involved with the minecraft community
03:55  CharlesB: lightcatcher, I would LOVE to have somewhere I could upload my mods to be honest.
03:55  CharlesB: lightcatcher, There is already the skindex for skins though.
03:56  lightcatcher: I've been looking at the community, looks kinda unorganized, mostly centered around the forums
03:56  CharlesB: lightcatcher, However, a place for texture packs and mods... would be nice.
03:56  CharlesB: lightcatcher, The forum is incredibly un-organised.
03:56  lightcatcher: yeah, and if the skindex is http://www.minecraftskins.com/ , that website doesn't look great either
03:56  CharlesB: lightcatcher, It does not, but it works.
03:57  CharlesB: lightcatcher, What programming languages (for servers) do you know?
03:57  brian: I heard Minecraft
03:57  brian: O:
03:57  nosklo: CharlesB: your approach seems fine
03:57  CharlesB: lightcatcher, Do you know PHP / MySQL or Ruby / SQL or ASP / MSSQL or something?
03:57  nosklo: CharlesB: just go ahead with it
03:57  CharlesB: nosklo, How do I call it?  I don't get how to call start_console.
03:57  lightcatcher: CharlesB, python is the only thing I'm good enough with to quickly build a hosting website
03:57  nosklo: CharlesB: remove the call to run_command()
03:58  CharlesB: lightcatcher, Python is not good for server-side files (*awaits flame war*(
03:58  lightcatcher: why do you say that?
03:58  CharlesB: lightcatcher, Seriously though, nginx and Ruby / Rails, or PHP MySQL would be better in my opinion.
03:58  nosklo: CharlesB: you can call it passing whatever object you will need on lineReceived
03:58  CharlesB: nosklo, Could I pass it bot ?
04:00  nosklo: CharlesB: yes, anything you want
04:00  CharlesB: I figured out how to pass it, I think, trying...
04:03  nosklo: I disagree that those things are better than python to build a website
04:03  nosklo: CharlesB: do you have any argument?
04:04  lightcatcher: definitely. and even if they are better, the best tool is the one you can use well
04:04  CharlesB: nosklo, I have honestly never seen a large website written in Python.
04:04  CharlesB: nosklo, I would not base my argument on that though.;
04:04  nosklo: CharlesB: have you heard of "youtube"?
04:04  lightcatcher: reddit?
04:04  CharlesB: nosklo, I prefer PHP, due to its looseness.  And YouTube is glorified shithole (and you know it)
04:04  smw: isn't twitter python?
04:04  CharlesB: :/
04:04  lightcatcher: nah, twitter was originally ruby on rails
04:05  nosklo: PHP is really bad
04:05  CharlesB: You guys are naming sites that I feel are horrible and not even worth acknowledging.
04:05  CharlesB: With the exclusion of Reddit, which I simply ignore because it's not my thing.
04:05  smw: python sites don't advertise themselves. PHP ads .php at the end of every url :-P
04:05  lightcatcher: worth quoting smw haha
04:05  CharlesB: smw, While this is right, you can change the extension, or drop it altogether.
04:05  nosklo: yeah, stop ads, use python
04:05  CharlesB: KLOL ADS
04:05  smw: nosklo, sorry. ADDS!
04:06  smw: CharlesB, you can, but who does?
04:06  CharlesB: smw, I do :P
04:06  CharlesB: smw, I like nice short SEO friendly URLs, so I rely on paths more than files with extensions.
04:07  nosklo: in python web applications, url dispatching is completely unrelated from the filesystem, and is up to you to map the url to whatever you want
04:07  lightcatcher: I definitely wouldn't dismiss python web development though CharlesB
04:07  nosklo: including files if that's what you really want, but you often don't
04:07  CharlesB: lightcatcher, I do not, but it's not my thing.
04:08  lightcatcher: nosklo, PHP can do things like that too, with CakePHP and Symfony
04:08  lightcatcher: however, those are even slower than python, which is saying something
04:08  CharlesB: lightcatcher, I use bare PHP, nothing else.  Even then with extensions, I keep it down to math, bz, auth, GD, and GDOmysql
04:08  smw: python is not bad for web development. Pylons is pretty good.
04:09  CharlesB: It's a whole matter of preference.
04:09  nosklo: even django is better than php
04:09  CharlesB: Not "which is better"
04:09  smw: CharlesB, did I say "better"?
04:09  lightcatcher: I like how django has seemed to fall in the communities eyes from "HOLY SHIT AWESOME!" to "too big" over the last year
04:09  lightcatcher: anyone else noticing this or just me?
04:09  lightcatcher: *community's
04:10  nosklo: "too big" is a silly reason to not use it though
04:10  CharlesB: LEEEEROOOOOOOY
04:10  smw: lightcatcher, I never liked it. I could not deal with the ORM.
04:10  nosklo: the orm is a perfectly good reason to not use it
04:10  nosklo: it's also my reason #1
04:11  lightcatcher: i know nosklo, but i couldn't think of a good short criticism right there
04:11  smw: nosklo, my issue was that I knew sql and the ORM was confusing me :-\
04:11  lightcatcher: i guess too tightly bound
04:11  nosklo: smw: no, ORMs are good. Just django's ORM is the bad one
04:11  nosklo: sqlalchemy, for instance, is great
04:11  CharlesB: ahgwpghw
04:11  smw: nosklo, I am trying to learn sqlalchemy orm now
04:11  CharlesB: What's wrong with normal goddamn transfer protocols
04:11  CharlesB: Why do we have to keep wrapping them and convoluting usage ??
04:12  CharlesB: :(
04:12  nosklo: transfer protocols?
04:12  CharlesB: General methods of communication or data transfer **
04:12  nosklo: I'm not sure what you mean. But mapping a class to a database entity is something really useful
04:13  Jerub: CharlesB: i think you're confused as to why an sql api such as sqlalchemy's ORM is considered better than writing straight SQL.
04:13  CharlesB: Jerub YUP
04:14  CharlesB: Jerub I like my plain SQL connections and unix pipes, and I'll stick to them.
04:14  CharlesB: Jerub Because at the end of the day, THEY WORK.
04:14  Jerub: CharlesB: that's an interesting idea! ORMs also work.
04:14  CharlesB: Hmm, LineReceiver is not defined
04:14  CharlesB: What do I need to import for that?
04:15  Jerub: CharlesB: so we've got a 'work' in both columns, making them equivilent in functionality, meaning there's no benefit going to one over the other.
04:15  nosklo: CharlesB: please follow the example I provided, instead of that code
04:15  Jerub: from twisted.protocols.basic import LineReceiver
04:15  Jerub: iirc
04:15  CharlesB: Thanks, that was the only thing I was missing.
04:15  jasonsmr: well for instance I see a xen related alternative to using the xen-python stack, called xen-utils, it says it accesses the xenstore directly to bypass the xen-python stack to use a call "xen-list" that just lists what virtual domains are available..
04:15  KirkMcDonald: There are any number of valid criticisms of ORMs.
04:16  Jerub: KirkMcDonald: this is true! there are. :)
04:16  jasonsmr: my question is why use python opposed to this type of obviously vendor specific override using a direct call, although the python stack still exists.?
04:17  jasonsmr: very general question
04:17  Jerub: jasonsmr: are you asking why did xen do soemthing confusing?
04:17  CharlesB: exceptions.NameError: global name 'StandardIO' is not defined  Derp I'm retarded
04:17  Jerub: the answer is xen was written by a bunch of extremely smart people who threw code at it until it worked, instead of doing things in a careful and considered, and pythonic, way.
04:17  CharlesB: twisted.internet.StandardIO I thought
04:17  jasonsmr: well it seems theres two ways here.
04:18  jasonsmr: I havent heard that anyone really wants to use the python stack yet
04:19  CharlesB: Err
04:19  jasonsmr: however python is a powerful way to utilize a api
04:19  CharlesB: Wherei s StandardIO -_-
04:19  nosklo: CharlesB: check out this example code http://twistedmatrix.com/trac/browser/trunk/doc/core/examples/stdin.py
04:19  CharlesB: loading
04:19  nosklo: CharlesB: as opposed to the snippet you got from someone, this code works
04:19  nosklo: CharlesB: you just have to add your own bits to it
04:20  wutang: I am not trying to 'advertise'... just passing along that I just attended this class last week and it was spectacular : http://www.dabeaz.com/chicago/concurrent.html
04:20  CharlesB: LOL
04:20  CharlesB: No module named win32api
04:20  nosklo: CharlesB: please mind the channel rules
04:20  CharlesB: Good job.
04:20  nosklo: CharlesB: oh, windows?
04:20  Jerub: CharlesB: also, you are not 'Derp I'm retarded'. you're just cutting+pasting code and being unable to interpret the error messages because they require a knowledge about what files are where in a project that you've not got an index of open
04:20  nosklo: CharlesB: I'm sorry, console reading on windows doesn't work right.
04:20  CharlesB: site-packages\twisted\internet\_win32stdio.py
04:20  nosklo: CharlesB: use a GUI library
04:21  CharlesB: ........... Then why did Bravo get it working -_-
04:21  CharlesB: Thats why I'm using his code, because he had it working on Win32 AND unix.
04:21  CharlesB: :/
04:21  CharlesB: Baaaaaaaah this is stupid.
04:22  nosklo: CharlesB: there's this ticket http://twistedmatrix.com/trac/ticket/2157 for the bug you'll run into
04:22  CharlesB: How do I quickly get console input NON-BLOCKING from Windows AND UNIX then ?
04:22  nosklo: CharlesB: nobody uses console on windows anyway
04:22  nosklo: CharlesB: so on windows you launch a graphical window
04:22  CharlesB: :/  I need it to be able to be console controlled
04:22  CharlesB: This runs on Windows Server 2008 R2 as an interactive service
04:22  CharlesB: hence: Console only
04:23  nosklo: I'm sorry
04:23  nosklo: you could implement a ssh server
04:23  kosh: ah whenever I need a console on windows I install cygwin :)
04:23  nosklo: then connect to it using putty to run commands
04:23  nosklo: yeah, if you use cygwin it will work
04:23  CharlesB: If I were making this for myself alone, I wouldn't care
04:23  CharlesB: this is for other retarded Windows users to use >:
04:24  nosklo: CharlesB: maybe you want to help closing http://twistedmatrix.com/trac/ticket/2157 then
04:24  wutang: CharlesB: use select if you want to not block stdin and check other sockets or file handles
04:24  nosklo: er, no, wutang
04:24  nosklo: this is windows
04:24  nosklo: select() only works on sockets
04:25  CharlesB: Windows
04:25  CharlesB: == Gay
04:25  CharlesB: Just saying.
04:25  nosklo: CharlesB: please don't use homophobic adjectives. This is a family channel
04:25  CharlesB: The facts are, I need to support Windows.
04:26  nosklo: CharlesB: test the patch in the ticket, maybe it works for you :)
04:26  CharlesB: I don't know how to use them -_-
04:26  CharlesB: The PY files make sense, just overwrite or w/e
04:26  CharlesB: But the .patches ?
04:26  nosklo: CharlesB: yeah, it will need some study
04:26  nosklo: CharlesB: you can use the unix patch program to apply them
04:26  nosklo: CharlesB: I'm sure there's a windows version somewhere
04:27 * CharlesB is obviously not on UNIX if he's getting these errors.
04:27  nosklo: CharlesB: http://gnuwin32.sourceforge.net/packages/patch.htm
04:27  CharlesB: Wait a second...
04:27  CharlesB: If I run this through cygwin, should it just "work" ?
04:27  nosklo: CharlesB: if you use cygwin's python, I guess it would work. I never did it though
04:28  CharlesB: >Implying my CygWin has python :/
04:28  CharlesB: I guess I'll just drop Windows support, screw those 200K Windows users who can't lrn2UNIX like the rest of us
04:28  nosklo: if you use windows python, that will just launch another windows sucky console window
04:28  nosklo: drop windows console support is a sensible thing
04:28  nosklo: windows users don't use it
04:29  Jerub: um, what's wrong?
04:29  CharlesB: It's a bot, they are used to bots being console.
04:29  Jerub: there's nothing wrong with twisted's StandardIO implenentation on windows as far as i know.
04:29  Jerub: i saw an error regarding cygwin.
04:29  nosklo: really?
04:29  CharlesB: Jerub: See the above ticket.
04:29  Jerub: why are you thinking about using cygwin?
04:29  Jerub: oh, which one? link again
04:29  nosklo: Jerub: http://twistedmatrix.com/trac/ticket/2157
04:29  CharlesB: http://twistedmatrix.com/trac/ticket/2157
04:30  nosklo: Jerub: StandardIO works. Problem is when you use the console
04:30  CharlesB: >Implying Problem == Works ;/
04:30  CharlesB: import win32api << No module named win32api
04:30  nosklo: CharlesB: that can be solved by installing python windows api extensions
04:31  CharlesB: Here's the fun part
04:31  CharlesB: HOW
04:31  CharlesB: There's no pip
04:31  CharlesB: so getting construct was hard enough.
04:31  Jerub: console, as in cmd.exe?
04:31  nosklo: CharlesB: http://starship.python.net/~skippy/win32/
04:31  CharlesB: Thank you.
04:31  nosklo: Jerub: yes
04:32  nosklo: if you pipe as in type foo | python mycode.py stdio.StandardIO works
04:32  Jerub: i had no idea
04:32  nosklo: me either
04:33  nosklo: I found out about it 1 week ago
04:34  CharlesB: Installed
04:34  CharlesB: Now back to: NameError: name 'LineReceiver' is not defined
04:34  CharlesB:  I have everything imported -_-
04:35  bob2: except for LineReceiver!
04:35  nosklo: CharlesB: check out this example code http://twistedmatrix.com/trac/browser/trunk/doc/core/examples/stdin.py
04:35  CharlesB: I have all those imported................
04:35  nosklo: CharlesB: yeah, but the code is different
04:35  nosklo: CharlesB: you're still using that old code
04:36  gz0: hi, Im trying to install python extensions with python 2.4 and visual basic 2008 with vs2003 installed.
04:36  gz0: i get this error http://pastie.org/1444303 which has to do with sal.h
04:36  nosklo: gz0: why? :(
04:36  gz0: anyone know how to fix?
04:36  nosklo: gz0: why are you trying to do that?
04:37  gz0: i want to install visual_studio.vim plugin so i can controll visual basic 2008 with vim
04:37  nosklo: and it is written in python?
04:38  nosklo: I'm not sure why you're building the python windows extensions instead of installing a pre-built binary?
04:38  gz0: vim 7.0 is, and the visual_studio.vim docs say you need python 2.4
04:38  nosklo: vim 7.0 is written in python?!? :-O
04:38  Jerub: gz0: vim 7.0 is ancient. 7.3 is much newer
04:38  Jerub: nosklo: you can use python as an extension language
04:38  CharlesB: LineReceiver -> basic.LineReceiver
04:38  CharlesB: Fixed that errror
04:39  CharlesB: One last error, StandardIO -> <what>.StandardIO ?
04:39  CharlesB: stdio.StandardIO ?
04:39  gz0: well im following the plugin docs, if I can get it running with other instruction np
04:39  gz0: i tried this earlier with the lastest python and extensions built fine, but then the plugin complained about the python version :/
04:39  nosklo: gz0: which docs?
04:39  gz0: let me find link
04:40  CharlesB: Works
04:40  CharlesB: I think
04:40  CharlesB: :/ not sure about console input tho
04:40  nosklo: heh
04:40  CharlesB: Testing it now
04:40  gz0: install details on this page http://www.vim.org/scripts/script.php?script_id=864
04:40  CharlesB: Nope, typing into the console doesn't do anything.
04:40  CharlesB: -_-
04:40  nosklo: what I get here is, you type, but stuff doesn't go to the bot
04:40  nosklo: exactly
04:40  nosklo: and when you finish the program, stuff goes to the terminal
04:40  nosklo: as commands
04:40  CharlesB: Yup........
04:41  CharlesB: So what's causing that?
04:41  nosklo: CharlesB: if you use the patch in the ticket, it could fix that
04:41  CharlesB: -_-
04:41  nosklo: CharlesB: the cause is documented in the ticket, read it
04:41  CharlesB: I don't know how to use patches on Windows, and if people have to download 100x files just to use my bot, they simply won't.
04:41  nosklo: CharlesB: you could distribute a patched version
04:41  gz0: nosklo: this is the url i was following, same instructions though http://www.plan10.com/vim/visual-studio/doc/1.2/
04:41  nosklo: CharlesB: in your bot's package
04:42 --- f|l is now known as f8l
04:42  nosklo: CharlesB: I hope it gets fixed in next version of twisted
04:42  CharlesB: -_-
04:42  CharlesB: This is turning out to be reaaaaaaally stupid.
04:42  CharlesB: But alright.
04:43  nosklo: CharlesB: yeah, console in windows is pointless, I agree
04:43  CharlesB: Well, I'm not going to design a GUI just to have ONE TEXTBOX AND ONE TEXTAREA :
04:43  CharlesB: :/ **
04:43  gz0: nosklo: btw, im using vim 7.3 sorry not 7.0
04:43  nosklo: CharlesB: you could add some nice pictures and buttons and menus
04:43  nosklo: CharlesB: and some graphs with statistics
04:44  CharlesB: ^ Useless
04:44  CharlesB: That would just slow down the bot.
04:44  CharlesB: :/
04:44  CharlesB: It's threaded, as in, multiple bots runnin in the same process.  If I can run 100 of these at once, I will.
04:44  CharlesB: 100 windows... not so much
04:45  CharlesB: I'm THIS close to have it just open and read a text file every X seconds, and just start WPROMPT.exe at program runtime.
04:45  nosklo: CharlesB: huh, running 100 threads isn't a good idea, really
04:45  nosklo: CharlesB: you only have so many cores
04:45  nosklo: CharlesB: it would just slow you down
04:46  CharlesB: 100 different bots, 100 threads, probably 20 per process or something.
04:46  nosklo: CharlesB: you could run all the bots on the same process/thread using twisted and have great performance
04:46  CharlesB: Twisted is not showing me its greatness at all right now.
04:46  nosklo: CharlesB: unless your bot does some computation
04:46  CharlesB: So I'll wait.
04:46  CharlesB: nosklo, It does.
04:46  CharlesB: nosklo, That bit is not included in my public git (for many reasons)
04:47  nosklo: CharlesB: if it does long computation, then a single bot per process is the best way
04:47  CharlesB: Then 100 processes, and that's no good either.
04:47  nosklo: CharlesB: or maybe you could factor computations of all bots to separate processes
04:47  nosklo: CharlesB: launch a handful of worker processes and make all your bots send jobs to them
04:47  CharlesB: I was thinking of spawning two or three threads per bot before, but that won't do either.
04:47  nosklo: CharlesB: forget threads
04:47  CharlesB: IE: Logic thread, Control thread, network thread (obsoleted by twisted)
04:47  nosklo: CharlesB: they won't help and will just slow you down
04:48  smw: CharlesB, what do these bots do?
04:49  CharlesB: It's a python minecraft bot -_-
04:49  CharlesB: There are VARIOUS functions of each.
04:49  nosklo: what's the heavy processing part?
04:49  CharlesB: Some are diggers, some are builders, some are just meant to fill slots.
04:49  gz0: i just copy pasted the sal.h from vs9 and that appears to have fixed it. thx for the replies...
04:50  CharlesB: Processing?  Calculations of importing and blocks, on a world scale I have the ability to import a coded bitmap INTO the game with this.
04:50  hstefan: Hey, I'm in doubt about this: http://docs.python.org/library/pickle.html#pickle.load . How exacly that method works? How can you acess the unpickled data?
04:50  CharlesB: Also, world generation.  I have the bot actually create chunks with blocks in its inventory if told to do so, and available.  Etc.
04:50  CharlesB: Biome generation in these chunks as well.
04:51  nosklo: CharlesB: I'd have all the bots run in a single process, then launch a pool of 1 process per core to do the calculations.
04:51  CharlesB: ^ I'm not a hardware person, so you can see I wouldn't know how to code that crap.
04:51  CharlesB: And I don't want to have to workflow this just to follow my own code -_-
04:51  nosklo: CharlesB: since you're using twisted, you could just use ampoule
04:51  CharlesB: Hence why I tried to keep each bot isolated, as such, but it's not working as I would hav ehoped.
05:01  bob2: hstefan: it returns it
05:01  detly: CharlesB - you don't need to be a "hardware person" to use a processing pool, just look at the multiprocessing module
05:01  bob2: hstefan: (but pickle has a few issues you should be aware of before using it)
05:01  magicblaze007: anyone using pyqt here?
05:06  phoe6: hello. when using subprocess.Popen. if I redirect both stdout and stderr to two different open file objects. Is it a bad idea?
05:07  phoe6: I saw that when an executable was returning huge output, the above scenario hung. (I was doing p.wait() to see the exit code).
05:12  nosklo: phoe6: well, are you also pipeing stdin?
05:13  nosklo: phoe6: don't use .wait(), use .communicate() instead
05:13  nosklo: phoe6: also, which platform are you on?
05:14  phoe6: nosklo: I am Linux. and I not piping stdin.
05:15  phoe6: If I use p.communicate() and what would be return tuple be ? ( I am going to try that).
05:15  nosklo: phoe6: (None, None)
05:15  nosklo: phoe6: since you're redirecting both to files
05:16  nosklo: phoe6: I hope you're not using shell=True or something
05:17  nosklo: phoe6: another unix thing you have to take care of is to close other file descriptors that might be open at the child - that can make a process hang in some corner cases
05:17  nosklo: phoe6: that can be achieved by passing close_fds=True to Popen
05:18  hn: i have a problem,i am trying to install the python connector for the postgresql but am getting the error libfq-fs.h no such file or directory
05:18  phoe6: okay, I will try.
05:18  hn: any solution for this
05:19  Snakes: self.parent.send_message("server","send PRIVMSG "+room+" :URL: www.mydomain.com/ticket= "+ticketid); << let's say I wanted the value of "+ticketid" right after the URL so no spaces is there an easy way to achieve this?
05:19  nosklo: hn: seems that you have to install postgresql development headers
05:19  nosklo: hn: which platform are you on?
05:19  hn: ubuntu
05:20  CharlesB: Is there any multi-dimensional array in Python that can hold this much data?  To store ALL the block data?  Theoretically up to -1,300,000,000 to 1,300,000,000 in each of X and Z, and 0 - 128 in Y
05:20  Stieffers: Howdy. Can anyone explain why ConfigParser.read("config.cfg") returns a type error -- "an integer is required"
05:20  nosklo: hn: apt-get install python-psycopg2
05:20  hn: nosklo, will try for this
05:21  nosklo: CharlesB: The limit would be your memory
05:21  phoe6: nosklo: here is the subprocess program : http://uthcode.codepad.org/S5SgRKJ5 and here is a sample program which prints huge output: http://uthcode.codepad.org/TytPPsz3
05:21  CharlesB: yesimnathan, but some array that I can do this with?
05:21  CharlesB: Or just Blocks[x][y][z] = bla
05:21  phoe6: it hangs with or without close_fds=True
05:22  nosklo: CharlesB: depending on the operations you'll going to do with the arrays, perhaps you want to look into numpy
05:28  nosklo: phoe6: your example program will generate about 47 yotabytes of output
05:29  nosklo: phoe6: do you have that much disk space?
05:29  nosklo: er
05:29  nosklo: phoe6: 47 exabytes
05:29  detly: CharlesB: scipy also as sparse array utilities
05:29  phoe6: seriously?
05:30  detly: nosklo - I can store that much on my /dev/null device, but it takes forever to decompress
05:30  nosklo: phoe6: that on stdout alone
05:30  nosklo: stderr adds another 30 exabytes
05:30  CharlesB: lolwut /dev/null
05:30  CharlesB: hahaha
05:30  CharlesB: "store"
05:30  CharlesB: hahahahhaah
05:31  phoe6: nosklo: I guess both 22 GB. :)!!!
05:31  phoe6: woo
05:31  phoe6: http://www.google.com.sg/#sclient=psy&hl=en&q=2147483647+*+11+bytes+in+GB&aq=f&aqi=&aql=&oq=&gs_rfai=&pbx=1&fp=544a294004b20cc0
05:32  phoe6: considering that sys.maxint was around 2 GB.
05:32  phoe6: okay. I shall try with something more reasonable :)
05:32  phoe6: Did not realize that.
05:32  nosklo: phoe6: sys.maxint here is 9223372036854775807
05:34  phoe6: Is it one TB?
05:34  nosklo: much more
05:34  CharlesB: lrn2math ?\
05:34  CharlesB: Actually, google can do it for you :/
05:35  phoe6: 8 exabytes?
05:35  nosklo: about 5 exabytes
05:35  CharlesB: -_-
05:35  CharlesB: X BYTES IN EXABYTES << google
05:35  phoe6: nosklo: one doubt. sys.maxint is the amount capable of being held in System RAM. Am I correct?
05:36  nosklo: phoe6: no.
05:36  phoe6: then file-system's capability of holding the amount of information in a single file??
05:36  phoe6: Is it?
05:36  CharlesB: >Implying maxint is the maximum size of an int because IT'S CALLED MAXINT
05:37  sam_sam: phoe6:the max no. the cpu can recognise and process as a no.
05:37  nosklo: phoe6: it's the maximum number that can be stored in a single int in the underlining platform.
05:37  nosklo: Python doesn't have a max int
05:37  CharlesB: Lol..........
05:37  nosklo: ints transform into longs automatically and can grow forever
05:37  CharlesB: Bah, woops.
05:38  CharlesB: @infobob list
05:38  CharlesB: Aww :(
05:38  phoe6: okay.
05:38  phoe6: how does underlying platform limits itself the maximum number? (just curious)
05:38  sam_sam: well python is a good calculator when normal calcs are unable to process/ hold ur no. :)
05:38  CharlesB: 32bit processor ? @phoe6
05:38  variable: UnicodeEncodeError: 'ascii' codec can't encode character u'\xe4' in position 13: ordinal not in range(128)
05:38  nosklo: phoe6: it uses the processor word size
05:38  sam_sam: no L o l is it :D
05:39  variable: (that comes from a Print line I think)
05:39  papna: variable: You're using a unicode string where a bytestring is required.
05:39  CharlesB: variable, That seems to be a very recurring python error.  I really loved that one.
05:39  variable: I'm sure this is an FAQ - but how do I convert?
05:39  papna: variable: unicode strings are abstract representation of text. You can't directly print them, since you need to print a concrete sequence of bytes.
05:39  papna: variable: The encode method.
05:39  CharlesB: e.convert
05:39  phoe6: CharlesB: 64 bit.
05:39  CharlesB: e.convert("utf8") etc
05:39  sam_sam: phoe6:IEEE 754 format .. u can searh Internet :)
05:39  papna: CharlesB: No.
05:40  phoe6: nosklo: thanks for the info.
05:40  papna: variable: Another useful thing to do to see them is to print repr(u) instead.
05:40  phoe6: sam_sam: sure, I am going there
05:40  papna: nosklo: (Maybe.)
05:40  variable: papna, rept(u) ?
05:40 * variable is fine losing data ... I only care about the ascii strings anyways
05:40  papna: variable: repr(u)
05:40 --- Nisstyre65 is now known as nisstyre
05:41  papna: variable: You have text which cannot be represented using ASCII.
05:41  variable: papna, I'm fine just dropping data that can't be represented as ASCII
05:41 --- SpitfireWP is now known as Picpermor
05:41  variable: (in my program I don't need to deal with it - as I only care about those things which are numerals and . s only
05:41  papna: variable: Well you can encode to ASCII ignoring such, but you'll have to figure out where and why.
05:42  hstefan: how can I check if a file exists?
05:43  CharlesB: try: f.open(r)f.close except:
05:43  nosklo: hstefan: what will you do if it exists?
05:43  CharlesB: That's what I do
05:43  Tyrope: http://paste.pound-python.org/show/1437/ <- class TyBot seems not to work, what the heck am i doing wrong?
05:43  CharlesB: EXAMPLE:
05:44  CharlesB: try:
05:44  CharlesB:     conf = open("crafti.config").read().splitlines() except: # reaches here if the file does NOT exist
05:44 --- ChanServ sets modes [#python +q *!*@S01060040ca2433ea.vs.shawcable.net]
05:44  nosklo: CharlesB: please don't paste code in the channel
05:44 --- ChanServ sets modes [#python -q *!*@S01060040ca2433ea.vs.shawcable.net]
05:44  bob2: CharlesB: wow, that's horrendous
05:44  hstefan: nosklo: if it does, I'll append to the dictionary (this file would be dictionary pickled), if not, I'll create a lew one
05:44  CharlesB: I pasted one line, as I've done before without you saying anything about it -_-
05:45  nosklo: hstefan: Then you can just open it - python already checks if it exists for you, so you don't need to check yourself.
05:45  nosklo: hstefan: if the opening fails, you catch that error and create a new one
05:45  nosklo: hstefan: however I suggest you don't use pickle to store data
05:46  bob2: Tyrope: forgot to call TyBot on line 25
05:46  hstefan: nosklo: why?
05:46  nosklo: hstefan: it's really bad tool for that purpose
05:47  Tyrope: bob2: python newbie here... call... how? with the ()?
05:47  CharlesB: TyBot()
05:47  Tyrope: i see.
05:48  nosklo: hstefan: it's inneficient, python only, insecure, can break between versions of python, can render data unusable if you change your code
05:48  Tyrope: so all i forgot were 2 silly parenthese.
05:48  hstefan: nosklo: I'm writting the translation system, so I plan to keep a dictionary in memory for my other application. If I use a database, it would be tons of access each page load.
05:49  hstefan: (the pickled file will just be opened one time in the server and then its dictionary will remain in memory)
05:49  nosklo: hstefan: whatever mean of storing you use, you can load the whole data to memory just fine
05:49  nosklo: hstefan: you could use a database and load it at once to memory the same way
05:50  hstefan: nosklo: well, let me explain what I'm trying to do here
05:50  CharlesB: How would I initiliase the array or blocks I want to use..... ?
05:50  CharlesB: Blocks = {0: {0: {}}} ?
05:50  nosklo: CharlesB: blocks = {} ; blocks[1, 2, 3]  = 4
05:50  variable: htoothrot, for a dictionary look into a Trie - it greatly reduces memory usage
05:51  CharlesB: Here's the problem
05:51  CharlesB: Blocks[X][Y] needs to be equal to {X: {Y: {Z: }}}
05:51  nosklo: use a numpy array then
05:51  CharlesB: IE: Blocks = {X: {Y: {X: {Y: {Z: }}}}}
05:52  CharlesB: Uhuh, you can say that, but unless you show me how, saying "use X" won't help me.
05:52  detly: nosklo - I don't think even numpy can handle a 2.6e9 x 2.6e9 x 256 array - that's why I suggested a scipy sparse array
05:53  hstefan: nosklo: I'm writting a web app intended to be multilanguage, so I need to write some kind of translation sys. My idea is to add expressions to a dictionary (<english expression> : <other language>) and keep it open in memory, so when the page is loaded and the user is using another language instead of english, the application translates it from the dictionary english -> desired language
05:54  CharlesB: http://docs.scipy.org/doc/scipy/reference/sparse.html : Page just yells at me about math crap, doesn't actually show me any usable example.
05:54  nosklo: hstefan: ok, first things first.
05:54  nosklo: hstefan: are you aware of the gettext python module?
05:54  nosklo: hstefan: http://docs.python.org/library/gettext
05:54  hstefan: nosklo: nope, let me see
05:55  nosklo: hstefan: it's the usual way to make a internationalized application
05:55  nosklo: hstefan: it's really fast
05:56  nosklo: hstefan: now, your web framework should include something to help you use it - which web framework are you using?
05:56  hstefan: nosklo: django
05:56  fission6: there is a contrib app i think hstefan
05:56  nosklo: hstefan: http://docs.djangoproject.com/en/1.2/topics/i18n/
05:57  hstefan: oh! Thank you!
05:57  hstefan: let me see how it work, but I'm really thankful
05:57  detly: CharlesB - that page has two examples in it
05:58  detly: there's also http://docs.scipy.org/doc/numpy/reference/
05:58  nosklo: hstefan: now, if you were implementing all this yourself (which you really shouldn't) then you shouldn't use pickle at all - wanting it all in memory is completely unrelated to using pickle
05:58  CharlesB: Which are both mathematical, and don't apply to my situation.  Nor are they documentated, it's just an algoritm, which is not what I want.  You told me to us ethis because numpy would not support the large numbers I need.
05:58  hstefan: nosklo: I was using pickling just to store the dictionary in a file
05:59  nosklo: hstefan: yeah, that's what I'm saying to not do
05:59  nosklo: hstefan: don't use pickle to store stuff in files
05:59  hstefan: nosklo: why? I'm curious. What's the usual usages for pickle?
06:00 --- tarpsocks is now known as tarpsocks[0-2]
06:00  nosklo: hstefan: I just told you about 5 reasons to not use it
06:00  hstefan: nosklo: did you? where?
06:01  CharlesB: The page shows that A = lil_matrix((1000, 1000)) makes A a matrix of 1000 x 1000
06:01  nosklo: [02:47] <nosklo> hstefan: it's inneficient, python only, insecure, can break between versions of python, can render data unusable if you change your code
06:01  CharlesB: However, I need practically 64 x 64 x 1,300,000,000 x 128 x 1,300,000,000
06:01  hstefan: nosklo: ops, I didn't see this
06:02 --- tarpsocks[0-2] is now known as tarpsocks
06:02  nosklo: hstefan: the use case for pickle is when you don't care about the data at all, like when caching
06:02  hstefan: nosklo: what do you mean, exactly?
06:03  CharlesB: A = lil_matrix(( 64, 64, 1300000000, 128, 1300000000 )) ?
06:03  nosklo: hstefan: if you need the data later, don't use pickle to store it, that's what I mean :)
06:03  CharlesB: Seems like that might.... use waaaaaaaaay too much RAM.
06:03  detly: CharlesB - do you need to use the entire space defined by that range? ie. will you need to have 8.8e23 pieces of information available at once?
06:03  MostAwesomeDude: CharlesB: Everybody else uses little 16x16x128 chunks and tiles the xz-plane with them.
06:04  CharlesB: ^ Moment
06:04  detly: CharlesB - looks like the scipy sparse matrices are 2D only, so never mind
06:04  CharlesB: I would need (at one time)  20, 20, 16, 128, 16
06:06  sproingie: i've never heard of anything supporting 3d sparse matrices
06:06  CharlesB: >/
06:06  CharlesB: So what do I do then ???
06:06  sproingie: store 256 sparse matrices
06:07  CharlesB: Is this not a 5Dimensional array I speak of?
06:07  sproingie: 5 dimensions?  find a different data structure
06:07  CharlesB: Blocks[2][1][5][48][4] = 1
06:07  CharlesB: I need to be able to do that ^
06:07  sproingie: or wait til PC's come standard with several yottabytes
06:07  sproingie: yes and you won't be doing it with arrays
06:07  sproingie: not on this planet
06:07  CharlesB: -_- I've been asking you what data structure can do it
06:07  CharlesB: And you guys told me numpy and sparse
06:08  sproingie: a dict
06:08  sproingie: keyed by tuples
06:08  MostAwesomeDude: You can do it in numpy.
06:08  MostAwesomeDude: Numpy doesn't mind 5D arrays.
06:08  CharlesB: :/  Can you please demonstrate the initialisation of the dict of the size I speak of then?
06:08  CharlesB: :/
06:08  CharlesB: Or demonstrate it in numpy then ?
06:08  CharlesB: :////// Or atleast agree on one of them for me to research :/
06:09  sproingie: 64 * 64 * 1 300 000 000 * 128 * 1 300 000 000 = 8.8604672 × 10^23
06:09  MostAwesomeDude: a = numpy.array((20, 20, 16, 16, 128))
06:09  sproingie: that's more memory than has ever existed
06:09  MostAwesomeDude: Additionally, you probably mean 21, 21, since the initial chunkset is 21x21, not 20x20.
06:09  CharlesB: sproingie, at any time I only need to use 21 x 21 x 16 x 128 x 16 of that array.
06:10  CharlesB: I just need the indexes :/
06:10  MostAwesomeDude: Additionally, you will probably find it easier to look at them as 441 different 16x16x128 chunks, keyed by coordinate in a dict.
06:10 --- Setis is now known as EntityReborn
06:10  CharlesB: ^ I don't know how to think of the logic in that, hence why I was hoping there would be any easy way to reference it as one giant array, which is what I'm used to.
06:10 --- EntityReborn is now known as Setis
06:10  sproingie: how much data you planning on populating it with?
06:11  CharlesB: 21 x 21 x 16 x 128 x 16 at any one time sproingie
06:11  michaelgamble: hello
06:11  michaelgamble: im new to python (come from an action script / c background, and im trying to figure out how to specify the last item in array (or list in python terms)
06:11  sproingie: that's certainly a more manageable number
06:11  CharlesB: And the value of that data would technically just be a number from... 1 to 4096
06:12  michaelgamble: btw super cool scripting language for from python == sikuli.org
06:12  CharlesB: Blocks[21][21][16][128][16] = 244
06:12  sproingie: what sort of data set are you working with that requires a five-dimensional array?
06:13  sproingie: my guess is you're using a wildly inappropriate data structure
06:13  detly: michaelgamble - somelist[-1]
06:13  michaelgamble: yeah smokes never heard of any scenario that requires 5 dimensions
06:13  CharlesB: Minecraft level data, each chunk is 16 x 128 x 16 in size, and you load 21 x 21 chunks at any time.
06:13  michaelgamble: oh yeah ? sweet
06:13  michaelgamble: detly ill give it a try thnx
06:13  sproingie: that's not five dimensional
06:14  CharlesB: Block[X][Y][X][Y][Z] is that not five dimensions ?
06:14  MostAwesomeDude: blocks[bigx, bigz][smallx, y, smallz]
06:14  sproingie: i'm not even sure how you're visualizing that 21x21 window as independent dimensions
06:14  sproingie: i sure as hell can't
06:14  MostAwesomeDude: The first container's a dict, and the second container's a numpy array.
06:15  MostAwesomeDude: It's not five-dimensional and you don't have to think of it that way.
06:15  CharlesB: Can you then please show me code of initialising it?
06:15  CharlesB: Blocks[x, z] = numpyarrayinithere on Pre-Chunk, right?
06:15  michaelgamble: you guys every mess with sikuli
06:15  michaelgamble: ?
06:15  MostAwesomeDude: from numpy import zeros
06:15  MostAwesomeDude: self.blocks = zeros((16, 16, 128), dtype=uint8)
06:15  michaelgamble: its a pretty sick scripting language
06:15  MostAwesomeDude: ^^ from bravo/chunk.py
06:16  MostAwesomeDude: michaelgamble: Taking a survey? :3
06:16  CharlesB: It's 16 x 128 x 16 not the other way, due to Notch being retarded >_>  You know that
06:16  michaelgamble: lol i guess.. just started fooling with it over the last few days, and its applications are huge
06:16  sproingie: don't really care how Notch represents it in memory, i'm going to have Z last
06:16  MostAwesomeDude: CharlesB: In numpy, the indices should always be ordered such that the right-most columns are the ones that scroll the fastest. (0, 0, 1) should be followed by (0, 0, 2).
06:17  sproingie: so it's 16*21 x 16*21 x 256
06:17  MostAwesomeDude: And that happens to match the chunk data structure both on disk and on the wire.
06:17  CharlesB: Hmm
06:17  MostAwesomeDude: So my numpy arrays are all (x, z, y). I'm not super-thrilled about it, but that's life.
06:17  CharlesB: Then how do I handle the chunks dict ?
06:17  MostAwesomeDude: You just have a dict indexed by a tuple (bigx, bigz) of the chunks.
06:17  CharlesB: Blocks[0, 0] << How do I init that part ?
06:17  sproingie: what you have is a 2d array of 3d arrays, but they are NOT independent
06:18  CharlesB: I don't know how to shot dict -_-
06:18  MostAwesomeDude: You might want to read bravo/world.py. I already did all this legwork.
06:18  CharlesB: Blocks = dict(16, 16) ?
06:18  CharlesB: Alright.
06:20  CharlesB: That's all SP stuff, I don't know how to use that for client :/
06:20  sproingie: you don't need scipy, you don't even need sparse matrices
06:20  CharlesB: All I see is:         self.chunk_cache = weakref.WeakValueDictionary()
06:21  CharlesB: that seems relevatn.
06:22  MostAwesomeDude: Look at load_chunk(). Also this isn't a #python thing; the right data structure is either a numpy.array, or a list.
06:27  michaelgamble: so this is basic, but how do i get the length of a list
06:27  sproingie: len(l)
06:27  michaelgamble: len(listname)
06:27  michaelgamble: ?
06:27  sproingie: correct
06:27  michaelgamble: cool
06:28  michaelgamble: thnx
06:30  MostAwesomeDude: michaelgamble: Have you read the tutorial yet? :3
06:31  michaelgamble: ive been reading all sorts of documentation im just finding it a hard transition from php/as/c style coding
06:31  michaelgamble: find the syntax and colons and whitespace aware coding style strange
06:31  michaelgamble: only been coding in it for about 3 days now though
06:32  bob2: michaelgamble: http://docs.python.org/tut is pretty good
06:32  sproingie: takes a little getting used to.  what are you using for your editor?
06:33  michaelgamble: sikuli ide
06:34  michaelgamble: sikuli.org
06:34  michaelgamble: pretty cool project
06:34  sproingie: i suppose that has reasonable python support
06:34  sproingie: mind you sikuli is jython which has a really different standard lib than regular python
06:35  michaelgamble: its based off python believe it just extends python with image recognition screenshot based scripting style
06:35  michaelgamble: really strange but amazing at the same time
06:35  sproingie: it's based on jython, which is a perfectly good language but it has a very different standard lib
06:35  sproingie: most of us do assume you're using CPython unless you say otherwise
06:35  michaelgamble: oh ok good to know
06:35  michaelgamble: i had no idea
06:35  sproingie: probably be good to grab CPython and play with it from time to time
06:35  michaelgamble: i just noticed it kinda looked like python
06:35  sproingie: it is python
06:36  sproingie: it's just jython, which is the python implementation for java
06:36  michaelgamble: its pretty cool though
06:36  sproingie: it certainly looks like a killer app for jython
06:37  michaelgamble: im creating a unit testing script for a flex project we developed in ubuntu as a virtual machine
06:37  michaelgamble: using sikuli to interact with the software
06:37  michaelgamble: its pretty awesome
06:37  sproingie: it works through the VM?  spiffy.
06:38  michaelgamble: yeah man.. cant wait to finish the script and fire up 16 vm's interacting with eachother through our flex app
06:38  sproingie: i guess anything it can screengrab.  still, that's pretty slick
06:38  michaelgamble: gotta love the boys at MIT
06:39  sproingie: guess all that AI research on image processing paid off
06:40  michaelgamble: yeah man.. it works really well
06:40  bob2: haha
06:40  michaelgamble: also has ocr stuff integrated
06:42  sproingie: i've grown up with computers and worked in tech for almost 20 years now but sometimes i still step back and go "whoah we're living in the freakin FUTURE dude"
06:43  sproingie: these days it's usually from doing something on my phone
06:46  kandinski: wow @ sikuli
06:46  michaelgamble: trust me i know the feeling
06:47  michaelgamble: ive been working in web / online application world for about 10 years now and this thing floored me
06:48  sproingie: oddly sikuli doesn't wow me with concept, since it's pretty straightforward.  screengrab and recognize
06:48  sproingie: it's just that they did a super nice job at slickly packaging it
06:50  ivan`: I spent months building a tiny tiny subset of sikuli that failed to work
06:50  ivan`: sikuli is pretty amazing
06:50  kandinski: it says its open source, still havent found one mention of the license
06:50  sproingie: probably MIT licensed
06:50  sproingie: being that it's from MIT CSAIL and all
06:50  kandinski: so I am going to file it under "available source but non-free"
06:51  wagnerrp: is there any way to replace a function in a single object instance without affecting the rest of the class?
06:51  ivan`: "Sikuli Script and Sikuli IDE are both released under the MIT License."
06:51  sproingie: wagnerrp: you can just do someinstance.func = mynewfunc
06:51  sproingie: wagnerrp: but it won't be a proper method
06:51  kandinski: ivan`: oh, well spoted, I missed that
06:52  detly: kandinski - http://bazaar.launchpad.net/~sikuli-driver/sikuli/sikuli-x/annotate/head%3A/copyright.txt
06:52  michaelgamble: str(integer) ?
06:52  kandinski: yep, thanks
06:52  wagnerrp: sproingie: i dont need a proper method, i just want to deactivate a method without using a bunch of conditionals
06:52  wagnerrp: but that doesnt seem to have worked
06:52  kandinski: detly: that makes it five times as awesome
06:53  sproingie: wagnerrp: which method is this?  if it's one of the special __foo__ methods, you are basically out of luck
06:53  wagnerrp: yes, i want to disable __setitem__ and __setattr__
06:54  sproingie: impossible to do it per-instance
06:55  wagnerrp: ok, thanks
06:55  sproingie: you need to code whatever condition disables it into the class's implementation
06:55  sproingie: since the VM doesn't even look on the instance
06:56  wagnerrp: yeah, this is just a base class im writing up, and if i could avoid a conditional in a function that will be called a lot by using a pointer instead, i figured there would be a noticeable benefit
06:57  bob2: why disable them?
06:57  sproingie: well i shouldn't go recommending this but you can change an object's class
06:57  bob2: hah
06:57  wagnerrp: yeah, but doing that would break other things
06:57  KirkMcDonald: sproingie: Nonsense. Python is strongly typed.
06:57  KirkMcDonald: (la la la not listening)
06:58  bob2: strong like a fox
06:58  bob2: that has an option for altering the species at runtime
06:58  sproingie: you'd change it to a subclass.  but if you're otherwise poking into class machinery then yes you can take it as a given that you'll break other things :)
07:00  sproingie: hey be glad i didn't recommend become()
07:00  bob2: hahahaha
07:00  wagnerrp: havent heard of that one, probably a good thing if i never touch it
07:00  bob2: is that hidden in twisted's sandbox?
07:01  wagnerrp: some sort of type casting?
07:03  sproingie: it's a smalltalk thing.  changes one object into another.  in-place.
07:03  wagnerrp: so like C/C++ casting
07:03  sproingie: no more like *a = *b
07:03  sproingie: actually more like *a = reinterpret_cast<b> *b
07:04  sproingie: no real-world code uses it
07:04  sproingie: someone here wrote it as a proof of concept.  probably doesn't even work in recent python versions
07:06  tr3x: something like *(new_object_type *)&obj ?
07:06  sproingie: http://gbracha.blogspot.com/2009/07/miracle-of-become.html
07:06  bob2: http://bpaste.net/show/2753/
07:06  sproingie: it's a seriously low-level thing smalltalk vms use to bootstrap among other things
07:07  sproingie: VMs like squeak avoid using it because it's incredibly slow
07:07  sproingie: on old school VMs it's just a pointer set
07:07  richo: is it possible to have sys.exitfunc or atexit call the function after everything is cleaned up? ie, very last thing before returning?
07:07  sproingie: richo: i think that requires some C API work
07:08  richo: Ah ok. Thanks.
07:08  richo: I will workaround it somehow
07:08  sproingie: richo: but it's documented, somewhere around "interpreter startup and shutdown"
07:08  sproingie: said shutdown functions can't actually execute python tho, the VM is toast
07:08  sproingie: atexit is as close as python gets
07:09  richo: That's ok. I will write a hideous hack instead.
07:10  wagnerrp: heh... 'Dark evil magic'
07:12  sproingie: actually that's not half as evil as the original become.py which used memcpy
07:13  sproingie: i think i'm going to point to that code whenever someone asks what zope.interface is good for
07:13  bob2: hahahaha
07:14  richo: link to become.py ?
07:15  sproingie: can't find it offhand
07:15  richo: google isn't helping
07:15  sproingie: i love code that screws with pythonapi
07:19  wenbert: how would I read a text file starting from the end?
07:20  richo: Righto, I'm off
07:20  richo: I wound up geting my code to work
07:20  richo: I had to do all the cleanup by hand though which worries me
07:21  wagnerrp: wenbert: like a byte-by-byte reversal?
07:21  richo: Anyway, thanks
07:21  wenbert: wagnerrp line-by-line starting from the end
07:22  bob2: can you just load the whole thing in to ram?
07:22  wenbert: i just need to reverse a 500mb ASCII file
07:22  wenbert: bob2 do you me? if so, nope. the ASCII files are pretty large
07:22  wagnerrp: seek to the end, seek backwards and read forwards into a buffer in blocks
07:23  wagnerrp: when you find an endline, chop it off and dump it to a file
07:23  neataroni: anyone know how to get a confidence interval for the results of a binomial experiment?
07:23  neataroni: in scipy
07:24  bob2: be lazier and use tac
07:25  neataroni: what is tac
07:27  wenbert: what is tac?
07:27  XayOn: tac is cat inverted
07:27  XayOn: It reverts a file =)
07:28  XayOn: well, it does not revert the original filee, but prints it out reverted, from the last line to the first one =)
07:31  wenbert: XayOn does it read the entire file at once?
07:31  wenbert: got a link?
07:33  XayOn: wenbert: man tac
07:33  XayOn: ... it's on coreutils
07:33  wenbert: ah i see
07:34  wenbert: is there an "append"? for somethin like: new_file.write(line)
07:34  bob2: sure, open it for append
07:34  wenbert: like instead of inserting at the end, it inserts at the starting line... i mean "prepend"
07:34  bob2: yes, but that obliterates things
07:35  wenbert: bob2 what do you mean obliterate things?
07:35  bob2: I can't be bothered, sorry
07:35  bob2: oh, anyway, it overwrites whatever you write over
07:35  bob2: there's no C thing to "hey magically move everything forward"
07:36  XayOn: what about opening the file, reading the entire content, appending whatever at starting, and then writing the file with write mode (instead of append)?
07:37  bob2: too big it seems
07:39  wenbert: i found this: http://code.activestate.com/recipes/120686/ can anyone comment on it?
07:40 * wenbert is looking through the code
08:02  wenbert: does this read the entire file into memory? http://stackoverflow.com/questions/2301789/read-a-file-in-reverse-order-using-python/2301792#2301792
08:03  epitron: yes, yes it does
08:03  epitron: readlines() does what it says
08:03  epitron: if you wanna read a file backwards, i think there's something called linecache
08:03  wenbert: epitron looking into that
08:05  epitron: it probably reads the whole file too though, since you access the file by telling it the line # you want to read
08:05  zk: you can do os.stat(fn)[6] and get the length, then do for i in range(len, -1, -1): f.seek(i); f.read(1)
08:05  zk: and read through it backwards
08:05  epitron: or for efficiency, read blocks of 4096 bytes
08:05  epitron: then parse them backwards
08:06  Peng: You don't need to know the length to seek to the end.
08:06  epitron: or just split them and reverse them
08:06  Peng: I think?
08:06  epitron: Peng: you are correct sir!
08:06  Peng: Right. os.SEEK_END.
08:06  epitron: somefile.seek(0, os.SEEK_END)
08:06  epitron: as seen in the last example on that stackoverflow
08:07  epitron: err, 2nd last
08:07  zk: oh that's a good trick
08:07  Peng: Also, os.path.getsize() is a prettier way of stat()ing the size.
08:07  wenbert: when you say you "read blocks of 4096 bytes" what does that mean?
08:07  epitron: zk: use this thing: http://stackoverflow.com/questions/2301789/read-a-file-in-reverse-order-using-python/2301867#2301867
08:08  epitron: it's actually coded kinda weirdly (regular expressions to split lines on \n??) but it probably works much better than reversed(readlines())
08:08  epitron: oops
08:08  epitron: s/zk/wenbert/
08:08  epitron: :]
08:09  wenbert: thanks epitron
08:09  wenbert: trying it now
08:09  Peng: http://stackoverflow.com/questions/260273/most-efficient-way-to-search-the-last-x-lines-of-a-file-in-python/260433#260433 has better worst-case performance.
08:09  KirkMcDonald: I still think that file objects should implement the __reversed__ method.
08:11  epitron: Peng: nice..generators.. :)
08:11  epitron: that's the right way to do it
08:11  epitron: KirkMcDonald: or how about just file.tail?
08:11  epitron: that's the common use-case
08:12  epitron: that guy's head implementation is weird
08:13  epitron: def head(iter, n):
08:13  epitron:     return itertools.imap(operator.itemgetter(1), zip(range(n), iter))
08:13  epitron: he uses itertools for everything but range :)
08:13  Peng: Haha
08:13  epitron: i think there's an izip too
08:13  Peng: epitron: The comments at the end say he used map() originally. Guess he forgot to adjust range()
08:13  Peng: epitron: There is.
08:14  epitron: he should just: def head(iter, n): for n in xrange(0,n): yield iter.next()
08:14  epitron: <3 generators ^_^
08:17  offbyone: Is there any way to force virtualenv to install a version of distribute other than the most recent?
08:17  offbyone: Actually, scratch part of that... I mean virtualenv5
08:18  offbyone: Because I'm experiencing a bug installing argparse with virtualenv5 + python3.1 + distribute 0.6.14
08:18  offbyone: Someone indicated that with 0.6.4 installing argparse worked.
08:19 --- zamabe_ is now known as zamabe
08:22  jorrit: Hi
08:23  wagnerrp: how do you print a '{' character in the new string formatting?
08:24  FullFlannelJacke: I want to read a file in it's binary format and have it output the binary to me.  How can I do this?
08:24  jorrit: FullFlannelJacke, you just read it. The fact that it is binary doesn't matter.
08:24  jorrit: FullFlannelJacke, but what do you mean by 'output the binary'?
08:25  FullFlannelJacke: well I guess I mean I want it to output the binary value of each raw byte
08:25  epitron: hahah really?
08:25  epitron: not hex or something?
08:25  FullFlannelJacke: Nope, I want 1's and 0's
08:25  epitron: i think you can do "%b" % char
08:25  jorrit: ah, or you can do bin(c)
08:25  jorrit: That converts to binary.
08:26  epitron: that's the one
08:26  wenbert: I get: Unexpected error (<type 'exceptions.AttributeError'>, AttributeError("'str' object has no attribute 'seek'",), <traceback object at 0x88eb9dc>) for this: http://pastie.org/1444614
08:26  FullFlannelJacke: yeah I've tries the bin() function but I get TypeErrors
08:27  epitron: bin(ord("c"))
08:27  epitron: [ bin(ord(char)) for char in string ]
08:27  offbyone: wagnerrp: I ended up doing this: print("mystr{paren}".format(paren="{"))
08:28  epitron: why on earth would you want the binary values though?
08:28  wagnerrp: offbyone: seems odd that theres no 'proper' way to do so
08:28  FullFlannelJacke: because I am working on sampling hardware entropy as a source for random numbers
08:29  jorrit: offbyone, why not just quote it?
08:30  victorho: Hi guys, trying to execute a line of code that reads "win32api.keybd_event(win32con.VK_NUMPAD1), 0, 0, 0)
08:31  epitron: jorrit: like, \{?
08:31  jorrit: yes, something like that.
08:31  epitron: doesn't work
08:31  victorho: however, i want "VK_NUMPAD1" to be able to take a variable, "x" so i can change it into VK_NUMPADX
08:31  bob2: wenbert: files are seekable, not strings
08:31  wenbert: bob2 right
08:31  victorho: I read something about using an "exec" statement, but is that the only way to do it?
08:32  wenbert: managed to figure that out. but this line: lines = re.findall('[^\n]*\n?', data)
08:32  bob2: victorho: why do you want to do that
08:32  wenbert: "re" is what?
08:32  bob2: help(re)
08:32  offbyone: jorrit: Tried that.
08:32  offbyone: wagnerrp: YEah, tell me about it.
08:32  jorrit: Ok, do {{ then
08:32  offbyone: I could not find a better way to do it.
08:32  jorrit: That seems to work and returns a single {
08:32  jorrit: Yes, and same for }}
08:33  victorho: bob2: i am building an onscreen number pad, and my function takes the label of the button clicked (e.g., "5") and passes it to this function the simulates a keystroke
08:33  bob2: victorho: nah
08:33  bob2: victorho: dict mapping buttons to constants
08:33  bob2: victorho: or getattr, but that's a little silly
08:33  offbyone: jorrit: Awesome! Python is replicating SQL 'features'!
08:33  offbyone: wagnerrp: jorrit's suggestion works, FWIW
08:33  epitron: it is worth $5,000,000
08:34  epitron: pay up!
08:34  offbyone: "something {{ here {foo}".format(foo='bar') == "something { here bar"
08:34  victorho: bob2: so if i were trying to do a full keyboard, the best way is still to create a dictionary with like 70 entires?
08:34  victorho: entries*
08:34  wagnerrp: ah, thanks
08:34  wenbert: bob2 what is line17 http://pastie.org/1444614 I get NameError("global name 're' is not defined",)
08:34  jorrit: wenbert, did you  import re?
08:35  jorrit: wenbert, you didn't.
08:35  bob2: wenbert: because you didn't import it
08:35  bob2: victorho: I wouldn't do that
08:35  victorho: bob2 how would you do it?
08:36  bob2: I wouldn't write an onscreen keyboard ;)
08:37  victorho: bob2 haha. i need to do a number pad because i am writing POS software for crappy restaurant terminals
08:37  victorho: they run on windows xp and many are touchscreen only
--- Log closed Mon Jan 10 08:42:48 2011
--- Log opened Mon Jan 10 11:13:23 2011
11:13 --- Users 757 nicks [0 ops, 0 halfops, 0 voices, 757 normal]
11:14 --- Channel #python was synced in 91 seconds
11:15  bob2: no
11:15  bob2: inspect.getmro does something like that
11:15  bob2: but perhaps there's a simpler solution in context
11:18  mnemoc: can this string mangling toy http://codepad.org/cSFex6DV be considered... fair, by pythonic standards? if not, how should I do it instead?
11:20  bob2: what's it meant to do?
11:20  mnemoc: trim, turn to lower case, and remove ugly chars
11:21  mnemoc: it looks too Cish I think... but I have no clue how to make it pythonic
11:22  bob2: what's triming about?
11:22  sam_sam: i am using no. of constants ( dicts , json , etc )to be used by no. of functions distributed across multiple files .. is there any feature specific to this purpose ? ( staticmethods etc )
11:22  bob2: but them in a module and import them where you need them
11:22  mnemoc: bob2: remove white from begining and end (also removing ugly chars if they will be turned into white)
11:22  Peng: mnemoc: Without reading all the code, the "new = new[:last]" probably isn't the most efficent way to do it, though I'm not sure what would be.
11:23  newbi:  what is this pass?
11:24  mnemoc: newbi: do-nothing
11:24  bob2: http://paste.pocoo.org/show/318199/
11:24  sam_sam: is there any scope for performance improvement ?
11:24  mnemoc: bob2: or you mean the var? is for trimming the white chars from the begining
11:24  newbi: if you dont want to do anything why do you need the elif block?
11:24  mnemoc: bob2: great, thanks!
11:25  bob2: newbi: you don't
11:25  bob2: mnemoc: I think it does the same thing
11:25  newbi: then why did he use it?
11:25  bob2: sam_sam: your profiling found imports to be a performance bottleneck?
11:25  mnemoc: newbi: It's a Cish idiom to trim the scope of the final 'else' block
11:26  mnemoc: newbi: instead of making a huge list of and-s in one if
11:26  bob2: sobersabre: woah
11:26  Alberth: newbi: or to make explicit that nothing is done
11:26  newbi: i dont think i need pass anywhere but good to have something like that
11:26  bob2: sometimes you do
11:26  bob2: e.g. boring subclasses
11:27  Taos: Morning all
11:27  sam_sam: bob2:not yet found what the bottleneck is .. although i guess its our session handling but i still want to seek any improvement
11:28  bob2: sam_sam: so profile it then, instead of guessing
11:28  sam_sam: bob2: well i am not the leader , and i have been assigned to do this task :D
11:28  bob2: what task?
11:29  sam_sam: to put all constants spreads all over the application and put them together and performance improvement ///
11:29  xgkkp: have you actually profiled, or are you just guessing?
11:30  bob2: sam_sam: well, profile away
11:31  sam_sam: bob2:well ty but for now is there any way to improve those constants handling ?
11:31  bob2: sam_sam: seriously
11:32  xgkkp: gathering hardcoded constants into one place probably isn't a terrible idea, but I wouldn't expect it to make any performance differences
11:34  sam_sam: bob2:i'll use a function call ( internal) and one assignment statement so is there any way to avoid that assignment being done everytime ? static methods will help me ?
11:34  bob2: lordy
11:36  jorrit: sam_sam, you are worrying about micro-optimizations.
11:37  jorrit: sam_sam, stop doing that.
11:37  sam_sam: jorrit:yeah i know :)
11:37  jorrit: sam_sam, if there are performance bottlenecks they need to be solved by first profiling to see where the problem is.
11:37  sam_sam: ok just tell me what are classmethods and static methods ?
11:37  Taos: sam_sam, http://docs.python.org/library/profile.html
11:38  d0ugal: So, SOAP, the vain of my life at the moment. I'm looking for suggestions of libs to consume a service. I've had blocking problems with all those I've tried so far as the WSDL seems to be difficult
11:38  jorrit: sam_sam, that's explained in the python docs.
11:38 * sam_sam thanks all
11:38  sam_sam: jorrit:yeah i am trying to open that ..
11:38  bob2: 'bane'
11:39  bob2: afaik the soap library on fedorahosted.org is the good one
11:39  d0ugal: bob2: suds?
11:39  bob2: where good is relative to all the reasonably crappy python soap things
11:39  cnfer: i used suds last time i needed to mess with soap
11:39  Taos: soap is just annoying IMO
11:39  bob2: yeah
11:39  d0ugal: ToadP: Totally.
11:39  bob2: http://harmful.cat-v.org/software/xml/soap/simple
11:39  cnfer: https://fedorahosted.org/suds/
11:39  Taos: Rest is a much better concept
11:39  d0ugal: Oops, that was meant for Taos
11:40  nosklo: d0ugal: don't use SOAP, please try to avoid it
11:40  d0ugal: Problem is, Suds can't handle the WSDL file - it falls into a known problem that have
11:40  d0ugal: nosklo: I would, if I could
11:40  nosklo: d0ugal: yeah, suds is really bad
11:40  nosklo: d0ugal: I feel your pain, I was in the same situation
11:40  nosklo: d0ugal: there's no good way to use SOAP, because SOAP itself sucks
11:40  Taos: d0ugal, push your company to pick a new system like REST?
11:41  bob2: haha
11:41  Taos: replace system with concept
11:41  blip-: hi, is MySQLdb the standard way for talking with mysql from python ?  Or are there newer, better alternatives ?
11:41  bob2: blip-: oursql is newer
11:41  d0ugal: Taos: We are consuming the service, not writing it, so you'd have to convince microsoft to change :)
11:41  nosklo: d0ugal: I can tell you what we did here
11:41  Taos: d0ugal, I 'feel' your pain
11:41  d0ugal: I'm wavering towards rolling my own for the service with lxml
11:41  nosklo: d0ugal: I built a small library using lxml.etree.builder to generate the correct XML for each request the service needed
11:41  bob2: hah
11:41  nosklo: d0ugal: exactly
11:41  nosklo: d0ugal: it's way easier
11:42  bob2: that doesn't help with your WSDL issue
11:42  Taos: d0ugal, what part of winodws are you needing that requries SOAP?
11:42  xgkkp: hah, I didn't know SOAP but the wiki says they dropped the definition of the acronym as "Simple", that has got to be a bad sign
11:42  nosklo: you can just dump the WSDL
11:42  d0ugal: Taos: it's actually for Bing, they have REST API's for some things but not the one I need
11:42  cnfer: d0ugal: what didn't suds do for you?
11:42  blip-: bob2: for some quick writing to a database, which do you recommend I learn and use ?
11:42  nosklo: cnfer: it doesn't work
11:42  Taos: d0ugal, do you have to be using Bing then? Could this service not easily be provided by something google offer?
11:43  blip-: bob2: for py 2.6
11:43  nosklo: blip-: sqlalchemy is pretty good
11:43  Taos: blip-, sqlite and use sqlalchemy
11:43  cnfer: nosklo: i used it last month, worked as well as expected
11:43  d0ugal: cnfer: I run into this problem https://fedorahosted.org/suds/ticket/239
11:43  nosklo: cnfer: maybe you had a very simple service
11:43  Taos: cnfer, as well as something can when you use soap
11:43  d0ugal: Taos: Afraid so, I'd choose Google but I don't get to choose - it just got this dropped on my.
11:43  d0ugal: s/my/me/
11:43  cnfer: Taos: yes ^^;
11:44  nosklo: d0ugal: lxml ftw
11:44  Taos: d0ugal, I agree with nosklo
11:44 * d0ugal decides to go with lxml
11:44  d0ugal: Thanks all
11:44  bob2: blip-: i like storm
11:44  nosklo: d0ugal: by the way, have you seen this http://msdn.microsoft.com/en-us/library/dd250846.aspx
11:44  Taos: nosklo, your a wizard :)
11:45  Taos: json > soap
11:46  blip-: thanks
11:47  Taos: anyone care to comment on this code I threw together for my school? http://codepad.org/GMeuMU0d
11:48  d0ugal: nosklo: I've not, but to be more precise (as I wasn't before - oops) - It's the Bing Maps Search service - For bing maps they have some REST API's but not for all. http://msdn.microsoft.com/en-us/library/dd877180.aspx
11:48  nosklo: Taos: 1) declarative 2) sqlalchemy database calls aren't async
11:48  Taos: Can you elaborate on those points?
11:49  xgkkp: Taos: Don't forget to remove the profanity before presenting the code....
11:49  verte: declarative base sucks
11:49  nosklo: verte: no, it rocks
11:49  verte: psh
11:49  Taos: xgenesis, of course... that was for my mate who wanted to use mysql
11:49  nosklo: in the latest versions, you can use it to do almost anything manual mapping does
11:50  Taos: nosklo, point 1, what does declarative mean in this situation?
11:51  Taos: (other than the unneeded sys import :S)
11:51  nosklo: Taos: http://www.sqlalchemy.org/docs/orm/extensions/declarative.html#module-sqlalchemy.ext.declarative
11:51  verte: Taos: declarative base puts the table, mapping, and mapped object all in the one definition
11:51  nosklo: Taos: it's a method of declaration where you create the table, mapper and class all at once
11:51  Taos: Removes all the other imports and just works from declarative_base?
11:52  nosklo: Taos: no, I wouldn't remove all imports
11:52  newbi: hello anyone has any idea to start a python project
11:52  Taos: Ah ok
11:52  nosklo: newbi: a diplomacy adjudicator
11:52  newbi: what's that
11:52  verte: newbi: what do you mean?
11:52  Taos: nosklo, don't be nasty you pull that one on me all the time
11:53  newbi: i meant to ideas on project so that i grasp the language completely
11:53  Taos: newbi, anything that is NOT a irc bot
11:53  newbi: Taos, why?
11:53  Bonaparte: newbi, you will better learn  if you implement your own idea
11:53  xgkkp: Taos: Sure, just It's funny when you see people forget, commit that stuff then immediately revert it
11:54  newbi: Taos, what's wrong with irc bots
11:54  xgkkp: newbi: Find a programming itch, then scratch it. You'll learn much easier trying to solve your own problem
11:54  Taos: newbi, everyone writes irc bots they are boring
11:54  newbi: ok
11:54  newbi: maybe an ai irc bot
11:54  verte: not many write them correctly
11:54  Taos: verte, agreed
11:54  bob2: heh
11:56  Taos: bob2, do you post on python-forum?
11:56  the_isz: newbi: i find http://www.pythonchallenge.com/ to be quite an entertaining way of learning python...
11:56  the_isz: if you have the nerves for it ;)
11:56  bob2: Taos: no
11:56  bob2: forums are too fiddly
11:56  nosklo: python challenge is terrible
11:57  nosklo: the challenge part is unrelated to python, it's more of a riddle than a programming task
11:58  the_isz: nosklo: yeah, probably. though it touches quite a few python topics. i think going through the first couple of challenges can't hurt...
11:59  nosklo: it favors bad useless stuff like pickle
12:00  nosklo: newbi: I suggest you join an opensource project of your interest. Read lots of code
12:00  Taos: nosklo, for the declarative stuff do I still use the 3 lines of session prep?
12:01  newbi: nosklo are you in any os project?
12:01  Taos: newbi, get some real experience before touching os work
12:02  newbi: i will make a irc bot first ;p
12:02  Taos: newbi, do it right then
12:02  newbi: yes i will try to do it right
12:02  newbi: i would use twisted right?
12:02  neumaennl: I've learned the basics of python by implementing a simple game I had already implemented in other languages
12:03  newbi: tetris?
12:03  neumaennl: nonogram
--- Log closed Mon Jan 10 12:48:20 2011
--- Log opened Mon Jan 10 13:29:42 2011
13:29 --- Users 770 nicks [0 ops, 0 halfops, 0 voices, 770 normal]
13:29 --- Server: [sendak.freenode.net] [freenode-info] channel trolls and no channel staff around to help? please check with freenode support: http://freenode.net/faq.shtml#gettinghelp
13:30  newbi: Taos how old are you?
13:30  Taos: 17
13:31  newbi: ok
13:31  Taos: Yourself?
13:31  newbi: i am 21
13:31  Taos: Mhm
13:31 --- Channel #python was synced in 108 seconds
13:31  newbi: i dont want to learn a ot of languages
13:31  Taos: newbi, divercity is a good thing
13:31  newbi: just to learn a few but to get good at them
13:32  Taos: newbi, that too... but why be good at one when you can be great at many more
13:32  kerio: learning more than one between python, ruby and perl is a waste imo
13:32  kerio: learn C, learn a scripting language, learn a functional language
13:32  newbi: kerio no need to learn when you know one of them
13:32  Taos: my eventual list is java, haskell, scheme, lisp, lua, javascript, perl, C etc
13:33  newbi: i started from c then asm then perl
13:33  Taos: might learn R
13:33  kerio: scheme, lisp *and* haskell?
13:33  Taos: Yes
13:33  Taos: All three
13:33  Taos: get used to is
13:33  Taos: it
13:33  NelleV: Taos: R ? xD
13:33  newbi: javascript isnt a language i would say
13:33  sopho: maybe you want to add the programming language called 'brainfuck' to that list.
13:33  dheerosaur: Python, Any functional language, C
13:33  newbi: brainfuck fucks my brain really
13:34  NelleV: or another useful programming language... OCaml :p
13:34  Taos: sopho, if someone uses it for development Id learn it
13:34  kerio: sopho: you mean Malbolge Unshackled, right?
13:34  TheSheep: Python, Javascript, C, any functional language :)
13:34  sopho: kerio: hehe
13:34  newbi: i would add asm to that list
13:34  dheerosaur: JavaScript is a functional language :)
13:34  sig^: almost
13:34  TheSheep: newbi: that's covered by C :D
13:34  newbi: TheSheep, no
13:35  dheerosaur: sig^: What does it lack?
13:35  Taos: newbi, I don't intend to learn asm
13:35  TheSheep: dheerosaur: as functional as python
13:35  sig^: currying?
13:35  dheerosaur: I mean, not purely functional
13:35  newbi: C and asm are diferent things
13:35  TheSheep: merlin83: yes, C is assembly with nicer syntax
13:35  dheerosaur: We can cook great curries in JavaScript :D
13:35  Taos: mainly because I will probably never use it in my entire life
13:35  TheSheep: newbi: ^
13:35  TheSheep: merlin83: sorry
13:35  newbi: TheSheep, no it's not
13:35  TheSheep: newbi: ok, your argument convinced me, you are right
13:36  zalun: I'm trying to create a simple pylint wrapper for my django project (I heard not so good reports about django-lint) and I've got a problem with path: http://pastebin.com/rmfhmWEn
13:36  infobob: http://paste.pound-python.org/show/1439/ (repasted for zalun)
13:36  newbi: there is nothing to be right or wrong
13:36  gandalfcome: Anyone an expert with sqlite3 module? I have opened a db in :memory: and it is not wiped after disconnect. Even after I kill the python session and reopen it..
13:36  newbi: ok so basically i want to learn python too :)
13:36  dheerosaur: newbi, start now
13:36  TheSheep: newbi: go ahead
13:37  newbi: yeah i already looked at most of them
13:37  Taos: gandalfcome, I suggest usign sqlalchemy for sql work
13:37  papna: gandalfcome: Are you sure you spelled :memory: right?
13:37  newbi: just start something to code and then i would be good to use
13:37  newbi: python looks much easier than perl
13:37  dheerosaur: I have seen this tables stuck in :memory: when I tried sqlite3
13:37  Taos: newbi, but less ducktape
13:37  TheSheep: newbi: I discovered that I learn best by hacking existing projects
13:37  kerio: newbi: be careful, python will remove your ability to put up with the stupid of other languages
13:38  newbi: kerio, hehe no i love c
13:38  dheerosaur: TheSheep: one such example for existing project please :)
13:38  seen_: gandalfcome: there could be a typo (instead of memory you use a file). Do you see a file with a name similar to *memory*?
13:38  mattinator: newbi, I had a good time with this: http://www.pythonchallenge.com
13:38  dheerosaur: and http
13:39  newbi: mattinator, i would think of something
13:39  newbi: for now make an irc bot
13:39  TheSheep: dheerosaur: just pick anything on pypi
13:39  newbi: with lots of addons
13:39  kerio: newbi: use twisted
13:39  kerio: or ampirc
13:39  TheSheep: newbi: that has been redone too many times
13:39  newbi: yes
13:39  kerio: (which is still twisted)
13:40  newbi: TheSheep, yes but that's my first thing to do
13:40  newbi: anything else you would suggest
13:40  Taos: newbi, write one of these http://en.wikipedia.org/wiki/Internet_Diplomacy
13:40  TheSheep: a roguelike game ;)
13:40  gandalfcome: seen_:  that was it...
13:41  newbi: Taos, doesnt seem interesting
13:42  Taos: newbi, but it would be a challenge
13:44  Taos: oh I also wanna learn frink
13:54  bobthemilkman: Is there a simple way to convert a unicode character to its integer representation and vice versa?  Right now I'm trying 'print int(u"あ")', but I get an error, "UnicodeEncodeError: 'decimal' codec can't encode character u'\u3042' in position"
13:55  evildmp: can I do something like: from some_dict["module"] import some_model
13:55  evildmp: where both some_dict and some_model are variables?
13:56  bahamas: evildmp: it sounds like you want a plug-in system
13:56  bobthemilkman: Oh. I should be using unichr and ord.  Thanks official docs!
13:57  evildmp: it's pretty simple bahamas - I'd just like to loop over a dictionary to decide what models to import
13:57  bobthemilkman: (Stupid google didn't return the docs as high up the list as I had hoped!)
13:57  bahamas: evildmp: you can use __import__() but i still think that you look into a proper plug-in system and see how it works
13:57  Kylarr: bobthemilkman, ord(u'\u3042') -> 12354
13:58  Kylarr: I'm not sure about going the other way. chr() only works from 0 to 255.
13:58  bobthemilkman: Kylarr: Yep! ord and unichr are working great for me now. :)
13:58  bobthemilkman: unichr
13:58  Kylarr: Oh, there you go.
13:58  Kylarr: Thanks. =)
13:59  ormaaj: wasn't there a syntax for cramming named functions into a line with ';'? Can't seem to make it work.
13:59  evildmp: bahamas: __import__ looks like a start, thanks
13:59  kerio: ormaaj: ";" means end of the expression, but it won't work (luckily) for statements
14:00  bobthemilkman: Great1
14:00  bobthemilkman: Great!
14:00  VladDrac: ormaaj: foo(); bar(); blah() ?
14:01  ormaaj: VladDrac: More like: def f(x): return x; print(f(x));
14:01  VladDrac: ormaaj, that would be ambigous
14:01  VladDrac: consider def f(x): blah(); bar();
14:02  VladDrac: is bar() part of f or not?
14:02  ormaaj: hm
14:02  bobthemilkman: So now I've figured out that characters 12353-12438 correspond to Japanese Hiragana script, including archaic characters, and a few strange ones, but it will be sufficient for my purposes. Thanks!
14:02  kerio: VladDrac: wait, what?
14:03  kerio: bar(); is part of f
14:03  VladDrac: it is
14:03  VladDrac: kerio, ormaaj example suggests that his print wouldn't be
14:03  kerio: ooh, yeah, that won't work
14:03  kerio: luckily
14:03  sam_sam: how to convert dict to list
14:03  kerio: sam_sam: getting what?
14:03  ormaaj: right... the idea would be to end it
14:03  jorrit: sam_sam, depends on how you want to convert it.
14:03  VladDrac: it's actually not ambigous, it works as expected
14:04  sam_sam: jorrit: without loops
14:04  sam_sam: i mean builtins
14:04  jorrit: sam_sam, I mean how the list should look like.
14:04  kerio: sam_sam: no, what do you want to get
14:04  sam_sam: :D
14:04  VladDrac: you just can't "outdent" with ;
14:04  jorrit: sam_sam, there are many ways to convert a dict to a list. Like should it become [(key,value),(key,value), ...]?
14:04  kerio: VladDrac: well, infobob uses ;; to outdent :)
14:04  jorrit: sam_sam, or some other format?
14:04  helge_: bobthemilkman: You might be interested in http://pastie.org/1445065 (for a complete list)
14:05  ormaaj: kerio: Ah maybe that's where I've seen it before
14:05  sam_sam: [(key,value),(key,value), ...]
14:05  kerio: infobob: redent ormaaj def f(x): return x;;print(f(x))
14:05  infobob: ormaaj, http://paste.pound-python.org/show/1440/
14:05  jorrit: sam_sam, d.items()
14:05  bobthemilkman: helge_: Is there a simple way to create that list? Or did you have it lying around from something else?
14:06  sam_sam: oh forgot .. L ol
14:06  bobthemilkman: (This is for future reference)
14:06  kerio: sam_sam: why do you need a list, btw?
14:06  sam_sam: ty ..
14:06  kerio: and mind the rules please
14:06  sam_sam: kerio: to render to SelectField in forms
14:06 * sam_sam thanks all :)
14:06  VladDrac: I know, ^H should become significant in python!
14:06  kerio: can't it take an iterable?
14:06  helge_: bobthemilkman: dunno, I don't even remember how I made it in the first place
14:07  helge_: I think I copy pasted it form another site, since I'm using a mappin between latin/kana it's pretty hard to automatically generate :)
14:08  bobthemilkman: helge_: Yes. I was thinking that it was manually generated since there exists no formal latin/kana conversion.
14:08  domas: hmmmmm, why can't I catch exceptions from threads? :(
14:09  domas: I get "Exception ignored" messages :(
14:09  wmader: hi all. how do I initialize a data sturcture (own class) in different ways (c++ style would be to overload the constructor)?
14:10  papna: wmader: Keyword arguments, classmethods, preprocessing, and/or factory functions.
14:11  wmader: papna: factory functions sound like I want to use them, thanks
14:11  papna: domas: That sounds like a __del__ issue, not a threads issue.
14:11  papna: domas: Avoid threads and __del__
14:12  papna: wmader: classmethods are sort of like factory functions, but attached to your class and supporting inheritance.
14:12  klawd: guys, quick question: i don't want to call super every time in all the classes of a certain type. is it ok to do this from the via inspect + MRO?
14:12  papna: domas: Or a finally issue.
14:12  domas: papna: MySQLdb and __del__ :(
14:13  papna: klawd: Nope.
14:13  FranciscoD: hi, can someone help me correct this please?
14:13  FranciscoD: http://fpaste.org/maNw/
14:13  FranciscoD: does this imply that setup.py needs to be run as root?
14:13  papna: domas: Use oursql for MySQL integration, use Twisted for async database access, and don't use __del__ at all.
14:13  klawd: papna: because explicit is better than implicit? or what's the reason?
14:14  papna: klawd: And because you can't know what to do when without super.
14:14  wmader: papna: you refere to the decorator @classmethod?
14:14  papna: klawd: And becasue you can't get the value without super.
14:14  evildmp: why can " from ... import ..." import a class, but "import ..." cannot?
14:14  domas: papna: well, my script has to run multiple database commands in parallel, it is not that much about async as parallelism
14:14  kerio: wmader: there's no overloading in python, so use different methods
14:14  VladDrac: FranciscoD, what does 'lsb_release' on your commandline say?
14:14  neumaennl: FranciscoD: it needs to be run by somebody that can write to the site-packages directory
14:14  domas: but yeah, I'll sure follow your advise in one way or another
14:14  jorrit: evildmp, because it wouldn't know from where to get that class.
14:14  sig^: evildmp: because. It works just fine like that.
14:15  papna: klawd: And because you can't get the CURRENT instsance (and hence its type) without super.
14:15  evildmp: e.g. from some_module import SomeClass is OK - but import some_module.SomeClass isn't
14:15  VladDrac: FranciscoD, and what does ls -l `which lsb_release` say?
14:15  papna: klawd: At least not in a sane or reliable way.
14:15  papna: evildmp: That's just how Python works.
14:15  evildmp: OK, fair enough!
14:15  FranciscoD: VladDrac: ah, so I'm missing a package?
14:15  FranciscoD: I don't have lsb_release installed at the mometn
14:15  FranciscoD: I'll go install it and retry
14:15  FranciscoD: a minute
14:15  VladDrac: FranciscoD, then you should get something different than permission denied
14:17  domas: of course, I can try multiprocessing :(
14:17  FranciscoD: VladDrac: I'm trying to build an rpm, this is how it's reported in "mock"
14:17  Habbie: mock is really really bad
14:18  Habbie: the trouble is that i haven't found anything better
14:21  mytrile: Hey, guys. I'm using pygresql to extract blob from PostgreSQL DB, but when I try to unescape_bytea the result string it gives me an error " Name error: name 'unescape_bytea'
14:21  mytrile: is not defined
14:23  papna: mytrile: You never imported unescape_bytea
14:24  papna: mytrile: Also, psycopg2 is supposed to be the best pg adapter.
14:24  AbhiJit: hi
14:24  AbhiJit: i am trying irc bot guide at shelling
14:24  FranciscoD: VladDrac: yeah, redhat-lsb fixed it. Thanks
14:24  papna: mytrile: You need to import all the names you use (or import their modules and access it as module.name)
14:24  AbhiJit: this is the ful code http://paste.ubuntu.com/552468/
14:24  AbhiJit: and it is not working giving error that server not found
14:24  mytrile: papna: How ? I'm pretty new
14:24  papna: AbhiJit: Wow, that's awful and not valid IRC!
14:24  AbhiJit: anyone can help me?
14:25  AbhiJit: :'(
14:25  papna: mytrile: "from module import name" or "import module; module.name"
14:25  papna: mytrile: docs.python.org/tut
14:25  papna: AbhiJit: http://www.habnabit.org/twistedex.html
14:25  AbhiJit: papna, thank you
14:25  mytrile: papna: Thanks
14:25  xh: why do a get an exception while trying this code: `latest = urllib2.urlopen("http://build.chromium.org/f/chromium/snapshots/chromium-rel-xp/LATEST")` the url is valid and used to work before; i am using v2.6.4 on win32; what is going on?
14:26  VladDrac: xh how can we tell without the actual exception?
14:27  Taos: why is _habnabit's blog passworded
14:27  xh: VladDrac: sorry, http://pastie.org/1445101
14:27  AbhiJit: papna, that was a readymade bot which again not worked. can you please have any step step python guide for verrrry noob to write irc bot?
14:28  AbhiJit: papna, i only have c and c++ knowledge. i dont know python
14:28  Taos: AbhiJit:http://www.eflorenzano.com/blog/post/writing-markov-chain-irc-bot-twisted-and-python/
14:29  AbhiJit: Taos, ok i wll look. thank you
14:31  Cheery: anyone knows where would I find details about how latex does math layouting?
14:32  TheSheep: CoinOpeBoy: the texbook maybe?
14:32  TheSheep: CoinOpeBoy: very exact details
14:32  AbhiJit: it needs root acces to acces /var/mail
14:32  xh: VladDrac: this is the actual code i am trying to run: http://pastie.org/1445110 this worked ok before, but now i get 'URLError: <urlopen error [Errno 10054] An existing connection was forcibly closed by the remote host>'
14:32  AbhiJit: which i cant do
14:32  AbhiJit: :'(
14:32  Cheery: TheSheep: hmm.. okay, looking into that
14:34  bobthemilkman: Is there any wget equivalent that can handle unicode?
14:34  bobthemilkman: urllib2 and urlgrabber don't like it so much. :(
14:36  VladDrac: xh the only thing I can think of is that the buid.chromium.org webserver is rejecting certain useragents
14:36  VladDrac: xh: http://fetch.scritch.org/ with one of the url's is giving a similar problem (connection reset by peer)
14:36  tpratt: Is this clear/reasonable?  http://paste.pound-python.org/show/1441/    I feel like I'm overlooking an obvious solution.
14:36  VladDrac: xh actually, so is my firefox when trying directly :)
14:37  VladDrac: tpratt, not sure what the purpose of this code is but.. why the methods at all? Why not store strings directly in the p dict?
14:39  VladDrac: xh it seems that if you request the directoy listing (without LATEST) first it works
14:39  xh: VladDrac: for some reason, running the code in the python interactive session does not throw an exception.. strange
14:40  VladDrac: xh actually it now simply works again. Their webserver must have been down
14:40  tpratt: VladDrac, the real functions will have to do a lot more to formulate the strings than this.
14:40  xh: VladDrac: aha, thanks!
14:40  VladDrac: tprat: also, you can use the definitions of r1..r6 when defining your dictionary
14:40  VladDrac: dict(r1=f1, r2=f2, ...)
14:41  kerio: tpratt: why do you have such a bigass truth table?
14:43  demet8: when using Virtualenv do I need MYSQL & or MYSQLdb on my computer in order to use it in a virtual environment???
14:43  klawd: is there a nicer way to determine if a class is of a certain type than isinstance?
14:43  klawd: i don't want to use zope interfaces since i would just use them as flaginterfaces
14:43  aminpy: when I try to install psycopg2, this error raises -> libpq-fe.h: No such file or directory*
14:44  aminpy: what should I do?
14:44  VladDrac: you need some sort of postgresql-dev package
14:44  kerio: tpratt: also what if you get false false true?
14:44  kerio: or false false false?
14:44  aminpy: VladDrac, how to install them?
14:45  aminpy: VladDrac, what are they?
14:46  tpratt: kerio, I currently have an HTML form with two checkboxes:  1. do_x, 2. do_y.  JavaScript won't submit the form if both are unchecked.
14:46  kerio: haha javascript
14:46  VladDrac: aminpy, depends on your os I guess
14:47  aminpy: VladDrac, dosn't yum have them?
14:47  aminpy: VladDrac, I have fedora 14
14:48  kerio: tpratt: (no)
14:48  Juhaz: aminpy, I'm sure it does. I'm equally sure it has psycopg, so why are you compiling it?
14:48  jorrit: klawd, normally you would not have to use isintance. Why don't you know what instance the class is?
14:49  aminpy: Juhaz, I want to use it with django
14:49  VladDrac: aminpy, I have no idea
14:49  tpratt: kerio, 'no' as in it isn't clear/reasonable?
14:50  kerio: tpratt: no as in if you use javascript for input validation you fail at web developing forever
14:50  kerio: and you still haven't answered about the need for a bigass truth table
14:50  Juhaz: aminpy, no, why are you building it from sources instead of installing the fedora package?
14:50  klawd: jorrit: i'm creating a schema for couchdb documents. the properties of those document can be of certain types. i have to handle the properties accordingly
14:51  klawd: so i need some way to determine their type. but having isinstance all over the place is a little bit unsettling
14:51  jorrit: klawd, having the need to do isinstance is almost always a sign of bad design.
14:51  tpratt: kerio, so I'll add (False, False, False): lambda: 'you suck' lines.
14:51  aminpy: Juhaz, I don't know how should I install it with fedora package
14:52  klawd: jorrit: that's easy to say.
14:52  kerio: it is
14:52  kerio: and it's also true
14:52  jorrit: klawd, it is true however.
14:53  tpratt: kerio, I have to choose between six function based on three input booleans.  This is what I thought up.  I'm asking what the better way is.
14:53  kerio: hmm... if?
14:54  tpratt: kerio, I'd think that'd be harder to read is all.
14:54  papna_: tpratt: There are eight possible combinations.
14:55  kerio: well sure, if you call them b1 b2 b3
14:55  papna_: tpratt: This suggests to me you have some special logic.
14:56  papna_: tpratt: In any event, you're welcome to use if statements or dicts.Where exactly are you having trouble?
14:56  klawd: jorrit: do you have any backup on that claim? any reasoning? an article? a blog post? anything?
14:56  jorrit: http://www.canonical.org/~kragen/isinstance/
14:56  tpratt: papna_, just looking for an opinion on which is clearer.
14:56  klawd: jorrit: thanks
14:56  papna_: tpratt: Depends. Probably if statements.
14:59  papna_: jorrit: That person doesn't know hasattr is broken and doesn't know what "object oriented" means.
14:59  jorrit: papna_, well didn't read it closely. Just gave the first useful link that came up with google :-)
14:59  papna_: jorrit: And gives a coerce example. =/
14:59  kerio: and in Python 2, the interpreter would have to call both of their __coerce__ methods to add them together.
14:59  papna_: jorrit: Well, their overall point is right and well-posted.
15:00  kerio: RICH COMPARISONS, DUDE
15:00  Juhaz: aminpy, uhh, yum install python-psycopg2. How hard is that?
15:00  papna_: kerio: Yes?
15:00  papna_: kerio: Oh, that he's using coerce, yeah.
15:02  klawd: jorrit: Using isinstance() to determine whether an object supports a particular interface is always a bad idea. see, that's not what i'm doing. i'm asking for the type because i need to do stuff outside the object, not inside of it
15:03  jorrit: klawd, you're picking just one use case of isinstance. The other use cases are also bad.
15:03  kerio: the general idea is that in python you know *what* stuff is
15:03  aminpy: Juhaz, thanks
15:04  klawd: kerio: how so?
15:05  jorrit: klawd, example: don't make a function that expects both lists and integers and then does something on that by first checking if the parameter is a list. It is better to make two functions for that case. This is not exactly your use case but it is an example of the python phylosophy.
15:05  papna_: klawd: isinstance is bad to do something outside the object just as often as it is inside of the object.
15:05  papna_: klawd: The type of an object is not typically semantic information in Python programs.
15:06  papna_: klawd: isinstance is the thing that does it.
15:07  klawd: in this case it is, i think. here's the use case: i have a JSON document and i want to model those documents. now, in the class managing all that, i need to know of what type an attribute is (i need to do integrity checks if its of type OneRelation for example)
15:07  klawd: so it's really not about the implementation behind an interface, it's about the type of the variable in the schema
15:08 --- Picpermor is now known as Spitfire
15:09  papna_: klawd: You are drawing an inapplicable distinction between "interface" and "type".
15:09  kerio: it's a crappy schema then
15:10  papna_: klawd: The only thing interesting about the type is the interface, and you have things with different interfaces, it sounds like.
15:10  edgimar: Are there any tricks for allowing exec(), when called from inside a function, to allow the code that is executed to be in it's own namespace, but still to have global imports?
15:10  papna_: edgimar: 1) Don't use exec.
15:11  papna_: edgimar: 2) you can copy globals().
15:11  papna_: edgimar: What are you using exec to do?
15:11  klawd: papna_: the implementation of the integrity check is not inside the object, it's outside so it's really not about the interface.
15:11  papna_: edgimar: 3) Rather than the global imports, you should feed exec exactly what you want.
15:12  klawd: don't get me wrong guys, i'm not trying to defend my use of isinstance i want to a) learn why it's a bad thing and when it is ok to use it and b) learn how to better solve the problem at hand
15:12  papna_: klawd: Sure it is. One thing works differently otherwise do_integrity_check(x) would work no matter what x there is.
15:13  papna_: klawd: I think your distinction between "type" and "interface" is misguided. This is all about the objects behaving differently.
15:13  klawd: hm
15:13  edgimar: papna_: I'm playing around with Pweave (http://mpastell.com/pweave), and would like to do some refactoring of it...  Not sure what you mean by feeding exec just what I want though -- if the code I feed exec contains import statements, and I call exec from inside a function, then the import doesn't appear to make it to the global namespace.
15:14  papna_: edgimar: Oh, I thought you meant the other direction.
15:14  papna_: edgimar: How would it be useful for those imports to make it into the enclosing module's namespace?
15:14  papna_: edgimar: Having names you don't know in your current namespace isn't useful.
15:16  edgimar: papna_: an example: if the exec()'d code contains something like "import a as b", and then later on tries to access b, I get a NameError: global name 'b' is not defined.
15:16  papna_: edgimar: I understand.
15:16  papna_: edgimar: That's a good thing.
15:16  papna_: edgimar: Because you don't know whether to type "b" in your code or not if it's dynamic.
15:17  papna_: edgimar: This is a feature. It's why exec-with-a-dict is *better*.
15:17  papna_: edgimar: How do you know to type "b"?
15:17  papna_: edgimar: If it's always called "b" do "global b; b = d['b']"
15:18  edgimar: If it wasn't clear, I don't mean that 'b' is called from the enclosing module, but from the exec()'ed code.  I should think there's nothing wrong with having the exec()'ed code look something like "import a as b; b.dosomething()".
15:19  papna_: edgimar: That already works.
15:19  edgimar: Doesn't seem to be working for me.
15:19  edgimar: *in the case that exec() is called from inside a function*
15:20  papna_: edgimar: http://codepad.org/FuFOcT2e
15:31  edgimar: papna_: still trying to figure out why the code I'm working with fails (not what you posted).  I'll be back with you momentarily...
15:33  kerio: what happens if __new__ and __init__ have contradicting function signatures?
15:36  nosklo: kerio: hell freezes
15:36  kerio: nosklo: cool
15:36  kerio: (pun intended)
15:37  nosklo: kerio: well, unfortunately I was joking
15:37  nosklo: kerio: __new__ and __init__ go to epic battle, and eventually __new__ wins the fight, and __init__ dies with an exception
15:44  kerio: nosklo: well, it's a cool way to make a class non-instantiable
15:44  nosklo: kerio: virtual classes!!
15:45  the_isz: recently, i wrote a generator function that yields arrays of size n from a given container because i couldn't find a builtin for this. did i miss one?
15:45  nosklo: the_isz: (L[pos:pos+n] for pos in xrange(0, len(L), pos))
15:46  nosklo: the_isz: where L is any sequence
15:46  the_isz: nosklo: that's much shorter than what i came up with :) but it's still self-written. i had assumed there should be such a function in itertools or something...
15:47  Dynetrekk: I have a big mysql text (utf8) dump (actually from wikipedia), is it possible to rebuild th text dump into a, say, sqlite database?
15:48  Peng: Well it's obviously possible to enter text into an SQLite database...
15:48  nosklo: the_isz: there's also itertools.izip_longest(*([iter(L)]*n)) that works with any iterable instead of requiring a sequence
15:49  Dynetrekk: Peng: I was hoping to get python to do it automagically :)
15:49  the_isz: nosklo: that looks crazy oO i'll have to digest that :) thanks
15:49  Dynetrekk: into some sensible database format
15:55  papna_: Dynetrekk: I think there are standalone tools for that.
15:55  papna_: Dynetrekk: Note that it's not strictly possible.
15:55  Dynetrekk: hm, okay, so I should read it into a mysql database, really
16:04  queso: A regular workday (M-F) consists of 8 working hours. What's the best way to calculate the number of working hours given two dates (inclusive)?
16:05  kerio: the_isz: if you use that make sure to comment it
16:05  kerio: and even better, to understand it
16:05  the_isz: kerio: i just worked it out and wanted to ask nosklo how many years he's been training python to come up with such a solution :)
16:06  kerio: meh, it's not *that* cool
16:06  kerio: :P
16:06  Juhaz: queso, homework?
16:06  the_isz: kerio: it's cooler than anything i had come up with, that's for sure :)
16:06  queso: Juhaz: no, it's for a work report
16:06  bilkulbekar: Juhaz: nice comment :P
16:07  queso: Juhaz: I phrased my question so nicely you thought it had been written by a teacher? ;)
16:07  bilkulbekar: queso: he thought you were some school kid :P
16:08  Juhaz: it is pretty textbook-ish question. Besides everyone knows a regular workday is a myth so the answer can't have any real-world applications ;)
16:08  queso: bilkulbekar: Should I gather from this that my question has a simple answer?
16:09  queso: Juhaz: Agreed.  Although managers like reports that may not always reflect reality and, as a programmer, there's little I can do about that.
16:09  kerio: queso: subtract the two dates, get the number of days, and multiply by 8
16:09  kerio: weekends and holidays are overtime
16:09  queso: kerio: That would include Sat & Su
16:10  kerio: queso: exactly :D
16:10  Reite: Whats the input?
16:10  kerio: queso: i doubt there's a simpler solution than iterating over all the days
16:11  Reite: oh forget it
16:11  Juhaz: count the number of full weeks and check for saturday and sunday during the first and last week, *5 for the others
16:11  Juhaz: of course, if you want holidays too it becomes a lot harder
16:12  queso: Wait, I have an idea. I'll use dateutil to generate days and use an RRULE that excludes weekends.
16:18  highvoltz: Why would this error? http://paste.pound-python.org/show/1442/
16:19  xgkkp: What python version?
16:20  xgkkp: I vaguely remember something about the old syntax for exceptions going away in 3 (or possibly going away, or something similar)
16:20  rhkfin: Looks like that QTextBrowser automatically writes \n after every .append. How to stop this from happening? I'm writing there same stuff as to stdout that doesn't add the \n automatically..
16:22  highvoltz: 3.`
16:22  highvoltz: 3.1
16:22  highvoltz: running 2 and 3 in parallel
16:22  Yhg1s: highvoltz: because it's not valid Python 3.
16:22  papna_: xgkkp: "except foo, bar" syntax went away in 3. It's spelled "except foo as bar". 2to3 fixes this.
16:23  papna_: xgkkp: Are you porting this program to Pthon 3?
16:23  jorrit: papna_, highvoltz is the one you should talk too.
16:23  highvoltz: so I need to upgrade to a newer version?
16:23  xgkkp: papna_: It's highvoltz program, I'm the one telling him it went away
16:23  Yhg1s: highvoltz: no, you need to either use Python 2, or write Python 3 code.
16:23  jorrit: highvoltz, no. You must fix your code or downgrade to an OLDER version.
16:23  highvoltz: what version would I need to downgrade to?
16:24  jorrit: highvoltz, Yhg1s already told you
16:25  highvoltz: alrighty thanks
16:26  xgkkp: highvoltz: 2.6 upwards will accept both syntax methods ( http://docs.python.org/release/3.1.2/whatsnew/2.6.html#pep-3110 )
16:26  highvoltz: https://projets.pasteur.fr/repositories/entry/mobyle/tags/release_0_97_0/INSTALL
16:27  highvoltz: this is saying 2.5 and above
16:27  highvoltz: should I shoot for 2.6?
16:27  highvoltz: this is on yellowdog PPC linux, pain to find rpms
16:28  ojii: hi everyone
16:28  ojii: I'm a bit confused by docutils, is there an easy way to extract the heading-style from a specific rst-file/rst-string?
16:33  edgimar: papna_: (after a small pause) -- I realize what's happening -- it works when you call exec from a function at the top-level of a module, but doesn't work when exec is called in a nested function...  This is what I was encountering.  Workarounds?? ;)
16:34  kerio: don't use exec?
16:34  edgimar: kerio: nope.l
16:35  kerio: and why is that?
16:35  edgimar: Because the purpose of the program is to parse python and execute it.
16:35  edgimar: so, kerio, do you have any workarounds, or just sage advice?
16:36  Yhg1s: edgimar: soudns like you're using exec wrong.
16:36  Yhg1s: edgimar: always pass explicit namespaces to exec in.
16:36  rajesh: hi all, question about the use of getattr... from my class A, I instantiate a class B and would like to pass a 'functor' in A as a __init__ args to class B. when i try `B(getattr(self, func_in_A))`, I get a 'global name not defined'.
16:36  Yhg1s: rajesh: just B(self.method) will do that.
16:36  edgimar: Yhg1s: how?  I didn't see anything about passing namespaces in the documentation.
16:37  rajesh: Yhg1s: k, makes sense. thanks!
16:37  rajesh: i don't know why i was obsessed with using getattr in this case anyway. :)
16:37  Yhg1s: edgimar: the second and third 'argument' to the statement. http://docs.python.org/reference/simple_stmts.html#the-exec-statement
16:40  edgimar: Yhg1s: aha - it was a bit buried in the documentation (for me anyhow); maybe something less general than "expression" in the definition might have helped... ;)
16:41  Yhg1s: executing arbitrary code is not a simple thing. Actually reading more than the syntactic definition of 'exec' is a good idea.
16:41  Yhg1s: also reading up on how scopes are handled in Python.
16:41  Yhg1s: and probably also how builtins are looked up, in particular when using exec.
16:43  edgimar: Yhg1s: true; I'm working with existing code that exec's everything in the module (i.e. global) namespace, which I wasn't so pleased with, and wanted to give it its own namespace, but the possibility of passing the namespace-dict wasn't initially apparent for me.
16:44  Yhg1s: unfortunately lots isn't particularly apparent when you involve exec.
16:45  ranamalo: i'm trying to tighten up perms for a python app running on an apache server
16:45  ranamalo: any recomendations?
16:45  Alberth: rajesh: people tend to jump to solutions they think are needed, and then try very hard to get it to work that way, without asking oneself whether the jump was a good one.
16:45  ranamalo: suid?
16:46  nosklo: ranamalo: just use mod_wsgi settings
16:46  ranamalo: nosklo: do you have a good link
16:46  ranamalo: that lays it out
16:47  ranamalo: i'm a sysadmin
16:47  nosklo: ranamalo: mod_wsgi docs, mostly http://code.google.com/p/modwsgi/wiki/ConfigurationDirectives#WSGIDaemonProcess
16:48  ranamalo: nosklo: thank you
16:52  rajesh: Alberth: agreed.
16:53  rajesh: Alberth: but i'm still kinda new to python and forgot about this very obvious mechanism.
16:53  rajesh: not an excuse though, for not knowing. :)
16:53  kerio: bound methods are awesome
16:55  rajesh: kerio: they are, yeah.
17:00 --- dKingston is now known as `42
17:00 --- `42 is now known as dKingston
17:04  caraconan: Hi. A quick way to 'rest' elements in 2 lists? print list(set(c) - set(b)) doesn't work for me
17:05  caraconan: b=['aaa'] c=['aaa','bbb'] The rest should just show ['bbb']
17:05  MostAwesomeDude: caraconan: Hm. What doesn't work about the set trick?
17:06  caraconan: It shows ['aaa','bbb'], and I expect to get just ['bbb']
17:06  caraconan: I want to get the elements in one list that are not present in the other one
17:06  caraconan: I also tried print([item for item in c if not item in b])
17:07  tamiel:  b=set(['aaa']); c=set(['aaa','bbb']); c.difference(b)
17:07  caraconan: But if I do a manual loop over 2 lists it works
17:07  MostAwesomeDude: caraconan: http://paste.pocoo.org/show/318332/
17:07  detrate: how do I install easy_install on ubuntu?
17:07  MostAwesomeDude: detrate: Don't. $ sudo aptitude install python-pip
17:07  MostAwesomeDude: Use pip instead. :3
17:08  MostAwesomeDude: caraconan: IOW, works here, you're Doin' It Wrong somehow.
17:08  seen_: caraconan: http://codepad.org/tT7h6kNU
17:08  caraconan: the only special thing is that one of the list comes from a select on a sqlite3 database
17:08  detrate: MostAwesomeDude: that version of pip is outdated though :-\
17:08  detrate: I was going to use easy_install to install pip
17:08  MostAwesomeDude: detrate: Do you have a virtualenv?
17:09  MostAwesomeDude: pip doesn't mind if you $ pip install --upgrade pip
17:09  detrate: not until I have a package manager :-P
17:09  detrate: ahh, alright
17:09  detrate: I'll give that a go then
17:09  MostAwesomeDude: You can also install virtualenv from apt, and then upgrade virtualenv and distribute as well.
17:09  MostAwesomeDude: pip and virtualenv are awesome that way.
17:10  caraconan: Then the elements looks like [(u'aaa',)]
17:10  detrate: I figured I'd just do 'pip install virtualenv' for the latest, no?
17:10  MostAwesomeDude: caraconan: You should format your selects properly.
17:11  MostAwesomeDude: caraconan: Also go read up on the DBAPI docs. You'll need to format your list a certain way before the set trick will work. Or you can do something else that fits your data structure better.
17:11  detrate: hmm, getting "ImportError: no module named setuptools.command"
17:11  detrate: when I try to update pip
17:12  caraconan: http://paste.pocoo.org/show/318339/
17:12  caraconan: <MostAwesomeDude> ok, I will format my resultset
17:12  caraconan: Thanks for the help
17:13  MostAwesomeDude: detrate: Hm. Are you working from an activated virtualenv? Can you import setuptools from a shell?
17:13  detrate: I don't have virtualenv installed, I was trying to install pip first
17:13  detrate: but I think the version in apt is pretty old
17:14  detrate: bug report says to install "python-setuptools" I'll give this a shot and get back to you
17:15  detrate: that worked
17:15  detrate: sweet, thanks
17:15  caraconan: <MostAwesomeDude>  what's the meaning of the 'u' character? unicode? (u'aaa',)
17:15  detrate: looks like python-pip is missing the dependency
17:16  Joeboy: Hi. What's a nice way to create an object with a few default attributes? Anything better than type('MyType', (object,), {a:1,..}) ?
17:16  yjost: Joeboy: perhaps using a metaclass ?
17:17  Joeboy: yjost: sounds like overkill. Just looking for a nice tidy one-liner.
17:18  yjost: why not in a constructor ?
17:18  MostAwesomeDude: caraconan: It's a unicode object. Have you read the tutorial yet? :3
17:18  Joeboy: yjost: I don't want a constructor
17:18  papna_: Joeboy: Why not a superclass?
17:18  nosklo: Joeboy: dict(a=1, b=2)
17:18  papna_: Joeboy: Or a function?
17:18  papna_: Joeboy: Can you be more concrete about your intent?
17:19  caraconan: Just reading again
17:19  Joeboy: papna_: I need to pass a config object to a third party function. It needs to be an object with some attrs like url='http://foo'
17:20  Joeboy: Doesn't matter what type, just needs to have a few attrs set
17:20  papna_: Joeboy: So where's the problem?
17:20  Joeboy: type('MyType', (object,), {'url':'http://foo',..}) does the job, just feels a bit clunky
17:20  yjost: Joeboy: you could catch the kwargs and use them to set the properties of an object
17:20  Joeboy: papna_: Just wondering if there's a nicer way to do it
17:21  papna_: Joeboy: class MyType(object): def __init__(self, url,...)
17:21  Joeboy: yjost: Don't think you've understood what I'm asking
17:21  papna_: Joeboy: I don't understand why you prefer to create a class with class attributes to package up this state.
17:22  Joeboy: papna_: Doesn't have to be a class. Seems like a reasonably straightforward way to get an object with attrs though
17:22  Joeboy: but I suspect there may be a nicer way
17:23  papna_: Joeboy: I don't understand why you don't just want to make the class.
17:23  papna_: Joeboy: And pass an instance of it.
17:23  seen_: Joeboy: storage.Storage(url='http:', a=1) http://code.google.com/p/web2py/source/browse/gluon/storage.py
17:24  papna_: Joeboy: Otherwise, people reading your code will have no idea what you're doing.
17:24  Joeboy: papna_: Just seems a bit longer and clunkier that way. I guess though.
17:24  papna_: Joeboy: A namedtuple is one way to make a certain kind of simple class, though personally I'd write the full class.
17:24  papna_: Joeboy: Longer but more familiar and plainer and normal.
17:25  kerio: papna_: it also makes it easier to make mistakes
17:25  Joeboy: Ok, just making a class and passing that is better, I admit it
17:26  Joeboy: ta
17:26  kerio: namedtuple has unit tests
17:26  papna_: kerio: His namedtuple object doesn't have them unless he writes them.
17:27  caraconan: How can I know the type of a variable (string, tuple, list...) ?
17:27  Joeboy: type(foo) ?
17:27  papna_: caraconan: In your docstring, say what kind of thing you need, then you know what knid of thing you were passed.
17:27  papna_: caraconan: Or if you're debugging, look at repr(x)
17:27  papna_: caraconan: Can you describe what you're doing?
17:29  caraconan: Trying to 'rest' a list 'A' and a list 'B' thtat comes from a query to a sqlite3 database
17:30  caraconan: But I noticed that the result of the query comes as a unicode strings...
17:30  kotique:     except Exception as exc: -- says syntax error. where?!
17:31  Yhg1s: kotique: hard to say.
17:31  Yhg1s: kotique: which Python version, and what else does the file contain?
17:31  nosklo: kotique: seems that you're using python < 2.5
17:31  nosklo: <=
17:31  kotique: 2.6
17:31  kotique: http://pastie.org/1445574
17:31  nosklo: kotique: well, then it could be some identation error, lack of closing parens in the above line...
17:32  papna_: caraconan: So you wanted to know that they were unicode strings for debugging purposes, since your writes weren't working?
17:32  nosklo: kotique: can you pastebin the full error traceback?
17:32  papna_: caraconan: Your JSON or XML library should happily take unicode strings, by the way.
17:33  kotique: http://pastie.org/1445576 tb
17:33  nosklo: kotique: you're not using python 2.6
17:33  kotique: crap
17:33  kerio: File "/usr/lib64/python2.4/site-packages/mod_python/apache.py"
17:33  nosklo: kotique: also, it seems you're using mod_python
17:33  caraconan: ufff no, it's more easy than that
17:33  caraconan: I've got a partial solution
17:33  caraconan: Thanks for your help guys
17:33  nosklo: kotique: don't do that, remove mod_python immediately
17:34  kotique: nosklo, why?
17:34  kotique: i can't , being tied to cobbler
17:34  nosklo: kotique: because it is really bad...
17:34  nosklo: kotique: can't cobbler run on mod_wsgi?
17:35  nosklo: too bad.
17:35  kotique: indeed it's bad, the whole thing is bad
17:35  MostAwesomeDude: kotique: Wait, the PXE thingie?
17:36  nosklo: kotique: to use python2.6 you'll probably have to recompile mod_python :(
17:36  kotique: hey, I changed indent settings, not it throws error on first if
17:36  kotique: how do I reformat whole thingie in vim ?:)
17:38  nosklo: kotique: python code can't be automatically unambiguously formatted, since identation is syntax
17:38  Psycho_Mario: hi, whats the best way to count the number of occurences of a string coming out of a pipe in a second?
17:39  variable: Psycho_Mario, count all the occurrences and divide by running time?
17:40  Psycho_Mario: variable: the running time is unknown. i want to count it for one second, use a second second to display etc, and then loop
17:42  Psycho_Mario: how much overhead is there for time.time()? while time.time()+1 <= origtime:...?
17:43  ssbr: Psycho_Mario: there's a little overhead.
17:43  ssbr: time.time() - time.time() should roughly tell you how much
17:43  kerio: Psycho_Mario: if the overhead of time.time() is an issue then you shouldn't care about timing at all :)
17:44  kerio: maybe you're looking for the profile module though, it tries to avoid overhead as much as it can
17:44  kerio: and gives you more information
--- Log closed Mon Jan 10 17:47:21 2011
