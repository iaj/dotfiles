--- Log opened Tue Dec 14 11:47:24 2010
--- Log closed Tue Dec 14 11:47:24 2010
--- Log opened Tue Dec 14 11:52:48 2010
11:52 --- Users 676 nicks [0 ops, 0 halfops, 0 voices, 676 normal]
11:52  cnf: 6 months, is the month number, + 6
11:52  hemanth: gorakhargosh, i was a typo, i msgd saying correction
11:53  hemanth: <hemanth> * correction ssDB=('"A","A++","B","C++"')
11:53  TheSheep: cnf: if it's January 30 and I add one motnth, should it be February 30?
11:53  cnf: no it should be 28
11:53  nosklo: dateutil will put 28
11:53  cnf: or 29 on a leap year
11:54  nosklo: cnf: I guess dateutil is what you want then
11:54  TheSheep: cnf: why not March 2?
11:54  cnf: nosklo: looking at it
11:54  cnf: TheSheep: because that is the next month
11:54  cousteau`work: how do I make a zero-initialized 3x3 matrix?
11:54  nosklo: TheSheep: because then it would be more than a month
11:54  nosklo: a month is a relative measure of time. So you use a relativedelta
11:54  TheSheep: cnf: no, it's less than a month, a December has 31 days!
11:54 --- Channel #python was synced in 126 seconds
11:54  cousteau`work: [[0]*3 for i in xrange(3)]   ?
11:54  Zolomon: gorakhargosh: http://www.zolomon.com/wp/?p=382 :)
11:54  nosklo: TheSheep: it depends of which month
11:54  cnf: but february has 28
11:55  TheSheep: nosklo: sure, that's what I'm saying
11:55  nosklo: you're on february, so you count only 28 days,not 31
11:55  nosklo: TheSheep: yeah, but you're making a big deal of it, and it is a solved problem
11:55 * cousteau`work wants to see what will happen when leap years and gregorian calendar are implemented
11:55  nosklo: cousteau`work: what do you mean? they are already implemented
11:56  cnf: yeah, what's the big deal?
11:56  TheSheep: nosklo: not really, everybody thinks something else when then say 'two months from now'
11:56  cnf: no
11:56  cnf: only "programmers" do
11:56  nosklo: TheSheep: not really, you can talk to anybody in the streets and they will know exactly
11:56  nosklo: it's already common sense
11:57  cnf: indeed
11:57  gorakhargosh: hemanth: I'd like you to insert an assert statement (like this one: http://dpaste.org/d6am/ ), execute the code, and show us errors too.
11:57  TheSheep: nosklo: I work with a bank now, every spec has a different definition of what it means
11:57  nosklo: TheSheep: well, I work in a bank too -- accounting sector!
11:57  nosklo: TheSheep: I've been working there for 10 years now
11:57  gorakhargosh: Does everybody work at banks?
11:57  cnf: gorakhargosh: i don't
11:58  nvictor: how do you use the FTPHandler of the urllib2 package?
11:58  gorakhargosh: Zolomon: Thank you! =)
11:58  nosklo: TheSheep: I don't work with the bank - I am the bank's employee. months are relative timespans -- they depend on which month. All my code has to take that on account.
11:59  nosklo: if they say 3 months, the number of days depends on which months those are
11:59  cnf: yeah
11:59  cnf: month int + 3
11:59  cnf: basically
11:59  nosklo: it's normal calculation in accounting
12:00  cousteau`work: ok, so if I do   [[0]*9] * 5   this will return a list of (sub)lists, each sublist contains 9 copies of 0, but the list contains 5 references to the same sublist. Am I right?
12:00  hemanth: gorakhargosh, okies
12:00  cnf: mostly, it's only programmers that make a big deal out of it
12:00  TheSheep: nosklo: well, probably the markedroids we talk to don't know that, but it only shows that it's not a common knowledge
12:00  nosklo: cousteau`work: yes.
12:01  nosklo: that's why we have 13th salary
12:01  gorakhargosh: Zolomon: It shouldn't make your script feel all for nothing. There are many "asset management" things you can do using watchdog. 1. Generate PNGs from SVGs in various sizes as you work. 2. Automatically minify JS in the background. 3. Continuous testing and integration. etc. =)
12:01  cousteau`work: so the right way to do this would be [[0]*9 for i in xrange(5)]
12:02  gorakhargosh: Zolomon: In fact, what I'm planning to release later on will replace monitoring in less/sass/compass.
12:02  cousteau`work: nosklo: I thought there were up to 14 salaries... or are they 0-based?
12:02  cnf: TheSheep: if i tell the joe in the street "it's an 18 month contract" they will take the current month, add 18 months, and that's it
12:02  nosklo: cousteau`work: we only have 13 here.
12:02  cousteau`work: oh
12:02  cnf: i do the exact same thing when i'm not coding
12:02  nosklo: cousteau`work: Having an array pre-filled with zeroes isn't that useful.
12:03  nosklo: cousteau`work: often you can use a dict instead. When you can't, that means you want numpy
12:03  nosklo: cousteau`work: what are you doing?
12:03  cousteau`work: nosklo: an iterative function that does stuff on a matrix
12:04  nosklo: cousteau`work: yeah, check out numpy
12:04  cousteau`work: (not matrix-wise, i.e. not matrix multiplication or stuff like that, only iterations over the elements of a matrix)
12:05  nosklo: cousteau`work: in order to do what?
12:06  zaoul: Hi, I am trying to regex, a text file and insert the result  into a sqlitedb for a django project  I do not get an error but no data is inserted :-/  please forgive horrible programming, im newb.  http://dpaste.com/hold/286498/
12:06  cousteau`work: like,   for i in range(height+1): for j in range(width+1): matrix[i][j] = something(matrix[i-1][j], matrix[i][j-1])
12:07  thevishy: in sorted(list,key=function name) how does it work >?
12:08  nosklo: zaoul: you're calling unicode() on the list. Don't do that.
12:08  cousteau`work: zaoul: no idea about sqlite, but a tip: print some results of the regex match so you know if the problem is on the regex part or the sqlitedb part
12:08  bahamas: zaoul: you should call conn.commit()
12:09  nosklo: zaoul: http://bpaste.net/show/12248/
12:09  thevishy: I mean does the sorted function first slice the list and sent each element to the "function" and then based on the return value it sorts the array again ? I mean it seem lot of thing happens under the hood
12:09  zaoul: nosklo, I did have error about using 8 byte strings...
12:09  nosklo: zaoul: yeah, you have to decode the string
12:09  nosklo: zaoul: calling unicode() on the list you build after .split() is the wrong thing
12:11  tdn: Can you recommend a Python IDE or editor that supports auto-completion of function names etc.? Say, I have a class A with method foo(), so I would like to be able to write A.f and then have it autocompleted to A.foo().
12:11  cousteau`work: tdn: I use Geany
12:12  gorakhargosh: Geany does autocompletion?
12:12  nosklo: thevishy: yes, it calls the function on each value, and uses that to sort
12:12  teratorn: tdn: WingIDE probably has the most completion autocompletion, but in Python such a thing is not always possible or accurate
12:12  svaksha: tdn: stani's python editor
12:12  teratorn: s/completion/complete/
12:12  zaoul: nosklo, ok thanks.. imma try, i definitely want the Unicode i know my text file has foreign characters.
12:13  nosklo: nah, ropemacs is the best completion
12:13  nosklo: (or ropevim for that matter)
12:13  thevishy: nosklo just curious what if the function doesnt return a sensible value or something like that ? Or returns more than one value ?
12:13  teratorn: functions dont return more than one value
12:13  thevishy: I see
12:13  teratorn: one, and only one
12:14  thevishy: it has to be senible isnt it , what if it returns true false
12:14  teratorn: return x, y, z returns the tuple (x,y,z)
12:15  nosklo: thevishy: it will compare whatever object the function returns to each value
12:15  cousteau`work: I know it's not Python's spirit, but is there any plan to include "range comprehensions"? Something like   for i in [0:10]:
12:15  nosklo: thevishy: and use that to sort
12:15  nosklo: thevishy: keyfunction(mylist[0]) < keyfunction(mylist[1]) ....
12:16  thevishy: oh it returns a Tuple , got it . further a statement like "cool".join(a) ( a being a list ) and b.split(b) - these 2 are functionally similar but both seems to be invoked in a differnet manner . b.split() is invoked as a method of the object b and join() is a standalone function
12:18  nosklo: cousteau`work: that's easy http://codepad.org/IyeI3Wvi
12:18  cnf: nosklo: ha, cool. it seems the windows vb dev for _once_ made my life easier :P
12:18  nosklo: thevishy: no, join is a method of the string object "cool"
12:18  cnf: nosklo: he already added the date i need in his soap object ^^;
12:18  nosklo: argh, SOAP!
12:18  cousteau`work: nosklo: yes, but it could be 1 character easier
12:19  bahamas: nosklo: isn't that what range() is for, or i'm misunderstanding his question?
12:19  cousteau`work: dunno, I think being able to automate range creation like that would be useful
12:19  nosklo: bahamas: yes, but he wants to use [x:y] syntax
12:19  bahamas: bah
12:19  nosklo: cousteau`work: I don't think it would be useful
12:19  Zolomon: gorakhargosh: Oh, sounds interesting! Feel free to elaborate. :)
12:20  nosklo: cousteau`work: it's rarely useful having to build a list of sequential numbers
12:20  bahamas: and when it is, you can use range
12:21  thevishy: is that so nosklo , in one case , the list as such is the OBJECT and in the other case the randmon string what we wanna explode to the string is the object
12:21  zaoul: nosklo, still no joy, no data in the db.. although on a better note when I print parts it shows up as (u'9280', u' Bonus ') which I looks like unicode
12:21  cousteau`work: well, in my case, for example: x[i][j] = foo( x[i-1][j], x[i][j-1] ) ... that's complicated to do using zip and map
12:22  bahamas: zaoul: call conn.commit()
12:22  thevishy: So basically string objects have those functions isnt that so nosklo
12:22  nosklo: thevishy: I don't understand the terms you're using.    myseparator.join(some_iterable) is a method of strings.    mystring.split() is also a method of strings
12:22  thevishy: I got it , in one case we make the array -> strings and in the other strings -> arrays and the function works just on strings :)
12:23  zaoul: bahamas, after c.execute ?
12:23  nosklo: thevishy: str.join() can take any iterable, not arrays or lsits
12:23  nosklo: lists
12:23  thevishy: Right
12:23  cousteau`work: or   for i in range(len(x)-1): x[i] += 2*x[i+1]
12:23  bahamas: zaoul: of course
12:23  zaoul: yea :)
12:23  thevishy: iterable means ?
12:23  nosklo: thevishy: anything you can iterate over
12:23  cousteau`work: ...then again, using (x)range wouldn't be that traumatic
12:23  bahamas: not immediatelly after, but before your program ends or before you close the connection
12:24  zaoul: bahamas, oHhhh ya that did it... ugh I wish I didnt waste my time with PHP :-p
12:24  nosklo: thevishy: lists, dicts, strings, generators... anything you can use in a for
12:24  zaoul: thanks bahamas and nosklo
12:25  bahamas: yw
12:25  thevishy: nosklo a.split however returns a list
12:25  nosklo: yes.
12:31  thevishy: thanks
12:31  tdn: svaksha, cousteau`work teratorn: thanks. Will look into those.
12:31  svaksha: tdn: yw
12:31 --- kanor is now known as tyrus
12:32  thevishy: is everything variable an object in Python much like in Ruby , i thought ruby is more object oriented than python
12:32  jorrit: thevishy, everything is an object.
12:32  thevishy: right
12:33 --- tyrus is now known as kanor
12:37 --- Guest25925 is now known as Kami_
--- Log closed Tue Dec 14 12:41:36 2010
--- Log opened Tue Dec 14 12:52:02 2010
12:52 --- Users 675 nicks [0 ops, 0 halfops, 0 voices, 675 normal]
12:54 --- Channel #python was synced in 129 seconds
13:00  daemonkeeper: I know I need to rtfm a lot more about twisted, but I'm about to understand the concept on top of conch, the SSH library. So I looked on http://twistedmatrix.com/documents/current/conch/howto/conch_client.html#auto5 - but I was wondering now, how I'd generate new data channel instances on runtime, e.g. on behalf of another class outside the twisted hierarchy, say to call a command at any stage of the program's runtime? The channel is not instant
13:00  daemonkeeper: iated by me but twisted as is the controlling SSHConnection class, so I have no access?
13:03  daemonkeeper: Or asked the same thing different: Looking at http://twistedmatrix.com/documents/current/conch/howto/conch_client.html#auto4 - how would I call the openChannel method from outside, since I have no control over a ClientConnection instance
13:07  superdmp: I use a couple of command line programs (HandBrakeCLI and ffmpeg2theora), that I call from Python
13:07  superdmp: if something goes wrong when Python runs a command like that, how can it find out what went wrong?
13:08  daemonkeeper: Check the exit status (or output of course)
13:08  superdmp: daemonkeeper:  by output, do you mean the finished result, or a special report from the program?
13:10  daemonkeeper: That, what you mean by "special report". Both programs have an textual output with meta informations I guess.
13:10  superdmp: daemonkeeper:  yes, lots of output in the terminal
13:11  daemonkeeper: You can catch that and parse the information you want.
13:11  superdmp: is there a fixed standard for exit status?
13:12  superdmp: "Unix like systems typically use a convention of zero for success and non zero for error."
13:12  superdmp: is that just typically?
13:12  daemonkeeper: That is typical, not fixed though.
13:12  daemonkeeper: Most programs should follow this
13:12  superdmp: but i can't be guaranteed
13:13  inkjetunit: include/sysexits
13:13  daemonkeeper: You can check
13:13  shylent: you can be guaranteed for a particular program you are calling as a subprocess
13:13  superdmp: OK, so as long as I know what a particular program reports as its exit status, that will be fine
13:14  daemonkeeper: well, but he's not guaranteed to have a particular exit status for a special event.
13:14  daemonkeeper: You do superdmp. Just check it from command line.
13:14  superdmp: as long as I can get back either Ok or not OK, then that's enough for now
13:15  superdmp: last question: daemonkeeper , how do I use the command line to find the exit status?
13:15  daemonkeeper: [arno@snowball]$ ls file ; echo $?
13:15  daemonkeeper: 0
13:15  daemonkeeper: [arno@snowball]$ ls doesnotexist ; echo $?
13:15  daemonkeeper: ls: cannot access doesnotexist: No such file or directory
13:15  daemonkeeper: 2
13:15  superdmp: daemonkeeper:  thanks, that has been vey helpful
13:15  superdmp: thanks everyone
13:17  superdmp: oh
13:17  superdmp: my shell doesn't return a number
13:17  superdmp: sorry, please ignore me
13:17  superdmp: it does work
13:18  Hory: if getters and setters are evil, why is the python library full of them? :)
13:19  superdmp: Hory:  for dramatic tension?
13:19  superdmp: a plot device?
13:20  Hory: good point
13:20  shylent: what exactly do you mean?
13:20  shylent: like, what particular case do you have in mind?
13:20  shylent: (they are still evil, though)
13:20  Hory: I was just commenting on this article which seems quite popular http://tomayko.com/writings/getters-setters-fuxors
13:22  Hory: properties make inheritance less straightforward and they are slower
13:23  tr3x: Hory python library is full of they because properties didn't exist at the beginning
13:23  tr3x: of them*
13:23  Hory: I think they're OK for the final user (in the cases where there is such a thing)
13:24  Hory: and by user I mean developer :)
13:24  jorrit: Nice article.
13:24  Hory: tr3x but descriptors did exist?
13:25  Hory: it's those that are really needed
13:25  Hory: I agree with the principle of not making setters and getters for each attribute automatically
13:25  tr3x: hory they didn't
13:26  Hory: but when you know from the start that you need functionality when setting/getting, a method is a simpler solution to me than a property
13:26  tr3x: Hory yep. but if you later wish to add getters and setters you're breaking compatibility with the code that used attributes. with properties you don't
13:27  Hory: I thought of a small trick today
13:27  jorrit: Hory, I find bla.set_something(x) uglier then bla.something = x
13:27  Hory: make the __getattr__ method check if there's a get_something method
13:27  Hory: and call it
13:27  tr3x: Hory what makes you think that properties are slower btw?
13:27  jorrit: yes, I was also wondering.
13:27  Hory: slower than methods?
13:27  jorrit: yes
13:28  jorrit: Why would they be?
13:28  Hory: because they do everything a method does and more?
13:28  jorrit: More? What more?
13:29  Hory: their __get__ runs, then they access an instance attribute (fget)
13:29  jorrit: How is that more? Compare to: you call instance.getter() and that getter also has to fetch the instance attribute.
13:29  jorrit: i.e. getter() implementation has to 'return self.attr'
13:30  Hory: but property.fget() fetches the instance attribute too
13:30  Hory: the private one
13:30  jorrit: so?
13:30  jorrit: I don't understand where it would be slower.
13:30  Hory: because it also runs __get__ and also does an attribute lookup to get "fget"
13:31  Hory: and it makes inheritance not work in a straightforward way
13:31  jorrit: Anyway, you don't always have a getter property. Sometimes you can get way with a normal attribute.
13:31  jorrit: And that always wins from calling a method.
13:33  Hory: a problem is that properties are inconsistent with the rest of the code. Yes, obj.prop = something is nicer than obj.set_prop(something), but what if you need various arguments? (and the same for getting)
13:33  jorrit: Anyway, even if it is slower (which I'm not convinced of) it would be a micro-optimization and not relevant in 99.99% of all performance issues.
13:34  jaegr: I'm trying to get <title> from websites with lxml, but I get "malformed start tag, at line 789, column 360", any way to fix that?
13:34  jaegr: not on every site, but some
13:34  jorrit: Hory, then you can still write that function if you need more arguments.
13:34  Hory: so you end up using obj.prop sometime and sometime obj2.set_prop2()
13:35  Hory: yes jorrit but I can argue, what if you need to add more arguments later?
13:35  jorrit: Hory, ?
13:35  jorrit: Hory, then you change the setter function?
13:35  jorrit: Hory, if you need more arguments later then it will be a fundamental change anyway.
13:35  Hory: but setting doesn't work with multiple arguments?
13:35  jorrit: Hory, no matter if you use properties or a setter before you'll have to change the calleras.
13:35  jorrit: callers
13:36  Hory: jorrit: the same can be said by transforming an attribute into an accessor
13:36  jorrit: i.e. you'll have to change obj.set_something(x) into obj.set_something(x,y) just like you have to change obj.something = x into obj.set_something(x,y)
13:36  jorrit: Hory, yes but the nice thing is that at least for that case we can avoid having to change the callers.
13:36  Hory: not if y is optional
13:37  jorrit: Hory, you are nitpicking. What if 'y' is not optional?
13:37  Hory: no I'm talking about real issues :)
13:37  jorrit: Anyway, if y is optional then the property setter would work as well.
13:37  Hory: I'll give you an example, an entity has a name attribute, but I want to make it possible for it to return different names based on who the name is presented to
13:37  jorrit: i.e. if y is optional then obj.something = x would be valid too.
13:37  savantgarde: although I have install_requires=["setuptools"] in my setup.py, setuptools isn't installed. any ideas as to why?
13:37  Hory: so I need entity.get_name(forsomeone)
13:37  jorrit: It would just assume an optional value too.
13:38  savantgarde: I use distribute btw in my setup.py
13:38  Hory: jorrit: yes but it wouldn't be consistent, and then the developer has to ask if the two approaches do something different
13:39  jorrit: Hory, well in a situation where there is an optional parameter 'y' I wouldn't use a property too.
13:39  jorrit: Hory, but there are many situations where that doesn't occur. And there I use a property.
13:39 --- nkts is now known as Marius
13:40  Hory: what do you think about making __getattr__ automatically look for a get_something method when the normal attribute isn't found?
13:40  jorrit: Why would that help?
13:40  Hory: so you define all the get_ methods you want
13:40  tr3x: Hory if you need more than one argument to construct an obj usually you could do something like: obj.something = TypeOfSomething(x, y)
13:40  Hory: and still use them as properties if you want
13:40  jorrit: Hory, for what reason?
13:40  jorrit: Hory, you just implement __getattr__ in your class instead.
13:40  Hory: yes
13:41  Hory: the idea is basically to support getting with multiple parameters and normal inheritance
13:41  Hory: and still be able to use the methods as properties
13:41  jorrit: What's the problem with inheritance exactly?
13:41  Hory: you just define get_name and thanks to __getattr__, obj.name works too
13:42  teratorn: inheritance is evil
13:42  Hory: no major problem, just trying to make the syntax simpler
13:42  tr3x: hory by overriding __getattr__ manually you're basically doing the same thing property does for you. I don't see what's the advantage
13:43  Hory: 1) users don't need to define properties
13:43  teratorn: USE MOAR COMPOSITION http://berniesumption.com/software/inheritance-is-evil-and-must-be-destroyed/
13:43  Hory: 2) you can override accessors normally in derived classes
13:43  jorrit: 2) you can override __getattr__ normally too. I don't see the problem.
13:44  sternocera: Does python have a built-in arbitrary precision arithmetic type?
13:44  jorrit: sternocera, float or integer?
13:44  Hory: jorrit, override it for what purpose?
13:44  tr3x: sternocera integer? yes. long, and ints get automatically promoted to long when they are overflown
13:44  jorrit: <Hory> 2) you can override accessors normally in derived classes
13:44  jorrit: For that reason.
13:44  jorrit: Instead of overriding the accessor you override __getattr__.
13:45  sternocera: tr3x: I want to represent natural numbers
13:45  sternocera: like a numeric type in a database
13:45  jorrit: sternocera, then just normal integers.
13:45  jorrit: sternocera, they can be as big as you want.
13:45  sternocera: jorrit: No they can't....they cannot be fractions
13:45  jorrit: sternocera, you asked for 'natural' numbers.
13:45  jorrit: Natural numbers don't have fractions.
13:46  Hory: jorrit does it seem normal to override a __method__ just to override a particular accessor?
13:46  sternocera: I meant real numbers
13:46  jorrit: Hory, well __method__ is just a method too.
13:47  jorrit: sternocera, look at decimal perhaps.
13:47  jorrit: http://docs.python.org/library/decimal.html
13:49  sternocera: That's what I wanted, thanks
13:49  Hory: OK, last argument jorrit :)
13:49  Hory: by making __getattr__ look for getters dynamically, you reduce the duplication of similar code
13:50  Hory: isn't that one of the most important principles of programming?
13:50  Hory: so you don't need to say @Foo.x.setter  on inherited classes
13:50  jorrit: I think it is clumsy.
13:50  jorrit: But anyway, have to go for a short while.
13:50  Hory: and you don't need @property on the base classes
13:51  Hory: OK
13:51  Hory: take care of CS :)
13:51  Hory: I used to work on PS
13:53 --- Xeross is now known as Xeross|AFK
13:57  cypha: can I import ex1.py so i can work on it in the shell?
13:57  jorrit: cypha: import ex1
13:58  cypha: where must i place it?
13:58  jorrit: Place what?
13:58  cypha: ex1.py
13:58  jorrit: In the python search path.
13:58  cypha: how does it know what directory
13:59  cypha: can i specify the windows directory it's in?
13:59  jorrit: If you set it in the python search path (PYTHONPATH env var)
13:59  kerio: cypha: C:/PythonXY/ should be in the search path
14:00  diegobz: Does anyone ever have to deploy a python app on windows (using py2exe) adding it to the system path (to be able to call it from anywhere)?
14:00  cypha: kerio, so ex1.py should be within c:\python27 to be found?
14:01  jorrit: cypha, no better change PYTHONPATH
14:01  jorrit: cypha, http://docs.python.org/tutorial/modules.html
14:03  cypha: omg jorrit
14:03 --- Sabbie` is now known as Sabbie
14:03  cypha: the most unbelievable thing
14:03  cypha: the link you gave me
14:03  jorrit: cypha, ?
14:03  cypha: and the code in the first example
14:04  cypha: is the EXACT code i was looking to import from ex1.py
14:04  jorrit: cypha, it is the python tutorial. You should already have read it.
14:04  cypha: besides the comments
14:04  cypha: yes, but the tutorial used that exact code in the section i was reading
14:04  cypha: and here they are using it as an example of some code i want to import
14:04  kerio: cypha: pff, this code is much better: http://paste.pound-python.org/show/515/
14:04  cypha: and it IS the EXACT code i want to import
14:05  cypha: don't know what // means and some operators of the def function
14:05  cypha: also didn't know "else" statements can go on the same line
14:06  kerio: that's the trinary operator
14:06  kerio: a if cond else b
14:07  jorrit: cypha, don't confuse it with the else statement. It is different.
14:09  kerio: closures are elegant
14:10  zamba: cnf: have we researched the possibility that each section is xor-ed individually and then xor-ed together afterwards?
14:10  cypha: can i make PYTHONPATH search the desktop?
14:11  kerio: sure, but it's... ugly :(
14:11  cypha: i usually save random files to the desktop
14:11  cypha: for example, if i'm making an example file to just play with
14:11  cnf: zamba: no
14:11  teratorn: cypha: your desktop is a directory like any other
14:12  zamba: cnf: maybe that's the way it's done?
14:12  zamba: cnf: anyway, i'll be playing with a real reader later today, so then i'll at least get confirmed output
14:12  zamba: cnf: will make it easier to debug
14:13  cypha: i placed ex1.py within C:\Python27\Scripts
14:13  cypha: and i cannot import it at the python shell
14:13  pedro3005: is there a function that's the opposite of all()? like none()?
14:13  kerio: ugh, why doesn't emacs color comments by default
14:14  kerio: i don't get it
14:14  teratorn: cypha: the Scripts directory isn't on the module search path, by default
14:14  cypha: i already have c:\python27 in my path variables
14:14  cypha: teratorn, what directory is?
14:14  cypha: i have to keep it in c:\python27 and no subdirectories?
14:15  teratorn: Lib and Lib/site-packages specifically
14:15  xro: hi, i have a problem with configparser...  i would like to pass a list of int [0,0,0] to my script.... how to do it? --> http://dpaste.com/286530/ thanks
14:15  metalfan_: hi
14:16  teratorn: cypha: so either put stuff in Lib/site-packages or set your PYTHONPATH env variable to contain the directory that holds your packages
14:16  cypha: teratorn, looks messy in there. any way i can give it's absolute path in the python shell?
14:17  teratorn: cypha: an absolute path to import? no that's not how Python works
14:18  cnf: zamba: indeed :P
14:18  teratorn: cypha: you can set PYTHONPATH or you can have your main program file (the one you "run" with Python) modify sys.path (but really, just set PYTHONPATH like a good lad and we won't have any troubles)
14:18  zamba: cnf: but not implementing LRC the way it's supposed to be implemented, byte by byte, kind of beats the whole purpose of simplicity and effectivity, if you ask me..
14:19  cnf: yeah, indeed
14:19  zamba: cnf: but again.. they're french.. they have majo on their french fries..
14:19  cypha: k, will do, thanks teratorn
14:19  zamba: i rest my case
14:19  cnf: i do hope we missed something simple
14:19  cnf: hehe
14:19  cnf: french fries aren't french :P
14:20  kerio: zamba: do you know how they call a quarter-pounder with cheese in Paris?
14:20  zamba: kerio: that's pulp fiction, right? :)
14:20  kerio: yup
14:20  cypha: teratorn, i don't have c:\python27\lib in the Path system variable, i only have c:\python27;c:\python27\scripts
14:21  kerio: hmm, closures are elegant but they're a bit limited
14:21  kerio: should i make it a class?
14:22  xro: nobody could take a look to my little problem?
14:22  kerio: xro: that *is* a string
14:23  kerio: convert it into what you want
14:23  xro: kerio, yes... but how to convert it into a list of int?
14:23  kerio: isn't it just a single string?
14:23  kerio: map(int, thatthing)
14:24  kerio: or [int(x) for x in thatthing]
14:24  xro: kerio, great... i didn't know map command.... thanks a lot
14:25  kerio: hmm, a LC there would probably be better
14:25  cypha: so can someone tell me how this import thing works, if i can't import a file that is sitting in a folder specified within Path variables
14:25  cypha: ?
14:26  cousteau`work: is it ok to do   for k in my_dict:   to iterate over the keys of my_dict? or it should be avoided since it could lead to confusion?
14:27  teratorn: cypha: PATH has no bearing on what modules you can import
14:27  cousteau`work: (or   for k in sorted(my_dict):   if I want them sorted)
14:27  kerio: there's no confusion, iterating over a dict gives you keys
14:27  kerio: it's common
14:27  cousteau`work: ok then
14:27  cypha: import ex1
14:27  cypha: searches within any folders in the Path variable
14:27  cypha: right?
14:27  cypha: for a file named ex1
14:27  teratorn: cypha: PYTHONPATH
14:27  cypha: i'm on windows
14:27  teratorn: it is its own thing
14:28  cypha: where can i find it?
14:28  teratorn: cypha: add a new user variable (or system variable) called "PYTHONPATH"
14:28  cypha: where?
14:28  cypha: oh
14:28  cypha: i see
14:29  teratorn: right click My Computer -> properties -> advanced -> somewhere -> somewhere -> Environment Variables
14:29  cypha: so it's separate than Path
14:29  cypha: because for django i had to add c:\Python27;c:\Python27\Scripts to the Path system variable
14:29  teratorn: for reasons unrelated to importing of modules
14:29  cypha: now you're saying to add PYTHONPATH   c:\Python27
14:30  teratorn: did I say that?
14:30  cypha: well, is there anything wrong with that?
14:30  teratorn: I said make it contain the directory that holds your packages
14:30  teratorn: (you should be putting all your modules inside packages)
14:30  Flawless: Hey guys. I'm trying to communicate with a subprocess (using the subprocess module) that talks in UTF-8
14:30  Flawless: I've tried using "stdout = codecs.EncodedFile(proc.stdout, encoding)"
14:31  cypha: are the default "packages" in c:\python27\lib ?
14:31  cypha: and libs
14:31  Flawless: it gives the correct output, but there seems to be some kind of buffering going on, so I only get a bunch of lines when the program has exited
14:31  Flawless: any ideas for how to talk to a program in utf-8 in a clever way?
14:31  kostja_osipov: I want line-buffering enabled for sys.stdin even if stdin is a pipe. It seems for line in iter(sys.stdin.readline, "") concept only works interactively when stdin is a terminal. Is there a nice way to fit it or I should instead use old good while true: line = sys.stdin.readline() for it?
14:32  kerio: for line in sys.stdin:
14:32  kostja_osipov: aka what happens: the iteration blocks until there is a sufficient number of lines in the buffer. I need it to take a line and execute it, not wait for more lines
14:32  kostja_osipov: kerio: this doesn't work at all
14:32  kerio: shame
14:33  kerio: hold on, why not?
14:33  kostja_osipov: i don't know, maybe old python: 2.6.5
14:33  teratorn: cypha: yes the standard library packages an "bare" modules are in Lib
14:33  teratorn: s/an/and/
14:33  teratorn: cypha: 3rd party stuff installs itself in to Lib/site-packages
14:34  kostja_osipov: kerio: web Q&A suggests that in newer pythons for line in sys.stdin is indeed line-buffered.
14:35  cypha: where is sys.path ?
14:35  teratorn: cypha: as a rule you shouldn't ever structure your code as a collection of "bare" modules outside a package. Instead put your modules in a package and use absolute imports e.g. "from mypackage import foo"
14:35  teratorn: where you have a directory "mypackage" containing a (commonly empty) file called __init__.py which signifies that the directory is in fact a python package.
14:36  teratorn: cypha: sys is a module, path is a variable in the sys module
14:36  cypha: there's no __init__.py within C:\Python27\Lib
14:37  teratorn: cypha: correct, it's not a Python package
14:37  cypha: ok, so a package is a collection of modules?
14:37  teratorn: e.g. you don't do "from Lib import sys"
14:37  teratorn: usually related ones, yes
14:37  cypha: gotcha
14:38  teratorn: our children is learning
14:38  cypha: haha
14:38  cypha: oh good, i thought it might have been a no haha zone too
14:38  teratorn: sorry, I had a George Bush moment
14:41 --- eric-atl_ is now known as eric-atl
14:42  cypha: so i can edit sys.py or something?
14:42  cypha: because i'm confused how django is able to import from site-packages
14:43 --- Xeross|AFK is now known as Xeross
14:43  Insolsence: Hey guys
14:43  Insolsence: I have a small problem
14:43  Insolsence: Err.. I used to do php before shifting to python
14:43  Insolsence: now what I am stuck on is
14:43  Insolsence: dynamic function calling
14:43  Insolsence: Say
14:43  Insolsence: I have a class A with methods, a, b and c
14:43  Caribou|: anyone familiar with pyjamas ?
14:43  Insolsence: Now, I want a function to be called EACH and EVERY time I call a, b or c
14:44  Insolsence: I don't want to use decorators
14:44  jpic: hi all, i'm using lxml to parse an xml file with escaped html, how to make lxml *unescape* elements text?
14:44  Insolsence: because there are like 100+ functions
14:45  Flawless: can I create a file object from a known file handle?
14:45  cypha: jpic print """      """"
14:46  cypha: """    """
14:46  Hory: Insolence then maybe you should try applying the decorators through a for loop
14:46  cypha: i had an extra set of quotates in the first one
14:46  Hory: you loop over each class function and decorate it
14:46  Insolsence: Hory, how?
14:46  Insolsence: Isn't there a class function
14:46  Insolsence: like __call__
14:46  Insolsence: but not when the class is called
14:46  cypha: or jpijc, print r"whatever you want"
14:46  Insolsence: when a function is called
14:47  Hory: not really, only for when an attribute is accessed
14:47  Insolsence: then inside that function, I could call the function and then do the stuff
14:47  Insolsence: what I am trying to implement is method chaining
14:47  Insolsence: like self.resize("50%").save("jpse.jpg")
14:47  Insolsence: and I have like 100+ functions
14:48  Hory: as long as they're part of certain classes it's not that big of a deal
14:48  Insolsence: How do I go bout it then?
14:48  Insolsence: I don't want to return self everytime
14:48  Insolsence: any alternative?
14:49  Juhaz: clearly you do, because any alternative is so horrific even thinking about it causes cthulhu to become an inch closer to waking up
14:49  Insolsence: hmm
14:49  Insolsence: so return self in every function then?
14:49  Insolsence: for chaining to work..
14:50  Juhaz: changing return values without making it obvious is just wrong, so yes.
14:51  Hory: if that's all you want to do, decorators just complicate everything
14:51 * amitz must read about python more...
14:52  engla: Insolsence, write an explicit return self  everywhere
14:52  Insolsence: Okay.. thank you!
14:53  ahri: if i have a utf-8 encoded string, what's the best way to determine its length in bytes?
14:54  plundra: If it's encoded, then len()
14:55  Flawless: ahri: if it's a byte string, then len(). If it's a unicode string, then len(x.encode('utf-8'))
14:55  Juhaz: if it's unicode string, then it's clearly not "utf-8 encoded string"
14:55  Flawless: Juhaz: well no, but you'd be surprised how many times unicode is misunderstood :)
14:55  Insolsence: Okay so then another similar problem
14:55  Flawless: Juhaz: just trying to make sure
14:56  Insolsence: I have like 50+ functions
14:56  cypha: teratorn, so I give PYTHONPATH   C:\Python27\lib ... or where does yours point to?
14:56  Insolsence: they're in pairs
14:56  Insolsence: say one is duration()
14:56  Insolsence: other is unset_duration
14:56  Insolsence: all the unset_ functions do the same thing
14:56  Insolsence: any way to get the function call and process it in 1 function?
14:56  Insolsence: in 3 classes
14:56  Insolsence: extending from a main class
14:57  TheSheep: Insolsence: why do you have 50 functions that do the same thing?
14:57  ahri: Flawless: thanks, it is a utf-8 encoded string ;)
14:58  Insolsence: err its actually an old code.. wffmpeg
14:58  TheSheep: Insolsence: what is that thing they do?
14:58  Insolsence: I'm re-writing it for my project
14:58  ahri: i just wasn't sure how clever len would try to be
14:58  Insolsence: they just do this- del self.__effects__["fs"]
14:58  Insolsence: and so on and on
14:58  cypha: what have you guys given PYTHONPATH as a value?
14:59  impulze: hm when passing a result from os.urandom() to Popen i get a: "TypeError: execv() arg 2 must contain only strings"
14:59  impulze: any ideas why?
--- Log closed Tue Dec 14 15:03:14 2010
--- Log opened Tue Dec 14 15:13:39 2010
15:13 --- Users 726 nicks [0 ops, 0 halfops, 0 voices, 726 normal]
15:13  Insolsence: something like __setproperty__
15:13  TheSheep: Insolsence: __setattr__
15:13  Insolsence: ah kk :)
15:13  Insolsence: tyvm
15:14  Insolsence: No I don't need to keep it
15:14  Insolsence: but re-writing it would be a waste of time I guess
15:14  Insolsence: any ideas on how to improve it?
15:14  Insolsence: another point is that I want chaining
15:14  Alberth: Insolsence: no, it is a waste of time to have to maintain it
15:14  TheSheep: Insolsence: or even nicer, just YourObject.set('vsync', True)
15:14  Dynetrekk: I am trying to install h5py. what is the problem? http://paste.pocoo.org/show/304737/
15:15  Alberth: perlsyntax: no idea what wingware is.
15:15 --- Channel #python was synced in 127 seconds
15:15  perlsyntax: it a python IDE
15:16  Insolsence: TheSheep: I have a hack in mind for what I need
15:16  Insolsence: no that won't work.. leave it :P
15:17  Insolsence: you know all I need is something which gets called on every function call (existent or non-existent function)
15:17  Insolsence: 1 of its args is the function name
15:17  Insolsence: that's the only thing I need to do the trick
15:18 --- FlaPer87_ is now known as FlaPer87
15:18  reagle: I once used a function that helped me convert a convoluted system call into nicely formatted arguments to subprocess.popen(). Anyone recall the name?
15:19  TheSheep: Insolsence: a decorator?
15:19  Insolsence: TheSheep: can't be used for non-existent functions
15:19  TheSheep: Insolsence: __getattr__ gets run on attribute access, not only function call
15:20  Insolsence: __getattr__ so that gets called on function calls too?
15:20  TheSheep: Insolsence: it gets called whenever you write foo.bar
15:20  TheSheep: to get the bar
15:20  Insolsence: nah
15:20  Insolsence: something which gets called on foo.bar()
15:20  reagle: e.g., arguments =  make_this_nice('''VirtualBox -startvm urd-xp & sleep 4; sudo renice -n -5 `ps -eL | g VirtualBox | awk '{print $2}'`''')
15:20  TheSheep: you can return your own function then as bar
15:20  Insolsence: AH!
15:20  TheSheep: or wrap the original function ins a decorator then and return it
15:21  Insolsence: so then in __getattr__
15:21  Insolsence: I return the function
15:21  Insolsence: then do ()
15:21  Insolsence: it should work, am I right?
15:21  TheSheep: just make sure you don't do it for other attributes that are needed
15:21  TheSheep: best skip anything that starts with _
15:21  TheSheep: or even just have a list of attributes for which you do it
15:22  Insolsence: yeah list would be perfec
15:22  Insolsence: perfect
15:22  tpratt: __getattr__ only gets called if the name doesn't exist, right?
15:22  Insolsence: thank you very much!
15:22  TheSheep: tpratt: I can't remember, but that's possible
15:22  TheSheep: tpratt: I know there was a difference between getattr and setattr in this regard
15:22  kerio: tpratt: __getattribute__ is the real one
15:22  kerio: it calls __getattr__ if it can't find stuff in __dict__ or __slots__
15:23  tpratt: kerio, right, so Insolence doesn't need to worry about "hiding" real attributes
15:23  TheSheep: Insolsence: be aware that it's still smelly
15:23  Insolsence: Hmm
15:23  Insolsence: Any better way to get it done then?
15:23  TheSheep: Insolsence: I mean, geattr hacks
15:23  TheSheep: Insolsence: yes, foo.settings['vsync'] = True
15:23  Insolsence: not chainable :P
15:24  TheSheep: Insolsence: or foo.set('vsync', True)
15:24  Insolsence: I think I'll go with getattr hack.. thanks for the tips though TheSheep; highly appreciated!
15:24  TheSheep: have fun :)
15:25  kerio: why the hell is "chainable" a good thing
15:25  aj-dneg: tempfile.NamedTemporaryFile deletes the file on close() --- i want it to delete on with-statement exit instead as that's more useful -- do i have to just subclass it or is there some trick?
15:25  TheSheep: Insolsence: btw, maybe test it on some sample script first
15:25  TheSheep: Insolsence: easier to debug that way
15:25  Insolsence: yeah thats what am doing
15:25  Insolsence: python console
15:25  TheSheep: aj-dneg: doesn't with statement just do close9) at the end?
15:26  aj-dneg: TheSheep: yes but i need to close() my file first so that the contents have been written and can be read by another process - i don\t want the delete to happen at this point!
15:26  nosklo: aj-dneg: with-statement closes
15:27  nosklo: aj-dneg: then you'd have to write your own context manager
15:27  aj-dneg: nosklo: ok, done. just kinda surprised this isn't catered for... maybe i should cook a patch :)
15:27  TheSheep: aj-dneg: can't you just flush()?
15:27  sllide: is it possible to write files in binary?
15:28  sllide: i mean, really write bit for bit
15:28  aj-dneg: TheSheep: possibly -- but I do actually want to just close the file -- i'm done with it.
15:28  TheSheep: sllide: see the struct module
15:28  TheSheep: aj-dneg: it shouldn't matter, at least if it's not Windows
15:30  Sabbie: Anyone know of a mirror for install PIL? Since pythonware.com and effbot.org appear to be down..
15:30  Insolsence: Okay thanks, its working TheSheep!!
15:30  Insolsence: :D
15:31  sllide: TheSheep: so if i want to write a 01 to a file i would use: out.write(struct.pack('?',0,1)) ?
15:31  nosklo: aj-dneg: http://bpaste.net/show/12249/
15:31  aj-dneg: bah -- the things that look like classes in tempfile aren't actually classes :(
15:32  TheSheep: sllide: you annot write a 1/4 of byte
15:32  TheSheep: cannot*
15:32  nosklo: aj-dneg: that's a good thing -- or you would be tempted to use subclassing
15:32  sllide: hmm
15:32  aj-dneg: nosklo: that's what i was going for, except i thought TemporaryFile was a class that implemented __exit__ rather than a function returning a tempfile._TemporaryFileWrapper!
15:32  sllide: damn
15:33  aj-dneg: nosklo: what's wrong with subclassing -- this is what i tried? http://bpaste.net/show/12250/
15:34  lvh: aj-dneg: bpaste is down
15:34  nosklo: aj-dneg: "what's wrong with subclassing" is a great question, unfortunately I have to run and can't ellaborate much right now. Basically, it sucks
15:34  lvh: aj-dneg: portability and predictability of behavior
15:34  nosklo: be back later
15:34  aj-dneg: hah, mind blown
15:35 --- sav is now known as s4v
15:35  lvh: aj-dneg: What are you subclassing?
15:38  lvh: aj-dneg: Here's a practical example
15:39  lvh: aj-dneg: I subclass dict and implement __getitem__
15:39  sllide: TheSheep: how can i let it write 1 byte then?
15:39  lvh: aj-dneg: I use iterkeys and itervalues. What happens?
15:42  kerio: lvh: your computer blows up
15:42  kerio: also dicts are particular in that regard
15:43  lvh: kerio: You have a strange definition of "particular"
15:43  aj-dneg: lvh: if you only implement __getitem__ then you probably shouldn't be subclassing dict...
15:43  lvh: defaultdict: problem y/n
15:43  kerio: how's defaultdict implemented?
15:44  lvh: kerio: Well, consideirng you're saying they're apparently particular, I'm asking you
15:44  lvh: I'm pretty convinced they're not particular at all
15:44  jorn: hey all, how would i truncate unicode string so that it has a maxlength in utf-8 encoding?
15:44  lvh: The vast majority of builtin types does this
15:45  lvh: In fact, I can't even think of a counterexample, so let's go with "all of them"
15:45  lvh: aj-dneg: You shouldn't be subclassing dict at all
15:45  lvh: aj-dneg: Ever
15:46  Hory: that's ridiculous
15:46  jorn: unicode("mystr".encode("utf-8")[:maxlength], "utf-8", errors="replace") ?
15:46  Hory: you should reimplement your own dict for a 10% change?
15:46  kerio: Hory: composition
15:46  lvh: Hory: No, you should compose a dictionary.
15:46  Hory: why?
15:46  lvh: And expose the behavior you want to expose using known semantics
15:46  Alberth: jorn: while encoded-length > max : drop last codepoint ?
15:46  jorn: unicode("mystr".encode("utf-8")[:maxlength], "utf-8", errors="ignore") ?
15:46  lvh: Hory: class MyDict(dict): def __getitem__(self, e): whatever
15:46  Hory: I want to expose all of the behavior because I want it to be a dict replacement
15:46  lvh: Hory: keys, iterkeys, values, itervalues, items, iteritems
15:47  Alberth: jorn: with bisection, you get it quicker
15:47  jorn: Alberth: codepoint mans a unicode char?
15:47  lvh: Hory: Which one of these use your changed getitem
15:47  metalfan_: is this:  os.chdir('tmserverdata/aseco')         the same as:  cd tmserverdata/aseco ?
15:47  kerio: Hory: it's a trick question!
15:47  jorn: Alberth: well, still sounds terribly inefficient ;)
15:47  jorn: O(log(n)) vs O(1)
15:47  Alberth: jorn: yes
15:47  Hory: I don't know
15:47  lvh: Hory: And that is *EXACTLY* why you shouldn't subclass dict.
15:48  lvh: Hory: Because you don't have a clue what behavior you'll get and what behavior you will get.
15:48  lvh: Hory: And it changes across interpreters, because it's undefined.
15:48  lvh: Don't do it.
15:48  kerio: lvh: well, subclassing something usually means you *know* exactly how it works
15:48  AlexMax: lvh: Could it run nethack, like that one version of gcc?
15:49  lvh: AlexMax: Maybe!
15:49  lvh: Hory: Furthermore, there is a more general software engineering argument.
15:49  lvh: Hory: Very few contracts explicitly define non-behavior, mostly because it's impossible
15:50  lvh: Nobody said "compilers must *not* run nethack when encountering this crazy bit of code".
15:50  Hory: what non-behavior?
15:50  lvh: Hory: Yes, exactly!
15:50 --- Xeross is now known as Xeross|AFK
15:50  lvh: Hory: This is a real problem: consider what happened to nose and trial when unittest in the stdlib, which the TestCase classes of both subclass, suddenly grew skipping functionality.
15:50  lvh: Hory: Nowhere in the contract does it say "I will never define an attribute named skip"
15:51  Hory: lvh, I don't know all of the inner workings of "object" either yet I subclass all the time
15:51  lvh: Hory: Until of course someone does, and skip works differently in unittest and trial and nose, so then suddenly everything dies.
15:54  lvh: Hory: That's different: object is explicitly designed to be subclassed.
15:54  kerio: lvh: so why isn't dict designed to be subclassed? :)
15:54  Hory: why isn't dict designed not to be subclassed
15:54  Hory: if it is as you say, it shouldn't let you :)
15:54  lvh: Hory: Furthermore, the semantics for what happens when you subclass object are formally defined.
15:54  Hory: since no one ever should subclass it
15:54  lvh: Hory: Because there are people who occasionally might
15:54  engla: kerio, use composition instead :-)
15:54  lvh: However, those people aren't listening to me right now, because they *KNOW* how dict subclassing works
15:54  lvh: And there are certain cases where you don't have much of a choice
15:54  lvh: Such as broken code that does instance checks
15:54  lvh: Hory: However, in new code where you don't have to code around someone elses mistakes, there's no good reason to subclass dict
15:54  lvh: Because of the undefined behavior I've been talking about
15:54  illsci: i had a question about optparse ( i know about argparse, I'm using optparse ).  If you have an option like -q --query and you want to query by name or query by uuid would you have -qn and -qu or some other way of doing that
15:54  Hory: you could base a DirectedGraph on a dict
15:54  lvh: (FWIW, this behavior *DOES* change between CPython, Pypy, IronPython and Jython)
15:54  illsci: can you have two letters together as one option I guess is my question
15:54  lvh: Hory: Sure, I'm not saying "don't use dicts", dicts are great
15:54  lvh: I'm saying don't subclass types that don't have explicit subclassing semantics in their contract
15:54  lvh: Which is almost every type out there except object and Interface
15:55  lvh: If you don't believe *me*, here's Maciej talking about it: http://pycon.blip.tv/file/3261260/
15:55  lvh: (Slide 9 of 18)
15:55  lvh: http://codespeak.net/svn/pypy/extradoc/talk/pycon2010/crossinterp/talk.pdf
15:55  lvh: That's the slides
15:56  lvh: Hory: The fundamental software design argument is this: my contracts very rarely say anything about implementation
15:56  lvh: Hory: Practical example: classdecs are new in 2.6
15:56  lvh: There's a bunch of stuff you'd previously use metaclasses for that can now be done using classdecs
15:57  lvh: Except of course, that changes subclassing behavior!
15:57  lvh: (Bonus points if you can figure out how)
15:57  lvh: Contracts are typically defined in terms of what you get, not in terms of what you don't get.
15:57  lvh: (Cases in point: TestCase, newly introduced metaclasses, removed metaclasses...)
15:58  Hory: OK i've viewed that slide
15:58  Hory: not much of an argument
15:58  Hory: on his side
15:58  Alberth: Hory: how is a directed graph a dict?
15:58  lvh: My rule of thumb (which still allows for mixins) is simple: subclassing is fine as long as you don't actually use each other's private behavior
15:59  lvh: Unfortunately, that assumes two things: a) private behavior is defined b) private behavior never changes
15:59  Hory: Alberth: the same way a point can be a tuple
15:59  Hory: http://www.python.org/doc/essays/graphs/
15:59  lvh: Anyone who has maintained software for a significant amount of time can tell you that
15:59  mar77i: how do I handle an "in" case within __getitem__? __getitem__(self): if not key in self.data: return False seems to run forever...
16:00  lvh: Hory: Note: no subclassing
16:00  mar77i: same with none, using python3 here
16:00  lvh: Hory: I'm not sure how you can listen to the talk and look at the slide and conclude there's no argument
16:00  lvh: Hory: He's basically literally asking people: okay, let's say we do what you suggest and subclass dict
16:00  lvh: Hory: Now I do X. How does your type behave
16:00  Alberth: mar77i: 'in' uses __contains__
16:01  lvh: Hory: The problem is that then your type is defined by implementation, and it quite often will simply not work on other interpreters
16:01  eazyigz: I am trying to lay to rest this "There should be one - and preferably only one - obvious way of doing" principle
16:01  lvh: Typically not producing useful error messages either
16:01  mar77i: there is no __contains__ in my class
16:01  lvh: In fact, in the case of this dict example, it will silently fail.
16:01  eazyigz: In Python there are so many ways of working with lists and list-like data structures
16:01  eazyigz: You got list comprehensions, maps, lambda expressions, etc.
16:01  mar77i: uh, of course
16:01  eazyigz: How is that "one way of doing"?
16:01  tpratt: lvh: your rule of thumb is ok but you still have to know/avoid eachother's private attribute names.
16:02  Alberth: mar77i: oh, that 'in'. self.data uses __getitem__
16:02  lvh: Hory: Now, you could write *tests* that verify that. However, a) the tests are pretty complex and difficult to get right b) the tests don't actually fix the problem -- your code is still fundamentally broken on anything that isn't a particular interpreter, and a particular *incarnation* of it at that
16:02  lvh: tpratt: Right -- that's part of what I mean by "don't use each others private API" -- but that's a deeper argument regarding if what you don't define is private API or not
16:03  lvh: tpratt: It's definitely a gray area, for example in the case of TestCase there's no obvious culprit
16:03  Hory: lvh: I'm very open to arguments because I'm a perfectionist and I want to implement good code but I seriously fail to see any solid arguments
16:03  mar77i: Alberth: however, it works by redirecting __contains__ to the data dict.
16:03  lvh: tpratt: But a bunch of well-written mixins such as FancyEqMixin and FancyHashMixin are too good to pass up
16:04  lvh: Hory: You don't think "Your code silently fails on different interpreters and uses implementation details of a particular interpreter which have changed in the past and are likely to change in the future" is a good argument?
16:04  mar77i: 16:02 < Alberth> mar77i: oh, that 'in'. self.data uses __getitem__ << what are you referring to here?
16:04  Alberth: Hory: I disagree, a directed graph is a collection of nodes and edges, a dict is a mapping of X things to Y things.  Note the lack of any 'mapping' in the graph description.
16:04  Alberth: mar77i:  if not key in self.data: return False  <-- this
16:05  Hory: a dict can be used to represent an adjacency list effeciently, which is one of the representations for graphs
16:05  mar77i: that's where it's running forever. nvm
16:05  Hory: notice that guido said graph = {A: ....
16:05  kerio: lvh: on the other hand, defaultdict works fine
16:05  Alberth: Hory: but subclassing is stronger, it is not 'a representation', it is the same thing then
16:06  Hory: it's not the same thing, it's a thing with the same methods and more
16:06  lvh: Hory: I asked you a simple question about what a trivial class that subclasses dict and only reimplements a single method (__getitem__) and asked you which methods which you inherited from dict work correctly (using the new __getitem__ or not using it)
16:06  lvh: Hory: And you coudln't answer it
16:06  sherl0ck: can i initalize a class, from only knowing the name in python? dynamiclly create
16:07  lvh: Hory: It seems like a strong argument to me that if you write a sub-10 line class and you can not instantly tell what it does anymore, that means you shouldn't be doing it
16:07  Hory: lvh I don't know because I haven't tested all of them
16:07  Hory: I don't use all of them
16:07  lvh: Hory: Especially when *what that does* changes according to interpreters
16:07  lvh: Hory: So why expose them as public API?
16:07  lvh: You are exposing public API that you don't even know works
16:07  Hory: because they may be useful
16:07  lvh: Except we know they're not
16:07  Hory: say you want to iterate over a graph's elements
16:08  lvh: They silently fail on certain interpreters who took undefined behavior to mean something else
16:08  Hory: lvh: I assume they all work, I just didn't test them
16:08  lvh: Hory: BUT THEY DONT
16:08  lvh: That's my entire point
16:08  lvh: It's not a matter of "test them"
16:08  Hory: I asked you
16:08  lvh: They simply do not work consistently across interpreters
16:08  Hory: what undefined behavior?
16:08  lvh: They work on ONE interpreter
16:09  lvh: Hory: Okay. So, you subclass a dict and you define __getitem__
16:09  lvh: Hory: That means you inherit dict's internal hash table, right?
16:09  Hory: yes
16:09  lvh: Hory: Okay, so iteritems.
16:09  lvh: Hory: Do I get things as accessed through your __getitem__, or do I get the dict's internal state?
16:09  Hory: I don't know
16:09  Hory: I haven't overwritten getitem
16:10  dropdrive: Has anyone here used the IPython Qt console thing?
16:10  Hory: I just added methods
16:10  Hory: it makes no difference to me
16:10  lvh: Hory: Excellent! So don't do that either.
16:10  ccxCZ: dropdrive: using qt from ipython worksforme
16:10  lvh: Hory: Here's why: dict does not define all the behavior it will never implement.
16:10  lvh: Hory: Practical example, back when there was no such thing as iteritems, lazy dicts.
16:10  Hory: lvh I get this point
16:11  Hory: but it's kind of a far removed "fear" to have
16:11  lvh: Hory: Oh, but suddenly dicts grew some extra behavior and your thing stops working entirely.
16:11  Hory: I might as well fear that one of dict's methods might get deprecated
16:11  mar77i: Alberth: here a test case: http://paste.pocoo.org/show/304760/
16:11  Hory: and stop using dicts all together
16:11  lvh: Hory: No, deprecation is a well documented process
16:11  kang: can someone explain me this behavior? http://paste.pound-python.org/show/522/ rcv is supposed to return str.. but returns bytes with a str inside instead (i'd like bytes with bytes inside or str with str inside..)
16:11  lvh: Furthermore, deprecation never fails silently.
16:12  Hory: lvh: if I subclass dict I override its methods anyway
16:12  Hory: new methods won't ruin my code
16:12  Hory: supposing it gets some
16:12  kerio: then why subclass dict
16:13  Hory: because I want my class to have all of the functionality SO FAR that dicts have
16:13  lvh: Hory: Then why subclass at all? Expose the internal dictionary as public API, and defer every API problem completely
16:13  Hory: without creating another layer which does nothing but pass messages around
16:13  lvh: Hory: yourObject.internalDict
16:13  lvh: Tadaa, all behavior.
16:13  lvh: Well, not quite
16:14  lvh: If you're only adding methods, then you're not creating an extra layer at all
16:14  Hory: I know
16:14  lvh: You'd just replace everywhere you say "self" with "self.internalDict"
16:14  Hory: I don't want to create a layer
16:14  mar77i: Alberth: if you comment lines 8 and 10 out, it'll break with a keyerror.
16:14  lvh: Hory: Yes, I'm saying you're not *creating* a layer
16:14  Hory: so then I have to keep looking up my object's attributes
16:14  ccxCZ: what's the number one rule of OOP? :o)
16:15  Hory: and typing more to navigate the namespace
16:15  lvh: Hory: And
16:15  Alberth: Hory: d = DirectedGraph()  d['A'] = 3   ?   <--  ie ALL functionality!
16:15  Hory: for no different functionality
16:15  TheSheep: ccxCZ: "you are doing it worng"
16:15  lvh: Hory: That's not true
16:15  lvh: Hory: dict is no longer in your __mro__
16:15 --- s4v is now known as sav
16:15  lvh: You have significantly different functionality
16:15  lvh: That's maciej's point
16:16  Hory: well maybe I have to look at the entire presentation
16:16  lvh: (And you get free performance improvements on Pypy, too)
16:16  TheSheep: ccxCZ: OOP is not really a single methodology, it's a buzzword and ever person saying it has something else on their mind
16:16  kerio: i like free performance!
16:16  lvh: (And minor performance improvements on CPython)
16:16 * TheSheep preforms a magic trick
16:16  TheSheep: I will make this here peanut disappear
16:16  TheSheep: omnomnom
16:17  TheSheep: tada!
16:17  lvh: Hory: Or, you know, talk to people implementing interpreters
16:17  lvh: Hory: Like me!
16:17  Hory: but right after that slide he says that making a library compatible with all python implementations isn't straightforward
16:17  mar77i: you've just deleted the world's most magic peanut.
16:17  Hory: lvh maybe implement interpreters which act consistently :)
16:17  ccxCZ: TheSheep: peanut.disappear() or disappear(peanut) ? :o)
16:18  lvh: Hory: The slide after that talks about bindings to extensions
16:18  lvh: Hory: Which is completely unrelated to the problem we were talking about
16:18  lvh: Hory: ... Maybe you shouldn't tell me how to do my job until you know what you're talking about
16:18  lvh: Hory: "Consistently" in this case means "copy implementation details"
16:18  lvh: Which in this case means that Python will NEVER grow a modern garbage collector, for example
16:18  TheSheep: ccxCZ: Deasappearer(PeanutFactory().make_peanut()).disapear()
16:18  lvh: Oh, and method calls? Yeah, no, those are always going to be slow
16:18  Hory: he says "there's no good story for writing 3rd party extensions for all python implementations"
16:19  lvh: Hory: Yes. Extensions.
16:19  lvh: Hory: You know, not-python
16:19  lvh: Hory: That doesn't have anything to do with what we're discussing here
16:19  lvh: He's not talking about python code
16:19  lvh: He's talking about interfacing with C code
16:19  Hory: oh
16:19  jpic: cypha: i don't understand
16:19  jpic: oh hi lvh, finnaly i got rid of the bloat and it's running only upon lxml now ;)
16:19  lvh: Hory: Suggesting that people should implement interpreters which act "consistently" is just ridiculous
16:20  jpic: although i've got the same problem as yesterday heh...
16:20  Hory: consistently at the level of basic types?
16:20  kerio: lvh: so you don't like my AwesoemDict?
16:20  kerio: :(
16:20  lvh: Hory: Yes!
16:20  lvh: Hory: Just because CPython does it one way doesn't mean that's the One True Way
16:20  lvh: Hory: Whenever something isn't defined in the language, they just did whatever was easy or fast
16:21  lvh: Not because it's good
16:21  Hory: it means that a dict's methods should always do the same thing
16:21  lvh: The choices made to do something in CPython might be completely invalid in Pypy
16:22  lvh: Hory: Well, actually I could live with that
16:22  lvh: In that case, it'd break all the code that subclassed dict and abused that behavior soon in the py3k branch :-)
16:22  Hory: OK, if another implementations makes some things work differently then I won't subclass dict, but that doesn't make the semantics of subclassing dict wrong
16:22  lvh: ("soon" probably being post-3.2 though)
16:23  lvh: Hory: how can semantics be wrong
16:23  lvh: They're just undefined
16:23  lvh: There is no "right"
16:23  lvh: That's the entire point
16:23  lvh: Anyone who does anything is always okay because there is no such thing as "correct"
16:24  lvh: And like I said, defining correct as "CPython" is just ridiculous because that formally means we'll never grow a different garbage collector, for example
16:24  lvh: Which essentially means that you'll never get an implementation worth using on the JVM or on the CLR
16:24  lvh: Or, Pypy, even
16:24  nosklo: back
16:25  lvh: Because it turns out CPython's refcounter allows self-ressurecting objects!
16:25  nosklo: oh, I see lvh already convinced you all of not subclassing
16:25  nosklo: thanks lvh you saved me lots of typing
16:25  lvh: nosklo: It's an interesting read, you should do it again ;-)
16:25  Spamicles: I can't find this in the python tutorial. How do I get the first word from a line in a file? for line in file; print line[0] gives the first letter, not the first word. the words are of varying sizes so I can't just do print line[:5].
16:25  nosklo: you can treat cpython as "correct". Just don't use anything else anymore and stick your project to cpython
16:25  Hory: I was
16:26  lvh: Hory: Except of course *no other reasonable gc developed in the last 20 years that isn't mark and sweep* allows that behavior
16:26  nosklo: but it is not very good for your project
16:26  lvh: So if you define CPython as correct, we're always going to have a refcounting GC.
16:26  lvh: Yaaay!
16:26  lvh: Actually, mark and sweep is more than 20 years old so I don't even have to add the exception ;-)
16:26  Hory: I didn't really define it as correct, I just expect that it implements the "map" data structure correctly
16:26  lvh: Hory: It does
16:27  Hory: I like refcounting GC because it's easy to understand :P
16:27  lvh: Hory: There is not a single thing incorrect about how these different implementations implement dict
16:27  nosklo: it first defines what is "correctly" for it. Then it implements the map data structure accoding to its own definition
16:27  kerio: Spamicles: strings don't really know of "words"
16:27  kerio: you can split strings with their .split() method
16:27  kerio: help(str.split) for additional information
16:27  lvh: Hory: It was however, considered that hash tables are things upon which much development is possible, and that many different hash tables exist with different semantics, none superior to the other
16:28  kerio: lvh: self-resurrecting objects?
16:28  Hory: that's where they're mistaken :)
16:28  lvh: Hory: So it would have been ridiculous to say "oh okay, chaining and a prime probe, that's the only way dicts should ever work"
16:28  lvh: Because that'd mean that you'd have to reimplement HashMap on the JVM
16:29  lvh: Despite the fact that already has perfectly well known semantics already reimplemented 20 times.
16:29  Hory: so yes, I guess iteritems and so on should use getitem, because they access items, it's not "itercacheditems"
16:29  lvh: Hory: Congratulations, you just made CPython about three times slower than it is now
16:29  lvh: Hory: By introducing two new function calls on every dict access
16:30  Hory: no, I made it consistent
16:30  Hory: implement an itercache if you want that
16:30  Hory: or something similar
16:30  lvh: Hory: But you can already implement those
16:30  lvh: And it'd be faster too
16:30  lvh: (by composing a dict)
16:31  lvh: Furthermore, you've just imposed your consistency rules on IronPython and Jython, I'm sure Hugunin will be really glad to hear what you have to say about function call overhead not being important because you want to subclass dict
16:31  Hory: and that doesn't make working with a dict slower?
16:31  Hory: since you have to go through another layer
16:31  lvh: Hory: What? Which layer?
16:31  Hory: the composite object layer
16:32  lvh: Hory: ... You do realise that exact same layer is present when you subclass dict, right?
16:32  lvh: Hory: dict is implemented in C -- it does not have the same access semantics as your custom type subclassing it.
16:32  Hory: I don't do attribute lookup when I access self
16:32  lvh: Hory: Except, of course, you do.
16:32  kerio: Hory: yes you... do
16:32  lvh: Hory: Okay, sorry, I'm going to do something else
16:32  psykidellic: Howdy? Long time since I was here...
16:32  Hory: self is one step removed from self.mydict
16:32  lvh: You are *way* out of your depth here
16:32  lvh: Hory: No, it is not
16:32  kerio: self.foo -> type(self).__getattr__(self, "foo")
16:33  kerio: or something
16:33  lvh: Hory: Your custom type's implemented attributes do not live in the same place as your parent's (dict's)
16:34  lvh: Hory: What you were saying would be correct, if dict was an ordinary
16:34  lvh: Python class.
16:34  lvh: Except of course, it isn't.
16:34  lvh: Perhaps you could suggest that we make it consistent by implementing it in Python!
16:35  Hory: bottom line: if you were to benchmark operation in a dict in composition and a subclassed dict, wouldn't subclassed be faster?
16:35  kerio: lvh: that would make pypy so much faster than cpython
16:35  lvh: kerio: hahahahhahahahahahaha
16:35  lvh: Oh wow
16:35  lvh: kerio: You win
16:35  kerio: thanks
16:36  Hory: lvh: I suggest that developers agree on what built in data structures' methods do before they do new implementations
16:36  Hory: seems reasonable
16:36  engla: don't mock consistency
16:37  hkBst: I'm trying to create a source distribution, running "python setup.py sdist". Everything seems to work fine, except no tarballs are created... http://paste.pocoo.org/show/304772/
16:37  Hory: and I'm not saying that pypy should work like python (if anything, the other way around)
16:37  lvh: Hory: We did, there is plenty of defined behavior on dicts
16:38  crashanddie_: if I define a variable right under class Foo, does that make it a class property? Rather than an object property?
16:38  lvh: Hory: But I've already said multiple times: when your choices are guided by what's easy in your particular case, you are effectively screwing over everything else
16:38  ccxCZ: crashanddie_: yes
16:38  crashanddie_: ccxCZ, so an object property would be defined by?
16:38  crashanddie_: self.whatever, upon usage?
16:38  ccxCZ: crashanddie_: in self.__init__ usually
16:38  crashanddie_: ok
16:38  crashanddie_: thanks
16:39  ccxCZ: s/self.//
16:39  lvh: Hory: Furthermore, implementations change
16:39  kerio: lvh: he could also use the internalDict's bound methods
16:39  lvh: Hory: If you decide that every detail about how dicts work become the definition, that means you can never actually change anything about it
16:40  lvh: Hory: Which in the case of dict would be pretty hilariously stupid, since dicts have been optimized extensively
16:40  lvh: (In fact, CPython's dicts are probably the hash table to study if you're looking for one)
16:40  lvh: Hory: A practical example: if we did what you suggested and codified all that behavior, we could never have done the 2.2 type unification.
16:41  lvh: That's completely ridiculous, you're killing off all possible progress before it's even had a chance to prove itself
16:41  Kzim: hi
16:41  Kzim: i try to install lxml on mac but i have rror Python headers needed to compile C extensions, please install development version of Python. anyidea ? :(
16:41  lvh: Another very pragmatic example is GC behavior
16:42  Hory: I'm killing progress because I'm asking developers to decide what an "item" is and what "iterating over items" should do?
16:42  lvh: If you want to define that __del__ gets called multiple times for self-ressurecting objects as formal behavior
16:42  kerio: what are self-resurrecting objects?
16:43  lvh: kerio: l = []; class Zombie(object): def __del__(self): l.append(self)
16:43  kerio: oh, i see
16:43  kerio: heh, it's brilliant
16:43  lvh: kerio: refcount reaches zero, __del__ gets called, incref, l.append, incref, __del__ exits, decref
16:43  lvh: kerio: refcount is 1, object does not get collected.
16:43  kerio: what would pypy do in that case?
16:43  lvh: kerio: Tell you to go die in a fire
16:44  kerio: that's good
16:44  Hory: delete the script file :)
16:44  Hory: it has to be done
16:44  lvh: Hory: iteration over items is exactly defined for dicts
16:45  lvh: Hory: The only undefined behavior is what happens when you subclass it
16:45 --- josemaria is now known as nodie
16:45  lvh: Hory: This is exactly why pre type unification you couldn't even do it
16:45  lvh: If you did, you'd just raise an exception
16:46  nodie: do you have problems getting python packages from effbot.org today?
16:46  nodie: I'm trying to install some packages with both, easy_install and pip, and they can't find them
16:46  lvh: Hory: But yes, if you define that items/iteritems should only work through using keys/iterkeys and then __getitem__ on each, that basically means that you have a ridiculously slow dict
16:46  Hory: I agree
16:47  cwillu_at_work: I can imagine a jit handling that reasonably well
16:47  lvh: cwillu_at_work: A cross Python-C jit?
16:47  Hory: but then dict should make it clear that __getitem__ is never called and there wouldn't be an issue across implementations
16:48  lvh: Hory: Hindsight's 20/20
16:48  cwillu_at_work: shouldn't it also be made clear that print "make me a sandwich" will not, in fact, make me a delicious ham sandwich?
16:49  jorrit: cwillu_at_work, it doesn't!
16:49  lvh: That's impossible to generalize, you're making observations of how code happened post facto that couldn't possibly ever be made up front
16:49  jorrit: cwillu_at_work, how disappointing.
16:49  lvh: Hory: Furthermore, you are defining negatives
16:49  lvh: Hory: It won't fire missiles or play nethack either
16:49  lvh: Let's document that
16:49 * cwillu_at_work writes a non-conforming python interpreter
16:49  Hory: yes, clearly expecting that printed commands materialize is the same thing
16:49  kerio: lvh: huh? it will definetely play nethack if you make it do so
16:49  lvh: Hory: Obviously it's a hyperbole but the point is the same
16:49  cwillu_at_work: kerio, he's referring to my lack of a sandwhich
16:50  Hory: lvh: no one expects it to play nethack
16:50  Hory: but getitem in a method which contains "item" is perfectly reasonable
16:50  lvh: Hory: You're asking people to define behavior in terms of negatives for no reason other than "It was slow back when we did type unification"
16:50  Buttons840: what about make('a delicious ham sandwich')?
16:50  cwillu_at_work: ENOMUSTARD
16:50  kerio: Buttons840: NameError
16:50  lvh: Hory: Never mind the fact that Pypy could actually make it fast
16:50  sternocera: Hi. With Python regex, how can I find if a string contains kg followed by and preceeded by anything but a letter?
16:51  lvh: Hory: Now you're telling people to define all of the non-bheavior that people will ever find "reasonable"
16:51  Hory: lvh: it doesn't matter, first of all it has to be consistent
16:51  Spamicles: kerio, thanks. i split it succesfully and got it to work! =]
16:51  Buttons840: kerio: too bad, i really wanted a sandwich
16:51  lvh: Hory: Okay, I'm done trying
16:51  lvh: Hory: Apparently you're smarter than Gosling and Hejlsberg and GvR
16:51  ojacobson: Hory: it doesn't promise to use __getitem__, therefore assuming it uses __getitem__ is not a good idea
16:51  lvh: Hory: Because all of these people produced successful languages doing the opposite of what you're suggesting
16:51  lvh: I'm done here
16:52  ojacobson: I don't see why this is hard to understand: "not documented" doesn't mean "make a guess", it means "don't rely on anything at all"
16:52  Hory: yes because they're obviously being who can never fail and no mere mortal can ever propose an improvement
16:52  ojacobson: You can propose one.
16:52  Hory: no
16:52  ojacobson: That one's going to get shot down, though, since the way items() and iteritems() work internally is considerably faster than going out through [] every time.
16:52  Hory: I'm not smarter than them
16:52  Hory: how could I?
16:52  Hory: if someone is smarter then everything he makes is superior to everything you can think of
16:52  ojacobson: You're free to implement your own dict-like collection that *does* use __getitem__ internally for items/iteritems, though!
16:52  Buttons840: ojacobson: don't you participate in #java discussions?
16:53  lvh: Hory: I'm going to ask you nicely to drop it.
16:53  ojacobson: Buttons840: yes
16:53  lvh: Buttons840: ojacobson is a #java chanop
16:53  lvh: (well, ##java)
16:53  Hory: of course ojacobson
16:53  ojacobson: So, why are we still having this discussion?
16:53  kerio: i thought we already had that
16:53  Buttons840: ojacobson: do you visit #python often?
16:53  ojacobson: You know the state-that-is
16:53  kerio: UserDict
16:53  Hory: because lvh is being absurd
16:53  ojacobson: Go forth, write code
16:53  Hory: not like GvR never changed his mind about anything
16:53  lvh: Hory: Strawman argument.
16:54  Hory: you're making strawman
16:54  lvh: Hory: I'm saying that not defining every single implementation detail of code, specifically, negative definitions, is a good idea.
16:54  cwillu_at_work: sternocera, standard disclaimer, avoid the use of regex;  [^a-zA-Z] would work in a non-unicode world;  something along the lines of (?<!somethingGoesHere)kg would work, given an appropriate somethingGoesHere
16:54  lvh: Hory: Specifically, because the conditions under which those choices are made change.
16:54  sternocera: cwillu_at_work: What's wrong with regex?
16:54  Hory: ok lvh I'll drop it
16:54  cwillu_at_work: sternocera, it's very prone to abuse
16:54  Hory: python is perfect
16:55  lvh: Hory: As ojacobson has explained, code that does not make that explicitly part of it'scontract, can not be trusted to do *anything*.
16:55  lvh: Hory: You appear to be suggesting that we do, in fact, make it part of its contract.
16:55  lvh: And that we make everything that "a person could deem reasonable", part of its contract.
16:55  Hory: sorry, I thought the spirit of guido speaks through me
16:55  cwillu_at_work: sternocera, my rule of thumb is that if it contains more than a dozen pieces of punctuation, you should do something else instead
16:55  lvh: However, it turns out that in reality, neither has actually ever happened.
16:55  lvh: Hory: There are two reasons for that.
16:56  sternocera: cwillu_at_work: I think that the problem is that they are waay easier to write than to read
16:56  Hory: it was foolish of me to question our gods
16:56  cwillu_at_work: sternocera, that can be said of most code though
16:56  sternocera: cwillu_at_work: Right, but regex in particular
16:56  lvh: Hory: 1) Defining all implementation details prevents one from making further progress later, as ojacobson has explained: problems that plauge CPython don't have to plague Pypy.
16:57  lvh: Actually, no, never mind
16:57  Hory: not good manners to ask someone to drop an argument while you keep arguing
16:57  cwillu_at_work: sternocera, I personally find them quite easy to read;  the problem tends to be more of a complete lack of code formatting and commenting;  the form encourages an overly terse style
16:57  ojacobson: Both of you, shut up
16:57  lvh: Hory: 16:54 <Hory> ok lvh I'll drop it, 16:54 <Hory> python is perfect
16:57  lvh: ojacobson: That's the best advice I've heard all day
16:58  Hory: I was not arguing but agreeing
16:58 --- ChanServ sets modes [#python +o lvh]
16:58 @lvh: Hory: ojacobson is correct. Shut up.
16:58 --- lvh sets modes [#python -o lvh]
16:59  Hory: he is. #python is not the place for discussion
16:59  lvh: Hory: I'd say the last hour or so is a good counterexample, but you're free to leave.
17:00  hkBst: I'm trying to create a source distribution, running "python setup.py sdist". Everything seems to work fine, except no tarballs are created... http://paste.pocoo.org/show/304772/
17:01  SeanInSeattle: Hey all.  What do I do to get a python pkg that's been built against python 2.5 to be available via the python2.6 and the python2.7.1 interpreters?
17:02  Yhg1s: SeanInSeattle: build it for Python 2.6 and 2.7.
17:03  SeanInSeattle: Yhg1s:  Is there a way that I can build it for 2.5+ instead of having to rebuild for each new python interpreter version?
17:03  lvh: SeanInSeattle: Are you on Windows?
17:04  SeanInSeattle: nope.  On ubuntu.
17:04  SeanInSeattle: I *used* to run windows.
17:04  lvh: SeanInSeattle: Not reliably.
17:04  SeanInSeattle: lol.  I'm in recovery.
17:04  lvh: SeanInSeattle: Mind the rules.
17:04  SeanInSeattle: lvh:  what do you mean that I couldn't do it reliably?
17:04  lvh: SeanInSeattle: What package are we talking about?
17:05  lvh: (As a practical example, compiled extensions don't have to work between interpreters.)
17:05  hkBst: anyone know of any reason why distutils would not create the tarballs, without suitable error message?
17:05  SeanInSeattle: Its a pkg that's not publicly available.  I'm the one that's building it.
17:05  Kaedenn: SeanInSeattle: Why are you explicitly targeting 2.5 instead of 2.6 or 2.7?
17:05  SeanInSeattle: Kaedenn:  because that's what debian stable has installed.
17:06  Kaedenn: And?
17:06 --- Eeyore is now known as Tuffi
17:06  Kaedenn: That's not a good reason, sorry.
17:06  SeanInSeattle: And my sys admin is a nazi about stability.
17:06  lvh: SeanInSeattle: You could install it locally and add that path to PYTHONPATH, if you're certain that different interpreters can use the same package without breaking.
17:06  Kaedenn: You could *write* your code to be compatible with 2.5, and therefore it'd probably be compatible with 2.6 or 2.7, less a few things.
17:06  SeanInSeattle: lvh:  that sounds like a good solution, as I'm just testing whenI install locally.
17:06  ojacobson: SeanInSeattle: you can build packages such that they'll work on "python 2.x" rather than "2.5" though
17:06  lvh: SeanInSeattle: Personally, I just do what Yhg1s said and install it a bunch of times.
17:06  ojacobson: (or 2.5 through 2.7, more usefully)
17:07  Kaedenn: Also, personally, I have Python 2.5, 2.6 and 2.7 all installed together, at the moment.
17:07  lvh: Disk space is cheap.
17:07  lvh: Programmer time isn't.
17:07  Kaedenn: So I can just do #!/usr/bin/env python2.5 if I wanted
17:07  Kaedenn: lvh: Agreed.
17:09  udgover: I guys, I think I already know why it provides such a result... But for the fun...
17:09  udgover: >>> type(2147483647)
17:09  udgover: <type 'int'>
17:09  udgover: >>> type(2**31-1)
17:09  udgover: <type 'long'>
17:09  Kaedenn: udgover: Please don't paste into the channel.
17:09  Kaedenn: udgover: And you're using Python pre-3.0.
17:09  udgover: Kaedenn, nop, I'm using Python2.6 :)
17:09  lvh: udgover: ints autopromote to longs in 2.x when they become too large to store.
17:10  Kaedenn: udgover: That's pre 3.0, yes.
17:10  jorrit: udgover, that's what Kaedenn says: pre-3.0
17:10  udgover: lvh, yep, it was myt first thought
17:10  udgover: Kaedenn, sorry, a bit tired... :)
17:11  udgover: I imagine, that at 2**31 is first interpreted, so larger than MAX_INT and then -1 is applied on the PyLong
17:11  udgover: how is it handle in Python3 ?
17:11  lvh: udgover: the "int" type does not exist.
17:11  lvh: Well, it does, the 2.x equiv of "int" doesn't exist, I mean.
17:11  udgover: PyInt I mean
17:11  kerio: lvh: why did python 3 remove apply()?
17:12  lvh: Everything is always a 2.x long internally.
17:12  Kaedenn: kerio: It's in functools.
17:12  lvh: kerio: Because you wanted to use @apply for closure tricks that remind me of js, and guido says no
17:12  Kaedenn: 3.x removed most of the global functions.
17:12  kerio: lvh: i did :(
17:12  kerio: what am i supposed to use?
17:12  Kaedenn: wait, @apply for closure tricks? o_O
17:12  lvh: A class.
17:12  kerio: but classes suck!
17:13  kerio: Kaedenn: http://paste.pound-python.org/show/523/
17:13  udgover: so lvh PyIntObject stores long internally ?
17:13  lvh: Kaedenn: Yes. define a function that introduces some function-locals, define a new function with the eventual signature, close over the previously created objects, return that thing
17:13  lvh: Kaedenn: Oh, the paste
17:13 * Kaedenn brain explodes
17:13  kerio: with closures, functions become *magic*
17:14  lvh: Kaedenn: Basically he wrote a class that has __call__, except not really.
17:14  kerio: lvh: and no access to internal functions and variables
17:15  schleppy: when using the json.JSONDecoder, is there a hook I can use for converting integer strings (ex. "1234567890") to ints?
17:15  lvh: kerio: yes, let's pretend that's true
17:15  kerio: ok, with *harder* access to internal functions and variables
17:16  lvh: kerio: Okay, now let's pretend that's an advantage...
17:16  Mythmon: wait, what does apply() do ?
17:16  kerio: Mythmon: apply(f, args, kwargs) == f(*args, **kwargs)
17:16  lvh: kerio: Guy Steele made exactly this argument a few years ago, mind you.
17:17  kerio: Mythmon: which of course becomes a decorator hack
17:17  lvh: kerio: http://paste.pocoo.org/show/304797/
17:18  lvh: kerio: The koan is from Anton, not Guy.
17:18  Mythmon: so as a decorator it becomes a way to wrap functions with their helper functions into one big classy function? weird
17:18  Mythmon: *shudder*
17:18  kerio: it has its elegance, imo
17:19  exarkun: Does `python -m` really still require that you do a __name__ == '__main__' check?
17:19  kerio: exarkun: python -m acts as if you ran the script
17:19  exarkun: Why would I do `python -m` instead of `python` then?
17:19  kang: any module like pycrypto for python3 available?;p
17:19  plundra: exarkun: You don't need to specify a path.
17:20  Yhg1s: exarkun: because '-m' finds the module for you.
17:20  illsci: I'm using optparse and I want to test to make sure that only a single option out of 7 options is used so that at most only one of those seven can be used at the same time.  Is there a way to test for membership but with more than one
17:20  plundra: exarkun: python -m SimpleHTTPServer vs. python /usr/lib/python/something/crap/foo/SimpleHTTPServer.py :-)
17:20 --- Xeross|AFK is now known as Xeross
17:20  kerio: plundra: vs. twistd web
17:20  lvh: shhhh :p
17:21  exarkun: meh, ok.  not as cool as I thought.
17:21  schleppy: I don't see any suitable existing hook.  Do I need to subclass JSONDecoder and provide my own?
17:21 --- Sabbie` is now known as Sabbie
17:23 --- kisielk_ is now known as kisielk
17:23  nvictor: is it me or yahoo is down?
17:24  tpratt: nvictor: http://downforeveryoneorjustme.com/
17:24  schleppy: http://downforeveryoneorjustme.com/yahoo.com
17:24  jorrit: nvictor, it is you
17:24  schleppy: tpratt: nice
17:25  schleppy: can anyone give me a tip for my JSONDecoder problem?
17:25  irfaN: hi, anyone have python bot ?
17:25  kerio: irfaN: ampirc
17:26  irfaN: the bot is not using this channel ?
17:26  tpratt: schleppy: I'd suggest asking a more specific question.
17:26  schleppy: tpratt:  I had asked above.  when using the json.JSONDecoder, is there a hook I can use for converting integer strings (ex. "1234567890") to ints?
17:28  tpratt: schleppy: not a specific hook, but you could do try: int(s) except TypeError: ...  (I think that'd be a TypeError anyway).  What you're trying to do doesn't seem like a great idea.
17:28 --- forneus_ is now known as forneus
17:29  d0ugal: Right, so "'utf8' codec can't decode byte 0xa3 in position 0: unexpected code byte" - This means I have a byte string right?
17:30  Yhg1s: d0ugal: it means you have a bytestring that isn't UTF-8.
17:30  Yhg1s: d0ugal: if you didn't hvae a bytestring, you'd get a different error.
17:30  d0ugal: Ok, that makes sense. So the question then is, if its not UTF-8, how can I figure out what it is?
17:31  Yhg1s: ask whoever gave you the bytestring. there is no particularly good way to 'detect' the encoding a bytestring is (or even whether it's encoded data at all.)
17:31  schleppy: tpratt:  Well here is my situation.  I have a python script that accepts JSON streamed to stdin from a PHP process.  I then interface with some 3rd party python based on the input.  The input from php has all of the integer values > 2**32-1 cast as strings, since PHP has no unsigned ints even though it is 64 bit.
17:31  schleppy: So, I need them to be ints, not strings to pass the data correctly to the 3rd party interface.
17:32  d0ugal: Yhg1s: Right, well the thing is its from user input (an uploaded csv file to be precise)
17:32  schleppy: but I may receive hundreds of thousands, if not millions, of these and would rather not json decode, then convert to ints.  Rather do it all in the one step.
17:32  Yhg1s: then you'll have to ask the user.
17:33  Yhg1s: d0ugal: there's a 'chardet' module that tries to guess at encodings, but it's easily wrong, especially on short strings. (Besides, it guesses based on byte frequencies, which might well be skewed in things like CSV documents.)
17:33  tpratt: schleppy: Something like this? http://paste.pound-python.org/show/524/   I'm not saying it's a good idea or that it'll even work.
17:33  d0ugal: Yhg1s: alright, thanks
17:34  nosklo: wow, a legitimate use of isinstance!
17:35 --- emma is now known as em
17:36  tpratt: schleppy: in the except block, it should probably just be 'pass' instead of 'return...'
17:37 * kerio ponders using @apply for a class, too
17:38  tpratt: nosklo: do you mean legitimate use or correct because it refers to basestring?
17:38  nosklo: legitimate
17:38  nosklo: serialization is one of the few applications of typechecking
17:39  dash: maybe :)
17:39  dash: maybe not though.
17:39  nosklo: I can't imagine json module without isinstance
17:40  dash: calling repr(), dict() and list() wouldn't be enough? :)
17:40  schleppy: tpratt: I tried something like this (though I am trying to subclass JSONDecoder, not JSONEncoder)
17:41  schleppy: But, there is no default, only decode method I think.
17:41  nosklo: dash: if you call those functions, I'm not sure what [('a', 'b')] will be serialized to.
17:41  dash: yeah ok, python sucks
17:41  dash: you have a good point.
17:43  kerio: dash: dammit your idea of object Foo: is awesome
17:43  kerio: :(
17:44 --- NelleV_ is now known as NelleV
17:44  _habnabit: kerio, of course it is! That's how E works.
17:48  zjblabs: awhile ago, I was given a link to a good article for resolving "PicklingError: Can't pickle <type 'instancemethod'>: attribute lookup __builtin__.instancemethod failed" when you try to map a class to a multiprocessing pool; anyone know what I'm talking about? google doesn't help much (probably because I'm not quite sure what to search for other than the traceback)
17:49  Yhg1s: zjblabs: you're trying to send an instance method through a pool. multiprocessing pools use pickle to serialize the data (if they start a new process), which can't handle instancemethods.
17:50  zjblabs: Yhg1s, how can I fix this?
17:50  Yhg1s: zjblabs: the only way to solve it is to not send bound or unbound instance methods, and just whole classes and functions (which are pickled by name.)
17:50  zjblabs: hmm...
17:50  zjblabs: I can handle that, thanks
17:51  jaegr: if I write to a new file in the python interpreter in linux, where does that file go?
17:52  Yhg1s: jaegr: where you tell it to go.
17:52  Yhg1s: if you specify a relative filename, it'll be relative to the current working directory.
17:52  kerio: in the pwd
17:52  kerio: er
17:52  kerio: the wd
17:52 --- simonrvn is now known as Guest28274
17:53  jaegr: but what if I do file = open("file", "a")
17:54  Yhg1s: "file" is a relative filename.
17:54  kerio: it creates or opens a file named "file" in wherever you are
17:54  kerio: how are you running your script?
17:55  jaegr: I'm just experimenting with the interpreter
17:55  lvh: kerio: Well, maybe he changes the current working directory ;-)
17:55  lvh: jaegr: By default, the interactive interpreter inherits the cwd from the parent process.
17:55  kerio: jaegr: how did you run the interpreter then
17:55  jaegr: "python"
17:56  kerio: *where* did you run it then :)
17:56  kerio: opened a terminal, typed python?
17:56  jaegr: yeah
17:56  kerio: open("file", "a") will open or create a file named "file" in ~
17:56  kerio: probably
17:57  jaegr: oh right, found it
17:57  jaegr: thanks
17:57  lvh: kerio: ERrr. only if he's in "~" in the first place
17:57  lvh: jaegr: It'll open the file wherever your shell's at.
17:57  kerio: he opened a terminal and then typed "python"
17:57  kerio: i assumed he didn't change his directory inbetween
17:58  ruxkor: hey everybody! does anybody know how I can access a staticmethod inside a given class _without_ knowing it's name?
17:58  ruxkor: (and without self, since the other method is static too)
18:00  psykidellic: Hmm, how would one not know the *method* name?
18:00  ruxkor: ah srz
18:00  ruxkor: ah sorry
18:00  ruxkor: the classname
18:00  ruxkor: : )
18:00  ruxkor: not the method's name
18:01  psykidellic: ruxkor: Well, in a staticmethod, you have the cls parameter. So you can do: cls.anotherStaticMethod()
18:01  ruxkor: ok, do I have to include the cls parameter in the function header?
18:01  ruxkor: or is it someway "given"
18:01  ruxkor: ?
18:02  psykidellic: ruxkor: Code please. How did you define your staticmethod?
18:02  ruxkor: (thanks by the way!! am struggling with this for quite a lot of time)
18:02  ruxkor: ok
18:02  ruxkor: let me fill a pastebin
18:03  psykidellic: I need to rush out for breakfast. Brb.
18:08  ruxkor: ah. for the record. I need to use @classmethod not @staticmethod apparently, as seen here http://tinyurl.com/28ummhm
18:09  kerio: is there a way to define __getitem__ *for* a class?
18:11  dash: kerio: man, what are you doing.
18:11  dash: psykidellic: i think you had staticmethod confused with classmethod anyway :)
18:12  zjblabs: Yhg1s, I quickly changed them to functions, but now I'm getting "UnpickleableError: Cannot pickle <type 'thread.lock'> objects
18:12  zjblabs: "
18:12  dash: zjblabs: eesh
18:13  kerio: dash: something really ugly
18:13  kerio: >:D
18:13  dash: zjblabs: if you're using multiprocessing, why are you using threads?
18:13  dash: kerio: don't be terrible
18:13  kerio: dash: it's ok to have a class rely on the instance of another class in the module, right?
18:13  dash: kerio: what are you doing?
18:13  kerio: math
18:13  dash: kerio: i'm not going to answer a question like that.
18:14  dash: kerio! don't do math.
18:14  zjblabs: dash: if I were to execute that from the "main" thread, would that work?
18:14  kerio: dash: i can't help it! it's not my fault! :(
18:14  cousteau: kerio, what are you trying to do? a class that implements its own __getitem__?
18:14  zjblabs: dash: because I'd like to hack this together really quick and then go learn how to do it properly in twisted :)
18:14  kerio: cousteau: nah, i'll make it a proper instance
18:14  apoirier: kerio: define __getitem__ in its metaclass
18:15  dash: apoirier: why is that a good idea?
18:15  dash: zjblabs: heh. why waste time?
18:15  dash: o/` on the microphone o/`
18:15  zjblabs: dash: because twisted looks intimidating and this code is pretty much 99.99% complete minus this pool not working correctly
18:15  kerio: that's a *HUGE* minus
18:16  kerio: you're using threads and pickle
18:16  kerio: it will never work right
18:16  kerio: so, by definition, this time is wasted
18:17 * cousteau is trying to understand what kerio wanted to do with __getitem__
18:17  dash: well, if you're using multiprocessing, you can't avoid using pickle
18:17  dash: kerio: _you're_ one to talk about wasting time
18:17  dash: mathy.
18:18  kerio: dash: you're only jealous of the fact that i have more free time than i can use
18:18  Mythmon: dash: i'm pretty sure you can always avoid using pickle
18:18  Stormx2: Yo. is it possible to have references to functions stored in variables?
18:18  dash: kerio: i have useful things for you to do with it
18:18  Mythmon: Stormx2: yeah, just say x = theFunction
18:18  dash: Mythmon: really! how so
18:19  kerio: Stormx2: yo yo dawg, of course you can - all variables are references
18:19  Stormx2: Mythmon, do i call with just x() ?
18:19  kerio: yup
18:19  Mythmon: Stormx2: yeah
18:19  Stormx2: Alright, perfect
18:19  Stormx2: Thanks
18:19  dash: Stormx2: of course you can, how else would you be able to call functions?
18:19  Mythmon: this isn't java where methods are magical boxes
18:19  cousteau: that function reference thing can be done even in C
18:19  Mythmon: dash: i assume you are using pickle to pass objects between processes?
18:19  kerio: cousteau: yeah but you have *the* function and then you have pointers to it
18:20  [diecast]: how can i get a value from a dictionary using a tuple as the keys - http://paste.pound-python.org/show/525/
18:20  kerio: [diecast]: you can't
18:20  kerio: at least, not like that
18:20  kerio: but you can have a dict that uses tuples as keys
18:20  [diecast]: is there a way to break it up and pass it
18:20  [diecast]: ya iread that
18:20  dash: Mythmon: not me, 'multiprocessing'
18:21  [diecast]: the nesting is not definite
18:21  Mythmon: [diecast]: [tuple[0]][tuple[1]] ?
18:21  kerio: [diecast]: oh god i have the worst idea ever!
18:21  [diecast]: hah
18:21  Mythmon: dash: oh, multiprocessing forces pickle? nevermind then.
18:21  dash: Mythmon: it uses it for stuff, yeah
18:21  Mythmon: :(
18:21  dash: there's ampoule instead, fortunately
18:21  kerio: reduce(operator.getitem, [obj] + tuple)
18:21  kerio: actually, even better
18:21  dash: kerio: Stop that.
18:21  nosklo: infobob: redent [diecast] obj = yourdict ; for x in request: obj = obj[x] ;; print obj
18:21  kerio: reduce(operator.getitem, your_stuff, obj)
18:21 --- ChanServ sets modes [#python +o dash]
18:21  infobob: [diecast], http://paste.pound-python.org/show/526/
18:21  kerio: :(
18:21 @dash: kerio: behave
18:22  Mythmon: kerio: stop tryin gto confuse the noob. :)
18:22  [diecast]: hmm, maybe there is another approach
18:22 --- dash sets modes [#python -o dash]
18:23  [diecast]: i receive input in text form like this - some.key.value.text
18:23  illsci: how can I test for the type of an object?  I'm trying to use "is" and it's not working.  I'm doing something wrong.  My type is <type 'com.vmware.vim25.mo.VirtualMachine'>  but testing with "if thing is 'com.vmware.vim25.mo.VirtualMachine': doesn't work
18:23  [diecast]: and need to break tha tup into keys to pass to the dict like d['some']['key']['value']['text']
18:23  illsci: How can I check to see if the object is a virtual machine
18:23  kerio: dash: ok tell me that my solution, while hideous, isn't also brilliant
18:23  cousteau: [diecast], maybe something like   [mytuple[x] for x in ('foo', 'bar', 'baz')]   ?
18:23  dash: illsci: why don't you know what type it is?
18:23  dash: kerio: Why should I care about brilliance?
18:24  illsci: dash: I'm sending objects to a function called printObjects and it might be a virtual machine or it might be another kind of object
18:24  Mythmon: [diecast]: and it wont work to use the tuples as the they keys directoly?
18:24  illsci: and based on the type it will print different things
18:24  [diecast]: Mythmon: see my first paste
18:25  cousteau: oic...   x = mydict; for k in ('some', 'key', 'value', 'list'): x = x[k]
18:25  cousteau: I think that would work
18:25  nosklo: cousteau: that's what I pasted :)
18:25  nosklo: http://paste.pound-python.org/show/526/
18:25  dash: illsci: hmm. and these are objects you can't modify the source for, and that don't have methods that print out the right stuff already?
18:25  cousteau: nosklo, I was busy enough looking at my keyboard as to watch what was being pasted :(
18:26  illsci: dash: right, I want to fall functions defined and they are all specific to the type of object
18:26  dash: illsci: ensaddening.
18:26  dash: illsci: well, sounds like your last resort is calling isinstance
18:26  illsci: if you're a virtual machine i might want to pring your uuid but if you're a datacenter I might want to see location or something
18:27  dash: illsci: it's best to avoid this, when possible, but it sounds like the vmware library leaves you with little choice
18:27  deostroll: hi is there any threadpool implementation in python
18:27  dash: deostroll: Several.
18:27  dash: deostroll: what would you like to do?
18:28  deostroll: dash: queue several http requests into the pool
18:28  tpratt: illsci, where do you get the object?
18:28  sivy: on python 2.6.x, what's the best way to get the output from a call to subprocess.Popen ?
18:28  [diecast]: nosklo, cousteau: thanks!
18:28  [diecast]: i missed the first paste ;)
18:28  teratorn: deostroll: processing a little http isn't really a thing threads are any good at
18:29  dash: deostroll: oh, you can do that without threads. are you writing a webspider/scraper?
18:29  teratorn: deostroll: could you just do it in one thread with non-blocking IO?
18:29  illsci: dash: thanks its working now
18:29  dash: deostroll: scrapy.org is a thing that may interest you.
18:29  dash: sivy: probably call .communicate() on it
18:29 --- kenbolton_ is now known as kenbolton
18:30  deostroll: teratorn: what is tht non-blocking io thingy u were referring to?
18:30  illsci: tpratt: uhmm there is a method that returns a list of objects.   I'm trying to make a generalized reporting function that will print out different information based on the object that's sent to it
18:30  dash: deostroll: making http requests without stopping to wait for them to finish
18:30  dash: deostroll: twisted does this, and scrapy uses it
18:30  teratorn: deostroll: what dash said
18:30  deostroll: dash: so there are async versions of making http requests?
18:31  dash: deostroll: correct.
18:31  psykidellic: dash: Indeed. I was thinking of classmethod when I said that. I dont think I have ever used staticmethod.
18:31  dash: psykidellic: it's pretty much useless
18:31  zjblabs: wait, what?? NotImplementedError: pool objects cannot be passed between processes or pickled
18:31  psykidellic: dash: I guess being off from computers for 3 weeks does that :)
18:31  dash: zjblabs: sounds about right
18:31  sivy: dash: thanks
18:32  zjblabs: dash: I quickly refactored the code to use multiprocessing.Process instead of threading.Thread, but it looks like it's not that easy...
18:32  dash: zjblabs: probably not!
18:32  RootLUG: Hi, Can I use standart xml library for SOAP or not?
18:32  dewy: hey, im trying to download PIL but all the links are broken (http://www.pythonware.com/products/pil/) can anyone offer an alternative
18:32  dash: RootLUG: sure.
18:33  nosklo: dewy: which platform?
18:33  dewy: windows 7 :(
18:33  dewy: lol
18:33  RootLUG: dash, And do I need to specify somethink or only tag names like normal XML ?
18:33  nosklo: dewy: oh, I think you might be doomed then
18:34  dash: RootLUG: it's pretty much xml, yeah
18:34  dash: RootLUG: lxml.etree is the nicer xml library, btw
18:34  RootLUG: Ok, thanks. :)
18:34  nosklo: RootLUG: First of all. SOAP is pretty bad. Can you somehow avoid it and use something else instead?
18:34  RootLUG: No, I'm making module for ED System which is using SOAP to communicate
18:35  ccxCZ: second of all, there is bunch of SOAP libraries out there
18:35  nosklo: RootLUG: :( I feel your pain. I had to implement some SOAP stuff myself.
18:35  nosklo: ccxCZ: they all suck
18:35  RootLUG: dash, I know but I can't install any new modules on the web server :(
18:35  dash: RootLUG: Throw it away
18:35  dash: RootLUG: get a good webserver instead
18:35  ccxCZ: nosklo: that's likely to be true
18:35  nosklo: RootLUG: webservers are cheap
18:35  nosklo: ccxCZ: I'm pretty sure it is. I have struggled with all of them myself
18:35  RootLUG: I can't, I'm making it for some local company.
18:36  nosklo: ccxCZ: but the problem is SOAP itself, not the libraries
18:36  ccxCZ: I figured
18:36  dash: RootLUG: are you charing them extra for using cheap hosting that makes your job harder?
18:36  dash: g
18:36  teratorn: RootLUG: SOAP is really terrible and all the libraries for automating the process (that I've used) are equally terrible. I'm writing a soap client right now, and it works beautifully to simply construct your requests with basic string concat and parse responses with lxml/xpath. I'm talking http with Twisted. (you can use lxml to construct requests if you need to for some reason as well)
18:36  dash: lxml.builder is rather nice for producing xml.
18:37  nosklo: yeah, that's what I do. At the end we did all SOAP with lxml and it works nicely
18:37  nosklo: it's a bit more work at first, but at least you can see and fix server and service quirks
18:37 --- kanor is now known as tyrus
18:37  teratorn: s/concat/interpolation/
18:37  derdon: theoretically spoken, pip resolved dependencies automatically, doesn't it? well, this paste shows it does not: http://paste.pocoo.org/show/304834/
18:38  nosklo: derdon: it doesn't
18:38  dash: derdon: well, you've figured out why i never use it.
18:38  nosklo: derdon: it just follows what authors says the dependency ares
18:38  nosklo: derdon: er, the dependencies are
18:38  derdon: oic
18:38  ccxCZ: derdon: this seems like packager's fault
18:39  derdon: ccxCZ: I just noticed that pip can't find the package dsextras
18:39  derdon: which package does import it?
18:39 --- tyrus is now known as kanor
18:39  nosklo: derdon: it's not a standard package. Could be anything
18:40  derdon: maybe this one? http://www.koders.com/python/fid4241E78615986A9ED8B1F7499826543D37EEEB20.aspx?s=dsextras#L2
18:40  nosklo: [15:40] <nosklo> derdon: it's not a standard package. Could be anything
--- Log closed Tue Dec 14 21:42:32 2010
--- Log opened Tue Dec 14 21:42:57 2010
21:42 --- Users 754 nicks [0 ops, 0 halfops, 0 voices, 754 normal]
21:42  bob2: epsolon77: i don't know why you think that matters
21:43  epsolon77: bob2:  i'll give it a try
21:43  bob2: the only differeent build-dep is lcms
21:44  nosklo: m1chael: %Y-%m-%dT%H:%M:%S etc something like that
21:44  cypha: bob2, do i have to restart after setting system variables in windows?
21:44  bob2: cypha: i don't know
21:44  bob2: i only use windows to run itunes
21:44  cypha: lol
21:44  cypha: k
21:44  nosklo: bob2: why would you want to run itunes, you buy music from apple store?
21:44 --- Channel #python was synced in 126 seconds
21:45  epsolon77: bob2: I am giving it a try now.  I hope I am wrong and that I did just miss a dependancy
21:45  m1chael: thanks nosklo, i'll try it out
21:47  bob2: nosklo: to back up my phone
21:47  bob2: i just y cds
21:47  bob2: lots of cds
21:48  nosklo: Unode: the former
21:48  Unode: nosklo, ok thanks
21:48  epsolon77: so general question, while I'm waiting for installs, why code in Python?  And this is not ment as an attack, just a serious question from a non python junior coder and sysadmin
21:49  habnabit: Why not?
21:49  habnabit: Everything else sucks more.
21:49  bob2: because it is a very pleasant language with a huge number of libraries
21:50  Kzim: in regex how can i match 2 pattern please ?
21:50  dash: epsolon77: it's pretty much a local maximum of good language design, convenience, and practicality
21:50  epsolon77: I mean I'm certainly not going to bash Python.  I've coded in C C++ Basic, varios SQL's and a touch of Fortran back in the day
21:50  dash: epsolon77: well it's an important question
21:50  epsolon77: tracing back through this error it seems pretty straight forward...
21:50  epsolon77: almost C++ and fortran combined
21:50  KirkMcDonald: epsolon77: It is very nearly difficult to write ugly code in Python.
21:51  dash: haha. a good way to put it
21:51  Eevee: KirkMcDonald: some people try very hard, though
21:51  epsolon77: I personally don't have the time to code much anymore
21:51  nosklo: #coding: base64
21:51  epsolon77: which is probably good cause I'm bald enough at 28 as it is
21:51  epsolon77: being sysadmin has done enough for my stress levels...
21:51  impulse9: hi, how do i get a bunch of links from html code using the re module
21:52  impulse9: ive been using this: value = re.search('<a href="([^"]*)">',v).group(1)
21:52  teratorn: impulse9: generally, you dont
21:52  impulse9: but it only seems to show me the first element
21:52  impulse9: why, is it a bad idea? :>
21:52  Eevee: impulse9: don't use regexes for html, ever.  use an html parser
21:52  nosklo: the perfect obfuscation technique, I can't wait to recommend it to someone trying to obfuscate source code
21:52  dash: impulse9: lxml.html.fromstring(v).xpath("//a/text()")
21:52  Eevee: they're easier *and* more reliable
21:52  Eevee: yes see
21:52  dash: oh, you wanted links not text
21:52  dash: impulse9: lxml.html.fromstring(v).xpath("//a/@href")
21:53  KirkMcDonald: Eevee: Not just more reliable, but correct.
21:53  impulse9: yes but is that library a standard one ?
21:53  dash: impulse9: nope, but it's easily installable
21:53  habnabit: It's pretty standard.
21:53  habnabit: Everyone uses it.
21:53  Eevee: KirkMcDonald: before 5, alas, there's not really a "correct" for HTML
21:53  dash: mostly standard :)
21:53 --- Scorchin_ is now known as Scorchin
21:53  impulse9: im only supposed to use standard libs you see im writing a school-related project
21:53  nosklo: easily installable as in "don't use easy_install"
21:53  teratorn: impulse9: oh dear
21:53  dash: impulse9: oh dear.
21:53  impulse9: :>
21:53  habnabit: Homework. :(
21:53  KirkMcDonald: Eevee: Well, regexes, at least, are incorrect.
21:53  teratorn: heh.
21:53  epsolon77: and the HP jet engine sitting next to me boots
21:54  Eevee: your school isn't teaching you very well if they want you to reimplement a shoddy version of a popular library everyone else would Just Use
21:54  teratorn: impulse9: tell your teacher that you got permission from #python
21:54  Eevee: ha
21:54  impulse9: :D
21:54  teratorn: impulse9: also, we wish to speak to this person
21:54  Eevee: just copy/paste all the lxml source into your program
21:54  Eevee: what could go wrong
21:54  dash: impulse9: is your input html, or xhtml?
21:54  impulse9: its just a long line of html code
21:54  KirkMcDonald: (Or HTML pretending to be XHTML?)
21:55  impulse9: im supposed to cut links, names etc out of it
21:55  Eevee: how decent is htmllib?  I know it's deprecated but not how well it actually works
21:55  dash: Eevee: lxml is mostly C though
21:55  habnabit: Make a jsonrpc service to do this.
21:55  habnabit: Then call it from your code.
21:55  Eevee: dash: hahaha I know
21:55  impulse9: i think ill end up split()-tting the whole thing up
21:55  impulse9: :x
21:55  habnabit: impulse9: Ask your TA, not is
21:56  habnabit: Us n
21:56  Eevee: dash: os.system("""gcc <<< '""" + lxml_source + """' && ./a.out""")
21:56  epsolon77: I think I need hearing protection to be near these comps....
21:56  dash: impulse9: fwiw if i were grading your class's assignments i would fail anyone who used regexes
21:56  impulse9: habnabit im scared of him :>
21:56  habnabit: impulse9: Not our problem.
21:56  epsolon77: dash: that's the joy of programming.  20 ways to get it done
21:56  impulse9: who says its anybodys problem -.-
21:56  epsolon77: (Note I didn't say done RIGHT)
21:56  waynew: our TAs are mostly worthless, sadly
21:56  Eevee: and 19½ of them are probably awful
21:57  habnabit: impulse9: You did, when you came in here with a homework problem. :V
21:57  dash: epsolon77: by "joy" do you mean "pain"?
21:57  teratorn: that is how I translted it
21:57  teratorn: *translated
21:57  impulse9: habnabit, my problem was very specific
21:57  epsolon77: dash:  same thing, if I recall my SQL and JAVA coding days
21:58  impulse9: and not related to any "homework"
21:58  habnabit: impulse9: And is completely the wrong way to solve the problem.
21:58  impulse9: ok ok i get your point
21:58  jimbauwens: Hello, I'm a beginner in python, and I want to create a script that parses a HTML file and checks certain tags. Does anyone know a simple program that I can use as example, to learn of? A simple program that parses xml would be ok. Thanks :)
21:58  habnabit: impulse9: You can write a proof that demonstrates that your code is always wrong.
21:58  impulse9: im pretty sure of that :D
21:58  habnabit: jimbauwens: HTML is not XML.
21:59  teratorn: epsolon77: if you equate pain with joy I'm not sure what I would call that, but I'm sure there is some appropriate psychological designation :)
21:59  KirkMcDonald: habnabit: (Except when it is.)
21:59  cypha: masicism
21:59  waynew: jimbauwens: you should look up the lxml library and/or beautiful soup
21:59  bob2: jimbauwens: the short answer is that you want use lxml.html
21:59  jimbauwens: habnabit, yes, but you can parse it the same way
21:59  habnabit: jimbauwens: lxml.html is a good HTML parser though.
21:59  habnabit: jimbauwens: No, you can't.
21:59  KirkMcDonald: jimbauwens: HTML and XML are both SGML.
21:59  habnabit: KirkMcDonald: Then it isnt HTML.
22:00  jimbauwens: ok
22:00  epsolon77: teratorn: well it's pain up until you come up with that wonderous solution that just cut out 50 lines of code and worked, and then it's joy
22:00  KirkMcDonald: jimbauwens: Now, XHTML is also XML.
22:00  bob2: xml is sgml?
22:00  dash: man, what _isn't_ sgml.
22:00  habnabit: A subset of it.
22:00  jimbauwens: lol, i'll check lxml :)
22:00  epsolon77: ascii says what?
22:00  teratorn: epsolon77: ah, ok
22:00  jimbauwens: Thanks for the tip
22:01  jimbauwens: guys/girls
22:01  habnabit: jimbauwens: People often conflate the two because they're superficially similar.
22:01  epsolon77: teratorn: I think though that most coders have some psycological disorder...
22:01  cypha: bob2, u were right, i needed an absolute path
22:01  cypha: which is weird, considering other variables in their also use %othervariables%
22:01  jimbauwens: the part of HTMl that I have to parse, is basically in XML form
22:01  dash: epsolon77: well yes, healthy people know how to not write computer programs
22:01  cypha: their=there
22:01  epsolon77: I mean I know I gotta at least hate myself a little bit for doing it
22:02  epsolon77: dash: EXACTLY
22:02  bob2: cypha: well they probably don't mind the path being misformed and having two drives
22:02  epsolon77: dash: so being a sysadmin, what does that make me?  Someone smart enough not to write code, but dumb enough not to realize I shouldn't be playing with it?
22:02  bob2: epsolon77: 'on call'
22:03  dash: epsolon77: well if you're doing it right
22:03  dash: epsolon77: you're a person that feeds on the suffering of the others
22:03  epsolon77: dash:  Or at least suffers from the feeding of others
22:03  teratorn: he doesn't look like a banker to me :/
22:04  epsolon77: I am ANYTHING but a banker
22:04  enq0r3: hey all, python newbie here. i've used beautifulsoup to get a list of tags, i.e. ['<p>Paragraph1</p>', '<p>Paragraph2</p>']. how do i join these together into a single string?
22:04  epsolon77: or a politician
22:04  dash: teratorn: well the difference is that bankers just do it for the money
22:04  epsolon77: ok so is everyone here just getting the same homework assignment?
22:05  bob2: enq0r3: i guess the short answer is '\n'.join(listofcrap)
22:05  epsolon77: dash: yeah sysadmins just do it for the uptime
22:05  dash: teratorn: the essence of the BOFH nature is deriving enjoyment from other people suffering from their own incompetence, i'd say
22:05  dash: epsolon77: this problem comes up alll the time
22:06  epsolon77: dash: ah good to know.  Shame they dont have some precompiled library out there.
22:06  teratorn: dash: but then there is the PFY
22:06  dash: bob2: were you the one taling bout this stuff happening in groups
22:06  dash: epsolon77: there is! it's lxml.
22:06  dash: surprise.
22:06  Buttons840: i'm interested in how multiprocess and subprocess modules compare?
22:06  dash: Buttons840: They're different.
22:06  epsolon77: dash: yeah sarcasm doesn't work well via chat
22:06  bob2: i think it was verte
22:06  Buttons840: dash: insighful :)
22:06  habnabit: Buttons840: !=
22:06  Unode: Buttons840, one manages multiple processes the other manages sub processes
22:07  m|kael: dash: sorry for the late reply. im using windows xp and python 3.1
22:07  brewster: I'm having more troubles compiling python. I got all the libraries i could but I don't know what libraries to get for nis, ossaudiodev, and spwd
22:07  brewster: can anyone here help?
22:07  jimbauwens:  beautifulsoup looks perfect for what I need :)
22:07  teratorn: dash: which combines all of the above with a malevolent lager and cocaine-induced psychosis
22:07  Unode: Buttons840, for instance if you want to run some external program to python you use subprocess
22:07  bob2: brewster: do you care?
22:07  dash: jimbauwens: it's rather old and busted.
22:07  jimbauwens: dash, :o
22:07  dash: m|kael: oh. i'm sorry. :(
22:07  brewster: care about...?
22:07  bob2: brewster: about those modules
22:07  Unode: Buttons840, while if you want to run multiple parallel computations in python you could use multiprocessing
22:07  brewster: yes
22:08  dash: jimbauwens: lxml.html is the new shiny thing
22:08  brewster: oh and sqlite3
22:08  brewster: i def need this
22:08  Buttons840: Unode: ok, i'll look at the api's for more info
22:08  jimbauwens: ok
22:08  Unode: Buttons840, and obviously you can mix both to run multiple parallel computations of external programs to python
22:08  bob2: brewster: what does spwd even do?
22:08  bob2: brewster: also, what OS
22:08  crallion: How can I assign variables and strings to a single variable?
22:09  brewster: it is shadow password db
22:09  brewster: windows
22:09  Unode: crallion, what?
22:09  bob2: crallion: do you mean "How do I combine a bunch of stuff in to a string and assign it somewhere?"?
22:09  bob2: brewster: oh, good luck
22:09  brewster: -___-
22:09  crallion: pretty much
22:10  namnatulco: brewster: aren't there precompiled versions available for windows?
22:10  bob2: crallion: http://docs.python.org/release/2.5.2/lib/typesseq-strings.html
22:10  crallion: for instance, if I could turn this: print(var1,"::",var2,"::",var3)
22:10  brewster: i want it on cygwin
22:10  dash: brewster: those are optional libraries that you don't need in order to use python.
22:10  bob2: it's in cygwin
22:10  crallion: into a variable which I could then print with: print(result)
22:10  brewster: it is not on cygwin in version 3
22:10  bob2: crallion: that only works because print a) magically converts all its arguments to strings and b) joins them together
22:11  bob2: crallion: so string formatting is probably the thing you want
22:11  Unode: crallion, variable = "%i%s%s" % (one_int, a_string, another_string) would be other alternative
22:11  bob2: is %i real?
22:11  bob2: whaddaknow
22:11  Unode: bob2, just like %f is :)
22:12  Unode: although it's not as strict as C printf
22:12  crallion: is using %i for int and %s for string a guideline?
22:12  jimbauwens: Thanks everyone =)
22:12  brewster: alright nevermind
22:12  Unode: crallion, kind of, what is used is the order of the variables
22:13  crallion: ?
22:13  Unode: crallion, %i requires a number while %s accepts almost anything
22:13  namnatulco: Unode: speaking of C printf, I don't suppose it is possible to do a format exploit?:)
22:13  crallion: ahh
22:13  crallion: thanks Unode
22:13  epsolon77: dash: Ok did the apt-get on all the goodies you requested, ran the python2.7 setup.py clean, then python2.7 setup.py build_ext -i, then python2.7 setup.py install, re ran the code and still am getting the same error
22:13  crallion: and bob2
22:13  Unode: crallion, read the documentation about string formatting for a better idea of how it works
22:13  enq0r3: bob2, i get the error "TypeError: sequence item 0: expected string, Tag found"
22:13  epsolon77: bob2:  er or more you told me to run them
22:14  Unode: namnatulco, no idea but I wouldn't think so since they are not comparable
22:14  epsolon77: sorry very difficult to tell the difference between the awesomely smart people on here
22:14  epsolon77: do i need to rebuild python2.7 as well?
22:16  namnatulco: Unode: because if I do print <something>, the code behind it 'just prints' rather than interpreting the format?
22:16  epsolon77: I know I have the zlib stuff compiled and installed, it's just gotta not be looking for it, but i dunno where to change that pointer
22:16  Unode: namnatulco, it calls object.__str__() as far as I understand
22:16  elpargo: how can I make python fallback to pdb when an exception occurs ?
22:16  _habnabit: elpargo, python -mpdb
22:17  namnatulco: yeah, but the issue lies at the print... in C if you do printf(variable) as opposed to printf("%s",variable)
22:17  namnatulco: the latter is probably used though:)
22:17  elpargo: _habnabit: that is getting me the first line of code. not where it fails.
22:17  Unode: _habnabit, is pdb launched in scope or outside (in similar ways to ipython script.py) ?
22:17  Jax: fighting with a MemoryError...
--- Log closed Tue Dec 14 22:21:34 2010
--- Log opened Tue Dec 14 22:36:58 2010
22:36 --- Users 752 nicks [0 ops, 0 halfops, 0 voices, 752 normal]
22:37  Kzim: yeah :(
22:37  Kzim: so what can i do ? :(
22:38  KirkMcDonald: Kzim: I'm not totally clear as to what the problem is.
22:38 --- Channel #python was synced in 121 seconds
22:38  dash: Kzim: Why do you need this?
22:39  Kzim: i want to generate a text based on multiple other
22:39  dash: Kzim: for what purpose?
22:39  Kzim: so i wanted to split into sentences and then shuffle and merge :)
22:39  shylent: like the spammers do, you know :P
22:39  thm: use nltk?
22:39  Kzim: like spammers yeah
22:39  dash: Don't be like spammers, Kzim.
22:40  Kzim: yeah :/
22:43  dbreddy: i am trying to use pagerank from networkx module and the graph is huge and i am getting a memory error, is there a way to overcome this problem
22:43  epsolon77: ok this IOError: decoder zip not availible is officially driving me CRAZY
22:43  dash: dbreddy: two ways
22:43  dash: dbreddy: 1) have less data
22:43  dash: 2) buy more ram
22:43  emes: 3) write better code
22:44  dash: emes: how's that different from 1)
22:44  emes: dash: data is usually separate from code
22:44  dbreddy: dash:one more way distributed pagerank mapreduce
22:44  dash: dbreddy: that's the same as 2)
22:44  epsolon77: they can't stop the data Mal...
22:45  dbreddy: dash: is there a limit in python like java heap size
22:45  dash: dbreddy: no
22:45  dbreddy: dash: how it works then? what is the min and max limits
22:46  dash: dbreddy: whatever the OS allows.
22:49  epsolon77: who wants to make fun of me because I use NANO?
22:49  mun: hi
22:49  dash: epsolon77: you deserve pity, not ridicule
22:49  NelleV: epsolon77: are you on gentoo ?
22:50  epsolon77: no I'm on debian lenny, just don't have the time to learn another program...
22:50  mun: given a list of 3 characters, what is a quick way to generate all possible combinations of length 3?
22:50  dash: epsolon77: why not? what's the hurry
22:50  papna_: mun: itertools.combinations
22:50  epsolon77: I was really hoping someone would jump on it and I'd say you cna't make fun of me till you fix my python install :-D
22:50  papna_: Depending on what you mean by "combinations"
22:51  Jax: itertools.combinations([1,2,3], 3) i think
22:51  epsolon77: dash: the hurry is the fact that I'm replacing an entire companies entire network infrasturcutre including phones while doing all the maintinance on the buildings
22:51  epsolon77: I just don't have time yet
22:51  epsolon77: and really nano does everything I currently need it to do
22:51  epsolon77: namely edit text
22:53  mun: papna, say, given ['a','b','c'] generate 'aaa','aab','abc',etc.
22:54  epsolon77: ok so PIL's Image.py should be pulling from the zip.h or zipdecoder.c packages right?
22:54  epsolon77: there there why aren't they being read!
22:55  dash: epsolon77: dang. good luck :)
22:56  papna_: mun: Sounds like you want for loops / itertools.product
22:56  epsolon77: dash: sigh...thanks.  I'm unfortnatly without a brick wall to bash my head against to knock some sense in me
22:56  papna_: Erm.
22:56  papna_: mun: I, I misread.
22:58  KirkMcDonald: epsolon77: I'm not sure I understand your question about PIL.
22:58  thm: mun: itertools.combinations_with_replacement('abc', 3)
22:58  mun: papna, it seems itertools.combination_with_replacement suits my needs
22:58  mun: thm, indeed. thanks
--- Log closed Tue Dec 14 23:02:17 2010
--- Log opened Tue Dec 14 23:07:43 2010
23:07 --- Users 751 nicks [0 ops, 0 halfops, 0 voices, 751 normal]
23:07  epsolon77: KirkMcDonald: I get no errors compiling python2.7
23:07  gorakhargosh: bob2: it does. pylint finds a lot more
23:08  papna:  /lastlog papna
23:08  epsolon77: bob2:  I'll see if I can install 2.6 from repo using your script
23:08  bob2: epsolon77: nothing to do with 2.6
23:08  epsolon77: bob2: oh I see what your saying.  Redo the make on python2.7
23:08  bob2: it installs the 2.6 build-deps, which are almost identical to 2.7's
23:09  epsolon77: bob2: I'm not finding a source for python2.6 though...
23:09  bob2: 2.5 then
23:09 --- Channel #python was synced in 127 seconds
23:09  epsolon77: bob2: the code doesn't work with 2.5...something about a with command
23:10  bob2: :(
23:10  bob2: 09:08:42 < bob2> it installs the 2.6 build-deps, which are almost identical to 2.7's
23:10  bob2: s/2.6/2.5/
23:10  bob2: then you won't have a broken python anymore
23:10  epsolon77: bob2: I'm tryin to install again to see what happens
23:10  bob2: after running 'sudo apt-get build-dep python2.5'
23:10  nvictor: hello
23:10 --- bellicose_ is now known as bellicose
23:11  nvictor: what are the "programs database" installer packages?
23:11  nvictor: on the download page, i can't see any explanation for them
23:11  bob2: nvictor: url?
23:11  epsolon77: bob2: running that command now, we'll see how it goes
23:11  nvictor: http://python.org/download/releases/2.7.1/
23:12  epsolon77: btw thank you all for your help, I really appriciate the extra idea's
23:13  lvh: gorakhargosh: I don't think so
23:13  mun: can a set contain lists?
23:13  bob2: nvictor: some windows crap
23:13  bob2: mun: no
23:13  bob2: mun: lists aren't hashable
23:13  KirkMcDonald: mun: No, but it can contain tuples.
23:13  bob2: (they also cannot be dict keys)
23:13  lvh: gorakhargosh: in general I prefer pyflakes over pylint anyway: far less anal about everything
23:13  mun: ok thanks
23:13  lvh: gorakhargosh: (*a or **kw 'magic'? really?)
23:14  epsolon77: bob2: should I re install and recompile 2.7 and PIL after this/
23:14  gorakhargosh: lvh: Aside from the nonsense it produces, some of it does help keep code clean.
23:14  bob2: epsolon77: you need to rebuild all of it, yes
23:14  lvh: gorakhargosh: Right -- I use a static analyzer too
23:14  bob2: but more important is what the command wanted to do
23:15  lvh: gorakhargosh: Just one that complains about actual problems ;-)
23:15  gorakhargosh: lvh: I'm getting pyflakes. =)
23:15  lvh: gorakhargosh: Although pyflakes vanilla doesn't do this correctly:
23:15  lvh: gorakhargosh: try: import x as y;; except ImportError: import y
23:15  epsolon77: I love open source.  I remember when it used to be hundreds of bucks to get a C++ compiler for class....
23:15 --- forneus_ is now known as forneus
23:16  epsolon77: of cousre I just burned someone else's CD....but that's a different story
23:16  papna: epsolon77: Wait what?
23:16  papna: epsolon77: What the hell are you smoking?
23:16  nvictor: epsolon77: you actually bought a compiler for your class?
23:16  nvictor: ask a refund now!
23:16  KirkMcDonald: Now I know of at least four free C++ compilers, and only two of them are open source.
23:16  epsolon77: no no this was a long time ago
23:17  papna: epsolon77: Open source C++ compilers predate CD-Rs.
23:17 --- Xeross is now known as Xeross|AFK
23:17  epsolon77: yeah but they weren't embraced by the engineering department at UMD at ALL
23:18  lvh: I don't know what you guys are so surprised about
23:18  nvictor: lvh: well i know schools get educational discounts on microsoft products
23:18  lvh: It's a far less useless waste of money than the rest of the academia malarkey he was enrolled in
23:18  lvh: At least he got a C++ compiler.
23:19  nvictor: and all students have to do is get a key, i mean, that's part of the money you pay...
23:19  epsolon77: I'm just damned glad so much is going open source these days.  It's wonderful.
23:19  tpratt_ph: You mean there are "compilers" other than visual studio?
23:19  iElectric: any shortcut to strip query parameters from url?
23:20  nvictor: parse_qs i think...
23:21  iElectric: not parse it, strip it
23:22  epsolon77: man STILL giving me the decoder zip not availible error
23:22  epsolon77: stupid PIL even acknoladges zip support@!
23:23  tpratt_ph: .split('?')[0]
23:23  KirkMcDonald: epsolon77: What happens if you "import zlib" in your Python?
23:25  epsolon77: KirkMcDonald:  ok, the scrip that is erroring is being called inside of PIL's Image.py, if I enter python vie command prompt and type "import zlib" it doens't error and just happily moves to the next line
23:26  epsolon77: KirkMcDonald: do you want me to try and insert that code into the python code itself?
23:28  naxa: hi! can i acces python 2.7 interpreter "executed command's" history in order to save it to a file?
23:29  KirkMcDonald: epsolon77: Show us the actual traceback you're getting.
23:29  papna: naxa: Your terminal's copy and paste.
23:30  papna: naxa: Next time, write a file to start with.
23:30  engla: naxa: import readline; readline.write_history_file("filename here")
23:30  mun: is itertools.combinations_with_replacement obsolete? i can't seem to find it in my library.
23:30  naxa: engla, thanks! papna, thanks for the effort! :)
23:31  thm: mun: it is new in 2.7
23:31  epsolon77: http://paste.pound-python.org/show/535/
23:31  mun: thm, on right
23:31  mun: *oh
23:31  epsolon77: KirkMcDonald: that is the entire output from running the script on
23:35  KirkMcDonald: epsolon77: What happens when you "import _imaging" in your Python?
23:35  Odracoon: Hey :|
23:36  epsolon77: KirkMcDonald: Just to make sure I'm doing this correctly, I can call python2.7 from cli and imput the command there right?
23:36  Odracoon: There is something weird going on here!
23:36  Odracoon: I did this
23:36  Odracoon: a = {"a": "b"}
23:36  KirkMcDonald: epsolon77: Yes.
23:36  Odracoon: for b in a:
23:36  Odracoon:      b
23:36  Odracoon: And I get "a"
23:36  papna: Odracoon: dicts iterate over their keys.
23:36  epsolon77: KirkMcDonald:  just moves onto the next line and seems as happy as a clam
23:36  KirkMcDonald: Odracoon: Iterating over a dict gives you the keys.
23:36  papna: Odracoon: What did you want to do?
23:36  Odracoon: "b"
23:37  papna: Odracoon: What did you want to do?
23:37  Odracoon: "b"!
23:37  papna: Odracoon: for b in a:
23:37  papna: "b"
23:37  Odracoon: No dude
23:37  KirkMcDonald: epsolon77: Did you recompile PIL after installing the dependencies?
23:37  Odracoon: the "b" that is in a
23:37  Odracoon: Values of a not keys
23:37  KirkMcDonald: Odracoon: for key, value in a.iteritems():
23:38  papna: Odracoon: For value in a.itervalues():
23:38  KirkMcDonald: That, too.
23:38  Odracoon: Can I do for b in a: a[b]?
23:38  epsolon77: KirkMcDonald:  I should have.  ran python2.7 setup.py clean, then build_ext -i then install
23:38  KirkMcDonald: Odracoon: Yes.
23:38  Odracoon: Yay!
23:38  Odracoon: Tnx ^^
23:39  papna: Odracoon: Sure, but the iteritems form is probably more common.
23:42  Odracoon: I'm almost releasing the first version of my blender to ogre exporter :3
23:43  Odracoon: It will be like
23:43  Odracoon: The first thing useful I ever coded in my whole 4 year programmer life!
23:44  kephu: Hi
23:44  kephu: I'm having a weird problem with mysqldb, is this the right channel to begin with?
23:44  _habnabit: kephu, mysqldb is pretty terrible.
23:44  _habnabit: kephu, why are you using mysql in the first place?
23:45  Odracoon: Because its MY sql?
23:45  kephu: might be the case, but I'm doing a quick hack for something I need. Also, it's mysql because of requirements beyond my control
23:45  kephu: so
23:45  _habnabit: kephu, I'm sorry.
23:45  _habnabit: kephu, but if you want to access mysql databases, use oursql.
23:46  kephu: first I've heard of it, to be honest. What makes it better than mysqldb?
23:46  notk0: kephu, if you want to access mysql databases use mysql
23:46  _habnabit: Well, it was written specifically because mysqldb is trash.
23:47  _habnabit: notk0, what does that mean
23:47  notk0: _habnabit, you know mysql?
23:48  notk0: _habnabit, http://www.mysql.com/
23:48  _habnabit: notk0, can you get on with clarifying your nonsense statement
23:48  epsolon77: KirkMcDonald:  Any idea's?  I'm running out quickly......
23:49  dash: notk0: the discussion is about which python module to use to access a mysql database.
23:49  notk0: dash, oh my bad, sorry
23:51  jaapz: hi, i am trying to use the tarfile module to extract files from a tar.gz file, i want to extract them to /usr/share/somedir/anotherdir, when i call the extractall function on a tarfile object, it doesnt crash, doesnt give an exception, just runs, but when i look in the dir, there is nothing there! How is this possible?
23:52  papna: jaapz: The paths of the files inside the tarball might be somewhere other than you expect.
23:52  papna: jaapz: Or you could be silencing the error.
23:52  jaapz: papna, i do a tarfile.list() and it just shows normal dir with normal files
23:53  jaapz: and how am i silencing the error then?
23:53  papna: jaapz: I clearly haven't seen your code.
23:54  jaapz: papna: well it isnt more than just opening the tarfile object and calling extractall on it
23:55  bob2: jaapz: http://paste.pocoo.org/
23:55  cypha: why is "return result" needed here? doesn't result.append(a) cause the [result] list to be populated anyway? http://pastebin.com/aHCkXr0W
23:55  infobob: http://paste.pound-python.org/show/536/ (repasted for cypha)
23:56  bob2: cypha: how else would the caller get access to result?
23:56  cnfer: zamba: sort of
23:56  bob2: cypha: functions without an explicit return statement return None
23:56  papna: cnfer: It lets whoever calls fib2(14) to *get* the list.
23:56  papna: cypha: ^
23:56  papna: cypha: If you didn't return the list, then the person who called your function wouldn't get it.
23:57  cypha: what if i typed fib2(200) (with no return result) and then typed "result" afterwards to show me the new value of that variable
23:57  cypha: list variable
23:57  bob2: then you'd get an exception because result won't exist
23:57  cypha: result = [] causes it to exist, no?
23:58  cnfer: zamba: off to bed soon, though
--- Log closed Wed Dec 15 00:00:31 2010
