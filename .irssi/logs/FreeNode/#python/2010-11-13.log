--- Log opened Sat Nov 13 00:00:04 2010
00:00  hsa2: I didn't get what I should decode :S
00:00  Yhg1s: hsa2: the bytes string. the result of out.communicate()[0].
00:01  hsa2: Can't I  get a unicode string from communicate?
00:01  Yhg1s: not without decoding it, no.
00:01  Yhg1s: processes communicate through bytes.
00:02  hsa2: pre_vol = out.communicate()[0].decode() does the work right?
00:02  Yhg1s: not without passing the correct encoding, no.
00:03  hsa2: pre_vol = out.communicate()[0].decode('utf-8') ?
00:03  Yhg1s: sure.
00:03  hsa2: great :)
00:03  hsa2: Thanks Yhg1s
00:04  bob2: (if that is the correct encoding)
00:07  aidan: I broke pickle ...
00:07  aidan: http://dpaste.com/274598/
00:08  dash: aidan: pickle was broken when you found it. ;)
00:08  dash: things like this are why we recommend never using it.
00:13  aidan: dash: I need to pass data around between python objects as a binary string
00:13 --- Diod is now known as Diod_
00:13  aidan: do I have other options?
00:13 --- Diod_ is now known as Diod
00:14  strtok: if __del__ isn't guaranteed to be called, how can i write exception safe code in python?
00:15  KirkMcDonald: strtok: Context managers are a typical thing.
00:15  KirkMcDonald: strtok: The with statement, in other words.
00:15  Yhg1s: I'm not sure why you think __del__ has anything to do with exception-safe code.
00:17  felipeochoa0918: hello! I'm trying generate all partitions with components of length one or two for a given string. Instead of recursing through, I wonder if there's any built-in that could help (I'm on 3.1) here
00:18  strtok: Yhg1s: i'm not sure how to answer you
00:18  gregcoit: what's the best way to to test if a string is not empty?
00:18  KirkMcDonald: gregcoit: if s:
00:18  Yhg1s: strtok: well, it's simple: what would you do in a __del__ method that makes your code more safe for exceptions? (As opposed to safe for everything else, if you want.)
00:18  felipeochoa0918: gregcoit: as long as you know it's a string, go with kirk
00:18  gregcoit: KirkMcDonald: that seems simple!  i didn't expect it to be so concise
00:18  strtok: Yhg1s: free/destroy resources or locks?
00:19  Yhg1s: strtok: resources are automatically taken care of.
00:19  KirkMcDonald: felipeochoa0918: I am unclear on your problem.
00:19  Yhg1s: locks should be done in try/finally or (in 2.5 and later) the with statement.
00:19  aidan: dash: find the location in memory of the python object and pass that between processes? :P
00:19  gregcoit: KirkMcDonald: oh, I see now,  simply, if message then ....  nice
00:19  KirkMcDonald: I wouldn't say that "resources" are automatically taken care of so much as memory is automatically taken care of.
00:19  Yhg1s: KirkMcDonald: as are files.
00:19  felipeochoa0918: kirk: an example, "123" becomes ("1", "23") , ("12", "3"), ("1", "2", "3")
00:20  KirkMcDonald: Yhg1s: Assuming the file object's __del__ is called.
00:20  came0: im trying to work with code.InteractiveConsole but im not sure how to grab errors.  i tried two spots in this example (line 34 and 38) but neither try statment suceeds.  any ideas? http://sprunge.us/aCaa?py
00:20  Yhg1s: KirkMcDonald: nope! it's not done by __del__.
00:20  Yhg1s: (it's done by tp_dealloc.)
00:20  KirkMcDonald: Yhg1s: Oh ho.
00:20  KirkMcDonald: Yhg1s: Ah.
00:20  KirkMcDonald: Yhg1s: Will that always be called? I'd expect at least some of the caveats of __del__ to apply to that as well.
00:20  Yhg1s: came0: grab which errors?
00:21  Yhg1s: KirkMcDonald: it will be called more often, because it doesn't inhibit cleanup. It might not get called at process exit (although you'd have to store a file in a weird location for that to happen) but the OS takes care of files when the process exits, anyway.
00:21  felipeochoa0918: KirkMcDonald: an example, "123" becomes ("1", "23") , ("12", "3"), ("1", "2", "3")
00:21  came0: Yhg1s: well im taking the first word of the input line and appending "()" to it then passing it to InteractiveConsole.push() to execute it.. so if the function doesnt exist it returs a NameError, but I cant seem to grab it with try/except
00:22  KirkMcDonald: Yhg1s: That's true.
00:24  Yhg1s: came0: oh, well, that's because the console doesn't raise the exception, it prints it.
00:24 --- osaucey is now known as osaucey|aw
00:24  Yhg1s: otherwise, your console would stop working after the first exception.
00:25  dash: aidan: what kind of data?
00:26  jm_: felipe: I don' see any built-in/easy way of doing this, so your solution is probably acceptable
00:26  aidan: dash: it's a python object, plus a huge array of numbers and strings (and by array I mean list)
00:26  Yhg1s: came0: perhaps you want to override the 'showtraceback' method.
00:26  dash: aidan: okay. and what are you doing with it?
00:27  came0: Yhg1s: thanks i'll check that out
00:27  KirkMcDonald: felipeochoa0918: My first instinct is to notice that the number of solutions will equal 2 ** (len(s) - 1)
00:27  felipeochoa0918: _jm:thanks! i'll work on optimizing the code instead of digging through the doc
00:28  _habnabit: That's a hell of a line to come back to.
00:28  felipeochoa0918: KirkMcDonald: I don't think it blows up quite that quickly. Actually, you just made me see a connection.... to the fibonaccis
00:28  jm_: felipe: what do you mean by optimizing the code ? improving its layout or improving the execution speed ?
00:28  KirkMcDonald: felipeochoa0918: I suspect you'll find that it does.
00:28  felipeochoa0918: KirkMcDonal: so it does blow up that quickly then
00:29  felipeochoa0918: jm_: both. mainly layout :)
00:29  dash: _habnabit: your 1 Apr idea sounds better all the time
00:29  dash: _habnabit: in fact that should be a tagline for it
00:29  aidan: dash: it's passed into a gearman instance (in C) manipulated and then comes back
00:29  KirkMcDonald: felipeochoa0918: Think about it this way: Any two adjacent characters will be in one of two states: Either they will be joined together or not.
00:29  dash: aidan: well, it's not like pickle is easy to parse from C
00:29  _habnabit: dash, what should be the tagline?
00:30  Dulak: is it possible to create a class dynamically?  is there a class generator or factory in python?
00:30  dash: aidan: what does this data represent? what's being done to it?
00:30  dash: _habnabit: "spend your time making your code faster, not digging through docs"
00:30  _habnabit: dash, oh, yes, that's good.
00:30  dash: Dulak: the 'class' statement.
00:30  felipeochoa0918: KirkMcDonald: but if two chars are adjacent, the next pair necessarily is not! I'm thinking of a recursion because the first char is either adjacent to the second one or it isn't
00:30  KirkMcDonald: felipeochoa0918: Oh, it's in pairs.
00:30  KirkMcDonald: felipeochoa0918: I see.
00:30  felipeochoa0918: KirkMcDonald: it's still exponential, though,
00:30  aidan: dash: it's passed through c, back into python ... the C part just needs a blob
00:31  came0: is there a way to see the code of a module in the interactive console?  or do I have to open a text editor and open it in the site-packages directory?
00:32  Yhg1s: there is a way, but it's not very readable. Opening it in your own editor or pager is a better idea.
00:32  KirkMcDonald: came0: print module.__file__, copy, paste :-)
00:32  Yhg1s: but if you really must, see inspect.getsource.
00:32  came0: KirkMcDonald: Yhg1s: thanks :)
00:32  Dulak: dash: say I wanted to create a class based on something dynamic, like a database field,  for each field, create a class named after the field how would that be done?
00:32  jm_: cameo: are you using the ipython shell by any chance, if so, you an easily do that
00:34  dash: Dulak: i'd use sqlalchemy or storm or axiom
00:34  Yhg1s: Dulak: but if you wanted to do it by hand, the 'class' statement
00:34  Yhg1s: possibly along with 'setattr', depending on where and how you want it.
00:35  came0: jm_: hmm does that require X11?
00:38  Dulak: dash: I am using an ORM from couchdbkit, I'm trying to build an app to explore a couchdb.  The ORM specifies the doc_type in the document corresponds to the class name created by the orm, which is arbitrary.  I want to generically browse it and dynamically create orm classes based on documents in the database.
00:40  came0: Yhg1s: any way to redirect the output of inspect.getsource to a /tmp/file?
00:40  Yhg1s: came0: why on earth would you want that?
00:41  Yhg1s: came0: perhaps you want inspect.getsourcefile instead.
00:41  came0: Yhg1s: to read it in my text editor... rather than typing out the file locaation on disk... but also beause im curious if you can redirect output from the python console to files as well
00:42  Yhg1s: you could, by replacing sys.stdout. it's a bad idea. all of this is a little silly. it's trivial to find the right file to open, after all, so why would you copy anything?
00:43  Dulak: a macro to just open the editor on that file at that line would be more useful
00:44  sieson: I'm looking for a link that explains how to generate excel files from various other formats i.e. html. xml, csv etc
00:44  D-vo: xlwt xlrd xlutils
00:44  kzar: So I'm catching all exceptions at a point in my code because I have to, it must return OK even when it's not. Anyway that makes debugging trickier, I'm logging the traceback.format_stack() , the error and other details but I'm still not really getting enough information. Is there a way to log a more detailed traceback or something? (traceback.format_stack() seems to skip the vital few steps in my code.)
00:45  came0: Yhg1s: i use a text based text editor in my console with no X11 or mouse so its nice to be able to dump the results of a fucntion into a file and read them from another program and stuff like that.  maybe not the best way for this particular situation but it would be nice to know.  like being able to pipe the results of a fucntion into another program... or execute shell commands from withen the
00:45  came0: interperter... stuff like that
00:45  sieson: D-vo: thanks
00:45  aidan: hahaha, look at the last post in this thread: http://www.daniweb.com/forums/thread147657.html
00:46  Yhg1s: kzar: you may be looking for traceback.format_exc or traceback.format_exception instead.
00:46  D-vo: sieson, depending on how 'pretty', or how 'complex' you need to get, you can use an actual MS Excel installation on windows with python win32com to control it
00:46  D-vo: which is what i am doing in a VM currently (yuck)
00:47  Yhg1s: came0: and I answered it: replace sys.stdout, just like in any other python code. But don't do that. it's very disturbing, in the interactive interpreter.
00:48  sieson: D-vo: sounds good, I just need to make sure the excel file is compatible with openoffice and older versions of Excel.
00:48  D-vo: xlwt should be fine then
00:48  came0: Yhg1s: ok thanks
00:48  kzar: Yhg1s: thanks
00:48  D-vo: sieson, sec let me find a couple of links for you
00:51  mercutio22: Some help interpreting this line: print 'It took %0.2f to enter your name' % total_time -- what does '0' do?? http://docs.python.org/release/2.5.2/lib/typesseq-strings.html says 'The conversion will be zero padded for numeric values.' What does it mean?
00:51  qorep: I have a python file that has really weird indentation level changes: http://pastebin.com/8F4kWwqr first it uses 4 to get to the def, then another 6 to the isPlaying
00:51  infobob: http://paste.pound-python.org/show/39/ (repasted for qorep)
00:51  qorep: what on earth do i do with this?
00:51  Yhg1s: mercutio22: it means it will be padded with zeroes if necessary to satisfy the width requirement.
00:52  qorep: is there some way to have python parse and then spit out newly indented code with some conformity?
00:52  Yhg1s: mercutio22: because you don't specify a width, it doesn't add anything. But see the difference between "%05.2f" % 0 and "%5.2f" % 0
00:52  Sunray: assuming %02u -- and given the value 1 -- that would print "01" - however the 0 on a prefix to .%2f is afaik unecessary ?
00:54  Yhg1s: qorep: Python does not. some editors have a re-indent feature.
00:54  qorep: Yhg1s: know any editor that does re-indenting for python?
00:55  Yhg1s: vim and emacs, I'm sure, but I don't remember the details. Also see http://pypi.python.org/pypi/Reindent/
00:55  mercutio22: Yhg1s: english is not my native language. I am trying to grasp what 'to be padded with means'. I take it will be completed with zeroes? on the sufix?
00:55  bob2: emacs can do it
00:55  Yhg1s: mercutio22: zeroes will be added to the front, in this case, yes.
00:55  bob2: just C-x h M-C-\
00:55  qorep: Yhg1s: never got it working with vim, I'll check out that Reindent thing though, looks good
00:55  mercutio22: Sunray: yeah... it seems to make no difference
01:02  resixian: freezing wiht py2exe i keep getting 'IOError: [Errno 109] The pipe has been ended'
01:03  resixian: 'works fine' without being frozen, and i do have freeze_support()
01:03  D-vo: sieson, sorrry, work interupted. http://panela.blog-city.com/pyexcelerator_xlwt_cheatsheet_create_native_excel_from_pu.htm http://www.python-excel.org/ (specifically the tutorial.pdf at the bottom)
01:03  saxamo: I have a question in relation to how python (3.x) uses lists. I have code here: http://bpaste.net/show/10938/ And I am curious/puzzled as to why line 32-33 will print out my cards as strings, but the function in line 35 will not print them as such. What is the difference here?
01:04  sieson: D-vo: thanks a lot
01:04  Yhg1s: saxamo: well, line 33 prints the cards individually, which will call str() on them.
01:04  Yhg1s: saxamo: line 35 prints the list, which calls str() on the list. lists don't define the str operation, so it falls back to repr() on the list, which calls repr() on each item in the list.
01:05  Yhg1s: this is so you can see the difference between, say, [[]] and ['[]'].
01:06  saxamo: so they are not strings natively Yhg1s?
01:06  Yhg1s: Which 'they'?
01:07  saxamo: the items in hand
01:07  Yhg1s: the items in the 'hand' list are the objects you put in there. You don't put strings in there. you put Card instances in there.
01:07  saxamo: Ah, okay. I am new to working with classes i had not known they were different.
01:07  Yhg1s: things are what they are. things aren't other things.
01:08  kevinh: hi guys... is there a way to check which attributes a def accepts?
01:08  Yhg1s: kevinh: you mean 'what arguments a function accepts'?
01:08  kevinh: sure
01:08  Gentle: introspection
01:09  Gentle: that keyword should help you to google more than you wanted
01:09  Yhg1s: kevinh: read its documentation, or pydoc or (in Python itself) help(thefun). introspection (what pydoc/help use) can't always tell.
01:09  kevinh: ie ... log.error() in python 2.4 does not accept the "extra" argument
01:09  MostAwesomeDude: WTF. On Ubuntu, adding a virtualenv's bin to the PATH does not work all the time.
01:09  Yhg1s: kevinh: the documentation would be a good place then.
01:09  kevinh: so i want to check if log.error will take the arg
01:09  MostAwesomeDude: The shebang "/usr/bin/env python" still uses the system Python. Anybody else experienced this?
01:10  Yhg1s: kevinh: check which Python version it was added in, and then check the Python version to see whether you should pass it.
01:10  Yhg1s: MostAwesomeDude: well, that would use the first 'python' binary that appears in $PATH.
01:10  kevinh: it's more complex than that though ... there are also internal functions unique to the application that mimic logging for speed ... so they also lack the extra argument
01:11  kevinh: it would be easiest if i could just do "if self.log_info.accepts_arg("derp"" or some such
01:11  Yhg1s: kevinh: yeah, but there's no good way to do that.
01:11  kevinh: hmm
01:12  kevinh: maybe I will just wrap the logging functions and put the version checking stuff there ... that way I don't slow down the other function calls when logging is off... probably better anyhow
01:12  juanmabc: would PyExe work with a python + pygame script to not force an interpreter install just for one app?
01:12  Yhg1s: for example, many decorators and stubs and other wrappers will take *args and **kwargs, meaning any argument and keyword argument, and pass them along as-is. That would mistakenly lead you to believe the 'extra' argument will work, when it won't. Introspection can't see that.
01:13  Yhg1s: kevinh: just define different functions for different Python versions.
01:13  Yhg1s: kevinh: no slowdown at all then.
01:13  juanmabc: (interesting how some computer teachers does not know, not even want to, this kind of stuff)
01:13  kevinh: Yhg1s: that's sort of what I will do ... essentially the issue is it's a server ... and on the get_response it writes to the access log...
01:14  kevinh: but I want a common call there, as adding a bunch of logic into the get_response will slow down the server a bunch
01:15  kevinh: so what I'm doing is just passing different methods for each... thoguh I'd like to enable the new formatting stuff made available with the newer python versions .. though with that, the arguments passed to the common function will be different
01:15  kevinh: what I'll probably do is just add extra to the internal functions and do the formatting within those... and then make a wrapper that has the logic in it for the python logging stuff
01:16  kevinh: will work, i think
01:16  MostAwesomeDude: Yhg1s: Hmm. It should, yeah, but it doesn't.
01:16  MostAwesomeDude: ~/local/bin is the first thing in $PATH and there's a python binary in there, but.
01:19  juanmabc: MostAwesomeDude: type awesome command: type -a python
01:19  MostAwesomeDude: python is /home/simpson/local/bin/python
01:19  MostAwesomeDude: python is /usr/bin/python
01:20  Yhg1s: MostAwesomeDude: sounds like PATH isn't the PATH you think it is.
01:20  Yhg1s: is it reproducible?
01:21  MostAwesomeDude: Yhg1s: Yep. Be on Ubuntu, set $PATH to include a virtualenv. The virtualenv works by itself, but env uses the system python.
01:23  MostAwesomeDude: The *really* strange part is that it seems to vary.
01:24  Yhg1s: MostAwesomeDude: well, if it "seems to vary", that suggests it's not reproducible :)
01:24  Yhg1s: what does '/usr/bin/env python' execute?
01:24  MostAwesomeDude: /usr/bin/python
01:24  Yhg1s: and in that interpreter, what does 'import os; print os.environ['PATH']' print?
01:25  MostAwesomeDude: ~/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games
01:25  Yhg1s: And in that interpreter, what does 'os.access(os.path.expanduser('~/local/bin/python'), os.X_OK)' say?
01:26  juanmabc: MostAwesomeDude: the awesome ~ expands to home of user, so it is awesoming variable
01:26  MostAwesomeDude: juanmabc: Yes, that's intentional; I have different names on different boxes.
01:26  MostAwesomeDude: This works on Fedora, Gentoo, and Debian, BTW.
01:26  MostAwesomeDude: ...Wow. What. Really.
01:27  MostAwesomeDude: There's a ~/local/bin/activate. Sourcing it makes everything work.
01:27  MostAwesomeDude: Is this an official part of virtualenv, or an Ubuntu thing?
01:27  Yhg1s: no idea, I don't use virtualenv.
01:28  juanmabc: FGD, nice scheme
01:29  juanmabc: what about a PyExe of python + pygame?
01:29  MostAwesomeDude: Time to go amend .bashrc. Thanks for your time, guys.
01:30  juanmabc: congrats
01:36  bl4ckcomb: Yhg1s, do you know whether the threading issue (that not only data, but also code) is shared between threads is an issue for every interpreted language? (I'm trying to understand this deeper)
01:38  shiftingcontrol: http://paste.enzotools.org/show/1380/ ,i m getting float object not allowed for assignment
01:39  shiftingcontrol: w[loop]=s/dist this is the statement where i get error
01:39  _habnabit: bl4ckcomb, data and code is shared between threads in *every* language.
01:39  _habnabit: bl4ckcomb, I don't know what you're trying to say by 'interpreted languages'.
01:39  Brend: shiftingcontrol, w is a float.
01:39  _habnabit: bl4ckcomb, this is the problem with threads, though.
01:39  Brend: You set it to one on line 54.
01:40  bl4ckcomb: _habnabit, interpreted like they aren't compiled to machine code, but to bytecode
01:40  _habnabit: bl4ckcomb, what difference would that make? Also, how do JITs factor into that?
01:41  talented: if a function returns a tuple and it's has just a single element, if I wanted to compare it, should I use tuple[0] == 'this' or should I use 'this' in tuple?
01:41  shiftingcontrol: Brend how do you say i m using for first time
01:41  Brend: shiftingcontrol, pardon?
01:41  bl4ckcomb: _habnabit, idk, I'm trying to understand why thread are being called evil every time I'm in a discussion in the python context
01:42  melusinechan: do i realy need to import re to use regular expression in python ?
01:42  _habnabit: bl4ckcomb, threads are awful in every language.
01:42  bl4ckcomb: _habnabit, so it's generally better to scale using different processes?
01:42  _habnabit: bl4ckcomb, they don't scale, and they require much more boilerplate and careful attention to detail to prevent bugs.
01:42  melusinechan: _habnabit: thread are beatifull in c++, mostly with boost ^^
01:42  _habnabit: melusinechan, haha, yeah, no.
01:43  _habnabit: bl4ckcomb, and yes, scaling with multiple processes works pretty well.
01:43  shiftingcontrol: Brend :w[loop] i the first i m using w[loop] should become a list right ?
01:43  melusinechan: _habnabit: did you already use boost ?
01:43  shiftingcontrol: Brend :w[loop] is the first time, i m using w[loop] should become a list right ?
01:43  Brend: shiftingcontrol, no.
01:43  Brend: shiftingcontrol, in Python, things don't autovivificate the way they do in say PHP
01:43  Brend: If you want it to be something, you have to set it to that.
01:44  shiftingcontrol: Brend:ok,w=list() is fine ?
01:44  melusinechan: _habnabit: haha, yeah, no you didn't .
01:44  _habnabit: melusinechan, why do you think that that is 'beautiful' ?
01:44  Brend: shiftingcontrol, yes, or "w = []". But then w[loop] isn't going to exist.
01:44  Brend: shiftingcontrol, maybe you want a dict! Or maybe you want to append to the list each time.
01:44  melusinechan: _habnabit: simple to use, optimised, cross platform, and near the machine.
01:44  _habnabit: melusinechan, also, I'm not sure why you assume I haven't used boost. My hatred of C++ is not just idle speculation.
01:45  shiftingcontrol: Brend append can be a good choice
01:45  melusinechan: _habnabit: Oo ok.
01:45  Brend: (I like Boost! And threads! And C++!)
01:45  _habnabit: melusinechan, I'm just curious. What did you use threads for with boost?
01:46  _habnabit: bl4ckcomb, you're terrible.
01:46 * _habnabit kicks irssi.
01:46  _habnabit: Brend, ^
01:46  Brend: I am pragmatic!
01:46  bl4ckcomb: :p
01:46  melusinechan: _habnabit: you know, manage multi file transfer, multi chat ...
01:46  melusinechan: _habnabit: video games ..
01:46  Brend: Okay yeah not like that
01:46  melusinechan: _habnabit: you know nearly every development in c++ ...
01:46  Brend: One-thread-per-task is indeed a silly way to do things.
01:47  _habnabit: melusinechan, oh, my, you say they were all things that would've been better done with nonblocking IO?
01:47  Yhg1s: bl4ckcomb: few languages expose code as data to the extend Python does.
01:47 --- bellicose_ is now known as bellicose
01:47  Yhg1s: (but in the ones that do do it, it's considered a good thing, threads notwithstanding.)
01:47  melusinechan: _habnabit: didn't take me long to understand thread ..., and when i used boost it'is just a calling a function
01:47  Yhg1s: it has nothign to do with interpreted versus otherwise, though.
01:48  bl4ckcomb: ah I see
01:48  Yhg1s: melusinechan: it took me *years* of deep study to think I undrestood threads, and then a coworker proved me wrong in so many ways I gave up.
01:48  Brend: melusinechan, what?
01:48  Yhg1s: (he's way smarter than me.)
01:48  melusinechan: _habnabit: as simple as that : boost::thread thread(&Sender::listen, &sender);
01:48  bl4ckcomb: Yhg1s, I'm still feeling like this is an endless discussion... do you have some lecture on that?
01:48  shiftingcontrol: Brend:thanks
01:48  Yhg1s: melusinechan: yes, that's how to *use* a thread. that doesn't mean you understand how it works, or what its limitations are, or what effect it has on other code.
01:48  Brend: (Why does a sender listen?)
01:48  Yhg1s: bl4ckcomb: on what part?
01:49  bl4ckcomb: Yhg1s, on when threads are a good or a bad practice
01:49  talented: <-- is still trying to get his head around concurrent programming
01:49  melusinechan: Brend: no the sender read bits file,  and send it into packets via tcp/udp connections ^^
01:50  melusinechan: Brend: it can also send message ...
01:50  melusinechan: Brend: bu i don't use thread to send a message ^^
01:50  Yhg1s: bl4ckcomb: there isn't a clear-cut answer, because 'threads' doesn't really say much. POSIX threads, or pthreads, have very distinct downsides. Other things other languages call 'threads' have different downsides and upsides. pthreads are really only good for turning a blocking API into a non-blocking one, and even then they're pretty crap.
01:50  Yhg1s: melusinechan: read this and see if you still understand threads: http://code.google.com/p/unladen-swallow/wiki/MemoryModel
01:51  melusinechan: Yhg1s: ... i don't want to understand thread ...
01:51 --- zemanel_ is now known as zemanel
01:51  melusinechan: Yhg1s: where do you come from with that ^^
01:51  Yhg1s: melusinechan: then I suggest you don't use 'em, because if you use 'em without understanding them, pain will ensue.
01:51  Yhg1s: (even if you do understand them pain will ensue, but at least you'll know from whence it came.)
01:51  melusinechan: Yhg1s: you're kind but i don't need your help i know everything i should know about thread.
01:51  Yhg1s: melusinechan: obviously not.
01:51  Yhg1s: but good luck!
01:52  Brend: Yhg1s, that page is in desperate need of a "raw" view that doesn't color it at random
01:52  melusinechan: Yhg1s: my god O o
01:53  talented: just take page styling off and it's uncoloured
01:53  bl4ckcomb: Yhg1s, ok I'll try to find some differenses between the posix and winapi threading.
01:53  _habnabit: melusinechan, well, I don't envy your coworkers and successors.
01:53  Yhg1s: bl4ckcomb: don't bother. winapi isn't substantially better.
01:53  bl4ckcomb: thx for the discussion all of you :)
01:53  _habnabit: melusinechan, I can tell you haven't needed to debug your code yet!
01:53 --- signpost is now known as descartes
01:53  bl4ckcomb: Yhg1s, so they basically both have the same pitfalls?
01:53 --- descartes is now known as signpst
01:54 --- signpst is now known as signpost
01:54  Yhg1s: bl4ckcomb: pretty much.
01:54  Yhg1s: bl4ckcomb: the main issue is that you have practically no control over what thread gets run when, and they have a tendency to run at the most unopportunate times.
01:54  Yhg1s: and touch things you didn't realize they would be touching.
01:54  bl4ckcomb: Yhg1s, ah k, then I'll limit it to posix since i generally develop on *nix
01:54  bl4ckcomb: ah ok
01:55  melusinechan: Yhg1s: http://boostcon.blip.tv/file/4171562/
01:55  bl4ckcomb: thx again
01:55  bikcmp: Hi all, where can I find the python encodings directory (installing an application)
01:55  bikcmp: I'm on a ubuntu box, by the way.
01:55  melusinechan: Yhg1s: i advice you to read the pdf file (video is fun but not very good quality)
01:55  Yhg1s: melusinechan: no thanks.
01:56  melusinechan: Yhg1s: so you will explain to boost developper how use thread ..
01:56  Yhg1s: melusinechan: I don't care.
01:56  melusinechan: Yhg1s: ok :)
01:56  Yhg1s: bikcmp: what 'python encodings directory' woudl that be, and why would you need to know it when installing an application?
01:57  bikcmp: Yhg1s: I'm installing a encoding.
01:57  Yhg1s: bikcmp: it doesn't have to be in a particular directory, you just have to register it.
01:57  bikcmp: Yhg1s: How can I register it?
01:57  Yhg1s: bikcmp: typically you register a search function using codecs.register()
01:58  Yhg1s: bikcmp: /usr/lib/python2.?/encodings/__init__.py has an example.
01:58  ssbr: Yhg1s: why wasn't that ever made a proper PEP?
01:58  Yhg1s: ssbr: Jeff's the only person who understands it :)
01:59  Yhg1s: so nobody commented :)
01:59  melusinechan: Yhg1s: i'm sorry, but were you aware i was talking about c++ ?
01:59  _tpw_rules: hey, i need help with pyqt and py2exe
01:59  _tpw_rules: when i compile with py2exe, it isn't including the database driver
01:59  Yhg1s: melusinechan: are you aware that POSIX threads are equally annoying in any language?
01:59  bob2: ssbr: pep for what?
02:00  Yhg1s: melusinechan: C actually has even less of a defined memory model than Python does.
02:00  _tpw_rules: and when i launch my app, it says "QSqlDatabase: QSQLITE driver not loaded\nQSqlDatabase: available drivers:"
02:00  Yhg1s: even the new C++ standard doesn't do better
02:00  ssbr: bob2: it'd be an expository PEP, not a suggestion. http://code.google.com/p/unladen-swallow/wiki/MemoryModel
02:00  ssbr: I haven't read it yet. I wanna see where I fail, if failure is inevitable. :X
02:00  melusinechan: Yhg1s: i don't know how python implement it ... just would check, we were talking about the same thing ...
02:00  Yhg1s: melusinechan: Python just exposes the POSIX api, really.
02:00  Yhg1s: so it's equally crap.
02:01  Yhg1s: (the threads are the same threads, with the same limitations and crappiness.)
02:01  _tpw_rules: actually, i think i've solved it
02:02  bob2: ssbr: wow
02:02  Yhg1s: ssbr: so far, the best I've heard of anyone doing is understanding everything up to 'self-justifying values' :)
02:02  Yhg1s: (that's about where I gave up as well, and that was *with* explanations from Jeff sitting next to me.)
02:02  bob2: _tpw_rules: add it to the special module list for py2exe?
02:03  ssbr: Ouch.  I got in trouble at "Sequential Consistency", so I'm probably in for a rough ride.
02:03  ssbr: To be fair though, I think that section expected you to already know what sequential consistency was. All it had to say was that threads don't get executed at the same time, but in some order. :(
02:03  ssbr: instead it just says they get executed in some order, and I was going "... instead of what?"
02:03  ssbr: eh, threaded actions*
02:05  Yhg1s: yes, the document is written by one person with no additional editing, so there's lots of places that could use some clarification.
02:10  ssbr: Yeah, now I'm on Zombie threads and I certainly don't get it at all. I don't follow to "Can produce ``r2 == r5 == 0`` but ``r4 == 3``, proving that ``p.x`` went from 0 to 3 and back to 0."
02:10  ssbr: Oh, it's explaining about the optimization.
02:12  ssbr: I'll try again when I've had some rest. Is this document actually good?
02:12  melusinechan: Yhg1s: i just overlook the doc you sent me ....
02:12  ssbr: (aside from being apparently incomprehensible, anyway)
02:12  melusinechan: Yhg1s:  "Nearly all programs should simply use locks
02:12  melusinechan: to guard their shared variables, and this PEP highlights some of the
02:12  melusinechan: strange things that can happen when they don't"
02:12  Yhg1s: ssbr: the suggestions are sensible. the background and references are good. I'm not sure what else to say about it.
02:13  Yhg1s: melusinechan: ok, and?
02:13  melusinechan: s/doc/PEP
02:13  Yhg1s: it's not a PEP, just a proposed one.
02:13  ssbr: Yhg1s: I suppose you couldn't say much more without understanding the content in between the background and conclusion :P
02:13  ssbr: That's good enough.
02:13  melusinechan: Yhg1s: by lock do they hear mutex ?
02:13  Yhg1s: a mutex is one kind of lock, yes.
02:14  melusinechan: ...
02:15  melusinechan: Yhg1s: i don't want to be pissed of, but talking and advising me about thread without knowing them ... is not very wise
02:15  Yhg1s: melusinechan: ... right.
02:15  Yhg1s: melusinechan: I thin you misunderstand what I was saying, rather severely.
02:15  Yhg1s: melusinechan: good luck with your threads.
02:16  melusinechan: Yhg1s: so yes using thread without locks is bad.
02:16  melusinechan: Yhg1s: maybe i missed some part of the chat, maybe not, anyway good night :)
02:19  dash: melusinechan: using threads _with_ locks has problems too :)
02:19  dash: Hans Boehm did a nice google tech talk on threads in C++
02:19  dash: and how they're ridiculous
02:20  dash: melusinechan: this is my favorite explanation: http://www.erights.org/elib/concurrency/event-loop.html#safety
02:25  Pylix: i installed 2.7 on unbuntu 10.10 and i think it messed some stuff up. catfish and exaile won't launch and i get this bad pyc file runtime error.
02:26  bob2: what did you do?
02:27  melusinechan: dash: i just read the safety part, that's a good example of using badly thread (tell me if i mess something)
02:28  Pylix: arrgh
02:28  Pylix: i'll figure it out
02:30  melusinechan: dash: to me threading is a way of doing two ore many different actions at the same time, or two(many) same action (with differents objects) at the same time ...
02:30  veteran: hello i wan't some help.i am new in python an i want to make a simple programm with gui.(like calculator).from where can i start?
02:32  bob2: veteran: have you read one of the tutorials in the /topic?
02:32  Pylix: if i go to the terminal and type in catfish i get bad magic number in .pyc i shoulda removed 2.6 before installing 2.7
02:32  veteran: bob2, tutorial for what?
02:32  Pylix: python
02:32  bob2: veteran: python
02:32  veteran: a know somw things
02:32  bob2: Pylix: no
02:33  bob2: veteran: if you know another language well already, the tutorial is great and short and covers just about the whole language
02:33  veteran: bob2, i have writen the code in python for my calculator
02:33  bob2: Pylix: in wwhat way did you 'install' python2.7?  and exaile?  and catfish?
02:33  Pylix: just 2.7
02:34  Pylix: exaile and catfish came with my distro of ubuntu
02:34  Pylix: they just don't work now
02:34  bob2: ...
02:34  KirkMcDonald: Pylix: The error means that it is attempting to use a .pyc file compiled for one version of Python in a different version of Python.
02:34  veteran: bob2, can i add graphics to my existing python code?
02:34  bob2: veteran: sure
02:34  bsdbandit: hey Pylix are you using a mac
02:34  bsdbandit: ?
02:34  Pylix: no i am not using a mac
02:34  bob2: veteran: tk is included, pygtk is quite popular
02:34  veteran: bob2, from where?
02:34  bob2: Pylix: how on earth did you install python2.7
02:34  bsdbandit: oh ok
02:34  bob2: Pylix: what actual thing did you do
02:35  Pylix: i ran commands that it asked me to run
02:35  veteran: veteran, which is the best to start learning?
02:35  bob2: good god
02:35  bob2: Pylix: did you install the ubuntu package
02:35  Pylix: make install i think
02:35  KirkMcDonald: Pylix: You built and installed Python yourself?
02:35  bob2: that was silly, ubuntu 10.10 includes python2.7
02:35  veteran: which is the best to start learning?
02:36  Pylix: mine had 2.6
02:36  bob2: veteran: pygtk is probably a better bet
02:36  bob2: Pylix: I think you're mixing things up
02:36  Pylix: i installed xubuntu
02:36  bob2: Pylix: and mean 'the default versio of python is 2.6'
02:36  bob2: Pylix: which is probably true, and not something you should change
02:36  Pylix: well i did
02:36  Pylix: lol
02:36  bob2: Pylix: just installing the python2.7 package would have been enough to get python2.7
02:37  Pylix: it wasn't a beb file
02:37  bob2: anyway, that was silly, stuff is broken now
02:37  bob2: how did you install exaile and catfish
02:38  veteran: is there a wysiywg tool?
02:38  veteran: is there a wysiywg tool for pygtk ?
02:38  bob2: veteran: for what?
02:38  Pylix: i didn't install them they were also default software provided by ubuntu
02:38  bob2: veteran: layout tool? yes.
02:38  veteran: can you help me with this please
02:38  bob2: Pylix: reinstall python2.6 and python2.6-minimal
02:38  KirkMcDonald: Pylix: I would not normally expect Python 2.7 to be able to see those modules at all, if they are installed for 2.6.
02:38  bob2: veteran: glade
02:39  bob2: Pylix: that might fix things
02:39  Pylix: ok thanks for the heads up
02:39  talented: I have a hex value 0x12345678, how can I split it so it's 0x12, 0x34, 0x56, 0x78?
02:39  Pylix: that won't mess up my 2.7 will it?
02:40  veteran: in glade i can design my programm and write my python code?
02:40  bob2: veteran: no, it is a gui designer
02:40  bob2: veteran: you write python code with your editor, and load the xml files glade produces
02:40  bob2: i think there's something better than glade nowadays but i can't remember the name
02:40  bob2: Pylix: if you want 2.7 install the python2.7 package
02:41  veteran: pygtk us only for gnome?
02:41  bob2: veteran: no
02:41  shiftingcontrol: how ca i find some thing a is declared or not
02:41  KirkMcDonald: shiftingcontrol: Why wouldn't you know?
02:41  bob2: shiftingcontrol: in general you don't, you just assign a default value
02:42  bob2: unlike php where using isset everyone seems to be acceptable
02:42  bob2: er everywhere
02:42  Pylix: package dependencies cannot be resolved
02:42  Pylix: This error could be caused by required additional software packages which are missing or not installable. Furthermore there could be a conflict between software packages which are not allowed to be installed at the same time.
02:42  bob2: Pylix: you missed all the rest of the output (pastebin)
02:43  Blu3droid: type (var) is None
02:43  shiftingcontrol: bob2:got it,and i ve a data want to compare if value is greater than the range i need alter the data but tuple  doesnot allow to alter the data ryt ?
02:43  bob2: Blu3droid: no
02:43  veteran: bob2, can you give me a tutorial tou start ?
02:43  bob2: veteran: the pygtk website has a tutorial
02:43  shiftingcontrol: 			if distance_value >=threshold*s_d:
02:43  shiftingcontrol: 						details[i][new]=details[i][new]-distance_value
02:43  bob2: shiftingcontrol: tuples are immutable, right
02:43  Pylix: well it says there may be a conflict
02:43  bob2: shiftingcontrol: better to use 4 spaces rather than tabs
02:43  bob2: Pylix: anyway, if you want help, pastebin the whole output
02:43  bob2: not the useless bits from the bottom :)
02:44  shiftingcontrol: bob2:ok,but db returns tuple is der any way i can return as list ?
02:44  bob2: shiftingcontrol: well yes, but just making a list or new tuple is easier
02:44  bob2: shiftingcontrol: maybe pastebin (http://bpaste.net/) your code?
02:45  shiftingcontrol: http://bpaste.net/show/10953/
02:46  bob2: I think you want ValueError not TypeError
02:46  veteran: bob2, with glade i can come through some code?
02:47  shiftingcontrol: bob2:ok
02:47  Pylix: http://bpaste.net/show/10954/
02:47  bob2: veteran: not sure what that means
02:47  bob2: Pylix: that's not the whole output - go all the way up to the command you ran
02:47  bob2: Pylix: (sudo apt-get --reinstall install python2.6{,-minimal})
02:48  veteran: bob2, for example now i have write a calculator in python.i can desing it from glade?
02:48  bob2: veteran: run glade, build up a form with all the buttons and labels, export xml, read the pygtk tutorial to learn how to load it in to your app and wire it up
02:49  Pylix: kay uninstalling
02:50  bob2: shiftingcontrol: make a list I guess, but since you don't use the value, it seems a bit pointless :)
02:51  shiftingcontrol: bob2:if yu see my concept actually i need two dimensionally array in integer
02:51  shiftingcontrol: but python doesnot have arrays right
02:51  Blu3droid: hmm, I thought the type test was working. I copied it from a pretty printer.  *learning*
02:52  qwerty1793: hi, if i have a string s, I can do s = s + '' and it wont change s. If L is a list is there an x such that L == L.append(x) ?
02:52  m1chael: data.getElementsByTagName("PrimaryCategory")[0].getElementsByTagName("CategoryID") #  how can i get the value of CategoryID ?
02:53  ssbr: qwerty1793: list.append returns None, and None is never equal to a list. So no.
02:53  nosklo: m1chael: any reason you're using minidom?
02:54  m1chael: because there is too much choice and that is what i stumbled on
02:54  shiftingcontrol: bob2:i need use list inside a list
02:54  nosklo: m1chael: use etree
02:55  nosklo: m1chael: minidom is too hard
02:56  SmartViking: help(align)
02:56  SmartViking: wayt
02:56  SmartViking: sorry
02:56  SmartViking: wring tab...
02:56  Pylix: bob2: it stops here http://bpaste.net/show/10955/
02:57  Blu3droid: for small pages minidom is ok. but it is tolerable
02:58  m1chael: xml is so confusing
02:58  nosklo: not really. minidom is ugly and has a verbose annoying api
02:59  Blu3droid: yup
02:59  nosklo: there's no reason to use it
02:59  nosklo: you have etree
02:59  m1chael: i will never look at it again, etree it is
02:59  m1chael: im reading the etree docs and its just confusing
02:59  nosklo: m1chael: can you provide a pastebin of your xml?
03:00  aj00200: I am using pygtk, but when I try to run the same code I type in the interpreter as a script, it doesn't work. Any ideas?
03:01  nosklo: aj00200: can you provide a pastebin of the code you're refering to?
03:01  m1chael: http://bpaste.net/raw/10956/
03:01  aj00200: nosklo: sure
--- Log closed Sat Nov 13 03:07:25 2010
--- Log opened Sat Nov 13 03:07:48 2010
03:07 --- Users 769 nicks [0 ops, 0 halfops, 0 voices, 769 normal]
03:08  Blu3droid: i've been using pulldom from xml.dom
03:08  Blu3droid: but i'm trying to move everything to py3
03:09 --- Channel #python was synced in 88 seconds
03:09  SmartViking: is there an easy way to just center align text automatically?
03:09  Pylix: bob2: http://bpaste.net/show/10960/
03:09  lvh: SmartViking: In what
03:09  SmartViking: in bash terminal
03:09  Blu3droid: unfortunately, few modules are built for it :/
03:09  lvh: SmartViking: urwid
03:10  lvh: SmartViking: If you have to use something else for talking to terminals: good luck
03:10  SmartViking: lvh: thanks
03:10  Blu3droid: [n]curses
03:11  SmartViking: lvh: But when i downl,
03:11  SmartViking: oad urwid module and gove the program to another person
03:12  lvh: SmartViking: Although you can almost get something sensible iff it doesn't need to be portable with curses.getmaxyx
03:12  SmartViking: will it work?
03:12  lvh: SmartViking: Yes, package urwid with your thing
03:12  SmartViking: ah, i see
03:12  Blu3droid: you can try plain ANSI too
03:12  lvh: SmartViking: Seriously though there's a reason it's called curses
03:13  lvh: Blu3droid: What will that do
03:14  SmartViking: lvh: I have had a small problem with that though since python intrepeter seems to find modules in the current bash path nicely how can i get python to search the directory the executable is launched from for modules?
03:14  Blu3droid: with terminals that support ansi, anything cursor motion and reporting, and color
03:14  lvh: Blu3droid: You still need to know how wide the term is
03:14  lvh: SmartViking: PYTHONPATH, sys.path
03:15  lvh: SmartViking: cwd is in sys.path by default
03:15  SmartViking: ok thanks
03:15  Blu3droid: yes, and ansi supports that
03:15  lvh: SmartViking: That's why exarkun tells you to package stuff the way he does that
03:15  bob2: Pylix: heh
03:15  bob2: Pylix: well, reinstall whatever package 'dpkg -S /usr/bin/python' tells you owns the file
03:15  bob2: Pylix: and be way more careful in future
03:16  Blu3droid: you print the ansi code and the terminal sends it back to you
03:16  bob2: Pylix: probably
03:16  Pylix: heheh
03:16  bob2: fixing /usr/bin/python is the most important thing though
03:17  lvh: Blu3droid: I must be misremembering my ansi codes: are you talking about CNL CUB CUP?
03:17  lvh: Because that doesn't work on most of the terminals I own AFAIK
03:18  SmartViking: lvh: i am creating a program to calculate how much a percentage is out of a day and how much there is left of a day when the percentage given is the current progress of the day and such, the longer i got into the creating the more i understand the importance of functions. Next time i make something i'll do functions a lot.
03:18  lvh: (My other defense is that it's 3:20AM)
03:18  lvh: SmartViking: That means you want urwid
03:19  lvh: SmartViking: Urwid comes with a free ProgressBar widget
03:19  Blu3droid: Esc [ m n x ;
03:19  Blu3droid: etc
03:20  SmartViking: ye but i don't need that since the program works like the user inputs a value and program prints how much that value(%) is hours in a day :)
03:20  lvh: Blu3droid: I know what they look like, but what sequence exactly
03:20  lvh: SmartViking: that still sounds like you want that to m
03:20  lvh: e
03:21  SmartViking: lvh: Why would i want a progress bar for that? :)
03:21  Blu3droid: I'm on my phone, less efficient than laptop for google and irc at the same time ;)
03:21  lvh: Blu3droid: I was thinking CSI 1 E; CSI 1 D;
03:21  Laurenceb: hi, im using subprocess to run a binary application
03:22  Laurenceb: it seems to be being stopped from terminating somehow
03:22  sweetpi: Is there a way to make argparse allow -v and -vv with nargs="?" and still have a required positional argument? example: http://pastebin.com/TDyDxQDG
03:22  infobob: http://paste.pound-python.org/show/41/ (repasted for sweetpi)
03:22  lvh: SmartViking: How is what you are describing different from a progress bar that doesn't move
03:22  lvh: Laurenceb: How do you know that
03:22  Laurenceb: if i run it from the terminal, it quits ok
03:22  Laurenceb: using subprecess from python it refuses to die
03:23  Laurenceb: when it should
03:23  lvh: SmartViking: Urwid is a thing I would no longer consider doing handling terminals without
03:23  Laurenceb: i can kill the process
03:23  ssbr: Laurenceb: have you waited on the process?
03:23  Laurenceb: ssvr: the process kills itself on a signal
03:23  SmartViking: lvh: nah it's be a little silly i think i'd rather want it to be like "x% is y hours in a day" :)
03:23  lvh: Laurenceb: and you're using subprocess.Popen
03:23  nosklo: aj00200: you're missing gtk.main()
03:23  Laurenceb: yes
03:23  lvh: SmartViking: Oh wait you're the guy I had the GPL discussion and the "use a function" discussion with
03:23  lvh: SmartViking: Okay, go use curses
03:24  nosklo: aj00200: otherwise the script ends quickly and you don't even see the window
03:24  aj00200: nosklo: ok, I'll try
03:24  lvh: SmartViking: You seem to learn better from learning the hard way, so I'm not going to try and stop you
03:24  lvh: SmartViking: Have fun
03:24  Laurenceb: if i call it from the command line, it kills itself fine
03:24  aj00200: nosklo: I should mention, the error I get is:
03:24  aj00200: AttributeError: 'module' object has no attribute 'Window'
03:24  nosklo: aj00200: oh, rename your file, from gtk.py to another thing
03:24  Laurenceb: python, its still there after it should have received a signal
03:24  lvh: Laurenceb: That's because your shell waits on it
03:25  nosklo: aj00200: and delete the gtk.pyc that was generated
03:25  lvh: Laurenceb: What signal are you sending it
03:25  Laurenceb: SIGPIPE
03:25  lvh: Laurenceb: (Can you pastebin some code?)
03:25  Laurenceb: k, gust a sec
03:25  aj00200: nosklo: thanks :) its working now
03:25  bob4891: anyone know where i can find a python-poppler binary for win32 python 2.6?
03:25  nosklo: m1chael: http://bpaste.net/show/10961/
03:25  lvh: Laurenceb: Hang on why are you sending sigpipe yourself
03:25  Laurenceb: c code - this is the process
03:25  Laurenceb: http://pastie.org/1294197
03:25 --- DarkJuju is now known as juju2143
03:26  nosklo: m1chael: sorry, but it took longer to read the format you sent me the xml
03:26  Laurenceb: http://pastie.org/1294284
03:26  Laurenceb: python code
03:26  lvh: woo longjmp
03:27  Laurenceb: SIGPIPE is sent by closing a binary it attaches to
03:27  SmartViking: lvh: I don't think i wanna use such a thing in this particular program, i do take your adwise about urwid so i'll check that out. Never said anything about preffering curses either i have no idea of what either is. :P
03:27  Blu3droid: lvh, probably. I just came across the ' fabulous' module for python too.   fabulous.utils.Terminfo, term.width
03:28  Blu3droid: erros, TerminalInfo
03:28  Blu3droid: damn autocorrection
03:29  lvh: Laurenceb: Oh, okay, I thought you were manually sending SIGPIPE
03:29  Laurenceb:  shell=False need to change that?
03:29  lvh: Laurenceb: You can just remove it, it's the default
03:30  lvh: Laurenceb: You might be deadlocking: why are stderr/stdin pipes
03:30  Laurenceb: i need to pipe it data
03:30  lvh: err, stdout/stderr
03:30  bob2: Pylix: no need to /msg
03:30  lvh: does it even produce anything on stdout
03:30  bob2: Pylix: reinstall the thing dpkg -S tol you to
03:30  Laurenceb: ok good point
03:31  Laurenceb: it does but i dont use it
03:31  lvh: Laurenceb: Sorry, it's 3:30 AM and I don't use subprocess
03:31  Laurenceb: heh
03:31  lvh: (I use t.i.r.spawnProcess, which doesn't have the same deadlocking behavior)
03:31  Laurenceb: thanks for advice
03:32 --- smorg is now known as ormaaj
03:33  lvh: Laurenceb: It's unlikely unless the process is spewing massive amounts of stuff into stderr/stdout
03:35  Laurenceb: nope, same deal
03:35  Laurenceb: dump doesnt die unless i kill it some way else
03:35  Laurenceb: dump= the c code
03:35  x0rs: is the constructing of class objects an easy concept to understand? If not, does anyone have a tutorial on them other than the one above (http://bit.ly/40CBHF), because it isn't helping me much.
03:36  lvh: Laurenceb: How were you expecting it to get SIGPIPE though
03:36  talented: Can somebody suggest ways to improve this? http://codepad.org/W0Athclk (noobish)
03:36  lvh: x0rs: "constructing a class object" is ambiguous
03:36  bob2: x0rs: which part of 'constructing'?
03:36  lvh: I'm not sure if you mean creating a class or an instance of one
03:36  lvh: (especially since classes are instances of type)
03:36  Laurenceb: then the software modem it connects to closes the fifo setup by the c program
03:37  bob2: talented: iterating over range(len(something)) is pointless
03:37  Laurenceb: this all works find if i fire up the c code from the terminal
03:37  talented: what should I do instead?
03:37  Laurenceb: this is why i suspect something to do with the python code
03:37  lvh: Laurenceb: Hang on so there's two pieces of C code being called?
03:37  lvh: Laurenceb: You're relying on your C child getting SIGPIPE from somewhere else
03:37  x0rs: lvh, bob2: sorry I don't understand classes much at all (in my mind I compare them to functions), so I am sorry if my question is vague. I am new to programming in general, so I really need a from the ground up tutorial on classes
03:37  Laurenceb: tes
03:38  Laurenceb: *yes
03:38  talented: I had enumerate before, but I needed to index the index itself. e.g. i[0]
03:38  lvh: Laurenceb: Well, Python shouldn't really affect that
03:38  Laurenceb: i know
03:38  Laurenceb: and yet,,, it wont quit
03:38  bob2: talented: http://codepad.org/ESMHzAgD
03:39  lvh: Laurenceb: Oh wait, I might know why
03:39  juanmabc: nice paste! (not used to)
03:39  lvh: Laurenceb: http://bugs.python.org/issue1652 that might be it
03:39  talented: ahh I see what I missed when using enumerate
03:39  Laurenceb: its running is some weird mode or something?
03:39  talented: i, worlds instead of just i
03:39 * Laurenceb reads
03:40  bob2: sequence unpacking ftw
03:40  lvh: Laurenceb: No it basically just specialcases SIGPIPE
03:41  Laurenceb: signal.signal(signal.SIGPIPE, signal.SIG_DFL)  <- i need to do that?
03:42  lvh: Laurenceb: Possibly, I just know it's a problem with subprocess (well, not really: the alternative is worse) -- I don't know how to fix it because I use things that aren't the subprocess module for launching and talking to subprocesses
03:43  talented: hey bob2 would it be ok to iterate over range(number) if number is just a number and not len(something)
03:43  nosklo: x0rs: what's wrong with that one? It's great!!
03:43  bob2: talented: yes
03:43  talented: ok, cause I also have that part in my code where a number is sent from the server to say how many worlds exist, but that's it
03:44  x0rs: nosklo: not sure, I've gone through it, but it just isn't clicking. I've worked my way to it so far with no problems, so I guess it's just the concept. I am looking through Oreilly's Learning Python 3rd edition right now to see if it describes them in a way I can understand
03:45  lvh: x0rs: Classes are a blueprint for (custom) objects.
03:45  lvh: x0rs: For example you might have a class that describes all cats.
03:45  lvh: x0rs: A particular cat would be an instance of that class.
03:46  x0rs: lvh: gotcha, accessed like a method?
03:47  lvh: x0rs: What?
03:47  Laurenceb: lvh: fixed, thanks XD
03:47  lvh: Laurenceb: Yaaay.
03:47  x0rs: ie aCat = cat.brown?
03:47  bob2: x0rs: no
03:47  x0rs: oh
03:47  lvh: x0rs: No, aCat = Cat(name="Felix")
03:47  bob2: x0rs: a_cat = Cat()
03:48  x0rs: hmm... ok
03:48  x0rs: i think i see
03:48  talented: x0rs what you described also isn't a method but an attribute/property of a class
03:48  x0rs: talented: gotcha
03:49  bob2: well it might be a very poorly named method ;)
03:50  Blu3droid: a class is like the maid, butler, and chef. an instance of them  is created for each house.  smiths = House(); bobs = House(); ...  each instance comes with private copies of variables, methods, etc
03:51  talented: x0rs, just look at real world objects and try to think how to program them.  Like a lightbulb can be an object and methods could be to switch_it_on() or switch_it_off() and an attribute could be light = 'on' or light = 'off' depending on the method you used
03:51  Blu3droid: bobs.maid(clean='bedroom')
03:51  lvh: Blu3droid: ERgghgh
03:51  Blu3droid: heehee
03:51  lvh: I thought I knew what classes were until I heard you explain them
03:51  bob2: hm, i just realiase how terrible real world anaologies for oop are
03:52  Blu3droid: yup
03:53  talented: well, real world could be good to explain, except it may need refactoring to improve the explanation... I didn't want to write too much information in chat
03:53  x0rs: Blu3droid, actually that made a ton of sense to me.
03:53  ldlework: lvh, lol
03:53  bob2: ldlework: :|
03:54  Blu3droid: if you want to understand more in depth, study how to make a module for python
03:54  x0rs: talented, thanks very much for your example as well, it definitely makes more sense now. I think I just needed a few different takes
03:54  bob2: modules are only tangentially related to oop
03:54  x0rs: Blu3droid, i will, thank you
03:55  Blu3droid: it is really dense, but explains a LOT about how instantiation works
03:55 * x0rs needs more coffe
03:56  Blu3droid: what happens when it is created.  and the differences and cautions about how things are done in C vs python
03:57  Blu3droid: if you are an old school  coder, it is important
03:59  lvh: C has instantiation?
03:59  lvh: (Or classes?)
03:59  ssbr: if you stretch terminology enough, C has both!
04:00  m1chael: i just realized that i have python 2.4 and im trying to use etree and most functions are for 2.5+
04:00  lvh: ssbr: you must be an art history minor
04:00  ssbr: m1chael: get lxml!
04:00  ssbr: lvh: wrong. Try again?
04:00  lvh: ssbr: Everything is everything, private discourse does not exist, all human interaction is meaningless
04:00  ssbr: oh god don't remind me of those people
04:00  santagada: ssbr: politics?
04:01  ssbr: santagada: I am considering a major in art
04:01  ssbr: um. minor in art*
04:01  ssbr: majors are harder. :)
04:01  talented: to use lxml is knowledge in xpath essential?
04:01  nosklo: m1chael: did you check the code yet? It works fine here
04:01  santagada: art* ?
04:01  ssbr: talented: No. But desirable.
04:01  santagada: *just the good parts
04:01  nosklo: talented: xpath is so nice, you want to use it
04:01  ssbr: talented: (you don't need xpath to do anything, but you'll want it because it makes life awesome)
04:01  Blu3: no....
04:01  talented: I understand dom but have never touched much in xpath
04:02  lvh: ssbr: We just went from absurdism to logical positivism to nihilism in three phrases
04:02  nosklo: talented: it's not hard
04:02  ssbr: lvh: none of these are art movements, though
04:02  Blu3: the point of what i'm saying, now that i can type much faster is that you learn how things happen when a class is instantiated
04:03  santagada: xpath can be hard, but just enough to make your life awesome is not hard
04:03  Blu3: what the point of a=b is as a class variable, what happens during __init__, and the scope of functions and values
04:04  Blu3: i never said anything at all to mean C has classes or instantiation like python classes
04:04  Blu3: if you want to dis on me, go for it.  but don't twist what i say
04:04  santagada: Blu3: you were talking about what, some book?
04:04  Blu3: i never brought up a book
04:05  ssbr: lvh: you should have gone from synthetic cubism to futurism to organic architecture.
04:05  talented: I'm just wondering if I should aim to use lxml or use xml.dom.minidom, all I want to do is load an xml file and grab some data from it... when looking at xml it seemed to be more about creating xml than reading the values
04:05  ssbr: and oh god I had to look up futurism, I'm so going to fail monday's test. kill me.
04:05  talented: lxml*
04:05  santagada: talented: lxml has a sintax like etree to read xml
04:06  Laurenceb: lvh: thanks for the help, this is the finished(ish) project
04:06  nosklo: talented: absolutely don't use minidom
04:06  nosklo: talented: it is ugly and the api is annoying
04:06  lvh: Laurenceb: you're welcome
04:06  nosklo: talented: lxml.etree makes it so much easier
04:06  Blu3: xor was asking about classes.  i generically said it's like having a set of attributes and functions, being the maid, chef, butler, pop into existence for each house you create.  the function of each is referenced by the instance of house
04:07  talented: ok, when I get round to the xml side of my program I'll use lxml... just feels it's lacking in the tutorial department as I haven't come across getting values from the xml yet
04:07  Laurenceb: me thinks about trying to get some sleep
04:08  santagada: talented: http://codespeak.net/lxml/xpathxslt.html#the-xpath-method
04:08  santagada: talented: I know, not very tutorial like, but it is something to get started
04:09  bob2: talented: http://codespeak.net/lxml/tutorial.html#using-xpath-to-find-text
04:09  santagada: bob2: thanks, that seems better :D
04:10  rationalOgre: exit
04:16  _Ski_: roflcopter
04:16  _Ski_: lmao
04:16  lvh: _Ski_: Please stop that.
04:33  KnightHacker: Hi Guys, I am new to Perl and everyday I keep asking myself .. how in the world, I didn't learn this language long time ago. It is awesome :).
04:33  KnightHacker: I have a quick questions about portability tho.
04:33  KnightHacker: Is there a way in perl to write an "executable" that I can run on windows?
04:34  KnightHacker: shit .. sorry .. wrong window :) .. haha, I use Python too.
04:34  KnightHacker: lol.
04:34  Cam: You mean executing a perl script on windows?
04:34  juanmabc: meh, too forced
04:34  KnightHacker: Yes :).
04:34  Cam: KnightHacker; Why would you ask in ##mac if it is about windows.
04:34  bikcmp: perl2exe?
04:34  Cam: ##windows?
04:34  juanmabc: hello?
04:34  jm_: This is the python channel, the winner one, to be a looser, select the perl channel :p
04:34  juanmabc: mom?
04:35  KnightHacker: haha .. sorry guys :).
04:35  Cam: Oh wow..
04:35  juanmabc: haha
04:35  Cam: I wasTOTALLY in the wrong channel even then?
04:35  Cam: Wow.
04:35  Cam: juanmabc; Hm?
04:36 --- Xerion_ is now known as Xerion
04:37  juanmabc: ?:-
04:38  CryptoSec: does anyone know if Python supports UnicodeDecode... because of the error that I'm receiving due to some UTF characters that I have in my log files...
04:38  CryptoSec: either in python v.2.7.x or v.3.2.x
04:40  jm_: dunno ^
04:41  jm_: maybe you should paste the code raise the error
04:41  jm_: are you trying to load the file from python ?
04:41  CryptoSec: yes...
04:41  CryptoSec: my python script works perfectly
04:42  CryptoSec: but it only throws errors when it hits the files that have UTF characters in them... for example.... Arabic characters...
04:42  juanmabc: (they always says that) ;)
04:43  jm_: f = codecs.open('test', encoding='utf-8', mode='w+')
04:43  jm_: looks like there is a codecs module allowing to load utf8 files
04:43  jm_: read more here http://docs.python.org/howto/unicode.html
04:43  CryptoSec: jm: http://bpaste.net/show/10964/
04:43  juanmabc: yes, from what i know python fully supports utf-8
04:45  jm_: always been a mess though
04:45  ssbr: Nothing particularly messy about the inbuilt unicode stuff.
04:46  CryptoSec: the thing is that all my files are saved as ANSI .... but in some of the files it has Arabic (UTF) characters in them...
04:47  jm_: you have to know in which charset your file is encoded, otherwise it's like opening a file without knowing the filename
04:47  badon: I am absolutely 100% new to Python, but I think this is a simple enough question - How to get this to work on windows? There's a problem with the path on line 17: http://bpaste.net/show/10965/
04:47  jm_: you may still catch the exception to try another codec ;..
04:48  jm_: what is the error badon ?
04:49  CryptoSec: having files saved in ANSI encoding but having UTF characters in some of my logged characters that may exist in my files.... wouldn't that cause my python  script to act crazy?
04:49  badon: jm_: TypeError: unsupported operand type(s) for +: 'NoneType' and 'str'
04:50  jm_: I don't think saving an ANSI file with UTF8 chars would lead to some consistent behavior ^^
04:50  CryptoSec: jm: mostly on Arabic type languages
04:50  jm_: badon: looks os.environ.get("HOME") returned None, meaning HOME may not be define
04:51  jm_: Crypto can you save your file in UTF8 ? would be better since they contain UTF8 chars
04:52  badon: jm_: I gathered that much, but I don't think there is such a thing in windows. I tried specify C:\whateverpath but that didn't work either
04:53  CryptoSec: jm: but if I follow your f = codecs.open('test', encoding='utf-8', mode='w+') suggestion... it shouldn't give any problem detecting and/or opening up both ANSI and UTF encoding in my log files.... am I correct?   In addition I'll read up on your howto/unicode.html link that you sent me earlier....
04:53  jm_: badon, this code is not meant to be run on windows, path are joined the wrong way with linux slashes. The script is trying to open the file "old-feed-entries", do you know what is that file ?
04:54  bjorkintosh: why won't something like system('mplayer foo') work?
04:54  badon: jm_: it appears to be a cache
04:54  badon: jm_: it looks like it's trying to create it maybe, so it can keep old feed items
04:55  jm_: Crypto: I'm not an expert so I can't say for sure if that works, I also had few issue with Unicode stuff.
04:56  badon: jm_: you think you can get that working on windows?
04:56  jm_: badon: then try specifying a windows file like "C:\temp\test", if it works just find a better place ^^
04:56  badon: I tried that, it didn't work. Let me show you...
04:57  jm_: bjor, would that be os.system('mplayer foo') ?
04:57  bjorkintosh: jm_, i took care of that part.
04:57  bjorkintosh: it seems 'mplayer foo' is ignoring foo.
04:57  CryptoSec: jm_: oh okay... well thank you for the help and the heads up.... I'll read up on it... in the python docs... I'll see what happens...
04:57  bjorkintosh: in ruby, i had to do something like `mplayer #{foo}`
04:57  badon: jm_: I changed it to old_entries_file = "C/temp/old-feed-entries" and the error says IOError: [Errno 2] No such file or directory: 'C/temp/old-feed-entries'
04:58  badon: do I need to create the file first?
04:58  bjorkintosh: and it worked just fine. i'm not sure what system prefers.
04:58  badon: It seems to have lost the colon
04:58  jm_: Crypto, don't loose faith :D
04:58  jm_: badon, yep you should just in case the script is trying to read it first
04:59  badon: jm_: k, one sec
05:00  badon: jm_: same error, no change
05:00  jm_: you mean the same error you paste me before ?
05:01  badon: jm_: yes
05:01  jm_: cannot be possible since you changed that line
05:01  badon: <badon> jm_: I changed it to old_entries_file = "C/temp/old-feed-entries" and the error says IOError: [Errno 2] No such file or directory: 'C/temp/old-feed-entries'
05:01  jm_: old_entries_file = "C:\\temp\\test"
05:02  badon: jm_: k, trying
05:02  jm_: use windows backslash
05:02  jm_: \
05:02  jm_: bjork : don't know strange
05:04  jm_: is #{foo} a string substitution in ruby ?
05:05  _habnabit: bjorkintosh, subprocess.call(['mplayer', foo])
05:05  _habnabit: bjorkintosh, that's also some very poor ruby code.
05:05  bjorkintosh: _habnabit, thank you.
05:05  _habnabit: jm_, also don't suggest using os.system ever.
05:05  bjorkintosh: _habnabit, what's wrong with os.system?
05:05  jm_: I'm not suggesting anything like that
05:06  bjorkintosh: i'm using it.
05:06  jm_: Just trying to make his os.system work
05:06  _habnabit: bjorkintosh, it's slow, inflexible, and leaves you open to shell injection attacks.
05:06  _habnabit: bjorkintosh, which is why your ruby code sucks: it's completely vulnerable to shell injection.
05:06  bjorkintosh: hmm. i see.
05:07  jm_: Note that most of the time we just f****** don't care about shell injection ^^
05:07  jm_: But subprocess has many features
05:07  _habnabit: jm_, that is an exceptionally poor attitude to have.
05:07  _habnabit: jm_, especially since it takes very little effort to avoid it.
05:08  bjorkintosh: _habnabit, do you use ruby as well?
05:08  _habnabit: bjorkintosh, not regularly, thank god.
05:08  bjorkintosh: i see.
05:09  jm_: os.system is perfectly fine for home scripts, it's part of a standard builtin module, think about it. ^^
05:09  _habnabit: jm_, yeah, um, no.
05:09  _habnabit: jm_, there's a lot of very poor code in the stdlib.
05:09  _habnabit: And, again.
05:10  _habnabit: 20:07:44 < _habnabit> jm_, that is an exceptionally poor attitude to have.
05:10  _habnabit: 20:07:59 < _habnabit> jm_, especially since it takes very little effort to avoid it.
05:10  bjorkintosh: good. os.system('mplayer foo') worked.
05:10  bjorkintosh: but subprocess.call(['mplayer'], foo) most certainly does not work.
05:10  bjorkintosh: call is unaware of mplayer's existence it appears.
05:11  _habnabit: bjorkintosh, well, yes, if you don't copy the code as written, it tends to not work.
05:11  bjorkintosh: pardon the error.
05:11  badon: jm_: old_entries_file = "C:\\temp\\old-feed-entries" just runs and runs and runs, but does nothing
05:12  badon: I have no idea what it's up to
05:12  bjorkintosh: i think i might be dyslexic afterall.
05:12  bjorkintosh: yes that worke,d _habnabit
05:13  badon: I'm going to give up for now
05:13  badon: bbl
05:13  jm_: badon I'm no surprised there a while1 loop, you must be stuck in this one
05:13  jm_: while 1
05:14  badon: jm_: it never connected
05:14  badon: bedtime for me, I'll work on it more later
05:14  jm_: os.system('mplayer foo') and  subprocess.call(['mplayer', foo]) don't do the same thing at all I'm quite surprised
05:15  jm_: bye badon
05:15  badon: jm_: thanks jm_
05:15  jm_: welcome
05:15  _habnabit: jm_, you didn't get the hint when he was talking about string interpolation?
05:16  jm_: don't know he kept refereing to os.system('mplayer foo')
05:16  talented: if my function takes either a single value or a tuple... should I check that the argument is a single value or tuple or should I work on the exception that it was the wrong type it expected?
05:16  _habnabit: talented, none of the above.
05:16  talented: ok, so what should I do?
05:16  jm_: ppl should paste their exact code, this is misleading ^^
05:17  _habnabit: talented, use *args, split it into two functions, or require an iterable.
05:17  _habnabit: talented, but checking for this is pointless.
05:17  talented: basically I have def func(data):  where data can either be 'a string' or ('a', 'tuple')
05:17  _habnabit: talented, yes. Don't do that.
05:17  papna: talented: Pick one and do that.
05:18  talented: ok, so if I did *args would it always expect data to be a tuple though?
05:18  papna: talented: For example, require always a tuple.
05:18  htoothrot: just require an iterable... you can always call it with ('a string',)
05:18  _habnabit: talented, nope.
05:18  jm_: talented: use consistent types, you function should take either a string or a tuple, not both
05:18  _habnabit: talented, that's the opposite of what *args does.
05:18  dropdrive: Would it make sense to support this syntax: () = foo   (as a generalization of unpacking) ?
05:19  talented: I'm trying to create a convenience function for struct.pack which takes a type of argument based on it's formatting string though
05:19  ssbr: dropdrive: no
05:19  ssbr: dropdrive: that could only ever be a syntax error or value error
05:19  _habnabit: talented, I don't know what that means
05:19  talented: so you can give it a formatting string that expects only a single value or a formatting string where it expects a tuple
05:19  ssbr: dropdrive: also, it's useless. :(
05:19  _habnabit: talented, show us what you're trying to do.
05:20  talented: ok, I'll write it
05:20  dropdrive: ssbr: Shorthand for making sure something is empty?  Sort of like writing a, = b to extract one element out of b
05:20  dropdrive: ssbr: But okay, it's pretty useless :)
05:20  ssbr: dropdrive: oh, wait, I see.
05:20  ssbr: Yes, pretty useless.
05:20  ssbr: I was confused. :(
05:21  ssbr: its only problem is that overloading assignment to do that check is weird
05:21  Ademan: is the module init function supposed to be init_modulename() or initmodulename() ? in 2.x ?
05:21  _habnabit: Ademan, docs.python.org/extending
05:21  magicblaze007: when i run x.py on windows, why doesnt it produce .pyc file for it?
05:22  _habnabit: Ademan, also, consider using cython.
05:22  dropdrive: ssbr: Yeah...somehow I don't like writing a = b[0] or a = iter(b).next() when I know that b has only 1 element
05:22  _habnabit: magicblaze007, .pyc files are only created on import.
05:22  Ademan: _habnabit: I'm asking because the docs seem to conflict with what psycopg2 does
05:22  _habnabit: Ademan, oh?
05:22 --- kbsd is now known as kyau
05:23  Ademan: _habnabit: unless I'm not seeing the "real" entry point, which is possible, grepping now
05:23  magicblaze007: _habnabit: if someone has the .pyc file, can they run the modile on any other machine?
05:23  magicblaze007: module
05:23  jm_: no
05:23  _habnabit: magicblaze007, nope.
05:23  _habnabit: magicblaze007, .pyc files are caches. They're not for distribution.
05:23  _habnabit: magicblaze007, are you trying to 'protect' your code?
05:24  magicblaze007: _habnabit: I thought they were the byte code?
05:24  bjorkintosh: _habnabit, have you read 'the ruby way', by any chance?
05:24  ssbr: magicblaze007: they are the bytecode. The bytecode format is not guaranteed to work across even different minor releases of Python.
05:24  _habnabit: bjorkintosh, what is that?
05:24  lvh: magicblaze007: That is correct, they are bytecode.
05:24  _habnabit: magicblaze007, yes, the bytecode cache.
05:24  magicblaze007: _habnabit: just trying to understand python...I thought "python mycode.py" should have the same effect as "import mycode" ... but it seems not...
05:25  lvh: magicblaze007: Bytecode is specific to an interpreter.
05:25  magicblaze007: i guess i understand that part thou...
05:25  bjorkintosh: _habnabit, it's a ruby book. i think it comes after the ruby primer.
05:25  Ademan: _habnabit: yep, the version I checked out uses init_psycopg() and I can't find an initpsycopg() anywhere... it could have some wierd macro somewhere I guess
05:25  ssbr: magicblaze007: when you run a python file, it is loaded into the __main__ module and run.
05:25  magicblaze007: but if i have the same version of python interpreter, can i run .pyc files?
05:25  bjorkintosh: i'm looking for something of it's equivalence for python.
05:25  ssbr: magicblaze007: when you import a module, it gets its own module object it's put into.
05:25  ssbr: so to check if files are being run, they frequently check of the module name is '__main__'
05:26  jm_: bjork you wrote ru** for the 5th time you're not too far from banishment :D
05:26  ssbr: That's why they'd behave differently.
05:26  bjorkintosh: jm_, i didn't at least say pe__l
05:26  jm_: ok, you made a point
05:26  ssbr: I can do you all one better. PHP PHP PHP PHP PHP PHP
05:26  _habnabit: Ademan, the module is called _psycopg
05:26  bjorkintosh: ssbr, *gasp*
05:26  bjorkintosh: now you did it!
05:27  ssbr: I'm so dead. _habnabit will murder me.
05:27  bjorkintosh: off with his head!
05:27  Ademan: _habnabit: derp, you're right heh
05:28  jm_: bjork : http://wiki.python.org/moin/PythonBooks
05:29  jm_: I think http://diveintopython.org/ is quite popular
05:29  bjorkintosh: jm_, i'm using lutz's book.
05:29  ssbr: eek
05:29  bjorkintosh: eek?
05:29  ssbr: no DIP, please.
05:29  bjorkintosh: oh.
05:29  bjorkintosh: what's wrong with DIP?
05:30  ssbr: A lot of things. Should I just open up a random chapter, or leave it at that?
05:30  bjorkintosh: ssbr, what should come after 'learning python' then?
05:31  Ademan: isn't think like a computer scientist or whatever pretty popular?
05:31  ssbr: bjorkintosh: programming.
05:31  talented: http://codepad.org/MADVhedp ok, that's just the example
05:31  ssbr: bjorkintosh: don't get into an infinite loop of finding the next book to read and never actually learning Python.
05:31  bjorkintosh: ssbr, you're righit.
05:32  jm_: to be honest, if you've mastered 'learning python' there's nothing more a book can teach you ^^
05:32  bjorkintosh: pick a project and move on.
05:32  ssbr: yep.
05:32  ssbr: and when there's stuff you don't know or forget, use the official reference
05:32  bjorkintosh: well, at least a guide to the std library...
05:32  bjorkintosh: i hate reading such things on screen.
05:32  ssbr: since you'll hopefully know enough Python to be able to read it.
05:32  ssbr: bjorkintosh: then get it printed.
05:32  talented: I don't have to create this convenience function, but it cuts my code down dramatically
05:33  ssbr: It's 4 cents a page to get stuff printed at a shop for you.
05:33  jm_: and if your stuck in you project, the python mail list is very helpfull, only nice guys there
05:33  jm_: talented, give us 2 axamples of you calling your function
05:33  jm_: with different types
05:35  trave: sorry to be new to python, but what would be the equivelant to php's:  foreach($objs as $key => $val) { ... } ?
05:35  bjorkintosh: jm_, what do i need a mailing list for, when i have you and ssbr right here? :D
05:35  _habnabit: trave, docs.python.org/tut
05:35  bjorkintosh: ... with _habnabit keeping an eye on you two.
05:35  ssbr: trave: looks like that'd be for k, v in objs: ...
05:36  trave: I've got:  for partner in user.partners:  but, if I make changes to "partner", it doesnt update... for k, v... gotcha. :]
05:36  ssbr: but I don't know PHP. Perl/s => operator is obscene and PHP might do something insane with it.
05:36  ssbr: Perl's =>. I don't know what you call it.
05:36  talented: http://codepad.org/MZU420mg
05:36  trave: thanks ssbr.
05:36  ssbr: bjorkintosh: don't make me blush!
05:36  bjorkintosh: awww. there there.
05:36  bjorkintosh: thanks a bunch.
05:36  jm_: Php burns my eyes !
05:37  ronghail: => is just a comma
05:37  talented: basicaly the formatting string tells you whether it's a single value or tuple... if I did format='H' that's single but if I did format='HH' I'm expecting a tuple with a value for each H
05:37  ssbr: trave: your problem is unrelated to syntax
05:37  trave: yea, I am enjoying what ive been tweaking of python so far, much more conscise, I'm hoping to get away from PHP for good.
05:37  ssbr: trave: if you reassign partner, that won't mutate user.partners, because partner is a variable -- it's just a reference to an object. It can't know how to change the list.
05:38  trave: so by saying:  users.partners[k].new_property = "blah"  would?
05:38  ssbr: if you mutate the object, it should be apparent in the list too
05:38  jm_: talented, send_msg(format='H', message=(0x0076, None)), problem solved your type is consistent, now when detecting the 'H' type, juste ignore the 2nd element of the tuple
05:38  ssbr: it's not clear to me what you're doing anymore
05:38  _habnabit: talented, 1) why are you calling it with keyword arguments? 2) why not just send_msg('H', 0x0076) vs. send_msg('H10s', 0x0076, 'foo') ?
05:39  ssbr: trave: could you paste some code?
05:39  ssbr: (and a description of why you think it doesn't work?)
05:39  trave:     for pk, partner in req.user.needler.partners:         req.user.needler.partners[pk].c unt_faqs = 100
05:40  trave: idunno why that "o" is not showing. :]
05:40  talented: I don't usually call with keyword arguments, just used it in the example
05:40  ssbr: oh
05:40  ssbr: should maybe be partners.iteritems()
05:40  ssbr: and that would work
05:40  trave: cool, trying that now :]
05:41  talented: how I do it now, is that instead of sending a tuple... I just send_msg() each value, but would like to be able to send a tuple to save each call to send_msg
05:41  bjorkintosh: i'm sure you'll all be pleased to know that despite my contentment with vim, i'm using emacs with python.
05:41  bjorkintosh: *applause*
05:42  _habnabit: talented, def send_msg(format, *args):
05:42  _habnabit: talented, and then if you have a tuple, send_msg('HH', *T)
05:42  talented: ahh so you use it in the call
05:42  talented: I read about it, but didn't know how to use it, though I used it in the function
05:43 * rationalOgre uses vim
05:44  rationalOgre: :)
05:45  talented: thanks _habnabit, I can work with that
05:47  jm_: I heard that emacs is written in perl
05:47  jm_: just sayin...
05:48  juanmabc: sure...
05:48  _habnabit: Riiiight.
05:49  bjorkintosh: jm_, you must be the last american boy scout afterall here i thought it was i.
05:49  talented: so all types will now be tuples right?  and I just work with that instead of trying to mix them
05:49  jm_: maybe we're twins ....
05:49  juanmabc: sure...
05:49  bjorkintosh: who knows? in a parallel universe 1 googol light years away...
05:50  talented: out of curiosity I may look at how struct.pack handles it... maybe they do the same thing
05:50  juanmabc: ssss...
05:50  _habnabit: talented, it does indeed.
05:58  talented: I don't actually know how I can see struct... I found struct.py, it imports from _struct but I can't seem to find where that is
05:59  talented: nvm, found an svn for it
06:04  blast_hardcheese: Anyone in here do anything cool with this? http://networkx.lanl.gov/
06:04  blast_hardcheese: I just learned about it, thought I should ask
06:07 --- dpn`_ is now known as dpn`
06:08  ejo: < eagle scout ;)
06:08  blast_hardcheese: talented: You're on a Mac then? I was under the impression that struct wrapping _struct was a mac-ism
06:11  htoothrot: mac-ism?
06:11  bjorkintosh: McIsm.
06:11  bjorkintosh: that better?
06:11  bob2: that's pretty common in the stdlib
06:11  bob2: and elsewhere
06:11  htoothrot: the struct module is written in c
06:12  bob2: a python module imports a c module and exposes some bits of it
06:12  htoothrot: that's why there's a struct stub
06:14  linq: Does anyone have a sense of the timeline for Unladen Swallow being merged into py3k?
06:14  bob2: 3.3
06:14  lvh: linq: after 3.2
06:15  lvh: linq: Likely to be 3.3
06:15  linq: I'm not seeing much discussion about it on python-dev..
06:15  htoothrot: what's the estimated date on 3.3?
06:16  lvh: linq: 3.2 has a feature moratorium
06:16  htoothrot: pound unladenswallow on OFTC is completely dead as well, nobody has said anything in weeks
06:16  lvh: linq: US is big enough to count as afeature
06:18  lvh: htoothrot: AFAIK there's no estimated date yet
06:18  linq: htoothrot: Word on the street is that Google no longer has any employees working full-time on Unladen Swallow
06:19  lvh: That makes it sound like it's google's choice
06:19  htoothrot: the pep mentions the moratorium may last 2 years
06:19  lvh: htoothrot: Well, it's been going on for a while now ;-)
06:19  bob2: word was that was a temporary state of affairs, though, and that they'd be back on it sometime soon
06:20  linq: lvh: I understand that it's an open source project and anyone _can_ contribute, but it helps to have dedicated resources being put towards developent
06:20  htoothrot: pypy seems to be coming along nicely
06:21  lvh: linq: That wasn't my point: it's just that the people aren't working on it now, but that doesn't mean Google has removed funding or anything
06:24  linq: I guess I'm just trying to get a sense of whether the project is still being actively pursued in any appreciable capacity. There hasn't been a release since 20 October 2009
06:24  lvh: linq: It is.
06:24  lvh: Just not right now.
06:25  htoothrot: linq: http://groups.google.com/group/unladen-swallow/browse_thread/thread/f2011129c4414d04
06:30  linq: I wonder if Google's ostensible decline in interest has something to do with the fact that they'll need to port their projects to py3k before they'd even take advantage of the JIT
06:30  ssbr: Hm, the whiners have a point there. It's odd that Google would hire several people full time for a year and then drop it at the last minute.
06:31  ssbr: ah, that would do it
06:31  ssbr: whoops, that would explain it perfectly
06:33  lvh: linq: Now pypy can run C extensions I just dont see the point
06:35  linq: I will admit that recent benchmarks of PyPy have been very interesting
06:42 --- TheJoker is now known as muntasir
06:50  talented: I have a number 0x7530 (30000) which I need to be convert to a string either '\x75\x30' or 'u0', how can that be achieved?
06:50 --- signpost is now known as signpost[6]
06:51  lvh: talented: Hang on, what format is it in now? int?
06:52  talented: no it's a tuple with strings, but I use to send ints to it
06:52  talented: but now I need to figure out how I can make those ints their string counterpart
06:52  Ademan: lvh: PyPy's C extension support isn't that great... trust me I wrote part of it :-)
06:53  Ademan: while we're talking about this, psycopg2 patches a bunch of tp_alloc fields on types *after* they've been readied, that can't be right... am I missing something?
06:53  lvh: talented: tuple with which strings?
06:53  talented: sorry, the format is in int as the value 0x7530
06:53  lvh: talented: ("%x" % i).decode("hex")
06:55  talented: thanks that's what I needed
07:01  ejo: I switched from psycopg2 to pg8000, happy so far though i don't have much to comment on
--- Log closed Sat Nov 13 07:07:21 2010
--- Log opened Sat Nov 13 07:07:41 2010
07:07 --- Users 740 nicks [0 ops, 0 halfops, 0 voices, 740 normal]
07:09 --- Channel #python was synced in 91 seconds
07:19  bjorkintosh: how's pypy going to be faster than cython?
07:19  bjorkintosh: err. cpython.
07:19  bjorkintosh: won't it be pypy->cpython?
07:21  Ademan: bjorkintosh: ? PyPy doesn't have to run on top of CPython
07:21  Ademan: it has a very complex (and powerful!) translation framework that can turn PyPy into a C program
07:22  bjorkintosh: Ademan, have you tested it yet?
07:22  Ademan: bjorkintosh: I work on it :-)
07:22  Ademan: I can't take credit for most of the cool stuff though haha
07:23  bjorkintosh: ah.
07:24  bjorkintosh: is it going to change the way python's written?
07:24  bjorkintosh: coded. programmed. whatever.
07:24  Ademan: nope, CPython will continue to be the main python implementation, but it might come to pass that PyPy will be used to pilot new language features
07:25  Ademan: since it is considerably easier to modify than CPython
07:25  tsolox: what's the difference between bpython versus ipython ?
07:25  bjorkintosh: python in python.
07:25  bob2: bpython does things a bit less weirdly
07:25  tsolox: bpython has synax coloring..but i read ipython is also a shell?
07:25  bob2: and doesn't integrate in to some of the stuf that ipython does
07:30  bjorkintosh: so Ademan is pypy's logo going to be an image of a python eating it's own tail?
07:36  Ademan: bjorkintosh: I don't know, that logo is almost a year old and we still use that ugly red and yellow PY. logo  I like the one you're talking about quite a bit more
07:42  talented: is there an alternative to s = '' and then later on assigning s = s + 'whatever'?   can you assign s at the time of assignment with what you need to concat to it?
07:51  ronghail: x = y = 3; y += 7; x = y += 10 # syntax error.  why?
07:52  KirkMcDonald: Because it's a syntax error. Augmented assignment is not the same as the normal kind.
07:53  KirkMcDonald: http://docs.python.org/reference/simple_stmts.html#assignment-statements
07:54  bob2: talented: eh? s = 'whatever'
07:55  ronghail: that isn't what he asked
07:57  marginoferror: This is kind of a programming style question, but if I have for instance an Actor class and a Site class, and I want to store the location of the actors, would it be better to store that information as an attribute of the Actor class (self.site =...) or the Site class? (self.actors = [...])
07:58  marginoferror: In django I can define it as either one and django automatically makes a "backwards" connection so I can access the site from the actor, and the list of actors from the site
07:58  marginoferror: but I'm not sure how to handle it in just python
07:59  preaction: marginoferror: are you using sqlalchemy? you can do the same thing, but it's not automatic. otherwise make a method that will add the appropriate relationships
07:59  preaction: actor.move_to_site( site ) -> actor.site is now set, and site.actors contains actor
08:01  marginoferror: preaction: So that's considered acceptable programming?  I was worried that that would leave an opening for things to get out of sync
08:01  preaction: sync with what?
08:02  marginoferror: For instance a programming mistake elsewhere could leave site.actors saying that an actor is in one place, but actor.site says it's elsewhere
08:03  talented: marginoferror, is this for a db?
08:03  bob2: that's your orm's problem
08:03  preaction: that would only happen if the programmer was not using the API, which is why not using the API is a bad thing
08:03  marginoferror: No, not for a db (yet).  Just in memory.
08:03  preaction: what do you mean yet? if it's going to go into a database, build it with an ORM to begin with
08:04  talented: looking at it in a db perspective.. actors have a many relationship to one site and site has one relationship to many actors
08:04  preaction: i would assume that move_to_site would first check actor.site, if it exists, it would remove the actor from that site, but now i'm pretty much solving all your problems for you
08:05  marginoferror: Right.  I'm used to coding for dbs (django).  Which is why Im' confused as to what to do in this case, where there's not necessarily an authoritative place to resolve discrepancies
08:05  preaction: make sure there aren't discrepancies
08:05  preaction: or, as we usually call them, bugs
08:06  marginoferror: preaction: Okay.
08:37  jlebar: Python is being *very* slow to match my (modest!) regular expression.  2.5s to find three matches in maybe 100 bytes of data.
08:37  jlebar: Here's the regex: http://pastie.org/1294631
08:38  jlebar: Is there maybe a different regex implementation I can try?
08:38  Ademan: jlebar: several actually, if you look on pypi
08:38  jlebar: looking...
08:39  Ademan: jlebar: I'd say more but I don't know anything more than "there is another..." :-p
08:39  jlebar: haha.  I'll see what I can find.  :)
08:39  ronghail: don't use regex for that
08:40  ronghail: problem solved
08:41  felipeochoa0918: hello! quick question: is it pythonic to split class definitions across modules?
08:41  jlebar: ronghail: I could also solve the problem by not using Python.  But both Python and regex should be suitable for the job, don't you think?
08:42  talented: jlebar, if you can avoid using regex it might turn out more efficient
08:43  bjorkintosh: felipeochoa0918, does it make sense to do that?
08:43  bob2: that looks fairly silly use of a regexp
08:43  bob2: name, number, balance = s.split(maxsplit=3)
08:43  bob2: afaict
08:44  Jerub: maxsplit=2
08:44  jlebar: Unfortunately not.
08:44  jlebar: "One name    the-number  $ balance"
08:45  felipeochoa0918: bjorkintosh, well, in terms of what the classes do, they're quite different, however, classB is only used by classA in the entire program.
08:45  jlebar: Anyway, yes, it could be done with split().  But it seems silly that this regex should take seconds.  It's almost no data.
08:45  jlebar: I should be able to use any algorithm I please!
08:45  bob2: regexp performance depends on the regexp, obviously
08:46  jlebar: Yes, naturally.
08:46  bob2: anyway, culturally, people do fancy regexp splitting in python much less than in perl
08:47  kerio: well, some regexps take exponential time
08:47  kerio: (which is stupid, since you can translate a regexp in a finite state machine, but...)
08:47  jlebar: kerio, yes, thank you.
08:49  felipeochoa0918: bjorkintosh: I only asked because emacs was giving me a hard time with relative imports... I think I'll keep them together unless it is strongly discouraged
08:50  bjorkintosh: mind over emacs
08:50  bob2: what sort of relative imports are you doing?
08:53  jlebar: Interestingly it's the \s*\$?\s* which makes it slow.
08:53  jlebar: The not-equivalent [ \$]* is much faster.
08:53  felipeochoa0918: well, i've tried using "from . import class B" and "from package import classB" and "from .package import classB", but nothing seems to work
08:54  felipeochoa0918: i'm on 3.1 btw
08:54  bob2: the first is a syntax error obviously
08:54  bob2: the second works fine if classB is in the package directly (ie in __init__.py)
08:54  bob2: the second is the same but relative to the current file
08:55  felipeochoa0918: do i need to define __all__ in __init__.py?
08:55  bob2: if you pastebin  the output of 'find . -name "*.py"' run in the root of your project we can tell you what's up
08:55  bob2: no
08:59  felipeochoa0918: http://pastebin.com/gY146tcd
08:59  infobob: http://paste.pound-python.org/show/42/ (repasted for felipeochoa0918)
08:59  Ademan: as best as I can read it, the docs say that a "New Reference" does not need to be incref-ed, is that correct?
08:59  felipeochoa0918: oops.
09:00  felipeochoa0918: i am trying to import probdict in speller
09:00  bob2: from OCR import probdict
09:00  talented: http://codepad.org/6CemzhAC
09:01  bob2: (but the package name should be all lower case, and be in another dir that has the setup.py etc: http://jcalderone.livejournal.com/39794.html)
09:01  bob2: talented: you're using python
09:01  bob2: so whichever one is clearest
09:02  bob2: you already gave up huge amounts of math performance to gain clearer code :)
09:02 --- signpost[6] is now known as signpost[8]
09:03  talented: well, I guess shifting isn't a calculation people can work out in their heads easily so that'll rule those 2 out
09:04  talented: hmm... I guess ans2 would be easiest if people had to work it out in their heads
09:05  Ademan: I don't think Py_DECREF should be called on Py_None should it?...
09:08  Ademan: nevermind, docs say it should be treated like any other object
09:12  felipeochoa0918: bob2, renamed OCR to ocr. the package is still far from being distutils-able, but in the mean time I'm now getting "No module named ocr"
09:14  Suiter: does anyone know what i need to get to use openGL with wxPython
09:17  bob2: felipeochoa0918: the parent dir of ocr needs to be in sys.path
09:17  bob2: felipeochoa0918: either by running the script from there (you shouldn't generally be running scripts that are in packages) or by setting PYTHONPATH
09:18  talented: Suiter, pyopengl?
09:18  Suiter: ya thanks
09:21 --- cli is now known as Guest45793
09:23  disappearedng: Hey how do I convert a to 1
09:24  bob2: you might be after ord and subctraction
09:24  disappearedng: more importantly, I am writing test cases for a chat room, I have a special test cases where I need to build 3 person, a test case for 4 person, and up to n person. Is there a good way to write my test cases so that I can minimize redundancy and have self.a_person = ...
09:25  bob2: that'd be insane
09:25  bob2: ChatRoom would have an attribute members that was a list or something
09:25  bob2: but there's no special numbers between 2 and infinity ;p
09:27  talented: how does python represent -1 in bits?
09:27  Ademan: talented: twos compliment afaik
09:30  DexterLB: hello
09:30  DexterLB: how do I continue something on the next line in python? like putting a backslash in C
09:31  talented: \
09:31  DexterLB: oh.
09:31  bob2: normally you don't do that
09:31  bob2: and instead use ()
09:31  DexterLB: eh?
09:32  Jerub: DexterLB: if you have it surrounded in () you don't need \\n
09:32  Jerub: i.e.
09:32  Jerub: foo = ("foo"
09:32  Jerub:        "bar")
09:32  felipeochoa0918: bob2: oh ok. i thought relative imports were meant to avoid dealing with PYTHONPATH... i've added ~/Python to it, and have moved ocr into ~/Python. still not working. should i be worried that my PYTHONPATH was previously empty?
09:32  Jerub: that's a valid way of doing line continuations.
09:32  DexterLB: ah
09:33  Jerub: instead of
09:33  bob2: felipeochoa0918: no they weren't, no
09:33  Jerub: foo = "foo" \
09:33  Jerub:      "bar
09:33  bob2: felipeochoa0918: python -c "import ocr ; print ocr"
09:38  felipeochoa0918: bob2, from the command line, it imports fine. calling "python3 speller.py" even works. they crazy thing is the shell is inside emacs, so i think it may be some emacs quirk now
09:39  bob2: nope
09:39  bob2: I bet you don't have PYTHONPATH set in there
09:39  felipeochoa0918: no it is
09:39  bob2: but again, putting s cripts in a package is a bad idea
09:40  felipeochoa0918: it's not a script. i'm just testing to make sure methods work fine, but it sounds like i may be going about it the wrong way about it:)
09:40  magcius: waut
09:40  magcius: how many pastebins do we have in here?
09:40  magcius: it was fpaste, it was bpaste, now it's paste.pound-python.org
09:48 --- Xerion_ is now known as Xerion
09:49  felipeochoa0918: bob2: anyway, I'll try to fix it tomorrow. thanks for all the help!
09:56  DexterLB: now, how do I convert a float to a string and append zeros? like str(5.22) gives me '5.22', but str(5.2) gives me '5.2' while I want it to give me '5.20'
09:57  Jerub: DexterLB: "%.2f" % 5.2
09:58  talented: if a class gets too big, is it better to break that class into smaller classes?
09:58  bob2: vs what?
09:59  bob2: but a class feeling too big might be a sign it is doing too much and should be split up, yes
09:59  talented: yea, that's what I was thinking... It's becoming hard to manage and I've only written like 100 lines of code
10:00  bob2: another useful pressure to bear in mind is how easy to unittest something is
10:02  talented: I've never done unittesting before... once I work out the 'somewhat' easier parts of my program... I got other things to learn afterwards like lxml and now unittest
10:02  bob2: heh
10:02  bob2: even just thinking 'how would I test this?' is a useful trick, even if you don't do it
10:03  talented: I test it against production... but I don't test what could go wrong if I tried different things
10:04  bob2: i mean more in terms of 'oh this __init__ takes 40 arguments, that would be super annoying to test'
10:04  bob2: or 'this Person class needs a full db connection to even instantiate an instance, what a pain'
10:07  talented: do you know of any projects where someone has looked at a C/C++ program and wrote an equivalent in Python?
10:08  talented: C/C++ is a different beast to Python, and I'm slowly starting to realise the differences but not sure that I'm programming it like it should be done in Python or just copying how it works in C/C++
10:09  bob2: no sorry
10:10  TheSheep: I think Thunar was initially written in Python and then rewritten to C++
10:10  TheSheep: not sure how the process looked like though
10:12  talented: ahh ok, seems they used Python for a mock up of it before writing it in C++
10:26  Dynetrekk: why does python depend on db46?
10:27  wols_: maybe you should ask your distro? most likely cause python comes with an extension to access db46 stuff
10:28  Jerub: Dynetrekk: because it has a built in api for it
10:28  Dynetrekk: Jerub:  you mean a stdlib module?
10:28  Jerub: Dynetrekk: yep.
10:29  talented: is a, b, c = ... the same as (a, b, c) = ... ?
10:29  Jerub: Dynetrekk: it's one of those ones that's very hard to manage because it's a very tight coupling between python version and the lib, it builds against the version that was present on the build system, and then depends on it.
10:29  Jerub: talented: yes, the brackets there are optional
10:29  bob2: talented: they're optional the same way that they are in 'x = 1,2,3'
10:29  Dynetrekk: Jerub: aha... sounds complicated
10:29  talented: oh ok, no just I need to make it fit within 80 chars but I have split them
10:30  bob2: it takes so many clicks to view ze code in launchpad :|
10:30  talented: doesn't seem like you can do a, b,\n c =
10:30  bob2: indeed
10:30  talented: is there a reason why we need to keep code within 79 to 80 chars?
10:31  bob2: guess what the solution is? :)
10:31  bob2: readability
10:31 --- wtfness is now known as foocraft
10:31  talented: can we simplify readability then?  cause I feel the length of my variables end up breaking this 80 char barrier
10:32  bob2: it is just a guideline
10:33  talented: to be honest my code doesn't look readable... it likes like a C++ similar nightmare
10:33  wols_: I want to do X11 stuff like find a process by name, find the window of the process, put the window in foreground and backound, move it, etc. Under Windows I'd use the win32 extensions, what is there for Linux/X11?
10:34  bob2: if you like, pastebinz and people will give you suggestions
10:35  talented: well, yea... I was going to spend my time breaking the class down... but think suggestions at this stage would help
10:55  xolve: How can I perform the inverse matches and split with python re module. The regular expression is set at runtime.
10:59  xolve: How can I perform the inverse matches and split with python re module. The regular expression is set at runtime.
11:00  bob2: not really clear to me what that means
11:00  bob2: maybe pastebin the code ou have and the desired input and output
11:00  bob2: talented: well, whenever you're ready
--- Log closed Sat Nov 13 11:02:16 2010
