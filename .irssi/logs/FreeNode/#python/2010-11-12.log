--- Log opened Fri Nov 12 00:50:48 2010
--- Log closed Fri Nov 12 00:57:32 2010
--- Log opened Fri Nov 12 01:12:31 2010
01:12 --- Users 753 nicks [0 ops, 0 halfops, 0 voices, 753 normal]
01:12  zjblabs: thanks bob2 and _habnabit
01:12  _habnabit: dash, you don't think my idea is as good as DENIED? :(
01:13  riddlebox: bob2, its a radio controlled car
01:13  dash: _habnabit: sure. :)
01:13  bob2: riddlebox: ok, right, but serial ports are not radio transmitters
01:13 --- Channel #python was synced in 89 seconds
01:14  bob2: riddlebox: so you need to build a box that connects a serial port to the transmitter
01:14  bob2: which is a bit out of scope for #python ;)
01:14  riddlebox: bob2, exactly
01:14  bob2: but once you do that, you can of course poke it from python
01:15  riddlebox: bob2, yeah, but I have been looking into it and cannot really find good documentation of pyserial
01:15  bob2: the 'buildign the box to interface serial port to remote control' is going to be the hard bit
01:16  dash: _habnabit: i just wasn't sure who you were making fun of.
01:17  _habnabit: dash, the folks who try to micro-optimize python code.
01:17  _habnabit: dash, instead of, y'know, profiling.
01:20  riddlebox: bob2, I already have a bread board with LED Lights wired up,but I just want to figure out how to make the lights up with the serial port
01:20  bob2: I think we're dancing around an issue
01:20 * panzi had just to write something in ruby and discovered that it is true: explicit is better than implicit
01:21  bob2: do you have a serial decoder chip or whatever on there?
01:21  dash: _habnabit: yeah i get that now. :D
01:22  riddlebox: bob2, serial port --> cable to rc ---> wired to the leads
01:22  bob2: ok, anyway, unrelated to python
01:22  bob2: I'm 99% sure you can't drive any of this directly off a serial port, though
01:22  riddlebox: I have already done this once with a parallel port, but apparently pyserial is a different beast
01:23  riddlebox: using pygame, and pyparallel
01:23  bob2: no, parallel ports and entirely different to serial ports
01:23  dash: panzi: what did you learn!
01:23  bob2: par5allel ports have a bunch of lines you toggle on and off
01:23  bob2: serial ports have two lines you send serial data down
01:24  riddlebox: bob2, so if I dont have a parallel port, I am SOL
01:24  jakllsch: ... as well a handful of misc signal lines
01:24  bob2: no, you need more electronics
01:25  riddlebox: well back to research then
01:27  panzi: dash: usually foo() and foo is the same in ruby, except when it isn't foo but super. super does something else than super(). it implicitly passes all parameters the current method got to the same method in the super class (what you don't want in initialize)
01:27  sromah: Hi everyone. I am new to Python. I am trying to get a version number from a string "version 2.1.0" to major=2 minor=1 and release=0. Can you guys help me out how to use it?
01:28  bob2: sromah: how would you do it by hand?
01:28  dash: panzi: magic like a flying pony!
01:28  panzi: major, minor, release = map(int,vers.split(" ")[1].split("."))
01:28  Brend: >>> [int(vb) for vb in "version 2.1.0".split(None, 1)[1].split(".")]
01:28  Brend: [2, 1, 0]
01:28  panzi: sromah: major, minor, release = map(int,vers.split(" ")[1].split("."))
01:29  bob2: bonghits
01:29  sromah: oh.. thanks.. panzi
01:30  _habnabit: panzi, ruby is awesome
01:31  sromah: seriously, i though it could be a function including a least 5 lines of code..
01:31  augdawg: how can i check if a variable is in an array?
01:31  sromah: awesome.. python
01:31  _habnabit: augdawg, in
01:31  bob2: augdawg: you mean list?  foo in bar
01:31  augdawg: so like "if this is array_name:" ?
01:32  bob2: you mean list, presumably, but yes
01:32  turtle143: i have a question
01:32  augdawg: yes, that is what i meant. thanks bob2!
01:32  augdawg: turtle143: ask away!
01:32  KirkMcDonald: turtle143: Go ahead caller, you're on the air.
01:33  dash: heh
01:33  augdawg: haha
01:33  andref: turtle143: realy?
01:33  turtle143: im not very new to python, but this is the first time this has been a problem/ come up. im checking if two variables equal a certain number
01:33  turtle143: what is the proper syntax
01:33  KirkMcDonald: turtle143: if a == b == c:
01:33  KirkMcDonald: turtle143: That works.
01:33  turtle143: ive tried if ax+wy == -4
01:33  turtle143: it gives an error
01:34  andref: and is in Python ===?
01:34  KirkMcDonald: What is the error?
01:34  turtle143: i meant the two variables combine
01:34  bob2: you forgot the :
01:34  bob2: andref: no
01:34  turtle143: ah.
01:34  turtle143: cant believe i did that
01:34  KirkMcDonald: Ah.
01:34  KirkMcDonald: That would do it.
01:34  turtle143: i feel extremely stupid
01:34  turtle143: hahaha
01:34  andref: in which language was === ?
01:34  _habnabit: andref, === is objectively the worst thing ever.
01:34  _habnabit: andref, it's php.
01:34  andref: oh, right ;)
01:35  jhl: andref, _habnabit: And AS3
01:35  panzi: andref: === is javascript (and I think php)
01:35  _habnabit: Oh, right, javascript has it too.
01:35  jhl: I guess any ECMA language.
01:35  panzi: _habnabit: the need for === is, not === itself
01:36  jhl: Is that a Zen saying?
01:36  _habnabit: panzi, well, yes.
01:36  jhl: Oh, reparse.
01:37  caitlin_: Hi. I'm a python newbie, trying to get some stuff setup on my mac. I've got 2.6 fine, but trying to use a script that requires PIL, which I used MacPorts to install. Everytime I run it, it gives me a "ImportError: No module named PIL" error.
01:37  _habnabit: caitlin_, `import Image`
01:37  andref: I'm not sure about === in JAvaScript
01:37  _habnabit: andref, what about it makes you uncertain?
01:37  andref: I'll ask on JavaScript
01:38  andref: if it xists in JS
01:38  andref: ;)
01:38  _habnabit: Yes, it does.
01:38  caitlin_: _habnabit, it stops the script at this line.. "File "/Users/caitlin/Downloads/overviewer/chunk.py", line 17, in <module>
01:38  caitlin_:     from PIL import Image, ImageDraw, ImageEnhance
01:38  caitlin_: ImportError: No module named PIL"
01:38  igors: whois _habnabit
01:38  caitlin_: er. line breaks. =\
01:38  _habnabit: igors, I'm me!
01:38  bob2: caitlin_: use macport's python
01:38  _habnabit: bob2, that's not the problem.
01:38  caitlin_: bob2 , with python_select?
01:39  _habnabit: caitlin_, everything packages PIL a little bit differently.
01:39  bob2: _habnabit: oh
01:39  bob2: ugh
01:39  _habnabit: caitlin_, macports exposes it as Image, not PIL.
01:39  igors: _habnabit: hahaha, that was bad :P
01:39  dash: yeah PIL is a bit retarded.
01:39  panzi: gah, obviously the ruby way for `list("foo")` is `"foo".split(//)`. well, not so "obviously", actually.
01:39  caitlin_: How can I fix it?
01:39  MostAwesomeDude: caitlin_: Having fun with Overviewer? :3
01:39  caitlin_: MostAwesomeDude, guilty. =)
01:40  MostAwesomeDude: caitlin_: I guarantee you that I am more guilty. https://github.com/MostAwesomeDude/beta
01:40  andref: _habnabit: You're right there is === in JavaScript and even >>>=
01:40  andref: ;)
01:41  merp: Greetings, I have been searching (in vain so far) for a python module that can grab the "Current Song" line from an icecast server page (status.xsl). Can anyone point me in the right direction please? thanks. (The only things I see for icecast and shoutcase on pypi are tools for broadcasting, i just want to parse one line from the page). thanks.
01:41  augdawg: how do you check if there is nothing in a list?
01:42  KirkMcDonald: augdawg: for not L:
01:42  KirkMcDonald: Err
01:42  KirkMcDonald: ...
01:42  KirkMcDonald: augdawg: if not L:
01:42  KirkMcDonald: What a strange typo.
01:42  caitlin__: MostAwesomeDude, Haha. Awesome. I'm still stuck at Step 1. Can't get the python environment working for it.
01:42  augdawg: KirkMcDonald: I don't wuite understannd. how do I identify what list?
01:42  panzi: almost reminds me of haskell. there you can define your own operator and some people use "the fish operator" <><
01:42  dash: merp: isn't it just an http request to get some xml?
01:42  MostAwesomeDude: caitlin__: You may need to use a Real Operating System. The author of Overviewer only uses Linux; you may have to patch his PIL invocations a bit.
01:43  KirkMcDonald: augdawg: Replace 'L' with whatever your list is.
01:43  augdawg: okay, KirkMcDonald, thanks
01:44  caitlin__: MostAwesomeDude: Er. What exactly is wrong with it? Do i just need to replace how some certain things are called, or what?
01:44  merp: dash, basically, I'm trying to find the right syntax and libs I should use for such parsing. I guess urllib2 for the url, but not sure which xml lib to use (seem to be many), and then an example syntax, and was just checking if someone had already created a more advanced api/module with more features than that, rather than reinventing the (albeit simple) wheel.
01:44  _habnabit: caitlin__, just remove the `from Image` part.
01:44  _habnabit: MostAwesomeDude, ha ha, you think PIL is consistently packaged on linux.
01:45  dash: merp: lxml.etree is the nicest, xml.etree.ElementTree is in the stdlib and almost as nice.
01:45  caitlin__: _habnabit, from the actual script?
01:45  MostAwesomeDude: _habnabit: I don't do PIL often. :3
01:45  augdawg: how can i get python to not split quotes? for example, splitting "Hello, world!" as one item.
01:45  merp: dash, okay, that helps narrow it down, thanks.
01:45  jhl: augdawg: How do you mean?
01:46  KirkMcDonald: augdawg: What exactly are you parsing?
01:46  augdawg: like in a langauge interpreter.
01:46  KirkMcDonald: Ah.
01:46  giampaolo: I'm overriding __dir__ special method, whithin it I need to call dir(self) but I obviously can't because I get a maximum recursion depth error. What I need is something like self.__class__.__dir__ but that doesn work (return None)
01:46  _habnabit: giampaolo, 1) don't use dir. 2) don't implement __dir__
01:46  jhl: augdawg: Probably need regular expressions.
01:46  giampaolo: _habnabit: why?
01:46  _habnabit: giampaolo, it's totally useless.
01:47  augdawg: jhl: what do i have to do to use regex with this?
01:47  giampaolo: well, if it's there I suppose there's a reason =)
01:47  _habnabit: giampaolo, that's your second mistake.
01:47  _habnabit: giampaolo, there's a number of things in python that don't have a good reason for their existence. Some of them eventually get removed.
01:47  jhl: augdawg: You want to split on whitespace except if the whitespace is contained in quotes?
01:47  giampaolo: you consider it useless or harmful?
01:47  augdawg: jhl: that is correct.
01:47  _habnabit: giampaolo, both.
01:47  GrIM147: how can you wipe an object from memory ?
01:48  _habnabit: GrIM147, what does that mean
01:48  _habnabit: augdawg, shlex.split
01:48  augdawg: _habnabit: what?
01:48  giampaolo: _habnabit: why would it be harmful?
01:49  jhl: augdawg: I suppose you could split on " first and then split every other result on whitespace, but that seems pushing it a bit.
01:49  dash: giampaolo: dir() is not reliable for anything
01:49  _habnabit: giampaolo, its use frequently encourages people to avoid reading documentation.
01:49  _habnabit: augdawg, it's a function. use it.
01:49  dash: giampaolo: what problem are you trying to solve?
01:49  _habnabit: augdawg, it does what you want.
01:49  KirkMcDonald: augdawg: http://docs.python.org/library/shlex#shlex.split
01:49  augdawg: _habanabit: so do i do LIST.shlex.split()?
01:50  augdawg: or shlex.split(LIST)
01:50  giampaolo: "encourages people to avoid reading documentation" doesn't seem a good reason to me
01:50  _habnabit: Neither.
01:50  _habnabit: shlex.split(a_string)
01:50  jhl: Hey, cool. I didn't know about shlex.
01:50  bob2: doesn't work on unicode strings alas
01:50  _habnabit: giampaolo, why do you think that's not a good reason?
01:50  augdawg: _habnabit: thank you!
01:50  jhl: giampaolo: What are you actually trying to do?
01:50  dash: _habnabit: let's not get distracted
01:50  _habnabit: dash, sure okay.
01:51  jhl: giampaolo: You need to grab a reference to the function before you redefine it, then call the reference internally.
01:51  _habnabit: What
01:51  jhl: But I'm still curious what you're trying to do.
01:51  dash: jhl: What
01:51  jhl: ?
01:52  giampaolo: jhl: keep a reference somewhere just to do that? ugh...
01:52  _habnabit: jhl, your suggestion makes no sense.
01:52  dash: giampaolo: what are you writing?
01:52  giampaolo: jhl: I'm sure there are other ways
01:52  Hakugin: jhl's suggestion definitely confused the hell out of me
01:53  jhl: I suppose I need to be clearer.
01:53  augdawg: _habnabit jhl KirkMcDonald i just tested the shlex.split thing and it works. just letting you guys know.
01:53  augdawg: thankd again _habnabit
01:53  augdawg: !
01:53  _habnabit: jhl, you're still solving the same problem.
01:53  _habnabit: er.
01:53  _habnabit: the wrong problem.
01:53  _habnabit: jhl, you don't need to eludicate any further.
01:54  jhl: _habnabit: :) I agree.
01:54  giampaolo: _habnabit: you still haven't told *why* exactly __dir__ is harmful or useless
01:54  giampaolo: or at least, I didn't get it
01:55  dash: giampaolo: start from the other end
01:55  _habnabit: giampaolo, before we tackle that, why don't we go over what it is you're trying to accomplish here.
01:55  jhl: giampaolo: You still haven't told us what you're trying to do. Can you describe the problem?
01:55  KirkMcDonald: giampaolo: It's useless because I can't conceive of a use for it which is not a terrifyingly bad idea.
01:56  jhl: But that's the fun part!
01:56  KirkMcDonald: giampaolo: It's harmful in part because it is undocumented.
01:56  KirkMcDonald: But mostly it is harmful because if you are defining it, you are doing so in order to lie.
01:57  giampaolo: I need to iterate over all "public" methods of a class in a couple of points in my tests, then I thought about overriding __dir__ to exclude private ones. Also, I like having a cleaner dir() result
01:57  dash: giampaolo: !!
01:57  dash: giampaolo: why do you need to do that?
01:57  KirkMcDonald: Oh lord.
01:57  giampaolo: well, they're tests, I wouldn't rely on such a behavior elsewhere obviously
01:58 * MostAwesomeDude predicts giampaolo wants zope.interface
01:58  KirkMcDonald: Except that you're going to *get* that behavior everywhere.
01:58  bob2: what is the point of a test that does this
01:58  dash: giampaolo: right but this sounds like a not so great test
01:58  bob2: vs say testing that the method do the thing they are meant to do
01:58  KirkMcDonald: And, anyway, that does indeed sound like a poor test.
01:59  sromah: Is there any python editor for Mac. It would be better the editor can compile and debug the code.
01:59  _habnabit: sromah, I use emacs.
01:59  bob2: emacs, vim
01:59  KirkMcDonald: sromah: There is MacVim.
01:59  bob2: pycharm is getting popular
01:59  giampaolo: it's a Process class, representing a system process. When the process has gone away (killed/terminated) all public methods of Process class are supposed to raise NoSuchProcess exception
01:59  dash: eclipse/pydev too. not sure if i'd recommend it :)
01:59  jhl: giampaolo: Why not just make a list of methods you want to test?
01:59  dash: giampaolo: then explicitly write tests for each
01:59  KirkMcDonald: giampaolo: You're reimplementing the subprocess module?
01:59  dash: or an explicit list, yeah.
01:59  giampaolo: that's why I thought about using dir(): to avoid repeating a lot of stuff
01:59  sromah: thanks guys
01:59  dash: giampaolo: Repeating stuff isn't bad.
02:00  giampaolo: KirkMcDonald: no, psutil
02:00  KirkMcDonald: Ahhh.
02:00  KirkMcDonald: Okay.
02:00  jhl: Repeating stuff in tests is probably good even.
02:00  giampaolo: jhl: I agree
02:02  bob2: for method in ('whatever', 'whoCares', ...): self.assertRaises(NoSuchBlah, getattr(o, method))
02:02  giampaolo: I agree using this stuff in a test is debatable, but I still don't get why this should be evil to use in public code
02:02  KirkMcDonald: giampaolo: It is not good to lie.
02:03  dash: giampaolo: i'd say it shouldn't be done because there's no value in doing it.
02:03  giampaolo: dash: having a cleaner dir() result has some value, imo
02:03  KirkMcDonald: giampaolo: What does "cleaner" mean?
02:03  KirkMcDonald: giampaolo: What value is this?
02:04  giampaolo: less verbose
02:04  giampaolo: easier to read/use when you are in a pdb session or in the python prompt
02:04  jhl: giampaolo: Having great documentation is a better way around that problem.
02:05  KirkMcDonald: giampaolo: Except that the result is a fabrication. Why not use some entirely different method for this purpose?
02:06  KirkMcDonald: obj._my_list_of_shit()
02:06  jhl: giampaolo: I can imagine some poor soul going insane because dir doesn't agree with reality.
02:07  giampaolo: mmm considering I'm the only one who find some utility in __dir__ maybe I should read the reasons which were given for adding it in the first place
02:07  KirkMcDonald: giampaolo: This assumes that there is a reason.
02:07  giampaolo: KirkMcDonald: yes =)
02:07  Juhaz: if I'm debugging something in pdb, it's because something doesn't work. The bug could be in "private" methods just as well as in public, pretending they don't exist will only make the job harder
02:08  giampaolo: I take for granted that it was added for a reason, at least
02:08  giampaolo: Juhaz: good point
02:08  KirkMcDonald: giampaolo: This is not an assumption that I would make.
02:08  Juhaz: most likely it was added for the _opposite_ reason. To add some attributes that are dynamically created
02:09  KirkMcDonald: That seems plausible.
02:09  giampaolo: Juhaz: right
02:10 --- Yvemath_ is now known as yve`
02:12  giampaolo: ok I won't do it
02:12  dash: jhl: it's not like dir() agrees with reality in all cases already
02:12  Juhaz: I do agree it's sometimes hard to find things from a very long dir listing in the interpreter, but there's a pretty good way around that already - let the watcher filter it, it's simple enough to do at runtime with eg. a list comprehension
02:12  jhl: dash: Good point. Those poor souls are likely already gibbering away to themselves in a dark corner.
02:13  Juhaz: but at least they will be eaten last
02:13  giampaolo: thanks all, I'm gonna sleep
02:13  jhl: Cthulhu has no favorites.
02:15  Hakugin: I want to say thanks to those who "tolerated" the issues with my script yesterday, those issues are no more :)
02:28  mike-ekim: Hi, I am using urllib to try to authenticate to a django web server, and run some authentcation protected test views. It works but its kind of weird, I can pass the authentication parameters, logs in fine, i see in the logs i get 200 response from authenticated views, but then when i try to hit ANOTHER page after that request it redirects me back to login...
02:28  mike-ekim: any ideas what might be going on here?
02:28  _habnabit: mike-ekim, is this HTTP auth or cookied-based auth?
02:28  mike-ekim: I am using HTTPCookieProcessor
02:28  mike-ekim: so its cookie based auth
02:29  _habnabit: mike-ekim, then you want mechanize, not urllib.
02:29  mike-ekim: but how com eit works for the first page i try to hit that is authenticated
02:29  mike-ekim: but the page right after that it does not? (just curious)
02:29  _habnabit: Without seeing your code, I have no diea.
02:29  _habnabit: idea.
02:30  bob2: I'd guess you're getting redirected from the login page
02:30  bob2: so you didn't need to send the cookie back for that one request
02:30  _habnabit: That was my guess, but I didn't want to guess without verifying from the code.
02:30  bob2: fair enough
02:31  amitz: I'm doing BeautifulStoneSoup, I need to do something like findAll('a',class='foo') but turns out that class is a reserved class. Is there a way to pass the 'class' parameter in other way?
02:31  _habnabit: amitz, findAll('a', 'foo')
02:31  _habnabit: amitz, also I'd recommend switching from BS to lxml.html.
02:31  caitlin__: _habnabit, I'm finally getting back at this. "just remove the `from Image` part."  - where do i remove it? I can't find where it uses it in the script
02:31  musically_ut1: What is the difference between a package inside another package and a module inside a package?
02:31  mike-ekim: ill post
02:31  bob2: musically_ut1: one is a package, one is a module
02:32  _habnabit: caitlin__, er, I meant `from PIL`
02:32  bob2: musically_ut1: are you having a problem in particular?
02:32  caitlin__: ah ok
02:32  bob2: amitz: or class_ iirc
02:32  musically_ut1: bob2: Yes, in relative imports.
02:32  amitz: _habnabit: I see, a work around then. Will see lxml.html again although iirc it's somewhat run natively.
02:32  caitlin__: _habnabit ah ok, so just take that away and leave "import Image"
02:32  musically_ut1: bob2: http://fpaste.org/C1ec/
02:33  bob2: module names should be all lower case man
02:33  amitz: bob2: class_ doesn't catch, oh well, thank anyway :-)
02:33  mike-ekim: _habnabit: http://pastebin.ca/1988668
02:33  infobob: http://bpaste.net/show/10914/ (repasted for mike-ekim)
02:33  musically_ut1: bob2: a requirement or a convention?
02:33  bob2: musically_ut1: and all your code should be in a package
02:33  bob2: musically_ut1: a convention that is confusing to break
02:33  caitlin__: lol, _habnabit... now i get "ImportError: No module named Image"
02:34  musically_ut1: bob2: Point noted, thanks.
02:34  musically_ut1: bob2: 'TweetChat' is meant to be a distributable package.
02:34  bob2: musically_ut1: does it contain a setup.py?
02:34  musically_ut1: bob2: No, not yet.
02:35  bob2: musically_ut1: then all the code should be moved in to TweetChat/tweeetchat, and that dir should have a __init__.py
02:35  musically_ut1: bob2: TweetChat/__init__.py does exist, albeit empty.
02:36  musically_ut1: bob2: Oh, I see, the problem is _inside_ the topia package.
02:36  amitz: _habnabit: fwiw, the first parameter seems to be positional, and the second to infinity seems to be un-positional. So will find another work around. Thanks anyway.
02:36  bob2: musically_ut1: does it have a __init__.py?
02:37  musically_ut1: bob2: Yes, topia does have it, but topia not using relative imports (line 36)
02:37  amitz: _habnabit: sorry, my mistake, never mind.
02:37  bob2: not sure what th means
02:37  musically_ut1: bob2: Which is where the difference between packages and modules comes in.
02:37  bob2: anyway, layout should look like this: http://jcalderone.livejournal.com/39794.html
02:38  musically_ut1: bob2: Excellent, thanks for the pointer.
02:38  amitz: I mean, no certainty about positional thingies. But it works.
02:43  lvh: Greetings!
02:45  tiglionabbit: how can I read a user-input datetime like "6/13/2011 12:00" in US/Eastern time, and convert it into a UTC timestamp?
02:47  lvh: tiglionabbit: strptime + strftime
02:47  lvh: tiglionabbit: Maybe not strftime depending on what you mean by UTC timestamp
02:48  lvh: tiglionabbit: Step one is "get it into a datetime object"
02:48  tiglionabbit: I mean the number of seconds since 1970 in UTC
02:48  lvh: (that's strptime)
02:48  tiglionabbit: yes, I can do that
02:48  tiglionabbit: well, strptime gives me a struct time actually
02:48  bob2: no
02:48  bob2: time.strptime gives you a struct time
02:49  bob2: datetime.dt.strptime gives you a datetime
02:49  bob2: subtract a datetime object set to the epoch, get a timedelta
02:49  tiglionabbit: which one of these can have tzinfo?
02:49  lvh: tiglionabbit: Sorry, I should've been more specific. I meant datetime.datetime.strptime
02:49  bob2: dt can
02:49  lvh: tiglionabbit: http://docs.python.org/library/datetime.html that page
02:49  bob2: do you care about leap seconds? ;p
02:50  tiglionabbit: bob2: can leap seconds exist in a single timestamp?
02:50  bob2: there have been leap seconds since 197-
02:50  tiglionabbit: I'm not doing any arithmetic with this timestamp.  I just want to read in some user input
02:51  lvh: tiglionabbit: yes, the beauty of *nix timestamps is that they keep working regardless of leap seconds, leap days...
02:53  awaad: I want to use the feature of autocompletion of bpython in vim
02:53  awaad: Is it possible ?
02:53  tiglionabbit: uh oh
02:53  tiglionabbit: I'm using python 2.4 and datetime.datetime has no method strptime
02:54  agolsme: how do i call mysql_real_escape_string from python? i am a bit confused by the dbapi
02:54  dash: agolsme: you don't
02:55  Jerub: agolsme: that's the beauty of it.
02:55  dash: agolsme: you call cursor.execute("select blabla from stuff where foo = ? and baz = ?", (x, y))
02:55  Jerub: agolsme: python has a db api that doesn't force you to do illogical things that are hard to do! you do the thing that's easy to do and it's automatically secure!
02:55  bob2: db access in php is a trainwreckl
02:56  tiglionabbit: I wish more of the db api drivers supported the colon syntax
02:56  Jerub: it's a delightful trainwreck! there are buxom nurses doing triage and pointing you the way to the security holes in the ruptured train carriages.
02:56  Jerub: and there are rainbows and unicorns
02:56  agolsme: oh i see, interesting
02:56  bob2: but seriously, they have a method called mysql_real_escape_string
02:56  bob2: are the others fake?
02:56  bob2: it's like a serious of traps
02:56  _habnabit: bob2, no, they don't handle non-ASCII data.
02:56  awaad: ??
02:56  Jerub: bob2: do you know what the difference is?
02:56  bob2: Jerub: no
02:57  Jerub: bob2: mysql_real_escape_string takes an optional db argument
02:57  _habnabit: bob2, there's also mysql_real_connect
02:57  bob2: Jerub: I gave up and told people to use PDO or GTFO
02:57  noobermin: is is bad to call your the new method for your type explicitly?
02:57  Jerub: it's so that the escaping can be encoding aware
02:57  bob2: Jerub: ahh
02:57  dash: noobermin: the what?
02:58  turtle143: im getting the error "unindent does not match any outer indentation level" when i use this code: for event in pygame.event.get():
02:58  turtle143: 		if event.type == KEYDOWN:
02:58  turtle143: 			if event.key == K_a:
02:58  turtle143: 				 for event in pygame.event.get():
02:58  turtle143: 					if event.type == KEYDOWN:
02:58  turtle143: 						if event.key == K_w:
02:58  turtle143: 							direction = 6
02:58  turtle143: 						elif event.key == K_s:	
02:58  bob2: turtle143: don't paste code here
02:58  turtle143: 							direction = 4
02:58 --- ChanServ sets modes [#python +o _habnabit]
02:58  turtle143: 				else direction = 5
02:58 <-- _habnabit has kicked turtle143 from #python (turtle143)
02:59  noobermin: like you have an extended type foo with...the new function foo_new, is it considered bad to call the new function explicitly when you want to make new objects in C
02:59  tiglionabbit: how do I convert a struct time into a datetime?
02:59 @_habnabit: tiglionabbit, datetime.datetime.strptime.
02:59 @_habnabit: tiglionabbit, instead of time.strptime.
02:59  tiglionabbit: _habnabit: that doesn't exist in python 2.4
02:59  tiglionabbit: which I have to use on this project
02:59 @_habnabit: tiglionabbit, RHEL4?
02:59  turtle143: but seriously, what was the problem
02:59  tiglionabbit: _habnabit: centos
02:59  bob2: turtle143: don't paste code on irc
02:59 @_habnabit: turtle143, don't paste to the channel.
02:59  bob2: turtle143: http://bpaste.net/
02:59  turtle143: no, i mean with the code, and okay
02:59 @_habnabit: turtle143, we didn't see it all.
03:00 @_habnabit: turtle143, also, don't use tabs.
03:00 --- _habnabit sets modes [#python -o _habnabit]
03:00  bob2: turtle143: who knows, we didn't see all of it or hear the description of the issue
03:00  tiglionabbit: I know it's not hard to upgrade to 2.6, but I just couldn't win the argument at work :P
03:00  tiglionabbit: so anyway
03:00  saxamo: How easy/difficult would one say it is for me to write something in 2.x if i'm only experienced in 3.x? I know some syntax has changed but anything major?
03:00  tiglionabbit: is there any way to convert a struct time to a datetime?
03:00  _habnabit: tiglionabbit, datetime.datetime(*struct_time[:-2]) or so.
03:00  turtle143: ah
03:00  turtle143: http://bpaste.net/show/10915/
03:00  turtle143: i was about to describe it
03:00  noobermin: saxamo, uh, I don't think it's that terrible...
03:00 * tomas_ notes that _habnabit is op for the future
03:00  _habnabit: turtle143, see, this is why you don't mix tabs and spaces.
03:00  turtle143: should i have put that on bpaste.net in the same box?
03:01  noobermin: saxamo, terribly different, i mean
03:01  saxamo: OK thank you noobermin.
03:01  turtle143: i didnt
03:01  turtle143: and i already checked
03:01  _habnabit: turtle143, yes, you did.
03:01  _habnabit: turtle143, there's an extra space on line 3.
03:01  bob2: turtle143: else's : is required
03:01  _habnabit: line 4.
03:02  tiglionabbit: [:-2]?  Hm, what am I discarding if I do that?  Oh I see, day of week, day of year, and daylight savings time.  Nothing important then
03:02  _habnabit: turtle143, what editor are you using?
03:02  turtle143: gedit, on ubuntu
03:02  _habnabit: turtle143, set it to expand tabs to spaces.
03:03  _habnabit: turtle143, I dunno if it has a visible whitespace mode, but it's a good thing to have on.
03:03  turtle143: there probably is one
03:03  turtle143: a plugin
03:04  turtle143: ill look for one
03:04  turtle143: but i checked every line and there werent spaces
03:04  _habnabit: turtle143, again, line 4.
03:04  turtle143: it seems like there was an extra on line 4 but there wasnt
03:04  turtle143: it probably happened when i copied+pasted
03:05  _habnabit: turtle143, I doubt it.
03:05  _habnabit: turtle143, anyway, convert tabs to spaces and try running it again.
03:05  turtle143: already did, same error
03:05  noobermin: ok...here is my code which is a C extension. Kindly ignore the function calls prepended with two2gam_ or twoll...and two2gam_pychar is the name of the type...basically, am i doing anything wrong with the C-API sutff?
03:05  _habnabit: turtle143, pastebin the whole file and the traceback.
03:05  turtle143: wait, just got it to work
03:06  turtle143: downloaded a whitespace deleting plugin
03:06  turtle143: and there was apparently a mistake in line 25
03:06  turtle143: no clue why it affected it
03:06  tiglionabbit: _habnabit: oh, that should be -3, otherwise you make the day of the week into the number of microseconds
03:06  turtle143: but thanks anyways
03:06  noobermin: sorry, here it is http://fpaste.org/BT2V/
03:07  _habnabit: noobermin, yes: you're not using cython.
03:08  _habnabit: noobermin, PyChar_Type is yours?
03:09  noobermin: _habnabit, not this again...haha :) yes, that's my type's
03:09  _habnabit: noobermin, why not use cython?
03:10  noobermin: _habnabit, honestly? Well...another thing to learn, I guess :)
03:11  noobermin: it's another thing to learn, i mean. If i have the time, i might
03:12  _habnabit: noobermin, also, you're requiring the user pass you a list, when all you really want is an iterable.
03:13  noobermin: _habnabit, ok, so just PySequence you suggest?
03:13  _habnabit: noobermin, there's some other style issues, and I'm looking over it to see if you have any reference leaks.
03:13  noobermin: or something of the sort?
03:13  noobermin: _habnabit, ok, thanks
03:13  _habnabit: noobermin, no, don't check types at all. Use PyObject_Iter or something.
03:14  noobermin: _habnabit, ok...i'll look into that
03:14  _habnabit: noobermin, line 69: you're not using PyList_GET_ITEM, so you *must* check for exceptions.
03:15  jhl: What's the best way to split a sequence along a known set of indices?
03:15  dash: Slice.
03:15  dash: -
03:15  _habnabit: noobermin, also your comments are completely indecipherable.
03:15  _habnabit: noobermin, 'intended' ? 'This is okay!' ?
03:16  noobermin: _habnabit, they're for me :) sorry I didn't really edit it for this posting
03:16  _habnabit: noobermin, well, you asked for a review.
03:16  noobermin: _habnabit, what possible exceptions could occur other than out of bounds
03:16  _habnabit: noobermin, line 71: you're not INCREFing. Is that what the comment is about?
03:17  _habnabit: noobermin, no, you're missing the point. You *can not* ignore exceptions.
03:17  _habnabit: noobermin, if you want to explicitly silence the exception, you *must* clear the exception.
03:17  _habnabit: noobermin, but that requires checking to see if one happened anyway.
03:18  noobermin: _habnabit, ok, so I check for exceptions after each PyList_GetItem
03:18  _habnabit: noobermin, no, because you shouldn't be using PyList_GetItem anyway.
03:18  _habnabit: noobermin, worst case, you use PySequence_GetItem. In your case, you want to use the iterator interface anyway.
03:19  _habnabit: noobermin, also, why does it require a list with at least two items instead of two parameters?
03:20  _habnabit: noobermin, and your cleanup code in two2gam_py_mkanim is redundant. You should just use a goto.
03:21  noobermin: _habnabit, i guess
03:21  _habnabit: noobermin, oh, and you don't free node or anim on success. I can't tell if that's intentional or not.
03:21  noobermin: _habnabit, that's intentional
03:22  noobermin: _habnabit, so you want me to use this? http://docs.python.org/c-api/object.html#PyObject_GetIter
03:22  _habnabit: noobermin, don't be afraid of gotos. They're important in languages like C with no equivalent of try-finally.
03:22  Arimoto: I've never seen someone say you should use a goto.
03:22  _habnabit: Arimoto, ^
03:22  jhl: dash: Is there anything like super_slice('hello world', (1,3,5))
03:22  _habnabit: noobermin, yes
03:22 --- Affix-AFK is now known as Affix
03:22  _habnabit: jhl, what would the output be?
03:24  jhl: That would return 'h', 'el', 'lo', ' world'
03:24  _habnabit: Oh, I see.
03:25  dash: jhl: it'd be pretty easy to write
03:25  jhl: Sure, but wanted to check if there was a built-in or lib I just didn't know about.
03:25  _habnabit: infobob, codepad jhl def super_slice(x, L): L = [None] + list(L) + [None]; return [x[a:b] for a, b in zip(L, L[1:])];; print super_slice('hello world', (1, 3, 5))
03:25  infobob: jhl, http://codepad.org/Him3uNWE
03:25  nosklo: jhl: def super_slice(s, t): return [s[x:y] for x, y in zip((None,) + t, t + (None,))]
03:25  noobermin: _habnabit, ok, thank you
03:25  _habnabit: nosklo, 2slow
03:26  nosklo: mine is simpler :)
03:26  _habnabit: I would say that mine is. :T
03:27  _habnabit: noobermin, do you want more review? There's other things that should be fixed.
03:27  _habnabit: (But they're style things.)
03:27  agolsme: hmmm can you guys recommend a library for making 3d graphs?
03:27  noobermin: _habnabit, well, go ahead, shoot
03:27  _habnabit: agolsme, graphs of what?
03:28  _habnabit: noobermin, in cases like line 60, it's quite silly to have the primary code path all in an if block and then an error return at the end of your function.
03:28  jhl: Cool, custom function it is. I guess there's nothing that does this already.
03:28  _habnabit: noobermin, you should check for the opposite and raise an error in the if block, and have everything in there be in the main body of the function.
03:28  _habnabit: noobermin, avoid static nesting whenever possible.
03:28  agolsme: _habnabit: degree distribution of a graph
03:28  nosklo: jhl: a simple list comprehension does it
03:29  _habnabit: noobermin, similarly on line 70: check for the opposite and 'continue' otherwise.
03:29  agolsme: hmmmm, the two types of graphs collide...
03:29  dash: agolsme: matplotlib might be what you want
03:29  noobermin: _habnabit, really? I thought it looks cleaner that way, I usually don't do it like that
03:29  nosklo: agolsme: http://www.scipy.org/Cookbook/Matplotlib/mplot3D
03:29  _habnabit: noobermin, yes, really. As I said, avoid static nesting whenever possible.
03:29  jhl: nosklo: Yep.
03:31  noobermin: _habnabit, ok...
03:32  Visualiza: so I'm applying for a job on HP's website. They have text boxes to enter your cover letter etc. Down the right they have detailed instructions on how to COPY AND PASTE TEXT into the boxes?! Seriously, if you can't do that by yourself, then...
03:33  _habnabit: Visualiza, why are you telling us
03:33  Visualiza: ok sorry if it's spam, it just amused me
03:35 --- Guest33011 is now known as simonrvn
03:35  dash: Visualiza: Don't be so quick to judge!
03:36  dash: Visualiza: What if you were applying for an executive position?
03:36  dash: ;>
03:37  musically_ut1: dash: Don't be do quick to judge! The instructions could have said: Ctrl-C Ctrl-V instead of `"+y` followed by `"+p`
03:39  agolsme: kk thanks
03:40  Visualiza: musically_: in their defense, they do have a 'help' button at the top of the page for fringe cases
03:40  Arimoto: what is the command to leave a channel but not quit IRC?
03:41  Eevee: /part
03:41  dash: Arimoto: just paste some code in the channel, someone will kick you
03:41  dash: (also don't listen to me)
03:41  _habnabit: noobermin, http://paste.pocoo.org/show/290283/
03:41  Arimoto: I wanted to see if someone would type it in and accidentally leave.  :-)
03:42  dash: Arimoto: what irc client are you using
03:42  dash: oh well
03:56 --- Affix is now known as Affix-AFK
04:06  sontek: when editing in the python interpreter... is there a way to re-edit the function you defined? or just re-type all of it?'
04:08  _habnabit: sontek, don't use the python interpreter like that.
04:10  tiglionabbit: ok, now how do I display a datetime in eastern time, given a utc timestamp?
04:11  aLemmer: Could someone help me develop an easily application? I just want a coding mentor for a simple app I wanna make.
04:11  _habnabit: tiglionabbit, pytz.
04:11  tiglionabbit: here's my attempt to roundtrip a date from eastern to utc timestamp back to eastern again.  Unfortunately, it ends up an hour off.  I think this may be due to daylight savings time information being lost.  datetime.fromtimestamp(int(timegm(datetime(tzinfo=eastern, *time.strptime(start, format)[:-3]).utctimetuple())), utc).astimezone(eastern).strftime(format)
04:12  tiglionabbit: `start` is the initial time string of '6/13/2010 08:12' and format is '%m/%d/%Y %H:%M'
04:12  _habnabit: Okay jesus christ what the hell is that.
04:12  _habnabit: Why are you doing .utctimetuple() ?
04:12  tiglionabbit: so gmtime will accept it
04:12  tiglionabbit: er, timegm
04:12  _habnabit: ... okay, and why are you using timegm?
04:13  tiglionabbit: to get a timestamp
04:13  tiglionabbit: because datetime dosen't seem to have a to_timestamp function
04:13  _habnabit: Why do you need a timestamp?
04:13  tiglionabbit: to store it in the database that awy
04:13  tiglionabbit: *way
04:13  _habnabit: What the hell shitty database driver  are you using that only accepts timestamps
04:14  tiglionabbit: it has nothing to do with that :P.
04:14  _habnabit: Yes, it does.
04:14  tiglionabbit: it's just stored that way
04:14  _habnabit: Your database driver should take datetime objects.
04:14  _habnabit: Which would alleviate this whole mess.
04:14  tiglionabbit: I don't think couchdb supports datetimes
04:14  tiglionabbit: anyway, regardless, it needs to be backwards compatible
04:15  _habnabit: First, break down that line into something that's not a million characters long.
04:15  _habnabit: I don't even want to poke it.
04:16  mokazon: can someone help me answer a few questions about neural nets?
04:16  mokazon: It's been a while since I used them, and I seem to have forgotten some things
04:16  nosklo: #do_my_homework
04:16  mokazon: please answer in a private message
04:17  papna-work: mokazon: I can send my consulting rates vis private message if you'd like.
04:17  mokazon: I've searched for a few hours to no avail
04:17  lahwran: import json; json.dump(filename, data) # is this correct?
04:18  _habnabit: mokazon, for his consulting rates? You could've just asked.
04:18  _habnabit: lahwran, no. it takes a file object, not a file name.
04:18  lahwran: mokazon, hahaha fancy meeting you here
04:18  mokazon: hmm?
04:18  mokazon: do I know you from somewher?
04:18  lahwran: import json; json.dump(open(filename, "w"), data) # is this correct?
04:18  mokazon: your name seems familiar
04:18  papna-work: lahwran: Try it and see.
04:18  _habnabit: lahwran, 'wb' mode. JSON is a binary format.
04:19  lahwran: _habnabit, ah yes. not used to adding b because it doesn't make a difference on loonix
04:19  _habnabit: lahwran, it does in python 3.x.
04:20  lahwran: oh haha I'm not using 3 right now :)
04:20  lahwran: thankfully
04:21  _habnabit: lahwran, I'm just saying it makes your code forward-compatible and cross-platform with no downsides.
04:21  LockeLaton: hi how do you define a matrix like this in python :  arr[ROW][COL] with all item set to 0?
04:22  _habnabit: LockeLaton, numpy module.
04:22  LockeLaton: _habnabit, we don't have a normal way to do that in python ?
04:22  lahwran: _habnabit, by the way, I thought json was plaintext (?)
04:22  _habnabit: lahwran, there's no such thing as plain text.
04:23  papna-work: lahwran: It's a binary format: utf8-encoded text
04:23  lahwran: ...what??
04:23  papna-work: lahwran: There's no such thing as plain text.
04:23  lahwran: again: what??
04:23  _habnabit: LockeLaton, matrices ? No.
04:23  papna-work: LockeLaton: http://www.joelonsoftware.com/articles/Unicode.html
04:23  tiglionabbit: http://friendpaste.com/2TM70A32shiJQ4n0AaWDr9
04:23  papna-work: lahwran: ^
04:23  _habnabit: lahwran, what part is confusing you?
04:23  papna-work: LockeLaton: For doing linear algebra and other numerical math in Python, use numpy
04:24  lahwran: I always thought plaintext meant nice simple ascii
04:24  Caffeinated: I was curious, positional parameters such as def birthday1(name,age): are refering to a variable outside the function...
04:24  papna-work: lahwran: If you mean ASCII, that's called ASCII
04:24  papna-work: lahwran: JSON isn't.
04:25  LockeLaton: papna-work, _habnabit i'm not doing any math or so, just want to define a matrix to use in my dynamic programming problem
04:25  Caffeinated: While parameters with default values such as: def birthday2(name = "Caffeine", age = 2) are creating the values there.
04:25  lahwran: well ... ok then.
04:25  lahwran: sounds like I'll need to relearn encodings ...
04:25  tiglionabbit: _habnabit: so, where do you think I'm losing an hour?
04:26  papna-work: LockeLaton: If it's a *Matrix*, then it's an abstract thing with a bunch of operations. This concept doesn't really exist in stdlib.
04:27  papna-work: LockeLaton: There's a chance you want a list of lists, or a dict, or a collections.defaultdict(int), or that you want a numpy array. Not knowing what you do with your data, I can't tell you.
04:31  _habnabit: tiglionabbit, looking over the code now.
04:37  magcius: _habnabit, who was improving my borked irc3?
04:39  tiglionabbit: I'm assuming something shifty must be going on in the eastern_to_timestamp function, because timestamp_to_eastern is pretty straightforward
04:40  aLemmer: Could someone help me develop an easy application? I just want a coding mentor for a simple app I wanna make.
04:40  Everember: Have you already decided on what the application will be?
04:40  aLemmer: BRB.
04:41  blues_in_orange: I have an OT IRC-related question, if anyone can PM me, or just say go ahead here, that'd be appreciated.
04:43  tiglionabbit: perhaps the utctimetuple or gmtime part are messing it up?
04:44  tiglionabbit: er, timegm
04:45  amitz: blues_in_orange: #help may help you better.
04:46  blues_in_orange: amitz: thanks
04:47  lahwran: >:( I don't want to have to write my own system to save it! I just want to dump it's state without having to do my own work >.>
04:48  lahwran: is there a way to get pickle to operate on my class?
04:48  lahwran: or maybe (:D) json?
04:49  tiglionabbit: lahwran: what was your problem?  I think I missed it
04:50  lahwran: my problem is that I'm lazy. I'll shut up now
04:51  acts_as_david: would anyone be interested in giving a ruby -> python convert a little guidance?
04:51  acts_as_david: i'm making the switch soon and am a little confused by all of the information i'm finding
04:51  Brend: Ask away, acts_as_david
04:52  acts_as_david: so... package management
04:52  Brend: Uh oh
04:52  acts_as_david: i'm used to rubygems
04:52  acts_as_david: and now bundler
04:52  acts_as_david: i like to keep all my ruby versions separate
04:52  acts_as_david: with their own working gems
04:52  acts_as_david: how can i do that for python? so far i've heard of easy_install/setuptools
04:53  acts_as_david: distribute? (if i remember from this morning)
04:53  Brend: Yeah, no, setuptools is crazy
04:53  acts_as_david: pip
04:53  tiglionabbit: python does that.  Each python version has its own site-packages directory.  You can also use virtualenv if you want even more separate places
04:53  Brend: pip is the best thing we have right now.
04:53  acts_as_david: ah okay
04:53  teratorn: acts_as_david: and people seem to use virtualenv a lot
04:53  tiglionabbit: this is true regardless of whether you use easy_install or pip
04:53  acts_as_david: okay
04:53  Brend: (On recent Ubuntus, most things that were in site-packages are now in dist-packages, and things installed from apt can be in even stranger places)
04:54  acts_as_david: now does python keep everything segregated even on os x? i use ubuntu and os x about the same amount
04:54  acts_as_david: hm...
04:54  acts_as_david: okay
04:54  Brend: acts_as_david, yes, they're separated on OSX too
04:54  dash: Graaah.
04:54  tiglionabbit: _habnabit: if you figure anything out, my email is tiglionabbit@gmail.com
04:54  acts_as_david: so let's take potentially the easiest case, linux
04:54  tiglionabbit: I have to go
04:55  acts_as_david: thx for the help tiglionabbit
04:55  acts_as_david: do you guys recommend installing as much as possible from the repos
04:55  acts_as_david: or just install python and pip there
04:55  acts_as_david: and use pip to install python code
04:56 --- fxhp is now known as foxhop
04:56  Brend: I usually end up installing a lot of packages myself, because things change fast and Ubuntu doesn't keep up, but YMMV.
04:56  Brend: Either way is fine.
04:56  acts_as_david: okay
04:56  acts_as_david: i think i like that better, it's what i'm used to
04:56  aLemmer: Can anyone mentor me in Python? Just while I finish an app...
04:56  acts_as_david: so all i need is virtualenv and pip
04:57  acts_as_david: and i don't need distribute or setuptools or easy_install
04:57  acts_as_david: and i install from gz files, not eggs
04:57  acts_as_david: is that right?
04:58  Brend: aLemmer, we can answer questions. If you want more than that, you should offer money!
04:58  Brend: acts_as_david, well, not entirely.
04:58  Brend: acts_as_david, if something is packaged with setuptools, you're probably going to need setuptools to install it.
04:58  aLemmer: Well I'm just working on a hobby app. :/ Not getting paid.
04:58  aLemmer: A'ight, though.
04:58  Brend: acts_as_david, so you're likely to use them all at some point.
04:59  tiglionabbit: acts_as_david: pip depends on setuptools/easy_install, and distribute is a fork/superset of them.  They're all really the same project, kind of.
04:59  acts_as_david: ah okay
04:59  acts_as_david: that's part of my confusion... they seem like they're all intertwined and i'm usually a minimalist
05:00  acts_as_david: so my brain is telling me "get rid of as much as possible" but from the docs, i'm seeing "don't touch anything"
05:00  tiglionabbit: distribute depends on setuptools depends on distutils
05:00  acts_as_david: perfect
05:00  acts_as_david: thanks, that's exactly what i needed
05:00  tiglionabbit: see ya
05:00  shiftingcontrol: i tried loggin in python offfical site ,it returned problem in python script,did any on had similar issues
05:00  acts_as_david: and one more question, how do i make sure packages get installed to the correct site-packages fdirectory?
05:01  acts_as_david: is that something that pip will handle for me?
05:01  Brend: Damn, I just fixed tiglionabbit's code
05:02  Brend: acts_as_david, the location depends on the Python executable you use to install.
05:02  Brend: (So, yes, it will always be in the right place for that Python)
05:02  acts_as_david: ah okay
05:03  acts_as_david: okay excellent
05:03  acts_as_david: that's all i got for now. you will be seeing me around again though, i'm sure
05:03  acts_as_david: thanks for the help
05:04  Brend: Sure
05:08  bob2: shiftingcontrol: what do you mean?
05:08  bob2: aLemmer: if you pastebin code people will rewrite it
05:08  bob2: it's not something you can ask for, it just happens
05:09  bob2: warning: rewrites will probably involve twisted and lxml.html
05:09  aLemmer: bob2: alright.
05:10  Brend: bob2: And golf!
05:11 --- mokazon is now known as mokagone
05:12  shiftingcontrol: i tried logging in here http://wiki.python.org/moin/Python2orPython3?action=login and after submitting the form it displayed "A problem occurred in a Python script. ",i think site is not working
05:16  teratorn: shiftingcontrol: probably you should email a webmaster or something
05:17  shiftingcontrol: teratorn:yea even i m thinking of that ,but for such a big site it should not happen
05:18  teratorn: shiftingcontrol: make sure you tell them how displeased you are as an open-source customer
05:19  shiftingcontrol: teratorn:sure,if more ppl report it can make our jobs easier
05:19  teratorn: yes everyone spam them so they know we mean business
05:21  shiftingcontrol: teratorn:oh ho
05:58  disappearedng: Hey anyone here can recommend me a simple way to write a cache for mongodb?
05:59  bob2: #mongodb
06:00  disappearedng: well it's not really something on mongodb layer it's smoething that I store AFTER i retrieve something from mongodb
06:00  disappearedng: so I am kind of looking to implement this layer myself
06:01  bob2: what problem are you having?
06:02  disappearedng: well basically I need to retrieve the nickname of a user object
06:03  disappearedng: and I just need a simple cache
06:03  bob2: is this homework
06:04  disappearedng: no
06:04  disappearedng: I can just use any lib in python
06:05  disappearedng: I was thinking of using django's cache
06:05  disappearedng: but then it's kind of effy
06:05  disappearedng: maybe I can look into memcache, but then again there's no standard python memcache
06:05  Habbie: you seem to have terrible reasons for discarding various options
06:06  disappearedng: I think I can definitely look into memcache actually
06:06  timClicks: I remember reading that list comprehensions are faster than for loops somewhere, is that true?
06:06  timClicks: I know they use local variables, which may marginally help in some cases
06:06  bob2: probably, but who cares
06:06  bob2: use whichever is easier to read :)
06:07  disappearedng: you answer is so direct sometimes
06:08  bob2: http://wiki.python.org/moin/PythonSpeed/PerformanceTips says they're faster than map
06:08  bob2: and implies they're faster than for loops
06:09  bob2: http://bytes.com/topic/python/answers/36581-list-comprehensions-performance
06:11  disappearedng: but that's a really minimal place to optimize imo
06:12  papna: "faster than map" depends!
06:35  Caffeinated: Two Words: Ishtar Ishtarrible
06:54  Caffeinated: Anyone around, thats able to help?
06:54  bob2: best to just ask
06:54  Caffeinated: Meh, it was quite afk sorry.
06:55  Caffeinated: I have a book that I'm following. It says - for square in range(9):
06:55  Caffeinated: square was never created in the code before or after..Do you know why?
06:56  bob2: sure it was
06:56  bob2: that line creates a local called 'square'
06:56  Bop: square is just a variable created
06:56  Caffeinated: Whaaat, it never said you could create a local variable using a for statement.
06:57  aLemmer: Hello.
06:57  bob2: that's what for does
06:57  Caffeinated: I haden't seen it used that way before. Thank you though
06:58  bob2: that's how it is always used
06:58  nitneiht: hi all!
06:58  bob2: shadowing an existing local would make code a bit more confusing
06:58  Bop: Caffeinated, try to understand the for : Z = [ a , b , c ] ; for each in Z : print each
06:59  Caffeinated: Yeah a list Bop. But that for statement is creating the names of the items inside? (Not values)
07:00  nitneiht: in python which statement is equivalent with continue in C
07:00  bob2: nitneiht: continue
07:00  Bop: Caffeinated, i think its the values of the list
07:00  Caffeinated: in this case for square in range(NUM_SQAURES):...Squares are the numbers?
07:00  bob2: Caffeinated: 'for foo in bar', foo is each item in bar, in turn
07:01  Caffeinated: Yeah, thanks bob :)
07:01  Caffeinated: Thats very clear.
07:02  nitneiht: and which statement break from while loop
07:03  Caffeinated: if board[square] == False
07:03  bob2: nitneiht: http://docs.python.org/tutorial/controlflow.html
07:03  Caffeinated: oops forgot the : :P
07:05  bob2: Caffeinated: if not board[square]:
07:05  bob2: Caffeinated: compariing against True or False is basically never done
07:09  hariom: How can a Php script invoke a Python script? Is it possible? I have few routines written in Python. I want to invoke them using Php to do certain tasks
07:15  Caffeinated: bob2: was more about the board[square] part but thanks for the tip.
07:16  Caffeinated: Gave the actual use of the foo in bar.
07:19  bob2: hariom: you can run the python interpreter from php
07:40  Caffeinated: http://bpaste.net/show/10919/ : It's telling me theres something wrong in ask_number function..
--- Log closed Fri Nov 12 08:40:36 2010
--- Log opened Fri Nov 12 08:41:00 2010
08:41 --- Users 736 nicks [0 ops, 0 halfops, 0 voices, 736 normal]
08:42 --- Channel #python was synced in 88 seconds
08:44  verte: you're welcome.
08:45  gnotaras: is here anyone familiar with using a virtual-environment based on a custom python version with modwsgi in apache?
08:45  gnotaras: this fucking thing is going to drive me nuts today
08:45  _habnabit: gnotaras, when will you publish the results of your survey?
08:46  gnotaras: _habnabit: what survey?
08:46  _habnabit: 23:45:19 < gnotaras> is here anyone familiar with using a virtual-environment based on a custom python version with  modwsgi in apache?
08:46  MostAwesomeDude: I like this new and innovative approach to handling users.
08:47  gnotaras: _habnabit: i ask so as to know whether is here someone that will understand the issue
08:47  _habnabit: gnotaras, yes, and I'm wondering when you'll report back to us on whether there is.
08:48  gnotaras: ok. i'll describe the situation:
08:49  mgeary: okay, more xpath fun: is there a way to select two sibling nodes? I have a case where i have a <font> tag followed by a <span> tag (siblings, not parent/child), and i want to get both with a single xpath selector. Possible?
08:50  _habnabit: mgeary, font tags? :(
08:50  mgeary: _habnabit: hey, it's not my code. I'm collecting it from 7-year old Colombian html
08:50  gnotaras: 1) i use centos which has python 2.4.3 as default  2) There is also python2.6.5 which i have installed. 3) I want to create a virtual environment using virtualenv based on python26 interpreter.
08:50  gnotaras: so i do:  unset PYTHONHOME; virtualenv --python=python2.6 my_env
08:51  gnotaras: next: export PYTHONHOME=/var/www/common/my_env
08:51  _habnabit: gnotaras, which mod_wsgi are you using?
08:52  MostAwesomeDude: gnotaras: Fun trick of the day: You can exec a new interpreter in your WSGI environment. Guaranteed to make server admins everywhere ready to kill you!
08:52  MostAwesomeDude: See for example http://wiki.dreamhost.com/Passenger_WSGI#Passenger_WSGI_and_virtualenv
08:52  _habnabit: mgeary, what
08:52 * _habnabit kicks irssi.
08:52  MostAwesomeDude: _habnabit: What? :3
08:52  gnotaras: folks thanks but just a sec so i can finish what i wanted to say
08:53  mgeary: _habnabit: i'm parsing some speeches from Latin American presidents. Currently working on Colombia
08:53  _habnabit: MostAwesomeDude, I'm pretty sure that doesn't work on mod_wsgi.
08:54  MostAwesomeDude: _habnabit: Yet another reason why it'll infuriate server admins.
08:54  MostAwesomeDude: I have no idea if it works or not.
08:54  _habnabit: Actually, I didn't say what I meant.
08:54  _habnabit: I guarantee that this will never work on mod_wsgi.
08:54  mgeary: _habnabit: anyways, i currently have some text that is across two sibling nodes, a <font> tag and a <span>. I want to select both of them with a single xpath selector
08:55  verte: font¦span
08:56  _habnabit: Every time I see that character I think there's a speck of dirt on my screen.
08:56  gnotaras: sorry, i just tried something... It seems that what is needed in to put  my_env/bin directory in apache's PATH
08:57  gnotaras: simply using "WSGIPythonHome /path/to/my_env" directive does not work
08:58  gnotaras: However,  "WSGIPythonHome /path/to/my_env"  works with a virtual environment that is based on python 2.4.3 whicvh ships with centops
08:58  _habnabit: gnotaras, well, yeah.
08:58  _habnabit: gnotaras, PYTHONHOME doesn't magically make python work with code written for newer versions.
08:59  gnotaras: _habnabit: this is what i missed
08:59  gnotaras: wtf
08:59  _habnabit: gnotaras, mod_wsgi executes whatever python it was linked against.
08:59  gnotaras: _habnabit: what do you mean by "linked against". You mean during its compilation time?
08:59  _habnabit: Yes.
09:00  bahamas: mgeary: do you want the tags or the text contained in the tags? also, are there any other siblings besides the font and span ones?
09:00  verte: its an Apache module
09:00  mgeary: bahamas: i got it
09:00  mgeary: bahamas: i targeted the parent node instead
09:00  gnotaras: oh damn. I thought WSGIPythonHome was the solution for anything that had to do with which python version would be used
09:01  _habnabit: gnotaras, nope. It's only the solution for specifying a different set of python modules to be considered standard.
09:02  gnotaras: _habnabit: MostAwesomeDude: thanks
09:02  MostAwesomeDude: I didn't do anything.
09:02  _habnabit: You made some funny faces.
09:02  gnotaras: it almost made me throw the computer out of the window...
09:02  _habnabit: gnotaras, computers are terrible.
09:03  gnotaras: i know
09:03  _habnabit: Ovaltine, on the other hand, is wonderful.
09:05  xro: hi, i have a list and i have to check if it contains a values... --> http://pastebin.com/2mmq1xV5   what is the best way?
09:05  infobob: http://paste.pound-python.org/show/35/ (repasted for xro)
09:06  _habnabit: xro, build a new list that contains the things that you do want.
09:07  xro: _habnabit,you main do a for loop, read all my list and check the values, append correct value in the new list?
09:07  xro: mean*
09:07  bahamas: xro: or use a list comprehension
09:08  _habnabit: Yeah, I'd just list comprehension.
09:11  bahamas: xro: btw, your list looks like a tuple
09:11  lvdb: hey all, how can i call a method using a list of strings as parameters? the number of params is variable
09:11  _habnabit: lvdb, method(*L)
09:11  xro: i'm learning list comprehension
09:11  lvdb: thanks =D
09:12  ssbr: ugh wx
09:15  _habnabit: wx is terrible, yes.
09:16  xro: _habnabit, do you think that is a good way? --> http://paste.pound-python.org/show/36/
09:17  bahamas: xro: tuples are immutable. [] is a list
09:18  verte: don't use tuples like that
09:18  ssbr: _habnabit: as I'm discovering
09:18  ssbr: I just wish it would tell me WHY IsOk() is False
09:18  ssbr: I don't want to have to bloody guess
09:18  bahamas: also, parentheses aren't necessary with if
09:19  verte: xro: if you have a tuple with more than 20 elements, you are doing something wrong. use a list instead.
09:19  xro: i fact i get it from a mysql database...
09:20 * ssbr is now asking the wx crew if there's anything better
09:20  bahamas: xro: why aren't you filtering when querying?
09:20  verte: ssbr: raise FineException()
09:20  ssbr: verte: ?
09:21  bahamas: ssbr: i think #wxpython will tell you. afaik, one of the developers is around there
09:21  xro: yes i could do it...
09:21  verte: are you ok, wx? FINE
09:21 * ssbr was asking #wxwidgets , since #wxpython usually takes forever
09:22  ssbr: I don't want to cross-post. I'll ask in #wxpython if nothing comes up after an hour.
09:24  ssbr: dash: ping
09:28  gnotaras: _habnabit: so it is impossible to use a different python version with mod_wsgi than the one that was used during compilation?
09:28  _habnabit: gnotaras, yes.
09:29  _habnabit: gnotaras, there's other ways of serving WSGI applications, but as far as mod_wsgi goes, you're limited by that.
09:30  ssbr: obviously the right solution is to have multiple apache instances with different versions of python-mod_wsgi all behind a reverse proxy.
09:32  Blu3: or use an entirely better setup where you can run python2 something.py, or python3 something.py without any fuss or muss
09:32  KirkMcDonald: You're also limited by the version of Python which the C extensions you depend on are compiled against.
09:32  _habnabit: Blu3, that's not what we're talking about.
09:32  _habnabit: Blu3, there isn't WSGI for python 3 yet anyway.
09:33  Blu3: yes, i know.  i simply changed it out a bit for example
09:33  KirkMcDonald: You can always wing it.
09:33  Blu3: python24 or python25 or python26 for example, all installed concurrently here
09:34  _habnabit: Blu3, again, not what we're talking about. Having python available is different from having something linked against python.
09:34  ssbr: Blu3: The fault here isn't really apache's, it's Python's.
09:34  ssbr: Different python versions can't be embedded at the same time.
09:34  Blu3: i wasn't thinking i'd have to spell it out really..
09:34  mgeary: okay guys, one more xpath issue and i'm calling it a night. I have a case where i want the *first* <em> that is inside of a <p> that is the following-sibling to a <p class='foo'>.
09:34  _habnabit: Blu3, well, nobody can figure out the point you're trying to make, so.
09:35  KirkMcDonald: Blu3: Is mod_wsgi a strict requirement?
09:35  Blu3: put a wrapper in the middle
09:35  mgeary: i'm currently using this: "//p[@class='titulos']//following-sibling::p/em[1]", but again that gives me 6 results, instead of 1. I guess i don't fully understand what [index] means
09:35  ssbr: Blu3: No wrappers are necessary.
09:35  ssbr: Blu3: the only thing you really need is process boundaries.
09:35  mgeary: i tried bahamas' descendant:: approach, but that gives me the same results
09:35  ssbr: Actually I think mod_wsgi even has those. I'm not too sure about apache's architecture or how it could be fixed up, though
09:36  ssbr: mgeary: if I'm not mistaken, //p[@class='titulos'] asks for the set of all p elements with class="titulos"
09:37  ssbr: (class being the class attribute of the p element)
09:37  ssbr: I wonder if you'd have better luck using cssselect?
09:37  mgeary: ssbr: right, but then it's further qualified by getting only those that have a "p" sibling that has an "em" child
09:38  mgeary: i dunno, in my (somewhat limited) experience, xpath seems to be more powerful than cssselect
09:38  ssbr: of course it is. But power comes with tradeoffs, like readability.
09:38  ssbr: Or maybe I just am more familiar with CSS. *shrug*
09:39  ssbr: (I say "of course it is", but actually it's just lxml's that is -- real CSS can do things xpath can't, and the reverse is also true)
09:39  mgeary: aha
09:39  mgeary: got it
09:39  ssbr: ah?
09:40  mgeary: "//p[@class='titulos']/following-sibling::p[1]/em"
09:40  ssbr: aha, yes
09:40  mgeary: putting the [1] on the p rather than the em
09:42  mgeary: so, tell me this, how does xpath view <br> tags? for example, if i want the content from a given node, but only after the first <br>, can i select that with xpath?
09:43  dyek: If there is any Python developer who can make decisions in here, I would like to say that defaulting sys.stdout.encoding is None, instead of defaulting to 'UTF-8', causes so much pain in using Python to handle content with Unicode characters. I would say that Linux defaulted to UTF-8 "everywhere" and Windows can handle UTF-8 files just fine, so it just doesn't make sense to not assume UTF-8 when sending output to a pipe. If the other end of the
09:43  dyek:  pipe is a file, it is fine. If it is a utility program, it is fine too, so Python should really default sys.stdout.encoding to 'UTF-8'.
09:43  _habnabit: dyek, nah. Windows uses UTF-16 everywhere.
09:43  KirkMcDonald: Well.
09:43  KirkMcDonald: Sort of.
09:44  KirkMcDonald: It would not make sense to use UTF-16 for the standard pipes in Windows.
09:44  et: not for console output
09:44  KirkMcDonald: Windows uses UTF-16 for API calls.
09:44  ssbr: windows uses UTF-16 for half of the API calls*
09:45  ssbr: the other half are the exact same thing except in ANSI
09:45  _habnabit: The W ones.
09:45  KirkMcDonald: Yes, yes.
09:45  KirkMcDonald: ssbr: (Whatever *that* means.)
09:45  _habnabit: dyek, anyway, you're forgetting a key part of the zen of python.
09:45  bahamas: mgeary: 'br/following-sibling::text()'
09:45  ssbr: KirkMcDonald: windows-1252 :B
09:45  dyek: _habnabit: Windows can handle UTF-8 text file just as well. I don't know if there is an usage situation that is undesirable for Windows.
09:45  _habnabit: dyek, 'in the face of ambiguity, reject the temptation to guess'.
09:45  KirkMcDonald: ssbr: Or maybe 1251?
09:46  KirkMcDonald: dyek: The Windows command prompt can't handle UTF-8 for shit.
09:46  dyek: et: For console output, the sys.stdout.encoding should be set properly, so it works regardless.
09:47  mgeary: bahamas: niiiice
09:48  bahamas: mgeary: also, don't use double slashes if you use descendant or following-sibling. i bet your first solution would work with only one slash
09:49  mgeary: ah, noted.
09:49  verte: people do seem to be confused about //
09:50  verte: the lead dev on our team uses them consistently, thinking they specify the document root
09:50  bahamas: yeah, that's why i avoid it altogether. descendant:: is more clear to me
09:50  ssbr: verte: Uh.
09:50  ssbr: doesn't // just say any-descendent?
09:50  verte: ssbr: yes
09:50  ssbr: (where / is direct descendent?)
09:51  ssbr: not very confusing. your lead dev sounds really bad.
09:51  ssbr: (root is '/', yes?)
09:51  verte: yes.
09:51  bahamas: ssbr: almost. there are some exceptions depending on context: http://stackoverflow.com/questions/1537771/whats-the-difference-between-node-and-descendantnode-in-xpath
09:51  verte: our lead dev is not bad, just easily confused
09:51  verte: and too experienced
09:52  ssbr: bahamas: ah, descendent-or-self
09:52  ssbr: wait, no
09:52  ssbr: descendent-or-self/child
09:52  ssbr: man, what
09:53  bahamas: that makes a difference when using position() as mgeary experienced directly
09:57  magcius: dash, by the way, I love the new MobileMe calen
09:57  magcius: dar, you've done a nice job on whatever you do there
09:57  pen: how do I make a c struct like class or data structure that is available to all modules in my project?
09:57  pen: or the modules I choose
09:57  nitneiht: what is the meaning of "pass" in python?
09:57  pen: nitneiht: continue?
09:58  _habnabit: pen, no.
09:58  pen: _habnabit: you mean the first or my answer to nit?
09:58  _habnabit: nitneiht, blocks must contain at least one statement. 'pass' is a null statement that you put in an otherwise-empty block.
09:59  _habnabit: pen, I can't parse your question.
09:59  nitneiht: understand thanks
09:59  ssbr: pen: what do you mean "C struct like class or data structure"?
09:59  magcius: C doesn't have clasess
09:59  magcius: first of all
09:59  pen: magcius: yes, but C has structs
10:00  magcius: pen, they are unrelated to the C++ structs
10:00  ssbr: magcius: haaaaaa
10:00  ssbr: their relation is the only thing that explains the screwed up parts of C++ there
10:00  pen: magcius: we are in python channel here, please don't diviate
10:00  pen: deviate
10:00  magcius: (which are basically C++ classes but with the default being "public" instead of "private")
10:00  magcius: pen, yes, I know. Unfortunately I am trying to parse your question, in which you are relating to "C structs"
10:01  magcius: pen, your question had to do with C and C++, so I am trying to help you.
10:01  bahamas: i parsed pen's question as 'how do i make a python class or data structure similar to a C struct?'
10:01  pen: magcius: I am used to something like making a struct that contain some useful variables and then I can use that in all files that included that header
10:01  pen: magcius: had to do with python not C
10:01  pen: or C++
10:01  magcius: pen, there's lots of things you may want
10:02  _habnabit: pen, please don't complain when you ask an unclear question and people can't understand you.
10:02  magcius: pen, Python doesn't have header files. A struct is a definition, it doesn't have data. Do you want something global?
10:03  tamiel: pen: ctypes for C struct or object()
10:03  ssbr: pen: the thing is that you referred to C structs, and programming in C (or C++) is quite unlike programming in Python.
10:03  _habnabit: tamiel, bleh, don't suggest ctypes.
10:03  _habnabit: tamiel, especially because that's definitely not what he wants.
10:03  tamiel: _habnabit: yes :) I know
10:03  ssbr: pen: so when you ask for something from C, at least my first instinct is to figure out why you want that, since probably there's a better solution that is more suitable to programming in Python.
10:03  pen: so what is the pythonic way to do that then? something similiar to struct
10:04  magcius: tamiel, object doesn't mean anything either
10:04  tamiel: pen: don't think C struct or C
10:04  ssbr: pen: in Python, you might use any of dicts, tuples, or objects with your own custom class, in order to do the same things you might attain in idiomatic C or C++ with structs or classes
10:04  pen: because I was doing something like making another module and create a class then import into the files i need but then it got stuck there when accessing that so weird
10:04  tamiel: magcius: yes like C struct doesn't mean nothing
10:04  ssbr: pen: but without knowing what you're doing, I couldn't say what you'd use.
10:04  magcius: tamiel, it means something, but object() is quite useless. All it can ever be is a sentinel or unique object.
10:04  ssbr: Or what I'd use were I you.
10:05  pen: http://code.activestate.com/recipes/52308/
10:05  pen: I was looking for that then I came across this
10:05 * _habnabit braces himself before clicking the link.
10:05  pen: I used this but I can't seems to pass that into another class as class attributes
10:05  ssbr: pen: that is very bad code.
10:05  pen: hm
10:05  pen: oh
10:05  pen: then what is better then?
10:05  ssbr: Just telling you. If you want to do idiomatic or sane python, don't do that.
10:05  magcius: pen, "as class attributes"?
10:05  _habnabit: aaaaaaa
10:05  ssbr: pen: as I said, I don't know. I can't know, without knowing what you're doing.
10:05  pen: like self.attribute?
10:06  magcius: _habnabit, that's worse than subclassing dict with a custom getattr
10:06  pen: def __init__(self, attr) ??
10:06  pen: then you do self.attr = attr?
10:06  ssbr: magcius: why would anyone do that
10:06  magcius: pen, uh?
10:06  pen: isn't that or instance variable sorry
10:06  magcius: ssbr, oh, I've seen it all the time.
10:06  ssbr: it's so simple to make an object whose __getattr__ defers to a *composed* dict
10:06  ssbr: whyyy
10:07  magcius: ssbr, right, I've seen class EasyAccessDict(dict): def __getattr__(self, attr): return self[attr]
10:07  magcius: ssbr, maybe even self.__getitem__(attr)
10:07 * ssbr sighs
10:07  magcius: ssbr, of course they never implement setattr, it's just for "cleaner syntax"
10:07  ssbr: eh what?!
10:07  ssbr: they do this for actual code?
10:08  magcius: ssbr, yes, I've seen it
10:08  ssbr: I only do that to write really simple mocking things for my tests
10:08  magcius: _habnabit, ssbr, also, don't look at the first comment on that page
10:09  _habnabit: This makes me sad.
10:09  ssbr: hahaha
10:09  ssbr: this makes me so happy
10:09  ssbr: take a look at Graham Fawcett's comment
10:10  verte: what are we looking at?
10:10  ssbr: a really terrible activestate recipe with really terrible comments
10:10  ssbr: http://code.activestate.com/recipes/52308/
10:10  magcius: ssbr, I still like the second part of the first guy's comment where he subclasses list
10:10  ssbr: somebody actually pickled this even!
10:11  magcius: pen, a little more context would be helpful in any case
10:12  pen: magcius: nvm, I think I found my mistakes, just really silly ones, not related to what I asked though
10:12  thore: hey guys, i have problems installing py2app. it says require modulegraph. i installed the module.egg manualy but the error dont disappear.
10:12  MostAwesomeDude: XD
10:12  MostAwesomeDude: This is adorable.
10:12  magcius: thore, you probably didn't install the egg manually correctly
10:12  magcius: thore, because it's impossible to do manually
10:13  thore: magcius: good argument :). so there is a src problem in the setup of py2app. i can place the egg file anywhere in the py2app folder before starting installation?
10:13  magcius: thore, no
10:14  thore: then how to fix it?
10:14  magcius: thore, why not just do regular manual installation instead of using shitty eggs?
10:14  magcius: thore, what are you on/?
10:14  thore: first steps with python. starting like a rockstar.
10:15  thore: wanna write a gui app for mac.
10:17  mgeary: alright, sleep time. Thanks again bahamas, _habnabit and others
10:53  mercutio22: can someone tell me what '%0.2f' does/mean in this code? http://codepad.org/qSokiHhq
10:53  Habbie: mercutio22, 'string formatting'
10:54  mercutio22: Habbie: hmm... ok. Guess I should learn about that. Thanks
11:00  ikanobori: _habnabit: Your thing works now.
11:00  _habnabit: Yes.
11:01  ikanobori: _habnabit: You can update the /topic
11:02  _habnabit: I think it makes the topic too long.
11:03  ikanobori: This is truth.
11:03  ikanobori: What if we move half of it over to pound-python?
11:03  ikanobori: The tutorial/faq/new programmer stuff maybe?
11:04  _habnabit: The faq and tutorial could be bit.ly links.
11:05  plundra: Use a even shorter urlshortners and the last part as #python{-{fr,es,br,nl,ir},.{de,tw,pl}} :-)
11:05  plundra: (The last part expands fine with bash, at least :-P)
11:05  _habnabit: Some of them are defunct, too.
11:07  Ademan: is there a way to make sure that stdout and stderr correctly interlace with unittest output? I've tried -u but I'm still not getting anything close to the expected output (It's possible I'm just expecting the wrong output, but I don't think so)
11:11  ikanobori: I like that last part, plundra.
11:11  pen: it is so hard to debug in python
11:11  ikanobori: _habnabit: Let's clean it up then, make them bit.ly links and do the loco stuff as well :-)
11:11  _habnabit: Man, why's IRC gotta be so terrible.
11:11  ikanobori: pen: Why?
11:11  _habnabit: pen, not really, no.
11:11  pen: because debugger won't tell you if there is even a typo
11:11  _habnabit: ikanobori, loco?
11:12  ikanobori: _habnabit: Local channels I meant.
11:12  _habnabit: pen, what does that mean
11:12  _habnabit: ikanobori, I was about to go to bed anyway.
11:12  pen: I just had a typo but if I didn't notice that the program will just stop there and I have no idea why
11:12  _habnabit: pen, your unit tests didn't catch it?
11:12  ikanobori: _habnabit: Then do it tomorrows. My work day just started :-(
11:12  pen: even in debug mode it just stop
11:12  _habnabit: pen, sounds like you need better coverage.
11:12  jorrit: pen, what kind of typo?
11:12  pen: _habnabit: not in unit test yet, because i'm developing new stuff that I haven't build unit tests yet
11:12  bahamas: pen: it should tell you there's a name error
11:13  pen: jorrit: instance variables
11:13  _habnabit: pen, unit tests should be written first.
11:13  jorrit: pen, you should make tests before or at the same time as you write code.
11:13  pen: bahamas: no it didn't
11:13  _habnabit: pen, and then implementation should be written to satisfy the tests.
11:13  ikanobori: _habnabit: Not if he isn't doing tdd.
11:13  bahamas: pen: maybe you should show some code
11:13  ikanobori: There is multiple models to writing software etc.
11:14  pen: bahamas: I fixed it. no need for pasting code
11:14  pen: just that it's not easy compare to other compiling languages debugger
11:14  _pw_: hi all, what's the choice for standalone http server in python?
11:14  jorrit: pen, if you don't show us the code we can't properly discuss your statement.
11:14  jorrit: pen, i.e. we don't know exactly what you're talking about.
11:14  ikanobori: _pw_: Multiple, what does standalone mean to you?
11:15  _pw_: I need serving some cgi request, which collect some info
11:15  ikanobori: And why can you not use another web server, one that is already installed for example?
11:15  pen: jorrit: I mean like typo for instance variable name like self.name
11:15  nosklo: pen: that's not what happens. When there's a typo, python stops and prints a full traceback.
11:16  ikanobori: pen: That'd give you a NameError or AttributeError.
11:16  nosklo: pen: for self.name it prints a traceback with AttributeError
11:16  _pw_: for example, collect some data from /proc
11:16  jorrit: pen, then you get a name error.
11:16  pen: jorrit: I am using gevent is that possible the cause?
11:16  nosklo: pen: yes.
11:16  pen: in a greenlet though
11:16  jorrit: No idea what gevent is.
11:16  pen: hm, if that's the case then
11:16  nosklo: pen: your framework is probably eating the exceptions
11:17  ikanobori: mmmm exceptions
11:17  pen: nosklo: looks like it, and I just remembered that too
11:17  republican_devil: so will python eventually beomce a lisp?
11:17  nosklo: republican_devil: I find that hard to believe
11:17  jorrit: republican_devil, ?
11:17  pen: nosklo: I need to look into gevent homepage doc again
11:17  _habnabit: pen, anyway, as I said, it's your own failing. Your unit tests would've caught this.
11:17  nosklo: pen: or, just move to twisted and don't look back
11:17  _habnabit: pen, also don't use gevent.
11:17  Wild_Cat: republican_devil: (I (hope (not)))
11:17  republican_devil: paul graham wrote it has about 7 of 10 lispy features
11:17  pen: nosklo: twisted is hard to code with, that's why I switch to gevent in the first place :P
11:18  republican_devil: few more cant calim in vent new lang
11:18  republican_devil: only another lisp impleentation
11:18  nosklo: republican_devil: lisp has way more than 10 featuers
11:18  _habnabit: pen, you're learning firsthand that gevent is way more difficult to debug.
11:18  nosklo: pen: twisted is much easier
11:18  Wild_Cat: republican_devil: isn't Paul Graham that dude who wrote a new Lisp implementation in 2009 that didn't handle Unicode at all?
11:18  _habnabit: pen, that's a rather large benefit that twisted has.
11:18  nosklo: pen: it shows uncaught exceptions for one
11:20  pen: _habnabit: but i'm so not used to callbacks and delays and blah. so hard to integrate that in my code. probably because i'm new to it that's why I said that since gevent can be implemented using the old socket way
11:20  republican_devil: arc I bet handles nicode
11:20  republican_devil: I not sure
11:21  pen: nosklo: well, there are probably other ways to catch exceptions in gevent
11:21  _habnabit: pen, 1) it's not difficult. 2) it's a very useful skill to have. 3) you probably weren't using inlineCallbacks.
11:21  nosklo: pen: yeah, use inlineCallbacks
11:21  Wild_Cat: I'm pretty certain I read the article where he introduced it and it said something in the lines of "Unicode is hard, let's go shopping."
11:21  nosklo: pen: it's the best thing since sliced bread
11:21  _habnabit: Wild_Cat, unicode *isn't* hard. D:
11:22  TheSheep: nosklo: sliced bread didn't even catch up here yet ;)
11:22  Wild_Cat: _habnabit: oh, *I* know ;)
11:22  Wild_Cat: it just appears that this Graham fellow doesn't.
11:22  pen: nosklo: inlineCallbacks? yea I don't know that
11:22  Wild_Cat: ...and as such, I question the relevance of his expertise.
11:22  nosklo: pen: it allows you to write asynchronous code in a synchronous-like way
11:23  pen: nosklo: I never heard of or read of that before in their docs, how does it work?
11:23  nosklo: pen: basically, every time you need something that would block, you use the "yield" keyword with a deferred, instead of callbacks. Your function will pause and continue later when the deferred fires.
11:25  nosklo: pen: this is a good read too http://krondo.com/?page_id=1327 -- it explains slowly and clearly how asynchronous programming works and then gives some hints
11:26  pen: nosklo: that sounds like greenlet's way of doing coroutine
11:27  _habnabit: pen, yes, except context switches are explicit and your code can actually be debugged.
11:27  pen: hm
11:28  nosklo: pen: twisted is more deterministic. Once you understand the system you can tell which piece of code will run at a given point. There's no random-like behavior
11:29  pen: hm
11:30  J_P: hi all
11:30  _habnabit: yo sup
11:40  thore: is it possible to get a window handle from an other process/application? i need some hints/keywords cannot find anything with google :(
11:47 --- zemanel_ is now known as zemanel
12:19  Azzkikr: with urllib2.Request, you can add headers. Is there any way to read back those headers?
12:21  pen: if I have a string of repeating charactesr, is there a way to shorten it to just 1 unique character?
12:21  Insayne: pen, you mean it would be aaaaaaa and you want a ?
12:21  pen: yea
12:21  jorrit: pen, and what if it is aaaaabbbbbb?
12:21  pen: then ab
12:21  jorrit: pen, and aaaabbbbaaa?
12:22  Insayne: aba ?
12:22  pen: yea
12:22  Insayne: yeah, good luck with that :P
12:22  pen: well, k then
12:23  MostAwesomeDude: There's a handful of ways to do it, depending on your preference.
12:23  Insayne: means: I dont got your solution
12:23  MostAwesomeDude: You could use an RE, or you could use an itertools grouper.
12:23  pen: MostAwesomeDude: how do you do that in RE?
12:23  MostAwesomeDude: pen: Backref.
12:27  pen: MostAwesomeDude: hmm
12:27  MostAwesomeDude: pen: Use pairwise() from the itertools docs, and then you'd do new_list = [i for i, j in pairwise(old_list) if i != j]
12:27  ssbr: I'd do something like ''.join(uniq(s))
12:27  ssbr: where uniq works much like the uniq program in unix, but as a generator instead of a pipeline junction
12:27  MostAwesomeDude: ssbr: I don't have uniq() in my globals.
12:27  ssbr: MostAwesomeDude: Yes, you'd have to write it.
12:27  pen: no uniq here
12:27  ssbr: ... this is why I explained what it would work like.
12:27  MostAwesomeDude: There's a unique_justseen() in the itertools recipes, though.
12:27  ssbr: Have you guys not memorized the builtin functions yet?
12:27  MostAwesomeDude: Close enough, which is why I was surprised that there'd be a uniq().
12:27  saju_m: how make Synchronous method in python.suppose, two threads are running, thread-1 and thread-2 calling a menthod-1, what i need is at time allow only one thread t accure lock on method-1, next thread mus weight for the loack.
12:27  MostAwesomeDude: Heh, this is cute. return imap(next, imap(itemgetter(1), groupby(iterable, key)))
12:27  ssbr: You should be close enough that you instantly know there isn't D:<
12:27  pen: MostAwesomeDude: pairwise looks fine, let me try
12:27  ssbr: yeah, itertools recipes are too dense for my taste. It makes sense, though, doesn't it?
12:27  ssbr: so, unique_justseen
12:27  MostAwesomeDude: Yeah, they're fantastic when you need them. I just wish more of them were in itertools and not just on the doc page.
12:31 --- ChanServ sets modes [#python +o infobob]
12:31 --- infobob sets modes [#python -b $a:chessmaster]
12:36 --- infobob sets modes [#python -o infobob]
12:39  jackie_chou: hello
12:41  jackie_chou: can anyone tell me if there is a function i didn't see in ConfigParser(python2.6), or a very simple way (like dict(MyConfigParser) to get all data from my ini file into a dict
12:41  jackie_chou: ?
12:42  Yhg1s: jackie_chou: there is not, because .ini files are split into sections. you can get a dict for a section, though.
12:42  Habbie: jackie_chou, get .sections(), iterate over it to get .items()
12:42  Yhg1s: and a simple loop will give you everything.
12:42  jackie_chou: Habbie: yeah with a loop :(
12:43  Habbie: yes
12:43  Yhg1s: writing code should not be scary.
12:43 * jackie_chou is dissapointed.
12:43  Habbie: i am disappoint
12:43  jackie_chou: thank you all :)
12:43  Yhg1s: jackie_chou: if you want a flat dict, perhaps you don't want to use ConfigParser at all.
12:44  jackie_chou: Yhg1s: yes probably not, but i don't want to reparse all the file by myself, any other alternative ?
12:44  jackie_chou: Yhg1s: oh, maybe i could do it ...
12:45  jackie_chou: sometime i feel python is great, sometime i'm very disspointed, that's very strange programming feelings ^^
12:46  Yhg1s: jackie_chou: well, what format is it in?
12:46  Yhg1s: is it actually an ini file?
12:46  Yhg1s: do you control the format? (if so, you may want to use, say, json instead.)
12:47 * Habbie discovers json.dumps(.., indent=True)
12:47  jackie_chou: Yhg1s: yes i do
12:47  jackie_chou: jackie_chou: i prefer use ini files ... very human readable
12:47  jackie_chou: Yhg1s: oops
12:47  Habbie: json is very readable too
12:47  Yhg1s: ok, then you have to deal with the fact that ini files are split into sections.
12:47  Yhg1s: (which is part of their readability.)
12:47  jackie_chou: Habbie: you right ...
12:48  jackie_chou: Habbie: but i like sections
12:48 * Habbie retracts earlier statement
12:48 * Habbie discovers json.dumps(.., indent=1)
12:48  Habbie: jackie_chou, then deal with sections.
12:48  jackie_chou: It's for video-game config ^^
12:48  jackie_chou: Habbie: i do ^^
12:49  jackie_chou: Habbie: that's just in ruby or php, there is buildin function, i have the impression to reinvent a little wheel ^^
12:49  Yhg1s: Python doesn't provide builtin functions for every conceivable operation.
12:50  jackie_chou: Yhg1s: ... ruby and php not either ...
12:50  Yhg1s: Python does provide tools to do what you want, though. In the case of ConfigParser you have to write the loop yourself (instead of having it in configparser) because what you want is a rare thing.
12:50  Yhg1s: (because ini files have sections.)
12:51  Habbie: php, by default, -ignores- your sections
12:51  jackie_chou: O o
12:51  Habbie: that's pretty bad :)
12:51  Yhg1s: Habbie: really? tee hee.
12:51  jackie_chou: Habbie: not remember that O o
12:51  Habbie: you need to pass 'true' as second argument to get your sections
12:51  jackie_chou: Habbie:  ...
12:51  MostAwesomeDude: Yeah, that's why php.ini files always have module.section.toggle names.
12:52  Habbie: which will, indeed, return a two-level dict/array as jackie_chou wanted
12:52  jackie_chou: Habbie: a simple true is not reinventing the wheel ^^
12:52  Habbie: i'm not saying it is
12:52  Habbie: also, keep your cat out of it
12:53  jackie_chou: Habbie: what my cat is doing here ? ^^
12:53  jackie_chou: Habbie: what relationship !
12:53  jackie_chou: s/t r/t is r/
12:53  Habbie: ^^ is a cat smiley and you're using it too  much
12:54  plundra: A cat? Really?
12:54  jackie_chou: XD
12:54  MostAwesomeDude: ( ^^)
12:54  magcius: jackie_chou, we don't like noise too much. Unless it's funny and not IRONIC HIPSTER FUNNY TRYING TO BE IRONIC HIPSTER
12:54  jackie_chou: Habbie: this is eyes not animals XD
12:55  magcius: jackie_chou, those are not eyes. Those are the letters "X" and "D"
12:55  magcius: jackie_chou, either way, ini files have sections.
12:55  jackie_chou: magcius: Habbie talked about this : "^^"
12:55  magcius: ok, that's a letter called a "carot"
12:55  jackie_chou: magcius: did you even followed the disscution ?
12:56  ikanobori: ('_' ) ( '_') (._. ) ( ._.)
12:56  jackie_chou: ikanobori: ^^
12:56  MostAwesomeDude: Not furry: ( ^^)
12:56  MostAwesomeDude:     Furry: (=^^)
12:56  MostAwesomeDude: Note the whiskers. It's important, or so I hear.
12:56  magcius: er, "caret"
12:57 * jackie_chou rereturn reinvent the wheel.
12:57  jackie_chou: Habbie: by the way php handle muliple subsection with the true option, ConfigParser doesn't handle subsection ...
12:58  magcius: jackie_chou, ini doesn't have subsections?
12:58  jackie_chou: Habbie: something like [section1.subsection1]
12:58  jackie_chou: magcius: ...
12:58  magcius: jackie_chou, that's not standard; it's a PHP extension
12:58  jackie_chou: magcius: are you shure, you seem to send your point of view to fast sometime ^^
12:59  magcius: jackie_chou, I can type very fast. There never was a standard "INI" file format
12:59  MostAwesomeDude: magcius: He has a point. Are you starving your point of view?
12:59  MostAwesomeDude: Anorexic opinions need love too!
12:59  Yhg1s: jackie_chou: if you want something that's exactly like PHP, Python isn't the right choice.
12:59  jackie_chou: magcius: this is a standart actualy .
12:59  Yhg1s: jackie_chou: lots of things are subtly or fundamentally different. Most of us like it that way.
12:59  Yhg1s: jackie_chou: where is this standard?
13:00  jackie_chou: Yhg1s: we are talking about ini parsing
13:00  Yhg1s: jackie_chou: yes.
13:00  Yhg1s: jackie_chou: where is this standard?
13:00  magcius: There is the "INI file format" as defined by Windows.
13:00  jackie_chou: Yhg1s: on wikipedia XD
13:00  ssbr: jackie_chou: wikipedia isn't much of a standards body.
13:00  jackie_chou: ssbr: joking ...
13:00  Yhg1s: jackie_chou: ok, so, let's consider wikipedia.
13:00  ssbr: jackie_chou: and wikipedia says, by the way, "Most commonly, INI files have no hierarchy of sections within sections."
13:00  Yhg1s: jackie_chou: have you read the article?
13:00  magcius: also: "The INI file format is not well defined." -- from the Wikipedia article on INI files
13:01  ssbr: "Some files appear to have a hierarchical naming convention, however."
13:01  Yhg1s: "Sections may not be nested."
13:01  magcius: right
13:01  magcius: and in the article, it gives three different file formats from WITHIN Windows itself
13:02  jackie_chou: what have the format of an ini, and have subsections ?
13:02  ikanobori: yaml
13:02  jackie_chou: ikanobori: thanks
13:02  magcius: there are many configuration file formats
13:02  magcius: or things like that
13:02  magcius: yaml is basically a superset of json
13:02  Yhg1s: jackie_chou: you can easily add your idea of "Subsections" ontop of configparser.ConfigParser.
13:02  Yhg1s: you will just have to write the code yourself, because nobody else apparently has a need for it.
13:02  magcius: not even a superset -- just an alternate syntax
13:02  jackie_chou: Yhg1s: sorry for my english, but why do you mean by ontop ?
13:03  magcius: jackie_chou, write the code by subclassing ConfigParser
13:03  jackie_chou: magcius: oh yeah.
13:03  jackie_chou: magcius: then i will propose the patch to python ^^
13:04  magcius: jackie_chou, don't change ConfigParser at first
13:04  jackie_chou: magcius: yeah ... i know ...
13:04  Yhg1s: don't change it at all.
13:04  Chrigui: hello, i have managed to install python and mod_wsgi but i have been trying to install django and saas-kit for the past week and no luck so, far. i came to a point that i am willing to pay for this installation to finish. so, if there is any experienced guy out there want to make quick buck by helping my get this running, you will really make my day. my server is Red Hat 3.4.5-2 , Python 2.4.3. thanks in advance
13:04  Yhg1s: create a subclass, add it to the configparser module, instead.
13:04  magcius: chiarhhea, this is not a sysadmin channel
13:04  magcius: er
13:04  magcius: Chrigui, this is not a sysadmin channel
13:05  ggergely: hi. is there history support for the interactive python?
13:05  magcius: jackie_chou, just subclass it, and create a bug with a new class: people could very well be relying on having something like "." in ConfigParser
13:05  magcius: ggergely, ipython or just the regular interactive mode of python?
13:05  ikanobori: ggergely: ~/.pythonhist
13:05  Yhg1s: ggergely: yes. see chapter 15 of the tutorial at docs.python.org/tut
13:05  ikanobori: Has your repls history.
13:05  Yhg1s: ikanobori: only in your case, I expect.
13:05  Yhg1s: (it's not something Python writes by default.)
13:05  ggergely: Yhg1s: ok. i'm in the forst chapter only :D
13:05  ikanobori: Yhg1s: Mrm then we added it in bpython :X
13:05  magcius: Yhg1s, it is, I thought.
13:06  ikanobori: Yhg1s: Also, chapter 15?
13:06  jackie_chou: thanks ^^
13:06  Yhg1s: ikanobori: yes.
13:06  Yhg1s: or is it 13? Somethign like that.
13:06  ikanobori: Yhg1s: It shows me until 14 :-(
13:06  Yhg1s: 13 then.
13:06  ikanobori: You know these by head.
13:06 * jackie_chou basicly just get more work to do ^^
13:06  Yhg1s: ikanobori: apparently not!
13:06  ikanobori: Yhg1s: Well, close enough :-)
13:06  jackie_chou: gtg ....
13:07  jackie_chou: thanks you all
13:07  Chrigui: any one please ?
13:07  Yhg1s: Chrigui: if you were to ask a concrete question, we could help you fix it.
13:08  Yhg1s: Chrigui: but I have no intention of touching RedHat, sorry.
13:09  lokai: what's the best way to find the values in a list that are less than a certain difference from any other value?, ie if I have [1,2,20,30], I want to return [1,2] if my difference criteria is 1
13:09  ikanobori: Chrigui: Ask concrete questions, what exactly isn't working. Enough people here have a lot of experience with mod_wsgi/django.
13:09  Yhg1s: lokai: nothing builtin comes to mind.
13:10  lokai: So I have loop through every member and compare with every member? =/
13:10  Yhg1s: lokai: well, I would sort it first.
13:11  ssbr: No, you don't. But that's the easiest way to do it.
13:11  ikanobori: Sort + average it.
13:11  Yhg1s: so you only need to compare to the next value.
13:11  lokai: ah, ok
13:11  ssbr: Actually, sorting is probably just as easy.
13:18 --- cli is now known as Guest37399
13:47  Aondo: how can i turn a string from oivind to øivind, in short, i have a list of names without the special chars and a text block of info   search in to find the correct chars for the name.
13:49  arkanes: Aondo: it's a lossy transform, you can't really
13:50  arkanes: Aondo: although if you know something about the culture and the nature of the names you can probably get the failure rate down pretty low, but you'll have to be clever
13:51  Aondo: well the text block should mostly only contain the info i need for that particular name, so i guess what might work is to match all chars.. but some how swap out what i need :P
13:52  arkanes: Aondo: the block is associated with a specific name? That helps.
13:52  Aondo: yes
13:52  arkanes: Aondo: whats the format of your extra info
13:52  Aondo: just a string with words and then the name will be there, like about 200 chars
13:53  arkanes: so you've got some free text with the correct name, and you also have the ascii-ized name
13:53  Aondo: yes
13:53  arkanes: hoof
13:54  arkanes: the free text has no structure to it at all, you just know the name is there somewhere?
13:55  Aondo: no real structure, just a text field to gather information where the real name might be
13:55  arkanes: "might"? you don't know for sure that its there?
13:56  Aondo: it mostly is. like 99% if it's not, then it will just keep the old name regardless
13:56  arkanes: what kind of failure rate is acceptable here
13:56  Aondo: i mean 99% of the times it is there
13:56  arkanes: I'm thinking about false positive matches here, where you reconstruct a name incorrectly
13:57  arkanes: not where the name just isn't foind
13:57  Aondo: if it manages to match and replace the char that is fine, if not keep what we have and go on to next name
13:57  arkanes: what about names with spaces or other separators like ' and - in them
13:57  arkanes: are those stripped from the ascii?
13:58  Aondo: i have splitted names, so it's only chars not whitespace and what not
13:58  arkanes: those are parts of peoples names, though
13:58  arkanes: "van Rossum" is a last name, not 2 names
13:59  arkanes: if you're splitting names into first, last, middle parts you're already screwed :\
13:59  Aondo: yes but it's not important in this case, just to find the correct name and replace the old
13:59  ikanobori: arkanes: So is "van der Wout".
13:59  arkanes: ikanobori: yes!
13:59  arkanes: and O'Malley
13:59  ikanobori: And van der wout-o'malley.
14:00  arkanes: names is hard :9
14:00  arkanes: we should use numbers instead, like sensible folk
14:00  ikanobori: And then in Eastern countries they use whole other naming conventions.
14:00  ikanobori: arkanes: Okay, you get 2.
14:00 * ssbr knows a family named van der Voet
14:00  Aondo: sometimes names might come as lastname, firstname. in the text string, that's why i cant match it with "firstname lastname" but what if lastname and firstname is not so important, just to replace those chars with the correct ones :D
14:01  arkanes: Aondo: if you're going to work with international names, one of the first things you need to do is dispense with the idea that there are first and last names
14:01  arkanes: if you want to actually reflect things correctly, anyway
14:02  arkanes: it's essentialy impossible to deal with all names in a systematic way, which means you have to have a set of goals
14:02  arkanes: like "we will reprouce the way you entered your name faithfully when we correspond with you", or "we need physical mail addressed to you to be delivered reliably"
14:03  arkanes: since you're trying to get the correct name out of the free text, I assume it's because you want to address them using their name however they gave it to you
14:03  Aondo: i just need to correct the name, order does not matter
14:03  arkanes: of course it matters
14:04  arkanes: were you not just listening :\
14:04 * ikanobori pets arkanes 
14:05  arkanes: stripping whitespace out of a name is just as much of a lossy transform as stripping out ø
14:05  arkanes: maybe he's James van Roustabout, the dutch millionaire
14:05  arkanes: or maybe he's James Van Roustabout, 4th generation american son of texas oil workers
14:06  Aondo: in this case it's as easy as 'firstname lastname'.split() and i have what i need to search the text field
14:06  ikanobori: Aondo: What happens with a 3-part name?
14:06  arkanes: well it ain't that easy
14:06  arkanes: even if you just have american names
14:07  arkanes: which you probably don't, because then this wouldn't come up
14:07  Aondo: ikanobori, not important. i only need to change what i have, not anything else
14:07  Aondo: and what i have is names without special chars
14:07  arkanes: they're not "special"
14:07  arkanes: thats another pet peeve :\
14:07  arkanes: fucking americans
14:08  ikanobori: arkanes: Nono, special as in, not ascii ;-)
14:08  Aondo: ye that's what i meant
14:08  ssbr: I think there's enough reason to call them "special". Python treats them different from ascii characters.
14:08  arkanes: it's really frustrating when someone has an interesting problem and it looks like they're trying to do the right thing and then you find out that they're just a well-spoken "give me teh codez"
14:08  arkanes: ssbr: it doesn't
14:09  ssbr: arkanes: sure it does. for ascii characters/bytes it converts implicitly between str and unicode, and for everything else it doesn't
14:09  arkanes: and the reason why you don't call them special is because as long as you think of them as being special and unusual, you will write code without thinking about them
14:09  arkanes: ssbr: you're as bad as he is
14:09  arkanes: ssbr: ascii and bytes aren't the same
14:09  ssbr: arkanes: That's why I mentioned ascii bytes.
14:09  arkanes: ssbr: people thinking they are the same is why we have this problem
14:09  ssbr: arkanes: I didn't say they were the same.
14:09  ^^: hi
14:10  ^^: i have problem when import gnome
14:10  christopher22: hello.. I was reading something about speed comparison about Python and C (and yes I know C is low level language, and is faster..) but then I read on and the guy stated that Perl is faster then Python.. now I started googling a little while for blogs about speed between Python and Perl.. and most blogs state that perl scripts are faster then python scripts.. now i'm wondering is this actually true.. and if so how can Perl be so much faster then
14:10  christopher22: Python?
14:10  ^^: no module named gnome
14:10  ikanobori: christopher22: Cut off at faster then
14:10  big_rid: I have the string from the first row and have the result from line 10, this is a good python code, or not?
14:10  ikanobori: Or does the sentence end there.
14:10  ssbr: All I said was that python treats ascii bytes and ascii (unicode) characters interchangeably, and this is different from non-ascii bytes and non-ascii characters.
14:10  ssbr: But I used a short form that you got confused about.
14:10  big_rid: http://paste.pocoo.org/show/290405/
14:10  ^^: somebody help me, what package includes gnome module ?
14:11  ikanobori: big_rid: It's okay.
14:11  big_rid: ikanobori, thanks
14:11  christopher22: ikanobori: then python scripts.. now i'm wondering is this actually true.. and if so how can Perl be so much faster then Python?
14:11  arkanes: ssbr: I'm not interested in talking to you about this, because I will just explain all the ways you are wrong and you will then justify everything you said using definitions which are unhelpful
14:11  ikanobori: big_rid: Easier would be: return ''.join(x for x in texto if x.isdigit())
14:11  arkanes: ssbr: and none of it will address the underlying issue
14:11  ssbr: arkanes: I am correct. You may be misinterpreting me.
14:11  ikanobori: big_rid: Less typing and a common idiom.
14:12  arkanes: christopher22: lots of things are faster than other things
14:12  Aondo: oivind could match ?ivind and take that last ? and return it to whatever that char is, in this case ø. that's my thought, just not sure how :)
14:12  arkanes: christopher22: stuff is slower than other things too
14:12  ssbr: arkanes: but it's pretty clear that I'm correct, also. It's a well-known "feature" that's fixed in 3.x . That you're disputing it is your own problem.
14:12  ikanobori: christopher22: It depends on what you are doing and how, as with all tests.
14:12  ssbr: christopher22: http://shootout.alioth.debian.org/u32/benchmark.php?test=all&lang=python&lang2=perl
14:12  arkanes: christopher22: incidentally, languages don't have speeds, and talking about performance using broad strokes is rarely useful for anything except internet flamebait
14:12  ssbr: Maybe they mean perl starts faster than python.
14:12  big_rid: ikanobori, cool.
14:12  ssbr: (I don't know that it does)
14:13  christopher22: ikanobori: well that's true.. the guy on the blog was also using print statements.. which also take considerable time.. so maybe he could of done more optimalisation on his code.. but still I never thought Perl would be faster then a language like Python.. I must have been mistaken then
14:14  ikanobori: christopher22: There is a 99.9% chance you could rewrite that test to show that Python is faster.
14:14  ikanobori: But perl is pretty fast, yes :-)
14:14  christopher22: ssbr: thanks for that.. will take a look.. im more curious then after a debat (so don't take my questions as beating down Python.. because I truly pythons syntax and way of programming above any other language)
14:15  arkanes: christopher22: basically nothing anyone says in a blog post about performance is right
14:15  arkanes: especially if they can't explain *why* they got the results they did
14:15  christopher22: ikanobori: probably true.. but still nowadays speed is not of a big as deal as 20 years ago anyway.. I just love the way Python works and the modules that are available for the language.. which makes it even better then it already is
14:16  ikanobori: christopher22: That is a better motivation to use a language then speed alone. If python is too slow you can still implement is as a C module anyways.
14:17  christopher22: ikonia: that's true.. but still everything I created with Python has always done what it needed to do.. and it did so in amazing time.. so i'm not complaining.. (maybe I just dont like other people bashing on Python :-))
14:17  christopher22: :-)
14:17  christopher22: ikanobori: that's true.. but still everything I created with Python has always done what it needed to do.. and it did so in amazing time.. so i'm not complaining.. (maybe I just dont like other people bashing on Python :-)
14:18  dassouki: does java have an equivalent to python's list ?
14:18  ikanobori: It's called list.
14:18  ssbr: dassouki: ArrayList
14:18  twoface: Hi. I have a simple twisted xmlrpc server, with a number of methods. The methods all have two decorators, where one of them currently prints the method signature (via inspect.getargspec). This all works perfectly, except one of the methods, where inspect.getargspec returns the argument list one short. Instead of (self, session, username) it just returns (self, session) - how can that be?
14:18  ssbr: ikanobori: List is an interface in Java.
14:18  ikanobori: I don't know Java!
14:18  dassouki: ssbr: thanks !
14:19  dassouki: i'm trying to make a program for android
14:19  arkanes: Javas equivilent to the list is Vector
14:19  arkanes: the Java List is a linked list
14:20  arkanes: well
14:20  arkanes: sometimes
14:20 --- DasIch_ is now known as DasIch
14:20  ssbr: arkanes: no, LinkedList is the linked list implementation of the List interface
14:20  vak: sht... each function signature definition ends with depressive smile.
14:20  christopher22: dassouki: have you tried http://developer.android.com/index.html ?
14:20  ssbr: arkanes: As I said before, List is an interface. http://download.oracle.com/javase/1.4.2/docs/api/java/util/List.html
14:21  ssbr: Vector is sort of like ArrayList but different.
14:21  dassouki: christopher22: yup, but i think my q is more of a datastructure equivalent
14:21  christopher22: dassouki: I have done some small things with Eclipse and the SDK from Android.. (nothing big yet..) but a Java Book and the developer website from Android got me a long way :-)
14:21  ssbr: also I don't think ArrayList exists on Java ME, but Vector does.
14:21  dassouki: true, but i guess in java, there are collections, vectors, maps, arrays, and arraylists
14:22  dassouki: i didn't know which one would better be a list equivalent, that's all
14:22  ssbr: dassouki: the only way to know is to read the documentation.
14:22  ssbr: (and judge for yourself)
14:23  dassouki: I'm doing that now and thanks for the headsup
14:48 --- FlaPer87_ is now known as FlaPer87
14:55  janhaj: hello.. I have a string text.. when I do print text, I see "some_text", but when I do while (a != len(text)): print text[a] a+=1, I see this "s", 3 next lines are empty, "o", 3 next lines are empty... Can anyone tell me why? Thanks
14:56  ssbr: janhaj: use a pastebin
14:56  ssbr: also, loop over the string. for char in text: print char
15:01  janhaj: ssbr: http://paste.pocoo.org/show/290424/
15:01  jconrad: i want to assign a value of a true or false to a variable depending on the result of an if statement, is there a shorthand way to write this?
15:01  ssbr: janhaj: that isn't valid code.
15:01  jconrad: eg, does the statement: (if a==a)      return true?
15:02  ssbr: janhaj: http://codepad.org/LHXZO15z
15:02  ssbr: jconrad: statements don't return values, only expressions do./
15:03  twoface: you should just write "var = (a == a)" (with or without paranthesis
15:03  jconrad: that's what i was looking for, thanks twoface
15:03  janhaj: ssbt: http://paste.pocoo.org/show/290428/ this is the source code of what I show you..
15:05  ssbr: janhaj: must be something weird about your terminal.
15:05  ssbr: or perhaps some hidden characters... try print repr(password)
15:07  janhaj: ssbr: yes.. http://paste.pocoo.org/show/290430/ .. how can i delete this hidden characters?
15:08  ssbr: janhaj: you don't.
15:09  ssbr: janhaj: that's UTF-32-encoded text
15:09  ssbr: decode it
15:12  janhaj: ssbr: http://paste.pocoo.org/show/290431/
15:13  ssbr: janhaj: ... the repr() is in ASCII.
15:13  ssbr: janhaj: decode the text itself, obviously
15:14  janhaj: ssbr: ok, it works :) thank you very very much.. :)
15:24 --- aidan_ is now known as aidan
15:27  tazle: how do I find out what option I need to pass ./configure to compile Python with zlib module?
15:28  tazle: or rather, list all modules that are not oing to be built because their native components are missing
15:28  Eblis: hi
15:28  Eblis: how can I force a reload of a module that I've imported already but found out it had some errors ?
15:30  kerio: Eblis: sys.exit()
15:31  Eblis: without closing the python instance
15:31  DasIch: Eblis: not safely
15:31  Eblis: not important
15:32  DasIch: Eblis: you would have to delete all references and import it again
15:32  Eblis: sounds good
15:32  Eblis: how do i do that ?
15:32  DasIch: Eblis: also after deleting all reference you have to force the gc to collect garbage otherwise it won't work
15:32  m0no: where can I import the PyTime type from
15:33  Eblis: it's for testing purposes only
15:33  Eblis: and i want to keep reloading a script i'm working on without having to close the python instance
15:33  DasIch: Eblis: with multiple processes or threads this might go horribly wrong and it might not work with all implementations
15:34  photofroggy: Eblis: Look at the imp module
15:34  Eblis: aha
15:34  Eblis: thanks
15:34  DasIch: Eblis: if the script is stateless you might want to use a reloading mechanism similar to the one webframeworks usually provide
15:35  DasIch: Eblis: that's a lot safer
15:35  Eblis: aha
15:38  Yhg1s: DasIch: nonsense.
15:38  nosklo: Eblis: there are lots of caveats to reloading. It's hard to get right and bug-prone.
15:38  Yhg1s: DasIch: if you get rid of all references, the gc module has nothing to do.
15:38  Yhg1s: DasIch: the gc module is just for *circular* references, where you can't get rid of all references.
15:39  DasIch: Yhg1s: you are assuming the gc collect immediately
15:39  nosklo: DasIch: no, the gc is not involved
15:40  nosklo: DasIch: the gc only acts when you have circular references. Otherwise it is just reference counting that kills the object, immediately, no need for gc
15:40  DasIch: nosklo: this is only true for cpython
15:40  nosklo: ... which is what we're talking about, no?
15:41  Yhg1s: DasIch: which is the only Python implementation with a 'gc' module in the first place :)
15:41  DasIch: nosklo: as long as nobody mentions a specific implementation i'm assuming it should work on everyone
15:41  nosklo: DasIch: it's the only implementation that has a gc
15:42  Yhg1s: the gc module is an implementation detail of CPython.
15:43  DasIch: there should be a warning in the gc module if that's the case
15:43  Yhg1s: none of the CPython-specific modules carry such warnigns.
15:44  DasIch: Yhg1s: so?
15:44  nosklo: why would gc be any special?
15:44  DasIch: Yhg1s: that the documentation of that module sucks cannot be excused with the fact that the documentation of the entire library isn't any better
15:44  Yhg1s: Why would CPython warn about modules that it provides
15:44  Yhg1s: ?
15:44  Yhg1s: DasIch: no.
15:44  teratorn: cPython can't really *know* which modules happen to be cPython-specific
15:45  DasIch: teratorn: of course it can
15:45  Yhg1s: DasIch: you're asking for documentation on Python-the-language instead of CPython-the-implementation. There *is no such documentation*.
15:45  jrjr: What is a good linux distro to start programing Python with?
15:45  Yhg1s: There is just the CPython documentation.
15:45  teratorn: DasIch: uh huh...
15:45  Yhg1s: jrjr: any.
15:45  teratorn: DasIch: how?
15:45  nosklo: DasIch: the documentation at docs.python.org is on CPython, not on Python
15:45  DasIch: teratorn: there is a language reference and if you have a stdlib you can define an api for that an implementation has to provide
15:45  nosklo: DasIch: if other python implementations decide to not implement gc, it's not cpython's fault
15:45  teratorn: DasIch: now you're talking about something else entirely
15:46  nosklo: DasIch: and no, there's no imposed "minimum" to consider something a python implementation.
15:46  Yhg1s: DasIch: much in the language reference isn't spelled out either. you can't build a workable Python implementation from just the language reference.
15:47  Yhg1s: Lots of stuff just happens to be implemented in a particular way, and people and code end up depending on it. Like the gc module.
15:47  oboyle: when extending a python core class (ConfigParser,) how should the exceptions be handled by the instantiator?
15:47  oboyle: they still show up as ConfigParser.Ex...
15:47  nosklo: oboyle: not handle them at all?
15:47  nosklo: oboyle: that's ok
15:47  oboyle: when the new instantiator doesn't know anything about ConfigParser
15:47  papna-work: oboyle: That's because they're attributes of the ConfigParser *module*
15:47  nosklo: oboyle: it's ConfigParser-the-module
15:48  papna-work: oboyle: You wouldn't want to create new exceptions.
15:48  oboyle: so, should the exception classes be overriden?
15:48  Yhg1s: oboyle: you can expose the ConfigParser exceptoins as attributes of your new module.
15:48  oboyle: yet passed straight to CP?
15:48  nosklo: oboyle: just use the existing ones.
15:48  arkanes: you don't "pass" exceptions
15:48  papna-work: oboyle: No, you use existing exceptions when making new classes.
15:48  nosklo: oboyle: basically, you don't have to do anything.
15:49  oboyle: so, it's ok to have instantiators include ConfigParser, too
15:49  oboyle: ^ that's a questions
15:49  saml: wait optparse is depracated!
15:49  Yhg1s: saml: not really.
15:49  saml: is there something other than argparse? that i can use for 2.6 and 2.7?
15:49  Yhg1s: saml: that would be optparse.
15:50  saml: thanks!
15:50  papna-work: You can use optparse on both, or argparse on both (installing it as third party in 2.6)
15:50  Yhg1s: oboyle: if that's what you want, sure.
15:50  Yhg1s: oboyle: or you can expose the ConfigParser exceptions as exceptoins in your own module.
15:50  oboyle: Yhg1s: the latter is what I was considering
15:50  oboyle: thx, that's what I'll do
15:51  Yhg1s: oboyle: but keep in mind that that just means 'from ConfigParser import Foo, Bar, Baz'. It doesn't mean handling each exception by raising a enw one.
15:55  skkeeper: hi everyone, can someone tell me if its possible to drag a foreign window (firefox for example ) to my pygtk aplication? To trigger an event not to put it inside my app
16:04  vbabiy_: What should I be using for creating eggs? Setuptools, distrbute, or disutils?
16:06  Mion: vbabiy_: distutils or distribute, stay a long way away from setuptools
16:07  vbabiy_: Mion: is there a find_packages in disutitls
16:08  Mion: vbabiy_: no. List them explicitly instead
16:10  Mion: or if you really want it, write your own implimentation :)
16:29  bartek: Hi there. Is there a clean way to fetch a value out of a tuple based on it's key? e.g in the format contacts = (('key1', 'value1'), ('key2', 'value2'))
16:30  m0no: I just dont understand where PyTime is defined
16:30  Yhg1s: m0no: in what context?
16:30  Mion: bartek: namedtuple instead maybe? (why not use a dict btw?)
16:30  Yhg1s: bartek: sounds like you really want to use a dict instead. dict(that_tuple) will work.
16:30  bartek: Mion: Good point
16:31  bartek: Just used to using tuples for constants
16:31  roger_padactor: anyone use cocos here on a mac?
16:31  m0no: Yhg1s: well - I have a program that gives my PyTime output, and I need to validate that - so usual way is "if isinstance(value, some_type_to_compare_to) but I cant seem to find a module and import a PyTime class
16:32  papna-work: m0no: Don't typecheck. Know. If you need to validate it, do it on *content*, not type.
16:32  Yhg1s: m0no: and what *is* this 'PyTime' you're talking about? (And why do you care what type you get, anyway?)
16:33  neataroni: when i set an attribute = Field(), what am i saying?
16:34  gnotaras: is it a very bad idea to keep a virtual environment made with virtualenv under version control and transfer to several systems?
16:34  neataroni: oh im sorry, field is a class of the package im using
16:34  Yhg1s: neataroni: I'm not sure what you're asking.
16:38  bl4ckcomb: is asyncore a good choise to build a simple asynchronous http client (not considering twisted etc.)?
16:38  bl4ckcomb: or is there something better in the standard library?
16:38  bl4ckcomb: (python 2.7)
16:39  Yhg1s: bl4ckcomb: it's horrible.
16:39  papna-work: bl4ckcomb: asyncore sucks
16:39  papna-work: bl4ckcomb: The stdlib doesn't provide a good async framework.
16:39  Yhg1s: bl4ckcomb: there is no alternative, but that's not a reason to use asyncore. It's utter, utter crap.
16:39  kerio: bl4ckcomb: the answer is "use twisted£
16:39  kerio: \b"
16:40  jakllsch: heh
16:40  SmartViking: Hey, i am creating a loop that ends when the raw_input is "exit", what is the best way to do that?
16:40  Yhg1s: SmartViking: call raw_input(), see what it returns?
16:40  kerio: SmartViking: the best way is to read the tutorial
16:40  Yhg1s: SmartViking: I'm not sure what part is giving you trouble.
16:40  papna-work: SmartViking: s = raw_input(); if s == "exit": break
16:40  Imek: out of curiosity
16:40  bl4ckcomb: is there some article that gives me more information on what's bad about it, papna-work?
16:40  Imek: what's so horrible about asyncore?
16:41  SmartViking: Yhg1s: while lala = "exit" #is a syntax error, i wanna solve it
16:41  m0no: Yhg1s: fair enough - Ican just try to use the interface and se if it works I guess
16:41  Yhg1s: SmartViking: I'm not sure what you expect that assignment to do. Did you mean '=='?
16:41  papna-work: bl4ckcomb: I don't know of one, but you might have luck googling. It's too low-level to do useful stuff and it uses threads in an unscalable, confusing manner.
16:41  Yhg1s: SmartViking: if there's more to it, pastebin your actual code.
16:42  papna-work: SmartViking: http://www.greenteapress.com/thinkpython/
16:42  ssbr_: Imek: google says: Did you mean: what's so terrible about asyncore?
16:42  ssbr_: Imek: the results for this corrected query seem useful.
16:42  bl4ckcomb: papna-work, scaling is not an issue for my problem. I need a very basic solution
16:42  Yhg1s: asyncore doesn't scale, it doesn't handle many common cases, it's limited to particular types of channels, it has no scheduler and no good way to integrate it, it fails to consider many, many, *many* cornercases and errorcases and cases such as EINTR.
16:42  Yhg1s: it's completely and utter rubbish.
16:42  SmartViking: Yhg1s: AH! Thanks, :)
16:42  SmartViking: papna-work: I am reading it. :P
16:42  SmartViking: not right now though
16:43  Imek: thanks, I'm obviously not as good at googling as I'd thought :P
16:43  ssbr_: One of which is http://radix.twistedmatrix.com/2008/03/memories.html which is a nice article as far as I've read it, but isn't much relevant to you, I guess
16:43  Imek: I'm already using Twisted anyway, I'm just interested
16:44  ssbr_: anyway, "x sucks" is usually the right query in my opinion
16:44  SmartViking: Yhg1s: one thing, "==" is whne something is, what to use if something is not != ?
16:44  Yhg1s: SmartViking: if what isn't !=?
16:45  SmartViking: Yhg1s:  thought i tried that lemme try
16:45  Yhg1s: SmartViking: what?
16:45  kerio: SmartViking: no, "is" is when something is
16:45  kerio: "==" is when something is equal
16:45  Yhg1s: kerio: let's not make it more confusing.
16:46  Yhg1s: 'is' is not something to remember.
16:46  kerio: Yhg1s: it's a big difference
16:46  Yhg1s: kerio: yes. one people shouldn't worry about. If you never learn about 'is', no harm done. IF you ever use 'is' when you meant '==', much harm done. Let SmartViking read a tutorial first.
16:46  Yhg1s: or more than one.
16:46  SmartViking: Yhg1s: while lala != "exit" # syntax error on the "exit", sorry for being so newb
16:46  Yhg1s: SmartViking: when you did something wrong.
16:47  hobbeswalsh: Yhg1s: 'is' effectively means 'points to the very same object' ... or do I misunderstand?
16:47  Yhg1s: SmartViking: it's impossible to tell what without seeing the exact code, how you're running it and what it outputs.
16:47  Yhg1s: hobbeswalsh: no, that's it.
16:47  Yhg1s: SmartViking: I would strongly suggest you stop waht you're doing and instead study a tutorial. In detail.
16:48  bahamas: SmartViking: maybe you forgot the colon ':', but take people's advice and properly go through a tutorial
16:48  ultimatebuster: does python have a __subtract__?
16:49  ultimatebuster: like it has an __add__, but does it have a __subtract__?
16:49  Yhg1s: ultimatebuster: to what end?
16:49  cnfer: it's a SIN to forget about the colon
16:49  ultimatebuster: i can't get access to the python manual here, it's blocked for some reason here in school...
16:49  cnfer: well, according to others it's a sin to THINK about the colon
16:49  papna-work: ultimatebuster: __sub__ lets you define a custom -
16:49  Yhg1s: ultimatebuster: Python doesn't really "have" an __add__, but you're looking for __sub__.
16:49  SmartViking: Yhg1s: ok i found some faults in my program i will solve them and see what happens, next time i'll paste the source code
16:49  ultimatebuster: kay
16:49  ultimatebuster: thanks guys
16:49  ultimatebuster: writing a matrix class =D
16:50  Yhg1s: SmartViking: next time, make sure you read a tutorial first. In detail.
16:50  kerio: ultimatebuster: no
16:50  kerio: stop right there
16:50  papna-work: ultimatebuster: Use numpy
16:50  kerio: and install numpy
16:50  ultimatebuster: yeah i'm not allowed to do that :P
16:50  Yhg1s: cnfer: less of that now, thanks.
16:50  kerio: oh, homework
16:50  papna-work: ultimatebuster: Homework?
16:50  ultimatebuster: no
16:50  ultimatebuster: it's for math class
16:50  kerio: ...
16:50  ultimatebuster: it's for show off :P
16:50  papna-work: ultimatebuster: Homework.
16:50  SmartViking: Yhg1s: aww.. can't i have some fun while doing the toturial? It is long, takes time, i wanna create something my own at the same time. :P
16:50  ultimatebuster: vs my math teacher so... xD
16:50  papna-work: ultimatebuster: If I was your prof, I'd be unimpressed.
16:50  Yhg1s: SmartViking: sure, but wasting the time and effort of everone here is not allowed.
16:51  SmartViking: Yhg1s: I always get a warm feeling inside when helping people with.. anything. You might be different from me though.. :)
16:52  ssbr_: SmartViking: don't assume everyone is like you. Sure, lots of people are here because they like to help. That doesn't mean they like being treated like their time isn't worth anything.
16:53  bahamas: SmartViking: there's a difference between helping with something they can easily do themselves and something they have a genuine difficulty with
16:53  bahamas: *people
16:53  bl4ckcomb: papna-work, I'm wondering about something. Almost every question I ask here ends up in 'use twisted'. I understand frameworks can offer a quicker way for developing, but isn't this framework also built upon the standard library?
16:53  SmartViking: You are right, i'll google more when i get into such noob problems. :)
16:54  ultimatebuster: papna-work: i'm in HS. My math teacher told me to do this :P
16:54  Yhg1s: SmartViking: googling won't help you. You're missing very basic Python knowledge, which is explained in a tutorial.
16:54  Yhg1s: Much better than people here or a google query could answer.
16:55  ultimatebuster: tbh i just wrote the __mul__ and i barely understand what it's doing... Though it works!
16:55  dash: ultimatebuster: if someone who knew about numpy decided to write his own matrix class instead of using it and showed me his code, i would think he was dumb, not smart. :)
16:55  ssbr_: bl4ckcomb: every third party python library is built on the standard library, and Twisted is a third party python library. Your conclusion is logical.
16:55  Yhg1s: bl4ckcomb: Twisted uses parts of the standard library, yes.
16:55  Yhg1s: bl4ckcomb: so what?
16:55  ultimatebuster: dash: yeah but i'm suppose to learn about this matrix thing. Not use some pre-written code.
16:56  kerio: there's nothing inherently complex about operations between matrices
16:56  dash: ultimatebuster: well, that's dumb too. but if that's the requirement of the assignment, i guess we can't dissuade you. :)
16:56  ssbr_: kerio: of course there is!
16:57  kerio: ssbr_: you multiply and sum stuff
16:57  ssbr_: kerio: didn't you know that matrices are even more complex than the complex numbers?
16:57  dash: bl4ckcomb: the python standard library is built on top of other stuff, like C. why not go use that instead? :)
16:57  ultimatebuster: dash: i'm doing like extra work now... it's not exactly homework.. Though i do want to get good at matrix without doing too much work. What's better than writing an algorithm to claculate matrix add, subtract, multiply!
16:57  d_m: dash: x86 assembly or nothing!
16:57  kerio: operations between complex numbers aren't that complicated either
16:57  dash: ultimatebuster: _not_ writing an algorithm to calculate them!
16:57  bl4ckcomb: Yhg1s, so using only the standard library its possible to create the same result? I often read (especially here) that threading in python is evil. So how is threading made better in twisted?
16:57  ssbr_: d_m: NAND gates or nothing!
16:57  kerio: pff, x86
16:57  Yhg1s: bl4ckcomb: sure, it's possible. It just takes many years to get it right.
16:57  kerio: butterfly or nothing!
16:57  dash: ultimatebuster: not writing code is always better than writing code.
16:57  d_m: hahaha
16:58  Yhg1s: bl4ckcomb: The problems involved are very complex, particularly because of many platform differences and rare occurrences few people realize exist.
16:58  bl4ckcomb: dash, I'm a student, I'm using python pure out of personal interests
16:58  dash: bl4ckcomb: it's not "threading in python", it's threads in general. twisted is a better approach because it helps you not use threads.
16:58  kerio: bl4ckcomb: async networking is *hard*
16:58  kerio: really, really hard
16:58  ultimatebuster: dash: yeah but the algorith is so cool ^^
16:58  ssbr_: bl4ckcomb: what makes you think Twisted makes threading better? :<
16:58  kerio: you can make a half-assed solution very easily
16:58  bl4ckcomb: kerio, I know. I'm aware of deathlocks, mutex, semaphores, etc.
16:58  kerio: but, of course, it's half-assed
16:59  kerio: no, async doesn't use threads
16:59  ssbr_: Actually, Twisted does have a thing that can make threading slightly easier if you don't do anything extra at all.
16:59  SmartViking: Yhg1s: As i said i am reading the toturial but only thing that helps to remember stuff is repetation, i wont read the book more than once, while i read it i have to experience it with my self, get the same problem over and over google litte look a little at code and be like "aha, now i remember" if you know what i mean, learning new things demands repetation also on a very basic level. :)
16:59  dash: yeah its actually got a threadpool, which helps.
16:59  bl4ckcomb: ssbr_, that's my question
16:59  ssbr_: But if you do extra stuff with shared state and so on, it's all the same problems all over again.
16:59  bl4ckcomb: dash, so basically twisted is using more like a scheduler instead of threads?
17:00  svaksha: anyone knows about rhok.org?
17:00  svaksha: oops, wrong channel
17:00  Yhg1s: bl4ckcomb: threads are bad because you can't control them very well, and they don't like to share things with other threads. To make them useful, however, you *do* have to share things with other threads, and especially in Python where everything is shared, including code.
17:00  dash: bl4ckcomb: it's an event loop with networking code, yes
17:00  Yhg1s: bl4ckcomb: and they defy conventional logic.
17:01  bl4ckcomb: ok I understand
17:01  d_m: Yhg1s: i would actually say they like sharing too much, but same idea ;)
17:01  bl4ckcomb: thx
17:01  Yhg1s: d_m: no, they live in a shared environment, but they don't actually want any other thread to touch their stuff ;P
17:01  Luyt: Is someone known with pyephem?  Why is there no ephem.Earth class?  Could it be simulated by ephem.EllipticalObject?
17:01  ssbr_: They don't want to, but they do it anyway. They're so fickle.
17:02  d_m: Yhg1s: right, they don't want that to happen but it does happen anyway
17:02  kerio: Luyt: well, a geoid is a little bit different than an ellipsoid
17:02  Yhg1s: d_m: all the time, yes.
17:03  Luyt: kerio: But all I want is the heliocentric position of Earth.  Ephem has classes for Venus, Mars, Jupiter etc... but no Earth.
17:03 --- plediii_ is now known as plediii
17:07  ovnicraft: hi folks, i get this j_ids = map(lambda x1: x1[0], cr.fetchall()), my cr.fetchall() gives me [(7,)] after map i get []
17:07  ovnicraft: why this?
17:07  ovnicraft: i need [7] after map
17:08  Yhg1s: ovnicraft: depends on what 'cr' is, but if it's a DB-API cursor, cr.fetchall() returns a list of rows. Each row is a tuple.
17:08  Yhg1s: If you know the result will be exactly one row, you can just use cr.fetchrow() to get the tuple, and index it to get the first column.
17:09  Yhg1s: eh, cr.fetchone().
17:09  Yhg1s: (also, don't use map() with lambda. use a list comprehension instead.)
17:09  ovnicraft: Yhg1s, yes i know that in my result the list [(7,)], and i can get may rows
17:09  ovnicraft: *many
17:09  Yhg1s: ovnicraft: ok, so just iterate over the cursor to get each row in turn, and index or unpack it.
17:10  ovnicraft: Yhg1s, about dont use lambda in map?
17:10  neataroni: anyone have any suggestions on how to iterate through the attributes of a class instance and change the attribute values if some condition is true for that attributes value?
17:11  Yhg1s: ovnicraft: yes, what about it?
--- Log closed Fri Nov 12 20:31:58 2010
--- Log opened Fri Nov 12 22:39:27 2010
22:39 --- Users 821 nicks [0 ops, 0 halfops, 0 voices, 821 normal]
22:39  ssbr_: what about things with the same interface? tuples with elements with the same interfaces? tuples with a single pair of corresponding elements with differing interfaces?
22:39  ssbr_: making == raise a TypeError in some circumstances is tricky to suss out, and even trickier to predict as a user of the language. It would inevitably surprise someone by doing the wrong thing down the line.
22:40  ssbr_: whereas str != int surprises very few people.
22:40  MostAwesomeDude: xh: If you can find a better solution to my point, feel free to raise it.
22:40  gregglind: ssbr_ ++, that matches my experience as well.  duck typing tends to catch that sort of thing in my experience.  the only time I tend to have problems with == are with ints vs strings that I am getting from somewhere 'stringy'.... json, os.environ and the like.... and using them in 'case-like' flow logic/dispatch.
22:40  ssbr_: (wording slightly wrong there -- x == y raising a TypeError would confuse a lot of people)
22:40  ssbr_: gregglind: yeah, that's always a problem
22:40 --- Channel #python was synced in 90 seconds
22:41  dash: mmm
22:41  ssbr_: I normalize the types I get from unschemad inputs as soon as I get them, though, so it's not a problem in practice for me at least
22:41  gregglind: but those tend to be very near the edges of programs, where I am doing other checking already.
22:41  dash: it hardly ever makes sense for stuff of different types to be equal
22:41  ssbr_: dash: Right. Usually it will only be true for things that are of the same type.
22:41  ssbr_: Usually.
22:41  dash: ints and floats are the only case i can think of
22:41  dash: ok and complex
22:42  ssbr_: dash: numeric types in general. different geometry containers.
22:42  ssbr_: it comes up a lot in math I think.
22:42  Brend: dash: Help! How do I find the absolute path of a dir-locals.el, from inside it?
22:42  Mrokii: hello. In a script where I imported the urllib2-module to retrieve an url I get this error "global name URLError is not defined", when trying to raise an exception. What could be the reason for that?
22:42  dash: Brend: Oh huh. I haven't use dir-locals a lot
22:42  gregglind: Mrokii... are you doing 'from urllib2 import ...'
22:43  Brend: dash: My ultimate goal here is to set compile-command to "make -C /some/absolute/path", regardless of where the source file I'm in is
22:43  klawd: dash: i forgot, some implementation of a memcache wrapper or something
22:43  Brend: dash, I thought I could do that with a dir-locals.el at the top of my source tree that expanded a relative path from itself
22:43  klawd: bob2: good point
22:43  Brend: dash: But it doesn't know where it is
22:43  dash: Brend: don't you already know what directory it's in though
22:44  Mrokii: gregglind: no, just "import urllib2"
22:44  Brend: dash: I know where it is *now*
22:44  Brend: dash: But when I check it out somewhere else on some other computer, it will be elsewhere
22:44  dash: Brend: heh true
22:44  gregglind: are you trying to raise the exception, Mrokii?  If so you might have to call it as urllib2.URLError.  hard to tell more without seeing some code.
22:45  Mrokii: gregglind: I will try that...
22:47  gregglind: Mrokii:  import urllib2; raise urllib2.URLError('oh noes!  broken')
22:47  gregglind: (at least in python2, and I have no idea of what the args are for that error)
22:47  _habnabit: God help me I just did setdefaultencoding('latin-1'). :(
22:48  Brend: dash: Okay here's an easier one, how do I tell emacs to split vertically by default when it opens output buffers, instead of horizontally?
22:48  dash: Brend: i bet 'dir-name' is bound to the directory name
22:49  dash: _habnabit: ha ha, suffer
22:49  Eevee: _habnabit: a pox upon your house
22:49  bob2: Mrokii: exceptions are just classes
22:50  gregglind: _habnabit, latin-1 has a long and distinguished history, with no shame.  Is that the variant where 'u' and 'v' encode the same?
22:50  bob2: Mrokii: so if it is in the urllib2 module, you'll need to import it the same way you would for urlopen
22:50  Brend: dash: Yes, but of the file it's loading, not the dir-locals.el :(
22:50  TheSheep: gregglind: yeah, and w is multi-byte
22:52  dash: Brend: anyway vert vs horiz split is determined by window size
22:52  dash: but it checks if there's room for horizontal split first
22:52  Brend: dash: Oh! So it is. Well that really was easy
22:52  Brend: Holy crap it links me from error messages to source lines right off the bat
22:52  Brend: This is awesome
22:53  dash: yeah basically
22:53  Brend: I wonder what other C++ tricks it knows that I haven't discovered
22:54  dash: Brend: cedet can help
22:54  dash: but it's tricky
22:55  cnfer: Brend:  what editor?
22:55  Brend: dash: I don't care about like autocomplete, but things like linking function declarations in header files to their definitions would be pretty cool
22:55  kzar: How do I create a datetime object for the current time that is offset-aware? I can't seem to pass today() a tzinfo
22:56  Brend: kzar: pytz.timezone("Your/Timezone").localize(today()), perhaps.
22:56  kzar: Brend: I'm not using the pytz module
22:56  Brend: cnfer: emacs
22:56  Mrokii: bob2, gregglind: Thanks, everything seems to work as I want it now.
22:56  Brend: kzar: Start using it.
22:56  _habnabit: kzar, datetime.datetime.now(whatever_tz)
22:56  cnfer: iek
22:57  juanmabc: Brend: taking into account that error messages shows line and column, making editor jump to it is not so futuristic
22:57  Brend: juanmabc, it is to me!
22:57  dash: Brend: right, same here
22:57  kzar: _habnabit: Thanks that worked, not sure how I missed it
22:57  juanmabc: hehe
22:57  dash: kzar: dateutil also has timezone stuff
22:59  Brend: (I'm pretty sure that giving the tzinfo directly like that breaks now and again for DST-ful timezones)
22:59  _habnabit: Brend, nah
22:59  dash: kzar: also you can do somedt.replace(tzinfo=sometz)
23:00  _habnabit: dash, but that's very rarely what you want, unless you're adding a tzinfo to a naïve datetime
23:00  Brend: _habnabit, the pytz documentation says it does.
23:00  _habnabit: Brend, does it?
23:00  Brend: Yes.
23:00  dash: _habnabit: right.
--- Log closed Fri Nov 12 23:06:34 2010
--- Log opened Fri Nov 12 23:11:56 2010
23:11 --- Users 815 nicks [0 ops, 0 halfops, 0 voices, 815 normal]
23:13 --- Channel #python was synced in 90 seconds
23:15  came0: is there a way to execute a function name saved in a varible?  x = "Search()"  execute(x) something like that?
23:15  KirkMcDonald: came0: x = Search
23:15  KirkMcDonald: came0: x()
23:15  KirkMcDonald: came0: Functions are first-class objects.
23:15  came0: KirkMcDonald: nice.  thanks. :)
23:16  kerio: names are just references to objects
23:16  came0: nice to be back to python where things work as youd expect them to :)
23:16  dash: or don't work, as you expect them to
23:17  AlexMax: dash: things always work as you expect them to, but only if you're dutch
23:26  mateobur: urllib doesn't accept p12 certificates
23:26  mateobur: it seems
23:26 --- Affix is now known as Affix-AFK
23:27 --- Affix-AFK is now known as Affix
23:30  bob2: no idea what that is
23:30  bob2: example url?
23:31  mike-ekim: hi I am trying to do cookiebased authentication on a site that also has HTTP basic authentication
23:32  bob2: mateobur: wfm
23:32  mike-ekim: i can do either the http basic authentication only, or the cookie authentication openers but I am having trouble getting both to work
23:32  Cam: mike-ekim; Basic HTTP authentication? What do you mean? A form where you submit it?
23:32  mateobur: wfm ?
23:32  bob2: works for me
23:32  bob2: http basic auth is a well defined http auth type
23:32  mike-ekim: no, the http-passwd
23:32  Cam: bob2; Could you give us the link you are having problems with?
23:32  bob2: mike-ekim: with urllib2 + cookiejar?
23:33  mike-ekim: yes
23:33  mateobur: bob2, but what you are getting is the password page
23:33  bob2: Cam: not sure what you're talking about
23:33  mateobur: you need to supply a pass if you don't have a cert
23:33  Cam: bob2; I means mateobur :P
23:33  bob2: mateobur: are you asking how to do https client auth?
23:33  Cam: mateobur; Can you give us the link you are trying to access?
23:33  augdawg: how can i get the index number of an element in a list?
23:33  mateobur: yes
23:33  bob2: augdawg: index
23:34  mateobur: https client auth
23:34  bob2: then say that
23:34  augdawg: so whatever.index ?
23:34  Mion: augdawg: L.inded(elem)
23:34  Mion: index*
23:34  augdawg: Mion bob2 thanks!
23:35  bob2: mateobur: http://code.activestate.com/recipes/117004-ssl-client-authentication-over-https/
23:35  bob2: I don't know if you can make urllib2 do it
23:35  mateobur: ok thanks, but what I have is a p12 file
23:35  mateobur: which works with firefox
23:36  bob2: mateobur: http://bugs.python.org/issue3466
23:37  mateobur: so this means... I can't for the moment
23:38  dash: mateobur: pretty sure you can do it with twisted.web.client
23:38  dash: and pyopenssl
23:38  bmoloney: I have a subpackage that extends __path__ in  __init__.py so that user defined modules are included.  I can import these modules using __import__ from outside the parent package, but inside the parent package it doesn't work (even if I set 'level=0')
23:40  dash: bmoloney: are you writing yet another plugin system? :)
23:40  Yhg1s: bmoloney: which __path__ does it extend, and how are you importing the modules?
23:40  came0: so im tring to work with code.InteractiveConsole but im not sure how to grab errors.  i tried two spots in this example (line 34 and 38) but neither try statment suceeds.  any ideas? http://sprunge.us/aCaa?py
23:41  bmoloney: dash: I looked into some plugin systems, but I am trying to keep the user modules as simple as possible
23:42  dash: bmoloney: what are you writing?
23:43  bmoloney: Yhg1s: I am extending the path of the subpackage (called 'parsers').  The parent package is called 'filer'.  My import call is __import__('filer.parsers.kspace', fromlist=['filer.parsers']) for a module called 'kspace'
23:43  dash: bmoloney: here's something you might find useful: http://launchpad.net/modules
23:44  Yhg1s: bmoloney: I'm not sure what you think 'fromlist' is doing there, but that's not what it's for.
23:44  Yhg1s: bmoloney: so the directory you're adding to filer.parsers.__path__ contains a kspace module?
23:44  bmoloney: dash: program for organizing and renaming data files. I include some parser modules (returns a dict for each data file) and I want the user to be able to define their own parsers
23:45  came0: anyone familiar with InteractiveConsole?
23:46  came0: code.InteractiveConsole
23:46  augdawg: how can i check to see if a list contains something?
23:46  ssbr_: augdawg: foo in your_list
23:46  Yhg1s: augdawg: 'item in list'
23:46  bmoloney: Yhg1s: The fromlist was confusing me, but that call is working from outside the 'filer' package.  The kspace module is actually inside the base parsers path, so those modules aren't working either
23:46  augdawg: thanks guys
23:46  ssbr_: came0: what's your actual question?
23:47  Yhg1s: bmoloney: ok, so what "doesn't work", exactly?
23:47  Cam: "foo" in ["foo","bar","list"] = True
23:47  Cam: augdawg; ^
23:47  augdawg: oops thats not what i meant. i meant how do you delete an element from a list?
23:47  came0: ssbr_: so im tring to work with code.InteractiveConsole but im not sure how to grab errors.  i tried two spots in this example (line 34 and 38) but neither try statment suceeds.  any ideas? http://sprunge.us/aCaa?py
23:47  Yhg1s: augdawg: depends. based on what?
23:47  ssbr_: augdawg: do you have the index?
23:47  augdawg: yes i have the index
23:47  Cam: augdawg; ["list","test"].pop(index) or del[indexnumber]
23:47  Yhg1s: augdawg: 'del L[idx]'
23:47  Cam: augdawg; pop() returns something though.
23:47  Cam: Agh, del list[indexnumber]
23:47  augdawg: thanks again
23:47  bmoloney: Yhg1s: when i use that import from outside the package I get the correct module.  Inside the package i get the error "No module named parsers.kspace"
23:48  Yhg1s: bmoloney: and how, exactly, are you calling __import__()?
23:48  bmoloney: Yhg1s: like I said above: __import__('filer.parsers.kspace', fromlist=['filer.parsers'])
23:49  bmoloney: Yhg1s: also tried setting 'level=0' since I figured it was an issue with relative vs absolute imports
23:49  Yhg1s: bmoloney: and what is '__name__' at that point?
23:49  ssbr_: came0: what errors do you want to grab, from what, when?
23:50  Yhg1s: are you doing this from the package's own __init__.py or any code called from it?
23:51  bmoloney: Yhg1s: I am doing this a module 'filer-cli' which is inside the package 'filer', __name__ would be '__main__'
23:51  Yhg1s: bmoloney: ok, so the problem is that this causes Python to not know there is anything like the package 'filer'.
23:51  Yhg1s: bmoloney: don't run things that live inside packages directly.
23:51  came0: ssbr_: the code take the first word of the input and passes it to InteractiveConsole.push() then get the results from self.return_output(). somwhere in the the actual command is executed and returns a NameError if it doesnt exist.  The NameError output is returned in the output section but I want to be able to handle the error... hopefully without modifying InterativeConsole itself
23:52  came0: ie if you typed in search it tries to run search()
23:52  bmoloney: Yhg1s: Ah, so my CLI should be outside the package?
23:53  dash: bmoloney: have a script that imports something from your package and calls it.
23:53  bob2: dash: oh, awesome, i've been hoping someone would rip t.p out of twisted
23:53  Yhg1s: bmoloney: typically, yes. Entrypoints confuse packages, unfortunately. The best approach is to put scripts outside of packages, and never to import them as modules (because that gets confused as well.)
23:53  dash: bob2: little by little :)
23:54  Yhg1s: bmoloney: alternatively, you can add the right directory to sys.path (not __path__), but that's usually a painfully fragile way.
23:54  bmoloney: Yhg1s, dash: ok thanks for the infor
23:55  jm_: Hello pyFellows
23:55  hsa2: hello
23:56  hsa2: i am trying to parse an output that i got with subprocess.Popen with split
23:56  hsa2: But I get "Type str doesn't support the buffer API"
23:56  Yhg1s: hsa2: then you're using Python 3.
23:56  hsa2: yes :)
23:56  Yhg1s: hsa2: how are you splitting it exactly?
23:56  hsa2: pre_vol = str(out.communicate()[0])
23:56  hsa2: vol = pre_vol.split("\n")
23:57  hsa2: no, not with str()
23:57  osaucey: is there a way to have two programs connected to the same socket?
23:57  Yhg1s: hsa2: str(out.communicate()[0]) doesn't do what you want.
23:57  hsa2: Yhg1s, http://pastie.org/1293940
23:57  hsa2: What should I use?
23:58  Yhg1s: hsa2: well, pipes produces bytes. you have to decode them to get strings (in Python 3, anyway.)
23:58  Yhg1s: hsa2: or you can just split the bytes.
23:58  Yhg1s: it depends on whether you want the result to be a unicode string or a bytes string.
23:58  hsa2: I want it to be unicode.
23:58  Yhg1s: then you have to decode it, using the decode method.
23:59  Yhg1s: oh, the code isn't as you said.
23:59  Yhg1s: the problem with line 8 is that you're passing a unicode string to split a bytes string.
23:59  Yhg1s: decode it first, and it will work. Or, pass a bytes string to pre_vol.split.
--- Log closed Sat Nov 13 00:00:04 2010
