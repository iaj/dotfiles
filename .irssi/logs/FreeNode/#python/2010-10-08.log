--- Log opened Fri Oct 08 02:19:36 2010
--- Log closed Fri Oct 08 02:24:40 2010
--- Log opened Fri Oct 08 02:24:49 2010
02:24 --- Users 640 nicks [0 ops, 0 halfops, 0 voices, 640 normal]
02:25 --- Channel #python was synced in 76 seconds
02:35  akamal: torpedotux, sorry I stepped away for a minute. Thank you for that :)
02:47  fariseo: re.search('starts_with'+'(.*)'+'ends_with', s) < what if there's more than one match? how do i display them all?
--- Log closed Fri Oct 08 09:52:28 2010
--- Log opened Fri Oct 08 09:52:50 2010
09:52 --- Users 639 nicks [0 ops, 0 halfops, 0 voices, 639 normal]
09:53 --- Channel #python was synced in 75 seconds
09:56  gypsymauro: hi
09:57  gypsymauro: I want to implement a simple webservice that does some query on a db and returns a result set, which library is better to use?
10:00  Alberth: argh, why does ConfigParser throw all these freaking exceptions instead of returning None, for stuff that doesn't exist :(
10:01  ssbr: cratuki: get Console2!
10:01  ssbr: Alberth: because dicts do
10:01  shylent: Alberth: erm, I think thats probably because you are not supposed to ask for stuff that is not there, or, alternatively, you should provide defaults for options that may not be there when you ask for them
10:01  Alberth: ssbr:   d.get('foo') doesn't throw an exception
10:02  shylent: configparser sucks anyway
10:02  ssbr: Alberth: so then is the real complaint that ConfigParser offers no .get-like thing that returns a default?
10:02  shylent: ssbr: but it does offer that
10:02  ssbr: shylent: so then what's the problem?
10:02  ssbr: Alberth: use that thing!
10:03  Alberth: shylent: you cannot provide a default without loading it into the config
10:03  jrmy: how do i print text backwards?
10:04  jrmy: in a 2.x version
10:04  Alberth: ''.join(reversed('abc'))
10:05  Alberth: shylent: and since I need to save the config as-was, I cannot contaminate the contents with defaults
10:06  shylent: Alberth: erm, are you talking about the 'defaults' argument to ConfigParser?
10:06  shylent: does it actually interfere with the configuration file, that you are using?
10:07  shylent: I must confess, I haven't used ini-files for quite a while (except for logging configuration :S)
10:09  Alberth: shylent: http://paste.pocoo.org/show/272603/  <-- I need to do 2 tests to pull a value from a config, 3 accesses instead of 1 'get' in dict-style
10:11  shylent: in your case, I'd just wrap it in try / except, but that 'd be even longer
10:12  aliva: how can I direct all exception into a log file? I don't want to print them on termianl
10:12  jrmy: ok how about if i want to use it in xchat to have all of my words backwards?
10:13  Alberth: jrmy: hack xchat?
10:13  _habnabit: Alberth, logging module.
10:13 * _habnabit kicks irssi.
10:13  _habnabit: aliva, ^
10:13  aliva: _habnabit: ??
10:13  jrmy: xchat has a python module
10:13  jrmy: or whatever its called
10:14  jrmy: i can load scripts with xchat
10:15  jrmy: i dont think i can use 3.1 scripts though
10:15  aliva: _habnabit: what does it mean? -> ^
10:15  _habnabit: aliva, 'look up'
10:15  Alberth: jrmy: you are asking an API question about xchat, rather than a Python question (you'd have to do the same if you would program it in eg C). You better ask that in a xchat group
10:16  Alberth: aliva:  he had some troubles with TAB completion, and ^ indicates that his answer directed at me was really for you
10:19  jrmy: well how would you make it print backwards with 3.X?
10:19  jrmy: since i think i want to learn 3.x more
10:20  Alberth: jrmy: doesn't my answer work in 3.x?  (I really don't know, but the things I used seem likely to have survived the 2 -> 3 jump)
10:21  jrmy: i'll try
10:24  jrmy: it works in 3.x as well
10:26  aliva: Alberth: but a cant find anything! maybe I have opened xchat after that talk
10:27  Alberth: aliva: (10:13:19) _habnabit: Alberth, logging module.
10:29  aliva: Alberth: aha1 thanks
10:31  Alberth: aliva: although I have a hard time believing that dumping an exception to file is of any use.
10:33  aliva: Alberth: I want to create a pys60 for my phone and I want to direct all errors to a file.
10:54  sig^: what's the easiest way to limit a variable to a scope?
10:54  sig^: I mean, if I want to have a local variable for example inside a for block
10:54  verte: ?
10:54  sig^: well, is it then just del'ing it afterwards?
10:54  verte: write smaller functions
10:54  sig^: writing a script
10:55  verte: don't write code outside of functions
10:55  verte: and class definitions
10:56  verte: if you are writing a program, call a main() function in your entry point.
10:57  verte: (what is a 'script' anyway? it carries a connotation of not having any flow control)
10:58  Dieterbe: hey guys, is it possible to import a script that has no extension? (ie no .py at the end). i tried execfile() but that requires an absolute path, which I avoid to hardcode.  the file i want to include is in the same dir as my main script
10:58  __gilles:  
10:59  verte: sigh.
11:00  verte: Dieterbe: you don't import scripts, you import modules
11:00  verte: so, you shouldn't be doing that.
11:00  Dieterbe: well, in my case, the file i'm importing just contains a line like: foo='bar'
11:00  ssbr: sig^: variables are all restricted to their scope
11:01  ssbr: sig^: the problem is that for loops don't create new scopes
11:01  dmarkey: are there any alternatives to pickle that arent limited by the recursion limit?
11:01  sig^: so is there a way to explicitly create a scope?
11:02  sig^: I mean, except  def fun(): <body>  fun()
11:02  _habnabit: sig^, what's a scope, and why do you need one?
11:02  verte: Dieterbe: execfile
11:02  sig^: well, a for loop would be a convenient scope; I'd use a bunch of temp variables there that I wouldn't like to leak out
11:02  sig^: also, I'd like to reuse some variable names
11:03  sig^: but that's probably just because I'm infected with C(++)  (:
11:03  _habnabit: sig^, 1) you can reuse variable names without scopes. 2) why do you care? 3) why aren't you encapsulating this in functions?
11:03  nitneiht: hi!
11:04  Wild_Cat: sig^: anyway, you can't create a block-specific scope. Sorry ;)
11:04  oneiota: IP address and ranges: I'm looking for an efficient way of detecting if an IP address (example) 128.232.215.121, is within an IP range, such as '128.232.0.0/16'.  Am currently using netaddr but the approach I've taken is slow: "if IPNetwork(ip).ip in list(IPNetwork(iprange)):".  Suggestions?
11:05  nitneiht: when I import socket     python interpreter through this: AttritubeError: 'module' object has no attribute 'AF_INET'
11:05  nitneiht: what is the problem and how to fix?
11:05  oneiota: My example was slightly wrong.  My IP addresses have '/32' appended at the outset, which is why I used IPNetwork(ip).ip in the first half of the 'if' statement ...
11:06  dmarkey: are there any alternatives to pickle that arent limited by the recursion limit?
11:07  Dieterbe: verte: like i said, i tried that, but then i need to hardcode the path
11:07  Dieterbe: verte: whereas with import, i get the "path lookup" for free
11:11  ssbr: dmarkey: give json a shot. I don't know if it is.
11:13  torpedotux: what's up psychos!!!!!!
11:13  torpedotux: ssbr: how's it going
11:13  ssbr: Dieterbe: you don't need to hardcode anything
11:14  ssbr: Dieterbe: use something like os.path.join(os.path.dirname(__file__), 'data', 'blah.ini')
11:14  drnlm: nitneiht: I suspect you have a file called socket.py somewhere that's being imported instead of the socket module, but without more info, that's just a guess
11:15  nitneiht: drnlm i just import socket from terminal , first command
11:17  drnlm: nitneiht: So do you have any other files called socket in sys.path? And bear in mind that the. pyc files can be imported even if you've deleted the original .py file
11:17  jrmy: back
11:20  ssbr: torpedotux: mathy
11:20  nitneiht: drnlm: don't have any file called socket in sys.path
11:21  torpedotux: ok
11:24  Dieterbe: ssbr: awesome. thanks, that works perfectly
11:24  drnlm: nitneiht: what does 'import imp ; print imp.find_module('socket')' give?
11:25  nitneiht: drnlm ; hold on a second
11:27  nitneiht: drnlm : (<open file 'socket.py', mode 'U' at 0xb778a0d0>, 'socket.py', ('.py', 'U', 1))
11:27  xro: hi, i ould like to do a benchmark about thread --> number of threads vs execution time... But i can't start more than 300 threads... i have a debian 32bit (max thread is 65535) and python 2.5... can you explain me why?
11:28  Alberth: because one should start to wonder whether he has a 300 core machine
11:29  drnlm: nitneiht: You're importing a socket.py from your current directory, not the socket module
11:29  Alberth: and if not, whether the approach of running so many threads makes any sense
11:30  nitneiht: drnlm: oh , how to import socket module
11:30  nitneiht: not from my current dir
11:30  Alberth: nitneiht: give socket.py a different name
11:30  Kylarr: nitneiht, change the name of the socket.py file that's in your current dir.
11:31  drnlm: nickgr: The quick fix is just to rename your socket.py to something else - shadowing modules is best avoided.
11:31  drnlm: s/nickgr/nitneiht/
11:31  nitneiht: Alberth Kylarr drnlm : thanx all of you guy
11:32  xro: <Alberth>, i would like to plot a graph # threads vs efficience.... so is there a way to have more threads?
11:33  Alberth: nitneiht: if you have more than about 2 .py files that you import, you can consider making it a package, which will solve your import problems (if the package name is unique)
11:33  bpc_: Howdy.  I have an __init__.py problem if anyone is interested:  I'm trying to use PyYAML at school, so I can't get it installed properly...
11:33  nitneiht: how to know current dir in python
11:33  Alberth: xro: 300 threads is the wrong way to get an efficient program
11:34  verte: xro: the multiprocessing people already did it for you
11:34  Alberth: nitneiht: os.getcwd
11:34  _habnabit: xro, you're going to hit the limit of the usefulness of threads waaaay before you hit 300 threads.
11:34  verte: xro: see the multiprocessing inclusion pep
11:35  xro: <Alberth>, i get a soft and i can set the number of thread to use... so i think it's a good way t test it with min max and some intermediate value to set it....
11:35  Alberth: sigh
11:36  bpc_: xro: are you going to try different sorts of data sharing problems as part of the comparison?
11:36  _habnabit: xro, what benefit do you think you could possibly get from having 300 threads?
11:36  Alberth: xro: having many more threads than processor cores is not going to be of any use
11:36 * ssbr just tested, he can't even start 100 threads on his system :<
11:37  ssbr: Alberth: not really true
11:37  ssbr: that's only true if they're CPU-bound
11:37  Alberth: xro: and if your threads are mostly idle, you should consider an event-based program structure
11:37  dbu: ssbr: if they aren't cpu bound, use twisted
11:38  ssbr: dbu: and then you might end up using threads anyway.
11:38  ssbr: not all IO-bound tasks have a nice, clean solution, unfortunately
11:39  xro: Alberth>, i didn't code it but it use network.... so, thread should be idle most of the time.....
11:39  ssbr: xro: oh, bleh. Use Twisted
11:39 --- aliva is now known as aliva-away
11:39  xro: _habnabit> but 4 thread is better than one and i have a single core....
11:39  _habnabit: xro, are you trying to make a thread for every socket?
11:40  _habnabit: xro, ... um, what? How can you say "four threads is better than one" ?
11:40  _habnabit: xro, better at *what* ?
11:40  xro: i didn't code that script..... I could look into but i really don't have to recode it
11:40  Alberth: xro: program it in twisted, run the benchmark, and we will discuss again whether 4 threads is better
11:40  xro: _habnabit> better in term of execution time....
11:40  shylent: why?
11:40  ssbr_: apparently Firefox doesn't like being told it can't create a new thread.
11:41  shylent: that makes no sense at all
11:41  _habnabit: xro, yeah, that's not true at all.
11:41  _habnabit: xro, more threads means more contention for locks.
11:41  shylent: doubly so in python
11:41  ssbr_: (should have turned the python program that maxed out thread capacity, off)
11:41  bpc_: Can anyone think of a reason why ~/pyLibs/test.py can import yaml (which is in ~/pyLibs/yaml/ with an __init.py__), but ~/test.py can only quasi import pyLibs.yaml (after putting an __init__.py in ~/pyLibs)?
11:41  ssbr_: (did I miss anything?)
11:41 --- ssbr_ is now known as ssbr
11:42  ssbr: bpc_: "quasi import"?
11:42  bpc_: the import statement doesn't fail, but trying to use yaml does.
11:42  xro: Alberth, recode would be nice if i had time to....
11:42  verte: bpc_: pyLibs is on the path, its a root
11:42  ssbr: bpc_: OK. aaaand...?
11:43  ssbr: you could start by actually saying what goes wrong
11:43  verte: indeed
11:43  ssbr: xro: do your research before you start next time
11:43  bpc_: is pyLibs an existing package name?  I just put that as my local python library.
11:43  ssbr: bpc_: I don't know, is it?
11:43  Alberth: xro: please don't make claims about things you didn't try then
11:43  xro: ssbr, i already did this error and i recode it... but this one it's not my error...
11:44  ssbr: xro: that's not what I'm talking about.
11:44  bpc_: ssbr: checking.
11:44 --- aliva-away is now known as aliva-back
11:44 --- aliva-back is now known as aliva
11:44  ssbr: I'm talking about you choosing the wrong solution and refusing to use the right solution because it's too much effort. Well, yes, it's too much effort now. It would have been better if you'd done the right thing from the start.
11:45  ssbr: But you didn't do the right thing from the start, and now you have problems, and you have people telling you to do the right thing, and this is not a pleasant situation.
11:45  _habnabit: ssbr, xro is one of the handful of people who wanders into #python every now and then and asks the same question every time.
11:46  ssbr: "trolls"?
11:46  _habnabit: I uppose you could call them that.
11:46  bpc_: same error: "NameError: name 'yaml' is not defined.", but it doesn't complain about "import pyLocal.yaml" (I renamed the folder containing my local libraries).
11:47  bjarni: Hi everyone.  How can I get the working directory.  os.curdir just returns '.'  I want to be able to store the current dir, change it at the go back to the old one.
11:47  Alberth: os.getcwd()
11:47  _habnabit: bjarni, why do you want to change it?
11:47  ssbr: bpc_: well yeah.
11:48  xro: <_habnabit>, ot really... i receive code and i have to deal with.... I already discuss about twisted with lvh and i understood that is better.... But now i just can't recode it... So i ask for what is the best...
11:48  ssbr: bpc_: import foo.bar doesn't give you bar in the local scope
11:48  bpc_: oh hell.  I've screwed up something obvious, haven't i?
11:48  ssbr: bpc_: maybe you want "from pylocal import yaml"?
11:48  ssbr: (also give your package an all-lowercase name like a real person!)
11:49 --- aliva is now known as aliva-reading
11:49  bjarni: Thanks Alberth
11:49  _habnabit: xro, sounds like lvh already told you the best solution.
11:49  _habnabit: bjarni, changing the CWD usually means you're doing something wrong.
11:49  ssbr: aliva-reading: you know there's only so many name changes you can do before it gets sort of annoying
11:49  ssbr: _habnabit: you mean there's a valid use-case?
11:49  bjarni: I'm experimenting _habnatit.  Having problems with the filename encodings
11:49  _habnabit: bjarni, that's quite a non-sequitur.
11:49  xro: <_habnabit>, yes it was recode! and it was my mistake because i coded... Now i receive the code, so i can't recode...
11:50  _habnabit: ssbr, sure, chdir to /
11:50  aliva-reading: ssbr: sorry! (I found that comaand a few minutes ago ;) )
11:50  _habnabit: ssbr, since most things don't start with a cwd of /
11:50  bpc_: yup.  that did it.  I just screwed up basic package handling.  I'm so used to just doing "import yaml" at home, I'd forgotten to not be stupid.
11:50  ssbr: _habnabit: yyyyaaaaand?
11:50  ssbr: _habnabit: why would you do that?
11:50  _habnabit: bjarni, what does the CWD have to do with filesystem encodings?
11:51  _habnabit: ssbr, in daemons, it prevents a filesystem from becoming unmountable because the process's CWD is the only thing referring to the mount point.
11:52  Xaifas: can anyone tell me why when I add: import sys and sys.path.append('whatever path') and when i try to import a module from that path it doesn't work...
11:52  ssbr: _habnabit: ...what? if I read that correctly, that sounds like the worst API ever
11:52  _habnabit: Xaifas, why are you modifying sys.path at runtime?
11:53  Xaifas: well i've been googling for a way to modify the path and most of the answers said i should use that method
11:53  Xaifas: But I guess i could take better suggestions
11:53  _habnabit: Xaifas, modifying the path is usually always wrong.
11:53  _habnabit: Xaifas, why do you think you want to do that.
11:53  ssbr: With some things, mos tof the answers are wrong
11:53  Xaifas: well I don't know, all i want to do is import some modules from a directory that is not where python is installed
11:54  _habnabit: Xaifas, so why are they in that directory?
11:54  Xaifas: What do you mean
11:55  Xaifas: I just don't want to store modules in /usr/lib/python xxxx whatever
11:55  _habnabit: Xaifas, okay, so install them with the --user flag.
11:55  _habnabit: Xaifas, then you don't have to do any import path munging.
11:55  _habnabit: Xaifas, that wasn't so hard, was it?
11:56  Xaifas: actually it is since I have no idea what are you talking about, I'm new to this
11:56 * ssbr uses alternate --prefix <_<
11:56  _habnabit: Xaifas, when you run the setup.py file, do `python setup.py instlal --user`
11:56  _habnabit: install
12:00  bjarni: _habnabit: os.path.join was giving me errors.   Just wanted to bypass it to try something.
12:01  _habnabit: bjarni, I'm going to guess you're mixing non-ascii bytestrings and unicode strings.
12:01  _habnabit: bjarni, so, on't do that!
12:03  mstevens: This might be an overly specific question, but are there any python IDEs that will let me work with code on a remote server?
12:04  bjarni: I am - If you know another way to traverse a tree converting a mix of cp1252 and iso-8859-1 filenames into utf8 I'd be glad to hear
12:04  ssbr: bjarni: decode them
12:04  pk4r: Any examples/patterns where pickling 'some forms of Python code' would be useful ?
12:04  ssbr: (using the respective encoding)
12:04  _habnabit: bjarni, don't decode them at all; just use them all as bytes.
12:04  sedulous: mstevens: if you're on linux or mac, you can mount the remote server's file system with “sshfs”
12:04  verte: mstevens: emacs -server
12:05  sedulous: mstevens: … and use any IDE / Editor
12:05  ssbr: pk4r: you can't really pickle code
12:05  _habnabit: bjarni, or you're trying to fix that it's a mess?
12:05  verte: mstevens: eggy also has that feature and was designed around remote editing
12:05  mstevens: sedulous: hmm, it's an option, what I'm really hoping for is something that'll be smart enough to ssh onto the remote box to run the code
12:06  mstevens: sedulous: which I know is rather ambitious
12:06  bjarni: It's a mess allright.  I have the files in these codings and an db referring them in a different coding
12:06  mstevens: verte: eggy?
12:06  verte: a python editor
12:06  _habnabit: bjarni, so what are you trying to do.
12:06  pk4r: ssbr, I just accidentally found a line in official Python docs that you can.. citing.. 'amazing module that can take any Python object.. even some forms of Python code'
12:06  pk4r: so wondering where it might be useful
12:07  pk4r: if it's noted there i'm sure someone considered
12:07 * mstevens is playing with pydev
12:07  bjarni: I got the files rared from another system - I need to translate the names into utf8
12:08  verte: on pypy you can pickle entire programs and resume them on another machine, in a demo I saw
12:08  ssbr: pk4r: well, a list is a form of python code. sort of.
12:08  ssbr: you can pickle lists.
12:08  verte: not that it is a good idea
12:08  ssbr: verte: yeah, but pypy is craaaaaaaaaaaaaaaazy
12:08  pk4r: verte, now that's something interesting
12:08  ssbr: bjarni: so decode, and encode
12:08  verte: indeed
12:08  pk4r: ssbr, would be confusing, considering it was a "Python tutorial" for beginners.
12:09  ssbr: pk4r: ignore it, move on. it's a liar.
12:10  bjarni: ssbr: I'm trying
12:11  verte: and excepting?
12:12  ssbr: finally, a good joke.
12:12  _habnabit: Joke?
12:12  ssbr: what *else* would it be?
12:12  ssbr: (he shoots, he scooooooores)
12:13  _habnabit: Oh. It is a basketball metaphor.
12:13  ssbr: you're not good at this
12:13  pk4r: well, getting confused is not the worst way to learn IMHO although hurts a little
12:13  ssbr: _habnabit: for one thing, definitely hockey
12:14  ssbr: for another, that's not the important thing
12:14  mstevens: hmm pydev looks nice
12:15  shylent: it is kind of nice, yes
12:15  shylent: although I've yet to find a way to use virtualenv with it in a sane way
12:30 --- stever_ is now known as stever
12:32  Yosh64: Hi
12:34  Yosh64: I'm reading in a 256 length string into a buffer and then converting to string with struct.unpack. The problem is it treats the Null terminators 0x00 of the string as characters and I can't seem to remove them? tried using str.strip() and str.isspace() but they don't work :\
12:34  Yosh64: need to check if the string is empty...
12:35  Yosh64: umm
12:36  Yosh64: tried doing if str[0] == 0: but no go...
12:36  Yosh64: says that len(str) is 256...
12:36  mage_: hello, do someone has a solution to this problem http://www.pastie.org/1207409 ?
12:36  _habnabit: Yosh64, what does the string represent?
12:36  ssbr: you're converting a string to a string with struct.unpack?
12:36  Yosh64: a filename
12:36  _habnabit: Yosh64, and it's 256 characters, with a null terminator in it somewhere?
12:37  Yosh64: well most are far less than 256 characters, but according to len(str) they are all 256
12:37  Yosh64: it counts the null terminators...
12:37  Yhg1s: Yosh64: they're not terminators in Python.
12:37  Yosh64: ohh
12:38  Yhg1s: Yosh64: 's = s.split('\0', 1)[0]'
12:38  _habnabit: I'd just use the '256s' format string for struct.
12:39  Yosh64: Yhgls, will try that. Thanks
12:39  _habnabit: Since you get the symmetry for packing and unpacking.
12:39  Yhg1s: _habnabit: that won't terminate the string at the \x00 though.
12:40  _habnabit: Oh, what. I thought it did.
12:40  Yhg1s: it doesn't.
12:40  _habnabit: Dang.
12:41  mage_: no one for http://www.pastie.org/1207409 ?
12:41  Yosh64: Yhgls, worked :)
12:42  Yhg1s: mage_: nothing comes to mind, no.
12:42  Yhg1s: mage_: except bad solutions, or hardcoding the methods.
12:43  mage_: ok :(
12:43  Yosh64: Thanks, cyas
12:43  Xaifas: which module has the fileHandle function?
12:44  Yhg1s: Xaifas: there's no such function.
12:44  Yhg1s: unless, of course, you define it, in which case it's in whatever module you create.
12:45  Xaifas: then what do you use to write/read/etc files?
12:45  papna_: Xaifas: If you want to open a file, use `open`.
12:45  Yhg1s: Xaifas: the 'open' function and file objects. It's covered extensively in the tutorial.
12:45  dbu: mage_: use the type function to create classes on the fly, and just use a dict that is a combination of A,B,C's __dict__...
12:46  mage_: dbu: in the __new__ method of my class ?
12:46  dbu: no
12:46  Xaifas: Oky, i'll check that out
12:46  mage_: I'll take a look, thanks
12:49  dbu: mage_: something along the lines of http://paste.pocoo.org/show/272642/
12:49  papna_: mage_: This seems like a sort of unique interface and operation. What does the actual code do?
12:50  mage_: papna_: do you known SQLAlchemy a bit ?
12:50  papna_: Only a tiny bit.
12:51  mage_: I'm using inheritance, each mapped class has a custom Query. Now when I use BaseClass.query.with_polymorphic([A,C]), filtering methods present in A and C aren't available, so I can't use them
12:53  mage_: dbu: looks good :)
12:54  Yhg1s: mage_: and why can't the with_polymorphic method not visit each class and call the filtering method?
12:55  mage_: because the Query object is the one from the base class
12:55  mage_: sorry, it's a little difficult to explain if you don't know how SQLAlchemy works
12:55  jita: I want to make an accounting software in python (very basic one) using a standalone application. I have no idea where to start, couldn't find anything on google either, could anyone tell me where do i start looking for ?
12:56  Yhg1s: jita: well, what do you want it to do? where do you *want* to start?
12:56  jita: Yhg1s: i have to have basic functionality like invoicing, payroll, printing bills etc
12:56  Yhg1s: jita: well, if you want to write it yourself, you'll have to write all those things yourself.
12:58  jita: Yhg1s: yes, is there any article/tutorial on those things?
12:58  Yhg1s: jita: nothing comes to mind. Most programming tutorials cover basic concepts, not concrete applications.
12:58  Yhg1s: jita: and then there's all the local rules regarding how invoicing and payroll and printing bills has to be done, which is not related to programming at all.
13:00  Alberth: jita: perhaps 'program/software design' is what you are looking for?   http://en.wikipedia.org/wiki/Software_design
13:12  chessmaster: yo
13:12  chessmaster: tryin to understand a program here bros
13:12  chessmaster: http://paste.org/pastebin/view/23295
13:12  Trashlord: yo homie
13:12  chessmaster: yo lol
13:12  magcius: chessmaster, what?
13:12  Yhg1s: None of that, now.
13:13  magcius: chessmaster, what are you trying to understand?
13:13  chessmaster: well the first thing is freq = defaultdict(lambda: 0)
13:13  chessmaster: what does that do?
13:13  Yhg1s: it calls defaultdict, passing a useless lambda as argument.
13:13  chessmaster: and what does that mean?
13:13  Yhg1s: exactly what it says.
13:13  magcius: chessmaster, do you know what a dict is?
13:13  Yhg1s: there's no more meaning to that thing.
13:14  chessmaster: yea a dictionary
13:14  magcius: chessmaster, and what is that?
13:14  chessmaster: stores values called by keys
13:14  magcius: right
13:14  Yhg1s: chessmaster: do you knwo what a collections.defaultdict is?
13:14  chessmaster: no
13:14  Yhg1s: Then pick up the documentation of the collections module and look it up.
13:14  magcius: a defaultdict, if it sees you referencing a key, calls the lambda and sets it
13:14  magcius: so if I do defaultdict(lambda: "s")
13:14  magcius: and then do a = D["asdf"]
13:15  magcius: a will be "s"
13:15  kerio: is it stored afterwards?
13:15  Yhg1s: magcius: you forgot a rather important detail in your description.
13:15  magcius: Yhg1s, hm?
13:15  Yhg1s: the fact that it only calls the function for *missing* keys.
13:15  magcius: oh
13:15  magcius: I assumed he wasn't an idiot
13:16  magcius: chessmaster, http://docs.python.org/library/collections
13:16  kerio: that's a bold assumption, on the internet
13:16  chessmaster: i'm not an idiot
13:16  Trashlord: are you sure?
13:16  Yhg1s: magcius: describing something oddly can make anyone look like an idiot.
13:16  Yhg1s: I think we should have fewer ad hominems now.
13:17  magcius: Yhg1s, point taken
13:18  chessmaster: moving on
13:18  chessmaster: for letter in ciphertext:
13:18  chessmaster: is that like a foreach statement?
13:18  magcius: chessmaster, have you read a python tutorial
13:18  Yhg1s: chessmaster: that's a for statement. IT's covered in the tutorial. You should read it.
13:18  chessmaster: but is it like a foreach?
13:18  magcius: chessmaster, it's like a for. In python.
13:18  Yhg1s: depends on what a foreach is to you. Python doesn't have a foreach, just a for loop.
13:19  Yhg1s: Seriously, read a tutorial. This is just wasting everyone's time.
13:19  chessmaster: i have been using C# and C++ before now
13:19  kerio: chessmaster: docs.python.org
13:19  kerio: really
13:20  chessmaster: kerio, it didn't look like you guys were doing much before i came anyway so just relax
13:20  Xaifas: why does open().write sometimes overwrites the file context, sometimes it appends it sometimes it appends with some "leftover" that was in the file
13:20  Yhg1s: chessmaster: right.
13:20  Yhg1s: chessmaster: any more insults you want to throw our way?
13:20  Yhg1s: Xaifas: it depends on the second argument you pass it.
13:20  Kauhsa: why so angry :(
13:21  Xaifas: same argument every time
13:21  Xaifas: +r
13:21  chessmaster: just making an observation Yhg1s
13:21  Xaifas: runing the function 3 times gives 3 different results
13:21  Xaifas: r+ i mean
13:21  Yhg1s: Xaifas: that opens it for reading and writing, leaving existing content intact and setting the filepointer at the start of the file.
13:21  Xaifas: well it doesnt work that way
13:21  Yhg1s: Xaifas: files are streams of bytes, so writing to it overwrites the bytes that were in that position before. IF you write less than what was there before, the non-overwritten parts remain.
13:22  Xaifas: uhm
13:22  Yhg1s: Xaifas: and if you mix reads and writes, the filepointer moves forward, so you won't overwrite what you just read.
13:22  Yhg1s: Xaifas: I suggest not using 'r+' (or any other read-write mode) unless you know all the intricate details (for example: you shouldn't mix reads and writes at all without using file.seek inbetween. This is especially important on Windows.)
13:22  Xaifas: so if I want to append something to the file i need to read it first then write to not overwrite?
13:23  Yhg1s: Xaifas: if you want to just append something, open in 'a' mode.
13:23  Yhg1s: which is 'append'.
13:23  Xaifas: and if i want to overwrite some particular line what would be the way to go
13:24  Yhg1s: Xaifas: that's rather hard, because files are streams of bytes. You could overwrite directly if you knew exactly where the line started and were writing a line of the exact same length.
13:24  Yhg1s: Xaifas: but the usual way is to open a *new* file for writing, reading from the first file and writing to the second file, and change whatever you want to change between the read nad the write. Then, when you're done writing, close both files and rename the new file over the old one.
13:24 --- bradleyayers_ is now known as bradleyayers
13:24  chessmaster: My friend was banned from this channel and wants back on
13:25  Yhg1s: chessmaster: and who is this friend?
13:25  kerio: Yhg1s: atomic writes ftw
13:25  chessmaster: c0br42
13:25  chessmaster: he feels he was wronged
13:25  Yhg1s: he wasn't.
13:25  chessmaster: he thinks that he is
13:25  chessmaster: from elitter.net
13:25  sedzimir: hello, I'm having trouble installing distutils package with py3 with LC_ALL=POSIX, http://dpaste.com/254931/
13:25 --- ElizabethM is now known as init
13:26  sedzimir: all package files have coding declared and python executes them fine
13:26  sedzimir: in addition, distutils of py2 works fine
13:26  Yhg1s: chessmaster: he's out of luck. Learn from his mistake, be civil and follow the rules.
13:26  chessmaster: Yhg1s are you aware he has done nothing wrong?
13:26  Yhg1s: chessmaster: you are mistaken.
13:26  chessmaster: huh?
13:27  Yhg1s: chessmaster: you and he may think he has done nothing wrong, and that's fine for your own channel. He most assuredly behaved wrongly here.
13:27  chessmaster: a mistake? from me?
13:27  chessmaster: I fail to see what he has done wrong, i saw the irc logs
13:27  Yhg1s: chessmaster: then #python is not the channel for you.
13:27  jo-erlend: arrogance is a great way to gain sympathy. :)
13:28  chessmaster: jo-erlend,
13:28  chessmaster: i lold
13:28 * Yhg1s sigh.
13:28  Yhg1s: chessmaster: I suggest you don't make the same mistakes as your "friend".
13:29  chessmaster: gotcha ;)
13:29  Xaifas: Guess files is not really the method to go for what I want then, any other way you can recommend for saving strings for later use? need the ability to del/add more later on
13:29  jo-erlend: chessmaster, did you read the topic? It's the first few bytes.
13:29  chessmaster: jo-erlend i'm to lazy to read lol
13:29  chessmaster: whats it say lmfao?
13:29  Yhg1s: sedzimir: the problem is that Python doesn't use the source encoding when reading data from files. The install fails because one of the files distutils has to install contains non-ASCII data, but because of LC_ALL=POSIX, Python can only read files in ASCII.
13:30 --- ChanServ sets modes [#python +o Yhg1s]
13:30  jo-erlend: grand. That's why people gets banned. :)
13:30 --- Yhg1s sets modes [#python +b *!*altoid@174.124.245.*]
13:30 <-- Yhg1s has kicked chessmaster from #python (Bye!)
13:30 --- ChanServ sets modes [#python +o infobob]
13:30 --- infobob sets modes [#python +b $a:chessmaster]
13:30 --- infobob sets modes [#python -b *!*altoid@174.124.245.*]
13:30  Vorrin: XDD#
13:30  Alberth: Xaifas: you could look at json, or at ConfigParser
13:30 --- Yhg1s sets modes [#python -o Yhg1s]
13:31  Xaifas: Oky then, trying to find some info about that. Thanks
13:31  Yhg1s: sedzimir: you could file a bug (distutils should probably copy the files as bytes, not text, to avoid the problem) but it may already be worked on in distutils2.
13:31  Vorrin: so was the friend of that guy also banned for lolling and similar purely annoying expressions?
13:31  sedzimir: Yhg1s: ok, I'll report a bug then
13:31  Yhg1s: Xaifas: docs.python.org/lib has documentation for both of those.
13:32  Yhg1s: Vorrin: trolling and arguing, yes. it was rather worse than chessmaster got a chance to.
13:34  Alberth: Xaifas: the usual approach is to keep the data in memory until you are done modifying it, and use files really just as long term storage.
13:35  Vorrin: Yhg1s: I see, ah well, keeps the channel nice as it is I guess :)
13:35 --- infobob sets modes [#python -o infobob]
13:39  Xaifas: Figured I could use just 1 big line in a file, and use a delimitator to separate the data i want and later on split to get it maybe since Yhg1s said editing certain lines is not so easy
13:40  Yhg1s: Xaifas: using json is probably a lot easier. Put your data in a dict, dump it to a file with json.dump. Load it back into a dict with json.load.
13:40  Yhg1s: well, dict or list, depending on what you want.
13:40  epona:  if a > b==true:
13:40  epona: 	print ("lulz")
13:40  epona: ^fail
13:40  epona: on my part
13:40  Yhg1s: in a number of ways, in fact.
13:41  epona: fixed
13:41  epona: if a > b:
13:41  epona: 	print ("lulz")
13:41  kerio: indentation
13:41  Yhg1s: you should indent with 4 spaces, not tabs.
13:41  kerio: also, ("lulz") is exactly the same as "lulz"
13:42  Yhg1s: print is not a function in Python 2.x, so it doesn't take parentheses
13:42  Yhg1s: When calling a function, don't put a space between the function and the calling parentheses.
13:42  epona: alright
13:43  epona: I heard using 3.1 is bad, is this true?
13:43  Yhg1s: not at all.
13:43  Yhg1s: you just won't find as many third-party libraries to do things for you.
13:43  epona: im sure theyll catch up with the 2 year halt and all
13:43  frogger: hey room!
13:44  Yhg1s: epona: the change rate in 3.x isn't really the issue.
13:44  Yhg1s: the '2 year halt' is there for people to get used to the language, and for other implementations to catch up. it doesn't prevent porting.
13:44  Yhg1s: (or help it.)
13:45  frogger: is python as powerful as c++?
13:45  Yhg1s: frogger: yes, no, maybe. it depends on what you call power.
13:45  frogger: i call power being able to do more
13:45  kerio: they're both turing-complete, if that's what you're asking
13:45  vagvaf: as poweful as a strong pony
13:45  frogger: kerio: it isn't
13:45  Yhg1s: frogger: C++ can do a few things more, but Python makes it a lot easier to do things.
13:45  Yhg1s: so you rarely notice.
13:46  frogger: so i should stick with c++?
13:46  Yhg1s: frogger: for what?
13:46  frogger: beginners language
13:46  Yhg1s: no, C++ is a horrible beginner's language.
13:46  frogger: omg, i've been learning it for almost 2 years now :o
13:46  Yhg1s: but there's no need to be monolanguous. You can learn as many programming languages as you want (and it's good to know more than one.)
13:47  frogger: did i waste my time?
13:47  Yhg1s: if you still consider yourself a beginner, then maybe.
13:47  Yhg1s: I don't know how happy *you* are with C++.
13:47  kerio: heh
13:47  frogger: whats a beginner considered Yhg1s
13:47  Yhg1s: I don't know, you brought it up.
13:47  frogger: hmm
13:48  frogger: i can make a program that tells the date and time
13:48  Yhg1s: Do you feel comfortable buildign large, complex applications in C++ now?
13:48  frogger: no
13:48  zatan: :)
13:48 --- aidan_ is now known as aidan
13:48  Yhg1s: then I daresay you would've been farther along if you'd taken up Python instead of C++.
13:48  frogger: :o
13:48  Yhg1s: but languages are a personal choice, so it's hard to say.
13:48  aidan: I know I should go to hell for this ... but what sort of neat python construct can I use for this: http://dpaste.com/254949/ ... it's a DAG (not a tree)
13:49  newteh: i tried starting with c++, failed, then moved to python (and now back to c++ really)... python helped a lot though
13:49  Alberth: aidan: a recursive function
13:49  Yhg1s: sure, learning C++ is a lot easier if you have the basic concepts down, and getting the basic concepts down is a lot easier in Python.
13:50  epona: what are the basic concepts?
13:50  frogger: epona: programming logic and design
13:50  Vertel: epona: Primarily, the ability to think about program flow and structure.
13:50  frogger: duh
13:50  Vertel: Or what he said.
13:50  Yhg1s: epona: programming logic, data design, object oriented programming
13:51  epona: im loving all these helpful answers ^.^
13:53  aidan: Alberth: is that the best way?
13:53  aidan: Alberth: I was thinking of a recursive iterator?
13:54  Alberth: aidan: no idea what a recursive iterator is
13:54  Alberth: aidan: but it sounds exciting :)
13:54  frogger: some languages are not object oriented Yhg1s, so perhaps cannot be considered basic
13:54  Alberth: frogger: OO programming can also be done in a non-OO language (with some effort)
13:55  Yhg1s: frogger: it's a basic concept of C++ and Python both.
13:55  frogger: true
13:55  Yhg1s: it's also a way of thinking about data and program logic, so it applies to many languages that don't directly deal with "objects" as such.
13:55  frogger: very true
13:55  Vertel: Procedural programming can also be done in most OO languages. Having a strong grounding in OO helps quite a bit though, even if it's not strictly necessary to programming in general.
13:55  frogger: the reason for c++ is oop actually
13:56  newteh: most "c++ beginners" are prolly just mostly coding in object-oriented C
13:56  frogger: i know i did when i first started newteh
13:56  |Bolt|: Hi. Will you help me, please. Can I retrieve my password by win32?
13:57  jorrit: |Bolt|, how is that related to python?
13:57  |Bolt|: I take my domain user.
13:57  kerio: the hardest thing in OOP is figuring out when not to use it
13:57  frogger: |Bolt|, wants to perform illegal activities probably >.>
13:58  |Bolt|: I want to write a pgm to connect to proxy by my account
13:58  newteh: every programmer should know a scripting language btw frogger :o perl/python/etc (choose python!)
13:58  epona: what are you banned from |Bolt|
13:58  Vertel: kerio: Nah. The hardest thing is figuring out how to use it properly. *Still has painful memories of his first forays into OO, where he stick everything in a single hold-all class because Objects Were Cool*
13:58  w4r: newteh: I chose python for sysadmin
13:59  kerio: heh
13:59  Alberth: |Bolt|: Python only provides what the underlying OS makes accessible, so it is possible, if your Windows allows it
13:59  frogger: |Bolt| == troll
13:59  w4r: ^
13:59  |Bolt|: no , no illegal
13:59  Alberth: kerio: using Java fixes that problem :p
13:59  kerio: Alberth: that's not a fix :(
14:00  kerio: (why do i have to keep unrelated functions all togheter in a class, btw?)
14:00  |Bolt|: I try write that in python
14:00  w4r: what's your native language |bolt|
14:00  Alberth: kerio: beats me, just as why I cannot have more than one class in a java file.
14:00  |Bolt|: ru
14:00  epona: can I do all the things a linux sys admin can do in python with import.os? or should I just keep learning bash commands
14:00  aidan: Alberth: maybe a generator, do you know about these?
14:01  w4r: you can yea
14:01  frogger: epona keep learning unix commands
14:01  epona: frogger, thx :)
14:01  frogger: not "bash" commands which indicate only one "shell"
14:01  Vertel: Clarification. |Bolt| seems to be asking if Python can use the in-built Windows Authentication system to log on to a proxy (i.e. if user is logged in use existing credentials to authenticate against the server). Correct?
14:01  frogger: and they are called programs
14:01  w4r: epona: learn both. But I prefer python over bash. you can still work with stdin anywho.
14:01  frogger: utilities
14:01  |Bolt|: yes
14:02  christopher22: hello I'm using the default Django User model.. for creating a ModelForm.. when using this inside the template.. it also shows up the help_text given in the models.py from django.contrib.auth.models.. is their some way of using {{ form.as_ul }} without getting the help_text?
14:03  newteh: #django or something similar might be a better place to ask :p
14:03  christopher22: ohw sorry your right.. i'm so used to going to the #python channel;
14:03  christopher22: my bad
14:04  vbgunz: Komodo Edit 6  is officially out. Personally, I am happy as hell it finally has a real file manager this time
14:04  |Bolt|: will you help what function from modules win32 I can use to take my pass, that I was entered, then to create ProxyHandler.
14:06  Vertel: Integrated Windows Authentication doesn't use your password; it just checks your credentials against the server. I'm looking to see if there are any Python modules that support it out of the box.
14:06  Habbie: the wmi module (and thus, win32com) have no trouble doing calls to other machines in your domain, is what i know
14:07  Vertel: I'm not entirely sure what I should be Googling for here, unfortunately.
14:07  |Bolt|: print "I am", win32api.GetUserNameEx (win32con.NameSamCompatible)
14:07  |Bolt|: This print my domain account.
14:07  Habbie: |Bolt|, can you describe in one sentence what you are trying to achieve?
14:07  Vertel: Habbie: From what I gather, this. http://en.wikipedia.org/wiki/Integrated_Windows_Authentication
14:07  Habbie: that's not one sentence
14:08  Vertel: Could be wrong on that though.
14:08  |Bolt|: to create ProxyHandler
14:14  Xaifas: Why when I check if a key is in a dictionary and it fails gives error rather then not execute the statement and carry on, something like: if (dic['key']) : statement
14:15  Yhg1s: Xaifas: that doesn't check if the key is in the dictionary.
14:15  Yhg1s: Xaifas: that gets the 'key' item and checks if it's true or false (in boolean context.)
14:15  Yhg1s: if you want to check if the key is in the dict, use 'if 'key' in dic:'
14:16  Xaifas: I see, thanks
14:17  aidan: Can anyone help me write a generator?
14:18  Yhg1s: aidan: sure. what do you need help with?
14:18  |Bolt|: I have my domain account - the call is clear. I need to take pass of my connected account.
14:18  |Bolt|: pass = win32*.<win32_api_func>(<parms>, ....)
14:18  |Bolt|: <win32_api_func> - ???
14:18  Xaifas: Yhg1s,  and if you want to check the other way around? If it isnt
14:18  Xaifas: !in ?
14:18  Yhg1s: Xaifas: 'if 'key' not in dic:'
14:19  Yhg1s: Xaifas: 'not' is covered in the tutorial.
14:19  Xaifas: Learning from tutorials is bad. I like the, try and do something useful approach  and learn on the way
14:20  Yhg1s: Xaifas: no, learning from tutorials is extremely useful, because it tells you these things that you're now asking here *without* having you waste effort on trying the wrong thing first, and without wasting other people's time.
14:20  Yhg1s: Xaifas: if you keep asking things that are clearly explained in the tutorial, eventually people will stop answering.
14:21  Xaifas: Don't get me wrong, I do read, but I only read about the functions that i need/sintaxes etc. Like hmm I want to do that, and ask what function does it, then i search for it and read about it
14:22  Yhg1s: yeah, don't do that. You're missing all kinds of specific syntax. Read docs.python.org/tut. It's short. You can go back to googling for functions after you've read it.
14:27  magcius: epona, oh hai
14:28  epona: hey :)
14:28  epona: how are you?
14:29  magcius: epona, good
14:30  epona: thats good. what kind of things are you up to today?
14:31  Alberth: aidan: http://codepad.org/RVs7OczZ
14:33  aidan: This is what I have so far: http://codepad.org/sm98pteY
14:34  aidan: I'm just not sure how to handle the recursiveness in a generator
14:34  magcius: epona, working on verizon stuff. Trying to get IE.
14:34  magcius: IE to work.
14:34  Alberth: aidan: I don't know either, hence I suggested a recursive function
14:35  magcius: hm
14:35  Yhg1s: aidan: recursion in a generator is simply done with 'def my_generator(..): ... yield something; ... for item in my_generator(...): yield item'
14:35  aidan: oh
14:35  aidan: that's neat
14:35  epona: on what environment?
14:35  magcius: codepad isn't responding for me
14:35  magcius: epona, win7
14:36  epona: internet explorer?
14:36  Alberth: epona: magcius: wouldn't it be useful to move this converstion to a private connection, or to #python-offtopic?
14:36  magcius: Alberth, yes, I know
14:36  epona: apologize
14:37  magcius: Alberth, not high-traffic right now, but ok
14:37  Yhg1s: it's really not about traffic.
14:55  aidan: Yhg1s: http://dpaste.com/254978/
14:55  aidan: I'm struggling
14:56  Yhg1s: aidan: what with?
14:56  Yhg1s: aidan: I see no recursion there, unless term.child_nodes.all() somehow calls term_generator.
14:56  Yhg1s: if you want recursion, your generator has to call itself.
14:56  aidan: my generator doesn't return anything
14:56  aidan: so I'm not sure how to loop its results
14:56  Yhg1s: how do you call it?
14:56  aidan: ah well it yields, I guess that's the same as returning
14:56  Yhg1s: no, it's different.
14:57  Yhg1s: a generator function, when called, returns a generator. you iterate over the generator to consume it.
14:57  aidan: ah
14:58  frogger: hey, wondering about easygui. i put the easygui.py in my lib file, but when i try to use a function like msgbox('hi') it says "name 'msgbox' is not defined"
14:58  perplexa: hahaha
14:58  perplexa: i just thought, who the heck is easy guy
14:58  perplexa: :)
14:58  Yhg1s: frogger: when you import a module, it only introduces the module into the local namespace.
14:59  perplexa: didn't read properly
14:59  Yhg1s: frogger: you probably want 'easygui.msgbox('hi')'
14:59  frogger: okay
14:59  frogger: thanks
14:59  frogger: thats all i need to know
15:00  frogger: yep sure enough that worked Yhg1s
15:01  aidan: Yhg1s: okay, so something like: http://dpaste.com/254983/
15:01  Yhg1s: aidan: that seems a little silly.
15:01  aidan: it does
15:01  aidan: it appears to print the whole tree though
15:02  Yhg1s: aidan: how about 'for child in term_generator(term.child_nodes.all()): yield child'?
15:02  aidan: because child_nodes.all() doesn't return Terms, it returns TermNodes
15:02  Yhg1s: aidan: so change your generator to take TermNodes.
15:05  aidan: but it returns what it takes, right?
15:05  aidan: if it takes TermNodes then it yields TermNodes
15:06  darmou: hi all, I'm trying to find a module called setup path so the import is 'import setup_path' does anyone know where I can find/install it?
15:06  Alberth: google
15:07  Yhg1s: aidan: if that's what you make it do, sure.
15:07  Yhg1s: darmou: there's nothing canonical called that.
15:07  Yhg1s: darmou: what is trying to import it?
15:07  aidan: how can it return one thing to the generator, but yield another thing?
15:08  Yhg1s: aidan: I'm not sure what you're asking. The code does exactly what you tell it. If you want it to yield something different, yield something different.
15:08  darmou: I've inherited a private codebase called RePlayer, does that mean it's not a public library?
15:08  Yhg1s: darmou: it probably means this module is part of that codebase.
15:08  helo: what do you mean by "take"?
15:09  aidan: Yhg1s: no, the function iterates what was last yielded, you're saying it should iterate termNodes, I need it to yield terms though.
15:09  Yhg1s: aidan: no, I'm saying the *inner* generator should yield termnodes.
15:10  Yhg1s: aidan: I'm also saying that a generator that takes termnodes can yield the terms the nodes refer to.
15:10  aidan: Yhg1s: interesting
15:13  CcxCZ: hi, can anyone help me with logging dictConfig? I use this dict http://paste.pocoo.org/show/272668/ and I get no logging :-/
15:13  herbmonk: can I use x = len(list) and then list[x:x) to slice a list?
15:13  Yhg1s: herbmonk: you could, but it wouldn't do anything. it'd just give you an empty list.
15:13  aidan: well, it's working ... I see why it's stupid though. http://dpaste.com/254988/
15:14  Habbie: herbmonk, you can't use ) to close a [
15:14  herbmonk: its not possible it use variables to slice lists?  Habbie I saw that error after I wrote the question
15:14  herbmonk: sorries
15:14  Yhg1s: herbmonk: sure.
15:15  Yhg1s: herbmonk: but you're slicing the list from one past the last element to one past the last element, which will always give you an empty slice.
15:15  herbmonk: Yhgls: I'v been trying to append a second list to the end of my first list
15:15  Yhg1s: herbmonk: 'l.extend(l2)'
15:16  herbmonk: k thanks Yhgls
15:16  herbmonk: and thankyou Habbie
15:16 * herbmonk grumbles at his own typos
15:17 --- deximer_ is now known as deximer
15:19  mage_: is there a method like __dict__, but to have only the defined functions ?
15:19  mage_: I mean without the __...__ methods
15:19  Yhg1s: mage_: nope.
15:19  Yhg1s: mage_: they're all defined functions.
15:20  mage_: ok :)
15:21  mage_: dbu: your type() solution works great
15:21  CcxCZ: mage_: I'm not sure what you're doing, but 'inspect' module might help
15:21  CcxCZ: :-)
15:21  mage_: I'll take a look
15:21  aidan: Yhg1s: I'm going around in circles here ... could you give me another hint?
15:21  Yhg1s: aidan: what with? you said you already had it.
15:22  aidan: Yhg1s: no, I hacked out something that works, but I want to do it properly
15:23  Xaifas: if i use pickle.dump() to save some object which has less size then the same object saved before in the same file is there a risk to get "remains" from the old file? Because of the open write mode im thinking
15:23  ronny: Xaifas: open in write mode truncates the file unless you tell it not to
15:24  fragfutter: using distutils, can is somehow specify that a script is to be installed under a different name? setup(scripts={"foobar.bin": "foobar"}
15:24  Xaifas: Oky then, thanks
15:25  darmou: Yhg1s: it's not in the code base and I notice setup_path is in other things such as http://pyglet.googlecode.com/svn/trunk/experimental/mt_media/test_video.py
15:27  Alberth: fragfutter: if it is, it should be explained in the distutils documentation
15:27  Alberth: darmou: it is not a known package and it is not in the standard library. You know as much about the file as we do
15:28  Yhg1s: aidan: well, I would probably make a separate generator for termnodes rather than terms, but you can do what you want just as easily by changing lines 14-15 to 'for child in term_generator((node.child for node in term.child_nodes.all()), depth+1)'
15:29  Yhg1s: darmou: setup_path *is* part of that package. Go up one directory and you'll see it. That doesn't mean it's the same as *your* setup_path.py. This is just a utility module for that mt_media package
15:29  Yhg1s: outside of mt_media it would be 'mt_media.setup_path', not 'setup_path'.
15:39  aidan: Yhg1s: neat, thanks
15:50  _jam: anyone know of a python list-like class with efficient sorted 'appends' (I guess inserts), but also stores itself to disk instead of memory?
15:51  _jam: I'm needing to sort 2 20GB text files into one another in a particular manner
15:52  jpanest: _jam: got 40gb of memory laying around?
15:52  _jam: no
15:52  moreati: _jam: semi seriously, sqlite?
15:53  _jam: no
15:53  _jam: sql and the volume of data do not get along
15:53  rdpate: _jam: are the two individual files sorted?
15:53  _jam: no
15:54  _jam: that would be easy :D
15:54  rdpate: _jam: you just need to break the data into something you can sort, then take each broken piece and merge them
15:54  rdpate: how big is each record/object?
15:54  _jam: each "row" . . . not very big, probably like 60 characters
15:55  Yhg1s: _jam: is there any pattern to the data? Any partial sorting?
15:55  _jam: Yhg1s: none that I can detect
15:55  Yhg1s: and you need the rows as flat strings, no particular patterns there either?
15:55  _jam: you mean, as in their current state in the file
15:56  _jam: no, I need to break the rows up into tuples and sort based on 3 columns
15:56 --- jtrucks_ is now known as jtrucks
15:56  Yhg1s: Nothing sensible comes to mind then.
15:56  chrisbeebops: split the data up into manageable blocks, sort each block, then merge each block back together
15:57  jpanest: _jam: merge sort
15:57  _jam: yea, ok
15:57  Yhg1s: (in the list-like solution you're looking for, that is.)
15:57  _jam: well, the file split solution isn't absolutely insane
15:58  _jam: what I really want to do is apply my streaming hadoop algo to the data, unfortunately, the admin has the local hadoop tmp dir on a 10 GB partition, so that is a no go
15:58  lazzurs: Hello, I am trying to make some calls in python to a C lib and I am converting the current C++ example to python and having issues passing one of the arguments to one of the calls, here is what I have currently http://fpaste.org/JqZD/
15:58  _jam: and the cluster times out after 30 minutes of idleness, and it takes over an hour to load the data
15:58  lazzurs: have I done the wrong thing to convert the data that is then passed to the call?
15:58  Yhg1s: lazzurs: and what is CmdBuf in the C++ version?
15:59  lazzurs: Yhg1s: char * pointer to a buffer
16:00  Yhg1s: lazzurs: then EOT, STX and ESC are constants for specific bytes. You need to find out which they are, and include those in your string.
16:00  Yhg1s: lazzurs: they're not the string "EOT", "STX" and "ESC", and there's no spaces between the characters.
16:00  Yhg1s: lazzurs: perhaps you want to use Cython instead, which makes that kind of thing much easier.
16:00  lazzurs: cython? and thanks :) silly me
16:00  paranoia092_: hello I recently built Python 3.1 on Ubuntu 9.04 but when I try to use the tkinter library, python cannot seem to find it.
16:00  Yhg1s: paranoia092_: did you build tkinter?
16:01  lazzurs: Yhg1s: heh yep just noticed they are defined at the top, damn
16:01  paranoia092_: Yhg1s: i have just started using this (was using it on windows before
16:01  paranoia092_: so m not really experienced with building packages
16:02  Yhg1s: paranoia092_: well, if you build Python yourself, you have to be careful about what dependencies are installed. It's not an easy process. When you built Python 3.1, did it build Tkinter? Did it say anything was missing?
16:02  Yhg1s: I would suggest not building Python yourself. Get a prebuilt binary instead.
16:02  paranoia092_: I couldnt find one for 3.1.2
16:03  paranoia092_: Yhg1s: And the 2.6.2 that came preinstalled gives the same problem
16:03  janislaw: hello
16:03  Yhg1s: paranoia092_: did you install the python-tk package?
16:04  janislaw: I want to visualize tens of thousands of x-y plots on one figure, so as to print it afterwards
16:04  paranoia092_: Yhg1s: Not separately.. I just downloaded the source from the website and the used make
16:04  Yhg1s: paranoia092_: well, don't do that, unless you know what you're doing.
16:04  janislaw: the most straightforward approach tells to use matplotlib, plot the lines, then savefig
16:04  Yhg1s: paranoia092_: You said the preinstalled python2.6 didn't have tkinter. Did you install the python-tk ubuntu package as well? That's what contains tkinter.
16:04  Yhg1s: paranoia092_: 'apt-get install python-tk'
16:04  janislaw: this is ok, but consumes lots of memory
16:05  janislaw: if I want to extend the number of plots or increase detail, I fill my RAM
16:05  CcxCZ: I want to licence my module under PSF licence. Is that good idea? Which text should I use for the licence?
16:06  paranoia092_: Yhg1s: is this package supposed to work for 3.1.2 also?
16:06  janislaw: question is, what to use to 1. be as simple as matplotlib 2. not accumulate all the lines in memory before drawing to image
16:07  paranoia092_: Yhg1s: Ok, wait.. i am supposed to install Tk separately right?
16:10  paranoia092_: Yhg1s: Thanks
16:10  Alberth: janislaw: do you get a useful result if you try less plots? 10000 plots in one figure seems like a lot of lines
16:11  Alberth: if less plots are not useful already, there is no point in trying to plot all of them
16:13  janislaw: the answer is "andrews curves"
16:14  janislaw: sorry guys, a chainsaw suddenly started in the hall
16:14  janislaw: finishing work for today
16:14  lazzurs: Yhg1s: would this be correct? http://fpaste.org/sssz/
16:15  magcius: lazzurs, no
16:15  magcius: lazzurs, you would want '\x03\x2110\x1b'
16:16  lazzurs: magcius: ahhh, that makes more sense as that is how it is returning the hex, thanks, sorry for being dumb
16:17  magcius: lazzurs, by the way, those are just standard ASCII control chars
16:18  paranoia092_: Yhg1s:Python 3.1.2 still cant find the module
16:19  Herald: hi all, I'm having trouble implementing a context manager (not done this before), any suggestions would be helpful: http://pastie.org/1207730
16:24  TFKyle: Herald: iirc with ... as foo uses the object returned by __enter__, so you have to return self
16:25  Herald: TFKyle: beautiful, did the trick, thanks :)
16:28  lazzurs: magcius: this will teach me to try and convert c into python after 3 hours sleep....thanks again for the help :)
16:30 * helo declares this weekend "Go back through the python tut to learn what has changed since 2.4" Weekend!
16:30  helo: the only question is whether go through the 2.6 tut or 3.0 tut...
16:30  StefanYohansson: anyone know how I can monitor a USB device, to whether or not it is connected by PyUSB ... is how?the pyysb documentation has an example with usb.core module and a function called find (VendorID, ProductID), but when you try to import it ... has no "core" in module "usb",  the python version is 2.6.4 and version pyUSB 1.6;
16:30  StefanYohansson: :\
16:30  epona: helo, source for those?
16:35  helo: epona: oh, i guess 2.7... http://docs.python.org/tut or http://docs.python.org/release/3.0.1/tutorial/ resp
16:36  helo: epona: i still need to finish twilight princess... thanks for the reminder ;)
16:37  epona: me too :)
16:37  epona: I gtg, ttyl!
16:37  Yhg1s: StefanYohansson: how are you importing it? What does 'import usb; print usb.__file__' print?
16:38  fariseo: anyway in hell i could easy_install pycurl on python2.6 on win7?
16:38  StefanYohansson: Yhgls: /usr/lib/pymodules/python2.6/usb.so
16:39  fariseo: please check CURL_DIR in setup.py < what to do there?
16:39  Yhg1s: StefanYohansson: and how are you importing it?
16:39  Yhg1s: fariseo: open setup.py for reading and see where it mentiosn CURL_DIR.
16:39  Yhg1s: fariseo: or, don't bother with pycurl, and just use urllib/urllib2 or twisted.
16:39  StefanYohansson: i use 'import usb' only
16:39  Yhg1s: (or twill, or mechanize)
16:40  StefanYohansson: but i need a function or a method that monitor an usb device :\ it's possible?
16:40  fariseo: i dont like urllib2
16:41  Yhg1s: StefanYohansson: which version of PyUSB did you install?
16:42  StefanYohansson: Yhgls: i want to use the script in win (my work) with the pyusb 1.6, but here (my house) i install from the ubuntu repository, i don't know the version that I installed here. ):
16:42  Yhg1s: there is no pyusb 1.6, just 0.x and 1.0.
16:42  StefanYohansson: let's me see the version
16:42  StefanYohansson: pyusb-0.4.3.win32-py2.6
16:43  StefanYohansson: really, is 0.4.3
16:43  fission6: looking for some help trying to create a small print_suite() helper method to print out all TestCases in a TestSuite, http://dpaste.org/gayK/  my recurision is wrong, I think it has something to do with master_suite loosing its value when it recurses. A review would be great.
16:43  Yhg1s: StefanYohansson: a win32 version from an Ubuntu repository? How quaint.
16:43  Yhg1s: StefanYohansson: but make sure you read the documentation for 0.x then.
16:44  StefanYohansson: Yhgls: No, this win version is installed in my work, there is windows;
16:44  Yhg1s: fission6: master_suite doesn't "lose its value". master_suite is the argument that is passed into the function.
16:45  fission6: right but something weird is happening because the orginal call never gets to "continue" iterating through the original master_suite
16:45  Yhg1s: fission6: apparently, what you're passing to print_suite as master_suite the first time only contains TestCases, not TestSuites.
16:45  Yhg1s: fission6: I see no evidence of that from your snippet. you'll have to show how you're using it, as well as the output that generates.
16:45  fission6: i included the master_suite in the paste bin
16:46  fission6: master_suite doesn't continue to iterate when the recursion comes back to the orginal call
16:48  Yhg1s: fission6: you are mistaken.
16:48  Yhg1s: fission6: that's not how recursion works.
16:48  Yhg1s: fission6: I can't tell what you're actually doing. Please show the code that *calls* print_suite().
16:49  StefanYohansson: Yhgls: thanks, man
16:50  fission6: Yhg1s: http://dpaste.org/B6m4/
16:51  trhaynes: I'm looking for a high-level sound library that will create sound files for (say) a piano C scale. Similar to Mathematica's sound capabilities, if anyone has used that.
16:52  Yhg1s: fission6: what if you remove line 22?
16:54  fission6: wow i am idiot
16:54  fission6: hahah
16:54  fission6: that makes things work a lot better, wow i need some coffee
16:54  fission6: any other recommendations for that print_suite method, some people tend to put try blocks around isinstance?
16:56  Yhg1s: fission6: I'm not sur what these 'some people' think that would accomplish.
16:57  fission6: what my print suite method?
16:58  Yhg1s: no, a try/except around isinstance.
17:00  yak: hi everyone
17:00  yak: when subclassing in C, do I have to call tp_traverse/tp_call of tp_base myself in my traversal/clearing functions?
17:03  Habbie: trhaynes, look at pygame
17:06  TheCommieDuck: Is there any kind of flash plugin or module to play flash in a python program?
17:07  gilaniali: are there any propriety commercial programs written in python or is it only used for in house development or open source software
17:07  Habbie: gilaniali, yes
17:07  gilaniali: Habbie: can you name a few
17:07  moreati: TheCommieDuck: define 'in' emebedded in a wx/gtk window? or just here's a .flv open a window that plays it
17:08  Habbie: gilaniali, python.org names a few
17:08  TheCommieDuck: http://en.wikipedia.org/wiki/List_of_Python_software#Commercial_uses Came up.
17:08  TheCommieDuck: moreati, sorry, yes.
17:08  TheCommieDuck: (The first one) :P
17:09  flopchi: hi.  Can someone please help me translate a snippet of PHP crypto code into Python?
17:09  moreati: TheCommieDuck: embedded in a wxWidgets app?
17:09  flopchi: it's here:  http://dpaste.org/Fske/
17:10  m0no: any recommended libs for sftp?
17:10  TheCommieDuck: moreati: It's actually PyQt, but I'm open to anything.
--- Log closed Sat Oct 09 11:57:30 2010
