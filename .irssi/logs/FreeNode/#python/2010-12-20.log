--- Log opened Mon Dec 20 00:00:08 2010
00:00 --- Users 674 nicks [0 ops, 0 halfops, 0 voices, 674 normal]
00:00  bobng: rotzak: thats a valid use for "is" imo.
00:00  _habnabit: bobng, not in python.
00:00  papna: rotzak: I'm not understanding what you're doing.
00:00  rotzak: hmm
00:00  rotzak: let me simplify it
00:00  bobng: well surely it is, else it would not even run?
00:00  papna: rotzak: I suspect you have heterogenous data you should replace with homogenous data, or mark in some other way.
00:00  bob2: bobng: lots of ridiculous code is runnable ;)
00:00  _habnabit: bobng, no.
00:00  _habnabit: bobng, it just doesn't do what you think it does.
00:00  papna: rotzak: The operation you're looking for is spelled "if isinstance(val, Model)", but that is indicative of suboptimal Python design 97% of the time.
00:00  bobng: oh yeah, I know it won't work
00:01  bobng: but its still a valid use. He needs to use isinstance I think
00:01  _habnabit: Nah.
00:02 --- Channel #python was synced in 146 seconds
00:02  bobng: well then how? I'm guessing he wants to test if val is an instance of the Model class
00:02  rotzak: papna: I see
00:04  linelevel: Hi, given an object `obj` and a string `propname` containing the name of a property `prop` in obj, how can I get obj.prop?  That is, I want to do something like   obj[propname], but that syntax doesn't work for properties.
00:04  bob2: getattr
00:04  bob2: but why were you given a string?
00:05  linelevel: bob2:  __getattr__ ...great! thanks.
00:06  bobng: no, getattr()
00:06  bob2: linelevel: no
00:06  bob2: linelevel: getattr
00:06  bob2: linelevel: but why did you get passed a string instead of the attribute itself?
00:07  _habnabit: linelevel, __getattr__ doesn't do what you want.
00:08  linelevel: bob2: I'm using Django's templating language, which allows very limited syntax, so I wrote a custom filter for template author's to use to take a sequence and a string and map   getattr(elem, propname) over the seq
00:08  bob2: heh django
00:08  linelevel: s/author's/authors/
00:08  bob2: ok
00:09  linelevel: heh @ django, eh?
00:09  kerio: why can't i mix return and yield :(
00:10  biertie: anyone here experience with dbus? I want to know if it's possible to let a change in dbus trigger my deamon from sleep to wake :]
00:11  _habnabit: kerio, what would it /mean/ ?
00:12  kerio: _habnabit: return a value or return the iterator as soon as you hit the first yield
00:12  _habnabit: kerio, so what happens if you return a value after you hit the first yield?
00:12  kerio: error
00:12  kerio: or implicit yield value; return
00:13  kerio: but the first is probably better
00:13  bob2: biertie: what does sleep mean to you?
00:14  biertie: bob2: I'm building a program that needs to run every 10 minutes, unless there is another change
00:14  bob2: cool
00:15  bob2: well just wait for dbus to  contact you then
00:15  bob2: and don't busy wait
00:17  Jerub: _habnabit: i thought that was a parse error.
00:17  Jerub: oh right. yep.
00:18  kerio: _habnabit: why doesn't that... make sense?
00:18  Jerub: kerio: two things are spelled with 'def'. function, and generator. this is unfortunate and slightly sily
00:18  _habnabit: kerio, seems a little inconsistent that you could return an iterable or a non-iterabl.e
00:19  Jerub: kerio: you're thinking that only one thing is spelled with 'def' and you can use 'yield' and 'return' in them as you wish. this isn't the case. a side effect of using 'yield' is to change the def from beinga function into being a generator.
00:19  kerio: _habnabit: this is __getitem__
00:19  kerio: Jerub: i know, i understand that
00:19  Jerub: kerio: this is a python wart, and it's causing your confusion.
00:19  kerio: but it doesn't *have* to be like that
00:19  Jerub: sure, we could make the situation worse, but why?
00:20  kerio: Jerub: because i want my class to look pretty :(
00:20  Jerub: it's already silly and stupid, why make it worse?
00:20  Jerub: do you hate python that much that you want to damage it more?
--- Log closed Mon Dec 20 00:25:15 2010
--- Log opened Mon Dec 20 00:30:41 2010
00:30 --- Users 670 nicks [0 ops, 0 halfops, 0 voices, 670 normal]
00:30  kerio: bob2: what euler expects and what you do are two different things
00:30  kerio: who is he to judge you?
00:30  bob2: thx
00:31  bobng: if you can't solve that one by yourself marel good luck on the harder ones :D
00:31  kerio: i think i took the lazy way out for that one
00:31  kerio: but yeah, if i had to do it in, say, C, i would've used math
00:32 --- Channel #python was synced in 138 seconds
00:33  bobng: kerio: out of interest how would you do it in C?
00:34  gorakhargosh: lvh: What is t.web?
00:34  Taos: how does eval help with second order programming
00:34  kerio: bobng: the same as i wrote before
00:34  kerio: the math version
00:35  lvh: gorakhargosh: t = twisted
00:35  gorakhargosh: lvh: ah
00:36  kerio: #include <stdio.h>; def main() {long n=817587572; int s=0; while (n) {s += n % 10; n /= 10}; printf("%d", s); }
00:36  kerio: hmm, C is way more irc-friendly
00:38  derdon: pretty printing of HTML documents. neither lxml nor beautifulsoup
00:38  derdon: any ideas?
00:38  derdon: beautifulsoup does not accept an indentation level
00:38  kerio: derdon: something interfaced with gecko?
00:38  derdon: lxmlis horrible to be installed
00:38  kerio: oh, that kind of printing
00:39  derdon: kerio: yes, that kind
00:39  gorakhargosh: kerio: def main()? Python is getting to you. =P
00:40  kerio: gorakhargosh: ugh
00:40  kerio: yeah, i hate python when i'm forced to use C
00:40  PKKid: I cannot for the life of me get setup.py to install my data_files
00:42  mrec: hi, does anyone know a good way how to parse bitstreams with python?
00:42  mrec: struct does not seem to fit for that
00:44  teratorn: derdon: xmllint --format
00:44  teratorn: derdon: but I'm not sure how it will handle crappy html
00:44  derdon: teratorn: it won't be crappy, cuz I'll generate it ;)
00:45  teratorn: derdon: what's wrong with lxml? I installed it by hand the other day and it wasn't difficult
00:45  derdon: teratorn: I need a python-interface, a library
00:45  derdon: teratorn: on a mac?
00:45  teratorn: no
00:45  teratorn: I didn't know Macs could run software
00:46  Gentle: it's a question of syntactic sugar, just replace every occurence of "software" with "app" and you have your mac version
00:47  kerio: har har.
00:49  teratorn: maybe if you send Steve Jobs a few more checks he'll let you run software on your computer
00:49  gorakhargosh: PKKid: Could you provide more information?
00:50  PKKid: yea, lemme pastebin it, 2 sec
00:51  eboyjr: Where in python's source code can I find the range() function?
00:51  eboyjr: If anybody knows..
00:51  PKKid: gorakhargosh, http://pastebin.com/WHgH8Kng
00:52  infobob: http://paste.pound-python.org/show/712/ (repasted for PKKid)
00:52  gorakhargosh: eboyjr: Get the source code. git init; git add .; git commit -m -"Fooling around"; and then git grep your way through the source.
00:52  bob2: the source to range is probably exceedinly boring
00:52  bob2: gorakhargosh: that's pretty pointless
00:52  gorakhargosh: bob2: I'd like to know of better ways to do that =)
00:52  bob2: gorakhargosh: 'grep'
00:53  PKKid: lol sorry, Im not a pastebin guru. ;)
00:53  PKKid: damnit infobob is my new nemesis
00:53  gorakhargosh: bob2: I know grep. I prefer git grep.
00:53  bob2: http://svn.python.org/view/python/trunk/Objects/rangeobject.c?revision=81029&view=markup
00:53  bob2: gorakhargosh: ok, but it does not make it any less pointless to check the source in to git like that
00:54  gorakhargosh: nope. searches are much faster than regular grep
00:54  bob2: OK
00:54  teratorn: oh boy
00:55  PKKid: so, I copied that format for data_files form the django's setup.py (but they just are not making into the apps site-packages dir)
00:56  marel: How do I check if some object is a list ?
00:56  gorakhargosh: bob2: correct me if i'm wrong. does git grep not search its own index too?
00:56  PKKid: marel, isinstance(object, list)
00:56  teratorn: marel: usually you shouldn't do too much type checking......
00:56  teratorn: PKKid: you must be new :)
00:56  PKKid: teratorn, New to the channel?  sorta
00:56  teratorn: PKKid: we try to pretend like isinstance() doesn't exist until someone proves they really need it :)
00:57  PKKid: marel, What I gave you actually doesn't exist.
00:57  PKKid: ;)
00:57  teratorn: marel: so what are you doing that makes you ask this question?
00:58  eboyjr: gorakhargosh: Okay the source is already downloaded. There are wayyyyyyy to many uses of the word range in the sources.. Anything to narrow it down?
00:59  matelot: what's "r%" in string formating ? raw ?
00:59  PKKid: so.. setup.py isn't including my data_files, but it's also no raising an error.. so I am not sure where to begin debugging this.
00:59  teratorn: matelot: it substitutes the repr() of the object
00:59  gorakhargosh: eboyjr: I think bob2 pointed you specifically at the source. You could use the link =)
01:00  Rajko: how do i byteswap a int ?
01:00  teratorn: Rajko: what does that mean?
01:00  Rajko: i want to cast something as a 16bit unsigned int, then byteswap it
01:00  matelot: teratorn: I see thanks
01:01  kerio: byteswap?
01:01  teratorn: Rajko: struct module, I guess
01:01  teratorn: once you pack it you'll be able to swap the bytes around however, then unpack it again if you want
01:01  warz: hi all. when doing imports, is it more efficient to only import the functions, etc, that you need? or is it just as fine to import the entire module?
01:01  ivan`: warz: either is fine
01:02  warz: k, cool.
01:02  warz: thanks!
01:02  eboyjr: bob2: Hey thanks for the link
01:02  tpratt: warz: anything but this: from m import *
01:02  eboyjr: gorakhargosh: Ah thanks lol
01:02  teratorn: Rajko: are you handling endian-ness?
01:02  Rajko: yes
01:03  Rajko: ive done it anyway
01:03  teratorn: Rajko: a proper use of the struct module should eliminate the need to do any manual byte swapping I *think*
01:03  Rajko: its for printing
01:04  PKKid: OHH, Do I need this cmdclasses option in order to install data_files?
01:04  teratorn: for printing? print hex(i)
01:04  Rajko: yeah, needs to be byteswapped in the output
01:05  Rajko: ive just used a struct unpack from struct pack with different facing <
01:06  teratorn: *nod*
01:06  Mythmon: what is the name of the function that gets called by print on random objects?
01:06  Mythmon: er. by random i mean arbitrary
01:06  gorakhargosh: eboyjr: i find gnu global to be useful when browsing code. it might be useful to you too.
01:07  teratorn: Mythmon: is __str__ what you're talking about?
01:07  Mythmon: probably.
01:07  PKKid: ARGH!, still no data_files.. does anyone in here know setup.py files well?
01:07  teratorn: I remember data_files being tricky :/
01:08  teratorn: PKKid: maybe pastebin a minimal example and someone can spot the error
01:09  PKKid: this is what IO have now, the cmdclasses is what im playing with now, but its not working either: http://paste.pound-python.org/show/713/
01:09  cmouse: puh, got it done finally
01:09  cmouse: _habnabit: thanks
01:10  gorakhargosh: PKKid: http://docs.python.org/distutils/setupscript.html#installing-additional-files ?
01:10  cmouse: _habnabit: problem is that windows cmd.exe is unable to display utf-8 properly
01:10  mrec: is there something like a private pointer which I can use to store my own references available in the PyObject struct?
01:11  PKKid: gorakhargosh, Yea, thats the format that im sending it.. unless there is a subtelty im missing, but i read that thing twice already
01:12  gorakhargosh: PKKid: what's the output of "print data_files"?
01:13  PKKid: gorakhargosh, [['karma/blog/templates/blog', ['karma/blog/templates/blog/cloud.html', 'karma/blog/templates/blog/post.html', 'karma/blog/templates/blog/recent.html', 'karma/blog/templates/blog/summary.html']], ['karma/blog/media/blog/js', ['karma/blog/media/blog/js/admin.js']], ['karma/blog/media/blog/css', ['karma/blog/media/blog/css/admin.css']], ['karma/ajaxcomments/templates/ajaxcomments', ['karma/ajaxcomments/templates/ajaxcomments
01:13  PKKid: /markdown-syntax.html', 'karma/ajaxcomments/templates/ajaxcomments/comment.html', 'karma/ajaxcomments/templates/ajaxcomments/list-comments.html']], ['karma/ajaxcomments/media/ajaxcomments/js', ['karma/ajaxcomments/media/ajaxcomments/js/ajaxcomments.js']]]
01:13  gorakhargosh: err
01:13  PKKid: its a bit large, but it looks like the correct format
01:13  PKKid: lemme reformat it and put it into pastebin
01:15  teratorn: PKKid: it ends with 3 brackets??
01:16  PKKid: teratorn, Yea, its the same as the docs for "Installing Additional Files" -- only difference is im using all lists instead of a tuple in the middle there
01:16  teratorn: oh, right
01:17  mhahe: whats the best way of formatting a string eg:       str1 = 'sdf,sdf,sdf,sdf,sdf'    and use a method that can return the same string but change the delimter from ',' to a space = ' '
01:17  PKKid: Here is the format with spaces: http://paste.pound-python.org/show/714/
01:17  gorakhargosh: mhahe: use the join method on the ' ' delimiter and pass a list as argument to it.
01:17  bob2: mhahe: that's not formatting, that's string replacement
01:17  bob2: mhahe: did you intend to use a list to begin with?
01:20  mhahe: no i wanted to read a file for example and then if any line contained ',' id replace it by ' '
01:20  mhahe: im guessing the line reading would be done on a per/line basis
01:20  bob2: yes, by iterating over the file object
--- Log closed Mon Dec 20 01:24:42 2010
--- Log opened Mon Dec 20 01:30:12 2010
01:30 --- Users 664 nicks [0 ops, 0 halfops, 0 voices, 664 normal]
01:30  rbedi99: kerio: the full function: http://paste.pound-python.org/show/716/
01:30  rbedi99: PKKid: haha yeah, what sort of time do you think i'm looking at? minutes, hours, days?
01:30  kerio: rbedi99: ew
01:31  PKKid: rbedi99, Not sure, never done it.
01:31  kerio: itertools.combinations_with_replacement(string.ascii_lowercase, 5)
01:31  teratorn: PKKid: you know, grabbing every random file that might happen to be in your package probably isn't the wisest idea
01:31  PKKid: teratorn, It seems to be the way everyone else does it..
01:31  kerio: well
01:31  PKKid: teratorn, But I agree
01:31  kerio: "".join(x) for x in itertools.combinations_with_replacement(string.ascii_lowercase, 5)
01:32 --- Channel #python was synced in 126 seconds
01:32  PKKid: rbedi99, THere is a permutations function in itertools as bob2 pointed out.. that paste you did is very confusing
01:32  teratorn: if by "everyone else" you mean "django", well, they aren't exactly known for doing things right
01:32  rbedi99: PKKid, kerio: got it, thanks -- combinations *with* replacement, though?
01:33  kerio: no, wait
01:33  teratorn: PKKid: I've used the glob module in distutils scripts when I've wanted to grab up a bunch of files without too much risk of including junk
01:34  kerio: ("".join(x) for x in itertools.product(string.ascii_lowercase, repeat=5))
01:34  kerio: there
01:34  kerio: that works
01:34  kerio: :)
01:34  rbedi99: kerio:  "NameError: name 'string' is not defined"
01:34  PKKid: teratorn, I like that, then I can express only the extentions I want
01:35  kerio: so... import it?
01:35  rbedi99: kerio: i did that, then i get this: <generator object <genexpr> at 0x2db95dc8>
01:35  PKKid: kerio, I never knew string.ascii_lowercase existed.. ;)
01:35  kerio: rbedi99: yup, that's a generator
01:35  kerio: it's lazy
01:35  kerio: you can iterate over it
01:36  kerio: you didn't want to keep 12 million strings in memory, DID YOU
01:36  rbedi99: kerio:  haha actually writing them to a file - i iterated over it, but it just reprints that generator object statement 12 million times
01:36  kerio: you're lying
01:36  PKKid: kerio, Its only ~100 MB or so. :)
01:37  bob2: that means you didn't iterate over it
01:37  kerio: PKKid: it's only 100 USELESS Mbs
01:37  kerio: *MBs
01:37  PKKid: lol
01:37  PKKid: Damnit infobob
01:37  rbedi99: when you say iterate over it, you mean store it in an iteratable data type and run through each element using a for loop, right?
01:37  kerio: rbedi99: no
01:37  bob2: rbedi99: we mean iterate over it
01:37  kerio: for i in ("".join(x) for x in itertools.product(string.ascii_lowercase, repeat=5)):
01:38  kerio: but of course that's ugly
01:38  bob2: rbedi99: for whatever in thatgeenrater: f.write(whatever)
01:38  PKKid: rbedi99, He means that all 12 million strings wont be stored.. only the one your currently working on.
01:38  PKKid: rbedi99, stored (in memory)
01:38  kerio: so just 'for x in itertools.product(string.ascii_lowercase, repeat=5): print "".join(x)'
01:39  rbedi99: kerio, bob2, PKKid: got it, makes sense. thanks! one last question though -  how's that different from storing the itertools.product.... in a variable and running that through a for loop?
01:39  kerio: well, itertools.product is an iterator itself
01:39  kerio: so... nothing
01:40  kerio: but storing it in a variable won't do what you think it does anyway :)
01:40  dassouki: what is the easiest way to update python on a mac? i want to update mine from 2.6 to 1.7
01:40  dassouki: 2.7
01:40  kerio: list(itertools.product(blabla)) does
01:40  PKKid: rbedi99, Its a difference of ~100mb being used to run your app.
01:40  kerio: it's probably a lot more
01:40  rbedi99: PKKid, kerio: ahh, got it. thanks for all your help!
01:41  PKKid: dassouki, Don't update python on your mac! -- You'll break a tons of stuff.. install 2.7 next to 2.6
01:41  kerio: 565mb
01:41  kerio: so yeah
01:41  dassouki: PKKid: fair enough, then I'm assuming the only way to do it is to compile 2.7 cause i don't see a dmg
01:41  rbedi99: kerio: i calculated ~35MB?
01:42  PKKid: dassouki, darwin tools might have it
01:42  kerio: 26**5 combinations, 5 bytes/combination
01:42  kerio: 56 mb
01:42  PKKid: dassouki, However, people have mixed feelings about darwin tools
01:42  dassouki: ok
01:42  PKKid: Whats the other darwin tools like app?  hibernate I think?
01:42  kerio: but you can't do that kind of calculation in python
01:42  kerio: dassouki: what's this bullshit
01:42  rbedi99: kerio: ah, i had no repeats, so i came out with a bit less
01:43  kerio: http://python.org/ftp/python/2.7.1/python-2.7.1-macosx10.6.dmg
01:43  dassouki: kerio: i stand corrected .. thanks a lot :)
01:43  PKKid: dassouki, Done deal. ;)
01:44  kerio: PKKid: darwinports/macports, fink and homebrew
01:45  kerio: all three kinda suck, homebrew is the one that sucks a lot less
01:52  dassouki: so programming from a mac, i haven't been on a mac since i killed my g4 in 2005. I use scipy, numpy, on a regular basis
01:52  dassouki:  
01:53  kerio: dassouki: install scipy and numpy
01:53  dassouki: i just did
02:05  c4ctus: if i want to put a function in a different file and then use it in a main file, would i name the file containing the function "func.py" and have the main one "import func.py" ?
02:07  mikemac: c4ctus: import func
02:08  c4ctus: alright
02:11  c4ctus: mikemac: its telling me that it isnt defined
02:11  teratorn: c4ctus: you should really always use packages and absolute imports "from myproject.thismodule import foo, bar" or "from myproject import thismodule"
02:12  c4ctus: myproject being a directory?
02:12 --- mikemac is now known as crazymykl
02:12  Kaedenn: and a package
02:13  teratorn: c4ctus: http://jcalderone.livejournal.com/39794.html
02:13  teratorn: c4ctus: a directory containing a possibly-empty __init__.py file
02:14  papna: I can totally Jeopardy! that answer!
02:14  teratorn: haha
02:17  Jerub: "Jerks from #python for $500 alex?"
02:17  papna: =(
02:20  Jerub: hah, i didn't actually mean that papna was a jerk. exarkun is the jerk, he's also a very awesome python programmer who i highly respect :)
02:22  teratorn: we can't all be squishy australians
02:22  dpn`: yes we can :)
02:22  teratorn: i'm not sure what that means but it was a thing to say
02:24  LurkersA: Hey guys. I have a list contiaing filenames with various extensions (.txt, .bat, .bat, etc). I am wanting to filter out everything except the .bak files. Is there an easy way to do this in place, or is it better to build a separate list?
02:26  Eevee: newlist = [fn for fn in oldlist if fn.endswith('.bak')]
02:26  bob2: doing it inplace is harder and probably more annoying
02:27  LurkersA: Cheers Eevee.
02:35  monokrome: Is there a way to reroute all function calls on a particular object to a different object?
02:36  bob2: yes
02:36  bob2: what are you doing?
02:36  monokrome: Implementing a plugin system, where plugins should use the same interface as the main client
02:36  monokrome: So, instead of coding each call separate - I want the client to call all plugins automatically before it calls it's local method
02:37  bob2: interesting
02:37  bob2: no need for the thing above, though
02:37  bob2: just look up the method, catch and ignore attribtue error, if it doesn't happen call it
02:38  monokrome: http://paste.pocoo.org/show/307225/
02:38  monokrome: I have that calling the plugins right now.
02:39  monokrome: So, I can use: self.call_plugins('method_name', arg1, arg2, etc.
02:39  monokrome: and I know the args.insert is in the wrong place
02:40  monokrome: But there are a lot of methods defined by the subclass, and I don't really need to implement all of them.
02:40  bob2: ew
02:41  bob2: __getattr__ or __getattribute__ I guess
02:41 --- elake is now known as etank
02:41  monokrome: getattr can't really tell if a method is being called or not
02:43  bob2: of course
02:43  bob2: hence the 'ew' :)
02:43  monokrome: I geuss I could use getattr to return a lambda function that calls the plugin version followed by the original
02:44  bob2: you're missing the easy option
02:44  monokrome: No, I'm not.
02:44  bob2: why is 'Main' special?
02:44  bob2: just make it another plugin
02:44  monokrome: Main?
02:44  bob2: then your facade can always do the call chain
02:44  bob2: the thing you think is special and needs to call plugins
02:45  monokrome: Because it's a protocol client in Twisted
02:45  dassouki: python mac programmers, any recommendations ? tips ? tricks ?
02:45  monokrome: get Linux :D
02:45 * monokrome kids.
02:45  Jerub: dassouki: run. fast. :(
02:45  bob2: I don't really think that matters
02:45  Jerub: *goes back to fixing bullshit on mac*
02:46  monokrome: Macs come with Python... So, not sure what tricks you're asking about
02:46  monokrome: bob2: How does it not matter?
02:46  bob2: meh
02:46  monokrome: I can't create a new client for every plugin
02:46  bob2: good luck
02:46  monokrome: but I want the plugin to maintain the same interface as the client
02:48  dassouki: anyone here work from 2 or 3 different computers, how do you deal with files?
02:48  monokrome: Also, twisted uses old-style classes
02:48  monokrome: So, __getattribute__ doesn't work
02:48  maskact: Dropbox :-P
02:50  qwerty1793: hi, long_string[n:-n] returns all of long_string except the first n characters and the last n characters. Is there a way to make this work when n = 0 ?
02:50  dpn`: dassouki: dropbox
02:50  dpn`: oh and version control
02:50  dpn`: :)
02:50  eurisko: hi everyone just a simple question, if i have a thread running that i have her id with thread.get_ident() can i send her a signal to kill her?
02:51  maskact: Her...? o_o
02:51  dpn`: qwerty1793: if n: long_string[n:-n]
02:51  eurisko: the thread
02:51  dassouki: dpn`: well i'm on git
02:51  kerio: eurisko: nope
02:51  kerio: don't use threads
02:51  eurisko: in my language it's female sorry
02:51  qwerty1793: dpn`: surely  if n: long_string[n:-n] else: long_string
02:52  eurisko: python doesn't support sending signals to threads?!
02:52  dpn`: qwerty1793: yeah i was't giving the complete solution.. just how to address the exception you were seeing
02:52  qwerty1793: ok, thanks
02:52  maskact: You mean as in the os.kill() sense
02:52  maskact: or literally sending a signal from a subprocess to kill the thread?
02:53  eurisko: yup
02:53  eurisko: as in os.kill
02:54  eurisko: is a cousin like from a thread send a signal to other?
02:54  dpn`: eurisko: no.. it's dangerous anyway
02:54  eurisko: okay don't worry
02:54  dpn`: eurisko: create your own system to ass a message to the thread.. using Queue or the like
02:54  dpn`: and get it to clean up itself
02:54  dpn`: since killing your thread while it has a lock on something, or some other condition could cause the rest of your app to do bad things
02:54  dpn`: pass*
02:55  dpn`: eurisko: http://stackoverflow.com/questions/323972/is-there-any-way-to-kill-a-thread-in-python
02:56  dpn`: eurisko: also if it is when you are trying to kill your whole app, look at this
02:56  dpn`: http://docs.python.org/library/threading.html#threading.Thread.daemon
02:57  eurisko: i just don't realize understand
02:57  eurisko: if i am starting to close my application... i want to close step by step
02:58  eurisko: what is wrong in killing parts in a order i think is right?
02:59  eurisko: but yes they have a lock, i am killing because they are on a pre-commit , but as i have called the app to close i don't want them to commit
03:06 * monokrome doesn't think there's any sort of __getattribute__ for old-style classes :|
03:15  Spirits-Sight: bob2: could you please explain to me in exercise 27 it has "The Truth Tables" I don't get the NOT OR - and - NOT AND
03:18  Spirits-Sight: example: not (True or False) = False - or - ex: not (True and False) = True  ???
03:19  mokazon: how can I str.strip a whole string instead of just the trailing and leading characters?
--- Log closed Mon Dec 20 03:25:01 2010
--- Log opened Mon Dec 20 03:30:29 2010
03:30 --- Users 648 nicks [0 ops, 0 halfops, 0 voices, 648 normal]
03:32 --- Channel #python was synced in 123 seconds
03:32  Spirits-Sight: anyone: why is this False "not (1 == 1 and 0 != 1)"?
03:32  tr3x: why wouldn't it be?
03:32  tr3x: not (True and True)
03:34  Spirits-Sight: 1==1 is true and 0 != 1 is true so how does not in front change it?  does NOT in fornt always change the first result of  ex 1 == 1 ?
03:34  Spirits-Sight: so it really would be like saying NOT True and False is False
03:35  Spirits-Sight: ooops
03:35  Spirits-Sight: NOT True and True = False
03:35  tr3x: yes. True and True is True, not True is False.
03:36  Spirits-Sight: OK so in the next one it says "not (10 == 1 or 1000 == 1000)" so not(false or true) is true?
03:38  tr3x: are you trying to use me as a human python interpreter?
03:39  Spirits-Sight: nope just trying to understand, I have entered most of them already after I think I got the right answer
03:39  m0nkfish: Spirits-Sight i suggest you follow some kind of binary logic tutorial
03:40  Spirits-Sight: I am
03:40  m0nkfish: not (10 == 1 or 1000 == 1000) ---> not (false or true) ---> not (true) ---> false
03:40  chkdsk: How would I go about implementing a socket send buffer in python?
03:42  Spirits-Sight: does the not get applyed to both the first part of the and or both parts?
03:42  Spirits-Sight: not clear sorry
03:44  smw: Spirits-Sight, not(False or True) is False
03:44  smw: Spirits-Sight, False or True is true. Inverse is False
03:45  monokrome: Doesn't this conditional always evaluate to True?
03:46  smw: monokrome, which one?
03:46  monokrome: not(False or True) is False
03:46  smw: yep
03:46  monokrome: I guess the only time it will evaulate to False is if you do False or False
03:57  Spirits-Sight: not(False or True) = False also not(True or False) = False python interper says  ?  is that right ? it sounds like it should be true as not(false ... changes to true so it would be d be true or true
03:59  crazymykl: Spirits-Sight: the stuff it the parens is true, so not(True) makes False
04:01  merma: when I export PYTHONPATH  are the changes permanent?
04:02  crazymykl: merma: only as long as that terminal exists, and only on that terminal
04:04  Spirits-Sight: not (True and False) would this convert to False and False?
04:04  m0nkfish: learn what parentheses mean.
04:05  Spirits-Sight: I know that does the test first
04:06  chkdsk: I'm using sockets to make an IRC bot, and I have a small function to get the title of any webpage URL sent in chat and reply it into the channel. I'm using urllib2 to get the page title. There's a huge lag between sending the title via socket.send(title) and it actually going through. Is this due to urllib2?
04:06  joenp: I'm not sure I understand the output of type(). I'm debugging and have a problem where my list contains objects as well as lists. I want to check for the type being list and output the items in that lits to know what is going on. How do I check that the type is list?
04:08  Eevee: joenp: why do you have a list of both objects and lists
04:08  joenp: Eevee: that's what I'm trying to find out :) There's only supposed to be objects in the list.
04:11  joenp: Eevee: sorry, got disconnected
04:11  Eevee: joenp: you can use isinstance(obj, list)
04:15  joenp: Eevee: OK, thanks
04:15  ambient: hi, anyone using 2.7 in Windows 7 with a working stack of numpy and pygame for game development? or should i still stick to 2.6?
04:17  nosklo: ambient: it doesn't make much of a difference
04:18  nosklo: ambient: you can use 2.6 and move to 2.7 when it's convenient
04:18  ambient: i'm just wondering if i can make a fully working stack of 2.7 or are there any compatibility issues with Eclipse PyDev etc
04:18  ambient: i haven't been programming in python for a while
04:19  ambient: ok, i'll stick to 2.6
04:19  nosklo: ambient: I don't use eclipse/pydev, but I don't think there will be any compatibility issues about 2.7 that didn't exist already in 2.6
04:20  ambient: that might be, or that might be not. you never know where the bugs pop out :)
04:20  ambient: i think i need to ask around in gamedev channels
04:21  ddddddd: hi all
04:50  variable: Are there any good modules in python that take care of users/attributes and storing them in a database?
04:57  nosklo: variable: sqlite?
04:57  nosklo: variable: maybe sqlalchemy?
04:57  variable: if not are there are good simple database modules to have a persistent set of name value pairs?
05:00  Dude-X: sqlite is pretty
05:00  Dude-X: good
05:00  variable: Dude-X, I'm aware of sqlite. I was hoping for something where I could avoid SQL
05:00  variable: its too much for my needs
05:00  variable: basically what I need is a persistent class :-}|
05:01  variable: "user
05:01  papna: variable: databases are pretty good for persistance.
05:01  variable: "user" -> {fullname -> foo; mode -> goo } "user2"...
05:01  Dude-X: json?
05:01  Dude-X: that's the other alternative
05:01  papna: variable: It's not hard to use sqlite to be a key-value store.
05:01  variable: Dude-X, json works
05:02  papna: You've got to put the JSON somewhere.
05:02  papna: Files can be a place. Other times, a database is a better place.
05:02  Dude-X: on the harddrive, like the sqlite db
05:02  variable: papna, its also not hard to use MySQL or PGSQL - but its too much
05:02  papna: variable: hahaha
05:02  variable: papna, a flatfile is fine for my needs - I'll look into python + json
05:02  nosklo: variable: sqlite comes with python, it's fast and saves on a single file. I don't know why not use it
05:03  Dude-X: i <3 sqlite
05:03  variable: nosklo, pkg_info -x py-sqlite
05:03  variable: pkg_info: no packages match pattern(s)
05:03  variable: Dude-X, sqlite ims pretty good. I don't need the power for my needs (its a *really* simple system)
05:04  variable: also the human readable aspect of json makes it nice :-)
05:04 * variable forgot about it 
05:04  monokrome: nosklo: In some cases, SQLite isn't enough :)
05:05  papna: monokrome: The current accusation is "too much", whatever that's supposed to mean.
05:05 * monokrome <3 SQLAlchemy
05:05  papna: variable: sqlite3 is part of 2.5+
05:05  variable: papna, a) I'm using 3.1 b) I didn't install it
05:05  Dude-X: sqlite is fast; i have a japanese dict bot, 200,000 lines of entries; with fast text search it looks up entries in less than a second
05:05  papna: variable: Which is longer than JSON support has been in the stdlib
05:05  variable: hrm - its standard lib?
05:05  variable: interesting
05:05  papna: variable: Sounds like two bad ideas, most likely.
05:05  papna: variable: Ye.s
05:05  variable: papna, why is using 3.1 a bad idea?
05:06  monokrome: Basically, if the limitations on http://www.sqlite.org/limits.html are okay for you - then use SQLite.
05:06  papna: variable: Because there is very little library and documentation support compared to 2.x Pythons. There are many fewer useful things you can do with it.
05:07  papna: variable: I very rarely undertake a project for which I don't need scipy or Twisted.
05:07  papna: For example.
05:07 * monokrome thought papna said scrapy :D
05:07  variable: papna, I thought the "official" recommendation was was to use py 3.x ?
05:08  papna: variable: I don't think so. I would hope the official recommendation is "Use what suits your needs"
05:08  papna: variable: http://wiki.python.org/moin/Python2orPython3
05:08  monokrome: If your project can work with it
05:09  nosklo: variable: if you go to python.org, and click on the button "Download", you get the following message: "If you don't know which version to use, start with Python 2.7". I don't know how _official_ you consider that to be.
05:09  variable: nosklo, I didn't even notice that.
05:09 * variable just used ports to install\
05:09  variable: nosklo, alright - I'll switch to 2.7 for now
05:10  variable: I was planning on using twisted :-|
05:12  papna: Most big projects can't win a cost-benefit analysis for porting to Python 3.
05:12  papna: Which is sort of circular.
05:13  papna: But it is what it is.
05:13  variable: papna, I wanted to use this as a learning experience for python
05:13  variable: I know python - but I want to "really know" python :-o
05:26  ajmilazzo: is there any better way to do this: http://paste.pocoo.org/show/307253/
05:30  nosklo: ajmilazzo: well, that code doesn't seem to do anything useful. I mean, it attempts to open a file and write a timestamp to it every 5 seconds, while the user can enter data into some kind of prompt. But why?? What's this for?
05:30  nosklo: I can identify a few problems, you're using the identifier "time" to mean both the time module and a integer variable meaning time
05:31  ajmilazzo: nosklo: oh... well i just wrote that code up because my actual use is complex
05:32  ajmilazzo: nosklo: its for an irc bot
05:32  nosklo: ajmilazzo: oh, great... ok... so that's the while True loop at the top.
05:32  nosklo: ajmilazzo: what's the story behind the timestamp file?
05:33  manizzle: so guys, i got this error when using urlopen to send get requests to a site.
05:33  manizzle: urlopen error [Errno 104] Connection reset by peer
05:33  ajmilazzo: nosklo: well the game has a database which has info if the player is online, but it doesnt count time online
05:33  manizzle: anyone know why this happens/
05:34  ajmilazzo: nosklo: so i need to do that myself by checking the databse every so often and adding the time online to a different databse
05:34  ajmilazzo: nosklo: then the irc bot uses that time online with various other functions
05:34  nosklo: ajmilazzo: the "game"? Is the bot a game bot?
05:35  ajmilazzo: nosklo: well you can type stuff in irc and everyne on the game will see it
05:35  ajmilazzo: nosklo: and any chat in the game is seen in irc
05:36  nosklo: ajmilazzo: cool, what game is this? Do you control the server?
05:36  ajmilazzo: hold on i will get a sceen shot to explain
05:38  ajmilazzo: ajmilazzo is me and ajmilazzoBot is the irc bot: http://i.imgur.com/PsdYB.png
05:39  ch0p: I'm having some trouble importing the mysql-python package. My error is here: http://pastebin.com/N0KxsCQL  I have been battling this all day and a key difference is that the online descriptions have paths before the dylib file and mine doesn't
05:39  infobob: http://paste.pound-python.org/show/719/ (repasted for ch0p)
05:39  ch0p: e.g. the comments here have paths before the dylib http://programmingzen.com/2007/12/22/how-to-install-django-with-mysql-on-mac-os-x/
05:40  ch0p: I'm not sure what I'm doing wrong
05:40  ajmilazzo: nosklo: see the chat at the bottom?
05:40  nosklo: ajmilazzo: yeah.
05:40  tombee: Hi folks, I'm wondering if anyone is awake that has experience with Constraint Programming?
05:40  nosklo: ajmilazzo: how does your script communicate with the game chat?
05:40  nosklo: ajmilazzo: is it a IRC server already?
05:41  ajmilazzo: nosklo: well the chat is linked with an irc room
05:41  manizzle: hey guys. writing a script to GET some pages, in the middle of the script, i repeatedly get this error. http://paste.org/pastebin/view/26374
05:41  ajmilazzo: nosklo: a different irc bot comes in the irc room and says everything thats in the game chat
05:41  manizzle: if anyone could help, that would be great.
05:41  ajmilazzo: nosklo: and if i say something in irc it shows up in the game
05:41  nosklo: ajmilazzo: ok, that's what your script does, right?
05:42  ajmilazzo: nosklo: yah it parses what the game's irc bot says and then says the results in the room
05:42  tombee: ch0p, I'm no Python programmer, however are you sure you've configured the package you're running to know where your dynamic libraries are?
05:42  gusg: not necessarily a python specific question, but how could I generate all n-bit bit strings with k 1s and n-k 0s
05:43  nosklo: ajmilazzo: I'm curious on how the bot reads the game chat, in order to echo it at IRC. Does it connect on the game server as a client?
05:43  ch0p: tombee: i looked through the build commands and scripts and I'm not even sure where to provide that path
05:43  wahnfrieden: {'foo': 'bar', 'baz': 'qux'} #on one line - space after { / before }, or not?
05:43  ajmilazzo: nosklo: no the game itself handles that
05:43  ch0p: I think it's asking the mysql_config command for the paths and I know mysql_config knows the correct location
05:43  tombee: ch0p, for example in C it would be a linker argument.
05:44  nosklo: ajmilazzo: so the script runs as a game plugin? I don't see the connection
05:44  ch0p: tombee: I know what you're talking about. I'm saying I didn't see where to do it
05:44  tombee: Ah, sorry I can't help then ch0p, I'm not familiar with the package you're trying to run :(
05:44  ch0p: no sweat, thanks anyway!
05:46  tombee: ch0p, seems a reasonably common/documented problem by a quick google search at least.
05:46  ch0p: tombee: trust me, i've been through the first 10 pages of results
05:47  nosklo: gusg: huh, what's that for?
05:47  ajmilazzo: nosklo: http://i.imgur.com/roy7A.png
05:47  ch0p: i have spent all day installing and reinstalling mysql and python and mysql-python
05:47  some: nice
05:48  ch0p: I may just bite the bullet and work remotely from a linux server instead of on my macbook
05:48  nosklo: ajmilazzo: oh, I see, Building_Zone_Bot is the bot that bridges the game to IRC, not your bot
05:48  ajmilazzo: nosklo: zing!
05:48  tombee: Yeah sorry ch0p, I wasn't inferring that you hadn't attempted to google, just saying it's at least known about.
05:50  ajmilazzo: nosklo: so... back to the original question of how to get that online time script to be better integrated with the irc bot
05:50  tombee: ch0p, does that dylib actually exist btw?
05:50  ch0p: yes
05:50  ch0p: and it's symlinked to from all over
05:50  nosklo: ajmilazzo: can't you put everything in the same script?
05:50  manizzle: hey guys. writing a script to GET some pages, in the middle of the script, i repeatedly get this error. http://paste.org/pastebin/view/26374, if anyone could help, that would be great.
05:50  ch0p: I cannot find the folder it's searching
05:50  nosklo: ajmilazzo: which networking library did you use to write the bot?
05:50  ajmilazzo: nosklo: twisted
05:50  nosklo: ajmilazzo: that's great!
05:51  ajmilazzo: nosklo: why?
05:51  nosklo: ajmilazzo: use a twisted.internet.task.LoopingCall() to call one of your functions every 5 seconds
05:51  nosklo: ajmilazzo: instead of launching separate program
05:51  tombee: ch0p, does there also exist a static library of that too?
05:51  ajmilazzo: nosklo: and where do i put that?
05:51  ch0p: a .so?
05:52  nosklo: ajmilazzo: wherever you want to start the calls
05:52  nosklo: ajmilazzo: like, after logon, maybe
05:52  tombee: ch0p, .a
05:53  nosklo: manizzle: that error means you got a TCP/IP RESET from the other side.
05:53  ch0p: probably, I have everything uninstalled again
05:53  nosklo: manizzle: that usually means a timeout in the connection
05:53  ch0p: I'm going for another from scratch attempt
05:54  tombee: ch0p, I've fought with .dylibs before, wasn't fun :) http://www.tombee.me.uk/2010/10/e2tools-e2cp-on-mac-os-x/
05:54  manizzle: nosklo, so im connecting to the host way too fast?
05:54  nosklo: manizzle: It's usually related to the availability of the site you're sending the request, and the quality of the network
05:54  nosklo: manizzle: but it could be some throttling mechanism over the way
05:54  tombee: ch0p, that was getting a non-OSX package to build though.
05:54  manizzle: so maybe a slower rate of request?
05:54  manizzle: i had a 50 millisecond delay
05:54  ch0p: i'll keep plugging at it
05:55  manizzle: but im requesting 20,000 pages
05:55  nosklo: manizzle: nothing in the error message indicates its related
05:55  nosklo: it's
05:55  tombee: Hi folks, is anyone is awake that has experience with Constraint Programming?
05:55  nosklo: manizzle: nothing in the error message indicates it's related to the frequency of your requests - could be anything
05:55  tombee: blah, that didn't work, too tired :/
05:55  manizzle: so a connection disruption? is there anything that would be wrong on my code>
05:56  manizzle: nosklo, is there a way to catch this exception, and ignore it, and continue with the rest of the code?
05:57  nosklo: I didn't see your code, so I can't say. You noticiably removed the part of the traceback that touches the code, so I also can't see the line of code that triggered the error
05:57  ajmilazzo: nosklo: what argumeants does it take?
05:57  nosklo: but yes, you can catch it just like any exception
05:57  ajmilazzo: arguments*
05:57  manizzle: nosklo, k one second
05:57  nosklo: ajmilazzo: the function to call, and arguments to pass to it
05:58  nosklo: ajmilazzo: http://twistedmatrix.com/documents/current/api/twisted.internet.task.LoopingCall.html
06:01  ajmilazzo: nosklo: where do i put the interval?
06:02  nosklo: ajmilazzo: when you start it
06:02  nosklo: ajmilazzo: mycall.start(interval_here)
06:02  ajmilazzo: nosklo: am i supposed to use classes?
06:03  ajmilazzo: oh wait
06:03  nosklo: ajmilazzo: mycall = LoopingCall(some_function) ; mycall.start(5)
06:03  nosklo: ajmilazzo: that will call some_function() every 5 seconds
06:03  ajmilazzo: nosklo: ok
06:03  nosklo: ajmilazzo: until mycall.stop() is called
06:04  manizzle: nosklo, here. http://paste.org/pastebin/view/26376
06:04  manizzle: i kinda dont want execution to stop, i guess catching the exception and continuing with execution wouldnt be too bad.
06:05  ajmilazzo: nosklo: looks great! many thanks
06:06  nosklo: manizzle: I wonder if something in that file that ends up in the url could cause a bad request or otherwise confuse the remote server
06:06  nosklo: manizzle: for one, it seems appid includes a linebreak
06:06  manizzle: well the position at which the script breaks is different everytime
06:07  matelot: regex=re.compile('\W+') - this means "look for words", right ?
06:07  cwillu: don't bother compiling, compiled regex are cached anyway
06:07  nosklo: matelot: no, that just compiles a regex
06:08  cwillu: matelot, also, don't think in those terms, try to think literally what it says, that'll save you some pain and suffering:  that regex isn't "look for words", but rather "look for one or more non-whitespace characters"
06:08  cwillu: also, I'm required by law to tell you not to use regex :p
06:09  manizzle: nosklo, lemme try strip()'ing appid
06:09  matelot: yeah I use little,
06:09  manizzle: before i give it to the thing.
06:09  cwillu: (upper-case typically means "the opposite of whatever that letters means")
06:10  matelot: ah I see thanks for the tip
06:16  ajmilazzo: nosklo: is there any way to have it not run the first time, start running after the first interval so start > interval > my function > interval > etcc...  instead of start > my function > interval > my function>etc...
06:17  Tallisman: Wow, quite a busy channel this is ^^, has anyone ever here ever used pytesser?
06:18  ajmilazzo: Tallisman: is that another channel?
06:18  Tallisman: Is it O.o?
06:18  ajmilazzo: Tallisman: what is it?
06:18  Tallisman: Not quite ^^
06:19  Tallisman: http://code.google.com/p/pytesser/
06:19  ajmilazzo: Tallisman: wow image to string,...
06:19  nosklo: ajmilazzo: yes http://twistedmatrix.com/documents/current/api/twisted.internet.task.LoopingCall.html#start
06:19  nosklo: ajmilazzo: check start method parameters. There's a parameter called `now` which defaults to True...
06:19  ajmilazzo: nosklo: now=False
06:19  ajmilazzo: nosklo: thanks
06:20  nosklo: Tallisman: I had some trouble with it. So for my project I'm launching tesseract executable instead
06:21  Tallisman: ah, what is your project doing? :P
06:21  nosklo: Tallisman: it works fine now... after I implemented it as a subprocess, never touched it again :)
06:21  nosklo: it's already in production, runs everytday
06:23  Tallisman: well, i got this error :P, i got it to import by installing Python Imaging Library (PIL) and gcc
06:23  Tallisman: i can also open the .tif image, only problem is the image_to_string() function itself xD
06:24  Tallisman: it returns this btw: http://pastebin.com/Y8ZsDixV
06:24  infobob: http://paste.pound-python.org/show/720/ (repasted for Tallisman)
06:25  Tallisman: wow.. infobob, are you a bot or do you have exactly the same error?
06:26  ajmilazzo: Tallisman: hes a bot
06:26  Tallisman: probably a bot, lol, anyhow, that is the error i am getting when i run the function
06:27  Kaedenn: Tallisman: please mind the rules
06:27  Kaedenn: Tallisman: i.e. the first six bytes of the /topic
06:27  ajmilazzo: Tallisman: you said the l word
06:28  Tallisman: ooh
06:28  Tallisman: well, i will never say the L word again ^^, neither will i use pastebin lol
06:28  Tallisman: Woops.
06:29  Tallisman: Aaaaaah, it is habit =(
06:29  Tallisman: forgive me >.<
06:29 --- DDR_ is now known as DDR
06:30  Tallisman: i must say it is kinda funny to use the l word in the same sentence you say you will never use the l word again.. kinda failing as well..
06:33  Tallisman: sorry ajmilazzo :P, at first i thought it was not allowed to use pastebin
06:33  khafra: So, I started my first EC2 micro-instance today. I can ssh to it and start up a bottle.py server that responds to elinks running on the localhost; but I can't get to it from outside, even though I set it up to allow port 80. Could this be a python oddity, or is it some weird Amazon thing?
06:41  tombee: There anyone here that is familiar with python-constraint?
06:45  gusg: I have a list comprehension like [j.extend(blah) for j in Js] , but I actually want to put j after it has been extended in the comprehension, and not the value of j.extend (which is always None). How can I execute j.extend(blah) once for each j and then store the result of j in list comprehension notation?
06:51  due: Attempting to install the 'burn' package from pypi via pip prints a delightful "--single-version-externally-managed not an option" error. Besides installing the package myself via setup.py, is there a way to salvage it?
06:54  Microman171: How would I get a webcam into Python 3.1?  I've looked at OpenCV, to find it doesn't support Python 3.x.  I want to display a video stream in a PyQt application on Windows (cross platform would be better though)
06:55 --- vin is now known as assange
06:55  ivan`: use Python 2.x
06:56 --- assange is now known as vin
06:56  ivan`: gusg: don't use list comprehensions except to make a list
06:57  ivan`: I think you want a for loop
07:02  gusg: ivan' I ended up using a lambda expression and using that in my list comprehension. I am indeed making a list
07:03  papna: gusg: Use a real for loop instead of that.
07:04  papna: gusg: Or use + instead of extend.
--- Log closed Mon Dec 20 08:31:21 2010
--- Log opened Mon Dec 20 09:19:46 2010
09:19 --- Users 649 nicks [0 ops, 0 halfops, 0 voices, 649 normal]
09:21 --- Channel #python was synced in 127 seconds
09:51  Microman171: There is just no winning here :-(.  I need to interface a webcam somehow.  Preferably in python 3.1  Anybody know how..?  OpenCV only works on Python 2.7, and I also need pygame which doesn't work on 2.7
09:51  _habnabit: Uh. Pygame sure as hell works on 2.7.
09:52 * Microman171 looks again
09:53  Microman171: _habnabit: I guess you are sure?  Looking through pygame.org, there isn't an installer for 2.7
09:54  jorrit: Microman171, that doesn't mean it doesn't work.
09:54  Microman171: jorrit: So the 2.6 version will work on 2.7?
09:54  _habnabit: Microman171, no, the 2.6 version will only work on 2.6.
09:54  jorrit: I don't know that. But at the very least you can download the source.
09:55  _habnabit: Microman171, but the source version will install for 2.7.
09:55  Microman171: _habnabit: By source code, that means I use setup.py to install it?
09:56  _habnabit: Yep.
09:56  Microman171: Thank you very much :-)
09:56  _habnabit: Or just use your platform's package manager.
09:56  Microman171: _habnabit: In my case, Windows 7 :-P
10:23  zimnyx: I'm trying to mock property using 'mock' library, but I cannot make it work: http://dpaste.com/287728/ What am I doing wrong?
10:25  monokrome: Is there a way to get json.load to load strings as UTF-8 instead of Unicode?
10:25  Peng: Huh?
10:26  Peng: Oh. You want it to return str objects? Why?
10:26  monokrome: Because they are being used to configure a network connection, and Twisted doesn't accept Unicode
10:27  Peng: Ah, well, you could always encode()
10:27  monokrome: Yes, but then I would have to write a recursive loop through the entire result from the JSON
10:28  _habnabit: You'd have to do that anyway.
10:28  monokrome: I don't right now.
10:28  _habnabit: It's not like you can send a list or dict over the wire with twisted.
10:28  Peng: monokrome: You might be able to do this with a custom decoder. Read json's docs.
10:29  _habnabit: Anyway, you're approching this from the wrontg direction.
10:29  _habnabit: Encode as late as you can.
10:29  _habnabit: Keep it as unicode for as long as you can.
10:29  _habnabit: So, immediately before you write it to the transport, encode it.
10:30  monokrome: What is the benefit of it being unicode?
10:30  _habnabit: If you want to, y'know, do anything with it.
10:30  monokrome: Yes, since you can't do anything with strings :)
10:30  verte: unicode is the correct data type for text
10:31  _habnabit: Other than just pass it around opaquely.
10:31  _habnabit: monokrome, I see you don't get it!
10:31  _habnabit: monokrome, this is a problem that language like php have.
10:31  _habnabit: monokrome, if you don't have an abstract unicode type, you can get bytestrings that contain invalid encoded data.
10:31  monokrome: In most cases, I'd agree - but this instance seems like a lot of extra work without any benefit in the middle.
10:32  verte: operating on strings is operating on bytes, for example, iterating over a utf-8 string gives you pieces of characters
10:32  _habnabit: monokrome, that's just not a useful thing.
10:32  verte: heh, pelting down rain
10:33  monokrome: Oh well. I've done it the "right" way now.
10:41  Microman171: Building source on windows is terrible :-\
10:42  preaction: so get a better OS
10:43 --- monokrome is now known as jinzou
10:43  Microman171: preaction: Used to use Ubuntu, was much better for code.
10:44  preaction: uh... okay?
10:48  NelleV: preaction: sometimes you don't have the choice of the OS
10:48  preaction: uh... okay?
10:54 --- jinzou is now known as monokrome
10:55  Who: python supports all platforms right ? i mean my app will run on linux, windows ,etc ?
10:55  jorrit: Depends on the kind of dependencies you use.
10:55  shylent: depends on your ass
10:55  jorrit: But usually it will work.
10:55  shylent: err app
10:55 --- xav- is now known as xav
10:56  edulix: hi
10:57  edulix: I'm using this command: pip-2.7 -E env install -r dependencies.txt --upgrade
10:57  edulix: and I get a permission denied because apparently it tries to uninstall the package distribute from my system. which btw pip says I DNOT have installed. but anyway, it shouldn't be trying to uninstall!
10:59  ngur: Hi
11:00  ngur: How do i count the list of object, with object attribute, say if object has attribute isNone
11:01  pen: How do I tell python not to convert [ ] to %blah blah
11:01  pen: I want to have a string with characters like brackets []
11:01  pen: but python kept changing it to %blah blah
11:01  bob2: [] aren't special in strings
11:01  bob2: pen: maybe pastebin some example code?
11:01  pen: ok here is the code, a string = 'hi[]'
11:01  bob2: ngur: well, a list of objects should general all be similar enough that you know that already
11:01  pen: or
11:01  pen: rather
11:02  bob2: pen: no, that's not getting changed by python
11:02  pen: it is if that is as a key in a dict
11:02  bob2: ngur: but if you really insist, sum(1 for x in yourlist if hasattr(x, 'whatever'))
11:02  bob2: pen: no it's not
11:02  jorrit: pen, no. Python doesn't do that.
11:02  bob2: pen: can you show some runnable code that demonstrates the issue?
11:02  bob2: there must be something else going on
11:02  ngur: bob2: if object has the isNone attribute, then i need to count
11:03  pen: ok, if it is not then it is urllib.urlencode's fault then
11:03  bob2: urlencode will of cource urlencode things :)
11:03  pen: I thought urlencode is simply rearranding
11:03  bob2: no
11:03  pen: rearranging
11:03  pen: hm
11:03  bob2: it urlencodes things (which changes lots of characters)
11:04  bob2: ngur: generally a list of objects should all obey some 'interface'
11:04  bob2: where interface basically means 'they're all similar enoug that you don't need to check'
11:04  pen: ok, this is weird
11:04  pen: urllib2 urlopen and then read doesn't return the xml I was requesting
11:05  bob2: maybe pastebin your code (http://paste.pocoo.org/)?
11:05  pen: nvm, I think that was a small typo :P
11:05  pen: ahhh, typo
11:06 --- oxygen is now known as oxygen_
11:11 --- oxygen_ is now known as oxygen
11:22  amitz: just wondering, do you find it common that more people are interested in django than in python? or is there a #python-offtopic where this question should go?
11:23  kerio: amitz: php programmers are more interested in django
11:23  crashanddie: kerio++
11:23  NelleV: not only...
11:24  kerio: i didn't say only
11:24  kerio: lots of php programmers in the world willing to switch to python
11:24  NelleV: Sometimes I wonder if you ever say something without trying to troll
11:25  crashanddie: NelleV, I can vouch for him :)
11:25  crashanddie: otherwise I would've banned him from #maemo ages ago.
11:25  NelleV: amitz: I come for a scientific environment, so here, people use python as a mathematic tool
11:25  bob2: vouch for 'that is correct', I assume
11:26  kerio: crashanddie: gee, thanks
11:26  eerne: how do i see what version of py2app is pre-installed on osx ?
11:27  crashanddie: kerio, anytime
11:27  kerio: NelleV: the amount of php programmers in the world outweighs the amount of scientists, so there are more people interested in django and web frameworks than scipy/numpy or python itself
11:27  ccxCZ: well, django is framework. Frameworks are good for dull and repetetive tasks. There is lot of tasks to do like that in common web/programming job.
11:28  NelleV: kerio: I think you should review your stats...
11:28  NelleV: kerio: the amound of scientist is probably bigger than the amount of real php programmers for on
11:28  amitz: interesting observation kerio.
11:29  kerio: NelleV: yeah but they don't come here asking for help
11:29  NelleV: kerio: second, the amount of scientific is not a relevant number. The relevant number is the amount of scientists that use python
11:29  NelleV: kerio: of course. They are welcome by people who don't give a shit about their problem, and have a community of their own (for most of them)
11:29  amitz: NelleV: i don'tt know python is nice mathematically, other than the neatneess of list comprehension.
11:29  kerio: amitz: try scipy, it's awesome
11:29  NelleV: amitz: there are a lot of modules
11:30  NelleV: amitz: numpy, scipy, matplotlib, mayavi
11:30  NelleV: amitz: these are mainly developped by scientist for scientist
11:31  amitz: i guess what i wanted to ask was, i want to set up a local #django channel. but i wonder if i should set up the #python equivalent too.
11:31  NelleV: amitz: and that doesn't count the numerous machine learning modules :-)
11:31  ShishKabab: Not sure where to ask this, but how do I install a package whose name contains whitespace with pip? e.g. Twisted Mail.
11:32  amitz: NelleV: there is also a library for natural language processing in python, pretty neat!
11:33  trwired: Hi, I'm looking for news sources for Python. Like Hacker News, but with a narrower scope.
11:33  Cromulent: trwired: http://planet.python.org/
11:34  ccxCZ: ShishKabab: pip install "Twisted Mail" should do (it's a matter of your shell, not pip)
11:34  bob2: trwired: planet python, /r/python
11:35  trwired: /r/python?
11:35  Cromulent: trwired: reddit
11:36  trwired: Ah.
11:36  ShishKabab: ccxCZ: I thought so too, but this happens: http://pastebin.com/G8axja7x . Same thing when using a requirements file.
11:36  infobob: http://paste.pound-python.org/show/722/ (repasted for ShishKabab)
11:36  trwired: Thanks!
11:38  ccxCZ: ShishKabab: are you sure the package name actually contains a space
11:38  ccxCZ: ?
11:39  ccxCZ: hmm, actually it seems it does
11:39  bob2: probably ok to forget twistedmail exists
11:40  bob2: twisted includes it
11:41  ccxCZ: it does? I use gentoo ebuilds, so I don't know how it's packaged on pypi, but here twisted == twisted core
11:41  ShishKabab: ccxCZ: Yes, it says so in pip search and on the pypi website. I've also tried TwistedMail, Twisted-Mail and Twisted_Mail without sucess.
11:42  ccxCZ: ShishKabab: probably download tarball then and use that to install it
11:43  ShishKabab: ccxCZ: Ok, too bad. Thanks!
11:43  bob2: packages are split, but on the cheeseshop Twisted is all of Twisted
11:43  bob2: so just install that
11:44  pen: in elementTree in find does it accept xpath?
11:45  bob2: some xpath
11:45  bob2: lxml has fancier stuff
11:45  Dynetrekk: hi! is it possible to do something along the lines of 'mystring{test} and {test2}'.format(test=example), i.e. only format in the keywords available?
11:45  bob2: try and see
11:46  bob2: the answer might have to involve a collections.defaultdict
11:46  pen: true, but setuping up lxml is more than worth the time for this little code i'm writing
11:46  pen: I think
11:46  bob2: ok!
11:46  pen: :P
11:46  pen: maybe not
11:46  ShishKabab: bob2: Yes, that worked ;)
11:46  Dynetrekk: it is not possible with the regular string.format method
11:48  d1b: hi um so i have an sqlite3 database and i know if i use .execute on a cursor object i can pass up a tuple of the values
11:49  d1b: hum mm no nevermind that won't fix it either mm
11:52 --- unreal_ is now known as unreal
11:52  d1b: so what i want to do is give a dictionary to an insert statement and have it go into the database without manually stating what it is
11:52  d1b: hum
11:53  pen: hmm find doesn't support xpath with attributes
11:53  pen: like .//path[@attrib]
11:53  pen: doesn't work
11:55  bob2: definitely possible
11:55  d1b: pen: sorry?
11:55  pen: yea, it gives me "expected path separator (%s)" % (op or tag)
11:55  bob2: d1b: http:/storm.canonical.com/, http://www.sqlalchemy.org/
11:55  d1b: bob2: oh? mmm
11:55  pen: I have no idea what that means
11:55  d1b: pen: which module are you using?
11:55  pen: only if I have [] in my xpath
11:56  pen: d1b, xml.etree.ElementTree
11:56  pen: and that's using with an Element element
11:57  pen: anyone knows the problem?
11:57  d1b: bob2: looks ok but i would give up some control :/
11:58  d1b: mmm
11:58  pen: maybe it is just not supported?
11:58  bob2: d1b: life is hard
11:58  d1b: pen: look at lxml if that is the case
11:58  d1b: bob2: :P
11:58  pen: :(
11:58  pen: all well
11:59  d1b: bob2: /me is staring at a table with only a few items and trying to line them up :/
11:59  d1b: few being < 10
12:02  gravestone: Can anyone tell me what is "ubuntu on linux" mean on a macos in python?
12:02  gravestone: Here's an image btw http://i.imgur.com/NfavB.png
12:02  bob2: it means you're not running python on os x
12:03  bob2: or someone is doing some lame hacking of the build info
12:03  gorakhargosh: gravestone: the user is logged into an Ubuntu machine via ssh.
12:03  bob2: presumably that dude ssh'd to an ubuntu machine
12:03  gravestone: I see, thanks.
12:06  gravestone: Is there any reason to do what btw ? I mean you can develop python on a mac without a problem, can you?
12:07  gravestone: what=that
12:09  NelleV: w
12:20  aberceanu: hi guys
12:21  aberceanu: im trying to write a function that takes as parameter a file, replaces all the occurances of 'D' in the file with 'E' and returns the changed file. any ideas on how to do that?
12:23  ivan`: read to a str, s.replace, overwrite the file
12:24  ivan`: http://docs.python.org/tutorial/inputoutput.html#reading-and-writing-files
12:24  NelleV: aberceanu: the best would be for you to write something, then ask for help
12:24  NelleV: aberceanu: by reading the python tutorials and with what ivan` said, you should have a good idea on how to do that
12:25  aberceanu: ivan`, NelleV: thanks :)
12:34 --- methym_ is now known as methym
12:40  xavieran: I know C
12:40  xavieran: Sorry, wrong channel
12:41  oxygen: :D
12:46  Taos: Anyone know why TerminalOne = subprocess.Popen("gnome-terminal", shell = True, stdin = subprocess.PIPE, stdout = subprocess.PIPE, stderr = subprocess.PIPE ) is throwing broken pipe exception on .communicate()?
12:47  bob2: don't use shell=True
12:47  bob2: gnome-terminal probably closes all those
12:47  Taos: if I take the shell = True out it still excepts with a broken pipe
12:48  Juhaz: it's also single-instance, so that doesn't usually do anything other than send a signal to the running terminal process and quit, unless it's the first gnome-terminal you're starting
12:48  bob2: sure
12:48  bob2: what you trying to do?
12:48  Taos: spawn a terminal and feed it commands
12:49  Juhaz: you can't feed commands to terminal that way
12:49  Taos: oh
12:49  aberceanu: NelleV: this is what i came up with --> http://paste.pound-python.org/show/723/
12:50  Juhaz: why do you want a terminal?
12:52  Taos: Juhaz: not entirely sure, Im trying to help someone else: http://www.python-forum.org/pythonforum/viewtopic.php?f=1&t=22635
12:53  bob2: I love how people post contextless questions like that
12:54  bob2: "I'm trying to achieve some goal, but I won't tell you waht it is.  Instead, here is my non-working half baked solution."
12:56  Taos: Eh I just try my hardest to help
12:56  Juhaz: indeed
12:56  Taos: but I was wondering why I get broken pip... could it be im calling it through ipython causes it?
12:56  Juhaz: well, you can't do a very good job at helping if you don't understand the goal
12:56  bob2: sure, not criticising you :)
12:56  d1b: you need to ask "why"
12:56  d1b: why why why why
12:56  bob2: yes calling it through ipython will probably break it
12:56  Taos: ghm
12:57  Juhaz: you get a broken pipe because the terminal doesn't read anything through the stdin and closes that pipe
12:57  Taos: time to get to vim :P
12:58  d1b: Taos: the post looks like they just wanted to exec a command
12:58  d1b: and not really get a terminal
12:58  Taos: I think they want to push different commands to different terminals
12:58  d1b: i don't
12:59  d1b: read further down they want the output and the return value
12:59  d1b: i haven't seen anything about "oh and i want the terminal pop up and go blue"
12:59  Taos: mhm
13:01  Juhaz: theoretically he might want to do that in a terminal for escape code handling, but guessing is pointless
13:03  MrSamuel: how do I install python packages
13:03  MrSamuel: e.g. gem install package-name
13:04  hopthrisC: depends
13:04  MrSamuel: on what?
13:04  hopthrisC: if you were on debian, for example, you maybe wanted to use apt
13:05  MrSamuel: it has to work on all platforms
13:05  hopthrisC: then there's easy_install and pip
13:05  flupke: hi, is there a way to copy a function object ?
13:05  ivan`: why copy a function object?
13:05  matti: :)
13:07  flupke: ivan`, because of a problem I have with TG2 (it stores methods decorators in an attribute of decorated methods)
13:08  bob2: be more specific
13:09  Taos: I <3 pip
13:09  flupke: I made a generic base class that applies decorators dynamically at subclasses init time (to expose methods in the URL tree, apply validators, etc...)
13:10  Taos: I still dont fully get decorators
13:11  ivan`: flupke: since I don't think #python can stop the horror, functools.partial(func)
13:11  flupke: but it caches the decorator in functions (func.decoration = DecoratorClass()), and as I'm always decorating the same base function, the
13:11  flupke: the last class overrides the decorations for all other classes ...
13:12  ivan`: don't write software like that
13:12  flupke: ivan`, yes that's quite horrible but not my fault
13:21  flupke: ivan`, functools.partial() doesn't work for creating methods (it doesn't get im_class and other method attributes set like a real function does)
13:21  Habbie: using Construct, say i have constructs v4_header and v6_header and i want to create a construct ip_header that will automatically pick the right one. how do i 'peek' at the first 4 bits?
13:21  flupke: ivan`, it should work with a lambda though, thanks for the idea
13:21  bob2: does that matter?
13:22  lvh: ... but a lambda won't get that either.
13:24  Nazcafan: hello
13:24  Habbie: hmm, apparently there is Peek
13:24  lvh: Habbie: He's already left
13:24  Habbie: lvh, who left? i was responding to my own question
13:24  bob2: Habbie was answering him/herself
13:24  Nazcafan: what does == operator test in python?
13:24  bob2: Nazcafan: equality
13:24  kerio: Nazcafan: equality
13:24  lvh: Habbie: Oh, sorry.
13:24  Habbie: lvh, np
13:24  Nazcafan: (is it as in Java or as in C++)
13:25  lvh: Nazcafan: No.
13:25  kerio: Nazcafan: __eq__
13:25  Nazcafan: mhh ?
13:25  kerio: if the programmer who wrote your object is a dick, it can be anything
13:25  lvh: Nazcafan: Python's == is like Java's equals.
13:25  kerio: for builtin types, it checks for equality
13:25  Nazcafan: and for classes?
13:25  lvh: Nazcafan: C++ and Java's == has nothing to do with equality. It's about identity.
13:25  lvh: Well, in c++, who knows
13:26  Nazcafan: lvh, in C++, it's user defined
13:26  lvh: Nazcafan: Well, yes, that's what I'm saying.
13:26  bob2: Nazcafan: == in python tests whatever == for the things you are comparing is defined as
13:26  Nazcafan: lvh, how do I write classes in python so operator == makes sense?
13:27  bob2: by implementing __eq__
13:27  lvh: Nazcafan: You define __eq__(self, other):
13:27  lvh: Nazcafan: Or, preferably, you use twisted.python.util.FancyEqMixin
13:27  papna: Meh.
13:27  lvh: Unless you already know what return NotImplemented does in __eq__ and what sort of type checks are okay
13:27  Nazcafan: what happens is no __eq__ is provided with a class and == is called on two instances?
13:27  lvh: Nazcafan: Identity.
13:27  papna: Nazcafan: It defaults to identity.
13:27  Nazcafan: aaaah
13:27  Nazcafan: here we go, thanks a lot
13:28  Nazcafan: now I feel less stupid
13:28  kerio: hmm, is there __req__?
13:28  lvh: kerio: No, tthat's why you should use FancyEqMixin
13:28  kerio: huh?
13:28  lvh: 13:27 <lvh> Unless you already know what return NotImplemented does in __eq__
13:29  papna: kerio: It's called __eq__
13:29  lvh: kerio: Check what return NotImplemented does, and you'll know why there isn't a __req__ like there is a __radd__ and friends :-)
13:29  kerio: lvh: hmm... defaults to identity?
13:29  kerio: you just said so
13:30  papna: kerio: No, identity is only if there is no __eq__ defined.
13:30  kerio: to be fair having == not commutative would be a huge wtf
13:30  Nazcafan: aahhh worked, thanks a lot
13:30  papna: kerio: And in Python, almost impossible.
13:31  kerio: papna: huh? foo == foo works with my class with __eq__ that returns NotImplemented
13:31  papna: kerio: Right. It checks foo twice, I mean.
13:31  papna: kerio: I expressed that very poorly.
13:32  kerio: but i wanted an object that was equal to None from the left and different to None from the right :(
13:32  papna: kerio: I meant that lvh's message was if foo.__eq__(foo, bar) returns NotImplemented, it tries bar.__eq__(bar, foo)
13:32  papna: kerio: Errrrrr, except making more sense.
13:32  papna: kerio: I've been up five minutes.
13:32  Nazcafan: is there a do … while() in python?
13:32  papna: I'll be back some time after coffee.
13:32  Habbie: Nazcafan, no
13:32  papna: Nazcafan: Nope.
13:32  Nazcafan: ah ok
13:33  Nazcafan: I'll make do
13:33  lvh: Oh for fucks sake
13:33  lvh: Why did I have to go and tell kerio about NotImplemented
13:33  kerio: lvh: because i don't work as a programmer and you'll never have to debug my code anyway
13:33  kerio: not to mention that i won't actually use that
13:34  Habbie: kerio, if i had a dollar for every time somebody said that to me .. :)
13:34  kerio: you'd have one dollar?
13:35  Habbie: kerio, about $2.50 really
13:37  aberceanu: how can i see what the bottleneck (in terms of speed) of my program is?
13:38  kerio: profile
13:40  papna: aberceanu: http://docs.python.org/library/profile.html
13:40  aberceanu: kerio, papna: tnx
13:40  bob2: Nazcafan: even while loops are fairly rare in python
13:40  bob2: Nazcafan: for loops are much much more common
13:41  Nazcafan: what's the opposite to ==?
13:41  bob2: != and <>
13:41  Nazcafan: if I have defined __eq__, do I also need to define something in order to get != ?
13:42  lvh: ew, forget <> exists
13:42  lvh: Nazcafan: Maybe! I already told you about FancyEqMixin right
13:42  bob2: hey, gone in 3.x and GREYFACE
13:42  lvh: Nazcafan: the method is __ne__, but you don't always have to define it for it to work
13:43  lvh: Nazcafan: http://docs.python.org/reference/datamodel.html#object.__eq__
13:45  kerio: lvh: what about functools.total_ordering()?
13:46  lvh: kerio: what about it
13:46  kerio: isn't it... better than FancyEqMixin?
13:46  kerio: it's just a little longer
13:46  lvh: kerio: "better"?
13:46  kerio: but works for new-style classes
13:46  lvh: It does a completely different thing
13:47  kerio: and gives ordering, yeah
13:47  lvh: FEM works fine for new-style classes if you know what you're doing :-)
13:47  sphenxes: Does delete() function exit in  (Python 2.6, Tkinter)?
13:47  lvh: (super, not so much)
13:47  NelleV: aberceanu: does it work, or did someone help you debug ? (sorry I was away)
13:47  lvh: class FancierEqMixin ;-)
13:48  aberceanu: NelleV: it works :)
13:48  NelleV: aberceanu: good :-)
13:50  yury: I am running into a few bugs, probably stemming from a lack of understands. Why does this not work? eval("foo(3)", {"a": 5}, {"foo":lambda x: x + a})
13:51  yury: *understanding
13:51  SpComb: yury: not work?
13:51  SpComb: yury: show error :)
13:51  yury: when foo is called, a is not found, but shouldn't it be found in globals
13:51  yury: SpComb: open a console :P
13:52  SpComb: yury: presumeably the lambda there is evaluated within your actual gobals context
13:52  SpComb: yury: not inside the eval()
13:52  bob2: oh eval
13:52  SpComb: yury: and besides, eval is evil etc.
13:53  yury: yes, yes, I know, but kind of necessary for what I am doing
13:53  j_m_z_b: hey i was wondering if anyone would find taking a look at some code for me. I'm trying to login to to a forum using urllib2 and cookielib.I
13:53  j_m_z_b: http://jaymuhz.com/code/read_web/read_web.txt
13:53  kerio: lvh: let's write a FancierEqMixin!
13:54  j_m_z_b: it might be the login_data that is causing the problem
13:54  j_m_z_b: which if it is, i can figure it out myself
13:54  yury: alright, let's forget the lambda, suppose I want to define a function with reference to a global variable which may be set based on context supplied later. Is this possible?
13:54  j_m_z_b: but i ws just wondering if the login_data is correct, is there any problems in that scan_posts() fucntion?
13:55  bob2: yury: what is it that you're doing?
13:55  joenp: j_m_z_b: What kind of error ar you getting?
13:55  bob2: 'twill' and 'mechanize' exist already, btw
13:56  yury: bob2: passing code over rpc
13:56  j_m_z_b: joenp: i'm not getting an error as such, it's just the content of forum_page is just the 'you need to login' page for the site
13:56  bob2: yury: heh
13:56  yury: I want to compile code, marshal it, pass it to another instance over the network, and evaluate on a varying set of globals/locals
13:56  j_m_z_b: so it is probably that i am not using the right form values or summin, just wanted to check i was using cookielib with urllib2 correctly
13:56  yury: and, well, it works, but I have some... quirks which I cannot seem to understand
13:57  j_m_z_b: twill and mechanize do way more than i need
13:57  j_m_z_b: since this is the only form i need to deal with
13:57  sphenxes: I am getting an invalid syntax in my program can anyone help please. (python 2.6, Tkinter). http://paste.pound-python.org/show/724/
13:57  yury: when I pass a globals dict to eval, it works fine. If I pass an additional locals dict, stuff freezes, breaks, and other stuffs
13:57  yury: behavior is erratic at best
13:57  bob2: sphenxes: you forgot to include the exception
13:57  j_m_z_b: sphenxes: whats the exact error?
13:58  bob2: sphenxes: but check all your parens match up etc
13:58  joenp: j_m_z_b: Sorry, not familiar with the use of those :(
13:58  j_m_z_b: no prob
13:59  j_m_z_b: sphenxes: file.write("%s\n" % address.get("1.0", END)
13:59  j_m_z_b: needs another ) at the end
13:59  bob2: sphenxes: in particular, when you get a syntax error you don't understand, check the line before the line mentioned in the traceback
14:00  sphenxes: bob2, thanks
14:01  sphenxes: j_m_z_b, thanks
14:01  j_m_z_b: np
14:02  joenp: I'm playing around with a card game online, and using sessions. The ID of the card is part of a link , but I need some ideas of how to retrieve the correct Card instance based on that string. I guess sending the object reference in GET is a bad idea. Any suggestions?
14:03  lvh: joenp: UUIDs.
14:03  lvh: (And a mapping of them to actual cards)
14:03  ukwiz: is there a way of finding what ports are open on my router?
14:04  Habbie: ukwiz, nmap comes to mind. not a python question.
14:04  yury: This does not work: eval("foo(3)", {"a":3}, g)
14:04  yury: but this does: g["a"] = 3; eval("foo(3)", g)
14:05  joenp: lvh: How is that different from say, having an ID such as 2C for 2 of clubs?
14:05  yury: why doesn't eval upon failing to find 'a' in g, look in the globals?
14:05  yury: something about function closures I don't understand?
14:05  ukwiz: Habbie: I was looking for a python way
14:06  papna: yury: No, the passing of globals to eval is to hide your actual globals.
14:06  papna: yury: It's a highly incomplete attempt at security.
14:07  crashanddie: ukwiz, well, you're probably better with nmap, however, note that if there is nothing listening on a specific port, you probably won't be able to detect whether it's open or not
14:08  ukwiz: I am trying to write a program to set up port forwarding on my router, also checking what ports might be already open
14:08  yury: I was under the impression if a variable is not found in the function context, it looks in the globals of the parent
14:09  kerio: yury: don't use eval
14:10  crashanddie: ukwiz, then simply implement webpage scraping from your router and connect through HTTP
14:10  yury: kerio: please, an alternative then
14:11  kerio: alternative to what
14:11  yury: papna: I see, but are those not visible in the context of the expression being evaluated?
14:11  yury: to eval
14:11  yury: If I am not supposed to use it, what am I supposed to use?
14:11  crashanddie: depends on what exactly you're trying to achieve
14:12  yury: passing and EVALuating code over rpc
14:12  crashanddie: that wouldn't really be RPC, wouldn't it? More like remote execution :P
14:12  yury: over RPC
14:12  yury: the RPC is already in place
14:12  crashanddie: yes yes yes, just joking
14:12  papna: yury: Rather than running arbitrary Python, it is highly recommended to do real RPC on a defined set of operations.
14:13  papna: yury: Using AMP or JSON-RPC or something.
14:13  yury: papna: this is supposed to be arbitrary code
14:13  yury: not RPC
14:13  papna: yury: Sounds insecure!
14:13  yury: RPC is the transfer protocol
14:13  yury: papna: I have some stuff to work out, but at the moment is it using HTTPS and auth digest
14:13  crashanddie: yury, and where is your global var coming from? The same RPC source?
14:14  papna: yury: Who's sending the code and why?
14:14  yury: crashanddie: yes
14:14  crashanddie: yury, so why not simply eval the same var?
14:14  yury: me, and to distribute code to compute nodes
14:14  yury: the idea is, I can push code to a node, and later push different sets of data across
14:15  papna: yury: THis isn't traditionally how code is transferred from point to point, not least because evalling is so limited.
14:15  crashanddie: yury, so I'm guessing you get the dict through a serialised interface?
14:15  yury: I would use the python multiprocessing module, except I already stated this before that was available, and the other machines do not have 2.6
14:15  yury: crashanddie: yes
14:15  papna: yury: You can install that module on pre-2.6 Pythons.
14:15  yury: I pickle the dicts and marshal the code
14:15  crashanddie: yury, which means that you get a string of code to execute, and every single variable that code relies on separately?
14:16  crashanddie: hmm
14:16  papna: yury: You are welcome to make a dict of your own involving both globals() and the contents of your current g dict.
14:16  yury: papna: aware, but my code works, I just am trying to understand a few things
14:16  crashanddie: couldn't you serialise the variables as well?
14:16  yury: crashanddie: no
14:16  papna: yury: If you say so.
14:16  yury: papna: I'm sorry, I didn't understand that
14:16  yury: 08:16 < papna> yury: You are welcome to make a dict of your own involving both  globals() and the contents of your current g dict.
14:17  yury: crashanddie: I do serialize them
14:17  ukwiz: crashanddie: I wanted to be able to test "from the outside world" and compare with what my router thinks
14:17  crashanddie: ukwiz, not easily possible
14:18  yury: at the momemt, I set globals = {} and eval(code, globals, None), and it works
14:18  yury: I am happy with that, but if I attempt to introduce locals as a separate dictionary, it breaks
14:18  yury: I would like to understand why
14:18  crashanddie: ukwiz, basically, opening up your router's interface to the outside world is a massive danger -- you could setup a proxy process that runs inside your network to display the information
14:19  yury: in the first case, everything that is computed is dumped back into globals, in the second case, it should be kept in a separate dictionary
14:19  yury: but that seems to break stuff, and I am not sure why
14:21 --- jzacsh is now known as jzacsh_
14:22  tombee: Anyone awake that has done constraint programming in python or used constraint-python? :)
14:34  Taos: How can I print "%ENV_VAR%" without it printing a ENV_VAR?
14:36  Taos: escaping it does not work
14:36  bob2: %%
14:36  Taos: Nope
14:36  Taos: Tried that
14:37  bob2: yes
14:37  bob2: oh, only needed when otherwise it would do something
14:38  bob2: print "%ENV_VAR%"
14:38  Taos: I tried print "%ENV_VAR%" and still got my env_var
14:39  yury: %%ENV_VAR%%
14:39  bob2: anyway, print "%ENV_VAR%" prints %ENV_VAR%
14:39  yury: are you % subsituting?
14:39  yury: >>> print "%%ENV_VAR%%%s" % "foo"
14:39  yury: %ENV_VAR%foo
14:40  yury: or a dict or whatever on the other side
14:50  papna_: Taos: Are you hoping to substitute an ACTUAL environmental variable?
14:51  Taos: I just want to print the string "%ENV_VAR%
14:52  papna_: Taos: That's what ```print "%ENV_VAR%"``` does
14:52  ccxCZ: is windows cmd substituting that?
14:53  Taos: but for some reason its printing out the actual %ENV_VAR%
14:53  papna_: Taos: That's not what "print '%ENV_VAR%'" does
14:53  Yhg1s: Taos: yes, because that's what 'print "%ENV_VAR"' does
14:53  papna_: Taos: You're leaving something out.
14:53  Yhg1s: Taos: if you want to print the value of an environment variable, you have to fetch it yourself. Just like 'echo' would do.
14:54  Taos: I dont want what IS  %ENV_VAR%
14:54  papna_: Taos: Do you want to put the *ACTUAL* environment variable in, or the string you're showing us?
14:54  Taos: That string
14:54  Yhg1s: Taos: perhaps you should pastebin what your'e doing and how, and the result you're getting.
14:54  ccxCZ: Taos: example snippet and expected output please
14:54  papna_: Taos: that's what ```print "%ENV_VAR%"``` does
14:54  papna_: Taos: There's something you're not telling us.
14:58  ChaoticMind: Hey. I'm trying to use subprocess.check_output(). the documentation says that it can raise CalledProcessError exception which will have the return code in the "returncode attribute". How do I access it?!
14:59  ChaoticMind: How do I access the returncode attribute*. I tried subprocess.CalledProcessError.returncode or subprocess.CalledProcessError.__getattribute__('returncode'), both didn't work..
14:59  papna_: ChaoticMind: except subprocess.CalledProcessError as e: e.returncode
14:59  papna_: ChaoticMind: Forget that you know that __getattribute__ exists.
14:59  ChaoticMind: hmm, ok. thanks. I'll read more on why we need to alias it to e..
15:00  papna_: ChaoticMind: You're not aliasing it as e. When you do "except FooError as e", FooError is the class of the exception (which never changes) and e is where you save the specific instance of the exception.
15:00  papna_: ChaoticMind: It's the difference between "list.append" and "some_actual_list.append"
15:00  ChaoticMind: ah, i see. Got it, thanks.
15:05  kdefreak: How can I check if a variable is an IP rather than a hostname?
15:05  Nazcafan: is there an easy way to save a python object to a file and recover it?
15:05  kdefreak: So it should match "number.number.number.number".
15:05  Nazcafan: something like serialization?
15:06  papna_: Nazcafan: There's plenty of stuff for serialization.
15:06  papna_: Nazcafan: You can convert to JSON using the stdlib json module.
15:06  Nazcafan: json?
15:06  papna_: Nazcafan: And you can use sqlite, which is also in the stdlib.
15:06  papna_: Nazcafan: Yeah.
15:06  papna_: http://docs.python.org/library/json.html
15:06  papna_: http://json.org/
15:07  ChaoticMind: kdefreak, you can use this: http://pastebin.com/BaHnsqxF
15:07  infobob: http://paste.pound-python.org/show/726/ (repasted for ChaoticMind)
15:07  papna_: Nazcafan: some people will tell you about a thing called pickle, which is insecure, unperformant, and sometimes wrong. I don't recommend using it.
15:07  kdefreak: ChaoticMind: Thank you :)
15:07  Nazcafan: papna_, thank you
15:07  kdefreak: ChaoticMind: Uh, I'm not an expert, but, what does it return?
15:08  ssbr: kdefreak: regular expressions woo
15:08  ssbr: actually, no
15:08  ssbr: regexps aren't good enough
15:08  ssbr: just try to convert them all the numbers, and make sure none of them exceed 255
15:08  kdefreak: How do I convert it to a number (int?)?
15:08  kdefreak: It is like:
15:08  kdefreak: try:
15:09  kdefreak: new = convert_to_num(variable)
15:09  papna_: Nazcafan: There's also built-in serialization stuff for various libraries. (for example numpy arrays serialize themselves in a special way)
15:09  kdefreak: except:
15:09  kdefreak: didn't work
15:09  kdefreak: ?
15:09  ssbr: kdefreak: int(var)
15:09  ssbr: and don't ever use a bare except
15:09  ssbr: except ValueError: ...
15:09  kdefreak: I see
15:09  kdefreak: But I should have try and except?
15:09  ChaoticMind: kdefreak, it returns true/false.
15:09  kdefreak: ChaoticMind: thanks
15:09  kdefreak: I'll try both
15:09  ssbr: kdefreak: yes
15:10  Nazcafan: papna_, na, I need to save a list of objects, actually, not using scipy
15:10 * ssbr missed the paste
15:10  ssbr: um, wtf
15:10  ssbr: kdefreak: don't use that unless you can actually understand it
15:10  ccxCZ: Nazcafan: what objects do you need to save?
15:10  ssbr: It's longer than the int() solution, and it's less readable
15:11  ssbr: it has basically no advantages :/
15:11  Nazcafan: ccxCZ, homemade, basically they contain 2 or 3 integers and a list of strings
15:11  Nazcafan: all of the same type
15:11  Nazcafan: ccxCZ, and i have many many objects like that
15:11  kdefreak: ssbr: oh ok
15:12  kdefreak: ssbr: http://pastebin.com/RrGddsXK
15:12  infobob: http://paste.pound-python.org/show/727/ (repasted for kdefreak)
15:12  kdefreak: ssbr: would that be ok?
15:12  ccxCZ: Nazcafan: json, YAML and bencode provide serialisation for basic types like dicts, lists, strings etc.
15:12  ssbr: kdefreak:
15:12  ssbr: not how I would do it
15:12  Nazcafan: ccxCZ, so I have to define my serialization for my object using the basic bricks?
15:13  ccxCZ: Nazcafan: that's probably most reasonable solution actually
15:13  ssbr: I'd do something like try: all(x < 255 for x in possible_ip.split('.'));; except ValueError: return False else: True
15:13  kdefreak: oh
15:13  kdefreak: I'll try to understand that :)
15:14  ccxCZ: Nazcafan: I think there is some candy syntax in YAML that allows arbitary python objects though
15:14  yury: alright, I narrowed it down. Can someone please explain this to me: http://paste.pound-python.org/show/728/
15:14  Nazcafan: ccxCZ, Ok, I'll shoot some 3 face dice to decide between the different solutions :-)
15:14  yury: only difference is l = {} vs l = None
15:15  ccxCZ: Nazcafan: YAML (human friendly), bencode (computer/parser friendly), json (popular with web crowd)
15:15  Nazcafan: ccxCZ, I'll go with YAML, then, since I'm a mere human
15:15  ssbr: ccxCZ: bencode is basically useless
15:16  ccxCZ: json is actually well-formed javascript and any valid json is also valid YAML (from v. 1.2 iirc)
15:16  ssbr: (unless you're doing torrent stuff)
15:16  ccxCZ: ssbr: why would it be any worse than json?
15:17  ssbr: ccxCZ: fewer libraries to support it, fewer datatypes
15:18  ccxCZ: ssbr: both have good support in any decent language and bencode is trivial to extend if you really wanted to
15:18  ssbr: ccxCZ: a custom extension of bencode is absolutely worse than standard JSON
15:18  Wild_Cat: also, json is in the stdlib.
15:19  ssbr: ccxCZ: and good, maybe, but still worse.
15:19  Wild_Cat: bencode and yaml aren't.
15:19  ssbr: far worse, actually.
15:19  yury: what about overhead?
15:19  ssbr: yury: the thing about serialization code is that it is trivial to swap out if you change your mind later
15:19  ssbr: yury: so you can just do whatever is easiest, and if it isn't fast enough, switch to something else
15:20  ssbr: (profile-guided optimizations help here)
15:20  ccxCZ: I assume he asked about data size
15:20  Wild_Cat: yury: chances are all solutions will be IO-bound anyway
15:20  yury: bencode is significantly smaller, if I recall
15:20  ssbr: Ah, data size? very few people care about that
15:20  ssbr: at least, enough to use bencode
15:20  yury: apparently bittorrent does
15:21  yury: and mkv does
15:21  ssbr: yury: json didn't exist when bittorrent was created
15:21  ssbr: yury: anyway, I'm thinking more about, say, the way AJAX code tends to work
15:21  ssbr: and especially if you're storing on disk it isn't a concern
15:22  ccxCZ: what about raw strings?
15:22  yury: if you are storing on disk, sure, but chances are you are serializing to send over the network
15:22  ssbr: Do you mean bytestrings?
15:22  yury: if you are storing on disk, you may as well use XML
15:22  ssbr: yury: chances are for who?
15:23  ssbr: yury: for network stuff mostly I use an existing RPC/etc. mechanism, so I never have to deal with serialization directly. The libraries I use, use more compact formats than bencode.
15:23  ccxCZ: bencode has native bytestrings (netstrings actually) and YAML has the base64 stuff
15:23  ssbr: yury: and for disk, no, because XML is bad for the kinds of data most people use
15:23  ajf: Hi. What is the equivalent of this C declaration in python? I'm really confused about it: int myarray[5][5][5]
15:23  ccxCZ: in json you'd have to store array of bytes or something
15:23  ssbr: ccxCZ: sure, YAML and JSON are less convenient for bytestrings, all other things being equal
15:23  ssbr: ccxCZ: No, you'd use base64.
15:23  yury: oh? and how is json better? binary blobs are binary blobs any way you look at them
15:24  ssbr: yury: than XML? Mostly just by natively supporting dicts honestly.
15:24  ccxCZ: ajf: you don't really declare in python
15:24  yury: fair enough
15:24  ajf: yes
15:24  ajf: but
15:24  ssbr: yury: otherwise XML is just more verbose.
15:24  ajf: how can I create an array that's 5x5x5?
15:24  ssbr: (and they are otherwise equivalent)
15:24  ccxCZ: ajf: you have to fill it with values
15:24  ajf: how?
15:25  ccxCZ: ajf: but note lists in python are variable width, so you might not to do that
15:25  yury: [[[0 for i in range(5)] for i in range(5)] for i in range(5)]
15:25  ssbr: ccxCZ: conversely, of course, json and yaml are much better for unicode
15:25  WolfSage: A threading question if you all don't mind: I've written a module for Python2.5 in C that provides a single method to do some efficient string parsing. The method behaves 50% faster than the python equivalent I have. However, once I use it in a class derived from threading, it performs far worse than the python implementation. Any obvious things I may be missing?
15:25  cce: if you want binary stuff, just use pickle?
15:25  yury: ajf: that ^
15:25  ajf: ok
15:25  ssbr: cce: huh?
15:26  teratorn: pickle is kinda crappy
15:26  ccxCZ: ajf: a = [[[ 0 for x in xrange(5)] for y in xrange(5)] for z in xrange(5)]
15:26  Wild_Cat: WolfSage: does your C module release the GIL during its pure-C number-crunching ops?
15:26  yury: what is the generator overhead?
15:26  ajf: ccxCZ: why xrange?
15:26  yury: xrange might be slower here
15:27  ccxCZ: true, just kind of used to that
15:27  yury: or make no difference whatsoever
15:27  WolfSage: Wild_Cat, no. How do I go about that?
15:27  yury: ajf: range(5) creates [0, 1, 2, 3, 4]
15:27  ajf: yes
15:27  yury: ajf: xrange(5) creates a generator to output those
15:27  ajf: ohh
15:27  ajf: ok
15:27  yury: it saves memory by not creating it ahead of time
15:27  Wild_Cat: WolfSage: search the C API docs for "GIL release". I don't remember exactly, sorry ;)
15:27  ssbr: yury: xrange doesn't return a generator
15:27  WolfSage: I read up about the GIL and how it locks during most C system calls, but I can gaurantee my method will never be working on data that requires real thread safety
15:28  WolfSage: Alright, I'll see what I find
15:28  yury: oh?
15:28  ssbr: yury: it returns a lazy sequence. which is actually different (it's a legitimate sequence-- xrange(50)[3] returns 4)
15:28  ccxCZ: right, it's an iterator, not generator
15:28  yury: interesting, it is its own type
15:28  ssbr: it isn't an iterator either
15:28  yury: >>> type(xrange(5))
15:28  yury: <type 'xrange'>
15:28  ssbr: (xrange(50).next() will fail)
15:29  teratorn: it is /so crazy/
15:29  ajf: huh
15:29  ssbr: yury: all of the built-in iterators are their own types
15:29  kerio: because xrange is not an iterator
15:29  kerio: it's an iterable
15:29  ssbr: (because there's no benefit to reusing the generator type in C)
15:29  yury: anyway, some want to take a look at my code?
15:30  ssbr: yury: what code?
15:30  ssbr: kerio: things I said!
15:30  yury: it is prolly something very simple, but I just do not understand how eval works
15:30 --- ajf is now known as ajfAFK
15:30  yury: http://paste.pound-python.org/show/728/
15:30  kerio: yury: don't use eval
15:30  yury: kerio: enough already, you offer no alternatives
15:31  pen: how do I serialize an obj in python?
15:31  WolfSage: Wild_Cat, you weren't thinking Py_BEGIN_ALLOW_THREADS  were you?
15:31  kerio: alternatives to what?
15:31  yury: to eval
15:31  yury: I need to pass code around
15:31  xota: hi! I've done this miniexplorer to a linux distribution: https://github.com/agonzalezro/minex but I have problems opening file:///, this is the traceback: http://pastebin.com/7Hz5iMw0
15:31  infobob: http://paste.pound-python.org/show/730/ (repasted for xota)
15:31  ccxCZ: yury: do you?
15:31  yury: and I need to run arbitrary code
15:31  kerio: pass a function then
15:31  yury: across a network
15:31  kerio: and you're using eval?
15:31 --- ajfAFK is now known as ajf
15:31  yury: I cannot pass a function across the network
15:31  kerio: you *enjoy* having your systems compromised?
15:32  yury: kerio: I can look after my own systems, thank you
15:32  Wild_Cat: WolfSage: correct. Note that between this and Py_END_ALLOW_THREADS, your code must not touch any Python data structures (PyObject*). Otherwise, you will crash the program.
15:32  ssbr: yury: there are distributed computing frameworks that let you pass functions over a network
15:32  yury: many ways, message authentication included, of assuring you don't run random code
15:32  ssbr: I believe execnet does that, for example
15:32  kerio: fwiw pickle lets you serialize functions
15:32  teratorn: bytes go over networks not objects
15:32  yury: ssbr: this is my own implementation
15:33  pen: kerio, hmm
15:33  ssbr: yury: of execnet?
15:33  kerio: but yeah, don't use pickle either
15:33  WolfSage: Wild_Cat, hrm. I tried using that and noticed  no performance increase
15:33  teratorn: ssbr: so what it is you are saying is a lie
15:33  yury: ssbr: of a framework
15:33  ssbr: teratorn: which part?
15:33  yury: kerio: I'm sure pickle would choke on the first function that used anything remotely complicated
15:33  ssbr: yury: right, so you can reuse the parts of execnet that are relevant
15:34  ssbr: or reuse execnet in its entirety, if it's compatible with your thing.
15:34  teratorn: ssbr: *yawn*
15:34 --- ajf is now known as ajfAFK
15:34  ssbr: teratorn: I dunno, it's like saying "no, you don't communicate over a network, you send bytes"
15:34 --- ajfAFK is now known as ajf
15:34  ssbr: teratorn: there are useful abstractions to be had on top of protocol
15:34  teratorn: I was just trying to be argumentative
15:34  ssbr: I play networked games, I don't send packets
15:34 --- edulterado_ is now known as edulterado
15:35 --- ajf is now known as ajfAFK
15:35  lokai: I am using configparser to parse a config file. The user can input paths in any format he wants, including ~/, and with(out) a trailing "/". What is the best way to normalize these possibilities?
15:35  yury: alright, I really don't care about what method code gets transferred
15:36  teratorn: sending packets can be a fun game, though
15:36  yury: I wrote something, it works fine
15:36  papna_: lokai: os.path has stuff for expanding ~ and normalizing Paths.
15:36  yury: I jsut want to know why that bit of code I pasted does not work
15:36  kerio: lokai: os.path.expanduser
15:36  yury: that's all
15:36  lokai: k, thanks papna_ and kerio
15:36  yury: and I don't much care to hear why I shouldn't use eval
15:36  ccxCZ: yury: you need exec instead of eval in that code
15:36  kdefreak: ssbr: http://pastebin.com/TvTT7W13
15:36  infobob: http://paste.pound-python.org/show/731/ (repasted for kdefreak)
15:36  yury: why?
15:36  kdefreak: ssbr: does that look correct?
15:36  yury: why does that particular bit fail?
15:36  yury: what does the local=None vs locals={} do?
15:37  ccxCZ: yury: because eval evaluates expressions only
15:37  yury: really?
15:37  ssbr: no
15:37 * yury begs to differ
15:37  yury: "This function can also be used to execute arbitrary code objects (such as those created by compile())."
15:37  WolfSage: I guess I'll experiment with it later some more and see if I can figure out what I'm doing wrong.
15:37  WolfSage: Thanks Wild_Cat.
15:37  ssbr: I'm curious about the problem too
15:38  yury: :D
15:38  ccxCZ: hmm, hmm..
15:38  ssbr: yury: basically the reason it fails is that foo is not a closure, and its locals lack a
15:38  Wild_Cat: WolfSage: yeah, sorry I can't help you much more than that ;)
15:38  WolfSage: No worries :)
15:38  yury: hm...
15:38  ssbr: yury: whereas a is defined as a local variable above, meaning it should, at least ideally, be added to foo's closure variables
15:38  papna_: yury: Local variables can't be created on the fly.
15:38  ccxCZ: yury: try it with exec, it might be a bug
15:38  yury: papna_: what does that mean?
15:39  papna_: yury: When you give it {}, it doesn't believe "a" can ever exist.
15:39  yury: hm...
15:39  yury: I see
15:39  yury: so then locals can never be modified...
15:39  yury: which is not true
15:39  yury: because the code does add 'a' to locals
15:39  ssbr: oh, right
15:39  yury: l = {}
15:39  yury: eval(compile("a = 5", "", "exec"), g, l)
15:39  yury: that puts 'a' in 'l'
15:40  yury: from that point on, a \in l
15:40  ssbr: papna_: no, wait, he gives dict(a=5) to the code when it executes the function definition
15:40  yury: how does python know that 'a' is never meant to be in l?
15:40  papna_: ssbr: Oh.
15:40  ssbr: maybe it's just that the compiler doesn't see a when it compiles that? except eval(compile("a = 5\ndef foo(): return a\nprint foo()", "", "exec"), g, l)
15:40  ssbr:  doesn't work either
15:41  ssbr: very curious
15:42  yury: interestingly enough, l, g and g, l do not work
15:42  yury: but g, g and l, l do
15:42  yury: which is ... mind boggling
15:42  yury: and l is empty
15:42  ssbr: yury: no it isn't
15:43  papna_: yury: Well, for executing these, you don't have a real local scope you run.
15:43  ssbr: yury: if you do g, g, then it gets added to the locals *and* the globals
15:43  ssbr: and so the global lookup doesn't fail
15:43  ssbr: yury: the problem is that it gets added to the locals, but the function foo doesn't see it
15:43  yury: yeah, symmetry
15:43  yury: meh, need sleep
15:43  Nazcafan: I am trying to handle standard input, and I can not make a trivial example work. Can someone explain me what went horribly wrong in there: http://ideone.com/NcHD8 ?
15:43  lvh: Does anyone have a favorite standard for REST pagination?
15:44  lvh: Specifically, startIndex and stopIndex, or starIndex and count?
15:44  cwillu_at_work: kdefreak, http://paste.pound-python.org/show/732/
15:44  papna_: Nazcafan: line will be something like "yes\n"
15:44  ssbr: lvh: can I pretend I've ever done REST, and say the former, based on how awesome it is everywhere else?
15:44  Nazcafan: papna, still doesn't work as expected
15:45  papna_: Nazcafan: Examine your logic then.
15:45  yury: ssbr: yeah, so the question is why foo does not see it
15:45  papna_: Nazcafan: It's rather strange.
15:45  ssbr: yury: because for some reason it isn't a closure
15:45  papna_: Nazcafan: Your message lies to the user.
15:45  yury: I guess, local is not considered part of the closure
15:45  kdefreak: cwillu_at_work: the pastebin doesn't work
15:45  kdefreak: it's just hangin
15:45  Nazcafan: papna_, it is not intentional!!
15:46  ssbr: yury: probably there is some secret criterion to things being closures, that you can't match without actually compiling it lexically nested
15:46  ssbr: or without dark magic
15:46  cwillu_at_work: kdefreak, odd
15:46  kdefreak: ok, works now
15:46  kdefreak: I'll go through those, thanks!
15:46  Nazcafan: papna_, I don't see the flaw in my logic
15:46  papna_: Nazcafan: Translate your if statement to words for me.
15:47  ssbr: yury: closures might actually be impossible to pass sensibly
15:47  ssbr: yury: execnet doesn't support them, at least
15:47  Nazcafan: if the entered line is different from yes, print a message saying " type yes when ready"
15:47  yury: alright, I think I see... when foo() is defined, its closure does not contain 'a'. When foo is called, 'a' is not found in the closure, so python looks in the globals (the locals are ignored)
15:48  ssbr: yury: Right.
15:48  Nazcafan: papna_, or am I misinterpreting?
15:48  yury: when I pass None in for l, globals and locals are the same, so the result of 'a = 5' goes into the globals, and is available for future use
15:48  ccxCZ: Nazcafan: also infinite loop
15:48  yury: should a lookup fail
15:48  papna_: Nazcafan: Oh, I had misremembered the if as "==". My apologies.
15:48  ssbr: yury: I dunno about that last part
15:48  papna_: Nazcafan: How does it not work as expected?
15:48  ssbr: I'm not sure that's how eval implements things
15:48  yury: apparently it does not look in locals
15:48  papna_: Pastbin your new code and something showing unexpected behaviours.
15:48  Nazcafan: papna, well if I type "no", I see nothing printed, for example
15:49  yury: which is bs
15:49  yury: >>> eval("b", {}, {"b":5})
15:49  yury: 5
15:49  Nazcafan: papna_, and if I type yes, i still don't see anything
15:49  Nazcafan: mmhh
15:49  papna_: Nazcafan: Do you hit enter?
15:49  Nazcafan: papna_, yes
15:50  yury: alright, so locals are ignore for 'exec' compiled code
15:50  papna_: Nazcafan: Pastebin the code you are currently running and an interpretter session where you see this.
15:50  yury: code = compile("def foo(): print b\nfoo()", "", "exec"); eval(code, {}, {"b":5})
15:50  Nazcafan: papna_, typing ctrl + D after enter seems to actually break the loop
15:50  yury: NameError: global name 'b' is not defined
15:51  ccxCZ: Nazcafan: iterating lines does buffering, use .readline() instead
15:51  papna_: Nazcafan: Right. There aren't any lines left in stdin after EOF
15:51  papna_: *line* buffering, no?
15:52  cwillu_at_work: papna_, no :(
15:53  ssbr: yury: locals of the parent are ignored by all code everywhere
15:54  ccxCZ: Nazcafan: http://paste.pocoo.org/show/307398/ this works
15:54  ssbr: yury: code looks in its own locals only. everything else is closure variables, globals, and builtins
15:55  yury: ssbr: yeah, I guess that's what is happening
15:55  lvh: is there something I missed about how slices work with __getitem__? how do I support both slicing and individual indexing (like lists and strs typically do) without typechecking?
15:55  Nazcafan: ccxCZ, I wrote this one, seems to work too: http://ideone.com/DcVTW
15:55  yury: the locals become hidden to the code
15:55  lvh: This is something that a seperate method sounds like a good idea for, really.
15:55  papna_: ccxCZ: Nazcafan: http://paste.pocoo.org/show/307399/
15:55  yury: but only when the code is exec'ed
15:55  kerio: lvh: isinstance(foo, slice)
15:55  papna_: Nazcafan: Of course.
15:55  kerio: lvh: it makes sense there
15:55  yury: when evaluating a single statment, locals are accessible
15:56  lvh: kerio: "without typechecking" ;-)
15:56  yury: this is not entirely consistent
15:56  lvh: kerio: Why does it make more sense there?
15:56  kerio: because foo[a:b:c] will *always* give you a slice
15:56  yury: but it makes some sense
15:56  aberceanu: what does replace do if it cannot find the pattern to replace in the string?
15:56  kerio: it's like checking for basestring
15:56  lvh: Yes, that doesn't make sense either.
15:56  lvh: Oh well, thanks anyway.
15:56  papna_: lvh: How would you do foo[1:3, 4:5, 2:5] with __getslice__?
15:56  cwillu_at_work: papna_, missing a line='something that's not falsy'
15:57  Nazcafan: papna_, ccxCZ thanks a lot
15:57  yury: I wish this was better documented
15:57  ccxCZ: Nazcafan, papna_: http://docs.python.org/library/stdtypes.html#file.next ...the next() method uses a hidden read-ahead buffer
15:57  kdefreak: cwillu_at_work: if I use the range-for-thing, "count" increases from 0-3, and that works, but it only adds the first part (ip[0]) in send[0]
15:57  yury: ssbr, papna_: thanks!
15:57  kdefreak: cwillu_at_work: http://pastebin.com/p78LCNdN
15:57  infobob: http://paste.pound-python.org/show/733/ (repasted for kdefreak)
15:57  kerio: papna: we only have that because the numpy guys bitched about it
15:58  lvh: papna_: Make it a variadic function that takes any number of tuples of size 1 to 3??
15:58  papna_: kerio: "Honestly needed it to improve their software", right.
15:58  papna_: lvh: Why have Python do the typechecking instead of you?
15:58  papna_: lvh: And why a variadic function and not just like a list of tuples?
15:58  lvh: papna_: First question: Huh what?
15:58  papna_: lvh: What what about foo[3:4, ..., "foo"]?
15:58  lvh: papna_: Second question: bikeshedding.
15:59  cwillu_at_work: kdefreak, that's probably because send is an empty list?
15:59  lvh: papna_: Surely we have Ellipses.
15:59  lokai: ok, how do I expand '/dir/*' to all filenames within /dir/?
15:59  cwillu_at_work: kdefreak, the latter examples will work fine;  in this case, you'd want to use send.append(int(ip[count]) and so forth
16:00  lvh: papna_: About different methods: If it's a different thing in grammar, it can ask a different method.
16:00  kdefreak: ah smart
16:00  cwillu_at_work: kdefreak, the try: except: block is catching the error and silently continuing on (as with your original :p)
16:00  kdefreak: cwillu_at_work: didn't think about that, thanks
16:00  lvh: papna_: About the example with the slice, Ellipsis and string: not enough information about what that actually means to make a sensible comment
16:00  ccxCZ: lokai: glob
16:00  cwillu_at_work: hence, don't use extraneous try: except: blocks, let the caller deal with it rather than hiding
16:00  lvh: If everything can appear everywhere it's probably just bogus.
16:00  kdefreak: ip = ['219', '139', '158', '59']
16:00  ccxCZ: lokai: http://docs.python.org/library/glob.html
16:00  lokai: thanks
16:00  cwillu_at_work: kdefreak, [int(octet) for octet in ip]
16:01  papna_: lvh: It might make sense for my type even if it doesn't make sense for yours.
16:01  kdefreak: tried that, it made send blank
16:01  papna_: lvh: I might *always* take some slices, then an elipsis, then a string.
16:01  cwillu_at_work: kdefreak, show me what you did exactly
16:01  lvh: papna_: Well, yes: why would you need typechecking in that case.
16:02  Diverdude: is it possible to store a python script in a file with no extension, like: mypyprgrm  and execute a it by just doing ./mypyprgrm when in the same folder? I tried and it did not work, but i have seen others do this. What are the correct steps?
16:02  papna_: lvh: *I* wouldn't.
16:02  kdefreak: cwillu_at_work: http://pastebin.com/hYsJekpS
16:02  infobob: http://paste.pound-python.org/show/734/ (repasted for kdefreak)
16:02  papna_: lvh: But __getslice__ wouldn't help me.
16:02  kdefreak: cwillu_at_work: I'll switch to spaces soon
16:02  ccxCZ: Diverdude: what OS?
16:02  yury: Diverdude: you need a #! line
16:02  cwillu_at_work: kdefreak, that's not what I said to do :)
16:02  lvh: If you know args[-1] is a string, args[-2] is an ellipsis, and everything else is a bunch of slices, it'd work!
16:02  Diverdude: ccxCZ, ubuntu 10.04
16:02  lvh: papna_: I'm not arguing for a reinclusion of __getslice__ as it exists now
16:02  kdefreak: oh
16:02  yury: #!/usr/bin/python for example
16:02  kdefreak: I'll try the append
16:02  Diverdude: yury, where should that line be
16:02  kerio: lvh: well, find a better way and write a PEP
16:03  yury: Diverdude: the very first line
16:03  lvh: A different one, that simply differentiates between getting a single item and getting a any collection of them as specified by slices.
16:03  kerio: i can't think of one :(
16:03  cwillu_at_work: kdefreak, that entire block can be written:  send = [int(octet) for octet in ip.spklit('.')]
16:03  ccxCZ: Diverdude: yes, the #! is the way in unices
16:03  cwillu_at_work: er, ircmsg.split('.')
16:03  papna_: how would foo[1:2, 3:4, ..., "bar"] come to __getlvhslice__?
16:03  lvh: kerio: I'll just move to factor instead
16:03  yury: then type 'chmod +x myscript' at the terminal
16:03  yury: replacing myscript as appropriate
16:03  yury: and no quotes
16:04  lvh: papna_: ((1, 2), (3, 4), Ellipsis, "bar") looks okay to me
16:04  kdefreak: cwillu_at_work: woh!
16:04  Diverdude: cool thx
16:04  kdefreak: cwillu_at_work: fantastic, it works
16:04  kdefreak: highly appreciated
16:04  kdefreak: got paypal?
16:04  cwillu_at_work: kdefreak, you understand why?
16:04  kdefreak: I do
16:04  papna_: lvh: How about foo[1:2, (3, 4), ..., "bar"] ?
16:04  kdefreak: it splits on "." and adds them after each other
16:04  kdefreak: in send[]
16:04  cwillu_at_work: not... exactly :p
16:05  yury: I wonder why I have such high lag to this server
16:05  lvh: papna_: Either the same way, or if there's a legitimate use case where those would be different, an actual slice.
16:05  lvh: papna_: (ie the slice type we have now)
16:05  kdefreak: cwillu_at_work: oh, then I don't understand it oO
16:05  cwillu_at_work: [foo.upper() for foo in bar] will call upper on each item of bar, and give you a new list back with the results
16:05  papna_: lvh: If it comes as (slice(1, 2), (3, 4), ..., "bar"), does that look....familiar?
16:05  ccxCZ: Diverdude: #!<path> as first line of file makes it script, #!/usr/bin/python or #!/usr/bin/env python
16:06  lvh: papna_: Yes, it's what __getitem__ gets called with now!
16:06  cwillu_at_work: kdefreak, i.e., it's making a new list, not adding items to an old list
16:06  kdefreak: I think I got it now, cwillu_at_work, thank you once again :)
16:06  piratecoder: looking at jython, does this allow you to compile your python source code to be used in a jvm, or does the code have to be specifically written for it? im not sure (yet) how or if the syntax is different.
16:06  Diverdude: ccxCZ, yes i made it work already, thx
16:06  papna_: lvh: Oh noes!
16:06  kebomix: what is wrong with this line rule = self.root.createElement("rule")   ?
16:06  nosklo: call .indices() on the stuff. if it answers, it is a slice object!
16:07  yury: ccxCZ: what if you env is located in /bin like on some UNIX systems
16:07  Godslastering: yury: then you rewrite it to /bin/env
16:07  yury: Godslastering: may as well just rewrite the python
16:07  Godslastering: yury: hmm?
16:07  yury: the /usr/bin/env gives a false sense of cross compatibility
16:08  Godslastering: yury: true if you want to be more compatible just run "python SCRIPT.py", though then you can run into versioning issues
16:09  yury: no, still no good
16:09  yury: freenode blows
16:11  grawity: I need to check whether an IP address belongs to a given CIDR subnet (both v4 and v6). Any module or package?
16:12  papna_: /usr/bin/env is more flexible, compatible, and usable than /usr/bin/python
16:12  kdefreak: cwillu_at_work: sorry if I'm disturbing your work, but is there any special function that flips an array so that the first value comes last and vice verca
16:12  Habbie: grawity, https://bitbucket.org/maze/ipcalc/src/4e209749422b/src/ipcalc.py
16:12  seiflotfy: hey guys
16:12  cwillu_at_work: kdefreak, take a guess what you'd call it :)
16:12  seiflotfy: i have an array of bytes
16:12  seiflotfy:        dbus.Array([dbus.Byte(97), dbus.Byte(115), dbus.Byte(102), dbus.Byte(115), dbus.Byte(97), dbus.Byte(102)], signature=dbus.Signature('y'))
16:12  seiflotfy: i want to translate into a string
16:12  Godslastering: papna_: does that support forced-versioning though? because if your script is not compatible with, python3 for example, you can simply /usr/bin/python2.7
16:12  seiflotfy: how o i do that
16:13  kdefreak: cwillu_at_work: send.flip()
16:13  cwillu_at_work: kdefreak, try a synonym
16:13  papna_: Godslastering: That's preferably spelled "/usr/bin/env python" but can be spelled "/usr/bin/env python2.7"
16:13  kdefreak: english is not my native language
16:13  kdefreak: but, swap?
16:13  papna_: Python should really make symlinks python2.5+
16:13  cwillu_at_work: okay
16:13  Godslastering: papna_: ah ok so /usr/bin/env DOES support versioning, thanks :)
16:13  ccxCZ: seiflotfy: ''.join(map(chr, <data>)) might work
16:13  khertan: Hi !
16:13  yury: kdefreak: reverse
16:13  cwillu_at_work: kdefreak, reversed(send), or send.reverse()
16:13  kdefreak: oh, ok, thanks
16:14  yury: seiflotfy: you map need to drop the last value first
16:14  papna_: Godslastering: env just means that you get what would happen if you typed "python2.7" at the command line.
16:14  grawity: Habbie: Thanks
16:14  Godslastering: papna_: oh it does, but if the default symlink is 3.1 or something, you can still use 2.7 if it isn't compatible, which is what i do for my older scripts that i dont wish to rewrite
16:14  yury: kdefreak: it does it in place, so be careful
16:14  papna_: Godslastering: What does what?
16:14  cwillu_at_work: kdefreak, reverse will modify the array, and will not return anything, while reversed will give you an iterator that lists it in reverse order
16:14  seiflotfy: wohooooooooo
16:14  papna_: Godslastering: Python doesn't make "+" symlinks
16:14  seiflotfy: ccxCZ, works
16:14  seiflotfy: thanks
16:14  kdefreak: ok, thank you
16:14  kdefreak: seems to work! :)
16:15  papna_: Godslastering: The way you run those scripts is "python2.7 foo.py".
16:15  papna_: Godslastering: Also, Python 3.x isn't symlinked as "python" in any sane environment.
16:15  Godslastering: papna_: yes, and i normally do /usr/bin/python2.7, but i guess /usr/bin/env python2.7 is safer
16:15  papna_: (arch gave up claims to sanity_)
16:15  kdefreak: this is so much better than #freebsd
16:15  kdefreak: keep up the good work
16:16  kdefreak: cwillu_at_work: is "at_work" == "at_#python"?
16:16  cwillu_at_work: no, it means I'm not getting my work done at_work :)
16:18  kdefreak: ah :)
16:19  yury: so what happens when they reach python2.9 and realize python3 is an act against humanity?
16:19  pen: I wonder if it is good to try to serialize a list of sets to json format?
16:19  yury: do they skip over to python4?
16:19  ccxCZ: pen: you won't get sets back probably
16:19  pen: hmm
16:19  papna_: yury: For one, 2.7 is supposedly end of life for Python 2.
16:20  papna_: yury: For two, it's spelled 2.10
16:20  yury: :(
16:20  yury: :(
16:20  yury: I don't like two digit minors
16:20  ccxCZ: pen: yaml has magic for this, though I'd advise writing custom deserialisation to basic types
16:20  kdefreak: uhm, another problem I seriously cannot solve:
16:21  kdefreak: threading.Thread(target=lookup(send[0] + "." + send[1] + "." + send[2] + "." + send[3] + "." + blacklists[0])).start()
16:21  kdefreak: any idea about what might be wrong? is it possible to print the error?
16:21  ccxCZ: oh no threads
16:21 * ccxCZ hides
16:21  kdefreak: it's for a bopm
16:21  yury: kdefreak: use ".".join
16:21  yury: I like threads
16:22  yury: kdefreak: try it without the thread first
16:22  papna_: yury: Why don't you like debuggable programs? Or scalable ones?
16:22  yury: papna_: threads are more scalable that extra processes
16:22  ccxCZ: can't you just use twisted
16:22  ccxCZ: ?
16:22  yury: maybe not as nice as async
16:22  yury: but still great
16:22  kdefreak: didn't work w/o the thread
16:22  yury: as for debuggable, I would say async is harder to debug
16:23  yury: kdefreak: make it work without the thread first
16:23  kdefreak: with .join?
16:23  kdefreak: like
16:23  kdefreak: send[0] + ".".join + send[1] +....
16:23  yury: no
16:23  yury: ".".join(send)
16:23  ccxCZ: yury: depending on complexity, locking is a nightmare
16:23  yury: first of all
16:23  kdefreak: oh
16:23  kdefreak: I'll read the manual
16:23  yury: ccxCZ: depends, it can be
16:23  papna_: yury: Threads are like not possible to debug.
16:24  papna_: yury: You can't control anything about how they execute.
16:24  yury: sets don't JSONize...
16:24  yury: TypeError: set(['a', 'b']) is not JSON serializable
16:24  marienz: papna_: I'm still hoping increasingly many distros will reliably have python2 symlinked to a reasonable python 2.x (so you can #!/usr/bin/env python2 and work on modern distros as well as weird ones having python symlinked to python 3)
16:24  yury: papna_: not true again
16:24  marienz: (which imho is better than specifying python2.7)
16:24  yury: you have locks, semaphones, mutexes, etc...
16:24  ccxCZ: oh well, not in a mood for flamewar :-]
16:24  yury: you can use events to trigger when things start
16:24  papna_: yury: Make a list and serialize that as a JSON array, then when you deserialize make a set.
16:25  papna_: yury: Have you maintained a large threaded program for any period of time?
16:25  yury: papna_: I was just commenting on an earlier comment
16:25  yury: but yes
16:25  yury: papna_: in python or Java?
16:25  papna_: yury: I don't care.
16:25  yury: yes for both
16:25  yury: although, not in a long long time in Java
16:25  papna_: yury: You must have done such large amounts of heroin that you forgot the experience.
16:25  marienz: heh
16:25  yury: Java makes it much easier, actually
16:26  yury: they have a nice decorator 'synchronized'
16:26  pen: hmm
16:26  pen: yaml
16:26  pen: maybe
16:26  yury: you tack that on, and you stop worrying
16:26  marienz: I haven't done enough java to know how much that helps, but I have my doubts
16:26  Biaise: Bonjour
16:26  marienz: (since you still have to think about exactly how much state you need to be "synchronized")
16:26  yury: I haven't done Java in a long time, so my memory may be a little fuzzy too
16:27  ccxCZ: yury: you should go out to dinner with philosophers, quite a nasty bunch they are
16:27  yury: ccxCZ: nice one
16:27  yury: maybe I just haven't found a good async framework for python
16:27  yury: twisted is... well... twisted
16:27  yury: and asyncore is severely lacking
16:28  Habbie: use twisted
16:28  yury: twisted lacks good documentation
16:28  papna_: Eh.
16:28  Godslastering: i agree there, yury
16:28  yury: and is not installed by default
16:28  pen: I would recommand using gevent
16:28  yury: and is huge
16:28  NelleV: yury: the official documentation isn't very good, but you can find good documentation on blogs
16:28  papna_: Twisted's documentation has its crappiness, but it's really not that bad.
16:28  yury: what's gevent?
16:28  NelleV: yury: and read the official documeantion *after*
16:29  Habbie: papna_, i really think it is that bad
16:29 --- JanC_ is now known as JanC
16:29  papna_: Habbie: It's mediocre, but I regularly deal in much worse.
16:29  NelleV: let's say it could be better :-)
16:29  kdefreak: ok, this doesn't make sense at all
16:29  kdefreak: print (sep.join(send))
16:29  kdefreak: sep = "."
16:29  kdefreak: I see no possible problem
16:29  NelleV: but there are good tutorials on different blogs
16:30  kerio: lvh: i think typechecking for slice in __getitem__ is common
16:30  ccxCZ: yury: I like twisted, but you usually need the docs and the source to have complete reference. on the other hand both are quite readable
16:30  yury: kdefreak: paste the code somewhere
16:30  yury: kdefreak: the problem was prolly in something else, but the long chain of +'s was making it hard to read
16:30  kdefreak: http://pastebin.com/1dYH8VY3
16:30  infobob: http://paste.pound-python.org/show/735/ (repasted for kdefreak)
16:30  yury: ccxCZ: I intend to give it another shot at some point
16:30  yury: maybe over summer break
16:31  kdefreak: it works if I comment the line out
16:31  kdefreak: then I get:
16:31  kdefreak: Checking 201.72.179.130...
16:31  kdefreak: [201, 72, 179, 130]
16:31  kdefreak: 0
16:31  kerio: lvh: either that or try accessing .start and falling back if it raises NameError
16:31  kdefreak: [130, 179, 72, 201
16:31  kdefreak: oh, sorry for the spam
16:31  kerio: er, AttributeError
16:32  yury: kdefreak: where is the problem? this looks alright
16:32  ccxCZ: yury: the worse stuff is the lasagna-code class/interface, which require you to grok most of the twisted core to get going
16:32  kdefreak: on the join-line
16:32  avu: kdefreak, send contains ints
16:32  kdefreak: if I include that, I get "could not flip"
16:32  kdefreak: contains ints?
16:33  avu: kdefreak, yes, see line 7
16:33  yury: ccxCZ: the new style class inheritance?
16:33  yury: kdefreak: yeah, join takes strings, not ints
16:33  avu: kdefreak, without the blank except: (always a bad idea), you would have gotten a proper excetion describing the actual problem
16:33  yury: see where you do: send = [int(octet) for octet in ircmsg.split('.')]
16:34  destroyerx1: Hey I need some help
16:34  sphenxes: would some one please look on my program at: http://paste.pound-python.org/show/736/
16:34  yury: kdefreak: change it to send = ircmsg.split('.')
16:34  yury: unless you really need integers
16:34  Spirits-Sight: Hello all, I am trying to get a grasp of boolean logic , any good readings?  I just read the wikipadia one and it talk more about other uses then what I need to understand
16:34  kdefreak: I need to make sure they are numbers
16:34  kdefreak: but I can make a copy of it
16:34  destroyerx1: I'm coding a server for a game and I need to make a player face another player
16:34  yury: kdefreak: then change them back
16:34  kdefreak: and int'alise the copy
16:34  kdefreak: to check
16:34  kdefreak: oh
16:34  yury: kdefreak: like so:
16:35  varnie: do you guys agree Ruby is more object-oriented than Python? it was one of the Matz's ideas behind its programming language.
16:35  Godslastering: Spirits-Sight: what is there that you don't get?
16:35  avu: kdefreak, sep.join(str(e) for e in send)
16:35  yury: kdefreak: ".".join(map(str, send))
16:35  avu: yuck
16:35  yury: I think map is faster
16:35  papna_: HAHAHAHHAAHA
16:35  yury: than a list comp
16:35  kerio: varnie: describe what "object-oriented" means and i'll answer you
16:35  kdefreak: ah
16:35  kerio: yury: hahaha, oh wow
16:35  kdefreak: speed is important, as it has to react fast
16:35  yury: it's not?
16:35  kdefreak: thank you all
16:35  papna_: yury: You're hilarious.
16:35  avu: yury, 1) who cares, 2) that isn't a list comprehension
16:35  tr3x: map might not be faster but it sure is cleaner to me in that example
16:36  yury: avu: agree, not really important here
16:36  varnie: kerio, that's not a question adressed to myself. i asked about what i have read on official Ruby website
16:36  NelleV: yury: never speak about ruby on this chan is the correct answer in this context
16:36  Rajko: how do i search a file for a string
16:36  yury: NelleV: ruby?
16:36  yury: what does this have to do with ruby?
16:36  NelleV: yury: sorry I meant varnie
16:36  NelleV: :-)
16:36  Spirits-Sight: brb :(
16:36  papna_: Rajko: That depends on the string.
16:36  yury: oh, ><
16:36  varnie: if my question seems holywar-ish, then i am sorry and let stop it.
16:36  kerio: explicit is better than implicit every day of the week
16:36  ccxCZ: yury: actually not, it's old style classes mostly. But you need Protocol Factory and Endpoint classes to get even started, and thanks god for the endpoints, because it was worse (as in inconsistent)
16:37  papna_: varnie: That's something a lot of people say. We don't really know what it means or why it's important.
16:37  Rajko: papna just text file
16:37  yury: papna_: map is slower you say?
16:37  Rajko: search for string
16:37  papna_: yury: heheheheheheehe
16:37  yury: oh are you just laughing at the 4 item list?
16:37  varnie: papna_, for example, it is unable to code smth like "abc".length() etc in Python
16:37  papna_: yury: Premature optimization is like that other premature thing...messy and embarrassing.
16:37  kerio: if the speed of map versus the speed of a LC matters in your code, it means that your code is not doing anything interesting
16:38  kerio: or you're doing something very interesting, but in this case you wouldn't ask about it here
16:38  papna_: yury: Also, both snippets are O(n) time, but your is O(n) memory and the other one is O(1) memory.
16:38  ccxCZ: actually I'm not entirely true. The hard stuff is actually implementing custom transports. For most usual cases it's not that bad
16:38  papna_: yury: Which we'd discuss as well as timing stuff for optimization.
16:38  yury: kerio: map reduce?
16:38  papna_: varnie: That example is shallow and sort of silly.
16:38  avu: varnie, yes, it's len("abc") in python, what's your point?
16:38  papna_: varnie: I'm not sure how we are to get anything useful out of it.
16:38  varnie: papna_, yes it is.
16:39  papna_: varnie: Indeed, len("abc") is just a method call spelled weird, so I don't see how Python is any different than Ruby (other than a hint of quirkiness).
16:39  varnie: my point is that not everything in Python acts as objects
16:39  kerio: papna: is not
16:40  papna_: kerio: Sure it is.
16:40  avu: varnie, that's wrong.
16:40  kerio: len() does counting for stuff that supports __iter__ but not __len__
16:40  kerio: or __getitem__ until IndexError
16:40  yury: hm... actually the function call overhead is quite high
16:40  papna_: kerio: False.
16:40  kerio: really?
16:40  yury: but that was with a lambda
16:40  ccxCZ: ruby might be more adherent to OO principle, I personally find python way more practical. also http://c2.com/cgi/wiki?PythonVsRuby
16:40  kerio: i mean, it makes sense, but...
16:41  varnie: avu, or at least it doesn't always look like OO.
16:41  NelleV: ccxCZ: I agree with you. Ruby lack some functionnalities, and it is often hard to understand what exactly happens (Ruby is magic :p)
16:41  avu: varnie, that's quite superficial and thus not very meaningful
16:41  varnie: no problem for me, this question is just because i am curious and that's it.
16:42  Godslastering: is there a way to get python's ease-of-use and rapid development and still have real threading, where the gil doesn't get in the waY?
16:43  kerio: what does "real threading" even mean
16:43  kerio: python threads are real threads
16:43  ccxCZ: Godslastering: ampoule
16:43  varnie: let me quote a bit: "One example that's commonly given is len, which in Python is a built-in function. You may implement a special __len__ method in your objects which will be called by len, but len is still a function. In Ruby, objects just have the .length property/method so it appears more object oriented when you say obj.length rather than len(obj) although deep under the hood pretty much the same thing happens."
16:43  avu: Godslastering, the practical and sanity preserving answer is "just don't use threading"
16:43  kerio: but you can't have global mutable shared state without a lock
16:43  Godslastering: kerio: the ability to have threads each using 100% of resources without the gil getting in the way, like i said.
16:43  avu: Godslastering, but, there's only one python implementation I use that has a GIL
16:43  Godslastering: avu: well the problem is threading in much of the stuff i do is very helpful, otherwise there would be issues..
16:43  kerio: Godslastering: threading is not helpful
16:44  Godslastering: cpython has a gil, others do not, correct?
16:44  Godslastering: kerio: ok so how am i to use all of the processor cores without threads?
16:44  kerio: ampoule
16:44  avu: Godslastering, processes
16:44  kerio: multiprocessing
16:44  aminpy: can't I have to constructor in a class in python?
16:44  Godslastering: ok, now whats the easiest way to have each process communicate with the others?
16:44  aminpy: to = two
16:44  aminpy: *
16:44  Godslastering: aminpy: no why would you want to?
16:44  avu: aminpy, no
16:45  ccxCZ: aminpy: there are no overloaded methods
16:45  avu: aminpy, you generally can't have two methods of the same name
16:45  kerio: Godslastering: multiprocessing.Queue or whatever ampoule uses
16:45  avu: aminpy, the later will just overwrite the former
16:45  kerio: aminpy: if you want an alternate constructor, use a classmethod
16:45  Godslastering: kerio: ampoule being a module/package?
16:45  ccxCZ: aminpy: there is classmethod though
16:45  kerio: yeah, it's third-party
16:45  kerio: multiprocessing is builtin
16:46  bsod1: do I have to make a list from the generator to get nth element of the generator?
16:46  kerio: bsod1: itertools.islice()
16:46  sphenxes: I would like to create a simple form. I would like to insert ";" after the client enter his data on a line. I have tried app.insert(END, ";"). I am getting what i want plus the word NONE. How can i correct the program to delete the word None. http://paste.pound-python.org/show/736/
16:46  bsod1: kerio: thanks
16:47  bartek: I have an issue with default values and a startup function, the problem is kind of laid out here: http://dpaste.com/288634/ -- Anyone have any input?
16:47  ccxCZ: somebody still uses TK?
16:47  ccxCZ: wow
16:47  yury: I use TK occasionally
16:47  yury: but rarely
16:47  varnie: what's TK?
16:48  marel: Is there a list function that returns a count of how many times x appears in a list ?
16:48  papna_: marel: count
16:48  varnie: marel, yes it is.
16:48  ccxCZ: varnie: Tkinter, gui library bundled with python
16:48  lorenzosu: ccxCZ, I use it when I need a 'gui' really quickly
16:48  varnie: ccxCZ, thanks.
16:48  papna_: ccxCZ: A historical accident.
16:49  yury: I use it when I need a GUI on all platforms
16:49  yury: and it happens to integrate nicely with OS X
16:49  yury: somewhat
16:49  ccxCZ: I use QT for that, but actually never deployed for mac
16:49  yury: here's a hint: don't
16:49  marel: Is there a list fucntion that returns a list of string's character's ?
16:50  yury: try list
16:50  papna_: marel: What for? You do realise strings are iterable, right?
16:50  yury: just 'list'
16:50  bahamas: marel: unique characters or all characters?
16:50  papna_: marel: list(s) satisfies that, but most of the time people just want s or want something different altogether.
16:50  papna_: marel: Or do you want a set of unique characters in a string?
--- Log closed Mon Dec 20 16:50:57 2010
--- Log opened Mon Dec 20 16:51:41 2010
16:51 --- Users 746 nicks [0 ops, 0 halfops, 0 voices, 746 normal]
16:51  yury: it's too stringy :P
16:53 --- Channel #python was synced in 89 seconds
16:57  LuckySMackDroid: How do people in hbere feel about web2.py over other frameworks such as django or pyramid?
16:57  LuckySMackDroid: Seems a lot of people in here didn't like django when I asked,minus a couple people.but web2.py and pyramid looked nice.
16:58  yury: I like django
16:58  yury: I have a setup running
16:58  yury: it's very very nice
16:58  yury: but requires a little bit of time to get it right
16:59  LuckySMackDroid: Yea,well tbh it looked good as well.I come from cakephp so its ideas seem somehwat familiar
16:59  papna_: LuckySMackDroid: I'm not a web programmer, but judging from people's questions here, Django makes you do things that would be completely daft in other contexts.
16:59  LuckySMackDroid: How's that?
16:59  yury: papna_: what LuckySMackDroid said
17:00  papna_: LuckySMackDroid: Operations like dynamically inheriting from different classes very late in the game.
17:00  LuckySMackDroid: Heh yea I've got that too based on some peoples descriptions of django.which is why I was looking at the other 2
17:00  papna_: LuckySMackDroid: And use of inner classes.
17:00  papna_: LuckySMackDroid: And having to typecheck.
17:01  LuckySMackDroid: papna_: heh I meant how's that, to you.
17:01  papna_: LuckySMackDroid: What?
17:01  LuckySMackDroid: Referring to, time to get it right.
17:02  grawity: What's the simplest thread module I can use on Windows?
17:02  papna_: grawity: Why would you want to use threads?
17:02  yury: I found urls to be a little tricky
17:02  papna_: grawity: And what's simple?
17:02  yury: but for the most part, most things can be done straight forward
17:02  NelleV: Everyone's obsessed with threads today :-)
17:02  papna_: grawity: What do you want to do?
17:02  Spirits-Sight: OK, I am having trouble understand boolean, the area I think I am having trouble for example:  not(false or true) is false  but I would of throught it would be true
17:03  yury: false or true => true
17:03  yury: because one of them is true
17:03  papna_: Spirits-Sight: What do you expect <<False or True>> to be?
17:03  yury: so not true is false
17:03  Spirits-Sight: I would say true but python interpert saying false
17:03  grawity: papna_: 1) because win32api.ShellExecute is slow-ish, 2) the equivalent of fork()/do stuff/exit(), 3) a Python script that listens for TCP connections from another trusted host, receives an URL from each client, and ShellExecute()s it
17:04  grawity: papna_: in other words, I can click on an URL in my X11-over-SSH-forwarded programs, and they get opened in the local browser.
17:05  papna_: grawity: You won't find anything with a fork(2)like API, for good reason.
17:05  yury: Spirits-Sight: (True or False) is True
17:05  ccxCZ: grawity: and why you need threads for that?
17:05  yury: because 'or' means at least one of them needs to be true
17:05  grawity: papna_: Anything else you would suggest?
17:06  grawity: ccxCZ: as I said, win32api.ShellExecute() takes up to a few seconds to return.
17:06  papna_: grawity: The threading module will let you use one of the more normal thread APIs, but in this case I'd almost certainly use Twisted's networking and shell/process stuff.
17:06  Spirits-Sight: yury: yes true but not put not in fornt and python says its false
17:06  yury: Spirits-Sight: correct, because not (true or false) is the same as not (true)
17:06  ccxCZ: grawity: twisted has deferToThread for stuff like this
17:07  yury: and not (true) is what?
17:07  papna_: grawity: Also, why are you using ShellExecute? Is the operation just to display something in a browser?
17:07  yury: prolly calling firefox -remote
17:07  grawity: papna_: In the user's (my) default browser as configured in Windows, yes.
17:07  Spirits-Sight: yury: is false because true gets reverst
17:07  papna_: grawity: webbrowser module.
17:07  yury: Spirits-Sight: yes
17:07  yury: papna_: how does that work? I am guessing the same way
17:08  GAEfan: Hello.  I can do an "import sys, print sys.path", and in the list is "/Library/Python/2.6/site-packages/PIL".  That directory exists, but "from PIL import *" fails
17:08  papna_: yury: I don't know the details, nor care.
17:08  grawity: I *do not want* to hardcode "firefox -remote", nor do I want to use a limited set of browsers from the module... I want to use exactly what Windows itself would use.
17:08  papna_: GAEfan: "import Image"
17:08  papna_: GAEfan: PIL's module is named image.
17:08  yury: papna_: prolly calls a ShellExec
17:08  papna_: GAEfan: And never ever ever ever ever ever ever ever use import *.
17:08  GAEfan: papna, that fails, too
17:08  GAEfan: one sec
17:08  Spirits-Sight: and not (false) becomes ?? True so when you have not (false or true) its false?? which right now does not make sence to me
17:08  grawity: I guess the execution time /doesn't/ matter here - I wouldn't click on links every second anyway, on the second thought.
17:09  papna_: GAEfan: If "import Image" doesn't work, you don't hav ePIL.
17:09  bartek: Is [(obj.a, obj.b) for obj in SomeFunc()] equivalent to [(obj.a, obj.b) for obj in SomeFunc] ?
17:09  papna_: bartek: Not at all.
17:09  bartek: hrm
17:09  yury: in fact, subprocess.Popen
17:09  papna_: bartek: SomeFunc is an object. SomeFunc() is what that object returns when you call it.
17:09  bartek: papna_: even when passed as a function argument?
17:09  grawity: bartek: SomeFunc is the function itself; it's not iterable, by the way. And SomeFunc() is the *return value* of calling that function
17:10  grawity: bartek: Doesn't matter how and where you use it
17:10  ccxCZ: grawity: is win32api even threadsafe?
17:10  papna_: bartek: "foo" isn't "foo()"
17:10  GAEfan: from PIL.Image import isImageType  yields "ImportError: No module named PIL.Image"
17:10  bartek: grawity: I understand that but..
17:10  papna_: fading: "import Image"
17:10  papna_: GAEfan: ^^
17:10  papna_: GAEfan: Not PIL. Image.
17:10  GAEfan: but /Library/Python/2.6/site-packages/PIL DOES exist
17:10  bartek: How come I sometimes see calls like: SomeField(choices=choice_populate) .. And it populates `choices` with the correct values from choice_populate?
17:10  papna_: GAEfan: Not PIL.
17:10  papna_: GAEfan: Image.
17:10  Spirits-Sight: yury: and not (false) becomes ?? True so when you have not (false or true) its false?? which right now does not make sence to me
17:11  yury: Spirits-Sight: the not applies to the result of (True or False)
17:11  papna_: bartek: I'm not sure what you mean exactly. That's passing a keyword argument. docs.python.org/tut
17:11  grawity: ccxCZ: I would guess so -- doesn't it hook straight into Windows API calls through ctypes? But it doesn't really matter, given that I'm only using one API call without modifying any state.
17:11  yury: Spirits-Sight: (True or False) is the same as (False or True)
17:11  papna_: grawity: Not through ctypes.
17:11  GAEfan: papna_ import Image yields the same "ImportError: No module named Image"
17:11  bartek: papna_: I know what a keyword arg is, egh .. hard to explain what I mean
17:11  GAEfan: but /Library/Python/2.6/site-packages/PIL DOES exist
17:11  yury: Spirits-Sight: the 'or' means one is True
17:11  bartek: It's done all the time in frameworks like Django though
17:12  papna_: GAEfan: Then PIL isn't installed for that Python.
17:12  netsan: if i want to getting data out from a site (parsing,) urllib is the best option, right?
17:12  grawity: Either way, as far as I know ShellExecute() is the standard way of calling the user's default application on Windows.
17:12  Spirits-Sight: yury: correct so how is python interpet saying false either way
17:12  yury: because you have a not in front
17:12  papna_: grawity: Python abstracts away opening the preferred web browser with the webbrowser module.
17:13  GAEfan: papna_ That is what is frustrating me.  The PIL directory is in the sys.path, and does exist
17:13  yury: Spirits-Sight: "not (True or False)" is the same as "not (False or True)" is the same as "not (True)"
17:13  papna_: GAEfan: How did you install it?
17:13  ccxCZ: Spirits-Sight: http://en.wikipedia.org/wiki/Boolean_algebra_(logic) or any other article about BA
17:13  yury: because "(True or False)" is the same as (")
17:13  yury: False or True
17:13  yury: is the same as True
17:13  grawity: papna_: Which brings the following questions. 1) How does it determine my "preference"? 2) Does it actually use the "preferred" browser, or is it limited to the table I saw in its doc page?
17:13  GAEfan: papna_ I cannot remember, as it was a while ago.
17:14  Spirits-Sight: yury: but one of them is true, so does the "not" only effect one of the items or both?
17:14  yury: Spirits-Sight: both
17:14  yury: because you have parenthesis
17:14  Spirits-Sight: yury: brb
17:14  ccxCZ: grawity: you can try twisted. it would be like 15 lines of code inc. the threading stuff
17:15  tr3x: Spirits-Sight not effects the result of (True or False)
17:15  papna_: GAEfan: Which includes the Windows default browser.
17:15  papna_: grawity: ^^^
17:15  papna_: GAEfan: Sorry.
17:15  grawity: papna_: Okay, can I ask how does it call that browser?
17:15  yury: ccxCZ: you can shot yourself in the foot, it's like 15 lines of code inc. the threading to sow the wound back up :P
17:15  papna_: grawity: I don't know or care.
17:15  yury: *shoot
17:15  GAEfan: papna_ I may have done the easy_install, or could have just put the folder in the site-packages directory and added a .pth file
17:15  papna_: GAEfan: Well, that latter thing sounds highly bug prone.
17:16  yury: web2py looks awfully complicated
17:16  papna_: GAEfan: I would delete that crap and reinstall using a package mangager if you can and pip if you can't.
17:16  papna_: GAEfan: PIL has C extensions which have to match your Python and setuptools craziness at install.
17:17  fission6: whats the prefered way to see if the first character in a string is a "$"
17:17  papna_: fission6: if s.startswith("$")
17:17  fission6: nice
17:17  yury: anything wrong with s[0]?
17:17  sente: that's preferred over: if s[0] == "$"?
17:18  yury: startswith checks for more than the first char
17:18  papna_: They do slightly different thigns.
17:18  netsan: if i want to pull out data from site, does i need to read more about urllib (python3) or on something else?
17:18  yury: I would use wwwmechanize
17:18  papna_: Generally startswith is preferred because people end up doing s[:4] == "foo".
17:18  AlexMax: what's going on with the whole pep 3333 vs 444 debate anyway
17:19  GAEfan: papna_ Thanks, I will delete and reinstall
17:19  yury: papna_: and why is that bad?
17:19  Wild_Cat: 3333 vs 444?
17:19  ccxCZ: Spirits-Sight: find an article about boolean algebra described in words you can understand, this is nothing specific to python.
17:19  AlexMax: http://www.python.org/dev/peps/pep-3333/
17:19  papna_: yury: You think the code above is just as good as s.startswith("foo")?
17:19  AlexMax: http://www.python.org/dev/peps/pep-0444/
17:20  lvh: AlexMax: Ignore 3333
17:20  lvh: AlexMax: It's PJE
17:20  AlexMax: PEJ?
17:20  AlexMax: PJE?
17:21  lvh: AlexMax: PJE is a person.
17:21  AlexMax: I saw
17:21  AlexMax: but "it's pje" doesn't mean anything to me
17:21  AlexMax: its a person...and?
17:21  papna_: yury: If so, read it again.
17:21  lvh: AlexMax: He also brought us setuptools.
17:22  AlexMax: God almighty
17:22  yury: papna_: you mean the 4?
17:22  lvh: AlexMax: Basically, when it comes to packaging and distribution, listen to tarek
17:22  papna_: yury: Yeah.
17:22  yury: i.e., always evaluating to False
17:22  lvh: AlexMax: When it comes to web app protocols, listen to armin
17:22  lvh: AlexMax: When it comes to entertainment, listen to pje
17:22  yury: fine, I guess it is more typo prone
17:23  AlexMax: When should I listen to gvr?
17:23  lvh: AlexMax: Never.
17:23  lvh: AlexMax: (Or always, you get to pick)
17:23  AlexMax: ahaha
17:23  papna_: yury: Even without the error, it means I'm counting something instead of just saying what I mean.
17:23  papna_: yury: That something can end up being longer.
17:23  papna_: yury: And dynamic.
17:23  yury: papna_: agreed
17:24  yury: starswith is better
17:24  yury: *startswith
17:24  BrianE: I like Python
17:24  BrianE: Just thought I\'d throw that in there
17:24  yury: I think I don't
17:24  yury: just thought I'd throw that out there
17:24  yury: or 3..0 anyway
17:24  papna_: yury: You'll fit in here.
17:25  BrianE: What\'s wrong with 3.x?
17:25  yury: what's right with 3.x?
17:25  Wild_Cat: BrianE: for the moment, it lacks a ton of third-party lib support.
17:25  MostAwesomeDude: Py3K just doesn't have much library support yet.
17:26  BrianE: Wild_Cat: That\'s not the fault of Python 3.x
17:26  Wild_Cat: other than that, it's a fine language and an improvement over 2.x
17:26  Wild_Cat: BrianE: no, it's not, but for people who want to get actual work done now, it's a good enough reason to use 2.x instead.
17:26  yury: I have some issue with some parts
17:26  AlexMax: lvh: I was under the impression that 444 was abandoned by armin and 3333 was going to be the de facto standard
17:26  yury: package structure included
17:26  kerio: it's not enough of an improvement to justify breaking backwards-compatibility
17:26  AlexMax: then i just checked the web sig and there's a thread about 444
17:26  kerio: other than that, it's awesome
17:26  AlexMax: so who knows
17:26  MostAwesomeDude: The entire point of Python 3 was to break backwards compatibility.
17:27  papna_: BrianE: Why are all your 's escaped?
17:27  BrianE: kerio: The point is that breaking backwards-compatibility -is- the improvement =\\
17:27  kerio: MostAwesomeDude: yeah but they didn't break enough
17:27  MostAwesomeDude: kerio: Oh noes!
17:27  papna_: They broke too much the wrong way.
17:27  BrianE: papna_: Urgh. I\'m using a web IRC client I wrote in Python, messages pass through a PHP gateway and this server has magic_quotes on
17:27  BrianE: Hence, the quotes. One minute
17:27  kerio: BrianE: why?
17:28  BrianE: kerio: To test its performance in large channels?
17:28  papna_: lvh: marienz is being mean to me for some reason.
17:28  marienz: ...
17:29  papna_: That stupid Kiwi chick.
17:29  kerio: papna_: are you drunk?
17:29  papna_: Always.
17:29  kerio: drunk-er then
17:31  lvh: papna_: Yes, he is.
17:31 --- papna_ is now known as papna__
17:31  Wild_Cat: I remain convinced that a version of Python that broke compatibility in a less radical manner would have been a nice transitional improvement
17:32  yury: I dislike the forced unicode
17:32 --- papna__ is now known as papna___
17:32  Wild_Cat: removing classic classes, <> and the print >>foo syntax wouldn't have broken much.
17:32  yury: everything else I can deal with, I suppose
17:32 --- papna___ is now known as papna____
17:32  Wild_Cat: and the result would have been a cleaner language
17:32  yury: I like classic classes
17:32 --- papna____ is now known as papna_____
17:32  kerio: yury: why don't you like unicode :(
17:32  yury: I don't get the new ones
17:32  Wild_Cat: yury: why?
17:33 --- papna_____ is now known as marienz_
17:33  yury: kerio: I don't hate it, I just almost never use it
17:33 --- marienz_ is now known as Guest35690
17:33  Wild_Cat: (also, if you don't like "forced unicode", it's clearly that you've never been faced with i18n and all the hell it puts you through)
17:33  yury: I have very little use for it, and it doesn't go down pipes smooth
17:33  Guest35690: yury: What the heck are you talking about?
17:33  kerio: yury: but there's a "pile of poo" character! what's not to like
17:33  sternocera: Hi. I have a global variable defined, and a global declaration within a function. However, I'm still getting a "global name 'var' is not defined" error. Why might this be? Thanks.
17:33 --- Guest35690 is now known as marie_nz
17:33  kerio: sternocera: pastebin your code
17:34  yury: marie_nz: I'm talking about forced unicode
17:34  kerio: marie_nz: papna, stop
17:34  Yhg1s: sternocera: because it wasn't defined.
17:34  Wild_Cat: yury: you're confusing unicode with unicode encodings.
17:34  yury: no, text is by default in unicode in python3
17:34  Wild_Cat: ...showing that you don't have a correct understanding of what you're complaining about.
17:34  Yhg1s: sternocera: either the assignment to the global wasn't executed yet, or something removed the global.
17:34  yury: you cannot do socket.send("foo")
17:34  Yhg1s: (also, the global statement is only necessary to *assign* to a global from a function.)
17:34  yury: you need to prefix it with a 'b'
17:34  sternocera: Yhg1s: The global declaration looks like this: var = None
17:34  Wild_Cat: yury: no. Strings are unicode strings. For that, there's the bytes type.
17:34  netsan: if i want to pull out data from site, does i need to read more about urllib (python3) or on something else?
17:34  marie_nz: yury: What?
17:35  marie_nz: yury: What is there to like about classic classes?
17:35  Spirits-Sight: yury: OK so not (false or true) changes to true or false which then becomes true because one is still true but that does not answer why I am told false with python interperter
17:35  Yhg1s: sternocera: but in what scope? (Pastebin the code.)
17:35  yury: Wild_Cat: that's what I disagree with, string should be bytestrings, and unicode should be a separate type
17:35  marie_nz: marienz: And why would you represent text as binary blobs?
17:35 --- marie_nz is now known as papna_
17:35  yury: Spirits-Sight: not how boolean logic works
17:35  Wild_Cat: yury: What you want are byte arrays, not strings.
17:35  yury: not acts on the or as well
17:35  papna_: yury: ^
17:36  kerio: Spirits-Sight: you have very confused ideas about boolean algebra
17:36  yury: papna_: what is it pointing to?
17:36  kerio: (false or true) evaluates to true
17:36  papna_: yury: Mostly, though, I don't understand what there would be to like about classic classes.
17:36  kerio: then (not true) evaluates to false
17:36  Wild_Cat: yury: and believe it or not, the primary use case of strings is actual textual data, not data to send through sockets.
17:36  yury: papna_: oh, they are simple
17:36  yury: Wild_Cat: sure, text in ascii
17:37  kerio: Wild_Cat: nope, text
17:37  papna_: yury: How are they more simple in any meaningful way than new-style classes?
17:37  Spirits-Sight: kerio: yes and I am trying to understand them, I am also trying to read about them also but stuff I find talks about electionix and xor and nand nor etc etc
17:37  Wild_Cat: yury: this is where you're wrong (and/or american, which is basically the same thing).
17:37  yury: new-style classes have weird inheritance laws
17:37  yury: Wild_Cat: granted
17:37  papna_: yury: What?
17:37  Spirits-Sight: I understand on the simple level I think but not when it get a little more complex
17:37  Wild_Cat: "ééôö”" is text (and you're lucky I don't have a CJK keymap installed :p ).
17:38  Wild_Cat: yury: it's the classic classes that have the messed-up inheritance laws.
17:38  MostAwesomeDude: Spirits-Sight: Evaluate parentheses first. What is "True or False"?
17:38  kerio: ʎןqɐqoɹd 'sıɥʇ pɐǝɹ ʇ,uɐɔ ʎɹnʎ
17:38  AlexMax: "ショッピング"
17:38  Wild_Cat: new-style classes were introduced specifically because multiple inheritance in classic classes *sucked hard*
17:38  Spirits-Sight: MostAwesomeDude: its true because one is true and its asking either or
17:38  yury: hm... I remember some weird 'super' behavior
17:38  yury: just a sec
17:38  MostAwesomeDude: I thought that it was also because classes not being types caused a big problem too.
17:39  MostAwesomeDude: Spirits-Sight: Right! So your expression simplifies to "not True", which is False, right?
17:39  varnie: bye for a while
17:39  papna_: yury: super does what it does, but new-style classes can do what old-style classes did fine.
17:39  kerio: Spirits-Sight: (A or B) evaluates to True if A evaluates to True or B evaluates to True
17:39  papna_: yury: The thing about super is it enables things which were *impossible* for classic classes.
17:39  Wild_Cat: yury: super isn't required in new-style classes. And the problem it solves isn't the main one classic classes had (which is related to diamond inheritance, but which I don't remember precisely).
17:39  kerio: (A and B) evaluates to True if A evaluates to True and B evaluates to True
17:39  Yhg1s: super()'s behaviour is the only sensible behaviour.
17:39  kerio: (not A) evaluates to True if A evaluates to False
17:39  Yhg1s: that isn't to say it's sometimes weird, but it's less weird than any of the alterantives.
17:40  Spirits-Sight: MostAwesomeDude: not true is false OK that makes sence
17:40  papna_: yury: new-style classes don't introduce a new, bad behaviour which it needs to solve with super
17:40  Wild_Cat: then again, super() is there to solve part of the diamond inheritance problem, which is always insane to begin with
17:40  seiflotfy: ccxCZ, how can i convert a string to a bytearray
17:40  seiflotfy: ?
17:40  yury: ah yes, super takes an extra argument which I do not understand
17:40  seiflotfy: i have x = "hello"
17:40  seiflotfy: how do i make a bytearray using x
17:40  Yhg1s: yury: it takes two arguments, even.
17:40  Wild_Cat: yury: that extra argument thing was fixed in... 2.6 or 2.7, I don't recall which.
17:40  Yhg1s: Wild_Cat: 3.x.
17:40  Yhg1s: if you mean the no-argument form of super().
17:40  papna_: yury: Both arguments of super are necessary to get the information it needs. (These are received by magic in 2.x).
17:40  Wild_Cat: Yhg1s: only? d'oh!
17:40  BrianE: kerio: What about `(A and B or C and D and E or F)`? Does 'and' or 'or' take priority?
17:40  yury: papna_: yeah, magic works well for me
17:41  ccxCZ: seiflotfy: map(ord, x), unless x is unicode string
17:41  Buttons840: seiflotfy: what is a bytearray?
17:41  kerio: BrianE: there's a priority, can't remember what it is though
17:41  kerio: ccxCZ: that's not a bytearray
17:41  Wild_Cat: papna_: they're not received by magic in 2.x
17:41  kerio: that's a list of numbers
17:41  papna_: yury: Fine, but classic classes don't in any way I can tell fix a problem which is created in new-style classes involving super.
17:41  yury: why does super need the first argument?
17:41  Wild_Cat: (as per Yhg1s 's last comment)
17:41  dooks: hello, what's a good text editor to use for python on a Mac?
17:41  papna_: Wild_Cat: I meant 3.x
17:41  Wild_Cat: dooks: TextMate
17:41  kerio: dooks: emacs
17:41  Yhg1s: yury: because it doesn't know what class the current method is in.
17:41  dooks: ty Wild_Cat
17:41  papna_: yury: So you know where in the MRO you are.
17:42  dooks: emacs for Mac?
17:42  papna_: yury: How else would you know?
17:42  yury: Yhg1s: that's silly
17:42  MostAwesomeDude: yury: super()'s implementation is slightly iffy that way. Python 3's super() *does* know those kinds of things.
17:42  Yhg1s: yury: 'silly' how?
17:42  AlexMax: dooks: What text editor are you used to?
17:42  dooks: vi :(
17:42  yury: Yhg1s: it should know
17:42  Yhg1s: yury: why?
17:42  Dynetrekk: dooks vim :-D
17:42  papna_: yury: How?
17:42  BrianE: dooks: Why wouldn't it run on Mac? Mac is Unix(-like?)
17:42  ccxCZ: seiflotfy: does that do what you want to, or do you mean something different?
17:42  AlexMax: dooks: What text editor are you used to for other work?
17:42  Dynetrekk: dooks: https://code.google.com/p/macvim/
17:42  Yhg1s: yury: a function's a function. a call is a call. You should see the hoops Python 3.x has to jump through to make this work. it's not pretty.
17:42  papna_: yury: Oftentimes people think that it's silly since the class is the type of self. The thing is, the class *might not* be the type of self.
17:42  yury: it is a pointless argument slot
17:42  AlexMax: Do you enjoy using vim or do you prefer something else
17:42  yury: wasteful
17:42  Dynetrekk: BrianE: vim works great on the mac :)
17:42  AlexMax: erm
17:42  Yhg1s: yury: you are confused.
17:42  AlexMax: do you enjoy using vi
17:42  papna_: yury: No, it carries semantic meaning.
17:43  Yhg1s: yury: you seem to thikn super() is a language construct. it is not.
17:43  yury: Yhg1s: why not self.__class__?
17:43  BrianE: Dynetrekk: Exactly
17:43  papna_: yury: Without that information, you can't get the information you need.
17:43  Yhg1s: yury: because that would be the wrong thing.
17:43  yury: why?
17:43  papna_: yury: Because, self.__class__ might be some child type.
17:43  arkanes: try it and see
17:43  Yhg1s: because it would be *the wrong class*.
17:43  papna_: yury: And you need the current type.
17:43  MostAwesomeDude: Dudes, why are you defending super()'s bad form in Python 2? It really *is* misleading and tricky to use.
17:43  arkanes: or read the super documentation :\
17:43  dooks: AlexMax: i've only used vi from a sysadmin point of view, i'm trying to learn a language, and lots of folks point me to python.
17:43  Yhg1s: super() needs to know where in the MRO to continue the lookup.
17:43  yury: ah, I see, if it get inherited
17:43  seiflotfy: ccxCZ, its unicode string
17:43  yury: got it
17:43  arkanes: MostAwesomeDude: what it does in Python3 is not exactly not mislead or not tricky to use
17:43  AlexMax: dooks: Do you have an editor on another system that you like using?
17:43  kerio: dooks: you'll love it :)
17:44  arkanes: MostAwesomeDude: Both of them do exactly what they have to do
17:44  seiflotfy: ccxCZ, woops no its not
17:44  ccxCZ: seiflotfy: x.encode(encoding)
17:44  seiflotfy: wait let me try
17:44  Yhg1s: MostAwesomeDude: I'm defending it because even in 3.x super() *needs this information*, and it's not a 'useless argument slot' in any way.
17:44  AlexMax: Or have you only ever used vi for editing text
17:44  Spirits-Sight: MostAwesomeDude: so if I have "not (10 == 1 or 1000 == 1000)" so change it look inside of () 10 == 1 is false and 1000 == 1000 is true next false and true is false not not(false) is true ??
17:44  Yhg1s: and super() is the only way to do what super() does.
17:44  yury: so C(B), B(A), C.__class__ = C not B, and B's construct needs to get called
17:44  dooks: AlexMax: just for editing text. i really don't have a pref
17:44  kerio: Spirits-Sight: it's algebra
17:44  dooks: kerio: thanks. I'm really looking forward to it
17:44  MostAwesomeDude: Yhg1s: Yeah, but I much prefer a nasty super() implementation I don't see over a super() implementation that relies on me to not be stupid.
17:44  Yhg1s: MostAwesomeDude: and yet that wasn't the argument here.
17:45  AlexMax: dooks: I would suggest downloading macvim, emacs for osx and trying the 30 day trial for textmate
17:45  papna_: yury: http://paste.pocoo.org/show/307440/
17:45  arkanes: MostAwesomeDude: well, all you had to do was spend 30 seconds reading about how super() works
17:45  yury: alright, point taken, but then super *should* be a language construct
17:45  dooks: AlexMax: great suggestions, thanks so much!
17:45  Yhg1s: yury: as it is in 3.x.
17:45  MostAwesomeDude: Spirits-Sight: 1000 always equals 1000, so you don't need to test for it. :T
17:45  AlexMax: dooks: You can find macvim here: http://code.google.com/p/macvim/
17:45  Yhg1s: you can argue that it should've been in 2.x as well, but that's not the same thing as 'new-style classes have silly inheritance rules'.
17:45  arkanes: MostAwesomeDude: and now when you use the 3.x one, you'll know who it fails bizarrely when you monkeypatch a method
17:45  AlexMax: dooks: You can find emacs for osx here: http://emacsformacosx.com/
17:45  MostAwesomeDude: Yhg1s: Yes, you're right.
17:45  arkanes: yury: in general, if you don't know why something was done, that doesn't make it "silly"
17:45  dooks: AlexMax: great!
17:45  AlexMax: dooks: you can find textmate here: http://macromates.com/
17:46  MostAwesomeDude: arkanes: I am delaying that, as with all of the other Py3K pains, until I need to migrate.
17:46  AlexMax: textmate is something you have to pay for, but imho it's well worth it if it agrees with you
17:46  AlexMax: i use textmate for local editing and vim for ssh editing
17:46  dooks: AlexMax: I'm all about supporting software devs :)
17:46  arkanes: I'm not a fan of textmate, I prefer textwrangler
17:46  Spirits-Sight: MostAwesomeDude: CORRECTION or should be and   so if I have "not (10 == 1 and 1000 == 1000)" so change it look inside of () 10 == 1 is false and 1000 == 1000 is true next false and true is false not not(false) is true ??
17:46  BrianE: Who was asking for a good Python editor for Mac?
17:46  dooks: me
17:46  dooks: BrianE:
17:47  BrianE: I really like Komodo Edit, and have used it on Linux and Windows for quite some time
17:47  BrianE: It runs on Mac, too
17:47  Habbie: i like TextMate
17:47  yury: arkanes: I know it is extraneous if it is always the same thing
17:47  NelleV: I like vim
17:47  arkanes: yury: sure, but all that means is that you didn't think about how it works for even a few minutes
17:47  kerio: smultron is open source but it's kinda a bad copy of textmate
17:48  MostAwesomeDude: Spirits-Sight: Yes, the entire expression would actually be "if False:"
17:48  papna_: yury: Pish posh, you pass PLENTY of arguments that are the same thing. You pass them as an argument because you are the one who knows the value.
17:48  arkanes: yury: because it obviously is *not* always the same thing, thats why its there
17:48  MostAwesomeDude: Spirits-Sight: IOW, it's dead code.
17:48  papna_: yury: Relevantly, classic classes don't have have some easier way to deal with this. They just don't have a way to deal with this.
17:48  NelleV: we can go on for ages like that, and even, maybe, finish in a vim vs emacs troll
17:48  AlexMax: arkanes: I was never a fan of textwrangler/bbedit
17:48  yury: arkanes: but it *is* always the same thing
17:48  arkanes: yury: no, it isn't
17:48  netsan: anyone? :|
17:48  AlexMax: When I first got my mac at work I evaluated both bbedit and textmate and textmate just fit me more
17:48  arkanes: yury: the argument needs to be the class that the method was defined in
17:48  yury: arkanes: um... yes, it is
17:48  yury: right
17:49  arkanes: yury: that's not something that can be determined at runtime
17:49  papna_: yury: Then *always pass the same thign*.\
17:49  NelleV: netsan: maybe you should repeat the question :p
17:49  arkanes: yury: you have to know it *lexically*
17:49  kerio: NelleV: i like emacs!
17:49  yury: same thing contextually speaking
17:49  arkanes: yury: no
17:49  netsan: NelleV: yeah :\
17:49  arkanes: yury: seriously
17:49  yury: it never changes within a class definition
17:49  netsan: NelleV: like 4X time? :)
17:49  NelleV: kerio: And I want to be able to type in 30 years
17:49  NelleV: netsan: :-p
17:49  NelleV: netsan: let's try one more time ?
17:49  Spirits-Sight: MostAwesomeDude: whats this mean "  IOW, it's dead code."?
17:50  arkanes: yury: and if methods were things that existed in class definitions that would matter
17:50  netsan: yeah
17:50  arkanes: yury: but they aren't
17:50  kerio: NelleV: not sure what's your computer, but "emacs foo" starts pretty much instantly here
17:50  netsan: if i want to pull out data from site, does i need to read more about urllib (python3) or on something else?
17:50  netsan: NelleV: that was for you! ;0)
17:50  kerio: netsan: you need 1) a way to fetch the data and 2) a way to parse the data
17:50  kerio: i'm not sure about the first, although a good solution is probably twisted.web
17:50  ccxCZ: netsan: depending on your task you might use scrapy
17:50  NelleV: kerio: that's not my point, but anyway, vim  vs emacs is a question of point of view. Even though I know several "old" programmers giving up emacs because it leads to finger problem
17:50  kerio: as for the second, lxml.html or beautifulsoup
17:50  dooks: thanks again for the suggestions! bye.
17:51  arkanes: yury: seriously, most things are the way they are for a reason. If you can't figure out the reason, you're probably not qualified to pass judgment on it
17:51  arkanes: yury: at the very least you should be able to demonstrate the correctness of your alternative.
17:51  arkanes: yury: so go ahead and think about how to implement super()
17:51  yury: arkanes: so you are claiming, you can write 'super' in a method, and unbind it from a class?
17:51  arkanes: yury: you don't write methods
17:51  netsan: let me explain myself better, lets say we have site python.org, and they have some word there "abcd" , and after one day, that word is also there, and on the third there, is not, i want to create some database that will count: 2
17:51  Yhg1s: that's not how methods work in Python.
17:52  arkanes: methds are not a thing that exists in python as a language feature
17:52  yury: fine, write a function outside a class and put a 'super' statement in it?
17:52  Yhg1s: methods are just functions that are retrieved from a class attribute.
17:52  papna_: yury: Absolutely.
17:52  Yhg1s: yury: functions aren't even written *in* classes.
17:52  Yhg1s: functions are created, and later the class is created. the functions know nothing about the class.
17:52  yury: papna_: and what will that do?
17:52  papna_: yury: At the time you're writing the function, it's nowhere near being a method.
17:52  papna_: yury: Same thing as defining it anywhere else.
17:52  NelleV: kerio: twisted web is maybe a bit of an overkill for that
17:52  NelleV: I'd use urllib or something "lighter"
17:53  arkanes: software doesn't have weight
17:53  lvh: netsan: How much data are you trying to pull?
17:53  arkanes: also twisted.web.client is substanitally simpler than urllib
17:53  netsan: it will start at zero focourse, but over time it will be big.
17:53  yury: arkanes: I have trouble believing that
17:53  BrianE: It is?
17:53  BrianE: urllib2 is very simple
17:53  yury: urllib is dead simple
17:54  NelleV: arkanes: that's a question whether you know twisted or not. If someone doesn't know twisted, I wouldn't recommand twisted.web.client
17:54  arkanes: yury: well its true whether you believe in it or not
17:54  NelleV: if someone does know basics of twisted, indeed I would recommand that
17:54  lvh: yury: Can you demonstrate a way in which it is less complex?
17:54  yury: I don't need to type reactor
17:54  Yhg1s: yury: I recommend investing some time in how Python works if you want to critique how Python works.
17:54  ccxCZ: netsan: simple stuff like this suffices with urllib, for more complex stuff investigate scrapy
17:54  yury: and I have never worked with twisted.webclient
17:54  lvh: netsan: Do you care about multiple concurrent HTTP requests?
17:54  yury: Yhg1s: I'm critiquing how much I have to type
17:55  Yhg1s: yury: I think you should stop trolling now.
17:55  yury: not how python works
17:55  netsan: lvh: what that mean ?
17:55  Yhg1s: I'm not talking about urllib.
17:55  lvh: netsan: Do you want to get multiple things at once?
17:55  netsan: yeah
17:55  netsan: a lot of the,
17:55  netsan: m
17:55  nosklo: because, you know, urllib blocks
17:55  yury: Yhg1s: I'm not either
17:55  netsan: something like 1xxx at once.
17:55  lvh: netsan: ie, get HOST/a/b/c/2 without waiting for HOST/a/b/c/1 to finish.
17:56  netsan: yep
17:56  ccxCZ: kerio: FYI scrapy is based on twisted and doesn't really require you to understand twisted internals
17:56  lvh: netsan: If you want to get more than, say, oh, ten or so at the same time, it is not reasonable to do that without an event loop.
17:56  arkanes: yury: if you're complaining about how much you have to type without understanding why you need to type it, you get a lollipop (thanks Perlis), and then you get a kick in the pants for whining
17:56  ccxCZ: netsan: http://scrapy.org/
17:56  yury: lollipop?
17:57  arkanes: you can google if you are confused
17:57  netsan: lvh: i want it pull , store, and count data something like 100-200 names at the same time.
17:57  airstr2ke: hi. within a python script, how can i retrieve the module's name?
17:57  Yhg1s: airstr2ke: __name__
17:57  netsan: ccxCZ: ;) thanks
17:57  netsan: anything else i need to read about?
17:57  airstr2ke: Yhg1s: thanks!
17:57  lvh: netsan: To do more than one thing at a time with urrlib, you need to use threads. The problems with using OS threads for IO concurrency are many, serious, extremely difficult to fix while keeping OS thread semantics (I'm looking at you, Java), and unfortunately not very well known.
17:57  netsan: (kind of new at that)
17:57  lvh: netsan: There's a number of things that do HTTP, but my favorite one is Twisted.
17:57  yury: my point was 'super(classname,_)' is redundant since it does not change within the class scope. Clearly I am not the only one who thinks so, as it was changed in 3.x
17:58  netsan: lvh: twisted is kind of havey dependecny, dosnt it?
17:58  AlexMax: I always kind of wonder how much of the warding away from threads is because python has the GIL
17:58  Yhg1s: yury: super() isn't used in the class scope.
17:58  arkanes: AlexMax: hardly any
17:58  lvh: AlexMax: I don't use threads in C or C++ either.
17:58  yury: Yhg1s: don't understand
17:58  BrianE: What's the point in function objects having both a "func_name" and "__name__" attribute?
17:58  arkanes: AlexMax: the GIL makes threads in python easier, not harder
17:58  BrianE: Is one preferred?
17:58  Yhg1s: yury: yes, you made that abundantly clear.
17:58  airstr2ke: Yhg1s: better yet, if i use 'from foo import bar', how can i retrieve 'foo' from bar.py? will __name__ return 'foo.bar'?
17:58  lvh: AlexMax: Also, Jython and IronPython doesn't have the GIL.
17:58  MostAwesomeDude: AlexMax: Very little, actually. Jython, for example, uses JVM threads with no GIL, and is *slower* than CPython at threading.
17:58  Yhg1s: yury: I suggested a few times already that you correct that and actually undestand of what you are complaining, instead of just whining.
17:58  MostAwesomeDude: AlexMax: Threads are just a pain in the ass. Period.
17:58  lvh: netsan: You could use twisted.client, which has already been pointed out to you, or scrapy
17:59  lvh: netsan: I'm not sure how you define "weight"
17:59  arkanes: yury: it's extremely simple and it's been explained to you several times already
17:59  Yhg1s: airstr2ke: bar.__name__ will be 'foo.bar', yes.
17:59  nosklo: netsan: I can hold a hard drive with hundreds of thousands of twisted copies in a single hand, so it is not heavy
17:59  AlexMax: lvh: I think he means that he doesn't want to have to learn an entire new ecosystem
17:59  Yhg1s: airstr2ke: so you don't want the module's name, but the name of the package the module is in?
17:59  BrianE: netsan: If you're going to package it and distribute it, adding Twisted unnecessarily is, well, unnecessary
17:59  arkanes: yury: and it was *not* "changed in 3.x", but rather an additional language feature was added to allow the lexical addition
17:59  airstr2ke: Yhg1s: yes, that's correct. i wanted to know both, just in case. but what i really need atm is the package
17:59  GAEfan: papna_ Just reinstalled.  Same problem.  "/Library/Python/2.6/site-packages/PIL" exists and is in the sys.path.  But, "from PIL import *" yields "ImportError: No module named PIL"
18:00  lvh: AlexMax: That would be silly. How can you know what that entails when you don't know the first thing about it?
18:00  BrianE: netsan: If it's just something local / for keeping track of something, having Twisted installed locally will be handy for future projects anywaY
18:00  netsan: nha, the target is to get all of that data
18:00  arkanes: yury: understanding how and why that works is pretty important to understanding super(), so it was arguably not a good thing to do
18:00  ccxCZ: netsan: twisted has few dependencies and runs on quite old cpythons and also on pypy. but of course YMMV
18:00  netsan: counting it, and display it in my own site.
18:00  airstr2ke: Yhg1s: because i want to load another module from the same package without having to a hard reference to the package. does that make sense?
18:00  Yhg1s: airstr2ke: foo.bar.__package__ should work.
18:00  lvh: netsan: Twisted basically only needs zope.interface to work.
18:00  DigitalKiwi: lvh: http://dpaste.com/288670/
18:00  lvh: DigitalKiwi: What is that and why are you showing it to me
18:00  DigitalKiwi: you'll like it
18:01  airstr2ke: Yhg1s: (...) without having to write* a hard reference (...)
18:01  lvh: netsan: (Additionally, Twisted is modular -- you don't need "Twisted" if all you want to do is get some web pages.)
18:01  BrianE: I take it the function.func_* are for documentation generators, etc?
18:01  netsan: i need data, (words) from some webpage
18:02  lvh: netsan: Well, yes, but the important part is that you needed to get *many* of them.
18:02  MostAwesomeDude: airstr2ke: Cut that out. Just do it anyway. If you use "from ... import things" then you only have to change one line to split it out anyway.
18:02  lvh: Which is why the people that told you to use urllib were wrong.
18:02  lvh: There is no reasonable way to get a large number of concurrent requests going with urllib.
18:02  netsan: yep
18:02  netsan: (and to count them, and store them)
18:02  netsan: btw, what database will be the best for that thing?
18:02  lvh: netsan: What are you actually storing?
18:03  netsan: words.
18:03  netsan: words and numbers.
18:03  lvh: netsan: And what operations will you be doing on them?
18:03  netsan: nothing just, add numbers.
18:03  airstr2ke: MostAwesomeDude: I'm trying to write a generic settings file for my projects so that I don't need to write the same code every time i start something new. I want to decouple the project-specific settings from the general settings which are the same in every code I write
18:03  lvh: netsan: What about the words?
18:03  netsan: if the words "Abcd" was showing once today, the database will say "1" , if tomarrow it will show up again, it will be "2"
18:03  MostAwesomeDude: airstr2ke: Is this Django, by any chance?
18:03  airstr2ke: it is
18:03  netsan: nothing on the words, just add more words to the db.
18:04  lvh: netsan: Oh, you're counting word frequencies?
18:04  netsan: yeah
18:04  MostAwesomeDude: airstr2ke: Suck it up. You *have* to do this in Django. Also #django.
18:04  netsan: i would like to store the date to
18:04  lvh: netsan: Pretty much everything'll do that in a reasonable fashion.
18:04  lvh: netsan: I'd go with SQLite to start, and move to a bigger database once you need to scale to multiple writers.
18:04  MostAwesomeDude: airstr2ke: I've seen many attempts to do this kind of abuse in Django. It always ends in pain and suffering.
18:05  lvh: Potentially using an ORM such as Storm as an abstraction layer.
18:05  airstr2ke: well, to each their own. i'm just loading urls.py automagically. it's no big deal
18:05  netsan: does scrabble can get those words , and insert them to some db?
18:05  netsan: or i would do that with python skills ;)
18:05  MostAwesomeDude: airstr2ke: If you keep reusing the same urls.py, is there any real reason to have your apps separated?
18:05  lvh: netsan: I'm sorry, I don't understand.
18:06  netsan: the scarpy, will get the words and count them?
18:06  netsan: or just get them.
18:06  bahamas: netsan: it's scrapy, and yes it can
18:06  netsan: i really new at this, that why i ask on what to read ;)
18:06  BrianE: netsan: You could just write a Python script that uses urllib2 to get the page contents, then use str.find() to check if it exists... If it does, update a counter somewhere (DB or flat file)
18:06  lvh: netsan: scrapy is about scraping web pages, it won't count words for you.
18:06  BrianE: Then run that script from a cronjob every day? =\
18:06  bahamas: netsan: you count. scrapy retrieves the web pages, parses and extracts the content
18:06  netsan: thats also my first project, so its really cool ;)
18:06  lvh: BrianE: But we've already established that urllib is not a reasonable thing for him to use.
18:07  lvh: BrianE: He want to have many hundreds of concurrent connections. How do you suggest he does that with urllib (2 or otherwise)?
18:07  netsan: ok, so ill have to join scarpy with python script and some DB like SQLite?
18:07  ccxCZ: BrianE: why not shell and grep then?
18:07  BrianE: Aah
18:07  lvh: netsan: scrapy or twisted.web.client, really.
18:07  lvh: Seriously, all of the people who talk about "Twisted is too complex" blah blah blah don't even bother to ask someone what their actual use case is?
18:08  lvh: I mean sure, if they want to do one HTTP request, or a bunch of them that is naturally sequential, urllib is fine
18:08  AlexMax: in all fairness twisted is kind of a shock to someone who hasn't really tried concurrent anything before and expects things to not block
18:08  lvh: Don't just blindly reccomend it because it's not Twisted
18:08  netsan: lvh: i didnt say that, i was question that ;)
18:08  AlexMax: Having used twisted though, I'm not really sure how such a shock could be made easier
18:08  yury: I do not understand super behavior
18:08  netsan: i really, dont know for saying those things.
18:08  lvh: netsan: I'm not talking about you.
18:08  yury: if I omit it, inheritance makes no sense
18:09  airstr2ke: MostAwesomeDude: i'm not reusing the same urls.py, but i'm always loading __package__.urls
18:09  netsan: lvh: btw, can you recommand me, what should i start reading first?
18:09  lvh: netsan: I would use scrapy or twisted.web.client, depending on how much of twisted you want to get familiar with.
18:09  _habnabit: yury, did you have a question
18:09  yury: http://paste.pound-python.org/show/737/
18:09  netsan: (as i say kind of new with python, but i aleardy learn the syntax)
18:09  yury: b and d are printed, but c is not
18:09  AlexMax: Maybe a "This is what your average python program looks like, this is your average twisted program, this is what's different and why it's different"
18:09  lvh: netsan: Depends what you want to use. Scrapy might be a reasonable use case for what you want
18:09  lvh: AlexMax: The krondoblog posts do that.
18:09  MostAwesomeDude: airstr2ke: And there's nothing wrong with that. It's fine to explicitly import things. Explicit is better than implicit, remember?
18:09  bahamas: netsan: do the scrapy tutorial, then read about xpath
18:09  lvh: In fact the very first post explains the difference between the two.
18:09  netsan: ok
18:09  netsan: anything else ?:)
18:09  _habnabit: yury, yeah uh you're not using super everywhere.
18:10  lvh: It's not so much that it's a twisted-specific thing, it's an event-loop specific thing
18:10  netsan: (writing those instructions down)
18:10  lvh: You'd see identical behavior when you're writing a GUI app.
18:10  AlexMax: yeah it requires a different way of going through your program
18:10  airstr2ke: MostAwesomeDude: true.. I would just really love to have a "default" project that I can replicate pretty much effortlessly
18:10  _habnabit: yury, super doesn't magically call every superclass method. It requires you to cooperate with it.
18:10  MostAwesomeDude: airstr2ke: Django requires lots of boilerplate. You may want to get used to it. :3
18:10  lvh: AlexMax: not as much as you'd think
18:10  airstr2ke: maybe i'll just make a settings.py for a package named REPLACEME and then /s/ the whole file every time I start a new project
18:10  yury: I did not cooperate on B, but I did on C
18:11  airstr2ke: MostAwesomeDude: true..
18:11  yury: why does it print b, d as opposed to c, d?
18:11  _habnabit: yury, okay, and?
18:11  lvh: AlexMax: blocking code is still pretty fundamentally event-based, except that the way to fire that event is "stop blocking"
18:11  lvh: AlexMax: gevent sort of proved that
18:11  AlexMax: heh
18:11  yury: there is a chain d -> c -> a of unbroken supers
18:11  yury: I would imagine, it would print that
18:11  lvh: AlexMax: It's far less scary once you actually know what you're talking about ;-)
18:11  MostAwesomeDude: airstr2ke: If it makes you feel better, my boss appears to create new settings.py by copying old settings.py from the previous project. :3
18:11  AlexMax: lvh: I don't pretend to know what I'm talking about :)
18:12  lvh: AlexMax: Didn't mean to imply I thought you were.
18:12  _habnabit: yury, http://codepad.org/6W0jXIqU
18:12  _habnabit: yury, the MRO isn't what you think it is.
18:12  arkanes: yury: no
18:12  lvh: AlexMax: I'm just saying, if different was worse we'd all be stuck doing Fortran on punch cards.
18:12  AlexMax: What kind of bothers me is that twisted, once you get the hang of it, seems so flexible
18:12  arkanes: yury: the supers will be called up through the MRO until you get to the class that doesn't have the super call, at which point there will (obviously) stop
18:12  _habnabit: yury, also, you forgot super() in A.
18:12  AlexMax: yet people keep going through the stdlib and seeing stuff like urlib
18:13  lvh: AlexMax: Yes, that is unfortunate
18:13  yury: _habnabit: why do I need it there?
18:13  lvh: AlexMax: That's the prime reason I like Javascript and Node so much
18:13  _habnabit: yury, A isn't the super-most class that implements __init__.
18:13  lvh: AlexMax: Nobody has ever been dumb enough to write blocking interfaces there
18:13  sambo_: new to python and need a quick fix for the regex -> http://paste.pound-python.org/show/AMMYXo4EyiUOtemzEbQi/
18:13  AlexMax: I show people python and they're like "Whee this is super simple"
18:13  yury: so what happens if I don't call it on A?
18:13  lvh: AlexMax: Everything in JS has pretty much always been explicitly event-based structured using callbacks
18:13  yury: I skip on object.__init__
18:14  sambo_: how in the hell am I failing
18:14  yury: MRO ends a little early, is that bad?
18:14  AlexMax: then they show me their IRC bot and I go "No no no, see you need to use twisted"
18:14  _habnabit: yury, yes, and that's the problem.
18:14  _habnabit: yury, there can be something between A and object in the MRO.
18:14  AlexMax: "Christ why are you using threads"
18:14  kerio: AlexMax: and by twisted you mean ampirc right? :)
18:14  kerio: it's not in twisted yet
18:14  lvh: AlexMax: I'm not sure how a reasonable person can look at both a twisted irc bot and a thread using irc bot and honestly believe the thread using IRC bot is superior
18:14  AlexMax: kerio: i mean t.w.p.irc
18:15  yury: _habnabit: how? A inherits directly from object
18:15  airstr2ke: MostAwesomeDude: that's what i wanted to do, but i wanted to copy from a 'generic' settings.py. In fact, I was thinking of setting up a git repo with a default setup and cloning that on every new project. I guess I'll go with string replacing and REPLACEME, then
18:15  AlexMax: http://www.eflorenzano.com/blog/post/writing-markov-chain-irc-bot-twisted-and-python/
18:15  kerio: AlexMax: i know, but ampirc is better
18:15  AlexMax: I use this as a starting point
18:15  BrianE: lvh: What about asynchat-using IRC bot?
18:15  _habnabit: yury, B inherits directly from A, but yet there's something between B and A in the MRO.
18:15  lvh: BrianE: I'm not sure if you are joking or serious
18:15  kerio: i mean, it's the same thing except you don't have to disconnect the bot when you reload code
18:15  AlexMax: kerio: yay #python!  every time i idle here i learn about something new
18:15  BrianE: lvh: I'm serious
18:15  lvh: BrianE: Do you want to get into the many ways medusa is bad?
18:16  kerio: ampirc is t.w.irc + ampoule + awesome
18:16  arkanes: yury: multiple inheritance requires an MRO that is consistent and yet each class in the inheritance chain can only be present once
18:16  BrianE: lvh: Medusa?
18:16  kerio: lvh: stones you if you don't have reflection or blindness
18:16  lvh: BrianE: medusa is what asycnore was called before it was called asyncore.
18:16  sambo_: can somebody point out my obvious mistake using re.search(), point and laugh then maybe help me fix it? http://paste.pound-python.org/show/AMMYXo4EyiUOtemzEbQi/
18:17  arkanes: yury: so one is calculated using an algorithm called C3, this neccesarily results in "the next class in the MRO" being different from the superclass when you use MI
18:17  BrianE: lvh: What's wrong with asyncore? It seems to work nicely =\
18:17  _habnabit: BrianE, it's completely inextensible.
18:17  lvh: BrianE: Appropriately, it's hosted on http://www.nightmare.com/medusa/
18:17  _habnabit: BrianE, try adding timer events sometime.
18:17  lvh: BrianE: I'm not sure where to start
18:17  _habnabit: BrianE, you'll have to rewrite the entire thing.
18:17  lvh: BrianE: a) inability to work with any other event loop
18:17  yury: I still don't get why A needs the super
18:17  bahamas: sambo_: what are you trying to do?
18:17  yury: what if there is something between B and A
18:18  yury: why does it care what's after A?
18:18  sambo_: ignore files that are not of 'filetype'
18:18  lvh: BrianE: b) inability to use timered events without a thread busy-waiting or a thread running a non-terrible event loop
18:18  arkanes: yury: it doesn't
18:18  lvh: BrianE: c) no async dns
18:18  sambo_: why does re.search return None
18:18  yury: can we get a consensus?
18:18  lvh: BrianE: d) no async ssl
18:18  arkanes: yury: but if you want the __init__ for all yuor classes to run, you need to use super in all the classes
18:18  _habnabit: yury, arkanes and I haven't disagreed yet.
18:18  BrianE: lvh: If it works for my purposes, is there a problem?
18:18  arkanes: yury: if you don't, then the call chain will stop somewhere, and the important part is that you *don't know where that wil be*
18:18  kerio: BrianE: because twisted is a lot better
18:18  arkanes: because it will change as you inherit
18:18  BrianE: Is it unstable / broken / inherently wrong?
18:19  yury: arkanes: I don't get it, doesn't it crawl up toward object
18:19  AlexMax: lvh: python just seems so much nicer to look at than js though
18:19  yury: it stops at A
18:19  yury: right?
18:19  arkanes: yury: christ on a fucking stick
18:19  lvh: BrianE: e) like java nio, fundamentally incapable of using edge-triggered event sources, which is another way of saying "any development made in the past 15 years"
18:19  kerio: it wasn't a stick, it was a cross
18:19  arkanes: yury: I've told you 3 times now that it *doesn't*
18:19  sphenxes: would some one please look on my program at: http://paste.pound-python.org/show/736/
18:19  yury: and I've asked three times why
18:19  BrianE: kerio: I wanted to write an IRC bot module on top of standard libraries, asyncore fit the job nicely and has been working well for years :/
18:19  bahamas: sambo_: what does filetype look like?
18:19  yury: what is thsi C3
18:19  arkanes: yury: and I told you that too
18:19  lvh: BrianE: Yes on all three counts
18:19  sambo_: bahamas : it's a string
18:20  lvh: BrianE: You could make the same argument for threading: there are many apps that thread that have yet to fail
18:20  lvh: BrianE: That doesn't make it a good idea
18:20  sambo_: its in my paste : http://paste.pound-python.org/show/AMMYXo4EyiUOtemzEbQi/
18:20  yury: all I get on good is C#
18:20  lvh: BrianE: Anecdotal evidence is rarely useful in technical discussions
18:20  arkanes: yury: class A(object), class B(object), class C(object), class D(A, B, C), whats the MRO
18:20  BrianE: Hmmph
18:20  joenp: lvh: Earlier you mentioned using UUIDs for my problem of referring to objects in a session. I read up on it and it seems I would use uuid4() to generate a random UUID. But how do you then map the UUID to a particular object?
18:20  ccxCZ: yury: http://www.artima.com/weblogs/viewpost.jsp?thread=236275
18:20  sambo_: ahh it's not a string
18:20  arkanes: yury: obviously "crawling up toward object" is not sufficient
18:21  yury: ccxCZ: thanks
18:21  sambo_: if its not a string, but contains chars. does not print like ['this'] etc. what IS it?
18:21  lvh: BrianE: I'd show you exhibit F, but ironically the asycnore server serving it has crashed :>
18:21  yury: arkanes: D C B A
18:21  BrianE: lvh: Heh
18:21  arkanes: yury: where's object?
18:21  yury: after A
18:21  lvh: BrianE: (it's asyncore.poll)
18:22  lvh: BrianE: Also pollmodule.c
18:22  joenp: sphenxes: No idea where the None is coming from?
18:22  arkanes: yury: and what happens if you elided the super() call from C because "it should just crawl up toward object"
18:22  lvh: BrianE: Oh, and in addition to my earlier point e) also a complete inability to use /dev/poll
18:22  yury: hm... C would be a top node on the tree
18:22  sphenxes: joenp, thank you anyway
18:22  lvh: Thankfully slowlaris is pining for the fjords, so that's slightly less of an issue
18:22  lvh: joenp: A dictionary
18:22  bahamas: sambo_: do for f in files: if f.endswith('.dpx'): gridFiles.append('%s/%s' % (path, f)) or something like that
18:22  yury: it may do D B A object C or D C BA object
18:23  arkanes: the order is actually dependent on the order that you inherited the classes
18:23  _habnabit: bahamas, os.path.splitext, os.path.join
18:23  joenp: lvh: So basically just keeping track of all of the instances in one place then. Makes sense.
18:23  lvh: BrianE: Also, performance: asyncore does not actually outperform the btpc things it was designed to replace
18:23  sambo_: is it possible that I'm using such an old python that startswith and endswith are not available
18:23  sambo_: anyway, I have it working
18:23  BrianE: lvh: BTPC?
18:23  arkanes: so what will happen is that the super() chain will abrubtly stop, some methods will not be called, and which ones actually *will* be called is not something you can know
18:23  sambo_: but I have to use the python shipped with a certain product
18:23  sambo_: and its old
18:23  bahamas: _habnabit: yeah, i realized that after answering
18:23  lvh: BrianE: It roughly fails somewhere around 1E3 fds, just like you'd expect from pretty much everything that doesn't have a sane event source
18:23  lvh: BrianE: blocking thread per connection
18:24  lvh: BrianE: release, do IO, acquire, rinse, repeat
18:24  BrianE: Really?
18:24  BrianE: =\
18:25  lvh: BrianE: If you want to discuss brokenness further I can drag in the unholy triumvirate of ENODATA, EAGAIN and EINTR
18:25  dkr: I need to interview a senior sysadmin that says he knows python.  I'm a perl guy that has done very little python.  anyone have a good python question I can ask over the phone that might indicate a high level of python knowledge without being trivia? :)
18:25  joenp: sphenxes: Try isolating the output from depot.insert(END , ';') and see what you get.
18:25  arkanes: dkr: there's nothing you can really do
18:25  lvh: BrianE: Not even the people who wrote asyncore disagree.
18:25  lvh: BrianE: That's because it's a measurable fact. Here's their data: http://www.nightmare.com/medusa/async_tweaks.html
18:25  BrianE: I've built a fairly feature-full IRC library using it as a base... I could swap asyncore out for something similar I guess; would it be worth it?
18:25  lvh: BrianE: If you ask me, absolutely.
18:26  arkanes: dkr: when you hire someone for something you don't personally have any expertise in you will have to just rely on his references and resume
18:26  dkr: arkanes: actually, indicating any level of python knowledge would be good.  prelim phone interview is just to verify resume
18:26  arkanes: dkr: ask him about stuff he's done with python
18:26  BrianE: lvh: Is there anything in the standard library that can do the job?
18:26  lvh: BrianE: No.
18:26  lvh: BrianE: well, twisted is defined in terms of the stdlib.
18:26  lvh: You could use that.
18:26  lvh: (Or copy it.)
18:27  dkr: arkanes: you really can't think of some topic that would be good for a question like this?  I can think of several in perl
18:27  lvh: BrianE: The stdlib is where code goes to die.
18:27  lvh: BrianE: (Not my quote -- Guido's.)
18:27  arkanes: dkr: sure, because you know perl
18:27  BrianE: Heh
18:27  arkanes: dkr: and you'll be able to know if he's lying from the answer
18:27  lvh: BrianE: How the hell do you expect to maintain high quality software inside the stdlib
18:27  Scala: dkr: Just pick a project euler type question and ask him to do that
18:28  lvh: BrianE: You're entirely bound by the release schedule of a project virtually unrelated to yours for actually publishing new software
18:28  arkanes: project euler is silly, especially for a sysadmin
18:28  arkanes: just ask him about stuff he's used python for
18:28  lvh: BrianE: That pretty much only works if your project is dead.
18:28  Scala: *shrug* if you just want to verify knowledge of a programming language it's not bad
18:28  MostAwesomeDude: Scala: Over the phone?
18:28  Scala: Oh, well no
18:28  lvh: BrianE: It was slated for removal in 3.x, but some unfortunate soul started maintaining it.
18:28  BrianE: lvh: It's for personal use more than anything, though I'm considering releasing a public web IRC service based on it
18:28  yury: alright, read the link ccxCZ gave
18:28  kerio: lvh: well, the stdlib is like debian stable
18:28  yury: makes sense
18:29  BrianE: If it can't handle more than 1 e3 connections, I'll -have- to get rid of asyncore =\
18:29  lvh: kerio: No, debian stable has backports.
18:29  kerio: and python has third-party libraries
18:29  kerio: :)
18:29  arkanes: BrianE: BTPC is basically the worst way to write networking software possible
18:29  lvh: BrianE: I'm having difficulty believing the 1E3 number is what you remembered about my rant
18:30  arkanes: BrianE: the actual point at which your server falls over and dies will vary, but if you intend to offer anything over the public internet its not going to be sufficient
18:30  lvh: BrianE: How about "inability to use developments in event sources made in the last fifteen years or so"
18:30  BrianE: lvh: It isn't, but it's the most limiting factor - it's the 100% unavoidable factor
18:30  BrianE: lvh: Yes, I know
18:30  lvh: Well, if I convinced you to ditch medusa, I'm happy
18:31  lvh: Most of the stdlib is pretty terrible to use directly
18:31  pingveno: Is there any reason that a library that works with ctypes in python 2 wouldn't work in Python 3?
--- Log closed Mon Dec 20 21:34:39 2010
--- Log opened Mon Dec 20 21:40:01 2010
21:40 --- Users 765 nicks [0 ops, 0 halfops, 0 voices, 765 normal]
21:40  CMI-DOS: but i came for help not to use twisted
21:40  ssbr: CMI-DOS: what makes you think using Twisted wouldn't help you?
21:40  kerio: using twisted will help you a lot
21:40  kerio: (ampirc is twisted irc + twisted amp)
21:40  ssbr: ampirc is insufficiently documented.
21:41  papna_: ampirc is for things that many IRC clients do not need.
21:41  kerio: ampirc is for irc bots
21:41  ssbr: oh, is he writing an IRC client?
21:41 --- Channel #python was synced in 91 seconds
21:41  CMI-DOS: nope
21:41  CMI-DOS: a bot
21:41  CMI-DOS: ssbr: put a s at the beginning of he
21:42  CMI-DOS: thank you :)
21:42  ssbr: She, then.
21:42  papna_: I'm using the word "client" to mean "thing for communicating with a server".
21:42  papna_: Such as your bot.
21:42  CMI-DOS: oh i see :)
21:42  jeremyw: Is there a preferred way to check of list2 has at least the same items as list1?
21:42  jeremyw: I looked at the built-ins but didn't see anything.
21:42  ssbr: jeremyw: sets
21:42  ssbr: jeremyw: e.g. set(list2) > set(list1)
21:43  jeremyw: Okay.
21:43  lukoko: Could someone tell me why do I need egg-info directory ?
21:43  ssbr: ideally you'd be using a set to begin with if you want semantics like this.
21:43  kerio: >=
21:43  ssbr: lukoko: you don't, actually.
21:43  ssbr: kerio: er, yes
21:43  ssbr: >=
21:43  lukoko: but why is it created durng build?
21:43  lukoko: *during
21:43  papna_: jeremyw: There's a good chance you want to use sets all along, not lists.
21:43  jeremyw: Makes sense to me.
21:43  CMI-DOS: if this server still used /pass then i wouldn't have this problem right now :(
21:43  ssbr: lukoko: because it's needed by setuptools, I suppose. But you don't need setuptools either!
21:44  lukoko: ssbr: you mean, should i use distribute instead of setuptools?
21:44  ssbr: lukoko: as it turns out, not many people here use (or publicly admit to using) setuptools
21:44  ssbr: lukoko: er, maybe? I don't know anything about Distribute.
21:44  MostAwesomeDude: I'll publicly admit to doing "from setuptools import setup" and hoping it finds distribute instead. :3
21:45  verte: setuptools is the bane of human existence
21:46  CMI-DOS: my bot is in #IonOS and is called Vena
21:47  papna_: Such as your bot.
21:47  papna_: Oops.
21:50 --- `Fuco` is now known as Fuco
21:50  aberceanu: nosklo: i dont get the random number thing though
21:51  aberceanu: nosklo: i mean its nice that i can replace the list a[], but i still need the index for lci
21:52  aberceanu: nosklo: because the subplots must be 231, 232, 233, 234, 235 and 236
21:52  nosklo: aberceanu: which subplot must be 231? and which must be 232?
21:52  nosklo: aberceanu: do you mean any of the subplots can be any of those?
21:53  aberceanu: nosklo: even in that case random wouldnt work, because it can give 232 twice in a row for instance
21:54  lukoko: Well i think setuptools is great. But from-time-to-time I find some people arguing against it, and i do not understand why. I think that it is good for python to have consistent application structure.. And distribute, i can not see any difference betveen it and setuptools.
21:54  _habnabit: lukoko, 'consistent application structure' ?
21:54  nosklo: aberceanu: yeah, the point was just to ask you if order really doesn't matter and any of the plots could be any number, or if you have the intention to put a position on a specific subplot
21:55  verte: setuptools installs things in a manner that breaks existing installed applications
21:55  lukoko: _habnabit: like any python application has the same means to install, build, run tests..
21:55  nosklo: aberceanu: because, if order doesn't matter, then you have a use case for enumerate
21:55  aberceanu: nosklo: the order is not important
21:55  lukoko: So what is the Right ay to organize an application?
21:56  ssbr: lukoko: depends.
21:56  mhahe: python and html how does that work? i have done some work with web server scripting and writting dynamic pages with php but nothing special, any recommended material that can shed light on this for me?
21:56  ssbr: (on, for example, what framework you're using)
21:57  nosklo: aberceanu: ok, then use enumerate. I'd use "lci = index + 230" instead of that string formatting, though.
21:57  aberceanu: nosklo: ah good point
21:57  verte: lukoko: everything useful about setuptools is already in distutils, which comes with python
21:57  nosklo: aberceanu: and I'm not sure why you're storing the subplot in the list "ax" at all, since you're always indexing it back
21:58  ssbr: verte: not everything
21:58  aberceanu: nosklo: yeah im not doing that anymore, tnx to ur code ;)
21:58  verte: lukoko: its distutils that has the bdist Goo
21:58  ssbr: verte: being able to do something like python setup.py build_docs or whatever the command was is nice
21:58  ssbr: also python setup.py test
21:58  nosklo: that can be done using distutils extensions, no?
21:58  ssbr: is it?
21:59  ssbr: it isn't a matter of theoretical possibility, but of what distutils actually offers
21:59  nosklo: as in http://docs.python.org/distutils/extending.html#integrating-new-commands
21:59  nosklo: you create a command to do what you want -- build docs or whatever
21:59  ssbr: nosklo: I don't want to reinvent the wheel myself.
21:59  ssbr: This is already implemented for something else.
21:59  nosklo: that's just glue, you're not reinventing anything
22:00  ssbr: nosklo: I don't want to write code for something irrelevant to what I'm actually doing.
22:00  nosklo: you just make it call whatever you use to build the docs, sphinx or whatever
22:00  ssbr: nosklo: I like things actually working.
22:00  nosklo: no need to write any code
22:00  CMI-DOS: OMG twisted doesn't work out of the box
22:00  verte: CMI-DOS: it needs to be in the box
22:00  ssbr: nosklo: the fact is, if I install setuptools and sphinx, I can do python setup.py <build-doc-command-that-I-forget>
22:00  nosklo: CMI-DOS: keep it inside the box
22:01  ssbr: nosklo: if distutils can't do the same, then your statement was false, which is what I said
22:01  CMI-DOS: OMG
22:01  CMI-DOS: i am serious
22:01  ssbr: moving this to whether it can do the same, with some extra steps that I don't want to deal with, is shifting the goalposts and unfair
22:01  nosklo: ssbr: is your point that sphinx is already integrated with setuptools by the sphinx author?
22:01  aberceanu: nosklo: ok and if i want them to be in order?
22:01  papna_: CMI-DOS: Perhaps you should ask a question or explain your experience.
22:01  papna_: aberceanu: Which ordeR?
22:01  ssbr: nosklo: Basically, yes
22:02  ssbr: nosklo: as is a lot of other stuff
22:02  nosklo: ssbr: well, it's also integrated with distutils
22:02  nosklo: ssbr: so you can rest assured
22:02  aberceanu: papna_: the same order that i used in defining the dictionary
22:02  papna_: aberceanu: That is lost.
22:02  ssbr: nosklo: well then why didn't you say that before?
22:02  papna_: aberceanu: The dictionary doesn't share that.
22:02  aberceanu: (0,0), (0,10) etc
22:02  papna_: aberceanu: *doesn't store that
22:02  ssbr: I asked about it specifically, at least twice
22:02  nosklo: ssbr: if something is integrated with setuptools and not distutils, the thing needs fixing
22:02  papna_: aberceanu: Perhaps you want a list.
22:02  johnny24: I am using win32com.client to dispatch internet explorer ... i'm doing fine  so far but i have a problem hunting me ... how do I can interact with cross domain iframes
22:02  nosklo: ssbr: because I thought you're asking that to make another point. Sorry
22:02  johnny24: anyone has an ideea ?
22:02  ssbr: nosklo: these days I don't argue for points
22:03  ssbr: nosklo: dialectic is my new thing
22:03  CMI-DOS: this is the problem that i'm having > http://46.4.25.244/error
22:03  nosklo: oh no, now I have to get used to another new ssbr :(
22:03  ssbr: well I mean I do argue, just not about every-bloody-thing
22:03  papna_: CMI-DOS: Twisted works dine.
22:03  papna_: CMI-DOS: The code you are running uses BeautifulSoup
22:03  papna_: CMI-DOS: You didn't install BeautifulSoup.
22:04  aberceanu: papna_: well i can make two lists instead of the dictionary
22:04  aberceanu: papna_: and loop over them with zip
22:04  CMI-DOS: i didn't
22:04  papna_: CMI-DOS: BeautifulSoup is an HTML parser unrelated to Twisted that's used in the example script I sent.
22:04  papna_: aberceanu: Or one list of tuples.
22:04  aberceanu: papna_: that should be equivalent to what im doing now, and keep the order
22:04  aberceanu: papna_: or one list of tuples, yes
22:05  aberceanu: papna_: perhaps thats the simplest
22:05  CMI-DOS: i cant find a package named beautyfulsoup
22:05  papna_: CMI-DOS: What platform are you on?
22:05  CMI-DOS: Debian Linux 5.0
22:05  papna_: _habnabit: You should really update your example to use lxml.html
22:06  NelleV: CMI-DOS: http://www.crummy.com/software/BeautifulSoup/
22:06  NelleV: CMI-DOS: section download
22:06  papna_: CMI-DOS: apt-get install python-beautifulsoup
22:06  papna_: NelleV: No.
22:06  CMI-DOS: i hope BeautifulSoup isn't crummy
22:06  papna_: Alas.
22:06  nosklo: CMI-DOS: BeautifulSoup isn't part of twisted.
22:06  Peng: I prefer my soup with crumbs in it.
22:07  NelleV: well, it also works the way papna_ said
22:07  nosklo: also, I fixed twistedex _habnabit example to use lxml.html but he didn't accept the patch yet :( :(
22:07  papna_: _habnabit: Accept nosklo's patch.
22:07  fission6: how can i use a string like an object? like if i have a string which is 'theNameofSomeClass' and iw ant to call a method from the class
22:07  CMI-DOS: Peng: me too :) it doesn't need to look beautiful but it has to taste beautiful :D
22:08  verte: except nosklo, patch:
22:08  joltz: ugh beautifulsoup... if you get the contents of a tag, it gives you something called navigablestring. wrap it in unicode() to get an actual unicode string. found that out last night :/
22:08  verte: fission: why do you have a class name in a string?
22:08  papna_: fission6: Why do you have a string? Why don't you have the class object itself?
22:08  verte: fission6: you can build a dict from class name to class
22:09  nosklo: joltz: lxml.html's xpath() api also does that.
22:09  papna_: joltz: BS gives you unicode dammit........BS doesn't give you unicode.
22:09  CMI-DOS: i can't be bothered with this :(
22:09  nosklo: joltz: however it's a lot better
22:10  papna_: fission6: Post your code.
22:10  fission6: papna_: coming in from a serialized file
22:10  nosklo: CMI-DOS: you can remove the part that uses beautifulsoup from the example if you want. It's not necessary to run. Just a nice example of how to make your bot do an async request of a webpage and parse the title out of it.
22:10  CMI-DOS: LOL bsod1 just got the blue screen of death :D
22:10  fission6: its the name of an ORM class
22:10  papna_: fission6: Make a dictionary mapping names to objects.
22:10  fission6: k
22:11  joltz: I think i'm still having problems with it even. the decode/encode errors are gone but now it seems like i'm searching an API with scrambled text
22:11  fission6: yea that wil help avoid if elif .... else structure too
22:14  aberceanu: papna_, nosklo: thanks guys, it looks much nicer now :)
22:14  lukoko: does distutils do any dependency management?
22:16  verte: no
22:16  verte: which is its best feature :)
22:16  lukoko: and you say thai it is better than setuptool while setuptools does?
22:16  fission6: papna_: similar question, in the seriaized file i also have a field : value which i want to pass into the method, how can i take field and have it recognized as a keyword instead of str
22:17  FilipeMaia: How do I change the path that python uses to search for libraries? I'm trying to start a program that comes bundled with its own python version but it can't find the tkinter library
22:18  Dynetrekk: FilipeMaia: export PYTHONPATH can add to the search path
22:18  FilipeMaia: Dynetrekk: thanks
22:21  verte: lukoko: dependency resolution is the root of the problem. package management shouldn't be reimplemented by each and every language, especially when the things it installs conflicts with already installed packages or packages you are working on
22:22  Dynetrekk: verte: it would perhaps be useful if, when you did "python setupy.py (something)", do some sort of test of what python modules you expect to exist, and an appropriate error message? just a thought.
22:23  fsufitch: is there any easy way to change terminal colored text into regular plaintext? i hooked up a StringIO to an external library, and it's feeding me "[01mreading sources... [39;49;00m[100%]" instead of "reading sources [100%]" . is there any way to convert from one to the other?
22:23  lukoko: verte: i am comming from java, where is a tool maven that helps to avoid dependency hell and manages all dependencies. I thought that setuptools would be something similar in python :(
22:23  Dynetrekk: lukoko: if you are on linux, you can usually get by with your package manager... or macports on macosx
22:23  BrianE: ^
22:24  verte: lukoko: maven2 is a lot more hygienic, even though everyone hates it
22:24  lukoko: Dynetrekk: but this is not the config you can commit to version controll
22:24  Spider222: Q: So I know you could use urllib2 to authenticate with forms that have Action="xxxxxx" with opener and handler (from tutorial). How can you authenticate when Action="" is given, as in case of Django?
22:24  Dynetrekk: lukoko: ah, point there
22:25  ivazquez|laptop: No action means use the current URL.
22:26  ccxCZ: fsufitch: afaik no trivial way to do it, but you can regexp them out if you want
22:27  ccxCZ: fsufitch: http://ascii-table.com/ansi-escape-sequences-vt-100.php
22:29  papna_: fission6: foo(x=y, z=q) is the same as foo(**{'x': y, 'z': q})
22:29  ivazquez|laptop: Ew. Why isn't the library detecting (non-)presence of a TTY?
22:29  fsufitch: ccxCZ, thanks
22:30  sneakyness: hey guys, I'm having a bit of a problem with a class I'm trying to use
22:30  sneakyness: I'm trying to use it in the shell to test it right now
22:31  sneakyness: it uses twitter.Api(), and I've imported twitter
22:31  sneakyness: but when I try to make an instance, it's telling me module object has no attribute Api
22:31  sneakyness: do I need to specifically do "from twitter import Api"
22:31  ivazquez|laptop: Did you name something else "twitter.py"?
22:31  ccxCZ: fsufitch: actually it seems incomplete with regard to color codes; if you have only color escapes you can use '\033[0-9;]*m' as regexp
22:31  sneakyness: ivazquez|laptop: no
22:32  sneakyness: and I can use twitter.Api() as expected after i import twitter
22:32  ccxCZ: '\033\\[[0-9;]*m' acutally
22:33  sneakyness: so that's why I'm asking you guys, I have no idea why this is happening
22:33  BrianE: sneakyness: Looking at the twitter.py source, it isn't doing any magic after being imported - it's just a standard module
22:33  sneakyness: that's all it's supposed to be
22:33  BrianE: Double check you haven't got another file named twitter.py
22:33  BrianE: =\
22:34  htoothrot: could be anywhere else on your sys.path
22:34  BrianE: ^
22:34  sneakyness: I already went through this and I know I only have python-twitter installed
22:34  kerio: sneakyness: import twitter; print twitter.__file__
22:34  sneakyness: '/usr/local/lib/python2.6/dist-packages/python_twitter-0.8-py2.6.egg/twitter.pyc'
22:34  sneakyness: exactly as expected
22:35  BrianE: Are you doing that from a separate Python terminal or from the CWD of the file that you have the problem with?
22:36  sneakyness: CWD?
22:36  BrianE: *directory
22:36  sneakyness: I'm doing this from the django manage.py shell
22:36  hanstech: Hi, How can i find all the attributes of an object ?
22:37  hanstech: eg: for a string object ?
22:37  sneakyness: I don't understand what's going on, I'm importing everything, and all the pieces work seprately, but as soon as I try to get an instance of this class, it's telling me that Api doesn't exist
22:37  BrianE: Try it inside your file and run it as normal... there's no reason for twitter.Api not to exist if it's importing the correct file
22:37  sneakyness: What do you mean try it inside of your file?
22:37  BrianE: hanstech: dir("hello")
22:38  hanstech: BrianE: but dir won't show attributes like __name__
22:38  BrianE: It will
22:39  BrianE: (But str objects don't have a .__name__)
22:39  sneakyness: BrianE: I don't understand what you mean try it inside of my file? :X
22:39  hanstech: But how come type('BA').__name__
22:39  hanstech: ?
22:39  hanstech: returns str
22:40  ivazquez|laptop: type objects do.
22:40  hanstech: oh, type is a seperate object type ?
22:40  hanstech: I was not aware of that
22:40  kerio: type is a type
22:41  ivazquez|laptop: And type's type is type.
22:41  kerio: and it's also an object
22:41  kerio: which is a type
22:41  hanstech: Yes. got it now
22:42  BrianE: Lol
22:43  BrianE: (Sorry, infobob)
22:43  fission6: whats a simple way to time how long a method takes to call? i am not doing profiling for say meaning i dont need anything to fancy, may be just time.time?
22:43  Peng: fission6: Yeah, that works.
22:43  fission6: cool
22:43  Peng: fission6: Also checkout the timeit module.
22:43  Peng: check out*
22:43  BrianE: fission6: start_time = time.time(); long_blocking_function(); end_time = time.time(); time_taken = end_time-start_time
22:43  fission6: yeah did that, thing its even to much for what i need
22:44  fission6: cool
22:44  sneakyness: BrianE: hey, I tried just throwing a "from twitter import Api" in the __init__ of the class I'm trying to get an instance of, and it's failing at that, too, what is going on here?!
22:44  BrianE: sneakyness: Try "import twitter", then find out what dir(twitter) is
22:44  BrianE: (In that same __init__ function)
22:45  BrianE: For what it's worth, @hanstech: http://imgur.com/WUoGO
22:45  BrianE: Types / objects have a 'name', instances don't
22:45  BrianE: You'll get that same result for any object that doesn't explicitly define a __name__ for itself
22:47  sneakyness: BrianE: AHA! There was a twitter.pyc chilling in the same dir
22:48  sneakyness: I'd just like to blame my FTP client for making me look like an asshat and not refreshing :X
22:48  sneakyness: sorry about that, I feel dumb now, but I'm happy :)
22:50  BrianE: :P
22:52  cornelinux: Hi there, I know it may be bad coding style, but is there something like a MACRO? I got some lines of code occuring within many functions, but I want or cannot extract them to an additional function...?
22:52  ivazquez|laptop: No.
22:53  cornelinux: ivazquez|laptop: OK, thanks :-/
22:53  sente: what does %r mean in the context of 'str="foo %r" % var' ?
22:53  ccxCZ: cornelinux: python is designed so writing ugly code is painful :o)
22:54  cornelinux: ccxCZ: Yeah - that's really True! :o)
22:54  BrianE: cornelinux: What's wrong with defining a function?
22:54  BrianE: If you could set out a macro, you could create a function =\
22:57  sneakyness: ccxCZ: that's so true it hurts
22:57  jrabbit: what is the simplest python twitter library? I don't want to have to hack in a pin fetching thing
22:58  Dynetrekk: sente: http://docs.python.org/library/stdtypes.html#string-formatting %r means "run repr(var) and stuff it into the string where it says %r"
22:58  BrianE: jrabbit: The official one
22:58  jrabbit: BrianE: theres an official one?
22:58  jrabbit: which is?
22:58  sneakyness: the official one sucks, I suggest python-twitter
22:58  BrianE: I thought python-twitter was the official one o_O
22:58  sneakyness: LOL
22:58  sneakyness: nope, got replaced by some other piece of crap
22:59  sneakyness: right around the time OAuth was required, and then python-twitter caught up and it never got it's spot back
22:59  BrianE: Oh
22:59  jrabbit: sneakyness: I'm trying it but apperantly you need mroe than Consumer key
22:59  sente: Dynetrekk: thank you
22:59  BrianE: Well, http://code.google.com/p/python-twitter is probably the best option right now
22:59  sneakyness: ^hands down
22:59  jrabbit: k
22:59  Dynetrekk: sente: no problem
22:59  Dynetrekk: sente:  would recommend though: str.format()
22:59  BrianE: jrabbit: Regardless of what library you use, you WILL have to use OAuth
23:00  cornelinux: Hi BrianE, if got something like this http://paste.pound-python.org/show/749/. I got many of these functions like getConfig and want to extract lines 3-7. So sometime I do not need  a return value. And if i use a function, I will have to use an if statement again. I am lazy. Maybe i am not flexible in mind.
23:00  Dynetrekk: sente: % may be removed in future python (although I'm not sure if it really will be)
23:00  sneakyness: if you're havinbg trouble doing the OAuth dance, jrabbit, you can use your registered app's pre-determined keys
23:00  sneakyness: but only as a temporary measure unless you're doing some very small scale stuff such as myself
23:00  jrabbit: I doubt anyone else will ever use it so thats probably ok
23:01  sneakyness: uh it doesn't work like that
23:01  jrabbit: but I guess I can't make that public :P
23:01  sneakyness: you should really read the documentation
23:01  jrabbit: sneakyness: I get it its just I don't understand why getting the access token is so hard :|
23:05  sneakyness: it's not, it just seems like it is :)
23:05  BrianE: cornelinux: I'll reply to that paste in a second
23:05  sneakyness: my advice: go look at somebody else's open source twitter python implementation and rip their code
23:05  BrianE: Though, why are you implementing authorisation in your MODELS?
23:05  BrianE: Surely authorisation should be implemented in controllers / elsewhere in the code, not in functions / models for actually altering data
23:06  Eevee: down that road lies madness
23:06  Eevee: I'm still trying to rip that sort of thing out at $work
23:06  jrabbit: sneakyness: sounds good!
23:06  sneakyness: Eevee, I'm imagining you to be a weary looking traveller with a big dark cloak and a large walking staff, and a gnarled face, from numerous battles with said madness
23:06  jrabbit: another speedbump
23:06  jrabbit: the pypi versino doesn't have oauth lol
23:07  jrabbit: XD
23:07  CMI-DOS: OMG i hate colours
23:07  sneakyness: jrabbit: aren't you normally an iOS dev, or am I mis-remembering things?
23:07  CMI-DOS: i can't read some of your nicks
23:07  jrabbit: No I have nothing to do with ios
23:07  CMI-DOS: i am colour blind
23:07  sneakyness: I hope you can't read mine, it'd be fitting
23:08  cornelinux: BrianE: well, actually it is a controller/API for altering data not the model itself.
23:08  moreati: CMI-DOS: colours are a function of your IRC client, configure it not to if it dosn't let you,or get another irc client
--- Log closed Mon Dec 20 23:31:37 2010
--- Log opened Mon Dec 20 23:31:58 2010
23:31 --- Users 753 nicks [0 ops, 0 halfops, 0 voices, 753 normal]
23:32  magicblaze007: what is the easiest way to serve a webpage with a form, then capture the submitted form data in a python function?
23:32  BrianE: Aah
23:32  BrianE: Then why not use xrange() instead of range()?
23:32  papna: BrianE: xrange was renamed "range" in Python 3.
23:32  BrianE: It was?
23:32 * BrianE Goes quiet
23:32  craiggles: papna: well, basically any. from site scrapers to irc bots, basically anything i would do in another language, are you saying i should be using 2.*?
23:33  papna: craiggles: The software you'd use to make web scrapers (scrapy) and IRC bots (twisted) are not available for 3.x.
23:33 --- Channel #python was synced in 91 seconds
23:33  craiggles: oh i see.
23:33  papna: craiggles: Almost everyone writing real programs uses 2.x.
23:33  BrianE: craiggles: Python 3 isn't really widespread yet, the commonly used version is 2.x
23:34  craiggles: alright then, i'll convert.
23:34  seiflotfy: hey guys
23:34  BrianE: Python 3 is supposed to be a big change that fixes a lot of niggles people have with 2.x (design flaws, possibly)
23:34  seiflotfy: ccxCZ, i have a unicode string i want to turn into a array of bytes
23:34  seiflotfy: ×☠☻☮
23:34  craiggles: BrianE: I see, do you have any idea when it will be ready for main-stream use?
23:34  papna: Python 3 makes some small, backwards-incompatible changes.
23:34  papna: craiggles: Years to never.
23:35  craiggles: oh, i see how it is.
23:35  papna: craiggles: Depending what "ready" means.
23:35  cwillu_at_work: craiggles, today, if what you need is available :)
23:35  craiggles: heh.
23:35  bob489: There are still a few major libs that don't have a full working python 3 release yet...
23:35  papna: By "a few" you mean "almost all"?
23:35  regebro: craiggles: Now to three years depending on what you need.
23:35  Rajko: how do i flip bits in a byte ?
23:35  Rajko: aka do a ~
23:35  papna: Rajko: ~
23:35  explodes: Anyone figured out a solution to PyDev not allowing auto-complete of code in your project? My enivornment is a virtual environment, that also happens to use separate directory for eggs (via buildout). Is there some environment variables i can set in eclipse to fix this?
23:35  craiggles: so i've ready up to list(range(3)) .. is there anything i need to relearn?
23:35  ccxCZ: seiflotfy: use .encode() on the unicode string
23:35  craiggles: i think you said i could just do, xrange(5)?
23:35  BrianE: Apparently BDFL said "We're half way into a 5 year plan [for Python 3]"
23:36  bob489: explodes: i'm not sure, but maybe check your library paths... i know that is an issue with wing for me sometimes
23:37  Rajko: lets say i wanted to flip byte 23 of a string
23:37  bob489: BrianE: I think he also said there would prob be a very long run of python 2.x releases too
23:37  bob489: he changed his mind i guess
23:37  Rajko: how do i do that
23:37  Rajko: just var[23]=~var[23] ?
23:37  regebro: papna: well, numpy is only "kinda" on Python 3 as I understand it. So it's "kinda" missing. And PIL and Twisted and scipy and pytz, and then it's not so "major" anymore. It's looking good IMO. :-)
23:38  explodes: no, 23 is the third character.
23:38  cwillu_at_work: Rajko, try it (python shell)
23:38  papna: regebro: Sure, if that's what you want.
23:38  explodes: not necessarily the 23rd byte.
23:38  papna: Rajko: ^^
23:38  papna: Rajko: Oh, of a string.
23:38  Rajko: 24th
23:38  explodes: could he do var.decode()[23] ?
23:38  regebro: papna: Well, you did say "major", not "the ones I need". The only one of these I need are PIL and pytz. :)
23:38  papna: Rajko: ~ is for ints, not strings.
23:38  Rajko: <Rajko> how do i flip bits in a byte ?
23:38  papna: Rajko: And strings are immutable, so you cnanot assign to them.
23:39  Rajko: i dont know what the data type is
23:39  papna: Rajko: What does your program do?
23:39  Rajko: just segment a file into many smaller ones
23:39  papna: Rajko: Why are you doing this operation?
23:39  bob489: couldn't he use the array lib?
23:39  bob489: or numby
23:39  Rajko: i have to mangle my input files because the processor afterwards flips that byte
23:39  bob489: *numpy
23:39  cwillu_at_work: bob489, or a plain list?
23:39  Rajko: making them wrong
23:40  papna: Rajko: What processor?
23:40  Rajko: so im reverse flipping it
23:40  regebro: craiggles: You don't need to relearn much if you are a newbie. print, except and / are the major differences. :) Then it's all subtle shit that will bite your bum. :)
23:40  Rajko: some chinese application
23:40  papna: Rajko: Why is this not nonsense?
23:40  jrabbit: is there any good guides on doign two way sync out there?
23:40  Rajko: figure itwould be easier than editing the dissasembly of the chinese application not to flip that bye.
23:41  papna: Rajko: Well, you're welcome to do chr(~ord(c)) on that one character and write it.
23:41  papna: Rajko: Or, use the struct module.
23:41  geosav: newb here.  is it possible to search for a word on a line with readlines()
23:41  papna: geosav: Sure.
23:42  papna: geosav: It's also possible and better to do it WITHOUT readlines
23:42  Rajko: how about this
23:42  bob489: would an unsigned char work using array module?
23:42  craiggles: regebro: righto :)
23:42  papna: geosav: Where are you having trouble?
23:42  Rajko: the original program has hdr = data[:0x18] , what if i make it data[:0x17].append(~data[0x17])
23:43  craiggles: I mean i'm not new to programming, i know the terms and whatnot just new to python, with the docs i shouldn't be too bad.
23:43  craiggles: Not that i've got a lot of programming experience ;)
23:43  papna: geosav: You want to find out......if any lines of the file contain a string?
23:43  craiggles: :)*
23:43  BrianE: craiggles: Check out the Python 2.x tutorial, it'll empart all the essential syntax and basic knowledge
23:43  papna: Rajko: I have no idea what the types of that stuff are supposed to be, but it really doesn't sound like that's what you want.
23:44  Rajko: no types.
23:44  Rajko: python no types
23:44  Rapala_: hey everyone.  I'm attempting something simple and failing miserably.  I'm attempting to create a few directories, then remove them.  My 3 lines of code (and error output) are here: https://gist.github.com/749147     The first 2 lines (creation and printing of path) work fine.   The last line gives the error.
23:44  papna: Rajko: That is very untrue. All objects in Python are strongly typed.
23:44  Rajko: then why cant i see them in code ?
23:45  BrianE: Rapala_: tempDir is None
23:45  geosav: i'm reading in a web page, and I need to find a few headings which contain the info i need 2 lines down
23:45  papna: Rapala_: os.makedirs makes the directories and returns None.
23:45  craiggles: BrianE: Yeah i'm checking it out, cheers.
23:45  papna: Rapala_: It doesn't return the path.
23:45  ivan`: Rajko: there are no type declarations or compile-time type-checking
23:45  papna: geosav: Which HTML parser are you using?
23:46  geosav: problem is the line the heading is on varies
23:46  Rapala_: BrianE / papna: Thanks.  But why does it print the correct path when i comment out the 3rd line?
23:46 --- CMI-DOS is now known as Vena
23:46  BrianE: Rapala_: It shouldn't =\
23:46  Rapala_: BrianE: It does ;p.  It also creates the dirs correctly
23:47  ccxCZ: Rapala_: also consider using os.path.join and friends for path manipulation
23:47  bob489: craiggles: http://docs.python.org/library/array.html
23:47  geosav: kinda new to this, is this what you mean by parser     response = urllib.request.urlopen(thisUrl)     I'm using regex to find what i need
23:47  Rajko: so it is a string
23:47  Rajko: AttributeError: 'str' object has no attribute 'append'
23:47  Rajko: grea.
23:47  GAEfan: How do I test if a variable exists, without try/except?
23:47 --- Vena is now known as CMI-DOS
23:47  papna: GAEfan: You don't.
23:47  BrianE: Well
23:47  papna: GAEfan: You preferably don't test WITH try/except. That is a Python anti-idiom.
23:47  bob2: Rapala_: if it is printing the dir, it is doing it elsewhere
23:48  ideasman_42: is there a clever way to do this?: (a.b if a.b else a)
23:48  GAEfan: I gues s that explains it
23:48  Rapala_: thanks everyone.  I'll look into things further.  I think my python install might be screwy (OS X python + mac ports, multiple module paths and stuff)
23:48  papna: Rajko: You seem to be approaching this program without the necessary attention to detail.
23:48  bob2: geosav: lxml.html.fromstring
23:48  BrianE: GAEfan: Try/except blocks are free
23:48  papna: Rajko: You might want something like chr(~ord(data[0])) + data[1:24]
23:48  papna: BrianE: Variable definedness checking isn't, though.
23:48  Rajko: that would flip the first byte
23:49  ideasman_42: Its just too verbose in this case: (bpy.context.material.active_node_material if bpy.context.material.active_node_material else bpy.context.material)
23:49  GAEfan: BrianE: yeah, but they just seem sloppy.
23:49  geosav: bob2    ummm  where can I look that up. never seen that
23:49  BrianE: Well
23:49  bob2: geosav: in the lxml docs
23:49  papna: Rajko: It would.
23:49  BrianE: The only other way I know of would be to check if it's in locals().keys()
23:49  BrianE: =\
23:49  bob2: geosav: http://codespeak.net/lxml/lxmlhtml.html
23:49  Rajko: so ill just change it to flip the 24th byte instead
23:49  papna: BrianE: That doesn't work and it's awful.
23:49  GAEfan: So, if I don't know whether or not var exists... try: x = var Except: x = None
23:49  Rajko: whats with the double casts
23:49  papna: Rajko: data[23] then. Whatever.
23:49  bob2: GAEfan: no, fix things so you do know
23:49  bob2: this isn't php
23:49  BrianE: papna: Why / why / what would you recommend?
23:49  papna: Rajko: I have no casts.
23:49  ideasman_42: if "x" in locals()
23:50  papna: BrianE: KNOWING whether a variable exists.
23:50  Rajko: chr ord
23:50  papna: ideasman_42: Stop that.
23:50  bob2: ideasman_42: don't be terrible
23:50  ideasman_42: hehe
23:50  papna: Rajko: Those are both functions.
23:50  BrianE: papna: :P
23:50  papna: Rajko: ~ is defined for ints.
23:50  bob2: GAEfan: set it to some value to begin with
23:50  ideasman_42: its faster!
23:50  papna: Rajko: Not for strings.
23:50  papna: Rajko: docs.python.org/tut
23:50  papna: ideasman_42: Stop that.
23:50  ideasman_42: its true
23:50  GAEfan: bob2:  That leaves me with the same issue, right?  x = None.  Try: x = var...?
23:50  sprzybilla: anyone know of some good documentation surrounding XML parsing via a web-API in py3.1?
23:51  bob2: GAEfan: no
23:51  explodes: rajko: ...
23:51  BrianE: I love Python. The way it forces you to program well is brilliant
23:51  bob2: sprzybilla: what does that mean?
23:51  explodes: wait one sec
23:51  BrianE: (Such as no checking if a variable exists)
23:51  papna: GAEfan: "if x is None" is more idiomatic, controllable Python code.
23:51  bob2: BrianE: alas it doesn't, people write awful code all the time :(
23:52  Rajko: papna ValueError: chr() arg not in range(256)
23:52  bob2: sprzybilla: (ie which bit are you asking about, python includes 15 000 xml parsers)
23:52  BrianE: bob2: Imagine how much worse it'd be if the bar wasn't set at all :P
23:52  geosav: bob2 is lxml a bitch to learn?  I'm kind of new to this.  Still not over the regex ass-kicking of late
23:52  sprzybilla: bob2: I dunno I am a nub :P I am trying to parse an XML using urllib and etree, but I am having trouble with the file-like object that returns from urlopen
23:52  bob2: geosav: it's quite easy
23:52  bob2: geosav: what specifically are you trying to do?
23:52  kerio: it's not that regexps are bad
23:53  kerio: the fact is that it's impossible to parse html with regexps
23:53  BrianE: kerio: How do HTML parsers do it, then?
23:53  bob2: sprzybilla: tree = xml.etree.ElementTree.fromstring(response.read())
23:53  GAEfan: papna: But "if x is None" returns an error is x doesn't exist
23:53  bob2: GAEfan: the point is you must make x always exist
23:53  kerio: if you manage to parse arbitrary HTML with a regexp then it means that you found a flaw in basic logic
23:53  explodes: rajko http://pastie.org/1393511
23:54  bob2: GAEfan: checking whether a particular codepath initialised a var is not something you do in python
23:54  BrianE: GAEfan: The idea is that you should -always- know what variables you have locally
23:54  bob2: GAEfan: you just make sure it always happens
23:54  BrianE: There should never be a case where you don't know what variables you have at hand, even if they're global
23:54  geosav: i'm trying to get some data out of some web pages.  the postion of data(line numbers) varies
23:54  Rajko: explodes, crazy
23:54  papna: GAEfan: Yes. It's a feature!!!
23:54  bob2: geosav: right, be more specific
23:54  explodes: rajko: it works.
23:54  bob2: so I can give you the answer instead of a guess
23:54  papna: GAEfan: Set x = None previously. ALWAYS know whether something exists.
23:54  Rajko: you have to multiply a char by the length
23:54  Rajko: CRAZY.
23:55  kerio: GAEfan: how do you even end up in that kind of situation
23:55  geosav: my only option is to find the heading, ex.  "Company Name"  find that line number and go down 2 lines with my regex
23:55  GAEfan: Thanks, guys.  I thought I was missing some key point
23:55  bob2: geosav: really?
23:55  kerio: geosav: no, don't parse html with a regexp
23:55  papna: Rajko: ~ flips the sign bit. chr(-~ord(c))
23:56  BrianE: kerio: His control flow probably results in a variable being set only in certain conditions, and he wants to check if it's set later on
23:56  Rajko: papna i need all the signs flipped
23:56  Rajko: all the bits
23:56  bob2: geosav: I'm almost certain xpath will be a simpler solution, but your answer includes both implementation details and problem spec ;)
23:56  Rajko: cast ord to unsigned int first ?
23:56  GAEfan: kerio: It is from a urlfetch that returns a message, but only upon success.  And it is not my own domain I am fetching
23:56  papna: Rajko: I don't think you understand what the bytes representation is.
23:56  GAEfan: so I cannot set a default
23:56  papna: Rajko: So you don't understand how sign applies.
23:56  bob2: geosav: you can't find the text by knowing what tags it is inside?  or by the attributes of the things it inside?  can you pastebin the html?
23:56  bob2: GAEfan: http://paste.pocoo.org/
23:57  papna: Rajko: Also, Python doesn't have casting.
23:57  papna: Rajko: You need to approach this problem a lot slower. A lot of what you say doesn't make sense.
23:57  Rajko: it makes perfect sense in C
23:57  BrianE: Rajko: Paste the C?
23:57  papna: Rajko: 1) Python isn't C.
23:57  papna: Rajko: 2) Fals.e
23:57  papna: Rajko: Python's idea of strings, characters, and numbers is different than C's.
23:58  Rajko: in c it would be unsigned char datas[24]; datas[23]=~datas[23];
23:58  Rajko: bam
23:58  bob2: right, btu you're not writing C, and you're new to python
23:58  papna: Rajko: Right. This isn't C.
23:58  bob2: so you need to explain your problem, not just your half-solution
23:59  Rajko: papna it flipped it wrong
23:59  kerio: python doesn't even have chars
23:59  Rajko: i got 0x08 out of 0xF8
23:59  Rajko: insted of 0x7
--- Log closed Tue Dec 21 00:00:17 2010
