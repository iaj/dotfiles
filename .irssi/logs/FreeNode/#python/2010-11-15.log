--- Log opened Mon Nov 15 10:34:16 2010
10:34 --- Users 781 nicks [0 ops, 0 halfops, 0 voices, 781 normal]
10:35  SeaOrifice: ok got it
10:35 --- Channel #python was synced in 90 seconds
10:37  arvind_khadri: Hi, how do i get libxml2dom?
10:38  bob2: do you really want that?
10:38  bob2: or is it some xml lib you found a reference to and now want to use?
10:39  arvind_khadri: bob2, I just want to try it out as an exercise :) I actually want to have a parser which would fetch me all the 'id' in the page :)
10:40  _habnabit: arvind_khadri, use lxml.html
10:41  arvind_khadri: _habnabit, how about sgmllib and urllib ??
10:41  bob2: sgmllib is for sgml
10:41  _habnabit: arvind_khadri, sgmllib sucks, and urllib doesn't do the same thing.
10:41  bob2: lxml.html is a pretty snazzy html parser
10:42  arvind_khadri: bob2, _habnabit thanks :) will attack again when I have questions
10:43  blimey: How can I get the last 2 chrs of an int a = 123456 i want 56, can't slice an int :(
10:43  _habnabit: blimey, % 100
10:44  blimey: _habnabit: Thanks, saved me loads of time.
10:44  mordy: i was always wondering, is there a way to do something like return_on_fail(something).. where it would exit the calling function if something is False?
10:44  mordy: i use it in C all the time by making a macro
10:44  _habnabit: mordy, I have no idea what that means
10:45  _habnabit: mordy, raise an exception?
10:45  bob2: mordy: we got excceptions man
10:46  mordy: in my case there's nothing i can do to handle the exception that makes much sense except bail
10:46  _habnabit: What
10:46  talented: so just bail then, if you don't need to handle the exception
10:46  bob2: +1
10:47  mordy: i know, is there a way i can wrap this bail code in something less nasty than a repetitive if not foo then return/raise whatever
10:47  _habnabit: mordy, why return False when you could raise the exception in the first place?
10:47  talented: just use it as it is... if it raises an exception, bail it
10:49  karthick87: I want to view all datas stored in a sqlite2 database.Do i need any browser for that?
10:49  mordy: i'm returning false (or returning anything for that matter) because there's nothing left for my calling code to do
10:50  _habnabit: 01:47:55 < _habnabit> mordy, why return False when you could raise the exception in the first place?
10:50  talented: you can use sqlite database browser... but did you want something python?
10:50  arvind_khadri: karthick87, use the sqlite prompt
10:51  bob2: python doesn't include any sqlite2 supportr
10:51  bob2: wonder how hard upgrading to 3 is, since it is significantly awesoemr
10:51  karthick87: arvind_khadri: can i pm you
10:52  mordy: i could do that syntax i mentioned earlier by raising an exception, that much is true
10:52  talented: mordy, show your code at a paste site... even the C version if you want
10:52  _habnabit: mordy, see, exceptions exist for a reason.
10:53  talented: I think the big difference between C and Python, is you're suppose to know what your code is going to do and how you can handle it... exceptions don't break your program unless you break it
10:53  arvind_khadri: karthick87, lol, you can but dont expect great answers from me :) channel will give you way better ones, but sure you can pm me
10:53  arvind_khadri: sorry, dint know that. please dont kick me.
10:56  mordy: talented: here's a very simplistic example http://paste.pocoo.org/show/291515/
10:57  _habnabit: mordy, and in python, these functions would raise exceptions on failure.
10:57  _habnabit: mordy, returning a value to signify failure is such a faux pas.
10:59  LinGmnZ: I was trying to learn python, how I should start.
10:59  _habnabit: LinGmnZ, read the tutorials in the topic.
10:59  Wild_Cat: aye. In Python, functions/methods that return things always return things that can actually be used by the rest of the program -- not success/failure indicators.
11:00  Wild_Cat: (on a related note, I wish C functions could return multiple values)
11:00  _habnabit: Wild_Cat, this is but one area that Go is nicer!
11:00  mordy: you can, if you're creative enough
11:01  Wild_Cat: _habnabit: yup, I plan to learn Go real soon.
11:01  bob2: return an array ;p
11:01  Wild_Cat: (namely, as soon as a Windows port is officially released so I can play with it on my home PC)
11:02  bob2: universal use of exceptions and iterables are the things i miss most from python in other spheres
--- Log closed Mon Nov 15 11:07:41 2010
--- Log opened Mon Nov 15 11:08:26 2010
11:08 --- Users 786 nicks [0 ops, 0 halfops, 0 voices, 786 normal]
11:08  _habnabit: karthick87, #sqlite
11:08  bob2: karthick87: which bit of this question involves python
11:08  arvind_khadri: _habnabit, I am getting errors installing lxml :( I am using easy_install
11:08  MostAwesomeDude: (I didn't go to this year's XDS, but reports indicate several developers drunk so much that some people didn't get up for the third day of the conf.)
11:08  bob2: MostAwesomeDude: 'drank' ;-p
11:09  MostAwesomeDude: bob2: Either or, really. :3
11:09 --- Channel #python was synced in 91 seconds
11:10  Wild_Cat: MostAwesomeDude: I have a feeling that PHP hackers bypass drinking and go straight for the hardcore hallucinogenics.
11:11  Wild_Cat: (I also have a theory that so did Stroustrup when he designed the STL)
11:12  bob2: php programmers by and large just seem to not know any better :(
11:12  bob2: vb classic for the noughties and beyond
11:12  MostAwesomeDude: Wild_Cat: From what I have seen with the PHP community, the big problem is merely the large number of inexperienced people working on the project.
11:14  s8: How can I get the time delta between two dates?
11:14  bob2: subtract them
11:14  bob2: get a free timedelta instance
11:15  SoulSeekah: datetime.timedelta
11:16  SoulSeekah: How would I debug specific threads?
11:16  SoulSeekah: Program doesn't break :/
11:16  bob2: yhl hand hth
11:17  SoulSeekah: What's that again?
11:18  Wild_Cat: SoulSeekah: welcome to the painful, *painful* world of multithreaded debugging.
11:18  SoulSeekah: Damn..
11:18  jorrit: We all feel for you.
11:18  SoulSeekah: I can't seem to shut down threads, my program hangs.
11:19  SoulSeekah: I'm breaking their loops, I'm breaking the Queue loop
11:19  jorrit: You can't kill threads. They have to exit themselves.
11:19  SoulSeekah: I'm not killing them, I'm breaking their While True loops
11:19  Wild_Cat: SoulSeekah: bad news first: pdb doesn't support multithreaded debugging. rpdb2 does, though.
11:19  SoulSeekah: hmm, I'm using PyScript's debugger
11:19  Wild_Cat: other than that, print, coffee and aspirin will be your best friends.
11:20  SoulSeekah: I see..
11:20  SoulSeekah: ..thank you for the support :)
11:21  Wild_Cat: SoulSeekah: if I were you, though, I'd look for a way to reduce the number of threads in my program.
11:21  SoulSeekah: I read that self.daemon = true after initing and before running would kill the thread upon program exit()
11:21  SoulSeekah: But it doesn't work
11:21  SoulSeekah: at least in the way I tried it
11:21  SoulSeekah: I seem to have only 2 threads running, can't say for sure
11:22  bsod1: do I have to use threading to update my gui(gtk) while my script moving some files in the background?
11:23  Wild_Cat: SoulSeekah: "can't say for sure"? How so? Don't you know how many threads you started?
11:24  Wild_Cat: (also, I'm pretty sure it's self.setDaemon(True), not self.daemon = True)
11:24  SoulSeekah: I started 2 of them...
11:24  SoulSeekah: the main thread is not a daemon thread and therefore all threads created in the main thread default to daemon = False (c) Doc
11:26  I33BC: sorry mirc is acting stupid, quitting on me
11:26 --- I33BC is now known as Soulseekah
11:26  Soulseekah: anyway
11:26  Soulseekah: setDaemon() is Old API for daemon.
11:31  s8: Does "date - date" tolerate additional days in years, which have long february?
11:31  Soulseekah: leap years?
11:31  Wild_Cat: s8: yes, it takes leap years into account.
11:33  farciarz84: sth interesting:
11:33  farciarz84: None < float('-inf') < 0 < float('+inf') < {} < [] < ()
11:34  Soulseekah: Is there any final method that is called when the a thread ends? Like the run() method that is inherited from threading.Thread? When I place something at the end of my Thread class it gets executed immediately upon class instantiation.
11:34  Alberth: bsod1: no, iirc, gtk allows a callback when idle which you can use, or you can generalize to a event-based framework like Twisted
11:35  Soulseekah: I need to place a trace to see if the thread actually has finished it's task or not.
11:35  bsod1: Alberth: can you give me any links about this callback stuff?
11:36  Alberth: bsod1: I *think* it is in gobject
11:37  s8: Why doesn't timedelta object have .years?
11:37  Alberth: bsod1: gtk is a layer on top of gobject
11:38  bsod1: can you give me some .vimrc commands to run python scripts?
11:38  bob2: Soulseekah: pastebinz?
11:38  bob2: s8: it doesn't have lots of things (e.g. hours)
11:38  s8: bsod1: nmap <f9> :!python %
11:38  s8: That should work.
11:39  bsod1: s8: thanks
11:39  s8: bsod1: nmap <f9> :!python %<CR>
11:39  bob2: Soulseekah: https://dev.launchpad.net/Debugging/GDB#Getting%20a%20Stack%20Trace%20with%20Multiple%20Threads%20(such%20as%20Launchpad%20uses) may help
11:39  s8: <CR> is needed too.
11:39  s8: bob2: So how can I get the years between those two?
11:39  Alberth: bsod1: http://www.pygtk.org/pygtk2reference/gobject-functions.html#function-gobject--idle-add
11:39  bob2: s8: maths + calendar module i believe
11:40  Soulseekah: ha.. there is a stop() method
11:40  s8: Gragh, okay.
11:40  bob2: Soulseekah: possuibly dateutil or epsilon.extime do it for oyu
11:40  Soulseekah: That's not for me bob2
11:40  bob2: correct!
11:41  Alberth: bsod1: I have a terminal open next to vim normally
11:42  bsod1: Alberth: can you give me the commands for this? and how do I use it?
11:42  Alberth: bsod1: platform?
11:43  bsod1: Alberth: ubuntu linux
11:45  Alberth: bsod1: https://help.ubuntu.com/7.04/basic-commands/C/ar01s02.html
11:45  Alberth: and it looks like you may want to read that whole guide
11:45  bsod1: Alberth: ok thanks
11:46  Alberth: bsod1: in that terminal, type      python myprog.py     and press 'enter'
11:46  Alberth: bsod1: and the second and further times, 'cursor up' (brings back the previous command), 'enter'
11:53  nijan: Hello all, I have read through some guide and the PEP. Still, I'm not sure if I've completely understood when I have to prepend self. to variables name. Should it be to every variables created in a class? Even in loop like for self.i in rage...?
11:53  nijan: *range
11:54  bob2: huh
11:54  bob2: you use it to refer to instance attribtues
11:54  bob2: i should be a function local, so just i
11:55  SoulSeekah: in my thread run() the while True loop doesn't want to print, is this normal?
11:55  SoulSeekah: Is it some kind of anti-flood mechnism?
11:55  bob2: unclear without seeing code
11:55  SoulSeekah: hold on thanks
11:55  nijan: so, everything I define in __init__ (and need to be accessed by methods or as an attribute) should be self, but not variables in methods which do not refer to previously declared self, right?
11:56  nijan: sorry, this has always confused me.
11:56  bob2: it sounds like a tautology, but attributes on self are for instance attribtues
11:56  bob2: so typically lots of things in __init__ are instance attributes
11:56  bob2: since you're mostly just setting things up for later on
11:57  SoulSeekah: This does not flood the console http://pastebin.com/raw.php?i=ze0RQdBf
11:57  nijan: thanks
11:57  bob2: incomplete but also pointless
11:57  nijan: it's clear
11:57  bob2: excellent :)
11:57  SoulSeekah: bob2, all the rest is omitted
11:57  SoulSeekah: .start() and bla bla bla
11:57  bob2: yes, I can see that
11:58  SoulSeekah: hold on a bit
11:58  bob2: no print is not magically throttled in threads
11:58  SoulSeekah: http://pastebin.com/raw.php?i=S7XMx873
11:58  SoulSeekah: the REG TEST - gets printed
11:59  SoulSeekah: the LOOP TEST does not
11:59  bob2: that's also not a complete example
11:59  SoulSeekah: The complete example is huge
11:59  bob2: but threads are more or less arbitrary scheduled
11:59  andrewfree_: anyone here interested in computer security?
12:00  bob2: so maybe that is what is tripping you up
12:00  bob2: andrewfree_: #surveys
12:00  SoulSeekah: the while loop contains a client listener
12:00  SoulSeekah: it accepts connections
12:00  bob2: heh
12:00  SoulSeekah: prints all that needs to be printed
12:00  bob2: threads for network servers
12:00  SoulSeekah: to telnet
12:00  SoulSeekah: :D
12:00  bob2: oh telnet
12:00  bob2: bonus points
12:01  bob2: does it invovle an irc bot somehwo as well?
12:01  SoulSeekah: interacts
12:01  SoulSeekah: no
12:01  bob2: that gets you a truple silliness score
12:01  SoulSeekah: it does not
12:01  andrewfree_: bob2: not a survey im trying to find people willing to put money into some good course material :/
12:01  bjornkri: If I have something like u'\u3042', is there any way for me to get the code as string? ('3042' in this case)
12:02  SoulSeekah: bob2, so in general I have a really badly implemented idea
12:02  bob2: bjornkri: ord?
12:02  bob2: andrewfree_: #trollingfordollaz
12:02  SoulSeekah: ord gets ascii code from char
12:02  SoulSeekah: he needs unicode to char
12:02  bjornkri: bob2: What SoulSeekah said :)
12:03  bob2: unichr?
12:03  SoulSeekah: look into unicodedata
12:03  bob2: i forget which way around they are
12:03  SoulSeekah: http://docs.python.org/library/unicodedata.html
12:03  MostAwesomeDude: unichr()?
12:04  bjornkri: unichr is helpful to convert the output of ord back to unicode, but I still don't get the code I need.
12:04  bjornkri: Thanks SoulSeekah, I'll take a look
12:05  SoulSeekah: bob2, maybe clientPool.get() is locking things up in the loop?
12:05  SoulSeekah: since the clientPool is empty actually
12:05  bob2: i don't know what clientpool is
12:06  SoulSeekah: ah, sorry, it's a Queue.Queue(0)
12:06  bob2: generally using threads for network servers in python is going to lead to fail, confusion and hard-to-debugginess, though
12:06  bob2: and crappy performance due to the GIL OF DOOM
12:06  bla: OT: how would you call (single word prefered) a deriving classes in a base (abstract) class? Ideas so far: Implementations, descendants, derived.
12:06  SoulSeekah: should I try twisted?
12:07  bob2: subclass
12:08  bla: bob2, so simple, and so correct. Thanks.
12:08  SoulSeekah: or should I turn to c or cpp or java since they don't lock
12:09  kurkale6ka: Hi guys. is it possible to specify a module directly on the command line vs import ... abterwards?
12:09  SoulSeekah: how come django is so cool then
12:09  SoulSeekah: oh, it's run on mod_py
12:09  avu: SoulSeekah, using threads for network servers is a bad idea in other languages, too. it's not not *as* bad as it is in python
12:10  avu: SoulSeekah, nothing is run on mod_python these days when run by sane people
12:10  avu: SoulSeekah, there's mod_wsgi now
12:10  bob2: SoulSeekah: google c10k
12:10  bob2: no one doing high perf net servers in any language is doing thread-per-connection
12:11  bsod1: which one should I use? 4 spaces or a tab?
12:11  bob2: 4 spaces
12:11  avu: bsod1, 4 spaces, have a look at pep8
12:11  bob2: or: whatever the sourc e tree already uses
12:12  bsod1: ok thanks, do you know which command do convert tabs to 4 spaces in vimrc?
12:12  Apoth: hi
12:13  SoulSeekah: bob2, thanks very interesting
12:13  bjornkri: oki, figured it out. ord was the way to go: hex(ord(u'\u3042'))[2:] ==> 3042
12:13  Apoth: i have a string "00c100620072" i want to convert to ascii
12:14  Apoth: how can i do this?
12:14  SoulSeekah: bjornkri wuhhh?!
12:14  SoulSeekah: you wanted to get the number?
12:14  SoulSeekah: not the character?
12:14  bjornkri: SoulSeekah: yep ;)
12:14  SoulSeekah: str(r'\u3042)[2:]
12:14  SoulSeekah: whould have worked like a charm
12:15  SoulSeekah: (forgot an apostrophe)
12:15  SoulSeekah: str(r'\u3042')[2:]
12:15  bjornkri: SoulSeekah: great, thanks... out of curiousity, what does the r signify?
12:15  SoulSeekah: raw
12:15  bjornkri: handy. Thanks!
12:15  SoulSeekah: '\nhello' -> will print new line then hello, r'\nhello
12:15  SoulSeekah: will print \nhello
12:16  bob2: r prefix means 'don't use backslach escapes'
12:16  SoulSeekah: exactly
12:17  Apoth: SoulSeekah, you can help to me? :)
12:17  Yhg1s: Apoth: and what kind of ASCII string would it be?
12:17  SoulSeekah: maybe
12:17  davekong: Python runs poorly on sparc? http://www.velocityreviews.com/forums/t549119-re-poor-python-and-or-zope-performance-on-sparc.html
12:17  SoulSeekah: I'm looking into it
12:17  Apoth: "00c100620072" -> \x00\xc1...
12:17  james_027: hi all, what is the easiest way to get weeks (with date inside)
12:18  bob2: calendar module presumably
12:18  SoulSeekah: Apoth, yes you'll have to break it down into bytes and then...
12:18  Yhg1s: Apoth: s.decode('hex')
12:18  Apoth: Yhg1s, ok, i trying
12:19  kurkale6ka: hi, is there a way to write pi instead of math.pi in interactive mode?
12:19  Habbie: kurkale6ka, from math import pi
12:19  bob2: from math import pi
12:19  Apoth: >>> "00C100620072".decode('hex')
12:19  Apoth: '\x00\xc1\x00b\x00r'
12:19  Apoth: aham
12:19  Apoth: and now?
12:19  Yhg1s: davekong: I think the answer you linked there makes it pretty clear.
12:19  Yhg1s: Apoth: and now what? That's the string you said you wanted.
12:19  Apoth: i want to got the three chars :)
12:19  kurkale6ka: thanks Habbie and bob2
12:20  SoulSeekah: bob2, what was that again, unichr()?
12:20  Yhg1s: Apoth: which three characters?
12:20  SoulSeekah: yes
12:20  SoulSeekah: Apoth use unichr()
12:20  Yhg1s: no.
12:20  SoulSeekah: bob2, is there a unichr() for ascii?
12:20  Apoth: ah, okey, working
12:20  Yhg1s: SoulSeekah: that question makes no sense.
12:20  Apoth: thank you :)
12:20  SoulSeekah: ok
12:20  Yhg1s: Apoth: working how?
12:20  Yhg1s: (if it's working with unichr(), you're doing it wrong.)
12:20  SoulSeekah: why!?
12:21  Apoth: >>> a="00C100620072".decode('hex')
12:21  Apoth: >>> print a
12:21  Apoth: �br
12:21  Yhg1s: Apoth: you realize that your bytestring is UTF-16, yes?
12:21  Yhg1s: printing it works, because yoru terminal doesn't display \x00's
12:21  Yhg1s: but if you print the repr() you'll see that it still contains those \x00's. Perhaps you want to decode it.
12:21  Apoth: this is a text message for my gsm module
12:21  kerio: but it will fail for codepoints >= 0100
12:22  Apoth: 00C1 is like Á
12:22  Yhg1s: Apoth: ok, so what do you actually want as the result?
12:22  Yhg1s: Apoth: yes, it is, in UTF-16.
12:22  Yhg1s: Apoth: do you want a unicode string as a result, or a UTF-8 string, or some other encoding?
12:22  Yhg1s: or do you really want UTF-16?
12:22  Apoth: i think, yes :)
12:22  Yhg1s: yes to what?
12:22  SoulSeekah: :D
12:23  teratorn: D) all of the above.
12:24  Apoth: >>> print"00C100620072".decode('hex').decode('iso-8859-2')
12:24  Apoth: Ábr
12:24  Apoth: thanks for the help
12:24  Apoth: :)
12:24  SoulSeekah: nice
12:25  Apoth: (and sorry for my poor english)
12:25  Yhg1s: Apoth: ... no
12:25  Yhg1s: Apoth: remove the print and you'll still see the same thing.
12:25  Yhg1s: Apoth: it's not encoded in iso-8859-2, it's encoded in UTF-16.
12:26  Yhg1s: Apoth: if you want unicode, decode it using UTF-16.
12:26  bob2: ugh sites running ads on list archives :(
12:26  Apoth: ho, this is a hu-HU localed sms message
12:26  Apoth: it is in 889
12:26  Apoth: *8859
12:26  Yhg1s: Apoth: no.
12:26  Yhg1s: Apoth: the data you have is *UTF-16*. That's what the \x00's mean.
12:26  Yhg1s: (UTF-16be even.)
12:27  Apoth: >>> print"00C100620072".decode('hex').decode('utf-16')
12:27  Apoth: 섀戀爀
12:27  Apoth: fail
12:27  Apoth: :)
12:27  Yhg1s: Apoth: it just happens to look right when *printing*, but the data still contains those \x00 bytes when you decode it using iso-8859-2.
12:27  Yhg1s: Apoth: wel, first, stop printing the strings.
12:27  Yhg1s: Apoth: second, use UTF-16be instead of UTF-16
12:27  Yhg1s: (it's in big-endian.)
12:27  Yhg1s: >>> '\x00\xc1br'.decode('iso-8859-2')
12:27  Yhg1s: u'\x00\xc1br'
12:28  Yhg1s: >>> '\x00\xc1\x00b\x00r'.decode('iso-8859-2')
12:28  Yhg1s: u'\x00\xc1\x00b\x00r'
12:28  Yhg1s: (that's the one I meant.)
12:28  Yhg1s: >>> '\x00\xc1\x00b\x00r'.decode('UTF-16be')
12:28  Yhg1s: u'\xc1br'
12:28  cnf: o,O
12:28  Yhg1s: that's the string you want. (if you want unicode.)
12:29  Yhg1s: If you want iso-8859-2 encoded data:
12:29  Yhg1s: >>> '\x00\xc1\x00b\x00r'.decode('UTF-16be').encode('iso-8859-2')
12:29  Yhg1s: '\xc1br'
12:29  Diverdude: I have a 2D array as a numpy.ndarray. How do i show this as an image?
12:34  saju_m: I implemented a locking system, in which, Locking working for same object.(i can not call 'f1' simultaneously, using same object) and Locking not working for different object.(i can call 'f1' simultaneously, using different object).How implement lock for prevent call to 'f1' simultaneously, using different object)http://bpaste.net/show/11040/
12:34  arvind_khadri: I have an URL how do I use get_element_by_id onto it?
12:36  saju_m: http://bpaste.net/show/11041/
12:36  Yhg1s: saju_m: store the lock somewhere other than on the instance.
--- Log opened Mon Nov 15 12:43:08 2010
12:43 --- Users 787 nicks [0 ops, 0 halfops, 0 voices, 787 normal]
12:44  aljosa: i'm getting UnicodeEncodeError in /usr/lib/python2.6/genericpath.py - "st = os.stat(path)" when files have non-ascii chars. any idea how to fix this?
12:44 --- Channel #python was synced in 90 seconds
12:45  arvind_khadri: I want to fetch the id in the URL and dump it. Am using lxml.html.
12:45  avu: aljosa, encode the path yourself using the correct encoding before passing it to stat()?
12:47  saju_m: In this code http://bpaste.net/show/11042/ , I saved lock as class variable, it is working for method call with same and different objets. Is it a proper way ???
12:48  Yhg1s: saju_m: it is *a* way. threads and locks have lots of improper ways. it all depends on how you're using things.
12:49  saju_m: <Yhg1s> Have any disadvantag efor this method??
12:49  Yhg1s: saju_m: yes: it uses threads, and explicit locks.
12:49  Yhg1s: and it relies on class attributes not being overridden.
12:53  SeaOrifice: is there a way to perform type checking in python like a variable is set or a string or something ???
12:54  teratorn: SeaOrifice: you should never need to or want to do that :)
12:54  SeaOrifice: fine but is there a way to do that ???
12:54  reenignEesreveR: im trying to send some large data over udp. I have opened socket but when i try to send, i get this error: error: [Errno 90] Message too long
12:54  Yhg1s: SeaOrifice: only explicitly.
12:54  teratorn: SeaOrifice: what are you trying to accomplish with this?
12:55  Yhg1s: reenignEesreveR: when you send data over UDP, you send it in a single packet. the data has to fit in the packet.
12:55  Yhg1s: reenignEesreveR: you have to split it up.
12:55  SeaOrifice: nothing to accomplish :D , i was just asking if python has such thing or not
12:56  Yhg1s: SeaOrifice: nothing worth using. Forget about it until you have a specific usecase, and we can tell you how to handle that.
12:56  reenignEesreveR: Yhg1s, how can i get the maximum allowed size of a datagram?
12:56  Yhg1s: reenignEesreveR: read the specification of UDP packets, or any book on TCP/IP programming.
12:56  Yhg1s: (if you're messing with UDP at this level, you will want to read those anyway.)
12:57  reenignEesreveR: is this a fixed size or can it vary from system to system? is it safe to use a fixed size?
12:58  Yhg1s: it's usually safe to use a fixed size that is slightly under the maximum, but it does increase the chances of the datagram being dropped.
12:58  teratorn: reenignEesreveR: http://en.wikipedia.org/wiki/TCP/IP_Illustrated#Volume_1:_The_Protocols
12:58  Yhg1s: (but such is life with UDP.)
13:09  nvictor: someone should write python: the good parts
13:09  nvictor: i have read both the java and javascript ones, the best technical books i have read in a while
13:11  cnf: there are good parts to js?
13:11  cnf: ^^;
13:12  nvictor: cnf: yep
13:12  nvictor: cnf: ok there are many bad parts too
13:12  cnf: hehe
13:12  cnf: i don't know any js really
13:13  cnf: i just know that i find it hard to read, for some reason
13:13  nijan: Hello all, I want to add to the class pygame.mixer.Sound
13:13  nijan:  an attribute name. So, I created a new class, myClass(pygame.mixer.sound): __init__(self, name): self.name = name. Now, pygame.mixer.sound requires an argument filename, but how can do I pass it to the class? For instance, I should do something like mysound = myClass(name, filename), but how do I get the file to be loaded by the pygame class? I guess I'm doing it pretty wrong
13:13  nijan: Thanks for your attention
13:14  nvictor: nijan: what's the signature of Sound?
13:14  nvictor: you start from there
13:14  nijan: pygame.mixer.Sound(filename): return Sound
13:14  nvictor: and call super() if it's a subclass of object (or a subclass of a subclass)
13:15  nvictor: nijan: really? that's all?
13:15  nijan: That's what I got from the API
13:16 * nvictor suspects it's a binding to a c function
13:16  nvictor: nijan: this one? http://www.pygame.org/ctypes/pygame-api/pygame.mixer.Sound-class.html
13:17  nijan: In other words, I want my sound object to have an attribute name, that's all. Maybe class inheritance is too much
13:17  nvictor: nijan: it is
13:17  nijan: Can I simply do mysound.name = 'c'
13:17  nvictor: soundname1 = Sound(filename1)
13:18  nijan: ?
13:18  nvictor: that's how i would do it
13:18  nvictor: why do you want to store the sound name?
13:18  nijan: because i don't know the name of the file in advance
13:19  nijan: There is a loop where all files are played random, so I need to get the filename back
13:19  nvictor: well the doc says you need to pass in the filename
13:20  nvictor: so i guess you have to know it before to create an instance of that class
13:20  nvictor: why not store in a list?
13:21  nvictor: nijan: python wants to make the programmer's life easier :)
13:21  nvictor: i would do
13:22  nvictor: ['fname1','fname2','fname3']
13:22  nvictor: then in your loop
13:22  nvictor: random.choice(...and oops i forgot to name the list)
13:22  nvictor: but you get the idea
13:22  Yhg1s: nijan: have you considered just setting an attribute on the Sound object after you create it?
13:23  nijan:     self.beep.name = 'beep'
13:23  nijan: AttributeError: 'Sound' object has no attribute 'name' <- I have tried this
13:23  Yhg1s: nijan: then if you want to set the attribute, you have to subclass the class and call the parentclass __init__ method.
13:24  Yhg1s: or, don't set it on the Sound instance, but on a different class that also refers to the Sound instance.
13:24  nijan: nvictor, but how do I know which file is playing, i have to load all files before the loop
13:24  nvictor: ooh i see
13:24  nijan: sorry, forgot to state that
13:25  nijan: Yhg1s, that was I was trying to do, but I'm not sure if I understood how. I'll paste the code
13:25  nvictor: then Yhg1s's idea of having a different class
13:26  nijan: http://paste.pocoo.org/show/291568/
13:27  Yhg1s: nijan: the call would be "super(eSound, self).__init__(filename)", if 'filename' is the argument you want to pass to the parentclass __init__.
13:28  nijan: Thanks, I'll try it right now.
13:30  aljosa: when creating a file with non-ascii chars from apache/mod_wsgi django app on first server it works as expected on second server it fails with UnicodeEncodeError.
13:30  aljosa: what can cause python problems with non-ascii files on linux system?
13:31  Yhg1s: aljosa: well, a UnicodeEncodeError means you're using unicode somewhere a bytestring is expected, so Python tries to encode the unicode for you, and fails.
13:31  Yhg1s: aljosa: you'll have to look at the operation that fails to know what it's doing.
13:34  nijan: Hello, it store the attr. but doesn't play the files. I get no error : |
13:34  Yhg1s: and "it" is?
13:35  nijan: a = eSound(name, filename); a.name <- works      a.play nothing happens
13:35  nijan: a.play(), sorry
13:35  Yhg1s: And 'a = pygame.mixer.Sound(filename); a.play()' does do something?
13:36  nijan: Oh, sorry, my fault, error in the mixer. I guess it got flogged. Now it works fine. Thanks a lot, I have learned something : )
13:37  aljosa: Yhg1s: i'm thinking that it's maybe something related to how python is installed on this system because on a different system it's working as expected.
13:38  aljosa: Yhg1s: maybe some library missing or env setting, is it possible it's not related to wsgi app?
13:38  punkoff: How do I redirect stdout of subprocess.Popen to *my app's* stdout in *realtime*?
13:38  Yhg1s: aljosa: no, not how it's installed, but an environment setting, sure.
13:38  Yhg1s: aljosa: it's impossible to tell without looking at the operation that actually produces the error.
13:38  Yhg1s: punkoff: not passing the stdout argument is as realtime as pipes will be.
13:39  Yhg1s: (it'll usually be line-buffered, unless the process you're starting does something different.)
13:39  Yhg1s: or unless your current process's stdout is more buffered, of course.
13:40  aljosa: Yhg1s:  http://dpaste.com/275477/ - traceback but this is part of django that has no known issues and the same wsgi/django app works as expected on another server.
13:40  aljosa: Yhg1s: thanks for your time, i'll try checking env settings
13:40  Yhg1s: aljosa: well, that's simple then.
13:41  Yhg1s: self.path(name) is returning a unicode string.
13:41  Yhg1s: os.stat() of a unicode string encodes the string in the default filesystem encoding for the system.
13:41  Yhg1s: that's unfortunately controlled by the LANG, LC_ALL and LC_CTYPE environment variables.
13:41  Yhg1s: And even that's often not really the right thing.
13:41  Yhg1s: Don't use unicode pathnames; encode them explicitly.
13:44  edgarallanpoe: what's the best way to do the equivalent of a SQL outer join on 2 lists?
13:44  edgarallanpoe: i have 2 lists that look like (identifier, value1) and (identifier, value2).  the set of identifiers in each list may be different.  i want to reconcile the 2 lists.
13:44  Yhg1s: edgarallanpoe: so what would you want the result to be?
13:44  edgarallanpoe: ideally a resultant list is a list of tuples (identifier, value1, value2)
13:44  Yhg1s: and for items that don't have a value1 or value2?
13:45  edgarallanpoe: (identifier1, value1, 0)
13:45  edgarallanpoe: so the set of identifiers is the union of the identifiers from list1 and list2
13:45  edgarallanpoe: with 0 for non-matches
13:46  Yhg1s: edgarallanpoe: there's no builtin way to do that, then. You probably want to build a dict, instead.
13:47  edgarallanpoe: hm ok.
13:47  Yhg1s: or two dicts, rather.
13:48  edgarallanpoe: i assume this means dicts have a more clever method for joining 2 dicts
13:48 * edgarallanpoe looking through docs...
13:48  Yhg1s: no, they do not.
13:49  Yhg1s: but you can cheaply test whether a key exists in a dict, and get the associated value
13:49  edgarallanpoe: ok thanks Yhg1s
--- Log closed Mon Nov 15 13:56:52 2010
--- Log opened Mon Nov 15 13:57:01 2010
13:57 --- Users 796 nicks [0 ops, 0 halfops, 0 voices, 796 normal]
13:57 --- derferman__ is now known as derferman
13:58 --- Channel #python was synced in 90 seconds
13:59  regebro: Has anybody seen any documentation for the lib2to3 pattern compiler?
14:02  SeaOrifice: just learning smtplib; i did this : v = smtplib.SMTP('smtp.gmail.com') , why doesnt it work ??
14:02  Yhg1s: SeaOrifice: how does it fail?
14:03  SeaOrifice: socket.error: [Errno 10061] No connection could be made because the target machine actively refused it
14:03  SeaOrifice: this is the error
14:03  Yhg1s: SeaOrifice: seems pretty obvious then.
14:03  SeaOrifice: but it should connect rite , i mean its also an smtp server
14:04  Yhg1s: smtp.gmail.com is not accepting your SMTP connection.
14:04  SeaOrifice: is it bcoz i am not using ssl n all
14:04  SeaOrifice:  ??
14:04  regebro: SeaOrifice: Yes.
14:04  Yhg1s: could be, who knows. it could be your firewall, a firewall inbetween your machine and smtp.gmail.com, or smtp.gmail.com itself.
14:05  wysek: it's rather your firewall, I don't get this error
14:05  wysek: s/your/some/
14:05  SeaOrifice: ohk
14:05  regebro: SeaOrifice: Or maybe not. SSL is not needed.
14:06  regebro: But you need to use some security, like TLS.
14:06  regebro: SeaOrifice: It may be that you are using the wrong port. It's not port 22, more specifically.
14:07  regebro: But that's all specific to gmail, so it's probably not a fault with your code as such.
14:12  SeaOrifice: regebro: just turned my A/V off and it works
--- Log closed Mon Nov 15 16:31:38 2010
--- Log opened Mon Nov 15 17:03:53 2010
17:03 --- Users 831 nicks [0 ops, 0 halfops, 0 voices, 831 normal]
17:04  LordError: dash: indeed. i have so far figured out what module to use and how, I've looked at some examples. i see that the struct.pack() fuction is used. what i am unsure of is how to use struct.pack to get the correct data structures (assumeing thats what it does).
17:05 --- Channel #python was synced in 92 seconds
17:07  chaoflow: is it true that I cannot import foo.bar from within a package baz.foo or how can I achieve that? It seems that a clear difference between absolute and relative module/package names would be needed.
17:07  brushie_: i'm having a problem with subprocess.Popen(), i Popen something that fork and have chield who terminate, when i run it with ./script.py it works fine but since i ./script.py & the script seem to received the SIGCHLD sent by popen and he die. If i catch this SIGCHILD then popen.wait() never woke up
17:07  LordError: dash: an example would be to open a socket. run fcntl.ioctl on socket.fileno. with value 0x8912 (SIOCGIFCONF). to get interface names. but i am usure on how struct.pack() fits in.
17:08 --- DasIch_ is now known as DasIch
--- Log closed Mon Nov 15 17:13:40 2010
--- Log opened Mon Nov 15 17:14:03 2010
17:14 --- Users 834 nicks [0 ops, 0 halfops, 0 voices, 834 normal]
17:14  Khertan_: For people interested by python dev on meego : http://conference2010.meego.com/program/live-streaming  : MeeGo Development with Python: Qt, Mobility, and Touch
17:14  NotreDev: http://pastie.org/1299902
17:14  NotreDev: dunno what meego is
17:15 --- Channel #python was synced in 91 seconds
17:15  NotreDev: arvind_khadri: look for .append() btw
17:15  lvh: Khertan_: Nice to see that some folks are still taking Python seriously for mobile development
17:16  Khertan_: lvh: of course ...
17:16  NotreDev: I HATE PYTHON. DIE PYTHON DIE.
17:16  NotreDev: just kiddin :)
17:16  NotreDev: i <3 python
17:16  dash: NotreDev: no need to shout about it
17:16  NotreDev: haha
17:17  arvind_khadri: NotreDev, got it :) but i am getting it as single letters
17:17  Khertan_: lvh: the best apply on n900 are writted in python ... and the better thing is that newbie can also do interesting apps if they have idea :)
17:17  dash: it'll be nice when nokia gets its platform stuff all back together
17:17  Khertan_: lvh: and none of them have memory leaks :)
17:17  dash: the n900 was the phone of the future =/
17:17  NotreDev: arvind_khadri: ?? you taking slices of a string
17:17  NotreDev: "text"[3]
17:18  Khertan_: dash: this is what they are trying to do with meego
17:18  arvind_khadri: NotreDev, l.extend(a.attrib['id']) when I do this, I get letters from 'id'
17:18  kerio: Khertan_: hi!
17:19  dash: Khertan_: I know
17:19  dash: arvind_khadri: yes, that is expected.
17:19  dash: Khertan_: i still haven't figured out what was so wrong with maemo that they had to 'splode it
17:19  arvind_khadri: dash, so how do I overcome that ?
17:19  kerio: dash: the n900 is still the phone of the future, surprisingly
17:19  NotreDev: arvind_khadri: what are you trying to do?
17:20  Khertan_: dash: being alone to compete against google, apple, and samsung
17:20  dash: arvind_khadri: don't use extend? :)
17:20 * arvind_khadri is going to own an N900 soon
17:20  NotreDev: arvind_khadri: focus
17:20 * Khertan_ own one and love it :)
17:20  NotreDev: what are you trying to do?
17:20  dash: it would be nice if they had n900s in america
17:20  kerio: hah, america
17:20  lvh: Khertan_: Well, yes
17:20  bahamas: chaoflow: from baz.foo import bar
17:20  lvh: Khertan_: Same for symbian
17:21  lvh: Khertan_: But on iOS, Python is a second-rate citizen at best
17:21  kerio: on iOS, python doesn't run
17:21  arvind_khadri: NotreDev, Am trying to get all id from an html, to a list
17:21  lvh: Khertan_: You basically have to use Xcode and then magic happens (you need to get to libPython.a) and even then...
17:21  kerio: unless you jailbreak and blah blah blah
17:21  lvh: kerio: False
17:21  NotreDev: oh god
17:21  Khertan_: lvh: hum ... apple didn't want "uncompiled" apps on their phone
17:21  kerio: huh? apple allows python now?
17:21  lvh: kerio: python runs fine, you just need to statically link it
17:21  NotreDev: arvind_khadri: have you considered using regular expressions?
17:21  lvh: Khertan_: They later clarified that statement.
17:22  lvh: Khertan_: They don't want your app to get stuff later and then interpret that.
17:22  arvind_khadri: NotreDev, I got it. I had to use append not extend
17:22  kerio: lvh: ooh
17:22  kerio: neat
17:22  dash: NotreDev: don't recommend things that are a bad idea.
17:22  NotreDev: r'#(\w+)'
17:22  dash: NotreDev: no.
17:22  NotreDev: ah yes, append
17:22  lvh: NotreDev: No.
17:22  Khertan_: lvh: they just lost some dev :)
17:22  NotreDev: why the distaste for re's?
17:22  arvind_khadri: dash, how are they different in this context ?
17:22  kerio: NotreDev: there's really no reason to use them
17:23  dash: arvind_khadri: how are what different?
17:23  lvh: NotreDev: Because parsing superregular languages using a regular language is fundamentally mathematiclaly impossible.
17:23  lvh: arvind_khadri: Processing HTML involves an HTML parser -- consider lxml.html
17:23  arvind_khadri: dash, append and extend
17:23  kerio: NotreDev: html allows unlimited nesting
17:23  bahamas: arvind_khadri: try [1, 2].append(['a', 'b']) and [1, 2].extend(['a', 'b'])
17:23  dash: lvh: i get the impression he's already using an html parser
17:23  lvh: NotreDev: If you find a way to do it correctly, let me know -- I will pay you handsomely.
17:23  kerio: re *won't work*
17:23  arvind_khadri: lvh, thanks :) I have got that part done :)
17:23  dash: NotreDev: regexes are the chainsaw of text processing
17:24  NotreDev: grab all id's from a document, that's easy?
17:24  lvh: arvind_khadri: Aha. So what's the problem?
17:24  dash: NotreDev: not really the first choice for precision work :)
17:24  NotreDev: i don't have to maintain depth, do i?
17:24  lvh: NotreDev: Maintain depth?
17:24  NotreDev: well, if i'm just looking for every #\w+, that's not too hard in a finite document
17:25  dash: NotreDev: but that's not what he's doing.
17:25  papna-work: regexes are like chainsaws
17:25  arvind_khadri: lvh, I actually wanted to get id from the page and put it in a list. Which is done now :) as dash suggested me to use append.  My question as of now is how extend and append are different? As when I tried extend, I got letters but when I did append, I got the words :)
17:25  NotreDev: arvind_khadri: NotreDev, Am trying to get all id from an html, to a list
17:25  papna-work: They should be featured in horror movies.
17:25  dash: arvind_khadri: bahamas's example is a good one
17:25  lvh: arvind_khadri: extend takes an iterable of items
17:25  NotreDev: sounds exactly like what he was trying to do
17:26  lvh: arvind_khadri: And it appends all of them.
17:26  dash: NotreDev: it isn't.
17:26  lvh: arvind_khadri: append appends a single item.
17:26  lvh: arvind_khadri: Let me type up an example.
17:26  bahamas: dash: what do you mean?
17:26  brushie_: is there a known bug between python subprocess.popen() sending a SIGCHLD to wake up subprocess.popen().wait() and the shell catching it and killing the script when he is launch in background ./script.py & ?
17:27  Lauxley: hi, im tryin to make a custom decorator but cant get the decorated function parameters http://bpaste.net/show/11051/
17:27  bahamas: dash: i told him to try 2 different examples and see the difference between append() and extend()
17:27  dash: bahamas: yes. i was saying it was useful to do that. :)
17:27  lvh: arvind_khadri: http://bpaste.net/show/11052/
17:27  bahamas: dash: ah, sorry. i misread :D
17:28  chaoflow: bahamas: thx, but I think I failed to express myself clearly: maybe better: http://bpaste.net/show/11050/
17:28  Khertan_: <pub> for those having an n900 and wanting to code on their device, i ve made a small editor for Maemo and Meego : http://khertan.net/khteditor </pub>
17:28  arvind_khadri: lvh, got it :) append() does it in one shot. and extend will iterate and place it
17:29  lvh: arvind_khadri: correct
17:29  lvh: Khertan_: do these devices have python bluetooth consoles yet like s60?
17:29  bahamas: Lauxley: why are you using a class as a decorator instead of a function?
17:29  lvh: Khertan_: I really liked that feature.
17:29  kerio: bluetooth console?
17:29  kerio: :o
17:29  NotreDev: oh btw, figured out the answer to my ?
17:29  kerio: like what?
17:29  Khertan_: lvh: hum what did you mean by bluetooth console ?
17:29  Diverdude: I have a 2D numpy array called A with values 0, 1 and 2. I want to create a new 2D array called B same size as A with only values  0 and 1, which has 1 at all places where B has values 2, and 0 everywhere else. How do i do that in python?
17:29  lvh: kerio, Khertan_: Yes. It's like a serial console, except s/serial/bluetooth/.
17:30  kerio: lvh: well, there's sshd
17:30  NotreDev: anyone know how i'd match \n \r or '=A0' in a regexp?
17:30  lvh: (Actually, technically I suppose they're still serial consoles)
17:30  NotreDev: answer is the pipe operator
17:30  NotreDev: re.sub(r'[\n\r]|=A0', ' ', z)
17:30  bahamas: chaoflow: from __future__ import absolute_imports might do the trick, but i need someone else to confirm if that is so (i haven't used it so far)
17:30  Khertan_: lvh: you can access to the bluetooth chipset directly :)
17:30  lvh: NotreDev: And a character class, apparently ;-)
17:30  lvh: Khertan_: Yaaay
17:31  kerio: lvh: you can also use wifi
17:31  lvh: Khertan_: It's still sad that no matter what I'm going to have to support iOS devices
17:31  kerio: we have ssh
17:31  lvh: Khertan_: Because revenue.
17:31  dash: lvh: he's trying to parse MIME attachments.
17:31  NotreDev: lvh: i already had that part.  the problem was that single characters can be in the character class, groups can't be
17:31  Lauxley: bahamas: why not ?
17:31  lvh: NotreDev: Right.
17:31  dash: NotreDev: You're doing it wrong.
17:31  chaoflow: bahamas: thx for the hint - just checking to find a solution working for 2.4 and above
17:31  Lauxley: bahamas: is a function easier ?
17:31  NotreDev: dash: damnit, i am not doing it worng
17:31  NotreDev: *wrong
17:31  bahamas: Lauxley: because it's easier with a function
17:32  dash: NotreDev: Pastebin an example of your input.
17:32  Lauxley: bahamas: ok ill try to find an example who works this way
17:32  bahamas: Lauxley: just a sec. i know one
17:33  Khertan_: talk start about the qt mobility framework with python ;)
17:33  Khertan_: http://conference2010.meego.com/program/live-streaming
17:33  lvh: dash: I stopped someone who was writing a regex for something where the *MANUFACTURER* supplied a damn BNF grammar -.-
17:33  bahamas: Lauxley: http://stackoverflow.com/questions/739654/understanding-python-decorators
17:34  Lauxley: bahamas: thx !
17:34  dash: lvh: eesh
17:35  bahamas: some people are like freddy kruger. they like to use a chainsaw for everthing
17:35  helo: Some people, when confronted with a problem, think ``I know, I'll use regular expressions.'' Now they have two problems. -- jwz
17:36  helo: to steal from #bash's bot :)
17:37  d_m: bahamas: wait, i thought freddy used his claw-glove thing, not a chainsaw
17:37  arvind_khadri: In FOSS.In there is a workout on MeeGo
17:37  arvind_khadri: http://foss.in
17:37  bahamas: d_m: then i confused him with the other one
17:37  d_m: bahamas: you're thinking about leatherface, from texas chainsaw massacre
17:38  helo: the only horror character i can think of who always uses a chainsaw is... yeah leatherface
17:38  dash: or ash williams
17:38  dash: ;D
17:38  bahamas: d_m: jason something, right?
17:38  d_m: bahamas: no, jason mostly used a knife
17:38  bahamas: damn. well, i never watched those movies so that explains it :)
17:39 * d_m was at a 24-hour horror-thon for halloween
17:41  papna-work: A machete.
17:43  lvh: papna-work: Oh please. I do *not* qualify as a horror character.
17:43  lvh: papna-work: Oh, you were talking about Jason. Never mind.
17:52  Diverdude: if i have a 2D array consisting of a lot of 0 and 1 (a binary image), is there an easy way of calculating a minimum bounding box encapsulating all value 1 pixels ; Basically an automatic cropping function
17:54  arkanes_: Diverdude: there's a bunch of ways with varying traits
17:54  Diverdude: arkanes_, which ones?
17:54  arkanes_: Diverdude: the easiest way is to sort the list of points, getting min and max x and y valyes
17:55  Diverdude: arkanes_, i was kinda hoping there was an implemented method
17:55  Diverdude: arkanes_, it gets a bit clumsy if i have several objects
17:55  arkanes_: Diverdude: "show me teh codez" questions are better handled by google
17:56  arkanes_: Diverdude: that said, it's not impossible that numpy has something
17:59  Diverdude: arkanes_, hmm i dont think the sorting list of points will work since i have a 2D array with binary values. Then i would have to first find x and y coordinates for all pixels containing a 1
17:59  arkanes_: Diverdude: indeed
17:59  Diverdude: arkanes_, how is that done?
17:59  Diverdude: is there a find method
18:00  arkanes_: Diverdude: if you're working with an in memory bitmap instead of a list of points, you can just iterate over your bitmpa
18:00  Diverdude: arkanes_, in matlab i would just do [y x]=sub2ind(find(X==1)); and be done with it
18:01  Diverdude: arkanes_, or just [y x]=sub2ind(find(X)); actually
18:01  arkanes_: Diverdude: okay?>
18:02  arkanes_: Diverdude: do you understand what that actually *does* in matlab?
18:02  Diverdude: arkanes_, yes i do, but i dont wanna spend time coding all that
18:02  arkanes_: Diverdude: programming is hard, especially loops
18:02  Diverdude: arkanes_, kind of reinventing the wheel
18:03  Diverdude: arkanes_, nah...its not that hard...but its quite important to spend time on the things that give value
18:03  arkanes_: Diverdude: oh fuck off
18:03  Diverdude: arkanes_, what?
18:03  arkanes_: I've already answered both forms of the "please just give me a line to do it" question
18:04  m1chael: im trying to use lxml/xpath with python 2.4.... the docs (http://codespeak.net/lxml/xpathxslt.html) call for a function called StringIO which is only available in 2.7... what should i do now ;/?
18:04  arkanes_: if you can't write 3 lines of code to calculate a bounding rect you can't write anything that "gives value" anyway so I'm not interested in hearing any crap about how you're wasting time reinventing the wheel
18:05  Diverdude: arkanes_, thats a bit harsh
18:06  arkanes_: m1chael: StringIO is a class or a module, it's been in python for a long time
18:06  eoss: Hi, how do you find out what a class object takes as a parameter? in Tkinter, you can create a widget object called a label, and it takes something called background, but how do I know what values background should be? is it 'white', is it a hex number etc
18:06  arkanes_: m1chael: the sample code there is skipping the setup, you need "from StringIO import StringIO"
18:07  Diverdude: arkanes_, the SciPy.​ndimage.​measurements module is really nice...it has most of the things though
18:07  Muhammad_Saad: The .encode("unicode-escape") method does not give me the Unicode value of certain characters like English alphabets, numbers and some symbols. Does anyone know of another way to get the Unicode values?
18:08 --- ysiadferreiras is now known as ysiad
18:08  Eevee: Muhammad_Saad: ord()?
18:08  m1chael: arkanes_ thanks!
--- Log closed Mon Nov 15 18:13:42 2010
--- Log opened Mon Nov 15 18:14:11 2010
18:14 --- Users 846 nicks [0 ops, 0 halfops, 0 voices, 846 normal]
18:15  eoss: How do you find out what a class object takes as a parameter? in Tkinter, you can create a widget object called a label, and it takes something called background, but how do I know what values background should be? is it 'white', is it a hex number etc
18:15  arkanes_: eoss: read the documentation
18:15 --- Channel #python was synced in 91 seconds
18:17  eoss: help(Label) is not the documentation?
18:17  amitz: is there any trick to neatly repeat a urllib2.open() n times before giving up? My approach so far is stacked expection 3 times.
18:17  darq: hello.. i got an class .. i make 2 objects a and b... and i put them into a dictionary with tuples as index .... mydict = {(0,0):a, (0,1):b}.. then i change some value... mydict[(0,0)].xlist[0] = 5 .... (xlist is a value of the object) .. and for some reason both lists of a and b change... could someone explain me this
18:17  amitz: n times
18:17  Xeross: Is there a constant available for the path seperator used in the current os I.E. \ or /
18:17  cwillu_at_work: darq, use a single comma instead of ... :p
18:18  Muhammad_Saad: I am wondering if there is a built in function or method to turn strings like '0x2c' into '0x002c'. :-/ That will help me keep my code short.
18:18  arkanes_: eoss: if it doesn't have what you need in it, then I guess it's not the correct documentation :)
18:18  amitz: Xeross: there is something called os.path.join()
18:19  cwillu_at_work: darq, I'm guessing the class __init__ looks something like "def __init__(self, whatever_list=[]):"?
18:19  amitz: Muhammad_Saad: split on x, then zfill probably works.
18:19  Muhammad_Saad: Thanks!
18:19  cwillu_at_work: darq, pastebin the class definition (http://paste.pocoo.org)
18:19  Xeross: amitz: Myeah, I was planning on making a wrapper for paths so that they are fullly exchangeable and I don't need to use os.path.join anywhere, but I guess I can just use os.path.join wiht that
18:19  amitz: Muhammad_Saad: try it first ;-)
18:19  Muhammad_Saad: :D
18:20  arkanes_: amitz: no, thats bad
18:20  arkanes_: Muhammad_Saad: "0x%04x" % int('0x02', 16)
18:21  amitz: arkanes_: you mean wonn't work?
18:21  arkanes_: amitz: it'll work, it's just bad
18:21  Xeross: I forgot can I use += on two lists to append the second to the first ?
18:21  m1chael: processing xml is such a nightmare for me
18:21  Muhammad_Saad: arkanes_, Can you please point me to documentation where I can get a complete understanding of what this is?
18:21  arkanes_: Muhammad_Saad: is there a reason why you have the string "0x2c" instead of an int?
18:21  cwillu_at_work: Xeross, yes.  It's directly modifies the first list though
18:21  arkanes_: Muhammad_Saad: search the docs for string interpolation
18:21  darq: cwillu_at_work acctually not .. the list is predefined as [0]*5   .. look yourself http://paste.pocoo.org/show/291676/
18:22  cwillu_at_work: darq, okay, you only have one list, shared across every instance
18:22  arkanes_: Muhammad_Saad: %x means to format an intger using hex notation, %4x means to left-pad it to 4 characters, and %04x means to use 0 as the left-pad character
18:22  cwillu_at_work: darq, put all of those defniitions inside __init__
18:22  Muhammad_Saad: arkanes_, I am using hex(ord(string)) so it's not an integer.
18:22  cwillu_at_work: darq, self.d = [0] * 5, etc
18:22  arkanes_: Muhammad_Saad: leave the hex() off
18:22  Muhammad_Saad: :-/
18:22  arkanes_: Muhammad_Saad: you're re-implementing hex()
18:22  cesar_CR: hello guys anybody here that uses scapy and ubuntu ?
18:22  cwillu_at_work: darq, also, unless you're using python 3, you should have "class Intersection(object):" instead of a bare "class Intersection:"
18:23  arkanes_: Xeross: no, += on lists extends the first list in-place
18:23  cwillu_at_work: arkanes_, that's what he said, no?
18:23  arkanes_: cwillu_at_work: well maybe
18:24  arkanes_: append and extend are different operations
18:24  cwillu_at_work: I think he meant the plain english meanings though
18:24  arkanes_: and its not clear if he meant in-place or not
18:24  arkanes_: Xeross: for exactly this reason, I would suggest you avoid the use if += and instead use the .extend method if thats what you want to do
18:27  Muhammad_Saad: arkanes_, Sorry, I did not understand what you said about not using hex().
18:27  arkanes_: Muhammad_Saad: hex() takes an integer and formats in a (specific) hex format
18:27  arkanes_: Muhammad_Saad: you want to do the same thing, but with more control over the format
18:28  arkanes_: Muhammad_Saad: so what you are doing is implementing hex() yourself - calling the version that doesn't do what yuo want is counterproductive
18:28  darq: cwillu_at_work thx
18:28  Muhammad_Saad: So first I use ord to get an int. Then what?
18:28  arkanes_: Muhammad_Saad: then you format that int using the string interpolation formating character I showed you
18:30  Muhammad_Saad: Now I understand. I hadn't paid attention to the int() in your line. Thanks arkanes_. :)
18:33  demonafro: Is it bad form to use `stuff = open("file").readlines()`? There is no way to .close() the file, but I assume that is handled by GC? And I know that explicit is better, etc, but this is the way my brain works.
18:34  papna: demonafro: Absolutely.
18:34  papna: demonafro: Don't use readlines, just iterate over the file object.
18:34  papna: demonafro: for line in f:
18:35  Wild_Cat: demonafro: nevertheless, the file will be closed right after the line is executed. Note that this is an (useful) artifact of the CPython implementation, not part of the language spec
18:35  Muhammad_Saad: So is  "U"+"0x%04x"[2:] % ord(string)  good for what I need or is there a better way out there?
18:36  demonafro: Okay, thanks papna and Wild_Cat
18:36  papna: Wild_Cat: That isn't something useful, as using it could be wrong.
18:37  papna: demonafro: the reliable way to make sure a file gets closed is to use ``with open(filename, mode) as f: use(f)``
18:37  Wild_Cat: papna: a lot of useful artifacts aren't part of the language spec. The entire stdlib, to name but one.
18:38  papna: Wild_Cat: Relying on the current refcounting strategy isn't useful, it's foolish.
18:38  papna: And completely unnecessary.
18:39  bfrog: is there a safe way to have a registry of named singleton objects
18:39  bfrog: like named loggers for example
18:39  bfrog: where when all references to the logger disappear, its removed from the registry
18:40  bfrog: do I just need to keep a count of references as part of the named registry of loggers?
18:40  dash: bfrog: safe from what?
18:40  pharno: can I somehow import a class from a subdirectory?
18:40  bfrog: forever existing loggers
18:40  pharno: e.g. import foo/bar
18:40  dash: pharno: read about packages and modules in the python tutorial.
18:41  papna: pharno: The Python tutorial has a section on packages.
18:41  bfrog: I mean, really I guess what I want is maybe weakref ?
18:41  dash: Muhammad_Saad: that looks about right, except for the slice part.
18:41  pharno: which tutorial?
18:41  papna: pharno: docs.python.org/tut
18:41  pharno: I mean, im familiar with packages and modules...
18:41  papna: pharno: Also, you might get something out of http://jcalderone.livejournal.com/39794.html
18:41  pharno: I just didnt need to import a file in a subdir yet
18:41  dash: bfrog: why do you need global storage for them, then?
18:42  Muhammad_Saad: dash: Just noticed that. Thanks! :D
18:42  bfrog: I'm logging a stream of numbers, I want a reader to be able to easily obtain a reference to a writter based on name so that
18:42  Muhammad_Saad: Now it's "U"+"%04x" % ord(char)
18:42  bfrog: the reader can subscribe to values to the writter is writting
18:43  cwillu_at_work: sorry, why is U out on its own?
18:43  Muhammad_Saad: That's a good point too. :)
18:44  Muhammad_Saad: That's called incremental debugging :D
18:44  bfrog: dash: actually... thats a good question
18:44  Muhammad_Saad: Now it's even more compact. "U%04x" % ord(char)
18:47  Jax: how do i set an attribute on a class method (@classmethod)
18:48  bfrog: dash: oh I remember why now
18:48  bfrog: the writter may not exist
18:48  Jax: i want to set: @classmethod \n def mymethod(cls,..): ... \n mymethod.myattr = 'x'
18:48  Jax: but that doesn't work like that.
18:48  bfrog: the Reader should work in the case where the writter does not exist, in which case it just reads from a logged file
18:49  dash: bfrog: what?
18:49  dash: bfrog: why isn't this object passed as an arg to the reader?
18:49  bfrog: dash: because the object may not always exist
18:50  dash: bfrog: so pass None in that case.
18:50  bfrog: dash: well, the Reader should read from a file in that case
18:50  bfrog: how would it know which file to read from then
18:50  bfrog: or I do pass the file and None/Writter to it
18:50  bfrog: that might be ok
18:51  bfrog: anyways, there's some ideas, I remember why I did what I did now
18:52  Xeross: cwillu_at_work: Well that was the plan
18:52  dassouki: don't you wish you woke up understanding a concept you're struggeling with ....
18:53  dash: dassouki: when i have that problem, i pick an easier concept instead
18:53  dash: what concept, btw? :)
18:54  arkanes_: dash: feel like talking about how you unit test parsers?
18:55  dassouki: mostly ORM and databases. i get the concepts and i'm good at designing a db, but when it comes to making it talk to my application using sqlalchemy ... i find it very difficult .. especially in objects that heavily rely on OOP
18:57  dassouki: i just need more practice i guess, or excercises / problems on sqlalchemy .. i wish such places exist, where they haev university style assignments, you do them and someone grades it for you
18:57 --- atula_ is now known as atula
18:58  D-vo: sounds like a job
18:58  dash: arkanes_: i wish I could say "I generate them from the grammar"
18:58  lvh: dassouki: Yeah that sounds like a proper job to me
18:58  dash: arkanes_: but i don't
19:00  dassouki: lvh: well, if you have a book you want from amazon, and are willing to spend 4 5 housr helping me out ... I don't mind at all
19:00  dash: arkanes_: I've just tried to write test cases that cover all the branches in the structure
19:00  dash: arkanes_: figuring out how to test py3ast is going to be a chore
19:00  dash: arkanes_: codegen and asdl.py will probably figure prominently
19:01  lvh: dassouki: For code review? I do that for fun
19:02  dassouki: lvh: mostly for code review and also, "teaching"
19:03  lvh: dassouki: Most of my code review results in education
19:03  lvh: Not necesarily of the reviewee
19:03  arkanes_: dash: well generating them from the grammar is mostly testing your parser generator, not the parser itself
19:04  dassouki: i would consider myself to be a beginner in sqlalchemy and I'd liek to get to a point, where i'm comfortable with dealing with multiple objects from multiple dbs, initiating triggers, and perhaps interfacing with multiple db technologies
19:04  dassouki: does that make any sense
19:05  lvh: dassouki: "interfacing with multiple db technologies" sounds like managerspeak
19:05  lvh: dassouki: half of the point of using an ORM is that you dont have to care what DB you're talking to anymore
19:06  arkanes_: dash: I'm trying to come up with a way of testing stuff that isn't me trying to think of corner cases and writing test content for them. I think I need some sort of fuzzer.
19:06  Bobng: is there an easy way to turn [1,2,3,4,5,6,7,8,9,10] into ([1,2],[3,4],[5,6],[7,8],[9,10]) ?
19:07  papna-work: Bobng: See grouper recipe in itertools documentation.
19:07  dassouki: lvh: i meant it more if i want to do an app on postgis .. and oracle spatial
19:07  lvh: dassouki: Speaking as a former Oracle victim I can only strongly reccomend you stay the hell away from oracle spatial
19:08  dassouki: Bobng: out of curiosity if you're doing matrix analysis, consider numpy
19:08  Bobng: oh no dassouki, its nothing complex
19:08  jfv34: arkanes_: Here is an interesting list of unittesting tools, it includes a section on fuzzers: http://pycheesecake.org/wiki/PythonTestingToolsTaxonomy#FuzzTestingTools
19:08  dassouki: lvh: i need it in my industry ...
19:08  Bobng: I just wanted to know if there was an easy way to do it.
19:08  dassouki: Bobng: then ignore my comment :)
19:08  Bobng: I thought zip or some __builtin__ would do what I wanted, but papa-work's link is good :)
19:08  lvh: dassouki: Seeing as I was in the GIS industry and had an oracle spatial cluster so big oracle didn't know what to sell us anymore: I doubt it
19:09  m1chael: are there any XML experts here? im using lxml/etree ..  http://dpaste.com/275584/  .. I think i'm getting closer to understanding this.. can anyone take a look at this and give me some pointers?
19:09  lvh: dassouki: Oracle Spatial is not good enough that you want to be caught near it
19:09  dassouki: lvh: i'm a transportation GIS engineer .. and building my own transportation gis tool stack .. http://transpotools.com/src ... but i'm getting stuck at basic ORM stuff and i feel that i need to erally understand it to move on
19:10  dassouki: lvh: one of my clients has an oracle db that most likely they'll ask me to interface with
19:10  arkanes_: m1chael: it sounds like you want an xpath syntax tutorial
19:10  lvh: dassouki: How unfortunate.
19:11  arkanes_: m1chael: notably how to handle namespaces (I think etree has some stuff for this)
19:12  gregglind: so, filecmp.dircmp appears to be non-recursive.  Do I need to build my own (not hard, but I have no desire to write tests for it!), or am I missing something?
19:12  dassouki: lvh: although it's not oracl spatial. Anyways, I've re-written most of TransCAD in Python now ,,, (for my soul purposes only) and i'd like to make it as a web tool ... most of it is doing using sqlalchemy and basic db hacking ...
19:12  m1chael: okay.. so i need to figure out how to handle namespaces... i still dont understand the point of namespaces, but okay.. thanks arkanes..
19:12  m1chael: =)
19:14  jfv34: Is doctest commonly used? It looks like a neat way to get into the habit of testing before coding.
19:14  dassouki: m1chael: do you kind of get what they are, like what do you think they are, and how do they interact with scopes you think?
19:14  arkanes_: dassouki: xml namespaces
19:14 --- remote is now known as Guest70528
19:15  arkanes_: I wonder if there's a way I can set my unit tests up to assert that I'm exiting my parser at certain points and with certain error actions, instead of just getting the results I want
19:15  arkanes_: that might make it easier to be confident that the parser is doing what I think it's doign
19:15  arkanes_: on the other hand, that binds the test really tightly to my implementation and not so much to the grammar
19:18  Jax: well?
19:18  Jax: how do i set an attribute in a classmethod: @classmethod \n def mymethod(cls,..): ... \n mymethod.myattr = 'x'
19:19  KirkMcDonald: Jax: Why would you need to?
19:19  gregglind: jfv34, there are differing opinions on doctest.  I use it for function without side effects, and *part* of my testing.  I use unittest / nose for the 'next level up'
19:19  Jax: kirk, because a framework i'm using is looking for one
19:20  KirkMcDonald: That is odd.
19:20  arkanes_: thats very unusual
19:20  arkanes_: what framework?
19:20  gregglind: jfv34, one added benefit of getting inot the testing habit is that it encourages one to uncouple functions.
19:20  Jax: django
19:20  arkanes_: heh how did I guess
19:20  arkanes_: whats the attribute it's looking for
19:20  Jax: it's not too odd actually.
19:20  Jax: short_description
19:21  jfv34: gregglind: Well I typically test after I've written code, I'm trying to get in the habit of writing tests up front though.
19:21  Jax: it's just a string for the action the method performs
19:21  arkanes_: you're probably supposed to be using a django decorator instead of classmethod
19:21  Jax: could be.. eventhough the documentation does not describe this.
19:21  arkanes_: go ask in #django
19:21  Jax: anyway, i just wrote my own decorator @attributes. seems to work
19:21  jfv34: gregglind: Also, do you know if there's a good way to test C code using python?
19:22  dassouki: lvh: have I lost you in eMac's deadly helix? reference http://freesoftwarehacker.blogspot.com/2010/06/rant-on-zeitgeist-emacs-dbus-and.html
19:24  lvh: dassouki: Huh what
19:25  lvh: dassouki: Okay, so some parts of a giant codebase are undocumented
19:26  lvh: dassouki: And by undocumented he actually mostly means "don't have shipped documentation in my distro"
19:26  lvh: BFD
19:26  dassouki: lvh: you mean in oracle?
19:27  lvh: dassouki: The article you linked me is about emacs not oracle
19:28  gregglind: jfv34, I have Some Opinions on testing, so take with salt :)  I don't write all my tests before hand, but I do think about how I want to test it, and let that help inform my coding.  If I can't figure out *how* to test it, that's a code smell to me, and means I am doing too much at once.  it's nice to write tests before hand, but I find that a little straightjacketing.  Testing C stuff... best advice I have it to treat them like other python functions, an
19:29  eoss: hello, when working with tkinter, ive noticed that underlying widgets affect the widgets placement above it
19:29  eoss: why is that
19:29  dassouki: lvh: ooh i meant to link the image ... not the whole article, but glad you read it ... anyways i will start doing some sqlalchemy problems and show you for review
19:29  dash: jfv34: doctest is for testing docs, not code
19:30  eoss: it actually fixes itself hwen you introduce a big enough columnspan argument
19:30  dash: jfv34: it's rarely useful. i'd recommending getting comfortable with the unittest module, and a test runner like nose or trial.
19:30  jfv34: dash: Alright, thanks.
19:31  dash: arkanes_: Once, I believed it was useful to think about and test a grammar independently of the implementation generated from it
19:31  dash: arkanes_: nwo I believe that in any practical parser they'll be bound together too tightly to bother distinguishing
19:31  dash: er, now.
19:32  lvh: dassouki: I'm actually working on a similar but different SaaS application
19:33  arkanes_: dash: my main issue here is error handling, I have imposed external restrictions
19:34  arkanes_: dash: basically I need to test that different parser implementations are equivalent, especially in the errors returned for certain cases
19:34  dassouki: lvh: interesting, anymore detail you can share?
19:39  lvh: dassouki: not yet, NDA, sorry
19:40  rbd: hey guys...I need to parse out email responses (not including the original message, e.g. everything up to ---Original message--, etc.)... anyone know of code or a python lib that can do that... e.g. with a variety of the regexs to meet the various email clients?
19:42  pfrog: why doesn't WeakValueDictionary have has_key() method
19:42  pfrog: am I just expected to wrap myweakrefdict[somekey] with try: except KeyError instead of having a simple if/else :/
19:43  gregglind: dash, I hear your assertion regularly that 'doctest is for testing docs not code', yet doctests routinely catch bugs and errors for me, so I can't figure out what you mean by that.  it's not *enough*, I accept, but in what way is it problematic as part of the testing toolkit.
19:43  KirkMcDonald: pfrog: Does it implement __contains__?
19:43  pfrog: oh, thats probably the case
19:43  pfrog: so then I could if key in weakrefdict: right
19:44  dassouki: lvh: np
19:44  KirkMcDonald: Yes.
19:44  pfrog: maybe...
19:44  pfrog: so then whats the point of has_key
19:44  pfrog: was that prior to the in keyword?
19:44  pfrog: and __contains__
19:44  papna-work: has_key is years deprecated.
19:44  KirkMcDonald: pfrog: It is the old way of spelling it, yes.
19:44  papna-work: It's from before that in
19:47  dash: gregglind: http://bemusement.org/diary/2008/October/23/narrative-tests
19:47  dash: rbd: you don't need regexes. the email module handles this
19:47  mobius: this is probably not the best place to post this, but #swig-wrapper is dead. if i try to compile the tutorial example on swig.org for python except using -c++ and g++, I get the following error during my import in python: undefined symbol: __cxa_guard_acquire. Can someone explain what is going on?
19:48  dash: mobius: it's best to not use swig at all for new code.
19:48  gregglind: dash, nothing in there contradicts my assertion, the doctests can be a useful part of the testing world.  baby and bathwater.
19:49  dassouki: mobius: consider stackoverflow and their mailing list as ell
19:49  dash: gregglind: The question is why you'd use doctests when you can use unit tests instead
19:49  mobius: dash: what would be a better option for wrapping C++?
19:49  dash: mobius: i'd start with cython
19:50  dash: mobius: and consider using boost or just writing a module in C directly, if that wasn't sufficient.
19:50  mobius: i have a lot of existing C++ code, so that isn't an option. :)
19:50  gregglind: dash, it's not either/or, and I use both a lot.
19:51  mobius: dash: thanks for the pointer. i was looking at pyrex before, but that doesn't seem to have any C++ stuff yet.
19:51  KirkMcDonald: mobius: What isn't an option?
19:51  dash: gregglind: Why isn't it either/or, though? :)
19:51  mobius: KirkMcDonald: re-writing my code in C
19:51  Wild_Cat: mobius: Pyrex is deprecated, use Cython instead ;)
19:51  dash: mobius: i wasn't talking about rewriting anything
19:51  KirkMcDonald: mobius: I don't think that was suggested.
19:51  papna-work: mobius: You don't have to rewrite that WHOLE THING in C
19:51  Wild_Cat: mobius: also, what we meant by writing a C module was writing a C interface to your C++ code
19:51  KirkMcDonald: mobius: You'd just need to write something which uses Python's C API.
19:51  mobius: ahh, ok. I see.
19:51  gregglind: dash, doctests have the benefits of demonstrating usage in a repeatable, verfiable, and are right with the code.  for fuctional code without side effects, they are great.  They are also good for demonstrating how option settings affect output, showing corner cases, etc.
19:52  mobius: A C API to my C++ code basically
19:52  KirkMcDonald: mobius: Sort of.
19:52  dash: gregglind: why are they better than unit tests?
19:52  KirkMcDonald: mobius: It depends on what you want your Python API to look like.
19:53  KirkMcDonald: mobius: The advantage of using the C API directly is it gives you total control over what the Python API ends up looking like. The downside is that it is very tedious.
19:53  rbd: dash: the email module can filter out all of the quoted reply text? even if I don't have the entire thread?
19:53  KirkMcDonald: mobius: Cython removes a lot of the tedium without giving up too much of that control.
19:54  mobius: i'll take a look at Cython then... thanks for the pointers.
19:54  gregglind: dash, you asked for reasons, I and I just gave some.  I use both doctests and unit tests, where each makes sense.  I also agree that doctests are abused regularly, and some things should be in unit tests.  It's not either/or
19:54  dash: rbd: oh, reply quoting. missed that part. :)
19:55  dash: rbd: thought you were talking about mime parts
19:55  rbd: oh ok
19:55  dash: gregglind: Sure, but you can do all those things in unit tests
19:55  dash: gregglind: The downside of doctests is that your editor won't treat them like code
19:55  gregglind: um, unittests don't stay in the docstring.
19:56  dash: gregglind: right, that's the only conceivable downside, I think
19:56  dash: gregglind: and the benefits of having code outside of docstrings are greater than the benefits of it inside them.
19:56  gregglind: that is certainly one opinion, yours.
19:56  gregglind: and I like both.
19:57  gregglind: good thing the planet is big enough for both of us.
19:57  dash: that's fine
19:57  gregglind: I think any testing is better than none, and if doctests are sufficient for app, I woudl rather see those than none.
19:57  dash: just don't recommend them to people who are new to testing.
19:58  gregglind: well, actually, that's not your place to decide for me.
19:58  gregglind: thanks though.
20:01  RootLUG: Hi, what's wrong with this? http://paste.lubomirr.eu/45436
20:01  tobiassjosten: How can I get the absolute path to the current file? __file__ seems to have what I need but I want to strip the filename.
20:02  marienz: tobiassjosten: os.path is your friend (os.path.dirname(os.path.abspath(__file__)))
20:03  bob2: RootLUG: yo already have that value in that table
20:03  tobiassjosten: marienz: Yes! Thanks a lot. :)
20:03  RootLUG: bob2: Problem is that i don't have it there ;-)
20:03  dash: RootLUG: Looks like a perfectly normal exception message from mysql
20:03  elb0w: just out of curiosity why dont python devs like lol?
20:04  dash: elb0w: There's no reason.
20:04  elb0w: haha
20:04  bob2: RootLUG: well i guess the index could be corrupt
20:04  Wild_Cat: elb0w: it's not so much lol itself as degenerated textspeak in general -- it's indicative of a very low signal-to-noise ratio.
20:04  RootLUG: bob2: Is there a way to fix it?
20:05  bob2: RootLUG: really triple check the value is not there
20:06  RootLUG: bob2: I'm checking it with "SELECT" in my code before I'm inserting some data.
20:07  shodan45: somebody please just say something intelligent, I've been coding php all day ._.
20:07  RootLUG: bob2: Btw, I'm using utf-8 strings and database (and tables too) are in latin-1 encoding. It can be a problem?
20:07  bob2: probably
20:08  bob2: don't know if it could cause this though
--- Log closed Mon Nov 15 20:13:40 2010
--- Log opened Mon Nov 15 20:14:02 2010
20:14 --- Users 857 nicks [0 ops, 0 halfops, 0 voices, 857 normal]
20:14  RootLUG: arkanes: Thanks, I will try it. :)
20:15  arkanes_: but knowing what you're doing is even more important
20:15  gregglind: Wild_Cat my opendir is on 64-bit linux, I can also sort the ouptut, but it woudl be cooler if I could do this on the generators directly.
20:15  gregglind: but for that I need conistent ordering
20:15 --- Channel #python was synced in 90 seconds
20:15  arkanes_: gregglind: what makes you think you can't sort the results of a generator
20:16  arkanes_: gregglind: obviously doing so requires exhausting the generator first and making an intermediate list
20:16  Wild_Cat: gregglind: should be fine. Actually, I think I can do it in one line (not lazy, though): if sorted(os.walk(d1)) == sorted(os.walk(d2)): # yay!
20:16  gregglind: well, then it's not streaming anymore is it :)
20:16  Wild_Cat: although that will only compare file and dir names, not actual file contents
20:16  arkanes_: gregglind: of course not
20:16  arkanes_: gregglind: you can't do lazy sorting
20:17  gregglind: yes, which is why as I said, I can't do it on the os.walk generators directly, unless I can guarantee consistent ordering.
20:17  gregglind: we are in full agreement about cs101 here.
20:17  halfie_: hi, I am unable to run 5.3 Pure Embedding stuff @ http://docs.python.org/extending/embedding.html#embedding-python-in-c
20:17  arkanes_: gregglind: but you can sort a generator
20:18  halfie_: the code doesn't look for multiply.py in the current folder and fails to run
20:18  gregglind: arkanes_, if you sort the generator, it goes O(n) to make the list, which defeats the point there.
20:18  arkanes_: gregglind: I'm confused as to your issue
20:18  dash: halfie_: mm, it's usually best to not embed python, but rather wrap your C code as a python extension module
20:19  dash: halfie_: what are you writing?
20:19  arkanes_: gregglind: you either want consistent ordering, or you don't. The data you're getting is not in a consistent order.
20:19  gregglind: arkanes, if the order is consistent on both, you can do the "go until one is different, then break" idiom, which is better.
20:19  halfie_: dash: My code is in Python and I need to use it from C :) .. reverse
20:19  neataroni: what will object.attribute evaluate to (in the boolean sense) if the object doesnt have that attribute?
20:19  arkanes_: gregglind: but the order is not consistent, and it can't be
20:20  arkanes_: gregglind: because of race conditions if nothing else
20:20  gregglind: "it can't be" -- do tell.
20:20  halfie_: dash: the top level code is in C and needs to use some code written in Python
20:20  gregglind: well, my question is answered.  os.walk doesn't give consistent ordering, so I have to sort.
20:20  gregglind: oh, well, life goes on.
20:21  papna-work: halfie_: That ends up being hard enough its seldom worth it.
20:21  arkanes_: os.walk is as consistent as your OSes directory access APIs are
20:21  arkanes_: however, that amount is "not at all"
20:21  pfrog: is there any way to get the full precision of a floating point value in to an ascii encoding?
20:21  pfrog: it seems like there are special cases there
20:21  papna-work: halfie_: Have you consider using a Python program as a subprocess?
20:21  arkanes_: pfrog: repr() returns the full precision
20:21  gregglind: arkanes_, my question is answered and this horse is beaten.  I understand the implications.
20:21  halfie_: papna-work, yes but others developers around me hate that idea of spawning :(
20:21  papna-work: halfie_: There are documents on embedding Python on docs.python.org if you end up doing so
20:22  papna-work: halfie_: Well that's stupid of them.
20:22  bob2: neataroni: it raises an exception
20:22  halfie_: papna-work, yes I went through the docs but can't get examples to run ;)
20:22  papna-work: halfie_: What Python thing are you wanting to embed.
20:22  papna-work: ?
20:22  neataroni: bob2: and that doesnt translate to a false?
20:22  dash: halfie_: why's the top-level code in C, though?
20:22  papna-work: halfie_: Any why is the top-level code in C?
20:22  arkanes_: pfrog: str() also returns the full precision, but a different kind
20:22  bob2: neataroni: it translates to an exception ie you don't get a value back
20:22  arkanes_: pfrog: what do you think that "full precision" actually means?
20:23  neataroni: bob2: aha... thank you
20:23  pfrog: how would I see a float that represents one of the special IEEE float values, inf, nan, etc
20:23  dash: halfie_: unless your code is a total mess it should be easy to just invoke that C toplevel from python
20:23  dash: pfrog: float("inf")
20:23  pfrog: meaning I can get the exact same double if I reread the string
20:23  dash: in python 2.6 or later
20:23  halfie_: papna, the code is performance critical and thus it is in C ... only a small part is in python
20:23  apansover: How can I use virtual env to install a different version of python binaries?
20:23  papna-work: pfrog: if f.isnan() if f == float('inf'), ...
20:23  dash: halfie_: that's just fine
20:23  papna-work: halfie_: That explains why part of the code is in C. That doesn't explain why the outermost code is C.
20:24  bob2: apansover: install it with whatever python you want it to use
20:24  dash: halfie_: http://twistedmatrix.com/users/glyph/rant/extendit.html
20:24  papna-work: halfie_: What does the program do and what Python thing do you want to use?
20:25  halfie_: papna-work, the C program processes terabytes of data and the Python code merely does some DWARF stuff lookups
20:25  arkanes_: halfie_: that doesn't really matter
20:25  apansover: bob2: Ahh so if I first install i.e 2.7 I can just run virtualenv from that binary..ofcourse. thanks!!
20:25  arkanes_: halfie_: you're fixating on quantitative stuff that doesn't have anything to do with the actual structure of the program
20:25  halfie_: So you guys are asking me to write the outmost layer in Python ?
20:25  arkanes_: well no
20:25  arkanes_: (they are, I'm not)
20:25  halfie_: :d
20:25  papna-work: (I'm not.)
20:25  dash: halfie_: everything should be written in python unless there's a good reason not to, right? ;-)
20:26  arkanes_: however, it is strictly more work work to embed python than to extend it
20:26  arkanes_: so you have to start with the extending part *anyway*
20:26  halfie_: I agree, tell them to other developers around me. My code is in Python (it is a simple wrapper around gdb).
20:26  arkanes_: that said, from your description it sounds like doing either is stupid
20:26  dash: halfie_: seriously though, if the python stuff is optional, or a bag on the side, i could see why you'd not want to do that...
20:26  arkanes_: if you are going to embed it in an easy way, you may as well spawn a process
20:27  halfie_: arkanes_, I see now. Makes sense.
20:27  arkanes_: cue your other developers screaming OH NOES MY PERFORMANCES
20:27  halfie_: spawning for the win!
20:27  papna-work: Embedding Python is a chore, and isn't really good at what it wants to do.
20:27  papna-work: There is a good chance that using Python from a subprocess or not using Python at all and finding a pure C solution are better.
20:27  arkanes_: terrabytes!
20:27  arkanes_: that is SO MANY BYTES, you guys
20:28  arkanes_: indeed
20:28  Wild_Cat: aye. If you *want* to embed a language, Lua is a better choice.
20:28  arkanes_: well embedding lua ain't exactly trivial
20:28  Wild_Cat: it's more trivial than embedding Python :p
20:28  papna-work: I wouldn't embed Lua to get access to some library.
20:28  papna-work: *wouldn't want to
20:29  halfie_: embedding a full blown interpreter does seem like a non-trivial task now.
20:29  arkanes_: Wild_Cat: eh not that much
20:29  dash: halfie_: if nothing else, it complicates your build process.
20:29  arkanes_: Wild_Cat: you've still got to wrap all your program stuff, and you have to set up all the lua calls
20:29  arkanes_: where lua rapidly wins is in the flexibility and power of the embedding API, and in the lighter weight of the core interpreter
20:30  dash: pft, 'weight'
20:30  halfie_: lua ... pfft for n00bs .. python ftw :P
20:30  arkanes_: halfie_: there's lots of stuff that works with DWARF available as C libraries, I would look for a pure C solution before any of the things we've discussed here
20:30  dash: i expected better from you, arkanes. :)
20:30  arkanes_: dash: I actual have an objective definition of weight I am using there ;)
20:30  dash: yeah i'm not sure i'd haul in python for that if nobody else is gonna use it.
20:30  halfie_: arkanes_, and all those libraries suck balls, some of them don't suck but are HARD to use.
20:31  MostAwesomeDude: Lua's scripting is fine as long as you don't need, say, string manipulation. :3
20:31  arkanes_: sometimes you just gotta man up and say those balls won't suck themselves
20:32  arkanes_: on the other hand, I wedged a python interpreter into my app just to express some simply business logic as a script instead of compiled source and it has turned out to be one of the best decisions I've made
20:33  arkanes_: I'm using FePy though which is much easier to embed and interop with than CPython
20:34  papna-work: arkanes_: What was the rest of the application in?
20:34  arkanes_: papna-work: c#
20:35  arkanes_: papna-work: easier to embed and interop with *when running in a .net environment*, I should say
20:40  papna-work: I've heard bad things about embedding Mono.
20:40  papna-work: But I've heard them from dumb people.
20:42  aLemmer: I have a big project I want to get started on.
20:42  aLemmer: However, I'll need help.
20:42  pfrog: lua and js are probably the easiest to embed
20:42  MostAwesomeDude: Could that be because the non-dumb people don't ever bother embedding Mono? :3
20:42  aLemmer: I want to be able to control a few services on a Windows computer via my Palm TX.
20:42  aLemmer: Like restarting Apache, restarting Filezilla, &c.
20:43  aLemmer: How could I go about doing this?
20:43  papna-work: aLemmer: Get a linux computer and install an ssh client on your Palm.
20:44  dash: or a linux vm :)
20:49  arkanes_: the linux computer part is not neccesary
20:49  arkanes_: you can install an ssh server on windows and shell in
20:49  jfv34: powershell is particularly nice
20:49  arkanes_: powershell is entirely unnecessary for this use case
20:50  arkanes_: and it doesn't actually address the remote use case anyway
20:50  jfv34: I suppose so, but it's still a nice shell for using windows from the command line via ssh
20:51  arkanes_: sure whatever
20:52  arkanes_: windows also exposes a remote management API via netbios, you could see if there's a client for that available for your phone. This means doing some very scary and bad things to your network security.
20:53  aLemmer: Thanks, papna-work.
20:59  Jax: how do i access an attributes of a function inside of the function?
20:59  dash: you don't
20:59  KirkMcDonald: Jax: The same way you'd do it ouside of the function.
20:59  bob2: thisfunction.blah
20:59  dash: that's not what they're for
21:00  Jax: hm ok, i'll think of a way to refactor it
21:00  KirkMcDonald: Unless it's a method, in which case attributes don't necessarily make any sense.
21:00  RaceCondition: how can I make rope able to auto-import Python built in packages? for example, contextlib... right now it just tells me "Global name contextlib not found!"
21:00  papna-work: Jax: Function attributes aren't a place to store your state.
21:01  Jax: i'm trying to store a permission for a given function on that function
21:01  bob2: RaceCondition: you mean it doesn't work when you do import contextlib?
21:02  Jax: i.e something like: @premission_required('add_permission') \n def my_function(...) ...
21:02  dnolen: what's the most idiomatic way to access a property in a nested JSON object from Python?
21:02  RaceCondition: bob2: of course it does, but I'm trying to make rope aware of it
21:02  Jax: i need to check the permission without using the function
21:02  Jax: but also check it inside the function
21:02  Jax: that's why i was doing that
21:02  papna-work: Jax: You don't want to store that on the function object.
21:02  Jax: i'm open for suggestions ;)
21:03  papna-work: Jax: You want that to be stored on something non-global, like the object that will be a method of.
21:03  bob2: RaceCondition: I mean, you import it and rope still claims that?
21:03  Jax: yeah i was just thinking of putting that inside of a class
21:03  neataroni: sry if this is too general of a programming question: is there a way to run something and inspect all the objects it creates and stuff?
21:03  dash: neataroni: sure
21:03  papna-work: Jax: Functions not within classes generally shouldn't do anything interesting like that.
21:03  dash: neataroni: what kind of inspection do you want to do?
21:04  RaceCondition: bob2: um, no, I get this message when I do "rope-auto-import"
21:04  neataroni: dash: i want to look at all the objects that are created, and look at all their attributes
21:04  dash: neataroni: and then what?
21:04  neataroni: dash: thats it
21:04  dash: ok. why do you want this?
21:05  neataroni: dash: just to make sure everything looks right
21:05  dash: (I really doubt you want to look at _every_ object)
21:05  neataroni: dash:also just for fun
21:05  dash: neataroni: How would you know if it looks right?
21:05  RaceCondition: bob2: funny, it actually does seem to be aware of contextlib, but it's not able to auto import it
21:05  dash: Oh. well, fun is not allowed here, of course
21:05  neataroni: dash: cause i know kinda what they should be
21:05  dash: neataroni: so here's what you do
21:06  dash: you write a unit test
21:06  papna-work: neataroni: Are you interested in sys.subversion[0].replace ?
21:06  dash: that asserts the attributes of the objects you care about have the values you expect
21:06  papna-work: neataroni: that's an object that exists in your program.
21:06  papna-work: Sorta.
21:06  dash: neataroni: then you run this test, and it tells you if things are OK.
21:06  papna-work: neataroni: Rather than reading a mess of information, you should decide what you want to rest and debug.
21:07  neataroni: dash: anyway i can just tell it to show me everything?
21:07  neataroni: i like to learn by failing
21:08  dash: neataroni: sure. learn to write unit tests, though :)
21:09  neataroni: dash: excellent
21:09  Jax: how do i get the class of a method?
21:09  neataroni: in eclipse, i have a 'run as unit test'
21:09  neataroni: how do i write something for that?
21:09  papna-work: Jax: Why?
21:10  Jax: well i'm storing the permission on the class now
21:10  papna-work: Jax: Store it on the INSTANCE of the class.
21:10  papna-work: Jax: That instance is named self.
21:10  dash: neataroni: write a subclass of unittest.TestCase
21:10  Jax: it is on the instance
21:10  papna-work: Jax: Or store it on something that that class's instance has.
21:10  Jax: but i only have a reference to the method of that class frmo outside...
21:10  dash: neataroni: give it methods that do the tests you want. "def test_foo(self): ..."
21:10  Jax: and i need to check if i have permission without running that method
21:10  \3TATUK: Can you archive a DIRECTORY with zipfile?
21:10  dash: neataroni: your test runner will call them.
21:10  Jax: i only have the method reference
21:11  dash: Jax: why doesn't the method check permission when you call it?
21:11  Jax: it does
21:11  neataroni: dash: ok cool
21:11  dash: Jax: better yet, why does your architecture allow you to have method references you're not allowed to call?
21:11  Jax: but i'm generating a drop down of all possible actions in my frontend.. and i want to know if i'm allowed to display that action
21:11  Jax: which is a method...
21:11  Jax: hence i'm not running the method yet
21:12  Jax: and i wanted to do that based on permissions of course, because that seems quite handy
21:12  dash: mmmm
21:12  Jax: or is that totally dumb?
21:12  dash: 'permissions' is kind of an antiquated concept
21:13  dash: Jax: how about this: your class should have an "allowedActions" method that takes a user object or something, and returns a list of things that user can do
21:13  papna-work: dash: Create a method that gives you this and call taht.
21:13  papna-work: Jax even
21:13  dash: Jax: you can display the list in the gui, then invoke them when the user requests them.
21:15  Jax: well that's already solved isn't it? users without permission cannot execute the method body.
21:15  Jax: i would just like to remove the actions all together because it will confuse the users (for obvious reasons)
21:16  Jax: will have to think about this.
21:16  dash: Jax: right! that's why you have 'allowedActions' return a list of things
21:17  Jax: i already have a method user.get_all_permissions()
21:17  Jax: but i don't see how it will help me if all i have is a reference to the method which is the action
21:18  dash: Jax: and what does get_all_permissions return?
21:18  Jax: a list of strings containing the actions the user is allowed to do, like: add_myspecificthing
21:18  Jax: (that was a string, sorry)
21:19  dash: Jax: so have it return a list of pairs
21:19  dash: the name to show the user, and the callable to invoke.
21:19  Jax: you mean add the action name to the database, instead of couplin the action to the permission identifier
21:19  dash: huh what
21:20  Jax: i see what you mean
21:21  rmancy: Hi guys, any idea how python deals with threading from a thread....?
21:21  papna-work: rmancy: Yeah.
21:21  papna-work: rmancy: Why?
21:22  rmancy: papna-work, does it work well ? :-)
21:22  dash: rmancy: compared to what? :)
21:22  dash: rmancy: not using threads works better, like in most languages :)
21:23  papna-work: rmancy: There are very few problems I'd use threading for in any language, and especially few in Python.
21:23  rmancy: dash, what about forking from a thread ?
21:23  dash: rmancy: ha ha oh man
21:23  papna-work: rmancy: That's not something *EVER* to do.
21:23  papna-work: EVER
21:23  dash: rmancy: have you ever tried that?
21:23  rmancy: dash, no I haven't. I imagine the results would be unexpected
21:24  Jax: uh, what was syntax to create a class side variable again?
21:25  papna-work: Jax: Are you looking for self.foo = bar?
21:25  Feyr: so this is probably a dumb question, but how would i paste a pointer of pointer.  ie http://pastebin.com/rHT7qcGq
21:25  infobob: http://bpaste.net/show/11063/ (repasted for Feyr)
21:25  papna-work: Feyr: There's no pointers involved there. Python doesn't have pointers.
21:25  Feyr: name it as you wish
21:26  papna-work: Feyr: Python also doesn't have assigning to outside names like that.
21:26  papna-work: Feyr: names aren't in any way passed to a function.
21:26  dash: Feyr: 'data' and 'a' are separate variables.
21:26  papna-work: Feyr: Only the object itself.
21:26  papna-work: Feyr: Python doesn't support the operation you want.
21:26  papna-work: Feyr: (It's a feature.)
21:26  Feyr: so i want a reference to the object, not to the content of the object
21:26  dash: Feyr: that's what 'a' and 'data' are.
21:27  Feyr: except it's not. i cant replace the content of a by passing it to a function
21:27  papna-work: Feyr: You can't rebind the name a by passing the object it refers to to a function, no.
21:27  gregglind: Feyr, you are confusing scopes with references here.
21:27  Zathras: Hi. I am new to python. Can someone give please give me a hint on how to get data from a datastructure dumped with pprint showing: {'response': {'docs': [{'country_code': 'US',   : for instance how to get "US" out of this please?
21:27  dash: Feyr: variables aren't passed to functions, just objects
21:28  Feyr: as i said, name it as you wish, but the behavior remains the same
21:28  gregglind: cf : 'global' if you really want to do what I think you are trying to do.
21:28  dash: Feyr: right.
21:28  Nastya: hi there!
21:28  dash: gregglind: except don't use global.
21:28  papna-work: Zathras: d['response']['docs'][0]['country_code']
21:28  gregglind: except don't you global.
21:28  Feyr: cant use global, this is simplified code to illustration what im doing
21:28  papna-work: gregglind: global cannot do what that paste asked for.
21:28  papna-work: NOTHING can do what that paste asked for.
21:28  papna-work: Thank god.
21:29  gregglind: sorry, missed the paste, trying to decipher what Feyr is getting at, but it sounds Non-Pythonic by design.
21:29  Nastya: I'm a newbie. And should I split my program on functions the same way as in C or I can write without functions as in basic?
21:29  Zathras: ah. ty. I missed the [0] I think. Why do I need that?
21:29  Eevee: you cannot* assign to names higher in the call stack
21:29  Zathras: because it's the first item in an array/list?
21:29  Eevee: (* ok you can but we won't tell you how)
21:29  et: Feyr: pass a mutable object (i.e. not string) and change the object)
21:29  gregglind: Nastya, it will probably be to your benefit to write with fuctions, if I am reading you right.
21:30  Diverdude: how do i know to which interfaces an object implements? Specifically i need to find an array which implements NumPy array interface
21:30  et: Feyr: or, just use return values
21:30  Feyr: im not assigning names, i want to change the object it points to
21:30  papna-work: et: Feyr: Better yet, store your state in an instance of a class and call its methods.
21:30  gregglind: Nastya, though you can write in a scripty/bash way (command after command, all in global scope) if you like.  Not recommended for lots or reasons though.
21:30  et: papna-work: that would be one way of "changing the object"
21:30  dash: Diverdude: that would be numpy arrays :)
21:30  Nastya: thank you gregglind :)
21:30  papna-work: et: Yes, the right one.
21:31  Eevee: Feyr: yes, you're asking to assign to a name.  variable names aren't pointers, they're labels attached to objects.  calling a function only passes the object.
21:31  papna-work: Diverdude: This is not a formal, linguistic thing.
21:31  Feyr: pap, that's what im doing. except the objects change with different calls
21:31  papna-work: Diverdude: AFAIK, numpy is the only one with its interface.
21:31  gregglind: Nastya, ask more as you get into your code, welcome to python!
21:31  Feyr: self.a and the next call might be self.b
21:31  papna-work: There have been multiple starts at pure Python stuff with basically the same interface, but I don't think they've gone anywhere.
21:32  papna-work: Feyr: When you pass self.a to a function, you pass not "the a attribute of self", but the object it refers to.
21:32  papna-work: Feyr: Perhaps you want something like self.a = self.foo(self.a)
21:32  Diverdude: papna, but...i have an numpy.ndarray, and when i send it to Image.fromarray(mynumpyndarray) it says: ("Cannot handle this data type"). And when i look in the docs it says it handles any object implementing the numpy array interface ???
21:32  _mo_: dash, i've started writing the classdef visitor, but i don't know how to run the compile eval stack to see if it compiles properly
21:32  Nastya: And another question what is the best container for a deck?
21:33  _mo_: dash, http://paste.pocoo.org/show/291739/
21:33  et: Nastya: you mean a deque?
21:33  papna-work: Diverdude: Pastebin your code, reprs of the objects, and the full traceback. And probably paste them to #scipy
21:33  Feyr: self.foo being a function?
21:33  gregglind: Nastya, or a deck of cards?
21:33  papna-work: gelignite: The callable you're interested in, yeah.
21:34  Nastya: gregglind: yes!
21:34  Feyr: nm i see what you mean. im trying to avoid that. but i guess it's another of python idiosyncracies
21:35  Feyr: i might as well just copy/paste the whole function and hardcode the specific members it refers to. but this seems Very Bad(tm)
21:35  Eevee: what are you trying to accomplish
21:35  Eevee: why don't you just have this method on self.a
21:35  Feyr: because self.a is a state in a state machine
21:36  gregglind: Nastya, (me on limb), sounds like homework, or trying to learn OOP.  One way to do it is to make a 'class Deck(object)', and work from there.  Others will have other opinions.  I might do it all with functions, and just use a dictionary (hashmap in other langs) for the whole thing, but I tend to favor 'thin' data structures.
21:36  Feyr: i could probably add yet more object levels but that's even more useless code than just a copy of the function
21:36  papna-work: Feyr: Pastebin the code.
21:36  gregglind: Feyr, you might want to don flameproof, and learn a lot more about how python works before coming into #python and saying some of this :)
21:37  gregglind: also, look at working state machines written in python.
21:37  Diverdude: papna-work, , here is my code: http://pastebin.com/CiQhS3mb
21:37  infobob: http://bpaste.net/show/11066/ (repasted for Diverdude)
21:37  Nastya: gregglind: so, a  deck class looks like the best solution, doesn't it?  :)
21:38  gregglind: Nastya, best is relative.  It's a common one, yes.  Look for some tutorials on it.  Others have opinions?
21:38  RaceCondition: bob2: ah, I needed to add "contextlib" to ropemacs-autoimport-modules, but now I'm wondering if there's a way to tell rope to add everything there by default
21:38  Feyr: probably greg :)
21:38  gregglind: Feyr, for real, people do write state machines all the time in python, but the idioms might be different.
21:38  gregglind: if you are coming from C or Lisp.
21:38  Diverdude: papna-work, and the full traceback: http://bpaste.net/show/11067/
21:39  Nastya: gregglind: thank you. I just need it for begin. After that I'll dig into tutorials.
21:39  gregglind: Feyr, not seeing code, it's hard to say.
21:40  Feyr: c and perl actually, but yeah :). im trying to find a way to paste the code that will make sense, and not reveal business specific data
21:40  Feyr: it's ok, i'll figure something out. now that i know you cant pass arbitrary references
21:42  marekw2143: what is reverse function to urllib.urlencode?
21:42 --- rmancy is now known as rmancy_getting_m
21:43 --- rmancy_getting_m is now known as rmancy_milk
21:43  Diverdude: marekw2143, urllib.urldecode ?
21:43  marekw2143: Diverdude: hmm, python 2.5 doesn't have that
21:45  manizzle: hey guys
21:45  kawumba: is there a shortcut for array([fun(foo), fun(bar), fun(baz)]) ?
21:45  manizzle: so there are two different functions i want to yield from my main mod
21:45  bill_sbt: hey all
21:45  JohnnyL: where can I get foldl and compose?
21:46  manizzle: should i maybe add the elements that i want to yield into an array, and then yield them all at one time?
21:46  papna-work: JohnnyL: Use a for loop and function you define instead.
21:46  Wild_Cat: JohnnyL: foldl is reduce. compose can be found somewhere in the application of functools.partial, but if you're asking those questions, there's a chance you're either doing it wrong or simply not using the right language.
21:47  Wild_Cat: (namely, if you want Haskell, you know where to find it)
21:47  papna-work: manizzle: You're looking for map(fun, [foo, bar, baz]) or better [fun(x) for x in [foo, bar, baz]]
21:47  papna-work: manizzle: Also, you almost certainly didn't mean `array`
21:47  kawumba: papna-work: i guess you meant to talk to me :)
21:47  manizzle: papna-work, im using a list
21:47  manizzle: hah
21:47  manizzle: srry
21:47  manizzle: but yeahj
21:47  kawumba: papna-work: what should i use instead?
21:48  manizzle: im adding all my elements to a list, and then yielding just the list
21:48  manizzle: or should i just return the list
21:48  papna-work: kawumba: Sorry.
21:48  manizzle: hah
21:48  papna-work: kawumba: You might have meant `list`.
21:48  bill_sbt: anybody else having issues with 3.2 turtle graphics?
21:48  JohnnyL: Wild_Cat: if foldl is reduce, what is foldr?
21:48  papna-work: JohnnyL: Use for loops
21:49  Wild_Cat: JohnnyL: a for loop.
21:49  kawumba: papna-work: yes, i guess that will do the job as well ;)
21:49  JohnnyL: thats not what I asked.
21:49  Wild_Cat: or a homegrown function (duh)
21:49  papna-work: kawumba: No "as well"
21:49  manizzle: papna-work, would that work?
21:49  Wild_Cat: JohnnyL: There is no foldr in the stdlib.
21:49  papna-work: kawumba: Python doesn't have a builtin thing called "array"
21:50  papna-work: kawumba: There is a stdlib thing array.array that is very seldom used.
21:50  kawumba: papna-work: i imported it from numpy first, actually :)
21:50  Diverdude: papna-work, any idea?
21:51  kawumba: papna-work: it's just that i didnt know how to multiply/divide element-wise using a normal list
21:51  bill_sbt: is there any way to automate variable naming?
21:51  papna-work: kawumba: Well that's a horse of a different colour
21:51  Wild_Cat: bill_sbt: automate variable naming?
21:51  papna-work: kawumba: You want to define a ufunc
21:51  bill_sbt: like
21:51  papna-work: kawumba: Or to define a function that takes arrays.
21:51  papna-work: kawumba: Rather than passing a list, you'd pass an aray.
21:51  bill_sbt: say i want to generate X number of random numbers and save them all as different variables
21:51  papna-work: bill_sbt: Don't do that. Save them in a list.
21:51 --- Kaedenn1 is now known as Kaedenn
21:51  Wild_Cat: bill_sbt: you don't want variables, you want a list.
21:51  magcius: bill_sbt, maybe use a list?
21:51  KirkMcDonald: bill_sbt: Sounds like you want some kind of data structure.
21:51  Wild_Cat: bill_sbt: possibly a dict, depending on what you're planning to do.
21:52  kawumba: papna-work: thanks, i'll look into it.
21:52  magcius: bill_sbt, may I ask if you have had experience with other languages: if so, which ones?
21:52  Wild_Cat: bill_sbt: my_vars = [random.randint(10) for i in xrange(10)]
21:52  magcius: bill_sbt, (I've noticed a certain trend, not trying to quiz you)
21:52  bill_sbt: nope! just learning :)
21:52  magcius: OK!
21:53  ardian: Hi, what IDE do you suggest for GNU/Linux ?
21:53  bill_sbt: oh wild_cat i see
21:53  bill_sbt: thanke!
21:53  KirkMcDonald: ardian: vim
21:53  bill_sbt: i use idle in ubuntu, runs all right, but it's not gnome
21:53  ardian: vim ? I thought something will do the syntax automaticlly
21:53  KirkMcDonald: ardian: "Do the syntax"?
21:53  magcius: ardian, "do the syntax?"
21:53  papna-work: You know, do the syntax.
21:54  ardian: ^^ :p
21:54  bill_sbt: i know that in ubuntu, gedit highlights syntax automatically
21:54  ardian: Guys I mean example you do pri... it will popup print
21:54  KirkMcDonald: vim highlights syntax, if that's what you mean.
21:54  pseudonymous: Am I wrong in assuming that if I define __rrshift__(self,other) in class B then a statement of type "2 >> b" where b is an instance of B should work?
21:54  papna-work: pseudonymous: You are not.
21:55  KirkMcDonald: ardian: I actually haven't used vim's autocompletion features.
21:55  ardian: autocompletion feature that's the work xD
21:55  KirkMcDonald: But Python is not generally suited to autocompletion.
21:56  pseudonymous: papna-work strange that it doesn't seem to work.
21:56  ardian: I am a very beginner
21:56  KirkMcDonald: ardian: Which tutorial are you using?
21:56  halfie_: IDLE ;)
21:57  ardian: KirkMcDonald, Learning Python the hardway
21:57  ardian: But it's a bit boring
21:58 --- rmancy_milk is now known as rmancy_coffee
21:58  pseudonymous: Can anyone explain this to me ? http://codepad.org/jVmR3E5C ?
21:58  papna-work: pseudonymous: http://codepad.org/v6Adcr9U
21:58  MostAwesomeDude: ardian: Yes, it is supposed to be slightly boring. It's the hard way. :3
21:59  ardian: Actually it's the easy way but I would rather work on some code to do something and learn from it, reading a book is ... :S
21:59  papna-work: pseudonymous: Oh, Python 3.
21:59  papna-work: pseudonymous: It obviously works fine in Python 2.5
21:59 --- rmancy_coffee is now known as rmancy
22:00  papna-work: pseudonymous: I don't know why Python 3 changed this, if it really did.
22:00  papna-work: pseudonymous: You could consider http://codepad.org/Pad0C7Bh
22:01  pseudonymous: papna-work: it fails whenever I try something akin to "C() >> C()" actually, even in python 2.7
22:02  py_newbie: what is best way to check if contents of 2 lists are same? ( assuming both the lists have same number of items)
22:02  py_newbie: will l1 == l2 work?
22:02  KirkMcDonald: pseudonymous: "These functions are only called if the left operand does not support the corresponding operation and the operands are of different types."
22:02  KirkMcDonald: pseudonymous: From the docs for the __rfoo__ methods.
22:02  papna-work: pseudonymous: pseudonymous The code I pasted works fine in 2.5, 2.6, and 2.7
22:03  pseudonymous: papna-work: figured it out, when you do what I want to do, compare two instances of the same type then you have to have __rshift__(s,o) defined in addition to __rrshift__(o,s)
22:03  KirkMcDonald: pseudonymous: If the operands are going to be the same type, implement __rshift__.
22:04  dash: py_newbie: did you try it? :)
22:04  papna-work: pseudonymous: Oh, you originally asked the question with 2 and I never noticed you did something else in your paste. Sorry.
22:05  pseudonymous: KirkMcDonald: the thing is, I'd really like to have it done in rrshift though as what I want to do is to work on the left-hand type from within the right-hand type.. :/
22:05  pseudonymous: papna-work: no props ^^
22:05  py_newbie: dash: tried only simple case
22:05  KirkMcDonald: pseudonymous: But it's the same type.
22:06  dash: py_newbie: but yes, you're right - '==' does work on lists that way.
22:06  py_newbie: dash: works if both lists are sorted, not if they are not
22:06  papna-work: pseudonymous: Are you overloading << to do something completely unrelated to bitshifting?
22:06  papna-work: And stateful?
22:06  jzarr: hi, im reiving data via sock.recv(100) and trying to use a struct to format the received data, the data is in the format 'ccf' which is length 6, however calcsize('ccf') returns 8, all i need to do is get the float out of the data, can anyone help
22:06  py_newbie: dash: is there a better way to check contents of 2 lists are same without sorting?
22:07  py_newbie: or i should sort and check
22:07  pseudonymous: papna-work: oh yes :) Just wanted to try a quick pipe-operator implementation (I'm semi aware of some other projects doing the same thing, I'd just like something really simple for home-grown scripts)
22:07  papna-work: py_newbie: If order is unimportant, you might want a dit instead.
22:07  KirkMcDonald: jzarr: Welcome to the exciting world of struct alignment,.
22:07 * papna-work slaps pseudonymous on the hand, "BAD pseudonymous!"
22:07  KirkMcDonald: jzarr: You need to specify an endianness.
22:08  dash: py_newbie: i think papna means 'set' :)
22:08  py_newbie: papna-work: order is important, I will have to sorted(l1) == sorted(l2)
22:08  dash: py_newbie: sets are unorded collections of unique objects.
22:08  jzarr: kirk, let me try that, one sec
22:09  papna-work: py_newbie: I do mean set. ;)
22:10  py_newbie: dash: if there are duplicate items in the list?
22:10  py_newbie: what would be another option?
22:10  dash: py_newbie: comparing sorted versions works
22:10  dash: what are these lists of?
22:10  Pwdrkeg: Looking for a simple wait 30 seconds before starting program.  Any suggestions for the objects to use?
22:10  py_newbie: strings
22:10  jzarr: kirk, that seems to have done it, thanks for the help
22:10  dash: Pwdrkeg: 30 seconds after what?
22:11  Pwdrkeg: dash, wait 30 seconds from the start before running the rest of the program
22:11  dash: Pwdrkeg: what's "the start", though
22:11  Wild_Cat: Pwdrkeg: time.sleep(30)
22:12  Pwdrkeg: Wild_Call, do you have to import any modules for that?
22:12  papna-work: Pwdrkeg: What for?
22:12  Wild_Cat: Pwdrkeg: time.
22:12  dash: Pwdrkeg: why do you want this?
22:14  JohnnyL: http://docs.python.org/howto/functional.html is out of date
22:14  Pwdrkeg: dash, I'm doing a test program for a class.  Creating a binary that will add various Windows items, reg entries, user, groups, etc... and they have to go through and find out what was added.  But I wanted to wait an initial time period before it actually kicked off.
22:15  Pwdrkeg: thanks Wild_Call
22:15  cederman_: Hello, can I use time.strptime("%s%s%s"%(year,month,day),"%Y%m%d") to compare a date with todays date and see if it is before todays date?
22:16 * bahamas wonders how a wild function call looks like
22:16  dash: Pwdrkeg: Why? why not just start it when you actually want it to start? :)
22:16  dash: cederman_: probably use datetime.datetime.strptime for that
22:17  papna-work: cederman_: datetime.strptime(s, "%Y%m%d") > datetime.datetime.now()
22:17  kerio: Pwdrkeg: how's that supposed to work?
22:17  papna-work: I'm missing a datetime
22:17  kerio: run it inside a VM, compare snapshots?
22:17  Pwdrkeg: dash, because they are going to be monitoring network connections, and they will expect that it will communicate right away.
22:17  papna-work: Pwdrkeg: What?
22:17  Pwdrkeg: kerio, what's that?
22:17  cederman_: you mean datetime.datetime.strptime(s, "%Y%m%d") > datetime.datetime.now()?
22:17  bill_sbt: cool!
22:18  bill_sbt: turtle.textinput is very cool
22:18  jfb: how to give a script a unique name other than 'python' in top??
22:18  bahamas: cederman_: try it out
22:18  papna-work: jfb: Sorry.
22:19  cederman_: papna-work, I use time.strptime("%s%s%s"%(year,month,day),"%Y%m%d") In my program to verify a date, how will I go around that?
22:19  dash: Pwdrkeg: aah. so you're being sneaky, i see. :)
22:19  jfb: papna-work, not an option?
22:19  Pwdrkeg: dash, indeed
22:19  dash: Pwdrkeg: time.sleep is probably a reasonable way to do that.
22:19  jfb: or Sorry as in Sorry? (didn't understand) ??
22:19  neataroni: how do i raise a float to an exponent?
22:20  dash: jfb: as in "python doesn't let you do that"
22:20  dash: neataroni: **
22:20  papna-work: jfb: There isn't really a way to do that.
22:20  neataroni: so float**exponent?
22:20  jfb: drat... guess that's why I couldn't find the solution online
22:21  papna-work: neataroni: TIAS
22:21  neataroni: papna-work: dont know what that means
22:22  papna-work: neataroni: Try It And See
22:22  bfrederi: I am having this exact problem when I use urllib2.urlopen(): http://stackoverflow.com/questions/1767934/why-am-i-getting-this-error-in-python-httplib
22:22  neataroni: papna-work: got it
22:22  bfrederi: Any idea what might be wrong with the request I'm making? If I open that url through firefox, it works just fine.
22:23  ian-k: I am confusing myself with iterating through data structures. Can someone tell me a) what this is (a list of dictionaries?) and how I can iterate through the values of the dictionary? Sample output: ('cn=AP,ou=Groups,dc=domain,dc=com', {'memberUid': ['user1', 'user2',
22:23  bfrederi: The url is using a load balancer, in case that is pertinent.
22:24  dash: ian-k: probably a tuple of a string and a dictionary
22:24  ian-k: okay, that helps dash. So if I wanted to iterate through the keys of the dictionary only
22:24  dash: bfrederi: httplib is kind of crap
22:24  ian-k: what's an efficient slice?
22:25  dash: ian-k: hmm? the dict is the second thing in the tuple
22:25  dash: no slicing needed, just index
22:25  bfrederi: dash, I'm noticing, any suggestion on what I should use that I don't have to download for python2.5?
22:26  dash: bfrederi: nothing
22:26  ardian: Is this also as a PDF somewhere http://docs.python.org/tutorial/
22:26  pedro3005: I'm looking at http://docs.python.org/library/logging.html and I see there's a filename parameter to basicConfig, but what if the file I want is in a different directory? Like, the script is in bla/core and I wanna write to bla/logs
22:26  bfrederi: dash, crap...
22:28  dash: bfrederi: anyway, what's the actual response data the server's sending back?
22:29  dash: pedro3005: then that's what you tell it.
22:30  pedro3005: dash, so pass the full path to the filename argument?
22:30  pedro3005: like filename="/home/foo/bar/logs/a.log" ?
22:31  jfb: I'm trying to run scripts with nohup, appending the output to nohup.out, then I tail -f the nohup file, but with python no standard out is written there during the script execution. What do I need to do?
22:33  ian-k: dash: What's a better way to iterate through than for y in x: for z in y[1]['memberUid']: print z
22:34  ian-k: i know there is redundancy here
22:34  dash: ian-k: oh, what's the redundancy?
22:34  dash: jfb: in order to do what? sounds fine to me
22:34  ian-k: maybe i'm just being stupid and trying to oneline it for no good reason
22:34  jfb: dash, following the output, just to make sure it's going well
22:35  jfb: but the problem is with python the output comes all at once at the very end of the script
22:35  teratorn: *sigh*. is _Silver Stallion_ not the best song in the world
22:36  bfrederi: dash, I'm using urllib2.build_opener(urllib2.HTTPHandler(debuglevel=1)), but I'm not getting a response. I only see the request, and then get the httplib.BadStatusLine exception.
22:36  talcite: hey guys. Fairly new to python here, so I'd appreciate any help you can offer. I'm trying to figure out how to declare a specific 2D array in a clean way. Each row is an input plugged into a function. The function goes 1, x, x^2, x^3 and so on. The inputs are specified in an array by me. The only way I can think of doing it is by for loop or by manually typing it in. They both seem pretty inelegant to me though.
22:36  ronghail: jfb:  http://bytes.com/topic/python/answers/803632-unbuffered-stdout-auto-flush
22:36  dash: bfrederi: right, that's why i was wondering what the server was sending you.
22:36  dash: bfrederi: so that'd be good to find out.
22:37  dash: talcite: sounds like a job for numpy
22:37  bfrederi: dash, it's suppose to be a request for json file, if that's what you mean?
22:37  talcite: dash, yep, I've got it installed
22:38  dash: bfrederi: i mean what are the actual bytes in the server's response
22:38  Spira: Since the SQL DB module escapes strings when you execute a statement, is there anyway I could create a string with the arguments escaped already without having to execute it?
22:38  dash: Spira: why?
22:39  gregglind: talcite, are you thinking of a 'delegation' table... something like {1: my_identity, 2: my_square...}
22:39  Spira: dash: To store them.
22:39  papna-work: Why?
22:39  bfrederi: dash, I'm not sure how to get the response data if it's throwing an error when I try to use open.
22:40  dash: talcite: this might help: http://docs.scipy.org/doc/numpy/reference/routines.poly.html
22:40  GothAlice: Does anyone know of a good Python package for English lexagraphical analysis or tokenizing?  Specifically I'm looking for de-pluralization and normalization for indexing.
22:40  dash: bfrederi: wireshark or tcpflow or tcpdump or such
22:40  gregglind: Spira, the answer I got from Michael Bayer (of sqlalchemy fame) on this is that the escaping goes on inside the db module, so it's hard (or, um, VERY HARD) to get what you want.
22:40  dash: GothAlice: i think NLTK is a thing
22:40  Spira: Hmmm
22:40  dash: Spira: Store them where?
22:40  dash: Spira: why not just put them in your code?
22:40  Spira: A file.
22:41  gregglind: you can store them prequote-escaped, and it should be fine.
22:41  papna-work: Spira: Your security model is ineffective.
22:41  Spira: gregglind: I figured as much. xD
22:41  manizzle: ey can someone help me with scrapy real quick?
22:41  papna-work: Spira: Store them unescaped, and then use a DB engine to run them.
22:41  jfb: ronghail, do I read correct that I should just include sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0) at the beginning of my scripts?
22:41  gregglind: I wanted it for logging, myself, so that when I can copy them over to psql they would 'just work'
22:42  gregglind: jfb, why?  Do you want to affect file buffering for reason?
22:43  jfb: gregglind, because I want to be able to follow it using "tail -f"
22:43  bfrederi: dash, That's a little further than I'm willing to dig right now. I will keep that in mind for later. Thanks for your help!
22:44  Cam: If I am in function x how do I reference the name? title() or so?
22:44  jfb: ronghail, thanks this seems to work!
22:44  dash: bfrederi: three possibilities here
22:44  dash: bfrederi: 1) your server is sending your malformed responses 2) httplib is broken 3) both
22:44  Cam: Or the class.function_name if possible
22:44  bill_sbt: thans for the help guys!
22:44  dash:  cam: you don't
22:44  jfb: gregglind, I have a script 'blend.py' let's call it...
22:44  Cam: dash; No way to return title() to get "myclass.x" ?
22:44  jfb: I can run it: nohup ./blend.py > blend.out &
22:44  jfb: and it will run in the background...
22:44  bfrederi: dash,  All great possibilities!
22:45  gregglind: jfb, the 0 there will be make it unbuffered, for good or ill.
22:45  jfb: now I can type : tail -f blend.out and watch the output, just to make sure things are going okay.
22:45  gregglind: you might want to consider explicit sys.stdout.flush() once in a while instead.
22:45  dash: Cam: Why would you want that?
22:45  Cam: dash; For debugging.
22:46  jfb: gregglind, ah okay. I play around with both approaches.
22:46  Cam: instead of printing "x" to get <bound method myclass.x of <__main__.myclass instance at 0x10049c3b0>>
22:46  jfb: if the output is just 'information' does it matter that it's unbuffered?
22:46  gregglind: jfb, one thing that could be happening is there just isn't enough output to push to your file yet.  so you have to flush() to get it moving :)
22:46  Spira: Hmmm does the DB engine automatically escape the data? Would executing this actually escape the string? """SELECT * FROM `accounts` WHERE `account_name` = 'Blah'"""
22:47  dash: Spira: "executing"? that's just a string literal
22:47  dash: Spira: why do you care? why not let it be done when the query's executed like normal?
22:47  Cam: dash; Any idea?
22:47  dash: Cam: i don't understand the problem
22:47  dash: Cam: what information do you want that isn't in that repr?
22:47  Cam: dash; I don't want it to print that long string, just "myclass.x"
22:48  Cam: Or that long whatever.
22:48  jfb: gregglind, it is weird, because any warnings or otherwise from loading the modules do get printed in real time, but my own 'print' statements (mostly just letting me know where in the script I am) don't.
22:48  dash: Cam: Why?
22:48  jfb: I guess it has to do with how the output is written
22:48  metalfoo: Is it possible to invert a match in the re library, i.e. similar to Perl's !~ operator?
22:48  Cam: dash; For debugging.
22:48  gregglind: Spira:  http://groups.google.com/group/sqlalchemy/browse_thread/thread/e8031bd009ffef6c/f56d921315cf6e98
22:48  dash: Cam: For debugging, the default is fine.
22:49  dash: Cam: Unless there's a particular problem with it?
22:49  Cam: dash; no it is not. do you know how to get what I am looking for?
22:49  gregglind: metalfoo, simple solution:  if not re.search(....
22:49  Cam: If not just say so and I will see if one of my friends is on another network.
22:50  gregglind: jfb, maybe instaed of 'print' consider logging;  or, sys.stdout.flush() after them?  Lots of variables in this.
22:50  dash: Cam: What you want doesn't make sense.
22:50  dash: Cam: I'm trying to figur eout if there's something you want that /does/ make sense.
22:50  jfb: gregglind, thanks, yes I played around with logging, need to get more familiar / habitual with it
22:50  Cam: dash; Ok. I don't want '<bound method myclass.x of <__main__.myclass instance at 0x10049c3b0>>' clogging up my output I just want 'myclass.x' instead. Ok?
22:50  metalfoo: Hmm gregglind, that evaluates to a bool, right? I want all not matching objects though? But anyways thank you, I think I can emulate the behaviour with not.
22:50  qwebber: what's the backwards compatible version of Popen.kill()?
22:51  gregglind: Cam, my_function.__name__ work for you?
22:51  Cam: PERFECT.
22:51  dash: Cam: what difference does it make?
22:51  cwillu_at_work: does timeit do any stupid module tricks?  I get what looks like a memory leak if I run a cPickle.load() in a timeit.Timer().repeat(3, 100) that I don't get if I run cPickle.load() myself 300 times
22:51  manizzle: what are the characters put before a python string?
22:51  Spira: Thanks gregglind
22:51  Cam: dash; one is really long and I don't care where it's memory is allocated and one is easier to look at and understand (for me)
22:51  manizzle: string moddifers of sometype?
22:51  cwillu_at_work: manizzle, r, u
--- Log closed Mon Nov 15 22:57:23 2010
--- Log opened Mon Nov 15 23:02:45 2010
23:02 --- Users 848 nicks [0 ops, 0 halfops, 0 voices, 848 normal]
23:03  j4son: 2
23:04  Mrokii: problem solved. Thanks anyhow.
23:04 --- Channel #python was synced in 93 seconds
23:04  Eevee: Mrokii: don't use shell=True
23:05  Mrokii: Eevee: But then it seems as if the command doesn't work.
23:05  dash: Mrokii: you pass the command as a ist of args
23:05  dash: Mrokii: ['yourcommand', '--color=taupe', 'foo.txt']
23:05  dash: etc
23:05  Eevee: Mrokii: Popen(['mplayer', 'filepath']), not Popen("mplayer filepath")
23:05  gregglind: Mrokii, shlex.split if your friend for making that list, btw.
23:06  dash: gregglind: ridiculous.
23:06  papna-work: gregglind: Likely not.
23:06  Eevee: gregglind: what
23:06  Mrokii: dash: I need to do that only when I use "shell=False"?
23:06  gregglind: Y'all just pass in list.split() into that thing?
23:06  papna-work: Mrokii: Yes (shell=False is implicit, since it's the better option)
23:06  gregglind: really?
23:06  dash: Mrokii: that's the default
23:06  papna-work: gregglind: No, we just make the list.
23:06  gregglind: yeah, well, that assumes you're not getting it from anywhere else.
23:06  Mrokii: okay. Thank you all, I'll try that.
23:06  papna-work: gregglind: Rather than a string that has meaning in a different, *completely inapplicable* context
23:07 * gregglind cries a river.
23:07  Eevee: shell=True passes a string verbatim through the shell which opens you to all sorts of wacky behavior
23:07  Eevee: Mrokii: also you can probably kill off the output with stdout=open(os.devnull, 'w')
23:08  JohnnyL: has anyone had trouble installing: http://pypi.python.org/pypi/functional under 2.7?
23:08  papna-work: JohnnyL: None of us have wanted to.
23:08  Mrokii: Eevee: I just found a way to kill off the output, but I will also change it, so it won't use the Shell. Thanks again.
23:08  gregglind: papna-work, thanks for speaking for me.
23:09  papna-work: gregglind: You're welcome.
23:09  gregglind: by which I mean, make your opinions yours.
23:09  papna-work: gregglind: Sharing is caring.
23:09  dash: heh.
23:09  Mrokii: and thanks dash papna-work and gregglind :)
23:09  bob2: JohnnyL: have you?  did you it produce an error?  pastebinz
23:11  Azul-P: I know I asked about the logical 'not' operator yesterday but is the 'not' operator used in while loops only when the starting statement is False and you need it to be True in order for the while loop to run?
23:11  JohnnyL: bob2: http://dpaste.com/275662/
23:12  qwebber: im a bit confused as to what this piece of code does: http://dpaste.de/jcxW/
23:12  gregglind: Azul-P, slow down there... paste an example with comments showing what you want to do.
23:12  JohnnyL: papna: why? There are many benefits in doing so.
23:12  bob2: JohnnyL: are you on windows
23:12  Azul-P: Sorry, let me type up an example real quick.
23:12  JohnnyL: bob2: yes
23:12  papna-work: qwebber: Are you familiar with the conditional expression `foo if condition else bar`?
23:12  bob2: JohnnyL: why did you install the linux version for 2.5 under 2.7 on windows
23:13  bob2: JohnnyL: or did easy_install do it
23:13  JohnnyL: oh shit
23:13  qwebber: papna-work, yes - in that paste though, it looks like he is setting x, unless x exists, then setting it to itself
23:13  papna-work: JohnnyL: It's full of mostly-trivial, mostly-useless, somewhat-confusing stuff.
23:13  qwebber: papna-work, im wondering why not just do, if x: pass else: y = x
23:13  JohnnyL: papna: it prevents side effects, makes concurrency more possible.
23:13  JohnnyL: bob2: i will try to uninstall
23:13  Azul-P: gregglind: http://paste.ubuntu.com/532623/
23:14  papna-work: qwebber: That snippet is probably a crappy way of writing `if self._foo is None: self._foo = bar()`
23:14  papna-work: qwebber: You might have made a mistake assuming the code was good
23:14  qwebber: papna-work, isnt this better to do: http://dpaste.de/L6f9/
23:14  qwebber: papna-work, i know it doesn't work heh, im trying to figure out if they wrote that a certain way on purpose, or if its just a screw up
23:15  gregglind: Azul-P, what is the issue?
23:15  papna-work: JohnnyL: I'm familiar with functional programming and its benefits. However, the fucntional module isn't a thing that is worth using.
23:15  JohnnyL: how do you ininstall eggs?
23:15  Azul-P: I suppose there's nothing really just that I want to know why 'not' is used and how.
23:15  papna-work: JohnnyL: And it really has little to do with the benefits of FP.
23:15  psykidellic: JohnnyL: rm :)
23:16  papna-work: qwebber: Rather than `if foo: pass;; else: do_something`, you want `if not foo: do_something`
23:16  gregglind: do you know about 'break', and read how while loops work:  http://docs.python.org/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops
23:16  qwebber: papna-work, yup just saw that. thank you :)
23:16  gregglind: sorry, Azul-P.
23:17  Azul-P: Yep I know about break and how while loops work.
23:17  gregglind: Hm.  Sorry, Azul-P, I am not sure of your question.
23:18  gregglind: if you want an example:  try ->  a=10;  while not a < 0 :  print a, a-=1 ;
23:18  gregglind: (with formatting of course, Azul-P)
23:18  Azul-P: gregglind: Because while's condition has to be true in order to loop, the 'not' operator is pretty much used to make a False variable True, right?
23:18  Azul-P: Alright thanks.
23:18  Azul-P: Lemme try the example.
23:19  papna-work: Azul-P: not evaluates to False for true objects and True for false objects.
23:19  papna-work: s/for/when applied to/g/
23:19  Azul-P: papna-work: I understand that much. But that's pretty much why it's used for 'while', correct?
23:20  papna-work: Azul-P: Sure, that's the only reason it's used period.
23:20  JohnnyL: papna: Are you saying Python's FP abilities does not support the DRY principle?
23:21  Azul-P: papna-work: Alright. Thanks!
23:21  lbiffin: Having trouble with mod_wsgi .. able to get it installed and running .. apache finds it ok and the default hello world example in the mod_wsgi wiki works fine. I'm unable to import os, or web.
23:21  dash: JohnnyL: what do you mean by that, exactly?
23:21  lbiffin: I'm sure it's an issue with python path, but I can't find anything to tell me what I need to do to fix
23:22  dash: lbiffin: what's "web"?
23:22  bkeating: so noob it hurts... code: http://dpaste.com/275659/  goal: to print any ONE entry in the list... or is is a object? how do I find that out? If i append [n] to the initial query, i get what i want, but i want to load them all into ``data`` and then pick it apart.
23:22  papna-work: JohnnyL: I'm saying that all the functions in the functional module are either things that are unforgivably named after builtins, more confusing than for loops, or trivial and not really needed, several more than one of these.
23:22  dash: bkeating: lists are objects too :)
23:22  papna-work: JohnnyL: Additionally, they are all stupidly eager.
23:23  dash: bkeating: if you just want one thing, why loop over all of them?
23:23  lbiffin: I assume it's a part of modwsgi, correct?
23:23  bkeating: dash:  yea, confusing to me... can i just wrap it in a type() or something magical to tell me what type of data is it?
23:23  lbiffin: dash: that was for you
23:23  bkeating: dash:  i want them all, but i want to take each of the lines and put it into a dict...
23:23  gregglind: JohnnyL, much of the same or similar functionality is in itertools, and there, they are all lazy (e.g., work on generators without consuming them)
23:23  bkeating: so i can do something like alamanc.moonset  alamanc.sunrise, etc.
23:24  lbiffin: dash: though, I may be referencing an invalid doc on that.. thinking it may have been for web.py, now that you force me to think about it :P
23:24  JohnnyL: papna-work: they are trivial only because their destructive counterparts exist for the masses.
23:24  bkeating: my query grabs all the values i want... i just don't know how to 'cherry pick' one at a time out of it.
23:24  papna-work: JohnnyL: I have no idea what you mean by that statement.
23:24  lbiffin: dash: but alas, os still breaks
23:24  gregglind: that one even phased me, JohnnyL.
23:25  gregglind: *fazed!  ick
23:25  gregglind: and papna and I usually agree on nothing.
23:25  papna-work: I even killed gregglind's cat.
23:25  lbiffin: dash: I have ambiguous errors in my logs, if that'll help
23:25  JohnnyL: papna:functional programming existed quite a number of years before python came out, so if anything functional names have been baked into builtins by eagerness.
23:26  gregglind: oh yes, python builtin map and reduce kind of smell to me.
23:26  dash: bkeating: probably easier to do this with lxml.html and some xpath
23:26  papna-work: JohnnyL: I really don't understand what you mean.
23:26  dash: JohnnyL: what is "functional programming"?
23:26  papna-work: JohnnyL: I mean "eager" the technical term.
23:26  papna-work: JohnnyL: As opposed to "lazy"
23:27  dash: JohnnyL: to you, i mean.
--- Log closed Mon Nov 15 23:27:57 2010
--- Log opened Mon Nov 15 23:33:21 2010
23:33 --- Users 835 nicks [0 ops, 0 halfops, 0 voices, 835 normal]
23:33  gregglind: what's the state of the recursion limit in python?  I haven't kept up.  That's more of a problem for functional programming idioms than not having a built in foldr_
23:33 --- mutew is now known as mutewit
23:34  dash: gregglind: same as it's always been
23:34 --- Channel #python was synced in 89 seconds
23:35  KirkMcDonald: gregglind: Still no tail call optimization. Nor would I expect tail call optimization to ever make it in.
23:35  papna-work: Nor do we really miss it.
23:35  Diverdude: is it not allowed to call your definition the same as the filename it resides in?
23:35  gregglind: I do a lot of graph work, where it woudl be helpful, alas, but it is not hard to survive without.
23:35  papna-work: Diverdude: It is allowed, just inadvisable.
23:35  papna-work: Diverdude: Both may be arbitrary Python identifiers.
23:36  papna-work: gregglind: If we get yield from we can optimize a lot of those types of situations.
23:36  gregglind: papna-work, I accept that.
23:36  gregglind: recursion is often how the algorithms are stated and taught, so there is a mismatch there.
23:37  cwillu_at_work: gregglind, there are special purpose python interpreters with it, but it pretty much can't ever be included in mainline without breaking compatability with most if not all of the major implementations
23:37  papna-work: It turns out all recursion that can be TCOed can trivially be turned into a for loop.
23:37  papna-work: (Indeed, that's what TCO is!)
23:37  dash: gregglind: well, there's no doubt that programming education today is broken.
23:38  gregglind: papna_work that is the argument.
23:38  papna-work: gregglind: No, that's the fact.
23:38  papna-work: gregglind: That's how TCO works.
23:38  gregglind: dash, if you are suggesting that recursion is somehow a broken thing inherently that's a bold claim
23:38  dash: gregglind: no
23:38  cwillu_at_work: gregglind, no, he's suggesting that it's identical to the other
23:38  dash: gregglind: just contemporary programming education.
23:38  cwillu_at_work: there's an identity there.
23:39  JohnnyL: gregglind: yah, i just downloaded pypi's functional lib.
23:39  gregglind: papna-work, sometimes those for loops aren't trivial.  and really, what are languages for, if not to do some easy drudgery.
23:39  dash: cwillu_at_work: ah, they're not identical.
23:39  gregglind: also, I know quite well what tco is, thanks.
23:39  Brklyn: one quick question... I'm writing my first ever python script :) I'm running into this slight problem trying to handle a CalledProcessError when using subprocess.check_output(['ping','-c4','www.nonexistanurl.com'])
23:39  papna-work: gregglind: Yes. They are. Flat out. That's how TCO optimization works. It writes those for loops, and it does it without any really fancy reasoning.
23:40  cwillu_at_work: dash, not to a generic for loop, but there is a mechanical transformation in both directions
23:40  JohnnyL: papna-work: one could even memozie these 'ugly functions' without having to go through loops more than once.
23:40 --- arkanes__ is now known as arkanes_
23:40  gregglind: papna-work, next time I have a recursion, I will gladly let you rewrite it for me.
23:40  dash: cwillu_at_work: Sure. but isomorphism isn't identity. :)
23:40  papna-work: Brklyn: Paste your code. You probably forgot `import subprocess; try...except subprocess.CalledProcessError:...` or `from subprocess import CalledProcessError........except CalledProcessError:`
23:41  arkanes_: well, you can rewrite your recursion or you can accept bounds on your inputs
23:41  arkanes_: you have no other options
23:41  papna-work: JohnnyL: Not any more than you could without using a poorly designed module.
23:41  JohnnyL: "<papna-work> JohnnyL: The crap in the functional module doesn't make Python have great immutable stuff"   <-- This is either infactual or misinformation. You choose.
23:41  arkanes_: JohnnyL: don't be an idiot
23:41  JohnnyL: papna: Why are you so adamant about this?
23:42  papna-work: JohnnyL: I can pass functions with side effects into it. It doesn't change Python's semantics. And it doesn't add anything of value.
23:42  Diverdude: papna-work, This is my first python function: http://pastebin.com/drj8fkCU, but it seems to give some errors when i try to import it. Do you see any place i can optimize it?
23:42  infobob: http://bpaste.net/show/11071/ (repasted for Diverdude)
23:42  JohnnyL: arkanes_: if programming was as easy as name calling you'd be a genius.
23:42  papna-work: Diverdude: You need to put it in foo.py and do "import foo" then use "foo.findMinBoundBox"
23:43  arkanes_: JohnnyL: functional programming is a real thing. You can't do it in Python.
23:43  arkanes_: JohnnyL: people who can actually write functional programs instead of repeating bullshit they read on blogs know this
23:43  papna-work: Diverdude: Also, omit all those semicolons.
23:43  Brklyn: I definitely forgot that try...except let me see if I can solve that :)
23:43  arkanes_: there's more to functional programming than first class functions and reduce()
23:43  JohnnyL: arkanes_: are you a genius?
23:44  arkanes_: JohnnyL: probably
23:44  papna-work: JohnnyL: To the extent you can use functional concepts in Python--and you can use lots of them--the functional module doesn't help.
23:44  arkanes_: we need to add "NO FUNCTIONAL" to the topic so we don't have to have this conversation all the goddamn time
23:44  Wild_Cat: JohnnyL: very honestly, if you're going to do purely functional programming, don't use Python. It's not made for that.
23:44  Diverdude: papna-work, i did. i put it in BoundBox.py and did import Boundbox, but thatthows an error
23:44  cwillu_at_work: arkanes_, but map!  lambda!!  :p
23:44  cwillu_at_work: there's even parenthesis!
23:45  JohnnyL: papna: so you lead people to believe that functional is 'ugly' and 'trivial'. I seem to not get the point of this.
23:45  papna-work: Diverdude: You spell it BoundBox one place and Boundbox in another.
23:45  KirkMcDonald: arkanes_: This doesn't really come up that often.
23:45  qwebber: anyone know of a recipe to find a free port?
23:45  arkanes_: KirkMcDonald: few times a week
23:45  dash: JohnnyL: Why do you believe otherwise?
23:45  arkanes_: KirkMcDonald: and it's super-irritating
23:45  papna-work: Diverdude: Also, it should be named boundbox.
23:45  papna-work: Diverdude: Also, what directory are you in when you import it.
23:45  dash: arkanes_: I know, let's talk about writing a plugin system with hot code reloading for irc bots.
23:45  NotreDev: qwebber: use ephemeral ports
23:45  arkanes_: dash: I hate you
23:45  tlynn_: you guys are going too far. there are lots of functional idioms that work fine in Python, just not anything that relies on tail call optimisation.
23:46  jfv34: JohnnyL: I think what they mean is that the functional module will only give you the syntax of a functional language, not the actual benefits of using a functional language.
23:46  dash: arkanes_: when you're tired of irc bots, you're tired of #python
23:46  arkanes_: tlynn_: the ones that don't actually have anything to do with being functional, yes
23:46  andrewwatts: does anyone know how to ignore .pyc files with ack
23:46  papna-work: JohnnyL: The functional MODULE which you came in to ask about is 1) Useless, 2) Ugly, 3) Lying, 4) Doesn't enable functional programming in Python, 5) Doesn't allow one to harness Python's FP-inspired features as well as not using it does.
23:46  NotreDev: i had no clue there was a functional model
23:46  dash: tlynn_: 'functional' is an extremely vague word
23:46  papna-work: JohnnyL: That module has nothing useful to do with applying functional programming concepts in Python.
23:46  Diverdude: papna-work, i get this error:
23:46  papna-work: JohnnyL: It's not the same thing as functional programming.
23:47  NotreDev: apparently it doesn't
23:47  papna-work: JohnnyL: At many times it's the opposite.
23:47  Diverdude: papna-work, Traceback (most recent call last):
23:47  Diverdude:   File "<stdin>", line 1, in <module>
23:47  Diverdude:   File "boundbox.py", line 14
23:47  Diverdude:     xmin=1000
23:47  Diverdude:     ^
23:47  arkanes_: tlynn_: TCO doesn't have anything to do with being functional either, really, except that functional language tend to encourage, and functional programmers tend to prefer, recursion and you can't actually implement recursion in real programs in a real way without TCO
23:47  KirkMcDonald: Diverdude: (Don't paste in here.)
23:47  NotreDev: Diverdude: use pastie.org or some other paste service
23:47  exarkun: Anyone know of any docs for PyOpenGL VBO objects?
23:47  prudhvi: Hi, can someone please point me to a good resource on python decorators?
23:47  arkanes_: Diverdude: there's a tutorial in the /topic
23:47  tlynn_: I suspect the argument comes down to whether you feel it's vital to have side-effects be actively disallowed
23:47  qwebber: NotreDev, nothing of quality turns up on google, do you have a link i can read on it
23:47  NotreDev: prudhvi: actually i can
23:47  arkanes_: tlynn_: you don't even have to go that far
23:47  JohnnyL: Python has so much to offer, having a narrow mind make you a genius or a master of what you preach. But that becomes old news fast.
23:47  arkanes_: tlynn_: you cannot write python code of any reasonable complexity without side effects, end of story
23:48  prudhvi: NotreDev: thanks
23:48  dash: JohnnyL: What do you mean?
23:48  NotreDev: http://www.artima.com/weblogs/viewpost.jsp?thread=240808
23:48  NotreDev: prudhvi: that's yours
23:48  arkanes_: tlynn_: because at the very least you need to import a module
23:48  KirkMcDonald: prudhvi: http://docs.python.org/glossary.html#term-decorator
23:48  MostAwesomeDude: dash: Hate to pounce on you like this. Know any way to do length-prefixed strings in Pymeta? My last hack didn't work for multiple strings in a row for some reason.
23:48  dash: MostAwesomeDude: write some methods, woo.
23:48  tlynn_: that's quite a purist attitude if you don't mind my saying
23:49  dash: tlynn_: to my mind any use of the word 'functional' that doesn't start with the idea of referential transparency is pretty misleading
23:49  MostAwesomeDude: dash: Ugh, alright. Thanks.
23:49  NotreDev: qwebber: ?
23:49  arkanes_: tlynn_: the entire point of functional programming, and the reason it's called "functional" and not "iterable" or "function oriented" or whatever is that functions are composable and have referential transparency
23:49  JohnnyL: papna: 1) useless, how? 2) ugly is as ugly does 3) functional code doesn't 'lie' , either do my hips, 4) Python is obviously derives from lisp 5) so what? Features are just syntactical sugar
23:50  dash: MostAwesomeDude: to be fair nobody else does this conveniently in a grammar-based parser :)
23:50  pcarrier_: hi!
23:50  NotreDev: length-prefixed strings?
23:50  dash: tlynn_: anyway, arkanes_ is right - python's module system is based on global mutable state.
23:50  pcarrier_: is there a simple way to distiguish a tuple from a string?
23:50  dash: tlynn_: i have a fix for this but it's rather... different :)
23:50  tlynn_: dash: I'm not arguing that point :-)
23:50  MostAwesomeDude: dash: Indeed. It's not a trivial thing. I'm trying to show that there's an unambiguous parse for this one format, and it's frustrating me. It's very much like a pickle subset. :T
23:50  dash: pcarrier_: they're spelled different
23:50  sqwishy: pcarrier_: ("my string",)
23:50  arkanes_: pcarrier_: why do you care?
23:51  MostAwesomeDude: NotreDev: Pascal strings. The length of the string precedes the string in memory, so it doesn't need a terminator.
23:51  NotreDev: MostAwesomeDude: interesting. never done pascal. but i can understand the concept
23:51  papna-work: JohnnyL: 1) It doesn't provide anything worthwhile, 2) It reuses the names of builtins to mean something different. 3) see 2, 4) ..........., 5) So functional is eager, where Python has lots of lazy stuff for you to use. Lazy is a real FP concept. foldr is just a way to make Python code more confusing.
23:51  cwillu_at_work: pcarrier_, if you're in a place where you're not sure if you're being passed a string, or a tuple, you're in a bad place.
23:51  pcarrier_: arkanes_: i'd like to write a portion of code that goes through a deque, and handles strings and tuples differently
23:51  pcarrier_: dash: :)
23:51  pcarrier_: sqwishy: :))
23:51  NotreDev: doesn't use a null char like c to stop the array?
23:51  pcarrier_: cwillu_at_work: ok, fine by me
23:52  MostAwesomeDude: NotreDev: Neither have I. :3
23:52  pcarrier_: cwillu_at_work: i'll always use a tuple then :)
23:52  cwillu_at_work: pcarrier_, can you arrange for that portion of code to be passed a tuple with a string instead of the "just a string" case?
23:52  arkanes_: pcarrier_: don't mix data types like that
23:52  cwillu_at_work: pcarrier_, that's preferable, yes
23:52  MostAwesomeDude: NotreDev: Right. No delimiter or terminator.
23:52  NotreDev: MostAwesomeDude: best of luck!
23:52  dash: JohnnyL: 'functional code' doesn't need the 'functional' module.
23:52  NotreDev: pascal seems interesting though
23:52  pcarrier_: arkanes_: it would have been a simple approach to migrate a big piece of code
23:52  dash: NotreDev: why so? :)
23:52  papna-work: JohnnyL: (In fact, it's an impediment.)
23:52  NotreDev: dash: my cs buddies always praise it. that is my reasoning :)
23:53  cwillu_at_work: top
23:53  dash: NotreDev: you hang out with people from 1985?
23:53  exarkun: NotreDev: They're probably from the 80s.
23:53  cwillu_at_work: wrong window
23:53  dash: exarkun: or the 90s! delphi was a thing
23:53  NotreDev: haha unfortunately my friends just teach themselves this crap. mid-20s
23:53  exarkun: Object Pascal woo.
23:54  dash: NotreDev: tell them about this hot new thing called 'The Internet'
23:54  bob2: if it is good enough for delphi...
23:54  NotreDev: haha
23:54  JohnnyL: papna: all of your opinions are just that. Perhaps if you show me code examples of why FP in Python isn't any good you could convert me.
23:54  dash: NotreDev: they may have heard of it under its old name, 'The World Wide Web'!
23:54  arkanes_: NotreDev: pascal is a pretty terrible language
23:54  qwebber: NotreDev, how do i use them
23:54  bfrog: is there a way to get the size of a file-like object regardless of whethers its like a StringIO or File object?
23:54  JohnnyL: arkanes_: it's turning complete, isn't it?
23:54  arkanes_: NotreDev: deplhi is tolerable, but it's mainly for the tooling surrounding it and not because the language is awesome
23:54  papna-work: JohnnyL: I'm beginning to think you're intentionally trolling me by applying my statements about the functional module or things that are not the functional module.
23:55  JohnnyL: arkanes_: It's also almost as fast as c.
23:55  bfrog: I was using os.stat before, but that doesn't work when I have my test pass in a StringIO
23:55  NotreDev: qwebber: use what?!
23:55  arkanes_: JohnnyL: I've flipped the bit on you and have no interest in anything you have to say about anything, sorry
23:55  bob2: bfrog: len + read
23:55  habnabit: JohnnyL: what do you think it means to use functional programming in python?
23:55  qwebber: NotreDev ephemeral ports dude
23:55  NotreDev: oooh
23:55  NotreDev: haha sorry
23:55  arkanes_: JohnnyL: I don't have /ignore on this client, but please just pretend that I've used it
23:55  bfrog: bob2: doesn't that require reading the entire contents of the file in to memory?
23:55  exarkun: bfrog: Redefine "file-like" to include a "getsize" method.
23:55  mcantor: Is there a way to get a nicer diff view when calling nose.tools.assert_equals?
23:55  cwillu_at_work: JohnnyL, nobody is saying that you can't do function in python.  Everybody _is_ saying that implementing foldr isn't the way to do it
23:55  JohnnyL: papna: Well, if you can't backup what you say you may as well stop forcing your opinions on everyone and give up.
23:55  cwillu_at_work: functional, rather
23:55  NotreDev: qwebber: i'm banking on there being a library
23:56  bfrog: exarkun: I'm wondering why the default file object doesn't do that using os.stat or whatever
23:56  papna-work: JohnnyL: I have, many times, and rather than going into detail you have *repeatedly* applied my remarks about the functional module to other things.
23:56  JohnnyL: arkanes_: Smart move.
23:56  qwebber: NotreDev, oddly enough i didnt see any mention of one
23:56  Wild_Cat: JohnnyL: You want one reason why FP in Python sucks? No TCO. There. Now can you please stop trolling?
23:56  NotreDev: ports over a certain range are called ephemeral ports because they're not mapped. something like ports of 1024?
23:56  exarkun: bfrog: Because no one implemented it
23:56  NotreDev: let me check
23:56  exarkun: NotreDev: no one calls them that anymore
23:56  bfrog: would monkey patching be uncalled for here then?
23:56  mcantor: Also, __str__ determines what an object looks like when you pass it to str().  But, __dict__ doesn't affect what happens when you call dict().  Am I missing something, or is this just an inconsistent thingie?
23:56  cwillu_at_work: bfrog, could seek(0, 2)
23:56  exarkun: bfrog: yes
23:56  qwebber: exarkun, what are they called now
23:56  exarkun: qwebber: ports
23:57  qwebber: exarkun, i need to find a random unused port
23:57  NotreDev: exarkun: yes, yes they do
23:57  papna-work: mcantor: That's correct. That's how Python works.
23:57  JohnnyL: I have not seen one code example from you concerning your points.
23:57  dash: qwebber: use 0
23:57  qwebber: exarkun, he suggested ephemeral ports
23:57  NotreDev: qwebber: http://stackoverflow.com/questions/948122/get-a-random-high-port-number-that-is-still-available
23:57  qwebber: dash, really now?
23:57  NotreDev: second answer
23:57  qwebber: dash, is that a forwarder?
23:57  exarkun: qwebber: port 0 asks the platform to pick a free port for you.
23:57  qwebber: exarkun, siiiick
23:57  habnabit: JohnnyL: I haven't seen most of this discussion, but I doubt that you know what functional programming *is*.
23:57  mcantor: papna-work: Are you "supposed" to modify __dict__ if you want to have an idiosyncratic dict view, for example, to serialize it into a key/value store?
23:58  bfrog: cwillu_at_work: interesting
23:58  bfrog: that seems to be half-way sane
23:58  cwillu_at_work: bfrog, sorry, I should elaborate
23:58  mcantor: Also, anyone have any ideas about making nose.tools.assert_equals output easier to read?
23:58  NotreDev: exarkun: if i hadn't just left a network engineering position, i'd probably have agreed with you
23:58  papna-work: mcantor: No. Don't modify __dict__ directly. Explcitly define the state of interest.
23:58  habnabit: JohnnyL: So, I ask again, what do you think functional programming would be like in python?
23:58  cwillu_at_work: bfrog, f.seek(0, 2); f.tell() _may_ tell you the end of the file
23:58  bfrog: no that makes sense
23:58  cwillu_at_work: if the file isn't seekable, it won't
23:58  bfrog: I knew what you meant
23:58  cwillu_at_work: k
23:58  exarkun: NotreDev: Nobody calls them ephemeral ports anymore the same way no one uses pascal anymore.
23:58  cwillu_at_work: but yeah, that's what I use in this situation
23:58  cwillu_at_work: (not knowing your situation :p)
23:58  JohnnyL: habnabit: who are you to judge me?
23:58  NotreDev: exarkun: awwwwww :)
23:58 --- ChanServ sets modes [#python +o dash]
23:59 --- dash sets modes [#python +b johnnyl!*@*]
23:59  andjew: if i want to parse a text file with a lot of data matrices and headers in a archaic format, what would be the best way to go about writing a parser for it. I had contemplated regular expressions and using yield() for each "block" (of data or headers), but is pyparser/something else available which would be better?
23:59 <-- dash has kicked JohnnyL from #python (this is an argument clinic.)
23:59  habnabit: dash: That's twice in a row now you've preempted me!
23:59  Wild_Cat: dash: aww, you should have let habnabit ban him!
23:59  NotreDev: doesn't it warm your heart when you see someone make a stupid comment on stackoverflow, and they're downranked into the negatives
23:59  arkanes_: he'd have been gone 10 minutes ago if I wasn't on a webchat client :P
23:59  mcantor: papna-work: Awesome, thanks
23:59  Wild_Cat: that would have been so awesome: /kick "an op, that's who"
23:59  cwillu_at_work: habnabit, ain't involuntary preemptive multitasking grand? :p
23:59 --- dash sets modes [#python -o dash]
--- Log closed Tue Nov 16 00:00:04 2010
