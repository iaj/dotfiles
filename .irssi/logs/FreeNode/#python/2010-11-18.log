--- Log opened Thu Nov 18 08:46:38 2010
--- Log closed Thu Nov 18 08:51:39 2010
--- Log opened Thu Nov 18 08:52:01 2010
08:52 --- Users 746 nicks [0 ops, 0 halfops, 0 voices, 746 normal]
08:52  ari_stress: dash: i have a file whose contain is email addresses, i want to feed it to a linux command later
08:52  ssbr_: _habnabit: eehhhh. any constant flag/option/thing
08:52  _habnabit: I really wish cpython didn't have the small int cache just so that people wouldn't think that 'is' works on ints. :(
08:52  lrh9: 'is' checks for identity. Since in Python an integer object always has the same identity as its constant it technically works. I'll use == and != for integer comparisons though.
08:52  _habnabit: lrh9, False
08:53  dash: lrh9: yeah, that's not what actually happens
08:53 --- Channel #python was synced in 90 seconds
08:53  lrh9: dash: It works.
08:53  shylent: it *might* have the same identity
08:53  ssbr_: lrh9: that isn't a feature of Python, but an implementation detail of CPython. And it's only true for small integers
08:53  _habnabit: lrh9, no, it doesn't.
08:53  lrh9: I didn't know that.
08:53  ssbr_: lrh9: >>> 2**20 is 2**20
08:53  ssbr_: False
08:54  _habnabit: http://codepad.org/zk14q2mf
08:54  lrh9: Ah. Good to know.
08:54  jo-erlend: _habnabit, http://paste.ubuntu.com/533774/
08:54  jorrit: lrh9, just be safe and only use 'is' for comparing with None. That's the only valid usage for 99.99% of the cases users encounter.
08:54  lrh9: Cool.
08:54  Swedish_Chef: heh, i learned the difference between is and == the hard way when my code wouldn't execute conditionals i knew it should have :/
08:55  lrh9: dash: It was written for when someone was asking about recursion, but they must not be here now. And people were talking about factorial.
08:55  _habnabit: jo-erlend, okay, and why is it you 'need' both unescaped?
08:55  dash: yes, it's a mistake for python to have either one.
08:55  dash: lrh9: i guess we're getting lax.
08:55  ssbr_: "is and ==" is an example of how people code things based on what they expect to work via trial and error, instead of what they understand to work from reading the documentation, and when it bites them in the arse. :(
08:55  arvind_khadri: Hi, I am using lxml.html. I want to replace an img from another html to my file. I am not able to find any methods to do this. Could someone please tell me how can I approach this?
08:55  jo-erlend: _habnabit, because ... They're characters we use in my language.. I can't store it like that.
08:56  bob2: ssbr_: that is a hard thing to find documentation for
08:56  bob2: i have no idea where to point people
08:56  _habnabit: jo-erlend, every single HTML parser ever will read entities.
08:56  ssbr_: bob2: the language reference covers all the operators.
08:56  _habnabit: jo-erlend, what the hell does "I can't store it like that" mean?
08:57  dash: jo-erlend: where are you storing things?
08:57  ssbr_: bob2: specifically, http://docs.python.org/reference/expressions.html#is
08:57  zzz: Hi, i' ve a list like t = [<RequestHistory: prepare_request begin>, <RequestHistory: state_current done>,...], and i try to reach the last element like t[-1:], but it says Negative indexing is not supported. Any idea what is wrong, or how should i try to reach the last?
08:57  lrh9: is None is good for if a function needs to do something when a default argument is None.
08:57  bob2: zzz: t[-1]
08:57  dash: zzz: you don't have a list.
08:57  jo-erlend: _habnabit, ok... This is a word, but it might as well have been the name of a customer: "Nøkkelopplysninger". This gets translated to "N&#248;kkelopplysninger". This is fine for HTML and such, but it is not fine for printing to paper, for instance.
08:58  zzz: dash: it' s the same result for t[-1]
08:58  dash: jo-erlend: right. that's why you use an html parser to parse the html
08:58  dash: zzz: right, you don't have a list.
08:58  zzz: dash: how do You mean i don' t have?
08:58  dash: jo-erlend: and then extra the text from the structure the html parser gives you.
08:58  dash: zzz: t is not a list.
08:58  dash: jo-erlend: er, extract
08:59  jo-erlend: dash, what do you mean extract, in this case?
08:59  arvind_khadri: anyone who knows lxml.html well?
08:59  zzz: dash: You must be right, but could You point me out why it' s not a list?
08:59  bob2: ssbr_: hm fair enough
08:59  dash: zzz: you don't get that error when you try that on a list.
08:59  dash: jo-erlend: foo = someHTMLElement.text
08:59  dash: arvind_khadri: everybody
08:59  dash: arvind_khadri: ask your question :)
08:59  zzz: dash: oh, yes, it' s says for type: class 'django.db.models.query.QuerySet.
08:59  jo-erlend: dash, that's what I do and that's why I get those codes instead of their proper values.
09:00  arvind_khadri: dash, i asked :) maybe you missed it. just a second I will ask it again now
09:00  zzz: dash: in this case, can i somehow get the last element, or just when i go through with an iteration?
09:00  arvind_khadri: dash, Hi, I am using lxml.html. I want to replace an img from another html to my file. I am not able to find any methods to do this. Could someone please tell me how can I approach this?
09:00  dash: jo-erlend: show me your code and what it does?
09:00  jo-erlend: dash, http://paste.ubuntu.com/533774/
09:00  dash: arvind_khadri: you want to change the href attribute of an img tag?
09:00  dash: zzz: I don't know how Django's querysets work.
09:01  zzz: dash: ok, thank You for pointing out what' s wrong.
09:01  dash: jo-erlend: okay. so you do _not_ want html output?
09:01  arvind_khadri: dash, no not the href, lets say for now I have the image with myself, I would just change the src. And yes I would like to know how to change the href too :) I may need it later
09:01  dash: jo-erlend: you just want a utf8 version of the name?
09:01  dash: arvind_khadri: sorry, i meant the src attribute
09:02  jo-erlend: dash, yes, I need to unescape the html codes.
09:02  arvind_khadri: dash, thats ok :) so how do I go about it.
09:02  dash: jo-erlend: so don't call tostring
09:02  _habnabit: >>> print lxml.html.fromstring('Br&#248;nn&#248;ysundregistrene - N&#248;kkelopplysninger fra').text
09:02  _habnabit: Brønnøysundregistrene - Nøkkelopplysninger fra
09:02  dash: jo-erlend: just get the text attribute, as habnabit showed.
09:02  dash: arvind_khadri: yourImg.set('src', yourNewSrc)
09:03  jo-erlend: dash, what do I call instead?
09:03  murray_: Is there an easy way to convert a hex formatted ascii string to a binary string?
09:04  murray_: eg 'df4e' -> '\xdf\x4e' ?
09:04  jo-erlend: dash, sorry, I didn't see that last message. :)
09:04  arvind_khadri: dash, oh cool.. :) but how do I create the image object? I am sorry for asking very basic questions.
09:04  dash: murray_: where'd the hex formatted string come from?
09:04  dash: arvind_khadri: use xpath or such to fetch it out of your html
09:04  dash: arvind_khadri: you want to read a document and create a modified version?
09:05  arvind_khadri: dash, ya , precisely :)
09:05  _habnabit: arvind_khadri, you should use xslt for that.
09:05  dash: haha.
09:05  murray_: dash: I wrote it
09:05  dash: arvind_khadri: do you know which img tag you want?
09:06  dash: murray_: why didn't you write the packed version instead? :)
09:06  murray_: so I guess coulid just make it binary string literal
09:06  dash: murray_: there you go.
09:06  murray_: but was wondering if there was a way to do it automatically
09:06  arvind_khadri: dash, ya, the mapping is as of now hard coded, but later would be dynamic.
09:06  murray_: just for future reference ;)
09:06  jo-erlend: dash, oh. Right. The reason I don't do that, is that the text I'm looking for contains elements in the middle of text, like "this is <br/> some <br/> text". When I used the text attribute, I only got "this is "
09:06  arvind_khadri: _habnabit, thanks, will look into it :)
09:07  dash: jo-erlend: ok. so you need to look at .tail on each subelement then.
09:07  jo-erlend: dash, that means the text that follows the <br/> for instance?
09:07  dash: jo-erlend: right. Oh
09:07  dash: or you can do myelement.text_content()
09:08  dash: that gets the text from the current element and all subelements.
09:08  jo-erlend: ah! That sounds wonderful! :)O
09:09  arvind_khadri: dash, so what do I do?
09:09  dash: arvind_khadri: which one do you want?
09:09  arvind_khadri: dash, I dint get you.
09:10  dash: which img tag do you want to change?
09:10  arvind_khadri: dash, src
09:10  dash: no, that's the attribute of the img tag
09:10  dash: which img tag do you want to change?
09:11  jo-erlend: dash, yes! Thank you! :)
09:11  jo-erlend: _habnabit, thank you too! :)
09:11  arvind_khadri: I will put it in a new document.
09:12  dash: arvind_khadri: yes, but which one do you want? :)
09:12  arvind_khadri: dash, lets say i have 1.html , 2 .html . I take the img from 2 and replace it in 1 but then will create 3.html
09:12  dash: arvind_khadri: which img?
09:12  boos: goodmorning from italy :)
09:13  arvind_khadri: dash, sorry to sound like a dufus, but any image would do
09:13  arvind_khadri: I hope that answers your question?
09:13  dash: arvind_khadri: so... the first one? all of them?
09:13  _habnabit: arvind_khadri, are there multiple images on the page?
09:13  dash: my point is that a document can have more than one img tag in it
09:14  dash: and so you have to know which one you want to change
09:14  arvind_khadri: dash, ohh that way :) no. As I told you there is a mapping file, which would have which image to be replaced with what. It /can/ be all the images or maybe few.
09:15  dash: arvind_khadri: oh! so any with a certain src attribute.
09:15  dash: so sure, use xpath
09:15  arvind_khadri: dash, oh ok :) thanks. I will just get back to you after sometime. :)
09:15  arvind_khadri: dash, and sorry for not understanding what you were asking.
09:16  dash: myimg = mydoc.xpath("//img[@src=$url", url="http://l8r.net/bfinn/HIPPO.GIF")
09:16  dash: myimg.src = "http://www.google.com/images/logos/ps_logo2.png"
09:16  dash: arvind_khadri: no problem :)
09:16  dash: communication is hard
09:27  jo-erlend: dash, hmm. That doesn't quite work, actually. The text is like this: "124<br/>23424" and those numbers are different, so when I use .text_content(), it becomes "12423424", which is not ideal. :) But then I can use .tail() on each <br />
09:31  dash: jo-erlend: yep.
09:31  dash: so yeah, if you care about the breaks, you can't just discard them :)
09:32  dhiaeldeen: hello
09:34  anler: hi guys, how can I import a class from a module/package and make it available for another class imported from another module?
09:34  anler: By example, I have 3 files: main.py, a.py and b.py
09:34  anler: In main.py I do:
09:34  anler: from a import A
09:34  anler: from b import B
09:34  anler: In a.py I just have an A class
09:34  anler: In b.py I just have a B class but I want that B inherits from A
09:35  jorrit: anler, so what's the problem then? Just import A in b.py
09:35  lrh9: ^
09:35  MostAwesomeDude: Stupid question of the night: Is there an automatic semaphore based on reference count which is easier to use than an int?
09:36  dash: MostAwesomeDude: oh man
09:36  dash: MostAwesomeDude: you're doin' something freaky aren't you
09:36  anler: jorrit: I just want to know if there is a way that B uses A without doing an explicit import at it and leave the work of import to the main script
09:36  MostAwesomeDude: Long version: I have a bunch of objects managed by a factory which may be pinned into memory by protocols.
09:36  jorrit: anler, why would you want that? Just add the import.
09:36  dash: anler: you import stuff in the module where you need it.
09:37  Lewoco: Is there an easy way to build a DOM of an HTML page?
09:37  dash: MostAwesomeDude: alrighty
09:37  MostAwesomeDude: I want to be able to automatically evict objects from memory.
09:37  bob2: Lewoco: lxml.html
09:37  dash: Lewoco: lxml.html.fromstring()
09:37  bob2: Lewoco: it's pretty cae
09:37  bob2: er ace
09:37  dash: MostAwesomeDude: when no protocols use it?
09:37  MostAwesomeDude: dash: Bingo.
09:37  MostAwesomeDude: But obviously protocols can pin it, and it can have multiple pins.
09:37  dash: what do you mean by "pin", though?
09:37  MostAwesomeDude: An int on the object would work.
09:38  dash: i mean
09:38  dash: python already does refcounting/GC
09:38  dash: what more do you need?
09:38  MostAwesomeDude: I'm talking in the same way as a virtual memory manager. In order to initialize an object, I have to either generate it with lots of maths, or read it in from disk.
09:38  MostAwesomeDude: So it's very beneficial to keep them in memory. But there's a lot of them, so I need to evict ones I'm not using.
09:39  dash: MostAwesomeDude: ok
09:39  verte: won't a weakref do that for you?
09:39  dash: yeah, i was either going to say "weakref" or "nothing"
09:39  arvind_khadri: dash, thanks :) how exactly can I use attrib? attrib['href'] gives an error
09:39  anler: dash, jorrit:  Just know because I have a file called models.py and I want that behave like a let's say a model file in rails
09:39  ssbr_: how annoying
09:39  bob2: that should be on a tshirt
09:39  ssbr_: Python won't let me do " "*x for x larger than sys.maxint :(
09:39  jorrit: anler, so?
09:40  bob2: anler: just import stuff when you need it
09:40  MostAwesomeDude: Yes, but I'm taking the next step of not actually having the protocols keep refs to the objects. It's part of a larger refactoring to do as little work as possible.
09:40  dash: arvind_khadri: oh? what's the error
09:40  bob2: being fancy about it just makes the code harder to read
09:40  dash: MostAwesomeDude: erm
09:40  lrh9: Python is Python, not rails.
09:40  dash: MostAwesomeDude: sounds like a step backwards then :)
09:40  dash: anler: no idea what rails does
09:40  verte: ssbr_: *x = itertools.count()
09:40  ssbr_: MostAwesomeDude: why do you want to reimplement virtual memory like this?
09:40  dash: anler: write python code instead :)
09:40  MostAwesomeDude: dash: Kind of? This is for a Minecraft server, and MC's internal data structures make this a *very* big win.
09:40  arvind_khadri: dash, File "lxml.etree.pyx", line 2181, in lxml.etree._Attrib.__getitem__ (src/lxml/lxml.etree.c:47529)
09:41  ssbr_: MostAwesomeDude: are you aware of how badly you can end up stepping on the kernel's toes by doing this?
09:41  dash: MostAwesomeDude: i mean, what's the downside to having protocol objects keep refs
09:41  dash: ssbr_: psht, not relevant
09:41  dash: arvind_khadri: pastebin the whole traceback
09:41  ssbr_: MostAwesomeDude: I mean, say you decide to evict something from memory, except the kernel al;ready paged it out to disk. So then you load it from disk, so that you can remove it from memory and put it back to disk
09:41  ssbr_: it's crazy!
09:41  anler: jorrit, bob2: ok, that's the python way so I should follow it, I'm making the switch from ruby so still have some habits to brake
09:41  Wild_Cat: MostAwesomeDude: what kind of Minecraft hacking are you doing?
09:41  ssbr_: dash: why isn't it relevant?
09:42  dash: who keeps swap files anymore
09:42  jorrit: anler, well if B needs A then b.py will have to import A from a.py
09:42  bob2: anler: it just means you can look at a file and at a glance see wtf is going on
09:42  Wild_Cat: (related: I really should try Minecraft at some point, seeing how several of my friends now have lost their social lives to it)
09:42  ssbr_: MostAwesomeDude: the cool thing about kernels is that they already do memory management like this for yoiu.
09:42  dash: Wild_Cat: he's writing a dang minecraft server
09:42  ssbr_: dash: so are you being serious or not?
09:42  bob2: anler: which is a highly valued property in python land :)
09:42  arvind_khadri: dash, thats the only thing I get. On what object should attrib be used?
09:42  dash: Wild_Cat: that sounds like a reason to _not_ try it
09:42  MostAwesomeDude: ssbr_: Yes, except that we are talking about more data than can fit in most people's swap files.
09:42  dash: Wild_Cat: it's one reason i haven't :)
09:42  Wild_Cat: dash: a Minecraft server? Doesn't the official one already work?
09:42  ssbr_: I've just spent the last 3 days testing out how algorithms work with or against the kernel's VM implementation, so...
09:42  dash: arvind_khadri: nah, that's not all you get.,
09:42  Wild_Cat: dash: yeah, good point.
09:42  Wild_Cat: :p
09:42  dash: Wild_Cat: not _really_
09:42  ssbr_: MostAwesomeDude: how much data?
09:42  anler: bob2, dash, jorrit: ok guys, thanks a lot ;)
09:42  dash: ssbr_: i'm being serious
09:43  arvind_khadri: dash, am doing it in the interpreter, I will pastebin.
09:43  MostAwesomeDude: Wild_Cat: The official server takes up around 1.5GiB of RAM and spawns dozens of threads on startup. I'm at around 300MiB and one thread for four players. :3
09:43  ssbr_: dash: so then why would you say "who keeps swap files anymore"? Swap files can't even be disabled on the OS most people that play minecraft use.
09:43  verte: a better way to lose your social life is to hack ten hours a day
09:43  dash: ssbr_: i leave swap turned on on my gaming machine and my laptop, but not on a server or my development machine
09:43  Wild_Cat: MostAwesomeDude: nifty. But does it work? :p
09:43  MostAwesomeDude: ssbr_: Multiple GiB.
09:43  dash: ssbr_: he's not playing minecraft
09:43  MostAwesomeDude: Wild_Cat: Largely. Still hammering out the smaller details, but the big parts work.
09:43  ssbr_: dash: keeping swap enabled on a server is not a terrible choice.
09:44  dash: verte: yeah tell me about it
09:44  MostAwesomeDude: It's on my github, called "beta".
09:44  dash: ssbr_: It is
09:44  Wild_Cat: MostAwesomeDude: also, I'm surprised that the official one does tons of threads. Java has a pretty good implementation of async networking.
09:44  ssbr_: dash: why's that?
09:44  MostAwesomeDude: Wild_Cat: Yes, and he doesn't use it.
09:44  verte: Wild_Cat: howcome you don't join #python-offtopic ?
09:44  ivan`: write it in Java and use Terracotta
09:44  MostAwesomeDude: Notch is not a good programmer.
09:44  bob2: MostAwesomeDude: he's rich tho
09:44  dash: ssbr_: because it's a massive performance hit to wait on the disk like that
09:44  dash: ssbr_: buy some more ram or another box
09:44  MostAwesomeDude: bob2: I know! I'm so jealous.
09:44  arvind_khadri: dash, http://bpaste.net/show/11248/
09:44  ssbr_: dash: if you have enough ram, nothing will be paged to disk, right?
09:45  ssbr_: also it is possible to do the disk thing efficiently.
09:45  MostAwesomeDude: dash, ssbr_ : I suppose the root problem, and maybe one I shouldn't be trying to work around (yet), is that the underlying library I'm using for the file format doesn't do mmap()s yet.
09:45  dash: ssbr_: yes, and if you don't turn on swap, nothing will be paged to disk either
09:45  ssbr_: (I say nothing will be paged to disk, but we're assuming not-windows here. you can't control windows)
09:45  dash: ssbr_: well yeah, forget about windows
09:45  ssbr_: dash: so by disabling swap, you get a very performant server that crashes whenever you get unexpected memory load or whatever, instead of one that just slows down
09:45  ssbr_: how is that better?
09:46  dash: MostAwesomeDude: why's that matter? i'm still curious why protocol objects don't refer to these directly
09:46  dash: ssbr_: sure
09:46  MostAwesomeDude: Oh, I also remembered why I have to control eviction: I need to sync contents to disk and trusting __del__ to do it is a bad idea.
09:46  dash: ssbr_: that's pretty much what I want
09:46  verte: oh
09:46  ssbr_: dash: you *want* your production server to crash?
09:46  dash: MostAwesomeDude: Oh
09:46  dash: MostAwesomeDude: _definitely_ weakrefs and callbacks
09:46  MostAwesomeDude: dash: You're right, and I just saw how to do it.
09:46  verte: orthogonal persistence!
09:46  dash: verte: die in a fire!
09:46  bob2: haha
09:47  dash: ssbr_: sure. crashing is better than becoming slow as molasses
09:47  verte: where is glyph when you need him
09:47  arvind_khadri: dash, I gave you the paste
09:47  dash: verte: downing a Jack'n'Zac probably
09:47  ssbr_: dash: paging isn't "slow as molasses", and no it isn't
09:47  dash: ssbr_: Nah, it is.
09:47  ssbr_: "better late than never"
09:47  dash: better never than late
09:47  dash: when it can slow down other customers
09:47  ssbr_: dash: it's a few hundred times as slow at worst IIRC
09:47  ivan`: someone port Terracotta to Python please
09:47  dash: ssbr_: exactly
09:47  dash: ssbr_: anyway, things that crash can be restarted
09:47  ssbr_: dash: and let's not forget that only a fraction of your things will get a major fault
09:48  ssbr_: dash: things that are slow as molasses can be restarted. That's a non-argument.
09:48  bob2: paging is easily a thousand times slower than l3 cache
09:48  dash: ssbr_: crashing is easier to detect
09:48  bob2: if not 10 or 100 000
09:48  loxs: what would be a better way to get a pseudorandom element from a dictionary?   I mean, better than random.choice(mydict.keys())
09:48  ssbr_: bob2: get better disks
09:48  dash: arvind_khadri: so your root element doesn't have an href attribute
09:48  ssbr_: (or SSDs!)
09:48  dash: ssbr_: why bother?
09:49  dash: ssbr_: just turn off swap
09:49  bob2: loxs: next(d.iterkeys())
09:49  dash: arvind_khadri: looks normal to me
09:49  ssbr_: dash: "easier to detect"? So make  a detection system. Also a non-argument.
09:49  dash: ssbr_: why bother?
09:49  bob2: ssbr_: I wish :|
09:49  ssbr_: dash: Because if you bother, your server will be more reliable and able to handle more <whatever uses memory>
09:49  dash: ssbr_: "reliable"?
09:49  arvind_khadri: dash, it has href but points to itself
09:49  ssbr_: dash: having a server that crashes every time you get 100 players is idiotic
09:49  dash: arvind_khadri: no it doesn't
09:50  dash: ssbr_: well if that's what it does, you stop allowing connections after 99 :)
09:50  arvind_khadri: dash, oh freak I get it now :)
09:50  lrh9: Does the dictionary popitem method return an arbitrary key value pair?
09:50  ssbr_: dash: why do that, when it will be slower, but still playable, if you enable swap, and allow up to 120 players?
09:50  bob2: lrh9: yes
09:51  dash: ssbr_: because you're not thinking about scalability at all
09:51  MostAwesomeDude: Thanks for the discussion. I'm gonna go glare at this a bit longer and then break out the weakref docs.
09:51  ssbr_: dash: swap's speed degradations are gradual, you get more faults as you get more memory usage. So you get as many players as are willing to deal with the slowness
09:51  MostAwesomeDude: (Does the weakref doc page still come with the bottle of vodka attached?)
09:51  dash: MostAwesomeDude: twisted.python.finalize is a thing, IIRC
09:51  lrh9: Would that satisfy your problem constraints, loxs?
09:51  ssbr_: dash: no, I'm not. what does "scalability" have to do with this? and what do you mean by "scalability"?
09:51  dash: ssbr_: i mean going from 100 to 120 players is one thing
09:51  dash: ssbr_: going from 100 to 1000 is another
09:51  MostAwesomeDude: dash: Oh my. Oh no.
09:51  dash: ssbr_: if you only care about 120 players, sure, turn on swap, that's fine
09:51  ssbr_: dash: Sure it is. Enabling swap just lets you get a little bit more, and without crashing.
09:52  dash: ssbr_: but that's a rather unusual thing
09:52  MostAwesomeDude: Oh yes. I think I may laugh evilly now.
09:52  ssbr_: dash: when your server starts getting slow, you tell your players "hey, sorry about the speed issues, we're gonna get a hardware upgrade next thursday"
09:52  lrh9: Why not artificially limit the number of connections?
09:52  ssbr_: dash: and then it becomes 1000 versus 1200
09:52  dash: ssbr_: that only works a few times
09:52  ssbr_: dash: and then it becomes 10000 versus 12000, etc.
09:52  dash: lrh9: obviously you would.
09:52  dash: ssbr_: Hahaha.
09:52  ssbr_: dash: it works just as often as it would without swap.
09:52  arvind_khadri: dash, even when I do root[1].attrib['']
09:53  ssbr_: (maybe it's 10000 versus 10020. I'm not sure how the scaling works depending on how you upgrade your hardware)
09:53  dash: ssbr_: well, when you've written internet-facing servers with paying customers, we'll talk again. :)
09:53  arvind_khadri: dash, even when I do root[1].attrib['href'] , it gives me the same thing
09:53  ssbr_: dash: I just want a reasonable argument
09:53  ssbr_: dash: I see no reason to decide, "hey, let's just crash when we get too much stuff, and boot every single user off the server and make them mad"
09:54  ssbr_: and you haven't given a good one other than "ha ha ha you've never implemented a production system so you don't know what you're talking about", which is basically BS.
09:54  dash: ssbr_: for an HTTP-based service it's a totally valid choice :)
09:54  ssbr_: dash: Sure. And he isn't making an HTTP-based service, he's making a game server. So go again.
09:54  dash: ssbr_: for a persistent-connection system you'd want to layer it differently
09:54  ssbr_: I agree, for HTTP you can afford to have it just die. People would appreciate a fast failure rather than having to wait 10s only to get a timeout.
09:54  dhiaeldeen: how to make a 3D dictionary
09:55  dhiaeldeen: like A,B,C
09:55  dash: ssbr_: i'd look at hwat the secondlife guys have done
09:55  dhiaeldeen: ?
09:55  ssbr_: Game servers are different. People don't like being booted off because a player decided to explore a new region in the game.
09:55  jorrit: dhiaeldeen, what is a 3D dictionary?
09:55  jorrit: dhiaeldeen, you mean with multiple keys?
09:55  jorrit: dhiaeldeen, in that case just use a tuple as the key.,
09:55  ssbr_: I could see an argument for disabling swap because you want to implement your own virtual memory system.
09:55  ssbr_: But otherwise... *shrug*
09:56  dash: MostAwesomeDude: axiom._fincache may be more applicable, i am not sure
09:56  dash: MostAwesomeDude: both are based on weakref.ref
09:56  arvind_khadri: dash, ?
09:56  dash: arvind_khadri: Hi
09:56  dhiaeldeen: jorrit: thanks.
09:56  bob2: wow, t.p.f is nuts
09:57  arvind_khadri: dash, :) Hi even when I do root[1].attrib['href'] , it gives me the same thing.
09:57  dash: arvind_khadri: well, that doesn't have an href attribute either
09:57  dash: arvind_khadri: what's the problem?
09:57  dash: bob2: yeah i keep remembering it when i should remember _fincache instead
09:57  republican_devil: how do I move a list or other data strucure from one python on box 1 to python 2 on box 2? without hitting disk?
09:58  arvind_khadri: dash, attrib[] is for an element object right?
09:58  republican_devil: like a all in ram database kinda thing
09:58  dash: republican_devil: serialize it and send it over a socket.
09:58  jorrit: republican_devil, with networking. Look at twisted.
09:58  dash: yeah that.
09:58  republican_devil: so what is serializing?
09:58  dash: arvind_khadri: elements have attrib dicts, yes
09:58  ssbr_: republican_devil: different computers don't share RAM or disk.
09:58  dash: republican_devil: "make a string"
09:58  republican_devil: hmm
09:58  bob2: haha
09:58  ssbr_: republican_devil: serializing is turning an object into a string
09:58  dash: republican_devil: look at json or protobuf.
09:58  republican_devil: so with twisted I could build a N node database?
09:59  republican_devil: and query N nodes?
09:59  dash: republican_devil: anything is possible.
09:59  republican_devil: all in ram?
09:59  arvind_khadri: dash, In my html page I can see the hrefs but not when I do attrib of href :) so what am I doing wrong?
09:59  dash: republican_devil: why do you want this?
09:59  dash: arvind_khadri: pastebin your html?
09:59  republican_devil: to domiante the web get rich etc
09:59  lrh9: Just use a distributed filesystem and forget the RAM in my opinion.
09:59  ivan`: republican_devil: maybe you want Riak or one of the other dozen nosql databases?
09:59  republican_devil: but ocne  hit disk yer farked
09:59  republican_devil: redis?
09:59  republican_devil: riak hmm never hearda dat one
10:00  arvind_khadri: dash, http://bpaste.net/show/11249/
10:00  ivan`: 1) write database 2) ??? 3) get rich
10:00  lrh9: Is there a reason for the no disk constraint or are you just being difficult and stubborn. :p
10:00  republican_devil: I want super speed
10:00  republican_devil: like ww.prevayler.org
10:00  republican_devil: but without all that java
10:00  dash: republican_devil: super speed doing what?
10:00  ivan`: republican_devil: your OS caches pages
10:01  dash: arvind_khadri: what does 'print root[1]' say?
10:01  ssbr_: dash: best as I can tell, SecondLife wants you to enable swap, but minimize it as best as possible.
10:01  republican_devil: doing queries n updates n all that
10:01  ivan`: republican_devil: you can have things on disk but the reads are very fast anyway
10:01  Taos: what kinda skill level is needed for the bug weekend
10:01  dash: ssbr_: pft, clients
10:01  republican_devil: no no no disk is slow
10:01  bob2: ha ha ha
10:01  dash: republican_devil: what are you storing
10:01  arvind_khadri: dash, <Element body at so and so>
10:01  bob2: republican_devil: measure then cut
10:01  lrh9: republican_devil: What kind of network are you talking about? LAN or web?
10:01  republican_devil: lan
10:01  dash: arvind_khadri: right! does 'body' have an href attribute?
10:01  lrh9: If it's web your choke points are going to be the web connections, not the disk.
10:02  lrh9: Ah.
10:02  republican_devil: hm
10:02  dash: bob2: 'measure once, kill everybody'?
10:02  dash: maybe that's not how it goes.
10:02  republican_devil: so i am solving the wrong problem?
10:02  republican_devil: sonova
10:02  dash: republican_devil: i don't know! what's the problem
10:02  ivan`: yes, solve a problem that people will pay you money for and live with the 1ms queries
10:02  republican_devil: problem is I am poor
10:02  dash: republican_devil: rob a bank
10:02  arvind_khadri: dash, no it doesnt :) I am understanding that. So how do I go down and check.
10:02  ssbr_: dash: looks like it does it for the server too. There's mention about how scripts people write might use a lot of memory and get swapped to disk. And this is why they restrict script memory usage.
10:02  republican_devil: and only know bash and a wafer of python perl lisp tcl scheme
10:02  republican_devil: for programming skilz
10:03  republican_devil: I should become a poor mans will ferrel
10:03  republican_devil: he makes what 30m a year?
10:03  dash: arvind_khadri: use xpath! yay.
10:03  bob2: dash: words to live by
10:03  ssbr_: dash: Their goal is to have 95% of secondlife simulators run without swapping at any given time.
10:03  lrh9: republican_devil: If it was something I had a real reason for doing I'd simply write some code to treat memory as a physical disk and then use a distributed filesystem implementation with my virtual RAMDISK as the disk.
10:03  ssbr_: So, yeah, they enable swap.
10:03  arvind_khadri: dash, :) :O ok
10:03  bob2: republican_devil: getting a job is a lot easier than trying to turn a vague idea into a 30m startup
10:03  bob2: even if you get paul graham to fund it and dhh to write it
10:04  loxs: bob2, lrh9, by "better" I mean "more efficient". I'll have to try it to see
10:04  lrh9: loxs: Good luck.
10:04  bob2: loxs: either option we mentioned is probably faster, since yours builds a list of things and pikcs from
10:06  dash: republican_devil: or you can just do what CCP Games did for EVE Online
10:06  lrh9: What's that?
10:06  dash: install one of these: http://www.ramsan.com/products/31
10:08  loxs: lrh9, bob2 but how "random" are your suggestions. So far they only return the same element from the same dictionary
10:08  bob2: loxs: yes
10:08  bob2: loxs: but arbitrary
10:08  bob2: what are you doing?
10:09  lrh9: loxs could want uniform distribution. In that case it might not be the right solution.
10:09  bob2: it is true
10:09  jorrit: loxs, it is not really random in the sense that it will be different all the time.
10:09  loxs: bob2, I have a pseudo AI bot, that has a dictionary of functions, and sometimes it needs to do something "at random"
10:09  jorrit: loxs, it is just that you cannot depend on what you get.
10:09  jorrit: loxs, if you really need a random item you're going to have to use the random module.
10:09  bob2: loxs: you probably want random.choice(d.values()) then
10:10  lrh9: That.
10:10  bob2: wonder how many iops good ssds do nowadays
10:10  bob2: i really hate companies who don't list prices on their website
10:10  bob2: "hey email us and we'll estimate how much you'll pay"
10:10  loxs: well, keys, or values, it's about the same principle, My question was if there is a better way, without building another list
10:10  ivan`: http://www.stec-inc.com/ssd/technology/#tab2
10:11  jorrit: loxs, bob2 already told you. random.choice
10:11  lrh9: Let me think.
10:11  lrh9: Doesn't the values return a view object? That's not a list, but a living view of the values in the dictionary. It should be smaller than a list.
10:12  bob2: only in py3k
10:12  bob2: in python 2 it returns a list of keys
10:12  lrh9: Ah.
10:12  ivan`: python 2.7 has viewvalues
10:12  ivan`: but: TypeError: 'dict_values' object does not support indexing
10:13  lrh9: Oh.
10:13  bob2: surely not for .keys()
10:13  __name__: meh
10:13  bob2: oh .viewkeys right
10:13  __name__: Windows creeps me out.
10:13  ivan`: TypeError: 'dict_keys' object does not support indexing
10:13  lrh9: Why do you need to index the functions?
10:13  lrh9: I mean to say, loxs, why do you need to map the functions to keys?
10:14  ivan`: can't you len(d), pick a number, then iterate until you get that key?
10:14  loxs: lrh9, because sometimes I need to access them by name, and sometimes at random.
10:14  bob2: i find it a bit surprising that randomchoice(d.values())() is a serious burden
10:14  republican_devil: I just quit a job
10:14  ivan`: you can also maintain a list along with the dictionary
10:14  republican_devil: :)
10:14  bob2: you profiled it?
10:14  bob2: republican_devil: get a new one
10:15  republican_devil: probly will but rahter grow my company
10:15  bob2: grow your company while oyu're not poor
10:15  loxs: bob2, well, actually so far it isn't. My question is just academical :)
10:15  republican_devil: sales are tuff
10:17  republican_devil: even solis stae storage si not as fast as ram right?
10:17  ivan`: of course
10:18  avu: not even close
10:18  lrh9: republican_devil: Processor cache is faster than RAM.
10:18  bob2: registers >> * !
10:18  ivan`: microcode > registers, no?
10:19  bob2: you can't store stuff there man
10:19  ivan`: you wanna bet
10:19  lrh9: Yes.
10:19  bob2: actually i guess modern cpus have some writable microcode
10:20  lrh9: loxs: I haven't forgotten your question.
10:20  bob2: i don't know if it's like eeprom-speed or superregister speed tho
10:20  arvind_khadri: dash, xpath returns a list.
10:20  bob2: for loop
10:21  bob2: set .img on each of them
10:21  loxs: lrh9, nevermind. So far it works fine with random.choice(d.values()) As I said, Im asking just because of curiosity
10:21  lrh9: loxs: You could create a custom dictionary class. When you add a key, function pair, you could add a index, key pair to another dictionary. When you need a random function just get a random int in the range of the length of your index, key dictionary and use that to get the key for the function.
10:22  bob2: i don't think it is reasonable to grab a 'random' key/value from a dict without getting all the keys/values
10:22  bob2: from python at least
10:22  ivan`: you don't have to get all of them, just iterate over half on average
10:22  dhiaeldeen: Q: [Python & Bluetooth] , can i make python send stuff through bluetooth?
10:23  bob2: dhiaeldeen: sure
10:23  bob2: ivan`: is len(d) O(1) or O(n)?
10:23  ivan`: O(1)
10:23  Wild_Cat: bob2: O(1)
10:23  bob2: oh, cool
10:23  bob2: random.choice(range(len(d))) !1111
10:23  lrh9: Possible. I don't have any real knowedge about how to do it though.
10:23  Wild_Cat: bob2: random.randint(len(d)), in that case
10:24  bob2: Wild_Cat: oh come on
10:24  bob2: is it possible to non-destrucively get the 'nth item' of a dict from python?
10:24  Wild_Cat: bob2: dicts are unordered -- as such, the idea of an nth item is meaningless.
10:25  ivan`: I'm sure you can scan the memory somehow, anything is possible with ctypes
10:26  bob2: n = random.randint(len(d)) ;  itertools.islice(d.iterkeys(), n, n)
10:26  Wild_Cat: bob2: if you want an item, any item, from a dict, the easiest way is d.itervalues().next()
10:26  bob2: O(n/2) !
10:26  bob2: Wild_Cat: that's what I suggested earlier, but loxs wanted it to vary without altering the dict
10:27  Wild_Cat: bob2: it doesn't alter the dict.
10:27  Wild_Cat: oh, he wanted it to vary, sorry.
10:27  bob2: Wild_Cat: right, but it doesn't vary between calls
10:27  bob2: yeah
10:28  Wild_Cat: bob2: in that case, random.choice(d) will give you a random key. d[k] will then give you the value to go with it.
10:28  ivan`: http://stutzbachenterprises.com/blist/sorteddict.html#blist.sorteddict
10:28  Wild_Cat: wait, that doesn't work.
10:30  lrh9: No perfect way then.
10:30  soren: I'm building my docs using "python setup.py build_sphinx". Most is stuff that needs to be turned into html, but I also need to build some man pages. On the cmdline, I can just run sphinx-build twice, once with -b html, and once with -b man.. Can I somehow achieve the same with setup.py build_sphinx?
10:30  republican_devil: www.prevayler.org
10:30  republican_devil: it is my god!
10:30  pk4r: How can I get an absolute path to the package directory in site-packages ?
10:32  TheSheep: os.path.abspath(__file__)
10:33  bob2: Wild_Cat: that's building a full list right?
10:33  bob2: i think my gross islice thing might be the only non-full-list method so far
10:34 --- anix_ is now known as anix
10:34  ivan`: or use sorteddict and write a few lines of code to make it return a view in python 2
10:34  lrh9: TheSheep: That doesn't always work.
10:34  bob2: when does it not work?
10:35  republican_devil: why does python have this 2 and 3 thing?
10:35  republican_devil: now Im totally tortured
10:35  lrh9: A trivial example, but in the interactive interpreter for one.
10:35  republican_devil: old stuff with libs ro new stuff without
10:35  ivan`: oh, blist.ItemsView(blist.sorteddict())[n]
10:35  republican_devil: aggggggg
10:36  ivan`: republican_devil: use python 2
10:36  bob2: republican_devil: go with 2 then
10:36  lrh9: In 3.x sys.prefix returns the top level directory of Python. Using os.path.join(sys.prefix, 'Lib', 'site-packages') gives the site-packages path.
10:37  bob2: that's not portable
10:37  lrh9: Why?
10:37  bob2: sys.prefix on lunix is /usr
10:37  bob2: /usr/Lib does not exist
10:42  lrh9: Would os.path.split(sys.executable)[0] yield the correct top level directory on linux?
10:42  republican_devil: skyline movie sakked
10:42  marcchr1: also, packages can reside in ~/.local/lib/python$VERSION/
10:42  ivan`: import something in site-packages and climb up until you reach 'site-packages'
10:42  lrh9: Oh. Ew.
10:42  ivan`: oh yeah never mind
10:42  ivan`: there is no site-packages
10:42  bob2: or: let distutils worry about it
10:42  lrh9: Oh. It would be in sys.path though right? Trouble is finding it.
10:42  marcchr1: upps, that should be ~/.local/lib/python$VERSION/site-packages/
10:42  bob2: lrh9: -> /usr/bin
10:42  murray_: is there any easy way to convert hex formatted string to binary string eg: '0xdf4e' -> '\xdf\x4e' ?
10:42  murray_: or at least a better way than looping though every 2 elements in the string
10:42  lrh9: I have the key/index problem with one of my programs. It needs to be indexable, but at the same time I want key lookups.
10:42  murray_: and running chr( int(x,16) ) for each of them
10:42  murray_: ( as I am about to do..)
10:42  bob2: lrh9: matching list i geuss
10:43  marcchr1: murray_: remove the '0x' then .decode('hex')
10:43  republican_devil: http://www.getbig.com/boards/index.php?topic=356148.0
10:43  republican_devil: epic comic
10:43  ivan`: or int('0xdf4e', 16)
10:43  lrh9: bob2: matching list?
10:43  bob2: lrh9: for the indexing
10:43  bob2: since even orderdicts aren't indexable afaik
10:43  marcchr1: 'df4e'.decode('hex') => '\xdfN'
10:43  ivan`: murray_: I think your chr( is pretty good
10:43  lrh9: Yeah. I can cache the values to a list, but I hate the memory usage.
10:43  lrh9: Not much else I could do though.
10:43  bob2: it's only double for the dict
10:44  bob2: which is what 8 bytes per item?
10:44  murray_: marcchr1: fantastic, just what I was looking for, thanks
10:44  ivan`: oh, yeah, what marcchr1 said
10:44  lrh9: Meh.
10:44 * ivan` thought it did something else
10:44  lrh9: Someone needs to make a super object that's indexable, iterable, supports key lookups, supports sorting and heapify. What else would I like?
10:45  bob2: call it an array
10:45  bob2: and put it in php
10:45  lrh9: brb
10:47  ivan`: I think sorteddict does those
10:47  ivan`: not that I have used it
10:49  lrh9: I wish it did, but the caveat about sorteddict is that it can't be sorted. It only keeps key, value pairs in the order they were added.
10:49  lrh9: Oh wait. That's ordereddict.
10:51  lrh9: There is no sorted dict.
10:51  lrh9: :(
10:52  dhiaeldeen: bob2: thanks
10:52  dhiaeldeen: now
10:52  dhiaeldeen: i can't seem to understand self in classes
10:52  dhiaeldeen: following a youtube tutorial
10:52  dhiaeldeen: googling it ...
10:52  lrh9: self refers to that object.
10:53  talented: instance
10:53  lrh9: ^
10:56  dhiaeldeen: lrh9: like to allow me to make multiple objects from the same class?
10:56  lrh9: No.
10:56  dhiaeldeen: lrh9: if you have an explanation, let me know it
10:56  dhiaeldeen: :)
10:57  lrh9: I have trouble explaining things.
10:57  dhiaeldeen: ok, let's google more then
10:57  lrh9: Let me link to a code example that might help illustrate things.
10:57  lrh9: http://bpaste.net/show/11250/
10:57  dhiaeldeen: that is better than explanation
10:58  lrh9: In that code I've made a Ball class that represents a colored ball.
10:58  dhiaeldeen: def __init__(self, color): , why not use >>> def __init__( color):
10:59  lrh9: Because color is an attribute of each instance of a ball.
10:59  talented: dhiaeldeen, that's the difference with python, is that they explicitly have it, other languages have it, but they don't make it explicit
11:00  bob2: precisely!
11:00  dhiaeldeen: talented: is that a good thing from python or not?
11:00  bob2: it's a thing
11:00  bob2: python people generally think it is a good idea
11:01  dhiaeldeen: what is it's advantges to make it explict?
11:01  lrh9: Explicit is better than implicit is a big thing in Python.
11:01  dhiaeldeen: lrh9: this isn't clear!
11:01  lrh9: Explicit is obvious. When you do something with self it makes it clear you are doing it with that instance.
11:01  bob2: dhiaeldeen: so you can see exactly what is going on
11:01  bob2: dhiaeldeen: an instance attribute is just an attribut you explicitly set on self
11:01  talented: well, I came from C++ and thought it was silly as it added extra typing and it's possible to do away with it... but I'm trying to understand the pythonic way rather than make it look & feel the same
11:02  dhiaeldeen: bob2: so, if i made another class, do i need to use self2 or self is ok?
11:02  lrh9: self
11:02  talented: dhiaeldeen, classes are in different scopes
11:02  bob2: dhiaeldeen: self is the instance the method is being called on
11:02  dhiaeldeen: can i call it anything other than self, or self is a reserved word for this stuff?
11:03  bob2: it sounds trivial now but in a little while you'll have a eureka moment
11:03  dhiaeldeen: talented: different scopes, I see
11:03  lrh9: You can, but it is very bad practice to do otherwise.
11:03  bob2: dhiaeldeen: always self, but the language does not enforce it
11:03  dhiaeldeen: ok, self
11:03  dhiaeldeen: hehe
11:03  lrh9: And it's always the first argument.
11:04  bob2: for a surprisingly clever reason
11:04  dhiaeldeen: bob2: """""so you can see exactly what is going on"""""" >> what do you mean?
11:04  bob2: dhiaeldeen: it's immediately obvious when you're setting an instance method because you're setting it on self
11:04  bob2: whereas in c++/jav it looks like a local assignment
11:04  dhiaeldeen: what if i made two selfs then >>>>>. def __init__(self,self2,color):
11:05  dhiaeldeen: oh
11:05  bob2: that's nonsense
11:05  dhiaeldeen: idiot question
11:05  dhiaeldeen: hehe
11:05  dhiaeldeen: ok
11:05  dhiaeldeen:  back to tutorial
11:05  bob2: __init__ gets passed an instance
11:05  bob2: as do all instance methods
11:05  bob2: (by definition!)
11:05  dhiaeldeen: what is that __init__ too?
11:05  bob2: since everything in python is an object, the other args point at objects too
11:05  dhiaeldeen: i think i have to read the manual more
11:05  lrh9: You'll learn to love classes, especially when you start trying to make programs that relate to objects.
11:05  bob2: __init__ is just a method that gets called for you after an object is constructed
11:06  bob2: it is not special in any other way
11:06  dhiaeldeen: bob2: i see, when you call the object it dipslays __init__ and a memory adrress, what is the memory adrress for?
11:06  bob2: it doesn't
11:07  ssbr_: How would I use matplotlib's extra directives in docutils?
11:07  bob2: but printing an object by default does show the address
11:07  dhiaeldeen: yes, that what i mean
11:07  bob2: it's not useful since you can't access it from python, but different address imply different objects
11:07  ssbr_: I want to be able to use .. plot:: mystuff/plot_thing.py
11:07  dhiaeldeen: it also displays __init__
11:07  bob2: so it's just a magic unique number
11:07  dhiaeldeen: i am intrested in matplot library too
11:08 --- Xeross|AFK is now known as Xeross
11:20  dhiaeldeen: any good programs written with python?
11:21  _habnabit: Nope. None.
11:21  lrh9: Pure Python or Python with other languages?
11:21  D-vo: eve online has done pretty well with stackless python
11:21  lrh9: Google uses Python.
11:25  dhiaeldeen: even online
11:25  dhiaeldeen: eve online
11:26  dhiaeldeen: used python for communication?
11:27  lrh9: I don't know.
11:28  anix: dhiaeldeen: wasn't the yahoo messenger written in python?
11:29  lrh9: Windows is bad.
11:29  lrh9: Windows was not written in Python.
11:29  lrh9: Therefore, Python must be good.
11:29  jorrit: Even though one would sometimes get a different impression, Windows wasn't written in COBOL either.
11:30  lrh9: :D
11:30  lrh9: I'm wondering if my Event class for an Event/Event Handler system I'm making could use multiprocessing managers now that I'm making it multiprocessing instead of threaded.
11:31  _habnabit: lrh9, why make it either?
11:32  lrh9: http://bpaste.net/show/11251/
11:32  lrh9: What I've scratched out so far. I haven't gotten around to removing all the stuff related to threading yet.
11:33  _habnabit: What is the point of this code?
11:33  nosklo: lrh9: it's a multiprocess event handler?
11:34  lrh9: Yes.
11:34  lrh9: Intended to be.
11:34  nosklo: lrh9: what kind of events do you plan on handling?
11:34  nosklo: lrh9: I mean, what's this for? What does your application do?
11:35  lrh9: I'm writing it for an IRC framework, but it would be usable in any event driven app.
11:35  nosklo: lrh9: you'll like ampirc
11:35  lrh9: No. I won't.
11:36  nosklo: of course you will
11:36  nosklo: you just don't know it yet
11:37  _habnabit: Wait, what? You're holding a  lock just so you can hold another lock?
11:37  Diverdude: I have a python script that needs to write to /var/www which is write protected. It needs sudo rights. How can i do that?
11:37  _habnabit: Diverdude, use sudo.
11:37  nosklo: Diverdude: sudo python yourscript.py
11:37  lrh9: nosklo: Link me.
11:41  lrh9: I can't access launchpad.net
11:42  ikanobori: I can access launchpad.net
11:46 --- Xeross is now known as Xeross|AFK
11:46  lrh9: What if I want to roll my own, to learn how?
11:46  _habnabit: Then I'm sure you have enough know-how to do it on your own without our help.
11:47  nosklo: lrh9: to roll your own, one would expect you'd first study existing implementations, so you can write something well thought to be a improvement
11:48  lrh9: Why do I have to make improvements. Can't I just learn how to do it?
11:48  _habnabit: I won't stop you.
11:49  nosklo: lrh9: but you want to learn by guessing? Without checking existing implementations? Making all the same mistakes all over again?
11:49  nosklo: lrh9: I prefer programs that work
11:50  lrh9: Knowing how to fish is more valuable than having a fish.
11:50  _habnabit: nosklo, that's just, like, your opinion, man.
11:51  kamsky: _habnabit, do you remember the problem i had yesterday with twisted?
11:51  _habnabit: kamsky, no?
11:52  _habnabit: lrh9, how are you going to learn to fish? Just flail and guess at it until you end up with a fish, or study someone who's a professional at it?
11:52  kamsky: _habnabit, "i have doing some proofs with twisted, i tried a Web Proxy Server was in twisted web, and if i use it normally it works fine,  but if for example, I do a Arp Spoof to a 3rd PC, and redirect spoofed traffic to this proxy it crashes"
11:52  _habnabit: kamsky, okay, wht about it?
11:53  kamsky: _habnabit, you told me to check if the traffig generated in 2 cases was the same
11:55  kamsky: _habnabit, and its not , here are the differences: http://paste.pocoo.org/show/293011/
11:55  _habnabit: kamsky, wow, I'm not surprised at all!!!!!
11:56  lrh9: nosklo: I could do something useful by updating it/twisted/ampoule for Python 3.1
11:56  kamsky: the get parameter is different (with MiM done it uses a relative route), and the other diff is Connection (with MiM) instead of Proxy-Connection
11:56  _habnabit: lrh9, you want to make twisted run on 3.x? That's a noble goal.
11:57  _habnabit: lrh9, it's a lot of work, though.
11:57  _habnabit: lrh9, pretty sure there's a few tickets about it already.
11:57  kamsky: _habnabit, what of this 2 diffs do you think its the problem?
11:57  kamsky: whichi*
11:58  _habnabit: kamsky, do you know how HTTP proxies work?
11:58  GrIM147: would data validation go in the model ? or the controller ? in a mc style app
11:59  kamsky: _habnabit, yeah, it reads the petition of the client, and do it to the correct server, then manages the server traffic and send it to the client
11:59  _habnabit: kamsky, not quite what I meant.
12:00  kamsky: _habnabit, ?¿ :s
12:00  _habnabit: kamsky, do you know how you formulate a request to a HTTP proxy?
12:01  kamsky: _habnabit, similar to requests to the origin server, except that the method and host/port are included in the request ?¿
12:01  _habnabit: Mostly right but not quite. The method is always included.
12:01  _habnabit: But a proxy request is a full URL and not just a path.
12:02  _habnabit: So, as I said waaay back at the beginning, you're giving your proxy invalid data.
12:02  kamsky: so... the problem is the relative path, and what about Connection param?? no problem being only Connection and not Proxy-Connection?
12:03  _habnabit: It does a different thing.
12:03  _habnabit: But I don't think you'd care.
12:04  kamsky: ok, so... knowing the problem... could i use the same twisted to parse this problem and write an absolut path before it fails?
12:04  _habnabit: You need a transparent proxy, not an HTTP proxy.
12:05 --- Xeross|AFK is now known as Xeross
12:06  kamsky: ok thanks, and the last one, is there a transparent proxy implementation in twisted?¿
12:06  _habnabit: Don't think so.
12:07  kamsky: :s so... maybe overriding some methods of this class i could do it... do you know sslstrip?¿?¿ its a similar idea and it works with twisted
12:09  GothAlice: When iterating over a list (or other fixed-length iterable vs. generator), what's the best way to determine if I'm examining the last element in the iterable?  Right now I'm using '''if parts.index(part) + 1 != len(parts)''' but that seems ugly (considering the math).
12:10  GothAlice: And it doesn't deal with multiple occurrences of the same part in the parts list.
12:10  _habnabit: Don't. Put that code outside the loop instad.
12:13  GothAlice: I need to detect if the current part isn't the last element and raise an error if this is the case.  (I have a number of conditionals which '''continue''' prior to this within the loop and this is a fall-through condition.)
12:13  _habnabit: You want to raise an error if it's the last element? You can't put that outside the loop?
12:13  GothAlice: I need to raise an error if it is -not- the last element.  My code is thus: http://pastie.textmate.org/private/yhdkehuw2hhmhkbhsjjcea
12:13  lrh9: Can we see your current code for this part, please?
12:13  GothAlice: lrh9: ^ see above link.
12:13  ssbr_: easy way is to write a custom iterator. But your code is basically incomprehensible. :(
12:14  _habnabit: Yeah, I can't parse what this is supposed to be doing.
12:14  ssbr_: long term you should probably totally rethink your approach.
12:14 * ikanobori parses _habnabit 
12:14  ssbr_: this ain't working.
12:15  lrh9: Yes.
12:15  ssbr_: (consider using an explicit state machine or something)
12:15  eyeofhell: Hello. I have a problem with ctypes: all works fine except giving dll eported function a "pointer to pointer" and reading back result :(. Maybe anyone can check may code and suggest what i'm doing wrong? http://goo.gl/u4pQp
12:15  Ove_: Isnt == the same as "is" ?
12:16  GothAlice: Loop through parts (which are single characters), look up the full name from the single character, if the type of variable is boolean flip the switch, otherwise if the part is the last element set the state machine to expect that variable as the next (higher-level loop) element.
12:16  GothAlice: ^ That's what that code does.
12:16  _habnabit: Ove_, nowhere near the same, no.
12:16  ssbr_: Ove_: Nope.
12:16  Ove_: Oh
12:16  lrh9: No.
12:16  _habnabit: Ove_, neither operation implies the result of the other.
12:16  ssbr_: == means equality, is means identity
12:16  GothAlice: == is a value comparison, `is` is a exact object comparison.
12:16 --- Xeross is now known as Xeross|AFK
12:16  eyeofhell: Ove_: '==' is value equality, 'is' is type equality (AFAIK)
12:16  _habnabit: eyeofhell, nope.
12:17  hariom: Looking for python developers with minimum 2.5 years of experience. Currently the person should I be working from india for ease in coordination. Pls ping back off the channel to avoid disturbance to others.
12:17  GothAlice: eyeofhell: It actually compares memory locations, AFIK.
12:17  ssbr_: _habnabit: eh, identity essentially implies equality for most purposes. especially if you want sane results with collections.
12:17  _habnabit: Implementation detail.
12:17  _habnabit: It compares object identity.
12:17  hariom: ...should I be... -> should be
12:17  _habnabit: ssbr_, NaN
12:17  ssbr_: _habnabit: I said sane.
12:17  GothAlice: With strings, because strings are interned, `is` is equivalent to ==.
12:17  ssbr_: _habnabit: python, in general, expects that identity -> equality
12:17  ssbr_: try checking if nan in [nan] for example
12:17  GothAlice: With other types this does not necessarily hold true.
12:17  ssbr_: GothAlice: not all strings are interned.
12:17  _habnabit: Again, that's an implementation detail.
12:17  _habnabit: eyeofhell, any reason you're not using cython?
12:17  GothAlice: ssbr_: True.  (Example case is a chunk of code I have to securely erase strings such as passwords from memory.)
12:18  ssbr_: GothAlice: also, re: your loop -- that doesn't make it easy to understand. Also, your're explaining what the code does mechanically instead of semantically, which is a sign of unreadability.
12:19  ssbr_: GothAlice: basically, the code's semantics aren't clear, and you couldn't even bring yourself to explain them. That's bad.
12:19  eyeofhell: _habnabit: ctypes are with default distribution, cython need to be installed. I have all code, all works very fine - except that memory read problem. If i solve it, i can complete app in 10 minutes :)
12:19  ssbr_: and the mechanics are even less clear, and you had to explain those first.
12:19  _habnabit: eyeofhell, no, cython doesn't have to be installed.
12:19  ssbr_: s/even less clear/also unclear/
12:19  ssbr_: GothAlice: but it's basically hard to read code.
12:19  GothAlice: ssbr_: It takes input such as "abcd", breaks it into individual characters, looks up the associated variable and sets its value unless it is non-boolean, at which point if it's the last character in the set, it tells the state machine what variable to write to when reading the next "word".
12:19  _habnabit: eyeofhell, it's a much, much better choice for writing a python wrapper for C libraries.
12:19  eyeofhell: _habnabit: Ah, you means an extensions to python?
12:19  eyeofhell: _habnabit: I have a reverse task: python test code for existing .dll :)
12:19  ssbr_: GothAlice: the explanation is just a transcription of the solution you took. What are you doing at the high level?
12:19  GothAlice: It needs to die if it encounters a non-boolean variable that isn't the last character.
12:19  ssbr_: (again, you're explaining mechanically)
12:19  _habnabit: eyeofhell, no. cython is a development-time dependency, not a build-time or runtime dependency.
12:19  GothAlice: ssbr_: I think mechanically.  ;)
12:20  ssbr_: GothAlice: what problem are you solving?
12:20  ssbr_: Also, don't use your personal thought processes as an excuse.
12:20  ssbr_: Go to the very highest level of abstraction and work down, since going from the bottom up is not heading anywhere
12:21  GothAlice: ssbr_: At the highest level the code takes a argv list and a function argspec and mates the two, returning a processed list of **kwargs and unprocessed *args to pass to the function.
12:21  ssbr_: look up the XY problem, also. I'm trying to get X out of you, and you keep explaining Y
12:21  GothAlice: I.e. automated getopt.
12:21  _habnabit: "The XY problem:  You want to do X, but don't know how.  You think you can solve it using Y, but don't know how to do that, either.  You ask about Y, which is a strange thing to want to do.  Just ask about X."
12:21  eyeofhell: _habnabit: I have a .dll that exports a few functions and this functionality need to be tested by test department. So the natural solution is to create a simple wrapper using python and give it to test department. All is done and working except this memory read issue :(
12:21  ssbr_: GothAlice: that isn't the highest level of abstraction until the very last line
12:21  ssbr_: "automated getopt"
12:21  ssbr_: so what does this automated getopt do?
12:21  GothAlice: This snippit of code deals with tar-like syntax: cmdname -xvf filename
12:21  _habnabit: eyeofhell, so, it's not working after all.
12:22  _habnabit: eyeofhell, and I'm suggesting how to make it work.
12:22  GothAlice: ssbr_: Takes this: def catalog(path, verbose=False): ...
12:22  eyeofhell: _habnabit: Yes, i can rewrite it to cython. But fixing a small problem will be more time-wise, i suggest :)
12:23  _habnabit: eyeofhell, nah. cython overall reduces development time, once you're using it everywhere.
12:23  GothAlice: ssbr_: And accepts arguments with the syntax: catalog [--verbose|-v] <path>
12:23  GothAlice: ssbr_: And calls the function with the appropriate arguments for the argv.
12:23  ssbr_: OK. So back to your code. What is "parts"?
12:24  GothAlice: "parts" is, in the cmdname example above, ['x', 'v', 'f'].
12:24  GothAlice: (This snippit is only called for single-hyphen-preficed arguments.)
12:24  ssbr_: OK.
12:24  GothAlice: Looping through these parts the expected behavior is to set the x and v flags, and set the value of f to filename, though the setting of f to filename is handled by the higher-level state machine.
12:25  ssbr_: So you take something like "foo -abc --verbose --plexarize bar" and you call this snippet on "abc", and call a different thing on ['--verbose', '--plexarize']?
12:25  _habnabit: eyeofhell, http://paste.pound-python.org/show/87/
12:25  _habnabit: eyeofhell, much simpler.
12:25  GothAlice: (By setting "state" and continuing the higher-level loop over argv)
12:25  lrh9: Out of curiosity, do you have any classes in your code?
12:25  ssbr_: Is my understanding correct?
12:27  eyeofhell: _habnabit: Yes. But this will require installing python extension for each new release. And currently it's a number of scripts in a folder that test department can just check out and use like command-line utilities, no additional actions required.
12:27  GothAlice: ssbr_: Correct, though —plexarize utilizes the same state machine behavior as a short-named (single-hyphen) argument that is non-boolean.
12:27  _habnabit: eyeofhell, building the extension can be part of the test process.
12:28  ssbr_: GothAlice: then I believe the main problem is that your code is mololithic and doesn't try to compose functions together to produce behavior
12:28  eyeofhell: _habnabit: And yes, i understood that cyphon is superior for C integration. I just don't want to put new tools RIGHT NOW into process :). Right now my task is to fix existing cypes code. Thanks for pointing out cyphon, i will evaluate it's features for sure :)
12:28  ssbr_: GothAlice: why not, for example, preprocess ['foo', '-abc', '--verbose', '--plexarize', 'bar'] into ['foo', '-a', '-b', '-c', '--verbose', '--plexarize', 'bar'] ?
12:28  _habnabit: eyeofhell, well, good luck! ctypes is pretty terrible.
12:28  ssbr_: then you don't need to special-case it
12:28  nosklo: eyeofhell: ctypes is known to segfault easily, and is more a hassle for testing, since it has problems of its own that may get in your way
12:29  eyeofhell: _habnabit: Absolutely no problems with them except pointer-to-pointer. It seems that i just mees some obvious thing :(
12:29  ssbr_: (you do as part of the preprocessing, but this can be pushed into another function which can be made fairly readable fairly easily since it doesn't much with state)
12:29  GothAlice: ssbr_: I'll have to handle the special case of two hyphens alone to stop the pre-processing, but that's a very good idea.
12:29  _habnabit: eyeofhell, nah, there's other problems that you just either ignored or didn't recognize.
12:30  ssbr_: Yes, you'd only do it for single-hyphen prefixed arguments. I think this is why long-args use -- in most argument parsers
12:30  ssbr_: anyway, that's my 2 cents for making this part of your code more readable. *shrug*
12:30  eyeofhell: _habnabit: Huh?
12:30  GothAlice: ssbr_: Well, arg parsers need to handle the case where a legitimate argument value (vs. argument name) starts with hyphens, too.  Thank you!  Sometimes when it's this early my thinking processed get stuck in ruts.
12:31  _habnabit: eyeofhell, I'm saying this is why you think ctypes didn't have problems.
12:31  GothAlice: s/processed/processes
12:31  ssbr_: GothAlice: Oh, I see what you mean. Yes. That should probably be the very first preprocessing step you make.
12:31  ssbr_: you can pipeline multiple steps together
12:31  dhiaeldeen: if i learn 2.7
12:31  dhiaeldeen: can i switch to 3 easily?
12:32  ssbr_: dhiaeldeen: Yes. Just keep in mind what unicode is.
12:32  dhiaeldeen: because blender 2.5 uses python 3
12:32  dhiaeldeen: ssbr_: what do unicode have to do with this?
12:32  ssbr_: The blender devs made an unfortunate decision.
12:32  _habnabit: Blender. :(
12:32  eyeofhell: _habnabit: i mean, maybe you know some of ctypes problems that i don't know?
12:32  GothAlice: GIL.
12:32  ssbr_: dhiaeldeen: the biggest change between 2.x and 3.x has to do with unicode.
12:32  ssbr_: dhiaeldeen: if you know what unicode is, and what it is in 2.x, you should be fine.
12:33  dhiaeldeen: ssbr_: not the syntax?
12:33  GothAlice: cpython's GIL on multi-core machines makes my head hurt.
12:33  _habnabit: GothAlice, we're not talking about final fantasy????
12:33  ssbr_: (provided you read the 3.x what's new page)
12:33  nosklo: dhiaeldeen: nah, the syntax hardly changed
12:33  _habnabit: GothAlice, easy solution: don't use threads.
12:33  ssbr_: dhiaeldeen: not particularly. There are some major syntax changes, but they're mostly available in 2.x. The major change is unicode/bytestring semantics.
12:33  dhiaeldeen: hardly = too much or very little?
12:33  GothAlice: _habnabit: That's exactly the approach I'm taking.  XD
12:33  lrh9: GothAlice: Why?
12:33  nosklo: GothAlice: GIL is great. People removed it and stuff got slower
12:33  _habnabit: GothAlice, it's the best approach in any language, really.
12:34  GothAlice: _habnabit: I had a thought-experiment to automatically set processor affinity to avoid multi-core threading for the Python process, but detecting the 'least loaded' core is problematic at best.
12:34  ssbr_: dhiaeldeen: "very little"
12:34  ChrisBuchholz: hi guys. Is there a built in funktion in python 3 for handling arguments passed to the problem? A parser - tokenizer, if you will? I once wrote one my self, but then someone mentioned that python already had one built in, but forgot to tell me what it is called.
12:35  ChrisBuchholz: to the program*
12:35  lrh9: GothAlice: There is no multi-core threading in Python.
12:35  _habnabit: ChrisBuchholz, argparse?
12:35  nosklo: ChrisBuchholz: argparse?
12:35  shylent: argparse should be in py3k
12:35  lrh9: Threading yes, but it doesn't use all cores because of the GIL.
12:35  _habnabit: lrh9, sure there is.
12:35  nosklo: lrh9: huh, of course there is
12:35  ChrisBuchholz: _habnabit & nosklo & shylent: thanks :D
12:35  lrh9: nosklo: Explain.
12:35  nosklo: lrh9: each thread will still run in a separate core, so that's multicore
12:36  nosklo: lrh9: and threads that don't touch python objects can release the gil
12:36  lrh9: False.
12:36  ssbr_: lrh9: Nothing he said is false.
12:36  _habnabit: lrh9, it's very much true.
12:36  shylent: ssbr_: he tried very hard to say 'you can not execute python code in parallel in one process', yes :P
12:36  ssbr_: except for the part where he implied that pure-python threads might run at the same time on multiple threads
12:36  ssbr_: uh
12:36  shylent: that's all I see
12:36  ssbr_: multiple cores*
12:37  _habnabit: ssbr_, well, they *do*.
12:37  _habnabit: ssbr_, they run, but most of the time is spent waiting on the lock to be released.
12:37  ssbr_: _habnabit: they don't. They're not activated, because they're waiting on the GIL, so they never get activated in a context switch
12:37  GothAlice: lrh9: Python relies on the system-native pthreads implementation and kernel for thread scheduling, and some kernels are smart enough to be able to run threads on independent cores, such as the BSD kernel underlying Mac OS X.  Python contains no thread scheduling at all.  (The Thread implementation in CPython is elegantly small, but the GIL introduces synchronization issues as it uses kernel-level signals to notify threads of GIL ava
12:37  ssbr_: _habnabit: unless a thread drops into GIL-dropping C. Then it changes.
12:37  ssbr_: And that happens quite often, really.
12:37  dhiaeldeen: ssbr_: unicode ?? , does that mean we have to use new characters?
12:37  dhiaeldeen: please clearify.. :(
12:38  ssbr_: dhiaeldeen: No. Read an article on unicode. Joel Spolsky wrote one.
12:38  _habnabit: 3.2 has a sheculer.
12:38  dhiaeldeen: i googled but didn't understand what this has to do with python 3
12:38  _habnabit: scheduler.
12:38  GothAlice: _habnabit: Halleluja.  Is it the brainfuck scheduler I heard so much about earlier this year?
12:38  ssbr_: dhiaeldeen: http://www.joelonsoftware.com/articles/Unicode.html
12:38  GothAlice: (Because bf* scheduling is wicked awesome.)
12:38  ssbr_: dhiaeldeen: if you don't know, forget about it. Just learn about unicode, and you'll be prepared when the time comes.
12:38  lrh9: I don't know where you're getting that Python threads run in parallel. That's just complete bs afaik.
12:38  shylent: GothAlice: are you trying to bury the "there's no parallel execution in python period" issue under a heap of serious-looking statements? :P
12:39  ssbr_: lrh9: What do you mean by "python threads" and "in parallel"?
12:39  shylent: GothAlice: because that most certainly looked very elegant.. and wrong, of course
12:39  lrh9: No threading.Thread runs in parallel with another afaik.
12:39  ssbr_: lrh9: You know wrong, then.
12:39  ssbr_: lrh9: You know about the GIL, right?
12:40  ssbr_: lrh9: The GIL, to summarize, is a single lock that is held by any thread that touches Python objects or does any Python (non-threadsafe) calls.
12:40  Taos: Anyone know the best way to extract nested dictionaries from a json responce?
12:40  ssbr_: lrh9: any Python code must hold the GIL to execute.
12:40  GothAlice: shylent: Uh, what?  There may be no parallel execution, but on multi-core there's no round-robin execution (or equivalent) either, at least for extremely extended periods of time (>10K ticks for CPU-bound tasks) due to the GIL availability signal arriving at the second thread too late (after the first thread released, signaled, and re-acquired the lock).
12:40  ssbr_: lrh9: the important thing to note, though, is that not only Python code gets executed when you do things.
12:40  _habnabit: Taos, ... index them?
12:40  nosklo: Taos: nested = myobj['foo']['bar']['baz']
12:40  _habnabit: Taos, what's the problem?
12:41  lrh9: ssbr_: Why?
12:41  Taos: Oh I just wanted a fancy way to extract a nested dictionary without nested = myobj['foo']['bar']['baz'] jazz but it doesnt matter
12:41  Taos: I was just thinking there might be a more pythonic way
12:41  ssbr_: lrh9: Because some functions/classes are implemented in C, and they don't necessarily have to touch python objects
12:41  GothAlice: Taos: If you use https://github.com/pulp/marrow.util/blob/master/marrow/util/bunch.py you can use dot-notation instead of bracketed quotes.
12:41  ssbr_: lrh9: for example, I could write a function that computes a very computationally intensive hashing algorithm on a string input
12:42  GothAlice: nested = myobj.foo.bar.baz
12:42  blub_: Hej, what is the best way to put a version number in a module so that I can query it when I imported the module
12:42  ssbr_: lrh9: in C, I could take the PyObject* , turn it into a C char*, and then I no longer hold any references to any Python objects.
12:42  ssbr_: lrh9: it is safe, at this point, for me to release the GIL.
12:42  nosklo: ... and lose the ability of accessing keys that aren't python identifiers
12:42  GothAlice: blub_: __version__ = "1.0"
12:42  ggergely: hello
12:42  GothAlice: nosklo: Not so, bracket notation still works.
12:42  ssbr_: lrh9: and then I do a bunch of calculations on the char*, and then I acquire the GIL again because I want to create and return a new python object
12:42  blub_: GothAlice: and how would I query it?
12:42  _habnabit: ssbr_, ... you did copy it, yes?
12:42  GothAlice: blub_: Query?
12:42  ssbr_: _habnabit: yes yes, copied and DECREF'd
12:42  nosklo: blub_: import foo ; print foo.__version__
12:43  blub_: GothAlice: well import the module and then check which version it has
12:43  GothAlice: ^
12:43  ggergely: how can i iterate over destructively from left to right over a deque
12:43  blub_: ah, okay
12:43  ssbr_: (or does it need to be decref'd? I dunno the semantics of a call too well in extension code)
12:43  blub_: Thanks
12:43  _habnabit: ssbr_, if it was passed as a parameter, DECREFing it is wrong.
12:43  _habnabit: ssbr_, unless you INCREF'd it earlier.
12:43  ssbr_: _habnabit: OK, no DECREF
12:43  GothAlice: ggergely: Custom iterator.
12:43  _habnabit: ssbr_, parameters are always borrowed references.
12:43  ssbr_: ah.
12:43  ssbr_: I don't write C extension code!
12:47  ggergely: so i'd like somehing like: while len(deque_obj): elem=deque_obj.popleft()
12:47  ssbr_: lrh9: anyway, the point is, if you start a thread that calls an extension module's code, that extension module can drop the GIL and you can get multiple threads started by Python all running in parallel.
12:47  _habnabit: I can tell. :T
12:47  ggergely: ok
12:47  ggergely: thanks
12:47  _habnabit: ggergely, while D: d.popleft()
12:47  ssbr_: _habnabit: it's a very sane choice. Nobody in their right mind would do it for precisely problems like this!
12:47  ssbr_: cython is so awesoooooome
12:47  ggergely: _habnabit: thanks
12:47  _habnabit: Yeah, cython really is very much worth it.
12:47  Taos: Ill just do it the nested = myobj['foo']['bar']['baz'] way
12:47  _habnabit: If not just for exception handling and reference semantics.
12:47  lrh9: ssbr_: I was talking about pure Python code.
12:47  ssbr_: lrh9: what's "pure python code"?
12:47  GothAlice: ssbr_: That doesn't alleviate the multi-core chatter.
12:47  _habnabit: lrh9, pure python calls out to C code quite frequently.
12:47  ssbr_: lrh9: as soon as you do something like a + b, there's an opportunity to drop the GIL.
12:47  lrh9: ssbr_: No extensions, obviously.
12:47  ssbr_: lrh9: python *is* an extension module.
12:47  GothAlice: ssbr_: Even if cpython extension code releases the GIL, if the next thread is in another core it might not recieve the availability signal before the first thread re-acquires.
12:47  _habnabit: lrh9, the *python interpreter itself* is an extension.
12:47  ssbr_: lrh9: Python is implemented in C.
12:47  ssbr_: lrh9: any time you do something that is fundamental to the language, like call a string method or append to a list or whatever, C code gets called
12:47  GothAlice: ssbr_: For a full description of the problem, see: http://blip.tv/file/2232410
12:47  nosklo: lrh9: some "pure-python" stuff you're refering to already releases the gil
12:47  ssbr_: GothAlice: tht's old
12:47  lrh9: Oh FFS. multiprocessing will provide comparable or better concurrency. End of.
12:47  Yhg1s: lrh9: maybe!
12:47  Yhg1s: lrh9: it depends entirely on what you're doing.
12:47  _habnabit: lrh9, nobody ever disputed that.
12:47  shylent: ssbr_: well, its old, maybe, but does it make it less true? I find his GIL talks most amusing
12:47  GothAlice: ssbr_: Old, but true for widely deployed versions of Python.  Basically everything I write is for 2.5/2.6, and 2.4 is still holding on.
12:47  Yhg1s: there's lots of situations where using multiprocessing would mean copying a lot of data back and forth, which would be very inefficient.
12:47  ssbr_: shylent: I was under the impression the problem was fixed
12:47  _habnabit: Yhg1s, shmem!
12:47  GothAlice: ssbr_: It might be in 3.2 or 3.3.
12:47  shylent: ssbr_: umm not in 2.x anyway
12:47  Yhg1s: the GIL issue is really not that big a deal.
12:47  Yhg1s: it's pathological behaviour in a silly usecase.
12:47  shylent: I don't care about 3.x until I can acually use it for, you know, real things
--- Log closed Thu Nov 18 12:48:02 2010
--- Log opened Thu Nov 18 12:49:26 2010
12:49 --- Users 784 nicks [0 ops, 0 halfops, 0 voices, 784 normal]
12:49  ssbr_: GothAlice: does doing it all in a single thread hurt response time?
12:50  GothAlice: ssbr_: It actually improves it for the average case by ~ 10x.
12:50  ssbr_: So then why are you using threads?
12:50  _habnabit: See? The GIL is awesome.
12:50 --- Channel #python was synced in 118 seconds
12:50  GothAlice: ssbr_: I'm offering the option for threads.  The default is to spawn multiple copies of the application matching the number of available cores.
12:51  ssbr_: GothAlice: Why?
12:51 --- Xeross|AFK is now known as Xeross
12:51  ssbr_: I don't understand how threads could do anything but slow your application down
12:51  GothAlice: ssbr_: Because threading demonstrates higher capacity at reduced throughput for my use cases.
12:51  GothAlice: It's a trade-off.
12:51  Yhg1s: ssbr_: depends on how much (properly) shared data is involved.
12:52  ssbr_: Yhg1s: I mean with regards to having a thread doing the template stuff. I don't get why the templating couldn't be done in the same thread as the networking.
12:52  GothAlice: It also offers greater isolation from failures and memory leaks.
12:52  ssbr_: GothAlice: how is that?
12:52  _habnabit: Multiple processes? Sure.
12:52  GothAlice: (My worker thread pool implementation limits the number of requests processed by individual workers, killing them off and re-spawning them when they get over-worked.)
12:53  GothAlice: It's easier in a single-threaded application for a poorly behaved client application running on the server to nuke its running state and prevent subsequent requests from succeeding.
12:53  GothAlice: Which is a no-no.
12:54  Yhg1s: GothAlice: I think the question is "what does *multi*threading give you", not "what does not multithreading give you" :)
12:55  GothAlice: Yhg1s: I already stated that.  …threading demonstrates higher capacity at reduced throughput for my use cases… it also offers greater isolation from failures and memory leaks.
12:55  Yhg1s: ssbr_: it's usually just "response time"
12:55  eggy_: Or is it, "what does not multithreading not give you"? :p
12:55  ssbr_: Yhg1s: Right, I asked about that.
12:55  ssbr_: I got a very confusing response.
12:55  Yhg1s: GothAlice: how do threads give you "greater isolation"?
12:55  Yhg1s: GothAlice: I can't imagine any way in which threads do that.
12:55  Yhg1s: (because they don't; it's all one process.)
12:55  GothAlice: Yhg1s: If one thread runs amok, I still have a chance (every 100 ticks by default) to serve new or finish serving existing requests.
12:55  ivan`: if a client can slow down a single-threaded Python server, it can slow down the multi-threaded server too
12:56  GothAlice: Slow down, yes, but if a unit of work locks up in a single-threaded server, it's game over.
12:56  Yhg1s: GothAlice: heh, what an odd definition of 'isolation'
12:56  eggy_: GothAlice: a thread switch is not guaranteed at all
12:56  GothAlice: eggy_: I know.  That's why I said "chance".
12:56  eggy_: GothAlice: ah, right
12:57  ssbr_: This reminds me. I definitely want to implement Ian Bicking's proposed WSGI server benchmark suite for things like that.
12:57  ssbr_: GothAlice: is your server a WSGI server?
12:57  GothAlice: ssbr_: Indeed.
12:57  GothAlice: To both points.
12:57  GothAlice: And it's WSGI2 aka web3.
12:57  ssbr_: GothAlice: does it have a name?
12:57  GothAlice: marrow.server.http
12:57  GothAlice: https://github.com/pulp/marrow.server.http
12:57  ssbr_: OK, I'll remember that when I get around to trying out implementation.
12:57  ssbr_: (I have suspicions that his ideas on wedging would prove disastrous for your server)
12:58 * _habnabit just uses gunicorn.
12:58  JohnRandom: good morning
12:58  ssbr_: mod_wsgi forever!
12:59  GothAlice: ssbr_: It currently "works", is missing one feature for full HTTP/1.1 compatibility (pipelining works, chunked encoding I'm working on).  It's a thought experiment, currently.  It's small, at 164 lines for most of HTTP/1.1, though.  ;)
12:59  JohnRandom: I get this warning when I try to insert a unicode string in a mysql database using oursql: Warning: Incorrect string value: '\xF0\x9D\x92\xA9 =...' for column 'summary' at row 1, is there any way to catch that warning like try/except with errors?
12:59  GothAlice: ssbr_: It'll get bigger as I flesh out web3 (PEP444) compatability and async.
12:59  _habnabit: JohnRandom, pastebin your code and the full traceback.
12:59  ivan`: imagine a wsgi-free world, Deferreds everywhere
12:59  eggy_: JohnRandom: you can use the warnings module to turn warnings into exceptions
12:59  _habnabit: ivan`, <3
13:00  ssbr_: GothAlice: I'm not a big fan of NIH to tell the truth
13:00  TheSheep: ugh, __import__ :(
13:00  eggy_: JohnRandom: but you should probably just fix the issue in the first place, so listen to what _habnabit will tell you :)
13:00  GothAlice: ivan`: I tried that, actually, and got fairly piss-poor performance out of it.  May have been my coroutine scheduler, though, as it was a mixed time- and select/epoll scheduler.
13:00  ssbr_: hearing about yet another web server implementation doesn't do it for me. :/
13:01  GothAlice: ssbr_: Point me to a py3k-compatible HTTP/1.1 server with web3 support, and I'll agree.  ;)
13:01  shylent: GothAlice: why didn't you use twisted, again?
13:01  shylent: ohh, py3k
13:01  TheSheep: ssbr_: otho every web developer should write at least one web server in their life imho :)
13:01  liel: Hello
13:01  ssbr_: GothAlice: "porting"
13:01  TheSheep: otoh
13:01  shylent: I've heard twisted is going to skip py3k support and go directly for py4k compliance
13:01  shylent: so yeah
13:01  GothAlice: shylent: Because my entire reactor, high-level server/protocol API, and HTTP server is < 1000 lines.
13:01  liel: Does anyone know a pure python bbcode export library?
13:01  ssbr_: GothAlice: you're reinventing the wheel instead of carving out a new stone hubcap
13:01  shylent: GothAlice: does that matter? :P
13:01  shylent: I mean, really
13:02  dhiaeldeen: ssbr_: so the new python uses something different than asci?
13:02  JohnRandom: _habnabit: it is django related, at least the code is ... the problem itself seems to be python related, though
13:02  shylent: I use twisted all the time and I don't really care about its SLOC
13:02  ivan`: if py4k like py2 except with chained exceptions and no str/unicode comparisons? that would be cool
13:02  ssbr_: dhiaeldeen: have you read the article?
13:02  dhiaeldeen: 60%
13:02  ssbr_: finish it. Python uses an abstract unicode datatype
13:02  JohnRandom: _habnabit: https://gist.github.com/704901
13:03  dhiaeldeen: ssbr_: this means that i have to change what?
13:03  GothAlice: shylent: It does in terms of readability, testability, definition of purpose, reduced dependancies, etc., etc.  I like to use systems whose execution flow I can store, in their entirety, in my head.
13:03  ssbr_: dhiaeldeen: stop thinking of python 3
13:03  GothAlice: Allows for extremely fast prototyping, too.
13:03  dhiaeldeen: does that prevent me from using arabic for example
13:03  dhiaeldeen: ok
13:03  ssbr_: as I said, understand unicode first
13:03  ssbr_: then understand unicode in 2.x
13:03  _habnabit: JohnRandom, well, that's not oursql.
13:03  ivan`: dhiaeldeen: after that article, read http://boodebr.org/main/python/all-about-python-and-unicode
13:03  ssbr_: and then when you're ready to use 3.x, the "What's New" page for 3.0 will tell you what's up
13:03  lrh9: Python 3 is fine. It's people that have the problem.
13:04  Yhg1s: lrh9: no, it's *libraries* that hvae the problem.
13:04  ssbr_: lrh9: if by "people" you mean "code", yes
13:04  Yhg1s: and in this case, documentation. there's lots of places that explain how to think about unicode in Python 2.x, but not for Python 3.x.
13:04  JohnRandom: _habnabit: your right, Django still uses MySQLdb, my bad
13:04  dhiaeldeen: this is what i get when using print "عربي" , >> http://www.hotsolder.co.uk/touchshield-slide-352-p.asp
13:04  dhiaeldeen: i mean
13:04  dhiaeldeen: http://www.hotsolder.co.uk/touchshield-slide-352-p.asp
13:04  JohnRandom: I'm so used to using oursql that I forgot
13:04  dhiaeldeen: oh
13:04  dhiaeldeen: i mean
13:04  GothAlice: My only issue with py3k is needless changes.  Did we really need to completely redefine str/unicode while still re-using one of the labels?  bytes/text I would have less of a complaint about, but not much less.  Also, arbitrary changing of things like iteritems→items, etc.
13:04  shylent: JohnRandom: I hear, theres oursql support for django
13:04  lrh9: "God forbid you should ever have to write or update something yourself." does seem to be the prevalent attitude here.
13:04  GothAlice: Needless breakage.
13:05  dhiaeldeen: unspupported characters in input
13:05  dhiaeldeen: ""
13:05  Yhg1s: GothAlice: except it's not considered "needless", it's considered "what should have been the case from the start".
13:05  Yhg1s: lrh9: not at all.
13:05  JohnRandom: shylent: I don't know if thats really a mysqldb / oursql issue...
13:05  lvh: Hello
13:05  dhiaeldeen: ok, i will not worry about 3 now
13:05  GothAlice: Yhg1s: Yup.  :D  Which I understand, and also understand why py3k uptake has been slow.
13:05  dhiaeldeen: let's understand 2.x first
13:05  ssbr_: lrh9: I don't want to update crusty SWIG code with a 17-step build process to use Python 3
13:06  Yhg1s: lrh9: however, we do grow tired of people learning Python 3.x, finding out they can't do anything with it because libraries haven't been ported, and then giving up on Python.
13:06  JohnRandom: I would be ok for me to just irgnore lines like that, its a .1 ppm thing anyway
13:06  ssbr_: lrh9: it's much easier to just use python 2.x and wait for the crazy developers to do it... eventually.
13:06  GothAlice: lrh9: I'm coming from Paste/WebOb → py3k.
13:06  GothAlice: Thus me writing the marrow.* group of task-specific packages.
13:06  _habnabit: JohnRandom, basically mysqldb has very poor unicode support.
13:06  _habnabit: JohnRandom, django *should* work around this, but apparently has failed.
13:06  JohnRandom: _habnabit: I figure :\
13:06  margh: hey everybody, ive an python newbie question: i have a list, like ['foe1', 'foe2', 'foe3'] and i need it converted to a string like  'foe1, foe2, foe3' ... at the moment a itterate over the list and add each element to a string plus a comma. is there a way which is more elegant?
13:07  ssbr_: margh: ', '.join(your_list)
13:07  GothAlice: ^
13:07  lrh9: ^
13:07  _habnabit: JohnRandom, I'd bug #django about this, or, even better, don't use django.
13:07 * GothAlice must be getting old as she can't type as fast as she used to.  I do ^ when I'm half-through an answer and get pre-empted.  XD
13:08  JohnRandom: _habnabit: actually, I like django ... I'll look for that django-oursql backend, thanks for the tip
13:08  GothAlice: -_-
13:09  _habnabit: JohnRandom, you'll grow out of it.
13:09  Yhg1s: nah.
13:09  GothAlice: Django: where adding a variable to allow multiple-db support is hundreds of thousands of LoC change and the DIFF of it crashes the bug tracker.
13:09  GothAlice: I added that to my framework in ~4 lines.
13:10  GothAlice: That shows a fundamental design problem.
13:10  Yhg1s: no, it shows a difference.
13:10  GothAlice: (K, maybe not hundreds, but 10x thousands.)
13:10  shylent: GothAlice: I am sure, *your* framework is better/more feature-rich, than django
13:10  GothAlice: Nope.
13:10  GothAlice: It's distinctly different in approach and goals.
13:10  Yhg1s: there's lots of stuff that would be impossible to add to Python and easy to add to other languages. It's not a fundamental design problem in Python that it doesn't do, say, tail recursion. it's a choice.
13:10  Yhg1s: yes.
13:11  GothAlice: However the DB layer is almost directly comparable.
13:11  Yhg1s: which is not a "fundamental design problem" of the project, it's a difference of opinion between you and the project.
13:15  m0no: pytables is awesome - except for dates
13:17  GothAlice: Yhg1s: I come from the standpoint of a framework user that didn't have multiple DB support, and discussion kept mentioning how hard it was to implement.  When I went off, re-invented the framework wheel, and implemented multiple-db easily, I grew to consider easy feature implementation a hallmark of good design.  Kudos to those who put that much effort into Django, though.  \o/
13:17  ivan`: re: django settings, I like exarkun's quote: The correct solution is `f(o)`
13:17  ivan`:  http://twistedmatrix.com/trac/export/30283/trunk/doc/fun/Twisted.Quotes
13:18  lrh9: Heheheheheh.
13:18 * m0no django <3
13:22  GothAlice: I made multiple-db configuration trivially easy, requiring no change to the ORMs you use.  I have the issue that I need to support a number of different DB back-ends (I don't have a unified DB layer like Django.)  http://pastie.textmate.org/private/wcstsueoro9ljjllt9rza
13:22  GothAlice: Thus only a few lines needed to be added to initialization to loop over db.connections setting each up in turn.
13:23  TheSheep: GothAlice: because it's such a commonly used feature...
13:24  lrh9: GothAlice: What do you use it for?
13:24  GothAlice: TheSheep: Having legacy data is fairly common.  Mailing list traffic about multiple-db support in Pylons and TG was fairly extensive, so I implemented it in my own framework; it was easy, so why not?
13:24  GothAlice: I use it for legacy reporting.
13:25  GothAlice: Also, mixing MongoDB and SQL-based DBs.
13:25  m0no: django can do that
13:25  GothAlice: As can I, with three lines in one INI file.  ;)
13:25  dhiaeldeen: why windows don't include python by default?
13:26  Yhg1s: dhiaeldeen: you'd have to ask Windows.
13:26  GothAlice: Also I use multiple-db support to allow application component re-use.  E.g. the Contentment CMS has its own connection to Mongo separate from the host application, which can have its own connections.
13:26  lrh9: If I'm not mistaken, isn't it a licensing issue?
13:26  Yhg1s: Python's license allows it.
13:26  GothAlice: Otherwise mapping components into your existing model would be… somewhat painful in SQLAlchemy.  Not so in MongoDB, but…
13:26  lrh9: Ah.
13:26  dhiaeldeen: i think because windows don't want to support open source
13:26  Yhg1s: Some PC manufacturers do ship Python with their standard Windows installs.
13:27  dhiaeldeen: windows hate linux? or there are another reasons.
13:27  Yhg1s: dhiaeldeen: that's not their stated reason.
13:27  Yhg1s: dhiaeldeen: and it really isn't about Linux, either.
13:27  m0no: its not exactly hard to just install python on windows
13:27  magcius: dhiaeldeen, they haven't found a use for shipping linux
13:27  magcius: er
13:27  magcius: python
13:27  GothAlice: dhiaeldeen: Microsoft has .NET which is a "direct competitor" to Python in terms of bytecode interpreted scripting.  They also have IronPython.
13:27  dhiaeldeen: Yhg1s: why then?
13:27  Yhg1s: dhiaeldeen: ask them.
13:27  magcius: dhiaeldeen, they don't ship ruby, perl, lisp, or really anything else.
13:27  GothAlice: And ASP.
13:27  GothAlice: (ASP.NET, in fact.  ;)
13:27  dhiaeldeen: okok
13:27  magcius: GothAlice, they don't ship windows with .NET
13:28 * m0no uses django for legacy reporting
13:28  magcius: dhiaeldeen, but I can tell you that Microsoft does have internet tools written in Python
13:28  magcius: er
13:28  magcius: internal
13:28  GothAlice: magcius: Windows 7 ships with a .NET interpreter, and .NET 2 & 3 updates are enabled by default during the first update cycle.
13:29  magcius: dhiaeldeen, my friend on the windows display driver team uses a bunch of python scripts for parsing different reports and that
13:29  GothAlice: Hmm… I think one update was disabled by default, likely v3.
13:29  dhiaeldeen: magcius: thanks for the info.
13:30  magcius: dhiaeldeen, they don't bother shipping Windows with it because they don't need it
13:30  dhiaeldeen: K
13:30  dhiaeldeen: i have a Question, are python libraries purely written with python?
13:32  Habbie: dhiaeldeen, not necessarily
13:32  namiku: good morning Pythoneers
13:32  namiku: dash: do you not sleep?
13:32  dhiaeldeen: Habbie: what else may they use?
13:32  Habbie: dhiaeldeen, C is common
13:32  Habbie: dhiaeldeen, and anything else that can compile and link with C, basically
13:33  dhiaeldeen: Habbie: so python understands C too ?
13:33  Habbie: no, python understands native library calls
13:33  Habbie: and can import native binary libraries (ELF .so libs on linux, DLLs on windows) assuming they expose a python-compatible interface
13:33  dhiaeldeen: as example PIL, was python purly used to write that library?
13:34  Habbie: i would expect that PIL involves a fair bit of C but i did not check.
13:34  Habbie: ssl support is a good example
13:38  GothAlice: Ugh, stupid internets.
13:42  namiku: how do I set up the script to wait for a certain HTTP response before sending?
13:45  namiku: anyone has any experience with forms?! how do I set up the script to wait for a certain HTTP response before sending?
13:52  naxa: hi! I'm surprised that when in a function, if e.g. i have a local parameters named "x", i can't change it's value from inside the function with locals()["x"] = some_value
13:53  ssbr_: naxa: Whelp. The documentation for locals() does say you shouldn't use it for this because it isn't guaranteed to work.
13:53  ssbr_: naxa: not to say the documentation is always right, but if you read the documentation you'll probably get surprised less.
13:53  ssbr_: (for reference: http://docs.python.org/library/functions.html#locals )
13:53  naxa: ssbr_: i see! sorry i should have rtfm. :)
13:56  naxa: ssbr_: my problem originally was that if I have e.g. two functions with the same named kwargs, and the first function calls the other one, passing all the args, if I change the default value of a named kwarg in the second function, I need to also change it in the first function.
13:56  Yhg1s: naxa: yep.
13:56  naxa: ssbr_: i thought I just give all default values `None` and internally replace their values if they `== None` to the real defaults
13:56  Yhg1s: naxa: yes, that's the way to do it, except you should use 'is None' instead.
13:56  naxa: ssbr_: I wouldn't mind loosing None as an option...
13:56  ssbr_: Sounds good so far.
13:57  naxa: ssbr_: Yhg1s: I thought that I could doing this in a sane way with a dictionary actually holding the default values, and the problem: I wanted jsut update locals()..
13:57  naxa: *just
13:58  naxa: so I wanted to be able to simply update one dictionary with the another.. well, not update, but replace-the-value-if-it's-None
13:59 --- inkjetunit is now known as NytNyppii
13:59  naxa: ssbr_: Yhg1s: is there any other (more sane) way to do this than to manually check all of the named kwargs one-by-one?
14:00  namiku: hello can someone help?!
14:00  namiku: ah Yhg1s you don't sleep too!
14:00  naxa: namiku: what's the matter?
14:01  namiku: I am accessing a form, modifying it, then sending it, now I want the script to wait for a certain HTTP Response before moving on
14:02  punkoff: I've got timestamps with timezones, like this: "1287626528 +1200". How do I convert this to something usable like datetime object?
14:02  punkoff: Preferably something that remembers its TZ
14:03  namiku: naxa: better yet, I want it to print this HTTP response
14:04 --- NytNyppii is now known as inkjetunit
14:05  Yhg1s: namiku: so look at the result of urllib.urlopen(), if that's what you're using.
14:05 --- Xeross is now known as Xeross|AFK
14:05  shiftingcontrol: is there any difference between these two statements import socket and from socket import *
14:05  namiku: I'm using urllib.urlencode
14:06  jorrit: shiftingcontrol, don't use import *
14:06  Yhg1s: shiftingcontrol: pretty much everything is different, yes.
14:06  Yhg1s: shiftingcontrol: don't use 'import *'.
14:06  jorrit: shiftingcontrol, the first lets you do things like socket.bla() in your code. Don't use the second form.
14:06  namiku: as an opener I'm using urllib.FancyURLopener
14:06  Yhg1s: ok, then the 'open' method of that object.
14:06  marcchr1: shiftingcontrol: the import * spills the whole module content all over your code
14:07  Yhg1s: namiku: have you read a tutorial and the documentation of the urllib module yet?
14:07  shiftingcontrol: jorrit,Yhgls:fine guys ,but i m importing from socket import * right that imports sockets stuff
14:07  namiku: I read some of it and I fixed the script since last night
14:07  jorrit: shiftingcontrol, just do 'import socket'.
14:07  shiftingcontrol: not everything right?what is harm in that
14:08  jorrit: shiftingcontrol, it polutes the namespace and it is just a bad idea in general. Can cause all kinds of unexpected problems and it is harder for the reader of your source code to guess where something comes from.
14:08  Yhg1s: shiftingcontrol: sometimes not everything,b ut always too much. It messes up your namespace, can mask builtins without you realizing it, creates messy modules, unmaintainable code and subtle bugs.
14:08  namiku: I had empty params last night but after checking I managed to fix that problem
14:08  Yhg1s: namiku: notice how that's not the question I was asking.
14:08  namiku: now I post but I need a certain response before contiuing otherwise the form is not registered
14:08  namiku: I said I read a bit
14:08  shiftingcontrol: jorrit,Yhgls:fine
14:10  walt: does copytree behave differently on mac vs windows?
14:10  Yhg1s: namiku: so what's stopping you from using what you read about the returnvalue of opener.open() to do what you want?
14:11 --- Dude-X is now known as Dude-Z
14:11 --- Dude-Z is now known as Dude-X
14:13  namiku: Yhg1s: I am reading it , but I get a whole webpage!
14:13  Yhg1s: namiku: yes. that's the response from submitting the form.
14:16  punkoff: Why doesn't strptime accept '%z' (timezone)?
14:16  punkoff: https://gist.github.com/704955
14:16  Yhg1s: punkoff: it doesn't know how to handle it. you probably want to use dateutil instead.
14:19  blub_: can someone tell me if I can search for "All Anchors" and "text = test" with BeautifulSoup.findAll()
14:21  blub_: or do  have to use anchors = BeautifulSoup.findAll(a) ; for a in anchors: stuff_to_find_link_with_TEXT
14:23  gryllida: the latter sounds more or less ok
14:24  blub_: okay, thanks
14:29  serverhorror: hi, I made an XMLFormatter(logging.Formatter) which works fine. I'd like to generalize this so that if logger.warn("the message", extra={"ctx": "important", "foo": "bar"}) is called I can use the keys passed in extra. Since the info from extra is used to create attributes I'm not quite sure how to go about this, any hints?
14:31  m0no: how do I convert a datetime to unix time since epoch
14:32  ssbr_: m0no: convert to a timetuple and then from a timetuple to a timestamp
14:32  ssbr_: via the relevant method on the datetime and the relevant function in the time module
14:33  m0no: ssbr_: hmm so bascially time.mktime(mydatetime.timetuple())
14:33  ssbr_: If you say so. I am too lazy to look up the documentation myself.
14:33  ssbr_: (I do know the timetuple part is correct!)
14:36  m0no: ssbr_: what about time.mktime(datetime.date.timetuple())
14:38  ssbr_: m0no: wouldn't that do something different?
14:39  m0no: ssbr_: well it jsut sets the fractional part to 0
14:39  melusinechan: hello, i know this is not the good channel, but #graphviz is so empty ... anyone know how to do that : A1, A2, A3, A4 [label="Boris"] with graphviz ?
14:40  jorrit: melusinechan, so you pick a random non-empty channel to ask your question?
14:40 * m0no has never heard of graphviz
14:40  jorrit: Me neither
14:42  ssbr_: m0no: it does quite a lot more than that.
14:42  ssbr_: m0no: what is dt.date() ?
14:48  m0no: ssbr_: I should clarify - I have a datetime.date object
14:48  ssbr_: Oh. That's different maybe.
14:48  ssbr_: s/maybe //
14:50  CDrone: hey
14:50  litb: hello folks!
14:51  CDrone: i
14:51  CDrone: hi
14:51  litb: does python's switch statement use perfect hashing?
14:51  Wild_Cat: litb: Python has no switch statement.
14:51  litb: ohh
14:51  m0no: python has a switch statement?
14:51  merijn: litb: Which switch statement?
14:51  Wild_Cat: litb: switches in Python are done with dict dispatch
14:51  litb: ohhh
14:51  litb: does dict use perfect hashing for a set of statically known strings?
14:51  Wild_Cat: e. g. {"foo": func1, "bar": func2, "baz": func3}[key]()
14:51  CDrone: this is my first day with python .. and i am using IDLE on windows .. i wanted to know how to type a multiple line code without having to execute line by line
14:52  merijn: litb: Dicts have perfect hashes, yes
14:52  litb: merijn: ohh!
14:52  CDrone: i have downloaded notepad++ but i can't use it :(
14:52  Wild_Cat: what's perfect hashing?
14:52  merijn: Wild_Cat: No collisions
14:52  litb: i dont understand how perfect hashing works. i have to implement a swtich statement and thought i would look how python does it!
14:52  litb: is it a bad idea=
14:52  litb: ?
14:52  m0no: CDrone: idle includes a text editor
14:52  Yhg1s: well, Python doesn't use perfect hashing.
14:52  eggy_: Sure there are collisions
14:52  ssbr_: merijn: since when did python use perfect hashing?
14:52  Wild_Cat: merijn: Python dicts use perfect hashes anywhere!?
14:52  Yhg1s: and Python doesn't have a switch statement, so I'm not sure what you would look at.
14:52  CDrone: m0no: how to do it?
14:52  litb: ohh!
14:52  eggy_: And "dict doesn't hash", the objects themselves hash
14:53  merijn: I was about to type they're not so much perfect hashes as no collisions in a dict
14:53  serverhorror: is perfect hashing even possible without knowing the set of candidates in advance?
14:53  Yhg1s: there are lots of collisions in dicts.
14:53  Yhg1s: serverhorror: nope.
14:53  jorrit: merijn, no collisions? That's certainly not true.
14:53  eggy_: merijn: there are collisions but they are handled
14:53  m0no: CDrone: file - > mew window
14:53  litb: i heard for any set of statically known strings there theoretically is guaranteed to be at least one perfect hash function mapping them to distinct integers
14:53  ssbr_: serverhorror: he was talking about statically-known keys
14:53  eggy_: merijn: so two objects that hash the same but compare unequal can both be in the same dict
14:54  ssbr_: serverhorror: but even then, there's an issue with mutation, I guess
14:54  merijn: The gap between what I was trying to say and am actually saying widens. I'm going to shutup now
14:54  CDrone: m0no:  oh thanks .. so now i type and click run? :)
14:54  Wild_Cat: litb: well, Python doesn't do perfect hashing anywhere. However, unless your dict is comically large and filled with pathological cases, you're unlikely to ever notice the performance difference.
14:54  litb: why doesn't python use perfect hashing?
14:54  m0no: CDrone: aye
14:54  litb: Wild_Cat: ohh!
14:54  eggy_: litb: because it can't
14:54  Yhg1s: litb: it requires knowing all the potential values in advance.
14:54  litb: i thought i would do this as an exercise
14:54  Wild_Cat: litb: because it's not worth it.
14:54  eggy_: An infinite amount of permutations cannot be encoded in a fixed-width hash
14:55  Yhg1s: not perfectly, anyway.
14:55  Wild_Cat: litb: also, seeing that objects are responsible for providing their own hashes, it'd be impossible to do in the general case.
14:55  eggy_: err, yes, that's what I meant :)
14:55  litb: would it be a bad idea to implement a switch statement by using perfect hashing, if the rough number of cases is always below around 25
14:55  merijn: eggy_: What I intended to say was that as a user dictionary you can ignore the concept of collisions. But as usual my simplification gets corrected by 25 people and my addon explanation was flawed :p
14:55  Yhg1s: litb: depends on the circumstances.
14:55  jorrit: litb, 'switch' in general is usually a bad idea.
14:55  jorrit: litb, I mean as a language construct.
14:55  CDrone: m0no: run module or python shell
14:55  eggy_: merijn: don't fret it :)
14:55  ssbr_: Wild_Cat: I'd imagine it'd be useful for strings.
14:55  merijn: s/user dictionary/user of dictionaries
14:56  CDrone: m0no:  python shell does nothing .. and run module prints restart in the main window with doing nothing as well
14:56  CDrone: :S
14:56  Wild_Cat: ssbr_: it'd be useful for huge dict literals where all the keys are known in advance and strings. So, pretty rarely.
14:56  m0no: CDrone: most pythonistas use a text editor and a shell
14:56  ssbr_: Wild_Cat: what's that? "every class statement"? Is that what you said? ;)
14:56  Wild_Cat: ssbr_: good point.
14:56  ssbr_: (well, every class statement where the class isn't later mutated)
14:57  CDrone: m0no:  ok .. but i don't really understand what should i do now?
14:57  ssbr_: I don't remember how well perfect hash stuff deals with mutations though.
14:57  m0no: CDrone: well just type into the window, hit f5
14:58  ssbr_: If there's a way to do it sanely with mutations, it might be able to be made into a worthwhile patch, maybe.
14:58  ssbr_: (it's a sort of pypyish optimization though)
14:59  litb: jorrit: yes i know it's a bad thing
14:59  CDrone: m0no: oh thanks it worked :)
14:59  CDrone: stupid me
14:59  CDrone: peace :)
14:59  litb: so i will do my switch as a series of "op==" calls thx bye
14:59  pfrog: sigh, so I guess overriding the way a list gets encoded by overriding default() for JSONEncoder fails
15:00  pfrog: and looking at json/encode.py I can see why, oh well
15:01  Ove_: Does getsizeof() also calculate the size of nested dictionaries?
15:02  Yhg1s: Ove_: no.
15:02  Yhg1s: it's a pretty useless calculation.
15:02  litb: does python use utf8 internally?
15:02  Wild_Cat: lino.
15:02  nosklo: litb: no.
15:02  Wild_Cat: litb: no.
15:02  litb: i ohh
15:02  Wild_Cat: (curse you, tab-completion)
15:02  Yhg1s: actually, yes.
15:03  Yhg1s: just not to store any data.
15:03  litb: that's bad news -.-
15:03  Ove_: Yhg1s: How would I go about measuring the size of the data?
15:03  Wild_Cat: litb: internally, Python uses UCS-2 or UCS-4, depending on how it was compiled.
15:03  Yhg1s: Ove_: with difficulty.
15:03  Yhg1s: litb: why is it bad news?
15:03  nosklo: litb: why? It shouldn't matter
15:03  Wild_Cat: litb: Python understands UTF-8 strings, though.
15:03  litb: ah but to the outside it's utf8
15:03  Yhg1s: litb: not unless you make it UTF-8.
15:03  litb: Yhg1s: ohh i see now!
15:03  nosklo: litb: I'm not sure what you mean anymore. Can you describe your problem?
15:03  Yhg1s: somehow I doubt it.
15:04  nosklo: litb: looks like you're confusing "unicode" with "utf-8" somehow. You know those two are very different and almost opposite things right?
15:06  litb: nosklo: utf-8 is an encoding sheme for unicode
15:06  Alberth: litb: Python supports many unicode encodings, utf-8 is one of them
15:07  merijn: litb: I recommend reading this unicode intro: http://www.joelonsoftware.com/articles/Unicode.html
15:08  ivan`: Ove_: http://paste.lisp.org/display/116800
15:08  Ove_: ivan`: Thanks!
15:09  Yhg1s: I wonder if the inexactness of that recursive-sizeof function is really worth the small gain over just serializing with JSON and checking the length.
15:10  Yhg1s: (if that's the reason to use it, as the documentation suggests it is.)
15:10  ivan`: Ove_: yw, reload for tests
15:12  ivan`: Yhg1s: I was actually using it measuring both inbound and outbound objects stuck in queues
15:12  ivan`: then I made my protocol not insane by only allowing strings
15:13  ivan`: so I have no use for it
15:13  ivan`: I wonder what Ove_ needs it for
15:16  litb: merijn: i've implemented a utf8 string class myself
15:17  litb: merijn: with rotation support. so "hello my €" <<< 3  gets "lo my €hel". and i already read the joel article. it's nice. thanks for distributing rock solid tutorials
15:17  clyphox: i'm just trying to freaking display utf lol
15:17  clyphox: woops i lol'ed
15:17  merijn: litb: Its more that I can't be arsed to explain unicode and pasting the URL is less time consuming ;p
15:18  nosklo: litb: s = "hello my €".decode('utf-8') ; print s[3:]+s[:3]
15:18  litb: nosklo: ohhh!
15:18  Wild_Cat: nosklo: actually, you'll need print (s[3:] + s[:3]).encode("utf-8")
15:18  nosklo: litb: if you decode to unicode, you can do operations like that easily
15:18  litb: nosklo: that's too cute
15:19  ZenGeist: how to interrupt class __init__ ?
15:20  ivan`: interrupt?
15:20  nosklo: ZenGeist: raise an exception?
15:20  ZenGeist: raise an exeption?
15:20  ZenGeist: nosklo, :)
15:20  nosklo: ZenGeist: pull the plug on computer[
15:20  ZenGeist: ok, raise an exeption
15:22 --- zemanel_ is now known as zemanel
15:22  litb: nosklo, your nick sounds nasty
15:22  nosklo: litb: as in?
15:22  nosklo: litb: in which language?
15:23  marcchr1: litb: would you prefer noswc ? ;)
15:26  Mamed: hi you guys i know this is not the right channel but i am hopping you can help me anyways. I am trying to do a frequency sweep in matlab. I have a function that is dependend of the freq. so i wanna do a sweep from 1000Hz to 10^24 Hz when i try to create this vector i get out of memory error. Is there another way to do frequency sweep?
15:26  slackerr: a question who uses pydev/django in eclipse (php ver helios). i want to use project's python shell by executing manage.py shell. I got some garbadge in eclipse terminal. does anybody know how to fix it?
15:27  hearit: hello
15:29  Alberth: Mamed: never used matlab, but do the sweep in smaller pieces, or less precise?
15:30  Alberth: slackerr: perhaps try in #eclipse ?
15:30  nosklo: or #django
15:32  Mamed: aaa ok thanks a lot
15:38  punkoff: is there any library to parse '.diff' patch files?
15:38  nosklo: punkoff: and do what?
15:38  punkoff: e.g. split into set of changes
15:39  Yhg1s: there's nothing definitive, but Rietveld does that kind of thing; I forget what it uses but you may be able to split it off.
15:39  punkoff: split it into set of files being modified and then split each into set of changes
15:41  axiak: anyone have experience with cx_Oracle?
15:41  bsod1: how can I know if user finished editing gtk.Entry?
15:41  axiak: I'm trying to use it with django and i almost instantly get a seg fault :-\
15:42  nosklo: bsod1: the user has to signal it somehow
15:43  nosklo: bsod1: often there's a "Execute" "Continue" or "Submit" button the user clicks when the whole form dialog is filled
15:43  bsod1: nosklo: yea there is a signal about it but the user has to enter CR to emit it
15:43  cesar_CR: axiak, does it work independently. import cx_Oracle from the interpreter
15:43  bsod1: nosklo: I don't want to place a button, if I can do it with just clicking somewhere else(unfocusing the entry field) it would be great
15:44  cesar_CR: axiak, to check if the oracle stuff is working fine
15:44  nosklo: bsod1: that doesn't mean the user finished editing. The user could unfocus the entry to do something else, and return to finish editing
15:44 --- metasyntactic is now known as kunwon1
15:45  bsod1: nosklo: it's ok for me, I want to know if the user unfocused the gtk.Entry
15:46  nosklo: bsod1: you can use the focus-out-event signal like with any other widget
15:46  bsod1: nosklo: ok thanks I'll try it, why I can't see it in doucmentation
15:46  nosklo: bsod1: however it's annoying not be able to alt-tab to check something while I'm writing in some text entry
15:47  nosklo: bsod1: well, it's there
15:47  nosklo: bsod1: I'm not sure why you can't see it
15:47  bsod1: nosklo: can you send me the link
15:47  m0no: ssbr_: well it looks like mktime(datetime.date.today().timetuple()) creates a timestamp just fine - so I have no idea why pytables isnt saving it in Time32Col
15:47  nosklo: bsod1: http://library.gnome.org/devel/pygtk/stable/class-gtkwidget.html#signal-gtkwidget--focus-out-event
15:48  bsod1: nosklo: oh it's a superclass of gtk.Entry
15:48  nosklo: bsod1: of course. All widgets can have focus
15:48  bsod1: nosklo: yea right :)
15:50  ivan`: axiak: maybe cx_Oracle is less thread-safe than django expects
16:08  Diverdude: I get:   No module named matplotlib.pyplot. What package do i need to intall to use this module?
16:09  bsod1: how can I add "create folder" button to gtk.FileChooserDialog?
16:12  rfajardo: In lxml you can input the argument (attribute_defaults=True) when instantiating the parser in order to fill the document with the default values in their absence. It is said to work with DTD, would it work with XMLSchema? How?
16:14  rwat: ok what's the secret to getting zip decoder on PIL? When I build mine it says "ZLIB (PNG/ZIP) support available" but I'm getting the "decoder zip not available"
16:16  ivan`: PIL supports zip?
16:17  ivan`: what kind of image format uses zip?
16:17  rwat: good question, but the error comes while writing a jpeg
16:17  serverhorror: hmm can I somehow know what the keys of the "extra" kwarg where when I do logging.debug("foo", extra={})?
16:17  ivan`: rwat: traceback please
16:18  donspaulding: why don't my "commands.getstatusoutput('foo')" seem to use the current user's PATH as set in ~/.profile?
16:18  Yhg1s: donspaulding: it uses os.environ['PATH']. does that contain what you expect?
16:19  rwat: ivan`: http://pastebin.ca/1995527 - actually seems to be during resize - this is a zope/plone installation
16:19  infobob: http://paste.pound-python.org/show/88/ (repasted for rwat)
16:20  donspaulding: Yhg1s: nope, it doesn't have my PATH at all.
16:20  osfd: Hi there. I'm a little concerned cause I can't "execute" code anylonger and see it in the embedded shell of eric...
16:20  ivan`: python 2.3? jesus
16:20  rwat: yeah, I know
16:20  Yhg1s: donspaulding: well, that's why.
16:20  rwat: it's a bit old, but we had to move it to another place and it's clearly not finding what it should :)
16:21  donspaulding: Yhg1s: but os.environ['USER'] is what I'd expect, so how do I get os.environ['PATH'] to respect my .profile?
16:21  Yhg1s: donspaulding: the PATH is inherited from the process that started Python.
16:21  Yhg1s: like any environment variable.
16:21  Yhg1s: So find out why it isn't set as you expect by the parent process.
16:21  ivan`: rwat: I bet your code thinks a zip file is an image
16:22  ivan`: as in, it's opening it with PIL
16:22  gynter: Hello, any good way to add exactly one year to datetime.date object?
16:22  gynter: Must deal with leap years.
16:22  rwat: ivan`: interesting suggestion, I will check
16:23  serverhorror: gynter:  datetime.timedelta isn't good enough?
16:23  arkanes: gynter: you have to decide what a year means before you can do that
16:24  gynter: serverhorror, well 365 days isn't really an option, basically I need to check for leap year, because python doesn't have a built-in way to do it?
16:24  donspaulding: gynter: http://labix.org/python-dateutil
16:24  hacked: gynter: dateutil.relativedelta(year=1)
16:24  marcchr1: gynter: dt.replace(year=dt.year+1)
16:25  arkanes: hold up
16:25  hacked: date.today() + relativedelta(year=1)  : should work fine
16:25  arkanes: if you say "must deal with leap years", what do you think that actually means?
16:25  marcchr1: where dt is your datetime object
16:26  arkanes: there's no simple definition of a year. You need to decide what that means, and then do the correct operation. What dateutil does might be right for you, but maybe not
16:26  marcchr1: works also with datetime.date objects
16:27  donspaulding: yeah, define a year.  Then use dateutil.
16:27  gynter: one year is a period between 2010-11-18 and 2011-11-18
16:27  bobthemilkman: I have a question more about the python philosophy than how to implement it.  I currenly have 2 paired lists. (filename and some float between 0-1 describing the filename)  I'd like to pick out the 4 unique filenames with the 4 highest floats.  What would be the proper python method of implementing this?
16:27  Yhg1s: bobthemilkman: make it a single list.
16:27  arkanes: gynter: then it's 365 days, and you're done
16:28  gynter: but for 2011-11-18 and 2012-11-18 it isn't..
16:28  Yhg1s: for example, 'L = zip(floats, filenames)'. Then, L.sort() will sort it from lowest to highest float, and L[-4:] will give you the 4 tuples with the highest floats.
16:28  bobthemilkman: You mean a list of tuples?
16:28  bobthemilkman: Oh wow, that's really good!
16:28  marcchr1: gynter: did you see my suggestion?
16:28  arkanes: gynter: whats 2012-02-29 + 1 year
16:28  gynter: marcchr1, yes i'm looking into it
16:29  gynter: arkanes, 2013-03-01 prolly :) i see your point
16:29  marcchr1: gynter: ok
16:29  bobthemilkman: I was thinking that I'd keep them in the separate stacks, and then do a crazy sorted(zip(filename,float),key=operator.itemgetter(1)) for loop, and then pick out the first four unique.
16:29  bobthemilkman: But your way seems like it's about 1/5th of the work.
16:30  marcchr1: hmm, yea that's a problem :)
16:30  bobthemilkman: Oh wait.
16:30  gynter: arkanes, correctly formed problem would have been that I need to add X value to the year part of date object.
16:30  bobthemilkman: Yhg1s: There's one problem. I want the four UNIQUE filenames with the highest values.
16:30  arkanes: gynter: thats a straightforward way to do it
16:30  Yhg1s: bobthemilkman: so make the filenames unique first.
16:30  arkanes: gynter: and it's easy
16:31  arkanes: gynter: you can't modify the date in place, of course, but you can just make a new one
16:31  Dynetrekk: what happens if you open(...) the same file twice?
16:31  arkanes: you'll have to special case dates that dont exist in all years, like feb 29th
16:31  Yhg1s: Dynetrekk: depends on the platform and the mode.
16:32  Dynetrekk: Yhg1s: read mode, macosx. I am writing a file comparison tool and want to test it for the same file twice, just as a test of correctness
16:32  Yhg1s: Dynetrekk: that'll just work then.
16:32  Dynetrekk: Yhg1s: so it is not really a pythonic thing to do?
16:32  Yhg1s: it's not really a Python thing at all.
16:32  gynter: marcchr1,  dt.replace(year=dt.year+1) does the trick
16:33  eyeofhell: Hello. I have a simple Python + Qt app that hands if i uncomment QThread.start() line in it http://pastebin.com/iLu4B9qh  Can anyone please hint me what i'm doing wrong?
16:33  infobob: http://paste.pound-python.org/show/89/ (repasted for eyeofhell)
16:33  gynter: Many thanks to everyone who helped me.
16:33  marcchr1: gynter: except on feb 29th ...
16:33  gynter: hmm
16:33  gynter: good point :)
16:33  Yhg1s: it'll raise an exception on feb 29th, in which case you can add or subtract a day.
16:33  bobthemilkman: Oh, I guess I can now more succinctly state my problem. I have a list of tuples sorted tuples, and want to create a list out of the first item in the tuple.   I guess I can just google for this.
16:34  storrgie: Hey I am starting a new project and I need to set the environment up properly, if I remember right there is something that makes it so it has its own library root... you know so if you use external libs they have to be with it...
16:34  Dynetrekk: Yhg1s: python just calls the corresponding C function I suppose
16:34  Yhg1s: bobthemilkman: [t[0] for t in tuples]
16:34  Yhg1s: Dynetrekk: Python 2.x does, yes.
16:34  Dynetrekk: Yhg1s: this should be safe, right? http://paste.pocoo.org/show/293123/
16:34  Yhg1s: (3.x uses the io library.)
16:34  Dynetrekk: Yhg1s: python2.6 here.
16:34  bobthemilkman: Thanks!
16:34  Yhg1s: Dynetrekk: well, yes, just opening the file and closing it will work on any platform.
16:35  m0no: ok think pytables time32col is sort of broken somehow
16:35  bobthemilkman: That's the magical line that was missing, I think!
16:35  Dynetrekk: good, thanks, Yhg1s
16:35  Yhg1s: Dynetrekk: it's really just write modes that cause weird issues you have to look out for.
16:36  Dynetrekk: Yhg1s: right. btw, does string.split('\n') work for windows files, too?
16:36  bobthemilkman: Although, I think zipped(*tuples) might be better...  Anyway, you've shown me enough for me to find my way. :)
16:36  Dynetrekk: Yhg1s:  i.e. is \n the newline character
16:37  Yhg1s: Dynetrekk: if you open the files in text mode, yes.
16:37  Yhg1s: bobthemilkman: zip(*tuples) gives you two tuples, not a single list.
16:37  Yhg1s: and if 'tuples' is large it can be rather inefficient.
16:37  osfd: anyone using eric IDE around ?
16:38  osfd: please
16:38  bobthemilkman: It's only 24 long, but it will get much longer, maybe several hundred.
16:38  bobthemilkman: I'll play with your version, then.
16:38  Dynetrekk: Yhg1s: i.e. no 'rb', just 'r'. anyway, I can use open().
16:38  Dynetrekk: readlines()
16:39  Yhg1s: Dynetrekk: or you can just use file iteration, which doesn't eat up as much memory.
16:39  Dynetrekk: Yhg1s: memory is of no concern.
16:39  Dynetrekk: Yhg1s: 4 GB ram, 100 line files :)
16:41  aerostop: I'm having trouble with python datetime object out of the google app engine datastore. For some reason I can't add them to a datetime.timedelta() object and get the resulting time. I'm getting "can't concatenate 'str' and 'datetime.datetime' objects"
16:42  aerostop: does someone know if there's something different about GAE datetime objects?
16:42  m0no: aerostop: the error says you are not dealing with a datetime obj
16:42  aerostop: or is it a datetime property specific thing
16:42  aerostop: m0no: yeah, but that's the thing, it IS of type 'datetime.datetime'
16:43  m0no: aerostop: so you have mydatetime + mytimedelta?
16:43  rwat: ivan`: you maybe right about zip files, but it's also giving the message that it can't access the jpeg decoder either
16:43  aerostop: m0no: yes
16:45  rwat: http://paste.pound-python.org/show/90/
16:45  rpage: Can anyone one tell me what i am doing wrong here, i am trying to have a to make my program accept twp options: http://pastebin.com/iNt9pj9G
16:45  infobob: http://paste.pound-python.org/show/91/ (repasted for rpage)
16:45  rwat: I have libjpeg installed and PIL reports that it is built with JPEG
16:45  aerostop: is it something about the '+' operator that is coercing the datetime to a str for the operation? and if so, why, and how do I stop it.
16:45  nosklo: rwat: you're using getopt
16:45  nosklo: argh
16:46  nosklo: rpage: you're using getopt -- that's what's wrong
16:46  rpage: http://paste.pocoo.org/show/293132/
16:46  rpage: i thought that is what i am suppose to use
16:47  rpage: is there something better?
16:47  nosklo: rpage: no, use optparse
16:47  nosklo: rpage: or argparse if you have a newer enough python
16:47  rpage: ok Thanks
16:47  rpage: whats wrong with getopt
16:51  nosklo: rpage: http://paste.pound-python.org/show/92/
16:54  aerostop: ok it's not a GAE thing
16:54  andre_pl: is it possible to zero-pad a regex replacement? for example, with something like re.sub(r"(\d\d?)", r"20\1", "9") could I get the single-digit match to be zero-padded to two digits without needing to use a custom replacement function?
16:54  rpage: nosklo, thats hot, how did it print the usage in like that ianother function?
16:55  nosklo: rpage: it already creates the --help for you automatically based on the options you add
16:55  nosklo: rpage: http://docs.python.org/library/optparse
16:56  aerostop: m0no: ok why would 'datetime.datetime.now() + datetime.timedelta(180)' work fine in the interpreter, but in an script throw the 'cannot concatenate str and datetime object....' error
16:56  rpage: sweet
16:56  nosklo: aerostop: seems that one of those functions have been overwritten by the framework
16:57  nosklo: aerostop: can you provide the full error traceback?
16:57  undecim: Is there some way to see if an integer is in a list of integers without iterating over the list in a for loop?
16:57  nosklo: undecim: if myinteger in list_of_integers
16:57  m0no: aerostop: have you tried inspecting the objects to ensure they are what yuo think they are?
16:57  undecim: nosklo: Awesome. ty
16:57  nosklo: undecim: note that this will iterate over the list in a for loop under the hood.
16:58  rpage: nosklo, can you help me rewrite the portion i showed you?
16:58  aerostop: m0no: yeah i have the traceback here. let me post it somewhere for ya. What's a good way to inspect an object like that?
16:58  nosklo: rpage: I though that's what I did in my paste?
16:58  rpage: oh let me show you me whole script maybe that will work
16:58  undecim: nosklo: Oh well. Guess that's the easiest way for it to be done XD. I really only care about the prettiness of this particular bit, since there are a lot of special cases to this function and I don't want them scattered around in loops.
16:59  nosklo: undecim: perhaps you want to keep sets instead of lists
16:59  nosklo: undecim: lookup in a set is really fast because it uses a hash table lookup instead of a loop on all elements
17:00  aerostop: m0no: not a very descriptive traceback but at least it shows I haven't got any syntax errors. http://pastebin.com/fpUHA1bQ
17:00  infobob: http://paste.pound-python.org/show/93/ (repasted for aerostop)
17:00  nosklo: undecim: however sets don't allow duplicated elements and don't keep order
17:00  nosklo: aerostop: well, you're concatenating
17:00  echoprinter: My output is coming out like 43.0 but I want 43.00 where are the docs that tell me how to do this?
17:00  nosklo: aerostop: read your line as  ("datetime now + timedelta: %s" % datetime.datetime.now()) + datetime.timedelta(180)
17:01  nosklo: aerostop: since % operator has higher precedence than + operator
17:01  undecim: nosklo: If that's more efficient, that sounds perfect then. Idc about order, I just want to know if the argument is one of the specific special cases
17:01  rpage: nosklo, http://paste.pocoo.org/show/293140/
17:01  nosklo: undecim: well, use sets from the start, then
17:01  undecim: nosklo: Gotcha... Just read the py docs and saw "Common uses include membership testing"
17:02  nosklo: rpage: after doing http://paste.pound-python.org/show/92/ , you can get the domain on opts['domain'] and the alias on opts['alias']
17:03  aerostop: nosklo: I'm getting the same results no matter how I set it up. This is several tries later, simple as possible for debug. I assumed the '+' operation would be evaluated before the string placement, but how would it matter?
17:03  jophish_: Hi all!
17:03  nosklo: echoprinter: print '{number:.2f}'.format(number=43.0)
17:03  jophish_: I have a python script and an interactive binary
17:03  jophish_: I would love for this script to play the part of the user, and inteface with this binary
17:04  jophish_: so python reads stdout of this binary, and puts a new message to stdin of the binary
17:04  m0no: aerostop: try logging.debug('%s' % (dt + td, ))
17:04  nosklo: aerostop: you're doing "s % dt + td". That means "(s % dt) + td" because % has precedence.  (s % dt) returns a string.
17:05  nosklo: aerostop: so you're doing some_string + some_timedelta
17:05  nosklo: aerostop: which is not allowed, as the error displays
17:05  aerostop: m0no, nosklo: ahhhhhh thanks
17:05  nosklo: aerostop: you want to add the timedelta to the datetime, *before* it gets interpolated with the string
17:05  rpage: not sure what you mean
17:05  aerostop: m0no, nosklo: Live and learn
17:05  rpage: can you put it together?
17:06  aerostop: m0no, nosklo: I would not have thought it worked like that.
17:06  nosklo: rpage: what didn't you understand?
17:06  nosklo: no, I can't put it together for you.
17:06  bobthemilkman: Okay, I wrote two simple python scripts to be called from bash.  Now I'd like to write a 3rd python script that will run the other two sequentially, infinitely (until SIGINT).  importing one as a module seems to only work once. Is there something I'm missing?
17:07  aerostop: m0no, nosklo: How can I force precedence without writing the addition on another line? if I put it inside parenthesis?
17:07  nosklo: aerostop: yes.
17:07  nosklo: aerostop: like any other operator
17:07  nosklo: % binds like glue
17:07  rpage: should i removing everything that i h ave for getopts
17:07  regebro: Bleurgh. Finished (I think) writing the chapter on how to write 2to3 fixers. It gives me a headache. :)
17:07  aerostop: m0no, nosklo: excellent, thanks!
17:07  rpage: and replace it with what you have for optparse
17:07  nosklo: rpage: did you check the code I pasted? Did you try it?
17:08  rpage: trying n ow
17:08  rpage: trying to fit it in place of my script
17:08  nosklo: rpage: no. You have to understand the code I pasted fully, and its implications and different options, before you integrate it with your software.
17:08  nosklo: rpage: trying to fit it without understanding it is useless
17:08  rpage: right
17:08  nosklo: rpage: read this fully, twice: http://docs.python.org/library/optparse
17:09  rpage: ok
17:09  nosklo: regebro: cool, where is it
17:10  regebro: nosklo: Not published anywhere. Will be a book. :-)
17:10  regebro: nosklo: I can send you a draft pdf if you promise to give me feedback. :)
17:10  nosklo: bobthemilkman: while : ; do python script1.py ; python script2.py ; done
17:11  bobthemilkman: Yeah, I need it to be in python so that I can do some other stuff between the two of them.  But I think I have it figured out. :)
17:11  nosklo: bobthemilkman: place the code in a function you can call
17:11  nosklo: bobthemilkman: while True: script1.main() ; script2.main()
17:11  bobthemilkman: That's what I did. I made a main() function, and also an if __name__ == '__main__': main()
17:11  regebro: The fixer chapter is not the highlight though. There's no documentation on this anywhere, so it only contains what I have been able to deduce from reading code and experimenting for my own fixers.
17:12  manhunter: how can i take input from keyboard, what's the funcion?
17:13  manhunter: is it ? var=sys.stdin.readline()
17:13  nosklo: manhunter: x = raw_input()
17:14  nosklo: manhunter: sys.stdin.readline() also works fine
17:14 --- dpn`_ is now known as dpn`
17:16  soomsoom: Hello, if I want to build Module system, from where i should start?
17:16  nosklo: soomsoom: what does that even mean?
17:17  may_null: Hi, does anyone know any python module or something for calculating week of year for given DateTime
17:17  nosklo: may_null: dateutil
17:17  soomsoom: nosklo: i want my program to have option to load modules
17:18  Spida: hi
17:19  nosklo: soomsoom: you mean like a plugin?
17:19  soomsoom: yes
17:19  may_null: nosklo: thanks
17:20  pigdude: I sort with     tpls.sort(key=operator.attrgetter('name'))
17:20  Spida: how do I print a floating point number with leading zeros for up to 2 digits and 3 digits after the dot? "foo %02d bar"%(1.234567) gives me 01 (without the 3 digits after the dot). what am I doing wrong? where is this documentedß
17:20 * plwert grabs a bowl of popcorn and watches the vague question unfold
17:21  nosklo: soomsoom: http://twistedmatrix.com/documents/current/core/howto/plugin.html
17:21  pigdude: an entry with name beginning with "O" will appear before one beginning "N"
17:21  pigdude: what am I doing wrong?
17:21  nosklo: soomsoom: that's the best approach I've ever seen
17:21  soomsoom: nosklo: is twisted have support for python3?
17:21  nosklo: soomsoom: no. Not many things have, though
17:22  regebro: pigdude: Is the O uppercase and the N lowercase?
17:22  soomsoom: nosklo: problem, cause i am in ArchLinux... :X
17:22  nosklo: soomsoom: but you can get the plugin idea from it and develop something that looks like that
17:22  splashs: can someone explain why there are validators for both, forms and models? wouldn't it be better to only validate at the model level?
17:22  nosklo: soomsoom: you can install python 2.x on arch
17:22  pigdude: regebro: no
17:22  pigdude: regebro: they have same case
17:23  soomsoom: nosklo: i can, but python cant find twisted... and yes twisted is installed :X
17:23  splashs: oops, wrong channel
17:23  nosklo: soomsoom: how did you install twisted?
17:23  soomsoom: nosklo: yaourt -S python-twisted
17:23  regebro: pigdude: Well, there is nothing wrong with the code as such, so maybe the attrgetter doesn't return what you expect it?
17:23  pigdude: regebro: I'll debug, thanks
17:24  nosklo: soomsoom: well, try installing it from source tarball, by running python setup.py install
17:24  nosklo: soomsoom: errr
17:24  nosklo: soomsoom: python2 setup.py install
17:24  soomsoom: nosklo: i tried it too... not working...
17:24  nosklo: soomsoom: did you try with "python2" executable?
17:24  soomsoom: yep
17:24  nosklo: soomsoom: what output did you get?
17:25  soomsoom: it installed... but when i run the program with python2 it cant find this module :X
17:25  nosklo: soomsoom: what error do you get?
17:25  soomsoom: dont remember
17:26  nosklo: soomsoom: ...
17:26  soomsoom: i cant run this program right now
17:26  soomsoom: im developing a new one
17:26  soomsoom: with python3...
17:26  nosklo: soomsoom: well, good luck
17:27  Dynetrekk: does there exist a method along the lines of 'hello'.length() ?
17:27  nosklo: Dynetrekk: len("hello")
17:27  soomsoom: nosklo: tnx!
17:27  Dynetrekk: nosklo: I know. I just figured it would be slower than, say, if the string object remembered its length. because len uses iteration, right?
17:27  nosklo: Dynetrekk: no.
17:27  Dynetrekk: nosklo: so what happens when I call len('ham') ?
17:28  nosklo: Dynetrekk: len asks the object for its length. Each object has a different way of implementing it.
17:28  Dynetrekk: cool! thanks nosklo, that's great.
17:28  nosklo: Dynetrekk: for strings and lists, the length is returned in O(1) since tehy already knows their length upfront
17:28  Dynetrekk: nosklo: right, that's what I would expect them to do, optimally
17:29  Dynetrekk: nosklo: I just thought len() was a fallback which used iteration, if nothing else existed
17:29  nosklo: Dynetrekk: in fact, if the object supports iteration but has no length implementation, len() fails
17:30  nosklo: Dynetrekk: since it will refuse to consume the iterator just to know its length
17:30  Dynetrekk: nosklo: aha. so the class has to implement __len__ or a similar function.
17:30  nosklo: yes
17:31  kerio: Dynetrekk: think unlimited iterators
17:31  gdbla: why are multiple assignments to integers from -5  up to 256  references to the same object, while anything outside of that range references to different objects?
17:31  Dynetrekk: kerio: what's that?
17:31  kerio: what would len() do for unlimited iterators
17:31  kerio: count up to infinite?
17:32  Dynetrekk: kerio: ah, but only chuck norris can do that.
17:32  nosklo: gdbla: that's a implementation detail.
17:32  kerio: thus, you have to specify a __len__
17:32  kerio: :)
17:32  gdbla: nosklo: only cpython?
17:32  nosklo: gdbla: it's not guaranteed to work that way for all python implementations
17:32  kerio: gdbla: maybe!
17:32  nosklo: gdbla: not even guaranteed between versions of cpython
17:32  nosklo: gdbla: it's just optimization
17:33  kerio: check for equality
17:33  nosklo: gdbla: shouldn't matter since integers are immutable anyway
17:33  nosklo: gdbla: so you can just use equality checks
17:33  gdbla: i was trying to figure out when python does aliasing
17:34  gdbla: are there any hard rules?
17:34  nosklo: gdbla: no. It's optimization implementation version specific
17:34  Dynetrekk: does a function exist for counting the number of unique elements in a list? or just use len(set(mylist))?
17:34  nosklo: Dynetrekk: that's a very quick way.
17:35  gdbla: i'm trying to understand beyond integers to other data types as well
17:35  Wild_Cat: Dynetrekk: I think len(set(mylist)) is the easiest and quickest way, assuming an arbitrary list of hashable objects
17:35  Dynetrekk: seems to work ok
17:35  nosklo: Dynetrekk: if all elements are hashable, that's optimal
17:35  Dynetrekk: nosklo: all strings in this case
17:35  Dynetrekk: I am comparing text file contents
17:35  nosklo: gdbla: the basic rule is "do not rely on it, pretend it doesn't happen"
17:36  gdbla: nosklo: you mean for aliasing in python in general?
17:36  echoprinter: nosklo: thank you.
17:36  romankrv: Hi. When I copy source python code from pdf-file and it have quotation characters "  to ipython-shell that I get characters like `` and code not work   that is fix?
17:36  nosklo: gdbla: if you have a = 5, and later b = 5, don't rely on the fact that they could be the same integer object
17:37  nosklo: gdbla: since you created them in different places, they could be different objects with the same value
17:37  Dynetrekk: nosklo: what was 'hashable' again?
17:37  nosklo: Dynetrekk: "hashable" is anything you can extract a hash from
17:37  nosklo: Dynetrekk: basically immutables
17:37  Dynetrekk: so it can be a dict key, for instance. but how do you know?
17:37  Dynetrekk: ah, so no self-made objects
17:38  nosklo: Dynetrekk: your own object is hashable by default
17:38  Dynetrekk: nosklo: okay... I guess this is one of the things I never thought about a lot
17:38  gdbla: nosklo: it's just that i've seen people use the fact that lists are passed by reference when they're assigned another list's name
17:38  nosklo: gdbla: no...
17:38  nosklo: gdbla:
17:39  gdbla: i wanted to know if this fact is used for other data types
17:39  nosklo: gdbla: variables are just names that point to objects
17:39  nosklo: gdbla: if you do a = 5; b = a # then a and b both point to the *same* object 5
17:40  nosklo: gdbla: however since integers are immutable, if you do `a = a + 1` you're creating a new object `6` and assigning the name `a` to point to it
17:40  nosklo: gdbla: `b` still points to the unchanged, immutable int object `5{
17:40  nosklo: `5`
17:41  karmic-koala: hi all i have a string, how do i get first n words off that string ?  for word in sentence.rsplit(): empty_word = empty_word.join(word)   fails, any ideas?
17:41  nosklo: gdbla: however, since lists are mutable, a = [] ; b = a ; b.append('foo') # will modify the list object that both `a` and `b` are refering to
17:41  nosklo: gdbla: there's only one list, and it was mutated. `a` and `b` will see the changes because they're both references to the same list
17:41  bahamas: karmic-koala: string.split()[:n]
17:42  nosklo: karmic-koala: ' '.join(sentence.split(None, n)[:n])
17:42  karmic-koala: bahamas, but that adds the extra ['  '] to my words, i don't want them extra chracters
17:43  gdbla: nosklo: so then for ints, the fact that they point to the same object has nothing to do with any comp-sci basis, right?  i think that's what was confusing me
17:43  gdbla: comp-sci meaning concepts like mutability
17:43  karmic-koala: nosklo, you're a star :) thanks
17:44  gdbla: vs. just doing a hack for optimization
17:44  nosklo: gdbla: well, integers are immutable
17:44  gdbla: so it's slightly inconsistent idea-wise so that it works faster
17:44  Argorok: hello, I have a ms-dos file encoded in cp850, how can I convert it do unicode? I need these files data :/
17:45  matkor: Hi ! What should be used as non-modifable dict in python ? like frozendict ?
17:45  matkor: python 2.7
17:45  nosklo: gdbla: thing is, if you do "a = [] ; b = []" then a and b will point to two different lists. Appending to one doesn't affect the other. Similarly, "a = 5 ; b = 5" should make a and b point to two different ints. However, as a optimization, they point to the same, cached int, since it is immutable anyway so it doesn't matter.
17:45  nosklo: gdbla: that's the optimization
17:45  Wild_Cat: matkor: a plain old dict. There are no frozendicts in the stdlib.
17:46  nosklo: matkor: just don't modify it
17:47  Argorok: google isnt helping me
17:47  rpage: nosklo, Think i got it
17:47  rpage: http://paste.pocoo.org/show/293163/
17:47 --- el_kevino is now known as CptPicard
--- Log closed Thu Nov 18 18:39:12 2010
--- Log opened Thu Nov 18 18:44:36 2010
18:44 --- Users 824 nicks [0 ops, 0 halfops, 0 voices, 824 normal]
18:44  Cope: indeed, changelog explictly says it includes pip
18:45  dhiaeldeen: http://www.riverbankcomputing.co.uk/commercial/pyqt << what is the licenese price of pyqt?
18:45  mordy: i don't know.. you are aware you can also use the GPL version
18:45  dhiaeldeen: i can't find it
18:45  dhiaeldeen: i know that
18:45  mordy: depending on what you're doign. you probably need to call them up
18:46 --- Channel #python was synced in 91 seconds
18:46  dhiaeldeen: but in case of i want to switch
18:46  dhiaeldeen: how much would that cost me?
18:46  mordy: you can also use PySide which is LGPL
18:46  mordy: and is more or less the same API
18:46  mordy: with some subtle differences in behavior
18:46  dhiaeldeen: do wxpython work will on xp?
18:46  dhiaeldeen: well i mean
18:47  mordy: pyside will work on windows xp, yee
18:47  mordy: don't know about wx, probably too
18:47  mordy: most gui toolkits are multi platform
18:48  mordy: pyqt is made by a third party (riverbankcomputing) and is gpl-licensed, pyside is made by nokia, based on pyqt, and is lgpl licensed
18:48  mordy: in performance they are about the same (pyside uses a bit less memory)
18:48  dhiaeldeen: by nokia?
18:49  mordy: nokia makes qt
18:49  mordy: and pyside
18:49  dhiaeldeen: can i run a python program on a playstation portable?
18:49  dhiaeldeen: http://www.thenewboston.com/?cat=41&pOpen=tutorial <<<<<< WXpython tutorials
18:49  mordy: well great
18:49  dhiaeldeen: let's see if expython supports python 3
18:50  dhiaeldeen: this might interest some
18:50  dhiaeldeen: http://www.velocityreviews.com/forums/t342732-wxpython-vs-pyqt.html
18:50  mordy: that post is from 2005
18:51  Aufwind: If I want to check a bolean variable for Rue/False, what is prefered in python?             if variable is True:   or if variable == True??
18:51  mordy: if variable
18:51  gllvr: if not variable
18:51  mordy: don't use 'is' unless you know what it does
18:51  Aufwind: Well, that sounds obvious... Thanks!
18:51  Aufwind: :D
18:51  mordy: it compares object references, not values
18:52  Aufwind: Ok thanks
18:52  mordy: if foo is equivalent to something like: if bool(foo) == True
18:53  dhiaeldeen: ok, will use WxPython
18:54  mordy: good for you
18:54  Baughn: There isn't a control structure that'll let me repeat some commands N times without actually binding an index variable?
18:55  gllvr: for _ in xrange( 0, N ):   ?
18:55  mordy: _ is an index variable
18:55  gllvr: i guess, kinda...
18:55  mordy: it's a conventionally 'throaway' variable, but it's still a variable
18:55  gllvr: does it really get bound though?  i thought you could not read it.
18:55  Baughn: Try it.
18:56  gllvr: ah.  you can read it.
18:56  Baughn: If it was genuinely unreadable, I wouldn't mind.
18:56  gllvr: first thing learned today... and still on coffee #1.
18:56  mordy: >>> [sys.stdout.write(str(_)) for _ in xrange(3)]
18:56  mordy: 012[None, None, None]
18:56 --- chanuxZzZz is now known as chanux
18:57 --- chanux is now known as cx
18:57  NateW: how can i create a list with an x amount of sublists, same idea as : [[]]*i  except doesn't link the values
18:57  Twey: Baughn: iter = some_iterable.__iter__(); try: while iter.next(): print "foo"; except StopIteration: pass
18:57  Twey: :þ
18:57  mordy: Twey: you'd still need an index variable of some sort to keep track of how many iterations
18:57  Baughn: ..right.
18:57 --- meder is now known as mederEsite
18:58  Baughn: some_iterable could be range(5)
18:58  nosklo: Twey: you have to actually create the lists
18:58  mordy: as __iter__ would need to return an object that has next()
18:58  Baughn: But see, this is why I like monads. :P
18:58  mordy: and next() needs to know when to raise StopIteration
18:58  nosklo: er
18:58  nosklo: NateW: you have to create each list
18:58  nosklo: NateW: lists = [[] for x in xrange(i)]
18:58  Baughn: for _ in xrange(1), please. ;_;
18:58  Baughn: *i
18:58  nosklo: no
18:59  Twey: mordy: No, __iter__() needs an index variable.  The user doesn't.
18:59  mordy: ahh ok
18:59  mordy: so you're just tucking away the index variable
18:59  Twey: But it was a joke anyway — that's too ridiculous to actually use.
18:59  nosklo: Baughn: _ is often used as a function for gettext translation -- trying to use it as a throwaway variable is a terrible idea
18:59  Twey: mordy: Also, it doesn't necessarily need an index variable
18:59  mordy: yeah
18:59  nosklo: I had to change lots of code from _ to ign many times before
18:59  Twey: mordy: It could e.g. use continuations, or read from a stream
18:59  Twey: The implementation of the iterator is abstracted away — that's kind of the point
19:00  mordy: or he could just use a list of None, with as many elements as he needs iterations
19:00  mordy: and then while l: ...  l.pop() ..
19:00  Twey: Heheh
19:00  Baughn: nosklo: Oh, good point.
19:01  Baughn: nosklo: I'll just use ‗ instead.
19:01  mordy: i don't know why you need to hide an index variable though.. or what's wrong with using '_'
19:01 * Twey likes.
19:01  mordy: i don't have unicode here :(
19:02  mordy: i just see a ^W in a red background
19:02  Baughn: mordy: 'Double underscore'.
19:02  mordy: ahh
19:02  mordy: __
19:02  Twey: mordy: But one underneath the other.
19:02  mordy: http://www.fileformat.info/info/unicode/char/2017/index.htm ?
19:03 * Baughn wonders how best to make a circular list
19:03  Twey: mordy: Yup
19:03  mordy: you mean a ringbuffer?
19:04  Baughn: mordy: That'd work.
19:04  mordy: or a double-linked list?
19:04  nosklo: Baughn: I don't think ‗ is a valid identifier
19:04  mordy: they're two different things
19:04  Baughn: nosklo: I know. That's part of the joke.
19:04  nosklo: Baughn: py3k accepts some unicode identifiers though
19:04  Baughn: mordy: Well, basically I just need to iterate over a list in a circular manner. Nothing particularly fancy.
19:05  nosklo: Baughn: itertools.cycle?
19:05  mordy: Baughn: you can just use the slice operators.. let me see if i can make an example real quick
19:05 * Baughn likes itertools.cycle
19:05  NateW: nosklo: did xrange get removed from py3.1?
19:05  Baughn: mordy: Yeah, I know I could use those
19:05  nosklo: NateW: no. It was renamed to "range"
19:05  kurrata: hi, is there some trick to get key value from list?
19:05  Twey: Py3 has a bunch of different iterators where Py2 uses lists
19:05  Twey: Tripped me up a bunch of times
19:06  NateW: nosklo, then was range just removed?
19:06  NateW: (old version of range)
19:06  saxamo: kurrata: are you referring to a  dictionary within a list?
19:06  Baughn: NateW: It got renamed to lambda l: list(xrange(l))
19:08  mordy: usually if i want fast lookup when i have two lists and i want each to be indexable by the other, i just create two dicts and make wrapeprs to keep them synchronized
19:08  kurrata: saxamo dont know how it calleed but test = { 'core':4, 'extra':3,} i mean core/extra
19:09  karthick87: Can anyone help me to fix this error http://paste.ubuntu.com/533938/
19:09  mordy: those are keys
19:09  saxamo: right, it's a dictionary. In this case your strings are keys and the integers are values
19:09  mordy: if can't find the 'GenericLyric' module
19:10  saxamo: to refer to one of the key:values you'd type something like test[core] to refer to 4
19:10  saxamo: test['core'] rather
19:10  mordy: karthick87: ^, find out what package is suppose to provide that module. maybe somehting like apt-file search GenericLyric
19:10  mordy: or maybe it's not being put in your path
19:11  karthick87: mordy: I installed CoverGloobus on my ubuntu 10.10. But every time I try to run it, I get the error
19:11  mordy: if you want to reference the strings by the integers too, then you should be using a second dict
19:11  kurrata: saxamo i knoe that part but can i do something like this "if package[0] == i[key]:", and if i can on what i have to read?
19:11  mordy: what is i here?
19:12 * mordy sigh
19:12  mordy: what are you trying to do?
19:12  kurrata: mordy in package[0] are strings i use as key for other list
19:12  mordy: ahh
19:12  mordy: well, keys are used for *dicts*, not *listS*
19:12  paul_andrew: Hi there, I want to pass arguments to a variable and reuse the content of that variablet in another defined function. I think its global variables im going to use but i cant get this to work.. any ideas? http://bpaste.net/show/11267/
19:13  mordy: understand that. the terminology is important because lists are another datatype
19:13  karthick87: mordy: I have a installed a package named CoverGloobus on my ubuntu 10.10.When running the application i get some errors which i have shown you..
19:13  nosklo: paul_andrew: just pass it as argument?
19:13  mordy: then either your ubuntu is messed up or the package is messed up
19:13  mordy: sorry, can't give you any more help than that
19:14  paul_andrew: nosklo: i dont know ive started coding python 2-3 days ago.. il google it and get back.
19:14  nosklo: paul_andrew: do you know any other programming language?
19:15  mordy: it seems he does
19:15  nosklo: karthick87: the problem seems to be related with that software you installed
19:15  deavid: i'm trying to do something with ssl examples of python-twisted, but i can't find documentation useful for me; i was reading the examples (and they worked) but i can't figure how to do several things
19:15  ido-: hi. how do i check a regex match for a string that does not include a substring (?!), but how do i actually check the match ?
19:15  nosklo: karthick87: report the problem to the authors
19:15  karthick87: nosklo: oke
19:15  nosklo: deavid: like what?
19:15  nosklo: deavid: also, #twisted can be useful
19:16  mordy: ido-: it will return a match object if found, and None if not
19:16  paul_andrew: nosklo: ive touched c, c++, asm hla, html, css and normal shellscripts... ive also done some visual basic some years ago. Im not a developer no :)
19:16  ido-: when i do regex.true, an object is always returned, and not None
19:16  ido-: even if it does not match
19:16  nosklo: paul_andrew: did you read the python tutorial?
19:16  deavid: like... the ssl client requires a specific CA for the server cert; or the inverse; the server requiring a client certificate signed by a known CA
19:16  nosklo: ido-: what is regex.true?
19:17  paul_andrew: nosklo: im on the tutorial yes, but i have not read it all :) im still learning.
19:17  deavid: i've seen sometihng in twisted to do that but no idea how to apply that; i can't figure on how to use the methods
19:17  ido-: reg.search('South Park - 14', 'South.*(?!14)')
--- Log closed Fri Nov 19 09:59:40 2010
