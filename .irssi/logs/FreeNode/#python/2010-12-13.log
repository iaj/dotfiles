--- Log opened Mon Dec 13 11:22:52 2010
11:22 --- Users 732 nicks [0 ops, 0 halfops, 0 voices, 732 normal]
11:22 --- Channel #python was synced in 18 seconds
11:22  lucian: daemonkeeper: if your hex marker is always \, you could replace that with a 0 and use int
11:23  iaj: lo there
11:23  iaj: is there any recommendable book for python now that I'm just placing an order on amazon?
11:24  slackytude: y0 beetches
11:24  daemonkeeper: Yes, it is. I'll try VladDrac's suggestion give a try fist.
11:24  erifax: iaj: i found o'reilly's "Learning Python" a good reference, though my copy is pretty old
11:25  daemonkeeper: Thank you VladDrac. Your suggestion works: bin( struct.unpack( "B", octet )[0] )  looks a bit ... ugly though.
11:26  _habnabit: ord
11:26  Vornicus: It occurs to me that even with three or four python books on the shelf, I've never really, uh, /used/ any of them.  The official tutorial literally taught me to program, and I use the online references.
11:26  VladDrac: right, I assumed you'd have multi byte binary strings, eg "\xff\xff"
11:26  VladDrac: then ord() won't do
11:26  VladDrac: if it's a single byte, ord()
11:27  _habnabit: iaj, the only thing I ever needed was docs.python.org.
11:27  _habnabit: iaj, the tutorial is pretty simple, and the library references is good.
11:29  Vornicus: And if you get really stuck, well, here's a room with 733 python nerds in it.
11:30  thrillERboy: iaj, theres a very good free book on python
11:31  thrillERboy: iaj, http://www.swaroopch.com/notes/Python
11:34  nguru: Hi pythonist
11:34  nguru: i need a help on python meta programming
11:35  nguru: how do i add a dynamic attribute ,when the the object is initilized
11:35  jorrit: What is a dynamic attribute?
11:36  verte: setattr(self, name, value) I guess
11:37  jorrit: well, self.name = value works too.
11:37  jorrit: Depends on what he means by 'dynamic'.
11:37  bove: I'm using subprocess.Popen to use a linux find command, but can't figure out how to make it skip hidden files http://paste.pound-python.org/show/483/
11:37  jorrit: nguru, ?
11:38  Alberth: bove: that looks like a question about find, rather than about python
11:38  iaj: erifax, _habnabit, thrillERboy thanks :)  well I could get a book for free - so why not - I chose the learning python one now :)
11:38  xota: hi! why this code doesn't update my dictionary as sorted, but it print is sorted? Can I force .update() to do that?
11:38  iaj: + yeah the docs appear to be amazing
11:38  Alberth: bove: why don't you use os.walk() ?
11:38  jorrit: xota, dictionaries cannot be sorted.
11:38  jorrit: xota, they have no order.
11:38  verte: xota: dictionaries have no order, and so cannot be sorted
11:39  bove: Alberth: I would expect find to be faster
11:39  nguru: jorrit: like the django model
11:39  verte: xota: you can create a list of keys and sort that if you like.
11:39  jorrit: nguru, don't know django.
11:40  ccxCZ: actually they do have order determined by hash keys, but that's irrelevant
11:40  Alberth: bove: you're doing mainly disk access, speed is limited to disk speed anyway
11:40  verte: ccxCZ: not even, really. two dictionaries can have exactly the same content without iterating in the same order, and the order they do come out can vary according to platform.
11:42  Peng: ccxCZ: The order is obviously "defined" in some way -- computers are deterministic -- but the language specification defines them as unordered, so that's what you should rely on.
11:42  ccxCZ: should have I said determined by hash function and insertion order? yes you're right
11:42  xota: thanks verte and jorrit. I will try your solution verte :)
11:43  bove: Alberth: I think find does some low-level buffering
11:45  Alberth: bove: possibly, find can also do a lot more than you need which may introduce overhead.
11:45  lvh: hi
11:46  verte: as may moving it out into a separate process.
11:46  verte: ellvee
11:46  lvh: aitch!
11:47  lvh: I'm sorry once I develop a time machine I will tell my parents to pick a name with a more pronouncable acronym
11:48  Alberth: bove: did you actually measure anything?   If not, you are just acting on assumptions, and making a simple task more complicated than needed (needing more code, taking longer to program), without knowing whether it is worth the trouble.
11:48  nosklo: ... or a nickname unrelated to your name
11:48  cnf: wonder if i could run py2exe on a unix machine
11:49  nosklo: cnf: I've tried running it into wine, but gave up.
11:49  cnf: meh, bummer
11:49  verte: cnf: in theory it is possible, in practice, I gave up too
11:50  cnf: needing a windows machine to make the exe kind of defeats the purpose
11:50  verte: isn't that what botnets are for?
11:50  donkeyboy: anyone able to point me to the right direction of the source file that contains the *args unpacking in cpython?
11:51  cnf: verte: if you have one handy, you could lend it to me
11:51  verte: donkeyboy: well, there are several parts to that
11:53  verte: donkeyboy: there's an opcode for it, so you could start in PyEval_FrameEvalEx or whatever in eval.c
11:53  donkeyboy: verte: am looking for the c code that turns def func(*args) in to def func(arg1, arg2, arg3)
11:53  Oli````: Anybody know of a library that can connect to a fastcgi socket and test if it's alive?
11:53  verte: donkeyboy: are you talking about packing or unpacking? no such thing happens at definitions
11:53  donkeyboy: verte: ok great thanks. Busy trudging through Parser/parser.c and had a feeling it would be quicker to just ask for directions :-D
11:54  verte: donkeyboy: when I want to know how something works, I usually start with dis.dis
11:56  ab3: hello
11:57  ab3: how can i get a body element from a html page that is nested in a body element by using BeautifulSoup
11:58  metalfan_: hi
11:58  nosklo: ab3: BeautifulSoup is unmaintained
11:58  nosklo: ab3: use lxml.html
11:59  donkeyboy: verte: Thanks for the tips
11:59  virhilo: nosklo: and damn slow:)
11:59  metalfan_: i only get output from my python script when its aborted via ctrl+c,  even a simple print 'init' in __init__  will not appear on the screen until abort?
11:59  nosklo: ab3: doc.xpath('//body//body') will get you all body elements inside body elements, I think
12:00  cnf: you know, python on windows gives me headaches
12:00  ab3: nosklo: the most recent version of BS is from nov 21  2010
12:01  nosklo: ab3: yeah, but it was a re-release of an old version
12:01  nosklo: ab3: because the previous release had problems, so they reverted to something even older
12:01  margh: my first day of learning python, and the first question :-) which version should i install? apt-get get automatically 2.5, what about the newer versions?
12:01  cnf: 2.7 i'd say
12:01  ab3: nosklo: k thx
12:01  nosklo: margh: 2.x is fine.
12:02  nosklo: margh: which os/platform are you using? Debian?
12:02  ab3: they should have put that on the main page that it is unmaintained
12:02  nosklo: ab3: they did
12:04  margh: debian
12:04  cnf: obviously debian
12:04  ab3: nosklo: well in that case it wasn't very obvious
12:04  ab3: :)
12:04  cnf: it has very outdated packages as default :P
12:04  shylent: "stable"
12:04  shylent: its called stable
12:04  nosklo: margh: yeah, python 2.5 is fine. You don't have to use anything else to learn... the differences are small enough so you can learn the language and leave version stuff to later
12:04  cnf: it's called "old shit"
12:07  shylent: nah, rather use Arch and have python3 installed by default :P
12:07  inkjetunit: does 2.5 have print()?
12:07  bob2: no
12:07  bob2: but it is valid anyway
12:08 --- kn_ is now known as NOTICE
12:08  bob2: (but may do something slightly different to what you want)
12:08 --- NOTICE is now known as niak
12:09  nosklo: margh: do you know any other languages? Or python is first?
12:11  margh: well because everybody talking about ruby, i had a look at it, but for a no programmer its to abstract was my impression, and i like the text indention in python :-)
12:11  nosklo: margh: so python is your first
12:11  nosklo: margh: I recommend this book http://bit.ly/40CBHF
12:12  nosklo: margh: it's on the /TOPIC of the #python channel, very nice book
12:12  cnf: damnit, i hate url shortners
12:12  margh: ha! i have it :D
12:12  nosklo: margh: this is good too http://learnpythonthehardway.org/
12:13  pratz: hehy guys i am trying to send mail using smtp , i am getting the following error "Errno 111 Connection refused" , i think it is this line "smtplib.SMTP('localhost')
12:13  pratz: Any advice
12:14  bahamas: pratz: do you have a smtp server running?
12:14  nosklo: pratz: start your main server
12:14  nosklo: er
12:14  nosklo: pratz: start your mail server
12:15  virhilo: margh: i recomend core python programming
12:15  virhilo: s/recomend/recommend/
12:15  margh: thx for the hints guys! ill have a look at them!
12:17  margh: ah, i cant install python > 2.5 via apt get install, because there no packages for lenny yet, right?
12:18  margh: so in future, if id like to use python > 2.5. i need to install it manually?
12:18  nosklo: margh: yeah, but, as I said, python 2.5 is fine
12:18  nosklo: margh: why would you want to use > 2.5?
12:18  Alberth: newer == better
12:18  margh: noskio, im planning to use django, an i read that there is 2.6 recommended
12:18  nosklo: Alberth: not necessarily
12:18  margh: for some apps
12:18  nosklo: margh: django runs on 2.4-2.7
12:19  margh: yeah, but some external apps id like to play with
12:19  nosklo: margh: yeah... some apps, maybe. Well, why are you using debian stable?
12:19  margh: its the system my provider throw on my vserver =)
12:20  nosklo: margh: vservers are cheap, get a better one
12:20  cnf: or install ubuntu on your home machine
12:21  margh: everybody told me debian is the system to go with
12:21  margh: grml
12:21  cnf: everybody was wrong? :P
12:21 * engla likes debian, I use debian testing
12:21  nosklo: margh: it's main selling point is stability, yes
12:21  engla: margh: upgrade to debian squeeze
12:21  nosklo: margh: but then you get to use older software
12:22  nosklo: margh: it's not that big of a problem as I said, but if you want to use newer software, you need to upgrade
12:22  margh: you mean to use newer software by package managment?
12:25  ab3: is the soupparser from lxml based on BeautifulSoup or does it just use the same technique
12:26  TheSheep: ab3: I think neither
12:28 --- kanor is now known as tyrus
12:30  nosklo: ab3: it uses a different parser, but produces compatible objects. I suggest you avoid it
12:30  gamemakingdude: Hmm
12:31  gamemakingdude: I've been reading the book and im up to hangman now
12:31  cnf: is he dead yet?
12:31  gamemakingdude: I'm taking a break
12:31  gamemakingdude: I just went through 3 chapters
12:31  gamemakingdude: in one go
12:34 --- tyrus is now known as kanor
12:36  Alberth: gamemakingdude: you are also making exercises? reading (about) programs is much easier than writing them.
12:37  gamemakingdude: Alberth: What you mean?
12:37  gamemakingdude: Alberth: Like making a program with what i've learnt?
12:37  rmccue: Easiest way to check if a value is a string or not?
12:37  gamemakingdude: rmccue: Debugging.
12:38  gamemakingdude: rmccue: When you debug, it will show all the variables in your program at the bottom of the debug, you'll know if its a string if its surrounded by ''
12:38  Alberth: gamemakingdude: yeah. if you read a program it all seems very easy. Firing up an editor, and start typing one from scratch is a whole different ball game.  Doing exercises, and extending a program in some direction is a good way to get into that.
12:38  rmccue: gamemakingdude: I mean programmatically
12:39  gamemakingdude: rmccue: you could just print the variable
12:39  bahamas: rmccue: you don't usually check
12:39  Alberth: rmccue: you should know whether some value is a string
12:39  Alberth: rmccue: if you don't, you are throwing away too much information
12:39  aeurielesn: Hi, I am trying to parse this file: http://paste.pound-python.org/show/484/ using xml.dom.minidom.parse without success. It seems to be a problem with the !DOCTYPE tag. I wonder whether this is really the way to go. Any advice?
12:40  rmccue: It's either a string or an object of some type.
12:40  Alberth: rmccue: I can make an object that behaves like a string
12:41  rmccue: Alberth: It's not my object, otherwise I would.
12:41  rmccue: It's the result of an multiprocessing.Pool.apply_async() call
12:41  gamemakingdude: Try printing the variable?
12:42  rmccue: gamemakingdude: You're missing the point, the input to the method can be either and I need to accept both.
12:42  ahmed-tux: hi Python
12:42  rmccue: gamemakingdude: Programmatically, I need to do one thing if it's a string, and another if it's not.
12:42  Alberth: rmccue: you need some other way to differentiate, that is the only sane solution
12:43  virhilo: hmm... in lxml adding xmlns as attr is good idea to specify default namespace? (i don't want to use lxml nsmap becouse i want to be compatible with all etree implementations)
12:43  rmccue: Alberth: There's absolutely no other way then?
12:43  Alberth: aeurielesn: as far as I know, xml has no DOCTYPE
12:44  Alberth: rmccue: only ones that bring more pain further on
12:44  rmccue: Alberth: How so?
12:45  Alberth: rmccue: python does duck typing, so the only good way to find out if it is something of type X, is to treat it as something of type X, and see whether it works.  Other ways, like testing beforehand break the duck typing
12:46  verte: rmccue: www.canonical.org/~kragen/isinstance/
12:46  rmccue: Alberth: I need to either do `x[num] = result.get()` if it's an instance of multiprocessing.pool.AsyncResult, or `x[num] = result` if result is a string
12:47  gamemakingdude: Can someone give me an exercise for what i've learned in python so far?
12:48  verte: rmccue: and why does the function not return consistent types?
12:48  Alberth: or no way to distinguish both cases?
12:49  rmccue: verte: Because it either uses a pre-existing string if it finds a cached file, or uses multiprocessing to generate one if it doesn't
12:49  verte: can you wrap strings in an object which returns the string on .get() ?
12:50  rmccue: verte: That seems unnecessary to me. Should I do that though?
12:50  nosklo: or return x.get() when it is generated
12:50  verte: [321.75] {jit-running
12:51  rmccue: nosklo: I need to delay the .get() until later
12:51  Alberth: rmccue:  ('text', string)   or  ('object', object)    would also work
12:52  gamemakingdude: ?
12:52  virhilo: etree.Element('test', {'xmlns': 'http://namespace.url/'}) it may cause problems to define namespace in this way?
12:52  verte: rmccue: up to you, really. it's not the end of the world either way.
12:52  verte: well, probably not the end of the world. it's hard to be sure.
12:52  rmccue: verte: OK. Which uses less memory then? ;)
12:52  Alberth: gamemakingdude: it is unlikely that anybody except you knows what you have learned.  Did you try any of the programs?  Try to extend one
12:53  verte: rmccue: guess
12:53  init: ello
12:53  init: I'm trying to use the multiprocessing module, and I get an error like this
12:53  init: PicklingError: Can't pickle <type 'instancemethod'>: attribute lookup __builtin__.instancemethod failed
12:53  init: (and then it hangs)
12:54  init: I'll pastebin what I'm doing in a sec
12:54  gamemakingdude: Ok
12:54  rmccue: verte: I'm assuming using a tuple would be less memory intensive.
12:54  nosklo: virhilo: yes. That's not a namespace at all
12:54  nosklo: virhilo: you're defining an attribute. as in <test xmlns="http://namespace.url">
12:54  verte: rmccue: oh, between a tuple and an object, it depends on the platform actually
12:55  virhilo: nosklo: but how to define namespace without the ns0 prefix?
12:55  virhilo: on all etree implementations
12:55  nosklo: virhilo: what?
12:55  verte: rmccue: on pypy the object is more compact, on cpython the tuple
12:56  verte: two pointers vs three vs object dict + weakref slot + gc header + ...
12:56  virhilo: nosklo: >>> etree.tostring(etree.Element('{http://namespace.url/}foo'))
12:56  virhilo: '<ns0:foo xmlns:ns0="http://namespace.url/"/>'
12:56  init: http://paste.pound-python.org/show/485/
12:56  virhilo: nosklo: i don't want the ns0 thing
12:56  init: it does something like that
12:56  rmccue: verte: Ah, interesting. I think I'll go with the object, since it's cleaner.
12:57  verte: element.attribs['xmlns'] = 'http://namespace.url/'
12:57  nosklo: virhilo: define your own namespace prefix mapping and pass it to the nsmap
12:57  nosklo: virhilo: http://codespeak.net/lxml/tutorial.html#namespaces
12:58  virhilo: nosklo: but nsmap is lxml only
12:58  nosklo: oh, ok, dunno then. I only use lxml and don't care about the other implementations.
12:58  nosklo: Sorry
12:58  ccxCZ: is there any object in python that doesn't have __doc__?
12:58  nosklo: ccxCZ: yes, of course
12:59  ccxCZ: nosklo: which ones?
12:59  nosklo: ccxCZ: dunno, you could create one yourself
13:00  ccxCZ: I mean having '' as __doc__ is still having a __doc__
13:00  nosklo: ccxCZ: you can also remove __doc__ from an existing object if you want
13:00  nosklo: ccxCZ: I'm not sure why you'd bother, though
13:00 * init gives a better strawman example of what she's doing
13:01  init: http://paste.pound-python.org/show/486/
13:01  init: there we go
13:02  ccxCZ: I'm asking whether it's reasonable to expect there is one and thus skipping unnecessary hasattr call
13:03  nosklo: ccxCZ: for what? What are you writing? Why do you have an abritary object?
13:03  nosklo: ccxCZ: you can certainly skip the hasattr call - if it doesn't exist, python will raise an exception for you automatically, with useful traceback, so you don't have to do anything to get that
13:06  ccxCZ: well, it's on a identifier of plugin component. It can technically be any object but I expect it to be either string or a class (Interface). So I can assume it has a __doc__ unless someone wants to deliberately break my code :-)
13:06  melusinechan: is python compiled in bytecode before beeing lunched ?
13:07  lvh: melusinechan: Implementation dependant.
13:07  lvh: melusinechan: For CPython: yes.
13:07  nosklo: for all implementations I know of, yes
13:08  ccxCZ: melusinechan: the bytecode is usually stored as a .pyc or .pyo file even, to save compilation time on subsequent runs
13:08  lvh: ... on CPython
13:09  engla: pypy for example provides exactly the same bytecode in code objects as does CPython
13:10  Kaedenn: ...it does? wow
13:10  verte: engla: not exactly - it's a superset.
13:10  Kaedenn: I did not know--ah
13:10  lvh: engla: That's not true
13:10  engla: that's what I got when I asked about compatibility
13:11  lvh: engla: Well, that's what superset means ;-)
13:11  melusinechan: thanks :)
13:11  zamba: i have a variable with a fixed width, where each part is clearly defined.. what's the best way of extracting the different portions of it? example: BB09087907060411581353.. BB is the id, 090879 is the birthdate of a person, and 0706411581353 is the timestamp..
13:11  lvh: engla: Pypy should be able to run most CPython VM bytecode, but not the other way around
13:11  zamba: sprintf?
13:12  Alberth: zamba: slicing
13:12  engla: verte: what does it add?
13:12  engla: lvh: I see
13:13  zamba: Alberth: that will be a few lines of code
13:14  zamba: Alberth: one line for each variable
13:14  zamba: Alberth: i was looking for a more elegant solution than that
13:14  verte: engla: CALL_LIKELY_BUILTIN, it was also the first to add LOAD_METHOD* and iirc the first to release JUMP_*_POP
13:14  verte: engla: and probably more
13:14  verte: oh and CALL_METHOD_* of course
13:15  Alberth: zamba: x, y, z = s[:2], s[2:8], s[8:]   ?
13:15  lvh: All of those you can implement (but poorly!) as other instrs, of course
13:16  zamba: Alberth: i just used an example.. this is 8 elements in total
13:16  ccxCZ: zamba: you probably can implement function that takes list of names and sizes and returns dict if you want to
13:16  ccxCZ: not sure if it's worth it in your case
13:16  engla: verte: ah, I see it now
13:17  ccxCZ: if it was only for one field structure, I wouldn't bother
13:17  Alberth: zamba: x, y, z = [s[a,b+a] for a, b in [(0,2), (2, 6), (8,100)]]
13:18  Alberth: but imho 8 lines is much better
13:18  zamba: Alberth: i want to use a format string.. isn't that possible?
13:18  zamba: i can't remember what it was called in C
13:18  zamba: sscanf?
13:18  papna: zamba: Python doesn't ship an sscanf.
13:18  papna: zamba: People generally process more manually or with a regex.
13:19  Alberth: format is for creating a string, not for splitting it into pieces
13:19  papna: zamba: What would your pattern be?
13:19  zamba: papna: aa01058000ab8684000107060411580861bb
13:19  zamba: papna: that's an example
13:20  Alberth: papna: he has a number of fixed width fields in a single string
13:20  papna: Is that even easily parseable with sscanf?
13:20  ccxCZ: zamba: you got more formats, or only this one?
13:20  jorrit: papna, if it is fixed then sscanf can do it.
13:21  zamba: papna: aa is header, 01 is reader id, 058000ab8684 is tag id, 0001 is channel counter, 07060411580861 is timestmap and bb is checksum
13:22  cnf: regex ftw! :P
13:22  ccxCZ: zamba: if it's only this, then write the 6 lines of code
13:22  ccxCZ: cnf: unnecessary complexity
13:22  zamba: hm, maybe i will
13:22  lvh: http://pycon.blip.tv/file/3261260/
13:22  cnf: ccxCZ: what complexity?
13:22  jorrit: Slices are by far the easiest solution here.
13:22  lvh: I like most of what he says except the suggestion that ctypes is a good diea
13:22  zamba: can you btw see what kind of digest/check summing method has been used to get bb there?
13:23  jorrit: cnf, slices are MUCH easier here.
13:23  zamba: any suggestionos?
13:23  zamba: suggestions*
13:23  lvh: it's good for portability but bad for everything else
13:23  zamba: it should be a checksum for all bytes besides the first two (aa)
13:23  verte: ctypes would be better if you could generate interfaces for it
13:24  ccxCZ: zamba: you may check if it's some 16bit variant of CRC, otherwise no clue
13:24  cnf: jorrit: sure, but not half as fun :P
13:24  zamba: ccxCZ: how do i do that?
13:24  zamba: ccxCZ: got a function/method i can use for checking?
13:25  ccxCZ: zamba: python only ships crc32 afaik, try searching, or better look at wikipedia for the list of polinominals and try it yourself by hand and calculator :-)
13:26  lvh: maciej sounds a lot like #python in general in that talk
13:26  lvh: "don't do this, come on, seriously, don't do this"
13:27  verte: is that fijalkowski?
13:28  lvh: yes
13:29  verte: he does seem to say that a lot. particularly to me :)
13:29  natalie: ssbr, i figured it out!
13:29  natalie: right after i woke up from sleeping too which is weird >_>
13:29  lvh: natalie: Not really, happens to me all the time
13:29  lvh: natalie: The subconscious is a powerful thing :)
13:29  natalie: i guess so lol
13:30  natalie: oh sorry
13:30  lvh: Positive emotions are heavily frowned upon in the Dredgewor... err, #python
13:30  natalie: don't make me do it again :} i might get kicked
13:31 --- ChanServ sets modes [#python +o lvh]
13:31 @lvh: natalie: Don't worry about it
13:31 --- lvh sets modes [#python -o lvh]
13:32  nosklo: read that as "Worry about it"
13:32  verte: //that's/ a way to quit
13:34  lvh: nosklo: Today is opposites day! I'm not going to ban people and if you listen to ssbr long enough he will turn into an interesting person
13:34  natalie: do you think some of the youtube tutorials on python are any good? =/
13:35  nosklo: lvh: I never heard of opposites day
13:35  lvh: natalie: None of the ones I've seen.
--- Log closed Mon Dec 13 13:38:19 2010
--- Log opened Mon Dec 13 13:38:44 2010
13:38 --- Users 748 nicks [0 ops, 0 halfops, 0 voices, 748 normal]
13:38  lvh: natalie: (I extrapolated from you apparently knowing ssbr)
13:38  natalie: or community college*
13:38  aeurielesn: Alberth: so basically, I am using a XML parser instead of a HTML parser. I think you are right since I see "dom", immediately i though about html which is not true.
13:39  lvh: I'm from soviet europe, I don't understand how your education works
13:39  lvh: natalie: I'd try the tutorial, to be honest
13:39  lvh: natalie: If it works, it works, if it doesn't you can read thinkcspy
13:39  lvh: natalie: If you don't like books and really want screencasts, the Google ones are probably your best bet
13:39  natalie: the "Official Python" tutorial?
13:39  Bonaparte: The last time I recommended the Google video tutorials, I had to provide additional help.
13:40  lvh: Bonaparte: That's what I remember too
13:40  lvh: Bonaparte: That's generally also true of the tutorial, though
13:40  Bonaparte: lvh, indeed
13:40  lvh: (Except I know that one better so I typically can provide help with less effort on my part)
13:40  lvh: natalie: Right.
13:40 --- Channel #python was synced in 129 seconds
13:41  Bonaparte: So, the best thing to do is go through the video + official tutorial and ask questions here or on the mailing list
13:42  Bonaparte: From what I have seen, novices are hesitant to ask questions on IRC, mailing list, forums etc
13:42  lvh: Bonaparte: Are you suggesting this is a hostile enviornment?
13:43  lvh: bahamas: YOU WILL BURN FOR YOUR INDESCRETION, HEATHEN!
13:43  lvh: err, notyou.
13:43  lvh: Bonaparte: You will burn! Not the other guy.
13:43  bahamas: lvh: huh?
13:43  bahamas: aah
13:43  Bonaparte: lvh, no. Just saying from what I have observed
13:43  lvh: Bonaparte: I'm just joking :-)
13:43  zamba: ccxCZ: looks like it's a LRC checksum
13:44  Bonaparte: lvh, I know :)
13:44  Odigem: >>> x=55/10
13:44  Odigem: >>> print x // 5
13:44  Odigem: >>> print float(x) // 5.0
13:44  Odigem: O.o
13:46  lvh: Odigem: Yes. What's the problem?
13:46  natalie: Odigem, i think python truncates the decimal points unless you use floating point
13:46  lvh: Odigem: 55/10 is already an int, except on py3k
13:46  lvh: or with from __future__ import visiion
13:47  Odigem: 55/10 = 5.5
13:47  lvh: division* even
13:47  lvh: Odigem: No.
13:47  lvh: Odigem: 55.0/10 = 5.5
13:47  Odigem: ???
13:47  Odigem: О.о
13:47  natalie: try what he said
13:47  lvh: Odigem: 55/10 = 5 with a remainder of 5
13:47  natalie: add a .0
13:47  lvh: That's how kids learn division.
13:48  lvh: If you want float division, you have to ask for it, by making the numerator or denominator a float.
13:48  Odigem: I can use float?
13:48  lvh: That will convert the other thing to a float and then do division.
13:48  lvh: Odigem: Yes. 55.0 is a float.
13:48  Odigem: Ok
13:48  lvh: Odigem: Furthermore, // is explicitly integer division, and will always do integer division
13:48  lvh: Even on floats.
13:48  Odigem: Hm
13:49  lvh: from __future__ import division will make / do fp div on ints, and only // will be integer division
13:49  lvh: Same in py3k.
13:49 * lvh wonders why people forget how they were taught how division works in the first place :-)
13:49  natalie: lol
13:49  Odigem: Mmm . . .why print _ create tracebak?
13:49  natalie: sorry
13:50  natalie: dang
13:50  jorrit: Odigem, what are you printing?
13:50  lvh: natalie: I will attempt to be less hilarious in the future
13:50  bahamas: lvh: some were never taught that way
13:50  nosklo: Odigem: dunno... try checking what the traceback says
13:50  natalie: thank you lvh :}
13:50  lvh: Odigem: Pastebin the traceback
13:50  Odigem: Print 5 print (_*_)
13:50  lvh: bahamas: Really? I find that hard to believe
13:50  jorrit: Odigem, that doesn't look like python.
13:51  Odigem: Why?
13:51  jorrit: Because it doesn't?
13:51  zamba: how do i get the binary representation of an ascii character?
13:51  lvh: Perhaps you meant print _*_; in the repl the last result is bound to _ automagically
13:51  lvh: zamba: bin(ord(c))
13:51  zamba: lvh: thanks :)
13:52  Odigem: >>> print 5
13:52  Odigem: 5
13:52  Odigem: >>> print _
13:52  Odigem: Traceback (most recent call last):  File "<console>", line 1, in ? NameError: name '_' is not defined
13:52  lvh: Odigem: Print 5 print (_*_) simply is not valid python
13:52  jorrit: Odigem, if you didn't define '_' then it will not be defined.
13:52  dhiaeldeen: i have somekind of an advanced Question and it is
13:52  jorrit: Odigem, things aren't defined automatically.
13:52  lvh: jorrit: Well, sort of
13:52  Odigem: VALID! I learn it
13:52  lvh: jorrit: Yes, they are
13:52  jorrit: lvh, ?
13:52  lvh: jorrit: _ is the last result
13:52  lvh: jorrit: In this case, nothing is bound to _ because print is a statement
13:52  jorrit: Ah in the interpreter.
13:52  jorrit: ok
13:53  bahamas: lvh: ok, i don't remember being that way. the first time i learned of the distinction between integer and float division was when i started learning python
13:53  lvh: jorrit: Well, I think from the >>> it's pretty obvious he's in a repl ;-)
13:53  dhiaeldeen: Q: in a wifi area, i have 2 laptops, i want to make one of them send signals to the other, how?
13:53  lvh: bahamas: So you're one of the people that forgot? :-p
13:53  jorrit: dhiaeldeen, and how is that related to python?
13:53  lvh: dhiaeldeen: figure out IPs, ssh from one to the other
13:53  Odigem: Print _ must print previous value
13:53  dhiaeldeen: jorrit: i want to do it with python and no other language
13:53  lvh: Assuming they have reasonable operating systems.
13:53  jorrit: Odigem, only if there is a previous value. In your case there isn't.
13:54  lvh: Odigem: No, "Print" is not python. the statement is print, in lowercase
13:54  lvh: Odigem: Also, print is a statement, it does not have a value
13:54  lvh: Unlike, say, assignment in perl, where the value of the expression is the value of the rightmost-hand side
13:55  bahamas: lvh: the only way to prove that i didn't forget is to go through the curriculum, translate it and show it to you, which i don't feel like it. so i can't counter your point for now
13:55  lvh: bahamas: Victory!
13:55  bahamas: s/like it/like doing/
13:55  lvh: bahamas: You typically have to go waayyyy back
13:56  lvh: bahamas: Mom has nine pieces of candy and wants to give them to her two children
13:56  lvh: She gives every child 4 pieces of candy and has one left over
13:56  bahamas: lvh: i'd have to look both through the maths curriculum and the informatics curriculum, and i don't even know where to start
13:56  lvh: (or, 9 // 2 == 4, 9 % 4 == 1)
13:57  lvh: bahamas: I'm thinking like seven, possibly eight years old
13:57  Odigem: Руские есь?
13:57  lvh: Odigem: This is an english speaking channel, there's probably a russian one too
13:57  bahamas: Odigem: niet
13:57  Odigem: =)
13:57  lvh: Okay, apparently there isn't
13:58  teratorn: in Russian, Python programs _YOU_
13:58  bahamas: there's python-ru, but it has only one user
13:58  Odigem: What?
13:58  Odigem: =)
13:58  lvh: Odigem: FWIW: da, no vy ne dolzny govorit na russkom zdes
13:58  lvh: Sorry for my very broken russian :p
13:58  zamba: i want to xor a set of characters with each other to implement a LRC check..
13:59  zamba: what do i use for that?
13:59  zamba: ord() and bin()?
13:59  lvh: zamba: reduce(operator.xor, map(ord, s), 0)
13:59  zamba: bin() returns a str, right?
13:59  Odigem: O.o
13:59  Kruptein: Hey I get a IOError when using paramiko ssh->sftp.put()  anyobdy had such problem in the past and knows the solution?
13:59  zamba: lvh: wow? ok?
13:59  zamba: lvh: care to explain that? :)
13:59  bahamas: zamba: ord
13:59  zamba: lvh: 's' is the string?
14:00  Alberth: yes
14:00  lvh: zamba: First you turn a string into a sequence of ASCII ordinals.
14:00  lvh: zamba: Then, you reduce xor over them.
14:01  lvh: zamba: reduce(xor, seq, 0) basically means: 0 ^ seq[0] ... ^ seq[len(seq)]
14:01  zamba: hm, ok
14:03  zamba: lvh: how do i get out the hex value of that data?
14:03  zamba: lvh: since i want to compare it with hex
14:03  zamba: lvh: the complete checksum, that is
14:03  lvh: zamba: Well, I would turn the hex into an int, not the other way around.
14:04  lvh: zamba: What's it in currently? "ff", or "\xff"?
14:04  nosklo: infobob: redent zamba result = 0 ; for ch in mystring: result ^= ord(ch) ;; print result
14:04  zamba: it's a 2-byte string
14:04  infobob: zamba, http://paste.pound-python.org/show/487/
14:04  lvh: ie a single byte or multiple bytes or...
14:04  lvh: zamba: well, that doesn't tell me much
14:04  nosklo: zamba: I find this way easier
14:04  lvh: zamba: It can still be \xff\xff
14:04  zamba: lvh: it's a string with "aa" in it, for instance
14:05  zamba: lvh: or "e1" or "17" or "41" and so on :)
14:05  zamba: nosklo: that seems more readable, yeah
14:05  nosklo: zamba: int(yourstring, 16)
14:05  lvh: zamba: Right, okay, then: computed = reduce(...); computed == int(thatstring, 16)
14:06  zamba: dang.. they don't match
14:06  zamba: aa01058000abb494000107060411581353e1
14:07  zamba: that's the string
14:07  zamba: "e1" is supposed to be the check sum of bytes 2 to 33
14:07  zamba: 01058000abb494000107060411581353
14:07  zamba: that, in other words
14:08  nosklo: huh
14:08  lvh: I'm somewhat worried that it's a hex string
14:08  zamba: lvh: hm?
14:08  lvh: Typically such checksums happen on the actual bytes, not on their hex reprs
14:08  zamba: lvh: what can i try instead?
14:09  lvh: Well, thatstr.decode("hex") is a start
14:09  lvh: but I'm just guessing, I dont know the actual spec obviously
14:10  zamba: thatstr is "01058000abb494000107060411581353", right?
14:10  lvh: I was using the original, but yeah whatever you want :)
14:11  lvh: if you do it using the original the checksum becomes ord(r[-1]) instead of int(lastTwoBytes, 16)
14:11  zamba: i've sliced off the header and the checksum
14:12  zamba: but that didn't work either
14:12  zamba: still don't match up
14:15  lvh: zamba: I'm sorry, there's not really anything else I can do without guessing.
14:15  zamba: your guesses are much better than mine :)
14:15  zamba: so bring 'em on :)
14:16  lvh: zamba: Perhaps there is a start value that isn't 0 for the xoring.
14:16  lvh: Perhaps it's a completely different kind of thing than an xor reduction.
14:16  lvh: Why are you doing this? Where does the data comes from?
14:16  lvh: come* even
14:16  zamba: it should be an LRC
14:17  lvh: zamba: What, like the audio format?
14:17  zamba: longitudinal redundancy check
14:17  lvh: Oh
14:18  lvh: Well, yes, that's what I've given you
14:18  zamba: http://www.google.com/url?sa=t&source=web&cd=1&ved=0CBUQFjAA&url=http%3A%2F%2Fwww.marathoncharitypartners.org%2Facf%2FIPICO_STK_Elite_User_Manual_V1.00_Issued_20070901.pdf&rct=j&q=ipico%20lrc&ei=_RwGTe7uE4jHswaCv4GCCg&usg=AFQjCNGKA55TYpDzpsUviiQKtHtqLydXug&sig2=dHYwEW_tvB86zrJbXMT6zg&cad=rja
14:18  lvh: so if that doesn't work the file is possibly damaged
14:18  zamba: here's the manual for the system
14:18  zamba: check page 32
14:18  lvh: Unfortunately I had to pick someone up from the airport like ten minutes ago
14:18  lvh: Good luck!
14:18  zamba: :D
14:18  zamba: thanks :)
14:21 --- ChanServ sets modes [#python +o infobob]
14:21 --- infobob sets modes [#python -q $a:ae718087]
14:23 --- infobob sets modes [#python -b *!*@gateway/web/freenode/ip.174.113.128.135]
14:23  zamba: anyone else want to take a stab at it?
14:24 * neumaennl stabs it
14:24  neumaennl: it's coughing blood now
14:24  zamba: thanks :)
14:26 --- infobob sets modes [#python -o infobob]
14:26  neumaennl: zamba: you sure the info is on page 32?
14:26  zamba: neumaennl: hm.. search for "LRC"
14:27  neumaennl: I clicked on the link you provided and page 32 is about getting and setting the time and date...
14:27  zamba: oh.. yeah.. it's page 33 for the PDF :)
14:27  zamba: but the footer says 32
14:28  zamba: neumaennl: the table there mentions LRC
14:29  neumaennl: yup
14:29  zamba: and under raw data there you have some example lines
14:29  sroy2: any clues why this is a syntax error? http://paste.pound-python.org/show/488/
14:30  neumaennl: zamba: just read it
14:30  zamba: neumaennl: hm? you have just read it, or i should just read it (again)?
14:30  bob2: sroy2: best to include the whole traceback
14:30  neumaennl: zamba:I have just read it ;P
14:30  zamba: neumaennl: hehe, ok :)
14:30  sroy2: bob2: sorry - I cut out the line under the ':' with the ^
14:31  bob2: sroy2: anyway, missing ) on previous line
14:31  bob2: that's usually what weird syntax errors are
14:31  bob2: also facebook has an api
14:32  sroy2: bob2: thanks... I don't know why I didn't catch that :(
14:33  neumaennl: zamba: give me a few minutes to try stuff out
14:34  zamba: neumaennl: ok :)
14:34  zamba: neumaennl: thanks a lot, btw
14:37  neumaennl: zamba: the problem seems to be that lvh's approach uses 0 as the first value for the xor chain and not the first character in the string (sans header)
14:38  zamba: i tried with the first character as well, actually
14:38  zamba: tried result = ord(data[0])
14:38  zamba: and then for char in data[1:]:
14:38  zamba: neumaennl: but did you get it working with that?
14:38  neumaennl: dunno if you can just leave out the 0 in the call to reduce, gotta look in the docs
14:39  bob2: sroy2: and yes, if you're scraping pages with mechanize that use javascript that matters, you will need to do extra work
14:39  bob2: ie reimplementing it
14:39  zamba: neumaennl: http://paste.pound-python.org/show/490/
14:39  zamba: neumaennl: can't you just do that?
14:39  zamba: neumaennl: instead of using reduce?
14:39  sroy2: bob2: already jumped that hurdle :)
14:40  bob2: but scraping facebook sounds evil and/or silly
14:40  neumaennl: so far I have s = 'aa01058000abb494000107060411581353e1' print reduce(operator.xor, map(ord, s[2: -2]), 0) coz you need to leave out the two a's in the beginning and the e1 in the and (e1 should be the result)
14:40  bob2: so, i'm out
14:40  zamba: neumaennl: yup
14:40  neumaennl: zamba: seems right
14:40  sroy2: bob2: I suppose it is evil... My buddy is trying to build his own version of Maltego
14:41  zamba: the completed version won't leave out the last two values, since the last xor should return 0
14:41  zamba: so just check for 0, i guess
14:41  neumaennl: yup
14:41  neumaennl: um, wait - no
14:41  zamba: but that's not the problem at the moment.. i can compare them, so.. first and foremost i need to get the correct checksum
14:42  neumaennl: e1 is one hex value - if you leave it in the chain you can't expect 0 because it's two characters and would therefore be treated as two values
14:43  zamba: neumaennl: yup, true
14:43  zamba: neumaennl: but anyway, that's not the main problem now :)
14:43  neumaennl: okay, lemme try some more...
14:46  RenatoSilva: has anyone ever used mintty? it's not displaying the ">>>" python prompt. Does python try to write the header and the prompt directly in windows terminal?
14:47  nosklo: RenatoSilva: yes.
14:47  nosklo: RenatoSilva: you'd need python for cygwin.
14:47  neumaennl: zamba: what if it does something completely stupid and doesn't treat '01' as 48 and 40, but as 1 - you know what I mean?
14:48  neumaennl: zamba: 1a would not be 49 and 97 but 36
14:49  Hory: I've implemented a more inheritance-friendly property decorator (it saves function names and then uses getattr) and it seems to work OK so I wonder - why python doesn't have something like this by default?
14:49  FxIII: hi all
14:50  zamba: neumaennl: may be
14:50  FxIII: what append if I use a encripted private key in ssl module?
14:51  neumaennl: zamba: with that approach you could leave the checksum in and expect 0 as result
14:51  FxIII: am  I asked for password by command line?
14:51  zamba: neumaennl: yeah.. but first and foremost i just need to get the correct checksum out
14:51  zamba: neumaennl: did you try that approach?
14:52  neumaennl: no
14:52  zamba: what you basically mean is treat every two-byte string as a hex representation?
14:52  FxIII: any idea?
14:56  lvh: Greetings!
14:56  zamba: hehe
14:56  zamba: welcome back
14:57  zamba: neumaennl: how do i read that string two bytes at the time?
14:57  neumaennl: zamba: I just tried it out - doesn't seem to be right either :(
14:58  zamba: oh, dang
14:59  lvh: zamba: itertools module, grouper recipe
14:59  lvh: (I realise it doesn't solve your problem, but that's how you would do that)
14:59  lvh: zamba: or the classic though illegible zip(*[iter(it)]*n)
15:00  lvh: why the hell is grouper not actually in itertools anyway
15:01  RenatoSilva: nosklo: so python uses Microsoft C libraries?
15:02  neumaennl: zamba: http://paste.pound-python.org/show/491/
15:02  shylent: lvh: grouper? you mean groupby?
15:02  neumaennl: but still not the right result
15:02  lvh: shylent: No, grouper
15:02  lvh: shylent: It's a recipe, but it's not in the module
15:02  shylent: .. hmm
15:02  RenatoSilva: nosklo: specifically, the WriteConsole function?
15:03  lvh: shylent: the lazy equiv of zip(*[iter(it)]*n)
15:03  shylent: ahh yes *reading through it now*
15:03  pratz: hey guys, string concatenation is done with "+" but when i enter + on new line and try to concatenate it does not work
15:04  zamba: neumaennl: i'm emailing ipico now
15:04  shylent: does not work! well, does it, like, sit on the couch and watch TV ?
15:04  nosklo: RenatoSilva: yes. that's what is used by the main windows python executable
15:05  FxIII: is there a way to avoid ssl to ask for passphrase if the private key is encrypted?
15:05  neumaennl: zamba: good luck
15:05  FxIII: a way  to provide the password programmatically?
15:06  neumaennl: FxIII: where's the sense in the key requiring a password then? just generate a key that doesn't require one...
15:06  FxIII: the file that store the private key should be protected by a password
15:08  RenatoSilva: nosklo: this is so crazy, I thought mintty would be "the console", but ok thanks
15:08  RenatoSilva: nosklo: I mean it would pretend it was the windows console somehow, but ok
15:08  mat^2: hi
15:08  mat^2: how fast is PyList_Check()?
15:08  nosklo: RenatoSilva: no, it uses unix libs inside windows to create a tty
15:09  nosklo: RenatoSilva: windows doesn't have tty
15:09  FxIII: neumaennl:  I whant also to let the user to input the password for its private key using a gui rather then the command line input
15:09  maxivano_away: Hi! How can script detect wether it is sturted using virtualenv or not?
15:09 --- maxivano_away is now known as maxivano
15:09  nosklo: RenatoSilva: install ubuntu
15:10  RenatoSilva: nosklo: I have both
15:10  kerio: use ubuntu
15:10  nosklo: RenatoSilva: trying to use sane console environment inside windows is a tough goal
15:10  nosklo: RenatoSilva: boot ubuntu instead and be happy
15:10  RenatoSilva: nosklo: I use mintty because it's more advanced than standard console
15:11  nosklo: RenatoSilva: it's no more advanced than default ubuntu gnome-terminal, is it?
15:11  neumaennl: why not install minGW and use bash?
15:12  kerio: install putty and ssh to a unix system
15:12  kerio: :)
15:12  RenatoSilva: neumaennl: another guessing? because that's exactly what I use mintty for?
15:12  RenatoSilva: kerio: I have putty in Ubuntu
15:12  sroy2: is it possible to get __init__ to return or yield a value?
15:12  kerio: sroy2: what do you mean?
15:12  RenatoSilva: kerio: but what does putty has to do with the problem besides mintty being based on it?
15:12  kerio: you're probably looking for __new__ if you want to return something else than your object
15:12  kerio: RenatoSilva: the problem is windows
15:12  kerio: probably
15:13  sroy2: kerio: I am using __init__ to require values be passed to my object, will __new__ do that as well?
15:13  sroy2: kerio: (and run on the creation of the object?)
15:14  Kaedenn: So, I've never used Twisted before, and I want to make a simple packet repeater (base framework for a middleware program I'm writing), using twisted.protocols.repeater. Where do I get started?
15:14  Kaedenn: Err, sorry, twisted.protocols.portforward
15:15  RenatoSilva: nosklo: I wonder if mintty could ever simulate a windows console. Maybe it's possible
15:15  kerio: sroy2: __new__ takes the parameters you pass to the constructor
15:16  joenp: Is it possible to iterate over a dictionary in django 0.96?
15:16  kerio: and usually passes them to __init__
15:16  kerio: er, no
15:16  kerio: and if the object returned is an instance of the current class, __init__ is called
15:16  kerio: otherwise, it's just the object
15:17  zamba: neumaennl: i wonder if it treats each and every character as hex
15:19  neumaennl: zamba: tias (try it and see) ;)
15:21  maxivano: how to detect virtualenv from python script?
15:22  cnf: zamba: did you get a solution now?
15:22  neumaennl: zamba: tried it: no dice
15:23  zamba: cnf: nope
15:23  zamba: neumaennl: yeah, so did i.. no dice
15:23  cnf: oh, hold on
15:23  zamba: cnf: are you working on the same problem as well? :)
15:23  cnf: did you guys notice the string is int and hex mixed?
15:23  cnf: 4-15 is not hex
15:23  zamba: cnf: well.. depends what you mean by that.. it might as well just be all ascii..?
15:24  cnf: zamba: sort of, in between work
15:24  neumaennl: cnf: but the docs say LRC on byte basis
15:24  cnf: neumaennl: yes, but how did you get the bytes?
15:24  zamba: i'd say 4-15 IS hex, or?
15:24  zamba: and the rest isn't
15:25  neumaennl: cnf: tried ord(char), int(char, 16) and int(2chars, 16)
15:25  cnf: not according to the doc you linked?
15:25  cnf: neumaennl:  yeah, and i think it's mixed int and hex
15:25  zamba: but isn't that, well, stupid?
15:26  cnf: yeah :P
15:26  zamba: because that would slow down the algorithm
15:26  cnf: since when has that stopped anyone?
15:26  zamba: hehe
15:26  zamba: true that
15:26  zamba: french developer, so you may have a point
15:27  cnf: :P
15:28  zamba: the table actually says something about that
15:28  zamba: 2-3 - reader id (0-255 in ascii hex)
15:28  zamba: 4-15 - tag id (ms digit first)
15:28  zamba: 16-19 - i and q channel counter (binar counters 0-255 in ascii hex)
15:29  cnf: uhu
15:29  cnf: that's where i got the idea
15:29  zamba: 20-33 - date/time (date and time with 10ms resolution. 390ms/10 = 39 = "27" (27 = 0x32 + 0x37) and the month 12 is 0x31 + 0x32.)
15:29  zamba: 34-35 - LRC (checksum on bytes 2 to 33)
15:30  kerio: the fact that object() doesn't silently swallow arguments suck
15:32  zamba: cnf: but 4-15 has to be hex as well, or? "abb494" in there
15:32  zamba: cnf: you can't interpret that as an int, can you?
15:33  neumaennl: zamba: you can: int('abb494', 16)
15:33  cnf: i wonder what "ms digit first" means
15:33  zamba: neumaennl: oh, ok
15:33  zamba: so maybe each section is xor-ed together?
15:33  neumaennl: cnf: maybe most significant bit?
15:34  cnf: idno
15:34  cnf: and the date/time, is that hex as well?
15:34  neumaennl: cnf: no
15:35  cnf: ok, so decode each field to bytestrings properly, and then try the lrc?
15:35  Nikolai89: Hello people :)
15:35  Nikolai89: I didnt know that community exist here about Python...
15:36  TheSheep: we neither
15:36  zamba: cnf: hm.. i have no idea how to do that
15:36  cnf: neither do I :P
15:37  zamba: hehe
15:37  virhilo: I asked before, but no one knows: http://stackoverflow.com/questions/4428811/lxml-etree-and-xml-etree-elementtree-adding-namespaces-without-prefixesns0-ns1
15:38  zamba: neumaennl: you have to save the day now :)
15:38  Nikolai89: So, do you program some good applications in Python ?
15:40  RenatoSilva: thanks all
15:40  neumaennl: I'd just ask the dev for clarification
15:40  nosklo: virhilo: you have an answer in SO, but I don't think it applies to non-lxml implementations either, so using nsmap is better
15:42  neumaennl: okay, I'ma call it a day. See you guys
15:44  zjblabs_: I'm attempting to understand how twisted 'works'.  The introduction I'm reading on it talks about using asynchronous programming to make a gui responsive while background tasks are occuring.  I'd normally thread the background task in that situation.  The real question is: does the twisted reactor integrate well with wxpython's event loop?
15:48  dash: there's some stuff
15:48  cnf: zamba: all i can get is 0xb
15:48  cnf: not closer
15:48  dash: but wxpython makes it difficult, IIRC
15:51  ccxCZ: zjblabs_: you can always split twisted to separate thread. Or use some better-supported GUI toolkit
15:51  zjblabs_: ccxCZ, like what?
15:51  lvh: zjblabs_: I think wx mostly works, except that it's not a very great toolkit internally
15:51  lvh: zjblabs_: qt, gtk
15:52  lvh: gtk: great event loop, okay gui thing
15:52  ccxCZ: zjblabs_: both qt and gtk are pretty widespread
15:52  lvh: qt: great gui thing, okay event loop
15:53  zjblabs_: lvh, isn't wxpython  gtk?
15:53  zjblabs_: that's what I thought it ultimately was.
15:54  varnie: hello. i have 2 tuples. i want to create new one, consisting of items from 1st tuple, 2nd tuple in some specific order. how to write this?
15:54  ccxCZ: zjblabs_: only on linux
15:54  varnie: i.e: a = (1,2); b = (3,4); i want to create: c = (1,2,3,4,1,2,3,4,3,4) , for example
15:55  ccxCZ: zjblabs_: wxwidgets/wxwindows intended to wrap native gui libs in portable way, and they chose gtk+ on X11
15:55  dash: zjblabs: wxpython isn't gtk
15:55  ccxCZ: so you end up with unweildy abstraction over gtk instead of using it directly
15:56  lvh: zjblabs_: Occasionally!
15:56  lvh: zjblabs_: That doesn't mean you can depend on it
15:56  lvh: If you *can*, you can just use the glib event loop interaction and it might even work
15:56 --- a_ is now known as EiKZ
15:56  lvh: I'm a bigger fan of not using wx in the first place
15:57  varnie: oops. i found out! i have to "+" these tuples together .
15:57  ccxCZ: well, if you're depending on wx using gtk, you're probably better off using gtk directly
15:57  ccxCZ: altough I personally prefer QT
15:57  zjblabs: I had thought wx was more pythonic
15:57  dash: varnie: pretty much
15:58  dash: zjblabs: 'pythonic' is a word that just means "I like it".
15:58  dash: zjblabs: i'd say gtk is more pythonic. ;-)
15:58  zjblabs: dash: I'll check it out then, thanks
15:58  shylent: lvh: how did you compare the event loops of gtk and qt? I mean, what criteria did you consider?
15:58  cnf: i rarely like gtk ^^;
15:58  lvh: shylent: Consistency across platforms
15:58  zjblabs: we're talking about pygtk, right?
15:58  lvh: shylent: Qt on *nix and on my phone is the same thing for Qt
15:59  lvh: they are NOT the same thing as far as the underlying event loop is concerned
15:59  lvh: shylent: also, quality of bindings
15:59  shylent: ahh, that
15:59  lvh: shylent: When one person gets it wrong he might be an idiot
15:59  lvh: when 8 out of 10 of them are wrong it's probbaly hard to do
16:01  ccxCZ: lvh: you probably won't get gtk on that phone then though
16:01  kerio: ccxCZ: if he's talking about the n900 (and he probably is) then there's already gtk there
16:01  shylent: well, it has to do with the variety of platforms Qt supports, I guess. I am not sure about gtk wrt phones and such, tho
16:01  shylent: so I am just speculating :)
16:02  ccxCZ: kerio: if he's talking about unix-based phone, then I wonder why would be the event loop any different
16:04  ccxCZ: also I like the qt bindings, except for the thing they're trivial to crash using incorrectly written model class
16:05  lvh: ccxCZ: Why not
16:05  thyko: mmmmm ... looks like twisted is ALL i'll need for my network programming
16:05  lvh: ccxCZ: The core event loop on Qt that came on my n900 shares no code with the one on my laptop
16:05  lvh: ccxCZ: Also, glib runs fine on my s60 phone
16:06  shylent: thyko: most of the time, thats the case, yes
16:06  lvh: thyko: Correct!
16:06  dash: lvh: huh, that raises the question of whether you can use the glib event loop for qt there :)
16:06  lvh: dash: let's not go there
16:07  lvh: dash: qt is like a serial port
16:07  lvh: dash: nine layers of abstraction or bust
16:08  ccxCZ: lvh: interesting, I actually wanted a symbian phone until they cancelled the open-source version
16:08  kerio: thyko: yup
16:09  zamba: cnf: hm, ok
16:09  cnf: hmm?
16:09  ccxCZ: anyway is there reason to worry about internal implementation of event loop, if it's api is the same? (which I assume is)
16:12  cnf: zamba: and you are certain that the lines on the pdf are actual correct files?
16:12  zamba: cnf: well.. if not it would be too stupid to be true
16:12  cnf: indeed
16:13  zamba: cnf: they have to be, if not they basically void the whole manual
16:13  kerio: hold on, why do i need super() if i know what i'm inheriting from?
16:13  ccxCZ: kerio: beceause with multiple inheritance you really don't
16:13  kerio: i'm inheriting from object
16:13  kerio: :|
16:14  ccxCZ: kerio: or more exactly you don't really know the next class in mro
16:14  lvh: ccxCZ: If you're using Qt, the API stays the same
16:14  lvh: ccxCZ: If you have to hook into the core event loop, the API does not stay the same
16:15  ironfroggy_: virtualenvwrapper provides add2virtualenv but is there something similar for adding executable paths?
16:18  ccxCZ: kerio: http://stackoverflow.com/questions/3277367/how-does-pythons-super-work-with-multiple-inheritance
16:18  ccxCZ: kerio: more described here http://www.artima.com/weblogs/viewpost.jsp?thread=237121
16:19 --- SquishyNotHere is now known as squishy
16:19  ccxCZ: lvh: is that necessary for twisted to work?
16:19  lvh: ccxCZ: Well, event loops block
16:20  lvh: ccxCZ: So either you run them in a thread, and you assume the low-level machinery is thread safe which it typically isn't
16:20  lvh: Or you hook into the event loop which typically also has performance advantages
16:24  ccxCZ: hmm, I expected the qt's api to be rich enough to support full twisted's reactor capabilities :-|
16:25  lvh: ccxCZ: It occasionally is
16:25  lvh: ccxCZ: It's not a matter of richness as it is of consistency
16:27  ccxCZ: hmm
16:31  grantooqa: hohoho
16:32  caution: what's the term for all contents of a class e.g. methods and properties?
16:32  caution: anyway, if a method doesn't them, should it be moved out of the class to its own function?
16:33  lvh: caution: "class attributes"
16:33  lvh: caution: that sentence requires an extra verb
16:33  caution: use*
16:33  lvh: then yes
16:34  caution: always?
16:34  lvh: Also I'm not sure if you meant contents of a class or an instance of it: either way the word is "attributes"
16:34  caution: even if it relates to the class
16:34  lvh: caution: Pretty much
16:34  varnie: bye
16:34  lvh: caution: Well, apparently it doesn't really relate to the class very much
16:34  lvh: and instead it describes some abstract behavior used by amongst other things your class
16:35  lvh: Obviously blanket statements are always wrong
16:35  lvh: Including that one
16:36  ccxCZ: :D
16:36  RenatoSilva: nosklo or so said here that python.exe uses WriteConsole, but this seems to not be true: http://code.google.com/p/mintty/issues/detail?id=56#c12
16:36  lvh: self-deprecating-meta-meta-humor ftw
16:37  RenatoSilva: so it doesn't work because it does i/o with the windows console, but because it doesn't run interactively because of not recognizing mintty as a tty/console
16:37  lduros: hi, how do i compile a regular expression with both re.DOTALL and re.IGNORECASE?
16:38  lduros: It seems I can only put one in the re.compile() method
16:38  simon: lduros, re.DOTALL & re.IGNORECASE, I'd guess.
16:38  simon: they're flags so they're supposed to be able to stack.
16:38  lduros: simon: oh ok, I was trying the , but it would tell me that it only takes 2 args etc
16:38  lduros: I didn't know the & :-), new to python
16:38  caution: wouldn't it be | ?
16:39  abstractstone: how do I unstill a package?
16:39  simon: caution, yes.
16:39  abstractstone: I have two versions of pylibmc, one is broken
16:39  abstractstone: and python is trying to use that one....
16:40  lduros: | seems to work, but not & yeh
16:40  simon: lduros, re.DOTALL and re.IGNORECASE are numbers that are both exponents of two.
16:40  lduros: ok
16:40  magcius: lduros, yeah, you want |
16:40  simon: lduros, i.e. re.DOTALL == 16 and re.IGNORECASE == 2. when you do re.DOTALL | re.IGNORECASE, you OR the numbers bitwise.
16:41  magcius: lduros, it's a bitwise OR, or an add without carryt
16:41  lduros: magcius simon: ok, sounds good thanks :-)
16:41  lduros: simon: interesting to see these constants are integers
16:41  abstractstone: anyone know? :(
16:42  magcius: lduros, there isn't really another way to combine multiple flags with one parameter
16:42  abstractstone: ill just delete the thing from /usr/local/lib/python2.6/dist-package and see what happens
16:42  magcius: abstractstone, well how did you install both of them?
16:42  simon: lduros, i.e. 00010 OR 10000 = 10010 = (decimal) 18
16:42  magcius: abstractstone, dist-packages is a Debian thing...
16:42  abstractstone: magcius: something else installed it for me
16:42  caution: abstractstone: http://stackoverflow.com/questions/402359/how-do-you-uninstall-a-python-package-that-was-installed-using-distutils
16:42  magcius: abstractstone, pip?
16:42  abstractstone: pip yes I think so
16:42  magcius: abstractstone, so use pip uninstall
16:42  tdn: How do I set procname from Python?
16:43  simon: lduros, since all flags are exponents of two, you guarantee that any number is a combination of flags that can be interpreted uniquely.
16:43  magcius: tdn, why do you want that?
16:43  lduros: magcius simon: ok, it seems lots of other languages have flags, like php you do /blah/i this would match BLAH or blah
16:43  lduros: you don't have i (insensitive),  U (ungreedy), etc with python?
16:43  magcius: lduros, there's insensitive. re.I
16:43  magcius: lduros, ungreedy isn't part of perl regexes
16:43  magcius: lduros, so just the standard ? for ungreedy
16:44  lduros: magcius: well in python you can do .*? so it's fine :-)
16:44  lduros: hehe
16:44  ccxCZ: tdn: there's a package for it
16:44  simon: lduros, some languages' syntaxes allow you to stack flags together in an integer (which is how you do it in C), some don't.
16:44  magcius: tdn, in what OS?
16:44  magcius: simon, PHP doesn't have a native regex syntax, it just has a parser
16:44  lduros: simon magcius: ok, sounds good, thanks for all this information, very helpful
16:44  ccxCZ: tdn: http://pypi.python.org/pypi/setproctitle
16:44  magcius: lduros, chances are you can do what you want to do cleaner without regexes
16:45  magcius: ccxCZ, there's an easier way if you're guaranteed a Linux ld.so
16:45  lduros: magcius: what do you mean, with python?
16:45  magcius: lduros, yes. What do you want to do?
16:45  lduros: oh just messing a bit with regular expressions
16:46  lduros: I know I've been advised to use an html parser to find stuff in html, no regular expression
16:46  lduros: so i won't say i'm trying to do that
16:46  lduros: :-P
16:46  lduros: haha
16:46  kerio: lduros: it's impossible
16:46  magcius: lduros, please don't use regular expressions to find stuff in HTML
16:46  magcius: lduros, because it is indeed impossible to parse HTML/XML with regular expressions
16:46  magcius: lduros, not just "really really hard" -- impossible
16:47  magcius: HTML is not a regular language
16:47  lduros: i know, especially when it's old html like this: <P> A paraprah \n <P> another paragraph
16:47  lduros: :-)
16:47  lduros: no closing tag
16:47  AlexMax: old HTML?
16:47  lduros: etc
16:47  lduros: well, like html4
16:47  magcius: lduros, that's not old HTML, and not "especially"
16:47  AlexMax: afaik HTML5 is still SGML which allows that sort of nonsense
16:48  magcius: AlexMax, well not really
16:48  lduros: magcius: well this is html4, not xhtml
16:48  magcius: AlexMax, HTML never explicitly allowed it
16:48  caution: why does doctest.testmod()'s output appear after logging output, even though the logging is done after?
16:48  ccxCZ: well, that can still be parsed into dom tree and searched with xpath
16:48  kerio: i thought we were getting rid of html :(
16:48  lduros: and it's harder to parse
16:48  kerio: sadly nobody liked xhtml
16:48  magcius: lduros, yes
16:48  ccxCZ: I have code for that somewhere actually
16:48  AlexMax: XHTML doesn't allow it but XHTML is being dropped in favor of HTML5
16:48  magcius: kerio, want to know why? Because browsers never supported it
16:48  AlexMax: or rather it's an older standard
16:48  kerio: magcius: except all the browsers
16:48  magcius: kerio, nope!
16:48  magcius: kerio, it was a trick! A deception
16:48  Juhaz: it doesn't really matter if it has closing tags or not, arbitrary nesting already makes it impossible
16:48  grantooqa: ok
16:48  AlexMax: internally didn't they just convert XHTML to HTML anyway?
16:48  caution: http://www.webdevout.net/articles/beware-of-xhtml
16:49  magcius: kerio, http://webkit.org/blog/68/understanding-html-xml-and-xhtml/
16:49  lduros: yes, it's old html, look at this: <P> <FONT SIZE=6 FACE="verdana">Hello this is my title <P> This is my paragraph
16:49  lduros: :-)
16:49  magcius: lduros, to link the inevitable: http://www.codinghorror.com/blog/2009/11/parsing-html-the-cthulhu-way.html
16:49  magcius: lduros, but just use lxml.html
16:49  ccxCZ: lduros: are you familiar with xpath?
16:49  Sup3rkiddo: lduros, use BeautifulSoup, stay happy :D
16:49  magcius: ccxCZ, XPath isn't an XML parser
16:49  simon: AlexMax, you mean browsers when they render pages? possibly. it still matters during parsing.
16:49  magcius: Sup3rkiddo, don't use BeautifulSouphttp://www.codinghorror.com/blog/2009/11/parsing-html-the-cthulhu-way.html
16:49  magcius: oops
16:49  lduros: magcius: yeh I've been looking in lxml.html
16:49  ccxCZ: magcius: never said that
16:50  magcius: ccxCZ, XPath won't solve his problem
16:50  ccxCZ: xpath over dom tree might
16:50  lduros: in any case, i'm looking for something that works with python3
16:50  lduros: :-)
16:50  lduros: (another debaaate)
16:50  caution: enough with the smileys
16:51  kerio: "The holy quote is, never bring a regular expression knife to a turing complete gunfight. It's so, so true." haha
16:51  lduros: caution: I love smileys, don't you? :-)
16:51  AlexMax: simon: *nods*
16:51  lduros: alright, obviously I'll have to look for a parser, but it's not a reason to ignore regular expressions altogether for many other jobs, such as string validation
16:52  AlexMax: did anyone ever say that regular expressions are useless for all jobs?
16:53  magcius: AlexMax, most did.
16:53  thyko: there must be something very unique about Python that it inspires people to produce things lile Twisted
--- Log closed Tue Dec 14 11:47:24 2010
