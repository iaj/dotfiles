--- Log opened Mon Nov 01 00:00:27 2010
00:00  JodaZ: Yhg1s, well, i am not slicing, so isn't it abuse of syntax ?
00:01  gordonjcp: Yhg1s: http://pastebin.com/XcXV64Rm
00:01  infobob: http://paste.pocoo.org/show/284115/ (repasted for gordonjcp)
00:01  gordonjcp: Yhg1s: it's run from ax25d, which is similar to inetd
00:02  Yhg1s: JodaZ: when you do L[:], you are slicing.
00:02  Yhg1s: JodaZ: slicing creates a shallow copy.
00:02  Yhg1s: JodaZ: which is what you want. If you prefer list(L), that's fine, too.
00:03  ivan`: some dumb future maintainer would be less likely to remove a [:] than the list()
00:03  ivan`: not great rationale, though
00:03  Yhg1s: gordonjcp: ok, well, whoever you configured ax25d, it's starting Python without a stdin, so sys.stdin isn't connected to anything. Trying to read from stdin produced an error with errno ENOTCONN.
00:05  gordonjcp: Yhg1s: other things that read from stdin work
00:06  ni_noob: Is there a way to work on a list directly rather than a copy when iterating over it? Like &$var in PHP
00:06  Yhg1s: ni_noob: you don't get a copy.
00:06  Yhg1s: ni_noob: iterating over a list gives you the references in the list.
00:06  Yhg1s: ni_noob: but assigning to a name doesn't change the references stored in the list. You have to assign to items in the list, instead.
00:06  ni_noob: Yhg1s: Hmm, ok thx. I must be doing something else wrong then
00:07  bob2: ni_noob: something like 'for i in list: i = adf' ?
00:07  bob2: ni_noob: that just makes the name point at something else, which isn't super useful
00:08  codeshah: hey guys, I am parsing through a bunch of news items - I am wondering what algorithms are used to check if multiple items are similar? Similar to GOogle news [though probably not as advanced?]
00:08  ni_noob: bob2: Not sure to be honest, don't know what that does. But as Yhg1s says I'm not getting a copy, so I'm doing something else wrong
00:08  Yhg1s: gordonjcp: well, this one doesn't. it's not really a problem with the Python code, when that exception is raised sys.stdin couldn't be read from. Have you considered that terminating the connection would cause that?
00:08  bob2: ni_noob: http://fpaste.org/
00:09  gordonjcp: Yhg1s: well, maybe it is that
00:09  gordonjcp: Yhg1s: is there a way to test whether or not stdin is available when the code is running?
00:09  JodaZ: hmm, is python.close() known to misbehave on windows ?
00:09  JodaZ: like in the case of while true open write close
00:10  bob2: do you mean file.close()? and no
00:10  sivang: hi all
00:10  bob2: JodaZ: instead of paraphrasing your code, pastebinz it
00:10  sivang: I wonder if anybody has ran into the issue of dpkg trying to run and init script of a python daemon before the python pakcage needed for it has been installed,
00:10  sivang: any ideas how to solve this?
00:10  JodaZ: bob2, bit much, but it really is just a single open failing once if i catch the error, sleep a second and redo it it works fine
00:10  Yhg1s: gordonjcp: try to read from it, catch the exception. Or, see if select.select() works, although I honestly don't know if it'll catch this.
00:10  sivang: hey bob2 :)
00:11  bob2: sivang: hi
00:11  gordonjcp: Yhg1s: well, it doesn't read from it
00:11  Yhg1s: JodaZ: how does it fail?
00:11  sivang: oh, and btw, I am using twisted :)
00:11  bob2: sivang: sounds like dependencies are broken rather than a python thing
00:11  bob2: heh
00:11  Yhg1s: gordonjcp: really? What's sys.stdin.readline() do then?
00:12  JodaZ: Yhg1s, IOError, with permission denied
00:12  gordonjcp: Yhg1s: nothing, apparently
00:12  sivang: bob2: well, the module that is unable to import is mine, that is supposed to be installed through setup.py through->debhelper->python-support
00:12  Yhg1s: JodaZ: sounds like something else had the file open. Pastebin the code and the traceback.
00:12  gordonjcp: Yhg1s: http://pastebin.com/TRnKnzUZ
00:12  infobob: http://paste.pocoo.org/show/284121/ (repasted for gordonjcp)
00:12  Yhg1s: gordonjcp: no, it reads from it.
00:13  gordonjcp: Yhg1s: there's a far simpler pair of examples
00:13  sivang: bob2: I was requested to implement a key value store in Python, without much thinking I started subclassing and implementing twisted.web.resrouce.Resource :)
00:13  Yhg1s: gordonjcp: I'm not sure what you're trying to show here.
00:13  sivang: bob2: everything works perfect, only this debian packaging hindrence
00:13  JodaZ: Yhg1s, i am asuming windows might have had it open for thumbnail generation or such, how do i have open work nonexclusively ?
00:14  gordonjcp: the version in C works as you'd expect - prints a message, waits for some input, prints "you typed" and then whatever you typed, hangs around for a few seconds, then exits which closes the connection
00:14  sivang: bob2: I can paste the package somewhere if you are really bored ;)
00:14  sivang: bob2: no missing depends from the external packages, though
00:14  gordonjcp: Yhg1s: the version in python never gets past the sys.stdin.readline()
00:14  Yhg1s: gordonjcp: and what does the traceback say?
00:14  sivang: bob2: this is on debian lenny
00:14  gordonjcp: the exact same thing as the previous example, [Errno 107] Transport endpoint is not connected
00:14  Yhg1s: Oh, and what if you don't run it with -u?
00:14  bob2: sivang: heh - iirc postinst won't be run until after all dependencies are unpacked - triple check it's starting from postinst and not preinst?
00:15  sivang: terrible crippled version of everything there...
00:15  gordonjcp: but it will only do that once the connection is closed
00:15  Yhg1s: JodaZ: I don't remember. Windows is a bit awkward that way.
00:15  sivang: bob2: will do! be right back
00:15  Yhg1s: gordonjcp: well, that's easily explained.
00:15  gordonjcp: Yhg1s: is it possible that despite the -u stdin is still buffered?
00:15  Yhg1s: gordonjcp: you're not checking the C version for errors. it's probably producing the same exception.
00:15  Yhg1s: gordonjcp: buffering is not the issue.
00:15  Yhg1s: eh, the same error.
00:16  gordonjcp: okay, so what *is* the issue?
00:16  Yhg1s: gordonjcp: as I said, the attempt to read from stdin returns an error value and sets errno to ENOTCONN.
00:16  gordonjcp: Yhg1s: but the C version works
00:17  Yhg1s: You can't tell, because *you're not checking the returnvalues*.
00:17  gordonjcp: so it must be passing a valid stdin to the child process
00:18  Yhg1s: gordonjcp: Python's 'readline' method boils down to a call to 'getc' in a loop, until it sees a '\n'.
00:18  Yhg1s: well, fgetc.
00:19  sivang: Yhg1s: I wonder if cin >> var does the same ;)
00:19  Yhg1s: but Python dilligently checks for error values being returned, and produces IOErrors with the value of errno if that happens.
00:20  ni_noob: Yhg1s, bob2: If it's by reference, then shouldn't the stripped value be inserted? http://fpaste.org/j8Gu/
00:21  Yhg1s: ni_noob: no, because str.strip doesn't modify the string (it can't; strings are immutable.)
00:21  bob2: ni_noob: are you talking about line 15?
00:21  dash: boop
00:21  Yhg1s: ni_noob: your assignment to 'line' just changes the name 'line', not the reference stored in the list.
00:22  gordonjcp: Yhg1s: ah, that's interesting, fgets() doesn't work
00:24  ni_noob: Yhg1s: Ok, strings are immutable. I forgot about that. But if I do str = 'str', then str = 'str2' that's possible because the variable is re-assigned?
00:24  pedro3005: how do I check if a variable is a string?
00:24  bob2: pedro3005: why do you want to do that?
00:25  dash: pedro3005: best to not check at all
00:25  ssbr: well,  usually you should already know; it's bad style.
00:25  pedro3005: but is there a way?
00:25  Yhg1s: ni_noob: that's the only thing it does, yes. It just changes the name 'str', not the object(s) it refers to.
00:25  _habnabit: pedro3005, anything is possible.
00:25  _habnabit: pedro3005, but don't.
00:25  Yhg1s: pedro3005: depends on what else it could be.
00:25 * ssbr puts bets on "a list"
00:25  pedro3005: Yhg1s, an int
00:26  ssbr: Ouch
00:26  pedro3005: I'm not coding any program, don't worry about style
00:26  Yhg1s: pedro3005: why can it be different types, and what do you want to do when it's either (or something else entirely, or something that isn't a str or int but can act like one, or even act like both at the same time?)
00:26  ssbr: pedro3005: So you might have a string representing an int, or an int? Or is the string something totally different
00:26  ssbr: pedro3005: if you're not coding a program, what's this question for?
00:26  pedro3005: ssbr, general curiosity. I've always wondered
00:27  _habnabit: 16:25:30 < _habnabit> pedro3005, anything is possible.
00:27  pedro3005: _habnabit, then...?
00:27  Yhg1s: pedro3005: then the answer is "it depends entirely on what you're doing", but frequently the answer is "don't do that then".
00:27  Yhg1s: almost always, in fact.
00:27  _habnabit: pedro3005, then... change your API so you're not uncertain which it is.
00:27  ni_noob: Yhg1s: Sorry, but I didn't quite get that. It changes the value of the var 'str', but not the object?  Meaning the string object has already been created and cannot be changed? I'm confused.
00:27  JodaZ: hmm, how do i exit to system from a thread ?
00:27  Yhg1s: ni_noob: it changes the *name* 'str'.
00:28  Yhg1s: ni_noob: it changes nothing about any object that may be assigned to 'str'.
00:28  _habnabit: JodaZ, you can't.
00:28  Yhg1s: ni_noob: a variable in Python is just a name, nothing more.
00:28  JodaZ: _habnabit, wat ?!
00:28  ssbr: ni_noob: do you know any other languages than Python?
00:28  Yhg1s: JodaZ: threads suck.
00:28  _habnabit: JodaZ, what Yhg1s said.
00:28  ni_noob: ssbr: PHP
00:28  pedro3005: well, I found a work-around
00:28  gordonjcp: Yhg1s: right, thanks for the advice
00:28  pedro3005: it's ugly though
00:29  Yhg1s: JodaZ: you can't kill a thread, and you can't sensibly exit the process from a thread.
00:29  ni_noob: ssbr: Never worked much with the OO stuff though
00:29  Yhg1s: pedro3005: for what?
00:29  ssbr: ni_noob: pretend it's no OO stuff at all.
00:29  pedro3005: x.__class__ == "a".__class__
00:29  Yhg1s: pedro3005: you never described your actual problem.
00:29  pedro3005: Yhg1s, for what I wanted
00:29  Yhg1s: pedro3005: yeah, don't do that. it's stupid.
00:29  ssbr: ni_noob: objects are just things stored in variables, like PHP
00:29  gordonjcp: Yhg1s: looks like stdin is passed to the child process just fine; python is incapable of using it but everything else is
00:29  Yhg1s: pedro3005: but *why* do you want it?
00:29  JodaZ: Yhg1s, what about nonsensibly ?
00:29  pedro3005: Yhg1s, I have said, it's not within any context
00:29  gordonjcp: I'll just redo my proggy in C
00:29  dash: pedro3005: never use __class__
00:29  Yhg1s: pedro3005: then you don't *have* a problem.
00:29  ssbr: ni_noob: if you do $v = 2; $v = 3; you don't "change" the number 2 -- numbers are fixed, immutable. You change the variable. So it is with strings in python
00:29  pedro3005: Yhg1s, and I said I did?
00:30  ssbr: JodaZ: turn the computer off ;)
00:30  _habnabit: pedro3005, your problem is entirely imagined.
00:30  dash: pedro3005: #python does not encourage curiosity, as a rule
00:30  Yhg1s: pedro3005: well, if you don't, what are you trying to learn? How to do something silly in Python? We can give you a couple more ways.
00:31  _habnabit: pedro3005, it doesn't actually exist except inside your head.
00:31  ni_noob: ssbr: So the point is you change the variable itself, not the value of it?
00:31  dash: ni_noob: correct.
00:31  Yhg1s: ni_noob: objects don't have 'values', they're just names referring to objects.
00:31  ssbr: ni_noob: ish. Be careful about your wording and how you read other peoples' wordings
00:31  Yhg1s: (or, if you will, the value of a variable is the reference.)
00:31  ssbr: ni_noob: many people will say "change the value of a variable" to mean "change a variable"
00:31  pedro3005: Yhg1s, then why is using __class__ stupid?
00:31  ssbr: which is different from what you mean by "value", i.e. the object pointed to by the variable
00:32  Yhg1s: pedro3005: because it doesn't work right in way too many cases.
00:32  pedro3005: Yhg1s, if the only possibilities are string and int though, I think it works
00:32  Yhg1s: pedro3005: the possibilities are never just string and int.
00:32  Yhg1s: pedro3005: but even if they were, it would be entirely the wrong thing to use.
00:32  pedro3005: Yhg1s, well, the problem doesn't exist!
00:32  Yhg1s: pedro3005: exactly.
00:32  dash: pedro3005: also, whether it works or not, it's not a good idea.
00:33  pedro3005: so it might as well not exist more than it does not already
00:33  ssbr: pedro3005: if you want a solution for a problem which cannot exist... wait, why would you want that?
00:33  dash: pedro3005: yes but we can't go back and fix python to be better.
00:33  ssbr: that's extremely pointless.
00:33  SpiderFred: how to make this work?     if tag not in searched_list and not in to_search_list:
00:34  Yhg1s: SpiderFred: repeat 'tag' as well as 'not in'.
00:34  ssbr: SpiderFred: "and tag not in to_search_list"
00:34  sivang: bob2: there are no pre* files at all
00:34  SpiderFred: thx
00:34  pedro3005: dash, wut? why are you saying that?
00:34  ni_noob: ssbr: Still trying to comprehend it. Maybe it will make more sense in the context of a solution. If I can't do answer = answer.strip('V_') because the string is immutable... I'm lost again, I thought "immutable" meant "cannot be changed, ever"
00:34  dash: pedro3005: time machines are expensive.
00:34  bob2: sivang: how are you starting it then?
00:34  sivang: bob2: still it tries to run, or compile it before the package has been installed
00:34  bob2: sivang: wait what
00:34  dash: pedro3005: you, however, can fix your code your code to be better
00:34  ssbr: ni_noob: you can do that.
00:34  ssbr: ni_noob: that is like doing a = a - 2
00:34  sivang: bob2: I am not not sure it is the startup script, maybe byte compilation upon install
00:34  pedro3005: dash, well, alright
00:34  bob2: sivang: is the problem that FOO's setup.py requires BAR to be installed to run?
00:34  dash: pedro3005: by making it not use __class__, and making it not need to typecheck
00:34  ssbr: ni_noob: it creates a new string and assigns it to the variable
00:35  sivang: bob2: yes, and BAR is the pakcage I am installing
00:35  Yhg1s: ni_noob: you can do 'answer = answer.strip('V_')', it just doesn't change *any other reference to the string answer refers to*.
00:35  ssbr: ni_noob: just like a = a - 2 creates a new integer and assigns it to the variable
00:35  bob2: ni_noob: think of names as post-it notes attached to objects
00:35  Yhg1s: ni_noob: if you do 'old = answer' and 'answer = answer.strip('V_')', 'old' remains referring to the old string.
00:35  bob2: ni_noob: answer = answer.strip('V_') # .strip('V_') returns a new string object, you stick the label 'answer' on it
00:35  Yhg1s: ni_noob: and the same if you take 'answer' from a list, in for example a for loop.
00:36  ni_noob: hmm
00:36  ni_noob: bob2: And that new string object is basically not 'attached' to anything I want
00:36  ni_noob: Alright, what's the solution then?
00:37  bob2: ni_noob: just the name 'answer', which you then don't use again and gets set to the next item in the list at the top of the loop
00:37  ssbr: ni_noob: to restructure the way in which you pass strings around, so that you can explicitly assign a new string to the variable you care about.
00:37  bob2: ni_noob: to alter the list itself
00:37  Yhg1s: ni_noob: to what? Modifying an item in the list you're iterating over? Usually to create a new list of items you want to have.
00:37  ssbr: or the container you care about.
00:37  ni_noob: ok, ok, one at at a time :)
00:37  ni_noob: You're all very helpful, but it's confusing to read 3 at once
00:37  ssbr: We lack any way of sharing information about who's saying what. I started typing first. :|
00:38  ni_noob: :D
00:38 * ni_noob is reading
00:40  adenosin: hi
00:40  adenosin: i have a question
00:40  adenosin: i have created a class
00:40  adenosin: class info:
00:40  adenosin:      chart = []
00:40  adenosin: now i try to create two instances of this class
00:40  bob2: adenosin: http://fpaste.org/
00:40  adenosin: good idea
00:40  adenosin: thanks
00:41  bob2: adenosin: you made chart a class attribute, not an instance attribute
00:41  bob2: adenosin: set it on 'self' in __init__ if you want it to be an instance attribute
00:41  sivang: bob2: doesn't seem like setup.py allows to specify order of installation
00:41  adenosin: and how do I make it an instance attribute?
00:41  bob2: sivang: I'm a bit lost
00:41  bob2: sivang: surely you don't want to a package to be downloading python tarballs to install
00:42  bob2: but then eggs, setuptools, python-support and python-central all blew my mind
00:42  Gentle: adenosin: class info: def __init__(self): self.chart = []
00:42  Gentle: basically
00:42  ni_noob: bob2, ssbr, Yhg1s: Ah 'answer' gets reset each time, ofc. So the solution is to do question['answers'][index] = answer.strip('V_') :)
00:42  Gentle: and add the newlines and tabs
00:42  adenosin: excellent, thanks :-)
00:43  sivang: bob2: no, but I can't seem to understand why my package is not installed with the 'script' is either being called, or evaluated
00:44  sivang: bob2: the proof for that is that on subsequent dpkg -i , there is no error since the package is already under /lib/python2.5/python-support whatever
00:45  Yhg1s: sivang: this sounds like a dpkg or control file issue, not something related to distutils.
00:45  Yhg1s: (or, in fact, specifically Python.)
00:45  sivang: /usr/lib/python-support/python2.5 actually
00:45  sivang: Yhg1s: okay, I'll ask there as well, funny it did not shopw before
00:46  sivang: and I am testng on a clean chroot
00:46 * sivang thinks of going to sleep
00:46  mastertogo: +r >.>
00:50  ahaney3: I've been using imaplib and I'm trying to mark a message as read after I've seen it in my script, I'm not sure from the documentation how to do this, anyone know?
00:50  ni_noob: Thank you guys and have a great night :)
00:51  bob2: ahaney3: manually
00:51  bob2: ahaney3: http://stackoverflow.com/questions/1296446/parse-gmail-with-python-and-mark-all-older-than-date-as-read
00:51  bob2: ahaney3: imaplib is very very low level
00:53  ahaney3: alright, so after I mark the message as read the next time I want the script I want only the unread messages to be processes, would that be something like, mail.search(None, "Not Seen")?
00:53  bob2: I forget
00:53  bob2: using imaplib means having the imap rfc open in another tab
00:53  Ganymede: Hello, I am spawing a subprocess using the subprocess module (I'll probably use Popen) but I'd like to kill the child's child after 2 hours to stop the child's child from entering an infinite loop. How would I get the pid of the child's child so I get send it a KILL signal? It looks like if I just send a KILL to the child, the child's child continues on.
00:54  bob2: Ganymede: Popen instances have a pid attribute
00:54  bob2: oh, child child
00:55  noobermin: Ok, I have a C extension module I made, thing is once i import it, the "import" command and other modules and commands (such as help) are no longer available, and python complains that each are not defined.
00:55  ritzt3ch: anyone know hwere i can find like a 100-300 line SINGLE file and able to just view .XLS files at the CLI level and use awk/grep on collums and such
00:55  noobermin: I know why, I add the module to __main__once i init it
00:56  ahaney3: bob2: yeah I've been realizing that more and more
00:56  sivang: damn you, l;enny
00:56  sivang: it worked an hour ago
00:56  bobi1: Please forgive the incredible newbishness, but I'm doing some network/socket stuff and have a client/networklayer/server trio talking to each other (or will, eventually). To start things off, I'm just reading a line from stdin on the client and sending it. However, it (the client) disregards the first line I type; I have to type a second line and THAT one gets sent out. Has anybody seen anything like this?
00:57  bob2: bobi1: http://fpaste.org/
00:57  bobi1: sec
00:58  bobi1: http://fpaste.org/N23o/
00:59  sivang: okay, I confirmed this shit- it tries the init script before the dependencies are installed
00:59  bobi1: ack
00:59  bob2: you cut out too much
00:59  bobi1: wait
00:59  sivang: stupid
00:59  bobi1: yep
00:59  bob2: sivang: no proper debuntu package should be having setup.py download random shit from the internet
00:59  bob2: sivang: so it sounds like your dependencies are broken and/or you haven't packaged everything it depends on
00:59  bobi1: less retarded: http://fpaste.org/xsUN/
01:00  bob2: I don't think sys.argv[1] contains " like you think it does
01:00  bobi1: it does when I pass "localhost" to the command line
01:00  bob2: your shell eats ""
01:00  bobi1: well then I guess that line doesn't matter
01:00  bobi1: right?
01:01  bobi1: or are you thinking that's the problem?
01:01  bob2: not at all, just pointless and confusing
01:01  bobi1: oh
01:01  bobi1: fair enough
01:01  bob2: ditto 16 + 17
01:01  metalfan_: hi
01:02  bobi1: Ah, 16+17 is because I was getting confused on the byte count being 5 when I "send" the string 'asdf'
01:02  bobi1: I can get rid of that
01:02  Diblo_Dk: Python says that I have not assigned a variable now, which I import. I use the same code several time in my program and it's only when I call my option window that I get the error. http://paste.pocoo.org/show/284144/
01:02  sivang: bob2: it is not for debutun :)
01:02  bob2: bobi1: .strip()
01:02  bobi1: will do
01:02  bob2: Diblo_Dk: that's not what it says
01:03  sivang: bob2: well, I used packages=exclude(['tests']) , that all
01:03  sivang: bob2: in the setup.py
01:03  bob2: Diblo_Dk: UnboundLocalError means you read a global, then later assign to it
01:03  metalfan_: i want to start processes with twisted, i currently have 4 different types of programs which should be started by their corresponding classes. how can i check which program to start if the type is in a key in a dict without using if/else x times?
01:03  bob2: metalfan_: classes are objects
01:03  bob2: metalfan_: put them in a dictionary with the names as keys
01:04  Diblo_Dk: bob2: And that means?
01:04  Yhg1s: Diblo_Dk: somewhere in the function you assign to 'lang'.
01:05  bob2: Diblo_Dk: you didn't paste the bit of code where you assign to lang
01:05  sivang: I'm using findpacakges...
01:05  metalfan_: bob2, how do i use the information in the dict later on to spawn the right class?
01:05  sivang: err, find_packages
01:05  noobermin: ok, sorry, i got distracted, i have an issue with a module i made, when I init it, I add it to __main__'s dictionary, but I seem to mess it up in the process. Here is my init function http://fpaste.org/YY2Q/
01:05  bobi1: bob2: after stripping, value of send() on 'asdf' is still 5
01:05  bobi1: although at this point I'm off my main question
01:06  sivang: thanks all
01:06  sivang: night
01:06  bob2: metalfan_: d = {'whatever': Whatever} ; ... ; d['whatever']()
01:06  Yhg1s: noobermin: so what goes wrong?
01:07  Diblo_Dk: I dont get it, sry - 1 minutes and you can see the hole sources
01:13  gzl: what's the best way of stripping US currency formatting from strings? for example "$1,472,382.00" -> 1472382.00. I could do it "from scratch" but if there's some utility function or standard idiom I guess that would be better.
01:14  ahaney3: str.strip() then remove the first char?
01:14  metalfan_: is there a way to import files that are located a directory above the current?
01:14  Yhg1s: gzl: there isn't really anything in the standard library for that, no.
01:14  Yhg1s: metalfan_: make the whole thing a package.
01:14  ejo: or lstrip the '$' if you're not sure whether it will be there
01:14  CrOOgie: hello guys
01:15  petersteele111: hey guys i was wondering if its possible when creating a button in pygtk if you click it you can call up another python program? I was just messing around with it and i can make the buttons print text and such but id really like to have a button when clicked pull up a full python program that is seperate from the pygtk file.
01:15  metalfan_: Yhg1s, you mean the code i want to import?
01:15  gzl: ejo: no, I mean, I know how to do it by lstrip, remove commas, etc, I was just wondering if there was some 'recipe' I should use instead of writing such a thing. anyway, sounds like I should just write it.
01:15  gzl: Yhg1s: thanks.
01:15  ejo: gotcha.
01:16  Yhg1s: metalfan_: yes, and the directory they share.
01:16  noobermin: Yhg1s: sorry, I'm unable to use import and help commands...
01:16  bobi1: So anybody have any idea why the first line of input from stdin is being ignored? http://fpaste.org/csiX/
01:17  Yhg1s: noobermin: so how does it fail?
01:17  metalfan_: Yhg1s, ok
01:17  bobi1: ~/Documents/Networks/prog2 % python servclient.py "localhost" 5001 client
01:17  bobi1: Client mode!
01:17  bobi1: asdf
01:17  bobi1: qwer
01:17  bobi1: 4
01:17  bobi1: qwer
01:17  bobi1: for example
01:17  _habnabit: bobi1, don't paste to the channel.
01:17  bobi1: argh, sry
01:17  bobi1: tabbed too quick
01:17  noobermin: ok, let me recreate and post it
01:18  Yhg1s: bobi1: hard to say without seeing the rest of the code. In that particular snippet, there's no reason for the first line to be ignored, but since it's not the whole thing, that doesn't say much. Besides, threads, they suck.
01:18  Diblo_Dk: Sorry for the time it took
01:19  Diblo_Dk: http://powervpn.svn.sourceforge.net/viewvc/powervpn/trunk/source/powervpn-0.0.4/gui/setting.py?revision=38&view=markup <- Setting window
01:19  petersteele111: for example say i have a file named Area.py and i am creating a new file called Hello.py The Hello.py file is a gui program made with pygtk and has two buttons. An Area button and a quit button. I want to know if its possible to connect the Area button to call the Area.py file?
01:19  Diblo_Dk: http://powervpn.svn.sourceforge.net/viewvc/powervpn/trunk/source/powervpn-0.0.4/sub/lang.py?revision=38&view=markup <- Import code (lang.get())
01:19  bob2: petersteele111: calling a file makes no sense, but you can certainly call a function in another file
01:19  Yhg1s: Diblo_Dk: line 70 assigns to 'lang'
01:20  Yhg1s: Diblo_Dk: do you actually mean to assign to the global variable? (But keep in mind that does *not* change the module you imported it from.)
01:20  petersteele111: well it is a function inside the Area.py file sorry about that but i cant make it work for some reasoin
01:20  Yhg1s: Diblo_Dk: or did you mean to use a different variable?
01:20  Diblo_Dk: Ooooh :S Thanks
01:20  Diblo_Dk: Yah :)
01:21  Diblo_Dk: I will look a it :)
01:21  petersteele111: ill write up some mock code here and post a link so you can see what i am doing wrong hold on just a sec
01:21  bobi1: Ygh1s: well, what the hey; here you go. http://fpaste.org/ALsR/ I'm starting to suspect the moron() function
01:22  Yhg1s: bobi1: well, obviously, yes.
01:22  Yhg1s: it uses 'raw_input', which also reads from sys.stdin.
01:23  bobi1: Yhg1s: So it eats the input instead of only reacting to 'exit'?
01:23  Yhg1s: And since it's a different thread, you have no control over what it actually does when. using the same file from multiple threads is a bad idea, for more reasons than just that.
01:23  Yhg1s: bobi1: of course.
01:23  bobi1: Ygh1s: Argh, thanks
01:23  noobermin: and...it turns out some other things are a bother right now, bear with me...or don't. either is fine
01:23  bobi1: Yhg1s: Also, I wouldn't be doing this if it wasn't in the damn assignment ><
01:23  Yhg1s: bobi1: threads suck. it's best not to use them.
01:23  bobi1: Yhg1s: Not an option, unfortunately : /
01:23  Yhg1s: that sounds implausible.
01:23  bobi1: Thanks though
01:24  Yhg1s: (when dealing with sockets, not using threads is always an option.)
01:24  bobi1: Well I'm not the professor so I don't get to call the shots about that
01:24  Yhg1s: tell the professor #python said he sucks, then :)
01:24  bobi1: He says threads so threads it is
01:24  bobi1: Will do :D
01:24  bobi1: thanks again
01:25  metalfan_: bob2, thx
01:30 --- Pilif12p is now known as Pilifhashw
01:33  ahaney3: So, is there a good way to take a list of key values seperated by colons and put it into a dictionary?
01:33  bob2: a loop
01:33  ahaney3: obviously I could write the function but this is a pretty comment plain text format in unix, is there not a module that reads that like there are modules for json, etc?
01:34  bob2: what format?
01:34  ahaney3: key : value
01:34  ahaney3: where value could potentially be multiline
01:34  bob2: a for loop
01:34  bob2: then no
01:35  ahaney3: would I just split by colon and then even numbers would be keys and odd numbers would be values?
01:35  bob2: the first format is even more trivial than that
01:35  bob2: the multiline version is more work than either
01:35  luke-jr: I just upgraded a server from Python 2.5 to 2.6, and chaos ensues. How can I begin troubleshooting?
01:36  luke-jr: the biggest problem apparent is that under 2.6, my server is eating RAM like candy
01:36  Ganymede: very fitting for Halloween
01:37  luke-jr: (I assume migrating to 2.6 is a good stop-gap to 3)
01:38  RafeKettler: ahaney3: yes, that's what you'd want to do. is each pair on its own line?
01:38  petersteele111: ok nevermind i figured out what i was doing wrong and it works now sorry to bother yall
01:42  luke-jr: …
01:46  luke-jr: so no ideas?
01:51  Yhg1s: luke-jr: about what? You didn't say much, other than 'eating RAM'.
01:51  Yhg1s: there could be lots of reasons for that.
01:52  luke-jr: Yhg1s: identifying the reasons, for a start
01:52  luke-jr: I can't find any useful memory profiler
01:52  Yhg1s: luke-jr: try to find out what's taking up memory.
01:52  Yhg1s: 'heapy' is as useful as they get.
01:52  Yhg1s: (which doesn't mean it'll identify your issue.)
01:52  Yhg1s: the usual bisecting of your code is always a useful approach.
01:52  caution: what's the best way to make several adjacent spaces act as one, so they don't create blank list items for a split(' ')?
01:53  Yhg1s: And then there's making sure all the third-party extensions are the same version.
01:53  Yhg1s: caution: use s.split() instead.
01:53  caution: I don't understand
01:53  caution: 'a  b c'.split(' ') is what I'm using
01:53  Yhg1s: caution: don't pass the str.split method an argument.
01:53  Yhg1s: caution: yes. use 'a  b c'.split() instead.
01:53  rikkimaru: what does {2,3,4} create?
01:53  luke-jr: Yhg1s: bisecting only works when a change introduced a problem
01:54  bob2: rikkimaru: a set in 2.7+
01:54  Yhg1s: rikkimaru: in Python 2.7 or 3.x, a set. in 2.6 or before, a syntax error.
01:54  Yhg1s: luke-jr: that's why I said 'bisecting your code', not 'bisecting the changes'.
01:54  caution: thanks Yhg1s, what if they're not spaces though?
01:54  luke-jr: not practical, realisticly ☹
01:54  luke-jr: it's all interrelated
01:55  RafeKettler: caution: then pass an argument to split()
01:55  Yhg1s: luke-jr: that's all the advice I have to give, sorry.
01:55  Yhg1s: caution: then filter out empty strings from the result, or use re.split() instead.
01:55  caution: ok thanks
01:55  RafeKettler: Yhg1s: is re.split() more efficient?
01:56  Yhg1s: RafeKettler: I'm not sure why you ask this.
01:56  Yhg1s: If you're asking if I suggested it because it's more efficient, then no, I'm not saying that.
01:56  RafeKettler: Yhg1s: I mean, why is it preferrable to str.split()?
01:56  Yhg1s: RafeKettler: because it does something different.
01:56  Yhg1s: RafeKettler: did you read caution's actual question?
01:56  Yhg1s: Not the last one, the one he started with.
01:56  RafeKettler: Ygh1s: no, wasn't here
01:57  RafeKettler: Yhg1s: what is it?
01:57  ssbr: <caution> what's the best way to make several adjacent spaces act as one, so they don't create blank list items for a split(' ')?
01:57  Yhg1s: RafeKettler: he wants to treat multiple separators as a single one.
01:57  ssbr: followed by, <caution> thanks Yhg1s, what if they're not spaces though?
01:58  caution: how should I decide between using the regex and filtering?
01:58  Yhg1s: caution: personal preference.
01:59  luke-jr: is there a dict type that can take objects as keys?
01:59  RafeKettler: Yhg1s: okay, yeah a regex would definitely be better in that case. I see your point
01:59  SegFaultAX: Happy halloween, #python. :)
02:00  ssbr: luke-jr: dict
02:00  ssbr: ugh
02:00  ssbr: SegFaultAX: Don't remind me :(
02:00 * ssbr should be at a party but is busy working instead
02:00  SegFaultAX: ssbr: Sorry, haha. I don't like the holidays either, but I thought it might be nice to show good spirit.
02:00  luke-jr: ssbr: dict only allows string keys
02:01  ssbr: luke-jr: incorrect. for example, {1:2} works fine.
02:01  Yhg1s: luke-jr: not Python dicts, no.
02:01  Yhg1s: luke-jr: besides, strings are also objects.
02:01  ssbr: luke-jr: it requires hashable keys, nothing more.
02:01  Yhg1s: ssbr: well, hashable and comparable.
02:01  ssbr: Er, yes.
02:01  ssbr: It is impossible to make a dict-like container that doesn't put some restrictions in what objects you put in it.
02:02  luke-jr: sigh
02:02  Yhg1s: ssbr: well, I can make one that has as the only restriction 'requires id() work on the object', which is true for all Python objects :)
02:02  Yhg1s: it just wouldn't be terribly useful.
02:02  luke-jr: I want to map objects to numbers
02:03  RafeKettler: luke-jr: you can do that
02:03  Yhg1s: luke-jr: then you can use a dict, but only if the objects you want to map are hashable.
02:03  RafeKettler: Yhg1s: right, if they're hashable
02:03  luke-jr: arbitrary objects
02:03  luke-jr: by memory address or whatever
02:04  Yhg1s: or perhaps you want to use the id() of the object as a key, although if you do that you should also store the object somewhere, as the id() is only sensible as long as the object is alive.
02:04  luke-jr: AttributeError: 'list' object has no attribute 'id'
02:04  Yhg1s: luke-jr: it's not a method.
02:04  SegFaultAX: luke-jr: Lists are not hashable.
02:04  tos9: luke-jr: ... also, lists aren't hashable. Rather than using id, you probably want to use tuples
02:04  Yhg1s: that's why he's trying to use the id.
02:05  SegFaultAX: luke-jr: Which is why they cannot be used as a key, which is what they have been telling you for at least 5 minutes.
02:05  ssbr: Yhg1s: point
02:05  SegFaultAX: luke-jr: Only hashable/immutable objects can be used as dict keys.
02:06  SegFaultAX: luke-jr: Anything that is hashable, and implements either __eq__ or __cmp__.
02:06  Yhg1s: SegFaultAX: I doubt luke-jr cares, considering the problem he's trying to solve.
02:06  Yhg1s: (he's writing his own memory debugger.)
02:07  RafeKettler: You can always use a hash function on the object, map the hash to the object, then map the objects hash to the number. Haha just kidding
02:07  SegFaultAX: Yhg1s: Ouch, sounds painful.
02:07  Yhg1s: RafeKettler: yeah, that's not how hashes work. they're a shortcut for equality, not a replacement.
02:07  SegFaultAX: RafeKettler: You cannot has a list.
02:08  RafeKettler: Wow, even my deliberately bad solution fails
02:10  beinghuman: anyone know how I can just change the key in a dict?
02:10  Yhg1s: beinghuman: delete the item under the old key, reinsert it under the new key.
02:10  beinghuman: I know there's probably a simple way to do this but my mind just isn't working
02:10  Yhg1s: beinghuman: dict.pop() is convenient for that.
02:10  beinghuman: oh ok
02:11  SegFaultAX: Yhg1s: Can you take a look at something for me?
02:11  Yhg1s: SegFaultAX: I don't know, can I?
02:11  SegFaultAX: http://pybites.blogspot.com/2008/10/pure-python-dictionary-implementation.html
02:11  SegFaultAX: Yhg1s: Scroll down to his _lookup function.
02:11  SegFaultAX: Yhg1s: I am not following his logic here: i = (i << 2) + i + perturb + 1
02:12  SegFaultAX: Where perturb is the hash value of the object in question.
02:13  Yhg1s: SegFaultAX: it's modifying the probe's next step by a number of bits in the hash.
02:13  SegFaultAX: Yhg1s: Any particular reason for that exact equation?
02:13  Yhg1s: SegFaultAX: this is just the Python dict implementation, so the source for that, and the dictnotes.txt that accompany it, are good documentation.
02:13  Yhg1s: SegFaultAX: yes: minimal collisions for different hashvalues that are the same mod the dict size.
02:14  Yhg1s: SegFaultAX: http://svn.python.org/view/python/trunk/Objects/dictnotes.txt?view=markup
02:14  Yhg1s: also, http://svn.python.org/view/python/trunk/Objects/dictobject.c?revision=81029&view=markup
02:15  lio_013: print  12345/1000 gives 12  i want it  12.345 ??????????
02:15  Yhg1s: lio_013: make one or both operands a float, or do 'from __future__ import division' at the top of your module.
02:16  lio_013: how to make one or both operands a float
02:16  Yhg1s: a float is a number with a dot in it.
02:16  lio_013: i know i mean how i code  it
02:16  Yhg1s: depends on what you're actually doing.
02:17  Yhg1s: the usual way is to make one of the original literals a float, or to call float(). But if you do this often, just use the future import.
02:17  lio_013: i need the output of this operation lix i told u x=12345/1000
02:17  Yhg1s: then make either 12345 or 1000, or both, a float.
02:17  Yhg1s: which you do by making sure they have a dot in them.
02:18  lio_013: i get it
02:18  lio_013: thanks
02:19  ahaney3: what is the email.parser class supposed to do?
02:19  Yhg1s: ahaney3: parse emails.
02:19  Yhg1s: (it's a module, though, not a class.)
02:19  ahaney3: I was thinking it would return a dictionary of values so I could do things like message["subject"]
02:19  ahaney3: but it doesn't APPEAR to do anything when I pass it a string and I print an instance of the object it returns it's still JUST a string
02:20  Yhg1s: ahaney3: it doesn't. it returns an email.message.Message object.
02:20  ahaney3: what's that useful for?
02:20  Yhg1s: ahaney3: and printing email.message.Message objects turns it back into a string.
02:20  Yhg1s: ahaney3: accessing pretty much anything in the email.
02:20  Yhg1s: ahaney3: instead of printing directly, you should print their repr().
02:21  Yhg1s: or, in the interactive interpreter, just let the interpreter print them for you (which also uses repr().)
02:21  ahaney3: could you give a usage example?
02:21  Yhg1s: ahaney3: message['subject']
02:21  Yhg1s: there you go, the message's 'subject' header.
02:21  Yhg1s: you rarely use the parser directly, though.
02:21  Yhg1s: you usually use email.message_from_string.
02:22  Yhg1s: (or email.message_from_file)
02:22  ahaney3: alright, awesome it was doing what I wanted it to do, but I expected when I called print for it to print something like {"subject": food, ...}
02:22  ahaney3: so I was thrown off
02:23  Yhg1s: when you're debugging things, always print the repr() of objects.
02:23  Yhg1s: (or playing around in the interactive interpreter.)
02:23  ahaney3: alright, so that's equivalent to php's print_r basically?
02:23  Yhg1s: I have no idea what print_r does, sorry.
02:24  ahaney3: if you have an array / object it prints out the individual members
02:24  Yhg1s: well, then yes, but not limited to those types.
02:24  ahaney3: awesome
02:24  Yhg1s: (it just asks the object for a representation of itself.)
02:24  ahaney3: I wasn't aware of that function
02:24  ahaney3: that's EXTREMELY helpfu
02:24  ahaney3: helpful*
02:31  noobermin: I have an issue with a module i made, when I import it, it ruins the __main__'s dictionary...I have to add the module to __main__ upon import, but still...
02:32  noobermin: here is the init function: http://fpaste.org/YY2Q/ and here is some sample that shows what happens: http://fpaste.org/8Na5/
02:33  hopthrisC: ahaney3: this might help, too: http://stackoverflow.com/questions/192109/
02:34  sroy2: I'm trying to convet a java file to python. One question I had was regarding random numbers... The program uses java.util.Random.nextInt() as part of an encryption/decryption scheme. Is there a way to implement the random in python so programs encrypted by the java version can be decrypted by the python version?
02:35  KirkMcDonald: noobermin: Why does it need to alter __main__?
02:37  hopthrisC: sroy2: if it uses pseudo-random numbers it's not worth anything as an encryption method anyways
02:38  noobermin: Someone told me to do it :( I didn't really get it either, he said otherwise I wouldn't be able to use it. Thing is it's meant to be an extension for embedded scripts, giving an API from my program to scripts that my program runs
02:38  hopthrisC: sroy2: anyway, find out the internal algorithm used by java in java.util.Random.nextInt and re-implement it in python
02:38  sroy2: hopthrisC: its not supposed to be rigorous, its more of a deterrent
02:39  hopthrisC: sroy2: that is a load of crap
02:39  noobermin: anyhow, does my treating of __main__ ruin it as I think?
02:39  sroy2: hopthrisC: ?
02:39  hopthrisC: sroy2: real encryption is also a deterrent and it actually works
02:40  RafeKettler: sroys: is jython an option?
02:40  RafeKettler: sroy2: is jython an option
02:40  hopthrisC: sroy2: java documentation says it uses the algorithm from knuth
02:41  hopthrisC: sroy2: should be relatively easy to find out the constants and details
02:41  sroy2: RafeKettler: I haven't used jython, it could be
02:41  noobermin: so if I take the whole adding to __main__ biz, it should still work, right?
02:42  noobermin: i'll try it anyway
02:42  RafeKettler: sroy2: that's the easiest option, you can just use the exact same stuff that you use in java
02:42  hopthrisC: sroy2: looky there, this seems to have the details: http://www.javamex.com/tutorials/random_numbers/java_util_random_algorithm.shtml
02:42  sroy2: RafeKettler: thanks - I'll look into jython then.
02:42  sroy2: hopthrisC: thanks :)
02:44  hopthrisC: sroy2: don't thank me for helping you shooting yourself in the foot
02:45  ssbr: sroy2: why would you invent your own terrible encryption scheme as a deterrent aaaugh
02:45  ssbr: use an existing one that isn't insane
02:45  hopthrisC: sroy2: also keep in mind that a pure-python implementation of this algorithm will be orders of magnitude slower because it doesn't take advantage of shortcuts the hardware offers
02:45  sroy2: hopthrisC: the key is a file name - the extension... it is more obfuscation than encryption
02:45  hopthrisC: sroy2: i don't even want to know... it. is. broken.
02:46  RafeKettler: hopthrisC: if he uses jython none of this will be a problem. also, how would java take advantage of hardware shortcuts that Python couldn't, seeing as inlining C is easier in Python than java
02:47  hopthrisC: RafeKettler: true, but if jython is an option, why isn't the existing java implementation itself anymore?
02:47  RafeKettler: hopthrisC: come again? the idea is that if he uses jython he can just use the original java implementation
02:47  hopthrisC: RafeKettler: as for "that python couldn't:" i said "pure-python," didn't i?
02:48  hopthrisC: RafeKettler: 'xactly. he can use _all_ of it
02:48  ssbr: RafeKettler: Java could very easily take advantage of hardware shortcuts that CPython can't.
02:48  ssbr: it has a JIT compiler that is very good and brings Java to around the same ballpark, in terms of speed, as C and C++
02:48  hopthrisC: ssbr: not in this case
02:48  hopthrisC: ssbr: that would have to be ai-level intelligence
02:48  RafeKettler: ssbr: Java is never going to be as fast as C or C++ regardless of the JIT
02:49  RafeKettler: ssbr: maybe in some cases, but generally never
02:49  ssbr: hopthrisC: what is "this case"?
02:49  ssbr: RafeKettler: I said "the same ballpark". You can read, right?
02:49  ssbr: I didn't say "as fast", that would be dumb.
02:49  RafeKettler: ssbr: they're not in the same ballpark even
02:49  hopthrisC: ssbr: please scroll up ~10 minutes
02:50  geekbri: anybody here ever written a python script thats used pylibmc
02:50  ssbr: RafeKettler: http://shootout.alioth.debian.org/u32/benchmark.php?test=all&lang=javasteady&lang2=gpp
02:50  ssbr: hopthrisC: I assumed we were still talking about encryption. If you say "10 minutes", I must be correct.
02:50  ssbr: hopthrisC: in which case, yes, Java is much faster than Python here, because it can do math without boxing/unboxing etc.
02:50  ssbr: (and the JIT is good with numbers, too)
02:50  hopthrisC: ssbr: i was specifically talking about optimizing knuts prng algorithm
02:50  ssbr: s/math/arithmetic/
02:51  RafeKettler: ssbr: I basically see that, in the best case, Java has a similar runtime, but in most all cases it loses to C++
02:51  ssbr: hopthrisC: PRNG algorithms also use arithmetic
02:51  hopthrisC: ssbr: java.util.Random is not implemented in java
02:51  ssbr: RafeKettler: Yes. That's what "the same ballpark" was meant to imply.
02:51  ssbr: It's not better or equal, but it's closeish.
02:51  hopthrisC: oh-pulease
02:51  ssbr: hopthrisC: All the better, then.
02:51  RafeKettler: 1/2 as good at the best is not close
02:51  hopthrisC: *sigh*
02:51  ssbr: RafeKettler: Compared to Python?
02:51  RafeKettler: whatever, it's subjective
02:52  ssbr: RafeKettler: Python is a hundredth as good at the same microbenchmarks
02:52  RafeKettler: yeah python is slow, I know
02:52  ssbr: RafeKettler: The point was comparing Java and Python, so keep that in mind.
02:52  ssbr: hopthrisC: Since we were talking about how optimized it was... now we're tlaking pure-python versus C
02:52  geekbri: well ifanybody has any experience with memcached and python maybe they could tell me what horrible thing i've done wrong here  http://fpaste.org/wfxO/
02:52  hopthrisC: the point was never comparing java and python. you just took a question about using broken pseudo-crypto and derailed it into dick comparisons
02:52  RafeKettler: yes, but if a smart person were to implement something like this in Python, they'd use C for the intense parts
02:53  ssbr: RafeKettler: Java already uses C for the intense parts.
02:53  ssbr: hopthrisC: I was responding to a very specific comment
02:53  RafeKettler: ssbr: true
02:53  ssbr: hopthrisC: you didn't have to derail the conversation for my side-conversation
02:54  ssbr: you chose too. It takes two to tango.
02:54  hopthrisC: ssbr: _yes_ i was comparing pure-python against c. that was the whole point, since i recommended to sroy2 to re-implement a piece of java std lib in _pure_ python
02:54  ssbr: eh, "chose to". I didn't even intend to derail the original convo. Personally, I'd place the blame squarely on your shoulders. But I'm biased.
02:54  ssbr: hopthrisC: Right, well, using Jython was a better option, wasn't it then?
02:56  hopthrisC: ssbr: if jython is an option, why is not keeping the original java in the first place?
02:56  ssbr: hopthrisC: I've no idea, that's a very good question. Maybe you should ask him again, in case he missed it.
02:57  hopthrisC: why should i? i'm not advocating jython
02:58  ssbr: hopthrisC: Well, you should because the answer matters. Depending on the answer, the "best" advice changes.
02:58 --- Pilifhashw is now known as Pilif12p
02:58  ssbr: So if you're interested in providing the best advice, the answer matters to you.
02:58  RafeKettler: dunno, if you want the Java crypto and random stuff use Jython. if for some reason you need to reimplement it, then reimplement it
02:58  hopthrisC: ssbr: "the best answer" stays _don't_ _use_ _broken_ _crypto_
02:58  hopthrisC: there is no java crypto in what he does
02:59  ssbr: hopthrisC: There is that. He'll never do that, though.
02:59  hopthrisC: she?
02:59  hopthrisC: to be honest, something with jython in it never counts as a best answer in my book
02:59  ssbr: hopthrisC: You should eliminate that bias.
03:00  ssbr: If you want to write some code that integrates with a Java infrastructure, what do you do?
03:00  hopthrisC: i don't want to write any code that integrates with jave in any capacity
03:00  ssbr: Is rewriting the entire infrastructure in Python so that your new addition will take 10 minutes instead of 20 "best"? Or is using Jython "best"? Or is sucking up and using Java "best"?
03:01  ssbr: Or is there some fourth option I'm neglecting?
03:01  hopthrisC: i'm principled that way
03:01  ssbr: hopthrisC: Don't pretend your principled actions are what's actually best for you or your coworkers, though
03:01  hopthrisC: i don't have coworkers
03:01  hopthrisC: i'm principled that way
03:01  ssbr: hopthrisC: Well, some people do.
03:02  ssbr: hopthrisC: I'm sorry that you are utterly incapable of putting yourself in another person's shoes when answering questions. Maybe you'll do better next time.
03:02  hopthrisC: nope, i won't
03:02  ssbr: sroy2: SO why can't you use the original Java implementation, if you can use Jython?
03:02  ssbr: hopthrisC: WIth an attitude like that, you'll be an op in no time
03:03  hopthrisC: please explain "op"!?
03:03  ssbr: channel operator
03:03  hopthrisC: ssbr: sroy2 doesn't know yet, whether jython is an option
03:03  hopthrisC: hehe
03:04  hopthrisC: i can live with that
03:05  bob2: be nice, y'all
03:05  ssbr: bob2: I was quite nice.
03:06  ssbr: I said he was op material! That's a compliment on most channels!
03:06  exarkun: Where do I get Windows binary egg of distribute?
03:06  exarkun: for Python 3.x
03:07  ssbr: exarkun: I think you're supposed to use the distribute equivalent of setuptools' ez_install.py . distribute_setup.py I think.
03:07  exarkun: hm, I see
03:11  Ademan: do urwid attributes stack? so that (conceptually) <red>Foo <blue>bar</blue> baz</red> will display with foo and baz being red, with bar being blue
03:12  ssbr: Ademan: If no-one answers instantly I'd suggest trying it and seeing what haooens
03:13  Ademan: ssbr: yeah, I'm still trying to figure out the attr argument of TextCanvas() though :-p
03:15  exarkun: ssbr: thanks, that works
03:15  ssbr: Have fun.
03:20  tomas_: I have a class and in that class I have some functions. Is there any way of calling those functions during __init__? at he moment I do: c = MyClass() c.somefunction
03:21  bob2: tomas_: of course
03:21  bob2: tomas_: __init__ is only special in the sense that it gets called automatically
03:22  bob2: so self.foo()
03:22  tomas_: bob2: thanks
03:22  bob2: however, doing much stuff in __init__ is discouraged
03:22  tomas_: I was about to ask
03:22  tomas_: if this is something that people do
03:22  bob2: usually you just want to set some attributes
03:23  tomas_: I mean for functions that don't have any arguments
03:23  tomas_: it looks like it would make sense to just call them automatically
03:24  bob2: depends what they do
03:24  bob2: it's not really about whether they take any args or not
03:25  tomas_: yeah I guess you could just pass the args in self.fo() just as well as c.foo() (:
03:25  tomas_: I have a function that I will always run when I create the object
03:25  tomas_: so in this case should I put it in init?
03:26  tomas_: oh I'll just write c.foo()
03:29  qiyong: !rawinput
03:29  qiyong: !doc rawinput
03:29  bob2: :(
03:29  beinghuman: so I'm storing passwords because I need them in plain text later. how can I store the password in a non-human readable format and then get it back in readable text in my program?
03:30  beinghuman: without anything that is easy to get by like compression
03:30  bob2: you can't
03:30  tomas_: beinghuman: zlib
03:30  tomas_: oh without (:
03:30  tomas_: you could use ssl
03:30  bob2: if you need your program to be able to get them back, then anyone can get them back
03:30  bob2: just use file permissions
03:30  bob2: ssl does not help
03:30  beinghuman: that's what I thought too
03:30  beinghuman: I mean I store everything in the private app data folder
03:30  qiyong: where's rawinput defined?
03:30  beinghuman: so it shouldn't be a security risk
03:30  bob2: qiyong: raw_input, and it is a builtin
03:31  bob2: qiyong: http://docs.python.org/lib has documentation for everything that comes with python
03:31  CryptoSec: does anyone knows what pyparsing is? and what it does?
03:31  beinghuman: bob2: that's fine right? storing the password in the private config folders?
03:31  bob2: CryptoSec: it's a library for writing parsers
03:31  beinghuman: I had some users requesting that I "encrypt" the password
03:32  bob2: beinghuman: well, it's the best you can do given the above constraints
03:32  beinghuman: but I don't really know anything that can appease them because I need to get it back... except compression but that's pointless, really.
03:32  bob2: I mean, taking into account you're getting advice from strangers on irc :)
03:32  beinghuman: hah, right.
03:34  bob2: http://www.catb.org/~esr/fetchmail/design-notes.html -> password encryption
03:34  bob2: so esr at least agrees!
03:34  CryptoSec: bob2: I'm trying to do the following writing a simple program that reads in some structured text and converts it into structured data
03:34  CryptoSec: bob2: I have never coded a parser and I don't know where to begin... I'm stuck... you this help me in any way?
03:36  beinghuman: okay so here's what I'm gonna do to appease them. I'm gonna add an ability for an option master PIN
03:36  beinghuman: optional
03:37  beinghuman: well shit that's ultimately pointless too
03:37  bob2: for the same reason :)
03:38  beinghuman: well
03:38  bob2: CryptoSec: I don't really know what the state of python parser generator is, sorry
03:38  beinghuman: bob2: I could put the entire config file in a password protected zip and compare the hashes of the PIN, right?
03:38  bob2: CryptoSec: if your format is simple, it might be easy enough to j ust parse it by hand
03:38  bob2: you could hire navajo code talkers, too
03:39  beinghuman: i don't get it
03:39  bob2: well, what's the point of that?  then you need to store the zipe password AND the pin
03:39  bob2: so you've done even more work for no gain
03:39  beinghuman: true
03:40  skyl: if anyone with reportlab familiarity could help me address the two comments here: http://dpaste.com/268101/
03:40  sly007: if I have a class C defined in the file c.py or the __init__.py of dir c, it's the same right? In both case I can use "from c import C"
03:41  bob2: the only 'master password' idea that's useful is if you use a password provided by the user to encrypt the other passwords
03:41  bob2: but is that helpful?
03:41  skyl: sly007: from c.c import C in the second case
03:42  bob2: I think sly007 meant there was no package in the first case
03:42  skyl: or in the c/c.py case that is
03:42  groundnuty: hey, is there a way to overide the impementation of class method in runtime?
03:42  bob2: really a classmethod?
03:42  skyl: setattr I guess groundnuty ?
03:43  bob2: no, just assignment
03:43  bob2: Class.whatever = classmethod(whatever)
03:45  groundnuty: skyl: thx, it works :)
03:45  skyl: bob2 's suggestion was probably better
03:45  skyl: s/probably//g
03:46  groundnuty: skyl: yep, it works as well. I tried that way - must have had some typo tho
03:47  beinghuman: bob2: could I put all the config stuff in a zip, store the hash PIN, and if zlib accepted "hash matching" wouldn't that be feasible?
03:47  beinghuman: that's if zlib did that
03:48  bob2: good lord
03:48  bob2: yes you can do arbitrarily complicated things, but none of it is any use unless it boils down to using a password from the user to encrypt something (and then making them enter it again to decrypt things)
03:49  CryptoSec: bob2: well the things that i have to parse are just timestamp, username,  user conversation, and maybe the conversation size
03:49  bob2: CryptoSec: not really enough information to comment on, sorry
03:49  bob2: maybe pastebin some sample data
03:49  beinghuman: bob2: well I'm just asking because I an application called keypass and it does exactly what they're asking for
03:49  beinghuman: I use an
03:50  bob2: beinghuman: right, it encrypts stuff and requires the user to provide a password to decrypt it
03:50  beinghuman: http://luxsci.com/blog/master-password-encryption-in-firefox-and-thunderbird.html
03:50  bob2: beinghuman: that's helpful because it effectively uses one password to secure lots of other ones
03:50  beinghuman: seems there they use the pass as the encryption pass phrase
03:50  bob2: if you're writing a password manager or something that works similariy then go nuts
03:50  beinghuman: bob2: well that's what I'm saying. I could just do that and use a master pin
03:51  bob2: afaik you never said what your program does, so ok
03:55  CryptoSec: bob2: my fault...sorry.. let me try it again.... I have about 31MB of chat room log files which are structured text which consists of timestamp, the individuals username, and the conversation that a particular username typed in a chat room. (similar to what you see right now in #python, minus the timestamp next to ever line of conversation) what I'm trying to do is to write a python parser...
03:55  CryptoSec: ...which would convert it to structured data.
03:56  bob2: CryptoSec: that's probably really easy: just read each line in, and call split(' ', 3) on each one
03:58  CryptoSec: bob2: something like this?      http://fpaste.org/Dsq3/
03:59  bob2: the 3 in my suggestion is important
03:59  bob2: if you shows us some real lines I can tell you for sure
03:59  bob2: (but you're on the right track)
03:59  tos9: CryptoSec: And don't use input.
04:00  bob2: might be python 3
04:00  tos9: And print's not a function. And both of those are wrong if for some reason you're using python3
04:01  CryptoSec: bob2: i'm using python 3
04:06  bob2: hm, why does simplehttpserver not do post
04:06  CryptoSec: bob2: well I had this one last night...  http://fpaste.org/3Ozg/ I typed it up and you suggested some correction.... but I'm having some doubts because my the researcher gave me this suggestion  http://fpaste.org/ykGq/  and I don't know if I'm coming up with the same thing with the python script.
04:08  CryptoSec: bob2: that's why I'm confused as hell... am I doing it right.... wrong....
04:10  jo-erlend: Is there any way of handling exceptions that occur on an XML-RPC server on the client? I was thinking about session timeouts. It would be nice if I could handle that kind of thing in a try-block on the client.
04:11  tos9: CryptoSec: You're fine, but again, we have no way of knowing without actually seeing how *exactly* your lines look.
04:11  bob2: CryptoSec: that doesn't really matter
04:11  nosklo: jo-erlend: you'd need to have a layer around your xmlrpc calls to catch the error on the server and send a special "error" response to the client.
04:12  bob2: ugh cgihttpserver is awful
04:12  tos9: CryptoSec: And don't use your second paste, your first paste is better. Or do something like this if you want: http://fpaste.org/Dwbe/
04:13  tos9: CryptoSec: But the main thing is, that pay attention to what bob2 told you about split(), the second argument tells it how many maximum splits to do
04:13  jo-erlend: nosklo, oh, ok. That's not very interesting then. Suppose I might just as well just ask the server if the session is valid in advance.
04:14  nosklo: jo-erlend: a layer around your client calls could receive the special "error" response and raise an actual exception
04:14  nosklo: jo-erlend: it's a cool abstraction
04:15  ssbr: jo-erlend: what would happen if the session timed out after you asked, but before you sent out the real query?
04:16  CryptoSec: tos9: that's easy... here is a sample...   http://fpaste.org/nDI4/
04:16  jo-erlend: ssbr, right. That's the kind of thing that makes me want to use exceptions, but in this case, I could just make the server update the session timeout whenever the client asks if the session is still valid.
04:16  bob2: why is  fpaste still in the topic
04:17  qiyong: http://fpaste.org/aEYX/ what's wrong with the except there?
04:17  CryptoSec: tos9: my exact lines of chat lot
04:17 --- f00li5h is now known as skeleton_feline
04:17  ssbr: jo-erlend: I'd do the error-msg route that nosklo suggested, it's nice
04:17  qiyong: ctrl-c not catch after eof
04:17  jo-erlend: ssbr, but you are right. I think I'll do as nosklo suggested.
04:17  qiyong: http://fpaste.org/aEYX/ what's wrong with the except there? ctrl-c not catch after eof
04:17  tos9: CryptoSec: yeah, then what we've told you should work. Does it? Oh actually, mine says split(" ", 4) instead of 3 by mistake.
04:17  ssbr: (it's nice for many reasons, but I guess you can appreciate enough of them to approve of it)
04:17  ssbr: bob2: what would you suggest instead
04:18  CryptoSec: bob2: here is a sample of my chat logs that I'm trying to parse ....   http://fpaste.org/nDI4/
04:18  bob2: ssbr: pocoo or bpaste
04:18  ssbr: bob2: they're dirt slow
04:18  bob2: ssbr: fpaste doesn't set a cookie for my default language and seems to time pastes out
04:18  tos9: (I like pastie, but they have dumb legal terms)
04:18  ssbr: bob2: don't use fpaste, then
04:19  ssbr: bob2: I use codepad when I can. It was originally in the topic, because it's usually the fastest
04:19  tos9: codepad has been slow as hell the past 2 weeks, they must be having server problems or something
04:19  ssbr: but it occasionally suffers mysterious slowdowns, possibly because people submit extreme pastes
04:19  beinghuman: so does python still not support creating encrypted zip files?
04:20  nosklo: qiyong: what do you mean?
04:20  bob2: CryptoSec: http://paste.pocoo.org/show/284175/
04:20  qiyong: nosklo, ctrl-c not catched
04:20  bob2: beinghuman: pretty sure that's the case
04:20  bob2: they're fairly useless, though, so it's alright ;)
04:21  nosklo: qiyong: how do you know it's not catched
04:21  beinghuman: sigh
04:21  ssbr: bob2: anyway, the top three speed options were gist (github), fpaste, and codepad
04:21  qiyong: nosklo, Traceback (most recent call last):
04:21  qiyong: nosklo,     answer = raw_input("Eo: ")
04:21  qiyong: KeyboardInterrupt
04:21  bob2: ssbr: I guess I'll live
04:22  ssbr: bob2: the thing about pocoo is that all the mainstream pocoo servers take so long to load a paste that people actually have to wait
04:22  nosklo: qiyong: I can't reproduce it
04:22  ssbr: (literally, seconds)
04:22  bob2: hm, I'm on gprs atm so I can't tell :)
04:23  CryptoSec: tos9: would you please explain what you meant from the massage that you sent be earlier "But the main thing is, that pay attention to what bob2 told you about split(), the second argument tells it how many maximum splits to do"   because I don't quite understand.  thank you.
04:23  nosklo: qiyong: I'd use bpaste. It's really fast
04:23  nosklo: argh
04:23  ssbr: bob2: oh, so everything is slow for you?
04:23  bob2: CryptoSec: split takes two arguments, one is the character to split o, one is the maximum number of bits to split up
04:23  nosklo: ssbr: bpaste loads faster than codepad here.
04:24  bob2: CryptoSec: by passing 4 as the value of the second arg, we ask split to only break up the timestamps and username, leaving the message as one big blob
04:24  ssbr: nosklo: maybe now. It's been slow recently.
04:24  bob2: ssbr: yeah
04:24  ssbr: nosklo: I actually ran timed tests at one point. codepad took fractions of a second
04:24  bob2: I wonder what the problem with pocoo ones are, it doesn't sound like very complicated code
04:24  nosklo: ssbr: I ran timed tests too :)
04:25  ssbr: nosklo: yes, it's been slow recently
04:25  ssbr: bob2: either insufficient caching, or insufficient hardware/isp
04:25 --- skeleton_feline is now known as f00li5h
04:25  CryptoSec: bob2: oh nice!! I did not know that.... thank you for clarifying it for me....
04:25  ssbr: bob2: I'd be interested to know which honestly
04:26  ssbr: problem is, almost all the pastebins are closed-source
04:26  ssbr: so we can't really run direct comparisons
04:26  ssbr: (and yes, I added this addendum because I realized that I stupidly restated the obvious)
04:28  skyl: what is a good evenly widthed font?
04:28  qiyong: anyone try this? http://fpaste.org/aEYX/ what's wrong with the except there?
04:29  bob2: skyl: I really like terminus
04:29  CryptoSec: just a friendly question...... bob2.... tos9 .... the names kind of look a like.... do you two know each other.... friends?
04:29  fluter: hi, when use DOMImplementation.createDocument, what is namespaceUri, qualifiedName
04:29  tos9: CryptoSec: bob2 is my sister
04:29  ssbr: skyl: I like Consolas
04:29  bob2: ssbr: ugh, such a silly thing to keep closed - two views and a call to pygments
04:30  tos9: skyl: Consolas for me too. Inconsolata and Droid Sans Mono are good backups
04:30  ssbr: skyl: the term you want, by the way, might be "monospaced", unless you already knew that.
04:30  bob2: qiyong: what do you mean what's wrong?
04:30  CryptoSec: bob2: is he correct?
04:30  bob2: or fixed-width
04:30  bob2: CryptoSec: heh, no
04:30  qiyong: bob2, ctrl-c does't catch
04:31  bob2: qiyong: ? that program is incomplete
04:31  CryptoSec: okay...
04:31  tos9: CryptoSec: :)
04:31  qiyong: bob2, ?
04:32  ssbr: bob2: Well, some pastebins (codepad, ideone) do a great deal more
04:32  CryptoSec: tos9: it was kind of give away... bob2 it is sort of a guys name....
04:32  bob2: qiyong: you don't define exit
04:32  CryptoSec: but.... whatever......     moving on......
04:32  bob2: ssbr: oh fair enough for them I guess
04:33  noobermin: I'm trying to use python to make resources for a C program...these resources must be on the heap...so I'm using malloc and such. anyhow, is there any concievable way for the python platform to interfere with malloc calls?
04:33  nosklo: qiyong: I can't reproduce your problem. It works fine here.
04:34  ssbr: CryptoSec: there are girls named "bob". i.e. Roberta/Bobi
04:34  bob2: qiyong: (which makes me think your real code differs in other ways)
04:34  bob2: hm
04:34  bob2: wow
04:34  bob2: nevermind
04:34  ssbr: noobermin: Uh, sure, what do you mean?
04:35  ssbr: noobermin: keep in mind that python itself calls malloc extensively during the execution of python code, so python can't really implement malloc without extra magic.
04:35  noobermin: ok, I call malloc in my type's new function
04:35  CryptoSec: ssbar: true... my-bad
04:35  bob2: can't believe I never noticed exit() was a builtin outside of the interactive interpreter
04:36  nosklo: bob2: I guess exit is a builtin added by most site.py files
04:36  noobermin: ...please clarify. I'm asking if there is some odd way python can interfere with the stuff I allocate with malloc when such malloc calls are from within python extension functions
04:36  noobermin: it honestly makes no sense, but hey...you never know :/
04:38  ssbr: bob2: most, but not all, site.py files
04:38  ssbr: maybe not even most!
04:38  ssbr: never ever ever use it
04:39  ssbr: noobermin: Oh. Nevermind me, I've been doing too much kernel programming recently
04:39  qiyong: nosklo, press eof, then ctrl-c
04:40  qiyong: nosklo, the first ctrl-c works, but the after eof, not
04:40  ssbr: noobermin: No, I don't think it can, unless you let it (via adding it to the refcount stuff or something). Trace through with gdb, like you would any C program.
04:42  noobermin: thank you. My seg fault is my issue then. it usually is :) don't know why I'm prone to blame my tools before examining my own code ;)
04:42  ccw: Hey all.  Is there a way to use a list comprehension to fill several lists at once?  I'm reading a large file and I want to fill an array for each field, but only read it once
04:42  KirkMcDonald: ccw: Sounds like a for loop to me.
04:44  ccw: hmm, bummer.  This is like finding out Santa isn't real.  I was beginning to thing comprehensions could do *anything*, and fast
04:44  ssbr: They can do anything, pretty much.
04:44  bob2: you can most likely write a convoluted listcomp to do it
04:44  ssbr: That doesn't mean they're the right tool for every job.
04:46  ccw: ok, so if my data file runs to millions of lines I want to avoid doing a for loop and appending to a bunch of lists each time, right?
04:46  nosklo: qiyong: I press many eofs and ctrl-c is catched all the time
04:46  nosklo: qiyong: I can't reproduce it, I've tried in all means possible
04:47  bob2: ccw: why? a for loop that does all that ine one pass through the file seems quite sensible
04:47  ejo: the "appending to a bunch of lists each time" part is the killer though
04:48  ejo: but at least he didn't say appending to strings
04:48  ccw: I thought that constantly making your lists longer with every iteration was expensive and there was some memory allocation voodoo one is supposed to do
04:48  ccw: I mean, obviously not explicitly
04:48  ejo: ccw: what do the lists hold, and have you looked at other data structures you could use?
04:48  ejo: could you use a set?
04:49  ejo: the lack of positional information in a set makes it far faster to add to, if i'm not mistaken
04:49  bob2: ccw: nope
04:49  bob2: ccw: lists get aggressively expanded as needed
04:49  ccw: hmm, I suppose in this case I could.  It's just a bunch of floats that I'm going to wind up histogrammign
04:50  ejo: aha!
04:50  bob2: maybe you want numpy or something
04:50  ccw: bob2: I know they *can* expand, I had the vague notion that wasn't the best way to do it if you had to do it a lot
04:50  ejo: It's a known phenomenon that Python programmers often default to throwing things in lists that don't necessarily need lists.  I catch myself doing it all the time
04:50  bob2: it's a sensible first stab
04:51  ssbr: ccw: the "best" way? No. But it's within a constant factor of the best way.
04:51  bob2: and if it is too slow, then you can use something else
04:51  tos9: ejo, ccw: *cough* premature optimization?
04:51  bob2: and your tests will tell if your faster version is still correct ;p
04:51  ejo: ccw: possibly you can compute your histogram on the fly rather than assemble it from the lists at the end of the data ingestion!
04:51 * ejo coughs too, ok
04:51  ccw: yeah, this falls under the category of questions asked for edification and amusement
04:51  ssbr: ejo: if they're sorted, yes, and that would be a fine idea
04:52 * ejo scores a fine idea in #python and is tempted to quit while he's ahead
04:52  ssbr: ejo: pop quiz: what algorithm would be used here?
04:52  ejo: ssbr: are you sure they'd need to be sorted for that to be useful?
04:52  ccw: ejo: I'm not quite sure I know what you mean?  just bin as I go?
04:52  ssbr: ejo: depends what you mean by "on the fly"
04:53  ejo: Sorry, I have expunged the names of all algorithms from my memory banks and while I know the answer I cannot possibly tell it to you :D
04:53  ssbr: ejo: the online algorithm requires them to be sorted. otherwise you won't know histogram[k] for any k until everything is iterated through
04:53  ejo: ccw, ssbr: yes, I meant bin-as-you-go
04:53  ssbr: but if you're not suggesting the online algorithm, I am disappoint
04:53  ejo: but you do know histogram-so-far[k].  No?
04:53  ssbr: sure, but that's nearly-useless
04:53  ejo: oh, are you very dissapoint?  i doesn't afraid
04:54  ejo: <-- this grasshopper still has plenty to learn about histograms.
04:54  ssbr: (the answer I was looking for was "merge", by the way)\
04:54  ejo: drat!
04:54  ssbr: ejo: histograms are boring
04:54  ccw: ok... out of curiosity, why bother binning on the fly?  just to save memory?
04:54  ssbr: nothing to know about them.
04:54  ejo: mainly because the bins make this cool sound when you toss things in them
04:54  ssbr: ccw: depends what "binning on the fly" means
04:55  ssbr: what do you mean by it?
04:55  ssbr: there has been much confusion on this topic recently
04:55  ahaney3: I'm looking to match a string in an email that looks like this "Service Pro:            Gary B. (ID: 120656)" and I'm using     match = re.match(r"Service Pro:(.)*\(ID?p<id>\)", msg) and it's returning a None is that regex wrong?
04:55  ejo: I just meant increment the count of each item as you go rather than making lists then finding their length.  But maybe what you're doing is more complex.
04:55  ccw: ssbr: what is this "merge" you speak of?   I took ejo to mean calculating a bin number and adding to that bin rather than storing the data
04:56  ejo: oh, merge is one of the sort of canonical, known, sorting algorithms
04:56  ssbr: http://en.wikipedia.org/wiki/Merge_algorithm
04:56  ssbr: but you may be more confused by my answer than not
04:56  ssbr: ejo: well, *part* of one
04:56  ssbr: merge-sort is the full algorithm, but merge is a function used in merge sort
04:56  ejo: right
04:57  ejo: ugh!  Chatzilla fails horribly when you close the Firefox window from which you originally launched the client
04:57  ejo: Now i have to close both and lose my scrollzzzzzz
04:57  ejo: b(brb)
04:57  ssbr: ejo: get a better IRC client!
04:58 * ejo will do
04:58  ccw: so do you fancy programming types do all this binning by hand or is there a smart/lazy way to do it?
04:59  ccw: started using scipy.histogram, but it seemed awkward to make plots out of the output, which gives you bin edges rather than centers
04:59  ssbr: there is a lazy way to do it.
05:00  ssbr: but just do the builtin histogram stuff
05:00  ssbr: (to scipy or matplotlib or whatever)
05:01  qiyong: nosklo, see /msg
05:01  ccw: have you used the scipy version before?  If so, how did you go about plotting the result?
05:02  akk: I had good luck with the pylab plotting for simple graphs, but I wasn't doing histograms.
05:03  Octave: Hi, I have problem with a bunch of nested objects. I'm looking at indexing attributes of all these objects, or some other  way to help me cheaply enforce a constraint.
05:04  Octave: They belong to a parent object which has other attributes which the removal of could make some of the nested objects redundant.
05:05  Octave: I was looking at a dict with nested object ID as the key and the nested object attribute I'm worried about as the value.
05:05  akk: Is there a way to get ConfigParser entries in the order they appear in the file? I'm finding docs about writing in order, but not reading in order.
05:05  tos9: Octave: That's pretty vague.
05:05  Octave: It would be maintained as I add and remove/alter the nested objects.
05:06  ccw: hmm, histograms are ubiquitous.  There's got to be an easy way to do them well.  If I have to bust out ROOT I'm gonna be pissed
05:07  akk: I tried several histogram packages and haven't been entirely satisfied with any of them ... I'm sure there's a great one somewhere.
05:07  akk: matplotlib.pyplot was easy to use and they look okay, but it's hard to scale the output (like if you want to plot a really wide one that spans years).
05:09  Octave: tos9: Ok, sorry. I just do't want to allow some attributes of an object to be removed if some other attributes which are objects depend on it. My problem is they are nested and I don't want it to be expensive.
05:11  tos9: Octave: Perhaps you want __delitem__ or __delattr__, and do a check on your nested items attrs if one of your dependent attrs is being deleted, but I dunno.
05:12  nosklo: qiyong: ok, but I can't reproduce it so I can't help
05:13  R0b0t1: Could someone help me understand what the syntax error is here? http://python.pastebin.com/hTxzRRhU
05:14  infobob: http://bpaste.net/show/10519/ (repasted for R0b0t1)
05:14  ssbr: looks like you're missing a }
05:14  R0b0t1: Well, no, this is just the first line.
05:14  ssbr: but it could be something else, too
05:14  R0b0t1: The error is pointing to somewhere in the middle.
05:14  Octave: tos9: Atm, all I've come up with is a seperate dict, just to make checking the attributes cheaper. It can be maintained as the objects are edited.
05:14  nosklo: R0b0t1: looks like you're using eval
05:14  R0b0t1: Oh it's pointing to the assignment.
05:15  ssbr: oh wtf
05:15  ssbr: why are you using eval?
05:15  tos9: R0b0t1: you can't do that
05:15  tos9: And don't use eaval
05:15  R0b0t1: I have a large file which is generated by a program I wrote (generates a markov chain). I wish to use this markov chain with sage, but I need a way to import it.
05:15  R0b0t1: So... Any suggestions besides eval?
05:15  ssbr: import
05:15  R0b0t1: How? I don't wish to continuously move the file around.
05:16  tos9: Octave: Why should a separate dict be faster?
05:16  ssbr: what do you mean "continuously move the file around"?
05:16  R0b0t1: Can I change a python shell's working directory?
05:16  ssbr: R0b0t1: you're not telling me everything, so I can't be expected to give optimal advice
05:16  ssbr: why would you be moving stuff around all the time, as opposed to once?
05:16 --- andrewfree_ is now known as andrewfree
05:16  R0b0t1: The file gets regenerated often.
05:17  R0b0t1: And my copy of sage is not installed globally.
05:17  nosklo: R0b0t1: generate the file in a better format your program can read without using eval
05:17  ssbr: so make moving it to the installed directory part of the generation process.
05:17  R0b0t1: nosklo: WHAT better format?
05:17  R0b0t1: Please have a solution if you tell me to do something.
05:17  R0b0t1: I don't see why eval can't parse an assignment.
05:17  ssbr: R0b0t1: please tell us what you're doing so we can give you solutions
05:17  R0b0t1: Perhaps exec or similar?
05:17  ssbr: R0b0t1: because it's for evaluating expressions
05:17  ssbr: use import.
05:17  ssbr: why can't you do what I have suggested?
05:18  R0b0t1: I already told you: My copy of sage is not installed globally, and I enter the python shell via ./sage-python. How do I import a file from a different directory?
05:18  R0b0t1: I kind of already asked this.
05:19  ssbr: R0b0t1: "kind of" meaning vaguely, without any indication that it was a question
05:19  Octave: tos9: I just thought it would be faster than looping through the attributes of nested objects. It's not?
05:19  ssbr: where you've installed sage has nothing whatsoever with where you install other python modules
05:19  R0b0t1: ... Ok, well, can you answer what I just said, then?
05:19  ssbr: unless sage comes with python
05:19  tos9: R0b0t1: Having an attitude is probably a good way to get help.
05:19  ssbr: just install it on your import path
05:19  R0b0t1: I'M TRYING TO MAKE SENSE. You people just keep telling me to do things that would be a bit of trouble.
05:19  ssbr: i.e. sys.packages, or somewhere pointed to by a .pth file in sys.packages, or somewhere pointed to by PYTHONPATH
05:20  R0b0t1: So: How do I import a file in a directrory different than my working directory?
05:20  ssbr: R0b0t1: how do you import the os module?
05:20  R0b0t1: import os
05:20  ssbr: you import it.
05:20  ssbr: It just needs to be accessible by Python.
05:20  R0b0t1: RIGHT.
05:20  ssbr: I just described how to make it so.
05:21  tos9: Octave: Well, you don't want to loop obviously... you'd want to do something like if getattr(nestedobject, "depend_on_me"): raise DontDoThatPlease(), and I was suggesting doing that in delattr. But when are you checking your dict now?
05:21  Octave: R0b0t1: make sure you have __init__.py files in your project directory and have the python path setup.
05:21  ssbr: R0b0t1: install it on your python import path ("i.e. sys.packages, or somewhere pointed to by a .pth file in sys.packages, or somewhere pointed to by PYTHONPATH")
05:21  ssbr: as long as it's a .py file there, it will get imported fine
05:22  R0b0t1: This involves copying it every time I wish to change it.
05:22  R0b0t1: I also changed my PYTHONPATH to point to ~/devel/eclectic, but "mtest" can not be found.
05:22  ssbr: R0b0t1: one question before I answer this non-issue: do you change it during the execution of your program?
05:22  tos9: Uh, no, either change it where it is, or use a symbolic link, or add the folder to a pth as ssbr said.
05:22  ssbr: R0b0t1: as for the non-issue, use a symlink or hardlink
05:23  ssbr: R0b0t1: or just bloody don't move it at all and add the directory to the import path like I said
05:23  R0b0t1: I added it to my PYTHONPATH, no go.
05:23  Octave: tos9: Ok, that's interesting. So that would require maintaining th dependencies inside the attribute my objects may depend on?
05:23  ssbr: R0b0t1: you added the directory containing it to your PYTHONPATH, and it was a .py file, and then you started python, and importer it, and you got an ImportError?
05:24  R0b0t1: Yes.
05:24  ssbr: R0b0t1: What OS are you on?
05:24  R0b0t1: Linux, Ubuntu x64.
05:24  ssbr: how did you add it to PYTHONPATH?
05:24  R0b0t1: export PYTHONPATH=~/devel/eclectic
05:24  R0b0t1: It was empty beforehand.
05:24  ssbr: try $HOME/devel/eclectic *shrug*
05:25  tos9: Octave: Yeah, I guess. So still a dict, just now in your parent class it would be something like {"parent_attr1" : (Child_Class1, ["dep1", "dep2" ... ], "parent_attr2" ... } and then in delattr you could check that dict and just loop through the tuples
05:25  R0b0t1: ssbr: No, still does not work.
05:25  ssbr: if that doesn't work, show me the output of ls ~/devel/eclectic ; python -c "import sys; print sys.path"; python -vc "import <mymodule>"
05:25  tos9: Well, actually, that's probably not what you meant by "inside the attributes your objects depend on"
05:25  tos9: But that's what I meant.
05:25  ssbr: where <mymodule> is your module. use a pastebin, this will be very large.
05:26  tos9: Octave: Unless you've got some seriously overcomplicated dependency relationships going on, that shouldn't really be an issue.
05:26  tos9: Especially since you'd only be doing a lookup when doing a del
05:26  R0b0t1: ssbr: http://paste.pocoo.org/show/284193/
05:27  R0b0t1: Oh syntax.
05:27  R0b0t1: Still does not make sense to me.
05:27  ssbr: ...
05:27  ssbr: I want to smack you
05:27  ssbr: R0b0t1: show me mtest.py
05:27  R0b0t1: HOW is that a syntactical error?
05:27  Octave: tos9: Yeah, it should be pretty simple. Thanks for your help.
05:27  ssbr: R0b0t1: I'm about to tell you
05:27  ssbr: but it depends on where that is
05:27  tos9: R0b0t1: Because that's not what dictionaries look like? Where are your braces
05:27  ssbr: tos9: on another line presumably
05:28  ssbr: I'm betting he has unmatched parens/brackets/braces just above
05:28  R0b0t1: tos9: Oh, they're there.
05:28  tos9: Octave: Sure :) I didn't help much, you pretty much had it under control. Good luck
05:28  ssbr: R0b0t1: show me mtest.py
05:28  tos9: "line 1"? But ok, yeah... paste it.
05:28  R0b0t1: It's large, let me upload it.
05:29  qiyong: nosklo, did you see /msg? you press ctrl-d, then ctrll-c, the trace outputs
05:29  R0b0t1: ARGH
05:29  ssbr: line 1 in "<string>"?
05:29  ssbr: not another call the exec...
05:29  R0b0t1: Crap, I was looking at the wrong file.
05:29  ssbr: to*
05:29  tos9: ssbr: Yeah. Whoops.
05:30  R0b0t1: ffs
05:30  R0b0t1: It was a problem with ./sage-python
05:30  R0b0t1: Does not use the same path.
05:31  R0b0t1: Anyway, sorry for the waste of time. Is there no way to parse text as in eval and perform an assignment without explicitly importing something?
05:32  nosklo: qiyong: yes, and I told you that since I can't reproduce the issue, I can't help
05:33  ssbr: R0b0t1: there's unfortunately always a way to do things, even evil things
05:33  ssbr: R0b0t1: it would be far better to use import
05:33  ssbr: except you never answered the one question that could make me change my stance on this
05:34  tomas_: how do I tell subprocess to change dir when executing the external process?
05:34  R0b0t1: ssbr: What?
05:35  ssbr: do you change it [the generated python code] during the execution of your program?
05:35  R0b0t1: What do you mean?
05:35  R0b0t1: Oh, no.
05:35  R0b0t1: I don't.
05:35  ssbr: I mean do you start the program, and then, I don't know, reload the data
05:35  ssbr: OK.
05:35  ssbr: So, use import then.
05:35  R0b0t1: I just use it.
05:36  R0b0t1: My problem is I don't know how sage manages its import directories, so I can't really change them.
05:36  _habnabit: tomas_, Popen(..., cwd='balls')
05:36  ssbr: oh yeah I asked about this earlier too. Does sage come with its own python?
05:36  R0b0t1: Well, it wraps python.
05:36  ssbr: if so obviously you have to tailor yourself to its python instead of Ubuntu's
05:36  tomas_: _habnabit: cheers (;
05:36  R0b0t1: At least I am pretty sure.
05:36  ssbr: R0b0t1: wtf?
05:37  ssbr: it's a python library
05:37  ssbr: ]maybe you should use something less apparently-insane
05:37  R0b0t1: Heh. I'll look up how to import the sage libraries into python, I guess.
05:40  tos9: R0b0t1: You can do it. But not easily
05:41  tos9: R0b0t1: i.e., usually I do sage -sh; python; from sage.all import *
05:41  ssbr: lesson learned: avoid sage like the plague
05:41  tos9: ssbr: Nah, sage is great.
05:41  R0b0t1: ^
05:41  ssbr: Apparently not.
05:41  ssbr: There are plenty of other libraries that do the same stuff without being crazy
05:41  tos9: ssbr: Well it's a pain in the ass since it has its own environment, but it's great.
05:42  ejo: What is Sage about?
05:42  ssbr: Right. There are libraries that are great, but not PITAs.
05:42 * ejo ducks the jfgi
05:42  ssbr: ejo: computer algebra
05:42  tos9: None with as many libraries as sage.
05:42  ejo: ah, thanks
05:42  ssbr: tos9: the cool thing about libraries that aren't insane is, you can actually use them together.
05:42  ssbr: so they don't *need* to be as big as sage.
05:42  skyl: software for algebra and geometry experimentation <3
05:42  ssbr: (that said, this isn't as much true of computer algebra)
05:43  tos9: ssbr: Sage has all the libraries you're going to want inside of it.
05:43  ssbr: tos9: This is an anti-feature.
05:43  ssbr: It sounds like a feature, but really it's a bad thing.
05:43  ssbr: Good packages are more modular.
05:43  tos9: ssbr: For a programmer. For a mathematician / scientist, it isn't.
05:44  ssbr: I'm all three. What now?
05:44  ssbr: Actually my claim on the third is pretty weak.
05:44  ssbr: So let's just say I'm the first two.
05:44  luke-jr: why?
05:44  tos9: Also, the grueling task of making sage modular was attempted (successfully I think) by the gentoo guys. Not a pleasant sight.
05:44  luke-jr: mathematics is one of few formal sciences
05:44  ssbr: tos9: It wasn't pleasant because they tried to make sage something it was not. Apparently sage was designed badly from its core. :/
05:45  tos9: Again true.
05:45  ssbr: Badly by a programmer's/computer-scientist's standpoint, anyway.
05:45  luke-jr: APIs should be language-specific. Implementations should be modular.
05:45  tos9: But still, chances are, as a mathematician, sage is a godsend.
05:45  luke-jr: ☺
05:45  qiyong: how do i load a script into interpreter?
05:46  ssbr: luke-jr: the thing about math and science is that math is excluded from a great deal of definitions of the word "science", but included in some others
05:46  tos9: The "good" definitions of science don't include math.
05:46  luke-jr: ssbr: only lame definitions
05:46  ssbr: luke-jr: so don't... assume that all definitions of science include math, when you talk about it. Most people in both fields would probably disagree
05:46  luke-jr: math is more science than most other sciences
05:46  ssbr: luke-jr: Fine, but they're definitions held by other people, and they're mainstream (whereas yours is not).
05:46  tos9: luke-jr: Wrong.
05:47  ssbr: luke-jr: I can see the appeal of your definition, definitely.
05:47  ssbr: But don't take an imperial attitude about it.
05:47  tos9: Or not wrong, it's your opinion, I'm just making it clear that I take the opposite viewpoint.
05:47  ssbr: definitions are the most opinion thing there is.
05:48  ssbr: There literally is no wrong. Unless, uh, you define there to be a wrong. But then you go full-circle. Very sad state of affairs.
05:48  luke-jr: then we'd better talk in Latin
05:48  luke-jr: which is more well-defined
05:48  luke-jr: :p
05:48  ejo: pie jesu domine...
05:48  ejo: dona eis requiem
05:48  ejo: *thwap*
05:48  ssbr: luke-jr: even so, people could say "no, I believe the definition of 'modus operandi' to exclude layman crafting techniques", and then what do you do?
05:49  ssbr: you say, "you're wrong", but that's just because you have a different definition. He could just as easily say the same to you.
05:49  ssbr: There is no concrete, common, empirical ground on which you can draw arguments from.
05:49  ssbr: There's no common ground at all.
05:49  luke-jr: ssbr: I reject redefinitions.
05:50  ssbr: luke-jr: Oh, so then math isn't science after all ;)
05:50 * insane_kangaroo yawns
05:50  ssbr: (citation: 16th century idea of "science")
05:50  insane_kangaroo: more people needs to move to Pittsburgh :3
05:51  ssbr: Ah, nope, in the 13th century it meant knowledge. c'est la vie
05:51  luke-jr: ☺
05:55  qiyong: what is raw_input in python3?
05:55  Jerub: qiyong: 'input()'
05:55  ssbr: qiyong: read the Python 3 changelog before myou do any python 3 programming.
05:55  ssbr: If you don't know this answer, it means you haven't read that thoroughly enough.
05:56  ssbr: qiyong: http://docs.python.org/release/3.0.1/whatsnew/3.0.html go go go
05:56  jmoiron: what happens in python2 when you call dict() on an object inheriting from dict
05:57  tos9: jmoiron: you get whacked over the head for inheriting from dict
05:57  ssbr: jmoiron: you get an instance of dict with the same keys
05:57  ssbr: (and the values for those keys)
05:58  ssbr: Or, no, maybe it's different if you inherit.
05:58  ssbr: Well, you get a dict that's about the same as your dict-subclass
05:58  qiyong: how to tell the system the exception is handled?
05:58  jmoiron: yeah..  i'm having some difficulty there, and was hoping there'd be a magic method somewhere i could override to tell dict() what to do
05:59  nosklo: qiyong: you don't have to do anything, just handle it
05:59  nosklo: jmoiron: easy - stop inheriting from dict
05:59  nosklo: jmoiron: it's not a good idea at all
05:59  jmoiron: yeah no problem
06:00  jmoiron: oh wait, no, it is a problem
06:00  jmoiron: because the c module i'm using is using PyDict_Check on my object
06:00  jmoiron: so i have to.
06:00  jmoiron: just can't figure out what dict() is doing
06:01  jmoiron: so what happens is that it thinks my thing is a dict, since i trick it into thinking so
06:01  qiyong: nosklo, with that same script, i get During handling of the above exception, another exception occurred:
06:01  Accolade: hi, I have a small inconvenience here - when I call matplotlib.pyplot.plot(), Python waits until I close the plot window. How can I make it continue execution, while I enjoy the plot?
06:01  jmoiron: but PyDict_GetItem() can't find my keys
06:01  jmoiron: (interestingly, PyObject_GetItem() can..)
06:02  qiyong: during handle EOFError, KeyboardInterrupt occured nosklo
06:02  nosklo: qiyong: that's possible... put the keyboardinterrupt outside the loop to avoid that
06:03  nosklo: qiyong: er, the KeyboardInterrupt try/except
06:05  jmoiron: actually, i think what i'm trying to do is bad, and this c api should either accept any type of mapping or should use PyDict_CheckExact instead to avoid these shenanigans
06:09  qiyong: nosklo, why, the eof is already handled, no?
06:14  megajosh2: Hey, I'm using Python 3.1, and for some reason I get an OverflowError with the function call in this error message when using the 'curses' module http://fpaste.org/QxDw/
06:15  megajosh2: But according to this http://docs.python.org/dev/library/curses.html#curses.use_default_colors I can use -1 in curses.init_pair where I did
06:15  megajosh2: Is there something I'm missing here?
06:17  megajosh2: (I did run curses.use_default_colors() before that function call)
06:18  megajosh2: Actually, it seems like http://docs.python.org/dev/library/curses.html#curses.use_default_colors and http://docs.python.org/dev/library/curses.html#curses.init_pair are conflicting
06:19  megajosh2: "The value of fg and bg arguments must be between 0 and COLORS."
06:19  megajosh2: vs
06:19  megajosh2: "Allow use of default values for colors on terminals supporting this feature. Use this to support transparency in your application. The default color is assigned to the color number -1. After calling this function, init_pair(x, curses.COLOR_RED, -1) initializes, for instance, color pair x to a red foreground color on the default background."
06:19  MostAwesomeDude: Have you considered using urwid instead?
06:20  megajosh2: Never heard of it
06:20  megajosh2: Wait, looks like urwid can't be used with python 3.1
06:20  megajosh2: Which it what I'm working with
06:20  megajosh2: System Requirements ¶
06:20  megajosh2: * Python 2.3 - 2.6
06:21  megajosh2: :/
06:21  fluter: MostAwesomeDude: hi, how are you doning?
06:21  MostAwesomeDude: fluter: I'm doning quite well.
06:21  MostAwesomeDude: megajosh2: You may want to consider not using python3. :3
06:21  txt23: Hey guys how is Google FastFlip created? What programming language do you think they have used?
06:22  fluter: great to see, :D
06:22  megajosh2: I just don't get what's going on here... somebody made a mistake when documenting? Compiling the module?
06:28  smsfail: ok. sorry to be such a lame user, but I just can't figure out how to get deep into a tuple. I am trying to get the member type of each record, but have never parsed a nested tuple like this before. http://paste.pocoo.org/show/284208/ anyone show me the way?
06:35  smsfail: am I asking the wrong question ?
06:38  megajosh2: Well, I guess I just have to deal with it unless I report this...
06:58 --- MikhX_ is now known as MikhX
07:11  qiyong: During handling of the above exception, another exception occurred:
07:18  tonyyarusso: Hi, I was wondering if someone could help me with tidy on HTML.  I've used minidom before, and I'm comfortable with that interface with dealing with XML once I have it.  What I want to do is read in poorly formatted HTML, correct the errors, clean it up, convert it to XHTML, and then work on it with minidom.  I thought ElementTree Tidy would work for this, but ElementTree seems to be different from the xml document format minidom ...
07:18  tonyyarusso: ... expects, and I'm not sure what other steps I might need to get from one place to the other.
07:25  bob2: smsfail: those aren't tuples
07:25  bob2: smsfail: but presumably indexing works
07:25  bob2: foo[1][0][whatever]
07:25  smsfail: ahhhh. will give that a shot.
07:25  bob2: tonyyarusso: dunno if any of that are things you have to do, but beautifulsoup or lxml.html do all that for you in a simpler manner
07:26  smsfail: bob2: what are they?
07:26  bob2: who knows
07:26  bob2: you didn't show enough code to tell
07:26  smsfail: its suds output
07:26  bob2: some suds datastructure then I guess
07:29  tonyyarusso: bob2: hmm, haven't used either of those.  will take a look.  Feel free to give me the 5-minute crash course version.
07:29  bob2: well, they replace all of that stuff
07:29  bob2: but it's not clear which of the above is part of your partial solution and which bit is needed :)
07:30  bob2: I don't think there's any use for minidom anymore, though, unless you're stuck on a python version taht has no etree
07:31  bob2: ( http://codespeak.net/lxml/lxmlhtml.html )
07:32  tonyyarusso: bob2: Let me tell you my actual goal here.  Look at http://electionresults.sos.state.mn.us/20061107/ElecRslts.asp?M=LG&LD=54 .  I want to be able to grab info from that (party, candidate name, vote totals, precincts reporting) and toss them into variables.
07:32  tonyyarusso: What would be the best tool for that?
07:33  bob2: lxml.html for shizzle
07:33  bob2: you probably just need to get the page, fromstring it, then iterate over the result from .find
07:33  bob2: er .xpath
07:34  bob2: (so say 5 lines to print out all the values)
07:34  bob2: good luck
07:38  tonyyarusso: Succeeded in reading in and printing it anyway.  Should be on track :P
07:42  nomad111: is there a good json encoder/decoder i can package with my python app and distribute
07:42  nomad111: i usually use simplejson, but that needs to be built/installed
07:42  nomad111: and it cant be built with jython it seems
07:44  nomad111: i should mention that jython is used to run said python app
07:45  arkanes: simplejson has a pure-python implementation that should work
07:45  tonyyarusso: bob2: If I have a lxml.etree._ElementTree object, how can I print it just to see what it looks like?
07:45  arkanes: you might need to do some surgery on setup.py to get it working right
07:46  nomad111: dang
07:46  nomad111: ill give it a shot
07:49  inertial: is there some way to get python to check all the types in a program before it actually runs it?
07:49  ssbr: inertial: that's called static typing, and nope.
07:50  inertial: ok
07:50  inertial: so I have to actually run my program to discover any mismatched types...
07:51  jdc843: Hi everyone.
07:52  ahaney3: hi, I'm writing a script and I was wondering if there was a way to make a system call which opens a new terminal window and forks so that the calling process can continue operating
07:53  ahaney3: inertial you can chek if a variable IS a certain type and then throw an error if it isn't
07:53  Khelly: I'm trying to figure out a good way to time something down to the millisecond (the timeit function wont work for my purposes). The timedelta function seems like it will work, but it seems to give me the exact same number of microseconds each time I run it... print timedelta(microseconds=-1) anyone know what I'm doing wrong?
07:53  ahaney3: but python doesn't do that error checking for you
07:55  ivan`: you don't need to fork if all you want is to launch a child process that doesn't block your program
07:55  jdc843: I am trying to determine the dependancies to install Python on a x86 Linux system. I am using a Linux From Scratch system so there isn't very much on it yet. While executing './configure', the output shows me that the script is looking for svnversion. Can anyone tell me what svnversion is used for and what effect(s) there will be if subversion is not installed ? IE: will there be modules that won't be built, etc.
07:57  ahaney3: ivan, I know I can do os.system("some_command &")
07:57  ahaney3: but how do I get it to open a new window?
07:59  ivan`: start a terminal
08:00  ssbr: ahaney3: ew don't use os.system
08:00  ssbr: that's unportable and terrible
08:00  ssbr: use subprocess.Popen(['some command', 'arg1', 'arg2']) :(
08:01  ivan`: gnome-terminal -e 'find /'
08:02  ssbr: ahaney3: anyway, the way to open a new terminal differs by OS. on *nix/Gnome , for example it's that
08:02  ssbr: on windows it's start.
08:03  ahaney3: os.system is bad? this is news to me, do I have to explicitly open a new terminal or can I just call a command? what I want to do is open lynx in a new window
08:03  ssbr: no idea about KDE or OS X, don't care enough
08:03  ssbr: ahaney3: you have to specifically open a new terminal.
08:03  ssbr: ahaney3: but are you certain you shouldn't be using the webbrowser module?
08:03  ssbr: is it lynx specifically you want to open, or your web browser, which just so happens to be lynx?
08:05  ssbr: os.system is bad because A) it's not very cross platform, you can easily do things in it that are very, very system-specific (like use a feature of bash, and then your script doesn't work on a ton of *nix systems, let alone windows), and in addition, since you're passing to the shell (cause of the previous problem), you can easily accidentally create security holes and the like
08:05  ahaney3: um, I'm autimating a workflow for someone and the script I'm writing polls for an email using IMAP then uses a regex to pull the appropriate information, then logs into a web page  and displays information
08:06  ahaney3: so to me the easiest thing to do would be to open up a terminal, and somehow call lynx, the issue is that if they receive multiple emails they want multiple windows, because it's time sensitive
08:07  ssbr: if lynx can let you do that automation, go for it
08:07  ssbr: webbrowser module couldn't.
08:07  ahaney3: so I'm trying to figure out a good way to do that, I thought about using screen or something like that
08:08  ahaney3: I know it's going to be used on an Ubuntu box, and I can install whatever packages I want that are in the repo
08:08  ssbr: So write a function that opens up a new lynx terminal window or whatever, and label it as not-cross-platform, so that if the script ever needs to be ported people know where to go, and sue gnome-terminal. If that's possible.
08:09  ssbr: I'm not sure lynx will let you log in for it.
08:09  ssbr: (without significant effort)
08:10  ahaney3: alright, if I want to can I access the pipe from subprocess to control the new window later on?
08:10  ahaney3: or is it a one short sort of thing?
08:12  Alberth: you can get the std{in,out,err} handles of a subprocess.Popen() object iirc
08:12  ssbr: I'm not sure gnome-terminal will give you such handles.
08:12  ssbr: I don't think it matters anyway, you don't need it.
08:13  ahaney3: but it will evaluate whatever I give it with -e?
08:13  ssbr: Just don't start the process until you know what you're going to do, and write a lynx command script to a file first, and give that to lynx via -cmd_script
08:17  tonyyarusso: If I have a unicode value like this, u'JOHN MARTY\xa0' , how could I strip out all of the non-ASCII stuff?  (ie return 'JOHN MARTY')
08:17  ahaney3: regex to replace all characters not ascii?
08:17  ahaney3: ^[a-Z0-9]
08:18  ssbr: ahaney3: ew no
08:18  ssbr: tonyyarusso: What's this for, if you might forgive me for asking?
08:18  tonyyarusso: ssbr: I'm trying to strip out the data I care about from an election results web page.
08:19  tonyyarusso: \xa0 is how &nbsp; got parsed.
08:19  ssbr: tonyyarusso: well what's after the nbsp?
08:20  ssbr: like is this for a table? 'JOHN MARTY 11 02' ?
08:20  ssbr: Or is it just there for no reason/display purposes?
08:22  _habnabit: >>> u'JOHN MARTY\xa0'.strip()
08:22  _habnabit: u'JOHN MARTY'
08:22  tonyyarusso: ssbr: it's in a table, yes.  <td align="left" width="200" nowrap="nowrap"><font size="1" face='ms sans serif' color="black">JOHN MARTY&nbsp;</font></td>
08:22  ssbr: deesgusting
08:22  ssbr: use .strip() as _habnabit recommended
08:22  tonyyarusso: _habnabit: good point, if it's always whitespace that'll work.  Probably is.
08:22  ssbr: (I meant a text table, which would have been even more disgusting, but hey)
08:23  ssbr: _habnabit: stop beating me to the punch D:<
08:23 * ssbr doesn't want to be hasty and give the wrong answer
08:23 * tonyyarusso wishes the silly Secretary of State would present this in a non-sucky format
08:23  ssbr: tonyyarusso: write a letter!
08:23  ssbr: there's even a 15% it'll get answered in the next 7 months
08:23  ssbr: 15% chance, even
08:23  tonyyarusso: ssbr: That doesn't help me deal with the election tomorrow though :P
08:24  ssbr: tonyyarusso: the one in 2 years, though... !
08:24  ssbr: and that one will have a presidential election, too
08:25  tonyyarusso: _habnabit: what about the u in the front?  I seem to remember something about that not printing in other contexts, but it's a hazy memory.
08:26  _habnabit: tonyyarusso, nah.
08:26  _habnabit: tonyyarusso, you're just confused.
08:27  tonyyarusso: oh, right.  WHen I actually use the print command that stuff goes away.
08:29  ssbr: tonyyarusso: unicode objects are text. when you print them, they're encoded into a bytestream that your terminal understands, and then your terminal tries to decode and display them as intended
08:29  ssbr: usually nothing goes wrong, but also many terminals (like mine on windows) have severely deficient encodings, so... :(
08:29  tonyyarusso: righto
08:30  ssbr: (repr() only outputs ascii bytes, which pretty much every terminal can understand)
08:30  _habnabit: Sooooo just write web applications.
--- Log closed Mon Nov 01 09:01:47 2010
--- Log opened Mon Nov 01 09:01:57 2010
09:01 --- Users 693 nicks [0 ops, 0 halfops, 0 voices, 693 normal]
09:03 --- Channel #python was synced in 90 seconds
09:08  Kauhsa: christopher22, and finally, you could do that with list comprehension, so
09:09  Kauhsa: fields = [mapFunc[value[0]](value[1]) for value in values]
09:11  Kauhsa: wait no
09:12  Kauhsa: my bad
09:27  qiyong: how to cut off the last char of a string?
09:27  _habnabit: Slice it.
09:27  qiyong: _habnabit, "abc"[0:-1] ?
09:28  _habnabit: Sure.
09:28  _habnabit: The 0 is redundant though.
09:34  nadav: what is python interpreter? is it the command line tool?
09:35  Kauhsa: yeah
09:41  kerio: it's... "python"
09:41  kerio: the program
09:43  qiyong: does raw_input support line edit?
09:43  _habnabit: Sometimes.
09:43  qiyong: _habnabit, how to enable it?
09:44  _habnabit: Nothing you need to do. If readline is builtin, raw_input will use it.
09:46  verte: your python must be built with readline headers available; but readline is not available by default on some platforms for licensing reasons
09:46  nadav: kerio Im reading the tutorial at the topic, when they refer to python interperter they mean the python program?
09:46  qiyong: verte, how to check if readline built with?
09:46  nadav: and when they ask me to run a script, how can I run it? a .py file
09:46  _habnabit: qiyong, import readline
09:47  kerio: because it's the interpreter
09:47  qiyong: _habnabit, yes, i have it
09:47  kerio: :)
09:47  kerio: python program can be confused with *your* program
09:47  verte: not sure, maybe see the readline module documentation
09:47  kerio: and... it interprets your python source code
09:47  qiyong: i mean in my script, i want to let raw_input use readline
09:47  nadav: I see, and how can I run a script?
09:47  _habnabit: qiyong, aaaand it does.
09:48  _habnabit: qiyong, if readline is available.
09:48  qiyong: _habnabit, yes, i just added import realine, now raw_input works
09:49  verte: :S
09:52  nadav: once I got a script ready in a .py file. how do I run it?
09:52  verte: python myprogram.py
09:52  nadav: Im on a windows system
09:53  nadav: I can double click it, but the windows just closes too fast for me to see anything
09:53  verte: open your cmd terminal
09:53  Alberth: do you use an IDE?
09:54  nadav: you mean IDLE?
09:54  verte: type python and a space, before dragging your program onto the window
09:54  smsfail: nadav: http://effbot.org/pyfaq/how-do-i-run-a-python-program-under-windows.htm
09:55  Alberth: nadav: for example, there is a 'run' entry in the menu bar somewhere iirc
09:55  oadams: you might want to get your program to wait for user input at the end
09:55  nadav: yeah
09:55  smsfail: nadav: http://diveintopython.org/toc/index.html
09:56  Alberth: bad book smsfail
09:56  smsfail: Alberth: y?
09:56  nadav: there so much books and info, I wanna focus only on one to avoid confusion
09:56  nadav: I started with the one in the topic
09:56  nadav: New Programmer? http://bit.ly/40CBHF
09:57  Alberth: nadav: I am sure that is a better book :)
09:57  _habnabit: smsfail, DIP is pretty terrible, *and* not for new programmers.
09:58  Fuzzmz: Google's Python Class is also pretty good for getting into things http://code.google.com/edu/languages/google-python-class/index.html
09:58  nadav: x = 5
09:58  nadav: y = x + 5
09:58  nadav: y * 2
09:58  _habnabit: nadav, don't paste to the channel.
09:58  nadav: k, sorry
09:59  nadav: I put that into a script, but when I click run module it just say ===================== RESTART =========================
09:59  _habnabit: nadav, you need a 'print' or something.
09:59  nadav: oh, right, damn forgot about it :D
09:59  Fuzzmz: :)
10:00  nadav: yay, works. thanks
10:00  nadav: so just to get on line with things, python shell = interperter right
10:01  InitX: http://fpaste.org/vh08/
10:01  fluter: hi, in xml.dom,  what is a namespaceUri usually be when calling createDocument?
10:01  InitX: how to fetch all rows in one
10:02  _habnabit: fluter, any reason you're not using lxml?
10:02  fluter: _habnabit: what is lxml, I dont have it :(
10:03  _habnabit: fluter, it's a better xml library than the stuff in the stdlib.
10:03  fluter: _habnabit: again, it is not in stdlib, why the things in stdlib always worse than outside :(
10:03  Fuzzmz: InitX, you could do a fetch loop
10:03  InitX: http://fpaste.org/vh08/     I use r.fetch_row()  twice to print 2 record of the results , how to use one r.fetch_row() to print all the results?
10:04  _habnabit: fluter, stdlib is pretty generally horrible, yes.
10:05  _habnabit: InitX, why are you using _mysql ?
10:05  fluter: _habnabit: ok, this is nice, there is lxml installed, is it lxml support all features of xml.dom, like parse, and creattion?
10:05  _habnabit: fluter, yes.
10:05  Fuzzmz: InitX, something tells me you need to use fetchall() instead of fetch_row() as fetch_row() will return just one row
10:06  InitX: _habnabit, MySQLdb was installed by default
10:06  fluter: _habnabit: so is it xml parse in stdlib slower than lxml?
10:06  _habnabit: InitX, yes, and you're not using MySQLdb
10:06  Fuzzmz: :)
10:08  InitX: Fuzzmz, I didn't find fetchall() in http://mysql-python.sourceforge.net/MySQLdb.html
10:10  Sergiu: hey, I have a pretty strange problem. I wrote a C shared library that I'd like to use from python using ctypes. The interaction between the two is pretty simple, the library has one callable function that processes an image. The program uses a second shared library. I wrote a simple Python program that just calls the function using ctypes and it segfaults in my C library when calling a function from the second shared library. I the wrote a C program t
10:10  Sergiu: hat does  the same but in C and it works. Any ideas?
10:10  _habnabit: Sergiu, why do you want to use ctypes
10:10  _habnabit: Sergiu, ctypes is pretty bad
10:11  InitX: _habnabit, sorry don't get it
10:12  mrpinky: Hi :D How can I convert a c_int to a python integer (for example for displaying with a format string)?
10:12  Sergiu: _habnabit, well, ease of use and it being cross platform were why I tried it
10:13  _habnabit: Sergiu, ctypes is neither easy to use nor cross-platform.
10:13  _habnabit: mrpinky, what's a c_int
10:13  Sergiu: _habnabit, well, that's what I heard anyway but I'm up for other suggestions
10:13  mrpinky: _habnabit, it seems to be the type returned by ctypes.c_int.in_dll() when reading an integer from a DLL file
10:14  InitX: what modules do you use to connect to mysql guys
10:14  _habnabit: Sergiu, if you want to wrap a C library, use cython.
10:14  _habnabit: mrpinky, ^
10:14  _habnabit: InitX, oursql
10:14  Fuzzmz: InitX, do you want to print all the lines?
10:14  _habnabit: Sergiu, much, much easier.
10:15  mrpinky: _habnabit, sadly i don't get to choose cython vs. ctypes :( do you know how to convert ctypes.c_int to a python integer?
10:16  _habnabit: mrpinky, why not?
10:16  Sergiu: _habnabit, I want to use this in a larger application, I'm not sure I can use cython
10:16  mrpinky: _habnabit, because the code is written and maintained by others, who chose ctypes
10:16  _habnabit: Sergiu, why not?
10:16  _habnabit: mrpinky, I'm sorry.
10:16  _habnabit: mrpinky, read the tutorial.
10:17  Sergiu: _habnabit, I'll have to read more to understand what cython does exactly and I'll be back with an answer
10:17  _habnabit: Sergiu, it makes extension modules.
10:17  _habnabit: Sergiu, that's about it.
10:18  InitX: _habnabit, yes
10:18  Fuzzmz: InitX, http://fpaste.org/JRI7/ should do what you want
10:19  Fuzzmz: in short you save the data as a touple and then iterate over it
10:19  InitX: Fuzzmz, I read some document and there says the _mysql is part of MySQLdb is that right?
10:19  Fuzzmz: not from what I know
10:20  mrpinky: _habnabit, ah it is there :) a .value attribute, thanks
10:21  Fuzzmz: InitX, http://mysql-python.sourceforge.net/MySQLdb.html#mysql it's recommended to call MySQLdb and not _mysql directly
10:21  _habnabit: InitX, buuut oursql is better than mysqldb anyway
10:21  InitX: _habnabit, i know oursql but my disto. didn't include it, and the doc is not too much
10:22  _habnabit: InitX, 'not too much' ?
10:22  InitX: _habnabit, I had tried oursql last night its not so easy to install on my distro
10:22  InitX: Fuzzmz, ok
10:24  Sergiu: _habnabit, the thing is, I already have my library done in C, from what I see I should write a sort of adapter in cython that calls the external lib, right?
10:24  _habnabit: Sergiu, right.
10:25  Sergiu: _habnabit, one thing I don't get, for this to work do I need to compile all the application with python or just this adapter?
10:25  Sergiu: with cython sorry
10:25  _habnabit: Sergiu, cython just generates a .c file.
10:26  _habnabit: Sergiu, and that .c file is built linked against libpython and libwhateveryourthingis
10:26  _habnabit: Sergiu, then python can import it.
10:26  rdz: hi all. i'd like to write a script with a switch to either write the output to a file or to stdout. now i thought i might be able to achieve that by modifying the built-in 'print' so that it writes to a file, if desired. or is there a better way to achieve that?
10:27  rdz: i would like to not have to clutter the script with 'if switch == file' statements.
10:27  teratorn: rdz: maybe you should just use sys.stdout instead of 'print'
10:28  Fuzzmz: rdz why not make an output function that does the if switch and then either saves to file or prints and call that from inside the script?
10:28  rdz: teratorn, i'll look into that. thanks
10:28  rdz: Fuzzmz, i though of that, but print accepts several statements and i don't know how to write a fucntion that accepts one ore several string
10:28  rdz: s
10:28  figure002: hi. os.path.expanduser("~/.appname/") returns 'C:\\Documents and Settings\\Serrano/.appname/' on Windows. Shouldn't Python automatically convert the / to \? I read somewhere in the docs that I should always use /, and that Python will convert it properly.
10:29  larhat: print >> fileobj, 'hello world'
10:29  _habnabit: figure002, nope.
10:29  _habnabit: figure002, you could do os.path.expanduser(os.path.join('~', '.appname'))
10:29  rdz: larhat, ok.. that sound simple...
10:29  teratorn: rdz: have a variable that refers to sys.stdout or your file, then refer only to that variable when making writes
10:29  _habnabit: figure002, (you should be doing os.path.join anyway.)
10:29  larhat: rdz: from __future__ import print_function and then pass 'file' keyword argument to function to specify fileobject to write
10:30  figure002: _habnabit: ok, thanks!
10:30  larhat: rdz: print('hi!', file=sys.stderr)
10:30  rdz: larhat, i see. many thanks
10:30  rdz: thanks to you all
10:32  jamesz: can anyone recommend any good retail books written on pygame?
10:37  InitX: _habnabit, just few document
10:37  _habnabit: InitX, what
10:38  _habnabit: InitX, I can't parse what you're saying
10:39  gusg: I am installing a package and one of the files contains a syntax error. The line is:  "modified_files = {p: [] for p in patterns}  # init"  . This looks like a dictionary comprehension .Did anything change in python 2.7 which would make this break?
10:41  larhat: gusg, yes, dictionary comprehension appeared in py2.7. in previous version this leads to syntax error.
10:41  Fuzzmz: _habnabit, I think that what InitX is trying to say is that the documentation for installing that on his distro is lacking
10:42  InitX: right
10:43  gusg: larhat, thanks. well this is a pickle.
10:47  jennicide: ok so I'm using python and pyqt, I want to be able to take some marked text from a sentence and add that to a variable as a string but I can't find any documentation on it
10:47  jennicide: lets say I have "abc def ganca gasds" and I want to add % before and after the "def" by just highligting it and pressing a button
10:56  Yhg1s: InitX: the documentation for installing it, and any other Python package that uses distutils, is 'python setup.py install'
10:56  Yhg1s: InitX: see docs.python.org/inst
10:56  Yhg1s: InitX: whether your distribution comes with an oursql package you can install isn't really a Python question.
10:56  Timtitibu: Hi. There is an WSGI usage example on wiki. Some part of code I dont understand. Would be greatfull for help  --- http://fpaste.org/pKRN/
--- Log closed Mon Nov 01 11:10:22 2010
--- Log opened Mon Nov 01 11:11:06 2010
11:11 --- Users 717 nicks [0 ops, 0 halfops, 0 voices, 717 normal]
11:11  MostAwesomeDude: Why do you want Python 3? :3
11:11  verte: Wraithan: well why do you want python 3?
11:11  Wraithan: Because the more useful libs on py3 the better?
11:11  verte: you will have to port something then
11:11  teratorn: the only reason not to use py3 is the lack of 3rd party libraries
11:11  Wraithan: Exactly.
11:11  teratorn: of course that's a very big reason
11:12  verte: using python 3 means you probably will have to port something at some point
11:12  hiptobecubic: verte, which the world needs
11:12 --- Channel #python was synced in 94 seconds
11:12  Wraithan: The whole point behind finding a irclib that targets modern versions of python (2.6 or higher) to get it running on py3 with 2to3
11:12  verte: yes!
11:12  Wraithan: I'm all for doing the porting
11:13  verte: cool
11:13  verte: irclib is one of the most popular
11:13  Wraithan: just wanted to find a decent code base to start with, twisted is far too large, irclib targets way old versions of python
11:13  verte: I used to use an irc client written with it
11:14  pratz: Please -  i  am using couchdbkit with django, but i can not find a way to retrieve database values
11:14  MostAwesomeDude: How is Twisted too large? What are your requirements, exactly? What are you building?
11:14  Wraithan: I think they still aim for python 2.3 or 2.4 support (irclib that is)
11:14  teratorn: MostAwesomeDude: it's too hard for him to port to py3k, I think is the issue
11:14  Wraithan: MostAwesomeDude: Did you not read? to port to python3 to use there.
11:15  MostAwesomeDude: Wraithan: Let's try again. Why do you need Python 3? If you're building something *now* to deploy *now*, maybe you shouldn't target it.
11:15  Wraithan: There is currently one IRC lib for python3, it is garbage. I wanted to port a python2 codebase.
11:16  Wraithan: MostAwesomeDude: I'm building something for fun, and wanted to help out the community at the same time by porting one of the python2 libs to python3.
11:16  Wraithan: Christ, it is horrible to mention python3 in here, everyone attacks.
11:16  teratorn: Wraithan: no, it's just that most people don't know what they're doing
11:16  teratorn: Wraithan: you understand what you're doing, so it's fine
11:17  MostAwesomeDude: Yes, I'm being soooo mean and antagonistic. God forbid I ask questions and try to get a better understanding of your task.
11:17  Fuzzmz: :)
11:19  MostAwesomeDude: Anyway, if you're building an IRC bot, (a) use Twisted (b) use one of the dozens of bots already out there. You'll have to hack either way to get it "just the way you like it," with "all the features you need for your special use case," but that's alright.
11:20 * MostAwesomeDude sleep 3h;
11:20  InitX: Yhg1s, yes but for me the stable solution is important
11:20  teratorn: MostAwesomeDude: *sigh*.... he already explained why he can't use Twisted :)
11:20  Wraithan: MostAwesomeDude: Agreed, that would be a solution, if my goal wasn't python3 support. Unless I feel like porting one of the bots to python3 which is also a consideration. Assuming I can find one with limited external needs.
11:21  teratorn: Wraithan: the only one I know anything about is Supybot... seemed OK
11:21  verte: teratorn: noooooooooooooooooooooooooooooooooooooooooooo
11:21  Wraithan: phenny and ircbot are the two popular ones, right?
11:21  teratorn: verte: explain
11:21  verte: it's the single most hideous piece of code ever written
11:22  Wraithan: Yeah, last time I looked at supy, I almost lost my lunch.
11:22  teratorn: well, since it just worked, I didn't bother looking at the code much
11:22  teratorn: but if you say so
11:22  Wraithan: teratorn: I always peak under the hood :)
11:22  teratorn: iirc the guy originally wrote it on O'Caml
11:23  verte: it has more of a perl flavour
11:23  Wraithan: phenny looks like it is moderately maintained. I'll have to look into their version compatibility list and see if it will work for moving to python3
11:24  Wraithan: python 2.4 support :(
11:24  Wraithan: why, why must people support this old stuff :(
11:25  MostAwesomeDude: Because we hate ourselves. Also, we run servers.
11:25  Wraithan: :(
11:25  Wraithan: It looks like the most ideal candidate so far.
11:26  verte: also, theres no good reason to upgrade
11:28  nadav: python is actually kinda cool
11:28  nadav: I feel bad for not trying to learn it way sooner :p
11:28  verte: nadav: lies
11:28  nadav: I speak the truth man
11:29  kerio: python is just not fair
11:30  kerio: to the other languages, i mean
11:31  nadav: lol kerio :D
11:31  nadav: woha, sorry, didnt know its a no-lol zone ^_^
11:33  Yhg1s: InitX: ok? I'm not sure what you mean by 'the stable solution'
11:33  Yhg1s: dmarkey: nope. Threads suck, really. It's almost always better to use something else, even if that has its own downsides.
11:34  Yhg1s: verte: Wraithan made it pretty clear that he wasn't doing it in order to upgrade to python3, but in order to make more things available for python3, which is a laudable goal.
11:34  Wraithan: running phenny with -3 shows very little problems!
11:35  verte: Yhg1s: didn't I say that?
11:35  Wraithan: Yhg1s: He was talking about the reason why people still support python 2.4, to them there isn't a good reason to upgrade.
11:36  Yhg1s: oh, right.
11:36  Yhg1s: well, there's lots of good reasons to upgrade, but sysadmins don't like upgrading :)
11:36 * Wraithan is trying to get our codebase at work moved over to python 2.7, but there is a little pushback right now
11:37 * Wraithan wants dictionary comprehensions!
11:37  Wraithan: and set comprehensions!
11:38  Yhg1s: really? Why? they're extremely thin syntax over perfectly readable Python 2.4 constructs.
11:38  Wraithan: plus the numerous other python 3.1 things that were backported
11:38  verte: near on an hour ago, I opened emacs to get ready to code. the mark is still sitting in the same place where it was when I opened it :(
11:39  Wraithan: opened emacs? you say that like you close it
11:39 * Wraithan is confused.
11:39  Wraithan: :)
11:41  verte: I turned on my computer twenty seconds earlier :)
11:42  verte: save-desktop makes X session management or suspend/hibernate irrelevant
11:43  Wraithan: it makes me sad that I am installing python 2.4 right now
11:44 --- Taronyu_ is now known as Taronyu
11:45  teratorn: verte: what's that?
11:46  dmarkey: Yhg1s: like subprocesses?
11:46  verte: teratorn: emacs can remember the buffers you had open, what you were doing with them etc
11:47  teratorn: oh emacs
11:47  teratorn: *irrelevant*
11:47  teratorn: :D
11:47  Taronyu: having issues working with a bit of code
11:47  Yhg1s: dmarkey: depends entirely on what you're doing.
11:47  Naib: if I have a string:  ^0901600+ ^999-AP ^995GL    what would be the best way to remove parts of it that start with ^###
11:47  Taronyu: anyone know how to say: "for all occasions of x in x:"
11:47  Taronyu: well, "for every y in x:
11:47  Naib: ie ^0901600+ ^999-AP ^995GL   -> 1600+ -AP GL
11:47  Yhg1s: Taronyu: 'for y in x:'
11:47  verte: Naib: re.sub, probably
11:48  Naib: k
11:48  Taronyu: Yhg1s: that only does it for the first one
11:48  Taronyu: I need it to carry on searching through the string I have it searching until all occasions of y are found
11:48  verte: Taronyu: what makes you think that?
11:48  Yhg1s: Taronyu: that doesn't make much sense, sorry
11:48  Taronyu: No? darn. One sec, I'll pastebin it
11:48  verte: occasions of?
11:48  Yhg1s: Taronyu: oh, so 'x' is a string, and you want to find all occurances of a particular substring?
11:49  Yhg1s: eh, occurrences.
11:49  Taronyu: x is a string: 01723781812929181.
11:49  Taronyu: I want it to find every, say 1, and then print out where it found it, and what followed after
11:49  Yhg1s: that would be an invalid number. Do you mean "01723781812929181", or "01723781812929181."?
11:49  Taronyu: No period, sorry.
11:49  Yhg1s: Taronyu: sounds like you want to use str.find() repeatedly.
11:50  Yhg1s: Taronyu: you can give the next str.find() call the index one past the one you found the last occurrence at.
11:50  Taronyu: any idea how to integrate that? I don't quite see how
11:50  Taronyu: pastebin here: http://pastebin.com/e1eBaCNK
11:50  infobob: http://paste.pocoo.org/show/284261/ (repasted for Taronyu)
11:51  Taronyu: need it in yellow()
11:51  Millsie: Hey - I'm getting a 'takes exactly 1 argument (2 given)' on a function that receives one argument
11:51  kerio: you're giving it two arguments
11:52  Millsie: kerio: I'm not.
11:52  teratorn: Millsie: your computer says otherwise
11:52  kerio: either you're wrong, or your cpu can't distinguish between 1 and 2
11:52  verte: Millsie: are you sure it's not a method instead of a function?
11:52  Yhg1s: Taronyu: you want something like http://paste.pocoo.org/show/284263/
11:52  Taronyu: thanks!
11:52  verte: did you forget self?
11:53  Naib: re.sub works
11:55  VladDrac: Millsie, you forgot 'self'
11:55  Millsie: verte: http://fpaste.org/cLwO/ - line 26 is where the error occurs, 12 is the function/method thing
11:55  VladDrac: or you forgot to make it a staticmethod - @staticmethod decorator
11:56  verte: Millsie: when you define a method, it should accept 'self' as the first parameter
11:56  Millsie: Right... anywhere I can see some docs on that - I'm relatively new to Python (2 days in...)
11:56  Yhg1s: Millsie: any tutorial.
11:56  Yhg1s: VladDrac: please don't suggest staticmethods, certainly not to people who don't understand methods in the first place.
11:57  Millsie: I've been writing python stuff for the last 2 dys and 've not come across this before, nor come across it in any tutorials
11:57  Yhg1s: Millsie: and yet any tutorial that covers classes and methods covers 'self'.
11:57  Yhg1s: Millsie: which tutorial have you been reading?
11:58  Millsie: Yhg1s: some that I haven't bookmarked - this is my first time into OO python. So... any method in a class receives an instance of the class as the first param?
11:58  Taronyu: thanks Yhg1s, this is awesome.
11:58  Taronyu: Right <goes back to coding>
11:58  Yhg1s: Millsie: The instance it's called on, yes.
11:58  Millsie: Okay - I'll add that to my list of 'weird python quirks'
11:59  Yhg1s: Millsie: I would strongly urge you to go back and read a tutorial in its entirety. docs.python.org/tut, if nothing else; it's short.
11:59  Yhg1s: Millsie: it's actually a fundamental design choice, not a quirk.
11:59  Millsie: Yhg1s: it's quirky to me.
11:59  verte: Millsie: that's because you don't see why it is useful.
11:59  Millsie: verte: s/./ yet./
11:59  Yhg1s: And yet writing it off as a quirk means you'll be considering quite a lot more things 'quirky', and not understanding Python.
12:00  ssbr: It will make sense if you look into decorators and descriptors.
12:03  Millsie: I'll look into it. By list of quirks, I mean, list of stuff I initially find weird and strange until I go and look to understand it. I came here for an answer, got it, and I might look into it later. I was the same way about the main method in java being 'static' now I know why it is and understand. I always hate FOSS/dev/programming communities when everyone jumps on the 'NEWCOMER IS IDIOT' bandwagon.
12:03  Yhg1s: Millsie: we did no such thing.
12:04  Yhg1s: We do, however, hate the FOSS/dev/programmers who jump into a language, see stuf that isn't how they expect and write it off as stupid design, never to reconsider it.
12:04  Yhg1s: which is why we urge you to not "write it off" as a quirk. Since you're not doing that, all is fine.
12:10  Wraithan: hmm I wonder why 2to3 doesn't rewrite urllib.URLopener to urllib.request.URLopener, couldn't find anything on the net explaining why it doesn't.
12:12  soundNICK: everytime I find a python application that needs compiling, I have the problem of "cant find module named -"  whatever the app is... is there some standard way to find this module python needs ?
12:12  VirginiaSteaks: hi folks, how to xrange from high to low numbers?
12:12  teratorn: soundNICK: not really
12:12  VladDrac: VirginiaSteaks, specify a negative step
12:12  VirginiaSteaks: VladDrac: but this doesn't work for me. i tried: for i in xrange(1,10,-1): print i  <-- no output at all
12:13  VladDrac: xrange(10, 1, -1)
12:13  Wraithan: VirginiaSteaks: xrange(10, 1, -1)
12:13  SpComb: /mode #python -r+R
12:13  teratorn: soundNICK: but it shouldn't be too difficult to find the missing module(s) in a) your OS packages b) PyPi c) google
12:13  VirginiaSteaks: VladDrac / Wraithan: thanks! *beating his head against the next wall*
12:14  soundNICK: teraform... so... why arent the modules packaged with the application ?
12:15  teratorn: soundNICK: because doing that is harder than not doing it, probably :)
12:15  soundNICK: or... is PyPi the normal place for modules to be registered and kept ?
12:16  teratorn: soundNICK: most everything is on there
12:16  soundNICK: ok... I will start looking there, and thank you
12:18  teratorn: soundNICK: there's also this, for making life (hopefully) easier: http://pypi.python.org/pypi/pip
12:20  soundNICK: teratom looks good, thanks again
12:22  lvh: soundNICK: teratoRN ;)
12:22  lvh: soundNICK: Also, fwiw: yes pip is awesome, especially with very recent versions where pip install --user works
12:22  lvh: assuming you also have recent versions of python
12:22  lvh: it's basically how easy_install is supposed to work
12:22  teratorn: teraform, teratom... sheesh get tab completion
12:22  lvh: except you know, not broken this time
12:22  lvh: teratorn: I feel your pain since my nick has a lowercase l
12:23  verte: but who ircs without a decent font?!
12:25  teratorn: terminus or andale mono for code, verdana for everything else :)
12:26  lvh: teratorn: try marienz' version of terminus
--- Log closed Mon Nov 01 13:04:22 2010
--- Log opened Mon Nov 01 13:17:27 2010
13:17 --- Users 744 nicks [0 ops, 0 halfops, 0 voices, 744 normal]
13:18  verte: you iterate over the iterable returned by cursor.execute ?
13:18 --- Channel #python was synced in 91 seconds
13:18  papna-work: donri: You use strptime for this.
13:19  donri: Seems sensible it should have built in support for isoformat both ways
13:20  papna-work: donri: It's *not* ISO format the other way AFAIK.
13:20  papna-work: That would be a non-standardized format that you can create trivially.
13:20  donri: .isoformat() is standard
13:20  papna-work: Mmhmm.
13:21  donri: And especially as there is built in methods for outputting ISO dates, would seem sensible to also parse those easily into datetimes.
13:22  papna-work: donri: You can copy and paste the format as it is in the documentation.
13:22  papna-work: Or use can use dateutil.
13:23  donri: Yep, was just looking for a more elegant solution than explicit time format.
13:24  alsadi: it'll raise WindowsError < I mean shutil.move not gc.collect
13:26  alsadi: can any one tell me how to properly get rid of this frame object so that I can release the file and move it
13:26  verte: there are two reasons a frame may be live:
13:27  verte: 0) it is on the stack, ie, your object is in a local variable of a running function
13:27  verte: 1) you captured the traceback by catching an exception and using sys.exc_info()
13:29  appi_uppi: Hi, how is turbogears web framework?
13:30  deibai4ata: turbo in the gears
13:30  klawd: guys. i'm finding myself putting classes in the __init__.py files of packages to avoid import foo.bar.Bar. how do you guys do that?
13:30  kerio: import them
13:30  kerio: duh
13:30  alsadi: appi_uppi: if you want integration use dj, if you want light weight use bottle
13:30  kerio: :)
13:30  verte: klawd: stop putting each class in its own module?
13:31  Gullydwarf: so howdy :)
13:31  kerio: anything in the scope of __init__.py is accessible to people who import it
13:31  kerio: also what verte said
13:31  klawd: verte: huh
13:31  alsadi: verte: thanks
13:31  appi_uppi: alsadi, thanks
13:32  verte: alsadi: looks like it's in a local variable of the function the thread is running
13:32  Gullydwarf: Does anyone here have experience with compiling/installing a 2nd Python version in 32bits on ur 64bits linux?
13:32  klawd: maybe some of the things i did as a package are more of a module then.
13:33  Gullydwarf: I managed to compile and install with some modules missing but when I run the interpreter and try to load the module for which I did this trick it still says wrong ELF class ELFCLASS32
13:33  klawd: so.. 4 classes + exceptions in a module or in a package?
13:34  klawd: right now i have the package mapper with the modules "chunk, item, mapper, exception"
13:38  Alberth: all related classes together in one file, I'd say
13:39  klawd: hmmmm
13:40  verte: unless they are 1230 line monsters
13:41  klawd: just a few hundred most of them
13:48 --- BlueAidan_ is now known as BlueAidan
13:49  rgl: is there an easy way to check whether a http status code is between 500 and 599? is this the best way code in xrange(500, 600)  ?
13:51  Kylarr: 500 <= code < 600
14:05  Gullydwarf: Anyone still here?
14:05  Gullydwarf: :(
14:05  trask: hi
14:06  verte: no.
14:06  trask: dont mind the ninjas
14:15  gongoputch: hos does one run a system command from python?
14:15  gongoputch: how, even
14:16  verte: you mean a program? with the subprocess module
14:16  gongoputch: ok, thnx
14:18 --- eMyller_ is now known as eMyller
--- Log closed Mon Nov 01 14:56:13 2010
--- Log opened Mon Nov 01 15:01:35 2010
15:01 --- Users 765 nicks [0 ops, 0 halfops, 0 voices, 765 normal]
15:01  bob2: desrt: there's the timeit module
15:01  Yhg1s: desrt: depends on what form.
15:01  Yhg1s: eh, what for.
15:01  bob2: desrt: but I bwt that uses time.time anyway
15:01  verte: anix: and the usual way is via a closure
15:02  anix: verte: i have classes and class methods to create at runtime (depending on XMl file)
15:02  verte: (never exec unless you are working on a huge huge hack called pypy)
15:02  Yhg1s: anix: so what does the XML file contain? Actual code? Just methodnames?
15:02  bob2: surely instance methods
15:02  desrt: i'm concerned about the accuracy losses involved in subtracting "now, time since 1970" from "a few nanoseconds later, time since 1970"
15:02  desrt: with floating point roundoff...
15:02  anix: Yhg1s, always methodnames with parameters etc., and sometimes also the actual code
15:02  Yhg1s: desrt: the accuracy of floats is far higher than that of a typical platform's hardware clock.
15:03 --- Channel #python was synced in 92 seconds
15:03  desrt: Yhg1s: but as you get further and further from the epoch, the situation gets worse and worse
15:03  desrt: in 2010, for example, we only have accuracy to the nearest 1/3 of a microsecond
15:03  bob2: desrt: you only get one second further away each second
15:03  Yhg1s: desrt: and yet it's still much better than a platform's resolution.
15:03 * desrt checks something
15:04  desrt: hm.  linux clames nanosecond accuracy in its realtime clocks
15:04  metalfan_: hi
15:04  desrt: i wonder if that's a lie
15:04  metalfan_: if i want to create a instance like this:   data['bla']()        with data being a dict, why cant bla point to a string?
15:04  Yhg1s: desrt: more like 10ns.
15:04  Yhg1s: eh, 10us rather.
15:04 * desrt does a test on that topic :)
15:04  verte: metalfan_: because strings aren't callable?
15:04  bob2: metalfan_: because strings aren't callable
15:05  Yhg1s: anix: then you can choose between exec, or compile() and creating function objects on the fly.
15:05  Yhg1s: anix: at that point there's really not that much difference. (But pass an appropriate dict to exec.)
15:05  metalfan_: true, but if i write css()        its also a string that happends to be a object
15:05  bob2: everything in python is an object
15:06  papna-work: gongoputch: There are ImageMagick Python bindings. The command line programs are meant to be used from the command line.
15:06  bob2: but if css points at a string, you still can't call it
15:06  anix: Yhg1s, i looked into compile(), but somehow i missed a nicer way to deal with parameters, but however, it would work
15:06  papna-work: gongoputch: Also, using subprocess you should have no quoting.
15:06  verte: not all objects are callable
15:06  gongoputch: papna-work: ah, neat. I am kinda new to python
15:06  Yhg1s: anix: there isn't really a 'nicer way to deal with parameters'
15:06  metalfan_: is there no way around to tell python that a string in a dict is a class without putting a real class in it?
15:06  desrt: Yhg1s: i just observed a difference of .14us between two calls clock_gettime() on linux
15:06  Yhg1s: metalfan_: a string *isn't* a class.
15:07  desrt: which is below the precision of a double in 2010
15:07  Yhg1s: metalfan_: so, no.
15:07  verte: metalfan_: variables (including class names) have no runtime significance
15:07  bob2: metalfan_: oh, you want it to take a string and magically find a class with the same name?
15:07  bob2: metalfan_: just put the class in the dictionary
15:07  metalfan_: ok
15:07  verte: metalfan_: if you want to map strings to classes, you should explicitly do that
15:07  Yhg1s: desrt: cython is what you want to use the.
15:07  Yhg1s: eh, then.
15:07  desrt: actually, i'm not interested in using python at all :)
15:08  desrt: just wanted to pick your brains about the time interface of python before designing something similar for glib
15:08  anix: Yhg1s, by "nicer way" i meant something comparible to what type() is doing for classes, e.g. def("foo", params*) :-)
15:08  Yhg1s: oh, in that case I won't have to point you to the datetime module.
15:08  Yhg1s: anix: yeah, no, nothing like that.
15:09  tempname: anybody an idea why initMODULENAME is not get called on importing my module? are there any often made mistakes?
15:09  anix: Yhg1s, ok, then i'll make my own one... thank you & verte & co.
15:09  verte: tempname: python -V shows that it finds your module?
15:09  Yhg1s: tempname: nothing comes to mind, other than obvious code errors.
15:09  verte: tempname: does the import fail?
15:09  Yhg1s: or not loading the right module, of course.
15:10  tempname: no import goes fine
15:10  Yhg1s: tempname: and the module object is correct?
15:10  tempname: methods not showing up on dir(modulename)
15:10  Yhg1s: ok, but do you have a valid module object?
15:10  verte: does anything show up?
15:10  Yhg1s: loaded from the right file?
15:10  tempname: ['__builtins__', '__doc__', '__file__', '__name__', '__package__', '__path__']
15:10  tempname: output from dir()
15:11  Yhg1s: and what is the object's __file__ and __name__?
15:11  verte: and __file__ is as you expect?
15:11  tempname: hmm file points to the __init__ file
15:11  tempname: is that correct?
15:11  Yhg1s: that depends on what 'the __init__ file' is.
15:12  Yhg1s: but probably not.
15:12  verte: you have a module and a package with the same name?
15:12  Yhg1s: (if you want more help, you should give us some more information to work with, like the actual filenames, modulenames and directory layout.)
15:12  nomulous: Dear #python, is there any easy way to tokenize hierarchical-structured strings? E.g. '[ a ] as [ s [s] [asdf] ]' -> ['[a]', ['as', ['s', [
15:13  nomulous: ...etc. ?
15:13  verte: nomulous: pymeta!
15:14  nomulous: verte: Huh?
15:14  Yhg1s: nomulous: nothing in the standard library will do that for you, no.
15:14  Yhg1s: if you really want to tokenize by hand, the usual choice is to loop over the string and evaluate each character.
15:14  tempname: guys thanks
15:15  nomulous: Yhg1s: Sounds like what I want... just trying to figure out how to do it.
15:15  tempname: you pointed to the right location
15:15  tempname: problem was i got package and modula same name
15:15  Yhg1s: nomulous: 'for c in s:', then check each c to see if it's '[', ']', possibly whitespace, or something you want to store.
15:16  nomulous: That part's obvious, but how to actually return the list?
15:16  Yhg1s: 'return thelist'
15:16  Yhg1s: I don't understand what part is giving you trouble, sorry.
15:16  tempname: in the packages __init__ is it better to say import MODULE or put it into __all__?
15:16  tempname: what is more common?
15:16  Yhg1s: tempname: neither.
15:16  nomulous: Okay, well how do you generate that list?
15:17  tempname: ok
15:17  tempname: whats the correct way to deal with it?
15:17  verte: whenever you pop the context, you should extend the list at the new top-of-stack
15:17  Yhg1s: nomulous: I would probably write a generator instead. But if I wanted to return a list directly, just create the list at the start of the function and append items to it.
15:17  Yhg1s: tempname: that depends on what 'it' is.
15:17  nomulous: I'll try that, thanks.
15:18  tempname: a package with only one module which have only 2 methods
15:18  tempname: the module is a c-extension
15:18  Yhg1s: tempname: well, don't make it a package.
15:18  tempname: but instead?
15:18  Yhg1s: nomulous: the tokenize module in Python has some examples of (much more complex) tokenization, if you want an example.
15:19  Yhg1s: tempname: just have the extension module.
15:19  nomulous: I'd like to keep it as simple as possible, so I'm going to do it myself. Thanks though.
15:19  tempname: ah ok will do so
15:24  manixor: I need to use the "~" linux command on a check if a file exist. I tryed with os.path.exists, but I get always False, even if the file exist, any sugestion?
15:25  verte: os.path.expanduser()
15:29  cybervegan: hi guys, does anyone know if there is a way to read in zipfile members in chunks in py2.5.2 using the zipfile module or something else?
15:30  Brend: Hm. http://launchpad.net/storm/trunk/0.18/+download/storm-0.18.tar.bz2 incorrectly gives text/html as its mimetype, breaking easy_install
15:30  Brend: Not sure whether that's a launchpad bug, a setuptools bug, or both
15:30  Brend: (or indeed a storm bug)
15:30  verte: < Brend> ... breaking easy_install
15:31  Brend: ... yes?
15:31  verte: logical impossibility
15:31  SmartViking: Hey my friends :D
15:32  verte: Brend: sure the content isn't a 404 page or something?
15:32  piken: Hi all, anyone in here familiar with pygtk? I can't seem to get label's to respect justification
15:32  Yhg1s: cybervegan: not using 2.5's zipfile module, no.
15:32  Brend: verte: No, wget pulls it down just fine, but does indeed list the mimetype as text/html
15:33  SmartViking: Just tried learning C the past two days(did succeed, but could only create very basic programmes with no use except fun), and tried a little python again(tried before and failed) and now it all seemed so, efficient, powerful and easy :D
15:33  Juhaz: piken, somewhat.
15:33  ironfroggy_: Brend: i think he was making a "you cant break what is already very broken" joke
15:33  nomulous: Yhg1s: So I've decided to iterate over a list and use regex, and afaiu re.split(r'(\[[^\[\]]*]\])', s) should tokenize the *first* level of brackets. What am I doing wrong?
15:34  cybervegan: Yhg1s: Thanks, I though so, tho I just found a possible workaround (amazing how google inspiration hits you when you have already asked your daft question on irc!)
15:34  Brend: ironfroggy_, that mimetype bug is the only problem I just hit when installing warp (a pretty dependency-heavy package) on a fresh system
15:34  Brend: I guess I should probably convert to pip or whatever is fashionable at some point
15:34  ironfroggy_: pip is the new hotness
15:34  Brend: Then again I seem to remember hearing that pip is pretty bad at getting dependencies installed automagically
15:34  Brend: Which is the only thing I care about
15:35  SmartViking: Is python like a programme language that runs like a script? (like, similar to bash but more powerful)?
15:35  teratorn: pypi-install, though it's not without issues
15:35  piken: Juhaz: I am creating a lable and placing that label in either a table cell or a frame. I am .set_justify(gtk.JUSTIFY_RIGHT) on the label, but it doesn't seem to work. Any ideas?
15:35  papna-work: SmartViking: Yes, Python is a programming language like bash, C, or Perl.
15:35  teratorn: SmartViking: not quite like bash, no
15:36  teratorn: SmartViking: it's a language.. that's pretty much all you need to know :)
15:36  papna-work: SmartViking: As commonly used, there aren't separate compile and run steps.;
15:36  Hory: the style guidelines don't say, should the class instances provided by a module be all at the end of it or right after each class definition?
15:36  giskard: hi all
15:36  SmartViking: I really liked the no-compile part, _so_ much faster to debug and create
15:36  giskard: sorry about that but do you know how to create md5 crypt() password on Windows through python?
15:36  Yhg1s: nomulous: I'm not sure what you expect that to do, sorry
15:37  SmartViking: in opposite order
15:37  ironfroggy_: SmartViking: you better be automating your tests anyway, so the automated compiling shouldn't matter there.. right?
15:37  papna-work: Hory: Depends. More often I'd put them at the end or avoid global mutable staste by not making them at all.
15:38  SmartViking: ironfroggy_: What do you mean? xD
15:38  teratorn: hooray for not doing stuff
15:38  Yhg1s: nomulous: regular expressions aren't really good at parsing entire things (certainly not non-regular ones). Juse them to tokenize only; only produce discrete tokens ('[' and ']' would be separate tokens.)
15:38  ironfroggy_: SmartViking: manually running and debugging your code is a terrible way to work. write unittests!
15:39  SmartViking: Innominate: oh... i'm kind of a newb :P
15:39  SmartViking: So i do that haha
15:39  SmartViking: I guess i learn a little more, like, i learn it harder? :P
15:39  Juhaz: piken, use set_alignment instead
15:39  verte: SmartViking: do watch who you tab to
15:39  piken: juhaz: that is on the label correct?
15:39  SmartViking: verte: oh, thanks didn't see it
15:40  Juhaz: piken, right
15:40  SmartViking: ironfroggy_: that was for you. :)
15:40  Juhaz: piken, justify only affects the relative alignment of the lines in multi-line labels
15:40  lvh: ironfroggy_, verte: tab completion is for people with long nicks
15:40  lvh: ironfroggy_, verte: Real men just get completely misspelled
15:40  ironfroggy_: Ivh: you think so?
15:40  verte: 1vh: indeed
15:41  SmartViking: real men use time in an efficient way
15:42  SmartViking: real men do much in a short time span
15:42  piken: Juhaz: Do I need to create a gtk.Alignment object to set it. The pygtk class doesn't show set_alignment as a valid property on a Label, so I am not sure.
15:42  SmartViking: real men, gets things done
15:42  SmartViking: Can you create GUI programmes with python?
15:43  teratorn: SmartViking: sure
15:43  SmartViking: teratorn: nice :)
15:43  Juhaz: piken, no, just two floats. The documentation is in gtk.Misc (Label's superclass)
15:44  piken: Juhaz: Ty, I will look at gtk.Misc
15:45  piken: Juhaz: Ty man, key_value.set_alignment(0, 0.5) did a nice left justify for me. :)
15:47  SmartViking: wow, Blender is python
15:47  SmartViking: then python truly is powerful
15:47  Aondo: only the interface
15:47  SmartViking: ah
15:47  Aondo: all the core stuff is c and i think the gameengine is c++
15:47  verte: SmartViking: it's really more of an abomination that was once python
15:48  SmartViking: but i see in wikipedia a lot of applications i use, that is in python. nice :)
15:54  hopthrisC: blender was not "once python"
15:55  piken: SmartViking: Python is a very strong language. I would compare it to PERL but you would see some major outcry. It is one of the most readable languages I have worked with aslong as you don't go lambda crazy :)
15:55  verte: hopthrisC: no, but the interpreter bundled with it once was python
15:56  verte: hopthrisC: it's been so badly hacked to death I'm not sure what you'd call it now
15:58  SmartViking: piken: Nice answer :)
15:59  SmartViking: I do have a much easier time readin python code than readin C/C++ code :)
15:59  Xeeshu: Is python only for IRC related programing? or We can do other things as well?
15:59  piken: SmartViking: I am a C++ developer by trade and I still can read python better. lol
16:00  piken: Xeeshu: I have done a gtk app in it, along with a complex daemon and init system in it.
16:00  piken: Xeeshu: it is a general purpose scripting language that is quite powerful
16:00  hopthrisC: irc is turing complete
16:00  Yhg1s: it's a general purpose *programming* language.
16:01  Yhg1s: there's nothing particularly 'scripting' about Python.
16:01  verte: piken: what on earth is scripting?
16:02  Xeeshu: So, where basically is this language used?  Can any one give me an example of where its been used ?
16:02  ryan[WIN]: Xeeshu, a lot of companies use python in cases where they are limited by large amounts of i/o
16:02  SmartViking: Yhg1s: Well, with C you make code, compile, kernel reads. With scripts, you take code, launch in programme(bash, python) and take it from there, is that correct?
16:02  Yhg1s: Xeeshu: pretty much everywhere.
16:02  ryan[WIN]: so performance of the executed code tends to matter much less than the readability and speed of development
16:02  verte: SmartViking: implementation detail, has nothing to do with the language
16:03 * Xeeshu was of the view that python is only for IRC :S
16:03  verte: SmartViking: you can write a C interpreter just as easy as a python compiler
16:03  piken: Yhg1s: by basic defn from standard programming 101 classes, any interpreted language is by defn a scripting language. Old school edu symantecs.
16:03  Yhg1s: SmartViking: whard to say. The kernel "reads" in both cases. The CPU interprets things in both cases. And there are many languages that people don't call 'scripting languages', like Java, which execute quite the same way as Python (compiled to bytecode, bytecode interpreted in a VM.)
16:03  Xeeshu: So what's python connection with the IRC?
16:03  verte: Xeeshu: not sure what connection you're thinking of.
16:03  SmartViking: Yhg1s: i understand :)
16:03  Yhg1s: piken: and what is 'interpreted'? Python is compiled to bytecode, which is not-quite-machinecode. But so is C; CPUs interpret the machinecode nowadays.
16:04  hopthrisC: a script is something that is telling actors what to do
16:04  SmartViking: I don't like java for some reason
16:04  Xeeshu: hopthrisC: Its not that script
16:04  Yhg1s: SmartViking: I'm not sure why that's relevant, sorry. Lots of people don't.
16:04  Xeeshu: xD
16:04  ryan[WIN]: python can be used as a scripting language
16:04  verte: hopthrisC: that's what I thought, too
16:04  SmartViking: everything java related have always = trouble for me
16:04  zitter: sorry, is pthon.org down?
16:04  ryan[WIN]: programs like Maya use it for scripting
16:05  ryan[WIN]: obviously xchat and other irc things use it too
16:05  Yhg1s: ryan[WIN]: sure. There's also programs that use C for scripting.
16:05  ryan[WIN]: it's been used for scripting in large game engines like Eve Online
16:05  Yhg1s: (although most of them are rather old.)
16:05  Yhg1s: ryan[WIN]: no
16:05  hopthrisC: i don't think "script" has scope-crept way beyond where it should have stayed: shell scripts
16:05  Yhg1s: ryan[WIN]: it's used for *Eve itself*, not just 'scripting'.
16:05  verte: ryan[WIN]: I wouldn't say its usage in EVE had anything to do with scripting
16:05  piken: Yhg1s: You really want to be a stickler today. And by the way, any Language that can be run with on demand compiling is defined as interpreted. Java is not because you use the byte compiler seperately.
16:06  Yhg1s: ryan[WIN]: most of the code on the server is Python.
16:06  ryan[WIN]: it depends on what you mean by scripting language
16:06  Yhg1s: piken: sounds like a useless distinction then, and unfortunately not what most people think of.
16:06  tpratt: boringest argument ever
16:06  Yhg1s: ryan[WIN]: exactly.
16:06  nisstyre65: you can write a C interpreter though
16:06  nisstyre65: just sayin
16:06  Yhg1s: people have, yes.
16:06  hopthrisC: who'd'a'thunk... wikipedias list is actually quite sensible
16:07  ryan[WIN]: when i say scripting languages i mean "runtime modification of program data structures"
16:07  ryan[WIN]: i don't necessarily mean executed from the terminal and dealing with pipes
16:07  Yhg1s: ryan[WIN]: well, you can do that in C as well.
16:07  ryan[WIN]: of course you can
16:07  SmartViking: Now, the question is, do i use python 2.x or 3.x?
16:07  hopthrisC: job control, gui scripting, asl, browsers, extend/embed
16:07  SmartViking: How to check, on linux system
16:07  Yhg1s: SmartViking: use 2.x for now. Learn the differences in 3.x afterwards, and see if what you want to do can be ported.
16:07  ryan[WIN]: CPython and stackless and etc. etc. have C-side embedding APIs to use python to be a "scripting language" as I have defined it
16:07  hopthrisC: i'd lose text processing and general-purpose, though
16:07  piken: SmartViking: I would suggest 2.x as 3.x is not widely used yet.
16:08  SmartViking: ok ty
16:08  SmartViking: then i choose that documentationb
16:08  nisstyre65: SmartViking: check through your system's package manager?
16:08  SmartViking: which python
16:08  SmartViking: maybe
16:08  SmartViking: no
16:09  hopthrisC: with macports i'd recommend 2.6
16:09  verte: ls -l `which python`
16:09  nisstyre65: 2.7 is the gold standard isn't it?
16:09  verte: python --version
16:09  SmartViking: I use python 2.6.6
16:09  Yhg1s: the question 'which version is 'python' in my terminal' isn't the same as 'what version of python should I start with'.
16:09  verte: oh, there is that
16:10  verte: but it happens to work
16:10  nisstyre65: the Arch devs recently made the standard python package 3.1.2
16:10  SmartViking: Heh, i thought it was kinda the same so i just wanted to find out what version i had to choose the right documentation on the python site, now i know :P
16:11  airtonix: hi i need to automate the creation of several website virtualhosts, some of which might use django. for some insane reason django-admin only creates the project directory in the current directory.... so i need ot know how to run a command line program in a specific folder in one line...so the 'projects' folder gets made by django-admin in the correct place.
16:11  airtonix: btw, i'm using python to automate all this
16:11  verte: airtonix: subprocess.Popen accepts a cwd parameter.
16:11  Yhg1s: airtonix: subprocess.call() can be given a 'cwd' argument.
16:12  SmartViking: Yhg1s: How could you use a system command in python (like system() in C)? (bash)
16:12  Yhg1s: SmartViking: the subprocess module.
16:12  airtonix: so without looking closer, something like : subprocess.call/Popen(["sudo", "django-admin", "--startproject"], desired_directory) ?
16:12  Fuzzmz: OK, this may seem like a silly question but can you have two versions of python installed on the same system? Google App Engine wants 2.5 and was wondering if I could have it alongside 2.7
16:13  verte: cwd=desired_directory
16:13  Yhg1s: airtonix: no, 'cwd=desired_directory'
16:13  airtonix: Yhg1s, cheers
16:13  Yhg1s: Fuzzmz: yes, you can have as many major versions installed as you want.
16:13  verte: Fuzzmz: of course
16:13  Fuzzmz: thanks guys
16:13  Yhg1s: but GAE should work fine with 2.6 or 2.7 as well, the code will just be run under 2.5 when you upload it.
--- Log closed Mon Nov 01 16:20:35 2010
--- Log opened Mon Nov 01 16:31:04 2010
16:31 --- Users 788 nicks [0 ops, 0 halfops, 0 voices, 788 normal]
16:31  nomulous: Well you can match top level pairs only with a regex...
16:31  Yhg1s: caribou|: and what is the exact error you get?
16:31  caribou|: Yhg1s, no error, the representation on the website is bad :/
16:31  Yhg1s: caribou|: then your terminal isn't producing UTF-8.
16:31  Yhg1s: caribou|: print the repr() of the string and see what it is.
16:31  caribou|: Yhg1s, is there any workaround to fix that ?
16:31  caribou|: Yhg1s, ok
16:32  Yhg1s: caribou|: sure, find out what encoding it is and recode it. Or, make your terminal encode in UTF-8.
16:32 --- Channel #python was synced in 89 seconds
16:32  caribou|: Yhg1s, '\x82cureuil'
16:33  Yhg1s: caribou|: that's not UTF-8, then. It's probably one of the iso-8859 encodings.
16:36  nomulous: Yhg1s: Do you know how to make that regex greedy?
16:36  Yhg1s: nomulous: it already is greedy.
16:36  Yhg1s: nomulous: '*' is greedy.
16:38  Yhg1s: nomulous: I also don't understand what you're trying to do with that split, or why what you get isn't what you expect.
16:38  nomulous: Well then why does it return [' [ ', '[l]', ' ] '] ? Why not [' ', '[ [l] ]', ' ']
16:39  Axsuul: I LOVE PYTHON
16:39  Yhg1s: because you split on \[[^][]\]*, and '[1]' matches that. So you split on that. And the separator is included in the result becuse you use a group around it.
16:40  nomulous: Gotcha.
16:46 --- jonafan_ is now known as jonafan
16:46 --- pyro__ is now known as pyro_
16:48  RandIter: what is a good socket buffer size to use in a gigabit lan network?
16:48  Yhg1s: RandIter: depends entirely on what you're doing.
16:49  RandIter: Yhg1s: how do i make a decision?
16:49  Yhg1s: well, you start by wondering if you even need to worry about it.
16:49  verte: then, if you do need to worry about it, you measure
16:51  caribou|: Yhg1s, so decoding from iso and recoding to utf8 ?
16:52  Azra-el: hello guys.. im working on an addon for the compositing program nuke ummm what id like to know is how would i go about solving the current issue ... i have a determined path say localPath ="c:\projects" and serverPath="e:\projects" and i need i want to copy a file that has the path "c:\projects\leaf1\leaf2\leaf3\...\test.png" to the serverPath .. replicating all the subfolders
16:52  Yhg1s: caribou|: sure. But you need to know which encoding first.
--- Log closed Mon Nov 01 16:58:30 2010
