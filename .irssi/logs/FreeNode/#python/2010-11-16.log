--- Log opened Tue Nov 16 00:00:04 2010
--- Day changed Tue Nov 16 2010
00:00  papna-work: Perhaps /kick Someone with a multi-digit IQ.
00:00  mcantor: Wild_Cat: What's a TCO?
00:00  mcantor: Oh, tail-call optimization, n/m
00:00  cwillu_at_work: mcantor, tail-call optimization
00:00  Wild_Cat: mcantor: tail call optimization
00:00  arkanes_: I actually prefer calling it TCE
00:00  arkanes_: because it's not really "just" an optimization
00:00  KirkMcDonald: Total Cost of Ownership
00:00  papna-work: mcantor: Swedish Confederation of Professional Employees.
00:00  gandalfcome: I am interested how to parse something like this (http://pastebin.com/qn1wkivA) into a dictionary and an array in python. I would just use a generator and regexp. What is the proper way to do that? PyParsing? Cheers
00:00  arkanes_: also then it doesn't conflict with the Other TCO
00:00  infobob: http://bpaste.net/show/11072/ (repasted for gandalfcome)
00:01  dash: arkanes_: yeah
00:01  cwillu_at_work: gandalfcome, I'd just use regex, but that's because I'm a fool
00:02  gandalfcome: whois andjew
00:02  arkanes_: gandalfcome: that looks like you could just split it on whitespace
00:02  cwillu_at_work: gandalfcome, if there's a fixed number of columns and no spaces in anything except the first column, ''.rsplit would do the trick
00:03  sampablokuper: Hi folks, I'm trying to install bzip2 locally as per the instructions here (except that I'm attempting to install bzip2 1.0.6, which is the latest stable release): http://www.kelvinwong.ca/2010/08/02/python-2-7-on-dreamhost/ . However, I'm getting this error after running "make -f Makefile-libbz2_so": "compress.c:74: warning: inlining failed in call to 'bsW': call is unlikely and code size would grow". Can anyone help me trouble
00:03  tlynn_: gandalfcome: what kind of messed up format is that?
00:03  papna-work: sampablokuper: That's a warning, not an error. You can ignore it.
00:04  gregglind: gandalfcome, pyparsing and ply (http://www.dabeaz.com/ply/ply.html) are the standards for 'real' parsers.  with yours, it's simple enough that I would cobble together a regex/whitespace kind of thing :)
00:04  NotreDev: sampablokuper: dude i had so many probably compiling bzip2
00:04  bob2: sampablokuper: you can probably just not bother with the bzip2 module too
00:04  gregglind: since it has no recursion.
00:04  sampablokuper: papna-work: It won't affect Python's ability to build bz2?
00:04  papna-work: sampablokuper: Correct.
00:04  dash: sampablokuper: warnings don't prevent stuff.
00:04  sampablokuper: OK; thanks, all :)
00:05  gandalfcome: gregglind
00:05  gandalfcome: gregglind: thanks ill try that.
00:05  gregglind: sometimes *ugly and today* is better than *bulletproof* but that'sa controversial opinion, not shared by all here.
00:06  mcantor: Why is it that sometimes, when I'm using test generators, nosetests does not print captured stdout?
00:06  gregglind: I tend to break out pyparsing or ply if I have grammars with nesting.
00:06  Diverdude: is it possible to clear an imported module so that i can re-import it after i made changes in it?
00:06  bob2: Diverdude: not in general
00:07  mcantor: Diverdude: Can you go a level higher and tell us what you're trying to do?
00:07  bob2: Diverdude: reload() does something a bit like that
00:07  gandalfcome: gregglind: I have multiple of these codeblocks in one file
00:07  tlynn_: gandalfcome: I think you want a loop that consumes the next word and then may consume some more depending on that word
00:08  gregglind: gandalfcome, multiple in a row, you can recognize using standard tools.  nesting, that I find tedious to handcode
00:09  Diverdude: mcantor, im just trying to write a module...there was an error in the module...i correted it, but the error keeps coming anyway when i invoke the function in the module
00:09  conley: Why doesn't this work?: thing[3][len(thing)-1]
00:09  mcantor: Diverdude: Are you in an interactive python session?
00:09  gandalfcome: tlynn_: thx. as well as to the others who gave suggestions.
00:09  ssbr_: conley: what do you mean "doesn't work"?
00:09  conley: It says 'IndexError: string index out of range'
00:09  Yhg1s: conley: well, you're using the length of thing to index thing[3].
00:09  Yhg1s: perhaps you just want thing[3][-1] instead.
00:10  Diverdude: mcantor, aha reload did the trick
00:10  mcantor: conley: Works fine for me.
00:10  ssbr_: mcantor: depends on your data
00:10  Brklyn: papna-work, thanks for the help.... I was missing the try....except
00:10  ssbr_: won't work for thing = 'foobar' for example
00:10  mcantor: ssbr_: conley didn't specify, therefore I'm free to interpret as I please ;-)
00:10  conley: Yhgls: oh, that would work better, yea. 'thing' is a list, by the way
00:10  habnabit: Diverdude: Please don't use reload in real code.
00:10  mcantor: Diverdude: Seriously though, are you just trying to get the most updated version in your IPython session?
00:10  habnabit: Diverdude: It has no benefits and a number of downsides.
00:10  mcantor: Diverdude: If you are, you should just use ipython's %ed function.
00:13  yakup: hi all, is there a specific channel for nodebox?
00:15 --- dpn`_ is now known as dpn`
00:16  dpn`: i iz puny fleshling
00:16  manizzle: is there anyway to output all the text inputted to the python console into a .py file?
00:17  dpn`: manizzle: not in the regular python console
00:17  KirkMcDonald: manizzle: No. This is not BASIC. :-)
00:17  dpn`: i think ipython can do it
00:17  gregglind: ipy can.
00:17  KirkMcDonald: That wouldn't surprise me.
00:17  dpn`: i just use a file in the first place for serious code
00:17  Yhg1s: other things that aren't Python can also do it.
00:17  NotreDev: manizzle: yeah there is actually
00:17  manizzle: can someone show me how?
00:17  NotreDev: start up pdb, step into each function upon defining it, and you'll see them all
00:17  gregglind: http://ipython.scipy.org/doc/rel-0.9.1/html/interactive/reference.html
00:18  dash: NotreDev: umm what.
00:18  mcantor: How can I fool the "dir" function with a Mock object?
00:18  Yhg1s: NotreDev: not for anything you did in the interactive interpreter.
00:18  dash: mcantor: why would you need to?
00:18  NotreDev: ;)
00:18  KirkMcDonald: mcantor: Yegads that is a terrifying question.
00:18  mcantor: dash: Because I'm refactoring some shitty code.
00:18  EricBlade: hey guys, i just re-compiled an ancient python library from 2.4 into a 2.6 version .. can someone point me to some instructions on how to package it for windows?
00:18  Yhg1s: mcantor: in 2.6 you can define a __dir__ method for that.
00:18  gregglind: mcantor, I tend to use the fixture.io.TempIO for that.
00:18  gregglind: oh dir!  nevermind!
00:18  mcantor: Oh, how convenient!  __dir__ can be redefined.
00:19  gregglind: sorry, my brain frazzled there.
00:19  KirkMcDonald: EricBlade: python setup.py bdist_wininst
00:19  Yhg1s: mcantor: but *code*, rather than tools like pydoc, that depends on dir() is... well, stupid.
00:19  manizzle: fuck, ipy so much to learn
00:19  KirkMcDonald: EricBlade: Or possibly: python setup.py bdist_msi
00:19  NotreDev: manizzle: then don't?
00:19  gregglind: ipy is easier than it looks.  Some benefits, some drawbacks.
00:19  teratorn: manizzle: that isn't necessary, is it?
00:20  mcantor: Yhg1s: That's why I'm refactoring it!  ;-)
00:20  Yhg1s: mcantor: so get rid of the reliance of dir() while you're at it.
00:20  Yhg1s: or, first.
00:20  manizzle: teratorn, i just want to upload that page into my brain
00:20  manizzle: fuck
00:20  Yhg1s: manizzle: mind your language, please.
00:20  mcantor: Yhg1s: Test, then refactor :->
00:20  manizzle: Yhg1s, sorry dude
00:20  dash: manizzle: ipython isn't a thing to use for python development, really
00:21  manizzle: dash, what is it used for?
00:21  gregglind: manizzle: after installing...  ipython --logfile somefile
00:21  dash: it's more a tool for scipy users for interactive data stuff
00:21  habnabit: manizzle: It makes a good matlab replacement.
00:21  manizzle: o
00:21  manizzle: i see
00:21  gregglind: um, I and other devs use it all the time for devving, thanks dash.
00:21  dash: manizzle: the main problem is that it often produces errors that are different from actual python errors
00:22  EricBlade: KirkMcDonald: http://docs.python.org/distutils/introduction.html  .. thank you :)
00:22  Yhg1s: and introduces errors that actual python wouldn't produce.
00:22  dash: gregglind: well that's hardly /my/ fault
00:22  manizzle: dash, how so?
00:22 --- SpitfireWP_ is now known as SpitfireWP
00:22  habnabit: This stems from that ipython is not a real python interpreter.
00:22  manizzle: ionno i just to hack at some code on the interpreter
00:22  gregglind: dash, when you speak for everyone, it's really quite obnoxious.
00:22  Yhg1s: it's *almost* a real Python interpreter.
00:22  manizzle: makes sure it works
00:22 --- r0bby is now known as robbyoconnor
00:22  manizzle: before i put it into code
00:22  Yhg1s: manizzle: yes, which is where the interactive interpreter is fine.
00:22  gregglind: it is often quite fine for that.
00:23  Yhg1s: but ipython is different enough that you can have code not work in one but work in the other.
00:23  habnabit: manizzle: That's what unit tests are for.
00:23  ssbr_: That is indeed what automated tests are for.
00:23  gregglind: all if that is certainly true.
00:23  ssbr_: (I would hesitate to say unit tests, but automated tests definitely)
00:23  bsdbandit: hey guys hows everything going
00:23  mcantor: How do I make an uncallable Mock?
00:23  manizzle: habnabit, im talking like 1-2 lines of code. im kinda new to python, so im not sure what all works, and i keep mixing in other languages and such
00:23  gregglind: it also has a lot of nice add-ons that can make learning python friendlier.
00:23  Yhg1s: mcantor: uncallable according to what?
00:24  ssbr_: gregglind: eh, raising different errors and behaving differently from real python isn't the most conducive thing for learning python
00:24  Yhg1s: manizzle: if it's that small an amount of code, just copy-paste and remove the first four characters.
00:24  ssbr_: but to be fair, it *has* been a while since I've seen someone confused by it.
00:24  manizzle: hah
00:24  Yhg1s: ssbr_: not for me.
00:24  ssbr_: (but I do honestly think this is because I haven't seen many ipython users lately)
00:25  mcantor: Yhg1s: according to callable()
00:25  Yhg1s: mcantor: then no.
00:25  gregglind: I am glad to see some of these 'different errors'
00:25  mcantor: @#)*(@#Y%@#%
00:25  papna-work:  /lastlog ipython
00:25  mcantor: This code is effing awful.
00:25  habnabit: mcantor: callable is not a thing that should be used in real code.
00:25  Juhaz: how come we're having a ipython bashfest and nobody has mentioned bpython yet
00:25  mcantor: habnabit: I *know*... I'm trying to refactor it out!!!  ;-)
00:26  ssbr_: *cough*becausethesameargumentsapplytobpython*cough*
00:26  mcantor: Juhaz: Wait, we're bashing ipython?  What's wrong with it?
00:26  mcantor: I just discovered %ed yesterday.  Pretty classy.
00:26  habnabit: ssbr_: Not nearly as many.
00:26  ssbr_: Yeah, it's not that bad.
00:26  gregglind: mcantor, it contains ghosts and warts, whic people don't like.
00:26  mcantor: gregglind: Are you being facetious or are those actually cheeky terms for something
00:26  gregglind: bpython is fine too.
00:27  GothAlice: Is there a replacement for it that offers the same syntax highlighting, history, auto-completion and introspection that sucks less?
00:27  Juhaz: mcantor, well, as the guys have been saying it introduces subtle errors that wouldn't happen in the normal interpreter sometimes confusing the hell out of people
00:27  ssbr_: GothAlice: a replacement for what?
00:27  GothAlice: ipython
00:27  Yhg1s: gregglind: here:
00:27  Yhg1s: In [2]: print u"€"
00:27  Yhg1s: â¬
00:27  mcantor: Juhaz: Ooh.  Like what?
00:27  ssbr_: bpython offers all those things
00:27  gregglind: I thing people here are harping on things about ipy that rarely bite novices, and are known issues with advacned programmers. Ipython has a ton of rich, easy convenience functions that should be built in to the repl but arent.
00:27  ssbr_: gregglind: I've seen it bite novices.
00:27  GothAlice: And it offers excessively ugly UI-like boxes.  Cool.
00:27  Yhg1s: gregglind: it bites novices all the time, which is why it's not a good tool for learning Python.
00:28  mcantor: No Google results for "ipython gotchas".
00:28  ssbr_: I've never seen it bite novices of the regular python interpreter. :-*
00:28  mcantor: How does it bite novices?
00:28  GothAlice: Statements need evidence.  :)
00:28  ssbr_: If I had IRC logs, I'd grep for evidence. :(
00:28  KirkMcDonald: ipython has a... lively relationship with Unicode.
00:28  EricBlade: bah, that documentation is all sorts of incorrect
00:28  ssbr_: we have indeed dealt with crazy ipython screwed-up-edness in the past
00:28  Yhg1s: mcantor: see what I just pasted.
00:28  habnabit: No Unicode support seems like a pretty big thing.
00:28  Yhg1s: it isn't 'no unicode support'
00:28  ssbr_: wait what
--- Log closed Tue Nov 16 00:34:56 2010
--- Log opened Tue Nov 16 00:35:15 2010
00:35 --- Users 812 nicks [0 ops, 0 halfops, 0 voices, 812 normal]
00:35  gregglind: I wish the standard repl did more.
00:35  bob2: kawumba: how big is the list
00:35  habnabit: For a long time, 'p = None' was a syntax error in ipython.
00:35  habnabit: I forget if they fixed it.
00:35  arkanes_: the more the repl does, the less it is like what you are actually running
00:35  bob2: kawumba: if 'small', itertools.permutations + filtering it
00:35  gregglind: habnabit, that is fine.
00:35  kawumba: bob2: several 100 elements
00:35  mcantor: Interesting.  Perhaps it is more accurate, then, to simply state "novices should be aware of which ipython features are features of ipython, and which are features of the language tself."
00:36  arkanes_: mcantor: maybe
00:36  gregglind: mcantor, that is what I say.
00:36  Yhg1s: mcantor: I'm not sure why that wuld be 'more accurate'.
00:36  kawumba: bob2: not time-critical, though.
00:36  arkanes_: mcantor: but only if you're some sort of spineless weasel word person who is unafraid to criticize things
00:36  habnabit: mcantor: So, that seems like awfully a lot for novices to be expected to learn and memorize.
00:36  Yhg1s: I think it's a mistake for any novice to use ipython. I also think the added features are not worth *any* risk introduced by *not actually using python*.
00:36  ssbr_: arkanes_: no, I think he just likes ipython
00:36  Yhg1s: but then, I also don't use bpython.
00:36 --- Channel #python was synced in 91 seconds
00:36  arkanes_: ssbr_: sure, that too
00:36  habnabit: mcantor: Immediately when they start with python, that is.
00:37  habnabit: gregglind: 'fine' ?
00:37  gregglind: 'fine'?  what?
00:37  habnabit: gregglind: habnabit, that is fine.
00:37  arkanes_: mcantor: I mean, the same argument applies entirely to any possible thing you can imagine
00:37  gregglind: oh, that P=None doesn't cause an error in ipy
00:37  mcantor: arkanes_: Rather than "spineless cowardly weasel," I prefer the term "explicit."
00:38  arkanes_: mcantor: well thats not really being explicit
00:38  habnabit: gregglind: It has to be a lowercase P, and with spaces.
00:38  gregglind: I tried it that way :)
00:38  ssbr_: mcantor: no, he said "weasel words", not "weasel". Totally different.
00:38  arkanes_: mcantor: maybe try "I think that novices should have to learn 2 things not 1"
00:38  ssbr_: In particular, weasel words are a sort of opposite to explicit. but I think he used that term wrong. :X
00:38  gregglind: habnabit:  In [1]: p = None
00:38  mcantor: arkanes_: Yes, it is.  Saying "ipython sucks for novices" implicitly asserts that no novice should ever use ipython.
00:38  Yhg1s: mcantor: yes.
00:38  sampablokuper: Hi folks, I'm trying to install Python 2.7 locally as per the instructions here (except that I'm installing the latest stable release of each of the prerequisite pieces of software): http://www.kelvinwong.ca/2010/08/02/python-2-7-on-dreamhost/ . I installed Berkeley DB 5.1.19 instead of the 4.8 suggested in the article, and now that I've run "make" on Python, I get notified that "the necessary bits" to build _bsddb were not foun
00:38  Yhg1s: mcantor: this is what I'm saying.
00:39  habnabit: Well, I guess that means they fixed it recently n
00:39  bob2: sampablokuper: do you care?
00:39  kawumba: <bob2> kawumba: if 'small', itertools.permutations + filtering it <-- but i need _all_ of the input elements in the resulting list.
00:39  arkanes_: mcantor: well thats what I think, yes
00:39  sampablokuper: bob2: Eh?
00:39  arkanes_: mcantor: its possible that ipython may be a useful tool for some people, but a) not for python and b) not for novices
00:39  exarkun: Anyone know of any docs for PyOpenGL VBO objects?  They give the appearance of supporting data mutation, but actually changing stuff seems challenging.  I wonder what I'm missing.
00:39  bob2: sampablokuper: doy ou care if you have no bdb support?
00:40  Yhg1s: sampablokuper: you need bsddb 4.8 or earlier instead.
00:40  arkanes_: mcantor: and to the extent that it is useful for doing python, I think there are better tools available
00:40  mcantor: arkanes_: Yhg1s: Of course!  Perhaps I even agree with you.  But when you are communicating your views to another person, it is quicker to be explicit about why you think it sucks for all novices, rather than just saying so and forcing the other person to dig for your actual opinions.
00:40  Yhg1s: sampablokuper: but perhaps you don't really need the bsddb module anyway.
00:40  mcantor: arkanes_: Oh!  What's better than ipython out there?  I don't really know of any alternatives
00:40  Yhg1s: mcantor: I *am* stating my actual opinions.
00:40  pr3d4t0r: mcantor: bpython.
00:40  ssbr_: mcantor: the regular python shell is better than ipython for novices
00:40  arkanes_: mcantor: I think what you're objecting to here is that we are being mean about a tool that you like
00:40  sampablokuper: bob2: I'd rather have it than not, so that if/when I need it in future, I don't have to rebuild Python...
00:40  gregglind: arkanes_ I am stating explicitly that I find Ipython useful. It's not just 'possible'.
00:40  sampablokuper: Yhg1s: thanks :)
00:40  arkanes_: mcantor: and that's not really going to find a lot of sympathy
00:40  pr3d4t0r: mcantor: Same idea, nicer UI for novices.
00:41  arkanes_: gregglind: yes, but I don't know if you're stupid or not
00:41  arkanes_: gregglind: so I can only speak in terms of possibilities
00:41  GothAlice: arkanes_: Wait, what?
00:41  gregglind: arkeanes_ you really want to go that route?
00:41  mcantor: arkanes_: Yes, you're being awfully, terribly mean.  You're big bad jerks, and I'm going to write a butthurt post about this fight in my LiveJournal.
00:41  arkanes_: gregglind: yes
00:41  arkanes_: gregglind: what other route should I take?
00:41  GothAlice: Wow, this channel is abusive even when I'm not the one asking questions.
00:41  ssbr_: mcantor: no, no, you're supposed to write to Python-Dev
00:41  r3negade: is there anything more efficient than a list to store 1.8million strings?
00:41  Yhg1s: r3negade: a file.
00:41  mcantor: Ba-dum, kshh!
00:41  GothAlice: r3negade: Efficient for what, exactly?
00:41  dash: r3negade: a stone tablet
00:41  arkanes_: gregglind: I don't know you, or your experience with ipython, so I can hardly recommend it based on your experiences
00:42  ssbr_: GothAlice: no, just some people.
00:42  r3negade: yeah, figured
00:42  r3negade: what sort of file?
00:42  GothAlice: r3negade: Dictionaries are more efficient for doing 'in'-style lookups.
00:42  Yhg1s: r3negade: depends on what you want.
00:42  r3negade: I tried .txt, it gets too big, then every open and close makes it cry.
00:42  arkanes_: gregglind: sometimes when I know someone better i will use their opinion as a proxy for my own, but you're not one of those people
00:42  habnabit: GothAlice: You sure know how to win support and get free help!
00:42  r3negade: it's a massive data rip.
00:42  Yhg1s: r3negade: opens and closes don't really care about the size of the file.
00:42  GothAlice: r3negade: A sorted b-tree would be the most reasonably efficient for searching.
00:42  habnabit: r3negade: sqlite
00:42  Yhg1s: r3negade: what are you actually trying to *do* with these strings?
00:42  mcantor: arkanes_: My contention was not that you were being mean, but that you were communicating inefficiently.
00:42  gregglind: arkanes_, no one is asking you to recognize anything other than that there are others who don't share your opinion, and that it's possible that you might be wrong, and that differing circumstances and needs necessitate different choices.
00:43  GothAlice: r3negade: sqlite is great for tabular data, mongodb for complex data structures.
00:43  arkanes_: gregglind: I thought that was clear
00:43  arkanes_: gregglind: "it is possible..." and so forth
00:43  mcantor: When did I walk into #metaphysics?
00:43  ssbr_: GothAlice: they are not entirely comparable
00:43  r3negade: I have to rip 1.8 million urls, then for each of them, I have to scrape their data, which is the next step... i'm still on the "How to rip 1.8 million urls" part.
00:43  manizzle: xrange is a generator where range is a list comp?
00:43  manizzle: am i understanding that correctly?
00:43  arkanes_: mcantor: "ipython is bad for novices" is an incredibly efficent statement :)
00:43  Yhg1s: r3negade: writing them to a file sounds fine then.
00:43  GothAlice: manizzle: range() returns a list.
00:43  ssbr_: manizzle: xrange is a lazy sequence object. not the same as a generator
00:44  r3negade: I'll check out sqlite.
00:44  GothAlice: manizzle: [i for i in j] is a list comprehention.
00:44  Wild_Cat: r3negade: so you don't need more than 1 URL at a time, right? Store them all into a txt file, one URL per line.
00:44  habnabit: r3negade: sqlite would be good for that.
00:44  ssbr_: eh, xrange returns*
00:44  Yhg1s: manizzle: range produces a list, xrange produces a fake list-like object
00:44  mcantor: arkanes_: Unless you're talking to someone who wants to understand why.
00:44  mcantor: arkanes_: Which, if you're talking to a competent programmer, is "always".
00:44  Wild_Cat: r3negade: then, for url in open("urls.txt"): # do stuff with url
00:44  r3negade: last time my script froze at 60,000 entries using a .txt file.
00:44  arkanes_: mcantor: you'd be surprised
00:44  manizzle: well i mean a generator will also allow you to get those values
00:44  manizzle: but like the xrange
00:44  manizzle: doesnt generate
00:44  Yhg1s: mcantor: then they ask "why?"
00:44  manizzle: them at the same time
00:44  Wild_Cat: r3negade: that's because you tried to read them all at once, didn't you?
00:44  arkanes_: mcantor: hardly anyone comes in asking what we think about ipython, though
00:44  Yhg1s: mcantor: like people did this time. And then we tell them.
00:44  Wild_Cat: with a .read() or .readlines() call?
00:45  GothAlice: Or a for loop over the file object.
00:45  papna-work: Why would someone call readlines?
00:45  Wild_Cat: r3negade: iterating over the file reads one line at a time, and as such has near-constant memory usage, regardless of the file size.
00:45  arkanes_: mcantor: normally what happens is that someone will ask about an impossible error, and then paste bin an ipython session, and we will tell them to use the regular interpreter instead
00:45  Yhg1s: papna-work: confusion.
00:45  mcantor: arkanes_: Remember that I said 'competent' programmer.  ;-)
00:45  Yhg1s: competent programmers know when to ignore advice anyway.
00:45  Yhg1s: (unfortunately even then they're mostly wrong!)
00:46  arkanes_: "any time they feel like it"
00:46  r3negade: so now i'm thinking... since I was going to rip the 1.8 million urls into a file, then import them later into a different script to scrape each of their data...if i'm writing to sql, it'd be better for me to do it all in one script, right?
00:47  Yhg1s: r3negade: not necessarily.
00:47  r3negade: oh?
00:47  GothAlice: r3negade: It's useful to separate gathering of data with workers that run across that data.
00:47  Yhg1s: But if you are just going to process the urls one by one, and not doing any kind of searching through the URLs or associating other data with them, just use a flat file.
00:47  manizzle: gregglind, the way in which xrange and generators output their data is on the fly, thats what i was asking
00:47  Wild_Cat: r3negade: depends. But again, the txt method should be enough for your needs. It crashed because in all likelihood, you were doing it wrong.
00:49  r3negade: Wild_Cat: define wrong?
00:49  Wild_Cat: r3negade: it crashed/hung where it shouldn't have. That's all I can say without seeing the code.
00:50  Wild_Cat: ...and if so, we can help you do it right.
00:50  gregglind: xrange (in py2) is a generator, so it produces them one at a time, not a bit list.
00:50  gregglind: *big list*
00:50  Yhg1s: gregglind: no.
00:50  Yhg1s: gregglind: it is *not* a generator.
00:50  habnabit: *iterables
00:50  habnabit: -s
00:50  Wild_Cat: r3negade: Python shouldn't crash/hang when reading a file line-by-line, unless there are individual lines 1 gigabyte long :p
00:50  Yhg1s: it's a list-like object that produces items as it's indexed.
00:50  Wild_Cat: (and likewise when writing it)
00:51  r3negade: honestly, I can tell you i'm doing it right, it's just the file sizes that's the issue.
00:51  Yhg1s: r3negade: the filesize wouldn't cause it to crash.
00:51  gregglind: Yhg1s, it is an xrange object, that produces lazily, and doesn't produce the list all at once.  Better Yhg1s?
00:51  Yhg1s: gregglind: sure.
00:51  r3negade: the file gets to 5.2mb at 60,000 entries... when i'm opening, copying the contents, pasting + adding a new line, it becomes incrementally heavier on my comp.
00:52  Yhg1s: r3negade: yes, that's the wrong way.
00:52  Yhg1s: don't open, copy, paste and add. Just append the next line.
00:52  Wild_Cat: ^
00:52  r3negade: I never saw any kind of append function D:
00:52  loltoad: when i do "a=[] def b(): print a" i get no errors but if i do "a=[] def b(): a+=[1]" an UnboundLocalError: local variable 'a' referenced before assignment
00:52  r3negade: *humbled*
00:52  arkanes_: xrange supports a number of decidedly non-generator things, like membership testing
00:52  Wild_Cat: r3negade: f = open("foo.txt", "a"); f.write("new line!\n")
00:52  KirkMcDonald: And random indexing.
00:52  Yhg1s: loltoad: '+=' tries to assign to the local variable 'a'.
00:52  habnabit: loltoad: Yep.
00:52  manizzle: arkanes_, want to explain?
00:52  arkanes_: loltoad: right
00:53  arkanes_: manizzle: you can do "5 in xrange(10)"
00:53  Yhg1s: loltoad: don't do that anyway; just use 'a.append(1)' instead.
00:53  Wild_Cat: r3negade: it's not an append function, it's opening the file in append mode.
00:53  r3negade: Ahhhh
00:53  r3negade: :)
00:53  r3negade: I'll try it now, thx.
00:53  Wild_Cat: (write mode truncates the file, append doesn't)
00:53  r3negade: that should make everything HEAPS more efficient.
00:53  Yhg1s: don't re-open the file all the time, though, just keep it open.
00:53  Wild_Cat: yup! ^^
00:53  Wild_Cat: yeah, that too.
00:53 --- |kesselhaus| is now known as kesselhaus
00:53  loltoad: Yhg1s: wait, they why can print find it?
00:53  r3negade: so just like this yeah?
00:54  r3negade: file = open("datafile.txt", "a")
00:54  r3negade: file.write(mylink)
00:54  r3negade: file.close()
00:54  Yhg1s: loltoad: because in that *different* function you aren't assigning to 'a', so there's no local variable 'a'.
00:54  Yhg1s: r3negade: just keep the file open.
00:54  r3negade: okay cool.
00:54  Wild_Cat: r3negade: yup. Except you should probably open the file just once at the beginning of the program and close it at the end of the program
00:54  Wild_Cat: no need to redo an open/close for every write.
00:54  loltoad: Yhg1s: am i the only one that thinks its odd that its willing to read in that scope, but not assign to it?
00:55  r3negade: sweet.
00:55  KirkMcDonald: loltoad: Python's declaration syntax is backwards compared to most languages.
00:55  papna-work: loltoad: I see where you're coming from, sure.
00:55  eoss: in tkinter is it possible to put a scrollbar on a Panel widget?
00:55  Yhg1s: loltoad: no, it's a relatively common pitfall in Python. Assignment always assigns to a local scope (the function) and that makes *all access* to that name be local.
00:55  Yhg1s: loltoad: when you don't assign to that name, all access of that name considers the global scope instead.
00:56  Yhg1s: (in that specific function, of course.)
00:57  r3negade: It seems that it takes about 5-10 seconds per 1000 entries because it inputs them line by line, do you think I could perhaps make some kind of list and print them all at once?
00:57  loltoad: Yhg1s: ahh, so until iexplicitly declare it using an = it wont create it, and if i don't, it dosn't kno what I'm writing too
00:57  Yhg1s: loltoad: I'm sorry, I couldn't parse that.
00:57  Yhg1s: r3negade: print?
00:57  habnabit: r3negade: Perhaps you should pastebin your code.
00:57  r3negade: "append"
00:58  loltoad: Yhg1s: only the = sign can create the variable in local scope then?
00:58  Yhg1s: r3negade: no, writing line by line won't be significantly slower than collecting lines in a list and writing them in chunks.
00:58  Yhg1s: loltoad: no, any assignment can. like +=.
00:58  r3negade: I see, alright then, maybe I should focus on threading.
00:58  Yhg1s: also, 'def', 'class', 'import', any statement that assigns to a name.
00:58  r3negade: this new append mode is much faster, thanks guys.
00:58  KirkMcDonald: Yhg1s: Don't forget 'fot'.
00:58  KirkMcDonald: ...
00:58  Yhg1s: r3negade: that doesn't sound a good plan.
00:58  KirkMcDonald: 'for'
00:59  r3negade: Yhg1s, really? I thought it'd get the job done alot quicker.
00:59  loltoad: Yhg1s: but += didn't create it, it trew an error...
00:59  Yhg1s: loltoad: because '+=' doesn't *just* create it, it *also* refers to it. And so it refers to it *before* it's created.
00:59  Yhg1s: r3negade: usually not.
00:59  Yhg1s: r3negade: it depends on what you're *actually doing* though.
00:59  KirkMcDonald: loltoad: Consider: x = x + 1 # where x does not previously exist
00:59  Yhg1s: and why you think threads would be faster.
00:59  loltoad: Yhg1s: ah, makes sense
00:59  Wild_Cat: r3negade: what do you want to use threading for? If it's spawning multiple worker threads to scrape multiple URLs at once (say, with urllib.urlretrieve), that should work. If it's to write stuff faster on the disk, that won't do squat.
01:00  r3negade: I'm opening a page with urllib, ripping 1000 links, then appending them, I was gonna thread it from the URLlib part, which should improve the time alot.
01:00  Yhg1s: r3negade: you probably want to consider Twisted or scrapy instead.
01:00  r3negade: wild_cat: yeah, the url's.
01:00  arkanes_: there's some better ways to concurrently get lots of pages
01:00  arkanes_: if you're deathly afraid of twisted and insist on NIH with scrapy, consider using libcurl
01:00  r3negade: I haven't been up to date with these things for ages, I still use urllib2 and bsoup haha...
01:01  r3negade: so todays best alternative would be Twisted?
01:01  Yhg1s: has been for many years.
01:01  Yhg1s: scrapy uses Twisted.
01:01  loltoad: Yhg1s: question then: is making globals unassignable with explicity declaration as global a design decision? or a limitation?
01:01  Yhg1s: (and it scrapes webpages for you.)
01:01  victorho: Hey guys, this is not directly python related but I am at my wits end. If you visit my website: http://www.awesomestartup.com/accounts/login/ you will see that the logo at the top left "resconnection" becomes very pixelated at certain levels of zoom
01:01  victorho: How do I make sure that it looks consistent?
01:01  Yhg1s: loltoad: it's a design decision, yes.
01:02  arkanes_: it's sort of a limitation
01:02  loltoad: Yhg1s: hat are the advantages
01:02  arkanes_: depends on how you choose to think about things
01:02  bob2: victorho: that is how zooming raster images works
01:02  Yhg1s: loltoad: no declarations.
01:02  Yhg1s: (except for 'global'.)
01:02  victorho: bob2: so how should I store the image so that the text stays readable?
01:02  bob2: victorho: who cares?  it's a logo, no one is going to zoom in to 200% and complain
01:03  victorho: bob2: problem is, my default firefox zoom already has it very pixelated
01:03  r3negade: so, which should I learn... scrapy or twisted?
01:03  bob2: victorho: then produce a higher res version
01:03  r3negade: or if both, which one first?
01:03  manizzle: r3negade, just go for what you need
01:03  manizzle: scrapy
01:03  victorho: bob2: ok let me try that!
01:03  r3negade: cool, I'll read up on it then.
01:04  manizzle: dont try to learn EVERYTHING about python just to scrape a site
01:04  manizzle: might as well learn about transistors and logic gates while your at it.
01:04  loltoad: Yhg1s: ohh, it all makes sense now, thx.
01:05  loltoad: manizzle: and thats hy im regretting being a computer engineer vs computer science
01:05  manizzle: well im a cpe
01:05  manizzle: i love it
01:05  manizzle: hard as shit
01:05  manizzle: but its nice
01:06  dash: loltoad: it's not like a computer science curriculum would have helped you understand python any better :)
01:07  ktm5124: whatup guys
01:08  loltoad: dash: agreed, i use python as mostly a scripting language/ shell extension, so all my code looks liek this: FILE=[ [ int(i) for i in s.split() ] for s in open("roads26-10.txt").read().split('\n')[131:] ][:-1]
01:08  sanduz2: how long did it take you guys to become python experts?
01:08  Cam: My whole life.
01:08  dalaiLamer: 10 days
01:08  ktm5124: i just started python
01:08  ktm5124: but i have java/c/php under my belt
01:08  manizzle: 42 days
01:08  dash: sanduz2: 10 years.
01:08  Cam: sanduz2; Nobody is a python expert... well... nobody here.
01:08  ktm5124: Cam don't be so pessimistic
01:08  ktm5124: you strike me as a depressing person
01:08  Cam: ktm5124; born this way.
01:08  dash: sanduz2: http://norvig.com/21-days.html
01:09  sanduz2: lol
01:09  manizzle: Cam, dont kill youself
01:09  Cam: too late
01:09 --- asshat is now known as lancebass
01:09  loltoad: manizzle: actually i like transistors and logic gates, its op-amps and RLC circuits I hate
01:09  ktm5124: loltoad: how does that stuff make you money?
01:10  sanduz2: ok good i just wanted to know if maybe im slow or something. ive been programming for 2 years but those guys in the videos (like google tech talks) and even in these irc rooms seem to always be more advanced than me
01:10  manizzle: ktm5124, fun to know. passion == money.
01:11  ktm5124: nah
01:11  dash: manizzle: hahaha.
01:11  manizzle: hah
01:11  ktm5124: i used to be passionate about coding and i made no money
01:11  ktm5124: now i'm not and i do
01:11  dash: exactly.
01:11  manizzle: do you still code?
01:11  ktm5124: when i have to, or when it's fun
01:11  ktm5124: but very few projects are fun
01:11  manizzle: depends
01:11  ktm5124: i tried to bruteforce a porn site, that was fun
01:12  manizzle: im working on a pretty fun project atm
01:12  arkanes_: its entirely possible to make money and be passionate
01:12  loltoad: ktm5124: im in college, i don't make money, its just for experiments and stuff, hackign together ideas and what not
01:12  arkanes_: although being passionate tends to burn you out, because when you're passionate you care about making good things, which is impossible
01:12  ktm5124: loltoad i'm a senior in college
01:12  dash: writing programs isn't nearly as fun as having written programs.
01:12  manizzle: loltoad, i am too.
01:12  manizzle: dash, hah
01:12  manizzle: good one, yes
01:12  manizzle: very true
01:13  ktm5124: nah i think being passionate about programming is a form of escape
01:13  manizzle: but ive started listening to dubstep so my life has become pretty much akin to a street junkie
01:13  loltoad: ktm5124: im with you on that one
01:13  ktm5124: because it's so unlike real life ... it's an escape
01:13  manizzle: ktm5124, we all look for escapes
01:13  dash: ktm5124: "unlike real life"? :)
01:13  ktm5124: i mean
01:14  ktm5124: you're staring at a screen pushing buttons
01:14  manizzle: ktm5124, life has become that
01:14  ktm5124: there's no fun in that... unless you're doing something baller
01:14  ktm5124: that's not true
01:14  manizzle: if you havent seen the world around you recently
01:14  ktm5124: life is about women and booze and cash
01:14  manizzle: youd pull out ur pda or iphone
01:14  manizzle: more than ud fuck a bitch
01:15  manizzle: or get ur drank on
01:15  dash: okay
01:15  ktm5124: nah
01:15  dash: y'all take this outside.
01:15  manizzle: lawl dash
01:15  ktm5124: i mean, i do intellectual things for fun
01:15  ktm5124: i'd rather play chess or poker than program
01:15  arkanes_: there's lots of people who do all kinds of things for fun
01:15  arkanes_: funny old world and all that
01:15  manizzle: arkanes_, hah
01:16  ktm5124: i just think it's good to treat your way of making money as a job and not a passion
01:16  manizzle: whens the last time you sat down and did a jigsaw puzzle?
01:16  ktm5124: dash are you an admin here?
01:16  arkanes_: whatever works for you
01:16  manizzle: me, prolly like 5-6 years ago
01:16  manizzle: hah
01:16  manizzle: yeah k nuff dis shit
01:16  arkanes_: I'm not particularly motivated by women, booze, or cash
01:17  manizzle: get money, get paid.
01:17  ktm5124: well the third is the most motivating because it gets the other two
01:17  arkanes_: maybe we can quote fewer rap lyrics?
01:17  ktm5124: whereas, women lose money and booze loses women
01:17  GothAlice: Quick Q: is there a better way to do inherited attribute collection than this?  for base in reversed(type.mro(type(self))): indexable.extend(getattr(base, '_indexable', []))
01:17  manizzle: thank you GothAlice
01:17  loltoad: ktm5124: i need to step into that stage of my life too, howd u make the transition
01:17  ktm5124: arkanes_ the rappers are the true prophets
01:17  GothAlice: manizzle: Your… welcome?
01:17  GothAlice: manizzle: Did I do something?  XD
01:17  arkanes_: or maybe thats what passes for being insightful about your life these days
01:18  manizzle: asked a python question
01:18  ktm5124: loltoad: all you need is money and swagger
01:18  GothAlice: manizzle: Ah.  Your welcome.
01:18  ktm5124: loltoad: you seem like you're set for money now just get some swagger
01:18  ktm5124: loltoad: if you have a good build i'd suggest taking up boxing
01:18  arkanes_: GothAlice: "not doing that" seems like a reasonable idea
01:18  loltoad: ktm5124: haha, and if not?
01:19  ktm5124: loltoad: well get some nice clothes and dress well.. make a bunch of friends and build an
01:19  ktm5124: 'empire'
01:19  GothAlice: arkanes_: For some strange reason, if I have to choose between something that works vs. nothing, I'll choose something that works.
01:19  manizzle: i agree with dash. take this somewhere else.
01:19  ktm5124: manizzle: what do you prefer to talk about after a long day's work
01:19  dash: GothAlice: why do you want to do this?
01:19  arkanes_: GothAlice: well thats not really what you asked about
01:20  ktm5124: dash: are you a mod here?
01:20  ssbr_: ktm5124: /msg chanserv access #python list
01:20  manizzle: ktm5124, nothing, i had a midterm scheduled today, but canceled. so i dont have much to do.
01:20  ktm5124: dash: please allow me to introduce myself
01:20  ktm5124: dash: i'm a man of wealth and taste
01:20 --- ChanServ sets modes [#python +o dash]
01:20  ktm5124: hey i'm ktm
01:20  GothAlice: The code previous combines the _indexable static attribute (which is a list) from the current class instance all the way up the inheritance tree.  E.g. you define _indexable = ['foo'] in the root class, _indexable = ['bar'] in the subclass, and the above code returns ['foo', 'bar'].
01:21 <-- dash has kicked ktm5124 from #python (more python please)
01:21 --- dash sets modes [#python +b *!*ktm5124@*.sbcglobal.net]
01:21  spec_: hey how do you left shift in python without extending the integer type? i want a C style shift
01:21  arkanes_: GothAlice: we can read what it does
01:21 --- dash sets modes [#python -o dash]
01:21  arkanes_: spec_: what about pythons shift is not "C style"
01:21  dash: spec_: use & to mask after shifting
01:21  GothAlice: arkanes_: Then instead of saying don't do that, or even bothering to explain why it's bad, offer a better solution.
01:22  dash: GothAlice: Hmm =/
01:22  spec_: arkanes - in C a shift will just let the overflowed bits evaporate
01:22  spec_: dash ok
01:22  dash: GothAlice: are you writing an ORM?
01:22  arkanes_: GothAlice: but I've talked with you in the past and I know it's not really worth talking with you
01:22  spec_: also, what is the policy on signedness of right shift? does it always carry the MSB?
01:22  dash: spec_: right, no unsigned numbers in python
01:22  caaakeeey: anyone have experience with py2exe or similar?
01:22  KirkMcDonald: spec_: Yes, in effect.
01:22  arkanes_: GothAlice: I notice you didnt' answer dash
01:22  GothAlice: arkanes_: Then you can remain silent.  It is a choice you have, but constantly refuse to utilize.  "Don't do that" is not a valid response.
01:23  GothAlice: dash: I'm not writing an ORM.
01:23  spec_: dash - so how do you get unsigned behavior ?
01:23  dash: GothAlice: ok!
01:23  dash: GothAlice: that was the last place i saw this kind of thing :)
01:23  KirkMcDonald: spec_: Use math.
01:23  arkanes_: GothAlice: too bad you don't get to decide how I answer questions or not
01:23  ssbr_: spec_: what unsigned behavior do you want?
01:23  spec_: kirk what do you mean
01:23  caaakeeey: i cant get it to work, its always missing some module or another
01:23  spec_: ssbr - right shift without carry
01:23  dash: GothAlice: what _are_ you writing?
01:23  Minty: using regular expressions: i want to limit a positional argument's value to be one of the following values "archive", "author", "category", "tag". Is this correct? ?P<field>\w+archive|author|category|tag
01:23  spec_: or rather without sign extend.
01:23  bob2: caaakeeey: best to just ask
01:23  arkanes_: GothAlice: you're still spending more time talking to me instead of to the person who you haven't yet offended, though
01:23  Minty: or do i need to encase archive|author|category|tag within [] ?
01:23  GothAlice: arkanes_: Then I will utilize /ignore.  Good day.
01:23  KirkMcDonald: spec_: If you have a positive number there is no issue.
01:23  bob2: caaakeeey: pastebin your setup.py and the error
01:24  caaakeeey: k cheers
01:24  ssbr_: spec_: I'm not seeing the issue
01:24  KirkMcDonald: spec_: If you have a negative number, you may need to reexamine your algorithm.
01:24  ssbr_: I don't understand what you mean by sign extend, either. :(
01:24  caaakeeey: http://bpaste.net/show/11078/
01:24  GothAlice: dash: I'm attempting to gather a list of indexable attributes from a fairly complex inherited structure.  Technically I'm writing a search engine.  ;)
01:24  spec_: if i read a DWORD in from a file, how do i shift it right without copying over the MSB
01:24  KirkMcDonald: ssbr_: When you right-shift a negative integer in C, the result is still negative.
01:24  KirkMcDonald: ssbr_: That is what is meant.
01:25  bfrog: dword?
01:25  manizzle: bfrederi, a double word
01:25  bfrog: wtf is a dword?
01:25  spec_: bfrog just some bytes stored in an int.
01:25  ssbr_: why would shifting right copy over the most significant bit...?
01:25  sanduz2: dash, that was a good read. thanks
01:25  bfrog: sounds like a windowsy term
01:25  KirkMcDonald: In Windows-land, a DWORD is a 32-bit integer.
01:25  manizzle: bfrog, a word on a 32 bit machine is 32 bits, or 4 bytes.
01:25  manizzle: or
01:25  bfrog: then how is it a double word
01:25  manizzle: dword
01:25  ssbr_: if you shift right, you lose the most significant bit, yes?
01:25  KirkMcDonald: ssbr_: C has both a >> operator and a >>> operator.
01:26  bfrog: word machine is 32bits...
01:26  spec_: ssbr - because that keeps a negative int negative.
01:26  spec_: nah
01:26  bfrog: er word on a 32 bit machine is 32bits
01:26  spec_: Java has >> and >>>
01:26  KirkMcDonald: C doesn't have >>> ?
01:26 * KirkMcDonald checks.
01:26  ssbr_: spec_: I don't understand. It's positive.
01:26  papna-work: KirkMcDonald: No.
01:26  spec_: C does context specific things depending on signedness of integer
01:26  spec_: ssbr - what's positive?
01:26  ssbr_: spec_: what do negative ints have to do with anything?
01:26  ssbr_: read in your 32 bit int as a positive number
01:26  KirkMcDonald: spec_: Treat the 32-bit value as a positive integer.
01:26  spec_: hm
01:26  ssbr_: spec_: that's the only sane way to do unsigned stuff in python
01:26  KirkMcDonald: bfrog: Windows dates back to a time when a word was 16 bits.
01:27  bob2: caaakeeey: http://www.py2exe.org/index.cgi/Py2exeAndPyGTK <- dunno if that is still needed but might be worth a go
01:27  bfrog: why didn't they just do int16 int32 etc like posix
01:27  ssbr_: spec_: signed ints work exactly the same as unsigned ints when they're positive
01:27  bfrog: dword just seems retarded
01:27  KirkMcDonald: bfrog: Because it's Windows.
01:27  spec_: ssbr i realize that.
01:27  ssbr_: the only problem is if you're subtracting or something.
01:27  arkanes_: caaakeeey: http://www.py2exe.org/index.cgi/Py2exeAndPyGTK
01:27  bfrog: and then making it DWORD all caps is even more retarded
01:27  ssbr_: (or multiplying by a negative)
01:27  spec_: good golly
01:27  manizzle: bfrog, yes
01:27  KirkMcDonald: bfrog: Welcome to the exciting world of the Windows API.
01:27  manizzle: hah
01:27  arkanes_: caaakeeey: pygtk and gtk have very poor packaging/installation stories on windows
01:27  spec_: this is not really a debate about DWORD
01:28  ssbr_: spec_: ignore the "DWORD" crap
01:28  caaakeeey: i did actually google py2exe pygtk, would have thought that would come up, ill give it a read/go though thanks
01:28  bfrog: yes... exciting as in should die a terrible burning inferno death
01:29  arkanes_: if DWORD is the worst thing you can think of about the win32 api you probably need to just leave it alone
01:29  loltoad: KirkMcDonald: not windows, Intel started the DWORD crap with their assemblers
01:29  KirkMcDonald: loltoad: That's true.
01:29  spec_: it's not crap the truth is it doesn't matter.
01:29  ssbr_: spec_: that's exactly why the conversation about it is crap
01:30  ssbr_: so ignore that
01:30  spec_: ok since i don't know python obviously (but do know C), how would you read 4 bytes into an integer and shift it right?
01:30  bfrog: whats a dword on a powerpc machine?
01:30  KirkMcDonald: loltoad: But in this modern era, it nearly always refers to the Windows API.
01:30  ssbr_: it isn't relevant to you, and you're getting sidetracked
01:30  ssbr_: spec_: struct module
01:30  ssbr_: and then >>
01:30  KirkMcDonald: bfrog: It is not like "word" has a strictly defined meaning.
01:30  ssbr_: KirkMcDonald: isn't "some standard grouping of byte" strict? :(
01:30  bfrog: no, but typically its the register size
01:30  ssbr_: bytes*
01:30  GothAlice: http://en.wikipedia.org/wiki/Word_(computing)
01:31  KirkMcDonald: bfrog: While a modern PC will have a word-size of 64-bits, the term "word" rarely means that specific size.
01:31  KirkMcDonald: It all depends on context.
01:31  arkanes_: WORD in the win32 api has a specific meaning for exactly the same reason that, say, int16 does elsewhere
01:31  spec_: yes.
01:31  KirkMcDonald: And the context of the problem at hand was the Windows API, where it means 16 bits.
01:31  spec_: it's just a label.
01:32  GothAlice: #define Int16 DWORD
01:32  spec_: i was'nt being windows centric. i was just trying to use nomenclature that indicated some bits, rather than an integer.
01:32  KirkMcDonald: *Anyway(.
01:32  dash: spec_: what's the difference? :)
01:32  spec_: even though a DWORD is a uint32, a uint32 has some different meanings like you intend to do math on it, while a DWORD just contains bits.
01:32  KirkMcDonald: spec_: Just treat the 32-bit value as an unsigned value.
01:32  spec_: ok.
01:32  KirkMcDonald: spec_: Then there is no problem, yes?
01:32  spec_: i guess not.
01:32  bfrog: spec_: no, it doesn't
01:33  spec_: so I deserialize it as unsigned and python will extend that to the next larger int type?
01:33  arkanes_: python only has 1 int type
01:33  arkanes_: ..
01:33  arkanes_: maybe 2
01:33  ssbr_: python will make it a long if it has to. you don't need to worry about it.
01:33  spec_: now i'm confused.
01:33  orzel: hi. I'm using http://docs.python.org/library/hashlib.html . I'd like to store my digests as binary for efficiency (so i use .digest()). But i also, sometimes, need to display them as hexadecimal (as would do .hexdigest() ). I can't find an easy way to to the translation at time of printing. Any hint ? Of course i can't offord to store both representation..
01:33  caaakeeey: same error after following the instructions :/
01:33  arkanes_: but they're not different in signedness
01:33  dash: spec_: there aren't different kinds of ints in python.
01:33  GothAlice: (Not any more.)
01:33  spec_: then how does python extend a left shift?
01:34  KirkMcDonald: spec_: With zero.
01:34  ssbr_: arkanes_, dash: you people are way more confusing than you have to be
01:34  GothAlice: Technically Python still has 'long's.
01:34  spec_: it must have long longs.
01:34  arkanes_: spec_: no
01:34  ssbr_: this conversation should have ended with "int or long, don't worry about the difference"
01:35  ssbr_: spec_: Nope. python's longs extend as far as they need to. they can be as large as can fit in memory
01:35  GothAlice: Conversion between int and long is automatic during arithmetic.
01:35  arkanes_: spec_: python doesn't have a fixed size number representation
01:35  KirkMcDonald: spec_: Python's integers are bigints, that is, they have an arbitrary size.
01:35  spec_: isn't long only 4 bytes?
01:35  dash: spec_: there's machine-size integers and bignums
01:35  spec_: http://docs.python.org/library/struct.html
01:35  spec_: says long is 4
01:35  ssbr_: spec_: no. long doesn't have a fixed number of bytes.
01:35  arkanes_: thats in the context of struct formats
01:35  ssbr_: spec_: struct module longs are C longs. that's totally different
01:35  MostAwesomeDude: Just pretend Python has one integer type which is a bignum.
01:35  Wild_Cat: spec_: a C long is 4 bytes. A Python long has arbitrary-precision.
01:35  spec_: oic.
01:35  spec_: ok.
01:35  KirkMcDonald: ssbr_: Let's not get confused here between a C long and a Python long.
01:35  ssbr_: Python longs are not the same as C longs / struct longs
01:35  spec_: yah it's arbitrary length.
01:35  dash: o/` the short is no longer than the long o/`
01:35  ssbr_: KirkMcDonald: It was too late.
01:35  GothAlice: C is strict.  Python has puppy dog tails and unicorn horns.
01:35  GothAlice: ;P
01:35  KirkMcDonald: ssbr_: Also to the wrong name.
01:36  ssbr_: He already started citing the struct module docs. What would you suggest I say?
01:36  spec_: this is fine.
01:36  KirkMcDonald: ssbr_: I meant to direct my comment to him. Too many 's' names.
01:36  spec_: i got it.
01:36  ssbr_: "Oh those are python longs, just a different type that has nothing to do with C and stuff whatsoever"?
01:36  spec_: struct module is for deserializing, so they use C nomenclature.
01:36  spec_: everything gets converted to either machine int or to bigint.
01:36  ssbr_: spec_: stop stealing my s
01:37  arkanes_: the struct module is specifically for packing and unpacking stuff in a way that is consistent with C structs
01:37  arkanes_: hence the name
01:38  spec_: ya.
01:38  spec_: sure
01:38  spec_: ok thanks.
01:41  Minty: guys, can you give me some examples of big well known sites that use django
01:41  spec_: hmm i read that in 3.x int has been dropped?
01:41  KirkMcDonald: spec_: What were two types in 2.x became one type in 3.x.
01:41  ssbr_: Minty: The Onion.
01:41  ssbr_: I don't know any other sites.
01:42  spec_: ok.  but it still uses a machine word when there is no overflow?
01:42  ssbr_: Minty: actually, the Django website has a list. What on earth are you asking humans for? read it.
01:42  KirkMcDonald: spec_: I'm not certain, but I presume it does something clever.
01:42  Minty: i did look but cudn't find :P
01:42  dash: Minty: next ask us for a list of reasons to not use django
01:44  sanduz2: dash, id like to hear those reasons!
01:45  KirkMcDonald: Django works right up until you try to do something which is too interesting.
01:45  sanduz2: yea, i noticed that too. i stopped using it for that
01:45  sanduz2: im using flask now
01:46  edgarallanpoe: whats the proper way to remove elements from a list?  I just realized I get unexpected results if I manipulate the list as I iterate through it.
01:46  KirkMcDonald: edgarallanpoe: Generally you make a new list.
01:47  KirkMcDonald: edgarallanpoe: And you definitely don't insert or delete items from a list while iterating over it.
01:47  caaakeeey: anymore ideas guys about py2exe?
01:47  bikcmp: sanduz2: flask ftw :-)
01:47  KirkMcDonald: edgarallanpoe: But you might iterate over a copy while mutating the list.
01:47  edgarallanpoe: ok, so i can't even assign it as : mylist_copy = mylist, then iterate through mylist_copy though, because that assignment assigns it to be the same object
01:47  KirkMcDonald: edgarallanpoe: That does not make a copy.
01:47  KirkMcDonald: edgarallanpoe: That gives you another reference to the same list object.
01:48  spec_: use foo[:] right?
01:48  sanduz2: bikcmp, indeed!
01:48  KirkMcDonald: edgarallanpoe: You could: for x in list(mylist):
01:48  bob2: edgarallanpoe: usually you generate a new list instead, with the bits you don't want, excluded
01:48  edgarallanpoe: ah ok, thank you sir.
01:48  KirkMcDonald: And sometimes you can use a list comprehension to make the new list.
01:50  Minty: would the regular expression be ?P<field>archive|author|category|tag OR ?P<field>[archive|author|category|tag]
01:50  Minty: i didn't fully understand the re docs which is why i'm double checking btw
01:50  KirkMcDonald: Minty: Certainly not the latter.
01:50  KirkMcDonald: Square brackets define character sets.
01:51  bob2: Minty: what file format is this?
01:51  KirkMcDonald: Minty: And don't forget the parentheses.
01:52  caaakeeey: ok, whats the best way of distributing python programs?
01:52  KirkMcDonald: caaakeeey: Depends on the OS.
01:52  caaakeeey: apart from py2exe
01:52  caaakeeey: windows
01:52  KirkMcDonald: caaakeeey: There isn't really a good way of doing it on Windows. Because I am a crazy person, I would do it manually.
01:53  caaakeeey: um
01:53  caaakeeey: whats involved in that?
01:53  caaakeeey: sounds like it might be quicker to just rewrite it in another language lol
01:53  KirkMcDonald: caaakeeey: Take all of your dependencies, including the standard library. Put them in a directory.
01:54  KirkMcDonald: Put Python in there, too. Then do something clever to launch it.
01:54  ruxpin: caaakeeey: maybe cx_freeze
01:54  KirkMcDonald: A batch file would be adequate. Or you could write a wee C thingy which embeds Python, configures the environment, and launches the problem.
01:54  KirkMcDonald: s/problem/program/
01:55  KirkMcDonald: caaakeeey: Alternatively, use py2exe, which effectively just does all of that for you.
01:56  caaakeeey: mm
01:56  caaakeeey: i just cant get py2exe to work, checking out cx freeze
01:57  Jerub: maybe you should spend a few more minutes and get py2exe working
01:57  Jerub: because it really should only take 5 minutes if you have a python program that's constructed correctly.
01:57  Jerub: i.e. setup.py, mypackage/__init__.py, somescript.py
02:07  caaakeeey: yeah no idea how though
02:10  Taiyou`: what do you guys reccomend for just getting practise using intro-level python?
02:10  KirkMcDonald: Taiyou`: Write a Diplomacy adjudicator.
02:10  jhl: Taiyou`: Find a problem you need to solve and use Python to solve it.
02:10  jhl: Diplomacy!
02:11  Taiyou`: KirkMcDonald: lolwat
02:11  Taiyou`: oic, googling it now
02:14  jhl: Taiyou`: Write a program to interface to a serial device.
02:15  tomas_: can anyone tell me what are the python file header and footer? I'm trying to recover deleted python script using scalpel
02:16  ketralnis: I'm trying to make a decorator that causes a method of an instance to pass control to a superclass's method of the same name after completion. So like an "on_create" method that a subclass can override to be called when its DB object is created while allowing superclasses to also implicitly hook that event
02:17  ketralnis: So far I have <http://bpaste.net/show/11080/>, but that fails claiming that the super() proxy doesn't have the attribute (the getattr bit)
02:18  papna-work: ketralnis: F doesn't inherit O
02:18  papna-work: ketralnis: Also, this code doesn't work.
02:18  papna-work: ketralnis: Use super correctly, passing the class explicitly.
02:18  ketralnis: papna-work: you are a goddamned genius :)
02:18  ketralnis: papna-work: are you sure it doesn't work? It seems to work for me in that simple example but is there something I've fogotten?
02:19  papna-work: ketralnis: You need to pass the current class to super so that it can actually navigate the MRO.
02:19  ketralnis: Oh I see, because a "child" callee of that method will still receive F instead of O. So if there were more than one, it wouldn't work
02:20  ketralnis: That's really unfortunate because that's exactly the verbosity I'm trying to avoid in the first place :-/
02:20  papna-work: One man's verbosity is another man's explicitness and putting things in front of your fac.e
02:20  papna-work: And flexibility.
02:21 --- ChanServ sets modes [#python +o infobob]
02:21 --- infobob sets modes [#python -b *!*ktm5124@*.sbcglobal.net]
02:21  papna-work: This is an annoying problem hard to get right. The best solution is not to use inheritance. ;)
02:22  spec_: hey guys.. what does the @classmethod decorator actually do
02:22  spec_: i'm trying to read the docs but it's hard to follow.
02:22  papna-work: spec_: When you do TheClass.foo, it calls foo(TheClass, rest, of, the, arguments)
02:22  papna-work: spec_: It's mainly useful for alternate constructors.
02:23  spec_: hmmm
02:23  KirkMcDonald: spec_: It causes the class to be passed as the first argument to the method, instead of self.
02:24  spec_: oo
02:24  ketralnis: So you can TheClass().foo, and TheClass.foo, and they mean the same thing
02:24  KirkMcDonald: Also, subclasses.
02:24  spec_: ahh
02:25  spec_: so how is that different from static
02:25  papna-work: ketralnis: Yes, but you wouldn't actually do the former.
02:25  KirkMcDonald: spec_: Static receives nothing in particular as the first argument.
02:25  fr33mind: hi
02:25  papna-work: ketralnis: a staticmethod passes nothing special as the first argument. TheClass.bar(stuff) just calls bar(stuff).
02:25  KirkMcDonald: spec_: A staticmethod is little different from a module-level function.
02:25  fr33mind: anyone with knowledge in Cython?
02:25  papna-work: ketralnis: There is no reason to use staticmethod.
02:25  dash: fr33mind: so many people
02:25  KirkMcDonald: papna-work: You are replying to the wrong person.
02:25  spec_: ok.
02:26  ketralnis: papna-work: not directly like that, but you absolutely might call a class method on an instance. Also, you're replying to me instead of spec_
02:26  fr33mind: dash, Cython not CPython
02:26  KirkMcDonald: spec_: Classmethods get really interesting when subclasses come into play.
02:26 --- infobob sets modes [#python -o infobob]
02:26  ketralnis: fr33mind: right. So many people.
02:26  spec_: so classmethods are virtual right?
02:26  papna-work: fr33mind: *He knows*
02:26  fr33mind: oh ok, good
02:26  papna-work: spec_: No.
02:26  spec_: so a classmethod defined in a base slice may still get a derived type passed as its arg?
02:26  spec_: o
02:26  papna-work: spec_: For one, "virtual" isn't a technical term in Python. For two, no.
02:26  ketralnis: spec_: I'm not sure "virtual" applies to Python at all
02:26  spec_: hm
02:26  papna-work: spec_: Sure.
02:26  KirkMcDonald: Er, what?
02:26  KirkMcDonald: Of course they are virtual.
02:27  spec_: ya
02:27  spec_: i assumed they were all virtual.
02:27  KirkMcDonald: Essentially *everything* is virtual in Python.
02:27  fr33mind: i was trying to wrap a C++ library using Cython but can i import other C++ libraries without wrapping them too?
--- Log closed Tue Nov 16 02:32:51 2010
--- Log opened Tue Nov 16 02:33:10 2010
02:33 --- Users 782 nicks [0 ops, 0 halfops, 0 voices, 782 normal]
02:33  spec_: the @Classmethod is just a surrogate __init__?
02:34  ketralnis: That's one way to use it (although when it does construction it will still go through __init__ so that's a bit of a confusing way to put it)
02:34  dash: spec_: nope
02:34  papna-work: spec_: No.
02:34  papna-work: spec_: Here's a stupid, unrealistic, bad, contrived example http://codepad.org/EQen9a7y
02:34  spec_: i'm getting quite confused.
02:34 --- Channel #python was synced in 91 seconds
02:35  KirkMcDonald: spec_: The subclass inherits the base class's classmethods.
02:35  GothAlice: I need to do some statistical analysis of the number of times the word confused appears in this channel.
02:35  KirkMcDonald: spec_: The classmethod receives 'cls' as the first argument.
02:35  spec_: ya
02:35  KirkMcDonald: spec_: It returns an instance of cls.
02:35  KirkMcDonald: spec_: Thus, the subclass doesn't need to do anything.
02:35  spec_: oic.
02:35  bfrog: how would I do plugins like.... myproject/plugins/mypluginmodule
02:35  spec_: but the subclass has additional methods (like __iter__) defined
02:35  KirkMcDonald: spec_: Sure.
02:35  spec_: which makes it different from the base
02:35  spec_: ok.
02:35  bfrog: where I want some function like get_plugin('mypluginmodule')
02:35  KirkMcDonald: spec_: And its own __init__, perhaps.
02:35  bfrog: gets the module
02:35  papna-work: bfrog: This approach works http://twistedmatrix.com/documents/10.1.0/core/howto/plugin.html
02:36  spec_: but like
02:36  KirkMcDonald: spec_: But it may not need to do anything with respect to the classmethods.
02:36  spec_: why not just call Chainer by it's ctor instead?
02:36  papna-work: bfrog: You don't want to get a module. That's not very flexible.
02:36  spec_: what does from_iterable add
02:36  papna-work: spec_: Because from_iterable does something different. It's an alternate constructor with a different API.
02:36  bfrog: ok, well I want something that has certain attributes
02:37  spec_: hm
02:37  papna-work: bfrog: One more flexible approach is to use interfaces to define which attributes.
02:37  spec_: from_iterable calls TriplingChainer's ctor?  cls(*its) ? but can't that be called directly?
02:38  spec_: i mean TriplingChainer(x) instead of TriplingChainer.from_iterable(x)
02:38  papna-work: spec_: No.
02:38  papna-work: You could call TriplingChainer(*x) and it would be the same.
02:38  bfrog: eh, interfaces
02:38  spec_: o
02:38  bfrog: sounds java-y
02:38  papna-work: bfrog: Interfaces are something Java got right(ish).
02:38  spec_: i see.
02:38  spec_: i think.
02:39  bfrog: except you get idiots doing IMyInterface where its entirely empty
02:39  spec_: *x in a def means to collect all the argls into a tuple, and *x in an invocation means to expand them?
02:39  spec_: so
02:39  papna-work: spec_: Right.
02:39  spec_: the default ctor takes individual arguments, and the from_iterable takes the list
02:39  spec_: ok
02:39  bfrog: it gets overused, why not just let python do its thing and raise TypeError or whatever
02:39  bfrog: lazily
02:40  bfrog: I mean, unless catastrophic things are going to happen
02:40  papna-work: bfrog: You don't seem to be well-educated in zope.interface, which does not in any way interfere with duck typing.
02:40  spec_: anyways thanks guys.
02:40  spec_: g2g
02:40  papna-work: bfrog: zope.interface isn't equivalent to Java interfaces.
02:40  ssbr_: *shrug*.
02:41  papna-work: spec_: Happy Pythoning
02:41  ssbr_: Zope interfaces are nice as documentation. That's what I mostly use them for.
02:41  nosklo: adaptation is useful sometimes
02:41  ssbr_: There is adaptation, but that's not very useful for anything I've done. You can also safely type-check against interfaces, but I think that's evil.
02:41  papna-work: Adaptation is suspect.
02:41  ssbr_: (nonetheless things like zope plugins do it)
02:41  ssbr_: But anyway, as documentation, zope.interface is great.
02:42  bfrog: type checking in python is a failure as so many others have pointed out, it prevents simply passing in something that looks like something else (duck typing)
02:42  papna-work: z.i can be used as a really nice plugin strategy.
02:42  bfrog: so I mean, in general, what are interfaces useful for, why not simply document it as such
02:42  papna-work: bfrog: Type checking isn't required or encouraged with z.i
02:42  ssbr_: bfrog: when I said "type checking", I really meant "interface checking".
02:42  papna-work: bfrog: There are entire websites dedicated to this topic.
02:42  ssbr_: you can do it safely without sacrificing code generality.
02:43  ssbr_: I don't like it because it still feels wrong most of the time. plugin systems with zope interfaces feel wrong, too.
02:43  papna-work: ssbr_: Why's that?
02:43  ssbr_: papna-work: because a decorator makes more sense
02:43  bfrog: I just want getattr(mymodules, 'someplugin') but that doesn't seem to work
02:43  papna-work: bfrog: That's because you haven't imported the thing.
02:44  bfrog: can I do import * in mymodules __init__.py and have it work?
02:44  ssbr_: @foo_system.register class ... instead of  class ...: implements(IFooSystem) # or whatever
02:44  bfrog: I don't need it to change once things are running
02:44  papna-work: bfrog: Not automagically.
02:45  papna-work: ssbr_: So the decorator is just @somemodule.register?
02:45  ssbr_: papna-work: something like that.
02:46  papna-work: ssbr_: But I have two kinds of plugins, Foo plugins and Bar plugins.
02:46  ssbr_: papna-work: so then you have plugins.foo.register and plugins.bar.register
02:46  ssbr_: or else plugins.register_foo and plugins.register_bar
02:46  papna-work: ssbr_: But I'm in the middle of making my fourth bar and I realize this bar needs plugins of its ow.
02:46  papna-work: n
02:47  ssbr_: papna-work: define a top level register function, then.
02:47  ssbr_: although truthfully, I am dubious of the idea of plugins getting their own plugins using the same system.
02:48  papna-work: It works nicely for me.
02:48  ssbr_: If plugins want their own plugins, maybe they should use their own system. Less chance of conflict.
02:48  papna-work: I don't see the danger for conflict using Twisted's plugin system.
02:48  ssbr_: papna-work: it breaks if you want to change the plugin architecture too much
02:48  ssbr_: papna-work: for example, what if I want to spread my plugins across processes?
02:48  papna-work: Changing the plugin architecture is nearly unforgivable.
02:49  ssbr_: papna-work: No, it isn't.
02:49  ssbr_: I'm planning for it, because I know I will get it wrong.
02:49  bfrog: anyways, so whats the way for doing this, sys.path manipulation?
02:49  ssbr_: bfrog: doing what? importing plugin modules?
02:49  bfrog: yes
02:49  ssbr_: bfrog: nah, just put all the plugin modules in a package meant specially for them
02:49  bfrog: I just want something like getattr(plugin_root, 'plugin_name')
02:49  papna-work: bfrog: No, __import__ and glob.glob and so on.
02:50  ssbr_: you can write a plugin loader object that does __import__ magic
02:50  magcius: what about twisted.python.modules?
02:50  ssbr_: (or you can just defer it to a function)
02:50  magcius: which is holy magic
02:51  bfrog: I see
02:51  bfrog: so I need to reimplement mypluginroot's __import__ to do a glob
02:51  bfrog: is that right?
02:51  ssbr_: nooo
02:52  papna-work: bfrog: God no.
02:52  ssbr_: you need to use __import__ to load a module from your plugin directory.
02:52  ssbr_: and then getattr() to retrieve it.
02:52  papna-work: bfrog: Write a function that loops over the directly finding Python modules and using __import__ to import them.
02:53  Azul-P: How frequently do you guys use constants in Python?
02:53  bfrog: oh I see, because __import__ can take a name
02:53  KirkMcDonald: Azul-P: 4
02:53  bfrog: ok, thanks
02:53  Azul-P: >_>
02:54  KirkMcDonald: Azul-P: I'm unclear as to what kind of answer you were expecting.
02:54  Azul-P: Sorry. But what I meant was is it very important to use constants instead of variables when you simply don't want that string or type to change?
02:54  papna-work: Azul-P: Do you mean literals as opposed to assigning them to names?
02:55  Azul-P: For example I have J = "Hello" instead of j = "Hello".
02:55  KirkMcDonald: There is little difference between these, as far as Python is concerned.
02:55  Azul-P: Is there really a huge difference between the two since strings are immutable anyways?
02:56  Azul-P: Oh alright. Thanks KirkMcDonald!
02:56  ssbr_: Azul-P: as a programmer, "FOO_BAR" tells me the variable is not to be mutated
02:56  KirkMcDonald: But as a matter of convention, names which should not be changed are assigned to UPPER_CASE_NAMES.
02:56  Azul-P: Oh okay.
02:56  ssbr_: this is different from saying that the value shouldn't be mutated
02:56  ssbr_: but you probably shouldn't do that either.
02:56  ssbr_: s/value/object
02:57  Azul-P: ssbr_: What's s/value/object?
02:57  nosklo: Azul-P: the string is not mutable, but the variable name can be pointed to some other object.
02:57  ssbr_: I meant s/value/object/ . i.e. replace "value" with "object"
02:57  ssbr_: as in, I meant to say "object", not "value"
02:57  Azul-P: ssbr_: Oh alright. Thanks.
02:59  Azul-P: What's the difference between value and object in terms of Python?
02:59  ssbr_: Azul-P: vagueness
02:59  Meths: Has anyone come across permissions issues using mimetypes.init() as an ordinary user on windows xp?
02:59  Azul-P: Again, I apologize for this pathetic newb questions. ;-;
02:59  ssbr_: "value" can mean lots of things, "object" can only mean very few things
02:59  Azul-P: Oh okay.
02:59  Azul-P: Object can only be int, float and str?
03:00  ssbr_: object means any object.
03:00  ssbr_: strings, lists, integers, floats, files, modules, functions, ...
03:00  papna-work: "object" is a technical term in Python. "value" is a less technical term.
03:00  Azul-P: Okay.
03:01  Azul-P: nosklo: What do you mean by the variable can be pointed to some other object? A variable can have two different objects in it?
03:01  Azul-P: nosklo: Or for example, augmented assignments?
03:02  Taiyou`: pointers?
03:02  Azul-P: Ah I haven't gone that far yet.
03:02  dash: Taiyou`: nope
03:02  dash: no such thing in python
03:02  Azul-P: Whew.
03:02  Azul-P: I hated pointers in C.
03:02  nosklo: Azul-P: I mean that if you set `J = "Hello"`, "Hello" is immutable but J isn't
03:03  Taiyou`: oh, ofc.
03:03  bikcmp: Azul-P: i'm learning C, and I Hate pointers too :P
03:03  siddhion: hello. any suggestions for database modeling software for Linux?
03:03  nosklo: Azul-P: you can make J point to "Goodbye" later by doing `J = "Goodbye"`.
03:03  dash: siddhion: i prefer play-doh for modelling
03:03  dash: siddhion: for databases, i like sqlite or postgres.
03:03  siddhion: dash, or SQL alchemy
03:04  Azul-P: nosklo: I see. But I thought all caps variable were constants that could not be changed? Gah sorry this book I'm working through is really confusing me.
03:04  migrantgeek: Anyone in here hosting on EC2 in Ireland?
03:04  nosklo: Azul-P: it's a convention
03:04  nosklo: Azul-P: programmers agree to not change all-caps variables and to consider them constants. Python does nothing to enforce it.
03:04  Azul-P: nosklo: So its really only for the convenience of other programmers?
03:04  Azul-P: nosklo: Thank you very much for clarifying that.
03:04  nosklo: Azul-P: exactly, like a implicit documentation
03:05  Taiyou`: I didn't know that, either. Thanks
03:06  Azul-P: nosklo: But speaking of pointing variables to different objects... I can have as many different objects I want then in the same variable? Like "j= hello" "j=world" "j=goodbye" all in the same py?
03:06  Azul-P: bikcmp: One of the biggest roadblocks of my life.
03:07  nosklo: Azul-P: yeah. the same "name" (`j` in your example) can point to different objects on the course of your script.
03:07  Azul-P: nosklo: Thank you!
03:07  Azul-P: Another question. What are tuples used for in Python? If there are lists, why do we need tuples?
03:07  dash: Azul-P: just one at a time, though.
03:08  Azul-P: dash: Hm, what do you mean by that?
03:08  nosklo: Azul-P: `j` can't point to two objects at the same time
03:08  nosklo: Azul-P: when you point it to another object, it stops pointing to the previous one
03:09  nosklo: Azul-P: About tuples, they are immutable sequence collections - as opposed to lists which are mutable.
03:09  Azul-P: nosklo: So everytime I make a new j in my script, the most recent one is the one that is considered?
03:09  Azul-P: nosklo: Oh okay. So they're used if you want something permanent then.
03:09  nosklo: Azul-P: you don't make a new j. You make a new object, and make j point to it.
03:09  Azul-P: nosklo: Oh yeah.
03:13  coldpizza72i: whats the run time effency of binary tree sort
03:13  coldpizza72i: different places are like telling me different things
03:14  papna-work: coldpizza72i: O(n log n) if you did it right.
03:15  coldpizza72i: is that the best and worst case
03:16  coldpizza72i: papna-work: *
03:17  dash: coldpizza72i: who cares?
03:17  coldpizza72i: dash: why are you hating
03:17  dash: coldpizza72i: timsort is faster
03:17  dash: coldpizza72i: because I love software that's written well and works right
03:21  Azul-P: Thanks for the help tonight everyone!
03:25  ssbr_: woo bucket sort.
03:26  darkkrai: hey guys
03:26  darkkrai: anyone here familiar with curses?
03:26  bikcmp: darkkrai: did you get that tutorial fixed by the way?
03:26  dash: debugging has made me utter a few
03:27  darkkrai: bikcmp, yep
03:27  bikcmp: ah good
03:28  bikcmp: i'm not good with curses, so :P
03:28  darkkrai: hnn
03:28  darkkrai: PM?
03:28  bikcmp: sure
03:28  darkkrai: kk
03:31  Buttons840: can i not str.join() a list of unicode strings?
03:32  papna-work: Buttons840: Of course not. unicode.join them.
03:37  amitz: don't know how to google, is there any equivalent java style condition ? if true : if fals in python?
03:37  Buttons840: http://codepad.org/LjTyEJVz   this fails when writing on line 23
03:38  nosklo: amitz: "ternary" is the term you want to google
03:39  nosklo: Buttons840: how does it fail? Can you pastebin the full error traceback?
03:39  nosklo: Buttons840: seems like you're writing unicode data to a file. You have to encode the data first.
03:40  amitz: thanks
03:40  nosklo: Buttons840: either myunicode.encode('some encodiing') or use codecs.open() to open the file in first place, so you can write unicode to the file object and it will encode for you.
03:42  Buttons840: http://bpaste.net/show/11086/   here's code and output/traceback
03:42  nosklo: Buttons840: yeah, looks like what I just said. Either encode the data before writing it to the file, or use codecs.open so it gets encoded for you on write.
03:43  nosklo: Buttons840: because if you don't, python tries to encode it automatically for you using the "ascii" codec, and that fails.
03:43  Buttons840: so i would unicode.encode('utf-8') for example?
03:43  spvensko: hi, if i have a list of strings, say ['b', 'a', 'c'], what command would i use to figure out the list index of 'a'?
03:44  Buttons840: what's the most popular codec?
03:44  nosklo: Buttons840: yeah, myunicode.encode('utf-8') would return a bytestring suitable to use on myfile.write()
03:44  papna-work: spvensko: index method
03:44  nosklo: Buttons840: utf-8 is pretty popular since it's concise and allows usage of all unicode codepoints.
03:44  spvensko: doh, ty papna-work!
03:47  \3TATUK: is there a way to del something via a variable?
03:47  \3TATUK: y=3
03:47  \3TATUK: var='y'
03:47  \3TATUK: del var # but have y deleted
03:47  \3TATUK: probably with the code module?
03:47  papna-work: \3TATUK: God no.
03:48  bob2: \3TATUK: what problem are you trying to solve?
03:48  \3TATUK: handling internal game engine dependencies..
03:49  \3TATUK: doing trickery with __builtin__ so i'm wondering if there's a way to do what i'm asking heh
03:50  papna-work: \3TATUK: 1) That's black magick, and you should steer clear, 2) del y and del foo.y are COMPLETELY different things. For the later there is delattr. Don't use it.
03:51  \3TATUK: i'm trying to delete y but without referencing it directly
03:51  nosklo: \3TATUK: why?
03:51  \3TATUK: only via proxy var
03:51  nosklo: \3TATUK: just leave it ther
03:51  papna-work: \3TATUK: Start Pythoning right.
03:51  nosklo: \3TATUK: no need to delete anything
03:52  \3TATUK: figured it out anyway
03:52  \3TATUK: code.InteractiveConsole( locals() ).runcode( 'del ' + var )
03:54  nosklo: ugh
03:57  \3TATUK: RuntimeError: dictionary changed size during iteration
03:58  \3TATUK: now that's one funky error :)
03:58  dash: \3TATUK: not really
03:58  dash: it's pretty easy to avoid.
03:59  \3TATUK: just never seen it until now is all
03:59  \3TATUK: it was from for x in globals():print x
03:59  bob2: really?
03:59  \3TATUK: really
03:59  papna-work: haha, that's awesome.
04:00 * KirkMcDonald files under "stupid Python tricks."
04:00  papna-work: \3TATUK: for x in globals().keys():
04:00  dash: \3TATUK: the moral of the story is "don't use globals() in a real program"
04:00  \3TATUK: heh
04:00  papna-work: What dash said.
04:01  \3TATUK: i don't, actually
04:01  \3TATUK: was just test code
04:01  bob2: is it due to x being rebound on each iteration?
04:01  papna-work: bob2: It's due to x being created the first iteration.
04:01  bob2: oh wow
04:02  nosklo: if you do it again, it works
04:02  nosklo: because now x is already there
04:20  Diverdude: If i have a figure window created like this myPILimage.show()   how do i close it again from python?
04:21  nosklo: Diverdude: you don't. use your mouse.
04:21  nosklo: Diverdude: myPILimage.show() is meant to be a debug thing, not GUI for your program. In fact it launches external software to show the pic
04:22  nosklo: Diverdude: i.e., on windows it launches Microsoft Paint!!
04:22  Diverdude: nosklo, yeah ok...i just have a list of pictures i wanted to see without flooding the entire screen
04:22  nosklo: Diverdude: write them all to a temp folder and launch your favorite image viewer
04:23  Diverdude: nosklo, yeah true that could work
04:23  Diverdude: thx
04:33  jmkacz: When using M2Crypto, does anyone know what M2Crypto.EVP.PKey.signature's output format is?
04:33  jmkacz: The documentation available for M2Crypto is no help at all.
04:33  jmkacz: I mean, sign_final, not signature.
04:40 --- NickASloan is now known as therealbenramsey
04:40 --- therealbenramsey is now known as NickASloan
04:40 --- NickASloan is now known as therealbenramsey
04:41 --- therealbenramsey is now known as NickASloan
04:41  amitz: I have some codes with a class and its subclasses. But the existence of each subclasses is dynamic, subject to changes before the start of the app. Any concept I can use to access the subclasses neatly? I'm currently using exec(subclass+".anoverridingfunction()")
04:42  amitz: concept to google
04:43  bob2: no, that's terrible
04:43  bob2: the short answer is getattr
04:43  _habnabit: amitz, make a list of subclasses, iterate over that.
04:43  bob2: but the long answer is probably a dispatch dict
04:43  _habnabit: bob2, what no
04:44  tomas_: does idle editor sets magic number for python files? if so what is it?
04:44  ssbr_: tomas_: the magic number is #!
04:44  ssbr_: have fun
04:44  bob2: python source files have shebangs
04:44  tomas_: even if my first line says: import blabla?
04:44  amitz: oh yes, that's what I did. I can get a list of subclasses on the fly and iterarate over it to run all subclassess function.
04:45  amitz: let me google getattr and dispatch dict
04:48 --- Natch is now known as Natch|
04:48 * darkkrai lols
04:48  _habnabit: darkkrai, none of that.
04:51  glennr: Is there a generic (or standard (ish)) way to package an image into code. Like PyQt's resource compiler does?
04:51  bob2: _habnabit: i don't really get what amitz is after then
04:51  dash: glennr: an image file
04:52  amitz: bob2: oh, nicer on result = getattr(obj, "method")(args) . I basically need to run a certain method belonging to all subclasses available.
04:53  Diverdude: are modules which i have imported in my mainscript not accesible inside my modules?
04:53  bob2: Diverdude: each module should import the things it needs
04:54  bob2: (your main script should be 3 lines long - just enough to import a function from your package and then run it)
04:55  glennr: dash: do you mean a PIL.Image ?
04:55  dash: no
04:55  dash: i mean foo.png
04:55  johnjohn101: is it safe to use python 3 yet?
04:55  dash: johnjohn101: It won't burn down your house.
04:55  bob2: johnjohn101: as long as you're ok with poorer library, doc and irc support ;p
04:55  Jerub: johnjohn101: you don't even have to lock up your pets!
04:55  dash: johnjohn101: but python 2 is still here. ;0
04:55  dash: :)
04:55  johnjohn101: 2.7 will be support for a long time?
04:56  Jerub: python2.6 is here to stay until rhel7
04:56  dash: johnjohn101: Sure. 2.4 too. :)
04:56  Jerub: dash: no, python2.4 will wither and die in the next 6 months
04:56  glennr: dash: oh, was that a question?
04:56  dash: oh, good point
04:56  dash: glennr: hmm?
04:56  bob2: no way are rhel5 users upgrading en masse that quickly
04:57  Jerub: bob2: do you see this stabbing knife? do you see how sharp it is?
04:57  bob2: hahaha
04:57  Jerub: do you see that crowd of frightened sysadmins? do you see how they quiver when a wave this knife like this?
04:57  johnjohn101: i think I'll stick to python 2.7 for now
04:57  dash: johnjohn101: probably what i'm going to do soon.
04:58  glennr: trying again... PyQt/Qt has a resource compiler that will take an image and turn it into a byte array. Is there a way to do a similar thing that doesn't involve PyQt?
04:58  dash: glennr: anything's possible, but why not just have an actual image file?
04:59  glennr: so the use can't break it by removing the image file
04:59  glennr: *user
05:00  dash: glennr: The user can break it by changing stuff anyway
05:00  glennr: that's a different topic
05:00  nosklo: glennr: so the problem isn't really about breaking stuff?
05:01  glennr: nosklo: its more about packaging and keeping the packaged and dev builds sync'd
05:02  nosklo: glennr: you're going to have a installation program anyway right? what's your target platform?
05:02  glennr: nosklo:... and that is how Qt does it
05:02  Diverdude: bob2, where in my module should i put my imports so that the functions in the module may use them?
05:02  nosklo: Diverdude: all imports should be at module start
05:03  Diverdude: nosklo, hmm i did that,but still it tells me that: NameError: global name 'scipy' is not defined
05:04  nosklo: Diverdude: pastebin your code and the error traceback
05:06  acts_as_david: what's the cleanest way to install python 2.7 and 3.1 and pip on os x?
05:06  acts_as_david: i'm coming from ruby and used to managing my vm using ruby version manager
05:06  bob2: macports is pretty easy
05:06  saxamo: probably just the binaries from python.org?
05:07  saxamo: ohh
05:07  acts_as_david: saxamo: but what about pip
05:07  acts_as_david: how do i get it to use the right version eahc time
05:07  Jerub: ugh.
05:07  Jerub: macports is hell
05:07  acts_as_david: yes agreed
05:07  Diverdude: nosklo, here is my code: http://bpaste.net/show/11089/
05:07  acts_as_david: i use homebrew when possible
05:07  bob2: pip-2.x
05:07  bob2: or virtualenv!
05:07  acts_as_david: ah
05:07  acts_as_david: okay so what exactly does virtualenv do for me
05:07  saxamo: acts_as_david: the default is probably python 2.x so use python as path when you want to use 2.x or python3 as path when you want to use 3.x...?
05:07  acts_as_david: i know it segregates packages
05:08  acts_as_david: saxamo: okay
05:08  _jam: anyone familiar with the csv 'specs'? i've got a field in a tab delimited file that is: "B'LASTER"\n"BRAND
05:08  _jam: is that legal?
05:08  acts_as_david: i guess my main question is about how to use pip w/ multiple versions
05:08  _jam: several programs are choking on it, and I'm not sure if that is a validly formed field or not
05:09  _jam: note that that is all literal: a literal \n (e.g. in python '\\n' and the quotes are actually there as is)
05:09  Diverdude: nosklo, problem solved
05:09  acts_as_david: also i'm confused about exactly where virtualenv fits into the situation
05:09  acts_as_david: does it just manage packages, or does it also manage python versions
05:10  Diverdude: nosklo, i have to get used to the fact that i have to reload a module everytime i made a change
05:13  amitz: bob2: in essence, the app will run a function of all python script in a folder. it seems in getattr, I must know the object name before hand (or using macro, but python doesn't seem to have it). Anything I'm missing, meaning I must use the old exec()?
05:16  McMozart: What is the fastest (to learn) 3d graphic API for python
05:16  McMozart: ?
05:16  Jerub: McMozart: pyglet
05:17  amitz: and I guess a compromise is to instantiate all those scripts before hand, get a reference to its class, then do the getattr() thingie.
05:17  amitz: those classes in all scripts.
05:19 --- jenkinbr is now known as squishy
05:20  _habnabit: amitz, I'm really confused as to what you think exec does that getattr doesn't do.
05:22  cfedde: python 2.7 introduces a sysconfig module.  Unfortunately our code also includes a sysconfig.py module.  Is there a way to disambiguate these?
05:23  _habnabit: cfedde, where's the ambiguity?
05:23  tomas_: is there a magic number for the end of the file?
05:23  cfedde: _habnabit: probably in my naivete.
05:24  KirkMcDonald: tomas_: Of what file?
05:24  bob2: cfedde: from yourpackage import sysconfig
05:25  bob2: (your code is in a package right:)
05:25  cfedde: :-)
05:25  cfedde: bob2: I suspect it will be soon.
05:26  amitz: _habnabit: say, I need to run function doMe() in all scripts in folder /tmp. First I construct the list of all scripts in /tmp. Using this list, I can do exec(ascriptname+"().doMe()") . If I want to use getattr instead, I can't do getattrib(ascriptname, "doMe()") since ascriptname will be treated as a string, not a class whose name is contained in ascriptname.
05:26  amitz: or is there a workaround?
05:26  _habnabit: cfedde, if you're doing just 'import sysconfig' to import between modules in your project, you're doing it wrong.
05:26  bob2: cfedde: http://jcalderone.livejournal.com/39794.html is a pretty good layout
05:26  bob2: if you're already changing things
05:26  tomas_: KirkMcDonald: python file
05:26  dash: amitz: why scripts and not modules?
05:26  KirkMcDonald: tomas_: It's a text file.
05:26  tomas_: so I guess that would be ascii file
05:27  tomas_: yeah text file
05:27  _habnabit: cfedde, everything should be in a package, and all intra-package imports should be absolute imports.
05:27  KirkMcDonald: tomas_: Typically ASCII, yes.
05:27  bob2: or the 2.7 relative imports
05:27  cfedde: _habnabit: It seems that "I'm doing it wrong".
05:27  papna: Fairly often not.
05:27  bob2: which still seem a bit pointless to me
05:27  tomas_: is there a code at the end of ascii file?
05:27  tomas_: saying end?
05:27  KirkMcDonald: tomas_: No. Why do you ask?
05:27  cfedde: _habnabit: but now I know what needs to be fixed.
05:27  cfedde: thanks
05:27  JamesN: tomas_: nope, probably a newline with nothing after it, but that's not required.
05:27  tomas_: KirkMcDonald: I did something stupid and my partition is gone
05:27  KirkMcDonald: What fun.
05:28  tomas_: I'm trying to recover python scripts
05:28  _habnabit: tomas_, there's software for that.
05:28  tomas_: using scalpel
05:28  amitz: dash: my understanding is a bit hazy but module is a class in a script right? Well, basically each script (file) will contains exactly one class (module).
05:28  dash: amitz: nope
05:28  tomas_: _habnabit: what sofware?
05:28  dash: amitz: the script is what you run from the command line
05:28  KirkMcDonald: amitz: A module is an object. Importing a file gives you a module.
05:28  dash: amitz: your program probably has just one
05:28  JamesN: tomas_: you could search for something like '#!/usr/bin/env python' at the start of the files, but again, that's not always there (and not always the same)
05:29  tomas_: JamesN: I'm searching for import
05:29  tomas_: I get some output...
05:29  tomas_: a bit too much though
05:29  JamesN: understandable
05:29  tomas_: and files I get are binary in some parts
05:29  amitz: dash: KirkMcDonald: ah yeah, I'm currently using it them as module. There are imports I didn't write in the example above. But the problem is still exist.
05:30  JamesN: what filesystem was the files on? (EXTx, NTFS, FAT32, etc)?
05:30  zoidberg-: boo
05:30  tomas_: JamesN: ext4
05:31  JamesN: not sure about any efficient tools for ext4, could probably help out for ext2/3 (but IIRC, ext4 is too different)
05:31  tomas_: I'm using scalpel
05:31  tomas_: py with header "\x69\x6d\x70\x6f\x72\x74" and footer "" --> 751819 files
05:32  tomas_: the hex is just "import"
05:32  amitz: but let me ask back, suppose you have an app in plugin that can accept arbitrary plugin files simply by dropping the file in a folder. How do you load the plugin?
05:32  amitz: s/in plugin//
05:32  tomas_: I was thinking about the footer if I can add something there to be sure that it detects the end of the file correctly
05:33  JamesN: there's no determinate end of file for ASCII
05:33  JamesN: could end with text, could end with a newline
05:33  tomas_: ok
05:33  amitz: that is basically what I'm doing, making an app that can accept arbitrary plugin simply by having the plugin dropped in a folder.
05:33  tomas_: I thought there might be something hidden (:
05:33  bob2: amitz: http://launchpad.net/modules
05:35  dash: amitz: it's a surprisingly hard problem.
05:36  Diverdude: How do i concatenate a string and an int in python, eg. "Hello Python " and 2 ?
05:36  _habnabit: Diverdude, docs.python.org/tut
05:36  bob2: Diverdude: foo = "Hello Python %s" % someint
05:36  JamesN: "Hello Python " + str(2)
05:36  dash: Diverdude: what would that give you?
05:37  amitz: bob2: dash: woah, hard stuff indeed in a glance. -_-
05:53 --- SofiaNoelle is now known as Sofia
05:54  ideasman_42: Hi, is there any way to run python code in an external process? - so you can access attributes from one process within another?
05:54  ideasman_42: basically I want to be able to manipylate local data in an external process without using pickle for eg
05:57  dash: ideasman_42: sure. just have a protocol for doing so
05:57  dash: amp is very nice, for example
05:57  dash: http://amp-protocol.org/
05:59  Jerub: amp-protocol.net
06:01  ideasman_42: dash, we are having a nice flame war on our mailing list because we embed python therefor all extensions must be GPL
06:02  dash: ideasman_42: yes, that is terrible
06:02  ideasman_42: Since we are GPL.
06:02  dash: yes. i'm sorry.
06:02  dash: Jerub: thanks.
06:02  ideasman_42: well, I didnt choose GPL, just how it is
06:02  ideasman_42: so looking at some python trick to workaround this
06:02  dash: I know.
06:04  ideasman_42: it would be really nifty if the objects could appier to be local
06:04  ideasman_42: so foo.var == 1
06:04  ideasman_42: could access .var from a non-local process
06:04  nosklo: ideasman_42: it's gpl-compatible
06:04  ideasman_42: does AMP do this?
06:04  dash: ideasman_42: it's basically a fake idea
06:05  dash: ideasman_42: my advice would be to move _all_ of your python stuff out-of-process
06:05  dash: amp is a very simple protocol and could be implemented in C++ in very few lines of code.
06:05  ideasman_42: ok, moving py out of process isnt a small project though. and Id need to get approval from the boss :)
06:06  dash: sure
06:06  ideasman_42: but Id like to try on a small scale at some point
06:06  dash: this isn't a small project either way.
06:06  ideasman_42: well, easiest thing is to keep it in the process
06:06  ideasman_42: always have data acces
06:08  nosklo: ideasman_42: embed python can be easier at first, but it's worse for the python programmers
06:08  nosklo: ideasman_42: having something python programmers can import in their own scripts have lots of advantages
06:09  ideasman_42: agree, at some point Ill look into converting into a python module, probably not all that hard
06:09  ideasman_42: but we are firstly an application - would be like photoshop becoming a py extension
06:10  dash: ideasman_42: yeah, but you're also firstly a game engine. :)
06:10  ideasman_42: eh? not really
06:10  ideasman_42: I hardly ever build with the game engine enabled
06:10  nosklo: ideasman_42: I don't think there's anything wrong with photoshop becoming a py extension. I kind of like the idea
06:10  ideasman_42: I knew you would!
06:11  dash: ideasman_42: well, I didn't mean that _you_ use it.
06:11  ideasman_42: I didnt say it was wrong, just saying its not the purpose of an application to be an extension for a single language.
06:12  dash: ideasman_42: you've read this. right? http://www.twistedmatrix.com/users/glyph/rant/extendit.html
06:12  Diverdude: isn't there a synta like i++ in python?
06:12  ssbr_: I would have figured if you wanted to abstract away you'd be doing DBUS or something
06:12  dash: Diverdude: to do what?
06:12  dash: ssbr_: oh man, dbus. =/
06:12  Diverdude: dash, increase i with 1
06:12  dash: Diverdude: i += 1
06:12  ssbr_: dash: or something!
06:12  nosklo: Diverdude: i+=1
06:12  ideasman_42: dash, not all the way through but read a few docs on this topic
06:12  Diverdude: ah, thx
06:13  habnabit: Diverdude: It's very rare you'd want to do that in python, though.
06:13  nosklo: ideasman_42: I think it being an exetnsion would make it more useful without losing anything, yes
06:13  nosklo: extension even
06:14  ideasman_42: nosklo, yep, thats why I'll look into it at some point
06:14  ideasman_42: but its not really high priority either
06:14  ideasman_42: have 165 bug open, these need fixing!
06:14  tyranosaurus: I'm writing a (relatively) simple pygst w/ gtk app, but I think I'm running in to an event loop issue. Any gurus out here?
06:15  ideasman_42: hey, from a licencing standpoint how does this work?
06:15  ideasman_42: Say if you import a GPL module
06:15  ideasman_42: so this GPL code runs in the same process as python
06:15  ideasman_42: so does this mean your py code must be GPL because it uses a GPL module?
06:15  ssbr_: ideasman_42: probably
06:15  nosklo: ideasman_42: IANAL, but I think your py code must be GPL, eys
06:15  ideasman_42: since they both occupy the same process
06:15  nosklo: yes
06:15  habnabit: tyranosaurus: Why don't you ask your question?
06:15  ssbr_: has nothing to do with process boundaries
06:16  ssbr_: it has to do with how the python code interacts with your code
06:16  habnabit: ideasman_42: This is yet another reason why the GPL is horrible.
06:16  ssbr_: if it's over a sufficienty abstract protocol, like HTTP, it doesn't have to be GPL
06:16  ideasman_42: so are there many GPL py modukes?
06:16  nosklo: even if you had it as separate process, you'd need it to be GPL
06:16  ssbr_: but nobody really knows what sufficiently abstract means
06:16  ssbr_: some people think dynamic linking is. The FSF disagrees. There is no legal precedent.
06:16  nosklo: ideasman_42: not really.
06:16  ssbr_: The GPL is ambiguous on this matter :/
06:17  ideasman_42: ok, was thinking it could be a nice way to allow non-gpl extensions if we be a module
06:17  ssbr_: there probably is no reasonable way to allow non-GPL extensions without changing your license.
06:17  habnabit: ideasman_42: Why not relicense with something saner?
06:17  bob2: does blender do copyright assignment?
06:17  ideasman_42: yeah, we have an exception already for some cases - code embedded in our data files for eg
06:18  ideasman_42: bob2, no
06:18  ssbr_: If you want this to happen, you chose the wrong license
06:18  nosklo: you can add an exception for extensions
06:18  bob2: yhl hand
06:18  ssbr_: oh man, you don't do copyright assignment?
06:18  ssbr_: hahahahaha
06:18  ssbr_: this is why the GPL is a bad idea. :/
06:18  ideasman_42: bob2, each person owns their own copyright
06:18  ssbr_: well, maybe you can convince each person to relicense
06:18  tyranosaurus: hashnabit: Sure. I have a gtk app with a playbin and a couple buttons. One button sets the uri property to a new video. I also want to seek, so I can start the video at an arbitrary point. However, when I use seek_simple, it doesn't work. However, using seek_simple in a button handler does.
06:18  ideasman_42: it wont happen
06:18  ideasman_42: well, thanks all the same...
06:19  ssbr_: ideasman_42: then you'll have to remove their code, or live with requiring GPL extensions.
06:19  ssbr_: You dug your own grave.
06:19  habnabit: Yaaaaaay GPL.
06:19  ssbr_: Let it be a lesson to you next time you choose a license.
06:19  ideasman_42: I didnt, but I see your point
06:19  tyranosaurus: hasnhabit: clarification: I want to seek immediately after switching video uris.
06:19  bob2: hey, it's only bad if you don't want everything to use the gpl
06:19  ssbr_: ideasman_42: You chose what project to invest in. Same thing.
--- Log closed Tue Nov 16 06:25:37 2010
--- Log opened Tue Nov 16 06:25:58 2010
06:25 --- Users 754 nicks [0 ops, 0 halfops, 0 voices, 754 normal]
06:26  ssbr_: Because nobody writes a decent free software thing, we're stuck with GPL stuff like Blender or closed source stuff like Maya
06:27  nosklo: because blender is already there, so I'd rather contribute to it than start anew
06:27  ssbr_: blender's license is prohibitive.
06:27 --- Channel #python was synced in 91 seconds
06:27  nosklo: it doesn't prohibit me from doing anything I want
06:27  ideasman_42: thats what the flame war on our ML is about
06:27  ssbr_: nosklo: But it does me.
06:27  ssbr_: How nice that the license just so happens to only restrict me and not you.
--- Log closed Tue Nov 16 06:33:45 2010
--- Log opened Tue Nov 16 06:34:09 2010
06:34 --- Users 754 nicks [0 ops, 0 halfops, 0 voices, 754 normal]
06:34  Diverdude: ssbr_, that does not matter :)
06:34  ssbr_: Diverdude: raw_input then
06:34  amitz: good point, I don't think I dare to refactor in python radically without test.
06:34  ssbr_: waits for a whole line to be entered (i.e. waits for the enter key)
06:34  ssbr_: amitz: you shouldn't dare to refactor radically anywhere without tests...
06:34  ssbr_: tests are important.
06:34  Swedish_Chef: bob2: i refactored things early but instead of inheritance i'm having classes use instances of other classes (ie instead of accessing the userdb class by inheriting it and using DBUsers.method i'm using users = DBusers(); users.method())
06:35  bob2: Swedish_Chef: god bless
06:35  ssbr_: Swedish_Chef: good choice
06:35 --- Channel #python was synced in 90 seconds
06:35  Swedish_Chef: but i don't know how to split that up when multiple classes use instances without creating a new one per file
06:36  amitz: ssbr_: most java refactorings are guaranteed equivalency (the automatic refactoring ones by IDE). If it breaks, it will break anyway.
06:36  Swedish_Chef: er i mean, creating a new instance in each file
06:36  Swedish_Chef: which also causes the circular import problem bob2 suggested
06:37  Swedish_Chef: jfv34: ah, i was looking for a book like that, thank you
06:37  jfv34: Swedish_Chef: No problem, I grabbed it from my local universtiy's library recently and have quite enjoyed it.
06:38  ssbr_: amitz: nominally... *sigh*
06:38  ssbr_: Anyway, yeah, python gives away a lot of static information in hopes that you can write cleaner code
06:38  ssbr_: (if you fail to meet that requirement, life becomes a pain)
06:39  papna: ssbr_: Integrity?
06:39  papna: ssbr_: You're viewing this issue fundamentally wrong.
06:40  amitz: ssbr_: problem is when you meet real life. I had an understanding of a real life, turned out I was wrong in some points. I'm really not looking forward to today's refactoring -_-
06:44  ssbr_: papna: sorry?
06:45  ssbr_: papna: the only reason I release my code as open source is because I believe it to be moral.
06:45  ssbr_: and my morals have perticular things they want of me.
06:45  ssbr_: particular*. One of them is to not be restrictive in the way the GPL is.
06:45  papna: ssbr_: You apply morality to a lot of crap.
06:45  ssbr_: papna: what else am I supposed to apply?
06:46  ssbr_: there is no other reason to choose one license over another.
06:46  ssbr_: Not when you're a hobbyist programmer. :)
06:47  ssbr_: anyway, there's no way I'm gonna get forced into writing GPL'd code because the only mainstream open source X is GPL. that just pisses me off. And since it's a hobby, I can afford to do things my own way.
06:47  ssbr_: There is no "wrong way" to look at things here.
06:54 --- habnabit_ is now known as habnabit
06:57  Diverdude: How do i merge 2 lists in python?
06:58  bob2: what does merge mean
06:59  gmoore: i need to make a simple cross-platform gui. what's your favourite ui library for python? gtk is all that comes to mind for me and i hate gtk
07:00  MostAwesomeDude: gtk, qt, wx (Apparently wx is too evil, though, I guess?)
07:00  MostAwesomeDude: So gtk or tq.
07:00  MostAwesomeDude: *qt, even.
07:00  nosklo: gmoore: gtk is my favorite. People say qt is also good.
07:05  inkjetunit: for some reason i've found qt apps to have more responsive ui
07:07  dash: gmoore: what do you hate about gtk?
07:11 --- RichGuk_ is now known as RichGuk
07:11  papna: pygtk is really the best option, usually.
07:14  tos9: If I have /A/B/A.py, and /A/C.py, how do I import C.py from A.py again?
07:15  bob2: don't do that
07:16  tos9: bob2, K. What do I do instead, throw them into a package above A and do an absolute import? Not my package structure here.
07:17  dash: tos9: don't have packages and modules with the same name, yeah
07:19  nosklo: tos9: http://jcalderone.livejournal.com/39794.html
07:19  tos9: dash, it's not my package. I don't mind editing it I guess, but ^ would work too, right (importing newpackage.a.c)
07:21  braoru: hello
07:22  bob2: tos9: in 2.6/2.7 you have a way to do it, but no oldser
07:22  doubledutch: bob2; we had spoken yesterday about me learning using Python using 2.6 or equiv... I have found http://en.wikibooks.org/wiki/Non-Programmer%27s_Tutorial_for_Python_3.0, what are the general arguments against me learning what will become the new standard by the time I am able to be a Python pro?
07:22  bob2: because those are false assumptions
07:22  bob2: and 2.x has much better library and documentation support
07:23  doubledutch: bob2; Understood.  Thought I'd ask while I saw you were active in channel.  -- I found the link while reading the Python 2.6 wikibook.  Cheers!
07:23  shirtless: does python have any native RSS lib or should I use urllib?
07:23  shirtless: I want to have no deps
07:24  shirtless: since i'm just doing an IRC plugin
07:25  bob2: feedparser
07:33  FrankAA: Hello ! Anyone knows why pstats is omitted in Ubuntu Python ? Any way I can add it ?
07:33  FrankAA: Thanks
07:35  Jerub: pstats?
07:35  Jerub: install python-profiler  ?
07:35  FrankAA: To handle cprofile results
07:35  shirtless: bob2, oh great
07:35  shirtless: bob2, I didn't realize it came with python
07:35  shirtless: thanks
07:38  Swedish_Chef: "put your source in a directory called src or lib. This makes it hard to run without installing." <--- i read that as i JUST roughly split up one file into 7 and throw them all into source/...
07:38  Swedish_Chef: er, +don't
07:40  gandalfcome: how do you do a proper float compare in python?
07:41 --- Unode is now known as _Unode
--- Log closed Tue Nov 16 08:42:24 2010
--- Log opened Tue Nov 16 12:42:44 2010
12:42 --- Users 798 nicks [0 ops, 0 halfops, 0 voices, 798 normal]
12:44 --- Channel #python was synced in 89 seconds
12:44 --- ideasman_42 is now known as ideasman_42afk
12:47 --- ideasman_42afk is now known as ideasman_42
12:48  apansover: is it possible to call a super class method directly from an object? Ie someone overrides the __str__ method and I want to call the super class methoid instead. ie myobj = Foo(); myobj.__super__.__str__
12:50  larhat: myobj.__class__.__method__
12:50  Yhg1s: apansover: super(Foo, myobj).__str__()
12:50  winterweaver: will a line like this cause an exception if 'key' does not exist?     if 'key' in my_dict and my_dict['key'] == 'foo': .....
12:50  Yhg1s: winterweaver: no.
12:50  winterweaver: cool thx
12:51  Yhg1s: winterweaver: although a common way to write this is 'if mydict.get('key') == 'foo': ...'
12:51  Yhg1s: (mydict.get('key') returns None if the key does not exist.)
12:51  winterweaver: oh nice
12:51  winterweaver: thx will use that instead then :)
12:51  m0no: hmmm pytables cant store datetime objects
12:52  apansover: Yhg1s: great, thanks!
12:56  fabiand: is there an easy way to accomüplish this: a_func([1,2], [3,4]) = [3,8] (so multiplying elementrs with each other)
12:58  _ikke_: fabiand: The map function
12:59  SoulSeekah: map(int, yourlist1)*map(int, youlist2)
12:59  SoulSeekah: ?
12:59  _ikke_: map(lambda x,y: x * y, list1, list2)
12:59  et: [x*y for x,y in zip([1,2], [3,4])]
12:59  et: [3, 8]
13:00  SoulSeekah: nice
13:06  Diverdude: which binary format is good for saving ndarrays in python? something which makes it easy to save and load variables, like .mat files in matlab?
13:06  _habnabit: _ikke_, that's just silly.
13:06  _ikke_: _habnabit: Why?
13:07  fabiand: SoulSeekah, _ikke_, wow - nice. thanks!
13:07  _habnabit: _ikke_, map+lambda is slower, less readable, and not as extensible as using a list comprehension.
13:07  _habnabit: Extensible, flexible, whatever.
13:07  SoulSeekah: hmm
13:07  SoulSeekah: so zip would be better?
13:07  _habnabit: Yes.
13:07  SoulSeekah: more efficient?
13:07  gnu_d: Hi, how do I map each three lines in a list, I'm trying to parse a srt file ?
13:08  SoulSeekah: map?
13:08  gnu_d: parse
13:08  SoulSeekah: use a counter and a for loop?
13:08  gnu_d: instead of that
13:08  SoulSeekah: what do you have in mind?
13:08  gnu_d: a regex
13:09  SoulSeekah: nice
13:09  gnu_d: but I don't know how :D
13:09  SoulSeekah: What's the expression you're looking for then
13:09  SoulSeekah: and how are you storing three lines in a list?
13:09  SoulSeekah: maybe some code to show?
13:09  gnu_d: with a tupple
13:10  SoulSeekah: but there aren't lines in a list
13:10  gnu_d: three lines sepparated by a \r (it's a win file)
13:10  SoulSeekah: or are you looking for
13:10  SoulSeekah: '\n'?
13:10  SoulSeekah: ohhh
13:10  SoulSeekah: I see
13:10  jorrit: gnu_d, on windows it is not \r
13:10  SoulSeekah: \r\n I think
13:10  jorrit: gnu_d, on windows it is CR+LF, but you should always check for \n. That's the platform independent way.
13:11  SoulSeekah: so what do you want to find?
13:11  SoulSeekah: the three lines?
13:11  _habnabit: Or just open your file in 'rU' mode.
13:11  SoulSeekah: in each tuple?
13:11  gnu_d: jorrit: how do I split it on that char, so every three line shall be appended as a tupple in the list ?
13:11  SoulSeekah: what are you parsing?
13:11  Diverdude: which binary format is good for saving ndarrays in python? something which makes it easy to save and load variables, like .mat files in matlab?
13:11  _habnabit: gnu_d, tuple
13:11  SoulSeekah: a tuple?
13:11  SoulSeekah: or a file?
13:11  gnu_d: grr
13:12  bob2: what's a ndarray?
13:12  bob2: numpy thing?
13:12  gnu_d: a file contains the following structure: line, line, line, \r\n ..., I opened the file as read only, and then myfile.split("\r\n"), but it splits every line.
13:12  _habnabit: gnu_d, is it a CSV file?
13:13  SoulSeekah: pattern = r'(.*)\n(.*)\n(.*)\n' I believe, if \n is not a regex escape character
13:13  gnu_d: _habnabit: it's a srt file (subtitle)
13:13 --- SpitfireWP_ is now known as SpitfireWP
13:13  SoulSeekah: But why not readline()?
13:14  SoulSeekah: instead of list to tuple
13:14  SoulSeekah: or file to list to tuple
13:14  kromar5959: re
13:14  SoulSeekah: yes
13:14  jorrit: gnu_d, note that it is not every three lines necessarily.
13:14  jorrit: gnu_d, the text for a subtitle can be more then one line.
13:14  jorrit: gnu_d, so you can't (in general) assume that it is grouped in multiples of 3.
13:15  SoulSeekah: gnu_d what exactly are you trying to accomplish?
13:15  gnu_d: jorrit: the structure of the files has 3 lines for a translation, l1 number, l2 time, l3 text
13:15  arkanes: srt files are incredibly simple
13:15  jorrit: gnu_d, no
13:15  jorrit: gnu_d, there can be more then one line of text.
13:15  jorrit: gnu_d, check this: http://en.wikipedia.org/wiki/SubRip
13:15  arkanes: you don't need a regexp or anything else to sort them, you need for loop and a really trivial state machine
13:16  arkanes: s/sort/parse/
13:16  gnu_d: SoulSeekah: just to translate the subtitle via google api
13:16  screen-x: Anyone know of a python module for interacting with the pubmed citation database?
13:16  jorrit: gnu_d, check the Specifications on that page.
13:17  arvind_khadri: how can I build a dict using two lists?
13:17  gnu_d: jorrit: what specification, I know that there are 4 lines repeating
13:17  jorrit: gnu_d, the page I posted.
13:17  jorrit: gnu_d, I quote:
13:17  arkanes: arvind_khadri: is one list the keys, and the other list the values?
13:17  jorrit: 'Text of subtitle (one or more lines)'
13:17  SoulSeekah: gnu_d, do you know how it looks from inside? (the srt file I mean)
13:18  arvind_khadri: arkanes, yes :) I have the logic, but unable to implement it
13:18  kromar5959: ideasman_42: http://www.pasteall.org/16876/python heres the script that doesnt create files anymore:O
13:18  SoulSeekah: You want to basically parse an srt file and translate 3 lines by 3 lines through Google Translate API?
13:18  arkanes: arvind_khadri: dict(zip(l1, l2))
13:18  SoulSeekah: zip, nice
13:18  arvind_khadri: arkanes, cool :)
13:19  SoulSeekah: wow
13:19  SoulSeekah: amazing
13:19  gnu_d: SoulSeekah: I told you, 4 lines, the first line is is position (integer), second line is time, the third line is text, what I need is to raw put the thing in a separate class object.
13:19  arkanes: gnu_d: it's not 4 lines repeating. It's the 2 metainfo, and then you read lines until you get a blank line
13:19  jorrit: gnu_d, why are you ignoring my advice? It is *not* 4 lines. Read that wikipage please.
13:20  gnu_d: arkanes: in my srt file there is only the context
13:20  SoulSeekah: gnu_d, in your srt you have only 1 line per sub?
13:20  arkanes: gnu_d: it's trivial to write one that actually works correctly so why not do that
13:20  SoulSeekah: is this a one-time thing?
13:20  gnu_d: jorrit: the 4-th line is blank, meaning sepator.
13:20  jorrit: gnu_d, read that wiki page. It clearly says that the text for the subtitle can be 1 OR MORE lines.
13:20  SoulSeekah: you should code something that you will be able to use with other srt, where there's 1 and more lines
13:20  jorrit: gnu_d, so you can't assume it will be every 4 lines. As there can be a subtitle with more then one line.
13:21  SoulSeekah: he says that his srt doesn't have more than 1 liners
13:21  gnu_d: jorrit: I don't care about the standards, I need to translate this file only, it's one time job.
13:21  SoulSeekah: am I correct, gnu_d
13:21  SoulSeekah: ?
13:21  arkanes: gnu_d: if you had just written it you'd be done now
13:21  kromar5959: how do i find out why a file is not created when using open()?
13:21  jorrit: gnu_d, who knows when you need to translate another set of subtitles in the future.
13:22  SoulSeekah: gnu_d, like I said, use readline() and a counter in a for xrange(len(file)) loop
13:22  arkanes: SoulSeekah: no
13:22  arkanes: SoulSeekah: goddamnit
13:22  arkanes: loop over the lines
13:22  arkanes: buffer fields
13:22  arkanes: when you encounter a blank line, yield the buffer
13:22  SoulSeekah: why
13:22  arkanes: you're done
13:22  SoulSeekah: if you can read one by one
13:22  SoulSeekah: and have i be the counter
13:22  arkanes: it's 2 minutes of work
13:22  arkanes: SoulSeekah: shh
13:22  SoulSeekah: ok
13:22  SoulSeekah: sorry
13:23  SoulSeekah: do a readlines() loop then
13:23  arkanes: not readlines
13:23  SoulSeekah: why not
13:23  arkanes: "for line in some_file"
13:23  SoulSeekah: .readlines()
13:24  _habnabit: No.
13:24  _habnabit: The .readlines() there is redundant.
13:24  SoulSeekah: really?
13:24  SoulSeekah: damn...
13:24  _habnabit: :T
13:24  SoulSeekah: Let me go try
13:25  _ikke_: _habnabit: lambda + map seems to be faster
13:25  SoulSeekah: nice...
13:26  _habnabit: _ikke_, where's your test code?
13:26  _ikke_: http://pastebin.com/3kLEf9YZ
13:26  infobob: http://paste.pound-python.org/show/57/ (repasted for _ikke_)
13:27  gnu_d: SoulSeekah: it doesn't work
13:27  SoulSeekah: what?
13:27  SoulSeekah: show the code
13:27  SoulSeekah: that is not working
13:27  arkanes: gnu_d: http://bpaste.net/show/11097/
13:27  _ikke_: What's wrong with pastebin?
13:28  _ikke_: !pastebin
13:28  SoulSeekah: I've no idea which of our ideas are you trying to implement
13:28  jorrit: _ikke_, adds
13:28  SoulSeekah: !pastebin
13:28  jorrit: ads I mean
13:28  gnu_d: that's better :)
13:28  nosklo: _ikke_: it's ugly, full of ads and doesn't allow copying the code without further clicking
13:28  _ikke_: Ah, ok
13:28  _ikke_: I see no ads ^_^
13:28  _habnabit: _ikke_, turn off your adblock.
13:28  nosklo: _ikke_: disable your adblocking software
13:29  jorrit: nosklo, the last one isn't true. You can copy the code without further clicking. just select (in the second part) and copy.
13:29  nosklo: jorrit: yeah, I got confused with another one where you have to click on reply
13:29  _habnabit: Still, that's more effort.
13:30  _habnabit: _ikke_, http://paste.pocoo.org/show/292005/
13:30  gnu_d: arkanes: actually, it doesn't work at all.
13:30  SoulSeekah: :D
13:30 --- vin is now known as notvin
13:30  gnu_d: it splits chars, not lines
13:30  arkanes: gnu_d: no it doesn't
13:31  arkanes: gnu_d: it'll split chars if you pass a string to it
13:31  arkanes: thats why the parameter is named "fileo" instead of "string_data" or some such
13:31  gnu_d: arkanes: what to do with the generator object ?
13:31  arkanes: whatever you want
13:32  arkanes: have you read a python tutorial yet?
13:32 --- notvin is now known as vin
13:32  _ikke_: _habnabit: By using izip in my code they perform the same
13:32  gnu_d: arkanes: no, just building a nuclear reactor with Python, nothing special./
13:32  ideasman_42: kromar5959, to fix this you really need to troubleshoot it yourself
13:32  _habnabit: _ikke_, yes, stop using time.clock().
13:32  ideasman_42: add prints at each step, try writ "hello world" to the file etc
13:32  SoulSeekah: arkanes, don't use buffer
13:32  kromar5959: ideasman_42: asked one of our coders and it seems that the filepath is missing
13:33  gnu_d: a, File object.
13:33  kromar5959: ideasman_42: strange that it worked before...
13:33  _ikke_: _habnabit: The python manual states that's the function to use for benchmarks and timings
13:33  gnu_d: whoops
13:33  arkanes: SoulSeekah: I'm not worried about shadowing an obscure builtin that you can't actually use from python code, but thanks for the tip
13:33  ideasman_42: kromar5959, then look into that
13:33  kromar5959: ideasman_42: thats what im doing:O
13:34  gnu_d: arkanes: it works now
13:34  ideasman_42: kromar5959, if you can make a smaller example as to why it fails report a bug and Ill look into it
13:34  arkanes: gnu_d: yes I know
13:34  SoulSeekah: :)
13:38  nosklo: _ikke_: rule of thumb is map + lambda == bad performance + unreadable
13:38  nosklo: throw in a filter and you have no doubt
13:38  kromar5959: ideasman_42: do i still need to restart blender when i made a change to a addon?
13:39  ideasman_42: kromar5959, F8 should reload but if you want to be really sure restart for now
13:39  kromar5959: ideasman_42: ok thanks
13:39  _ikke_: nosklo: Ok, thanks
13:39  _ikke_: nosklo: No doubt about it performing bad?
13:40  nosklo: _ikke_: yeah. and about being unreadable. filter(lambda..... , map(lambda.... ))
13:40  nosklo: _ikke_: [foo for foo in bar if baz] is so much nicer
13:40  _ikke_: Yeah, true
13:41  esperegu: how can I check if an iterator has entries?  I tried if len(myiterator) > 0  but it seems that iterators has no length... what's the best pytonic way to do this?
13:41  nosklo: esperegu: try iterating over it.
13:41  reeniginEesreveR: is it possible to decode a video in python and get its raw frames?
13:41  arkanes: reeniginEesreveR: sure
13:42  nosklo: reeniginEesreveR: yes. I think gstreamer has something to do it
13:42  esperegu: nosklo: so how would I do that in an if statement?
13:42  reeniginEesreveR: well ... anything other than gstreamer? O:-)
13:42  nosklo: esperegu: you don't. You'd use a for-loop
13:42 --- f8l is now known as f8|
13:42  reeniginEesreveR: actually I wanna test a link for video sending ... wanna send video frames over udp and for certain reasons it should be done in python
13:42  arkanes: reeniginEesreveR: you do it the same way you would in any language, which is to say that you decode the video format into frames, or you find a library which will do it for you
13:43  nosklo: infobob: redent esperegu for item in iterator: print 'it has at least one item', item ;; else: print 'iterator has no items left'
13:43  infobob: esperegu, http://paste.pound-python.org/show/58/
13:43  _ikke_: An iterator is an iterator. It's not a collection
13:43  arkanes: reeniginEesreveR: there's a lot more to streaming video than sending frames (*raw* frames?!) over udp
13:43  nosklo: eh
13:43  nosklo: infobob: redent esperegu for item in iterator: print 'it has at least one item', item ; break ;; else: print 'iterator has no items left'
13:43  infobob: esperegu, http://paste.pound-python.org/show/59/
13:43  nosklo: esperegu: forgot to break the first time.
13:43  reeniginEesreveR: i tried gstreamer but its caps/pads etc. drive me nuts when traffic drops over udp connection
13:44  nosklo: esperegu: note that this approach consumes one item from the iterator. But there's no other way.
13:44  esperegu: nosklo: k. thx
13:44  arkanes: reeniginEesreveR: well it's not like what you're talking about will actually work
13:44  reeniginEesreveR: arkanes, well ... i have to decode then re-encode ... (and then re-decode at server side)
13:44  arkanes: sigh
13:44  arkanes: reeniginEesreveR: it's early and I haven't had any coffee
13:44  reeniginEesreveR: arkanes, im not looking for something production strength either ...
13:44 * reeniginEesreveR hands over some coffee to arkanes 
13:45  arkanes: reeniginEesreveR: can you do me a favor and think about this for a minute?
13:45  arkanes: maybe there's a *reason* why all the ways you can stream video don't involve sending raw, uncoded frames over UDP
13:46  kromar5959: ideasman_42: i have a question, if i save a file and doesnt define a path, shouldnt the files be saved where the blend file is as default?\
13:47  ideasman_42: kromar5959, can you be more specific?
13:47  ideasman_42: "if i save a file and doesnt define a path" - ???
13:47  nosklo: kromar5959: no, I think the file will be saved in current directory
13:47  nosklo: kromar5959: the one you started blender from
13:47  ideasman_42: thats right
13:47  reeniginEesreveR: arkanes, you are absolutely right and i understand that. Its just that gstreamer just doesn't support any recovery mechanism, nor would it give me data packets, it always gives me its own encoded buffers that also contain other information. Thats why I was wondering if i could use soemthing else that is more primitive and more useful for me. Maybe I can then myself put it in an RTP container
13:47  arkanes: reeniginEesreveR: gstreamer supports more than 1 protocol
13:48  arkanes: reeniginEesreveR: but I'm not understanding yor problem now.
13:48  kromar5959: nosklo: ah yes you are right, the files are located there:O
13:48  arkanes: reeniginEesreveR: if your goal is "stream video", you don't need raw frame data or data packets
13:48  reeniginEesreveR: arkanes, in my case its more of like "i have to test my own protocol for video streaming". So I need a decoder/encoder in python.
13:49  arkanes: well
13:49  reeniginEesreveR: something like frame_to_send = get_next_frame(context)
13:49  arkanes: frankly it sounds like your protocol is kind of bad
13:49  rglover: Hi everybody. Kind of a newb question: I'm not used to working with files in Python. I have a file format that contains several different flavors of CSV data. Each flavor has a line at the top that defines the CSV info, and a terminating string at the bottom of each section. What would be the best way to pull each flavor of data out into its own set of lists?
13:49  arkanes: and it's not clear that you understand the challenges involved
13:50  reeniginEesreveR: arkanes, i never talked about my protocol at the first place
13:50  reeniginEesreveR: I'm not sure how can you call it bad
13:50  arkanes: I have psychic powers
13:50  reeniginEesreveR: great!
13:50  arkanes: I have to go to work, but here's some basic advice that really applies to any sort of project like this
13:50  reeniginEesreveR: could you use your psychic powers to sense which library is more suited for my needs?
13:51  Wild_Cat: rglover: I'd say split the file into sections, and then parse each section with the csv module.
13:51  arkanes: if you want to make a new thing that is better than the old thing, you need to know some stuff initially. Specifically, you should know exactly what the old thing does, and you should know exactly why they chose to do it that way instead of the way you want to do it
13:52  arkanes: if gstreamer sticks data in its packets which is not raw frame data, before you decide that's a categorically bad idea you should know what thata data is and why it is there
13:52  rglover: Wild_Cat: That's sort of what I was thinking. Is there a generally preferred, "best practices" way of splitting the file up?
13:53  reeniginEesreveR: arkanes, sigh. So I have a protocol/system/hardware that lets me send traffic load balanced over multiple network interfaces, hence giving me aggregated bandwidth. It has its own API which is in Python as well. I need to test its performance for video streaming.
13:53  Wild_Cat: reeniginEesreveR: I guess the real question is, why can't you use a "standard" video streaming protocol like, say, RTSP?
13:53  nosklo: rglover: looks like you need a mix of iterating over a file object and csv module usage
13:53  reeniginEesreveR: so here i've explained why I can't use a "standard" video streaming protocol e.g. RTSP ... cuz the underlying network stack is totally different
13:54  arkanes: reeniginEesreveR: that sounds like an entirely useless network stack for streaming video over
13:54  reeniginEesreveR: which brings me back to the question: can i encode/decode video frames in python?
13:54  Wild_Cat: also, UDP anything is a bad idea.
13:54  arkanes: reeniginEesreveR: I already answered your question and told you how to do it
13:54  reeniginEesreveR: arkanes, correct ... thats exactly what I want to veriy with experiments
13:54  nosklo: reeniginEesreveR: RTSP works on any network that has TCP/IP
13:55  arkanes: reeniginEesreveR: in fact it sounds like a pretty useless network stack in general, if you can't tunnel regular traffic over it
13:55  Wild_Cat: reeniginEesreveR: gstreamer or ffmpeg will let you encode video. There are Python bindings for gstreamer and probably for ffmpeg as well.
13:55  arkanes: reeniginEesreveR: but if it works by aggregating interfaces, you're not going to get any benefit for time-locked data like video frames
13:55  Wild_Cat: arkanes: good point.
13:55  arkanes: try bitorrent or something instead
13:56  Wild_Cat: arkanes: multiple interfaces would be great for streaming multiple videos to multiple clients, though
13:56  arkanes: Wild_Cat: whee multicast
13:56  Wild_Cat: arkanes: doesn't work that well over WANs, does it?
13:56  arkanes: Wild_Cat: no :(
13:56  arkanes: the internet is sad
13:57  reeniginEesreveR: Wild_Cat, I've had issues with gstreamer. I couldn't get the desired frames easily with appsrc/appsink. I couldn't find other ways to get them unless writing my own src/sink and going with all that caps/pads issues. I am looknig for a simple solution in this regard. ffmpeg would be a much better choice but i'm not sure if its bindings are upto the mark. Could you think of anything else?
13:57  Wild_Cat: arkanes: also, even on a LAN, if you have N clients that each want a *distinct* video, having N interfaces is all gravy.
13:57  arkanes: reeniginEesreveR: it's really frustrating when someone who doesn't sound like they really know what they're doing rejects the solutions people offer because they think it might be too much work to find out if the solution works
13:58  Wild_Cat: reeniginEesreveR: nope. Most OSS video encoding projects are based on one of those.
13:58  arkanes: reeniginEesreveR: there is only one way to solve this problem - you need to use video codecs. There's only a few well known and high quality video libraries. You can check them all out.
13:58  Diverdude: Is it possible to get sort indices from the sorting algorithm ?
13:58  arkanes: if you decide none of them work, you can write your own
13:58  arkanes: Diverdude: what are you trying to do
13:59  reeniginEesreveR: Wild_Cat, thanks for the precise info ... i'll dig deep into gstreamer and ffpmeg now
13:59  Diverdude: arkanes, i have an array of numbers which i need to sort, and i need to sort another array according to how the first array was sorted
13:59  arkanes: Diverdude: I didn't ask you to restate your question
14:00 --- ysiadferreiras is now known as ysiad
14:00  Diverdude: arkanes, well that is what im trying to do
14:01  Wild_Cat: Diverdude: data = zip(l1, l2); data.sort(key = operator.itemgetter(0)); l2_sorted = [i[1] for i in data]
14:01  arkanes: Wild_Cat: the keyfunc is unneccesary
14:01  arkanes: and you can just zip again to get the 2 lists out
14:01  Wild_Cat: arkanes: I added it as a protection in case there are equalities and the data in l2 are from unordered types
14:02  arkanes: this probably won't work with ndarrays, too
14:03  Diverdude: Wild_Cat, they are both numpy.ndarrays. ones is size 253 the other which needs to be sorted according to the first is of dimension 253x20x30
14:12  LeoAtWork: I've just read the logging documentation. Do u guys think is better to import an class with static configuration or create an instance of a configured logging and pass it to the constructor of all logable classes?
14:13  mooneyj: I have to get the variables from the last column of this file. However the header is formatted in an annoying way, and worse there are several headers in the file. Any advice on how to approach this? http://pastebin.com/TrxSSrzf
14:13  infobob: http://paste.pound-python.org/show/60/ (repasted for mooneyj)
14:14  arkanes: mooneyj: that does look irritating
14:14  arkanes: mooneyj: is the number of columns fixed, and do you need any data that isn't those numeric values in the columns?
14:15  nosklo: mooneyj: you have to check something that is constant on the lines you want to get, and fails on other lines
14:15  kromar5959: nosklo: an other question conserning file paths. when i open the filemanager with my script do i still need to manually change the filepath or should it set the path there as default?
14:16  nosklo: kromar5959: huh? which filemanager?
14:16  Diverdude: Wild_Cat, i cant seem to make your method working
14:16  nosklo: mooneyj: from your data it looks like you can check for the 'D' char in position 17. All lines you're interested seem to have that.
14:16  mooneyj: arkanes, the number of columns is fixed yes. But i need to get the num of hard spheres integer from the headers (have already written this bit of prog)
14:16  kromar5959: nosklo: the filemanager in blender
14:17  nosklo: kromar5959: oh, I think so, not sure.
14:17  arkanes: mooneyj: iterate over lines in file. Check for the hard spheres line, extract & store the number if present. Otherwise, split the on spaces and count the results. If its not 8 columns, discard it and keep going.
14:18 * ikanobori arkanesses
14:18  arkanes: mooneyj: you can add some more sanity checks in there, like checking the formatting of the fields
14:18  kromar5959: nosklo: any ideas how i can print the default path or the current path?
14:19  nosklo: kromar5959: print os.getcwd()
14:19  mooneyj: arkanes, cheers i will give it a go. May have to come back and ask you how to test for number of columns tho :)
14:19  kromar5959: nosklo: that gives the path that blender uses to save files?
14:20  nosklo: kromar5959: that gives the current working directory. I think that's what blender will use.
14:20  arkanes: mooneyj: if len(line.split()) == 8
14:20  kromar5959: nosklo: hm ok
14:20  nosklo: kromar5959: I don't use blender scripting anymore. I hate the switch to py3k
14:22  GammaG: i lost my bot.db # configure DB engine = sa.create_engine('sqlite:///bot.db')
14:23  GammaG: tried to .dump recover it
14:23  GammaG: but no go
14:23  Yhg1s: 'lost' how? 'dump' how? 'recover' how?
14:23  Yhg1s: and 'no go' how?
14:23  kromar5959: nosklo: im really confused with the new scripting. seems its only doable now by professional coders...
14:24  GammaG: it got deleted
14:24  GammaG: the file
14:24  GammaG: not in the db
14:24  nosklo: kromar5959: nah, not even professional coders can do it. IMHO the python scripting was added in a very bad, annoying way with lots of bad decisions about how to present stuff
14:24  Yhg1s: GammaG: so you deleted the .db file? And how do you expect to get it back, then?
14:24  nosklo: kromar5959: things like using global variables to pass state
14:25  nosklo: and injecting code into your module
14:25  nosklo: and no way to integrate with external loops or other software
14:25  kromar5959: hm that doesnt sound to good:/
14:25  nosklo: abuse of attributes starting with two undescores
14:25  nosklo: etc etc
14:26  nosklo: kromar5959: it's still usable though, but as a hobbist I lost interest
14:26  GammaG: i get these errors trying to access commands on this bot
14:26  GammaG: http://bpaste.net/show/11107/
14:26  airtonix: Hi, where is a place to get more styles for Pygment?
14:26  GammaG: because bot.db got deleted
14:26  nosklo: GammaG: too bad :( looks like you have to recreate it.
14:26  Yhg1s: GammaG: yes. the database is empty. the data is gone.
14:27  nosklo: GammaG: look for the original schema and recreate the tables
14:27  grandzgegmalade: hello
14:28  GammaG: i was hoping i could restore it
14:28  GammaG: since it was just a file
14:28  GammaG: and not the tables
14:28  Yhg1s: no, it *is* the tables.
14:28  nosklo: GammaG: the table data is stored inside the file
14:28  Yhg1s: that .db file is the entire database.
14:28  nosklo: GammaG: maybe you can use some undelete tool on your OS
14:28  grandzgegmalade: how do i create a binary payload (a replicat of a C struct) which have a ptr to another struct i build
14:28  grandzgegmalade: ?
14:28  nosklo: GammaG: check the recycle bin or something
14:28  Yhg1s: grandzgegmalade: you can't; pointers aren't something that make sense in 'binary payloads'
14:29  grandzgegmalade: k
14:29  grandzgegmalade: so
14:29  Yhg1s: grandzgegmalade: but to replicate C structs, see the struct module.
14:29  grandzgegmalade: struct toto {
14:29  grandzgegmalade:  char * pouet;
14:29  grandzgegmalade:  int coin;
14:29  grandzgegmalade: }
14:29 --- ChanServ sets modes [#python +q *!*@ppp-48-180-38-194.adsl.deckpoint.net]
14:29  nosklo: grandzgegmalade: please don't paste in the channel
14:29 --- ChanServ sets modes [#python -q *!*@ppp-48-180-38-194.adsl.deckpoint.net]
14:29  grandzgegmalade: i dont
14:30  grandzgegmalade: that's all i did
14:30  Yhg1s: unfortunately we can't tell while lines are incoming.
14:30  grandzgegmalade: i had no intention to paste 432143 lines
14:30  grandzgegmalade: just a struct to explain my problem
14:30  nosklo: grandzgegmalade: the channel policy is to not paste at all
14:30  grandzgegmalade: and it's done
14:30  grandzgegmalade: ok
14:30  nosklo: grandzgegmalade: even a single line
14:30  grandzgegmalade: sorry for that
14:30  Yhg1s: grandzgegmalade: so, what's the problem?
14:31  jorrit: nosklo, well for a single line the paste of the url would be just as long so I prefer to see the actual code then :-)
14:31  grandzgegmalade: Yhg1s: want to call an ioctl() from python but that ioctl use a struct with 1 pointer that i need to fill also in it
14:31  Yhg1s: jorrit: I don't. it's a lot harder to comment on it if you can't point to it.
14:31  Yhg1s: grandzgegmalade: there's no good way to do that. you'll have to use something like cython or ctypes instead.
14:31  grandzgegmalade: hmm even with id() ?
14:32  Yhg1s: yes, even with id().
14:32  grandzgegmalade: k
14:32  Yhg1s: it doesn't give you a char*.
14:32  grandzgegmalade: does it give the address of the variable?
14:32  grandzgegmalade: doesn't it
14:32  Yhg1s: of the Python object.
14:32  grandzgegmalade: ah
14:32  grandzgegmalade: understood
14:32  nosklo: grandzgegmalade: the actual data is not there
14:32  grandzgegmalade: shit
14:32  grandzgegmalade: ok
14:33  nosklo: grandzgegmalade: I'd write a quick extension with cython. It's easy and more maintainable in the long run
14:33  Yhg1s: and in the short run.
14:33  grandzgegmalade: how embeddable is that?
14:33  Yhg1s: entirely. it just produces an extension module.
14:34  grandzgegmalade: hmm .so?
14:34  Yhg1s: on ELF systems, yes.
14:34  grandzgegmalade: cool!
14:34  grandzgegmalade: i m looking into that
14:34  Yhg1s: it'll have the usual downsides of embedding, but that's not because of cython or the extension module. that's just because embedding has downsides.
14:34  grandzgegmalade: yep
14:34  grandzgegmalade: agreed
14:35  grandzgegmalade: thank you!
14:35  GammaG: wow
14:35  GammaG: rebuilding this 3498 table db
14:35  GammaG: ok
14:35  GammaG: yea...
14:36  Yhg1s: that's quite a lot of tables.
14:37  nvictor: hey python
14:37  nvictor: i have an issue
14:38  nvictor: i want to change a class attribute dynamically before an instance is created
14:38  nvictor: i was wondering if metaclasses is the way to go
14:38 --- gregglind_away is now known as gregglind
14:40  GammaG: #if __name__ == "__main__":
14:40  GammaG: #    metadata.create_all(engine)
14:40  GammaG: uncommented those two lines
14:40  GammaG: ran another .py
14:40 --- Tobias| is now known as Tobias
14:40  GammaG: made the db for me
14:40  GammaG: phewwww
14:41 --- Tobias is now known as Guest6159
14:41  voidspace: nvictor: no, metaclasses act when the class is created, not when instances are created
14:42  Yhg1s: nvictor: so what's stopping you from setting the class attribute?
14:42  voidspace: nvictor: you probably want to do something in the __new__ method - or even just the __init__
14:42  Alberth: nvictor: why not make an instantiation function?
14:42  nvictor: Yhg1s: i believe the attribute must be present before the class __init__ method is called
14:42  randoms: Hi, i have a school assignment where we are forced to use python3. i do however need a database connection (pref mysql) but cant find any working modules for this. any ideas?
14:43  Yhg1s: nvictor: so what's stopping you from setting it?
14:43  jY: i have some xml with ½ in it.. i need to replace the ½ with .5 i can't do a simple .replace() due to unicode
14:43  Yhg1s: randoms: the oursql module.
14:43  jY: any pointers?
14:43  Yhg1s: jY: why can't you do a simple replace? it handles unicode just fine, provided you do it right.
14:43  voidspace: nvictor: __new__ would work, but Alberth is right - just create a function that does what you want and call that to create your objects
14:43  randoms: thanks Yhg1s :>
14:44  jY: SyntaxError: Non-ASCII character '\xc2' in file ./pull.py on line 56
14:44  nvictor: voidspace: ok
14:44  Tordmor: jY: You need a coding: utf-8 line at the top of the file
14:44  voidspace: jY: sounds like you need to declare the encoding of your source file
14:44  Yhg1s: not necessarily utf-8.
14:44  jY: ahhh ok
14:44  jY: thanks
14:44  Yhg1s: you need to specify the *right* encoding.
14:44  voidspace: or escape the character
14:44  Tordmor: or that
14:48 --- Guest6159 is now known as Tobias|
14:48  apansover: Anyone using BeautifulSoup? I have a problem which got introduced after python 2.6.6 which I just can't solve. Info here http://bpaste.net/show/11108/
14:51  nosklo: apansover: I've switched all my BeautifulSoup-using code to lxml.html since it's so much nicer
14:51  Diverdude: arkanes, i can tell you that argsort returns sorted indexes which you then can use to sort another array accordingly
14:51  Diverdude: arkanes, so that solves the problem
14:51  apansover: nosklo: I know I should do the same but its too much to switch right now. Im using custom tags and stuff also which BS handles quite good.
14:53  apansover: nosklo: I know that python 2.6.6 introduced possibility to override __unicode__ method which beautifull soup does.
14:54  Yhg1s: 2.6.6 didn't introduce that. 2.6 might have.
14:55  Yhg1s: apansover: which version did it work in?
14:55  apansover: Yhg1s: 2.6.5
14:55  apansover: Yhg1s: And I read the release notes for 2.6.6 and noticed that they added a lot of unicode fixes
14:57  nosklo: apansover: lxml seems fine on 2.6.6 here http://bpaste.net/show/11109/
14:58  Yhg1s: apansover: well, some, yes, but they pertain to unicode subclasses.
14:59  apansover: nosklo: yeah, should use it as I know that BS is getting very low development. Is it possible to add custom tags to lxml?
15:00  Yhg1s: apansover: which version of BeautifulSoup are you using?
15:00  apansover: Yhg1s: 3.0.8.1
15:00 * ikanobori ponders if lodgeit pasting two files is default pygments behaviour or more special.
15:01  nosklo: apansover: yes, I guess
15:02  nosklo: BeautifulSoup uses unicode subclasses a lot
15:02  apansover: nosklo: OK, I'll have to take a closer look at it. I had hoped to be able to use BS a little bit longer but I guess not.
15:02  apansover: nosklo: Mmm and somehow it messes upp the <! tag
15:02  nosklo: ikanobori: I chose the multi-file mode myself
15:03  nosklo: ikanobori: it's also what infobob does when you paste two links to bad pastebins in the same line :)
15:03  ikanobori: nosklo: I will read it.
15:03  ikanobori: nosklo: I am actually re-implementing a pastebin which exposes the same url/xml api as lodgeit does.
15:03  ikanobori: So it should have that feature as well.
15:03  nosklo: ikanobori: just choose "multi-file" in the language combobox
15:04  ikanobori: Yes, it's probably a pygments option, I will read it this weekend.
15:04  Yhg1s: apansover: for what it's worth, it works fine for me, with Python 2.6.6 and BeautifulSoup 3.1.0.1.
15:04  Yhg1s: but I gather bsoup 3.1 has other issues that you may not want.
15:04  apansover: Yhg1s: He he yoy are correct. But maybe I can see how they changed the unicode subclassing
15:05  birkenfeld: ikanobori: if you're talking about the multi-file feature of paste.pocoo.org, it's not a pygments thing
15:05  ikanobori: birkenfeld: Then I shalt read the source and re-implement it :-)
15:07  apansover: Yhg1s: nosklo: thanks for taking the time to test this for me!
15:07  ikanobori: birkenfeld: Or, possibly fix the lodgeit bugs bpaste suffers from, either way.
15:10  Yhg1s: apansover: however, with 2.6.6 and bsoup 3.0.8.1 I also don't see what you're seeing.
15:11  apansover: Yhg1s: Really?
15:11  Yhg1s: yes.
15:11  apansover: Yhg1s: Now thats weird
15:11  apansover: Yhg1s: I installed 3.1.0.1 and it works for 2.6.6 but still have issues with 3.0.8.1
15:12  apansover: Yhg1s: Could it be the locale on the server that has an impact on this?
15:13  Yhg1s: I guess; bsoup 3.0.8.1 does hvae a unicode subclass that implements __unicode__, which wouldn't be called in 2.6.5 but would be called in 2.6.6. If that did something depending on the locale, that could make the difference.
15:13  Yhg1s: (3.1 doesn't define __unicode__ on unicode subclasses anymore.)
15:15  apansover: Yhg1s: Ahh I think we are on to something here :)
15:15  r3negade: question... I create a text file here: textfile = file(filename,'wt')
15:16  r3negade: then later I try to open it: file = open(filename, "a")
15:16  Yhg1s: r3negade: use 'open' instead of 'file'. Also, 't' is the default, you don't have to specify it.
15:16  r3negade: and it doesn't seem to like that...
15:16  Yhg1s: r3negade: 'it'? 'like'?
15:16  r3negade: ahh thanks.
15:16  r3negade: I'll try that.
15:16  Yhg1s: it is unlikely to change anything.
15:16  apansover: Yhg1s: BTW I'm subclassing beautiful soup but in 3.1 I get this error. http://bpaste.net/show/11111/
15:17  r3negade: seems to be working perfectly now.
15:17  r3negade: thanks.
15:17  Yhg1s: apansover: then the parentclass of ModondoSoup is a classic class, not a new-style class.
15:18  apansover: Yhg1s: So I can subclass BS anymore? I only do this. http://bpaste.net/show/11112/
15:19  apansover: can't i mean
15:19  nosklo: apansover: if it's a classic class, you can't use super
15:19  Yhg1s: if that's all, then you don't need to subclass at all, just write a little factory function instead.
15:19  Yhg1s: but you can still subclass, you just can't use super() without making your class a new-style class yourself (by inheriting from object, as well.)
15:19  apansover: Yhg1s: Never heard of that :)
15:20  chouchou: what music do programmers listen to often ?
15:20  nosklo: apansover: BeautifulSoup.__init__(self, *args, **kwds)
15:20  apansover: Yhg1s: Kinda new to python :)
15:20  apansover: nosklo: instead of super?
15:21  apansover: nosklo: Ah my bad. Instead of __init_- :)
15:21  Yhg1s: apansover: well, in this case, since NESTABLE_TAGS and RESET_NESTING_TAGS are class attributes, you don't need to subclass at all.
15:21  svip: How do I get Python to change the current directory to the file wherein the code is?
15:22  svip: Similar to PHP's __FILE__
15:22  papna-work: svip: Python modules have a __file__ attribute.
15:22  Yhg1s: apansover: you can just do 'BeautifulSoup.NESTABLE_TAGS['modondo'] = ...' etc once, and then instantiate BeautifulSoup to your heart's content.
15:22  apansover: Yhg1s: Ahh I think I understand. I'll try that :)
15:23  svip: papna-work: That doesn't include the entire directory.
15:23  svip: I mean path.
15:23  Yhg1s: svip: it does.
15:24  Yhg1s: svip: unless it was imported or executed through a relative path, in which case os.path.abspath() will fix that.
15:25  svip: Yhg1s: Neat.  How do I get the directory of where the file is and how do I set the working directory?
15:25  papna-work: svip: http://docs.python.org/library/os.path.html
15:25  flatpit: I'm creating a file and folder selection tree (CellRendererToggle, TreeView). Is it possible to restore the selections (TreeStore) upon second time the user visits this dialog?
15:25  papna-work: svip: Also, don't change the working directory.
15:25  Yhg1s: os.chdir() is how you change the working directory, but I'm not sure how it's relevant here. os.path.dirname() gives you the directory component of filename.
15:26  nosklo: flatpit: not automatically - you have to iterate over the store and set it yourself
15:27  flatpit: nosklo: you know of some codework that I can reuse? for this purpose
15:27  nosklo: flatpit: huh, it's a two-line for loop
15:27  nosklo: flatpit: there's really no secret
15:29  flatpit: nosklo: This is the simpler part I guess. I thought of something that'd take care of the files/folder got deleted (sets some style properties in the store).
15:29  flatpit: nosklo: anyway, thanks for the reply, I'll code it myself then
15:29  nosklo: flatpit: oh, if you're refreshing the list, then maybe recreating the tree from disk is better
15:30  flatpit: nosklo: No you didnt get it, I'm refreshing, yes, but not the whole list, rather just the selection info.
15:31  flatpit: nosklo: now, what happens if the selected files doesn't exist?
15:31  flatpit: file*
15:32  nosklo: flatpit: nothing. the treestore doesn't know it holds files. it's just some string data, from the treestore's point of view
15:32  nosklo: flatpit: why don't you use a FileChooserWidget
15:32  nosklo: flatpit: it monitors filesystem for changes automatically
15:32  TolYan: please paste output to: http://bpaste.net/
15:32  flatpit: nosklo: Can we select multiple files AND folders using that widget?
15:32  TolYan: ops
15:32  TolYan: sorray
15:34 --- ysiadferreiras is now known as ysiad
--- Log opened Tue Nov 16 15:52:48 2010
15:52 --- Users 823 nicks [0 ops, 0 halfops, 0 voices, 823 normal]
15:52  Diverdude: How do i get the index of the smallest value in an numpy.ndarray ?
15:53  megenius: i use python 2.6, & i need something like subprocess.check_output() how can i get that??
15:54  revolve: is there a way to set the width for help() output?
15:54 --- Channel #python was synced in 90 seconds
15:54  randoms: Yhg1s: yes, i have the mysql server installed. the windows binary did not give any errors
15:55  Yhg1s: megenius: use subprocess.Popen(), and its 'communicate' and 'poll' methods.
15:55  Yhg1s: randoms: but apparently the DLLs that oursql needs, the right version of the mysql client libraries, can't be found.
15:57  revolve: is there a way to set the width for help() output?
15:57  nosklo: revolve: you already asked that
15:57  revolve: nosklo: ..is there?
15:58  nosklo: revolve: what?
15:58  revolve: a way to set the width of help() output
15:58  kerio: revolve: man pydoc
15:59  nosklo: revolve: that's the third time you ask the same thing. repeating won't get answer
15:59  revolve: thanks
15:59  kerio: er
15:59  kerio: help(pydoc)
15:59  revolve: nosklo: refer to kerio
15:59  revolve: you unhelpful fuck
15:59 --- ChanServ sets modes [#python +o nosklo]
15:59  Yhg1s: revolve: mind your language.
15:59 --- nosklo sets modes [#python +b *!*hi@*.1-3.cable.virginmedia.com]
15:59  rodfersou: o.o
15:59 --- ChanServ sets modes [#python +o infobob]
15:59 --- infobob sets modes [#python +b $a:revolve]
15:59 --- infobob sets modes [#python -b *!*hi@*.1-3.cable.virginmedia.com]
15:59  kerio: revolve: you mean "you unhelpful operator"
16:00  Aufwind: I've writen this peace of code: http://fpaste.org/byFr/    I want to generate a new list 'loction' which contains all words of the old string variable 'location', which are not in the list "toDelete". But it doesn't seam to work. Everytim i try this, location does not "change",... Do I have a Logic-Error in my Code, that I don't see?
16:01 --- nosklo sets modes [#python -o nosklo]
16:01  Aufwind: Line 4 is the line, which causes me headache.
16:02  Yhg1s: Aufwind: what doesn't "change" about location?
16:02  Aufwind: It contains words, that are listed in toDelete, too. That should not be.
16:03  Yhg1s: Also, are you aware that f.readlines() gives you a list of lines, not words, and that each line still has the newline at the end? And that doing 'item not in toDelete' will perform a slow linear search through the toDelete list each time? Perhaps you want to strip the words, lowercase them all, put them in a set, and use set intersection instead.
16:03  megenius: Yhg1s: thnx
16:04 --- infobob sets modes [#python -o infobob]
16:07  Aufwind: Yhg1s: every line contains a word. I did not think of the newline. That could be the thing... Thank you! What would be a useful setintersection? (Never did that...) You mean like mynewlist = location.difference(toDelete?)
16:08  Yhg1s: Aufwind: you would use sets and the result would be a set, but yes, set.difference would be it. Or, if you care about order, just make toDelete a set so the containment test will be much more efficient.
16:10  Aufwind: Yhg1s: I don't care about the order. Thank you very much for this helpful hint!
16:11  Eblis: i
16:11  Eblis: oops :)
16:12  Eblis: i'm trying to write a list comprehension that gets all the callable members of a class: rules = [getattr(self, rule) for rule in dir(self) if callable(getattr(self, rule))]
16:12  Yhg1s: Eblis: use the inspect module instead.
16:12  Eblis: i have a feeling it's not good enough, does anyone have something beter ?
16:12  papna-work: Eblis: Don't do that. Instead, explicitly register the methods you want.
16:12  Eblis: papna: how ?
16:13  papna-work: Eblis: def __init__(...): .... self.interesting_methods = [self.foo, self.bar, self.baz]
16:14  Eblis: what if i don't know the methods ? i need all the methods that match something ? (like all methods that have a member variable set by a decorator)
16:17 --- ricky_ is now known as ricky
16:18  grandzgegmalade: see u guys
16:21 --- signpost is now known as mozy
16:22  egr: hi. can I do this in python:
16:22  egr: x = [1,2,3]; func(*x); // -> func(1,2,3)
16:23  Yhg1s: have you tried?
16:23  egr: dunno how this would be called, in sclang (SmallTalk) this would be a performList
16:24  Yhg1s: it's covered in the tutorial.
16:25  egr: well, I tried but apparently in a bad way cause it works
16:25  egr: that's good =)
16:27  Aufwind: Is this valid:         time.sleep('5.0'), because python tells me: TypeError: a float is required, but 5.0 is a float, isn't it?
16:27  Yhg1s: 5.0 is a float, yes. '5.0' is a string.
16:27  Aufwind: damn ^^ that was noobish, thanks ^^
--- Log closed Wed Nov 17 11:21:13 2010
