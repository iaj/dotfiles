--- Log opened Fri Oct 15 10:30:18 2010
10:30 --- Users 713 nicks [0 ops, 0 halfops, 0 voices, 713 normal]
10:30 * cloudy_nz curses phpmyadmin
10:30  phetips: cloudy_nz: it is evil
10:31 --- Channel #python was synced in 90 seconds
10:37  ibansal:  hi all
10:37  ibansal:  can anyone help me in implementing a new signal which could check if the value is being changed in the spin button
10:37  ibansal:  http://fpaste.org/Z2Nw/
10:39 * cloudy_nz wishes he knew GTK well because it is his favourite :(
10:39  shylent: whats wrong with Qt? :P
10:41  cloudy_nz: Qt is open source!
10:41  kerio: -ish
10:42  cloudy_nz: ish?
10:42  scvrory: Qt has a good cross-platform html pane :P
10:42  scvrory: better than gtk
10:42  kerio: unless they changed it
10:42  kerio: scvrory: GECKO FOR LIFE
10:42  kerio: DOWN WITH WEBKIT
10:43 * cloudy_nz wonders what Android uses for browser stuff
10:43  scvrory: don't get me wrong, i prefer gtk every time
10:43  kerio: cloudy_nz: every handheld but the n900 uses webkit
10:43  kerio: or opera
10:43  cloudy_nz: ar har
10:44 * cloudy_nz loves his HTC phone, sadly wife has kidnapped it
10:48  ibansal: please help me on the ^^
10:49  ibansal: can anyone help me in implementing a new signal which could check if the value is being changed in the spin button
10:49  ibansal: http://fpaste.org/Z2Nw/
10:53  pantsman: don't to GTK sorry, but nice comment on the line above __init__ ;)
10:54  cloudy_nz: it's a bit sad when a channel doesn't have one GTK expert...
10:54 * cloudy_nz feels very un-expertish :(
10:55  shylent: kerio: Qt is LGPL
10:55  cloudy_nz: if I didn't have to spend some much time on web stuff, I would have learnt a decent desktop library by now
10:56  scummos: hey! how would I find all possible arguments for "import"? like, "import random"?
10:57  kerio: scummos: docs.python.org/library
10:58  farciarz84: scummos: you don't need it. Import what you have to. For gerenal view see docs.python.org reference
10:58  farciarz84: cloudy_nz: maybe pyjamas is what you're looking for..
10:58  scummos: mh, isn't it possible to find all installed modules?
10:58  zk: scummos: import sys; sys.modules
10:59  zk: which will find all modules on sys.path
10:59  zk: which you can also look at
10:59 * cloudy_nz googles pyjamas (not the kind with fluffy bunnies printed on them)
10:59  scummos: wow that's awesome
10:59  scummos: looks great, thanks
10:59  zk: np
10:59  zk: pyjamas looks neat
11:00  zk: i've been meaning to mess with that
11:00  scummos: zk: that's only external modules, yeah? can i get the builtin ones (like random) too?
11:01  scummos: but not too important, i could also add them statically
11:01  zk: you'll see random in there
11:01  zk: open a shell up and fire that off
11:01  scummos: i did, but i can't find it there
11:02  scummos: http://pastie.org/1222906
11:03  kerio: no "this"? :(
11:03  scummos: hm?
11:03 * cloudy_nz is loving the python and mysql thing
11:04  scummos: cloudy_nz: sqlalchemy? :]
11:04  cloudy_nz: er...not yet
11:05  scvrory: sqlalchemy is really nice too B)
11:06  zk: scummos: sorry i guess ipython does something fancy there
11:06  scummos: okay... :]
11:06  scummos: there's also sys.builtin_module_names
11:06  scummos: but random isn't listed there either
11:07  scummos: "sys.modules -- This is a dictionary that maps module names to modules which have already been loaded."
11:08  Lunar_Lamp: Can I just confirm something. I'm new to python so just want to check: I must define a variable before I use it in the script? i.e. the script is read "line by line"; it can't be, done say: print a; a = 1.
11:08  scummos: yes
11:08  scummos: variables must be initialized before use
11:08  Lunar_Lamp: scummos: cheers - that agrees with what I saw, but just wanted to check there wasn't some kind of workaround etc etc.
11:09  scummos: why would you work around that ;p
11:09  scummos: what would you expect print to do in your script
11:09  Wild_Cat: Lunar_Lamp: well, using a variable that hasn't been defined is meaningless, don't you think?
11:10  Lunar_Lamp: Wild_Cat: completely.
11:11  cloudy_nz: nerdy programming wisdom #1: before any loop, set your initial values
11:11  Lunar_Lamp: I was just finding it easier to punch a bunch of variables to the end of the file because they were distracting me ;-)
11:11  Lunar_Lamp: obviously, this broke things \o/
11:12 * cloudy_nz glares at Transmission so that it will hurry up
11:13  TheLemonMan: hello, struct keeps bitching about argument size
11:13  zk: scummos: i guess you could go through sys.path and check every directory recursively
11:13  scummos: zk: *sigh* guess i'm going to do that, and i'll add builtin modules manually
11:14  zk: or you could install ipython (which rules anyways)
11:14  scummos: what's that?
11:14  zk: ipython -c 'import sys; sys.modules'
11:14  HTT-Bird: so...how does one curry a function in Python?
11:14  scummos: curry?
11:14  zk: scummos: http://ipython.scipy.org/moin/
11:14  cloudy_nz: is ipython worth installing?
11:14  HTT-Bird: scummos, partial application
11:14  zk: yeah i love it
11:15  zk: HTT-Bird: you could use *args, **kwargs can't you?
11:15  cloudy_nz: all the geeky people at my Python UG had ipython
11:15  HTT-Bird: zk...no
11:15  zk: why not?
11:15  HTT-Bird: def foo(spam, eggs): pass
11:15  HTT-Bird: I want to pass a certain value of spam now and provide eggs later
11:16  scummos: oh well zk, that's cool
11:16 * cloudy_nz wishes he didn't find spam & eggs examples made him hungry 
11:16  _habnabit: HTT-Bird, functools.partial
11:16  scummos: zk: guess i'm going to try that... but that's not the solution for my problem, i need a portable solution :)
11:17  zk: you could look around in the source and reuse whatever they do
11:17  HTT-Bird: _habnabit, thx, although it didn't turn out to be needed in the end :p
11:17  zk: it's just written in python
11:17  scummos: zk: that's indeed a very good idea. thank you.
11:20  mahound: is there anyway to do what i am trying to do at http://fpaste.org/wEAZ/ ?
11:21  mahound: re-executing a code block
11:22  pantsman: mahound: I don't think so.
11:23  mahound: :/
11:23  scummos: mahound: what *are* you trying to do?
11:23  pantsman: mahound: why not just use a for loop?
11:23  scummos: yeah, what you are doing there looks like a typical case for a loop
11:23  mahound: scummos: i have a piece of code and i want a db sync to happen before it, and a commit after it
11:24  mahound: scummos: so, i thought i could just put the code inside a 'with' statement and use a context manager
11:24  pantsman: and why does the code have to execute more than once, to achieve that?
11:24  scummos: why don't you use a database class and __enter__ and __exit__ for that?
11:25  scummos: if you wanted to use with.
11:25  mahound: because i want to retry the commit if it fails, and it involves syncing again with the DB and re-doing the operations
11:25  mahound: scummos: yeah, maybe i should do that
11:25  pantsman: or just sync the db, then yield the db connection, then commit
11:25  pantsman: no need for multiple yields
11:25  scummos: you should rather throw an error then imho
11:25  scummos: why should it fail to commit something to a database and succeed on retry
11:26  mahound: scummos: it's zodb... write conflicts
11:26  TheLemonMan: struct.unpack(unpackStr, block[position:position+4])[0] keeps givingme problems
11:27  TheLemonMan: i triple checked that the list passed as argument is 4 byte wise
11:30  pantsman: mahound: if you yield an object into the with-block (using the 'as' keyword), and record the actions you want to perform on that object, rather than imperatively performing them at the point the block is first exectuted, then that behaviour could possibly be retried in the __exit__ off the context manager
11:32  pantsman: s/off/of/
11:33  mahound: pantsman: yes, very good idea :) thanks!
11:57  qwerty1793: hi if L is a list, what should i append to it in order not to change L? L.append(None) appears to actually append the 'None' element on, which isn't what i want
12:00  Brend: qwerty1793, uh, if you don't want to append to it, why are you appending to it
12:01 --- MJ is now known as MJ|lunch
12:01  qwerty1793: because thats what map(f, list) does - in some cases I want f to return 'nothing' so nothing gets added to the output of map
12:02  Brend: Maybe you want a listcomp instead
12:02  Brend: Those can filter: you can write [f(x) for x in whatever if g(x)]
12:03  qwerty1793: well im hopeing to eventually replace map(f, L) with multiprocessing.amp(f,L) - will that still work?
12:03  qwerty1793: * multiprocessing.map(f,L)
12:03  Brend: No.
12:04  Brend: Could None be a valid value in the list?
12:04  Brend: If not, append None and then filter it out at the end
12:04  Brend: (If yes, use a sentinel object instead)
12:04  qwerty1793: it might be, but you're right if its not i could filter it out at the end
12:06  qwerty1793: Brend: Thanks, that looks like a viable solution
12:08  Brend: (If you have enough slave processes that the filter step becomes expensive, you have worse problems anyway)
12:09  Azzkikr: is anyone else bothered by the naming of `socket.error' and `socket.timeout' because it's not named like all other Exceptions?
12:09 * kerio uses twisted
12:11  qwerty1793: Brend: but if f is a time expensive computation and L has 100,000 items on it and i split it between 2 or 4 slaves then passing just once over the result and removing the Nones is much faster, right?
12:14  Brend: qwerty1793:
12:14  Brend: >>> timeit.Timer("[x for x in xrange(100000) if x is not None]").timeit(number=1)
12:14  Brend: 0.014573812484741211
12:15  Brend: I would assume you're gonna do some kind of reduce step on the result anyway, and whatever it is is going to be a lot more expensive than "is None"
12:15 --- chrischambers_ is now known as chrischambers
12:17  deftunix: hi all, i've a question about python and tkinter module. How can i execute mainloop in background?
12:22  Brend: deftunix, you're not gonna like the answer
12:22 --- anyoneofus|away is now known as anyoneofus
12:24 --- anyoneofus is now known as anyoneofus|away
12:26 --- anyoneofus|away is now known as anyoneofus
12:29  sig^: hmm, there's one thing that isn't completely explicit... every function "is" an iterable if they return one; that is, the function in  for x in fun():  is first evaluated, and only once; but lists for example are "evaluated" all the time so if you do  for x in L: L += [x]  it'll end up in a loop
12:29  sig^: I guess that's because lists have an internal generator function or something?
12:29  sig^: ohm, I guess there was nothing surprising after all when you think about it a second.
12:30  Brend: sig^: I think it's just the way listiterator works
12:30  Brend: (It doesn't make a copy of the list, it pokes around in it directly)
12:30  Brend: If you're worried about reentrancy you can "for x in L[:]", but it's usually better to just build a new list and replace it afterward
12:31  sig^: right.
12:32  asksol: is threading.local().__dict__ also local?
12:33  Brend: (But no, lists themselves aren't iterators, they don't maintain iteration state. They're just iterables. iter([]) returns a new listiterator object)
12:33  asksol: i.e. can I do threading.local().__dict__.clear()
12:37  asksol: the docstring says "__dict__ - Local-data dictionary", so I guess so
12:37  enkrypt: in perl I often used to do an assignment and an evaluation at the same time. like if (myvariable=function()):, and that would evaluate, and also assign so I could use the result inside the if statement. is there an equivalent in python ?
12:39  deftunix: Brend: ?
12:40  Brend: deftunix, firstly, don't use tkinter, use pygtk, wxpython, or pyqt. Secondly, don't run your mainloop in the background, let it be the center of your whole app and do everything around it in event-based fashion
12:40  deftunix: Brend: ok, thanks :)
12:41 * Brend blinks
12:41  Brend: Man, that never happens
12:41  Brend: I was all braced for a half-hour argument about why threads are bad and external dependencies are good
12:51  braoru: Little question.. is scons realy usable with python as maven is with java ?
12:53  blubbi: how can i overwrite some text I printed to stdout? Imaging a loop which prints every step but rather overwrite the previous putput than a new line each turn
12:53  hynek: does perchance anybody know whether urllib or httplib changed from utf-8/latin1 headers to unicode when going to 2.7? would exlain a lot. can't find anything in the changelog though
12:53  blubbi: s/putput/putput
12:53  blubbi: arrg output
12:54  gakos: hey, i use the minidom api for xml parsing. I use the write xml to append data nodes in my xml, but i cannot partially write to the xml, except for once gathering all nodes to memory and the writing to xml with writexml which causes memory leaks. Is there any way to partially write to the xml like each node a time?
12:55  Brend: braoru: scons is crazy, and can barely be called python
12:56  braoru: Brend, ok ... any other tools ?
12:56  Brend: braoru: For doing what?
12:57  gakos: any ideas?
12:58  braoru: Brend, dependency dealing, continuous server integration, auto-assembly in rpm, auto-functionnal-test, project environment managment as maven..
12:59  Brend: braoru: distutils / setuptools
12:59  Brend: (scons is a build system written _in_ Python, it's not a build system _for_ Python)
13:00  braoru: Brend, yes but what I was asking if I can use it to do what I want :)
13:00  zoidberg-: Hey guys, I am learning python and wanna look into client/server stuff.  I have come across two ways to write daemon software, 1) using twisted framework, which looks a little dauting and the other 2) daemonize.. which would you recommend for a new commer (and i just wanna play around with client/server python programming so nothing crazy just yet) ?
13:00  Brend: braoru: I don't think it does anything that would help you, no
13:01  Brend: zoidberg-, Twisted.
13:01  Habbie: zoidberg-, twisted.
13:01  braoru: Brend, ok :( I will see with disutils and setuptools .. or it may be a good idea for a new open-source project .)
13:01  Brend: zoidberg-, what you want is http://krondo.com/blog/?page_id=1327
13:02  Brend: braoru: Python doesn't need any more packaging systems. In fact, it desperately needs fewer of them
13:02  Brend: braoru, there's also pip, which apparently people like
13:03  gakos: anyone?
13:03  braoru: Brend, ok
13:03  gakos: guys?
13:03  Brend: gakos: If someone knew (or understood your question), they would say so. Don't spam us.
13:04  braoru: Brend, but more than an packaging system I more thinks about an validate, compile, test, package, integration-test, verify, install, deploy system
13:07  Brend: Only about half those words actually mean anything, and those are all covered by the things I said
13:16 --- neumaennl is now known as Cricket
13:16 * Cricket chirp
13:16 --- Cricket is now known as Guest24397
13:16 --- Guest24397 is now known as neumaennl
13:19  braoru: Brend, ok
13:21  roppert: what's a good lib for reading and manipulating PDF documents?
13:22 --- MJ|lunch is now known as MJ
13:24 --- anyoneofus is now known as anyoneofus|away
13:24  Brend: roppert, reportlab for generating, and maybe pdfminer for pulling content out
13:25 --- ElizabethM is now known as init
13:25  anev: i have a string '64\n'
13:25  Brend: PDF is not a very good format for making changes to documents in-place, really
13:25  anev: i'm trying to print it in hex without using hex() or .encode('hex')
13:25  roppert: Brend: I want to extract information so I'll check pdfminer out. Thanks!
13:26  anev: how would i print using the correct format string? i.e. print '%02X' % (str.strip())  ?
13:26  anev: it generates an error
13:26  Brend: anev: And what does the error say?
13:27  anev: Brend: str object not callable
13:27  anev: do i need to throw it into a variable first?
13:28  anev: Brend: got it
13:28  anev: Brend: also had to cast to int
13:28 --- anyoneofus|away is now known as anyoneofus
13:28  Brend: Convert to int, yes. And I don't think the code you pasted there would give a "str object not callable" error, so I assume there was some other mistake
13:29  anev: Brend: no, that did generate the error.
13:29  Brend: >>> '%02X' % ("64\n".strip())
13:29  Brend: TypeError: %X format: a number is required, not str
13:30 --- anyoneofus is now known as anyoneofus|away
13:31  `mx: Brend: get rid of the \n
13:31  `mx: otherwise wrap it arount int()
13:32  Brend: `mx: It wasn't a question, you missed the first part of the conversation :)
13:32  `mx: haha
13:32  `mx: oops. Sorry.
13:33  anev: Brend: i'm reading a file.. i.e. f = open('file','r') and i want to iterate through each line using a for loop, should i approach it like for line in f.readline() ?
13:34  Brend: anev: Just "for line in f: ..."
13:34  anev: Brend: or is there a better way to approach?
13:34  anev: Brend: ahh
13:34  anev: thank you
13:42  hemanth: hello py hackers, which is the module that you would prefer for making an irc bot? Nothing much needed with vm and stuff, its just read and write text
13:45  Habbie: hemanth, twisted
13:45  hemanth: Habbie, checking it out thanks :)
13:46  hemanth: Habbie, twisted seems like an ocean :) any code snippet for quick view?
13:46  Taos: hemanth: twisted.words.protocols.irc
13:47  hemanth: Taos, thanks :)
13:47  Taos: ill give you a logging example in a minute
13:47  hemanth: wow ok
13:48  nosklo: hemanth: here's a quick example http://www.habnabit.org/twistedex.html
--- Log opened Fri Oct 15 13:49:17 2010
13:49 --- Users 725 nicks [0 ops, 0 halfops, 0 voices, 725 normal]
13:49 --- Server: [calvino.freenode.net] [freenode-info] channel flooding and no channel staff around to help? Please check with freenode support: http://freenode.net/faq.shtml#gettinghelp
13:49  nosklo: hemanth: this bot includes a calculator, a url title grabber, and a time message scheduler13:49 
 nosklo: hemanth: this bot includes a calculator, a url title grabber, and a time message scheduler
13:50  Habbie: nice.
13:50  Habbie: nice.
13:50  nosklo: hemanth: it's well commented and explained so you grab the basics quickly -- you can easily create new commands by just defining new methods
13:50  nosklo: hemanth: it's well commented and explained so you grab the basics quickly -- you can easily create new commands by just defining new methods
13:50 --- Channel #python was synced in 94 seconds
13:50  Habbie: is that url stable?
13:50  Habbie: is that url stable?
13:50  nosklo: yes
13:50  nosklo: yes
13:50  nosklo: it's there for a couple years, I guess
13:50  nosklo: it's there for a couple years, I guess
13:51  Taos: Gar nosklo you beat me to it with superiour code
13:51  Taos: Gar nosklo you beat me to it with superiour code
13:51 * Habbie bookmarks :)
13:51 * Habbie bookmarks :)
13:53  anev: Brend: is it possible to write out to a file in binary?
13:53  anev: Brend: is it possible to write out to a file in binary?
13:53 13:53  glezos: What's the fastest way to get the first column of a two-dimentional array (ie list of lists or tuple of tuples)? (something faster than [row[0] for row in array] glezos: What's the fastest way to get the first column of a two-dimentional array (ie list of lists or tuple of tuples)? (something faster than [row[0] for row in array]

13:53  nosklo: glezos: that's the fastest way
13:53  nosklo: glezos: that's the fastest way
13:53  Brend: anev: That depends what you mean by "in binary"
13:53  Brend: anev: That depends what you mean by "in binary"
13:53  hemanth: nosklo, i see an RE like  r'^%s[.,>:;!?]*\s*'  what is the trigger
13:53  hemanth: nosklo, i see an RE like  r'^%s[.,>:;!?]*\s*'  what is the trigger
13:53  anev: i.e. i'm reading in a list of bytecodes, i'm converting to hex and printing to screen.. i want to write these out to a file in binary format if possible?
13:53  anev: i.e. i'm reading in a list of bytecodes, i'm converting to hex and printing to screen.. i want to write these out to a file in binary format if possible?
13:53  Brend: glezos: Maybe you want numpy
13:53  Brend: glezos: Maybe you want numpy
13:53  nosklo: hemanth: the trigger is the robot name
13:53  nosklo: hemanth: the trigger is the robot name
13:53  Brend: anev: "binary format"?
13:53  Brend: anev: "binary format"?
13:53  hemanth: nosklo, ha ok :)
13:53  hemanth: nosklo, ha ok :)
13:54  glezos: Brend: I'm thinking about the opposite of zip() or something.
13:54  glezos: Brend: I'm thinking about the opposite of zip() or something.
13:54  anev: Brend: not sure how to explain it better
13:54  anev: Brend: not sure how to explain it better
13:54  nosklo: hemanth: that regexp is to strip off the addressing
13:54  nosklo: hemanth: that regexp is to strip off the addressing
13:54  nosklo: hemanth: and leave only the message
13:54  nosklo: hemanth: and leave only the message
13:54  anev: Brend: let's bytecodes coverted to op codes?
13:54  anev: Brend: let's bytecodes coverted to op codes?
13:54  Brend: anev: You can open a file in "binary mode", but that doesn't really do anything much. Maybe you want struct.pack, which can pack various datatypes into struct-like strings
13:54  Brend: anev: You can open a file in "binary mode", but that doesn't really do anything much. Maybe you want struct.pack, which can pack various datatypes into struct-like strings
13:55  hemanth: nosklo, o ok, kool :) i'm just trying rcv and sent text as of now, i had done few perl and bash bots, py this is the first time, thanks a ton
13:55  hemanth: nosklo, o ok, kool :) i'm just trying rcv and sent text as of now, i had done few perl and bash bots, py this is the first time, thanks a ton
13:56  anev: Brend: i'm reading a list of bytecodes, the first of which is '64', i'm converting that to hex which gives me 40.. 40 in assmebly is actually an opcode for "inc ax".. if i paste the hex output of the bytecode into a hexeditor and save the file, it converts it to "binary", or something that is executable (if i throw the pe header information around it)
13:56  anev: Brend: i'm reading a list of bytecodes, the first of which is '64', i'm converting that to hex which gives me 40.. 40 in assmebly is actually an opcode for "inc ax".. if i paste the hex output of the bytecode into a hexeditor and save the file, it converts it to "binary", or something that is executable (if i throw the pe header information around it)
13:56  anev: Brend: i'm trying to achieve the same thing, but with python.
13:56  anev: Brend: i'm trying to achieve the same thing, but with python.
13:56  Brend: hemanth: If you were using POE::Component::IRC in Perl, then twisted.words is the same idea.
13:56  Brend: hemanth: If you were using POE::Component::IRC in Perl, then twisted.words is the same idea.
13:57  anev: Brend: maybe binascii.* is what i'm looking for?
13:57  anev: Brend: maybe binascii.* is what i'm looking for?
13:57  Brend: anev: "binary" isn't a format. The string '64' has an internal binary representation, as does the integer 64
13:57  Brend: anev: "binary" isn't a format. The string '64' has an internal binary representation, as does the integer 64
13:58  Brend: anev: The hard part is figuring out what format you actually want, and then converting to that
13:58  Brend: anev: The hard part is figuring out what format you actually want, and then converting to that
13:58  anev: Brend: binascii.a2b_hex(hexstr)
13:58  anev: Brend: binascii.a2b_hex(hexstr)
13:58  anev: binascii.unhexlify(hexstr)
13:58  anev: binascii.unhexlify(hexstr)
13:58  anev: i think these might do the job?
13:58  anev: i think these might do the job?
13:59  Brend: I seriously doubt it.
13:59  Brend: I seriously doubt it.
13:59  nosklo: anev: no, binascii has nothing to do with that. You probably want to chr(yourint)
13:59  nosklo: anev: no, binascii has nothing to do with that. You probably want to chr(yourint)
13:59  hemanth: Brend, in perl it was simple evalbot with qemu
13:59  hemanth: Brend, in perl it was simple evalbot with qemu
14:00  hemanth: nosklo, bot said Log opened; but not noticing the log in the pwd
14:00  hemanth: nosklo, bot said Log opened; but not noticing the log in the pwd
14:00  Kylarr: glezos, zip is the opposite of zip. Like, [row[0] for row in array] can just be zip(*array)[0], but the first is faster.
14:00  Kylarr: glezos, zip is the opposite of zip. Like, [row[0] for row in array] can just be zip(*array)[0], but the first is faster.
14:00  nosklo: hemanth: it's logging to stdout by default
14:00  nosklo: hemanth: it's logging to stdout by default
14:00  glezos: Kylarr: thanks!
14:00  glezos: Kylarr: thanks!
14:00  nosklo: hemanth: check the line:     log.startLogging(sys.stdout)
14:00  nosklo: hemanth: check the line:     log.startLogging(sys.stdout)
14:02  hemanth: nosklo, in #testingbot i have hosted it to test its called Bee_, on msg to it, i'm not seeing anything on stdout, am i missing something?
14:02  hemanth: nosklo, in #testingbot i have hosted it to test its called Bee_, on msg to it, i'm not seeing anything on stdout, am i missing something?
14:06  fredmorcos: hi, i have this line of code in python2 that i'm trying to port to python3: schedule.sort(lambda a, b: cmp(b[0].currentMachine, a[0].currentMachine))
14:06  fredmorcos: hi, i have this line of code in python2 that i'm trying to port to python3: schedule.sort(lambda a, b: cmp(b[0].currentMachine, a[0].currentMachine))
14:06  fredmorcos: i can't figure out how to re-implement it with itemgetter and attrgetter
14:06  fredmorcos: i can't figure out how to re-implement it with itemgetter and attrgetter
14:06  ssbr: you can't.
14:06  ssbr: you can't.
14:07  ssbr: just change your 2.x code to use the key= argument (lambda a: a[0].currentMachine)
14:07  ssbr: just change your 2.x code to use the key= argument (lambda a: a[0].currentMachine)
14:07  ssbr: and 2to3 should then work fine
14:07  ssbr: and 2to3 should then work fine
14:07  ssbr: (in fact, wouldn't even need to change it)
14:07  ssbr: (in fact, wouldn't even need to change it)
14:07  ssbr: bonus: your sort will then be faster.
14:07  ssbr: bonus: your sort will then be faster.
14:09  fredmorcos: ssbr, so basically would be like that: schedule.sort(key = lambda a: a[0].currentMachine)?
14:09  fredmorcos: ssbr, so basically would be like that: schedule.sort(key = lambda a: a[0].currentMachine)?
14:09  ssbr: sommin' like that
14:09  ssbr: sommin' like that
14:10  fredmorcos: ssbr, but i should give reverse=True since in the original line it's cmp(b, a) and not cmp(a, b).. correct?
14:10  fredmorcos: ssbr, but i should give reverse=True since in the original line it's cmp(b, a) and not cmp(a, b).. correct?
14:10  ssbr: fredmorcos: ...sure
14:10  ssbr: fredmorcos: ...sure
14:10  ssbr: I'm a bit tired.
14:10  ssbr: I'm a bit tired.
14:10  fredmorcos: anyways, thanks ssbr
14:10  fredmorcos: anyways, thanks ssbr
14:13  fredmorcos: "assert solutions != None" is checking if each element in the list "solutions" isn't equal to None?
14:13  fredmorcos: "assert solutions != None" is checking if each element in the list "solutions" isn't equal to None?
14:13  fredmorcos: and not the reference to the list?
14:13  fredmorcos: and not the reference to the list?
14:14  ssbr: assert statements are not guaranteed to be run.
14:14  ssbr: assert statements are not guaranteed to be run.
14:14  ssbr: I wouldn't use them.
14:14  ssbr: I wouldn't use them.
14:14  ssbr: (at least, not for "checking" anything)
14:14  ssbr: (at least, not for "checking" anything)
14:15  fredmorcos: this one is running, i'm trying to port a py2 program to py3 manually by myself
14:15  fredmorcos: this one is running, i'm trying to port a py2 program to py3 manually by myself
14:15  ssbr: fredmorcos: it won't run if you run it with python -O
14:15  ssbr: fredmorcos: it won't run if you run it with python -O
14:15  fredmorcos: and this assert statement, at least in py2, should check whether solutions refers to something at all
14:15  fredmorcos: and this assert statement, at least in py2, should check whether solutions refers to something at all
14:16  ssbr: do not ever expect the assert statement to be run, because if it's installed with the wrong settings, it won't be.
14:16  ssbr: do not ever expect the assert statement to be run, because if it's installed with the wrong settings, it won't be.
14:16  ssbr: and you can't control the settings.
14:16  ssbr: and you can't control the settings.
14:16  ssbr: So, this is in fact an error in the py2 code
14:16  ssbr: So, this is in fact an error in the py2 code
14:16  ssbr: (a logical error)
14:16  ssbr: (a logical error)
14:16  fredmorcos: okay... but let's say i'm using it for the testing phase
14:16  fredmorcos: okay... but let's say i'm using it for the testing phase
14:16  ssbr: what testing phase?
14:16  ssbr: what testing phase?
14:17  fredmorcos: i won't be using assertions later
14:17  fredmorcos: i won't be using assertions later
14:18  fredmorcos: my question is, why is this sort of (in-)equality operator working differently in py3 than in py2 and what are the differences?
14:18  fredmorcos: my question is, why is this sort of (in-)equality operator working differently in py3 than in py2 and what are the differences?
14:18  ssbr: Don't use them now.
14:18  ssbr: Don't use them now.
14:18  ssbr: It isn't working differently.
14:18  ssbr: It isn't working differently.
14:21  zoidberg-: Brend: Sorry for the delayed response.. thank you for your answer, i'll look nto twisted.
14:21  zoidberg-: Brend: Sorry for the delayed response.. thank you for your answer, i'll look nto twisted.
14:34 --- PythonNub|BRB is now known as PythonNub
14:34 --- PythonNub|BRB is now known as PythonNub
14:36  Caribou|: how do you make a thread running a function every x seconds ?
14:36  Caribou|: how do you make a thread running a function every x seconds ?
14:37  Habbie: Caribou|, why?
14:37  Habbie: Caribou|, why?
14:37  PythonNub: for i in range() \n function() \n time.sleep(x)   ?
14:37  PythonNub: for i in range() \n function() \n time.sleep(x)   ?
14:37  PythonNub: :S
14:37  PythonNub: :S
14:37  Caribou|: Habbie, for networking reasons, i want to the server send something to the clients every x seconds
14:37  Caribou|: Habbie, for networking reasons, i want to the server send something to the clients every x seconds
14:38  Habbie: Caribou|, why do that in a thread?
14:38  Habbie: Caribou|, why do that in a thread?
14:38  Caribou|: good question :S
14:38  Caribou|: good question :S
14:38  PythonNub: Habbie: probably to avoid blocking up the other operations
14:38  PythonNub: Habbie: probably to avoid blocking up the other operations
14:38  Habbie: PythonNub, i wasn't asking you. sorry.
14:38  Habbie: PythonNub, i wasn't asking you. sorry.
14:38  PythonNub: whatever.
14:38  PythonNub: whatever.
14:39  scummos: hi! can i get info on what parameters a function takes, like via __doc__ or such?
14:39  scummos: hi! can i get info on what parameters a function takes, like via __doc__ or such?
14:40  Caribou|: Habbie, well that should work with handmade timers, so no i actually don't need it :D
14:40  Caribou|: Habbie, well that should work with handmade timers, so no i actually don't need it :D
14:40  ssbr: scummos: use the official documentation for the function
14:40  ssbr: scummos: use the official documentation for the function
14:40  ssbr: scummos: in the case of the Python standard library, this documentation is on the website
14:40  ssbr: scummos: in the case of the Python standard library, this documentation is on the website
14:40  scummos: i'd like it machine-readable
14:40  scummos: i'd like it machine-readable
14:41  ssbr: scummos: documentation isn't machine-readable, it's English. (Or some other language, sometimes)
14:41  ssbr: scummos: documentation isn't machine-readable, it's English. (Or some other language, sometimes)
14:41  kerio: scummos: the function signature is machine-readable
14:41  kerio: scummos: the function signature is machine-readable
14:41  scummos: kerio: mmh, how can i have a look at that?
14:41  scummos: kerio: mmh, how can i have a look at that?
14:42 --- DasIch_ is now known as DasIch
14:42 --- DasIch_ is now known as DasIch
14:43  rdpate: scummos: inspect.getargspec(func)
14:43  rdpate: scummos: inspect.getargspec(func)
14:43  ssbr: scummos: are you aware that the thing you are suggesting is usually a horrible idea reserved for designs that are kind of iffy?
14:43  ssbr: scummos: are you aware that the thing you are suggesting is usually a horrible idea reserved for designs that are kind of iffy?
14:43  scummos: ssbr: usually. but for what i'm doing, it's necessary.
14:43  scummos: ssbr: usually. but for what i'm doing, it's necessary.
14:44  ssbr: scummos: What are you doing?
14:44  ssbr: scummos: What are you doing?
14:44  ssbr: perhaps it's necessary as a solution to a problem that is structed unnecessarily, and so on.
14:44  ssbr: perhaps it's necessary as a solution to a problem that is structed unnecessarily, and so on.
14:44  kerio: scummos: you're lying
14:44  kerio: scummos: you're lying
14:44  scummos: ssbr: generating machine-readable documentation, parameter information etc.
14:44  scummos: ssbr: generating machine-readable documentation, parameter information etc.
14:44  ssbr: basically it is NEVER required.
14:44  ssbr: basically it is NEVER required.
14:44  kerio: oh, you're rewriting pydoc
14:44  kerio: oh, you're rewriting pydoc
14:44  kerio: i see
14:44  kerio: i see
14:44  ssbr: (proof: turing completeness)
14:44  ssbr: (proof: turing completeness)
14:45  scummos: kerio: i'm writing a language plugin for a development environment
14:45  scummos: kerio: i'm writing a language plugin for a development environment
14:45  scummos: and i *need* to pre-parse the packages and builtin functions, and generate some machine-readable stuff out of it which contains information on docstrings, names, and parameters
14:45  scummos: and i *need* to pre-parse the packages and builtin functions, and generate some machine-readable stuff out of it which contains information on docstrings, names, and parameters
14:45  kerio: so you're rewriting IDLE
14:45  kerio: so you're rewriting IDLE
14:46  scummos: oO
14:46  scummos: oO
14:47  scummos: c'mon, it's written in tkinter
14:47  scummos: c'mon, it's written in tkinter
14:47  scummos: doesn't that say everything?
14:47  scummos: doesn't that say everything?
14:47  kerio: it's portable
14:47  kerio: it's portable
14:47  scummos: Qt is, too
14:47  scummos: Qt is, too
14:47  kerio: and fast
14:47  kerio: and fast
14:50  scummos: rdpate: thanks, that's cool! anything similar for builtin functions?
14:50  scummos: rdpate: thanks, that's cool! anything similar for builtin functions?
14:50  ssbr: scummos: No.
14:50  ssbr: scummos: No.
14:50  scummos: kerio: are you actually using idle? ;p
14:50  scummos: kerio: are you actually using idle? ;p
14:50  kerio: yup!
14:50  kerio: yup!
14:50  scummos: mkay
14:50  scummos: mkay
14:50  scummos: ssbr: do you just want to troll me, or help?
14:50  scummos: ssbr: do you just want to troll me, or help?
14:51  ssbr: scummos: Excuse me?
14:51  ssbr: scummos: Excuse me?
14:51  ssbr: I gave you an answer.
14:51  ssbr: I gave you an answer.
14:51  ssbr: No, there is nothing similar for builtin functions. Because builtin functions do not (cannot) expose their argspec
14:51  ssbr: No, there is nothing similar for builtin functions. Because builtin functions do not (cannot) expose their argspec
14:51  scummos: okay...
14:51  scummos: okay...
14:51  ssbr: you can try to parse the docstring, if the docstring documents it.
14:51  ssbr: you can try to parse the docstring, if the docstring documents it.
14:51  ssbr: If not, you're screwed.
14:51  ssbr: If not, you're screwed.
14:51  scummos: mh...
14:51  scummos: mh...
14:51 14:51  ssbr: Did I mention what you're doing is a terrible idea? this is only the beginning! ssbr: Did I mention what you're doing is a terrible idea? this is only the beginning!

14:51  scummos: what of what i am doing is a terrible idea
14:51  scummos: what of what i am doing is a terrible idea
14:51  papna_: scummos: Why are you trying to do that?
14:51  papna_: scummos: Why are you trying to do that?
14:52  ssbr: (that said, steal a look at the way bpython does this)
14:52  ssbr: (that said, steal a look at the way bpython does this)
14:52  kerio: or idlelib!
14:52  kerio: or idlelib!
14:52  papna_: scummos: If you have a function, you should know what arguments it takes a priori.
14:52  papna_: scummos: If you have a function, you should know what arguments it takes a priori.
14:52  ssbr: papna_: he's writing a new IDLE thing
14:52  ssbr: papna_: he's writing a new IDLE thing
14:52  fleischwolf: hi, question on global/local variables: http://pastebin.com/J9uQXNJu - let's say mything is a bar object, how do i get myvar in the do method ? - foo and bar are in different modules btw
14:52  fleischwolf: hi, question on global/local variables: http://pastebin.com/J9uQXNJu - let's say mything is a bar object, how do i get myvar in the do method ? - foo and bar are in different modules btw
14:52  infobob: http://paste.pocoo.org/show/275785/ (repasted for fleischwolf)
14:52  infobob: http://paste.pocoo.org/show/275785/ (repasted for fleischwolf)
14:52  papna_: Oh.
14:52  papna_: Oh.
14:52  scummos: all i'd need was a python file containing pseudo-definitions for all available functions, and i'm trying to generate such a thing
14:52  scummos: all i'd need was a python file containing pseudo-definitions for all available functions, and i'm trying to generate such a thing
14:53  ssbr: fleischwolf: pass it in as an argument
14:53  ssbr: fleischwolf: pass it in as an argument
14:53  ssbr: fleischwolf: python isn't dynamically scoped, so you can't do it otherwise.
14:53  ssbr: fleischwolf: python isn't dynamically scoped, so you can't do it otherwise.
14:53  fleischwolf: ssbr: damn, it looks so bad passed as an argument :(
14:53  fleischwolf: ssbr: damn, it looks so bad passed as an argument :(
14:53  ssbr: (I mean, not without relying on implementation-detail hackery that is so strongly discouraged as to make you a pariah in my eyes!)
14:53  ssbr: (I mean, not without relying on implementation-detail hackery that is so strongly discouraged as to make you a pariah in my eyes!)
14:53  papna_: ssbr: You know that isn't strictly...true.
14:53  papna_: ssbr: You know that isn't strictly...true.
14:54  papna_: fleischwolf: No, it looks great.
14:54  papna_: fleischwolf: No, it looks great.
14:54  papna_: fleischwolf: It looks bad if it's missing.
14:54  papna_: fleischwolf: It looks bad if it's missing.
14:54  papna_: Gone.
14:54  papna_: Gone.
14:54 14:54  papna_: Magic. papna_: Magic.

14:54  papna_: Unfindable.
14:54  papna_: Unfindable.
14:54  ssbr: fleischwolf: if it looks bad, you probably structured your class boundaries wrong or something
14:54  ssbr: fleischwolf: if it looks bad, you probably structured your class boundaries wrong or something
14:54 --- sentabi_ is now known as sentabi
14:54 --- sentabi_ is now known as sentabi
14:54 14:54  papna_: If it's not passed, there's nothing to read, so it's completely unreadable. papna_: If it's not passed, there's nothing to read, so it's completely unreadable.

14:54  fleischwolf: well, i write a MUD engine and item.throwaway(player) just looks awful
14:54  fleischwolf: well, i write a MUD engine and item.throwaway(player) just looks awful
14:55  papna_: It does?
14:55  papna_: It does?
14:55  ssbr: fleischwolf: so you structured your methods wrong
14:55  ssbr: fleischwolf: so you structured your methods wrong
14:56  papna_: fleischwolf: You mean it looks bad because it's sort of backwards?
14:56  papna_: fleischwolf: You mean it looks bad because it's sort of backwards?
14:56  ssbr: or else you structured your attributes wrong. Maybe the item should have a player attribute, for example
14:56  ssbr: or else you structured your attributes wrong. Maybe the item should have a player attribute, for example
14:56  kerio: the opposite
14:56  kerio: the opposite
14:56  papna_: fleischwolf: If item only has one player, maybe you should have passed the player in at item's __init__?
14:56  papna_: fleischwolf: If item only has one player, maybe you should have passed the player in at item's __init__?
14:56  ssbr: (or maybe it should be player.throwaway(item), which would avoid the pointless cycle)
14:56  ssbr: (or maybe it should be player.throwaway(item), which would avoid the pointless cycle)
14:57  papna_: Also, this is the point where someone points out that if you're writing a MUD, we hope you're using Twisted.
14:57  papna_: Also, this is the point where someone points out that if you're writing a MUD, we hope you're using Twisted.
14:57  scummos: i'd need something like this, just for python
14:57  scummos: i'd need something like this, just for python
14:57  scummos: http://pastie.org/1223261
14:57  scummos: http://pastie.org/1223261
14:57  ssbr: scummos: sorry, I didn't see your question
14:57  ssbr: scummos: sorry, I didn't see your question
14:58  fleischwolf: problem is, there are lots of items and it's kinda bad to iterate through all the items to find out the one, which belong to a particular player
14:58  fleischwolf: problem is, there are lots of items and it's kinda bad to iterate through all the items to find out the one, which belong to a particular player
14:58  ssbr: the terrible idea is trying to get the arguments of a function
14:58  ssbr: the terrible idea is trying to get the arguments of a function
14:58  ssbr: basically, you can't actually know the arguments of a function for sure
14:58  ssbr: basically, you can't actually know the arguments of a function for sure
14:58  ssbr: you can guess, and you'll be right for some functions
14:58  ssbr: you can guess, and you'll be right for some functions
14:58  scummos: ssbr: why can i only guess the arguments of the random.randint function...
14:58  scummos: ssbr: why can i only guess the arguments of the random.randint function...
14:58  papna_: An evil enough callable could even take different arguments at different times.
14:58  papna_: An evil enough callable could even take different arguments at different times.
14:58  ssbr: for some other functions, you'll be technically correct, but the information will be seriously uninformative-- it will be too vague and not indicative of what you should really see. **kwargs? sure, what does that mean? actually it takes three kwargs only, but you can't tell
14:58  ssbr: for some other functions, you'll be technically correct, but the information will be seriously uninformative-- it will be too vague and not indicative of what you should really see. **kwargs? sure, what does that mean? actually it takes three kwargs only, but you can't tell
14:58  ssbr: scummos: and for builtins it doesn't even work at all.
14:58  ssbr: scummos: and for builtins it doesn't even work at all.
14:59  fleischwolf: if i backlink the item to a player it would be redundant (because it's already saved in the player's inventory) @ssbr, @papna_
14:59  fleischwolf: if i backlink the item to a player it would be redundant (because it's already saved in the player's inventory) @ssbr, @papna_
14:59  scummos: ssbr: there is documentation for builtin functions, isnt there.
14:59  scummos: ssbr: there is documentation for builtin functions, isnt there.
14:59  scummos: the documentation tells what arguments they take,.
14:59  scummos: the documentation tells what arguments they take,.
14:59  papna_: fleischwolf: Why does the item need to know what the player is?
14:59  papna_: fleischwolf: Why does the item need to know what the player is?
14:59  ssbr: scummos: machine readable documentation? If you're lucky.
14:59  ssbr: scummos: machine readable documentation? If you're lucky.
14:59  scummos: ssbr: that's what i'm looking for.
14:59  scummos: ssbr: that's what i'm looking for.
14:59  papna_: fleischwolf: I imagine if I was writing this, my items wouldn't ever need that information. Evidently yours do.
14:59  papna_: fleischwolf: I imagine if I was writing this, my items wouldn't ever need that information. Evidently yours do.
14:59  ssbr: scummos: Yeah, that's what you're looking for. And you might get it, sometimes.
14:59  ssbr: scummos: Yeah, that's what you're looking for. And you might get it, sometimes.
15:00  ssbr: But sometimes you won't. you can't reliably get the argspec of a function.
15:00  ssbr: But sometimes you won't. you can't reliably get the argspec of a function.
15:00  scummos: why?
15:00  scummos: why?
15:00  ssbr: scummos: I just described why, in complete detail.
15:00  ssbr: scummos: I just described why, in complete detail.
15:00  papna_: fleischwolf: If it was pointless, your item wouldn't need the player.
15:00  papna_: fleischwolf: If it was pointless, your item wouldn't need the player.
15:00  ssbr: scummos: which part are you confused about? **kwargs? builtin functions?
15:00  ssbr: scummos: which part are you confused about? **kwargs? builtin functions?
15:00  scummos: ssbr: not every function takes * or ** arguments...
15:00  scummos: ssbr: not every function takes * or ** arguments...
15:00  papna_: fleischwolf: It's YOUR design that requires the item to have the player.
15:00  papna_: fleischwolf: It's YOUR design that requires the item to have the player.
15:00  papna_: scummos: Every C function does.
15:00  papna_: scummos: Every C function does.
15:00  scummos: ssbr: in fact, most functions don't
15:00  scummos: ssbr: in fact, most functions don't
15:00  ssbr: scummos: I didn't say that no function can't be understood
15:00  ssbr: scummos: I didn't say that no function can't be understood
15:01  ssbr: scummos: I said, specifically, that you can't reliably do it
15:01  ssbr: scummos: I said, specifically, that you can't reliably do it
15:01  scummos: papna_: still, the documentation says what arguments it expects exactly
15:01  scummos: papna_: still, the documentation says what arguments it expects exactly
15:01  ssbr: scummos: this translates to, "only some"
15:01  ssbr: scummos: this translates to, "only some"
15:01  fleischwolf: papna_: because when i throw away the item, it has to know from where to move where. i can justify my design a little more, if you want :)
15:01  fleischwolf: papna_: because when i throw away the item, it has to know from where to move where. i can justify my design a little more, if you want :)
15:01  ssbr: scummos: It does *SOMETIMES*
15:01  ssbr: scummos: It does *SOMETIMES*
15:01  papna_: scummos: Sometimes.
15:01  papna_: scummos: Sometimes.
15:01  ssbr: scummos: C functions are not *required* to do that.
15:01  ssbr: scummos: C functions are not *required* to do that.
15:01  ssbr: and many do not.
15:01  ssbr: and many do not.
15:01  scummos: yeah, okay, that's in fact not my problem then. i'd be fine if I had the information on the functions that actually *do*
15:01  scummos: yeah, okay, that's in fact not my problem then. i'd be fine if I had the information on the functions that actually *do*
15:01  papna_: fleischwolf: I'm not claiming your design is wrong, I'm saying your design requires an item to know its player.
15:01  papna_: fleischwolf: I'm not claiming your design is wrong, I'm saying your design requires an item to know its player.
15:01  ssbr: scummos: the problem is not that there are no functions for which you can get the argspec-- there are functions for which you can. The problem is that there are very many for which you can get no useful argspec.
15:01  ssbr: scummos: the problem is not that there are no functions for which you can get the argspec-- there are functions for which you can. The problem is that there are very many for which you can get no useful argspec.
15:02  magcius: ssbr, what's the argument?
15:02  magcius: ssbr, what's the argument?
15:02  fleischwolf: papna_: but there has to be a better option than backlinking it or passing the player as an argument :(
15:02  fleischwolf: papna_: but there has to be a better option than backlinking it or passing the player as an argument :(
15:02  papna_: scummos: This information isn't available outside the documentation though.
15:02  papna_: scummos: This information isn't available outside the documentation though.
15:02  ssbr: scummos: the road to making a generic getargspec function is rife with pain. Honestly just steal it from the bpython source if you're making an IDLE clone
15:02  ssbr: scummos: the road to making a generic getargspec function is rife with pain. Honestly just steal it from the bpython source if you're making an IDLE clone
15:02  papna_: fleischwolf: You WANT the item to have the player.
15:02  papna_: fleischwolf: You WANT the item to have the player.
15:02  papna_: fleischwolf: This is accomplished by PASSING the player to the item.
15:02  papna_: fleischwolf: This is accomplished by PASSING the player to the item.
15:02  magcius: ssbr, I thought bpython just did inspect.getargspec?
15:02  magcius: ssbr, I thought bpython just did inspect.getargspec?
15:02  ssbr: bpython *does* try to parse the first line of the docstring for builtin functions. it obviously can't always succeed, but it makes a go at it
15:02  ssbr: bpython *does* try to parse the first line of the docstring for builtin functions. it obviously can't always succeed, but it makes a go at it
15:03  ssbr: magcius: er, does it?
15:03  ssbr: magcius: er, does it?
15:03  ssbr: I'd swear it did docstring parsing
15:03  ssbr: I'd swear it did docstring parsing
15:03  papna_: fleischwolf: If your design is weird, the solution is to deal with it or to refactor it, not to add some sort of magic.
15:03  papna_: fleischwolf: If your design is weird, the solution is to deal with it or to refactor it, not to add some sort of magic.
15:03  papna_: fleischwolf: If you want X to have Y, you give Y X.
15:03  papna_: fleischwolf: If you want X to have Y, you give Y X.
15:03  fleischwolf: papna_ okok, just scared by the awful look and confused by the global var restrictions
15:03  fleischwolf: papna_ okok, just scared by the awful look and confused by the global var restrictions
15:03  papna_: fleischwolf: Hiding the passing doesn't help a thing. It only makes it worse.
15:03  papna_: fleischwolf: Hiding the passing doesn't help a thing. It only makes it worse.
15:03  kifkif: hi, how can I test if a datetime is passed or not
15:03  kifkif: hi, how can I test if a datetime is passed or not
15:03  scummos: i'm going to have a look at the idle code...
15:03  scummos: i'm going to have a look at the idle code...
15:03  kifkif: ?
15:03  kifkif: ?
15:03  papna_: fleischwolf: Passing state through globals is always wrong.
15:03  papna_: fleischwolf: Passing state through globals is always wrong.
15:04  papna_: kifkif: You want to check an argument's type?
15:04  papna_: kifkif: You want to check an argument's type?
15:04  papna_: kifkif: If so, don't.
15:04  papna_: kifkif: If so, don't.
15:04  papna_: Know.
15:04  papna_: Know.
15:04  phetips: i find it scary twisted actually has a plugin called manhole_tap
15:04  phetips: i find it scary twisted actually has a plugin called manhole_tap
15:04  fleischwolf: papna_: yeah, i know it's bad style - maybe i just backlink it. it's just one pointer more
15:04  fleischwolf: papna_: yeah, i know it's bad style - maybe i just backlink it. it's just one pointer more
15:04  papna_: Python doesn't have pointers.
15:04  papna_: Python doesn't have pointers.
15:05  rdpate: fleischwolf: perhaps the player or another actor should throw away the item, not the item throwing itself away
15:05  rdpate: fleischwolf: perhaps the player or another actor should throw away the item, not the item throwing itself away
15:05  papna_: fleischwolf: If you don't like your design, making it 10x worse isn't going to help.
15:05  papna_: fleischwolf: If you don't like your design, making it 10x worse isn't going to help.
15:05  kifkif: papna-work, don't know what you are talking about
15:05  kifkif: papna-work, don't know what you are talking about
15:05  papna_: kifkif: What do you mean "test if a datetime is passed or not"?
15:05  papna_: kifkif: What do you mean "test if a datetime is passed or not"?
15:06  kifkif: I have a datetime object which str representation is 2005-06-04 10:00:00
15:06  kifkif: I have a datetime object which str representation is 2005-06-04 10:00:00
15:06  papna_: kifkif: Ohhhhh.
15:06  papna_: kifkif: Ohhhhh.
15:06  kifkif: I meant "in the past or in the future"
15:06  kifkif: I meant "in the past or in the future"
15:06  papna_: kifkif: foo > bar
15:06  papna_: kifkif: foo > bar
15:06  kifkif: sorry for the confusion
15:06  kifkif: sorry for the confusion
15:06  papna_: kifkif: For datetimes, greater means later.
15:06  papna_: kifkif: For datetimes, greater means later.
15:06  kifkif: papna_, that's it ???
15:06  kifkif: papna_, that's it ???
15:06  fleischwolf: rdpate: well the problem is, that different items require different actions, like "drink potion" is possible, but "drink sword" is not
15:06  fleischwolf: rdpate: well the problem is, that different items require different actions, like "drink potion" is possible, but "drink sword" is not
15:06  kifkif: whoa
15:06  kifkif: whoa
15:06  papna_: kifkif: So that_datetime < datetime.datetime.now()
15:06  papna_: kifkif: So that_datetime < datetime.datetime.now()
15:07  Taos: fleischwolf: so just write options and if they dont work set them to return None?
15:07  Taos: fleischwolf: so just write options and if they dont work set them to return None?
15:07  rdpate: fleischwolf: whichever is doing the throwing away could call a method of the item; it seems strange that throwaway() would drink, though
15:07  rdpate: fleischwolf: whichever is doing the throwing away could call a method of the item; it seems strange that throwaway() would drink, though
15:07  papna_: fleischwolf: http://www.mccullagh.org/db9/d30-12/sword-swallower-after.jpg15:07 
 papna_: fleischwolf: http://www.mccullagh.org/db9/d30-12/sword-swallower-after.jpg
15:07  Wild_Cat: fleischwolf: sure. player.drink(potion) would raise UndrinkableItemError.
15:07  Wild_Cat: fleischwolf: sure. player.drink(potion) would raise UndrinkableItemError.
15:07  kakulukia: lo there, im doing a total basic open(some_imge_path, 'r').read(), but python wont read the whole file .. it stops after a few bytes .. what could be the problem?
15:07  kakulukia: lo there, im doing a total basic open(some_imge_path, 'r').read(), but python wont read the whole file .. it stops after a few bytes .. what could be the problem?
15:08  Wild_Cat: (which would likely be a subclass of ValueError)
15:08  Wild_Cat: (which would likely be a subclass of ValueError)
15:08  papna_: player.items["Blue potion"].drink() seems more normal to me.
15:08  papna_: player.items["Blue potion"].drink() seems more normal to me.
15:08  kerio: kakulukia: keep reading
15:08  kerio: kakulukia: keep reading
15:08  Wild_Cat: fleischwolf: the player performs the actions -- therefore, the player class should implement the methods. Objects should have state that can be queried, e.g. potion.drinkable -> True but sword.drinkable -> False.
15:08  Wild_Cat: fleischwolf: the player performs the actions -- therefore, the player class should implement the methods. Objects should have state that can be queried, e.g. potion.drinkable -> True but sword.drinkable -> False.
15:08  Wild_Cat: (also, my earlier example was player.drink(sword), not player.drink(potion) :p )
15:08  Wild_Cat: (also, my earlier example was player.drink(sword), not player.drink(potion) :p )
15:09  rdpate: player.drink(player.backpack.remove("blue potion"))
15:09  rdpate: player.drink(player.backpack.remove("blue potion"))
15:09  papna_: TypeError
15:09  papna_: TypeError
15:09  fleischwolf: yeah, but when i want to extend item sets, i have to do it in the player class
15:09  fleischwolf: yeah, but when i want to extend item sets, i have to do it in the player class
15:09  Wild_Cat: fleischwolf: not necessarily.
15:09  Wild_Cat: fleischwolf: not necessarily.
15:10  kakulukia: kerio, what u mean by keep reading? read(): "When size is omitted or negative, the entire contents of the file will be read and returned"
15:10  kakulukia: kerio, what u mean by keep reading? read(): "When size is omitted or negative, the entire contents of the file will be read and returned"
15:10  Wild_Cat: fleischwolf: your items have state you can query. That includes potential player status changes when performing some actions on them.
15:10  Wild_Cat: fleischwolf: your items have state you can query. That includes potential player status changes when performing some actions on them.
15:10  kerio: kakulukia: nah, it's probably not that simple
15:10  kerio: kakulukia: nah, it's probably not that simple
15:10  Wild_Cat: fleischwolf: e.g. potion.hp_increase_when_drunk = 20; hi_potion.hp_increase_when_drunk = 40; etc.
15:10  Wild_Cat: fleischwolf: e.g. potion.hp_increase_when_drunk = 20; hi_potion.hp_increase_when_drunk = 40; etc.
15:10  magcius: kakulukia, you want to read in binary mode
15:10  magcius: kakulukia, you want to read in binary mode
15:10  Wild_Cat: (those names are horrible)
15:10  Wild_Cat: (those names are horrible)
15:10  kerio: also, try to open it in bin-dammit magcius
15:10  kerio: also, try to open it in bin-dammit magcius
15:11  magcius: kakulukia, so with open('images/foo.png', 'rb') as f: contents = f.read()
15:11  magcius: kakulukia, so with open('images/foo.png', 'rb') as f: contents = f.read()
15:11  magcius: kakulukia, also, for the most part, image files of that sort are best left as files passed to an API
15:11  magcius: kakulukia, also, for the most part, image files of that sort are best left as files passed to an API
15:11  fleischwolf: ok, i think i need to explain my design a little bit more
15:11  fleischwolf: ok, i think i need to explain my design a little bit more
15:12  magcius: fleischwolf, what are you making?
15:12  magcius: fleischwolf, what are you making?
15:12  fleischwolf: a MUD engine, magcius
15:12  fleischwolf: a MUD engine, magcius
15:12  kakulukia: sweet thanks .. such a tiny lil b .. dammit!
15:12  kakulukia: sweet thanks .. such a tiny lil b .. dammit!
15:12  magcius: roguelike?
15:12  magcius: roguelike?
15:12  magcius: ah
15:12  magcius: ah
15:12  rdpate: Wild_Cat: more like potion.actions = {"drink": {"+hp": 20}}?
15:12  rdpate: Wild_Cat: more like potion.actions = {"drink": {"+hp": 20}}?
15:12  magcius: fleischwolf, server or client?
15:12  magcius: fleischwolf, server or client?
15:12  magcius: rdpate, nah
15:12  magcius: rdpate, nah
15:12  fleischwolf: magcius: server, a whole engine
15:12  fleischwolf: magcius: server, a whole engine
15:12  magcius: fleischwolf, so a server.
15:12  magcius: fleischwolf, so a server.
15:13  Wild_Cat: rdpate: probably more like a StatusEffect(hp=20) somewhere, but that's just me. Besides, we're not designing the whole thing right now
15:13  Wild_Cat: rdpate: probably more like a StatusEffect(hp=20) somewhere, but that's just me. Besides, we're not designing the whole thing right now
15:13  Wild_Cat: that's fleischwolf's job :p
15:13  Wild_Cat: that's fleischwolf's job :p
15:14  rdpate: I was more focusing on a group of actions keyed by action type with multiple status changes per action type rather than a few hundred potential attributes :)
15:14  rdpate: I was more focusing on a group of actions keyed by action type with multiple status changes per action type rather than a few hundred potential attributes :)
15:15  fleischwolf: ok, my shiny design: the string is passed through a semantics object, which returns an action object. the action object is passed to the player, who calls action.do() - the action object passes the name of the item to the inventory or room and gets back suitable item objects, which are then called.
15:15  fleischwolf: ok, my shiny design: the string is passed through a semantics object, which returns an action object. the action object is passed to the player, who calls action.do() - the action object passes the name of the item to the inventory or room and gets back suitable item objects, which are then called.
15:15  magcius: fleischwolf, the string is a user's command?
15:15  magcius: fleischwolf, the string is a user's command?
15:16  fleischwolf: yap
15:16  fleischwolf: yap
15:16  magcius: so "take blue potion"
15:16  magcius: so "take blue potion"
15:16  magcius: would turn into TakeAction(name="blue potion")
15:16  magcius: would turn into TakeAction(name="blue potion")
15:16  ibansal: hi all
15:16  ibansal: hi all
15:16  fleischwolf: exactly
15:16  fleischwolf: exactly
15:17  ibansal: can anyone explain me that why when we use "line" in gtk toolbarbutton can be drawn in all directions whereas "arrows" cant be
15:17  ibansal: can anyone explain me that why when we use "line" in gtk toolbarbutton can be drawn in all directions whereas "arrows" cant be
15:17  magcius: ibansal, that's a GTK+ question
15:17  magcius: ibansal, that's a GTK+ question
15:17  magcius: ibansal, irc.gnome.org, channel #gtk+
15:17  magcius: ibansal, irc.gnome.org, channel #gtk+
15:18  ibansal: magcius, okay
15:18  ibansal: magcius, okay
15:18  magcius: ibansal, there's also #pygtk, but not as helpful, since it's mostly talk on dev of the bindings
15:18  magcius: ibansal, there's also #pygtk, but not as helpful, since it's mostly talk on dev of the bindings
15:18  scummos: mh, looks like idle does this pretty dynamically
15:18  scummos: mh, looks like idle does this pretty dynamically
15:19  magcius: fleischwolf, to be honest, I feel you'd get better separation with most of the logic in the action command
15:19  magcius: fleischwolf, to be honest, I feel you'd get better separation with most of the logic in the action command
15:19  magcius: fleischwolf, how you're doing it now is fine, what's your problem?
15:19  magcius: fleischwolf, how you're doing it now is fine, what's your problem?
15:19  magcius: scummos, IDLE isn't really a good code base to follow
15:19  magcius: scummos, IDLE isn't really a good code base to follow
15:20  ibansal: magcius, sorry to ask but i am not able to find the channel gtk+
15:20  ibansal: magcius, sorry to ask but i am not able to find the channel gtk+
15:20  scummos: magcius: i noticed... ;p
15:20  scummos: magcius: i noticed... ;p
15:20  magcius: ibansal, irc.gnome.org?
15:20  magcius: ibansal, irc.gnome.org?
15:20  magcius: ibansal, not on freenode
15:20  magcius: ibansal, not on freenode
15:20  scummos: well, guess i'll do something manually, then
15:20  scummos: well, guess i'll do something manually, then
15:20  scummos: i could imagine worse things to parse than the python docs ;D
15:20  scummos: i could imagine worse things to parse than the python docs ;D
15:20  magcius: scummos, see here: http://bitbucket.org/bobf/bpython/src/tip/bpython/inspection.py
15:20  magcius: scummos, see here: http://bitbucket.org/bobf/bpython/src/tip/bpython/inspection.py
15:21  magcius: scummos, http://bitbucket.org/bobf/bpython/src/tip/bpython/inspection.py#cl-213
15:21  magcius: scummos, http://bitbucket.org/bobf/bpython/src/tip/bpython/inspection.py#cl-213
15:21  ibansal: magcius, okay
15:21  ibansal: magcius, okay
15:21  fleischwolf: magcius: the action object calls the items methods and checks if there any methods suitable.
15:21  fleischwolf: magcius: the action object calls the items methods and checks if there any methods suitable.
15:21  magcius: fleischwolf, the problem?
15:21  magcius: fleischwolf, the problem?
15:21  Wild_Cat: these links remind me we haven't seen bob_f here in ages. :(
15:21  Wild_Cat: these links remind me we haven't seen bob_f here in ages. :(
15:21  magcius: Wild_Cat, he's in #git and #bpython
15:21  magcius: Wild_Cat, he's in #git and #bpython
15:22  fleischwolf: magcius: i have to pass the player to the item, so the item knows which attributes to increase, to which inventory it should be added, etc - and this makes awful looking code like item.throwaway(player)
15:22  fleischwolf: magcius: i have to pass the player to the item, so the item knows which attributes to increase, to which inventory it should be added, etc - and this makes awful looking code like item.throwaway(player)
15:23  rdpate: fleischwolf: do you just want item.used_by(player)?
15:23  rdpate: fleischwolf: do you just want item.used_by(player)?
15:23  hunternet: can anyone recommend me a good python IDE for Ubuntu OS ?
15:23  hunternet: can anyone recommend me a good python IDE for Ubuntu OS ?
15:24  Kaedenn: Gedit.
15:24  Kaedenn: Gedit.
15:24  pk4r: vim.
15:24  pk4r: vim.
15:24  Kaedenn: Hiss.
15:24  Kaedenn: Hiss.
15:24  rdpate: hunternet: just use your favorite editor
15:24  rdpate: hunternet: just use your favorite editor
15:24  fleischwolf: rdpate: yeah, i could backlink the item to the player, but it would be a bit redundant
15:24  fleischwolf: rdpate: yeah, i could backlink the item to the player, but it would be a bit redundant
15:24  rdpate: Kaedenn: never heard of hiss, is it as great as vim?
15:24  rdpate: Kaedenn: never heard of hiss, is it as great as vim?
15:24  fleischwolf: hunternet: eric
15:24  fleischwolf: hunternet: eric
15:24  Wild_Cat: hunternet: start with a good text editor. Eclipse + Pydev is good too, but only for big projects if you're not familiar with it already.
15:24  Wild_Cat: hunternet: start with a good text editor. Eclipse + Pydev is good too, but only for big projects if you're not familiar with it already.
15:26  scummos: magcius: hmm, that also "only" does regular expression docstring parsing to read the arguments, doesn't it?
15:26  scummos: magcius: hmm, that also "only" does regular expression docstring parsing to read the arguments, doesn't it?
15:27  hunternet: thanks guys
15:27  hunternet: thanks guys
15:29  scummos: mh. when I run: pydoc -w random , then it writes exactly the information i want to a html file
15:29  scummos: mh. when I run: pydoc -w random , then it writes exactly the information i want to a html file
15:29  scummos: so it *must* be available somewhere
15:29  scummos: so it *must* be available somewhere
15:29  mercutio22: how can I call the nth element of a tuple as a variable? Just as I wold using a list?
15:29  mercutio22: how can I call the nth element of a tuple as a variable? Just as I wold using a list?
15:29  magcius: scummos, right
15:29  magcius: scummos, right
15:29  magcius: scummos, read the pydoc source
15:29  magcius: scummos, read the pydoc source
15:30  ssbr: scummos: the pydoc module!
15:30  ssbr: scummos: the pydoc module!
15:30  scummos: :)
15:30  scummos: :)
15:30  scummos: maybe I can also make pydoc print me something which is easier to read than html?
15:30  scummos: maybe I can also make pydoc print me something which is easier to read than html?
15:30  scummos: if not, i'll just parse the HTML, that's not *that* bad
15:30  scummos: if not, i'll just parse the HTML, that's not *that* bad
15:30  scummos: the default output is not that bad, already
15:30  scummos: the default output is not that bad, already
15:31  hunternet: Wild_Cat, is pydev an extension for eclipse or a stand alone program?
15:31  hunternet: Wild_Cat, is pydev an extension for eclipse or a stand alone program?
15:31  dash: scummos: what do want to do with this info?
15:31  dash: scummos: what do want to do with this info?
15:31  Wild_Cat: hunternet: Eclipse extension.
15:31  Wild_Cat: hunternet: Eclipse extension.
15:31  scummos: dash: throw it into a language plugin for KDevelop
15:31  scummos: dash: throw it into a language plugin for KDevelop
15:31  dash: hunternet: it's python support for eclipse.
15:31  dash: hunternet: it's python support for eclipse.
15:31  hunternet: thanks
15:31  hunternet: thanks
15:31  dash: scummos: Aah. then definitely don't do what pydoc does
15:31  dash: scummos: Aah. then definitely don't do what pydoc does
15:32  scummos: sorry?
15:32  scummos: sorry?
15:32  dash: scummos: pydoc runs the code to extract doc info
15:32  dash: scummos: pydoc runs the code to extract doc info
15:32  dash: scummos: tools like pydoctor do source analysis
15:32  dash: scummos: tools like pydoctor do source analysis
15:32  pantsman: mercutio22: since it's zero-indexed, the nth element is t[n-1]
15:32  pantsman: mercutio22: since it's zero-indexed, the nth element is t[n-1]
15:32  scummos: dash: when I do have the python code, I can extract doc info myself, and I also do so
15:32  scummos: dash: when I do have the python code, I can extract doc info myself, and I also do so
15:32 15:32  scummos: dash: i just want documentation on builtin modules, like, for example, random scummos: dash: i just want documentation on builtin modules, like, for example, random

15:33  dash: scummos: oh, sorry, i'm not all the way awake, you were referring to builtin/extension modules.
15:33  dash: scummos: oh, sorry, i'm not all the way awake, you were referring to builtin/extension modules.
15:33  scummos: yes :)
15:33  scummos: yes :)
15:33  dash: so yes, you'd have to import those
15:33  dash: so yes, you'd have to import those
15:33  scummos: that's not that bad; in fact, all I want is a file with pseudo-code for the modules
15:33  scummos: that's not that bad; in fact, all I want is a file with pseudo-code for the modules
15:34  scummos: which only contains parameters, docstrings, and function definitions
15:34  scummos: which only contains parameters, docstrings, and function definitions
15:35  lazzurs: Hello, I am having a problem with ctypes in python.  The windows dll I am loading starts a thread on a specific call however it appears once the call returns the thread is blocked
15:35  lazzurs: Hello, I am having a problem with ctypes in python.  The windows dll I am loading starts a thread on a specific call however it appears once the call returns the thread is blocked
15:35  ibansal: magcius, there is no response there
15:35  ibansal: magcius, there is no response there
15:35  ibansal: can you help me on the above
15:35  ibansal: can you help me on the above
15:35  guibou: Hello. I'm wondering how can I use (efficiently) a mmaped file in memory as an array.array('h'). The idea may be to change the memoryview of the array to make it read the mmaped file
15:35  guibou: Hello. I'm wondering how can I use (efficiently) a mmaped file in memory as an array.array('h'). The idea may be to change the memoryview of the array to make it read the mmaped file
15:36  magcius: ibansal, irc.gnome.org?
15:36  magcius: ibansal, irc.gnome.org?
15:36  magcius: ibansal, try irc.gimp.net
15:36  magcius: ibansal, try irc.gimp.net
15:36  ibansal: magcius, yep
15:36  ibansal: magcius, yep
15:36  magcius: er
15:36  magcius: er
15:36  magcius: irc.gimp.org
15:36  magcius: irc.gimp.org
15:36  lazzurs: I thought this might have something to do with the GIL so I tried stackless python and running the call in a tasklet but it appears to have made no difference
15:36  lazzurs: I thought this might have something to do with the GIL so I tried stackless python and running the call in a tasklet but it appears to have made no difference
15:36  lazzurs: is this likely to be a python issue or am I looking in the wrong place and is it really an issue with the dll?
15:36  lazzurs: is this likely to be a python issue or am I looking in the wrong place and is it really an issue with the dll?
15:37  magcius: lazzurs, never mix ctypes and threads, really
15:37  magcius: lazzurs, never mix ctypes and threads, really
15:37  lazzurs: magcius: very open to better suggestions
15:37  lazzurs: magcius: very open to better suggestions
15:37  magcius: lazzurs, don't mix ctypes and threads?
15:37  magcius: lazzurs, don't mix ctypes and threads?
15:37  lazzurs: sadly I cannot change the dll as this has been provided by a vendor and even small changes require expensive recertification
15:37  lazzurs: sadly I cannot change the dll as this has been provided by a vendor and even small changes require expensive recertification
15:38  magcius: lazzurs, if you can reproduce the problem on multiple machines
15:38  magcius: lazzurs, if you can reproduce the problem on multiple machines
15:38  mercutio22: pantsman: thanks
15:38  mercutio22: pantsman: thanks
15:38  magcius: lazzurs, feel free to file a bug if you think it is python (i.e. works with multiple DLLs)
15:38  magcius: lazzurs, feel free to file a bug if you think it is python (i.e. works with multiple DLLs)
15:38  b52: how can i listen for changes to a file?
15:38  b52: how can i listen for changes to a file?
15:38  ssbr: b52: On what OS?
15:38  ssbr: b52: On what OS?
15:38  b52: linux
15:38  b52: linux
15:38  lazzurs: magcius: sadly this is an interface for specific hardware on an embedded platform so hard to test with other systems but I will try.  The lib does work with another application
15:38  lazzurs: magcius: sadly this is an interface for specific hardware on an embedded platform so hard to test with other systems but I will try.  The lib does work with another application
15:39  magcius: b52, define "linux" a bit better
15:39  magcius: b52, define "linux" a bit better
15:39  b52: magcius: looked at the changes i did to python-mpd-twisted? youre fine with it?
15:39  b52: magcius: looked at the changes i did to python-mpd-twisted? youre fine with it?
15:39  b52: magcius: linux 2.6.2x
15:39  b52: magcius: linux 2.6.2x
15:39  ssbr: b52: inotify
15:39  ssbr: b52: inotify
15:39  lazzurs: magcius: I guess there is no thread safe alternative to ctypes when it comes to python?
15:39  lazzurs: magcius: I guess there is no thread safe alternative to ctypes when it comes to python?
15:39  magcius: b52, either use inotify, or, if you know you'll be on gnome platforms, gio/gvfs
15:39  magcius: b52, either use inotify, or, if you know you'll be on gnome platforms, gio/gvfs
15:40  magcius: lazzurs, I personally would do embedded programming in C
15:40  magcius: lazzurs, I personally would do embedded programming in C
15:40  hunternet: can you recommend a good python 3.x free book?
15:40  hunternet: can you recommend a good python 3.x free book?
15:40  dash: lazzurs: cython is a nice compromise. http://cython.org/
15:40  dash: lazzurs: cython is a nice compromise. http://cython.org/
15:40  magcius: hunternet, why do you want to learn python 3?
15:40  magcius: hunternet, why do you want to learn python 3?
15:40  dash: lazzurs: it's a python-like syntax that compiles to C, and you can call C and Python functions from it.
15:40  dash: lazzurs: it's a python-like syntax that compiles to C, and you can call C and Python functions from it.
15:40  magcius: lazzurs, either you'll get very C-like python, or very buggy code
15:40  magcius: lazzurs, either you'll get very C-like python, or very buggy code
15:41  dash: hunternet: the docs at python.org are probably your best bet
15:41  dash: hunternet: the docs at python.org are probably your best bet
15:41  kerio: cython is great to make very easy wrappers
15:41  kerio: cython is great to make very easy wrappers
15:41  hunternet: magcius, because want get into programming
15:41  hunternet: magcius, because want get into programming
15:41  magcius: hunternet, learn python 2 for now
15:41  magcius: hunternet, learn python 2 for now
15:41  hunternet: ok
15:41  hunternet: ok
15:41  dash: hunternet: 2.x is probably the better place to start because it has more libraries available
15:41  dash: hunternet: 2.x is probably the better place to start because it has more libraries available
15:41  arkanes: lazzurs: I'm checking my scrollback and you've said a lot of things about threads, the GIL, and stackless that aren't true
15:41  arkanes: lazzurs: I'm checking my scrollback and you've said a lot of things about threads, the GIL, and stackless that aren't true
15:41  phetips: magcius: that bothers me
15:41  phetips: magcius: that bothers me
15:41  magcius: hunternet, and for that, we recommend http://tinyurl.com/thinkcspy
15:41  magcius: hunternet, and for that, we recommend http://tinyurl.com/thinkcspy
15:41  kerio: hunternet: there's a link in the topic for new programmers
15:41  kerio: hunternet: there's a link in the topic for new programmers
15:41  phetips: magcius: from what i read, python 3 seems to have loads of improvements from python2
15:41  phetips: magcius: from what i read, python 3 seems to have loads of improvements from python2
15:42  dash: hunternet: but see the 'python 2 or 3?' link in the topic
15:42  dash: hunternet: but see the 'python 2 or 3?' link in the topic
15:42  lazzurs: magcius: when I say embedded think more full pc but with custom hardware additions running windows XP embedded
15:42  lazzurs: magcius: when I say embedded think more full pc but with custom hardware additions running windows XP embedded
15:42  dash: phetips: It has some minor changes
15:42  dash: phetips: It has some minor changes
15:42  phetips: dash: really?
15:42  phetips: dash: really?
15:42  arkanes: lazzurs: so it's possible that your problems are related more to that than ctypes
15:42  arkanes: lazzurs: so it's possible that your problems are related more to that than ctypes
15:42  dash: phetips: I would not call it "loads of improvements"
15:42  dash: phetips: I would not call it "loads of improvements"
15:42  phetips: dash: hmm okay
15:42  phetips: dash: hmm okay
15:42  kerio: windows xp embedded?
15:42  kerio: windows xp embedded?
15:42  magcius: phetips, a big philosophy of Python is to reuse code where possible
15:42  magcius: phetips, a big philosophy of Python is to reuse code where possible
15:42  kerio: why would someone want that
15:42  kerio: why would someone want that
15:42  phetips: magcius: haha, so i have learned ;)
15:42  phetips: magcius: haha, so i have learned ;)
15:42  lazzurs: dash: I will have a look at cython, thanks
15:42  lazzurs: dash: I will have a look at cython, thanks
15:42  dash: phetips: what were you thinking of, in particular?
15:42  dash: phetips: what were you thinking of, in particular?
15:42  ssbr: well this is a new trick
15:42  ssbr: well this is a new trick
15:42  ssbr: "sorted(dict1, key=dict1.get)"
15:42  ssbr: "sorted(dict1, key=dict1.get)"
15:42  ssbr: what do you guys think of that?
15:42  ssbr: what do you guys think of that?
15:42  magcius: dash, I forget, does cython have native implementations of things llike range?
15:42  magcius: dash, I forget, does cython have native implementations of things llike range?
15:43  dash: magcius: I think so
15:43  dash: magcius: I think so
15:43  phetips: not sure, because i couldn't really place it at the time, but i thought it had to do with a better implementation of OOP, something with dictionaries
15:43  phetips: not sure, because i couldn't really place it at the time, but i thought it had to do with a better implementation of OOP, something with dictionaries
15:43  magcius: ssbr, sorts by value?
15:43  magcius: ssbr, sorts by value?
15:43  phetips: and references to data types or something?
15:43  phetips: and references to data types or something?
15:43  dash: magcius: but it also has c-style for syntax
15:43  dash: magcius: but it also has c-style for syntax
15:43  ssbr: magcius: yeah
15:43  ssbr: magcius: yeah
15:43  magcius: dash, ooh, nice
15:43  magcius: dash, ooh, nice
15:43  dash: phetips: Nah.
15:43  dash: phetips: Nah.
15:43  phetips: dash: hmm
15:43  phetips: dash: hmm
15:43  magcius: phetips, well, we had a big fight on the mailing list about it:
15:43  magcius: phetips, well, we had a big fight on the mailing list about it:
15:43  magcius: phetips, because we were telling people not to use Python 3, and the "crowds that be" were mad
15:43  magcius: phetips, because we were telling people not to use Python 3, and the "crowds that be" were mad
15:43  phetips: dash: i might be mistaken, but i do have a book on python3 that claims that python3 is much more powerful than earlier versions
15:43  phetips: dash: i might be mistaken, but i do have a book on python3 that claims that python3 is much more powerful than earlier versions
15:44  phetips: but to be perfectly honest i haven't really gotten around to reading it yet
15:44  phetips: but to be perfectly honest i haven't really gotten around to reading it yet
15:44  phetips: magcius: i see
15:44  phetips: magcius: i see
15:44  dash: phetips: I wonder how they measure "power" :)
15:44  dash: phetips: I wonder how they measure "power" :)
15:44  EvanR-work: powerful?
15:44  EvanR-work: powerful?
15:44  lazzurs: arkanes: heh, point taken but this is very simple calls I am making here
15:44  lazzurs: arkanes: heh, point taken but this is very simple calls I am making here
15:44  phetips: powerful in it's expressions
15:44  phetips: powerful in it's expressions
15:44  phetips: in particular
15:44  phetips: in particular
15:44  EvanR-work: then call it expressive
15:44  EvanR-work: then call it expressive
15:44  dash: phetips: i could easily argue that it's less powerful than 2.x!
15:44  dash: phetips: i could easily argue that it's less powerful than 2.x!
15:44  ssbr: phetips: it isn't.
15:44  ssbr: phetips: it isn't.
15:44  EvanR-work: assembly language is powerful
15:44  EvanR-work: assembly language is powerful
15:44  pantsman: most of its expressiveness has been backported
15:44  pantsman: most of its expressiveness has been backported
15:44  phetips: they might've called it that, sorry
15:44  phetips: they might've called it that, sorry
15:44  phetips: haha
15:44  phetips: haha
15:44  magcius: phetips, basically, a lot of the stuff that's in Python 3 has been backported to 2.7
15:44  magcius: phetips, basically, a lot of the stuff that's in Python 3 has been backported to 2.7
15:44  ssbr: phetips: it doesn't add any really amazing new constructs.
15:44  ssbr: phetips: it doesn't add any really amazing new constructs.
15:44  phetips: EvanR-work: indeed it is :)
15:44  phetips: EvanR-work: indeed it is :)
15:44  dash: EvanR-work: What does that mean?
15:44  dash: EvanR-work: What does that mean?
15:45  arkanes: phetips: python3 is not "much" different than python 2 in any way, power or not
15:45  arkanes: phetips: python3 is not "much" different than python 2 in any way, power or not
15:45  magcius: phetips, a lot of it is cleaning up quirks that nobody should ever use anymore
15:45  magcius: phetips, a lot of it is cleaning up quirks that nobody should ever use anymore
15:45  dash: magcius: but, alas, not enough of it
15:45  dash: magcius: but, alas, not enough of it
15:45  EvanR-work: dash: write to anywhere in memory you want, dont be limitted by pesky variables
15:45  EvanR-work: dash: write to anywhere in memory you want, dont be limitted by pesky variables
15:45  magcius: dash, asyncore :(
15:45  magcius: dash, asyncore :(
15:45  EvanR-work: variables get in the way
15:45  EvanR-work: variables get in the way
15:45  arkanes: phetips: it's an incremental improvement, any claims of drastic changes, either positive or negative, are incorrect
15:45  arkanes: phetips: it's an incremental improvement, any claims of drastic changes, either positive or negative, are incorrect
15:45  dash: EvanR-work: Get in the way of what?
15:45  dash: EvanR-work: Get in the way of what?
15:45  phetips: EvanR-work: write to anywhere in memory you want? lies!
15:45  phetips: EvanR-work: write to anywhere in memory you want? lies!
15:45  flatpit: how to resolve the loop-back hostname `localhost` to it's respective ip addr?
15:45  flatpit: how to resolve the loop-back hostname `localhost` to it's respective ip addr?
15:45  magcius: Right.
15:45  magcius: Right.
15:45  EvanR-work: anywhere in your virtual memory... that is mapped
15:45  EvanR-work: anywhere in your virtual memory... that is mapped
15:45  phetips: in real mode yes!
15:45  phetips: in real mode yes!
15:45  phetips: ok ok
15:45  phetips: ok ok
15:45  magcius: Python 3 is basically KDE 4
15:45  magcius: Python 3 is basically KDE 4
15:46  EvanR-work: dash: of writing horrible code!
15:46  EvanR-work: dash: of writing horrible code!
15:46  EvanR-work: of course
15:46  EvanR-work: of course
15:46  magcius: it takes it until 3.3 or 3.4 to actually be usable
15:46  magcius: it takes it until 3.3 or 3.4 to actually be usable
15:46  EvanR-work: 'more powerful' does this to me, sorry
15:46  EvanR-work: 'more powerful' does this to me, sorry
15:46  phetips: i propbably misquoted
15:46  phetips: i propbably misquoted
15:46  magcius: phetips, no, you haven't
15:46  magcius: phetips, no, you haven't
15:46  dash: EvanR-work: so in other words, less powerful languages are better
15:46  dash: EvanR-work: so in other words, less powerful languages are better
15:46  magcius: phetips, a lot of tech books are horrible just because anyone who's remotely qualified won't bother
15:46  magcius: phetips, a lot of tech books are horrible just because anyone who's remotely qualified won't bother
15:47  EvanR-work: more expressive safer languages
15:47  EvanR-work: more expressive safer languages
15:47  EvanR-work: easier to read
15:47  EvanR-work: easier to read
15:47  johncclayton: Hi all - I'm looking to make a completely self contained distributed installation of python.  aim is to run an installer for our product, and have a python environment delivered at the same time - are there existing docs that show me how I can do this, things to watch out for etc?  target os is windows and mac so far.
15:47  johncclayton: Hi all - I'm looking to make a completely self contained distributed installation of python.  aim is to run an installer for our product, and have a python environment delivered at the same time - are there existing docs that show me how I can do this, things to watch out for etc?  target os is windows and mac so far.
15:47  EvanR-work: and understand
15:47  EvanR-work: and understand
15:47  dash: johncclayton: there's py2exe and py2app15:47 
 dash: johncclayton: there's py2exe and py2app
15:47  magcius: johncclayton, is your product open source, or part of it?
15:47  magcius: johncclayton, is your product open source, or part of it?
15:47  ssbr: flatpit: return '127.0.0.1'
15:47  ssbr: flatpit: return '127.0.0.1'
15:47  phetips: all turing machine languages are equally powerful!
15:47  phetips: all turing machine languages are equally powerful!
15:47  dash: johncclayton: remember that osx has python installed already :)
15:47  dash: johncclayton: remember that osx has python installed already :)
15:47 * phetips ducks
15:47 * phetips ducks
15:47  johncclayton: magcius: our product is not open source.
15:47  johncclayton: magcius: our product is not open source.
15:48  kerio: ssbr: pff
15:48  kerio: ssbr: pff
15:48  magcius: johncclayton, ok
15:48  magcius: johncclayton, ok
15:48  kerio: ssbr: return "::1"
15:48  kerio: ssbr: return "::1"
15:48  ssbr: phetips: It's true
15:48  ssbr: phetips: It's true
15:48  dash: phetips: i'd stick with "'power' isn't a meaningful word in this context"
15:48  dash: phetips: i'd stick with "'power' isn't a meaningful word in this context"
15:48  magcius: johncclayton, py2exe is your best bet for Windows so far
15:48  magcius: johncclayton, py2exe is your best bet for Windows so far
15:48  ssbr: the term "powerful" is dumb in CS when applied without extra definitions
15:48  ssbr: the term "powerful" is dumb in CS when applied without extra definitions
15:48  johncclayton: dash: does that work when I also want to deliver django?  I'm *assuming* yes since its all just python.
15:48  johncclayton: dash: does that work when I also want to deliver django?  I'm *assuming* yes since its all just python.
15:48  magcius: johncclayton, but does your product embed or use C extensions in any way?
15:48  magcius: johncclayton, but does your product embed or use C extensions in any way?
15:48  dash: johncclayton: Probably!
15:48  dash: johncclayton: Probably!
15:48  ssbr: it just becomes another way of saying "I think my language is better", without actually saying it, and without adding anything extra
15:48  ssbr: it just becomes another way of saying "I think my language is better", without actually saying it, and without adding anything extra
15:48  magcius: johncclayton, Probably not!
15:48  magcius: johncclayton, Probably not!
15:48  dash: ssbr: that's why it's so great
15:48  dash: ssbr: that's why it's so great
15:49  johncclayton: magcius: i could do, its entirely C++ so far :-)
15:49  johncclayton: magcius: i could do, its entirely C++ so far :-)
15:49  mage_: what's the proper way to terminate a multiprocessing.Process ?
15:49  mage_: what's the proper way to terminate a multiprocessing.Process ?
15:49  EvanR-work: ssbr: id much rather see it say 'python 3 is much more better than 2'
15:49  EvanR-work: ssbr: id much rather see it say 'python 3 is much more better than 2'
15:49  phetips: haha
15:49  phetips: haha
15:49  magcius: johncclayton, does your product also deliver a web server?
15:49  magcius: johncclayton, does your product also deliver a web server?
15:49  dash: ssbr: spekaing of things that are more powerful
15:49  dash: ssbr: spekaing of things that are more powerful
15:49  flatpit: ssbr: no, actually, I'm resolving it because I'm not aware of the ip addr. I'm resolving it to check if there is any DNS issure with it.
15:49  flatpit: ssbr: no, actually, I'm resolving it because I'm not aware of the ip addr. I'm resolving it to check if there is any DNS issure with it.
15:49  ssbr: I'd rather it say 'hey python 3 is sort of cool. You can use it if you want. You know, whatever. It has some great unicode stuff. You dig that? Yeah."
15:49  ssbr: I'd rather it say 'hey python 3 is sort of cool. You can use it if you want. You know, whatever. It has some great unicode stuff. You dig that? Yeah."
15:49  dash: ssbr: how would you feel about homogenous collections for python
15:49  dash: ssbr: how would you feel about homogenous collections for python
15:49  johncclayton: magcius: nope, I want to deliver that, plus lots of stuff that'd be easy in django but harder in C++ alongside
15:49  johncclayton: magcius: nope, I want to deliver that, plus lots of stuff that'd be easy in django but harder in C++ alongside
15:49  ssbr: flatpit: localhost isn't sent the the DNS
15:49  ssbr: flatpit: localhost isn't sent the the DNS
15:49  magcius: flatpit, gethostaddr?
15:49  magcius: flatpit, gethostaddr?
15:49  phetips: use python3, because owsomness was in the specification
15:49  phetips: use python3, because owsomness was in the specification
15:49  ssbr: flatpit: it's resulved, uh, locally
15:49  ssbr: flatpit: it's resulved, uh, locally
15:50  ssbr: dash: what, you mean lists?
15:50  ssbr: dash: what, you mean lists?
15:50  magcius: johncclayton, wait, what?
15:50  magcius: johncclayton, wait, what?
15:50  EvanR-work: owsome
15:50  EvanR-work: owsome
15:50  ssbr: dash: we already have those
15:50  ssbr: dash: we already have those
15:50  magcius: johncclayton, are you using somehting like Boost::Python, py++ or pybindgen?
15:50  magcius: johncclayton, are you using somehting like Boost::Python, py++ or pybindgen?
15:50  dash: ssbr: i.e., a collection that has a guard that coerces input to a given interface
15:50  dash: ssbr: i.e., a collection that has a guard that coerces input to a given interface
15:50  dash: ssbr: or throws an exception
15:50  dash: ssbr: or throws an exception
15:50  ssbr: dash: I think you should make Python statically typed, first
15:50  ssbr: dash: I think you should make Python statically typed, first
15:50  phetips: owsome fo sho
15:50  phetips: owsome fo sho
15:50  dash: ssbr: Why?
15:50  dash: ssbr: Why?
15:50  phetips: statically typed :(
15:50  phetips: statically typed :(
15:50  phetips: is SO 1980!
15:50  phetips: is SO 1980!
15:50  ssbr: dash: because otherwise you're throwing out a huge ton of the usefulness of enforced-homogeneous-lists
15:50  ssbr: dash: because otherwise you're throwing out a huge ton of the usefulness of enforced-homogeneous-lists
15:51  dash: ssbr: the whole point is to do what static typing makes excessively inconvenient
15:51  dash: ssbr: the whole point is to do what static typing makes excessively inconvenient
15:51  EvanR-work: phetips: not really
15:51  EvanR-work: phetips: not really
15:51  dash: ssbr: i'm not seeing it. what do you mean?
15:51  dash: ssbr: i'm not seeing it. what do you mean?
15:51  ssbr: dash: I'll be honest with you, I've never actually added the wrong type to a list by accident
15:51  ssbr: dash: I'll be honest with you, I've never actually added the wrong type to a list by accident
15:51  johncclayton: magcius: summary: I've already got C++ - with zero of the Boost::Python, py++ or pybindgen, and I'm just starting to explore the idea of creating the next part of our product in python.  a requirement for me is NOT to force the user to install pythong + db modules + web server modules etc etc.  so I'm trying to work out what the easiest way might be
15:51  johncclayton: magcius: summary: I've already got C++ - with zero of the Boost::Python, py++ or pybindgen, and I'm just starting to explore the idea of creating the next part of our product in python.  a requirement for me is NOT to force the user to install pythong + db modules + web server modules etc etc.  so I'm trying to work out what the easiest way might be
15:51  ssbr: dash: sooooo...
15:51  ssbr: dash: sooooo...
15:51  flatpit: ssbr: yes, thats what I thought, so far. Some windows setups do make some exceptions to it, maybe because, they are infected or someting else, their localhost resolve points to some brodcast weird ip.
15:51  flatpit: ssbr: yes, thats what I thought, so far. Some windows setups do make some exceptions to it, maybe because, they are infected or someting else, their localhost resolve points to some brodcast weird ip.
15:51  phetips: EvanR-work: well, i wouldn't say it is a thing of the future either
15:51  phetips: EvanR-work: well, i wouldn't say it is a thing of the future either
15:51  flatpit: magcius: thanks :)
15:51  flatpit: magcius: thanks :)
15:52  EvanR-work: dash: enforcing all things in a list/set whatever to have interface X is precisely polymorphic static typing
15:52  EvanR-work: dash: enforcing all things in a list/set whatever to have interface X is precisely polymorphic static typing
15:52  ssbr: EvanR-work: no, because it's not static
15:52  ssbr: EvanR-work: no, because it's not static
15:52  ssbr: it's at run-time
15:52  ssbr: it's at run-time
15:52  EvanR-work: the same effect
15:52  EvanR-work: the same effect
15:52  dash: EvanR-work: Nah, it isn't.
15:52  dash: EvanR-work: Nah, it isn't.
15:52  ssbr: EvanR-work: not the same effect, because you don't get static verification!
15:52  ssbr: EvanR-work: not the same effect, because you don't get static verification!
15:52  ssbr: static verification is great!
15:52  ssbr: static verification is great!
15:52  dash: EvanR-work: And it doesn't have the same effect.
15:52  dash: EvanR-work: And it doesn't have the same effect.
15:52  EvanR-work: right
15:52  EvanR-work: right
15:52  dash: ssbr: I think your idea puts the cart before the horse
15:52  dash: ssbr: I think your idea puts the cart before the horse
15:52  EvanR-work: besides that
15:52  EvanR-work: besides that
15:53  queso: Any idea what's wrong? http://paste.pocoo.org/show/275811/  On another machine, I can run the same exact code without any errors outside a virtualenv and inside one. Both virtualenvs are made with the latest packages.
15:53  queso: Any idea what's wrong? http://paste.pocoo.org/show/275811/  On another machine, I can run the same exact code without any errors outside a virtualenv and inside one. Both virtualenvs are made with the latest packages.
15:53  ssbr: dash: I think I want to properly do Haskell before I set down a firm opinion on this matter
15:53  ssbr: dash: I think I want to properly do Haskell before I set down a firm opinion on this matter
15:53  dash: ssbr: static typing is something i'd like to add later
15:53  dash: ssbr: static typing is something i'd like to add later
15:53  ssbr: Haskell does the statically typed list thing. It's pretty cool.15:53 
 ssbr: Haskell does the statically typed list thing. It's pretty cool.
15:53  phetips: dash: i am using twisted now btw, in case you care ;)
15:53  phetips: dash: i am using twisted now btw, in case you care ;)
15:53  phetips: it is pretty cool
15:53  phetips: it is pretty cool
15:53  dash: ssbr: Eh. Haskell's a different beast
15:53  dash: ssbr: Eh. Haskell's a different beast
15:53 15:53  dash: phetips: ok! dash: phetips: ok!

15:53  ssbr: dash: yerp.
15:53  ssbr: dash: yerp.
15:54  EvanR-work: next stage, 'enforce elements to have interface X Y and Z'
15:54  EvanR-work: next stage, 'enforce elements to have interface X Y and Z'
15:54  dash: EvanR-work: how's that different
15:54  dash: EvanR-work: how's that different
15:54  ssbr: I assume that's what he's doing.
15:54  ssbr: I assume that's what he's doing.
15:54  ssbr: doing it with actual types instead of interfaces would be silly
15:54  ssbr: doing it with actual types instead of interfaces would be silly
15:54  EvanR-work: depends
15:54  EvanR-work: depends
15:55  EvanR-work: i list of numbers is useful
15:55  EvanR-work: i list of numbers is useful
15:55  ssbr: EvanR-work: what if I want a list of numbers.
15:55  ssbr: EvanR-work: what if I want a list of numbers.
15:55  EvanR-work: a list*
15:55  EvanR-work: a list*
15:55  ssbr: pre-2.6, there's no type for that. In fact, even post-2.6, there's not necessarily a type for that.
15:55  ssbr: pre-2.6, there's no type for that. In fact, even post-2.6, there's not necessarily a type for that.
15:55  EvanR-work: or a list of Fooable Barable and Bazable things also could be good, both are expressive of a certain purpose
15:55  EvanR-work: or a list of Fooable Barable and Bazable things also could be good, both are expressive of a certain purpose
15:55  phetips: dash: this is my new solution, using twisted :) http://paste.pocoo.org/show/275813/
15:55  phetips: dash: this is my new solution, using twisted :) http://paste.pocoo.org/show/275813/
15:55  kerio: meh, python already does interface checking
15:55  kerio: meh, python already does interface checking
15:55  phetips: there is still a little quirk i cannot seem to figure out
15:55  phetips: there is still a little quirk i cannot seem to figure out
15:55  magcius: johncclayton, unfortunately, a bundled web server won't be very easy
15:55  magcius: johncclayton, unfortunately, a bundled web server won't be very easy
15:55  kerio: when you try to *use* the interface
15:55  kerio: when you try to *use* the interface
15:56  magcius: johncclayton, it would require some actual effort to get it set up correctly
15:56  magcius: johncclayton, it would require some actual effort to get it set up correctly
15:56  EvanR-work: kerio: but it should check when defining / inserting into the structure
15:56  EvanR-work: kerio: but it should check when defining / inserting into the structure
15:56  kerio: it's great
15:56  kerio: it's great
15:56  dash: ssbr: i'd say using numbers.Numbers is a good proxy for that.
15:56  dash: ssbr: i'd say using numbers.Numbers is a good proxy for that.
15:56  ssbr: kerio: yeah, but that's no good if you want to enforce it eagerly as part of when you add to a list
15:56  ssbr: kerio: yeah, but that's no good if you want to enforce it eagerly as part of when you add to a list
15:56  EvanR-work: get errors sooner
15:56  EvanR-work: get errors sooner
15:56  kerio: EvanR-work: if you get errors, you deserve it
15:56  kerio: EvanR-work: if you get errors, you deserve it
15:56  EvanR-work: 'why the hell is this crap in my list' *backtrace...*
15:56  EvanR-work: 'why the hell is this crap in my list' *backtrace...*
15:56  EvanR-work: kerio: lol.
15:56  EvanR-work: kerio: lol.
15:56  EvanR-work: no lol
15:56  EvanR-work: no lol
15:57  ssbr: dash: Oh I misremembered a thing.
15:57  ssbr: dash: Oh I misremembered a thing.
15:57  ssbr: Yeah, that'd work.
15:57  ssbr: Yeah, that'd work.
15:57  EvanR-work: resistance to programmer error is good not bad
15:57  EvanR-work: resistance to programmer error is good not bad
15:57  kerio: yes it is
15:57  kerio: yes it is
15:58  EvanR-work: dash: but i think it might be actually inappropriate in a python context
15:58  EvanR-work: dash: but i think it might be actually inappropriate in a python context
15:58  ssbr: EvanR-work: dash doesn't do "python"
15:58  ssbr: EvanR-work: dash doesn't do "python"
15:58  ssbr: he does "weird language you can make Python become"
15:58  ssbr: he does "weird language you can make Python become"
15:58  dash: EvanR-work: Hm. Why so?
15:58  dash: EvanR-work: Hm. Why so?
15:58  EvanR-work: if you want to populate / define a list of things using some library that exposes a generator... that happens to output numbers AND bools (because its stupid)
15:58  EvanR-work: if you want to populate / define a list of things using some library that exposes a generator... that happens to output numbers AND bools (because its stupid)
15:58  ssbr: dash: maybe you should do Scheme instead. They love that stuff
15:58  ssbr: dash: maybe you should do Scheme instead. They love that stuff
15:58  ssbr: EvanR-work: hey, bools *are* numbers
15:58  ssbr: EvanR-work: hey, bools *are* numbers
15:58  dash: ssbr: Scheme doesn't have a module system.
15:58  dash: ssbr: Scheme doesn't have a module system.
15:59  johncclayton: magcius: correct, but for us - very worth it.  we considered something like compiling python with --enable-framework, bundling it with our C++ daemon app and kicking off an instance.  since we control the code being delivered that'd work - the pain in the behind is going to be ensuring all the python modules and its deps are compiled and controlled by us in the same way.  another way of saying what I want is: XAMP + Python.
15:59  johncclayton: magcius: correct, but for us - very worth it.  we considered something like compiling python with --enable-framework, bundling it with our C++ daemon app and kicking off an instance.  since we control the code being delivered that'd work - the pain in the behind is going to be ensuring all the python modules and its deps are compiled and controlled by us in the same way.  another way of saying what I want is: XAMP + Python.
15:59  EvanR-work: now you did something wrong, but you wont know until you make the structure
15:59  EvanR-work: now you did something wrong, but you wont know until you make the structure
15:59  ssbr: dash: many schemes do. I think r6rs and racket do. And you were really impressed by that other one whose name escapes me.
15:59  ssbr: dash: many schemes do. I think r6rs and racket do. And you were really impressed by that other one whose name escapes me.
15:59  EvanR-work: and after that youre screwed unless you go through the trouble of making a wrapper to filter out the bools or convert
15:59  EvanR-work: and after that youre screwed unless you go through the trouble of making a wrapper to filter out the bools or convert
15:59  dash: ssbr: Clojure, which isn't a scheme
15:59  dash: ssbr: Clojure, which isn't a scheme
15:59  magcius: johncclayton, xampp?
15:59  magcius: johncclayton, xampp?
15:59  ssbr: dash: no, an actual scheme
15:59  ssbr: dash: no, an actual scheme
15:59  ssbr: something something experimental module system somewhat similar to the thing described in the article that inspired exocet
15:59  ssbr: something something experimental module system somewhat similar to the thing described in the article that inspired exocet
15:59  EvanR-work: not necessarily that 'fun' to write code for
15:59  EvanR-work: not necessarily that 'fun' to write code for
15:59  ssbr: anyway, r6rs and racket do.
15:59  ssbr: anyway, r6rs and racket do.
16:00  johncclayton: magcius: google that.  its a combined install of mysql apache etc, in one self-contained directory.
16:00  johncclayton: magcius: google that.  its a combined install of mysql apache etc, in one self-contained directory.
16:00  dash: ssbr: newspeak
16:00  dash: ssbr: newspeak
16:00  magcius: johncclayton, right, I know
16:00  magcius: johncclayton, right, I know
16:00  magcius: johncclayton, a little more context might be helpfil
16:00  magcius: johncclayton, a little more context might be helpfil
16:00  ssbr: dash: no, a *scheme*
16:00  ssbr: dash: no, a *scheme*
16:00  ssbr: 'it had a weird name. damn it I need logs.
16:00  ssbr: 'it had a weird name. damn it I need logs.
16:00  dash: ssbr: hell if i know
16:00  dash: ssbr: hell if i know
16:00  magcius: johncclayton, do you want people to hit *install* and then a few seconds later log in to localhost:8080?
16:00  magcius: johncclayton, do you want people to hit *install* and then a few seconds later log in to localhost:8080?
16:00  EvanR-work: basically the ecosystem isnt designed for homogenous types in general, so you may find the lib you want to use isnt cooperating with your valiant attempt at sane data structures
16:00  EvanR-work: basically the ecosystem isnt designed for homogenous types in general, so you may find the lib you want to use isnt cooperating with your valiant attempt at sane data structures
16:01  dash: EvanR-work: Sure, that's why it's optional
16:01  dash: EvanR-work: Sure, that's why it's optional
16:01  EvanR-work: *nod*
16:01  EvanR-work: *nod*
16:02  EvanR-work: ssbr: whats funny is i came in here to see if people in #python were talking about haskell ;)
16:02  EvanR-work: ssbr: whats funny is i came in here to see if people in #python were talking about haskell ;)
16:02  EvanR-work: i was validated
16:02  EvanR-work: i was validated
16:02  dash: EvanR-work: haskell is for people who don't want to write useful programs
16:02  dash: EvanR-work: haskell is for people who don't want to write useful programs
16:02  EvanR-work: why do you say that
16:02  EvanR-work: why do you say that
16:03  phetips: i think dash likes to make extreme and provocative statements
16:03  phetips: i think dash likes to make extreme and provocative statements
16:03  phetips: i have encountered a similar one yesterday
16:03  phetips: i have encountered a similar one yesterday
16:03  EvanR-work: just making sure ;)
16:03  EvanR-work: just making sure ;)
16:04  ssbr: Haskell is for people that are new to math.
16:04  ssbr: Haskell is for people that are new to math.
16:04  aep: hey, when embedding python, how do i load a specific python file into the interpreter?
16:04  aep: hey, when embedding python, how do i load a specific python file into the interpreter?
16:04  magcius: johncclayton, I'm not sure if twisted has a Django or WSGI handler (I think it does), but that may be worth looking uinto
16:04  magcius: johncclayton, I'm not sure if twisted has a Django or WSGI handler (I think it does), but that may be worth looking uinto
16:04  dash: EvanR-work: it's a language designed by academics for academics
16:04  dash: EvanR-work: it's a language designed by academics for academics
16:04  ssbr: I'm actually not certain of it, but this is the impression I get.
16:04  ssbr: I'm actually not certain of it, but this is the impression I get.
16:04  ssbr: And it is validated by this guy I know. Who does math.
16:04  ssbr: And it is validated by this guy I know. Who does math.
16:04  dash: EvanR-work: the development focus is clever applications of static typing but it' sunsuitable for large-scale development
16:04  dash: EvanR-work: the development focus is clever applications of static typing but it' sunsuitable for large-scale development
16:04  dash: mainly because monads aren't composable
16:04  dash: mainly because monads aren't composable
16:05  ssbr: (it's also for really mathy people, too. I mean, there are oldfags and newfags, right?)
16:05  ssbr: (it's also for really mathy people, too. I mean, there are oldfags and newfags, right?)
16:05  EvanR-work: dash: im actually collecting anti haskell propaganda from freenode, so if you have any more gripes ill be glad to write them down
16:05  EvanR-work: dash: im actually collecting anti haskell propaganda from freenode, so if you have any more gripes ill be glad to write them down
16:05  magcius: xGuys
16:05  magcius: xGuys
16:05  ssbr: dash: wait, they aren't?
16:05  ssbr: dash: wait, they aren't?
16:05  magcius: Guys
16:05  magcius: Guys
16:05  magcius: What do you guys think of mongrel and mongrel2?
16:05  magcius: What do you guys think of mongrel and mongrel2?
16:05  EvanR-work: monads are not composable in general
16:05  EvanR-work: monads are not composable in general
16:05  magcius: Worth it or not?
16:05  magcius: Worth it or not?
16:05  ssbr: magcius: didn't lvh like those?
16:05  ssbr: magcius: didn't lvh like those?
16:05  dash: magcius: I think they are web servers
16:05  dash: magcius: I think they are web servers
16:05  johncclayton: magcius: i'm sure it would be - IRC is a poor replacement for a face to face discussion! :-)  re: localhost:8080, almost.  I want people to hit "install", and not have to worry about all the installation headaches (cos they don't care, they are customers).   No user is supposed to *use* the python code, its only there to provide a SOA stack that implements a bunch of functionality that our C++  app needs.  that's what I meant when I said "we
16:05  johncclayton: magcius: i'm sure it would be - IRC is a poor replacement for a face to face discussion! :-)  re: localhost:8080, almost.  I want people to hit "install", and not have to worry about all the installation headaches (cos they don't care, they are customers).   No user is supposed to *use* the python code, its only there to provide a SOA stack that implements a bunch of functionality that our C++  app needs.  that's what I meant when I said "we
16:05  johncclayton: control the code".  We'll deliver the python libs, the code for django, the code for our app etc - without them needing to configure *anything* (in our apps case, we can define the required port numbers too).   Maybe it sounds crazy, but for us, it means we can implement a bunch of features, without writing our own HTTP service, without worrying about how to migrate DB, without solving all the same problems that are already solved in this cas
16:05  johncclayton: control the code".  We'll deliver the python libs, the code for django, the code for our app etc - without them needing to configure *anything* (in our apps case, we can define the required port numbers too).   Maybe it sounds crazy, but for us, it means we can implement a bunch of features, without writing our own HTTP service, without worrying about how to migrate DB, without solving all the same problems that are already solved in this cas
16:05  johncclayton: Django).  Yet, we're a C++ shop - so we cannot simply throw away all our code and rewrite it.
16:05  johncclayton: Django).  Yet, we're a C++ shop - so we cannot simply throw away all our code and rewrite it.
16:05  ssbr: Oh, no, lvh liked fossil
16:05  ssbr: Oh, no, lvh liked fossil
16:05  ssbr: EvanR-work: the general case is frequently irrelevant
16:05  ssbr: EvanR-work: the general case is frequently irrelevant
16:05  johncclayton: magcius: and thanks for taking the time to understand it
16:05  johncclayton: magcius: and thanks for taking the time to understand it
16:06  EvanR-work: ssbr: right, all the main instances are effectively composable
16:06  EvanR-work: ssbr: right, all the main instances are effectively composable
16:06  ssbr: OK. That's cool then.
16:06  ssbr: OK. That's cool then.
16:06  magcius: ssbr, dash: I'm asking about code quality, but ok
16:06  magcius: ssbr, dash: I'm asking about code quality, but ok
16:06  ssbr: magcius: you didn't, uh, actually say anything about code quality
16:06  ssbr: magcius: you didn't, uh, actually say anything about code quality
16:06  magcius: dash, and yes, mongrel2 is zed shaw's server, like whatever his email app was
16:06  magcius: dash, and yes, mongrel2 is zed shaw's server, like whatever his email app was
16:06  ssbr: you just asked if they were "worth it"
16:06  ssbr: you just asked if they were "worth it"
16:07  dash: EvanR-work: i don't always agree with this guy but he says some interesting stuff: http://unqualified-reservations.blogspot.com/2007/08/whats-wrong-with-cs-research.html
16:07  dash: EvanR-work: i don't always agree with this guy but he says some interesting stuff: http://unqualified-reservations.blogspot.com/2007/08/whats-wrong-with-cs-research.html
16:07  magcius: lamson
16:07  magcius: lamson
16:08  magcius: I remember people saying that Lamson was a mess of asyncore
16:08  magcius: I remember people saying that Lamson was a mess of asyncore
16:08  EvanR-work: dash: thanks
16:08  EvanR-work: dash: thanks
16:09  magcius: johncclayton, do you already have an app in Django you want to distribute?
16:09  magcius: johncclayton, do you already have an app in Django you want to distribute?
16:09  magcius: johncclayton, or part of it?
16:09  magcius: johncclayton, or part of it?
16:10  johncclayton: magcius: no, only ideas that would fit quite well with Django's set of delivered API's and services
16:10  johncclayton: magcius: no, only ideas that would fit quite well with Django's set of delivered API's and services
16:10  johncclayton: magcius: so I'm not married to Django if that's what you mean
16:10  johncclayton: magcius: so I'm not married to Django if that's what you mean
16:10  magcius: johncclayton, from experience, I'd say that Django isn't worth it, but that's not my call or what you're asking
16:10  magcius: johncclayton, from experience, I'd say that Django isn't worth it, but that's not my call or what you're asking
16:11  magcius: johncclayton, is this going to be a light-weight thing (web log viewer) or something like a web frontend to a currently-GUI medical reporting app?
16:11  magcius: johncclayton, is this going to be a light-weight thing (web log viewer) or something like a web frontend to a currently-GUI medical reporting app?
16:11  johncclayton: magcius: depends on the problem domain I suspect.  we need a way to expose a service via HTTP, that access sqlite but would potentially use other DB's in the future.  that's about it for now.
16:11  johncclayton: magcius: depends on the problem domain I suspect.  we need a way to expose a service via HTTP, that access sqlite but would potentially use other DB's in the future.  that's about it for now.
16:12  magcius: johncclayton, oh, a simple API?
16:12  magcius: johncclayton, oh, a simple API?
16:12  phetips: http://paste.pocoo.org/show/275813/ <-- if anyone could shed some light on why the last line of output is what it is, that would make me a happy man!
16:12  phetips: http://paste.pocoo.org/show/275813/ <-- if anyone could shed some light on why the last line of output is what it is, that would make me a happy man!
16:12  magcius: johncclayton, twisted.web is probably your best bet for now
16:12  magcius: johncclayton, twisted.web is probably your best bet for now
16:13  phetips: twisted.web actually looks kind of cool (as a first impression)
16:13  phetips: twisted.web actually looks kind of cool (as a first impression)
16:13  johncclayton: magicus: yes, the response to the HTTP request will require logic, possible access to an LDAP system, delivery of data back to the caller etc -but that's all possible anyways in python.
16:13  johncclayton: magicus: yes, the response to the HTTP request will require logic, possible access to an LDAP system, delivery of data back to the caller etc -but that's all possible anyways in python.
16:13  magcius: phetips, you're writing another "\n" which is an empty command?
16:13  magcius: phetips, you're writing another "\n" which is an empty command?
16:13  magcius: johncclayton, right, Twisted has most of that
16:13  magcius: johncclayton, right, Twisted has most of that
16:13  johncclayton: magicus: hmmmmm... good idea, maybe I'll go and have a read of that, get a gut feel of the trade offs
16:13  johncclayton: magicus: hmmmmm... good idea, maybe I'll go and have a read of that, get a gut feel of the trade offs
16:13  magcius: johncclayton, Twisted already has something like an XMLRPC client and server
16:13  magcius: johncclayton, Twisted already has something like an XMLRPC client and server
16:13  phetips: oh, crap that print isn't supposed to be there
16:13  phetips: oh, crap that print isn't supposed to be there
16:14  dash: ssbr: Oh. Scheme48.
16:14  dash: ssbr: Oh. Scheme48.
16:14  phetips: oh you are talking about the \n that is at the end of the command sent from the client
16:14  phetips: oh you are talking about the \n that is at the end of the command sent from the client
16:14  ssbr: dash: yes, that sounds right
16:14  ssbr: dash: yes, that sounds right
16:14  ssbr: how'd you remember it?
16:14  ssbr: how'd you remember it?
16:14  magcius: phetips, uh, I'm not sure what's wrong with the output?
16:14  magcius: phetips, uh, I'm not sure what's wrong with the output?
16:14  dash: ssbr: some neurons fired or something, i am not clear on the details
16:14  dash: ssbr: some neurons fired or something, i am not clear on the details
16:14  ssbr: dash: we should work on figuring that out
16:14  ssbr: dash: we should work on figuring that out
16:15 * ssbr switches majors
16:15 * ssbr switches majors
16:15  phetips: magcius: command prompt is sent back twice after every command
16:15  phetips: magcius: command prompt is sent back twice after every command
16:15  magcius: phetips, oh, are you reimplementing rsh or something?
16:15  magcius: phetips, oh, are you reimplementing rsh or something?
16:15  magcius: In Twisted?
16:15  magcius: In Twisted?
16:15  phetips: magcius: just wanted to write a little shell wrapper for fun
16:15  phetips: magcius: just wanted to write a little shell wrapper for fun
16:15  magcius: ok
16:15  magcius: ok
16:16  chill: what is your favorit beginner book for python? German or Englisch
16:16  chill: what is your favorit beginner book for python? German or Englisch
16:17  nosklo: chill: the one in /TOPIC is pretty good
16:17  nosklo: chill: the one in /TOPIC is pretty good
16:17  phetips: magcius: but yes you are a genious, extra newline was the problem :)
16:17  phetips: magcius: but yes you are a genious, extra newline was the problem :)
16:17  phetips: magcius: thanks
16:17  phetips: magcius: thanks
16:17  magcius: phetips, the extra newline in the print?
16:17  magcius: phetips, the extra newline in the print?
16:17  phetips: magcius: not in the print, that was debugging
16:17  phetips: magcius: not in the print, that was debugging
16:17  parthbakshi: how do i execute a function in python at certain intervals
16:17  parthbakshi: how do i execute a function in python at certain intervals
16:17  wolfe: everyone here loves Django, right? :D
16:17  wolfe: everyone here loves Django, right? :D
16:17  magcius: phetips, I'm not sure what you mean
16:17  magcius: phetips, I'm not sure what you mean
16:17  magcius: wolfe, probably not
16:17  magcius: wolfe, probably not
16:17  ssbr: parthbakshi: depends. do you want to do other stuff at the same time? what kind of other stuff? etc.
16:17  ssbr: parthbakshi: depends. do you want to do other stuff at the same time? what kind of other stuff? etc.
16:17  dash: heh i forgot how good this is
16:17  dash: heh i forgot how good this is
16:17  wolfe: D:
16:17  wolfe: D:
16:17  ssbr: wolfe: Nope.
16:17  ssbr: wolfe: Nope.
16:17  dash: "This entire problem space comes down to a single error in the metamathematical approach to computing, which is that the 1930s metamathematicians were fascinated by the fact that they could represent any data structure as a function. While this is true, to describe it as perverse is an insult to perverts."
16:17  dash: "This entire problem space comes down to a single error in the metamathematical approach to computing, which is that the 1930s metamathematicians were fascinated by the fact that they could represent any data structure as a function. While this is true, to describe it as perverse is an insult to perverts."
16:17  nvictor: hey python is it possible to add a folder to pythonpath on commandline?
16:17  nvictor: hey python is it possible to add a folder to pythonpath on commandline?
16:18  dash: nvictor: sure
16:18  dash: nvictor: sure
16:18  ssbr: nvictor: yes. Are you using a unix shell?
16:18  ssbr: nvictor: yes. Are you using a unix shell?
16:18  magcius: wolfe, there's #django for all your django-narcissistic needs
16:18  magcius: wolfe, there's #django for all your django-narcissistic needs
16:18  wolfe: ssbr: let me guess, a turbogears or pylongs enthusiast? :P
16:18  wolfe: ssbr: let me guess, a turbogears or pylongs enthusiast? :P
16:18  ssbr: wolfe: Eh? I like django.
16:18  ssbr: wolfe: Eh? I like django.
16:18  wolfe: *pylons
16:18  wolfe: *pylons
16:18  parthbakshi: its like i have aprogram which has to read data from file at a regular interval
16:18  parthbakshi: its like i have aprogram which has to read data from file at a regular interval
16:18  ssbr: I was just saying, no, some people don't. Here.
16:18  ssbr: I was just saying, no, some people don't. Here.
16:18  wolfe: xD
16:18  wolfe: xD
16:18  chill: nosklo: you mean think python?
16:18  chill: nosklo: you mean think python?
16:18  nvictor: dash, ssbr: i mean with the interpreter itself, is there a flag or option for that?
16:18  nvictor: dash, ssbr: i mean with the interpreter itself, is there a flag or option for that?
16:18  phetips: magcius: http://paste.pocoo.org/show/275818/
16:18  phetips: magcius: http://paste.pocoo.org/show/275818/
16:18  phetips: line 24
16:18  phetips: line 24
16:18  parthbakshi: and the main program has to run continously
16:18  parthbakshi: and the main program has to run continously
16:18  phetips: somehow two newlines were sent to the process
16:18  phetips: somehow two newlines were sent to the process
16:19  ssbr: nvictor: No. But you can use environment variables
16:19  ssbr: nvictor: No. But you can use environment variables
16:19  phetips: so one was indeed an empty command
16:19  phetips: so one was indeed an empty command
16:19  magcius: phetips, ah, the paste I had didn't have that
16:19  magcius: phetips, ah, the paste I had didn't have that
16:19  ssbr: look! PYTHONPATH=$PYTHONPATH;LALA python foo.py
16:19  ssbr: look! PYTHONPATH=$PYTHONPATH;LALA python foo.py
16:19  ssbr: or was it :LALA?
16:19  ssbr: or was it :LALA?
16:19  johncclayton: magcius: so it'd be easy to do Twisted + Thrift for example?
16:19  johncclayton: magcius: so it'd be easy to do Twisted + Thrift for example?
16:19  phetips: using .strip() + '\n' fixed the problem
16:19  phetips: using .strip() + '\n' fixed the problem
16:19  phetips: magcius: ah sorry
16:19  phetips: magcius: ah sorry
16:19  magcius: johncclayton, there's a thrift client for Twisted
16:19  magcius: johncclayton, there's a thrift client for Twisted
16:19  nvictor: ssbr: ok thanks. not really what i wanted.
16:19  nvictor: ssbr: ok thanks. not really what i wanted.
16:20  phetips: have to go, cheers
16:20  phetips: have to go, cheers
16:20  nosklo: chill: yeah, that's great for new programmers
16:20  nosklo: chill: yeah, that's great for new programmers
16:20  nosklo: chill: for existing programmers moving to python, I suggest the official tutorial
16:20  nosklo: chill: for existing programmers moving to python, I suggest the official tutorial
16:21  chill: nosklo: thx do you know "a byte of python" ?
16:21  chill: nosklo: thx do you know "a byte of python" ?
16:22  scummos: heh, that looks good for a start. http://pastie.org/1223436
16:22  scummos: heh, that looks good for a start. http://pastie.org/1223436
16:22  magcius: johncclayton, having a bit more context would be very nice
16:22  magcius: johncclayton, having a bit more context would be very nice
--- Log closed Fri Oct 15 16:33:36 2010
--- Log closed Fri Oct 15 16:33:38 2010
--- Log opened Fri Oct 15 18:17:18 2010
18:17 --- Users 775 nicks [0 ops, 0 halfops, 0 voices, 775 normal]
18:17  EvanR-work: Caribou|: why would you use port 0?
18:18  Caribou|: EvanR-work, mhhh if i'm right port 0 means "whatever the port you can use"
18:18  EvanR-work: for a listening socket you need to specify a port or people wont know how to connect
18:18 --- Channel #python was synced in 91 seconds
18:18  EvanR-work: for a connection, you dont specify a port anyway
18:19  EvanR-work: port 0 is a reserved port number and should not be used for any tcp or udp communications
18:19  Caribou|: ok :X
18:19  andre_pl: is there a reverse of shlex.split? i want to take a list of args and quote them if necessary
18:19  Zal: Choosing between a few available python APIs for Freshbooks. Anyone ever use a Freshbooks API that you'd like to share an opinion about, positive or negative?
18:19  Caribou|: i made a random thing between 0-65000 and my app pick one from it :/
18:20  Caribou|: that's ok for debuggin purposes
18:20  Zal: andre_pl, just quote everything?
18:20  andre_pl: Zal: I suppose that could work.
18:20  EvanR-work: Caribou|: pick one above 1024
18:21  Caribou|: EvanR-work, why ?
18:21  EvanR-work: because less than that are privileged ports used for system servers, like a webserver
18:21  blubbi: anyone here who can read Fortran? I am unshure if I translated this right: http://paste.pocoo.org/show/275868/
18:22  EvanR-work: and usually require adminstrative authorization before listening
18:22  blubbi: just 5 Lines and one line python
18:22  Caribou|: EvanR-work, oh ok, but like i said that's just for local debugging stuff so i don't care
18:22  Caribou|: EvanR-work, oh you mean that it could just not work
18:22  Zal: Caribou|, well, it won't work -- even for debugging
18:22  Caribou|: Zal, i just got it :D
18:22  Caribou|: i'm gonna change my range then
18:22  EvanR-work: it would work if you knew how to give authorization in win7, i guess by typing in a password or logging in as admin
18:23  Caribou|: thanks
18:27  goshawk: hi
18:27  goshawk: how can i optimize this code?
18:27  goshawk: http://paste.pocoo.org/show/275870/
18:28  goshawk: (which DOESN'T run cuz i modify the dict while iterating)
18:28  papna-work: goshawk: Do you want it to work, or it to work more efficeitnly?
18:28  goshawk: efficently.. i wanna learn :)
18:29  pozican: goshawk: you could create an identical var to kwargs at line 0, then modify that one
18:29  papna-work: goshawk: The former is what matters most. Instead of modifying that dict, you would *create a new dict*.
18:29  goshawk: an one liner could be the best
18:29  papna-work: goshawk: Brevity, efficiency, and quality are three orthogonal things.
18:29  papna-work: The last is what you need to care about 90% of the time.
18:29  goshawk: papna-work, agree, i know how to create list with one-liners but how to create dicts ?
18:30  papna-work: goshawk: dict((k, v) for k, v in d.iteritems() if v[0] != "")
18:30  goshawk: pozican, yep i've thought to that but i think that papna-work has one one line work stuff
18:30  goshawk: ah!
18:30  goshawk: perfect!
18:31  goshawk: papna-work, thanks, it was exactly what i was looking for
18:31  goshawk: so build a dict from tuples
18:31  papna-work: goshawk: You don't optimize random snippets. To optimize, you profile your code, find the hotspots, then consider the algorithms you're using there.
18:31  Zal: I optimize by drinking more coffee
18:31  pozican: coke
18:32  pozican: the drink; not the powder
18:32  pozican: although I presume either would work
18:32  goshawk: k
18:32  goshawk: thanks guys
18:32  pozican: papna-work: There any nifty ways to find hot spots?
18:33  papna-work: pozican: http://docs.python.org/library/profile.html
18:33  pozican: thanks
18:37  tomfmason: what would be the best way to split a line of text by a variable number of words? Is there a simple regex pattern for that?
18:38  nullie: you mean fit in 80 columns?
18:39  comhero: tomfmason, as in: f('please excuse my dear aunt', 2) => ['please excuse', 'my dear', 'aunt'] ?
18:39  tomfmason: nullie: no it isn't for the cmd. I mean say for example I have some text that is ruffly 500 words. I am wanting to find the "long tail keywords" used and their density
18:40  tomfmason: comhero: yes
18:41  tos9: I have a basic memoize with timeout class set up that looks like http://paste.pocoo.org/show/275876/     but I want to be able to do something like the bottom of that (having functions mark other functions for needing recaching the next time they're called). What's a good way to do that? I'm not sure if there's gonna be any circular referencing going on yet, I haven't thought about that carefully yet.
18:41  overdamped: Is there a way to have a set return an object it contains? I'm not seeing it...
18:42  ssbr_: overdamped: what, like, any object?
18:43  ssbr_: next(iter(set)) maybe.
18:43  overdamped: ssbr_: a subclass of object
18:43  tos9: ssbr_: pop
18:43  overdamped: the iterator interface would propbably work for what I'm doing... thanks ssbr_
18:43  tos9: sorry, overdamped ^. But that removes. If you don't want remove then ssbr_'s is better
18:43  overdamped: tos9: I'm trying not to do a destructive operation
18:44  overdamped: tos9: np... thanks :)
18:46  viric: Hallo python maniacs
18:46 --- Twinkletoes is now known as Guest72576
18:46  viric: :)
18:46  viric: I'm more of a C programmer very used to gdb, but I hit an open source program written in python that fails for me
18:47  viric: Can someone advise me how can I get something close to gdb, to debug that problem?
18:47  Zal: viric, pdb
18:47  viric: (for the problem in the python program)
18:47  viric: Zal: does it come with python?
18:47  Zal: hm, it does on my Slackware Linux
18:47  viric: ok
18:47  viric: I'll look for it
18:48  nullie: does it fail with sigsegv?
18:48  viric: no
18:48  viric: some python exception
18:49  Zal: viric, http://docs.python.org/library/pdb.html
18:49  viric: Zal: it is a command line tool, right?
18:49  Zal: viric, the exception traceback will pinpoint the exact line anyway though
18:49  Zal: viric, it's a python module
18:49  viric: well, I know the line. But I want more :)
18:49  papna-work: viric: pdb has some similarity to gdb
18:49  viric: ah, python module?
18:49  viric: how should I use it?
18:49  papna-work: viric: Most Python problems can be debugged without iot.
18:50  Zal: viric, see the link I posted
18:50  viric: I'll read that.
18:54  rfdickerson: Can anyone recommend a good guide for developing a large python project? or should I just check out opensource code examples?
18:55  comhero: tomfmason, http://fpaste.org/SADx/ . im sure this is awful as i'm new too but it does work!
18:55  Level: anyone have suggestions on parsing unified
18:55 --- sartf is now known as skfin|Hki
18:56  edbaffei: hi .. guys please help http://dpaste.com/258439/ am trying to combine two lists
18:58  tos9: comhero: There's a double colon syntax in indexing!
18:59  tos9: comhero: tomfmason  could do something like (" ".join(x) for x in map(None, *(s.split()[i::num_words] for i in range(num_words))) which is basically like what you have, but I'm sure there's a better way
18:59  Level: anyone know of a module to help parse unified file format?
18:59  edbaffei: am sorry guys if this is google'ble,.. i cant find it.. is this easy to do? http://dpaste.com/258441/
18:59  tomfmason: comhero: I was working on building a regex pattern like ''.join(['(?=\w)\S{1,}' for n in range(3)])
18:59  ssbr_: Level: "unified file format"?
19:00  tos9: tomfmason: ew, don't do that, you don't need a regex here
19:00  ssbr_: tos9: l2zip
19:00  ssbr_: (learn to zip)
19:01  Level: ssbr_: unified/unified2
19:01  tos9: ssbr_: that assumes the lists are the same length (i.e. the string is divisible by 3). Mine does too since he's gonna get an error, but at least that will allert him
19:01  Level: snort logs
19:01  ssbr_: then use the other zip.
19:01  ssbr_: (itertools)
19:02  tos9: ssbr_: yeah, I thought it was in there but didn't see it... Which one is it? Lemme check the docs, it's not izip that's just an iterable right
19:02  tos9: Oh izip_longest... yeah
19:02  tos9: So that. Thanks :)
19:04  tomkmem: hi, how can i make 56.725648403 to 56.72 ?
19:05  tomkmem: is there a function that can do this?
19:06 --- AlienDev_ is now known as AlienDev
19:06  viric: zal, papna-work: in pdb, how can I 'interrupt' the program running pressing some keys (like sending SIGINT to a gdb debugged program), so that I can continue it later?
19:06  [diecast]: tomkmem: you mean 56.73?
19:07  [diecast]: print "%.2f" % 56.725648403
19:07  tomkmem: yeah i just want 2 digits after the decimal
19:07  tomkmem: ah let me try that
19:10  tomkmem: i was thinking somethnig like : newnumber=function(oldnumber)
19:11  ssbr_: def function(num): return floor(num*100)/100
19:11  ssbr_: (er, math.floor)
19:12 --- Unode is now known as _Unode
19:13  comhero: tomfmason, tos9, http://fpaste.org/Qs28/
19:13 --- sartf is now known as skfin|Hki
19:14 --- _Unode is now known as Unode
19:16  skyl: why when I ``pip install docutils==0.7`` it works fine but if I put ``docutils==0.7`` in a requirements file and pip install -r the file I get ``No distributions at all found for docutils==0.7 (from -r requirements.txt (line 31))``
19:25  muraii: muffinresearch: I check periodically, but I assume you're no longer working on your python Twitter app, right?
19:25  muraii: ...assuming you're the right author.  +)
--- Log closed Sat Oct 16 11:43:50 2010
