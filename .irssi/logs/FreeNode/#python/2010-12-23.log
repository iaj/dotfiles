--- Log opened Thu Dec 23 00:00:01 2010
--- Day changed Thu Dec 23 2010
00:00  sickn3ss: mahmul, I have a list.txt I'm opening it with python and reading every character
00:00  sickn3ss: I want to replace every special character with 's'
00:00  SegFaultAX: sickn3ss: So 1 would be the lower of !?
00:00  papna_: sickn3ss: Not really. You can use str.translate
00:00  papna_: sickn3ss: Or str.replace
00:00  mahmul: sickn3ss: what papna_ said
00:00  sickn3ss: papna, yea str.replace accepts 3 arguments
00:00  sickn3ss: and there are a lot of special keys
00:01  papna_: sickn3ss: What's "special" mean?
00:01  sickn3ss: papna, shift + numbers
00:01  sickn3ss: !,@,#,$
00:01  papna_: sickn3ss: Whose keyboard
00:01  papna_: ?
00:01  merwok: The input method has nothing to do with the character type.
00:01  sickn3ss: papna, I'm importing a .txt which contains special characters and I want to change them to 's'
00:01 --- ajfAFK is now known as ajf
00:02  papna_: sickn3ss: Right, shift+numbers on whose keyboard?
00:02  BattlePope: one update of xchat later...
00:02  sickn3ss: I've done similar things with lower case characters, upper case one, digits
00:02  BattlePope: :)
00:02  sickn3ss: papna, what do you mean on whose keyboard ?
00:02  merwok: sickn3ss: Try [char for char in string if char.isalpha() else 's'], or use unicodedata
00:02  papna_: sickn3ss: "special characters" isn't a simply defined thing.
00:02  papna_: sickn3ss: You're imagining some clear set, but haven't defined it.
00:02  merwok: sickn3ss: ! is not shift+key on my keyboard.
00:03  sickn3ss: papna, well what does the input matter ?
00:03  papna_: sickn3ss: Python probably doesn't define whatever you're imagining, so you'll have to do it yourself.
00:03  sickn3ss: I have them in a .txt file
00:03  papna_: sickn3ss: Becuase you defined it as shift+numbers, but that is a regional thing.
00:03  merwok: sickn3ss: What we’re saying is that “special characters” or “shift+number” has no meaning
00:03  SegFaultAX: I think in this case special means any non alphanumeric character, no?
00:03  papna_: sickn3ss: You defined it as a typing thing, but different people's keyboard work differently.
00:03  sickn3ss: yea but I can't really explain them
00:04  papna_: SegFaultAX: That's not at all what he said.
00:04  papna_: sickn3ss: Well, you'll need to explain them completely rigourously if you want a computer to understand.
00:04  sickn3ss: well probably I should have said same thing as SegFaultAX
00:04  merwok: sickn3ss, tried my method with isalpha or isalnum?
00:05  SegFaultAX: papna_: That's how I interpreted his predicate.
00:05  sickn3ss: merwok, I'm trying now with isalpha
00:05  papna_: SegFaultAX: import this
00:06  SegFaultAX: papna_: I say it each night before I got to bed. :)
00:07  sickn3ss: merwok, it worked thank you
00:08 --- bunburya is now known as ghoulmaster
00:08  merwok: Have a good part of day everyone.
00:08  JDunc: anyone here have experiance dealing with mod_wsgi problems, i've run into one and dont know how to get past it
00:09  GrahamDumpleton: JDunc: What is the problem?
00:10  JDunc: well i guess first off i'm operating on window xp, the code works fine standalone.
00:11  JDunc: i'll paste you my error from apache's log
00:11  JDunc: mod_wsgi (pid=4132): Target WSGI script 'C:/merlin/arthur.wsgi' cannot be loaded as Python module.
00:11  JDunc: mod_wsgi (pid=4132): Exception occurred processing WSGI script 'C:/merlin/arthur.wsgi'.
00:11  JDunc:  Traceback (most recent call last):
00:11  JDunc:    File "C:/merlin/arthur.wsgi", line 29, in <module>
00:11  JDunc:      from psycopg2 import tz
00:11  JDunc:    File "C:\\Python26\\lib\\site-packages\\psycopg2\\__init__.py", line 69, in <module>
00:11  JDunc:      from _psycopg import BINARY, NUMBER, STRING, DATETIME, ROWID
00:11  JDunc:  ImportError: DLL load failed: The specified module could not be found.
00:11  JDunc: tz.py is in my files
00:11  mahmul: JDunc: don't paste into the channel
00:12  JDunc: ohh sorry
00:12  ivazquez|laptop: Sounds familiar.
00:12  ivazquez|laptop: Never seen it on Windows though.
00:26  GuySoft: hey i seem to have a problem - i have a regex i want to run on a file, is that possible?
00:27  jY: i have log lines like "1:update:something here"  the 1 is a key and 1 might be listed 100 times in the logs.. whats the most efficient way if i know all the keys.. to find the last line for each key in a log file?
00:27  GrahamDumpleton: JDunc: http://stackoverflow.com/questions/4212240/importerror-cannot-import-name-tz-psycopg2
00:29  victori_: is there anyway to "undo" a monkey patch?
00:29  victori_: as in dereference the overloaded method
00:30  GuySoft: nm.. it's NP-complete
00:36  kerio: oh god ze code repetition
00:36  kerio: does anyone here have a smart solution to make this more compact? http://paste.pound-python.org/show/825/
00:37  papna_: kerio: http://paste.pound-python.org/show/826/
00:37  kerio: ugh it doesn't load
00:37  kerio: is that your solution?
00:38  bob2: victori_: did you keep a reference to the old one?
00:38  papna_: kerio: I recommend the code I posted instead.
00:38  bob2: jY: iterate over the lines, update a dict
00:38  bob2: jY: ~5 loc
00:38  bob2: GuySoft: yes, sure
00:38  kerio: papna_: yeah but it doesn't load
00:39  jY: bob2, ok that's what i was gonna do.. just wondering if there was some way to do it better
00:39  bob2: jY: heh, it's a pretty good way ;p
00:40  jY: what do you mean by ~5 loc?
00:40  bob2: your solution should be about 5 lines long
00:40  kerio: papna_: it loaded now. it was a dirty trick
00:40  bob2: init dict, open, iterate, split, put in dict, print dict
00:40  jY: bob2, ya its like 6 now
00:40  kerio: also fuck you, fibonacci numbers are awesome
00:41  bob2: kerio: write a fibonacci-based crypto-system
00:41  simon: or a fibonacci-based heap
00:42  bob2: i guess that has the advantage of existing
00:45  accipter: what is the preferred method for calling functions from the parent class? super(Parent, self).f()?
00:46  papna_: accipter: 1) super(ThisClassAkaTheChild, self).f()
00:46  papna_: accipter: 2) Not using inheritance.
00:47  papna_: accipter: 3) Not overriding methods when you use inheritance.
00:49  accipter: is there something incorrect about modifying the behavior through subclassing?
00:49  papna_: accipter: Not incorrect, no.
00:50  accipter: but perhaps not the best practice?
00:50  papna_: accipter: Depends who you ask!
00:50  roe_: where would I look to see if there is already a module to read the dhcpd.leases file?
00:50  papna_: accipter: What are you subclassing?
00:51  accipter: I have a class for creating a generic dialog, but I need to customize one of widgets in the dialog.
00:52  papna_: roe_: pypi.python.org , google
00:52  roe_: thanks
00:52  xarxer: Is it possible to download the complete documentation for python in html format?
00:53  papna_: xarxer: docs.python.org/download
00:53  xarxer: papna_: thanks :>
00:57  toonacid: Is there a way to get the absolute path of the current scripts directory, but one level up?
00:58  bob2: is that because you want to import something?
00:59 --- ajf is now known as ajfAFK
01:01  toonacid: bob2: No, I'm building an absolute path in a variable. Paths that I need to do things like append to sys.path, add to the site, etc.
01:01  bob2: yeah, don't do that with sys.path
01:01  bob2: but __file__
01:06  nosklo: toonacid: don't manipulate sys.path directly in your script.
01:07  klawd: guys, am i getting this right? i should not define accessor methods if they do nothing but set and get an attribute? i should just set the attribute and maybe later decorate it with property?
01:07  ivazquez|laptop: Correct.
01:08  klawd: ok
01:08  klawd: thanks
01:08  toonacid: I'm trying to do something like "os.path.dirname('%s/..' % __file__)", of course that doesn't work, silly example, but ya.
01:08  BattlePope: hmmm... now I'm trying to move down another level. I can print out a list of weapons, but I also want to print out the number of kills, which is an element of the weapon. I tried to access the info as before (e.g. weapon[u'kills']) but I am getting a "string indices must be integers" error. http://paste.pound-python.org/show/828/
01:08  bob2: toonacid: can  you give us a real example of a thing you're trying to do?
01:08  bob2: BattlePope: weapon is a string
01:09  klawd: should i use foo = list() or foo = []?
01:09  klawd: same for dict
01:09  bob2: latter
01:09  bob2: though it doesn't really matter
01:09  klawd: ok, any explanation as to why?
01:09  bob2: that's just what everyone does
01:09  BattlePope: how do I then access the deeper info?
01:09  klawd: ok
01:10  bob2: BattlePope: do you understand the problem?
01:10  BattlePope: yeah
01:10  ivazquez|laptop: [] is handled by the compiler. list() is a function called at runtime.
01:10  BattlePope: My code is trying to access an element of a string, which could only be the letters therein
01:11  bob2: BattlePope: player[u'weapons'][weapon[[u'kills']
01:11  BattlePope: but I don't know how to do what I do want to do, which is to use that as a key(?) or index to find the rest of the data
01:11  bob2: iterating over a dict gives you keys
01:11  jpic: hi all, what elegant ways of making many lazy properties are offered by python 2.7?
01:11  bob2: what's with the unicode keys
01:11  BattlePope: JSON
01:11  bob2: jpic: what are lazy properties?
01:11  bob2: oh man
01:12 --- Wfx is now known as Wfx|web
01:12  papna: bob2: Why not?
01:12  jpic: bob2: by "lazy" i mean that they would initialize on their first access
01:12  BattlePope: so I can't use my previous variables for this? I guess that makes sense.
01:12  toonacid: bob2: Hopefully this helps you understand what I'm trying to do a little more. http://pastebin.com/9JPPccGd
01:12  infobob: http://paste.pound-python.org/show/829/ (repasted for toonacid)
01:13  bob2: jpic: maybe be more specific as to what you're doing?
01:13  bob2: BattlePope: don't know what that means, all you have are masses of dicts and you're iterating over their keys
01:14  bob2: papna: I dunno, I find big masses of nested dicts confusing, not least because the repr will suck
01:14  papna: bob2: Why not unicode keys, I mean.
01:14  BattlePope: well, for instance i defined player in a for loop, then used it to access the next deeper level
01:14  hoangelos: having some problems with reportlab and utf8 characters that are invalid.  It seems to be coming from reportlab themselves: http://dpaste.com/289602/
01:14  BattlePope: I was wondering why that stopped working for this particular level
01:14  BattlePope: please forgive me if its a foolish quesion
01:14  bob2: papna: oh, I'm just a lazy english speaker,I guess
01:14  ivazquez|laptop: Why are you using UTF-8 characters instead of unicodes?
01:15  jpic: bob2: exactly the same thing as this guy: http://stackoverflow.com/questions/3012421/python-lazy-property-decorator
01:15  simon: jpic, how about __getitem__?
01:15  bob2: hoangelos: that's a partial 'what', not a 'why'
01:15  simon: jpic, or __getattribute__ depending on what you want.
01:15  lrvick: Anyone know if httplib or urlib ship with python?
01:15  bob2: lrvick: both do
01:15  bob2: lrvick: http://docs.python.org/lib
01:15  hoangelos: bob2: what do you mean
01:15  jpic: simon: excellent, i forgot i've been waiting for these magic methodes for years actually, thanks :D
01:16  MostAwesomeDude: jpic: If you absolutely need this, the first solution looks pretty good.
01:16  lrvick: im trying to do basic authentication to pull a page with httplib. Does it mkae sense to do it with httplib?
01:16  MostAwesomeDude: jpic: *Please* don't __getitem__ or __getattribute__ for this.
01:16  bob2: lrvick: no
01:16  lrvick: bob2: what would be the best built-in choice to do baic authentication to pull a page?
01:16  magcius: so have you guys heard of construct?
01:16  bob2: BattlePope: I don't know what you mean, player is defined in all the scopes below the for loop that defines it
01:16  magcius: and/or reconstruct?
01:17  bob2: lrvick: urllib
01:17  MostAwesomeDude: magcius: Yes.
01:17  BattlePope: ok, fair enough bob2
01:17  lrvick: bob2: whats the advantage there?
01:17  BattlePope: thanks for your help :)
01:17  MostAwesomeDude: magcius: (Are you taking a poll?) I've been using it for wire protocols.
01:17  magcius: MostAwesomeDude, ok, so reconstruct has been dead for a little bit.
01:17  magcius: and construct as well
01:17  hoangelos: bob2: can I provide any information to help find out why reportlab is doing this.
01:17  MostAwesomeDude: magcius: Yeah. I was gonna bring it back to life, but I don't need to fix anything, so.
01:17  bob2: BattlePope: I think you're just getting tripped up by what player is - it is a KEY in to the stats[u'players'] dictionary
01:17  magcius: MostAwesomeDude, I'm working on "stencil"
01:17  jarray52: If the xml document is "<car_tag car_number="3">Taurus</car_tag>" and doc=xml.dom.minidom.parse("CarList.xml"), how do I extract the '3' using doc?
01:17  bob2: hoangelos: crap, sorry, I mixed you up with someone else
01:17  BattlePope: yeah, you're right
01:18  magcius: MostAwesomeDude, it's a mix of Hachoir, Reconstruct, and my own library
01:18  BattlePope: I'm thinking it's the entirety of the data at that point
01:18  MostAwesomeDude: magcius: Alright.
01:18  BattlePope: rather than just an index at that level
01:18  bob2: BattlePope: right, you need to use the key to look up the value
01:18  hoangelos: bob2: ahh ok....well that sucks.  Because I'm pretty much stuck.
01:18  bob2: BattlePope: or iterate over iteritems() and get the value directly
01:18  BattlePope: yeah
01:18  jpic: MostAwesomeDude: actually, attributes are calculated by packs, operation1 will set attrA, attrC, attrD and operation2 will set attrB and attrE in my case. Why wouldn't a magic getter be appropriate?
01:18  bob2: lrvick: httplib is for low level http fiddling
01:18  bob2: lrvick: urllib is for "hey, do this GET or POST request for me"
01:19  MostAwesomeDude: jpic: You might want to make all this explicit.
01:19  MostAwesomeDude: jpic: obj.operation1()
01:19  MostAwesomeDude: And default attrA, etc. to None.
01:19  magcius: MostAwesomeDude, is there a way to do something like struct XY { short NBytes; byte[NBytes] X; byte[NBytes] Y; } in reconstruct?
01:19  jpic: MostAwesomeDude: that's what the current implementation is like actually
01:19  magcius: I would be curious how it would be expressed.
01:19  lrvick: bob2: ah ok, that makes sense
01:20  lrvick: bob2: so urllib2 is my best bet for basic authenitication and posting then that will be supported out of the box most universally?
01:20  MostAwesomeDude: magcius: Struct("xy", UBInt16("length"), MetaArray(lambda context: context["length"], UBInt8("x")), MetaArray(lambda context: context["length"], UBInt8("y")))
01:20  Purren: With SQLAlchemy, after declaratively setting up the table/classes, do I need to run something so that the table is actually created?
01:20  bob2: lrvick: what
01:20  MostAwesomeDude: jpic: And is this bad somehow?
01:20  magcius: MostAwesomeDude, ew.
01:20  bob2: lrvick: 'if you want to make simple GET and POST requests, urllib is the simplest choice in the stdlib'
01:20  MostAwesomeDude: magcius: It looks better with indents, I promise.
01:21  magcius: MostAwesomeDude, what is "MetaArray"?
01:21  MostAwesomeDude: magcius: It's an array whose length is decided by a callable on the context.
01:21  MostAwesomeDude: magcius: There was some other name for it, but I don't remember it. construct's docs mentioned it, but construct's docs suck.
01:21  lrvick: bob2: there is urllib and urllib2. both seem to be included. Im assuming i would want urllib2 and that that is shipped universally?
01:21  MostAwesomeDude: (That alone would be a good reason to bring it back to life.
01:21  bob2: lrvick: no and yes
01:22  bob2: lrvick: I said urllib because I meant urllib
01:22  magcius: MostAwesomeDude, and will that give you an array of chars?
01:22  magcius: MostAwesomeDude, or bytes?
01:22  bob2: if you forgot to mention you needed cookie support, urllib2, but you'll need to do more work
01:22  lrvick: ok so urllib2 is less supported then?
01:22  Purren: Anyone good with SQLAlchemy?
01:22  bob2: :(
01:22  lrvick: i dont need any cookie support
01:22  magcius: MostAwesomeDude, and is there a way to combine them, like have a variable-length byte integer?
01:23  bob2: lrvick: I don't know what makes you think that
01:23  lrvick: i need straight up get and post and baic auth, and thats it
01:23  RichW: Purren, yes
01:23  lrvick: basic*
01:23  bob2: lrvick: urllib2 is newer and more complicated, hence why I suggsted urllib
01:23  bob2: given that it can seemingly satisfy your requirements
01:23  magcius: MostAwesomeDude, I was thinking XY = Struct([Field("NBytes", UInt), Field("X", UInt("NBytes")), Field("Y", UInt("NBytes"))])
01:23  lrvick: bob2: fair enough :-)
01:23  magcius: er, Field("NBytes", UInt(2))
01:23  MostAwesomeDude: magcius: That would give you an interleaved array. (And you'd still need to use MetaArray.)
01:24  magcius: MostAwesomeDude, is there a way to combine it?
01:24  Purren: RichW: I'm just getting started with SQLAlchemy, but when I've set up the class that contains the tabledefinition and represents the python object, what do I run to actually create the table?
01:24  cwillu_at_work: hey, anybody have a link to that mongo db "pipe your data to /dev/nul" thing?
01:24  MostAwesomeDude: magcius: I should note that there are a couple of length-prefixed strings, like PascalString, which can help you out.
01:24  RichW: Purren, create_all() its in the documentation
01:24  magcius: MostAwesomeDude, not looking for strings
01:24  MostAwesomeDude: magcius: If you want two arrays out, you need two arrays in.
01:25  magcius: MostAwesomeDude, do you get what XY is supposed to do?
01:25  Purren: RichW: Aha, I'll try it. I'm following the tutorial, it didn't say anything about it.
01:25  bob2: cwillu_at_work: http://www.xtranormal.com/watch/6995033/
01:25  MostAwesomeDude: magcius: Is it an SOA of coordinates? :3
01:25  bob2: but ot
01:25  RichW: Purren, try the pdf, makes searching easier: http://www.sqlalchemy.org/docs/sqlalchemy_0_6_6.pdf
01:25  cwillu_at_work: bob2, <3
01:25  MostAwesomeDude: magcius: http://paste.pocoo.org/show/308682/ is one from my app.
01:25  magcius: MostAwesomeDude, 2 bytes for length called NBytes, then NBytes bytes called X, NBytes bytes called Y
01:25  hoangelos: I'm having trouble with using reportlab with invalid UTF-8 characters.  Anyone see something like that.  the beginning of the doc has a 0x93, which is invalid.  http://dpaste.com/289602/
01:26  toonacid: bob2: http://paste.pound-python.org/show/829/
01:26  magcius: MostAwesomeDude, so byte[NBytes] was the wrong way to express it.
--- Log closed Thu Dec 23 01:30:08 2010
--- Log opened Thu Dec 23 01:30:33 2010
01:30 --- Users 698 nicks [0 ops, 0 halfops, 0 voices, 698 normal]
01:30  Purren: RichW: : Thanks,I appreciate it!
01:30  bob2: insane
01:31  hoangelos: mahmul: this is the traceback of the error: http://dpaste.com/289594/
01:31  mahmul: hoangelos: pastebin the code
01:31  MostAwesomeDude: magcius: I don't know how to do a variable-length packed int.
01:31  magcius: MostAwesomeDude, ok, first fault in construct.
01:32 --- Channel #python was synced in 106 seconds
01:32  MostAwesomeDude: TBF that's a *really* weird use case.
01:32  magcius: MostAwesomeDude, most wire formats have that as a basic primitive, look at protobuf
01:33  jarray52: If CarList.xml is "<car_tag car_id="33">Taurus</car_tag>" and doc=xml.dom.minidom.parse("CarList.xml"), how do I extract the '3' using doc?
01:33  MostAwesomeDude: magcius: I try not to. :3 Anyway, there might be something in there I just am not aware of.
01:33  RichW: Purren, here is amended code:http://pastebin.com/EYHpc0uL
01:33  infobob: http://paste.pound-python.org/show/831/ (repasted for RichW)
01:34  jennifer: How can I append to the python path?
01:34  RichW: infobob, heh results at same time :)
01:35  quizme: named arguments in python is awesome
01:35  toonacid: jennifer: I assume you're talking about sys.path? http://paste.pound-python.org/show/832/
01:36  jennifer: toonacid, thanks, taking a look at that. I installed py-wxPython earlier, and this app still can't findi t
01:36  hoangelos: mahmul: http://dpaste.com/289629/
01:36  Purren: RichW: Aha, I get it. Thanks for the help!
01:36  Purren: They skipped that part in the tut
01:36  hoangelos: muhmul: this is the function that's being called in satchmo
01:37  hanstech: How can i catch list index out of range exceptions ?
01:37  simon: try-catch.
01:37  quizme: how do you type in the string class ?
01:38  hanstech: u mean try-except
01:38  hanstech: ?
01:39  quizme: is there an equivalent to ruby's "String" ?
01:39  quizme: cuz i don't want to have to make up types if they already exist
01:39  quizme: i mean make up constants for types
01:39  Eevee: what?  what are you doing
01:40  quizme: i want to say "if (arg1 == String): do this "
01:40  bob2: quizme: don't call a thing String
01:40  quizme: i mean "if (arg1.__class__ == String): do this "
01:40  bob2: quizme: typechecking is very rarely needed in python
01:40  Eevee: don't do that
01:40  quizme: bob2 what should  i call it ?
01:40  Eevee: that is horrible on a lot of levels
01:40  lvh: quizme: conditional expressions don't need parens in Python
01:40  bob2: quizme: what do you want to accomplish?
01:41  Eevee: why do you need to check if something is a string
01:41  quizme: so that i can convert it if necessary
01:41  hanstech: my code is not catching the index or key exceptions.
01:41  lvh: quizme: Python is a duck typed language -- you do not get to care what position in an inheritance lattice an object's type is in in order to change how you treat an object.
01:41  bob2: quizme: that's not how you write idiomatic python code
01:41  hanstech: can wome one help me
01:41  hanstech: my code is here
01:41  hanstech: http://paste.pocoo.org/show/308685/
01:41  bob2: quizme: assume you got passed something sensibile and just use it
01:41  jennifer: toonacid, I added /usr/share/include/wx to my sys.path, however it is still unable to find it
01:41  bob2: quizme: if the caller fucked up, they'll get an exception and read your api docs
01:42  lvh: quizme: What do you want to do if it's *not* a string
01:42  aphelion: quizme: import types; type('moo') == types.StringType
01:42  lvh: aphelion: Don't give people bad advice
01:42  quizme: cuz if i store something in HBase everything gets converted to bytes
01:42  lvh: Especially not wrong advice
01:42  lvh: aphelion: (StringType is just str in recent Pythons)
01:43  quizme: so i need to convert it back using different functions depending on how it was stored
01:43  Eevee: quizme: please stop being vague and just tell us what you're doing
01:43  lvh: quizme: I'm still somewhat nonplussed -- can you paste some code? It's okay if it doesn't actually work
01:43  quizme: k
01:43  lvh: hanstech: Why do you have a bare except there
01:44  bob2: quizme: sure, then your data layer converts it back
01:44  lvh: hanstech: also, pastebin the exception with traceback
01:45  jennifer: My PYTHONPATH is :/usr/share/include/:/usr/share/include/wx/    however, when I try to import wx, I get a message that it can't be located
01:46  lvh: jennifer: Apparently wx is not correctly installed. How did you install it?
01:46  quizme: lvh: http://www.pastie.org/1399452
01:46  jennifer: lvh, pkg_add -i py-wxPython
01:47  bob2: jennifer: those dirs seem totally wrong
01:47  bob2: jennifer: what platform is this?
01:47  jennifer: bob2, openbsd
01:48  lvh: jennifer: What's your sys.path? Can you try to figure out where that package installed wx?
01:48  jennifer: er not /usr/local/include/wx/wxPython/
01:48  jennifer: ^ not share
01:48  quizme: aphelion: thanks
01:48  lvh: quizme: Argh, don't listen to him
01:48  aphelion: quizme: i just said the direct way to do what you asked, not that it was a good idea
01:48  lvh: quizme: Just use str(x) and define __str__ on x's class
01:49  lvh: whatever the return type of hbu.get is
01:49  jennifer: lvh, testing that now
01:49  aphelion: ...just figured if you're used to ruby that you're also used to the idea of duck typing and must have a specific reason for wanting to do something weird
01:49  quizme: lvh ok
01:50  jennifer: ['/home/jennifer/pySimReader-Serial-src-v2', '/home/jennifer/pySimReader-Serial-src-v2', '/usr/local/include/wx', '/usr/local/include/wx/py-wxPython', '/usr/local/lib/python26.zip', '/usr/local/lib/python2.6', '/usr/local/lib/python2.6/plat-openbsd4', '/usr/local/lib/python2.6/lib-tk', '/usr/local/lib/python2.6/lib-old', '/usr/local/lib/python2.6/lib-dynload', '/usr/local/lib/python2.6/site-packages']
01:50  quizme: i know about duck typing, but this is interfacing with java
01:51  BattlePope: can I have a list of tuples, containing one numeric and one alphabetic component, such that I can easily sort them? How would I add each tuple; I tried comingup.append(weapon,kills) but it did not work :)
01:51  lvh: jennifer:  '/usr/local/include/wx/py-wxPython' looks reasonable. Is that something you added, or something that package added
01:51  jennifer: lvh, the package
01:52  emes: BattlePope: append((a,b))
01:52  jennifer: lvh, I added it to PYTHONPATH in my profile
01:52  BattlePope: how will it know to which list I refer, emes?
01:53  jennifer: also found /usr/local/lib/python2.5/site-packages/wx/
01:53  BattlePope: do I need to do something like comingup = append((weapon,kills))
01:53  emes: BattlePope: l.append((a,b))
01:53  BattlePope: oh
01:53  BattlePope: that's that I have already
01:53  BattlePope: must be some other problem them... says the name isn't defined
01:53  emes: no, you have l.append(a,b)
01:53  BattlePope: how can I define it?
01:53  BattlePope: yeah, I mistyped, I do have double parentheses in my code :)
01:54  BattlePope: I guess comingup = [(,)]?
01:54  lvh: jennifer: Stop adding things to your PYTHONPATH -- in the case of setuptools anywhere it can break things -- if it doesn't work, the package is broken
01:55  lvh: jennifer: Consider uninstalling the package, getting the requisite header files, and using pip --user to install it locally
01:55  lvh: Given a recent version of python (2.6+) that ought to work out of the box
01:56  lvh: I have no idea where openbsd packages are supposed to put their stuff
01:56  jennifer: i added /usr/local/lib/python2.5/site-packages/ and now its working
01:56  jennifer: ish
01:56  lvh: jennifer: Interesting. What do you mean by "ish"
01:57  lvh: I don't know enough about openbsd python packages to know whose responsibility it is for putting it there so you don't have to
01:57  jennifer: lvh, ish means, that my com port is acting up, so... everything is loading really slow... it didnt die at that module atleast :)
01:57  bob2: BattlePope: that's gibberish
01:58  BattlePope: yeah
01:58  hanstech: lvh: Because I wanted to catch all kinds of exceptions
01:58  hanstech: and i figured out the problem
01:58  BattlePope: I'm trying to append stuff to this list of tuples, yeah? But it says the list isn't defined; in C I'd have defined it already, what do I do in Python/
01:59  Zilly: Is there any reason that when I  inspect an object from reload a module changes made to the module have no effect on the inspection?
01:59  Eevee: Zilly: yes, because reload doesn't work
02:00  Zilly: Eavee: When I check getattr() the changes have taken effect...
02:00  Eevee: Zilly: it deletes and reloads the module object, but any objects that were around before will still exist.  python doesn't magically change your data out from under you
02:00  lvh: jennifer: FWIW, I have used serial ports (RS232) extensively with python
02:01  lvh: jennifer: Up to the point that I ported pyserial to more platforms than it actually runs on
02:01  lvh: jennifer: I would not be caught dead around pyserial
02:01  lvh: if it doesn't work and you want to write your own things that use a serial port reasonably directly, you really, really, really want to use twisted
02:01  jennifer: lvh, I built a sim card reader circuit, and need to use it :/
02:01  Zilly: Eevee: I reinitiailize the object right after I reload the module.  I don't understand how it couldn't change inspect but it changes everything else.
02:01  lvh: (as an added bonus, it integrates with things like wx, gtk... in a sane manner)
02:01  lvh: jennifer: I feel your pain
02:02  lvh: jennifer: (I had a parallel FPGA board programmer which is probably even more voodoo magic)
02:02  jennifer: lvh, do any avr work?
02:03  bob2: BattlePope: what?  make an empty list
02:03  bob2: BattlePope: then append things to it
02:04  BattlePope: is it just comingup = []?
02:05  redduck666: i'm trying to use guppy to get a better idea of my excessive ram usage. it clains that ~15MB are being used, however htop claims 99MB RSS (and 175VIRT) are being used. any ideas where the difference comes from?
02:06  lvh: jennifer: Not professionally
02:07  lvh: jennifer: We had some atmegas that did really simple stuff that was too specific to dump into the FPGA: mostly negotiating with canbus
02:07  bob2: BattlePope: that's an emoty list, yeah
02:07  lvh: (it keeps hostages)
02:07  BattlePope: cool, tanks
02:09  redduck666: anyone?
02:09  Purren: If I want to manipulate read HTML easily in Python3000, what's my safest bet?
02:10  redduck666: Purren: BeautifulSoup
02:10  redduck666: ah, 3k
02:10  lvh: yeah, no, 3k.
02:10  Purren: ^^
02:10  bob2: Purren: lxml.html
02:10 * lvh gives the usual "why are you using py3k" lecture
02:10  bob2: Purren: but using python 3 means much poorer library and doc support, so consider if it is worth it
02:11  Purren: Hm
02:11  Purren: Ok
02:11  Purren: It's such a hassle that everyone hasn't shifted from py2 to py3
02:11  bob2: yeah
02:11  bob2: lazy bastards
02:11  redduck666: how does one find out where my code is spending the ram?
02:11  Zilly: Eevee: I don't get it.  I reload the module then reload the object.  getattr() doens't show the deleted method, but inspect.getsourcelines() shows it as still being in the code.
02:11  lvh: redduck666: heapy
02:11  lvh: Purren: Not really
02:12  lvh: Purren: There are many mistakes and problems in py3k
02:12  redduck666: lvh: heapy claims that i'm using all together ~15MB ram, htop says i'm using ~99MB RSS
02:12  lvh: Purren: For example, the methods removed and kept on bytes from str
02:12  lvh: redduck666: Well, yes -- memory is not reclaimed by the host OS
02:12  redduck666: lvh: gc.collect() almost doesn't do anything?
02:12  bob2: I think Meliae is the new hotness
02:13  redduck666: lvh: how do i find out where that ram is?
02:13  redduck666: or, what is using it rather
02:13  bob2: Zilly: pastebin what you did
02:13  lvh: redduck666: No -- if heapy says 15M, it's more likely that you asked for and got 99M once, but (99-15)M of that has been garbage collected and freed
02:13  redduck666: (this is just staging, on prod we have much bigger issues, ram usage ~200MB)
02:13  Zilly: bob2: It's kind of long, but I'll try to shorten it.
02:14  lvh: redduck666: but since you know heapy and htop exist and know what rss/pages mapped into memory are, I'm going to assume you know free() doesn't actually free memory to the OS
02:14  redduck666: lvh: the total used ram isn't dropping according to htop
02:14  lvh: redduck666: Well, yes: most processes don't.
02:14  drewbert: is it ridiculous to not want to look at .pyc files?  they kind of clutter the file browser in my opinion...
02:14  bob2: Zilly: no
02:15  redduck666: drewbert: fixed in py3k
02:15  bob2: who uses a file browser?
02:15  lvh: That doesn't mean it's leaking: just that you allocated a lot and now collected it
02:15  lvh: drewbert: so don't use file browsers to look at packages
02:15  bob2: drewbert: you can make python not generate them if you really care
02:15  lvh: my IDE (emacs) doesn't show mepycs
02:15  lvh: it seems to me the real problem is that you're seeing them, not that they exist
02:15  drewbert: bob2: well, really it's django that's generating them, and when I asked the django guys about this they just laughed at me
02:15  lvh: the use case for pycs (bytecode caches) still sounds valid
02:15  Zilly: bob2: http://pastebin.mozilla.org/897044 Thanks
02:15  lvh: drewbert: well, yes, I think it's silly too
02:15  bob2: drewbert: I doubt it is django generating them
02:15  redduck666: lvh: hrm, but those should be freed over time, no? it is like this for long time
02:16  lvh: redduck666: Not except for very specific processes and CPython isn't one of them
02:16  redduck666: (long time == 10s of minutes)
02:16  bob2: Zilly: inherit from object, don't use tabs
02:16  drewbert: bob2: it's django + python, what I'm saying is I'm not running python files via cli
02:16  lvh: redduck666: Try creating some new objects -- if I'm right, you won't see an increase in rss
02:16  drewbert: bob2: apache is running python files via mod_wsgi
02:16  bob2: drewbert: sure, python generates them when you import things
02:16  lvh: redduck666: (because enough memory has been assigned to that process)
02:16  lvh: redduck666: One way to fix that is just kill and restart once in a while
02:16  bob2: Zilly: tf
02:17  Zilly: bob2: tf?
02:17  bob2: 'the fuck'
02:17  lvh: redduck666: (Yes, I think this is unfortunate -- the JVM, for example does a better job at this and actually returns memory back to the OS)
02:17  bob2: I'm out
02:17  papna: Most implementations of free will give the memory back to the OS if a perfect storm comes, right?
02:18  Zilly: bob2: It lets you edit a function and save the changes.
02:18  bob2: sure it does
02:18  lvh: If by that you mean "contiguous amount of memory freed near the end of the heap" then yes
02:18  redduck666: lvh: rss is going up as my instatiating huge list
02:18  drewbert: If you guys check google, there's a TON of people request some way to hide .pyc files, so I'm not the only one asking for this... jus' sayin'.
02:18  lvh: redduck666: how huge
02:19  lvh: drewbert: Lots of people read ann coulter too
02:19  lvh: (sorry that was my go to example of "large group of people that are still wrong")
02:19  GrahamDumpleton: drewbert: In mod_wsgi 4.X you will be able to use WSGIDontWriteBytecode directive to prevent .pyc files being generated by Python under mod_wsgi.
02:19  redduck666: lvh: went up by ~100MB and that seems to have died
02:19  redduck666: ipdb> my_list = [i for i in xrange(10000000000000000.)]
02:19  redduck666: Killed
02:19  lvh: drewbert: Again, the problem is that your file browser is showing them, not that python is making them
02:19  redduck666: i didn't kill it
02:19  drewbert: GrahamDumpleton: awesome, at least it's in the works
02:19  GrahamDumpleton: drewbert: Presumes use of Python 2.6 or newer.
02:20  lvh: redduck666: yeah, ulimit did that
02:20  GrahamDumpleton: drewbert: It is already in subversion repository if need it.
02:20  lvh: redduck666: that list is pretty damn big -- I meant something smaller but still noticeable.
02:20  GrahamDumpleton: drewbert: http://code.google.com/p/modwsgi/wiki/ChangesInVersion0400
02:21  drewbert: lvh: well there's a bit of an impasse when the nautilus guys want stuff to follow their naming convention for hidden files and the python guys want stuff to follow their naming precedent for bytecode files
02:21  redduck666: lvh: going up with smaller list too
02:21  lvh: drewbert: well, nautilus is for showing files
02:21  lvh: drewbert: I would argue that what you want to see is not files structured in directories, you want to see modules structured in packages
02:22  lvh: since the files are there, but you don't actually care about them
02:22  lvh: if there was a zipped package or an egg, you'd probably want to see the actual python structure of that
02:22  redduck666: lvh: any ideas how do i go about figuring out where my ram is?
02:22  drewbert: lvh: sure...
02:23  lvh: redduck666: Try the same thing again, but with a smaller list than 10**16, most of which probably longs
02:23  lvh: redduck666: that's a *lot* of memory
02:24  lvh: redduck666: 5*10**5 or 10**6 or so should be more than noticeable
02:24  redduck666: lvh: RSS of 3145M with 100000000 list
02:24  redduck666: up from ~99MB
02:24  lvh: redduck666: The point is to see if your rss budges
02:24  lvh: well, yes, that's too many
02:24  redduck666: ok
02:24 * pr3d4t0r glares at redduck666 :)
02:24  lvh: redduck666: the point is to create objects, but not enough that you'd need to allocate more
02:25  lvh: enough so that malloc() would give python pointers in pages it'd previously been allocated already
02:25  redduck666: lvh: went up to ~106MB
02:25  redduck666: hi pr3d4t0r !
02:25  lvh: redduck666: What did you do exactly?
02:25  redduck666: lvh: my_list = range(1000000)
02:26  redduck666: lvh: i have a pdb handler for USR1
02:26  redduck666: lvh: so i started my program, waited couple of seconds, USR1ed it and did that comand
02:27  lvh: redduck666: Hm, yes, that's strange
02:27  redduck666: pr3d4t0r: did you toy around with memory usage issues in .py? got a WTF where heapy says i'm using 15MB but i'm using ~100MB RSS
02:28  jpic: hi all, i don't understand why the result of urllib.urlencode({'a': u'é'.encode('utf-8')}) is 'a=%C3%83%C2%A9', wasn't 'a=%C3%A9' the expected result ?
02:28  lvh: Especially that heapy'd lie. Are there any objects in the gc's collect bin?
02:29  redduck666: lvh: 15, didn't make much of a difference
02:29  redduck666: (used gc.collect())
02:30  pr3d4t0r: redduck666: No, sorry.
02:30  redduck666: pr3d4t0r: :)
02:30  pr3d4t0r: redduck666: Most of the Python I do runs on a JVM ;)
02:30  lvh: redduck666: no, no -- I'm talking about it's list of stuff to collect
02:31  lvh: redduck666: (gc.garbage)
02:31  exarkun: still no answers on my Cython/C++ memory-management question, don't miss this chance to get 10 points on stackoverflow: http://stackoverflow.com/questions/4501938/how-can-c-object-lifetimes-be-correctly-managed-in-cython
02:35  redduck666: lvh: empty list
02:35  RichW: Is docutils going to be in the python standard library?
02:35  Zilly: Is there some kind of delay that python has while saving files?
02:36  redduck666: Zilly: no, but you shold .close() the file object
02:36  bob2: RichW: unlikely
02:36  bob2: Zilly: no
02:36  lvh: Zilly: f.close, f.flush
02:36  redduck666: (or use "with" statement)
02:36  bob2: but it may be buffered
02:36  Jerub: when compilng python, how do i make it strip debugging symbols?
02:36  lvh: redduck666: That's a tough one and I'm not going to get in to it at 2:30 AM (local time here), sorry
02:36  exarkun: Jerub: strip(1)?
02:37  redduck666: lvh: fair enought, thanks!
02:37  lvh: redduck666: You might want to try the heapy list, these people are used to debugging that kind of problem
02:37  exarkun: Jerub: oh no, are you still on OS X?
02:37  RichW: bob2, why not?
02:37  Jerub: exarkun: um, yes, i can use that directly, but there seems to be some kind of thing inside install-sh called STRIPPROG-strip
02:37  Jerub: but it seems a very silly name
02:37  Jerub: and yes :(
02:37  bob2: RichW: the stdlib is where things go to die
02:37  redduck666: lvh: heh, you are in the same timezone that i used to live in :)
02:37  lvh: redduck666: if you're still having problems when it's a reasonable time here and I'm in a state somewhat resemblant of a person being awake, I'll try to help you :)
02:37  bob2: RichW: also afaik the docutils devs didn't prpose it
02:37  lvh: redduck666: <- .be
02:37  redduck666: lvh: i was in .si
02:38  RichW: bob2, it is mentioned in a few peps
02:38  Zilly: bob2: Does inspect read from the file directly or does it do some kind of caching?  I can't figure out how it isn't loading the file after it's changed.  getattr() is showing that the file has been changed, but inspect still gets the old source.  I can't figure out how that's possible.
02:38  bob2: Zilly: sorry, not interested
02:38  exarkun: Zilly: Yes.  There's a cache.
02:39  Zilly: Exarkun: I've reloaded inspect as well, though.  So, how would it have kept the cache?
02:39  lvh: oh well, much belated bed time
02:39  exarkun: Zilly: Has anyone warned you that reload() is like a game of russian roulette?
02:39  BattlePope: if I pass a list of a tuples into a function, how to do I refer to to it? If I have logic(nsr), I seem to not be allowed to say that, during a for loop, a variable is equal to nsr[x][0]. http://paste.pound-python.org/show/834/
02:40  BattlePope: exarkun, that would be a good joke
02:40  Zilly: Exarkun, Yes, but I'm using the reloaded module.
02:40  bob2: BattlePope: because that's nonsense
02:40  bob2: BattlePope: x is an element of nsr, not an index
02:40  exarkun: Zilly: I don't understand that "but"
02:41  BattlePope: how do I make it an index then?
02:41  bob2: BattlePope: http://paste.pound-python.org/show/835/
02:41  bob2: BattlePope: afaict you don't need an index at all, however
02:41  Zilly: Exarkun, I thought reload saved didn't take effect on instances that existed prior to the reload, correct?  So, if I'm making all calls from inspect through a variable that has been reloaded, shouldn't those calls be affected?
02:41  bob2: BattlePope: since you have the item and can just index that
02:42  exarkun: Zilly: That's sort of right, in a very vague way
02:42  exarkun: Zilly: But it misses the point that what reload() does to a stateful module is basically totally random and unpredictable.
02:42  exarkun: Zilly: Also, and here's the part you'll like I guess, the cache isn't even in the inspect module, it's somewhere else.
02:43  Zilly: HAHAHA
02:43  BattlePope: nice
02:43  BattlePope: thanks again bob :)
02:43  BattlePope: you really ought to be promoted to bob1 ;)
02:43  exarkun: Zilly: I'd recommend that you stay pretty far away from reload().  You definitely don't need it if you're just trying to throw away some _data_.  That's entirely not what it is for.
02:44 * Rhamphoryncus wants to be bob2
02:44  Rhamphoryncus: err
02:44  bob2: heh
02:44  Rhamphoryncus: bob3 :P
02:44  bob2: TMI
02:44  exarkun: Zilly: Instead, what you're looking for, I suppose (I say I suppose because I don't actually know what you're doing, so don't blame me if this solution blows up in your face),
02:44  exarkun: Zilly: I suppose, is linecache.clearcache()
02:45  Zilly: Exarkun, I LOVE YOU!
02:46  ivan`: now that was telepathy
02:47  papna: exarkun: /lastlog exarkun
02:47  ivan`: or just knowing how inspect works :/
02:47  papna: (I suck at IRC.)
02:47  jpic: hi all, i don't understand why the result of urllib.urlencode({'a': u'é'.encode('utf-8')}) is 'a=%C3%83%C2%A9', wasn't 'a=%C3%A9' the expected result ?
02:49  ivan`: jpic: looks like there's some double-utf-8-encoding going on
02:49  exarkun: The urlencode function is super dangerous
02:49  exarkun: don't ever use it
02:49  bob2: jpic: python2?
02:49  jpic: bob2: yes
02:49  jpic: ivan`: absolutely, but where ?
02:49  bob2: oh I guess u'' would puke on python3
02:49  papna: jpic:
02:50  papna: jpic: >>> urllib.urlencode({'a': u'é'.encode("utf8")})
02:50  papna: 'a=%C3%A9'
02:50  jpic: not for me :(
02:50  exarkun: jpic: I bet if you try it in a clean Python session it will do that.
02:51  bob2: exarkun: what's the alternative to it?
02:51  exarkun: bob2: write your own function that works right
02:51  bob2: hah
02:51  jpic: exarkun: right, for some reason it only fails in ipython ...
02:51  exarkun: and doesn't have subtle stateful bugs
02:51  exarkun: jpic: There's a cache
02:51  bob2: bwahaha ipython
02:51  exarkun: jpic: Sometimes the cache gets polluted with objects of the wrong type
02:51  exarkun: jpic: Sometimes the pollution corrupts later results
02:52  exarkun: Maybe ipython is also screwing something up, I don't have much experience with it.
02:52  papna: It's known for that.
02:52  jpic: thanks for the heads up
02:52  lvh: jpic: Surely you've heard me give this rant before
02:52  lvh: jpic: ipython is lots of different kinds of terrible
02:52  lvh: jpic: First and foremost it breaks perfectly okay code for no apparent reason
02:53  bob2: wow, urlencode is more complicated than you would think
02:53 * redduck666 wonders if he should finally give a shot to bpyhton
02:54 * redduck666 notes that ipython mostly works for me, which is why i still use it
02:54  lvh: redduck666: Yes, many people use ipython because it hasn't bitten them in the face yet
02:54  lvh: see also: PHP
02:55  redduck666: heh
02:56  jpic: bpython looks great!! and it didn't break that piece of code, thanks for the tip redduck666 ;)
02:56 --- ChanServ sets modes [#python +o infobob]
02:56 --- infobob sets modes [#python -b $a:Miesco]
02:56  lvh: jpic: :-(
02:57  papna: lvh: Whaa?
03:00  jpic: lvh: what ? do you want to advocate python's default shell ?
03:01 --- infobob sets modes [#python -o infobob]
03:01  lvh: jpic: 02:55 <jpic> bpython looks great!! and it didn't break that piece of code, thanks for the tip redduck666 ;)
03:01  lvh: jpic: Oh, wait, you got the hint from redduck.
03:01  lvh: I could've sworn I told you about it.
03:01  lvh: Ignore me.
03:02  elxx: can anyone shed some light on what twisted really does?
03:02  lvh: elxx: Magic!
03:02  elxx: im getting 20 different answers from friends
03:02  lvh: elxx: Um, okay. What did you want to know specifically
03:02  elxx: lvh: is it meant for people that want to write servers?
03:03  ivan`: and clients, and anything with an event loop
03:03  lvh: elxx: It's a good tool for writing servers -- that's different than saying it's for writing servers
03:03  lvh: elxx: It's a thing for pretty much everything that does IO
03:03  lvh: Also, things that spend a lot of time waiting (GUI apps come to mind)
03:03  elxx: lvh: ahhh, ok.
03:04  elxx: I just got into python so I was kinda looking around to see whats what and which directions it can go
03:04  elxx: which i found out people use it for everything and then some
03:13  hanstech: Is there any way to stop one button event handler from another button event handler in wxpython ?
03:14  hanstech: some thing like ButtonLabel.Stop or some thing like that
03:14  hanstech: ?
03:33  elryry: hey fatalfred
03:41  heoa: Why does it need [...] brackets?  [i+j for i,j in  tuples]
03:46  tos9: heoa: why does what need brackets? That list comprehension?
03:49  Ademan: I know mod_python is deprecated, is mod_wsgi still ok? I vaguely remember hearing about it being abandoned
03:49  papna: Ademan: mod_wsgi is what you use for deploying Python webapps with apache.
03:49  papna: heoa: http://docs.python.org/tutorial/datastructures.html#list-comprehensions
03:49  GrahamDumpleton: Ademan: Only mod_python has been abandoned. mod_wsgi is alive and well.
03:50  hstefan: I'm looking for an instant messaging api, do you recommend any?
03:50  Ademan: thanks guys
03:50  heoa: tos9: papna Thank you, very cool -- likes lambdas :D
03:51  tos9: heoa: eh I hate lambda expressions for the record. But yes, list comprehensions are a killer feature.
03:51  papna: hstefan: twisted.words has implementations of the major ones.
03:52  tos9: (If that's what you meant by lambdas)
03:52  hstefan: 00:50 -!- Irssi: #python: Total of 666 nicks [0 ops, 0 halfops, 0 voices, 666 normal]
03:52  hstefan: WOW! 666!
03:52  hstefan: papna: ok! thanks
03:52  Ademan: #python, channel of the beast
03:53  GrahamDumpleton: hstefan: So I wasn't the only one who noticed that.
03:54  hstefan: GrahamDumpleton: nope
03:54  imanc: hey … if i had a list called 'row' and I assign it like so:     row = {..stuff here..}   grid.append( {'row': row} ) in a list that is iteratin through each row of a grid
03:54  hstefan: papna: where can I get this?
03:55  imanc: so I'm using the same row list adn assigning it in each iteration
03:55  imanc: will the row list copy by ref, or by val?
03:55  imanc: and if it copies by ref, by default, how do I copy it for each row/
03:55  imanc: ?
03:56  tos9: imanc: you mean []'s there? Or you're appending a dict with a single key? In any case, if it's a mutable object, you've got a reference to it
03:56  JFlash: ok, I'm getting this very very weird error
03:56  JFlash: global name 'len' is not defined
03:56  JFlash: wtf?
03:57  tos9: imanc: If you want a copy, copy it, whatever that means for the type of objects inside of your list
03:57  tos9: JFlash: you've shadowed it
03:57  imanc: tos9 - yeh, a reference is no good.  It'll be a predefined list of column values that I'm using as a template of sorts. So i want to duplicate it or each actual row in my grid
03:57  tos9: Or deleted it actually I think
03:57  imanc: tos9 - it'll be a list.  How do I copy its ass?
03:57  imanc: or a dict perhaps
03:57  JFlash: but how would I manage to screw up so much like that?
03:58  tos9: JFlash: actually, apparently you can't delete it. So pastebin your code, or wait for someone more knowledgable on what went wrong
03:59  tos9: imanc: like I said, it depends on what type of objects the list contains as to how you copy it or how deep you go
03:59  JFlash: pastebined it here: http://pastie.org/1399638
04:00  tos9: imanc: if they're some simple type like ints or strings, use a list comp [x for x in row] wherever you had row
04:00  imanc: tos9 it'll be a a list of dicts … with the row var being a dict itself nested one deep and containing basic scalar vars, and nothing more complicated than that .. just floats and strings
04:00  imanc: hm
04:01  imanc: bingo tos9 - thanks, i'll ue a listcomp
04:01  tos9: JFlash: Nothing looks wrong there with your code in terms of len, have you restarted your interpreter / do you get that running your module fresh?
04:02  JFlash: thanks
04:02  JFlash: will try that
04:02  tos9: JFlash: also, you shouldn't be naming things with double underscores, and shouldn't be planning on using hasattr
04:02  JFlash: it did disappear at some point but it eventually comes back
04:03  tos9: JFlash: and staticmethods are almost always unnecessary too
04:03  tos9: JFlash: eh? What do you mean eventually?
04:03  JFlash: tos9, well, tell Richard M. Tew that :)
04:04 * JFlash goes try it another time
04:07  smo_80: hi
04:08  smo_80: what s the best solution to have root login under gnome/kde... without using gksu/kdesu .... ?
04:09  tos9: smo_80: Is this a python question?
04:09  smo_80: humm yes and no
04:09  wm4: are there real coroutines in python? where?
04:09  tos9: smo_80: k. Can we have the "yes" part :)?
04:09  forrestv: wm4, greenlet and stackless
04:10  wm4: forrestv: no, I mean in the standard version
04:10  wm4: I figure generators at least need coroutines internally, so they should be available somewhere?
04:10  forrestv: nope
04:10  forrestv: though you can do a lot with generators
04:11  TravisD: what are coroutines?
04:11  hstefan: I'll try again... do you recommend any instant messaging python api?
04:11  JFlash: tos9, works fine now. either the namespace was corrupted or another error was causing this somehow, I guess
04:11  forrestv: hstefan, twisted.words
04:11  JFlash: tos9, thank you for your help and comments
04:12  tos9: JFlash: sure thing
04:12  hstefan: forrestv: where cna I get this?
04:12  forrestv: hstefan, http://twistedmatrix.com/
04:12  wm4: python threads use their own OS thread, right?
04:12  forrestv: wm4, yes
04:12  wm4: damn
04:12  hstefan: wm4: kernel mapped threads?
04:12  wm4: hstefan: yes that's what I mean with Os threads
04:13  wm4: *OS
04:13  hstefan: wm4: oh... I think so.
04:13  hstefan: wm4: I was reading about python threads and I thought it as very limitated
04:15  wm4: stackless python is practically an alternate python implementation isn't it? i.e. not a simple library for cpython
04:15  exarkun: right
04:15  exarkun: although it's maintained as a set of patches to CPython.
04:16  exarkun: The limitation of Python threads, which run in native OS threads, is that only one thread can execute Python bytecode at a time.
04:16  exarkun: So it's easy to mistake them for green threads, since they share many properties of green threads.
04:19  forrestv: wm4, you can do most or all of the things you can do with coroutines with generators
04:20  exarkun: forrestv: but that's sort of meaningless
04:20  exarkun: anything you can do with coroutines or generators, you can do with python without those constructs too
04:20  exarkun: math proves this, it's called being "Turing complete".
04:20  forrestv: hmm, i just realized .. anything you can do with python, you can do without it too!
04:21  forrestv: why use python?
04:21  exarkun: The value of features beyond those necessary for Turing completeness is that they may make it easier to express what you are trying to express.
04:21  Belxjander: forrestv: because its less effort to do it in python?
04:21  forrestv: yes, and using generators in place of coroutines may be easier :p
04:22  forrestv: (than using neither)
04:22  TonnyNerd: i am using python because C++ sucks for simple things
04:22  TonnyNerd: =D
04:22  wm4: but why doesn't python simply provide coroutines
04:22  wm4: like Lua
04:22  papna: Complex ones too.
04:22  exarkun: wm4: Because they are complicated to implement, and CPython strives for a simple implementation.
04:22  wm4: exarkun: but generators are practically coroutines, right?
04:22  exarkun: wm4: I don't know what you mean by "practically".
04:23  wm4: I don't know generators so well
04:23  papna: exarkun: I don't buy that this is about simplicity of implementation.
04:23  exarkun: Do you know coroutines well?  If so, I can describe generators to you easily.
04:23  exarkun: papna: Well, it's the company line.  It may be BS.
04:23  wm4: exarkun: yes I know coroutines
04:23  exarkun: I should have said that, maybe.
04:23  exarkun: wm4: Okay.  Generators are coroutines that can only switch across one stack frame.
04:24  wm4: exarkun: oh, the yield has to be inside the generator function?
04:24  exarkun: wm4: Yep.
04:24  papna: exarkun: Where? I've seen Guido repeatedly say like, "Why would we want that? That's so hard to understand" and "That's a GOOD example? I'd hate to see some nasty code!" and such on the mailing lists.
04:25  exarkun: papna: Mostly the battle was over continuations and mostly it happened... 8?  10?  years ago
04:25  exarkun: papna: Then Tismer gave up, and also traded in continuations for coroutines
04:25  exarkun: papna: And by that time python-dev was entrenched in an anti-stackless position
04:25  exarkun: And I bet you'd like a link to a mailing list post, but I don't have one handy
04:26  exarkun: So either take my word for it, or assume that my memory is faulty (which it may well be ;), or let me know if you dig up such a link. :)
04:26  papna: exarkun: I'll believe you.
04:26  papna: exarkun: Though it seems like absurd reasoning to me.
04:26  exarkun: papna: me too.  good thing for pypy.
04:32 --- simonrvn_ is now known as simonrvn
04:48  yxz97: What makes Python so wonderful language?
04:48  yxz97: convince me please
04:48  mcurran: can anyone tell me why this code opens another python script/shell, but it fails to remain open after it's executed...
04:48  mcurran: subprocess.Popen("konsole -e --real-transparency /pentest/exploits/SET/clean.py",shell=True)
04:49  exarkun: mcurran: What if you open a shell and run `konsole -e --real-transparency /pentest/exploits/SET/clean.py`?
04:49  mcurran: I need this python script to open another script that'll run simultaneously but independently
04:49  mcurran: it runs fine alone, both scripts do
04:49  Jesdisciple: trying to apply solution 'a' but do not understand --> http://code.google.com/p/typhoonae/issues/detail?id=39
04:49  nosklo: yxz97: Python is so good, that you ended up joining a python channel and asking someone to convince you. Isn't that proof enough?
04:49  exarkun: mcurran: You ran `konsole -e --real-transparency /pentest/exploits/SET/clean.py`?
04:50  exarkun: mcurran: I'm not talking about running `/pentest/exploits/SET/clean.py`.
04:50  mcurran: if I uncomment the posted code it'll still run and the clean.py script will start but crash
04:51  yxz97: nosklo: almost like free candy in the super!!
04:51  yxz97: lol
04:51  yxz97: lol
04:51  nosklo: yxz97: please mind the channel rules.
04:51  yxz97: wow
04:51  yxz97: cool
04:51  Jesdisciple: mcurran: he means run the shell command in an actual shell rather than Python, just to test
04:52  mcurran: yes, I know all the commands work, and also the python script (mostly os.system commands anyways) works
04:52  yxz97: nosklo: youhave a problem with me ?
04:52  nosklo: yxz97: no, of course not.
04:52  yxz97: nosklo: do you hate my race, maybe?
04:53  Jesdisciple: yes, that's it
04:53  bob2: mcurran: again, actually do it
04:53  mcurran: I've also tried tying them to run together with a simple bash script instead, but that won't work either.
04:53  bob2: mcurran: does konsole remain open?
04:53  Jesdisciple: whatever your race is
04:53  nosklo: yxz97: hey, come on, I don't even know you
04:53  mcurran: no
04:53  bob2: yxz97: stop it
04:53  mcurran: konsole closes, no output
04:53  bob2: mcurran: is that the thing you want it to do?
04:53  mcurran: no
04:53  bob2: then explain what it does do and in what this behaviour is not what you want
04:54  mcurran: I want it to run several os.system bourne commands
04:54  bob2: hah
04:54  yxz97: here goes my secret
04:54  yxz97: I wanted to learn a bit of python
04:54  bob2: nosklo: ready the banhammer
04:54  yxz97: but ...hummm what makes the effrot worth to invest time on it.?
04:54  nosklo: yxz97: the fact that you want it?
04:54  Jesdisciple: if you don't know, nothing does
04:55  mcurran: what it does is irrelevant, but here is a pastebin with the Popen call and the whole clean.py (now server-refresh.py) code.
04:55  Jesdisciple: learn it if you want, don't if you don't
04:55  mcurran: hold on
04:55  bob2: mcurran: so your goal is "I'd like to ruin some random other programs from my python script"?
04:55  bob2: er run
04:55  exarkun: mcurran: what it does is highly relevant, since it could easily be the cause of the misbehavior you're seeing.
04:56  mcurran: then why would it run fine when run by itself ./clean.py
04:56  exarkun: mcurran: How should anyone here know that?
04:56  exarkun: mcurran: None of us have any idea what is in clean.py
04:56  nosklo: I know what it does
04:56  mcurran: hold on, pastebin is taking a moment to load
04:56  yxz97: nosklo: do you do python?
04:56  nosklo: it uses os.system to call chmod and apache init.d script
04:56  nosklo: yxz97: no. I'm still learning.
04:57  bob2: oh, this was your silly 'exploit'
04:57  yxz97: But I would like hear advise about it
04:57  mcurran: !pastebin
04:57  mcurran: what is that other one
04:57  nosklo: yxz97: please learn it please please please
04:57  yxz97: man, easy
04:58  exarkun: mcurran: codepad.org
04:59  nosklo: mcurran: bpaste.net paste.pound-python.org paste.pocoo.org
04:59  nosklo: isn't this? http://paste.pound-python.org/show/804/
04:59  nosklo: mcurran: http://paste.pound-python.org/show/804/
05:00  mcurran: Here it is:  http://pastebin.ca/2026876
05:00  infobob: http://paste.pound-python.org/show/836/ (repasted for mcurran)
05:00  nosklo: yeah, the same thing :)
05:00  mcurran: yeah, I'm still trying
05:01  bob2: better left as a shell script
05:01  nosklo: mcurran: ok, do you remember what _habnabit said to you the first time?
05:01  mcurran: no
05:01  nosklo: oh wait, I think it was bob2
05:01  mcurran: I could look at my logs, but it would be fixed if it helped at all
05:01  nosklo: Dez 21 22:01:29 <bob2>  don't use shell=True, why bother running it in a konsole, shutil.rmtree, don't wait(), chown'ing those files is a terrible idea, why are you running it all as root
05:01  bob2: right, sorry, all my fault
05:01  tos9: Eh? Are you a security consultant?
05:02  mcurran: he was just questioning the security of my commands, which is irrelevant
05:02  exarkun: mcurran: He was also recommending less error-prone ways to do this, it seems.
05:02  mcurran: again, irrelevant
05:02  exarkun: Did you ever run `konsole -e --real-transparency /pentest/exploits/SET/clean.py` in a shell to see what happens?
05:02  exarkun: You never responded, as far as I can tell.
05:02  mcurran: yeah, it did everything it should
05:03  exarkun: It displayed the NameError that clean.py raises?
05:03  nosklo: mcurran: how are you calling the script that contains the Popen call?
05:03  mcurran: running it from konsole
05:04  mcurran: ./ or python
05:04  mcurran: if I run the code in a python shell, it says konsole is not defined
05:04  exarkun: Of course.  That's not Python code.  Python only interprets Python.
05:05  Arch_: I have a class in a class(trying to use it as an enum) and in the outer class I have the __init__ function. I want to use a value from the enum as a default value for a parameter in __init__. Is this possible?
05:06  mcurran: I google'd a lot... and it seems that noone can really get a script to call another script and have it run at the same time while being independent process (i.e. not returning anything or consecutive)...  Unless I'm using the wrong querys
05:06  mcurran: I don't understand why it's such a complex idea to code
05:06  bob2: mcurran: pastebin the actual output
05:07  bob2: Arch_: nested classes gain no magic powers
05:07  mcurran: there is not output.  If run by itself it executes the commands in quotes fine.
05:07  cwillu_at_work: mcurran, you'll find you get a better experience if you take the advice that was given to you already, some of it is relevant to this point, and you'll understand what it is you're doing better
05:07  bob2: 15:04:31 < mcurran> if I run the code in a python shell, it says konsole is not defined
05:07  mcurran: the second shell running the second script immediately closes
05:07  bob2: pastebin that code and error, then
05:07  bob2: ok, good luck
05:07  mcurran: there is no error...
05:07  bob2: you're better off using the shell script whoever else wrote for you
05:08  mcurran: what r u talking about
05:08  Arch_: bob2: does that mean it's not possible? Or just that there is no point in nesting?
05:08  bob2: Arch_: I don't understand the question, but there is no point in nesting (and the answer would be the same if they were not nested)
05:12  Arch_: bob2: I tried it without the nesting and things worked fine so I guess you helped in a way :P
05:12  bob2: Arch_: (for more specific help, pastebin he code http://paste.pocoo.org/)
05:15  nosklo: mcurran: http://paste.pound-python.org/show/837/
05:17  Jesdisciple: trying to apply solution 'a' but do not understand ("pin"? what does that mean?) --> http://code.google.com/p/typhoonae/issues/detail?id=39
05:18  bob2: it means edit the buildout to mandate that particular version of that library
05:19  mcurran: thanks for that, but unfortunately I'm getting the same result, second window opens, and then closes, no output, first script continues to run, perhaps it's the Popen code that calls the script...
05:20  antizeus: hi. if i were performing operations on a giant dictionary, would the pythin take care of refraing it to consume all memory ram ? i mean would it manage the operating system features by itself or would i need to take care if i were going to load a giant dicionary from the disk uusing json ?
05:21  exarkun: antizeus: Python allocates memory to hold objects.
05:21  antizeus: i would like to know whether there is other option rather than using that method to allocate data on disk.
05:21  exarkun: antizeus: If you run out of memory, you run out of memory.
05:21  mcurran: here is R3L1K's set-automate script with my addition of the subprocess.Popen near the top:  http://paste.pocoo.org/show/308733/
05:21  antizeus: exarkun, hm, all right.
05:21  antizeus: exarkun, what would you use to allocate information locally ?
05:22  papna: antizeus: How big is this thing?
05:22  exarkun: antizeus: I would select an approach suited to the specifics of the data.
05:22  antizeus: papna, well. it can grow too much it will depend, i'm not sure at all yet.
05:22  antizeus: papna, but, for sure, it isn't that big to use mysql etc.
05:23  papna: antizeus: If you have a gigabyte JSON file, you probably should rethink your format.
05:23  Jesdisciple: bob2: which directory is etc/versions.cfg relative to?
05:23  papna: antizeus: If you have a 10MB JSON file, I don't know what you're worried about
05:23  antizeus: papna, what about 400mb + json ?
05:23  exarkun: well, it's json, so it'll get smaller once you load it into memory, right
05:24  dropdrive: exarkun: unless it's a bunch of short strings
05:24  dropdrive: exarkun: string overhead is pretty high right?
05:24  papna: antizeus: That's pretty darn big for JSON.
--- Log closed Thu Dec 23 05:28:25 2010
--- Log opened Thu Dec 23 05:34:15 2010
05:34 --- Users 662 nicks [0 ops, 0 halfops, 0 voices, 662 normal]
05:34  Jesdisciple: I just wish I knew where this etc was
05:34  Jesdisciple: don't even know which project it belongs to
05:34  bob2: lordy
05:34  bob2: the workaround is to use blahblah 1.1.1.
05:34  bob2: so use that
05:34  Jesdisciple: it's not in the dir where I make'd
05:35  bob2: of course not, it's a buildoutism
05:35  mcurran: bob2:  Do you know a simple way I could implement threading in my scenario?
05:35  bob2: not interested, sorry
05:35 --- Channel #python was synced in 105 seconds
05:36  bob2: Jesdisciple: if you're not using that buildout recipe then option a is not revelent
05:36  bob2: Jesdisciple: but you can install erlang-dev
05:40  Jesdisciple: bob2: thanks, although I really don't understand - not that I need to; I have no current interest in esoteric Python techniques
05:40  bob2: it's not esoteric
05:40  Jesdisciple: it compiled successfully
05:40  mcurran: well since your code works, like mine, but only when run from a seperate shell, then i'm guessing it's my Popen call
05:41  Jesdisciple: bob2: relative to my shallow use of Python, buildouts seem rather deep
05:41  bob2: ok
05:53  AzMoo: Is PIL on x64 Windows with Python 2.7 a no go? I can't find an installer anywhere that works.
05:54  bob2: even on that site that only has amd64 windows binaries?
05:55  AzMoo: I didn't find that site.
05:55  jroo: http://stackoverflow.com/questions/2088304/installing-pil-python-imaging-library-in-win7-64-bits-python-2-6-4 <- this is almost a year old but I guess it's still quite valid
05:56  AzMoo: I did find that site, but I worry about downloading a random binary from mediafire.
05:56  bob2: heh
05:56  bob2: welcome to windows ;-p
05:57  ssbr: In Django if you define a ForeignKey from A to B, you can set an attribute on B instances, like b_instance.a_instances, to get an iterable that (when iterated) selects rows from A that have a reference to b_instance
05:57  ssbr: what's the equivalent for SQLA?
05:57  nosklo: ssbr: relationship() ?
05:58  AzMoo: bob2: yeah, not really into it, but I figured I'd give local dev a go. Looks like I'll be putting it back into a VM.
05:58  ssbr: AzMoo: Is there any reason in particular you're using Py 64bit? in general it's just a pain on windows
05:58  ssbr: 32bit isn't at all.
05:58  mcurran: Got it working without opening a separate shell bob2!!!  now I just need to clean it up, second shell would be nice though.
05:58  AzMoo: ssbr: I run 64-bit windows so I figured I'd go for 64bit python. It's the default I go for these days.
05:59  mcurran: what is python command to do a hard return print("\n")
05:59  ssbr: AzMoo: well, do 32bit Python instead
05:59  mcurran: ?
05:59  ssbr: nosklo: where is that documented? google isn't helping me
05:59  AzMoo: ssbr: Can't hurt!
05:59  nosklo: ssbr: sqlalchemy.orm.relationship
05:59  nosklo: ssbr: let me find you a link
06:00  ssbr: mcurran: I don't understand the question
06:01  nosklo: ssbr: http://stackoverflow.com/questions/4234493/sqlalchemy-declarative-one-to-many-not-defined-error/4235691#4235691
06:01  ssbr: mcurran: what do you mean ' hard return print("\n")'?
06:01  mtx_init: I am doing some simple socket programming and when I do socket.send it works fine the first time, but then on the second iteration it just dies, I get a broken pipe error and I am not exactly sure on what that means.  The traceback and code are here http://pastie.org/private/8m5ferqz3oz9efgkdya
06:01  mcurran: It works, but I have a handler set up that I want the process to return to (simple Enter press) after the scripts run, so how do I get my second script to put in a hard return on exit
06:01  nosklo: ssbr: in the docs http://www.sqlalchemy.org/docs/orm/relationships.html
06:02  ssbr: mcurran: I have almost no idea what you're talking about.
06:02  ssbr: Back up please! :(
06:02  nosklo: ssbr: we're already struggling for some days.
06:02  ssbr: nosklo: not you too!
06:02  ssbr: coherence is so valuable.
06:03  ssbr: nosklo: anyway, thanks for the links. reading time!
06:03  ssbr: s/links/help/
06:03  mcurran: Restarting web server:  apache2 ...  waiting.  <blinking cursor> (I want it to return to the command line, so I want the script to run much like this C command printf("\n");
06:03  nosklo: ssbr: np feel free to ask if you need anything
06:04  ssbr: mcurran: "return to the command line"? Do you mean exit the program, or do you mean print a newline?
06:04  ssbr: mcurran: the statement "return to the command line" seems unambiguously to refer to exiting the program, but printf("\n") doesn't do that.
06:04  ssbr: (printf("\n") just outputs a newline to stdout)
06:05  mcurran: yes end that program
06:05  mcurran: not returning anything to the parent
06:06  mcurran: I wanted the child to run in a separate shell so I could watch output, but seems impossible to accomplish, so if it'll run without a shell, then fuck it, how to have it stop and return at the end though...
06:06  ssbr: mcurran: do you want to run "python my_script.py &"?
06:07  ssbr: mcurran: printing doesn't exit. sys.exit() exits (and in C, it isn't even that easy-- you have to return from the main function, or else send yourself a signal or something)
06:08  mcurran: thank you so much.  Do I need to import anything for exit
06:08  mcurran: sys right
06:08  ssbr: Yes.
06:08  magcius: why did I think there was a unicode escape like u"\uLEFT CURLY BRACKET"
06:08  ssbr: Also I'm really pretty sure you want "foo &"
06:08  ssbr: magcius: there is
06:09  magcius: how does it work?
06:09  ssbr: I can't remember
06:09  nosklo: mtx_init: socket programming is hard
06:09  ssbr: I am googling
06:09  ssbr: I think it was more like \U{LEFT CURLY BRACKET} or something
06:09  tapparatus: hi... is there a shorthand conditional that i can use instead of something like the following http://pastie.org/1399794
06:09  mtx_init: nosklo: yeah, it can be.  But good to know for those interviews.
06:10  nosklo: mtx_init: not really. I wouldn't hire some who even tries to use them
06:10  tapparatus: basically something like..   s = foo ? "foo" : "bar"
06:10  nosklo: tapparatus: s = "foo" if foo else "bar"
06:11  ssbr: magcius: hm, maybe not...
06:11  magcius: ssbr, :)
06:11  magcius: Tell me I'm not going crazy please.
06:12  nosklo: it's \N
06:12  nosklo: print u'\N{HOT BEVERAGE}'
06:12  ssbr: Yes!
06:12  ssbr: >>> u"\N{LEFT CURLY BRACKET}"
06:12  ssbr: u'{'
06:13  ssbr: pff, one letter off.
06:13  nosklo: what?
06:13  ssbr: <ssbr> I think it was more like \U{LEFT CURLY BRACKET} or something
06:14  ssbr: I even remembered capitalization! :<
06:15  bennym: wait, unicode escape? What's that supposed to do?
06:15  tapparatus: nosklo: thanks!
06:15  nosklo: bennym: produce a unicode codepoint from its name
06:15  hemanth: is there a way to make "in" case insensitive, say like B.tech, B.Tech or B.TECH ; must be match by just b.tech alone
06:15  bennym: codepoint?
06:15  mcurran: OMG!  It was the stupid -e the whole time (konsole -e) run command instead of shell, friggin' so simple.
06:16  bennym: hemanth: apply a string.lower to both
06:16  papna: hemanth: That's not "in".
06:16  papna: hemanth: You're welcome to make stuff that ignores case.
06:16  ssbr: bennym: codepoints are the basic units of unicode strings, like bytes are the basic unit of bytestrings
06:17  nosklo: <exarkun> Did you ever run `konsole -e --real-transparency /pentest/exploits/SET/clean.py` in a shell to see what happens?
06:17  nosklo: sigh
06:17  hemanth: print [ x for x in y if x in z ]
06:17  bennym: hemanth: string.lower("lol") == string.lower("LOL")
06:17  nosklo: hemanth: if x.lower() in z
06:17  nosklo: hemanth: and keep everything in z lowered
06:17  bennym: or use lower() on z as well
06:17  papna: bennym: string.lower is deprecated. "foo".lower() == "FOo".lower()
06:18  ssbr: bennym: expensive and unnatural! :|
06:18  nosklo: bennym: z is a container
06:18  bennym: papna: Okey :) Didn't know about ther
06:18  nosklo: it could be something else not a string
06:18  hemanth: nosklo, z is keys from a dict, i can do lower on it as well?
06:19  bennym: hemanth: you can lower strings, just strings
06:19  nosklo: hemanth: are the keys in z the ones that have weird casing?
06:19  nosklo: hemanth: or is it x?
06:20  hemanth: z
06:20  nosklo: hemanth: why? where does the dict z come from? Can't you just .lower() the keys at first place when generating it?
06:20  hemanth: nosklo, its read from a file
06:20  nosklo: hemanth: interesting, how do you read it from a file?
06:20  hemanth: bennym,ok
06:20  ssbr: nosklo: is relationship() a descriptor, or do I get passed a value for it when the object is created?
06:21  hemanth: nosklo, file is written, by some other web service, which i'm parsing to a dict
06:21  papna: It's JSON you're deserializing?
06:22  ssbr: hemanth: if you don't care about case, you can/should create a new dict where all the keys are lowercased
06:22  nosklo: ssbr: the former
06:23  ssbr: bedankt
06:23  hemanth: ssbr, ok, actually that dict will later be used for second level mapping and then extract some data from other files,hmm...
06:23  ssbr: hemanth: doesn't affect your list comprehension, though
06:23  nosklo: hemanth: how does the code that reads the dict from the file looks like?
06:23  nosklo: hemanth: it seems you can lower the keys at that part of your script
06:24  ssbr: nosklo: how do I find out if a column gets passed to __init__ or not?
06:25  ssbr: like, the primary key doesn't, for example. I don't know if foreign keys do, and I don't want to ask, I want to be able to check. :X
06:25  hemanth: nosklo, me requesting other team to make the file all lower and in a dict form, so i can avoid parsing data to a dict, but the issue is using that dict to do a keyword based search on certain unstructured files
06:26  nosklo: hemanth: "in dict form"?
06:26  hemanth: nosklo, dict format, as in {"key":"value"} pairs
06:27  papna: hemanth: Be specific about where this is from and how you read it.
06:28  hemanth: papna, this is from another program, that will be giving me a dict, using which i need to extract certain keywords, on a second level mapping
06:28  papna: hemanth: You are being really vague and handwavey--this is detrimental to technical discussion.
06:29  papna: hemanth: Other programs aren't CAPABLE of giving you dicts.
06:29  papna: hemanth: What does it ACTUALLY give you that you turn into a dict?
06:30  mtx_init: nosklo: about the job, I guess it depends on the company.  I have been asked it before
06:30  hemanth: papna, it was giving me a CSV before, now i have asked them to return me it in a dict format, that is not an issue, the issue is using the same to search terms and extract them files
06:31  mtx_init: nosklo: but I am sure more proven methods are likely less error prone
06:31  papna: hemanth: Your description of what the issue is wasn't English.
06:31  hemanth: papna, ha ha nice, ok will codepad it
06:32  papna: hemanth: If you want to do case insinsitive operations, make some canonical form that ignores case.
06:32  papna: hemanth: Same exact thing as your $ prefix.
06:32  papna: hemanth: Python doesn't have something magical for you.
06:33  papna: hemanth: Convert stuff to the canonical form to store and compare.
06:33  Chopinn: how does most python programmers name variables? is it: thisIsAVar? og this_is_a_var?
06:33  mcurran: how do I have a script execute a command in a shell?  open konsole and then have konsole execute the command
06:34  papna: Chopinn: The latter is recommended in PEP8, but the former is also very common.
06:34  mtx_init: mcurran: there are many ways.  os.system is the easiest
06:34  papna: mtx_init: Don't recommend os.system. Ever.
06:34  papna: mcurran: You want the subprocess module.
06:34  ssbr: it isn't easier than subprocess.call particularly
06:35  papna: mcurran: And you almost certainly don't want to envoke konsole or the shell.
06:35  hemanth: papna, http://codepad.org/ON7cWXrB described here
06:35  mcurran: can't you just set the flag since I'm using subprocess.Popen executable="/usr/bin/konsole"
06:35  Chopinn: papna, well.. this_var_is <-- seems.. kinda more readable :/
06:36  ssbr: Chopinn: PEP8 is good stuff. do it.
06:36  Chopinn: thx :)
06:36  ssbr: (however, it's just more readable to you. Other people may and will disagree)
06:36  papna: hemanth: You can do edu['UG']['B.A'] or edu.get('UG', {}).get('B.A') or make a database, which would be all about supporting interesting queries.
06:37  hemanth: papna, if i do a db, i can use that to search and extract from files?!
06:38  papna: hemanth: I don't understand what you keep meaning by "from files".
06:39  hemanth: papna, i have few unstructured files, which have those keywords i need to extract from
06:40  papna: hemanth: I'm afraid I don't know what "unstructured files" means here.
06:40  papna: hemanth: You'll have to write a program to do what your program is supposed to do.
06:41  hemanth: papna, ha ha :), so you want to see a sample ?
06:41  hemanth: papna, http://pastebin.com/rBNFumCX
06:41  infobob: http://paste.pound-python.org/show/840/ (repasted for hemanth)
06:42  hemanth: papna, in that case B.S.,Computer Science, must be extracted
06:42 --- Out`Of`Control is now known as Viper
06:43  papna: hemanth: That seems fairly unrelated to the way you store, query, and serialize your data.
06:44  hemanth: papna, me finding it hard to relate them all
06:45  hemanth: papna, which is most appropriate way to handle this?
06:47  papna: hemanth: You have to figure out what your data are, what exactly you are interested in.
06:47  papna: hemanth: You need to define where your data come from. It sounds like at least two places.
06:48  hemanth: papna,dict{dict{list}} is a bad plan?
06:49  papna: hemanth: From the former, figuring out what the data are (what information you have and what operations you want to perform on it) you can decide on your data structure.
06:49  talcite: hey guys, I have an interesting case here with file IO. There's a background daemon reading and deleting files every second in a folder on my fedora system. I tried opening a file in that folder with vim and writing, but the daemon removed it before I could finish writing and saving it, so I needed to write it elsewhere and mv it into that directory afterwards. Will I run into the same problem if I use open(),write(),close() in pytho
06:49  talcite: n?
06:49  papna: hemanth: A dict with dicts with list values as values is fine if that represents your data well and enables the operations you're interested in. I don't know what those things are.
06:50  hemanth: papna, parsing the file to extract those keys is all i'm looking into
06:50  papna: hemanth: Virtually completely separately from that, you'll have to develop some heuristics to parse resumes. This is of course impossible to get completely correct, but with some playing around and imagining you can probably pick up a lot.
06:50  talcite: I realize python writes a lot quicker, but I really want to make sure it would be safe, because the daemon failed catastrophically when it caught the vim file.
06:51  hemanth: papna, yup a 90% accuracy is pretty high i guess, normal forms and NLP is way to hard, so picked up keyword based parsing
06:52  papna: hemanth: Extracting those data are prettymuch unrelated to the other stuff you asked about.
06:52  papna: hemanth: Right. Doing full natural language stuff would probably not be appropriate to pull some information out of resumes.
06:53  hemanth: papna, and there is no proven method for this also, that's where /me is fully stuck and not able to move on, breaking the file into tokens and then matching them seems fine? shlex?
06:54  hemanth: papna, or even rather, reading the file to a list and then making a set out it, with keywords as another set, taken an intersection b.w them?
06:55  talcite: hmm actually I just verified that it does blow up since open() creates a filesystem inode. Is there any way to write and then allocate everything all at once?
06:57  Jesdisciple: talcite: there should be a way to lock the file from outside editing
06:57  hemanth: papna, none?
06:57  talcite: Jesdisciple: ah that's clever.. I was going to do a system call, but your way is better
06:58  Jesdisciple: that might make your daemon throw up though
06:58  talcite: Jesdisciple: the system call?
06:59  Jesdisciple: nah, the lock
06:59  Jesdisciple: if it finds it can't open the file, depending on why it's writing to it, something bad may happen
06:59  talcite: Jesdisciple: oh the locking. Yeah, that's possible. Hmm this isn't the best daemon.
07:04  Jesdisciple: talcite: I also hope those files are in a special partition... lots of writes like that could corrupt the HDD
07:05  talcite: Jesdisciple: hmm that's another good idea. I'll throw it into a tmpfs.
07:39  papna: hemanth: shlex is really designed for a specific thing that isn't this.
07:39  hemanth: papna, another supporting tools?
07:39  papna: hemanth: I would probably go through a files lines using some string operations and regular expressions as a first attempt.
07:39  hemanth:  /another/any other
07:39  papna: hemanth: I imagine regex are the main thing people who do resumescraping use.
07:40  hemanth: papna, for numbers and emails R.E works, but for education details how can it be used?
07:40  deitarion: Does Python have a functional/expression-form way to say "if name.endswith('.py'): name = name[:-3]"?
07:41  papna: hemanth: You would come up with a gazillion possiblities and look for them all.
07:41  cypha: what's the difference btwn Windows Installer and Windows X86-64 Installer?
07:41  papna: deitarion: os.path.splitext
07:41  papna: cypha: Presumably the former is 32 bit.
07:41  deitarion: papna: And how do I make it conditional on the extension being a specific one? I know os.path.splitext.
07:42  papna: cypha: If you don't know what you want, you probably want the former.
07:42  papna: deitarion: ==
07:42  hemanth: papna, ya :(
07:42  papna: hemanth: These heuristic things often involve a lot of legwork.
07:42  cypha: papna, i have windows 64bit
07:42  deitarion: Specifically, I'm trying to tidy up some OptionParser code which has most of its verbosity in defaulting opts.mode to parser.get_prog_name() with the .py stripped if present.
07:43  hemanth: papna, so first some great amount of manual parsing is to be done, before automating ?
07:43  wm4: why is it that: x=object() ; x.foo = 123 raises an attribute error?
07:43  papna: wm4: object doesn't support new attributes for its instances.
07:44  deitarion: wm4: Probably has __slots__ defined.
07:44  papna: wm4: Make your own class.
07:44  wm4: papna: and why does class X(object): pass support it?
07:44  papna: wm4: Becuase your class supports arbitrary attributes.
07:44  papna: wm4: object is written in C.
07:44  deitarion: wm4: Because subclasses aren't bound by the __slots__ state of parent classes.
07:44  wm4: papna: but it's just a subclass of object, nothing else... where's the logic?
07:45  wm4: deitarion: I do not understand or even know this slots stuff
07:45  papna: wm4: In the second example, you've made your own class and for that to be useful, it needs to support some attributes. For that to be easy, it supports arbitrary ones.
07:45  deitarion: wm4: For memory-consumption and performance reasons, it's possible to pre-define the attributes on a class using a member named __slots__. For language dynamism, inheritance allows subclasses to change their mind about that.
07:45  papna: deitarion: object does not have __slots__ defined.
07:46  papna: deitarion: __slots__ in inapplicable to object.
07:46  deitarion: papna: I didn't know that, but the overall behaviour still makes sense when explained in the context of __slots__ either way.
07:47  deitarion: His second question boils down to "Why can subclasses define new attributes on parents that prevent it?"
07:47  wm4: is there a standard "empty" class that allows adding new attributes to its instances?
07:47  papna: deitarion: I see why you thought of __slots__, but object doesn't have __slots__ defined and that specific thing isn't applicable.
07:47  wm4: deitarion: yes
07:47  papna: wm4: Why would you want that?
07:48  papna: wm4: Are you sure you don't want a dict?
07:48  papna: wm4: Or to write a real class?
07:48  deitarion: papna: He probably wants a dict with member operator access.
07:48  wm4: papna: I want a struct
07:48  deitarion: wm4: Why do you want a struct?
07:48  papna: wm4: What's that mean in this context?
07:48  wm4: deitarion: because I'm evil
07:49  papna: wm4: Are you sure you don't want a dict or a tuple or a namedtuple?
07:49  papna: wm4: You should define your data in some meaningful way.
07:49  deitarion: What high-level problem are you trying to solve? It sounds like you're making flawed assumptions about Python based on experience with another language.
07:49  wm4: papna: a data structure that contains named items
07:49  papna: wm4: A dict fits that description.
07:49  wm4: anyway, some tutorial or introductionary text on python.org suggested it sometimes makes sense to use objects this way
07:50  wm4: your argument is invalid
07:50  papna: wm4: Sometimes examples are shown where you make empty classes and then screw with their attributes.
07:50  papna: wm4: I'm not sure if this is helpful pedagogically, but it certainly isn't how things are done in good code.
07:51  wm4: papna: how could I screw up more with empty classes than "not empty" classes? they behave the same here
07:51  wm4: well I don't know how to write good code in python
07:51  amagee: is there some way to represent eg. 2: as an object, so i can create some object a such that my_list[a] is my_list[2:]?
07:52  papna: amagee: slice(2, None)
07:52  amagee: papna: brilliant, thanks
07:52  papna: wm4: A class is used to group a data model, operations using those data, and documentation about those data.
07:52  papna: wm4: Your thing doesn't do any of those.
07:54  wm4: papna: half of that is assuming I want to do OOP
07:54  papna: wm4: Not really.
07:55  papna: wm4: In any event, your imagined usage of a class isn't familiar or idiomatic or especially useful.
07:55  deitarion: Basically, if you don't want to add your own methods, use a dict. It's an "object that maps names to members". It's Python's struct.
07:55  Belxjander: anyone know how to cut up diff files using python?
07:55  deitarion: Belxjander: Define "cut up"
07:55  wm4: ok forget what I said, I want a dict with attribute access, instead of using the [] operatoe
07:55  wm4: *r
07:55  Eevee: is it possible to do python without doing "OOP"
07:56  papna: wm4: Well that's a silly requirement.
07:56  deitarion: wm4: Why?
07:56  wm4: deitarion: it looks better
07:56  Eevee: maybe this is just me but that sounds like trying to avoid procedural programming
07:56  Eevee: wm4: so make classes with no methods good lord
07:56  Belxjander: deitarion: I have a single diff file for a major modification to an older kernel and I would like to take each of the individual file differences and pull out only the code needed so I can try to re-integrate the patch with a newer 2.6 kernel by re-writing whats needed
07:56  papna: wm4: That's a silly claim. How is doing things in an unfamiliar, unintended way better for reading?
07:56  Eevee: "how do I do X?"  "use Y."  "well I don't want to use Y."
07:57  deitarion: Belxjander: You're looking to break it into a list of hunks?
07:57  Belxjander: deitarion: and Ive got two kernel trees and would like to strip out every file thats not referenced by the diff
07:57  papna: wm4: In any event, if you were to do something like that, you would still predefine your data and give the group a name. collections.namedtuple gives a way to do so conveniently.
07:57  deitarion: ...or a list of groups of hunks, one per file?
07:57  Belxjander: deitarion: one diff file with LOTS of hunks
07:57  papna: wm4: The thing most similar to a C struct in Python is really a tuple.
07:57  Eevee: papna: ...with the considerably caveat that tuples are immutable
07:57  Belxjander: deitarion: and I want to only have those files referenced actually kept in the kernel tree,  everything else can get rm'ed
07:58  Belxjander: for the kernel tree concerned
07:58  wm4: papna: aren't tuples bad according to your above arguments?
07:58  papna: wm4: Tuples are good.
07:59  deitarion: Belxjander: If I remember my diff syntax correctly, the simplest intermediary step would probably be by_file = ['+++' + x for x in diff_contents.split('+++')][1:]
08:00  deitarion: ...or was it "---" that came first in each file section?
08:00  Belxjander: --- then +++ lines
08:00  deitarion: Do you just want to extract the filenames reference? Because I can do that in a line or two of shell script.
08:01  deitarion: s/reference/referenced/
08:01  Belxjander: deitarion: that would be best
08:01  deitarion: One sec.
08:01  Belxjander: deitarion: I was trying bash shell script but would prefer python if its cleaner
08:05  deitarion: If you want to be thorough, you'll need to check both the before and after filenames. This'll give something you can pipe to file or whatever.
08:05  deitarion: egrep -- '(\+\+\+|---)' PATCH_FILENAME_HERE | awk '{ print $2 }'
08:05  deitarion: Actually, the initial -- isn't needed, so this...
08:06  deitarion: egrep '(\+\+\+|---)' PATCH_FILENAME_HERE | awk '{ print $2 }'
08:06  deitarion: Not sure how patches handle spaces in paths, so it'll break on those.
08:08  deitarion: Actually, I can do it all in ack, now that I think about it.
08:08  deitarion: s/ack/awk/
08:08  deitarion: (ack is a grep alternative I use a lot, so I've got the muscle memory for it)
08:08  deitarion: awk '{ if ($1 == "+++" || $1 == "---") print $2 }' PATCH_FILENAME_HERE
08:23 --- Ic3-IX|afk is now known as Ic3-IX
08:26  confluency: deitarion: awk '/^(\+\+\+|---)/{print $2}' PATCH_FILENAME_HERE :)
08:34  verte: heh, Dr Emming you little hacker you!
08:37  xro: hi, i try to add error handling to a little script... can you take a look and say me if this is totally stupid, or buggy, or good? --> http://paste.pound-python.org/show/842/
08:50  wm4: is there any way to attach arbitrary metadata to a method? (except doc comment)
08:51  klawd: should i place my docstrings inside of methods/functions/classes?
08:51  klawd: this seems so weird to me.
08:54  klawd: wm4: what kind of metadata?
08:54  wm4: klawd: a list of name value pairs
08:54  klawd: for what reason?
08:55  klawd: you could decorate it but i don't know if that's quite what you want
08:55  klawd: what're you up to?
08:56  wm4: klawd: I need a longer list of functions and some associated text (and probably a bit more)... I could do this with a list of tuples + functions defined somewhere else, but I want it compact (i.e. not need to write the function name 3 times)
08:56  klawd: i still don't really get what you want to do but look into decorators
08:56  wm4: and as I understand Python doesn't support anonymous functions (only lambdas)
08:57  klawd: no need for anonymous functions. you can define a function anywhere you want
08:57  wm4: klawd: but then the functions and the list entries are separate
08:57  wm4: klawd: I can't define the function where I want to
08:58  wm4: so I thought using a class + decorators (you named it) as replacement
08:58  wm4: sigh, sometimes I feel like python is trolling me
09:00  wm4: e.g. I want: [("This does something", dosomething1), ("blabla", dosomething2), ("x", dosomething3)], but obviously I have to define dosomething* somewhere else... I can't write the code where it should be
09:00  Eevee: what are you doing this for
09:01  Jesdisciple: wm4: lambda?
09:01  wm4: Eevee: there are many applications, like defining GUI actions or command line commands...
09:01  wm4: Jesdisciple: lambdas are for expressions only?
09:01  Eevee: wm4: but what are *you* doing this for
09:01  Jesdisciple: depends on how much you need to do I guess
09:01  Eevee: wm4: generally this problem is solved with a class or a decorator
09:02  wm4: Eevee: GUI actions... define the action's name, key shortcut, english text, and code
09:02  wm4: the code is mostly trivial (because it calls other code to do actual work)
09:03  verte: I would use a decorator
09:03  Eevee: yeah, stack a couple decorators
09:03  wm4: but isn't that very silly
09:04  Eevee: why?  that's what decorators are for
09:04  Eevee: decorating
09:04  GordonShamway200: hi guys
09:04  wm4: in certain other languages, I could just make a list of tuples for the actions, using anonymous functions for the code
09:04  GordonShamway200: can anyone tell me how to install pygame on snow leopard, i tried it but it didnt work
09:04  verte: @key_handler.on_key("C-t") def invoke_stump_wm(): ...
09:05  Eevee: and in certain /other/ other languages you wouldn't have scoped first-class functions at all
09:06  wm4: Eevee: point is, this is only a syntax issue in python
09:06  wm4: it could be easily added
09:07  Eevee: it could, but it's unnecessary, because there are already other ways to do the same thing
09:07  Eevee: that are no more awkward
09:08  wm4: Eevee: using a class + decorators is certainly more awkward in this case
09:08  Eevee: you don't need a class
09:09  wm4: Eevee: well I have to get a list of all those functions
09:09  Eevee: so have one of the decorators add the function to a list
09:09  alexdong: I am in the process of rewriting a crawler program for performance reasons. It fetches a link from a queue, process it and throw the result into another queue. The main processing is to download it using mechanize, parse the title and extract the texts.  gevent looks pretty sweet. Just wondering which kind of performance boost I should expect to have.  In this page, http://www.1729.com/blog/MultiThreadedPythonS3Application.html, the author claims about 4+
09:09  alexdong: performance boost from single process to multi-threaded.  Wondering what the rough estimation I should expect if we're to implement it in gevent.
09:09  wm4: Eevee: that would make the decorator class instance specific, does that even work?
09:10  MostAwesomeDude: alexdong: Have you seen scrapy?
09:10  Eevee: I'm not sure how you envision this working but it would absolutely work
09:10  Eevee: decorators are just secret code for "avoiding repeating a function name"
09:11  alexdong: yes, roughly. Although scrapy is for scrapping purpose? Whereas we know precisely which links we want to download. No need to walk the sitemap, etc.
09:11  MostAwesomeDude: alexdong: It's pretty flexible.
09:11  wm4: Eevee: it's actually really stupid... decorators wouldn't be needed as a language feature if there'd be just the (much simpler) anonymous functions
09:11  Suv123: hi guys, I am using python 2.5 and trying to connect gmail ssl smtp port via smtp lib, It blocks and eventually timeout. Can anyone help whats wrong.
09:12  MostAwesomeDude: alexdong: I mention it because it's (a) Twisted-based (b) well-tested (c) likely to cut down on the amount of time spent in your rewrite.
09:12  xro: hi, i try to add error handling to a little script... can you take a look and say me if this is totally stupid, or buggy, or good? --> http://paste.pound-python.org/show/842/
09:12  Habbie: alexdong, Twisted will beat the pants of anything you can thread
09:12  bob2: Suv123: not unless you http://paste.pocoo.org/ your code
09:12  Habbie: off of
09:12  lobak: hello
09:13  herch: Hi, if I take the python dictionary which as lists and more dictionaries as values and if I simply print it on STDOUT will it give a valid JSON
09:13  alexdong: Habbie, MostAwesomeDude: I'm more comparing it with gevent.
09:13  Eevee: wm4: er, yes they would, for at least the built-in decorator functionality.  I don't know what your objection is; decorators make it much more obvious what's going on.  anon functions bury the all-important 'def'/'sub'/whatever keyword in the middle of a line
09:13  herch: it looks like a valid JSON
09:13  bob2: herch: no, use the json module
09:13  MostAwesomeDude: alexdong: Well, I became a Twisted convert a couple years ago, so. :3
09:13  lobak: if i have a variable that assigned with (), whats that suppose to mean?
09:13  lobak: var = ()
09:13  alexdong: Habbie, MostAwesomeDude: do you have rough ballpark on what the performance gain for using scrapy?
09:13  bob2: lobak: empty tuple
09:13  Habbie: alexdong, oh, that does look interesting. i don't have numbers.
09:14  herch: I am stuck with python 2.4, so can't use json module. not allowed to import external modules either
09:14  bob2: xro: catching Exeption is a terrible idea
09:14  MostAwesomeDude: alexdong: Nope! But it will go faster.
09:14  bob2: herch: then you'll have a lot of fun ahead reimplemtnting it
09:14  MostAwesomeDude: herch: Times are tough.
09:14  bob2: herch: simplejson is pure python, thopugh
09:14  lobak: bob2: thanks
09:14  _habnabit: wm4, how, exactly, would anonymous functions replace classmethods?
09:14  xro: bob2, why? i the only things i can do is wait and retry... For all possible exceptions....
09:14  wm4: _habnabit: what are classmethods
09:14  bob2: wm4: decorators have nothing to do with that
09:15  bob2: wm4: methods that get bound to the class and thus get it is as their first arg
09:15  bob2: xro: because you just broke ctrl-c
09:15  VladDrac: herch, simplejson is just one file, it's easy to include in your project
09:15  bob2: xro: and when it runs out of memory, it will asplode
09:15  VladDrac: (I think)
09:15  wm4: Eevee: btw. with decorators, I have to repeat typing the decorator (for each function)
09:16  herch: VladDrac: The issue is more of legal stuff than technical. Thanks anyways for the suggession
09:16  Suv123: bob2: code is  http://paste.pocoo.org/show/308775/
09:16  Eevee: wm4: ok?  you also have to repeat 'def'
09:16  xro: bob2, so, to catch all error that can occur in my script... what do you propose?
09:17  verte: xro: why do you want to catch them
09:18  bob2: xro: what for?  except blocks are for exceptions you can do something with
09:18  bob2: logging "user hit ctrl-c" seems pointless and user-hostile
09:18  bob2: Suv123: yes, of course, 465 is the smtp/ssl port, so you need to speak SSL over it
09:18  wm4: Eevee: also I can't put the decorator in the same line as "def" (?), and decorators with arguments seem really complicated
09:19  wm4: Eevee: sounds like a really bad way to solve this
09:19  _habnabit: wm4, um, no, decorators with arguments are just an extension of regular decorators.
09:19  _habnabit: wm4, there's nothing different about them. At all. Whatsoever.
09:20  bahamas: wm4: decorators with arguments return a decorator instead of "simple" functions
09:20  xro: bob2, i have to wait and retry 3 times... if i always get an error i have to raise it to the parent function.... and i can handle it there...
09:20  Suv123: bob2: how can i do ssl. I am using python 2.5. Unlike python 2.6+ SMTP_SSL method is not available in the smtplib python2.5.
09:20  Suv123: bob2: is there any way to make it work
09:20  wm4: I know... I'll write my actions as a text, process that text, and eval() the result
09:20  _habnabit: wm4, #python is for good ideas only.
09:21  xro: verte, i have some work with network and servers... so, i get some error because of network interruption or server state...
09:21  wm4: _habnabit: give me one
09:22  _habnabit: wm4, okay. "don't do that"
09:22  MostAwesomeDude: wm4: Eat an orange every day.
09:22  wm4: I just want one line per action, as most of the actions are a bit trivial - sorry I've been spoiled by other languages
09:23  _habnabit: wm4, what's an action
09:23  wm4: _habnabit: a name, a key shortcut, an english caption, and some code
09:24  _habnabit: wm4, sounds like a good use case for decorators with arguments.
09:24  wm4: _habnabit: I thought #python is fo.... wait, wait, ok
09:25  _habnabit: wm4, I don't see any problems with what I suggested.
09:25  wm4: _habnabit: it still gives me the problem that I want to reference the "enclosing" context
09:26  wm4: oh well... forget it
09:26  _habnabit: wm4, ... and why exactly can't you?
09:26  Eevee: wm4: this is not something you mentioned before?  what do you mean, reference the enclosing context
09:26  Suv123: bob2: I mean SMTP_SSL class is not available in python 2.5.
--- Log closed Thu Dec 23 09:30:08 2010
--- Log opened Thu Dec 23 09:30:37 2010
09:30 --- Users 651 nicks [0 ops, 0 halfops, 0 voices, 651 normal]
09:30  Eevee: wm4: why?  we just told you three times how to do this: use a context object whose methods are the decorators
09:31  wm4: Eevee: could you elaborate?
09:31  bob2: Suv123: be more patient, I'm reading the docs for you
09:31  bob2: Suv123: http://stackoverflow.com/questions/399129/failing-to-send-email-with-the-python-example should work
09:32 --- Channel #python was synced in 109 seconds
09:32  xro: bob2, i annotate the paste... --> http://paste.pound-python.org/show/843/
09:33  bob2: xro: it has syntax errors
09:33  xro: bob2, really? where?
09:33  bob2: I can't be bothered to figure out what you think it does
09:33  bob2: lines 11,12
09:34  bob2: the thing you probably want to do is just catch the exceptions you know you can handle, and let python deal with the rest
09:34  Eevee: wm4: hang on
09:34  bob2: or put this magic catcher at a much higher level
09:34  wm4: Eevee, _habnabit: ok I think I got it... it took ~10 lines of code to set up the decorator
09:34  wm4: maybe I should paste it
09:36  wm4: Eevee, _habnabit: is that alright http://paste.pound-python.org/show/844/
09:36  xro: bob2, indentation error line 11-12? that's a copy/paste error... In fact, when i cath an error i would like to retry 3 times...
09:37  bob2: whatever
09:37  wm4: oops it should be "print Actions.actions"
09:37  bob2: catching Exception is wrong even if you do some retry crap
09:38  bob2: I don't want to ctrl-c your program 5 times before it dies
09:38  bob2: I hate the svn even takes > 1s to die when I ctrl-c
09:38  xro: bob2, as i said i will correct the catch...  but after that, when an exception will be catched, the script should return to the "for i in range(nbRetry)"..., right?
09:39  bob2: if you catch the exception, and no more are raised, execution will continue after the except statement
09:40  verte: bob2: is KeyboardInterrupt an Exception subclass?
09:40  xro: bob2, ok... thanks for your time!
09:40  verte: no, it isn't
09:40  bob2: oh, I retract my ctrl-c rant then
09:41  bob2: I forgot about the BaseException thing
09:42  Eevee: wm4: no need to store Actions.decorate; just use it directly.  otherwise yeah something like that.
09:43  mahmul: anybody have any experience with wtforms?
09:43  wm4: Eevee: but that is too much typing
09:43  bob2: try they turbogears channel if no one pipes up here
09:43  Eevee: mahmul: some yeah
09:43  mahmul: bob2: thanks for the tip
09:44  Eevee: and only about 40% of it is complaining!
09:44  mahmul: Eevee: have you done any ajax stuff with it?
09:44  Eevee: mahmul: ah, nope
09:45  mahmul: Eevee: ok, fair enough.  thanks anyway
09:45  bob2: deform's the least tehsuck form library i've found
09:45  Eevee: I need to give deform a shot I guess
09:46  mahmul: bob2: hmm, i'll take a look at it.  the flask people seem to like wtforms, so i've been banging it on the ground a little
09:46  Eevee: wtforms is, alas, finally getting on my nerves, what with absurd design decisions like giving every element an id equal to its name
09:46  Eevee: I just want a form library that doesn't do anything stupid; is that so much to ask
09:46  _habnabit: deform is okay, if you can stomach ZPT or you don't mind converting over every template to some other language. :V
09:47  bob2: i bet patches are welcome ;p
09:47  Eevee: I'm sure their templates are dumb so I'm okay with the latter
09:47  Suv123: bob2: thanks
09:47  _habnabit: bob2, patches for what!
09:47  bob2: _habnabit: other template language support!
09:47  _habnabit: bob2, no, no, it supports other languages.
09:48  _habnabit: bob2, but all of the form elements and whatever need templates.
09:48  Eevee: it remains a mystery to me why anyone would use anything but mako
09:48  bob2: right
09:48  _habnabit: bob2, so if you switch the template engine, you have to switch the templates.
09:48  bob2: Eevee: nxml-mode is fucking shithot
09:48  bob2: hence zpt
09:48  Lauxley: hi, i know that this question has been asked like a thousand time but ... i need a lightweight code editor (for python), with only color markups and auto-completion, i used Ulipad, but its a bit buggy, any ideas ?
09:49  bob2: _habnabit: right, I meant, 'including tempaltes for other languages'
09:49  _habnabit: I'd rather use genshi if we're mashing python into an XML namespace.
09:49  _habnabit: b	ah.
09:49  _habnabit: bob2, ah.
09:49  bob2: Lauxley: autocomplete is always going to be disappointing in python
09:49  Eevee: Lauxley: gvim, and also give up on autocomplete
09:49  bob2: I'd say emacs but people seem incapable of getting ropemacs to work
09:49  _habnabit: Lauxley, what platforn?
09:49  _habnabit: m
09:49  Lauxley: ubuntu
09:49  Eevee: xml-ish templating drives me insane
09:49  _habnabit: emacs is nice.
09:50  bob2: Eevee: zpt is actual balls-to-the-wall xml
09:50  mahmul: dabbrev-expand is nice
09:50  _habnabit: bob2, so's genshi.
09:50  bob2: dabbrev works exceedinly well
09:50  bob2: but is hard to explain
09:50  Eevee: hey you know all the important dynamic bits of your template?  let's make those as hard to pick out as possible
09:50  Eevee: bob2: I'm sure coldfusion is as well
09:50  mahmul: yeah? it's pretty intuitive to use
09:50  Lauxley: yeah but, is it easy to find good custom configs for emacs ?
09:50  bob2: and probably punishes new programmers a bit since they have no idea what is going on and have no corups
09:51  bob2: er corpus
09:51  bob2: Eevee: ohsnap
09:51  _habnabit: Eevee, eh, just highlight tags/attributes with a particular namespace prefix.
09:51  _habnabit: Eevee, e.g. py:
09:51  bob2: mahmul: hm, most people I show it to are disappointed that it isn't identical to waht visual studio has, but maybe I just have lame friends
09:51  bob2: and it sounds dumb, but in practice works astonishingly well
09:51  Eevee: speaking of corpses I need to get to sleep
09:52  bob2: adios
09:52  mahmul: bob2: i'd hate to judge ;)
09:52  mahmul: Eevee: night
09:52  Eevee: gn #python
09:52  DominoDrive: Hello! Im trying to find a good way for me and my friend to be able to "share" a python interpreter (like shared desktop), or maby just a ordinary word editor. bottom line is that we want to be able to work on the same code in real time. Anyone know a good way for this?
09:53  _habnabit: DominoDrive, that's generally a recipe for disaster, and the entire reason source control was invented.
09:53  bob2: I think the more productive path is version control and unit testing
09:53  plundra: screen
09:54  bob2: but that's a hrd sell compared to OMG LOOK WE'RE EDITING THE SAME CODE
09:54  plundra: But yes, it's a horrible idea.
09:54  brajek: DominoDrive, you cas use screen in intertactive mode and some voice/text communication along side
09:54  DominoDrive: _habnabit,  i dont know if i know what u are getting at?  we are not working on anything important. We are noobs who want to learn together.
09:56  DominoDrive: Brajek the "screen in interactive mode". is there a good program for this since we use different Os. I use ubuntu and hes using Xp
09:57  plundra: DominoDrive: Let him ssh in to your box. PuTTY is good.
09:57  wm4: DominoDrive: Gobby, but no python interpreter
09:57  DominoDrive: plundra okey gotta read in to what ssh means but thank u :)
09:58  plundra: This really is the worst idea, why can't you sit next to each other on a single computer'
09:58  bob2: screen -x
09:58  wm4: can a decorator rename the function's final name in the scope it is declared in?
09:58  verte: nobody suggested emacs?
09:58  bob2: wm4: not without insanity
09:58  DominoDrive: plundra 100 miles is a long way to travel. Thats why :)
09:58  bob2: but I think with stack-molesting you could, in theory
10:01  DominoDrive: verte  i suspekted that emacs could handle it. But i hanvent yet learnd it, i just feel it will be to complicated to start to learn two totaly new thing for me since im new to programming and linux also
10:01  verte: it does take a few hours to settle in
10:02  wm4: bob2: what would that insanity be?
10:02  DominoDrive: verte really? well maby i should to that then.  Would be awsome to say that i use emacs ;D
10:02  verte: wm4: implementation specific frame goop
10:03  wm4: verte: oh
10:04  verte: sys._getframe().f_back().f_locals() etc
10:04  _habnabit: verte, :(
10:04  verte: indeed
10:05  DominoDrive: verte  about the apt-get install emacs.. Does that give me all i need to be able to use emacs as a python interpreter ?
10:05  wm4: ok, then how can I get the class I'm currently in... def X(object): print _what_
10:06  verte: dominodrive: unless you are on an ancient deviant install, yes
10:06  verte: debian*
10:06  verte: bah
10:06  DominoDrive: ubuntu 10 10
10:06  DominoDrive: i dont know what category that fall in to
10:06  _habnabit: wm4, what are you trying to accomplish
10:08  verte: wm4: while decorators are active, the class doesn't exist
10:08  verte: ie in the body
10:09  wm4: I just wanted to make it so that if an action is invoked, a wrapper method of the class instance the action method is in is invoked first
10:10  _habnabit: So why does that mean you need the class?
10:10  verte: why doesn't your decorator wrap it?
10:11  wm4: _habnabit: I thought of handing that wrapper function to the decorator (when I instantiate that ActionDecorator class I pasted before)
10:12  pshr: Hi, for a, b in c : in that syntax what should 'c' be which time
10:12  pshr: I am a beginner
10:12  pshr: *which data type should 'c' be
10:12  pshr: ?
10:13  _habnabit: pshr, it can be anything iterable.
10:13  _habnabit: pshr, type doesn't matter.
10:13  kerio: why does __len__ have to return an int? :(
10:13  pshr: c = ['1','2']
10:13  pshr: will it do ?
10:13  wm4: verte: I thought it'd be a good idea if the ActionDecorator doesn't depend on the class where I'm using it in
10:13  _habnabit: pshr, do what?
10:13  wm4: but maybe that isn't worth it
10:13  pshr: for a, b in c: will that give a,b values 1,2 ?
10:13  pshr: what if I have more values _habnabit
10:13  _habnabit: pshr, nope.
10:13  pshr: can you please give me an example ? _habnabit
10:14  _habnabit: pshr, c = [('1', '2')]
10:14  wm4: hahaha, sure is much "better" than anonymous functions
10:14  bob2: kerio: oh man
10:14  Octodigit: a,b=c will though
10:14  bob2: kerio: diaf
10:14  Octodigit: @pshr
10:14  _habnabit: wm4, I'm unclear what you think anonymous functions would gain you here.
10:14  wm4: _habnabit: I could define the actions as list of tuples
10:15  pshr: thanks _habnabit
10:17  seku: why do people hate if a=b
10:17  kerio: what would that mean?
10:17  seku: add :
10:17 --- heatxsink is now known as the_heater
10:17  _habnabit: seku, well, probably because it's a SyntaxError
10:18  seku: YEEEES. But its not the reason why it is a syntax error. Its because such a thing is frowned upon
10:18  kerio: no, because equality is ==
10:18  kerio: = is assignment
10:18  kerio: and assignment there makes no sense
10:18  kerio: equality is == to distinguish it from assignment
10:18  seku: but assignment should return what is assigned to lsh
10:19  wm4: what would you do if you had to forward reference a function inside the class while your class statement is executed?
10:19  kerio: seku: nowhere in the world that's written
10:19  kerio: except in C reference manuals
10:19  kerio: which talk about C
10:19  seku: i wrote it
10:19  seku: :D
10:19  _habnabit: wm4, um, why would you need to?
10:19  Wild_Cat: wm4: all that matters is that the function be defined when it is called
10:19  kerio: fwiw, = doesn't return lhs exactly *because* of if a=b:
10:19  Wild_Cat: wm4: so forward defs aren't a problem unless they happen in the class body and not in a method
10:20  wm4: Wild_Cat: try class X(object): print foo ; def foo(self): pass
10:20  seku: kerio: you know what i meant ;) it feels comfy using such things, and its not a question about c either
10:20  _habnabit: seku, it was explicitly disallowed because it was determined it's more confusing than it's useful.
10:20  kerio: it doesn't feel "comfy"
10:20  seku: it does!
10:21  Wild_Cat: wm4: yes, that's what I meant by "happen in the class body and not in a method"
10:21  kerio: "if a=b:" according to your definition does the same as "a = b; if a:"
10:21  kerio: except that the first one can be confused with "if a == b:"
10:21  seku: but python is wordy here without any need to be
10:21  Octodigit: seku: the only times I've known it to be a problem, it has prevented bugs
10:21  talented: when iterating over a list, is there any way to get your current position? or should I just loop with enumerate?
10:22  _habnabit: talented, that's what enumerate is /for/.
10:22  Wild_Cat: wm4: the rule in Python is that a name must have been defined when it is referenced (called/assigned/otherwise accessed). There is no workaround.
10:22  Octodigit: and since other than that it's pretty much unnoticeable, it's a great feature imo.
10:22  verte: seku: confusing = and == is a common source of bugs in C and javascript and the time you save not having to worry about it in a real language is significant
10:22  wm4: _habnabit: like I said, I want a wrapper to be executed when actions are invoked... what wrapper is used is defined via the decorator; so I wanted to define a decorator creator function that returns the decorator and takes the wrapper function as argument
10:22  kerio: wait, C is not a real number?
10:22  kerio: er, language
10:22  kerio: hehe, C is a complex language
10:22  wm4: _habnabit: and I don't want to have to define the wrapper function before the decorator is created
10:23  Octodigit: c is not as good at being an hll as python is, let's put it that way.
10:23  seku: verte: its not about time either. I'm a hobbyist. The code becomes lengthier with no good reason, i feel.
10:23  verte: wm4: do you want this advice (confusingly called "wrapper" by you here) configurable on a per-method basis?
10:23  wm4: _habnabit: I'm thinking the code would look more messy if I'd define the wrapper before the decorators used in that class
10:23  _habnabit: wm4, so, um, did you write your code and you had an error?
10:23  _habnabit: wm4, or are you just speculating without any basis?
10:24  Octodigit: seku: why confuse two different things in a way that can introduce bugs?
10:24  verte: seku: learn to touch type.
10:24  kerio: seku: show me an example of code where "if a = b:" shortens things a lot more than "a = b; if a:"
10:24  Wild_Cat: wm4: show us your actual code. But like I said, there is no workaround. Python has no "forward" statement.
10:24  seku: errr_: i can touch type
10:24  seku: verte: *
10:24  verte: seku: do you use single-letter variable names and one-space indents, too?
10:24  wm4: _habnabit: speculating, basically
10:24  kerio: i mean, the second one is *one character longer*
10:24  seku: no, i use 4 space indents, and one letter variables for very local variables
10:24  _habnabit: wm4, well, your speculation is, as I said, ungrounded and wrong.
10:25  seku: do you use lenghty names for really small scope vars?
10:25  wm4: _habnabit: is it
10:25  _habnabit: wm4, come back when you have a problem.
10:25  Octodigit: there are all sorts of things that are in other, variably good, languages that are not python. that's why python isn't c or scheme or lisp or java
10:25  wm4: _habnabit: I have a problem because I'm about to implement this
10:25  Wild_Cat: wm4: if you think the extra definitions may make your code less readable, put your decorators in another module?
10:25  verte: wm4: did you answer my question before?
10:26  _habnabit: seku, the places where C uses assignment as an expression are very rarely implemented the same way in python.
10:26  _habnabit: seku, e.g. for loops.
10:27  wm4: verte: sorry I overlooked that... the wrapper/advice (what's wrong with "wrapper") is specified via the decorator's name... I was going to do something like ImageAction = Actions.decorate_via(image_action)
10:27  verte: like the while ((line = f.readline()) { ... } garbage - we would write for line in f: ... or use the two-argument form of iter() if need be
10:27  wm4: where image_action is the wrapper/advice
10:27  verte: wm4: because the wrapper usually calls both the advice and the underlying method
10:27  wm4: and then use ImageAction is actual decorator
10:28  verte: wm4: so what is what here, Actions is the method you'd like to decorate?
10:28  wm4: verte: Actions is as in my paste
10:28  verte: oh, ok, I see
10:29  verte: oh, I didn't get your paste. can you link again?
10:29  sickn3ss: Can anyone help me with a small issue, I need something like .islower for non alphanumeric characters like @,#,$
10:29  _habnabit: sickn3ss, what's the uppercase version of @ ?
10:29  wm4: verte: http://paste.pound-python.org/show/844/ (that print statement in the last line has a type, unimportant)
10:29  sickn3ss: _habnabit, it does not have an uppercase, @ = shift + 2
10:29  wm4: s/type/typo/
10:29  AerobicRobot: Is it possible to use a string with retruns in it? I have a hefty block of text that I'm using for a cipher and i dont want to go through and remove every single return.
10:30  AerobicRobot: returns*
10:30  Wild_Cat: AerobicRobot: sure. """Use a triple-quoted string."""
10:30  _habnabit: sickn3ss, well then what do you think .islower() would do?
10:30  AerobicRobot: Thank you.
10:30  sickn3ss: _habnabit, I am asking for something similar like .islower(), .isupper() only for those characters
10:30  mahmul: sickn3ss: what result do you want exactly
10:30  kerio: wait, @ is altgr-ò!
10:31  mahmul: sickn3ss: ! -> 1, @ -> 2?
10:31  kerio: what is this nonsense?
10:31  kerio: shift+2 is "
10:31  mahmul: sickn3ss: that's not true of every keyboard
10:31  sickn3ss: mahmul, I am importing a .txt file and reading each character from it and I want to change every special char with 's'
10:31  Jesdisciple: kerio: the nonsense is your kbd ;)
10:31  _habnabit: sickn3ss, set(s) <= set('!@$')
10:31  verte: wm4: in this case, what are the arguments to the decorator?
10:31  sickn3ss: _habnabit, let me see
10:31  mahmul: sickn3ss: what about re.sub('[^\d\w\s]', 's', line)
10:31  mahmul: sickn3ss: you should compile the regex, of course
10:32  wm4: verte: ImageAction would take the same arguments as Action
10:36  verte: wm4: can you explain some more? I'm not following what you would like which method to do
10:36  wm4: verte: I'm trying to implement it right now...
10:37  wm4: what I want is actually simple, but it's going to be as messy as my attempts to explain it
10:37  Wild_Cat: wm4: don't worry about that, we can help you improve it ;)
10:38  wm4: ok why doesn't this work: (1, *([2, 3]))
10:38  verte: indeed
10:39  wm4: I'd expect (1, 2, 3)
10:39  verte: because tuple construction is not a function call
10:39  wm4: apparently
10:40  verte: wm4: anyway, here is my guess at what you are doing. Test is an action, and you want image_action = actions.get_action("Test") to be a function that calls all of the methods that were decorated with "Test"
10:41  wm4: verte: no that is not what I want
10:42  verte: do you want window.test_action(x, y) to call window.Test(x, y) also?
10:43  wm4: verte: hold on, I'll post my result when I'm done
10:43  verte: ok
10:43  wm4: "SystemError: new style getargs format but argument is not a tuple"
10:43  wm4: trying to make sense out of this...
10:43  verte: oh, that's a good one.
10:44  wm4: nevermind, it had something to do with PyGTK and incorrect parameter types
10:44  verte: ah
10:44  wm4: although I still don't know what it means
10:49  _habnabit: wm4, it means that pygtk is poorly-coded.
10:49  _habnabit: wm4, something that can only happen in C code.
10:55  wm4: now my problem is that somehow the last decorated method is used for all actions, as if I used a global variable instead of an upvalue somewhere
10:55  verte: hehe, upvalue
10:56  verte: you naughty TCL hacker you
10:56  wm4: why TCL
10:56  verte: what else?
10:56  wm4: Lua?
10:57  wm4: I suppose it is called "upvalue" in general
10:57  verte: I seem to have forgotten Lua pretty quickly
10:57  d1b: um
10:57  verte: :(
10:57  d1b: hi um so from an sqlite3 database i get the time back in iso format ... but this isn't useful because i want to use it to make a database query again... any hints as to what i could do :P
10:58  verte: d1b: and you can't pass an iso formatted date repr into the query?
10:58  verte: parse it, I guess
10:58  d1b: verte: no
10:59  d1b: i get back this
10:59  d1b: 2010-12-23 20:23:14
11:00  _habnabit: d1b, sqlite doesn't have a datetime type.
11:00  verte: why do you think you can't pass that into a query?
11:01  wm4: what a fucking clusterfuck
11:01  d1b: _habnabit: it has a date / time type
11:01  _habnabit: d1b, nope.
11:01  d1b: _habnabit: so i enter it as unix time
11:01  d1b: _habnabit: yes it does because im using *it* now
11:02  d1b: _habnabit: it does so have a datetime type
11:02  _habnabit: d1b, you're probably using one of the pysqlite extensions.
11:02  d1b: if you can't help please don't tell me incorrect things
11:02  _habnabit: d1b, but /sqlite/ itself does not.
11:02  d1b: _habnabit: sir you are very mistaken
11:02  d1b: http://www.sqlite.org/lang_datefunc.html
11:03  _habnabit: d1b, okay? That's functions, not data types.
11:03  verte: d1b: I don't see anything on that page that refutes what habnabit has said
11:03  verte: d1b: all those functions take strings!
11:04  verte: and return strings
11:04  d1b: verte: sorry as in :P
11:04  imanc: hey folks - how do I copy a nested dict?  a  list comp just appears to copy the keys
11:04  imanc: {u'Roller 30mm': {'count': 0, 'total': 0, 'vat': 0}, u'TheO Pod': {'count': 0, 'total': 0, 'vat': 0},
11:04  d1b: sqlite handles time fine but there is no inbuilt datetime datatype sure
11:05  _habnabit: d1b, yes, that's what I said from the beginning.
11:05  d1b: _habnabit: yes but you are still not telling me anything useful...
11:05  _habnabit: d1b, anyway, did you create the databassee?
11:05  d1b: or helping
11:05  d1b: _habnabit: yes
11:05  sickn3ss: darn this special character stuff is weird.
11:05  crazymykl: imanc: there is a copy method on dicts
11:05  _habnabit: d1b, eh, forget it
11:05  sickn3ss: can't understand the regex sintax
11:05  sickn3ss: O_o
11:05  _habnabit: imanc, dict((key, value.copy()) for key, value in D.iteritems())
11:06  mahmul: sickn3ss: there's a lot of things that can help with that, like regex buddy
11:06  imanc: _habnabit: ahh, thanks
11:06  d1b: _habnabit: hum?
11:06  _habnabit: sickn3ss, set operations are going to be faster and more readable than mucking with regexps.
11:06  Octodigit: kiki or kodos are good too, sickn3ss
11:06  wm4: how many of you want to argue that this isn't a fucking bug: http://paste.pound-python.org/show/845/
11:06  sickn3ss: _habnabit, hmmm lets see the set operations O_o
11:07  d1b: _habnabit: nm got it :P
11:07  _habnabit: wm4, well, it's a bug in your understanding of python if you expect a different result.
11:07  verte: wm4: why would it be different?
11:07  _habnabit: wm4, in fact, I don't know of any language that doesn't do the same thing.
11:07  wm4: _habnabit: Lua
11:07  wm4: _habnabit: and probably most functional languages
11:07  _habnabit: Lua doesn't have closures? Wacky.
11:08  wm4: _habnabit: Lua does have closures
11:08  verte: wm4: all of those functions have the same parent environment, and in the parent environment the value of i is 2
11:08  wm4: anyway, how do I work it around
11:08  _habnabit: wm4, any language with lexical closures would have that same result.
11:08  wm4: _habnabit: no
11:09  verte: wm4: you create an environment with the i you require (via an inner function), or cheat and use a default argument.
11:09  _habnabit: wm4, can you provide a counterexample?
11:09  wm4: verte: thanks that worked
11:09  wm4: _habnabit: try that pasted code in Lua
11:10  _habnabit: wm4, http://codepad.org/gxkHHQik
11:10  wm4: _habnabit: you're funny
11:10  wm4: moment please
11:11  brajek: wm4: http://codepad.org/vQBN55rO
11:11  wm4: brajek: yes I used that
11:12  wm4: _habnabit: http://codepad.org/U4qidrD4
11:12  verte: wm4:  http://codepad.org/owzNWAFi
11:12  wm4: verte: wat
11:12  _habnabit: Yeah, looks like lua doesn't have closures.
11:12  wm4: ok but that trick is something I'd want to avoid
11:13  wm4: _habnabit: wrong
11:13  wm4: _habnabit: what makes you think so
11:13  _habnabit: 'i' is somehow copied out of the parent scope instead of being a symbolic reference.
11:14  wm4: _habnabit: wrong
11:14  _habnabit: Why else would that code give that result?
11:14  verte: _habnabit: maybe that's why wm4 thinks he needs forward references?
11:15  verte: he's used to copy-closures
11:15  wm4: _habnabit: here's an example to demonstrate it: http://codepad.org/0qv3QDvR
11:16  wm4: Lua does sharing/copying _properly_
11:16  wm4: anyway, here's the crap I arrived to: http://paste.pound-python.org/show/846/
11:17  verte: wm4: what are lua's rules for when to copy and when to defer the reference?
11:17  wm4: verte: the i variable in the loop lives only for one iteration (only for the scope)
11:18  wm4: if it goes out of scope, and the loop does a new iteration, a new variable i is created
11:18  papna: Python's rules are very simple.
11:19  papna: loops never introduce scopes.
11:19  wm4: Lua's rules are simple too
11:19  papna: And Python never copies your stuff.
11:19  wm4: Lua is a much simpler language than Python
11:19  verte: wm4: so how are these actions to be used
11:19  _habnabit: Lua's scoping rules seem more complicated.
11:19  wm4: verte: they are added to a GTK ActionGroup in MainWindow's constructor
11:20  wm4: _habnabit: they don't lead to subtle bugs when a user tries to use them
11:20  sickn3ss: _habnabit, I can't find anything on replace with set in python docss
11:20  wm4: _habnabit: and doesn't require dirty tricks when doing functional programming (see the pastes above)
11:20  _habnabit: wm4, "I don't understand it" != 'causes subtle bugs'
11:20  _habnabit: wm4, 'functional programming' != 'uses functions'
11:21  seku: lua is like c :D
11:21  _habnabit: Oh! Lua doesn't have closures.
11:21  seku: thats syntax :D
11:21  wm4: verte: here's how they're added: http://paste.pound-python.org/show/847/
11:21  seku: its small and annoying
11:21  seku: so its like c
11:21  wm4: _habnabit: you can look at that paste too ;D
11:22  _habnabit: http://lua-users.org/wiki/LuaScoping
11:22  _habnabit: That's real cute.
11:22  wm4: _habnabit: don't you defend Python's "closures", they are only good if you don't know programming involving closures
11:22  _habnabit: wm4, verte already showed you how to do this without using default arguments.
11:23  _habnabit: ... uh
11:23  verte: wm4: how does test_action come into it?
11:23  wm4: _habnabit: also that Lua page is outdated (and it says so)
11:23  wm4: verte: self.actions is a gtk.ActionGroup
11:23  wm4: verte: clicking GUI menus invoke those actions
11:23  papna: wm4: I didn't say anything about Lua.
11:24  wm4: _habnabit: that would introduce an additional level of nesting
11:24  wm4: _habnabit: it'd also be less readable
11:25  _habnabit: wm4, nah, just refactor your code a bit. It's already getting a little too static-nesty.
11:25  wm4: _habnabit: are you saying you don't need my 4-times nested functions?
11:25  _habnabit: What
11:25  wm4: anyway, my "only" problem now is that the function image_action doesn't have good access to self
11:26  wm4: it seems I'm struggling with the bound method vs. unbound method difference?
11:26  papna: wm4: An unbound method means you've made a mistake and done TheClass.method rather than some_instance = TheClass(...); some_instance.method
11:28  wm4: papna: I know... but I need image_action at class construction time (or whatever that is called), I don't have an instance yet
11:29  papna: wm4: If there's no instance, there's no way to use the method, so how could you need it yet?
11:30  wm4: papna: anyway, look at my paste... it'd be ideal if image_action could have self as first parameter (self as in how it is usually used in python)
11:30  yano: is there a simple way to remove multiple instances of the same element from one list? for example I want to remove all 4's from this list: [3,4,8,1,3,4,9,0,2,4,6,4,1,4] ?
11:30  wm4: yano: [x for x in yourlist if x!=4] (not sure)
11:31  Peng: That returns a new object, of course.
11:31  _habnabit: yano, you want to remove all of anything that occurs more than once, or just remove duplicates?
11:31  yano: _habnabit: just remove duplicates
11:31  _habnabit: yano, use a set instead of a list.
11:32  yano: hm, so a property of a set is it can't have multiple items that are the same, right?
11:32  _habnabit: yano, right.
11:32  yano: is there a way to convert a list to a set? since the data is already in a list?
11:33  _habnabit: set(L)
11:33  Peng: yano: Sets are also unordered.
11:33  yano: Peng: ah, thanks, but for the problem I'm working on I'm not worried about order.
11:33  yano: _habnabit: thanks
11:34  yano: er
11:34  pwuertz: Hi, I'm having trouble inserting a 64bit integer into a sqlite db in python.  The exception is "OverflowError: long too big to convert". Is a normal int really the largest number I can use with sqlite?
11:34  Peng: yano: Don't care about order, don't want duplicates -- a set sounds perfect, then.
11:34  yano: is there a way to know which numbers are being removing when converting a list to a set?
11:34  Peng: yano: Not really.
11:34  yano: Peng: dang, because that's what I want to know.
11:35  _habnabit: yano, a for loop and an empty set, then.
11:35  hariom: What would you recommed as a scalable web server which has support for HTTPS and is production ready. Better than HTTPD
11:35  Peng: Or a for loop and a dict if you want to count them.
11:35  _habnabit: hariom, for python?
11:35  hariom: yea
11:35  Peng: hariom: I imagine Nginx and Lighttpd are most popular.
11:35  hariom: I want to run Python
11:35  yano: _habnabit: ah, so itereate through my list that has multiples and for an item that occurs more than once, through it in a set?
11:35  _habnabit: hariom, well, do you have a WSGI application, or CGI, or what?
11:36  hariom: I have some experience on Nginx but have to look at Lighttpd
11:36  _habnabit: yano, no, put everything in the set and check if it was already there.
11:36  hariom: WSGI
11:36  mahmul: does anybody know much about jinja2?
11:36  _habnabit: hariom, for WSGI, I reverse-proxy from nginx to gunicorn.
11:36  yano: _habnabit: I'm not sure I'm following.
11:37  _habnabit: yano, seen = set(); for obj in L: if obj in seen: ...;; seen.add(obj)
11:37  hariom: Gunicorn, and Lighttpd any other I should look at
11:37  yano: _habnabit: ah i see, thanks!
11:37  nosklo: mahmul: ask your real question
11:38  Peng: yano: You could do something similar with a dict if you want to count the number of times each entry is duplicated.
11:38  Octodigit: in production I would be combining nginx w/ gunicorn
11:38  hariom: What about Tornado?
11:38  Octodigit: (as _habnabit suggests)
11:38  nosklo: hariom: no tornado
11:38  _habnabit: hariom, tornado is laughably bad.
11:38  hariom: hmm...
11:38  yano: Peng: ooh that might be better, I'll have to revisit the problem and see if that might be better.
11:39  verte: wm4: a first attempt:  http://codepad.org/u1wC0EMB
11:39  _habnabit: yano, well, do you care about the count, or just if it's <=1 vs. >1 ?
11:39  Peng: yano: No reason to track more information than you need.
11:39  hariom: _habnabit, Octodigit: Is gunicorn Pre Fork based? I think Pre Fork can lead to high resource consumption isn't it?
11:39  mahmul: nosklo: ok, so part of my render context is a dictionary of lists, i.e., d={key: [value1, value2...]}
11:40  _habnabit: hariom, prefork is basically the worst model ever for wsgi.
11:40  nosklo: mahmul: you can ask the entire channel, not me
11:40  _habnabit: hariom, no real wsgi server uses it.
11:40  mahmul: and i'd like to iterate over the list associated with a given key
11:40  wm4: verte: interesting
11:40  nosklo: mahmul: whats stopping you from doing it
11:41  mahmul: however, i get what appears to be the repr of the list when i do {% for l in d[key] %}
11:41  GrahamDumpleton: _habnabit: Various WSGI hosting mechanisms are able to use prefork, including the most popular.
11:41  mahmul: ah, crap
11:41  mahmul: nevermind
11:41  nosklo: mahmul: that doesn't seem to happen here
11:41  nosklo: mahmul: oh, what was it
11:41  _habnabit: GrahamDumpleton, well, sure, but that doesn't contradict what I said.
11:41  hariom: _habnabit: I just read that Gunicorn is using Pre Form worker model
11:41  mahmul: well it just occurred to me that maybe that makes sense
11:42  nvictor: yo python!
11:42  nvictor: oohh
11:42  mahmul: nosklo: well, supposing i've explained myself clearly, does this behavior seem strange to you?
11:42  nvictor: we are losing people >:( one time i was here we had 900+ ppl
11:42  GrahamDumpleton: _habnabit: So, the most widely used WSGI hosting mechanisms are not real wsgi servers.
11:42  yano: _habnabit: just if it's >1
11:42  wm4: verte: anything about that forward ref issue? (the fact that you have to define image_action before ImageAction)
11:42  nvictor: anyways
11:42  _habnabit: yano, then just do what I said.
11:43  nvictor: is it possible to turn a function into a class method dynamically?
11:43  mlechner: amybody familiar with PIL? i'm looking fo some some code to linebreak text if it is too long for drawing it on an image using Image.Draw.text
11:43  verte: wm4: I would use getattr(self, 'image_action')(...)
11:43  _habnabit: GrahamDumpleton, are you talking about mod_wsgi?
11:43  wm4: verte: where? also isn't self.image_action the same
11:44  verte: well where do you expect it to find the image action?
11:44  GrahamDumpleton: _habnabit: Others use preforking as well in certain configurations, not just mod_wsgi when in embedded mode with Apache prefork MPM.
11:44  nosklo: mahmul: t = jinja2.Template('{% for item in dic[key] %}{{item}}{% endfor %}') ; print t.render(dict(key='foo', dic={'foo': [1, 2, 3]}))
11:44  nosklo: mahmul: I get "123" as result, as expected
11:45  mahmul: nosklo: interesting, what version of jinja2?
11:45  GrahamDumpleton: _habnabit: Of course this all depends on what you actually mean by 'prefork' and whether it is different to what is generally understood by that.
11:45  nosklo: mahmul: it has been this way since forever
11:45  nosklo: mahmul: but I'm using 2.5.5
11:46  nosklo: mahmul: what do you get if you open a fresh python interpreter and run the lines above?
11:46  _habnabit: GrahamDumpleton, maybe I'm a little skewed by what php does, but I always think of it as 'keeping an interpreter ready to be used, which will then be immediately torn down and restarted'
11:46  mahmul: nosklo: yep, just as you said.  ok, this must be related to flask
11:47  mahmul: nosklo: or, more likely, something boneheaded on my part i'm not seeing.  i'll take a closer look.  thank you for your help
11:47  GrahamDumpleton: _habnabit: Even in PHP the interpreter isn't strictly torn done, only the loaded application. This has got nothing to do with prefork concept.
11:49  GrahamDumpleton: _habnabit: If what you mean is that no sane WSGI server handles only one request and then throws everything away, then yes you are correct. Only CGI/WSGI bridges do that. In that case they even throw the interpreter and the process away.
11:49  daymien: std::cerr << *b::diagnostic_information(ex);
11:49  daymien: EDILOG_ERROR(logger, *b::diagnostic_information(ex));
11:50  wm4: verte: PS I had a look at your paste again, and I think you misunderstood it... you need the decorator args in MainWindow.__init__, not when the action is called
11:51  GrahamDumpleton: _habnabit: In other words, persistent vs processes that handle one request only. The latter indicated by wsgi.run_once being False.
11:51  wm4: also, with anonymous functions this would be trivial, lol python
11:51  _habnabit: wm4, there's no reason you can't do this with tuples of functions or whatever you're obsessing over.
11:52  GrahamDumpleton: _habnabit: Have a read of http://code.google.com/p/modwsgi/wiki/ProcessesAndThreading some time.
11:52  wm4: _habnabit: functions can't be expressions in python, that's the entire problem (and don't come with that crippled lambda)
11:52  verte: wm4: ah, ok, well I'll alter it. one moment.
11:52  _habnabit: wm4, do you know what the difference between a statement and an expression is
11:53  _habnabit: wm4, also, lambda ain't crippled
11:53 --- JamesN is now known as jamesn
11:53  verte: wm4: callback.decorator_args = a
11:53  wm4: _habnabit: yes... a statement can't be used inside a lambda, function definiztion is a statement, and code inside tuples must be expressions
11:54  verte: wm4: what are the arguments to image_action supposed to be?
11:54  Peng: wm4: Two of those can be condensed to "Expressions can only contain expressions"
11:55  wm4: verte: "callback" is a function here?
11:55  wm4: verte: image_action is supposed to take self and the decorated function
11:56  wm4: the rest is unimportant
11:56  wm4: Peng: as I said, "functions can't be expressions in python, that's the entire problem (and don't come with that crippled lambda)"
11:56  _habnabit: 02:53:02 < _habnabit> wm4, also, lambda ain't crippled
11:56  verte: wm4: ok
11:56  tavish: hi, how would you write some kind of oscillator class in python? i mean i wrote something like http://codepad.org/lR5v9FAk and accessing the next value is slow. is there a better approach?
11:56  Wild_Cat: wm4: functions *can* be expressions in Python. That's exactly what lambdas are ;)
11:57  Wild_Cat: function *definition*, however, is a statement.
11:57  wm4: Wild_Cat: but lambdas can't contain statements
11:57  wm4: thus they are crippled
11:57  wm4: is that so hard to understand
11:57  Wild_Cat: wm4: that's why they're called lambda *expressions*, not lambda statements.
11:57  wm4: tavish: use C lol
11:57  _habnabit: wm4, are you going to say that the grammar is crippled because `if` can't contain `while`
11:58  tavish: wm4: python is easy :(
11:58  Wild_Cat: wm4: also, if you want to argue that functional programming in Python sucks, nobody's arguing with you, but lambdas aren't the main cause for that.
11:58  wm4: Wild_Cat: in other languages, functions _can_ be expressions and they _can_ contain statements
11:58  _habnabit: The if condition, I mean.
11:58  wm4: _habnabit: if can contain while
11:58  wm4: if True: while True: ...
11:58  _habnabit: 02:58:20 < _habnabit> The if condition, I mean.
11:59  wm4: _habnabit: I'm not requesting that the parameter list of functions can contain while statements
11:59  _habnabit: wm4, well, why not? You're moaning that expressions can't contain statements.
12:00  verte: wm4:  http://codepad.org/clp3vwUB
12:00  wm4: _habnabit: I'm moaning that full functions can't be expressions
12:00  _habnabit: wm4, your argument is inconsistent
12:00  wm4: _habnabit: no, yours is
12:00  _habnabit: wm4, why not generalize it to all statements
12:00  _habnabit: wm4, see also: tinyurl.com/chatserver
12:00  wm4: _habnabit: there are languages which generalize all to expressions with success, but that doesn't matter
12:00  _habnabit: wm4, yes, I am aware of this.
12:01  m1chael: ['a=43.8','b=88.9', 'c=98.9',
12:01  Peng: m1chael: ...?
12:02  wm4: _habnabit: I'm suspecting programming in Python for too long has made you narrow minded, not being able to see the weaknesses of python anymore
12:02  m1chael: sorry was typing out my question and hit enter by accident
12:02  hariom: Which is the scalable production ready Twisted Web Server? Which supports HTTPS and WSGI.
12:02  _habnabit: wm4, uh
12:02  wm4: _habnabit: ah
12:02  _habnabit: wm4, no, you just haven't thought through python's design principles.
12:02  _habnabit: wm4, it is this way intentionally.
12:03  _habnabit: wm4, and people don't complain because /python has other idioms/
12:03  wm4: _habnabit: ok what would myou suggest me doing in my case
12:03  wm4: I've been fighting with decorators for the last few hours
12:03  _habnabit: wm4, if anything, you're being narrow-minded in insisting that there's only one solution to your problem.
12:03  m1chael: ['a=43.8','b=88.9', 'c=98.9'] # looking to get the value (the number after the =) of the 3rd index (98.9) -- what is a good way of doing this?
12:04  wm4: _habnabit: no, I've just put up some requirements a solution should fulfill
12:04  _habnabit: wm4, honestly, I don't give a shit. I'm going to bed.
12:04  kerio: m1chael: float(thatlist[2].partition("=")[2])
12:04  wm4: _habnabit: I bet you're thinking you're being helpful here
12:04  talented: are exceptions expensive compared to type checking?
12:04  _habnabit: talented, you probably don't want either.
12:05  _habnabit: talented, why are you unsure of the interface of whatever object?
12:05  _habnabit: wm4, no, I'm just thinking you're being ridiculous.
12:05  talented: well... I want to do int(raw_input()) but not sure if I should just do raw_input and check if it's an int then convert it
12:05  m1chael: okay cool, thanks kerio!... what about if c doesn't necessarily come as the 3rd?
12:05  _habnabit: talented, raw_input will always return a string.
12:05  _habnabit: talented, so, typechecking is pretty pointless.
12:05  talented: right... which is why I do int(raw_input()) to convert it
12:06  talented: and if it's not an int, it just raises an exception
12:06  kerio: m1chael: oh, you want "c"?
12:06  kerio: hmm
12:06  _habnabit: talented, no, that's if it can't be /converted/ to an int. There's a difference.
12:06  talented: yea
12:06  wm4: _habnabit: so, how would you program what I'm doing (defining 2 dozens of GUI actions, both data and code)
12:06  talented: but what would be better, catching that exception or checking if it's a digit?
12:07  _habnabit: talented, checking if it's convertable is just duplicating code.
12:07  kerio: float(dict(x.split("=") for x in yourlist)["c"])
12:07  _habnabit: talented, there's numbers that don't consist entirely of digits.
12:07  _habnabit: talented, just check the exception.
12:07  m1chael: oh wow
12:08  talented: well, basically I am given them a choice between 0 and whatever the length of the list is... I use to just rely on exceptions being raised... but I'm wondering if that's an expensive way to go performance wise
12:09  _habnabit: talented, premature optimization is the root of all evil.
12:09  kerio: m1chael: what?
12:09  m1chael: thanks kerio
12:09  kerio: also how are you getting that list? there's probably a better way
12:09  talented: well, it's not premature if it's already in place, that's why I'm asking if exceptions are expensive since that's what I've been relying on
12:10  m1chael: let me share what i'm actually doing.. i dont think i'm going about this right
12:10  _habnabit: talented, no, it's premature if you haven't profiled your code and found this to be a slow spot.
12:10  _habnabit: talented, programmers are very, very bad at identifying where their code is slow.
12:10  _habnabit: talented, this is why you profile it.
12:10  talented: hmm... well I would hate to continue doing exception catching to later realise that all these exceptions slow it down
12:11  _habnabit: talented, you can't make it work fast if you don't make it /work/.
12:11  _habnabit: talented, worry about that part first.
12:11  bob2: if you're doing raw_input, speed is not an issue
12:12  kerio: i'd worry more about the time you'll spend doing the extra work with the non-exception error catching
12:12  _habnabit: And, like I said, that would just be duplicating code.
12:12  talented: true
12:12  talented: actually I like exception catching, as it makes you understand what errors you're expecting to happen when the user does something wrong
12:13  m1chael: this is what i'm trying to do http://dpaste.com/289771/
12:13  _habnabit: Much better than error returns~
12:15  bob2: m1chael: is your question about scraping mplayer output?
12:17  m1chael: bob2 yes
12:17  m1chael: looking for a way to get the length of an flv file
12:18  bahamas: m1chael: you can check every line if it contains an equals sign, split it if it does, then check if the first element is the one you're looking for
12:19  m1chael: okay i'll try that
--- Log closed Thu Dec 23 12:29:36 2010
--- Log opened Thu Dec 23 12:29:58 2010
12:29 --- Users 675 nicks [0 ops, 0 halfops, 0 voices, 675 normal]
12:30  caribou|: this is not really a python related issue but maybe you already encountered this problem. I'm starting a pyton script from the shell, this is working well but when i'm using cron or a bash script calling my python script i've got encoding issues :/
12:31  _habnabit: caribou|, are you trying to print unicode strings?
12:31 --- Channel #python was synced in 107 seconds
12:32  nosklo: caribou|: when redirecting the output of the script, python has no means to detect your terminal's encoding (because a terminal is not involved) so it can't automatically encode unicode strings. The solution is to encode those strings yourself, prior to printing them
12:32  nosklo: caribou|: for more details please pastebin code/full traceback
12:36  kerio: it's all locale's fault
12:37  caribou|: _habnabit, nosklo, yep sorry i guess i might have deleted a line, i usually did use something like sys.stdin.encoding but i have been said that it's not how i should do that. How can i output stuff depending on the terminal encoding
12:39  _habnabit: caribou|, when you run something from cron, what's the 'terminal' in 'terminal encoding' ?
12:40  caribou|: _habnabit, i'm sorry to say that i don't know :s
12:40  _habnabit: caribou|, hint: there is none.
12:40  _habnabit: caribou|, so there is no 'terminal encoding'.
12:40  caribou|: ouch :x
12:41  _habnabit: caribou|, why are you printing in a cron job, anyway?
12:41  caribou|: this is script which can be run from command-line or from wherever you want :/
12:41  caribou|: +a
12:41  caribou|: and by default i'm printing stuff
12:42  anass: Hello, I finished a web app by python but I don't know how to execute it in cgi-bin on x10hosting.com?
12:42  _habnabit: anass, this isn't #x10hosting.com
12:42  anass: _habnabit: I know
12:42  wm4: how do you do signal&slots stuff in Python? (by that I mean callback/notification systems as often found in GUI toolkits)
12:43  anass: I want to ask a question about python not the hosting
12:43  _habnabit: caribou|, printing unicode strings is generally a bad idea, though.
12:43  _habnabit: anass, well, I'm not stopping you.
12:43  anass: I red this http://www.python.org/dev/peps/pep-0333/#the-server-gateway-side but I didn't understand
12:44  caribou|: _habnabit, i think i'm just gonna make a logging system instead of printing, thanks for enlighting me
12:44  anass: where I put this function? and is this function needs to be edited?
12:44  seku: if i use a library that defines two classes which depend on each other, and i want to extend the other one how would i go about it? The one i want to extend is being instantiated in the other one, so I'd need to change that instantiation directly from SuperClass() to MyClass() or override a _private :( Can i just make the new methods i want and do something to inject them into the original class?
12:44  bob2: anass: not relevant unless you're using python 3
12:44  bob2: anass: you need to be less vague about what you've done
12:44  caribou|: enlightning*
12:44  bob2: anass: did you write a WSGI app?  or a CGI one?
12:45  anass: I wrote WSGI App
12:45  bob2: seku: http://paste.pocoo.org/
12:45  _habnabit: seku, no, that's a bad idea.
12:45  bob2: anass: http://henry.precheur.org/python/how_to_serve_cgi
12:45  _habnabit: seku, sounds like the library is poorly written.
12:45  _habnabit: seku, I'd just go ahead and override the _private attribute.
12:46  anass: bob2: thank you very much, I'll check this link and return back with the result.
12:46  Epona: does anyone want to help me clear up some of my peramter issues?
12:46  Epona: http://pastebin.com/M1EdCgTZ
12:46  infobob: http://paste.pound-python.org/show/848/ (repasted for Epona)
12:47  Epona: im not sure what I did wrong
12:47  seku: thanks _habnabit
12:47  bob2: Epona: that if statement in the class body is bizarre
12:47  _habnabit: Epona, um.
12:47  bob2: Epona: and the function needs to take 'self' as its first arg
12:47  Epona: alright
12:48  bob2: Epona: but it's all very confusing
12:48  _habnabit: Epona, have you read a python tutorial?
12:48  Epona: yes
12:48  Epona: im on the part of classes
12:48  _habnabit: Epona, which one?
12:48  Epona: official one on the website, and a few on youtube
12:48  Epona: could you suggest a better one?
12:49  _habnabit: Did you mean docs.python.org/tut ?
12:49  bob2: Epona: what would you like that snippet of code to do?
12:50  Epona: have three methods
12:50  Epona: of chopping different objects
12:50  Epona: with the sword
12:50  bob2: why?
12:50  Epona: if it hits the rock 5 times, the sword breaks
12:50  Epona: trying to understand classes better
12:50  bob2: what is a 'Erika'?
12:51  Epona: looks like a class
12:51  bob2: conceptually
12:55  verte: MUAHAHAHA: http://codepad.org/J9zABt16
12:56  _habnabit: verte, cute.
12:57  verte: violence against built-in language constructs: %s says no
13:00  verte: bit of a shame there's no operator.attrsetter, at least not in 2.5
13:02  maximveksler: SyntaxError: invalid syntax" ?
13:02  xro: hi, can u explain me why most people use python 2.6 and not python 3?
13:02  maximveksler: Why when I try to use sys.exit() in a script it gives me "
13:02  maximveksler: SyntaxError: invalid syntax" ?" ?
13:02  _habnabit: xro, bigger install base.
13:02  _habnabit: xro, no migration needed.
13:02  maximveksler: but if I type it in the python shell it works. ?
13:03  Dynetrekk: xro: scipy does'nt work, h5py doesn't work :-( (my personal reasons)
13:03  xro: _habnabit, ok... and for new development. what do you recommend 2.6 or 3?
13:03  _habnabit: xro, 2.6.
13:03  bahamas: maximveksler: check if you don't have an unclosed parenthesis
13:03  Epona: +
13:04  Epona: I reccomend 3.1.3
13:04  verte: maximveksler: the SyntaxError is from something earlier
13:04  xro: _habnabit, so python 3.0 is born dead (french expression, don't know if it make sense in English)
13:04  _habnabit: xro, kinda.
13:04  Sonderblade: using lxml, how can you get the text contents of an element?
13:04  _habnabit: xro, it's been out for a few years, and it's still lacking in all-around support.
13:05  Epona: well, everyone is switching to 3.0 in a little less than two years
13:05  verte: xro: it was always going to take time to grow to be useful
13:05  Epona: I don't see how its dead
13:05  _habnabit: xro, community support, library support, documentation support, ...
13:05  bahamas: Epona: how do you know?
13:05  _habnabit: Epona, they are? How do you know?
13:05  maximveksler: Yup, got it! You are right I missed a ) at the end of the previous statment
13:05  maximveksler: thank you
13:05  Epona: read it on the net
13:05  Epona: ill look up a source, I guess
13:05  seku: _habnabit: might it have to do with people repeating the same chant
13:05  _habnabit: Epona, you found a fortune teller?
13:05  Epona: no, it was legit
13:05  seku: if one can do what one needs in py3, then there would be no reason not to use it
13:06  verte: Epona: that was the idea, but whether it happens that way in practice or not isn't related
13:06  _habnabit: Epona, how can someone legitimately see into the future?
13:06  verte: Epona: ultimately the community and developers decides which one is more useful
13:07  verte: Epona: we would pretty much all like to see python 3 take off, but wishes mean little
13:08  Epona: I see
13:11  TheCommieDuck: I have a confusing error.. AttributeError: 'module' object has no attribute 'Movable' when I try to import a module. Google says it's when I'm importing a module with the same name as my executable, but it's not that.
13:11  _habnabit: TheCommieDuck, pastebin the full traceback.
13:12  TheCommieDuck: http://codepad.org/sguEdqsm _habnabit, say if I need more.
13:13  _habnabit: TheCommieDuck, okay, there's a couple things going on here.
13:13  _habnabit: TheCommieDuck, 1) your imports are wrong, and you need to fix your module layout.
13:13  TheCommieDuck: Circular importing?
13:13  _habnabit: TheCommieDuck, 2) you have a circular import.
13:13  TheCommieDuck: Ah.
13:13  _habnabit: TheCommieDuck, yes, but they're separate issues.
13:13  _habnabit: t	http://jcalderone.livejournal.com/39794.html
13:13  _habnabit: TheCommieDuck, http://jcalderone.livejournal.com/39794.html
13:14  TheCommieDuck: _habnabit: What exactly do you mean by 'imports are wrong'?
13:14  _habnabit: TheCommieDuck, you're using implicit relative imports.
13:15  TheCommieDuck: _habnabit: So instead of import foo, I need to import project/foo?
13:15  _habnabit: .
13:16  djc: I'm working with the C API; I have two types that need to be aware of each other's type. How do I break the circularity?
13:16  verte: aware how?
13:16  verte: and when?
13:17  djc: both have a method that needs to use PyObject_IsInstance on the PyTypeObject of the other
13:18  _habnabit: Well, 'typechecking is wrong' aside, where's the issue?
13:18  _habnabit: You forward-declare and/or export your PyTypeObjects as static structs.
13:19  djc: _habnabit: and then patch in the queue_methods in the module-level init?
13:19  djc: (err, the methods objects)
13:19  _habnabit: 'Patch in' ?
13:20  djc: myType.tp_methods = something
13:20  djc: ;
13:20  _habnabit: Um, no.
13:20  djc: rather than declaring it all inside the struct
13:20  _habnabit: Like I said, forward-declare it.
13:20  djc: hmm
13:21  djc: ok
13:22  talented: can you convert a hex number 0xab into it's escaped string equivalent "\xab" so I can use it as a string instead?
13:22  _habnabit: chr
13:22  _habnabit: Or unichr
13:22  talented: right
--- Log closed Thu Dec 23 13:28:58 2010
--- Log opened Thu Dec 23 13:34:27 2010
13:34 --- Users 677 nicks [0 ops, 0 halfops, 0 voices, 677 normal]
13:34 --- Server: [card.freenode.net] [freenode-info] if you're at a conference and other people are having trouble connecting, please mention it to staff: http://freenode.net/faq.shtml#gettinghelp
13:36 --- Channel #python was synced in 107 seconds
13:37  talented: will a file close itself once you leave the scope of the function it is in?
13:38  verte: there is no saying if it will.
13:38  _habnabit: No, but it'll close when there's no references to the file left.
13:38  verte: _habnabit: assuming gc is known to run.
13:39  verte: the null gc is a perfectly valid gc, so all bets are off about running dellers.
13:39  xro: close file is a best practice... That avoids some attacks
13:39  sickn3ss: hey can anyone tell me an easy way to sort words from a text based on how often they appear ?
13:40  _habnabit: sickn3ss, make a dict mapping words to their frequency counts.
13:40  verte: sickn3ss: and then use sorted() with the count as the sort key.
13:40  talented: well, usually I do: with open('file') as f:... but I'm now using urllib2.urlopen() and it doesn't have an __exit__ method
13:40  bob2: sickn3ss: collections.defaultdict(int) will make the code simpler
13:41  bob2: talented: it's less of a file
13:41  verte: talented: finally: response.close()
13:42  verte: is there no context manager for arbitrary closables?
13:42  _habnabit: contextlib.closing
13:43  talented: right... it's already in a try block, so I should use finally
13:43  verte: either of those
13:55  talented: how do you check if a variable isn't defined?
13:55  _habnabit: talented, you don't.
13:55  _habnabit: talented, initialize it to some default value and check for that.
13:55  _habnabit: talented, None is a common choice.
13:55  talented: ok
13:57  mlechner: hi, using PIF how to underline a text to be put into an image using draw.text?
13:58  mlechner: s/PIF/PIL/g
14:03  mlechner: anybody?
14:08  xro: hi, i'm coding a simple watermarking brute-force for java... i need to write a 32 bit value in a file. but i can't write as the hex value... write the string '0000' will write 30 30 30 30 instead of 00 00 00 00... Can you help me? --> http://paste.pound-python.org/show/849/
14:10  arkanes: xro: the tutorial in the topic covers things like the syntax of string literals
14:11  xro: arkanes, where is it?
14:11  arkanes: xro: /topic
14:19  xro: arkanes, i read it but i am stillnot able to write 0 as 00 00 00 00 in a file...
14:20  knob: Good morning everyone =)
14:21  Joeboy: morning knob
14:21  ccxCZ: xro: '0' != '\0'
14:22  knob: Hey! (-:
14:23  xro: ccxCZ, that's exactly what i want... can u explain me the difference?
14:23  malibu: Hi there, has anyone run into str.replace() escaping quotes existing in the original string?  How do I stop that?
14:23  ccxCZ: xro: '0' is ascii zero '\0' is escape for zero byte
14:24  ccxCZ: xro: are you familiar with ASCII and related codepages?
14:25  ccxCZ: xro: it's roughly the same syntax C/C++/C#/Java uses for their string literars btw
14:25  xro: ccxCZ, yes... but i tryed with hex(0)...
14:25  xro: ccxCZ, thanks for you precious help
14:25  ccxCZ: xro: http://docs.python.org/reference/lexical_analysis.html#string-literals
14:59  Bonaparte: Can you recommend a WebDav client library?
15:00  nosklo: webdav is hard to recommend
15:14  xro: hi, i there a way to transform a hex 0x7fffffff into '\x7f\x7f\x7f\x7f' ?
15:16  papna_: xro: I don't know by what approach you'd make that transition.
15:17  papna_: xro: If you want to change it into "\x7f\xff\xff\xff", use struct.pack.
15:17  xro: <papna_>, i have a value 2147483647 in hex 0x7fffffff and i need it in the form of '\x7f\x7f\x7f\x7f'
15:17  Juhaz: repeating it doesn't make it make sense
15:18  papna_: xro: Re-read your number and string and confirm for me whether you have a typo.
15:18 * mlechner still doesn't know how to underline a text to be put into an image using draw.text from PIL?
15:18  papna_: xro: If not, you'll have a lot more to explain.
15:19  xro: papna_, yes i have a typo... sorry... '\x7f\xff\xff\xff'
15:20  locojay: aparao: _mlt is comment out from pyes conn.py . how can i achieve a more like this query using pyes on a docid. I don't know how to do it with curl as well. are there any plans to remove _mlt under elastic like _terms.
15:22  papna_: 09:16 < papna_> xro: If you want to change it into "\x7f\xff\xff\xff", use  struct.pack.
15:22  xro: papna_, yes... i'm reading the doc about it
15:25  papna_: xro: struct.pack("I", 0x7fffffff)
15:25  papna_: xro: Rather, struct.pack(">I", 0x7fffffff)
15:28  seku: can i use docstrings for attributes
15:28  papna_: seku: Python doesn't store docstrings for arbitrary attributes. (Indeed, it can't really.)
15:28  papna_: seku: You can put a raw string literal on the next line; there are some documentation tools that pick that up.
15:29  papna_: seku: A better plan is probably to describe them in the class's docstring.
15:30  xro: papna_, a last thing... i need to have 32bits... so, i need to add 00 with little value! is there a way to force is... ex. hex(1) --> 0x00000001 instead of 0x1?
15:30  seku: papna_: thanks
15:31  papna_: xro: You are doing something different than I imagined, and probably not something you want to be doing.
15:31  papna_: xro: Why are you making strings?
15:32  xro: papna_, i have to code a watermarking brute-forcer... So, i will change the hash in the binary file....
15:32  papna_: xro: If you want to turn 2147483647 into "\x7f\xff\xff\xff", you wouldn't use the hex function at all.
15:32  papna_: xro: What do you start with and what do you want to end with?
15:32  xro: papna_, yes... if it is possible
15:33  xro: papna_, i have 2147483647 and i need "\x7f\xff\xff\xff"
15:33  papna_: xro: struct.pack(">I", 2147483647)
15:34  xro: papna_, great... you save me.... thanks!
15:35  Sonderblade: can you in an xpath expression select multiple attributes? say if you want to select both the "src" and "type" attributes of script tags?
15:35  imanc: how do I get the difference between two dates in days?
15:35  nosklo: imanc: (date1 - date2).days
15:36  imanc: nosklo - OK, haha, always so easy
15:36  imanc: thanks!
15:36  kerio: timedelta!
15:36  kerio: woot
15:36  xychix: if var = True: return("YES") else: return("NO")        anyway to do this short in python ?
15:36  nosklo: xychix: return var
15:36  nosklo: er
15:37  papna_: xro: Well, for ne that's not valid Python.
15:37  kerio: that's all sorts of wrong
15:37  xychix: I want strings
15:37  papna_: xychix: ^^
15:37  papna_: xychix: For two, don't use parens around your returns.
15:37  nosklo: xychix: return 'YES' if var else 'NO'
15:37  papna_: xychix: For three, the length of that is fine.
15:37  Wild_Cat: xychix: assuming it's == and not =, you want return "YES" if var else "NO"
15:37  xychix: Wild_Cat: correct. sorry
15:37  papna_: xychix: For four, never try to compare directly to True or False. Use "if foo" and "if not foo"
15:38  papna_: xychix: For five,   return "YES" if var else "NO"
15:38  kerio: your solution is not extensible! return {True: "YES", False: "NO"}[bool(var)]
15:38  xychix: papna_: tnx that ought to work for me
15:38  xro: papna_, what's ne? and merry xmas
15:38  nosklo: xro: northeast, obviously
15:39  papna_: xro: ne?
15:39  papna_: xro: I mistagged you, if that's what you mean.
15:39  kerio: xro: happy Festivus
15:39  papna_: xro: Merry Christmas.
15:39  kerio: merry Yuletide!
15:39  xro: ok, it's not my mother tong... sorry and thanks agian
15:40  papna_: 2000 years, an obscure desert people's relgion spawned an offshoot sect.
15:40  papna_: Some centuries later, the sect's adherents started to commemorate the birth of Joshua--its founder and deity--in early Winter to coincide with other faiths' solstice celebrations.
15:40  papna_: It is for this reason that millions of people hire relays to carry folded pieces of paper from home to home.
15:41  goldroger: hi, where does sys.prefix get its value from ?
15:41  kerio: papna_: you mean the postal service?
15:41  xychix: flag True      "Application %s" % ("enabled" if flag else "disabled")       papna_ works like a charm ;) tnx
15:42  xychix: flag = True offcourse ;)
15:42  papna_: kerio: So you've heard of it.
15:42  papna_: xychix: What>
15:42  papna_: ?
15:43  xychix: papna_: tnx for the solution, got it working
15:43  papna_: goldroger: I think autoconf sets a #define
15:43  papna_: xychix: What did you mean "09:41 < xychix> flag = True offcourse ;)
15:44  kerio: xychix: read the python tutorial, stuff like that is explained there
15:45  xychix: kerio: papna_ correcting my mistake i made the line above (nothing important)
15:47  kerio: my suggestion still stands :)
15:49  papna_: xychix: Do you mean that you're actually writing ("enabled" if flag == True else "disabled")?
15:49  papna_: xychix: If so, don't. "== True" is silly and fragile and not recommended.
15:50  goldroger: papna_: ssankyou
15:53  xychix: papna_: no my code (or atleast that one line now reads:    ApplicationsLine += "Application %s\n" % ("enabled" if flag else "disabled")
16:00  omsai: Hi all,  I'm running a while loop to retry a command a few times if it encounters an exception http://paste.pound-python.org/show/852/ ... However it is not catching the exception.  The small program it is calling is http://paste.pound-python.org/show/851/ ... I suspect the problem is I'm using os.system to start a new python process and it's not linking the error handling.  How can I fix this?
16:01  greg_f: I have list of albums http://dpaste.com/289821/ with some method for every album, what is the easiest way to sort this list using score?
16:04  papna_: omsai: Exceptions don't leap out of processes like that. There's simply nothing in place to make that at all possible.
16:05  papna_: omsai: You'll have to work the exception-handling into externally handled logic and do some sort of interprocess communication, such as using stdout, sockets, or FIFOs.
16:05  papna_: omsai: To some extent, the appropriate abstractions are already in some remote procedure call stuff such as AMP.
16:05  __goffi__: hi everybody
16:06  healme1: Morning
16:06  papna_: greg_f: sorted(albums, key=operator.attrgetter('score'))
16:06  papna_: omsai: Also, don't use os.system. Use the subprocess module.
16:07  papna_: omsai: If all you need to do is figure out whether the process completed successfully or not, check the return value of subprocess.call (or much worse, os.system) for the process's return code.
16:08  omsai: papna_: thank you very much for the insight.  I will try that
16:08  papna_: omsai: Or use subprocess.check_call to use an exception-catching paradigm, but the actual exception thrown in frence_ip9258.py wouldn't travel up since this isn't possible.
16:08  greg_f: papna_: thank you very match!
16:09  omsai: papna_: would the program pause execution when I create a subprocess?  I want it to top till the subprocess is complete
16:09  omsai: s/ top/ stop/
16:10  papna_: omsai: subprocess.call and subprocess.check_call are blocking.
16:10  papna_: omsai: The subprocess module also provides a non-blocking API if you needed it.
16:11  omsai: papna_: thank you very much! I will try your suggestions
16:11  healme1: Anyone familiar with Geany?
16:12  papna_: omsai: Also, never use "except:". It catches everything, for example if you hit ctrl-c or if you ran out of memory. Always do "except SomeSpecificException".
16:16  healme1: Papna, could you recommend a editor/compiler? I am just getting started, and my current one (Geany) seems to have issues.
16:17  njain: hello friends
16:17  matti: :>
16:17  healme1: Morning njain
16:18  papna_: healme1: You don't need to find a compiler. Simply run your code with the python executable.
16:18  njain: i want to know if I can use python for digital modulation
16:18  njain: simulation
16:18  omsai: papna_: ok, will use that.  I was confused from the output for which error type to use since it just said "__main__.Error" http://paste.pound-python.org/show/853/
16:18  njain: like we do in matlab
16:19  papna_: healme1: The choice of an editor is a pretty personal one. Some ones people use successfully include gedit, notepad++, eclipse, vim, and emacs.
16:19  njain: i have heard about scipy... but i want to get started
16:19  papna_: healme1: What problems are you having with GEANY?
16:19  njain: what do I need to know.., how do I ramp up in minimum time
16:19  njain: GEANY?
16:19  papna_: omsai: That's the error in the program you called, which you can't catch, since exceptions don't jump automatically from one process to another.
16:20  papna_: njain: Sorry, I meant to tag healme1.
16:20  njain: yeah sorry I interrupted
16:20  healme1: Thanks for the quick response @papna...My issue is I am doing the "Hello, World!" for the first time...My code is print 'Hello World'  , I then get an error when I compile.
16:20  papna_: healme1: What do you mean "compile"?
16:21  papna_: healme1: You mean you hit the run button in GEANY?
16:21  healme1: Yes, execute.
16:21  healme1: '.' is not recognized as an internal or external command,
16:21  healme1: operable program or batch file.
16:21  healme1: Press any key to continue . . .
16:21  papna_: healme1: It looks like you aren't pointing GEANY to Python.
16:22  papna_: healme1: Do you have Python installed? What platform are you on?
16:22  healme1: I figured so, but I couldnt find how to direct to it.
16:22  healme1:  I am on Vista32.
16:22  papna_: healme1: I don't know how to change your configuration in GEANY.
16:22  papna_: healme1: Do you have Python installed?
16:22  healme1: I believe so...
16:23  papna_: healme1: What I normally do anyhow would be to open up a terminal and run my code from there instead of the editor anyhow.
16:23  lio_013: in the simple example of distutils the foo.py will be installed in "/usr/lib/python2.7/site-packages/foo.py " by default , how can i change the install dir from the setup.py file
16:23  papna_: healme1: Go to wherever your file is and run "python yourfile.py"
16:24  papna_: lio_013: That's something you do when you RUN the setup.py, not when you WRITE the setup.py
16:24  healme1: papna: Forgive my stupidity, I merely downloaded GEANY. This is my first language ever, so I am learning on the fly:) I am downloading python via python.org and will try again.
16:24  omsai: papna_: indeed
16:25  lio_013: how that will be done
16:25  omsai: papna_: I understand that now
16:26  shadow^dancer: someone here worked with p4d ?
16:26  papna_: njain: There is a #scipy channel you might be able to get answers in.
16:28  lio_013: is that when i run it as the developer "setup.py sdist " or as the user "setup.py install"
16:28  bahamas: can anyone give me any pointers about what i should look for in order to find duplicate images in a collection of images? i imagine i'd use PIL, but that's as far as i know
16:29  papna_: lio_013: When you run setup.py install --home=... or use virtualenv.
16:29  mnemoc: hi, how can I see if my class implements a method? if 'method' in self: raised not iterable :<
16:29  mnemoc: should I dir() it?
16:29  papna_: bahamas: Completely identical in every way but the filename?
16:30  papna_: mnemoc: Don't check. Know.
16:30  bahamas: papna_: yes, the filenames are different.
16:30  lio_013: i will test this
16:30  mnemoc: papna_: so I have to try:  ok.... thanks
16:31  papna_: mnemoc: No. You schould not check. You should *know*
16:31  papna_: mnemoc: Why don't you know what an object is like?
16:31  bahamas: i have a number of pictures and i want to check for duplicates
16:31  fireangel: whats the easiest way to convert a date like 2004-11-11 18:06:01 to a timestamp?
16:31  papna_: fireangel: datetime.datetime.strptime
16:31  papna_: fireangel: Why a timestamp?
16:32  kerio: convert it to a datetime object
16:32  fireangel: cause a program expects a timestamp
16:32  papna_: bahamas: I would look for files of the same size then open them and compare their contents.
16:32  mnemoc: papna_: that is the point of the class, check if it implements a REQUEST_METHOD and call it, or return 405, and to do some other related magic
16:33  lio_013: thanx papna
16:33  mnemoc: papna_: a WSPI wrapping class handling __call__
16:33  papna_: fireangel: When you get the datetime object, make a timetuple with the timetuple method and then use it with time.mltime
16:34  bahamas: papna_: the file size is a good idea. regarding the contents, is there anything i should look for or does PIL have something for this? i haven't used PIL at all so far
16:34  mnemoc: papna_: but I can about method overriding too
16:34  mnemoc: s/about/abuse/
16:34  papna_: bahamas: I wouldn't use PIL. I would just compare the bytes.
16:34  bahamas: ah, ok
16:35  papna_: mnemoc: Why have a REQUEST_METHOD method exist or not and do magic? Why not have something present that tells you what your object is like that you know exists. "try: foo.request() except CannotRequestError:" or "if foo.can_request" or whatever?
16:36  papna_: mnemoc: Typical good, idiomatic Python code doesn't use attribute existance for semantic information.
16:38  mnemoc: .oO
16:38  papna_: mnemoc: Rather values are used.
16:39  imanc: does python have a += operator?
16:40  healme1: papna: I installed Notepad++, are you familiar?
16:40  papna_: imanc: Sure.
16:40  papna_: healme1: Not deeply. I don't use Windows tons.
16:40  imanc: woop
16:40  papna_: imanc: What for?
16:40  AlexMax: warning, python's "++" does not do what one might expect
16:40  exarkun: AlexMax: unless you implement it to do what you expect
16:40  imanc: yeh
16:41  papna_: healme1: The choice of an editor is mostly immaterial. At the moment, try running your code from the command line.
16:41  imanc: this is what i was after: grid[-1]['totals']['total'] += order.total
16:41  exarkun: prefix only, though
16:41  papna_: AlexMax: http://codepad.org/xDns1drX
16:41  healme1: papna: so within the editor, i type the code, compile, save, then run from cmd?
16:41  imanc: yeh it works woot
16:42  papna_: healme1: Type the code in the editor and save, then run from cmd
16:42  papna_: healme1: There is not a special compile step to worry about.
16:42  healme1: papna: i assume as a *.py?
16:42  papna_: healme1: That is usually preferred but not strictly required
16:43  papna_: healme1: There should be a second on this in your book. http://greenteapress.com/thinkpython/thinkpython.html and http://learnpythonthehardway.org/ are decent books.
16:44  papna_: imanc: Awesome.
16:44  papna_: imanc: Sometimes collections.defaultdict is useful for dicts which you're going to +=
16:45  imanc: papna_ so much I still need to learn with python :(
16:46  papna_: imanc: And even more to forget?
16:46  imanc: yeh
16:46  imanc: php is like a small playground compared to python, or at least it feels that way
16:46  healme1: papna: just ran the .py file from cmd, and got syntax error.
16:47  healme1: papna: rough start:(
16:47  papna_: healme1: What version of Python did you install?
16:47  glyph: a small playground full of rusty knives and used heroin syringes
16:47  healme1: papna: Syntax Error: Invalid Syntax
16:47  healme1: papa: Python 3.1
16:48  papna_: healme1: Install Python 2.7
16:48  lvh: healme1: For future reference, don't type exceptions over manually, the devil is often in the details
16:49  healme1: lvh: Thanks for the advice, this literally is my first language, so all is welcome:)
16:49  phrearch: hi
16:49  lvh: healme1: (Also I agree with papna's judgement of getting python2.7 instead)
16:49  phrearch: if i return from within a for loop like http://paste.pocoo.org/show/308946/ , shouldnt the function call then just be ended?
16:49  lvh: healme1: What do you plan to do with Python?
16:50  phrearch: im porting this js function: http://paste.pocoo.org/show/308947/
16:50  bahamas: phrearch: yes, it should
16:50  healme1: lvh: Well the first thing I want is to create a prgm that can access the webcam to snap a picture, and save it as a certain file name:)
16:50  phrearch: bahamas: ok thanks, somehow it return None though, while self.log has a value
16:51  bahamas: phrearch: also, you can lose the parentheses around the expression after if :)
16:51  phrearch: bahamas: ok thanks for the tip :-)
16:52  bahamas: phrearch: what's the value of self.log?
16:52  phrearch: [DoRequest(2, , Insert(2, ac)), DoRequest(3, , Insert(3, bc))]
16:52  phrearch: its a list with object
16:52  phrearch: s
16:52  bahamas: phrearch: and another thing. use string formatting instead of + str(foo)
16:53  bahamas: i see
16:53  healme1: papna/lvh: I am installing 2.7 now.
16:54  vokoda_: glyph: hahaha
16:54 --- vokoda_ is now known as vokoda
16:55  bahamas: phrearch: use some prints and check that the value of self.log is the one you think it is
16:55  phrearch: bahamas: thanks, i just noticed that the function is called somewhere else as well
16:56  bahamas: yeah, i just noticed that you used print. i should concentrate more
16:57  healme1: papas/lvh: LOOK
16:57  healme1: Hello, World!
16:57  healme1: :)
16:57  papna_: healme1: Congrats.
16:57  papna_: healme1: You're now a programmer!
16:57  healme1: papna: :)
16:58  healme1: papna/lvh: Thank you both for getting me situated, now I can start pouring though some docs.
16:58  healme1: papna: Any recc. on good documentation for a complete beginniner?
16:59  papna_: healme1: http://greenteapress.com/thinkpython/thinkpython.html and  http://learnpythonthehardway.org/ are decent books.
17:00  healme1: papna: Thanks:)
17:00  Kaspi: hey guys, how to get a module named "fcgi" ?
17:01  exarkun: Kaspi: http://python.org/pypi
17:02  C2H5OH: hi all
17:06  C2H5OH: what is the difference of using PyObject_HEAD and PyObject_VAR_HEAD when extending CPython?
17:06  C2H5OH: I mean, the _typeobject structure uses PyObject_VAR_HEAD
17:07  C2H5OH: is there any use of the PyOject_HEAD?
17:08  C2H5OH: hummm, but the object struct seems to also need this macro
17:09  Kaspi: I get an error ImportError  :  No module named fcgi, after line "import fcgi", which package should I install? There seem be more than one fcgis
17:10  exarkun: Kaspi: I got an invitation to go to my friend Bob's party, but it just said "Bob" on it and I know 3 Bobs
17:10  exarkun: Kaspi: Whose house should I go to?
17:11  papna_: C2H5OH: Most of the time when you make a type, PyObject_HEAD is what you want.
17:11  papna_: C2H5OH: I don't think I've ever used PyObject_VAR_HEAD when defining a type.
17:11  C2H5OH: papna_: yeah, it seems that PyObject_VAR_HEAD is to inherit from sequences
17:11  Kaspi: exarkun: you should go to the Bob who sent you the invitation..
17:11  papna_: C2H5OH: Right, it's for stuff with length.
17:12  papna_: C2H5OH: By the way, it's often nicer to use Cython to write C extensions than the raw C API.
17:13  C2H5OH: papna_: I prefer to write my own C code, I'm too used to it
17:13  zaytsev: hi! does anyone know under which circumstances python can print something like -0 ?
17:13  zaytsev: I mean really when you have something like x = numpy.sum(...); print(x) ...
17:14  C2H5OH: zaytsev: floating point numbers are technically capapble of having negative zeroes
17:14  C2H5OH: capable*
17:15  zaytsev: ethanol, could you please tell me how could I assign this value "by hand"
17:15  zaytsev: it's funny because I have never encountered it before
17:15  C2H5OH: zaytsev: with bit operations
17:15  papna_: zaytsev: -0.0
17:15  C2H5OH: zaytsev: mangle the most significant bit of a floating point value in memory
17:15  papna_: C2H5OH: That's silly.
17:16  C2H5OH: papna_: ?
17:16  imanc: I have this listcomp/dict generating code, that works perfectly, but I wondered if I was doing it right. Bsaicaly I want to end up with a dict, not a list with a single index, that contains my dict
17:16  zaytsev: aha, thanks. it's weird, but it works.
17:16  imanc:                 items = [dict([[key,val.copy()]]) for key,val in cols.iteritems()][0]
17:16  papna_: zaytsev: Python probably also prints stuff like -1e-(big) as -0 on occasions.
17:16  imanc: so I tacked on [0] to retrieve the contents of that first index
17:16  imanc: is that the best way to do it?
17:18  papna_: imanc: I don't understand well what you want to do. That code evaluates to a pretty useless dict.
17:18  C2H5OH: imanc: what is "cols"?
17:18  imanc: cols is a list of column names in a dict
17:18  imanc: cols[o['product_name']] = {'count':0,'vat':0,'total':0}
17:19  imanc: so i'm taking a copy of cols for each row of the data I'm generating
17:19  C2H5OH: imanc: and you want...?
17:19  imanc: ahh no biggie
17:20  imanc: It works fine, and is probably the right way to go about doing it
17:20  C2H5OH: imanc: I only wonder why yo have a double bracket in [[key,val.copy()]]
17:21  papna_: C2H5OH: The dict constructor can take an iterable of key-value paris.
17:21  imanc: C2H5OH: yeh, it dies without it
17:21  imanc: just removing it now
17:21  C2H5OH: oh, all right
17:21  papna_: imanc: pastebin a repr of cols and then describe what data you want.
17:21  imanc: without the double bracket, I get - Exception Value:
17:21  imanc: dictionary update sequence element #0 has length 11; 2 is required
17:21  subsume: so I guess I can't use a dict for a key of a dict? =(
17:22  milkpost: subsume: why do you want to?
17:22  papna_: subsume: No. dict keys must be hashable, but dicts are mutable (== isn't idempotent for them) and thusly not hashable.
17:22  subsume: i dunno. you can use a tuple as a key.
17:22  papna_: subsume: Why?
17:22  milkpost: subsume: tuples don't change
17:22  subsume: I want a pony goddamnit
17:22  subsume: thanks fellas. =D
17:22  KingChillbill: hi i am looking for a fast way searching C-strings a binary file
17:22  papna_: subsume: Do you have a use case?
17:22  Spirits-Sight: when u create doctest do u ever del the call to the doctest?  or do you leave it in forever ?
17:23  papna_: Spirits-Sight: What?
17:23  jarfhy: #join #opencv
17:23  subsume: papna_ not one that couldn't use a tuple...
17:23  jarfhy: oops
17:23  subsume: a tuple OF A DICT!
17:23  C2H5OH: KingChillbill: you could encode to ascii omitting errors
17:23  papna_: subsume: tuples of dicts aren't hashable.
17:23  papna_: subsume: So you DO have a use case?
17:24  subsume: yes I have a use case.
17:24  papna_: subsume: If so, consider instead of your dict using tuple(sorted(d.iteritems())) or remember.dicts.FrozenDict
17:24  Spirits-Sight: papna: if __name__ == '__main__':   \n  import doctes  \n doctest.testmod() do u keep this at the end of ur functions after they work or take them out?
17:24  KingChillbill: C2H5OH: convert the whole file to ascii and then just use the find() function?
17:25  lvh: subsume: can you explain the usecase?
17:25  C2H5OH: KingChillbill: not exactly
17:25  subsume: its actually quite short, I can paste it. Let me comment it up.
17:25  papna_: Spirits-Sight: You're welcome to leave that.
17:25  lvh: papna_: frozenset(d.items())
17:25  Spirits-Sight: ok :-)
17:25  C2H5OH: KingChillbill: load the whole file to a string, then .encode('ascii', 'ignore)
17:25  C2H5OH: and then you have all the valid ASCII characters together
17:25  papna_: Spirits-Sight: Personally, I run my doctests from other modules that I create for testing.
17:25  papna_: Spirits-Sight: But leaving it there (with a "__main__" guard) is fine.
17:26  KingChillbill: C2H5OH: I guess this would be ok!
17:26  KingChillbill: C2H5OH: THX!
17:26  C2H5OH: KingChillbill: that would be open('file.bin', 'rb').read().encode('ascii', 'ignore')
17:26  papna_: C2H5OH: What? No.
17:26  C2H5OH: KingChillbill: however, I always confuse .encode() with .decode() so try both
17:26  papna_: C2H5OH: Not in Python 2 at least.
17:27  papna_: C2H5OH: Do you have a strong understanding of what these things are: bytes, ASCII, unicode, encoding, and utf8
17:27  papna_: ?
17:27  subsume: INTERESTED PARTIES: http://dpaste.com/289854/ =D
17:27  papna_: KingChillbill: What do you mean C-strings?
17:27  papna_: KingChillbill: You mean the binary file has null-terminated strings/
17:27  papna_: KingChillbill: Be more concrete about your search.
17:27  papna_: KingChillbill: I'm not sure what you want to do.
17:27  lvh: subsume: Oh, that's easy. The problem is that dicts are mutable
17:27  KingChillbill: papna_: yes, I want to do basically the same think as "strings -a"
17:28  lvh: subsume: don't use mutable things. use immutable things. In your case I would create a class and define __hash__/__eq__
17:28  KingChillbill: and then grep for some off them
17:28  lvh: subsume: Preferably using my FancyHashMixin because it's too easy to get wrong otherwise
17:28  subsume: lvh seems elaborate. =D
17:29  KingChillbill: papna_: all zero-terminated strings....(btw I have to use python 2.5 :()
17:29  lvh: subsume: How is what you have semantically not a class
17:29  lvh: ubajas: Another option is a namedtuple
17:29  papna_: KingChillbill: You have C object files?
17:29  lvh: err, subsume*: namedtuple
17:30  KingChillbill: papna_: regular PE-files
17:30  subsume: lvh I suppose it could be a class. so I could use in and __eq__ will fire and supply my notion of equality?
17:31  papna_: KingChillbill: Windows executableS?
17:31  papna_: KingChillbill: Welllll, I'm not sure how strings finds the start of a string.
17:31  Spirits-Sight: my other question is when creating function, how do you know when to stop adding parts to it?  Example: breaking phone number into parts like area code (xxx), suffices(xxx), extion(xxxx) now people write numbers in all different ways like xxx-xxx-xxxx or xxxxxxxxxx or 1(xxx) xxx-xxxx so the spliting I know is one functins should that function be doing the reformating of the number before it splits or should th
17:32  Spirits-Sight: at be in the different function?
17:32  lvh: subsume: That, and, obviously, define __hash__
17:32  subsume: Spirits-Sight when your function does too much, stop.
17:32  lvh: subsume: Like I said, equality is probably more complex than you think it is, which is why you should use that mixin
17:32  lvh: subsume: it exists for a reason
17:32  papna_: KingChillbill: I suspect I might call strings as a subprocess. open("filename").read().split("\0") will catch some right stuff and tons of junk.
17:32  subsume: lvh right. its a good tip.
17:32  lvh: subsume: The people that know how it should be done don't want to do it again, the people that think they can just fudge it probably don't know how it should be done
17:32  subsume: lvh I'm not sure how to apply what you're saying about __hash__
17:33  lvh: subsume: Hint, if you don't know what return NotImplemented does, you either should read that first or don't do it ;-)
17:33  KingChillbill: papna_: windows executables. I dont want to write my own strings, so I guess the subprocess thing would be ok too
17:33  Spirits-Sight: subsume: but how do you know whats to much?  I had read that function does one goal after that it should be another one
17:33  subsume: Spirits-Sight how can one explain the great Tao....
17:33  lvh: subsume: __hash__ returns a value based on identity (in CPython, a memory address -- which, in CPython, is immutable)
17:34  subsume: lvh welp I'll give it a shot. thanks.
17:34  milkpost: subsume: I would use a tuple with the key values you want to compare on for this simple application. key = (i['name'], i['blah']), if key in redux_dict: redux_dict[key]['quantity'] += i['quantity'] else: redux_dict[key] = i
17:34  lvh: subsume: Obviously two different tuples with the same value in your case ought to be equal
17:34  milkpost: subsume: then flatten = redux_dict.values()
17:35  subsume: the problem is some properties are optional
17:35  subsume: but I guess I could just have None in such cases.
17:35  lvh: subsume: In this case, I would say that you most reasonable options, in order of descending reason is: a) a class b) a namedtuple c) k = frozenset(d.itervalues())
17:35  papna_: KingChillbill: If you want to run "strings -a foo", do p = subprocess.Popen(["strings", "-a", "foo"], stdout=subprocess.PIPE) then stdout= p.communicate()[0]
17:35  subsume: yep.
17:36  imanc: ok - here' s my pastebin along with commentary
17:36  imanc: http://pastebin.com/p5VbXRMZ
17:36  infobob: http://paste.pound-python.org/show/854/ (repasted for imanc)
17:37  imanc: haha "please use a less awful paste-bin" love it
17:38  subsume: anyone know a site where you could do quick textediting find/replace?
17:38  plundra: A site?
17:38  papna_: imanc: That's because [0] gets the first item. Do a loop if you want to do all the items.
17:38  Gentle: are people these days really using ajax text editors?
17:38  papna_: imanc: Give an example of the output you want?
17:39  subsume: I don't really use it for much.
17:39  subsume: but sometimes I've got a mound of user input I want to clean without getting into a shell
17:39  papna_: subsume: http://gpl.internetconnection.net/vi/
17:39  subsume: haha. cool
17:41  healme1: papna: Is '#' a precursor for comments?
17:41  nosklo: subsume: http://www.ymacs.org/demo/
17:41  papna_: healme1: Everthing from # to the end of a line is a comment.
17:41  healme1: papna: I assume I dont need to put a '#' at the end of the comment, just the beginning?
17:42  exarkun: x = "#this is not a comment"
17:42  papna_: healme1: Right.
17:42  healme1: papna: <3
17:42  papna_: healme1: As exarkun points out, the parsing rules are slightly more complicated than I described.
17:43  healme1: papna/exarkun: So the quotes are not needed or, they are? Which is correct A) #Hello B) "#Hello"
17:44  exarkun: x = """
17:44  exarkun: #this is also not a comment
17:44  Gentle: both are valid
17:44  exarkun: """
17:44  milkpost: lvh: doesn't your mixin assume that the attribute values don't change?  I can't find the full code for it so I am a little blind but, do you restrict the setter function?
17:45  imanc: papna_: I have decided to change tact. I think I have a more basic issue now.
17:45  milkpost: lvh, sorry I gotta run.  Would love to hear more.  sorry
17:45  imanc: x = {u'Roller 30mm': {'count': 0, 'total': 0, 'vat': 0}}
17:45  imanc:  How can I access count/total and vat without knwoing the key, e.g. 'Roller 30mm'
17:45 --- anix_ is now known as anix
17:46  imanc: or how can I get the key name
17:46  nosklo: imanc: for key in x: print x[key]['total']
17:46  imanc: 'k
17:47  papna_: imanc: sum(info['vat'] for info in x.itervalues())
17:47  papna_: imanc: Oh, I think I misread.
17:48  papna_: imanc: How do you decide which thing to look up?
17:48  imanc: yeh as I'm rendering this sales report, now for each table cell I have a variable containing that dict: u'Roller 30mm': {'count': 0, 'total': 0, 'vat': 0}}
17:48  imanc: and i need to pull out the count, title, and vat
17:49  nosklo: imanc: if you have {u'Roller 30mm': {'count': 0, 'total': 0, 'vat': 0}, u'Roller 35mm': {'count': 1, 'total': 2, 'vat': 3}}, how do you know which Roller you want, 30 or 35?
17:49  VooDooNOFX_: imanc, is it possible to change the unput formatting in your app?
17:49  imanc: nosklo well because I used the same initial column list to set up each row, so they are in the right order, e..g   Roller 30mm will always be col 1, etc.
17:50  imanc: imanc, yeh, it's possible.  To be honest, I'm trying to shape the data so that it's easy for me to format it in a django template
17:50  imanc: using dj's template language
17:50  imanc: unsure why I repeated my name there
17:50  nosklo: imanc: dicts don't have order, so they can come up in any order
17:51  nosklo: imanc: I'm guessing dicts aren't the best data structure for you to use in that place
17:51  imanc: nosklo - you may be right
17:51  imanc: perhaps I should rethink how i'm structuring this
17:51  nosklo: imanc: if you aren't going to access stuff by the key, then a dict is not convenient
17:52  nosklo: imanc: maybe a list of tuples
17:52  imanc: it's just easier when generating the report to say  data[-1].items[product_name]['count'] += prod.qty
17:52  healme1: print "Roosters", 100 - 25 * 3 % 4   // In this line, how come the answer is 97? What is the function of the % sign? And does order of operations apply when computing an equation?
17:52  nosklo: imanc: oh, so you *are* using the key
17:52  imanc: nosklo - yes, but not when I get to the template
17:52  imanc: I then pass data to the template
17:52  imanc: and have to pul it out again to format in a html table
17:53  VooDooNOFX_: healme1: is this homework?
17:53  papna_: healme1: Sure. In this context, order of operations is called "operator precidence"
17:53  nosklo: imanc: well, maybe you also pass a list of products. Or you can use the solution I provided earlier, but then you won't be able to control the order of the results
17:53  imanc: nosklo
17:53  imanc: I have already passed the col headings across - woot
17:53  imanc: thank you!
17:53  papna_: healme1: That does 25 * 3 = 75, then 75 % 4 = 3, then 100 - 3 = 97
17:54  healme1: 75 % 4, why is that 3?
17:54  papna_: healme1: * and % are multiplication/division operations, so they evaluate before -, which is an addition/subtraction operation.
17:54  VooDooNOFX_: it's a modulus
17:54  papna_: healme1: 75 divided by 4 is 18 with a remainder of 3.
17:54  papna_: healme1: % gets a remainder.
17:55  healme1: Aha!
17:55  healme1: :)
17:55  VooDooNOFX_: modulus = remainder after dividsion
17:55  healme1: Thanks guys, I was sitting there going how on earth did they get 97:)
17:56  papna_: healme1: You can play with doing the suboperations and adding parentheses to see what's happening and discover where you're not understanidng.
17:56  VooDooNOFX_: but don't get confused when you see print '%s' % 'String'. that's a little different than 75 % 4
17:57  johnf_: morning folks - Is there a simple way to insure that module I'm importing is the correct module? for example I want datetime to be the system datetime
17:58  papna_: johnf_: Don't create anything else named datetime.py
17:58  imanc: actually - i can do it like this: >>> x.items()[0][1]['count']
17:58  imanc: not pretty, but it works
17:59  imanc: which in django template language becomes     x.items.0.1.count
17:59  runlevelten: eugh.
18:00  johnf_: Yes I understand that - I have not - but I ran into a very strange situation.  I'm using Django and a module within Django (models.py) but I got an error for datetime.  No where did I create a datetime.py
18:01  johnf_: So there has to be a way to insure the statement 'import datetime' gets the correct datetime
18:01  ssbr: johnf_: there is no way other than making sure your environment doesn't contain any other datetimes
18:01  ssbr: (such as a datetime.py)
18:02  papna_: johnf_: Don't name anything else datetime.py
18:02  ssbr: johnf_: something like virtualenv would probably make that task easier, but it isn't particularly hard, and I've never had to do it.
18:02  ssbr: johnf_: if you think this datetime isn't the right one, print datetime.__file__
18:02  merwok: What’s the problem with datetime?
18:03  johnf_: I do not set PYTHONPATH and I wonder if that had anything to do with it!
18:03  papna_: johnf_: What's your actual problem?
18:03  merwok: PYTHONPATH is not required.
18:03  ssbr: johnf_: PYTHONPATH is just an environment variable to specify extra paths beyond the defaults
18:03  ssbr: (extra module search paths that is)
18:03 --- balaa_ is now known as balaa
18:03  ssbr: johnf_: stating your real problem would be helpful
18:04  johnf_: Django suddenly stop working with an error 'None' has not Attribute for now=datetime.datetime.now()
18:04  marel: http://paste.pocoo.org/show/308982/ What I'm trying to do here is generate an html for excel file, however the only thing it displays when I open the .html file is 'Table', nothing else. Someone plesae take a look at this..
18:04  ssbr: johnf_: what's the full traceback? paste to a pastebin (such as pocoo)
18:04  runlevelten: johnf_: pastebin the traceback?
18:06  johnf_: I did yesterday!  But I no longer can repeat the error!
18:06  merwok: marel: Try adding print statements to see what the program does
18:06  nosklo: marel: checking.
18:06  runlevelten: johnf_: was the error in a python shell or in a browser?
18:06  marel: Okay.
18:07  ssbr: merwok: pdb is better for that
18:07  ssbr: since you can examine arbitrary variables instead of prespecified ones, etc.
18:07  merwok: ssbr: That’s true, but more advanced.
18:07  johnf_: I got the error from my editor (Wing).  The browser did nothing - the shell reported nothing.
18:07  merwok: ssbr: I’ve been meaning to learn pdb for months.  Got a good tuto?
18:08  runlevelten: sounds like just the sort of error people get when they've done something like datetime=None in a shell.
18:08  nosklo: marel: I can't reproduce it. I ran the code and the table shows up as normal.
18:08  ssbr: merwok: tutorials aren't necessary. "s" steps "into" the next statement -- if the next statement is a function call or involves one, you start tracing into that one. "n" steps 'over' -- it stays within the current function. "c" continues until the next breakpoint (don't bother with those for now).
18:08  runlevelten: (because I was helping someone who'd done that the other day)
18:09  ssbr: merwok: oh, and ! lets you execute a python expression (!x = 4), and p lets you print (p x)
18:09  ssbr: merwok: and that's everything you need to know to get started! the next thing is breakpoints. and then you're basically done.
18:09  papna_: x = 4 isn't an expression
18:09  dheerajchand: Hello, everyone. Happy Thursday to all!
18:09  ssbr: egh. python simple statement, sorry
18:10  ssbr: my linguistic facilities are not sufficiently pedantic today
18:10  revolve: happy thursday :D
18:10  ssbr: yes, happy... thursday. what?
18:10  ssbr: s/pedantic/precise/
18:10  revolve: ssbr: it's not like it's thursday every day
18:10  ssbr: revolve: no, just every 7
18:11  revolve: thats one out of seven, man
18:11  ssbr: its a bad day anyway. The only redeeming feature is that it's a party day
18:11  ssbr: (but only in university)
18:11  dheerajchand: I'm having some trouble using pip to get oursql.  I'm on a Mac, running Snow Leopard, and I installed MySQL using the (UGH) Oracle official installer.  I'm getting warning messages that look odd to me, and I am unable to import the module when I start the interpreter.  Someone mind taking a look and helping me out? http://dheerajchand.pastebin.com/0fT4awFy
18:11  infobob: http://paste.pound-python.org/show/855/ (repasted for dheerajchand)
18:11  dheerajchand: Also, Thursdays are awesome!
18:12  dheerajchand: It's a seven-day recurring awesome event!
18:12  marel: nosklo, does 'Table' appear above your table ?
18:12  marel: Not in the title though
18:13  nosklo: marel: yes.
18:13  dheerajchand: ssbr: Thursdays are awesome in the professional world, too. Best happy hour prices of the week!
18:13  nosklo: marel: it's in <head>
18:13  merwok: ssbr, sounds cool!  I’m not used at all to gdb-style debugging, but I think I get steps and breakpoints.
18:13  marel: Oh, I forgot the <title> tag
18:14  nosklo: marel: I'm trying to find some code I used for this once, and will paste in a while
18:14  marel: nosklo, that would be great !
18:14  subsume: will list.index() use __eq__ ?
18:14  runlevelten: dheerajchand: try installing cython
18:14  papna_: subsume: Sure.
18:14  runlevelten: then having another go
18:15  dheerajchand: runlevelten: Googling what cython is now. This is my third week using Python. I'm trying to make a clean switch from PHP, so it's total immersion for me.
18:15  runlevelten: sudo pip install cython in your virtualenv
18:15  merwok: Without sudo, then.
18:15 * merwok hates sudo
18:15  runlevelten: you might want to change that build arch, too
18:15  papna_: subsume: It uses is first, but then uses equals. (Hopefully this doesn't make a difference.)
18:15  runlevelten: aye, without sudo
18:16  ssbr: merwok: if you want, you can try winpdb
18:16  imanc: dheerajchand: what framework are you using?
18:16  subsume: papna_ probably not
18:16  merwok: ssbr: Is that free software?
18:16  ssbr: merwok: it's pdb, but with a GUI pane. You can see the code being executed in a separate pane (instead of the "l" command I forgot to mention), and use buttons for stepping/breaking/etc.
18:16  dheerajchand: imanc: I think that I'm too new to Python to understand that question.  I am using the system Python on the Mac that I upgraded to 2.6.5.
18:16  ssbr: merwok: yes. and despite the title, it's GTK and works on mac/linux too
18:17  ssbr: dheerajchand: he means, how are you doing web development
18:17  merwok: ssbr: I’m very confortable in my command line, but I may try it.
18:17  ssbr: dheerajchand: with django, cgi, ...?
18:17  runlevelten: dheerajchand: if it breaks again, you might look in your virtualenv's src directory for an oursql directory, cd into it
18:17  dheerajchand: runlevelten: I am not sure how to change the build architecture. Also, I don't know what "virtualenv" means.
18:18  ssbr: merwok: the only reason I'd use something like winpdb is the pane with the executing code in it. That's a very convenient feature, feels "right". But I mostly use pdb too.
18:18  runlevelten: dheerajchand: and do ARCHFLAGS="-arch x86_64" python setup.py build_ext
18:18  imanc: dheerajchand: oh, OK.  If you are replacing PHP, then obviously it's for web dev purposes.  You might be better starting off with some django tutorials, which will get you up to speed buildilng websites quickly
18:18  dheerajchand: imanc: Oh, I see. Well, I am working through "Think Like A Computer Scientist: Think Python", first, and then I am going to start Django tutorials.
18:19  imanc: ah
18:19 --- Cariyla is now known as Gerwin
18:19  dheerajchand: ssbr: It seemed like a good idea to learn the language properly first, and then start working on applications like web development, mobile phone applications, shell scripts, etc.
18:19  runlevelten: dheerajchand: ah ok. You have pip installed, right? then you do want sudo pip install cython
18:19  ssbr: dheerajchand: it is
18:19  johnf_: Thanks for the help - I'll continue to look for the issue
18:19  ssbr: dheerajchand: but the assumption was that you were jumping right into web dev :p
18:19  ssbr: Anyway, good on you.
18:20  merwok: runlevelten: I’m not sure cython is necessary here.  The log output shows that previously generated C files are used; the problem is clearly with the C compilation.
18:20  dheerajchand: ssbr: Oh, sorry, I should have been more clear.  I'm running through the tutorials as quickly as I can, so I am beyond "Hello, World!", but I still have a lot to learn about Python.
18:20  runlevelten: merwok: yes, the arch is i386
18:21  merwok: dheerajchand: We’re still learning after years :)
18:21  dheerajchand: Ack, I just got a family emergency phone call. I have to run, but thanks for all the help. I'll be back in a bit if anyone still wants to be of aid. :)
18:22  runlevelten: so, install cython, and build to x86_64 seems a sensible course of action.
18:22  runlevelten: ah well, that settles that, heh
18:22  merwok: Is the the cython→C translation arch-dependent?
18:22  papna_: No.
18:23  merwok: Why telling to install cython then?
18:24  papna_: (I think he's barking up the wrong tree.)
18:25  merwok: Woof.
18:25  runlevelten: mainly because it's listed as a dep, and the compile failed at that point
18:25  runlevelten: as I said, probably about four times, the point of error is the arch
18:25  papna_: runlevelten: It didn't fail at that point.
18:25  merwok: The compile used the C file, no cython involved :)
18:26  runlevelten: aye, you're not wrong
18:26  merwok: “cython not found, using previously-cython'd .c file”
18:27  papna_: Can I generate a callback on the fly in Cython?
18:27  papna_: Ugh, I hate C so much.
18:29  Burgundy: Then how can you express your feelings towards C++ ?:)
18:29  ssbr: Burgundy: ritualistic self-mutilation
18:29  Burgundy: hehe
18:30  papna_: C++ is one of those things where to do it right, you have to do it wrong.
18:30  Burgundy: It's just that I find C really cool for system programming, but very few C++ features blend to the way my mind works.
18:31  ssbr: C isn't even that cool for systems programming honestly. In reflection, I think a higher-level language has a place here, as long as it can go down to lower-level stuff.
18:31  Burgundy: I guess a mix of C, python and rarely ASM in the right places can build anything.
18:31  ssbr: Python would be a poor choice, but maybe not something like a modified Scheme
18:31  ssbr: Burgundy: asm isn't ever needed anymore.
18:31  marel: nosklo, any luck finding that code ?
18:32  ssbr: Even for bootloaders, people use Forth.
18:32  merwok: Lisp Machines yeah!
18:32  nosklo: marel: yeah, just a sec
18:32  Burgundy: I don't have a clue what Forth is, let me google it!
18:32  marel: okay, great :)
18:32  ssbr: Burgundy: it's a stack programming language, very low-level
18:33  papna_: PostScript without the drawing.
18:33  mnemoc: Forth is neat
18:33  TheCommieDuck: papna_: Wait, so *standard* Python isn't Cython?
18:33  kerio: you mean cpython
18:33  ssbr: TheCommieDuck: no, it's CPython
18:33  kerio: cython is a different thing
18:33  TheCommieDuck: Oh. I see.
18:33  ssbr: TheCommieDuck: Jython screwed up the naming scheme, because it couldn't be named JPython due to a previous project with the same name
18:34  ssbr: (its predecessor)
18:34  TheCommieDuck: I know Jython (Python implemented in Java?) and IronPython..and normal Python was C..
18:34  kerio: ironpython should've been called dotPython
18:34  ssbr: FePy has a ring to it, though
18:34  merwok: I find Factor cool too: http://www.rfc1149.net/blog/2007/01/18/factor-a-stack-based-programming-language/
18:34  Burgundy: ssbr: Looks interesting, but don't have that much experience in that field.
18:34  TheCommieDuck: So what is the difference between CPython (what I take to be standard python) and Cython?
18:35  merwok: TheCommieDuck: CPython is an implementation of Python, an interpreter or a virtual machine if you want
18:35  papna_: TheCommieDuck: CPython is a Python implementation.
18:35  papna_: TheCommieDuck: The normal one everyone uses.
18:35  merwok: TheCommieDuck: Cython is a Python-like language (and implementation) that can be compiled to C
18:35  TheCommieDuck: Ohh, I see.
18:35  papna_: TheCommieDuck: Cython is a thing for making wriintg C extensions for Python easier.
18:35  TheCommieDuck: (And I messed up with the CPython/Python impl bit)
18:37  kerio: papna: for writing C extensions for CPython
18:37  kerio: (and PyPy too)
18:47  nosklo: marel: sorry had to work a bit
18:47  nosklo: marel: still there?
18:47  marel: nosklo, yes
18:55  nosklo: marel: added example usage
18:55  nosklo: marel: http://bpaste.net/show/12493/
18:56  marel: nosklo, thanks a lot
18:57  merwok: wth “tostring”
18:57  merwok: That should be called str
18:57  nosklo: merwok: that would confuse with python's builtin str()
18:58  lduros: Hi, I'm using this: f = codecs.open(os.path.join(self.path, self.filename), "r", "ISO-8859-1") to read html files, because utf-8 would make errors, but then it seems that I'm getting errors with that too due to some characters: UnicodeEncodeError: 'latin-1' codec can't encode character u'\u2019' in position 78: ordinal not in range(256) -- is there a way I could just ignore such characters?
18:58  merwok: That’s what I’m saying
18:58  merwok: It should use a __unicode__ or __str__ method
18:58  merwok: lduros: Pass an error='ignore' parameter
18:59  nosklo: merwok: then how I would pass serializing options such as pretty_print=True ?
18:59  lduros: merwok: how can i do that? noobie python user -- would that be in the codecs.open() method?
19:00  lduros: merwok: i'll look it up in the help entry maybe
19:00  merwok: lduros: It’s a common argument, found in str.decode, unicode.encode and codecs.open
19:01  lduros: merwok:
19:01  merwok: nosklo: I know.
19:01  lduros: thanks
19:03  lduros: merwok: like this: f = codecs.open(os.path.join(self.path, self.filename), "r", "ISO-8859-1", 'ignore')
19:03  lduros: ?
19:03  lduros: it still has the same result
19:03  lduros: that's what i found from the help entry
19:03  lduros: open(filename, mode='rb', encoding=None, errors='strict', buffering=1)
19:04  merwok: lduros: Strange.  Maybe your file is invalid.
19:04  SegFaultAX: Wow, a 27 inch monitor from an 18.5 inch monitor is certainly a big upgrade. :) /offtopic
19:05  mnemoc: sounds like SegFaultAX got a job at G :)
19:05  lduros: merwok: well there are some weird symbols but
19:05  shadow^dancer: G ?
19:06  lduros: merwok: before I was using python3 it seemed to parse those correctly
19:06  subsume: lvh yer the man
19:06  lduros: merwok: I've switched to python2 because I needed mysqldb
19:06  SegFaultAX: mnemoc: Sounds like you're right :)
19:06  mnemoc: :D
19:06  mnemoc: SegFaultAX: congratulations
19:06  lvh: subsume: I believe according to social convention I'm expected to prefix that by "who da man", but thanks anyway :-)
19:07  merwok: lduros: Paste the file somewhere if you can
19:07  DB42: Hi, is there a known issue in Python 2.7 on Windows when using asyncore dispatcher class that hosts a UDP socket ?
19:08  MostAwesomeDude: DB42: Yes; asyncore bites.
19:08  merwok: DB42: Try a search on bugs.python.org
19:08  SegFaultAX: mbreslin: Thanks.
19:09  SegFaultAX: Err, mnemoc thanks.
19:09  mbreslin: SegFaultAX: anytime.
19:09  lduros: merwok: OK I think I figured it out
19:09  lduros: merwok: some files are in latin-1, some other are in utf-8
19:09  lduros: merwok: the one that throws the error is in fact utf-8
19:09  ssbr: hee hee
19:09  DB42: MostAwesomeDude, why so ?
19:10  DB42: merwok, :(
19:10  lduros: merwok: is tehre a way I could make a conditional statement, so that it either use codecs.open with ISO Western or UTF-8 depending on the file encoding?
19:10  merwok: lduros: Have a look at the chardet module
19:10  ssbr: My brother spent 2-3 hours writing subtitles for a film because the format he got the subtitles in wouldn't import into his DVD burner.
19:10  merwok: DB42: ?
19:10  lduros: merwok: sounds like it would detect the encoding, thanks for the tip :-)
19:10  DB42: i thought some people here using asyncore
19:10  ssbr: Eventually he asked me to please please write a program to do it, and I did (less than a page, just a simple regex thing), and now he's going to learn Python. :>
19:10  merwok: lduros: Sure, use a try block, catch UnicodeDecodeErrors, retry with the other encoding
19:11  MostAwesomeDude: DB42: It's leaky, creaky, and doesn't perform well.
19:11  MostAwesomeDude: DB42: Use Twisted if you can.
19:11  ssbr: DB42: it's painful and forces users to reinvent the wheel lots
19:11  lduros: merwok: oh ok, I see, thanks
19:11  lduros: :-)
19:11  DB42: merwok, don't see somethign related
19:14  DB42: ssbr, so what i should do ? add a bloated framework i don't need ?
19:14  DB42: MostAwesomeDude, i rather not, should i go plain socket / select managment ?
19:14  ssbr: DB42: I don't know about "bloated", but basically yes.
19:14  ssbr: DB42: I mean, Python is basically a bloated framework you don't need. you could write anything in Forth or asm or C.
19:15  DB42: yes, but i need to write an introp for another piece of code which is in python already
19:15  MostAwesomeDude: DB42: If you think Twisted is bloated, then you have already drank the Kool-Aid.
19:15  DB42: MostAwesomeDude, is asyncore worse then socket / select ?
19:15  ssbr: DB42: so all other things being equal, you'd write C or asm because it's less crusty?
19:16  DB42: nop, i rather use c# :)
19:16  ssbr: DB42: C# is far bigger and more bloated than Python or Twisted, or both combined
19:16  DB42: but this is out of the point and i dont want to flam
19:16  DB42: e
19:16  merwok: Is it already troll o’clock? :-)
19:16  DB42: if you are on python 3 what are you options then ? (no twisted yet)
19:16  ssbr: DB42: the point is, the same thought processes that drive most people to use C# or Python or Perl or Java or whatever fun language that doesn't suck, also drives them to use featureful, and, yes, largeish, libraries
19:16  MostAwesomeDude: DB42: We've all done lots and lots of network programming, and Twisted's the easiest. It really is that simple.
19:17  ssbr: DB42: you don't have many options.
19:17  ssbr: DB42: this is why not many people have switched to Py3 completely
19:17  ssbr: It's the same with other libraries. There's so much that doesn't work on Python 3, although the scales started tipping properly this summer. It's a viable option now, just maybe not for network programming or certain kinds of game dev
19:18  merwok: I don’t have experience with network programming, but it seems that when you don’t want twisted, you have to assemble bits and pieces
19:18  merwok: This libray does HTTP, this other one SSH, another one crypto
19:18  DB42: nobody commented about is asyncore worse then manually handling socket / select
19:18  nosklo: merwok: except you can't assemble them
19:18  nosklo: merwok: because one of the libs won't collaborate with the other
19:18  ssbr: DB42: I meant to. It's probably slightly better.
19:18  nosklo: merwok: they all block
19:18  DB42: anyhow, for the msot part it is working ok, but the issue is that it doesn't seem to work with a listening UDP socket for some reason...
19:18  merwok: Well, I’m not sure I’d want to mix HTTP and SSH for example
19:19  ssbr: DB42: the general feel is that you have to do the same things anyway, and reinvent a lot of instrumentation/protocol-support/libraries/etc. to make something useful
19:19  ssbr: merwok: why not? :P
19:19  nosklo: merwok: why not? It's very convenient to be able to SSH to your HTTP server and print some variables live
19:19  merwok: nosklo: I don’t believe threads are evil, but I’m not well versed in concurrency
19:19  DB42: i need to do my own protocol handling
19:19  DB42: not something known anyhow
19:19  merwok: ssbr: I don’t like web apps :)
19:19  ssbr: merwok: a neat thing about Twisted is that you can run an HTTP server that lets you monitor your SSH connections, or a telnet server that lets you debug your HTTP server, etc. -- you can have them work together.
19:19  nosklo: merwok: they aren't evil. Just misused in most cases
19:20  merwok: ssbr: I hadn’t thought of that.
19:20  DB42: this is all overkill for the simple protocol i need
19:20  nosklo: merwok: i.e. threads aren't a good way to wait for IO, if you can avoid
19:20  nosklo: merwok: but there are good uses for them
19:20  DB42: my main issue with asyncore is that it just wouldn't listen on my UDP port (but does ok for my TCP port)
19:20  DB42: and i wanted to know is this a blunt bug or what
19:20  ssbr: merwok: it's an area where Twisted absolutely shines compared to, for example, writing a WSGI web app or something. Most people don't need it for web apps, but it comes up
19:20  merwok: nosklo: How to avoid them?
19:20  nosklo: DB42: please, don't use asyncore.
19:20  ssbr: DB42: Might be. Until recently asyncore was terribly supported
19:21  nosklo: DB42: use anything, except asyncore
19:21  lduros: merwok: if i use mysqldb to insert a long string into db like this: statement1 = """INSERT INTO node_revisions(uid, title, body) VALUES(%d, "%s", "%s")""" %(1, article.title, article.body)
19:21  lduros:  -- do i need to escape the variables first? IT seems like i can't insert them I get: _mysql_exceptions.ProgrammingError:
19:21  ssbr: DB42: debugging work is lagging behind
19:21  ssbr: lduros: that's SQL-injection-tastic. instead of cursor.execute(foo % bar), use cursor.execute(foo, bar)
19:21  merwok: lduros: You should not build the string yourself.  There is a method that takes an SQL string and a tuple of variables.
19:21  nosklo: merwok: don't wait. You can do multiple network operations on a single thread, if you don't keep waiting for responses
19:22  merwok: nosklo: I was referring to I/O
19:22  ssbr: lduros: this won't "escape it", it'll do a sort of paramaterized query thing. Actually I think MySQLdb escapes internally, but OurSQL (a better wrapper for MySQL's client library) does not AFAIK
19:22  nosklo: merwok: sorry, s/network/IO
19:22  DB42: i see
19:22  merwok: Ah ok, you didn’t mean file I/O
19:22  nosklo: merwok: no, I mean all IO
19:22  DB42: ok
19:22  DB42: how can i debug the issue ?
19:22  merwok: nosklo: Someone I respect thinks blocking sockets with threads are a good model.
19:22  lduros: ssbr: right, it just checks if it's a string or a number etc, I'm just starting using python and mysql, so i didn't look into sql injection and string escaping yet
19:22  nosklo: merwok: they're wrong.
19:22  ssbr: DB42: anyway, you're back to the "overkill" rhetoric. Please reconsider that train of thought, because Python is also overkill, and I think a lot of people use Python anyway. :(
19:23  DB42: it's ok
19:23  DB42: i want to help fix this bug
19:23  ssbr: lduros: this is, honestly, the very first thing you should be taught. it's very important.
19:23  DB42: how should i go about figuring out where the issue is ?
19:23  nosklo: DB42: you should give up using asyncore, first step
19:23  lduros: ssbr: right, I do with php ;-) not yet with python
19:23  ssbr: DB42: nobody here can really help you with that, because we don't use asyncore
19:23  DB42: (since all my tcp networking code already works ok with asyncore)
19:23  ssbr: DB42: you might want to try the mailing list
19:23  DB42: but asyncore is a part of the libs and not depiracated
19:23  nosklo: DB42: rewriting it won't be hard
19:23  DB42: so i guess i should help maek it better
19:23  ssbr: but you won't be getting work done anytime soon. You should probably drop asyncore for your production code
19:23  MostAwesomeDude: DB42: It narrowly avoided getting kicked out of Python 3. Nobody likes asyncore.
19:24  nosklo: DB42: yeah, a lot of stuff in stdlib sucks
19:24  ssbr: MostAwesomeDude: a few oddballs like asyncore
19:24  merwok: DB42: Try a search on bugs.python.org
19:24  DB42: my co-workers use raw sockets and select
19:24  ssbr: DB42: your co-workers might have the better approach if asyncore isn't working.
19:24  DB42: k
19:24  DB42: i'll consider my possibilites, thanks
19:24  merwok: nosklo: :-)
19:24  ssbr: The best approach is still a proper framework that can handle nonblocking sockets for you in a painless (and cross-platform) manner, like Twisted
19:25  DB42: is there something that is as small as asyncore and works better btw ? (smaller then twisted, that doesn't need zope dependencies) ?
19:25  ssbr: select would be iffy for that. But it probably won't bite you to use select, it'll just be slow work.
19:25  merwok: Why be cross-platform when you can use only decent platforms? :) /troll
19:25  ssbr: DB42: what's wrong with depending on zope.interface?
19:25  merwok: DB42: Medusa
19:25  MostAwesomeDude: DB42: Which embedded platform are you targeting?
19:25  DB42: ssbr slow work ?
19:25  ssbr: DB42: it isn't a large dependency
19:25  nosklo: DB42: your cowokers are partially right. It's not hard to come up with something better than asyncore, yourself
19:25  merwok: zope interfaces aren’t beautiful IMO
19:25  DB42: nothing, just asking if there is something smaller
19:25  ssbr: DB42: well, you have to implement things that Twisted or another equivalent framework already have implemented for you.
19:25  nosklo: DB42: zope.interfaces are a very small dependency. I can't think of anything smaller
19:25  DB42: MostAwesomeDude, windows :)
19:26  ssbr: DB42: if you used them, you could be on your way doing your actual app code, but if you write it using sockets/select you are still writing the infrastructure
19:26  MostAwesomeDude: DB42: Wince? I'm so sorry.
19:26  ssbr: thus, slow work
19:26  nosklo: DB42: twisted is very small. I can fit like thousands of copies of twisted on a memorycard the size of my thumbnail
19:26  MostAwesomeDude: I didn't know Python ran on Wince though.
19:26  ssbr: MostAwesomeDude: Python 2.1 does actually
19:26  DB42: ssbr, it's a very lightwait infrastructure
19:26  ssbr: at least IIRC
19:26  ssbr: DB42: yes, so what?
19:27  ssbr: DB42: you still have to write it yourself, when you don't have to if you use a framework.
19:27  DB42: so i dont mind doing it
19:27  DB42: would take me less then an hour
19:27  ssbr: DB42: fine, then use sockets/select. But it will be, as I said, slow work.
19:27  DB42: for what i need from it
19:27  nosklo: DB42: twisted is also lightweight -- I can hold a hard drive with hundreds of thousands of twisted copies, with a single hand
19:27  ssbr: DB42: Sure. And in Twisted, it would take you less than a second. You see the difference?
19:27  DB42: k
19:27  ssbr: and there are other things.
19:27  DB42: thanks
19:27  DB42: thanks for the twisted recommendation
19:27  ssbr: You want to add SSH support, you have to add hooks for that, but a framework could already do this, etc.
19:27  DB42: i might give it a twist as well
19:28  Jesdisciple: hahaha
19:28  ssbr: It doesn't have to be Twisted that you use, but some sort of framework is nice for network programming just because of how slow it is to write everything all over again :<
19:28  DB42: i dont need anything only read some socket reading for a stupid simple protocol
19:28  DB42: any recomendations for anything else ?
19:28  ssbr: DB42: Twisted makes simple protocols simpler, is the thing. e.g. if it's a line based protoocl, you can have a protocol implementation that only parses lines, and doesn't have to chunk the input into lines itself
19:29  ssbr: I don't know of any other frameworks that do the same thing, except Asyncore (which is apparently broken today)
19:29  nosklo: DB42: if your protocol is simple, don't use sockets directly.
19:29  DB42: ssbr, asynchat does it as well :)
19:30  papna_: DB42: "My call color is too simple to use a paint roller. I'm going to use a horse's tail."
19:30  papna_: *wall
19:31  ssbr: DB42: right. It's the little things that help sometimes.
19:32  DB42: yeap, which is why i'm also considering just fixing the issue if it can be done and helps soem part of the community (not the part that lives here)
19:36  DB42: altough i'm baffled at why something that is so hated / works bad is included in the OS, but i'm not familier with the python libs too much
19:37  papna_: DB42: You're asking why asyncore is in the stdlib?
19:38  DB42: yeah
19:38  Spirits-Sight: OK, I want to convert string to int for example: '1234567' to 1234567 ??  I tryed int() but it failed
19:38  Spirits-Sight: or I did
19:38  papna_: DB42: Mainly because of backwards compatability and to have *something*. The latter is silly.
19:38  merwok: int() alone will return 0.  Pass the string to the function.
19:38  papna_: DB42: It was very close to being removed in Python 3.
19:38  papna_: Spirits-Sight: pastebin your code.
19:39  papna_: Spirits-Sight: And whatever went wrong.
19:40  Spirits-Sight: http://codepad.org/Er4A7jvn
19:41  papna_: Spirits-Sight: http://codepad.org/Bc2I5V8c
--- Log closed Thu Dec 23 19:45:30 2010
--- Log opened Thu Dec 23 20:00:58 2010
20:00 --- Users 697 nicks [0 ops, 0 halfops, 0 voices, 697 normal]
20:01  dheerajchand: I just use Pastebin because I like being able to delete the pasted content.
20:01  dheerajchand: So, more information: I am on a Mac, running Snow Leopard. I upgraded the system Python to 2.6.5.
20:01  papna_: dheerajchand: Full of ads, can't cleanly copy code off, poor highlighting, slow.
20:02  dheerajchand: I also need to learn about this mysterious virtualenv that people are telling me to use.
20:02  papna_: dheerajchand: It looks like you can't access ~/.pip/pip.log. It's probably owned by root because you did "sudo python setup.py...."
20:02 --- Channel #python was synced in 101 seconds
20:02  dheerajchand: So, should I just chown that?
20:03  Spirits-Sight: papna_: is doctest good for starter or should using unittest(2) be better to use for the start?  also is there a nicer way to write my code http://codepad.org/7ku1QXri
20:03  papna_: dheerajchand: Or delete it.
20:03  nosklo: Spirits-Sight: doctest is to test docs
20:03  dheerajchand: There are also GCC errors.
20:03  nosklo: Spirits-Sight: as in, making sure your docs are correct
20:03  papna_: dheerajchand: In any event, it doesn't sound like you actually needed Cython.
20:03  nosklo: Spirits-Sight: if you want to test code, move to unittest. It fits a lot better
20:04  mnemoc: Spirits-Sight: and use a re instead of a chain of replace
20:04  Spirits-Sight: Any easy to understand information to read for unittest ?  thanks again for the help
20:04  dheerajchand: Do I need to remove pip and reinstall it, then, without sudo?
20:04  papna_: dheerajchand: No.
20:04  papna_: dheerajchand: You just need write perms for the log file.
20:05  dheerajchand: chmod 777 ~/.pip/pip.log
20:06  dheerajchand: Eek
20:06  dheerajchand: I deleted that file.
20:06  papna_: dheerajchand: That should be fine.
20:07  papna_: dheerajchand: You also need write perms on ~/.pip
20:07  dheerajchand: chmod 777 -R ~/.pip
20:07  dheerajchand: ?
20:07  TheCommieDuck: Spirits-Sight: The really simple way to use it? 1) Derive a TestSomething class from unittest.TestCase. 2) declare setUp and TearDown methods if you want something to happen before/after each test method. 3)Declare each test method with testXXXX prefix. 4) Use self.assertEqual, self.assert, and self.assertNotEqual in the test methods. 5)Then do unittest.main().
20:07  Spirits-Sight: mnemoc: I just googled python .replace re and does not look like its finding what ur talking about?  u talking about Regular Expression?
20:08  mnemoc: yes
20:08  papna_: dheerajchand: The -R would come before the 777
20:08  papna_: self.assert isn't a thing, and can't be in Python. self.assertTrue is basically the thing.
20:08  merwok: Regular expressions may be overkill here.  str.replace is simple and good, and premature optimization is the root of all evil.
20:09  Spirits-Sight: mnemoc: thanks
20:09  merwok: papna_: Depends on POSIX_COMPLIANT ;)
20:09 --- VooDooNOFX_ is now known as VooDooNOFX
20:09  mnemoc: merwok: he has 4 replace in chain already... it's.... ugly
20:09  papna_: mnemoc: Pssht.
20:09  mnemoc: :)
20:10  papna_: mnemoc: Besides, he probably actually wants str(c for c in phone_number if c.isnum()) anyhow.
20:10  Spirits-Sight: TheCommieDuck:  wow, OK for now I will use the doctest intill I become more conforable with that other stuff :(  wow learning this stuff make u go in different
20:10  Spirits-Sight: directions
20:10  mnemoc: papna_: very true
20:10  merwok: papna_: str on a generator does not join.
20:11  dheerajchand: papna_: Still getting an error: http://paste.pound-python.org/show/857/
20:11  papna_: merwok: ''.join(...) rather, yeah.
20:11  papna_: merwok: I was thinking for a moment that str took an iterable of characters, which was silly.
20:11  TheCommieDuck: I've never tried doctest. Is that the one where you just put the docstrings as the input for the interpreter or somesuch?
20:11  papna_: merwok: I'm pretty out of it.
20:13  Spirits-Sight: TheCommieDuck: Thats what it appears to me as (just started learning, reading two different books)
20:13  Spirits-Sight: my mind is in all different places (one book uses math and the other one uses some and I not great at math )
20:14  merwok: Uses some?
20:14  Spirits-Sight: so now I am trying to learn the basic math stuff that is used and what its used for
20:14  papna_: dheerajchand: I don't know what the deal is with that folder. Do you have a weird environment variable?
20:14  papna_: dheerajchand: http://dheerajchand.pastebin.com/n8srSQMB
20:14  infobob: http://paste.pound-python.org/show/858/ (repasted for papna_)
20:14  merwok: Spirits-Sight: The official tuto has a section on basic math
20:15  Spirits-Sight: does? but it also assumes u know termernology of programing and computers
20:15  Spirits-Sight: I will have to check that out
20:16  Spirits-Sight: for the math part , u mind provideing the link to that area of tuto?
20:16  merwok: http://docs.python.org/tutorial/introduction.html
20:17  dheerajchand: papna_: I beg your pardon, I don't understand what I'm looking at in the php -i.
20:17  papna_: dheerajchand: The same error, in a paste you generated some other time.
20:18  Spirits-Sight: merwok: thanks thats the one I had :-)
20:19  papna_: dheerajchand: Your TMPDIR is some nonsense.
20:19  papna_: dheerajchand: At the very least, you need to strip the / from the end.
20:19  papna_: dheerajchand: If the rest is right for whatever reason.
20:21  Spirits-Sight: OK my last question intill later hopfully, whats a good way to start a project?  I want to make a user_system login, logout, record history of log i/o, allow user have ddifferent  levels brb
20:21  dheerajchand: papna_: Thanks for the help. Believe it or not, I don't know how to fix that. :(
20:21  Spirits-Sight: back
20:21  dheerajchand: I think that I may have to reinstall OS X.
20:22  papna_: dheerajchand: You won't have to restart OSX to set an environment variable.
20:22  dheerajchand: Oh, there are other reasons.
20:22  papna_: *reinstall
--- Log closed Thu Dec 23 20:26:18 2010
--- Log opened Thu Dec 23 20:31:40 2010
20:31 --- Users 708 nicks [0 ops, 0 halfops, 0 voices, 708 normal]
20:32  malorie: I'm looking for a library to draw simple 2d graphics. unfortunately I can't get pyglet to work. are there any other "recommended" ones?
20:33  MostAwesomeDude: malorie: If you can't figure out Pyglet you may also not be able to figure out Pygame.
20:33  wm4: how do I do signal&slot style callbacks in python?
20:33  MostAwesomeDude: malorie: And at that point you might as well throw in the towel.
20:33 --- Channel #python was synced in 105 seconds
20:33  MostAwesomeDude: malorie: BTW, there's a library called Cocos which provides a whole bunch of extra 2D stuff on top of Pyglet.
20:34  MostAwesomeDude: wm4: Typically, those come from a library of some sort. What are you working on?
20:34  malorie: MostAwesomeDude: I see :\ thanks, anyways
20:34  wm4: MostAwesomeDude: just some GUI stuff
20:35  MostAwesomeDude: malorie: Programming is hard!
20:35  MostAwesomeDude: wm4: And your GUI library doesn't provide it?
20:35  wm4: MostAwesomeDude: that's unnatural due to thick language bindings (PyGTK)
20:36  MostAwesomeDude: wm4: PyGTK totally has signals.
20:36  malorie: MostAwesomeDude: ain't a programming issue, per se
20:36  MostAwesomeDude: wm4: I don't know what "unnatural" means. Do you think that computer you're typing on is organic?
20:36  merwok: malorie: I’ve heard good things about cairo
20:37  malorie: merwok: I'll look it up. thanks
20:37  wm4: MostAwesomeDude: PyGTK would require me to declare metadata by hand, register stuff by hand, and derive classes from the gobject wrapper
20:37  MostAwesomeDude: wm4: What. What are you doing?
20:38  MostAwesomeDude: You want to make *new* signals?
20:38  hansel: I wish I was still creative enough to write games.  Corporate America sucked my creativity and intelligence.  I'm basically a zombie.  :(
20:38  wm4: MostAwesomeDude: I want to use them as notification mechanism in my GUI app, what else do you think I want to do?
20:38  milkpost: dheerajchand: Next time let the experts handle things for you if you need your own compile of Python: https://github.com/mxcl/homebrew/wiki
20:38  milkpost: dheerajchand: why do you need 2.7?
20:39  MostAwesomeDude: wm4: I thought you wanted to handle the signals already present in GTK, or send signals to slots already present in GTK.
20:39  merwok: 2.7 is one  of the current stable versions.
20:39  wm4: MostAwesomeDude: no that's not what I am asking for
20:39  mnemoc: do you know a good command line syntax highlighter?
20:39  dheerajchand: milkpost: Believe me, I'm trying not to be stupid about this. I've been using Linux for years, and I still never mastered bash or the file-system.
20:39  milkpost: merwok:
20:39  MostAwesomeDude: wm4: This task *isn't* easy in any GUI library. Good luck.
20:39  milkpost: merwok: ok
20:39  wm4: MostAwesomeDude: why did you even reply if you have no clue or don't provide any help?
20:39  malorie: MostAwesomeDude, merwok: pygame works, though. kinda odd w/e
20:39  dheerajchand: milkpost: I was trying to get the bleeding edge PostGIS with the bleeding edge PostgreSQL, and I was told that I needed 2.7 to make it work.
20:40  milkpost: dheerajchand: yeah, i'm sure you're not, I imagine you installed from source to some prefix?  I believe it's probably /usr/local by default?
20:40  Juhaz: wm4, probably because he wanted to help and didn't realize you're an obnoxious asshole
20:40  MostAwesomeDude: wm4: I *did* have a clue.
20:40  wm4: Juhaz: I was just trying to be equally obnoxious
20:41  MostAwesomeDude: wm4: You overshot.
20:41  merwok: Heh
20:41  dheerajchand: wm4: I can understand being frustrated, but taking it out on people who are in a help and discussion channel is not the way to go.
20:41  MostAwesomeDude: wm4: Anyway, who are you notifying with your notifications?
20:42  wm4: MostAwesomeDude: one example I had in mind was management of simple "settings", e.g. boolean options that 1. could be displayed/changes via a menu item, 2. can be set via configuration file, 3. anyone can register a listener and react if that setting changes
20:42  lucian: wm4: and yes, creating signals is a bit silly in pygtk. myself, i use a few decorators to make it better
20:42 --- notk0 is now known as everyone
20:43  wm4: MostAwesomeDude: since GTK doesn't provide anything of such, I was thinking of writing it myself (GtkAction doesn't count)
20:43  lucian: wm4: but whatever you do, you will almost always have to declare the types on your signals
20:43 --- everyone is now known as notk0
20:43  lucian: wm4: it's the same in pyqt sadly
20:43  wm4: lucian: I already dealt with creating GTK signals myself, and yes I find that unacceptable (certainly not worth the bloat)
20:44  wm4: s/bloat/bloat and complexity/
20:44  Juhaz: while it admittedly still takes subclassing from GObject and declaring metadata, doing the settings as gobject properties would get you the change notifications for "free"
20:44  MostAwesomeDude: wm4: Make *one* settings_changed signal, and register everybody to it. If somebody listens for one setting being changed, they certainly want to listen for others, and it'll be easier to avoid races, corners, etc. if you have just one signal.
20:44  TheMG: hi, im writing a simple web crawler (http://pastebin.com/wvcEjbYL). however my regex only picks up the first 5 matches, no matter the URL i select
20:44  infobob: http://paste.pound-python.org/show/859/ (repasted for TheMG)
20:44  MostAwesomeDude: Also consider reducing the amount of stateful machinery you have, and reloading information from the config when you need it, instead of in advance.
20:45  MostAwesomeDude: It is completely legal (and fairly Pythonic) to keep your ConfigParser around in memory and share it with all of your modules.
20:45  lucian: wm4: it's 5 lines of code, i wouldn't call that unacceptable
20:45  wm4: MostAwesomeDude: yeah, but there are other things I have in mind... in C maybe I'd just use gobject signals, but in python I'd rather not... and anyway, signals&slots are a rather popular pattern esp. in GUI programming
20:45  lucian: wm4: i find slots worse than anything gobject has, but that's just me
20:46  MostAwesomeDude: wm4: Yes, which is why the only GUI libraries we ever recommend in here (wx, gtk, qt) all have some kind of signals and slots and some way to create custom ones.
20:46  MostAwesomeDude: wm4: Also, as Juhaz mentioned, gobject properties would be the way to go if you're not creating custom widgets for your configuration.
20:46  wm4: anyway, obviously the simplest way is to keep a list of function values
20:46  lucian: wm4: if you really want a pythonic GUI lib, you can use PyGUI, but it's kinda crap from all other points of view
20:46  wm4: but maybe python has some better way
20:47  MostAwesomeDude: TheMG: Have you seen scrapy?
20:47  Juhaz: oh, and have you looked at gsettings?
20:47  lucian: wm4: for getting notified of changes, gobject properties are ok
20:47  lucian: wm4: as I said, with a couple of decorators they're even nice
20:47  wm4: lucian: honestly, I already have enough trouble with PyGTK
20:47  wm4: and I'm not even talking about the random memory corruption bugs
20:48  TheMG: MostAwesomeDude: cool, ill check it out. but i'd also like to improve my use of REs. im not really sure why it just stops processing after the fifth
20:48 * lucian shrugs. i found gtk ok
20:48  MostAwesomeDude: wm4: Programming is hard, let's go shopping!
20:48  lucian: wm4: you might want to try pygobject's gobject-introspection
20:48  Juhaz: MostAwesomeDude, usually, yeah, but this time of year? programming is probably less painful
20:49  lucian: Juhaz: depends where you are. i'm in brasil right now, and it's very, very, very hot
20:49  wm4: MostAwesomeDude: it's not programming, it's just Python, PyGTK and GTK (a deadly combination if you ask me)
20:49  wm4: I'd rather fix some compiler bus or something
20:50  wm4: s/bus/bugs/
20:50  MostAwesomeDude: wm4: Ooh, you know compilers? Stay right there. I've got some Mesa GPU compiler bugs you can look at.
20:50  Juhaz: lucian, well, it's -25 here but the shops aren't any less horrible or crowded than if it would be warm
20:50  lucian: wm4: if you really hate gtk, use something else. but i'm telling you it has one of the nicest APIs of all GUI libs
20:50  lucian: in contest with PyGUI and Tkinter
20:51  MostAwesomeDude: wm4: https://bugs.freedesktop.org/show_bug.cgi?id=30651
20:52  MostAwesomeDude: wm4: https://bugs.freedesktop.org/show_bug.cgi?id=32439
20:52  wm4: MostAwesomeDude: sorry I hack dmd only, and even that I'd rather avoid
20:52  wm4: MostAwesomeDude: so you're the funny guy in here?
20:53  MostAwesomeDude: wm4: Pfft, no. Clearly you haven't met dash.
20:58  mikegg: if I installed this:  http://www.enthought.com/    and it told me at the end that I need to add the install directory to my bashrc file....how do I do that?
20:58  _habnabit: mikegg, #bash
20:58  hansel: mikegg - vi /home/yourlogin/.bashrc
20:59  hansel: but yes, head over to #bash  :)
20:59  merwok: vi :°)
20:59  mikegg: thanks fellas
21:05  rsyring: I want to inspect some attributes of a class instance.  I am currently doing a dir() with getattr() but that fired the properties, which I would like to avoid.  Is there a way to do this without making the attributes that are properties fire?
21:05  merwok: rsyring: There is inspect.getattr_static in 3.2
21:05  rsyring: merwok: 2.5 or later :(
21:05  merwok: rsyring: You can copy the code.
21:06  rsyring: ic
21:06  papna_: rsyring: Ewwww, what for?
21:06  papna_: rsyring: You can retrieve them from __dict__ (MAYBE) or get them from vars() (MAYBE).
21:06  papna_: rsyring: But ew.
21:07  merwok: rsyring: But yes, properties should not trigger expensive or dangerous code.
21:08  ssbr: vars() followed by __slots__ might cover a few, but this is basically impossible because attributes aren't guaranteed to be known statically in Python
21:09  _habnabit: rsyring, what are you trying to accomplish?
21:11  rsyring: I have some class methods I am decorating.  But the decorator can't actually do some of its work until another part of the system is initialized.  So once that initialization takes place, I need to come back to the instances and find the decorated methods
21:12  merwok: Sounds very complicated.
21:12  merwok: What does the decorator do?
21:12  SegFaultAX: Sounds like you might be doing something wrong.
21:13  rsyring: the decorator connects the decorated method to a Blinker signal
21:13  SegFaultAX: And the method is being run before the blinker is initialized?
21:14  rsyring: Yes because we keep track of the signals a little differently, because there can be multiple signal namespaces in a single python process.  Blinker standard operates off the principle that there is only one global namespace.
21:15  SegFaultAX: rsyring: What is this for exactly?
21:15  dh: rsyring: Check out venusian module (can't remember the url though, I think searching for repoze + venusian should get there), it may be of some help
21:16  rsyring: SegFaultAX: BlazeWeb, which is a web framework I have built
21:16  _habnabit: Oh lordy.
21:16  _habnabit: Like we need another one.
21:17  Eiler: if i wanted to copy the files required to compile or run python, what would those be?
21:17  rsyring: _habnabit: yes, i understand the sentiment
21:17  SegFaultAX: rsyring: Is it a time thing? Like you need to rerun the method after n seconds or something?
21:18  _habnabit: Eiler, what are you trying to do?
21:18  merwok: Web frameworks are the new Hello, world.
21:18  merwok: Eiler: the files required to compile Python are the files contained in the source directory or archive.
21:19  merwok: Eiler: the files required to run Python are the interpreter and its modules.
21:19  Eiler: so there are no library runtimes and so on?
21:19  SegFaultAX: rsyring: Because it sounds like you want twisted (it makes deferred methods and timed execution a cake walk)
21:19  rsyring: SegFaultAX: no, thats not really what I am trying to do
21:20  ssbr: Eiler: what do you mean library runtimes? And what OS?
21:20  Eiler: linux for example
21:20  SegFaultAX: rsyring: Then I'm not sure what you're trying to do.
21:20  Eiler: like .so or .a files
21:20  _habnabit: Eiler, please, tell us what you're trying to accomplish here.
21:20  ssbr: Eiler: then there are. There are several .so files you'd need to copy
21:20  merwok: Eiler: Some modules are .so files.  Python itself may use a shared library.  What’s your question?
21:20  rsyring: SegFaultAX: in short, just get access to attributes of a class instance with using getattr() b/c I want to avoid accidently calling properties
21:21  rsyring: sorry, without using getattr()
21:21  Eiler: _habnabit im creating a chroot jail where i want to compile python code in, therefor i need to copy the required files to compile and run code
21:21  kerio: you don't... compile code
21:21  Eiler: well run it then, you get the point
21:21  ssbr: Hm, it should be possible to compile code securely without a chroot jail
21:21  kerio: i mean, yeah, technically the code is compiled right before it's run by the interpreter
21:21  _habnabit: Eiler, just unpack the tarball.
21:21  merwok: Eiler: I suggest just unpacking the tarball in the code and running make install.
21:21  SegFaultAX: Eiler: Are you familiar with virtualenv?
21:21  _habnabit: Eiler, the source tarball, I mean.
21:22  kerio: Eiler: just install python in the jail
21:22  Eiler: i want to keep it to a minimal
21:22  _habnabit: rsyring, yes. Why?
21:22  ssbr: Eiler: then use a minimal installation package
21:22  ssbr: Or remove things you don't want, like Tkinter and whatever.
21:22  kerio: python-minimal does that, in debian
21:23  kerio: debian and debian-like distros
21:23  ssbr: right, the debian stuff separates out parts of Python. The Windows installer does too, but that isn't applicable :P
21:23  rsyring: _habnabit: well, I thought I answered that already
21:23  rsyring: It has to do with the way I need to connect signals in this application
21:23  TorfusPmorphus: Is there a reason why one can't do a try/except/elif instead of a try/except/else? Similarly, why is there no for/elif construct?
--- Log closed Thu Dec 23 21:27:36 2010
