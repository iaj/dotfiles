--- Log opened Thu Dec 09 00:00:18 2010
00:00  subichan: thanks bob2
00:00  bob2: welcome
00:00  subichan: so basically u''+ is useless , i just put it to transform it to unicode
00:01  fruitwerks: umm ImportError: No module named pkg_resources :(
00:01  bob2: u''+ is just wrong
00:01  KirkMcDonald: Lord which language does that come from. Is that a PHP-ism?
00:01  bob2: fruitwerks: it doesn't come with python
00:02  bob2: subichan: sorry, should have read more carefully - just: raw = argv[1].decode('utf8')
00:02  subichan: 'UTF-8' must be a variant of utf8 because it is actually working
00:02  KirkMcDonald: Nope.
00:02  KirkMcDonald: Two names for the same codecs.
00:02  KirkMcDonald: codec*
00:03  subichan: ok
00:03  bob2: and utf-8
00:03  Motorin: tyebud: wait a minute, are you writing fizzbuzz?
00:03  bob2: don't know why there are so many aliases
00:03  apsinvo: Is there a substring function in python? i.e. `if substr("variable", 3) == "var":'
00:03  bob2: Motorin: oops
00:03  bob2: shoulda realised :(
00:03  KirkMcDonald: Also: utf_8, U8
00:03  tyebud: Motorin: ??  I'm doing a Project Euler problem
00:03  bob2: apsinvo: if somestring[3:] == "var"
00:03  Motorin: oh cool, which one?
00:04  apsinvo: Thanks bob2
00:04  bob2: I think, I don't know what substr does
00:04  KirkMcDonald: And apparently "UTF" is an alias for UTF-8.
00:04  bob2: KirkMcDonald: that is totally never going to confuse anyway
00:04  bob2: apsinvo: the answer is probably slicing, anyway
00:04  apsinvo: bob2: In my example, to return the first 3 characters of "variable"
00:04  apsinvo: i.e. "var"
00:04  bob2: apsinvo: unless you just want to know if one string occurs in another
00:04  bob2: apsinvo: then you use 'if somestring in someotherstring:'
00:04  apsinvo: Great, thank you
00:04  apsinvo: What did you example do?
00:06  subichan: bob2: I still get this though: /usr/lib/pymodules/python2.6/nltk/tag/brill.py:261: UnicodeWarning: Unicode equal comparison failed to convert both arguments to Unicode - interpreting them as being unequal;  if self.extract_property(tokens[i]) == val: and then output when a  unicode character is being fed as an argument. brill.py isn't my doing though. should I ignore it?
00:06  tyebud: bob2: That worked.  Why wouldn't you use xrange both times in that line?
00:06  bob2: tyebud: cause i typoed
00:06  tyebud: bob2:  haha got it :)
00:07  tyebud: Motorin: What is fizzbuzz?
00:07  lazydancer: filename = lsdir [start]-[end]
00:07  Motorin: tyebud: it's a well-known programming interview question - http://www.codinghorror.com/blog/2007/02/why-cant-programmers-program.html
00:07  lazydancer: is this alowed so long as start and end are defined?
00:07  bob2: subichan: pastebin the whole thing
00:08  bob2: lazydancer: that's a bizarre line of code
00:08  bob2: lazydancer: what are you trying to do?
00:08  lazydancer: im ditching the ' that lsdir gives me
00:08  lazydancer: so i find the start of the actual filename, and the end of it, and im wondering if i can consolidate like that
00:08  tyebud: Motorin: Oh!  Well maybe I'm using a good site then.  projecteuler.net.  Check it out sometime.
00:08  dash: tyebud: yeah, that's not a good thing
00:09  dash: tyebud: if you want to learn programming
00:09  Motorin: tyebud: I'm familiar with it.  Looks like you're doing #1.  Good luck!
00:09  dash: maybe if you want to be a math geek.
00:09  bob2: lazydancer: I think we're in a deep hole
00:09  bob2: lazydancer: are you trying to get a list of filenames in a directory?
00:09  Motorin: tyebud: There's a very elegant single-line solution in python.
00:09  tyebud: Motorin: haha..  yeah I just learned about it
00:09  bob2: euler is a good way to learn mathz
00:09  subichan: bob2, here is my code http://paste.pound-python.org/show/354/ and here is the run http://paste.pound-python.org/show/355/
00:09  Eevee: from interviews import fizzbuzz; fizzbuzz()
00:09  lazydancer: bob2 i have a list of filenames in a directory
00:09  tyebud: What's up dash?
00:09  dash: tyebud: hi.
00:10  bob2: lazydancer: ok, the thing I'm getting at is that I think you've got some bizarre half solution to some problem you haven't told us about
00:10  tyebud: dash: You were saying something about that not being a good thing?
00:10  subichan: this is the implementation of a part of speech tagger for linguistics, but besides that error I'm afraid it actually doesn't tag correctly the words with utf8 in them
00:10  bob2: lazydancer: so I'm hinting that if you tell us what you're trying to do, and pastebin the code you have, you can probably simplifying things a lot :)
00:10  dash: tyebud: correct.
00:10  lazydancer: ok, one sec, let me think about this, i think I may see my mistake
00:10  dash: tyebud: project euler is a waste of time if you want to be a programmer.
00:10  Motorin: tyebud: it's not necessarily the best thing to learn practical programming -- it will help you learn abstract algorithms and solve cool problems, but not organize your mp3s or make a website or anything like that
00:11  bob2: lazydancer: it sounds like you got a list of files, then munged it in to a string somehow and now want to unmunge it
00:11  dash: Motorin: it won't even help you solve cool problems.
00:11  bob2: subichan: I don't know what you put in your pickle
00:11  Motorin: tyebud: also, many of the problems can be solved all or in part using existing (often sophisticated) algorithms
00:11  lazydancer: no, ok
00:11  subichan: bob2: I don't know either, as this stuff I'm taking from outside
00:11  bob2: subichan: but I'd be guessing that you put bytestings in it and nltk is unhappy that you are mixing unicode strings and byte strings
00:11  lazydancer: i have a list of filenames but they are all in the format 'filename' with the single quotes actually being part of the string
00:11  dash: Motorin: well, the important part is that the methodology encouraged by project euler is exactly backwards
00:11  tyebud: Isn't it good problem solving practice, though?
00:11  Motorin: dash: I think we probably disagree on what makes a problem cool then...some of the later puzzles are very interesting
00:11  dash: tyebud: hell no
00:12  fruitwerks: any ideas on this? virtualenv: error: no such option: --distribute
00:12  dash: tyebud: why would it be?
00:12  dash: tyebud: project euler is about math, not programming
00:12  dash: Motorin: I hate math, and mathematicians.
00:12  bob2: fruitwerks: perhaps your virtualenv is too old
00:12  tyebud: haha
00:12  lazydancer: problem is i need to ditch the single quotes to actually reference the file
00:12  tyebud: dash: I'm so sorry.  I'll never look at it again.
00:12  bob2: dash: has joel spolsky ever called you a duct tape programmer?
00:12  cafesofie: dash: in what way is the methodology backwards?
00:12  bob2: lazydancer: how did you get this list?
00:12  lazydancer: listdir()
00:13  py_newbie: I am having problems installing ssl for python 2.5.4 on windows.  found a post http://malei39.blogspot.com/2010/02/install-ssl-module-for-pyhon-254.html but it refers to http://beautifulisbetterthanugly.com/posts/2009/aug/19/compile-ssl-115-python-25-or-lower/ which is down
00:13  bob2: lazydancer: listdir() doesn't do the thing you think it does
00:13  py_newbie: any other good post on installing ssl
00:13  tyebud: What would be good problem solving practice for python learning, then?
00:13  bob2: lazydancer: I suspect you're getting tripped up by printing the list it returned
00:13  dash: cafesofie: well, what's the first problem-solving step you should take, when faced with a hard problem?
00:13  bob2: haha
00:13  Motorin: tyebud: I'd pick up one of the better python books - anything but "dive into python"
00:13  bob2: lazydancer: when a list gets printed, it prints the repr() of each element inside it
00:13  Eevee: tyebud: find an actual problem and solve it, I suppose
00:14  Motorin: tyebud: There are many that are "python for non-programmers" out there
00:14  cafesofie: dash: see if it has been solved before?
00:14  bob2: lazydancer: the repr() of strings includes quotes
00:14  dash: cafesofie: exactly!
00:14  lazydancer: oh really? those single quotes are just a function of the print option?
00:14  bob2: lazydancer: yes
00:14  dash: cafesofie: do you see the problem? ;)
00:14  lazydancer: or an option of the print function =p
00:14  lazydancer: ok, thanks, makes this loads easier
00:14  bob2: lazydancer: so your list is fine
00:14  dash: cafesofie: nobody who comes here asking for assistance with project euler problems wants to look at actual solutions
00:15  bob2: lazydancer: this is why I always bug people to explain or paste their code - if I'd just answered your quesiton about removing quotes, you'd have a really bizarre and potentially buggy program :)
00:15  subichan: bob2, in that case I'd have to try load(input.decode('utf8')) ? does this make sense?
00:15  bob2: subichan: that doesn't help
00:16  bob2: subichan: I have no idea what you pickled
00:16  bob2: which I think is the important thing
00:16  Motorin: dash: are you saying that people learning shouldnt solve problems that have been solved before?  Because it seems impossible to learn if every student has to literally break new ground
00:17  dash: Motorin: Why would you want to solve a problem that's been solved before?
00:17  Motorin: dash: I agree that project euler isn't a very good aid for general programming, but "these problems have been solved before" isn't one of the valid criticisms
00:17  habnabit: dash: Case in point: mysqldb.
00:18  dash: habnabit: except, no. mysqldb clearly did not solve the same problems :)
00:18  subichan: bob2, assuming it's bytestrings as you said, just a guess, how would I go about fixing that?
00:18  bob2: subichan: no, sorry
00:18  Motorin: dash: to learn.  Lets say you're teaching low-level algorithms.  How do you learn to sort?  Do you ask the student to write a sorting algorithm that has been never seen before?  Or do you reject the idea that someone should ever learn that concept now that it is generally solved?
00:18  bob2: I don't know how to find all the bytestrings in a pickle and decode them
00:18  dash: Motorin: I think teaching low-level algorithms is something you shouldn't start with
00:19  bob2: I wonder how useful teaching the simple sorting algorithms is, anyway
00:19  dash: Motorin: and i think if you're teaching sort algorithms, you should study existing solutions, not ask students to come up with their own
00:19  bob2: since the ones in the real world are hugely complicated
00:19  subichan: bob2, ok so to the person who gave me the .pkl file I should tell he should have put unicode strings in it?
00:19  dash: Motorin: ... which is what project euler does
00:19  Motorin: dash: I think we're just going to disagree here.  I think top-down is fine for an introduction, but learning to programming entirely top-down (starting with complete reliance on high-level tools) will never produce a deep understanding, but rather will lead to cargo-cultism if left unchecked
00:20  dash: Motorin: Fundamentally, I think the issue is that learning to program involves reading more code than writing code
00:20  dash: Motorin: and more editing code than writing new code.
00:20  Motorin: dash: I couldn't disagree more...reading code imparts very little information or problem solving skill to the reader
00:21  dash: Motorin: Right, but you're talking about "problem solving skill"
00:21  Motorin: dash: editing, fine, but even then, it's too easy to edit without understanding half of what you're looking at
00:21  dash: i'm talking about learning how to write good programs.
00:21  dash: Motorin: Writing code is an essential part of the process, it's true
00:21  Motorin: dash: problem solving skill is 90% of it.  once you understand the models that the language represent, picking the right ones is all that's left, and it's a lot -- that's problem solving
00:21  dash: Motorin: Heh.
00:21  habnabit: Motorin: In a real programming job, you very rarely get to start from scratch.
00:22  habnabit: Motorin: You have to read and edit others' code almost exclusively.
00:22  Motorin: habnabit: Nobody is talking about a real programming job -- I'm talking about gaining an intuitive understanding of what you're doing.
00:22  habnabit: Motorin: dash is, AFAIK.
00:22  Wild_Cat: And you will curse them. You will wish their slow, painful death.
00:22  Motorin: I wouldn't want a developer that exclusively knows how to adjust an existing code base
00:22  dash: Motorin: I think in a well-designed program, you _should_ be able to edit, with confidence, without understanding half of what you're looking at
00:23  dash: Motorin: "exclusively"?
00:23  dash: Motorin: it's the hard part
00:23  Wild_Cat: Sartre was almost right: hell is other people's code.
00:23  Motorin: (I'm actually trying to hire some devs right now, so I've thought about this a lot)
00:23  tyebud: Motorin: I'm available for work.  As long as all you need is RSS parsing.
00:23  dash: Motorin: writing new code is way easier than editing existing stuff (and getting it right)
00:23  tyebud: Motorin: and lists of multiples
00:23  Motorin: dash: I agree with that for maintaining applications, but for learning when you know nothing about programming, you've got to be able to dig down to the bedrock
00:23  dash: Motorin: Why?
00:24  KirkMcDonald: Motorin: You say that like these are two different things.
00:24  Motorin: tyebud: That's more than some of the applicants I've had... :(
00:24  tyebud: Motorin: Oh man. haha. I'm sorry.
00:24  bob2: subichan: I suspect that's the problem but I don't know for sure
00:24  habnabit: Motorin: Python development?
00:24  dash: Motorin: if you're going to learn how to build a watch, it's not unreasonable to start by taking one apart. :)
00:25  Motorin: dash: agree.  But eventually you also have to actually build a watch.
00:25  habnabit: Motorin: Then we get into "do you care if it works?"
00:25  dash: Motorin: Of course. That's why I said writing code is also essential
00:26  sqwishy: I guess I have some pretty weird things going on and an object is deleting itself correctly. How do I find out what is still referencing it. :S
00:26  Motorin: dash: I think this conversation has gotten all turned around
00:26  dash: Motorin: but reading and editing existing code is even more important.
00:26  Motorin: I think we agree
00:26  Motorin: Let me put it this way: if you want to say you know python, you need to know what a generator IS, not just that you once saw [x for x in y] somewhere
00:27 --- balaa_ is now known as balaa
00:27  Motorin: *i mean comprehension
00:27  dash: ooh, time for the essentialist vs behaviorist argument
00:27  MostAwesomeDude: Internet Legal Society?
00:28  dash: internet metaphysics society
00:28  MostAwesomeDude: Oh, well.
00:28  Motorin: Let me give a concrete example.  I asked a candidate "using any language you want, use a hash/dictionary/associative array to remove duplicates from a list"
00:28  Motorin: After a lot of stalling and worming, he very proudly told me what a dictionary was, and that, in fact, stored key-value pairs, overwriting the last one.  As if that alone was the answer.
00:29  sqwishy: Can anyone help me find my references to an object at runtime?
00:29  dash: sqwishy: look between the couch cushions
00:29  Motorin: That's a guy is not ready to use that structure for anything.
00:29  habnabit: sqwishy: What are you trying to solve?
00:29  dash: Motorin: sure.
00:29  dash: Motorin: sounds like an english comprehension issue
00:29  bob2: sqwishy: is this a 'where my memory gone' kinda question?
00:30  Motorin: Speaking of, it looks like my english composition is rapidly deteriorating, indicating that it's time to go home.
00:30  sqwishy: habnabit: An object is not being deaded when I want it to. I don't know what is referencing it. :(
00:30  dash: sqwishy: why do you care when the object is deallocated?
00:30  habnabit: sqwishy: Why do you care? How do you know it isn't collected?
00:30  Motorin: It's been fun...I haven't been on IRC for years.  Bye.
00:30  bob2: sqwishy: do you have a __del__?
00:31  sqwishy: dash: If I tell you it's because it's a singleton will you kick me?
00:31  dropdrive: what's the fastest way to break an iterable into chunks of, say, 10000?
00:31  dash: dropdrive: islice i bet
00:31  bob2: grouper recipe in itertools
00:31  bob2: wait
00:31  sqwishy: bob2 I do, it prints stuff, it only prints stuff when the app crashes because the object hasn't been deleted when it was suppposed to be.
00:31  dash: or that.
00:31  dash: sqwishy: 'singleton' just means 'global object'
00:32  dash: sqwishy: which is a thing to avoid, but that doesn't make things make any more sense
00:32  dash: sqwishy: if you have a global value, why do you expect it to ever be deallocated?
00:33  sqwishy: dash: Well I don't explicitly put it in the global scope...
00:33  dash: sqwishy: why not?
00:33  sqwishy: dash: Because it doesn't belong there?
00:33  dash: sqwishy: then what do you mean by "singleton"?
00:35  sqwishy: Wait, I figured it out.
00:35  dash: Hmm?
00:36  sqwishy: dash: I meant there was only one instance of the class at a time.
00:36  dash: sqwishy: Why?
00:36  sqwishy: I did that by having a MyClass.instance thingy. I forgot to dereferance the thingy before the dtor, I had it in the dtor :S
00:37  sqwishy: dash: Because there can be only one? It's a module for an app and it would be dumb for this module to happen twice.
00:37  bob2: zomg
00:37  dash: sqwishy: why can there only be one?
00:37  bob2: why do people do extra work to make things awfuler :(
00:37  dash: sqwishy: what happens if there's two?
00:37  sqwishy: dash: It complains.
00:37  sqwishy: There can be only one because I made it that way.
00:38  superdmp: "when doing concurrent programming it is usually best to avoid using shared state as far as possible" (from http://docs.python.org/library/multiprocessing.html)
00:38  dash: sqwishy: yes i know. But why? What would be bad about two existing?
00:38  superdmp: what is shared state?
00:38  dash: superdmp: stuff in separate tasks touching the same objects
00:39  sqwishy: dash: It's inappropriate in this context.
00:39  superdmp: dash:  tasks that might have been called by entirely different parts of the prgram?
00:39  sqwishy: dash: Because of the nature of what the modules are, having two would be wrong.
00:40  dash: sqwishy: yes, but _would something bad happen_?
00:41  dash: sqwishy: it sounds like you should not do anything at all to try to make this a 'single'
00:41  dash: ton
00:41  dash: sqwishy: just write a class, then create an instance in the same module.
00:41  dash: http://glyf.livejournal.com/70684.html is a thing to read
00:42  dash: sqwishy: you always need to make more than one instance, anyway
00:42  dash: in your unit tests
00:44  sqwishy: dash: I ... wait what?
00:44  dash: hmm?
00:44  Captain_Crow: hi
00:46  dash: sqwishy: Anyway, all that aside
00:46  dash: sqwishy: why do you care when it's deallocated?
00:46  sqwishy: dash: Because I tried to get rid of it so I could make a new one.
00:46  bob2: hah
00:47  bob2: hoisted with your own petard
00:47  Captain_Crow: can python be used to change the graphics settings of a application?
00:47  KirkMcDonald: Captain_Crow: Maybe! That is a very vague question.
00:47  dash: sqwishy: Why?
00:47  ezzieyguywuf: papna: I'm subclassing one of my own classes.
00:48  dash: Captain_Crow: what's an application
00:48  sqwishy: dash: Are you trolling me or is this going somewhere?
00:48  Captain_Crow: like if i try to make a game that runs on open gl
00:48  dash: sqwishy: no
00:48  queequeg1: What is the best way to use python on the web?
00:48  sqwishy: It's not going anywhere?
00:48  KirkMcDonald: queequeg1: In the back end.
00:48  dash: sqwishy: i'm trying to figure out what you're doing and why :)
00:48  queequeg1: heh.
00:48  dash: sqwishy: what does this object do, anyway?
00:48  queequeg1: I mean is there some  module that makes cgi stuff easy?
00:49  bob2: queequeg1: cgi isn't really a thing you do these days
00:49  bob2: queequeg1: generally you use a python web framework that speaks wsgi
00:49  queequeg1: You can see how out of it I am.
00:49  bob2: queequeg1: then run that under a web server that speaks wsgi
00:49  dash: queequeg1: pyramid, werkzeug, and flask get recommended a good bit here
00:49  dash: queequeg1: i usually use twisted.web but i don't write web apps
00:49  queequeg1: I used to use php, but I don't feel like going back to it.
00:49  teratorn: queequeg1: twisted.web with Nevow is fun
00:50  sqwishy: dash: It's a module, that runs at irregular times, there should only be zero or one instances of it.
00:50  dash: sqwishy: why add complication?
00:50  dash: sqwishy: why not always have one instance?
00:50  queequeg1: Is one of the suggested things above more user friendly than the others?  Beginner friendly?
00:51  queequeg1: I'm going to write a one off simple data driven page.
00:51  dash: sqwishy: also I think you mean 'class', since modules are instantiable (unless you're using exocet)
00:51  bob2: queequeg1: those three are pretty low level, pylons might be better to start off with
00:51  dash: sqwishy: er, are not.
00:51  sqwishy: dash: The instance requires it has a "lock" on certain resources.
00:51  dash: sqwishy: ok?
00:51  queequeg1: Thanks.
00:51  sqwishy: It's a class in a module.
00:51  sqwishy: I meant module in a more abstracty sense than a python module.
00:51  dash: sqwishy: there isn't one
00:52  sqwishy: dash: The word doesn't exist out of python?
00:52  dash: sqwishy: we're not out of python :)
00:53  Captain_Crow: does python have the ability to change hardware settings, like anti-aliasing in the video card settings?
00:53  sqwishy: That isn't the point :S
00:54  dash: Captain_Crow: anything is possible.
00:54  KirkMcDonald: Captain_Crow: Can you do it in C?
00:54  dash: sqwishy: you're talking about a python program
00:55  dash: sqwishy: so when you use words that have a meaning in the context of python, i expect those meanings :)
00:55  dash: sqwishy: Anyway, my previous question stands.
00:56  Captain_Crow: I don't really know much C, i'm kinda new to programming, i'm trying to narrow down what languages & programs that I need to learn to use to achieve a long term goal
00:56  dash: Captain_Crow: tell us what it is :)
00:56  Captain_Crow: my goal?
00:57  dash: yes
00:59  Captain_Crow: i want to eventually be able to make a multiplayer/networked game with decent graphics, I'm not really sure how, I've been told that using blender & python were my best option
00:59  Captain_Crow: so i'm trying to find out info on them
01:00  Jerub: Captain_Crow: wow. multiplayer? 3d space? you're in for a world of hurt :(
01:00  Captain_Crow: it's my long term goal
01:00  Captain_Crow: i wanna get on the right track though
01:00  eplawless: python's a great language for learning how to program, or for quick and dirty scripts. try making a 2D single player game in python first, then go from there
01:01  dash: Captain_Crow: here's a place to start: http://mv3d.org/
01:01  dash: Jerub: exarkun is working on a thing that involves pyopengl and twisted.
01:01  Jerub: dash: yes, but exarkun is in a world of hurt already, this is probably a less-painful hobby for him
01:02  dash: Jerub: probably.
01:02  eplawless: dash, I don't know if that's a starting point for someone new to programming
01:02  dash: eplawless: why not?
01:02  eplawless: I'd point Captain_Crow to http://www.gamedev.net/reference/start_here/
01:02  eplawless: then to an intro language book first
01:03  fruitwerks: having some wsgi troubles.. "python_handler: Can't get/create interpreter."
01:03  samos123: take a look at panda3d
01:04  dash: samos123: i've heard horror stories
01:04  dash: (about it :)
01:04  dash: oh, or am i thinking of soya3d
01:04  lvh: dash: soya
01:04  lvh: panda is okay
01:04  samos123: oh really :(
01:04  dash: okay right.
01:04  lvh: soy is something that is occasionally something it is not
01:04  dash: samos123: never mind, faulty cache
01:04  samos123: i didn't really get into it just made some really really basic stuff
01:04  lvh: samos123: Well yes panda is okay
01:05  samos123: looked quite nice that some games mady by disney were made with panda3d :O
01:06  lazydancer: filelist = os.listdir(C:\Users\Brad\final)
01:06  lazydancer: line gives error message why?
01:06  dash: lazydancer: I don't know. Why?
01:07  lazydancer: says invalid syntax, points at the colon
01:07  dash: lazydancer: well, you don't have any quotes around the path
01:07  dash: lazydancer: also you need forward slashes instead.
01:07  dash: "c:/Users/Brad/final"
01:07  Captain_Crow: i was looking at a 3d modelling program called blender because it has a physics engine(bullet) and a game engine(gameblender) built in that is supposed to allow python scripting, so i was trying to find out if python could be used to adjust graphics settings for any games i make in blender
01:07  KirkMcDonald: Or escape the backslashes, as with a raw string literal.
01:08  dash: Captain_Crow: that's a blender question, probably
01:08  Captain_Crow: i'll check again, last time i asked no one seemed to know
01:09  dash: Captain_Crow: if they don't know, we sure don't :)
01:09  bob2: Captain_Crow: #blender oughta know
01:10  bob2: fruitwerks: do you have to use mod_python?
01:10  Captain_Crow: they said by default blender didn't touch settings, so i came here to try to find out if i could make a app in python to change graphics settings
01:10  lazydancer:  No such file or directory: "C:/Users/Brad/final/'american-abb
01:10  lazydancer: bob2 remember how we were talking about the quotes before
01:10  bob2: lazydancer: pastebin your code
01:10  lazydancer: seems they continue to plague me
01:10  bob2: this is getting a bit ridiculous
01:11  lazydancer: import os
01:11  lazydancer: import sys
01:11  lazydancer: filelist = os.listdir("C:/Users/Brad/final")
01:11  lazydancer: words = open("C:/Users/Brad/final/%r" % filelist[0])
01:11  lazydancer: print words.read()
01:11  bob2: :(
01:11  _habnabit: lazydancer, don't paste to the channel.
01:11  lazydancer: it's five lines :/
01:11  dash: yes it is.
01:11  _habnabit: 00:11:39 < _habnabit> lazydancer, don't paste to the channel.
01:12  bob2: lazydancer: open(os.path.join("C:/wjatever", filelist[0]))
01:12  _habnabit: lazydancer, anyway, why are you using %r ?
01:12  _habnabit: lazydancer, or % at all?
01:12 --- Out`Of`Control is now known as Viper
01:12  KirkMcDonald: lazydancer: The limit used to be 3, but it was removed because we decided we'd rather it was zero.
01:12  bob2: lazydancer: the problem is you a) use %r which means call repr() on the string, which is the same problem you had when printing the list before
01:12  bob2: and b) use % at all instead of os.path.join
01:12  KirkMcDonald: (Or, perhaps, one.)
01:25  doneir: greetings, having a few issues with multiprocessing.map_async it seems the returned data is given by __repr__ instead of returning the actual object. This is causing some issues due to the object's overridden __repr__ method, is it possible to return the object instead of a representation of the object?
01:25  bob2: doneir: http://paste.pocoo.org/ the code?
01:26  doneir: it's quite complex and long, it'd be better to represent the same scenario in smaller code example
01:27  doneir: basically it'd be the same if any object's __repr__ function was overriden with say a string return
01:27  bob2: I don't think so
01:28  bob2: I'm pretty sure multiprocessing doesn't do that
01:28  doneir: it's multiprocessing.dummy (threading)
01:29  bob2: I'm fairly certain something in your code is the problem
01:29  bob2: since multiprociessing afaik uses pickle
01:29  _habnabit: It does.
01:30  doneir: multiprocessing uses pickle, multiprocessing.dummy (threading module wrapper) does not
01:30  lazydancer: if i have def func(x, y) then return (x, y) then the function will modify x and y outside of just it's own iteration right?
01:30  doneir: i'm parsing cStringIO which is not picklable
01:30  bob2: lazydancer: depends what you mean
01:30  bob2: lazydancer: if you pastebin the real code I can tell you for sure
01:30  dash: lazydancer: 'return' modifies nothing.
01:31  lazydancer: I'm asking before writing =p, let me whip up an example
01:31  lazydancer: actaully I can solve this through a quick experiment, disregard
01:32  dash: SCIENCE!
01:33  dropdrive: Is it science if it's deterministic?
01:33  lazydancer: yes
01:33  lazydancer: gravity would have existed whether or not it was discovered
01:33  lazydancer: all things aren't undetermined until discovered, they're just unknown
01:34  lazydancer: ok it's as i feared
01:34  bob2: what did you fear?
01:34  lazydancer: http://pastebin.com/tWGVu4m4
01:34  infobob: http://paste.pound-python.org/show/356/ (repasted for lazydancer)
01:35  lazydancer: I feared that that script would output a 0 :-0
01:35  bob2: do you understand why?
01:35  lazydancer: yes, to do what I want to do i need to do x = function(x) right?
01:36  bob2: yes
01:36  bob2: in add1, x is a local variable
01:36  bob2: so line 2 says 'hey make the local name x point at this new integer object that is equal to the old value of x + 1'
01:36  lazydancer: but that function would evaluate to the value of the local x?
01:37  bob2: it returns an int object
01:37  bob2: 'x = add1(x)' says "hi add1, I am giving you this integer object.  hey python, please name the thing it returns 'x'"
01:38  bob2: actually, that explanation is terrible
01:40  justinpeel: I have a question with regards to reference counting. Let's say that I have a dictionary for a which a certain key,'a', is set to 4. I use PyDict_GetItem to get a borrowed reference to 4. Then I want to increase the value by 1 and set the value for 'a' equal to 5. I form 5 using PyNumber_Add and set it as the new value for 'a'. Do I need to DECREF the 5 object that I've created? I think that I do but I wanted to make sure.
01:41  dash: justinpeel: AFAIR, no, because you didn't INCREF it.
01:41  dash: but i used cython last time i wrote an extension module
01:41  dash: so i forget.
01:42  justinpeel: ok, I've just been trying to get my head around the reference counting stuff
01:42  _habnabit: justinpeel, okay, here is /the/ most important part.
01:42  _habnabit: justinpeel, READ THE DOCUMENTATION
01:42  justinpeel: that's what I've been doing for the last while
01:43  _habnabit: justinpeel, it documents which functions do what.
01:43  justinpeel: I see what you're saying
01:43  _habnabit: justinpeel, if no other behavior is specified, the default is: takes borrowed references, returns a new references
01:43  justinpeel: then the answer is yes.
01:44  justinpeel: thanks
01:46  lazydancer: ill a = [13] make an empty list with 0-13 slots?
01:46  _habnabit: lazydancer, docs.python.org/tut
01:47  papna: lazydancer: (Not remotely.)
01:47  dash: lazydancer: wht are you reading to learn python?
01:52  maxb: Is there any neat way to go from a datetime object to a Unix timestamp, in way which does *not* depend on the platform default timezone?
01:56  message144: maxb, you want to specify a different tz to use?
01:57 --- elpargo_ is now known as elpargo
01:58  maxb: message144: I have a naive datetime object that I happen to know is in UTC. I want to get a unix timestamp, without having to do os.environ['TZ']='UTC'; time.mktime(dt.timetuple())
01:58  maxb: Because having to manipulate os.environ for this is icky
01:58  message144: maxb, look into dateutil module
01:58  message144: it will provide a tz object
01:58 * maxb looks
01:58  message144: so you dont have to modify os.environ
01:59  maxb: But I still need to use time.mktime?
02:01  message144: maxb, yes
02:02  maxb: hmm
02:02  maxb: I worry about what will happen for times which lie within a DST transition hour
02:02  dietnews: i have a list that looks like: [('2004','50'),('2004','3'),('2005','2'),('2006','4')] etc. what would be the easiest way to sum all the values based upon what year they are attached to?
02:03  maxb: I'd really rather find a way that keeps things in UTC throughout, rather than mapping into local time so that I can then using time.mktime whilst it operates in localtime
02:03  message144: maxb, you need to convert your naive datetime object into utc
02:03  message144: before you call dt.timetuple()
02:04  message144: maxb....
02:04  lvh: dietnews: sum()
02:04  lvh: dietnews: sum(int(v) for (y, v) in L)
02:04  dietnews: ooh okay
02:05  lvh: dietnews: With a filter, obviously if you want a particular year
02:05  dietnews: i wasnt sure if that was gonna work based on my formating
02:05  message144: time.mktime(datetime.datetime(dt.year, dt.month, dt.day, dt.hour, dt.second, dt.microsecond, dateutil.tz.tzutc()))
02:05  dietnews: i just want a list which shows the totals for all the years
02:05  lvh: dietnews: If you want to do it for all years: for y, v in L: d[y] += int(v)
02:05  message144: maxb, see above ^
02:05  lvh: dietnews: d = defaultdict(int)
02:05  lvh: dietnews: (see the collections module)
02:06  dietnews: thanks, i'll look into all this
02:09  message144: maxb, err i meant: time.mktime(datetime.datetime(dt.year, dt.month, dt.day, dt.hour, dt.second, dt.microsecond, dateutil.tz.tzutc()).timetuple())
02:10  maxb: So, that's making an aware-UTC datetime from the naive one, converting it into a local timetuple, then converting that into a timestamp
02:10  message144: yes
02:11  JJMalina: could someone please help me and explain why in this code, the loop wont iterate for all factors < 10 http://pastebin.com/vxXcaiRv
02:11  infobob: http://paste.pound-python.org/show/357/ (repasted for JJMalina)
02:11  maxb: It feels wrong to convert it to and from an arbitrary local timezone, but I can believe that that works
02:11  dash: maxb: .replacece(tzinfo=tzutc()
02:11  dash: bah
02:12  dash: maxb: .replace(tzinfo=tzutc())
02:12  message144: hah... yeah iguess that would work too :)
02:12  message144: dash, i didnt know a naive object could be replaced() into a tz-aware object
02:12  bob2: JJMalina: what's it meant to do?
02:13  JJMalina: its the sieve of eratosthenes, finds all primes in a set of numbers
02:13  JJMalina: by eliminating multiples of numbers
02:14  JJMalina: http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes
02:14  message144: "sieve of eratosthenes" sounds like something from D&D
02:14  JJMalina: for some reason I can only get rid of multiples of 2, even though its supposed to go to 3, and then 5
02:15  dash: message144: surprise!
02:19 --- Viper is now known as Out`Of`Control
02:19  JJMalina: nvm figured it out
02:20  JJMalina: thx anyways
02:20  Wedg: Hi folks.
02:20  JJMalina: fun little math problem
02:21  Wedg: Anyone know of a good way to have a method that works as a classmethod when uninstantiated and instance method when instantiated? I need to access SomeClass.something, which has a default value when uninstantiated, but can change when I do SomeClass().something - so I need access to the instance.
02:22  Jerub: Wedg: it sounds like you have bad needs.
02:22  _habnabit: Wedg, that's really really not a good idea.
02:22  lvh: Wedg: I reccomend you change what you want
02:22  _habnabit: Wedg, what are you trying to accomplish with that?
02:22  Jerub: Wedg: maybe you want a subclass that you leave instanciated somewhere.
02:22  lvh: Wedg: What's that supposed to do? I'm having a hard time conceiving what that would do
02:22  Jerub: class SomeClassWithDefaults(SomeClass): def foo(self): return default
02:22  Jerub: someglobal = SomeClassWithDefaults()
02:23  Wedg: I'm using some custom BaseException subclasses which carry extra info.
02:23  Wedg: So raise SomeException will give an uninstantiated exception.
02:23  Jerub: that way you get the same effect as your terrible design,but without any magic
02:23  Wedg: raise SomeException(something) will be instantiated.
02:24  Wedg: I realize, of course, I could just always do raise SomeException() and use an instance method.
02:24  Wedg: But that's not what I want to do.
02:24  lvh: Wedg: Why not?
02:24  _habnabit: Wedg, `raise SomeException` is bad practice anyway.
02:25  Wedg: Because I don't want to?
02:25  Wedg: It is? 'Cause I see it every-bloody-where.
02:25  lvh: Wedg: You're not supposed to do it anymore.
02:25  _habnabit: Wedg, there's a lot of bad code.
02:25  _habnabit: Wedg, and like lvh said, it's deprecated.
02:25  Wedg: #%@!@ when did that happen.
02:26  lvh: Wedg: It's been a while.
02:26  Jerub: Wedg: hey, you're the person asking to do terrible things. don't be surprised when it turns out it's for bad reasons.
02:26  lvh: Type unification?
02:26  Jerub: :)
02:26  Wedg: I knew that raise "Some crap"'s been deprecated.
02:26  _habnabit: lvh, probably, yeah
02:26  lvh: Wedg: Didn't mean to offend, I was just checking if there's a technical reason or it's just something you want
02:26  Wedg: Didn't realize that raising uninstantiated exceptions got deprecated too.
02:26  Jerub: that's been deprecated for a decade.
02:26  lvh: Wedg: It's been a while.
02:26  Wedg: I wants what I wants. And the rest of our codebase is using the deprecated style.
02:28  Wedg: You guys got any good links that I can reference and send to mah team to say, "Hey guise, let's stop using the deprecated style!"
02:29  Wedg: Also, back to my initial question, even if it's terrible and horrible and deprecated, etc., how do I do it? :D
02:29  Wedg: I've accomplished it before by creating a @classmethod some_method and a instance method _some_method and switching them in __init__.
02:29  _habnabit: You read the documentation until you figure it out, or give up. Whichever comes first.
02:29  lvh: Wedg: Friends don't let friends do that, sorry :-(
02:29  Wedg: Just wondering if there's a nicer way.
02:30  _habnabit: Yeah, that's pretty bad.
02:30  Wedg: I think you guys just don't know how. :P
02:30  lvh: Wedg: Well, that's probably the least-crazy way
02:30  _habnabit: Naaah.
02:30  papna: Eh, the least crazy way is not doing it.
02:30  _habnabit: What papna said.
02:30  lvh: Well, yes, okay, given you'd do it
02:30  papna: The next least crazy way is making up your own descriptor.
02:30  lvh: The other options are, well, metaclass
02:30  lvh: Maybe!
02:30  _habnabit: Wedg, you have to understand that we've been doing this for years and years. It's silly the number of times we've heard that exact same bullshit line.
02:31  Wedg: Which line?
02:31  _habnabit: 01:30:06 < Wedg> I think you guys just don't know how. :P
02:31  lvh: Wedg: But yeah, in closing, please please don't
02:31  Wedg: Whoah, relax. Just teasing.
02:31  lvh: Wedg: IF you are going to, please don't do it near me
02:31  ColgateRaider: hey guys I am trying to define a constructor that doesn't take any parameters besides "self". the only thing the constructor should do is to create an empty list
02:31  Wedg: This was the part where I said: Hey, you're right.
02:31  Wedg: (19:28:45) Wedg: You guys got any good links that I can reference and send to mah team to say, "Hey guise, let's stop using the deprecated style!"
02:31  ColgateRaider: so I would just do def ___init__(self):
02:31  ColgateRaider: self=[]
02:31  ColgateRaider: ?
02:31  _habnabit: ColgateRaider, __init__
02:31  Wedg: I still like doing evilly abusive things in Python for _fun_.
02:32  _habnabit: ColgateRaider, no; assigning to self doesn't do anything.
02:32  _habnabit: ColgateRaider, make it an attribute on self.
02:32  KirkMcDonald: ColgateRaider: That just assigns to the local variable named "self".
02:32  papna: ColgateRaider: assigning to self isn't a useful operation.
02:32  papna: ColgateRaider: That just makes the name self refer to something other then the object.
02:32  ColgateRaider: self.self=[]?
02:32  KirkMcDonald: ColgateRaider: If you want to use that as your attribute name.
02:32  ColgateRaider: well its for a class - and I was very confused
02:32  papna: ColgateRaider: There isn't anything like that. The operation you're imagining doesn't really make sense.
02:32  lvh: ColgateRaider: That's one way, but self is a bit of a silly attribute name :-)
02:33  ColgateRaider: another question for exaple if I do __init__(self): can i do self.list=[] withjout stating list in __init__(self, list)?
02:34  _habnabit: ColgateRaider, ... well, yes.
02:34  _habnabit: ColgateRaider, did you even try it?
02:34  ColgateRaider: Not yet it just didnt make sense to me at all how I could do self.list=[] without defining list...
02:35  _habnabit: ColgateRaider, assigning to self.list is *how* you define it.
02:35  _habnabit: ColgateRaider, python doesn't have any sort of place where you're required to define attributes.
02:35  lvh: ColgateRaider: Well, self.x = y *is* the definition right there
02:36  ColgateRaider: I understand that but would that work if I did def __init__(Self): self.list=[] (Notice how I didnt take list as a parameter)
02:36  ColgateRaider: that was the only thing that was confusing me
02:36  _habnabit: ColgateRaider, with the uppercase Self?
02:37  ColgateRaider: sorry , lowercase
02:37  _habnabit: ColgateRaider, well, why don't you try it?
02:37  ColgateRaider: will do _habnabit :) working on it
02:38  lvh: ColgateRaider: the important part is that you are assigning
02:38  lvh: ColgateRaider: arguments don't matter
02:38  lvh: if you do c = C(); c.x = y; # works fine too
02:38  ColgateRaider: lvh: got it! Thanks!
02:39  neataroni: real quick: how do i do integer division?
02:40  neataroni: a/b is always giving me 0
02:41  _habnabit: neataroni, you mean float division.
02:41  _habnabit: neataroni, integers are whole numbers.
02:41  _habnabit: neataroni, from __future__ import division
02:41  moreati: neataroni: That is integer division, you want floating point division a/float(b)
02:41  moreati: or what _habnabitsaid to change it module wide
02:41  neataroni: _habnabit: yea, i want to divide one iteger by another, the import works thank you
02:42  _habnabit: neataroni, yes, but you want a float as a result.
02:42  _habnabit: neataroni, 'integer division' means you get an integer back.
02:43  neataroni: _habnabit: thank you, yes
02:44  jjb123: Hey everyone! So I am writing a program for my physics project and I need some help with lists. http://pastebin.com/aD5byskk Basically the problem is the statement that updates asteroid.p on line 42 fails with an error because it says that "sphere object has no attribute .p" but the print statement right before it works just fine and prints out the current value of asteroid.p. The update formula I am using works normally but something about
02:44  infobob: http://paste.pound-python.org/show/358/ (repasted for jjb123)
02:44  Wedg: Hrm. The only reference I could find to the raise ExceptionType (implicit instantiation) being deprecated is a rejected PEP: http://www.python.org/dev/peps/pep-0317/
02:44  kesselhaus: how would i assemble a callable function name from a string, e.g. f = 'decode_%s'%('FOO')   x = f(a,b) .. and it would call a decode_FOO(a,b)?
02:46  teratorn: kesselhaus: getattr()
02:46  MostAwesomeDude: kesselhaus: :c
02:46  MostAwesomeDude: kesselhaus: Why do you want to do this?
02:46  jjb123: Whoops on line 41 that is supposed to be asteroid.p not asteroid.pos
02:46  Jerub: MostAwesomeDude: it looks sane. he's doing a dispatch table.
02:46  jjb123: problem still exists though
02:46  Jerub: kesselhaus: another approach is to have a dictionary of functions.
02:47  kesselhaus: i have several 'faults' + freezeframe data, and want to call a freezeframe decoding function for each fault
02:50  nosklo: jjb123: please pastebin the full error traceback
02:50  Miesco: whats wrong with this, why wont it increment?: perl -wlE 'my $cs = 'ZZ9'; my $nc = $cs++; say $nc;'
02:51  dundeemt: Miesco: Cosmic Justice :)
02:51  Miesco: dundeemt: Whats that?
02:52  dundeemt: Miesco: asking a p(#* question on the python list ;-)
02:52  kesselhaus: Miesco: wouldn't a perl channel be the better place to ask?
02:52  Miesco: kesselhaus: Yes
02:53  Miesco: but im banned
02:53  TC01: Why'd you think #python would be a better place to ask?
02:53  jjb123: nosklo: The error: http://paste.pound-python.org/show/359/ The full code: http://paste.pound-python.org/show/360/
02:53  Miesco: TC01: cause I cant ask in #perl
02:54  MostAwesomeDude: XD
02:54  MostAwesomeDude: Is this Perl-logic?
02:54  _habnabit: Miesco, well, if someone thinks you're annoying enough to be removed from #perl, it stands to reason you're annoying enough to be removed from #python.
02:54  Miesco: _habnabit: You dont know why im banned
02:55 --- ChanServ sets modes [#python +o _habnabit]
02:55 --- _habnabit sets modes [#python +b *!*mugsy@*.home3.cgocable.net]
02:55 <-- _habnabit has kicked Miesco from #python (no u)
02:55 --- ChanServ sets modes [#python +o infobob]
02:55 --- infobob sets modes [#python +b $a:Miesco]
02:55 --- infobob sets modes [#python -b *!*mugsy@*.home3.cgocable.net]
02:55 --- _habnabit sets modes [#python -oo _habnabit infobob]
02:56  dpn`: justice is served.
02:56  dpn`: again.
02:56  dpn`: :D
02:56  MostAwesomeDude: When is justice not served in here?
02:56  _habnabit: Redundantly.
02:56  MostAwesomeDude: #python: Serving justice, 24/7, even if you didn't order it.
02:59  Wedg: So anyway, not trying to be a jerk, but does anyone know of a link to a PEP or mailing list entry or the docs or something that describes the deprecation of the 'raise ExceptionSubclass' usage, so I can go to my team and say, "Hey, the nice guys in #python pointed this out to me, let's try to do this from now on."
03:03  ezzieyguywuf: http://www.comp.leeds.ac.uk/nde/papers/teachpy3.html python3.0 sure seems like its aimed at 'programming novices' pretty hardcore
03:05  teratorn: ezzieyguywuf: just a side effect of cleaning up warts
03:06  BigMao: Hi there, I am wondering if a Python function can print out its own name?  Or the name of the function that called it?
03:07  MostAwesomeDude: BigMao: What's this for?
03:07  ezzieyguywuf: teratorn: well, good to know that the focus is entirely on making it easier for first-timers to learn. that would be somewhat silly.
03:07  MostAwesomeDude: BigMao: You can get the declared name of a function, but that might not be the name you normally know it by. Getting the name of the calling function is non-trivial.
03:07  BigMao: I have a large program with many modules that can be called sequentially (the default behavior) or individually.   I would like all of the modules to call a subroutine that verifies that it's in the correct directory before continuing
03:08  nosklo: Wedg: how do you know that is deprecated?
03:08  BigMao: MostAwesomeDude, thanks.  Maybe it would be best to put the "directory verification" manually into each subroutine
03:08  juanez: ezzieyguywuf, from your link, changing integer divison to return a float, with the rational that this is a "difficult concept" for students... what kind of programmers is this guy targetting if flooring an integer is "difficult to learn"? please..
03:08  BigMao: MostAwesomeDude, just out of curiosity, how would I get the declared name of the function?  And is it predictable?
03:09  MostAwesomeDude: BigMao: I'm not sure exactly what you're hoping to verify. It seems kind of strange that your modules need to verify their locations though.
03:09  justinpeel: BigMao: the name of a function is stored in __name__
03:09  BigMao: MostAwesomeDude, if the modules are called sequentially then they're automatically in the right location.. but if they are called individually then the user might get the location wrong
03:10  BigMao: justinpeel, thank you :)
03:10  justinpeel: BigMao: no problem
03:10  MostAwesomeDude: BigMao: And it's not obvious if the user messed up?
03:11  ajmilazzo: what ides does everyone use?
03:11  MostAwesomeDude: Vim.
03:11  ajmilazzo: :)
03:12 * AbortedF watches the flamewar start... Vim ftw!
03:12  MostAwesomeDude: Wait, that's not an IDE at all! :3
03:12  BigMao: MostAwesomeDude, if the user messes up then there's the risk of it messing up files or directories... I guess it's obvious to me as the program writer, but maybe not for other people
03:12  lvh: ajmilazzo: I use Emacs.
03:12  MostAwesomeDude: BigMao: Put another way, how would the user install the modules to the wrong locations in the first place?
03:12  _habnabit: ajmilazzo, emacs!
03:12  ajmilazzo: does anyone use a gui ide...?
03:12  _habnabit: ajmilazzo, what's not GUI about emacs?
03:12  MostAwesomeDude: Gvim.
03:13  lvh: ajmilazzo: Yes, emacs
03:13  AbortedF: On windows, I use wing IDE with vim bindings
03:13  BigMao: MostAwesomeDude, it's not installing the modules to the wrong locations, but rather running them in the wrong locations.  My script creates a directory tree, and it moves through the various directories doing stuff
03:13  ezzieyguywuf: juanez: well yea, so thats why I was worried that the whole python 3.x thing was completely aimed at complete beginners
03:13  ezzieyguywuf: teratorn says otherwise.
03:13  BigMao: Data is generated in certain directories and sorted in others .. some are scratch directories
03:13  Wedg: nosklo: A couple guys in here said so when I asked earlier.
03:14  MostAwesomeDude: BigMao: Curiouser and curiouser. You may want to consider using absolute or two-part paths when communicating between modules, so that everybody can agree on the top-level directory.
03:14  _habnabit: Absolute paths everywhere, absolute module names everywhere.
03:14  _habnabit: anything else is insanity.
03:14  _habnabit: (Oh, and absolute imports everywhere too.)
03:14  lvh: Wedg: I vaguely remember the PEP -- I thought it was 3109's 2.x equivalent but I was mistaken
03:15  lvh: Wedg: It basically boiled down to "ternary raise is stupid, just use instances"
03:15  ajmilazzo: aww wing looked good but $35...
03:15  lvh: Wedg: (Because you should have only one way to do it)
03:15  BigMao: MostAwesomeDude, thanks .. my script it's for a scientific application and i'm not sure how to describe it in a few lines.  I think it should suffice just to get the "base" directory (i.e. 'bar' in 'foo/bar')
03:15  dropdrive: _habnabit: No relative imports inside a package?
03:15  Wedg: Ivh: Was it this Pep?
03:15  Wedg: http://www.python.org/dev/peps/pep-0317/
03:15  dropdrive: lvh: What's a ternary raise?
03:15  _habnabit: dropdrive, never.
03:16  _habnabit: dropdrive, raise with a traceback.
03:16  lvh: dropdrive: raise E, V, T
03:16  dropdrive: _habnabit: So they have no redeeming value?
03:16  _habnabit: dropdrive, none.
03:16  _habnabit: dropdrive, unless you count 'confusing people who read your code'
03:17  _habnabit: dropdrive, or 'making refactoring more difficult'
03:17  dropdrive: _habnabit: is this opinion widely shared by more experienced python devs?
03:17  lvh: Wedg: That's not what I remember but it looks like it could be
03:17  Wedg: They have value if you want to keep the original traceback when you re-raise.
03:17  _habnabit: dropdrive, seems to be.
03:17  Wedg: Unless there's another way to do that.
03:17  _habnabit: Wedg, we're talking about relative imports.
03:17  _habnabit: Wedg, and reraising is spelled `raise`; it's nullary.
03:18  FireSt0rM[work]: Hi guys... have a quick question. Trying to perform a diff of two files using os.system
03:18  FireSt0rM[work]: os.system("diff " + curr_file[0] + " " + outputfn)
03:18  _habnabit: FireSt0rM[work], ourch
03:18  _habnabit: FireSt0rM[work], don't do that.
03:18  lvh: Wedg: Reraising, or twisted's Failure type
03:18  Wedg: _habnabit: If you just do 'raise' in a except: clause you get the line/context from that clause, not the original exception - or maybe I'm misunderstanding?
03:18  FireSt0rM[work]: ok, any tips _habnabit ?
03:18  _habnabit: Wedg, no, you're just wrong.
03:19  _habnabit: Wedg, nullary `raise` reraises the current exception.
03:19  lvh: Wedg: I don't think that's how it works, no
03:19  _habnabit: Wedg, with traceback intact.
03:19  lvh: Wedg: ... yes that ^
03:19  bob2: FireSt0rM[work]: subprocess.Popen(['diff', '-u', filename1, filename2])
03:19  _habnabit: FireSt0rM[work], or just use difflib
03:19  ajmilazzo: or use hashlib
03:19  bob2: FireSt0rM[work]: or difflib in the stdlib
03:19  FireSt0rM[work]: bob2, thanks
03:19  _habnabit: ajmilazzo, hashlib doesn't do the same thing.
03:19  FireSt0rM[work]: Yeah, I could use a lib, but this is for testing
03:19  FireSt0rM[work]: For some reason os.system has trouble
03:19  FireSt0rM[work]: Is subprocess.popen better?
03:19  _habnabit: FireSt0rM[work], yes; os.system is terrible.
03:19  teratorn: _habnabit: you never use "from" in your import statements?
03:19  _habnabit: FireSt0rM[work], never ever use it.
03:19  FireSt0rM[work]: ah I see
03:19  FireSt0rM[work]: ;)
03:19  _habnabit: teratorn, why do you think that
03:20  FireSt0rM[work]: Good to know
03:20  juanez: ezzieyguywuf, at least, python 3.x is so distant for me that it'll probably never happen.. still use 2.2 and 2.4 :P
03:20  lvh: eek
03:20  lvh: 2.2
03:20  teratorn: _habnabit: I don't think anything that's why I'm asking
03:20  _habnabit: juanez, 2.2 is ancient
03:20  lvh: Like, really?
03:20  _habnabit: teratorn, no, I never implied that
03:20  AbortedF: wing has a ajmilazzo: I believe that there's a free version in there somewhere...
03:20  teratorn: _habnabit: but you said you always do absolute imports, and I wasn't sure
03:20  bob2: FireSt0rM[work]: system invokes a shell, so is theoritically slower and requires more fiddling with the args
03:20  teratorn: I guess you meant something else
03:20  bob2: FireSt0rM[work]: and if you ever pass it user input, that user can pwn your program
03:20  juanez: _habnabit, yeah.. more or less..
03:21  _habnabit: teratorn, absolute imports means `from foo.bar import baz` instead of `from bar import baz`, or `from .bar import baz`
03:21  dropdrive: juanez: Wow, where do you work?!
03:21  bob2: _habnabit: 'import foo.bar.baz as baz' instead?
03:21  _habnabit: bob2, haha no.
03:21  teratorn: _habnabit: right well, someone I know used "absolute imports" to mean "import foo.bar.baz"
03:21  juanez: well, tbh 2.2 is in use with jython - which makes things a bit different
03:21  Wedg: _habnabit: ... Is that for Python 2.7? I'm unfortunately relegated to 2.6 currently. I know I had to use the raise sys.exc_info()[1], None, sys.exc_info()[2] at one point to get the correct traceback.
03:21  _habnabit: Wedg, it's for, oh, python 0.8? I think.
03:22  ajmilazzo: import hashlib; file = 'whateva.txt'; file2 = 'somethingelse.txt'; if hashlib.md5(open(file, 'r').read()).hexdigest() != hashlib.md5(open(file2, 'r').read()).hexdigest(): print 'teh r not le same'
03:22  ajmilazzo: is difflib better?
03:22  FireSt0rM[work]: bob2, do I need to import popen* ?
03:22  bob2: ajmilazzo: I think we're just assuming FireSt0rM[work] is using diff so he/she can get the actual difference rather than just whether they diff
03:22  _habnabit: ajmilazzo, difflib doesn't do the same thing.
03:22  FireSt0rM[work]: is.popen
03:22  bob2: ajmilazzo: your version just says if they are the same or not
03:22  _habnabit: bob2, s/are/aren't/
03:22  FireSt0rM[work]: bob2, indeed.
03:22  due: Does anyone have any experience generating python code with cheetah?
03:22  FireSt0rM[work]: It's more of a debugging use
03:22  bob2: ajmilazzo: but just compariing the data itself is probably better than hashing anyway
03:23  FireSt0rM[work]: import os.popen*?
03:23  ajmilazzo: bob2: oh the only thing i ever used ms5 and diff for is seeing if files are the same... thats why i assumed that
03:23  ajmilazzo: md5*
03:23  Wedg: _habnabit: D'oh. You're correct sir. I used the raise E, V, T for saving an exception and raising it again at a later point outside the except: clause.
03:23  nosklo: FireSt0rM[work]: subprocess.Popen
03:23  _habnabit: ajmilazzo, hashes can't tell if you if files are the same.
03:23  nosklo: FireSt0rM[work]: http://docs.python.org/library/subprocess
03:23  due: don't use os.popen... yeah.
03:23  _habnabit: ajmilazzo, they can only tell you if files *aren't* the same.
03:24  FireSt0rM[work]: import subprocess.Popen?
03:24  bob2: FireSt0rM[work]: import subprocess
03:24  nosklo: FireSt0rM[work]: have you read the tutorial?
03:24  FireSt0rM[work]: Reading it now
03:24  FireSt0rM[work]: tx
03:25  FireSt0rM[work]: popen is having the same issue as os.system. For some reason the second file parameter isn't being read properly.
03:25  bob2: FireSt0rM[work]: http://paste.pocoo.org/
03:29  ezzieyguywuf: juanez: :-P I'm on 2.7
03:29  ezzieyguywuf: I could see myself switching to 3.x if it isn't completely crazy.
03:32  deitarion: What's the recommended method for setting a default sort order by saying that a member variable of the object should be compared? All the docs I find assume things like "self.id < other.id" won't raise an AttributeError.
03:32  MostAwesomeDude: deitarion: Why aren't your objects homogenous?
03:32  MostAwesomeDude: Or at least all of the same sortability?
03:32  FireSt0rM[work]: http://paste.pocoo.org/show/302572/
03:33  deitarion: MostAwesomeDude: They are. This is just a question that's been grating on me for ages.
03:33  ezzieyguywuf: hrm, I seem to have borked one of my .py files, but still have a .pyc floating around that works for my imports. any way to recover a .py from a .pyc?
03:33  MostAwesomeDude: deitarion: If you raised an exception while doing a compare or sort, what would you like to have happen?
03:34  juanez: ezzieyguywuf, float = int / int, is completely crazy :) did that *really* pass?
03:34  bob2: ezzieyguywuf: you can pay for decompyle
03:34  bob2: ezzieyguywuf: http://www.crazy-compilers.com/decompyle/service.html
03:34  lvh: juanez: Not entirely
03:34  bob2: ezzieyguywuf: but the real answer is that you should use version control :-)
03:34  lvh: juanez: We have the // operator, which is always integer division
03:35  teratorn: juanez: it's not that crazy
03:35  ezzieyguywuf: bob2: yea I'm using git but somehow this file slipped through the cracks. which is odd because its like, the basis of my prog
03:35  ezzieyguywuf: juanez: I'm really scratching my head over that one.
03:35  deitarion: MostAwesomeDude: I don't want to raise an AttributeError. I just want to fully understand the mechanics of things like "2 < 'foo'"
03:35  bob2: FireSt0rM[work]: that has syntax errors
03:35  bob2: ezzieyguywuf: eep
03:35  FireSt0rM[work]: Where at?
03:35  ezzieyguywuf: float = int / int.0 is so embedded in my brain that I never even think about it.
03:35  bob2: FireSt0rM[work]: lines 3 and 4
03:36  FireSt0rM[work]: oh sorry, invalid tabs
03:36  bob2: FireSt0rM[work]: print repr(curee_file[0]), repr(outputfn)
03:36  FireSt0rM[work]: There are no tabs
03:36  ezzieyguywuf: bob2: ah well, I have a real old version of it, I'll just re-write it. as someone in here told me a few weeks ago, re-writing code leads to better code more often that not :-P
03:36  bob2: FireSt0rM[work]: check they are the correct names
03:36  bob2: tabs are bad mkay
03:36  ezzieyguywuf: thanks for the chat fellas, gotta go
03:36  juanez: tada
03:36  FireSt0rM[work]: bob2, checked the filenames, they're correct
03:36  bob2: FireSt0rM[work]: really?
03:37  natalie: i'm trying to covert a python file to a exe on windows 7 but i cant seem to get the command to work from the command line: asdf py2exe
03:37  natalie: when i type python at the command line it also doesn't start the interpreter
03:38  deitarion: At the very least, I'd settle for a way to make key=lambda x: x.foo the default sorting behaviour.
03:38  natalie: 'python' is not recognized as an internal or external command,
03:38  natalie: operable program or batch file.
03:38  AbortedF: natalie: your python executable is probably not in your path. Ask a win7 expert for advice
03:38  natalie: :(
03:39  deitarion: (For just these objects... so if I had them in a list with strings, they'd compare as if they were strings while also comparing cleanly against each other)
03:39  natalie: how do i add stuff to the path?
03:40  AbortedF: natalie: in winXP, you can right-click on My Computer -> properties/Advanced/Environmental Variables
03:40  bob2: "compare as if they were strings" doesn't sound like a very sensible thing
03:40  bob2: I'd say that "comparison" is part of your object's api
03:41  AbortedF: Then you can edit the PATH variable. Put a semicolon ";" after the last path and add a new path pointing to your python directory. I.e. (   %APPDATA%\Python\Scripts;E:\Program Files\Oracle\jre\bin )
03:41  bob2: and implementing it as 'return self.foo > other.foo' etc is fine
03:42  AbortedF: natalie: You should also make a new variable called PYTHONPATH, pointing to your base python directory ( e.g. C:\Python26  )
03:42  TML: natalie: "Win+Break", "Advanced System Settings", "Advanced" tab, "Environment Variables" button, "System Variables" section, highlight "Path", hit edit, add a semi-colon (";") and the path to your python
03:42  deitarion: bob2: I appreciate your trying to put me on the right path, but I know what I'm doing and I'm just trying to find a less bothersome alternative to going code diving until I find a library that clues me into what goes on under the hood.
03:43  bob2: deitarion: what do you mean 'what goes on under the hood'?  how python does comparisons?
03:43  deitarion: bob2: How Python does homogeneous comparisons like 2 < 'foo', basically.
03:43  bob2: buggily
03:44  natalie: ok thanks
03:44  bob2: deitarion: in 3.x that is banned
03:44  bob2: afaik it was considered a mistake that 2.x supported it at all
03:45  deitarion: bob2: Now that you mention it, I do vaguely remember that.
03:45  bob2: http://docs.python.org/release/3.0.1/whatsnew/3.0.html#ordering-comparisons
03:45  deitarion: I'm still curious as to how it actually works though.
03:46  deitarion: If I actually want to do homogeneous comparisons, I'll probably just do something like __lt__ = lambda self, other: unicode(self) < unicode(other)
03:46  bob2: pyhttp://docs.python.org/reference/expressions.html#notin
03:46  bob2: I think that's all there is to it
03:47  bob2: and http://docs.python.org/reference/datamodel.html#object.__lt__ etc
03:47  deitarion: That particular example would be exactly how I'd do it in the code I'm currently working on since it's basically ORM objects where __unicode__ = lambda self: self.title
03:48  bob2: ok
03:48  deitarion: (Of course, the only reason I'd even consider sorting outside the DB anyway is for corner cases involving dicts)
03:48  bob2: anyway, there's no magic and it's all documented in the langref :)
03:49  bob2: you might find http://docs.python.org/library/functools.html#functools.total_ordering handy
03:49  natalie: seriously i'm getting angry i can't seem to add a path right so that when i type "python" at the command prompt it executes
03:49  FunkyELF: I'm having some problems with a wrapper I'm writing.  Its against some 3rd party libs.  Basically, they have a whole directory full of .so files and I don't know which ones I need to link against.  Is there a way I can systematically find them?
03:49  deitarion: bob2: I've never been very good at finding my way around the langref but I did find functools.total_ordering already.
03:49  deitarion: (If it's outside the modules reference, I have trouble finding my way around it, basically)
03:49  bob2: fair enough, I always end up using google to find things in it
03:50  Eevee: the langref is still kind of hairy alas
03:50  natalie: can somebody convert a pyw to a exe for me please!?!?! i need it for one of my college classes and i'm getting to angry to keep messing around with paths and all that
03:51  deitarion: That reminds me. I have to find time to reverse-engineer the Sphinx index format so I can borrow their JS search engine for my upcoming move to Jekyll for my blog. (Google Custom Search is ugly and the index generator in Sphinx is too integrated into it for extracting it to be worth the effort)
03:51  bob2: ugh sphinx
03:51  bob2: actually, unfair: ugh my use of sphinx
03:52  deitarion: I just use epydoc in rST mode so docs on superclasses I don't control don't cause it to error out.
03:53  papna: Sphinx is a really good piece of software.
03:53  deitarion: Sphinx is a LaTeX competitor, not an epydoc competitor. I've tried it.
03:53  papna: Sphinx is a doxygen competitor, not a LaTeX competitor.
03:54  deitarion: Noted. I'll avoid Doxygen too then.
03:54  bob2: oh, I thought you meant sphinx the indexer
03:54  papna: Oh, THAT sphinx.
03:54  bob2: sphinx the python thing is ridiculously slick
03:54  bob2: and you can strap pydoctor in to it
03:55  natalie: okay well i have another problem =/
03:55  deitarion: bob2: I forget why I decided pydoctor wasn't good enough. Maybe not mature enough or too many deps.
03:55  natalie: exemaker seemed to work for me, but it stopped compiling my .py files and just makes a copy of the python.exe (interpreter)
03:55  natalie: whats up with that?
03:56  deitarion: Oh, yeah. Uglier and less featureful than epydoc at first glance and I already know epydoc.
03:56  AbortedF: natalie: What did you type on the command-line?
03:56  deitarion: I'll probably get around to writing an epydoc-sphinx bridge sooner or later.
03:56  natalie: exemaker.py myscript.pyw
03:57  natalie: it worked a few times
03:57  natalie: but now it just copys the interpreter
03:57  bob2: wtf
03:57  natalie: and doesn't compile my scripts anymore
03:57  bob2: pydoctor uses epydoc syntax
03:57  natalie: i'm about ready to let somebody remote connect
03:58  deitarion: bob2: I don't really care which syntax it uses. I already rewrote all my docs in rST so epydoc wouldn't trip over some of the new superclasses I added.
03:58  bob2: don't know what that means, but ok
03:58  deitarion: Sphinx speaks reStructuredText.
03:59  AbortedF: You should type exemaker myscript.py destination_folder (as in: exemaker infile.py c:\bin ). It should work like that...
03:59  deitarion: epydoc can speak epytext, javadoc, or reStructuredText, but it falls down if you use epytext in a class which inherits from a Sphinx-documented parent.
03:59  bob2: sphinx does api docs now?
03:59  bob2: from docstrings?
03:59  deitarion: bob2: It has a very primitive autodoc extension.
04:00  deitarion: ...and you have to manually specify every module to document.
04:00  papna: bob2: Has for a long time.
04:00  papna: bob2: It's not recommended.
04:00  deitarion: I'm thinking that, once I've got things more under control, I'll write a Sphinx extension which uses epydoc to build the input DOM.
04:01  AbortedF: natalie: It creates two files in the destination directory. One an exe and another a py file. It needs both
04:01  deitarion: Maybe see if I can make enough sense of the guts of epydoc to swap out the rST parser for Sphinx's too.
04:01  AbortedF: Drop both of them into anywhere in your PATH environment variable (remember this?) and you can just run it as a command directly.
04:02  teratorn: deitarion: good luck. epydoc source is a nightmare
04:02  AbortedF: Although it's easier to setup your PATH and PYTHONPATH variables, then just call the script directly with python my_script.py (or more accurately: python C:\my_path\my_script
04:03  deitarion: teratorn: *nod* I may just rewrite the parts I care about once I see how the magic is done. All I really care about is having an autodoc backend for Sphinx that doesn't sacrifice usability as an API reference for elegance and flexibility as a whole-system documentation tool.
04:04  deitarion: For example, I want to know I can trust the thing to collect my TODO notes even if they're in a newly-added module.
04:10  deitarion: I'm told some of the things on the Sphinx Google Group may do what I want, but I couldn't find a set of keywords which brought them to light.
04:12  sontek: So with pep8, if my functions aren't inside a class, I'm supposed to separate each one with 2 new lines?
04:13  dash: sontek: even if they are
04:13  dash: oh, oops, pep 8 does say different on that
04:13  sontek: dash: what does this mean then:     Method definitions inside a class are separated by a single blank line.
04:13  dash: i'm thinking of the twisted style guide
04:13  sontek: yeah, seems weird that it'd be different like that though
04:13  dash: sontek: yes, you got it right
04:14  dash: yes, i think it's dumb.
04:15  bob2: who can remember to hit enter twice
04:16  dash: well, the twisted style guide says two blank lines after functions/methods, 3 after classes.
04:16  natalie: what is the path supposed to be for py2exe?
04:16  fmoo: I hate my PEP 8 linter with the passion of a thousand burning suns
04:16  dash: fmoo: why
04:16  bob2: I love pyflakes and pep8 and flymake
04:17  dash: fmoo: does it not work?
04:17  bob2: who hwas time to wait for unit tests to fail
04:17  fmoo: dash: because I rarely write PEP 8 complying code and it stops after one rule violation
04:17  bob2: fmoo: that's lame
04:17  deitarion: Idiotic is more like it. What if someone wants to fix a bunch of violations in one run?
04:17  dash: fmoo: oh. yeah get a better one
04:18  AbortedF: nn all!!!!
04:22  sontek: I should setup pyflakes with vim, I keep putting it off
04:22  sontek: i'm just doing !pep8 %
04:22  sontek: it works well
04:23  deitarion: I've got it set up via a plugin which pops it up in that whatsis pane at the bottom. Works very nicely... just don't type :wq if you've got errors. Your terminal will go weird until you think to try :q.
04:24  deitarion: (I haven't had time to figure out how to either omit the on-save check on :wq or cancel the buffer-close)
04:32  Rotham: hey... I have a script thats throwing a typeerror with no traceback
04:33  _habnabit: Rotham, cool story bro
04:33  Rotham: :D
04:33  deitarion: Rotham: Probably catching the error with a try/except and then manually printing the error.
04:33  Rotham: was hoping I could get an idea of how to find it
04:33  Rotham: :P
04:34  bob2: grep -r except: .
04:34  bob2: then use blame to find out who did it
04:34  bob2: then kill em
04:34  deitarion: Omit the colon in the pattern. You forget about things like "except Exception, err:"
04:36  Rotham: Will see if I can get it :D
04:41  pyoor: Hi all.  I'm very new to python and I'm running into issues trying to define a class.  Anyone know what's wrong with the syntax I'm using?  http://pastebin.com/atEi5UCb
04:41  infobob: http://paste.pound-python.org/show/361/ (repasted for pyoor)
04:41  deitarion: pyoor: elsif --> elif
04:41  pyoor: thanks, I'm an idiot
04:43  bob2: 4 spaces not tabs, ideally
04:59  krisfremen: hey there
05:00  krisfremen: i'm using somestring.strip('\n').strip('\r') to get rid of all the new lines
05:00  krisfremen: yet, it's not working
05:01  bob2: read the help for strip again
05:01  bob2: it removes trailing and leading only
05:02  krisfremen: ah
05:03  bob2: maybe you just want .strip()
05:03  krisfremen: i see, thanks bob, i guess i'll use .replace then
05:03  bob2: really?
05:04  bob2: is this from a file you're reading in?
05:05  sontek:            
05:05  sontek:            
05:05  bob2: yes
05:10  Tau: hi. is there some function in pygtk to stop the course of a program ? for ex, u call window1.show() func_to_stop('waiting for window1 to be closed') print 'hello window1 was closed'
05:10  Tau: something like that
05:10  Tau: is there ?
05:10  fmoo: why does PyArg_ParseTuple print "function takes exactly 7 arguments (0 given)" when no args are given for an instance method that requires them, while normal python methods would print "function takes exactly 8 arguments (1 given)"?
05:13  dash: Tau: Nope. Why do you want that?
05:14  Tau: dash, well. something of workaround that i'm doing here.
05:14  fmoo: Hm, I think I get it actually.  That's intense.
05:14  Tau: i have got a solution, dash .
05:15  Tau: i will put use hide event.
05:15  Tau: so, i call window2 when window1 is hided.
05:15  Tau: hidden*
05:15  papna: fmoo: Because for a normal method, there is an underlying function object which has the error you describe, with 1 passed being self.
05:16  papna: fmoo: But with a tuple, there's a built-in method which works inconsistently with stuff written in Python in its error reporting.
05:17  sontek: what do you guys do for really long strings that are regexes... do you break them up to make pep8 happy or just ignore it?
05:19  fmoo: sontek:  I usually use the implicit string concatenation regex = 'firstpart' \<newline>          'secondpart'
05:21  dash: sontek: not have them
05:21  dash: or that.
05:21  bob2: in ()
05:35  FireSt0rM[work]: ValueError: Attempted relative import in non-package
05:35  FireSt0rM[work]: Are you not allowed the import ..something ?
05:35  bob2: sob
05:35  bob2: http://jcalderone.livejournal.com/39794.html
05:35 * FireSt0rM[work] pats bob2 on the back.
05:36  FireSt0rM[work]: tx
05:36  dash: FireSt0rM[work]: don't have relative imports.
05:36  bob2: relative imports are kinda a trap
05:38  ajmilazzo: when using commands, is it nessecary type all the module names into __all__
05:39  bob2: what is commands?
05:39  bob2: but generally you don't need to use __all__ at all
05:39  bob2: (ho ho ho)
05:39  ajmilazzo: why did i say commands? no clue. i meant packages
05:39  bob2: ah
05:40  ajmilazzo: mind derp
05:45  FireSt0rM[work]: packages are annoying
05:46  dash: FireSt0rM[work]: not having packages is worse
05:47  FireSt0rM[work]: They seem so hard to create
05:47  teratorn: FireSt0rM[work]: eh you'll get used to it
05:47  jerojasro: hi all. I'
05:47  bob2: they're easy
05:47  bob2: make a dir
05:47  bob2: touch __init__.py
05:48  bob2: have a beer
05:48  bob2: done
05:48  bob2: the last step is obviously the most important
05:48  FireSt0rM[work]: ;)
05:49  FireSt0rM[work]: So... say my main script is start.py, and it contains an __init__, do I need to create a dir 'Start', containing both __init__.py and start.py, and move the __init__ into the __init__.py file?
05:49  teratorn: FireSt0rM[work]: what do you mean start.py contains an __init__?
05:49  jerojasro: m parsing a xhtml file with lxml.etree, and it works fine. But, all the tag names have as a prefix teh namespace of the xhtml file. this interferes with methods like element.find(), since I can't write,say ,element.find('//table'), but element.find(//<awfully long namespace>table)
05:49  FireSt0rM[work]: Beginning of start.py has: def __init__(self): blabla
05:49  jerojasro: how can I avoid having to specify the namespace for the searches I make?
05:50  teratorn: jerojasro: pass in a namespaces dict
05:50  teratorn: jerojasro: that you can have short prefix names for the namespaces
05:50  teratorn: s/that/then/
05:50  dash: jerojasro: element.xpath("//xh:table", namespaces={"xh": uri})
05:51  FireSt0rM[work]: So does the __init__ move into the __init__.py file
05:51  FireSt0rM[work]: ?
05:52  Eevee: FireSt0rM[work]: why do you have an __init__ outside a class?
05:52  FireSt0rM[work]: No, it's inside a class
05:52  FireSt0rM[work]: start.py contains
05:52  Eevee: and no, I don't know why you think you need to do that
05:52  FireSt0rM[work]: class start():
05:52  teratorn: FireSt0rM[work]: I've never actually used a top-level __init__ function before... does that do something special?
05:52  FireSt0rM[work]: def __init__(self):
05:52  Eevee: __init__.py is unrelated to the method __init__
05:52  FireSt0rM[work]: ok
05:52  jerojasro: teratorn, dash: um, I see. Can't I avoid passing the namespace at all? I don't see any useful options for the parse function...
05:52  FireSt0rM[work]: so I'll just create blank __init__.py files
05:52  cypha: can i have 3.1 and 2.7 installed at the same time?
05:52  jerojasro: to achieve that...
05:52  Eevee: yep
05:52  Eevee: cypha: yes
05:52  papna: FireSt0rM[work]: http://jcalderone.livejournal.com/39794.html
05:52  teratorn: jerojasro: might be a way to specific a default namespace... i'm not sure
05:52  teratorn: *specify
05:53  cypha: Eevee, what about with django
05:53  cypha: ?
05:53  dash: jerojasro: nope, this is wht you get with xhtml
05:53  Eevee: cypha: why would django make a difference?  it's just python code
05:53  dash: no default namespaces for xpath
05:53  FireSt0rM[work]: papna, thanks, but that doesn't explicitly explain how to create a package ;)
05:53  cypha: k
05:53  cypha: cool
05:53 * jerojasro shakes fist to the sky...
05:53  jerojasro: dash, teratorn, thank you
05:54  jimmydeadcode: hey all ..i got problem for loop in my script ..anybody can help me ? please
05:54  dash: jimmydeadcode: sure, pastebin the code
05:54  teratorn: jimmydeadcode: just ask your question :)
05:54  jimmydeadcode: ok wait ;)
05:54  jerojasro: jimmydeadcode: i = i + 1
05:54  jerojasro: that should fix it :P
05:55  jimmydeadcode: http://paste.pocoo.org/show/302596/
05:55  jimmydeadcode: here is my code http://paste.pocoo.org/show/302596/
05:56  jimmydeadcode: i can't fix it ;(
05:57  FireSt0rM[work]: So once I have a package 'Start', containing a subpackage 'modules'. How does subclass import a class that's in a directory above it?
05:57  jimmydeadcode: anybody can help me please ..for solution ..
05:57  FireSt0rM[work]: I tried: import Start.library.py
05:57  FireSt0rM[work]: Didn't work
05:57  teratorn: jimmydeadcode: first, your indentation is crazy: 4 spaces per indent please, second, what is the problem? I don't see a for loop anywhere
05:57  jerojasro: jimmydeadcode: now explain your problem please
05:58  jimmydeadcode: ok the problem when i check print '\n[+] Checking: %s <%s> -> Valid!\n' % (email, password)
05:58  jimmydeadcode:  it got eror ...
05:58  datadude: Hello
05:59  kalvatn: jimmydeadcode: you haven't initialized br before you call br.quit()
05:59  jimmydeadcode: can you run the script n see what the eror please ..
05:59  teratorn: jimmydeadcode: also don't be evil and lie about your User-Agent
05:59  bob2: FireSt0rM[work]: which tutorial are you reading?
06:00  FireSt0rM[work]: http://www.network-theory.co.uk/docs/pytut/Packages.html
06:00  bob2: FireSt0rM[work]: package names should be all lower case, and modules is a terrible name for subpackage
06:00  datadude: Anyone mind helping implement a DictCursor from oursql?
06:00  jimmydeadcode: ok thanks ..can you give me solution ?
06:00  bob2: FireSt0rM[work]: but 'from start.modules import library'
06:01  FireSt0rM[work]: ah bob2.
06:01  FireSt0rM[work]: the from x import y works
06:02  bob2: as does 'import start.modules.library'
06:02  jerojasro: jimmydeadcode: no. not with so little information, and with the evident lack of knowledge about the code
06:02  FireSt0rM[work]: I think I had 'Start' with the uppercase
06:03  bob2: well, it has to match what you call the module/package
06:03  bob2: but they should be lowercase
06:03  bob2: and start is a terrible package name :)
06:03  teratorn: sounds like something Microsoft would trademark
06:03  FireSt0rM[work]: lolz
06:03  jimmydeadcode: ok
06:03  FireSt0rM[work]: no-LOL zone?!
06:03  FireSt0rM[work]: aww
06:03  FireSt0rM[work]: :(
06:03  FireSt0rM[work]: I suck at package naming... clearly.
06:04  bob2: it's the root package
06:04  bob2: so it should match the name of your project
06:04  FireSt0rM[work]: Why is modules a bad name?
06:04  bob2: generic
06:04  FireSt0rM[work]: I see
06:04  bob2: and all your code is in a module or a package
06:05  FireSt0rM[work]: ;)
06:05  bob2: do you all your fridge the 'food fridge'?
06:05  FireSt0rM[work]: So like 'testmodule'
06:05  bob2: to distinguish it from the one you keep your shoes in?
06:05  bob2: testmodule is probably a silly name too
06:05  bob2: (and unit tests generally go in yourpackage.test or yourpackage.tests)
06:05  FireSt0rM[work]: loopAndSave
06:05  FireSt0rM[work]: woah... ain't no unit testing that will be happening here ;)
06:05  FireSt0rM[work]: yet.
06:06  teratorn: LoopAndSave, if you must
06:06  FireSt0rM[work]: huzzah!
06:06  bob2: is it a class?
06:07  FireSt0rM[work]: Well, I have a package that contains a bunch of classes (modules) that are run by the main script.
06:07  ajmilazzo: what does continue do? is it the same as class?
06:07  FireSt0rM[work]: continue?
06:07  ajmilazzo: not class, pass
06:07  bob2: ajmilazzo: it continues a loop, ie moves on to the next iteration
06:07  bob2: ajmilazzo: no
06:07  bob2: ajmilazzo: pass does nothing, it only exists so you can put something in blocks that demand contents
06:08  bob2: ajmilazzo: e.g. in a class body that otherwise does nothing
06:08  ajmilazzo: bob2: thanks
06:15  donspaulding: how can I return a newly-defined variable in the middle of a function in pdb?
06:15  dash: donspaulding: 'rv' i think
06:16  FireSt0rM[work]: bob2, alright, tricky one. I dynamically import all of the 'modules' in my subpackage. I save the name of each imported module into an array. How do I then instantiate and use any given module?
06:17  FireSt0rM[work]: (I'm sure this is taking python to completely new levels of omgstfu)
06:17  dash: people ask this every week
06:17  FireSt0rM[work]: oh yeah? awesome.
06:18  FireSt0rM[work]: That means it's actually something ppl do and I'm not just making it up
06:18  FireSt0rM[work]: Or we're all stupid.
06:19  FireSt0rM[work]: I tried to curr_module[0].doaction() for example... but since curr_module[0] is a string (class name), it obviously doesn't work.
06:19  cypha: if i have python 3.1 and 2.7 installed, how does a .py file know which compiler to use?
06:19  FireSt0rM[work]: cypha, try typing: which python
06:19  bob2: FireSt0rM[work]: classes are objects dude
06:19  dash: FireSt0rM[work]: are you writing an IRC bot?
06:19  bob2: FireSt0rM[work]: yourdict['whocares']()
06:19  FireSt0rM[work]: lol no dash
06:20  dash: FireSt0rM[work]: well, that's a first.
06:20  bob2: FireSt0rM[work]: aim bot?
06:20  dash: cypha: the first line.
06:20  FireSt0rM[work]: Not a bot
06:20  bob2: FireSt0rM[work]: so, short answer, put them in a dict that maps names to classes
06:20  bob2: FireSt0rM[work]: longer answer, http://launchpad.net/modules
06:21  cypha: crap, now it doesn't work
06:21  dash: cypha: hmm?
06:23  cypha: dash, this was the contents of my file that now just opens and closes when it's run (ever since i installed 2.7; i have 3.1 still installed)
06:23  cypha: http://pastebin.com/ymMWS5bH
06:23  infobob: http://paste.pound-python.org/show/362/ (repasted for cypha)
06:23  bob2: anyway, it will use whatever you put in the hashbang
06:24  bob2: and 2.x and 3.x are not compatible, so make sure you set the hashbang correctly
06:24  dash: cypha: looks like a syntax error to me
06:24  cypha: dash, it is
06:24  cypha: which means it's using 2.7
06:24  dash: cypha: What
06:25  cypha: because i had 2.7, and when i switched to 3.1 i had to make some changes due to the library calls or whatever
06:25  cypha: and now i just installed 2.7 again and the file that worked in 3.1 is crashing
06:25  cypha: so how do i specificy to use python 3.1 for that file?
06:25  dash: cypha: what does 'crashing' mean?
06:25  cypha: it just opens and closes
06:25  dash: what did you do? what happened?
06:26  cypha: dash, do u have teamviewer?
06:26  cypha: i'll show u
06:26  dash: i don't know what that means
06:26  dash: never heard of it
06:26  bob2: cypha: pastebin the output
06:26  dash: Oh
06:26  dash: you're using windows.
06:26  bob2: oh
06:26  cypha: there's no output that i can see before the window closes
06:26  donspaulding: dash: in pdb, retval and rv just print the last returned value, I'm trying to return a completely different value, any other ideas?
06:27  dash: donspaulding: just edit the code and rerun your tests i guess
06:27  pyoor: hi all.  Has anyone here worked with the peach fuzzer framework?
06:27  bob2: cypha: run it from cmd.exe yourself, so you get the traceback
06:29  cypha: ohh, it was typing "which python" at the start that was crashing it
06:29  dash: that's the syntax error, yes.
06:29  cypha: so, why did someone say to type "which python"?
06:30  cypha: they meant in the command line i guess
06:30  dash: ignorance
06:30  cypha: wow
06:30  cypha: ok
06:33  dietnews: where can i get an explanation of +=
06:34  dietnews: its a hard term to search for
06:34  bob2: mostly the same as foo = foo + bar
06:34  bob2: except that it can call a different method, __iadd__
06:34  bob2: which can sometimes do different things
06:35  bob2: e.g. for lists it does in-place append
06:35  bob2: er extend
06:35  dietnews: okay i think thats how its coming into play
06:35  dietnews: someone showed me how to use it to sum up values from a list
06:35  ajmilazzo: which style is better (the one you would use)? http://paste.pound-python.org/show/363/
06:35  dietnews: but i dont understand how the code works
06:36  bob2: dietnews: http://paste.pocoo.org/ away
06:37  bob2: ajmilazzo: depends what populate really does, I guess
06:37  bob2: I'd not bother with the __name__ hack
06:38  ajmilazzo: bob2: returns a list based on os.listdir() and uses it in functions further down
06:40  dietnews: http://paste.pocoo.org/show/302600/
06:40  dietnews: it works currently but i dont understand it well enough to modify it, which i need to do.
06:41  dietnews: my real dataset has a bunch of info i need to sum up by year
06:41  dietnews: not just one value type
06:41  bob2: oh, that's simple
06:41  dietnews: well i'm a total newbie
06:42  bob2: http://paste.pocoo.org/show/302602/
06:43  dietnews: oh that clarifies it a little bit
06:43  dietnews: i still dont really understand how it is summing up the values
06:43  SenoraRaton: Anyone have any experience with wxPython?  I'm trying to create a frame without the close/minimize buttons, I'm loading a sprite to it, and just want the sprite to appear as a floating "surface"
06:43  bob2: dietnews: item is each item in data
06:43  dietnews: right
06:43  bob2: dietnews: item[0] is 2001, 2001, etc
06:43  bob2: dietnews: item[1] is 4, 6, etc
06:44  bob2: dietnews: a default dict is like a dictionary, but when you access a key that doesn't exist, it creates the key using the function you passed it
06:44  bob2: dietnews: the int function happens to return 0 when called with no arguments
06:44  pyoor: Hi all.  I have the following class: http://paste.pound-python.org/show/364/  Is there a way for me to access that classes parent data?
06:44  bob2: dietnews: so on the first access of each year, you get an int, add item[1] to it and set the total for that year
06:44  bob2: dietnews: on the next time you hit that year, you get the current total for it
06:45  dietnews: oh i see
06:45  bob2: pyoor: what is parent data?
06:46  dietnews: so how would i modify that code if i were to add more value types such as: (2001, 2, 3, 4) ?
06:46  pyoor: to be honest, I don't know how to describe it properly.  That class is a transformer used in the peach fuzzer framework.  I'm trying to create a new transform that can access data from another datamodel
06:47  bob2: dietnews: depends what you want them to do
06:47  dietnews: i need them to sum up independantly
06:47  dietnews: based on the year
06:47  dietnews: if that makes sense
06:47  bob2: then you need to do more work
06:47  bob2: write a function that returns a list of 3 0s
06:47  dietnews: :D
06:47  pyoor: bob2: I'm trying do: self.parent.find('encoding').getFirstChild().name == 'string'
06:47  bob2: and pass that to defaultdict instead of int
06:47  bob2: pyoor: don't know what any of that means, sorry
06:48  dietnews: could i just pass defautldict multiple ints?
06:49  bob2: nope
06:49  bob2: because you don't want that
06:49  bob2: you want a list or a tuple
06:49  dietnews: oh okay
06:51  dietnews: well assuming i do that, then i just change the loop to: for item in data: sumdata[item[0]] = sumdata[item[0]] + item[1]  + item[2] + item[3] ?
06:51  dietnews: or am i totally mixed up about how this works
06:51  bob2: a bit mixed up
06:51  bob2: so, you'll have two things: a list of current totals and a list of this year's numbers
06:52  bob2: how would you add them together?
06:52  dietnews: i'm not really sure
06:53  FireSt0rM[work]: why am I getting 'cannot import name mymodule' when I do from modules import mymodule ?
06:53  dietnews: sorry i'm having a lot of trouble with this. i dont mean to waste your time, is there some documentation you recommend i study to help with this?
06:53  bob2: FireSt0rM[work]: don't do that
06:53  bob2: FireSt0rM[work]: from mypackage.modules import whatever
06:54  bob2: dietnews: http://paste.pocoo.org/show/302603/
06:56  dietnews: hmm, thanks for helping with this bob2. despite it being an easy problem, i need a minute to fumble around with this
06:57 --- MikhX_ is now known as MikhX
06:58  FireSt0rM[work]: bob2, is it: from mypackage.subpackage import class?
06:58  bob2: FireSt0rM[work]: if you like
06:59  bob2: no need to only have one class per module/file, by the way
06:59  FireSt0rM[work]: I know, but each module is being written by a different person
06:59  bob2: heh
07:00  FireSt0rM[work]: wahhh
07:00  FireSt0rM[work]: 'no module named modules'
07:00  bob2: well, your directory structure is screwy then
07:00  bob2: pastebin the output of 'find -type f' when run from the dir your setup.py is in
07:02  sontek: I'm trying to get keyczar to install from pip using svn+ in a requirements.txt... it seems to installed but python path isn't picking it up
07:03  sontek: there is the .egg-info directory in the check out and in site-packages there is an east_install.pth that references it and a python-keyczar.egg-link that references it
07:04  teratorn: if I ever find a time machine the first thing I'm doing is destroying GNU autotools
07:04  dietnews: bob2: i'm trying not to let myself google the answer. i know its easy enough to sum the numbers if i can get them into sepeate lists for the ones i want to sum, but i'm not sure how to do that. does it have to do with zip() to get them paired up properly?
07:05  dietnews: zip() on the two lists pairs them together the way i would need to sum them
07:06  bob2: dietnews: you could use zip
07:06  bob2: or you could just do 3 lines of add statements
07:07  dietnews: sorry my client crashed
07:08  Chaorain: Hey, I'm new to python if I want "Card.py" to use stuff in "Land.py" I just do  "import Land" at the begining of Card.py? Please check my capitilization too.
07:08  dietnews: oh i tihnk i figured it out
07:09  Chaorain: and the files should be in the same directory right?
07:09  bob2: Chaorain: yes
07:09  bob2: Chaorain: but module names shouldn't be capitalised
07:09  bob2: Chaorain: and if oyu have more than one module, they should be in a package for your project
07:09  shylent: Chaorain: it is not normal to capitalize the modules. and then again there are no 'files' and 'directories' - there are 'modules' and 'packages' maybe you should revise that section of the tutorial
07:09  bob2: Chaorain: http://jcalderone.livejournal.com/39794.html
07:09  dietnews: http://paste.pocoo.org/show/302604/
07:10  dietnews: i cant believe i figured that out
07:10  Chaorain: ok, so lower case it is.
07:11  bob2: dietnews: interesting!
07:12  dietnews: was that a weird way to solve it?
07:12  bob2: that will be slightly hard to transfer to your other problem
07:13  dietnews: yeah,  i need to sort the values by date which this doesnt seem like it would be able to do
07:15  Tau: hey. i'm trying to make gnome menu launch a pygtk application however it doesn't works.
07:15  Tau: i put chmod +x file.
07:15  Tau: and, i have put it in the PATH but even so it fails.
07:16  Tau: did someone have the same prob ?
07:16  dietnews: i suppose one solution would be to create a bunch of lists each with the date and a single value and then summing them seperately
07:16  dietnews: however that seems messy
07:16  dietnews: i mean a bunch of zipped lists
07:37  soulseekah: hey there
07:37  soulseekah: How can I get a partial match in re?
07:38  soulseekah: For example: re.compile('123456789'), and I want matches for 1,12,123,12345, ... 123456789
07:38  soulseekah: where 125 would not get a match
07:40  soulseekah: is the only way to have (1 or 12 or 123 or 1234 ... or 123456789)?
07:41  soulseekah: ..or maybe use lookbehind <= ?
07:42  Jerub: soulseekah: um, you just have to do this:
07:42  Jerub: '1(2(3(4)?)?)?)'
07:43  Jerub: etc
07:43  soulseekah: ah, so simple..
07:43  soulseekah: I'll go try.. thanks!
07:44  soulseekah: btw one more thing while we're on re
07:44  bobthemilkman: I don't see what's wrong with 1[2-9]+
07:44  bobthemilkman: Oh wait, nvm
07:44  soulseekah: What is the correct way to indicate a newline \n if the string is raw?
07:44  teratorn: can anyone think of a way to regain control of a linux system where all files have been stripped of their execute bit and all you have is already-running root zshell?
07:45  Jerub: teratorn: sure.
07:45  Jerub: zsh was it?
07:45  pgurumur: How do I convert HTML chars to string in python? I mean %20 mean '
07:45  teratorn: Jerub: yep
07:45  bobthemilkman: teratorn: chmod +x /bin/bash, bash
07:45  bobthemilkman: Would be my first personal step
07:45  soulseekah: Is it r'\n' or r'\\n'?
07:45  teratorn: bobthemilkman: *all* files stripped of *execute* bit, which means *NOTHING WORKS* :)
07:45  bobthemilkman: Oh that's right, chmod won't work.
07:46  Jerub: teratorn: okay, so you have the powe to move around the file system, but have directories had their +x bit stripped?
07:46  Jerub: or was it just files?
07:46  teratorn: I'm not sure.. someone in #zsh has the problem
07:46  teratorn: but would it help?
07:46  bobthemilkman: teratorn: Man, this is like the ultimate nerdsniping problem.
07:47  bobthemilkman: Man, how does one get into that sort of situation?!
07:47  bobthemilkman: Wait
07:47  bobthemilkman: Wait wait wait
07:47  purch: teratorn: live-cd or attach hard drive to another computer
07:47  bobthemilkman: Turn off the system. Take out the hard drive. Put it in another computer. mount it, chmod -R (i think?) /bin, /usr/local/bin, /usr/bin, /sbin
07:47  bobthemilkman: Oh! Live-cd is even better than my idea!
07:48  teratorn: yep, that's probably what he will have to do
07:48  teratorn: but we were trying to be clever
07:48  bobthemilkman: This does, however, remind me of one legendary tale about MIT hacking culture
07:48  teratorn: but we can't seem to figure out how to assemble a call to chmod(2) in side the current zshell's address space :)
07:49  teratorn: bobthemilkman: someone idiot ran "chmod -R 644 /"
07:49  teratorn: *some idiot
07:49  bobthemilkman: did chmod chmod itself?
07:49  soulseekah: Jerub, thanks for the help, works like a charm
07:49  bobthemilkman: I guess it did, or we wouldn't have this problem.
07:49  teratorn: bobthemilkman: yep!
07:50  kerio: teratorn: set umask to 0, copy chmod?
07:50  bobthemilkman: teratorn: I guess "some idiot" is the same person with the problem? hehehe
07:50  teratorn: and it turns out you can't get a umask that lets you create executable files with shell redirections
07:50  teratorn: kerio: we weren't able to get umask 000 to help at all :/
07:51 --- kwame is now known as kwame_ZzZzZzZzZ
07:51  bobthemilkman: Well, my first piece of advice would be this: Don't panic. Don't do anything without first thinking about it (such as turning off the machine out of instint)
07:51  teratorn: I was thinking there might be some way to hack the system with a root shell and access to /proc, but I can't seem to find anything
07:51  dash_: it's never too late to panic
07:52 --- dash_ is now known as dash
07:52  soulseekah: :)
07:52  bobthemilkman: http://www.ee.ryerson.ca/~elf/hack/recovery.html
07:55  Rotham: wtf are you supposed to say to yourself after you spend a few hundred hours on a project... and then find something totally made that does exactly what you were looking for :(
07:55  Jerub: Rotham: you say, that was an interesting learning experience.
07:55  bobthemilkman: Rotham: My 2nd year of graduate schoool?
07:56  Rotham: lol
07:56  soulseekah: Jerub, there is a problem with re.compile('1(2(3)?)?'), it will return a valid find in strings like '15' or '12abc'
07:56  Rotham: both good answers!
07:58  bobthemilkman: teratorn: Does this fellow have *ANYTHING* other than a zshell open?
07:58  bobthemilkman: Possibly an SSH daemon, GNOME, etc?
07:59  bobthemilkman: Also, does he have root access?
07:59  screen-x: Rotham: what did you discover that fitted your needs so well?
08:00  Chaorain: Ok, I want to test a module, How do import it in IDLE?
08:00  kerio: import?
08:01  dash: Rotham: you say "hooray"
08:01  Rotham: http://code.google.com/p/spynner -- only half tested, but its way further along than my mess of code :P
08:02  Chaorain: kerio: uh, I made a python file with a class and I want IDLE to recognize it
08:02  screen-x: Rotham: that does look useful.
08:02  Rotham: yep
08:02  soulseekah: Chaorain, why does it not with import?
08:02 * screen-x bookmarks for later use
08:02  dash: Chaorain: FWIW, hardly anybody uses IDLE
08:02  soulseekah: are you sure it's in one of the system paths?
08:02  Chaorain: soulseekah: don't I need to specify a directory?
08:03  soulseekah: import sys | sys.path
08:03  soulseekah: it should be there
08:03  Chaorain: dash: Ok, what so others use?
08:03  soulseekah: Chaorain: if your module is not in one of those dirs
08:03  soulseekah: you can either a) move it
08:03  soulseekah: or append sys.path.append('yourdir')
08:03  soulseekah: with your module
08:05  soulseekah: or keep your main module and the one you're importing together and use sys.path.append(os.getcwd())
08:05  soulseekah: that way anywhere they are together in one dir they're going to work
08:05  soulseekah: don't forget to import sys, os
08:07  Chaorain: ok you are makeing my head spin, I got "import sys" , is this command correct? "sys.path.append('C:\Blender\Magic\blendgic')"
08:07  soulseekah: no
08:07  soulseekah: C:\\Blender\\
08:07  Chaorain: ah
08:07  soulseekah: escape the slashes
08:08  soulseekah: as soon as you've done that and everything is ok you can go ahead and import yourmodule
08:08  soulseekah: note that this will not work on other computers, where there's no such path
08:09  soulseekah: so better us os.getcwd() to import the current main module path
08:10  Chaorain: soulseekah: ah thats working now, I'm useing IDLE as a way to test,
08:10  soulseekah: doesn't make a difference
08:10  Chaorain: what doesn't make a difference?
08:10  soulseekah: what you use
08:10  soulseekah: the code is the same
08:11  Chaorain: do I need to append each time I start IDLE?
08:12  soulseekah: ...are you writing code into a .py file that you're running?
08:12  soulseekah: or are you using IDLE as an interpreter?
08:12  irees: I need name suggestions... I want to call the module "import.py" (because that's what it does) but clearly I can't call it that.
08:12  soulseekah: name it imp0rt
08:13  irees: import import will always fail :P
08:13  soulseekah: irees: how would you describe your module?
08:13  irees: soulseekah: it basically imports a database schema from a network location
08:13  soulseekah: importdb? importdbs?
08:14  Chaorain: I'm writing notes
08:14  irees: it was called "clone.py" because it was originally used to clone instances
08:14  irees: i might just stick with that
08:14  soulseekah: Chaorain: are you trying to import that one module?
08:14  Chaorain: yes, but more later
08:15  Chaorain: I got a syntax error right now
08:15  soulseekah: just run your module
08:15  soulseekah: if it's just one module
08:15  soulseekah: you have no environment
08:15  irees: btw, __main__.py is great -- just wish it was available in 2.6
08:16  soulseekah: irees, is it not?
08:16  Chaorain: my way may be round about but this makes the most sense to me
08:16  irees: my buddy told me it was new in 2.7
08:16  irees: lemme check...
08:16  Alberth: irees: networkdatabasescheme.py
08:16  irees: oh
08:16  irees: looks like it is available in 2.6! great!
08:17  soulseekah: irees, I'm running it in 2.5 I believe
08:17  soulseekah: yep
08:17  irees: yay
08:17  soulseekah: :D
08:17  irees: there are a number of sometimes-used command line scripts in my package -- it's nice to be able to tell people "run python -m package.module"
08:17  irees: without having to put a ton of stuff in $path
08:18  Chaorain: thanks for the help
08:18  soulseekah: Chaorain, if you're going to load more than one module, you should have some main script that will load them, the main program, that will load your classes or whatever
08:19  Chaorain: kk, thanks
08:19  soulseekah: if you have 1 custom module to load just run it
08:20  irees: it cut down my setup guide by a ton
08:23  Chaorain: What is the best way to make this script and run it??
08:23  soulseekah: open it an press f5 in IDLE i think
08:23  soulseekah: to run a script
08:23  soulseekah: or use cmd python.exe <script>
08:24  irees: hmm, doesn't seem to work actually
08:24  Chaorain: ah, Ctrl + O
08:24  Chaorain: open, duh
08:24  soulseekah: >>> ok, so how would I get this re pattern '1(2(3)?)?' to return a false match on strings like '12kasdmf'?
08:25  confluency: Is there an easy way to get a subdictionary, or "dictionary slice" based on a list of keys?
08:26  soulseekah: something like k,v for k,v in dict if k in list maybe
08:26  confluency: Yeah, I've got that.  I was wondering if there was anything prettier. ;)
08:27  soulseekah: how's that not pretty?
08:27  irees: No -- I was right. __main__.py only works the way I want in 2.7+
08:27  soulseekah: irees what's the difference?
08:27  irees: "That functionality was put back as a new feature in Python 2.7. "
08:28  irees: "SystemExit: /usr/bin/python: xxx.db is a package and cannot be directly executed"
08:28  soulseekah: ohh
08:28  soulseekah: beh
08:28  irees: -m xxx.db.__main__ works
08:28  irees: and -m xxx.db works in 2.7
08:28  confluency: dict([(k,v) for (k,v) in mydict.iteritems() if k in list_of_keys]) is not very pretty.
08:28  soulseekah: I find that uber sexy
08:29  irees: conf: i do that all the time
08:29  irees: filter dicts that way
08:29  irees: usually using filter()
08:29  Alberth: dict(x for x in d.iteritems() if x[0] in list_of_keys)
08:29  soulseekah: Alberth - even sexier
08:30  Peng: list_of_keys? I hope it's set_of_keys.
08:30  Alberth: hmm,  dict((k, d[k]) for k in list_of_keys)
08:31  confluency: Peng: it's actually anotherdict.keys().
08:32  soulseekah: nice
08:32  confluency: Alberth: that's a little better. :)
08:32  irees: i cried when I could replace Set with set
08:33  Peng: confluency: Is this Python 3, where that's a spiffy view thingy, or is it a list?
08:33  confluency: Peng: nah, it's not python 3.
08:34  Peng: confluency: frozenset(anotherdict.iterkeys()). D:
08:34  Peng: Err, I meant :D but D: works too.
08:37  detly: I have a question about the terminology used in the C API manual - if a function is documented as returning a "new reference", that means I *don't* need to INCREF it, right?
08:41  d1b: morning does anyone have any modules to add to https://github.com/d1b/python-check-script/blob/master/python_hunt.sh
08:41  d1b:  / functions
08:45  shylent: whats that supposed to be? thing one shall not use?
08:46  shylent: ahh, I see (after reading the README)
08:47  shylent: dangerous in what sense, though?
08:47  soulseekah: injection I think
08:47  VladDrac: shell=False is dangerous?
08:47  shylent: then the list is kind of meaningless
08:47  VladDrac: php_hunt.sh:
08:47  VladDrac: echo "True"
08:48  shylent: I think one can not really badmouth php here anymore, since http://www.pyhp.org/ exists
08:48  shylent: in all honesty :P
08:48  VladDrac: sure we can
08:49  d1b: shylent: um maybe
08:49  d1b: like subprocess is fine in general but if you are running commands that are based on user input with shell false you can run into problems
08:49  VladDrac: the total lack of logic/presentation separation isn't the only downside of php
08:49  shylent: no, d1b, I dont think that list makes any kind of sense in any kind of way
08:50  d1b: shylent: ah ...
08:50  bob2: ast doesn't indicate issues
08:50  VladDrac: d1b: you mean shell=True?
08:50  d1b: VladDrac: yes that!
08:50  d1b: bob2: i was told to include it ^ ^ by someone else
08:50  detly: yeah, I'm pretty sure shell=True is worse for that
08:50  bob2: shell=True lets people potentially shell inject
08:50  VladDrac: eval, exec
08:50  d1b: sure
08:50  shylent: shell=False still lets you run subprocess.call(['init', '1'])
08:50  bob2: cpickle can segfault you and possible exploit
08:51  shylent: or something :P
08:51  VladDrac: .execute.*"\s+% is peudo regexp
08:51  bob2: but regular pickle executes arbitrary code anyway
08:51  VladDrac: (multiline)
08:51  d1b: bob2: and pickle
08:51  d1b: ^ ^
08:51  bob2: right, so it doesn't realy matter
08:51  VladDrac: s/is/in
08:52  bobthemilkman: Okay, I'm trying to speed up my code. Currently for 5 iterations it takes 60 seconds. I did the whole cProfile and stats thing to see which calls are taking the most time. Now I'm not quite sure how to speed up these particular processes, or how to go about it from here.  (I'm already running the program through cython->icc -fast)
08:52  bobthemilkman: http://paste.pound-python.org/show/365/
08:52  d1b: bob2: yeah some one was like 'ast' is bad
08:52  d1b: so i added it
08:53  bob2: that doesn't seem to be a sensible way to produce a list
08:54  d1b: bob2: sorry?
08:54  d1b: list... no it is a bash script...
08:54  shylent: 'someone told me'
08:54  bob2: whatever
08:54  d1b: oh that ^ ^
08:54  bob2: bobthemilkman: deepcopy usually means your code can be rewritten :)
08:54  bob2: bobthemilkman: pastebin it?
08:55  d1b: shylent: the some one who told me has code to show me later ^ ^
08:55  bobthemilkman: http://paste.pound-python.org/show/366/
08:55  d1b: if they can't show me ill remove it
08:56  bob2: bobthemilkman: except: is always a mistake
08:56  bob2: unless you raise again
08:56 --- gtca is now known as World-of-Apathy
08:56  shylent: bobthemilkman: .. global? whats stopping you from passing them around as arguments?
08:56  bob2: the initobj thing is a bit bizarre
08:57  bob2: bobthemilkman: line 115: for triangle in self.triangles:
08:57  bob2: xrange() over a list is usually silly
08:57  VladDrac: a bare except?
08:57  VladDrac: not gonna waste time on code like that :)
08:57  bob2: it's a bit confusing
08:58  bob2: try: blocks should usually only be a couple of lines
08:58  bob2: 4 spaces is easier to read than 2
08:58  bob2: bobthemilkman: what's it do, overall?
08:58  bobthemilkman: It's an evolutionary algorithm to produce the mona lisa from triangles
08:59  bobthemilkman: But I'm all out of time and have to go meet with my advisor now. >.<
08:59  bobthemilkman: I'll come back later!
09:03  Chaorain: I'm trying to get IDLE to run a file on startup. does this look good for the enviromental variable? "C:\\Blender\\Magic\\blendgic\\setup.py"
09:04  irees: in optparse, can I specify a default option for an argument, but still find out if it was part of the command or not?
09:04  irees: I have --user, default is "root".... I want to see no --user, vs. --user, vs. --user=someoneelse
09:04  shylent: Chaorain: why? I think, whatever you are doing may be done differently
09:05  bob2: blender and idle
09:05  bob2: that'll be awesome
09:05  Chaorain: probably, but I wanted to try it
09:05  Alberth: irees: use a different default than you advertise (preferably one not typable by a user, like 'None')
09:05  irees: bobthemilkman: i see global variables used alot in other graduate student's code -- just because it works doesn't make it a good idea :)
09:05  bob2: I wouldn't bother using idle
09:05  Chaorain: When I'm done I'll use Blender exclusivly
09:05  shylent: Chaorain: try what? :P you haven't yet stated what you are actually doing
09:06  Chaorain: IDLE startup file
09:07  seoseo: hi, is there a way to do something like pattern.sub(text, some_function) so the function is called for each match and returns the the text to be put in place of the matched one ?
09:08  irees: you could do that with a regex
09:09  irees: for match in re.finditer("(\d+)", "1 2 3"): print match.groups()
09:09  seoseo: irees: the deal is passing the matched text to a function, I know ho to use normal regex
09:09  seoseo: irees: that prints, that doesn't replace
09:10  seoseo: I want to pass matched text to a function for processing => replacing
09:10  Chaorain: ok the online guide says to start IDLE with "-s" But I can't find the .exe, What am I missing?
09:10  irees: process the text, then replace it in the source..
09:11  bob2: I'd really not bother with idle
09:11  irees: i don't know if there is a "combined" method
09:11  irees: that takes a callable
09:11  dietnews: i've been trying to solve the same problem for hours :(
09:11  Chaorain: I've been useing the start menu shortcut
09:12  dietnews: bob2, i still haven't figured out how to  do that sum
09:12  bob2: dietnews: ok
09:12  dietnews: ive been trying to find anything i can in the documentation on lists and dicts
09:12  irees: what are you trying to do?
09:12  bob2: nothing to do with that really
09:12  dietnews: what do you mean?
09:13  dietnews: irees, its really simple for someone competant
09:13  Chaorain: I'm useing IDLE to test my scripts
09:13  irees: ok, describe it to me
09:13  irees: we'll find out if i'm competent or not :P
09:13  irees: (hint: probably not!)
09:14  bob2: def whatever(): return (0,0,0) ; d = collections.defaultdict(whatever) ; for row in data: d[row[0]] = tuple(x+y for x, y in zip(d[row[0]], row[1:]))
09:14  irees: <3 collections.defaultdict
09:14  dietnews: http://paste.pound-python.org/show/367/
09:14  irees: one of my favorite modules
09:14  dietnews: can you talk me through how that works bob2?
09:15  bob2: make a default dict with as amny zeros was whatever
09:15  dietnews: okay
09:16  dietnews: why couldnt that just be: d = collections.defaultdict(0,0,0)
09:16  bob2: tuple(x+y for x, y in zip(d[row[0]], row[1:])) returns a tuple with the sum of each pair of matching elements in d[row[0]] and row[1:]
09:16  bob2: defaultdict's argument is a function that is called to create a default value
09:17  dietnews: i get that
09:17  bob2: 0,0,0 is not a function, 'whatever' is
09:17  dietnews: oh, because it needs to call the method every time a new value is needed
09:18  dietnews: the whatever method
09:18  bob2: it calls the function for each default value, yes
09:18  dietnews: oh okay
09:18  irees: are you just trying to invert the list?
09:18  dietnews: so what is going on in that for loop?
09:18  bob2: nothingm really
09:18  bob2: just walk over each value
09:18  bob2: add it to the existing value for that year
09:19  irees: i'm assuming "sumdata[item[0]] = sumdata[item[1]]" should be "sumdata[item[0]] + sumdata[item[1]]"
09:19  irees: += i mean
09:20  dietnews: it works either way
09:20  irees: ?
09:20  dietnews: er
09:20  dietnews: no neermind
09:20  dietnews: i made a type
09:20  dietnews: i thought you were refering to something else
09:20  irees: are you trying to add both item[1] and item[2]? to item[0]?
09:20  dietnews: i have another editor with: for item in data: sumdata[item[0]] = sumdata[item[0]] + item[1]
09:21  Chaorain: ok, I'm trying a different aproach, how do I execute a script after running python.exe from command line?
09:21  dietnews: i have a bunch of records in a database which are date stamped and they have a bunch of columns holding integers
09:22  dietnews: i need to sum each column by date
09:22  dietnews: to make a chart
09:22  irees: ok
09:22  irees: do you want to make the dictionary key item[0],item[1]... ?
09:22  irees: it's not really clear what you're trying to d
09:22  dietnews: bob2 gave me the solution but im really new to programming and dont really understand why his solution works
09:23  irees: bob2's solution is a little fancy and neat, but hard to explain to new users :)
09:23  dietnews: so i have this sample data: data = [(2001,1,3),(2001,2,2),(2002,1,4),(2002,3,1)]
09:23  irees: what do you want the result to look like
09:23  dietnews: i need to add it up by year and by which position in the list (what do you call that?)
09:24  irees: so you basically want
09:24  irees: result[year][month] = sum
09:24  dietnews: so the solution would be "2001: 3 and 5" and "2002: 4 and 5" (i'm making up this syntax )
09:24  irees: ok
09:25  irees: let me think for a moment
09:25  irees: do you have an arbitrary number of rows?
09:25  irees: i mean columsn
09:25  dietnews: i would like it to be able to handle arbitrary numbers
09:26  dietnews: because i want to recycle this code in the future
09:26  jrhorn424: Are there any python interpreters (REPLs?) that allow line-by-line execution of py files?
09:26  irees: jrhorn: i once dealt with a horrible system that read a file line by line and fed it into eval
09:27  irees: it processed 800mb scripts....
09:27  jrhorn424: irees: that's insane
09:27  irees: (sadism)
09:27  irees: amazingly it worked
09:28  jrhorn424: I'm new to python, and I just wanted to test things out in an interpreter and save my work, and have an interpreter be able to read the log files line by line
09:28  irees: you might look into ipython
09:28  teratorn: ipython, I guess
09:28  jrhorn424: irees, teratorn thanks. Am I looking for a debugger? or is that something different?
09:29  teratorn: the stuff you can type at an ipython prompt isn't *Python* itself, it's its own special language, so keep that in mind
09:29  irees: usually the exception tracebacks are enough to put you on the right track
09:29  dietnews: irees, what documentation should i read in order to understand the solution bob2 gave me?
09:29  irees: diet: 1 sec
09:30  detly: jrhorn424 - wait one minute, I might know of something closer to what you want
09:30  detly: I just have to find the thing...
09:30  Alberth: jrhorn424: wouldn't it be easier to write a python script and run it?   Saving your work would not be needed, as running it again takes less than a few seconds
09:30  irees: dietnews: bob's solution is actually about the best way to do it
09:30  detly: jrhorn424 - "reinteract" might suit you too
09:31  irees: but lemme help write it in slightly expanded form
09:31  dietnews: great, thank you
09:32  Alberth:  jrhorn424 you could even save the terminal session in the doc string of the module
09:33  detly: jrhorn424 - Alberth's solution (just writing and running a script) works well with "python -i myscript.py", which keeps python running after your script is done
09:34  jrhorn424: detly, Alberth sounds good
09:34  jrhorn424: Alberth: I'm afraid I'm new enough to not know what a docstring is
09:35  irees: dietnews: do you know the # of columns beforehand?
09:35  dietnews: i do yes
09:35  dietnews: but ideally i would like to be able to use this with different datasets without having to recode the whole script
09:36  jrhorn424: detly: "reinteract" looks good. I noticed ipython has session logging, too.
09:36  jrhorn424: Alberth: sometimes when I write Stata code, I write a script and run it once in a while to debug. It makes sure things are reproducible. But there is a significant savings in time if I just want to play around with data and save my logfile for later reference.
09:36  Alberth: jrhorn424: a doc string just a piece of text as first statement in a python script or in a class/method/function
09:37  detly: are questions about the C API welcome here?
09:37  bob2: yes
09:37  bob2: but the answer may be 'cython'
09:37  jrhorn424: Alberth: Ah, like when I look at emacs extensions, they have data and commentary at the head....
09:37  ganjanaut: i just recently learned that my school is changing to python as their language for intro programming classes :D
09:39  detly: well, I'll ask anyway: if I call PyObject_Str(someobject), does it borrow or steal a reference to someobject?
09:39  detly: (...or neither?)
09:39  bob2: the docs don't say?
09:39  Alberth: jrhorn424: those are doc strings. There are also code documentation systems that use it, as well as test systems.
09:40  detly: no - they say that the return value is a new reference, but not what happens to the passed-in object
09:40  sidh: Greetings
09:40  jrhorn424: Alberth: very clear, thanks.
09:40  detly: bob2 - http://docs.python.org/c-api/object.html#PyObject_Str
09:40  irees: dietnews: http://paste.pound-python.org/show/368/
09:40  Tordmor: detly: There's no reason to do anything with the passed object
09:40  detly: okay
09:41  bob2: irees: tf
09:41  dietnews: irees: that link isnt working
09:41  bob2: irees: at least use the second param to .get
09:42  Alberth: jrhorn424: I often do "import myfile" in the interactive interpreter for simple tests. and then do  myfile.myfunc() calls for testing.  I normally copy my findings directly back into the .py file (which I have open in the editor right next to the interpreter window)
09:43  irees: bob2 is right, i meant to change it before i pasted
09:43  dietnews: wth, paste.pound-python.org isnt working in chrome
09:43  dietnews: but is in other browsers
09:43  irees: diet: it's working fine in chrome here
09:43  dietnews: weird
09:43  irees: i thought it'd be easier to read with the "or" if someone didn't know the arguments for dict.get
09:44  irees: but anyway, yes, make it result.get(item[0], [0]*columns)
09:44  bob2: hell no
09:44  dietnews: what does [0]*columns mean?
09:44  bob2: explaining short circuiting logical operators, None as a default default for .get and the falsiness of None is way worse
09:45  bob2: dietnews: it is a cheap hack to make a list full of 0s that is column elements long
09:45  dietnews: i see
09:46  irees: alright; i'm beginning to remember why i stopped coming on irc
09:46  dietnews: no you are helpful
09:46  dietnews: !
09:47  bob2: sorry if you feel I'm being rude
09:47  bob2: I was expressing opinions about the code, not you
09:47  bob2: I think it'd be clearer to use an explicit for loop instead of the genexp I used
09:47  bob2: the or thing is quite obscure imho
09:48  irees: it's been pretty common in my experience, but again, most of the stuff i work with is bioinformatics-type code by nonprofessionals
09:49  argent0: print(os.getenv( 'LINES', default=25 )) # prints always 25 no matter what's the console's numnber of lines, How can I fix?
09:49  argent0: python3 btw
09:49  bob2: because it's not exported by the shell
09:49  bob2: iirc
09:50  dietnews: so line 13, is saying "zip result with the current values from item and then what is that i+j for i,j thing all about?
09:50  argent0: bob2: how would you get the # of lines then?
09:50  dietnews: sorry that sentence is messed up
09:50  dietnews: let me rephrase:
09:51  bob2: dietnews: http://paste.pocoo.org/show/302627/
09:51  dietnews: line 13 zips result with item and then it sets a new current using that 'i+j for i,j" loop, is that right?
09:51  Juhaz: irees, it's bad because it's easy to become used to with ints, and forget that if you ever do it with a mutable value, you're screwed.
09:51  bob2: argent0: I guess I'd let curses or urwid or whatever sort it out
09:51  bob2: dietnews: the ting inside tuple() in my code is a generator expression, which is just a very nice way to write a type of for loop
09:52  irees: dietnews: try it out
09:52  irees: python
09:53  irees: a=[1,2,3]
09:53  irees: b=[3,4,5]
09:53  irees: zip(a,b)
09:54  dietnews: i understand that far
09:55  irees: like bob says, a generator expression is a quick way of writing a for loop
09:55  dietnews: after that it sets current to be equal to current+item, is that right?
09:56  irees: it takes the two lists and adds them together
09:57  dietnews: i'm sorry i just cant wrap my head around this. it seems like it should be really obvious
09:57  dietnews: something isn't making any sense to me
09:57  bob2: then rewrite it as a for loop
09:58  dietnews: isnt this already a for loop?
09:58  bob2: another one
09:58  bob2: to add all the pairs
09:58  bob2: for each row in the data, you need to add it to the matching data in the dictionary
09:59  dietnews: right
09:59  irees: it could be that he's hung up on the i,j assignment
09:59  dietnews: i,j are the two values from the zip right?
09:59  irees: unpacking
09:59  irees: yes
10:00  dietnews: are those individual integers or are they each a list?
10:00  irees: so i (the previous sum) + j (the current item's value)
10:00  irees: for each column
10:00  dietnews: i dont understand how it is summing both values from the item
10:00  bob2: dietnews: x, y = [1,2] ; print x ; print y
10:00  irees: that's what the zip does
10:00  irees: anyway i need to sleep
10:01  bob2: dietnews: a tuple on the lhs destructs/unpacks the thing on the right hand side
10:01 --- dengar is now known as jgelens
10:01  bob2: adios
10:01  irees: just play around with it
10:01  bob2: apologies again
10:01  dietnews: thanks for trying to help irees
10:01  irees: bob2: it's ok, i avoid posting because too often it becomes an argument about the correctness of my own approach
10:01  irees: it's just part of irc culture
10:02  dietnews: what is the semicolon in item[1:] mean?
10:02  bob2: slicing
10:02  bob2: "all but the first item"
10:02  dietnews: oooh
10:03  dietnews: so when you zip current with item[1:] it would look something like: ((1,2),(3,4))?
10:03  bob2: [(1,2),(3,4)] yeah
10:03  dietnews: ooooh
10:04  dietnews: so thats how it is summing both values
10:04  bob2: yes
10:04  dietnews: i didnt understand that
10:04  bob2: you zip the current value with the thing you want to add
10:04  bob2: then add each pair
10:04  Xxaxx: how can I process stream from c library in python to variable, at this moment I am using stdout
10:04  dietnews: and i+j would be like saying: [(1,2)] + [(3,4)] ?
10:05  dietnews: er thats not right
10:05  dietnews: that doesnt sum properly
10:05  dietnews: my syntax i mean
10:05  irees: [i+j for i,j in zip([1,2],[3,4])]
10:05 --- World-of-Apathy is now known as World-of-AFK
10:06  Juhaz: it's saying 1+2, and then on the next iteration it's saying 3+4, and then on the next iteration it's saying...
10:07  dietnews: oh i see
10:07  Juhaz: it's just a loop, just using condensed syntax
10:07  dietnews: ive never done that with two variables iterating in a loop
10:07  irees: or you could use numpy
10:07  irees: j/k :)
10:08  dietnews: whats that/
10:08  bob2: library that has things like vectors
10:08  bob2: which you could just add
10:09  dietnews: sounds like overkill
10:09  irees: you can do numpy.array([1,2,3]) + numpy.array([3,4,5] )
10:09  irees: but it is overkill
10:10  dietnews: well i think i understand whats going in your code
10:10  dietnews: more or less
10:11  dietnews: actually looking at bobs code now seems somewhat similar
10:11  Xxaxx: :(
10:13  irees: forgot i had to fix something before sleep...
10:20  tazle: is there any sane way to use the same decorator for functions and methods if it needs to touch positional arguments?
10:26  Juhaz: tazle, a decorator always gets a function, even if you're decorating a method
10:28  Taos: Can anyone think of a sensible way to get infomation about a local host
10:28  shylent: what kind of information?
10:28  m0no: I need a little snippet to convert args, kwargs into a long string with no spaces to use as a key in memcached
10:28  Taos: ''.join([item for item in args])
10:29  shylent: uh, no
10:29  m0no: perhaps ( str(args).replace(' ','') ) or somrthing?
10:29  shylent: depends on what you can have as args/kwargs
10:29  tazle: Juhaz: sure, but a decorated method and a decorated function called the same way will result in different argument lists
10:29  Taos: I wanna guess if they are a computer, or a router or a printer a nas drive etc etc then find out random infomation about them like OS etc
10:30  shylent: Taos: 'local' ?
10:31  shylent: like, a script is running on a printer? :P
10:31  Taos: When i said local I ment internal network
10:31  shylent: anyway, you can use nmap
10:32  Taos: I would in any normal situation but I would want to write it myself
10:32  tazle: Juhaz: the non-sane way I came up with was to add a decorator to the beginning and the end of the decorator chain of the method - one that will take out the 'self' argument from the positional argument list in the beginning, stuff it into keyword arguments, and then dig it back into place at the end
10:35  tazle: also, decorating the bound method rather than the underlying function would of course work - hmm
10:35  Taos: I suppose I could always try urlopen('http://ip') to see if there is a webservice running
10:39  Taos: ugh im bored and outa programming experiments
10:47  paddy__: what is list in python
10:48  Taos: A collection of objects
10:48  Taos: etc [1,2,3, random_object]
10:48  shylent: ordered and mutable collection of objects
10:48 --- Tuffi is now known as Gerrit
10:53  kirthi: hey all
10:54  kirthi: any institute which teach python in mumbai,india
10:54  eggy_: kirthi: no idea, but the online documentation is very good (and you can also download it)
10:55  eggy_: I heard most of the universities teach java and .net etc in Indian universities
10:55  kirthi: @eggy_ you are write, but i need classes to be good in that
10:55  Tau: hey, is there some kind of event in pygtk which makes a function be called when the widget(window) loses the focus ? for example. when u simply click on other application and it gets under the other applications.(i found focus_out_event) however it is actived when you are gonna drag the window(what i need it to not do).
10:55  eggy_: kirthi: you need classes to be in Python?
10:56  shylent: kirthi: not really, all you need is motivation
10:56  eggy_: to be good in*
10:56  kirthi: hahahah
10:56  Taos: kirthi: there are a number of tutorials on the web if thats what you want
10:56  eggy_: kirthi: I think most good Python programmers never took Python classes
10:56  kirthi: @taos...i'm going through the tutorials...but is thinking will it be better if i join the classes
10:57  Taos: kirthi: MIT Openware
10:57  kirthi: @eggy_...you are write
10:57  Tau: hum
10:57  Tau: does someone know
10:57  Taos: Tau: Sorry I don't touch gui
10:57  kirthi: @taos...what is that MIT openware
10:57  Tau: Taos, all right.
10:58  Taos: http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/
10:58  Taos: They cover python heavily in that course
10:59  kirthi: @taos...hmmm,..
11:00  kirthi: i got to know about one institute but it is saying they will teach in 3months
11:00 --- apoirier_away is now known as apoirier
11:00  kirthi: which is too much i guess
11:01  Taos: kirthi, I suggested a good class start there?
11:01  kirthi: @Taos, u mean MIT
11:02  Taos: kirthi, Yes. They do python and some computer science basics too.
11:02  kirthi: @Taos, ok
11:05  Fratyr: Guys. Is there some documentation explaining the purpose of Python on the web or system? Because I still can't get why It exists. We used to test in our company our own CMS for multisite/multilanguage platform versus Plone (robust giant). And guess what? Our system won, and It's wriiten in PHP. But I still see wide usage of python all over the internet and UNIX systems, I would really like to understand Its purpose. P.S I'm not plani
11:06  kirthi: @taos...any idea how much they will charge or is it of free....
11:06  Taos: Fratyr: Php is a joke. Python is 100% more powerful in every test I have incountered, it is likely that Plone was incorrectly configered
11:06  Taos: kirthi, Its free
11:06  lucian: Fratyr: python is a general purpose language. you can use it for anything you like
11:06  Taos: Fratyr, Seriously python is the nicest most entuative programming language I have ever used.
11:06  kirthi: @Taos,....ok,
11:07  Fratyr: Taos: PHP is widely used in the internet as well, and It's simplicity and purpose and understandable. My question, again, is not - What is better? but - what Python was made for?
11:07  Taos: Python is made for everything
11:07  shylent: Fratyr: nah, python sucks, but there is http://www.pyhp.org/html/index.html so not all is lost
11:07  shylent: if you are forced to use python instead of php you can still manage, you know
11:07  Taos: Python can do everything and everythingb etter
11:07  Fratyr: Taos, lucian: do you guys have experience in ASP or PHP in order to have objective opinion?
11:07  Taos: PHP yes
11:07  Taos: I worked on a 200 line code base in an academy
11:07  lucian: Fratyr: yep. but both ASP and PHP are domain-specific languages/environments
11:08  lucian: Fratyr: for one, you're comparing apples to oranges
11:08  Fratyr: Hmm..
11:08  shylent: well, php is, in a nutshell, a templating system with some functions that are not related to template processing (by mistake)
11:09  Taos: Actually your comparing a crayon to a fountain pen
11:09  shylent: I guess it is fine as a templating system
11:09  lucian: Fratyr: and second, PHP is a truly terrible language. no one it their right mind would voluntarily use it
11:09  erifax: lucian: i'd disagree with the assertion about php. i detest php, but it's proven that it can be used in non-webby ways
11:09  Fratyr: lucian: of course, but they are both fruits
11:09 --- stateknife is now known as arkham
11:09  lucian: erifax: sure, but he was talking about "design"
11:09  Taos: erifax, name one thing php can do that every other lanugage cant do faster, more efficently and in a neater way
11:09 --- arkham is now known as Guest8284
11:09  lucian: Taos: that wasn't the point either
11:10  Taos: lucian,  but still its a credable point
11:10  erifax: no it isn't, Taos
11:10 --- Guest8284 is now known as stateknife
11:10  Taos: erifax, why is it not a creadable point
11:10  lucian: Taos: because it's not very relevant
11:11  maligree: can I run a script in such a way that after it has finished running, I find myself in the interactive shell with all variables, functions and objects available to me for analysis/testing?
11:11  Joeboy: PHP is quite nice as a templating engine. Writing apps in it is mental though.
11:11  soulseekah: maligree, debug
11:11  Taos: lucian, how is language power and flexability not to the point, design isnt the only factor in a good language
11:11  erifax: Taos: because i can break your thesis with one language: malbolge.
11:11  Fratyr: what about the simplicity of building web apps and running php code? comparing to python, took me some time to figure out how to start developing on it for web, how to combine It with apache or any web server and how to add new files. There was no enough documentation explaining the right way. f.e: using wsgi module means for every .wsgi file you have to open a new virtual host in apache. That was ridicilous.
11:11 * Taos goes to google
11:11  lucian: Fratyr: that's your problem for using the wrong tools
11:12  Fratyr: well I've tried to find the right way, not google nor this channel really helped me tho
11:12  lucian: Fratyr: in python, there are a ton of web frameworks
11:12  lucian: Fratyr: PHP is a particular framework and that's it
11:12  Fratyr: so you cannot write web apps without a web framework?
11:12  lucian: Fratyr: sure you can
11:12  maligree: sigh, I just realized the -i flag does exactly what I want.. must've misread it before. well thanks anyway
11:12  lucian: Fratyr: but no one in their right mind would
11:12  Fratyr: lucian: but that will be a pain in the ass I guess
11:13  lucian: Fratyr: no, not at all
11:13  lucian: Fratyr: it's comparatively as hard as PHP
11:13  lucian: Fratyr: harder because PHP is idiosyncratic and lacks expresiveness, but that's another issue
11:13  erifax: lucian: i think Fratyr has a point. PHP, while being a crappy language, does do web stuff really easily out of the box
11:13  Fratyr: doesn't web frameworks slows down your app? you know, when you take for example zend framework for php, in order to write hello world, It loads 23 classes and uses MVC pattern to do so..
11:13  lucian: Fratyr: not really
11:14  lucian: Fratyr: in practice, it doesn't matter
11:14  erifax: there is more bootstrapping you have to do for python
11:14  Fratyr: erifax: right
11:14  lucian: erifax: that's because PHP is a web framework
11:14  erifax: lucian: it's also a language :)
11:14  lucian: erifax: that's just an implementation detail
11:14  erifax: yeah, a rather major one, methinks :)
11:14  Fratyr: Let's consider It a language, because regular php is a pure php without framework, you have no other options of using It
11:15  lucian: erifax: yes, but when it comes to deployment you should compare PHP with a python web framework
11:15  lucian: Fratyr: sure it's a web framework, just a very low level one
11:15  Taos: A good web framework like django.
11:15  lucian: Taos: yes, there are many choices
11:15  erifax: lucian: i suppose that's like saying python is a framework around posix
11:15  Fratyr: django is very robust, no?
11:16  Taos: Tis a good web framework
11:16  lucian: Fratyr: django, turbogears, web2py, web.py, Nevow, etc.
11:16  erifax: lucian: not having much experience developing pure python apps for the web, i'm not sure the level of bootstrapping you need to do for it
11:16  lucian: there are TONS
11:16  lucian: erifax: it depends on what you're using, but personally i don't really notice it
11:16  erifax: lucian: but i suppose if you're going through cgi or fastcgi, it's probably pretty similar to php
11:16  lucian: mod_wsgi or fcgi are both easy
11:17  Taos: Or start from the bottom down and build your own in twisted
11:17  Fratyr: lucian: I know the names. I want something that will allow me to build python web apps without bootstrapping tons of classes and defining objects at the very beginning of development. I want an easy way of adding new python files and accessing  them from the net/localhost. Something like that exists?
11:17  lucian: Fratyr: django is a nice framework, yes. no one will tell you that django sucks
11:17  lucian: Fratyr: then use werkzeug or similar
11:17  lucian: Fratyr: that's a very crappy way of developing web applications, but i'm sure there's something like that
11:18  erifax: Fratyr: if you're going for really simple, and i mean dirt simple, why not just write a CGI app in python?
11:18  shylent: what are we discussing here, really? PHP sucks, thats a fact. Another fact is that you can write semi-decent code even in a very bad language. That is all
11:18  Taos: When your only tool is a hammer, everything looks like nails
11:18  lucian: Fratyr: and yes, you can simply code to CGI in python, just like PHP does
11:18  erifax: Fratyr: if you go the CGI route and try to go for complex, you will end up with a lot of DIY code that a framework may have handled for you
11:18  nosklo: django sucks.
11:18  lucian: Fratyr: it's just crap
11:18  Taos: nosklo, reason?
11:18  nosklo: But it is better than using PHP
11:18  nosklo: Taos: lots of reasons
11:19  shylent: I like to phrase it in a different way: "django could be better" :P
11:19  shylent: but I generally agree with nosklo
11:19  Taos: nosklo, name a few because id like to hear your points
11:19  nosklo: Taos: ok, I didn't enumerate them today yet
11:20  Joeboy: Django's like the new PHP. It was ground breaking and cool for a bit, but now it seems a bit crufty and idiosyncratic
11:20  Joeboy: (imo)
11:20  erifax: heh, that's how i feel about j2ee development thesedays
11:20  Fratyr: you guys are awesome, a lot of subjective opinions helps me to decide what's best for me
11:20  lucian: Fratyr: everyone here will tell you to not reinvent too many wheels
11:20  nosklo: Taos: 1) regex for URL mapping.
11:20  Joeboy: If you want work, Django rocks
11:21  Fratyr: Anyone of you want to contribute to the internet and write an article how to establish proper dev environment on windows/unix for python and a proper way of structuring python web apps? interaction with ajax/javascript, writing html code and so on? :-)
11:21  Taos: Fratyr, thats the beauty about python, the community
11:21  Fratyr: Taos: I see that ;-)
11:21  lucian: Fratyr: choose your framework, there is ample documentation
11:21  nosklo: Taos: 2) No URL generation, because of 1)
11:21  Fratyr: Didn't liked the django's documentation. pretty poor at least for the first steps
11:21  lucian: Fratyr: it's indeed probably best to start with Django. there is tons of documentation out there
11:22  Taos: nosklo, uhuh
11:22  lucian: Fratyr: do you know python well?
11:22  Fratyr: some
11:22  lucian: Fratyr: if you didn't read the python official tutorial, do so
11:22  Fratyr: That's why I here. to decide if I really need It. currently using php or java
11:23  Fratyr: And I want to extend my knowledge ;-)
11:23  Taos: Well learn python and see if it compares in unit tests to php
11:23  nosklo: Taos: 3) making new models is too magical
11:23  lucian: Fratyr: if you want to run on java, you can try Jython as well
11:23  lucian: Fratyr: it's python written in java
11:23  nosklo: Taos: 4) The ORM is confusing and not obvious
11:24  Taos: nosklo, my experience with django but I have taken your points on board and thank you for them
11:24  Fratyr: lucian: I prefere not to mix them.
11:24  nosklo: Taos: so I don't have to enumerate the other 16 reasons? I'm still on 4 I have up to 20!
11:24  Fratyr: preffer*
11:24  nosklo: Taos: 5) The orm can't store binary data. At all. In any form whatsoever.
11:25  lucian: Fratyr: why?
11:25  Taos: nosklo, ^^ not till I have learnt more django at some point
11:25  nosklo: Taos: 6) The ORM doesn't cache queries. making the same query twice in a row returns you different sets of the same objects
11:25  Fratyr: lucian: first of all I'm perfectionist, I want to know the original one, then I will try the mixes. But I have bad experience of using Jscript comparing to JavaScript. Original is always the best.
11:26  shylent: JavaScript is in no way the 'original' though
11:26  nosklo: Taos: 7) The documentation doesn't always agree with code, specially in ORM corner cases
11:26  lucian: Fratyr: if you're a perfectionist, you will like python as a language. and see shylent's point
11:26  lucian: Fratyr: just because JScript is a crap javascript implementation doesn't mean alternate implementations are always crap
11:27  Fratyr: lucian: It must be proven first to believe in that :-)
11:27  Fratyr: but I think I'll take a chance and try django
11:27  lucian: Fratyr: again, look at jython, pypy or ironpython. they're all very good
11:27  Sonderblade: i have a function that is decorated 1 time. is it possible to call the function without having the decoration applied?
11:27  nosklo: Fratyr: if you want something simple to start, and yet good as a python framework can be, I suggest you try flask
11:27  lucian: Fratyr: if you want something smaller, werkzeug is very simple and nice
11:28  Taos: Sonderblade, of cource?
11:28  verte: Sonderblade: it's up to the decorator
11:28  lucian: nosklo: Fratyr: yes, there is a cornucopia of tiny web frameworks
11:28  Fratyr: btw, does python frameworks implements "It's own syntax" or It uses original python?
11:28  nosklo: lucian: Flask is werkzeug
11:28  verte: Sonderblade: the object the decorator returns may not be the function, or even related to the function at all
11:28  lucian: nosklo: yeah, i know
11:28  Sonderblade: i mean calling it from outside *without* changing the decorator or the function itself
11:28  nosklo: Fratyr: no, they use original python. Except... django...
11:29  nosklo: Fratyr: django kind of uses magical python
11:29  Fratyr: boom
11:29  lucian: Fratyr: if you're asking whether frameworks use DLSs, they don't. ever
11:29  verte: Sonderblade: unless you store a reference to it, how are you going to get it?
11:29  lucian: Fratyr: and don't listen to nosklo
11:29  chachan: Hi guys, I would like to authenticate though HTTP using basic. I'm following this: http://goo.gl/X3MU6 but I also want to add headers and I don't see the way, any idea?
11:29  lucian: he's right in a way, but you won't notice
11:29  Fratyr: why not? :D
11:29  nosklo: Fratyr: it's still python, but used in a unintuitive way
11:29  chachan: through*
11:29  nosklo: also, django templating sucks
11:29  Sonderblade: verte: i dont know. that is why im asking!
11:29  lucian: nosklo: yes, with that i can agree :)
11:29  verte: Sonderblade: in general, no promises
11:29  lucian: nosklo: to some degree, i do like dumb templates
11:30  Fratyr: so flask or werkzeug will be good I suppose
11:30  verte: Sonderblade: my decorator could do this: def decorate(f): return len
11:30  Fratyr: or pylons ? :)
11:30  nosklo: Fratyr: flask is werkzeug
11:30  Fratyr: alright
11:30  nosklo: Fratyr: pylons (or the new pyramid by the same people) is also good. It's more robust though
11:30  lucian: Fratyr: werkzeug is a small library that implements basic WSGI utils
11:31  lucian: nosklo: many frameworks nowadays build on top of something like werkzeug
11:31  nosklo: Fratyr: flask is simpler. The best one depends on what you want to build... I guess you have to try and see which one fits you better
11:31  freinhard: i got a unicode string that contains utf-8 encoded characters like mystring = u'M\xc3\x9cller' from some broken html parsing, obviously a unicode string can't use mystring.decode('utf-8'), what else can i do about that?
11:32  nosklo: freinhard: your string seems broken. Reparse from the HTML using a good parser
11:32  nosklo: freinhard: I suggest lxml.html
11:32  Juhaz: freinhard, you could encode it as latin-1 and then re-decode as utf-8, but really fix the html parser instead.
11:32  freinhard: nosklo: i'm using lxml
11:33  Taos: freinhard, tried beautiful soup?
11:33  nosklo: freinhard: oh, then how are you parsing? WHy do you get those chars?
11:33  nosklo: BeautifulSoup is unmaintained
11:33  verte: nosklo, Juhaz, Taos: the parser isn't broken, the encoding statement lied
11:34  Juhaz: certainly possible. But in that case, garbage in, garbage out.
11:34  freinhard: yes, that's what it looks like. the page is broken anysways, states iso-8859-1 in a meta tag
11:34  freinhard: Juhaz: common browser are able to handle that and i'd like to be able to do that too :)
11:34  nosklo: freinhard: you can try decoding the page first, and then feeding it as unicode to lxml.html -- that will fix things
11:35  nosklo: freinhard: can you link to the page?
11:35  verte: it may. it's always possible that the page isn't really in any encoding - some utf-8 here, some iso-8859-1 there ...
11:35  freinhard: i'll give the decoding a try
11:37  freinhard: .decode('utf-8') prior to parsing does the trick! thx nosklo
11:37  freinhard: hmm i think i'll try the codecs module to guess the charset
11:37  nosklo: freinhard: the codecs module doesn't include such functionality
11:38  nosklo: freinhard: in fact, reliably guessing encoding is impossible by definition
11:38  verte: freinhard: unfortunately, guessing encodings is probably what made the page lie
11:38  freinhard: chardet...
11:39  nosklo: freinhard: chardet does what browsers do (statistical analysis based on char frequency of each language's encoding), but that's also not 100% reliable
11:39  freinhard: verte: the webpage states it's iso-8859-1, but obviously it isn't
11:39  verte: s/100%/much/
11:39  freinhard: at least the web-dev was somehow stupid and inserts utf-8 encoded strings into a 8859-1 encode website
11:39  verte: freinhard: it's more likely to be correct than you are to guess, in practice
11:40  nosklo: freinhard: usually you want to follow what the page claims
11:40  nosklo: freinhard: utf-8 strings are valid iso-8859-1 unfortunately
11:40  nosklo: freinhard: it just maps to the wrong chars, but it's valid
11:40  verte: it so happens that the page *is* valid iso-8859-1
11:41  verte: it just happens to be not what the author intended
11:41  nosklo: if the page itself tells you the wrong encoding, you're mostly doomed
11:41  nosklo: it will confuse any automatic detection
11:41  nosklo: I think even browsers will do the wrong encoding in this case
11:43  freinhard: webkit does it right
11:46  verte: Vertel: hi
11:46  Vertel: Evening.
11:46  verte: Vertel: this morning I discovered something very unusual - you were logged in as me.
11:47  Vertel: ... huh?
11:47  nosklo: heh
11:47  Vertel: Oh. Using your nick?
11:47  verte: auth to services and everything.
11:47  Vertel: It's my third backup. I-- what.
11:47  verte: oh, maybe not auth to services, I could be confused.
11:48  Vertel: Yeah, that would be vastly confusing.
11:48  NelleV: mmmh... If you are auth, and you change nick; aren't you still auth ?
11:48 --- NelleV is now known as Nelle
11:48  verte: NelleV: yes
11:48 --- Nelle is now known as NelleV
11:49  NelleV: verte: :-)
11:49 --- verte is now known as HAVE_ARGUMENT
11:50 --- ChanServ sets modes [#python +o HAVE_ARGUMENT]
11:50 @HAVE_ARGUMENT: see.
11:50 --- HAVE_ARGUMENT is now known as verte
11:50  NelleV: yep, it's what I thought
11:50 --- ChanServ sets modes [#python -o verte]
11:50  NelleV: but you should still get a warning if you tried to used a registered name
11:51  verte: if you attempt to log in or /nick to a registered name, yes, you do
11:51 --- sp4z is now known as stat1c
11:51  Vertel: Maybe the server was exploding.
11:51  Vertel: That happens sometimes.
11:51 --- stat1c is now known as sp4z
11:52  Taos: How would you guys identify what a host 'is' on a lan
11:52  Taos: e.g. if its a printer, router, mobile device, pc
11:52  sp4z: port enumeration
11:53  nosklo: Taos: host detection heuristics are hard. You have to check for open ports and guess the provided services
11:53  Taos: what, shout at ports until something replies
11:53  wawrek: do I need extra libraries, frameworks to work with couchdb in python ?
11:54  Taos: hmm okay
11:54  nosklo: wawrek: no, you can do everything with just python and couchdb
11:55  nosklo: wawrek: however having a client library means you don't have to encode/decode data, make requests and deal with sending them yourself through http
11:55  wawrek: nosklo: kewl, that's what I thought
11:55  nosklo: wawrek: python is turing complete, you can do everything yourself without using libraries. But that doesn't mean it is a good idea
11:55  wawrek: nosklo: json is very pythonic , why isn't that a good idea?
11:57  nosklo: wawrek: huh, I don't think "json is very pythonic" means anything
11:57  nosklo: you won't write the json yourself, will you? Python includes a json library
11:58  nosklo: wawrek: what I mean is that you have to build the object, convert to json, connect to the server, build a HTTP request, send it, get the results, parse them with json, then finally extract data from the resulting structure.
11:58  nosklo: wawrek: by using a client library, that is all taken care by you. You call a function and get the results.
11:58  nosklo: it's way easier
11:58  wawrek: python can go query it very easily, there are some libs to make it into dictionaries
11:58  wawrek: i know i will do it
11:59  Taos: how does nmap guess at the os?
11:59  nosklo: Taos: port scanning, then signature on TCP packet answers
12:00  Taos: sounds compliated
12:00  lucian: Taos: it is
12:00  nosklo: Taos: it is very complicated
12:00  Taos: "nasty
12:00  Taos: oh well
12:00  Taos: im sure using port based "guessing" at what a device is should surfice
12:01  charas: Is there channel for python web programming?
12:01  nosklo: Taos: launch nmap and parse results
12:01  nosklo: charas: you can ask here
12:02  charas: nosklo, I am basically looking to try out some open source web frameworks which have hassle free registration like drupal
12:02  Taos: nosklo, kinda wanna write it myself outa boredum, I know using software is better than starting from scratch but I am bored
12:02  nosklo: charas: drupal is more of a CMS, not a framework
12:03  nosklo: charas: that said, there are recipes for auth on most python frameworks
12:03  charas: nosklo, Yeah I understand that. Okay what python framework would you suggest to make a skeleton social site
12:03  nosklo: Taos: contribute useful code to some project, instead
12:03  shylent: Taos: nmap can dump its results as xml, should be easy
12:04  hopthrisC: django has what you need for registration, lost password reset, etc. built right in
12:04  hopthrisC: except for the templates
12:04  shylent: Taos: you can write a xml schema for that format, I'd use it myself :)
12:04  charas: hopthrisC, I tried django but I found its user registration complicated
12:04  hopthrisC: how so?
12:04  Nonpython: How would I write a python version of this mathmatical formula? http://bit.ly/h58XZ1 (Yes, the easy way is not working)
12:05  shylent: charas: maybe you should revise you opinion, IIRC in django adding registration is as easy as addin one app to installed apps and adding an entry to urlconf, thats all
12:05  charas: hopthrisC, I was trying registration app in djnago for registration and I was confused where does it start to work and where does builtin auth works
12:05  shylent: charas: doesnt sound very complicated to me
12:05  hopthrisC: shylent: you don't even need django-registration anymore, in most cases
12:05  shylent: charas: if you are not sure how it works you should probably re-read the documentation on authentication in django - its like 1 page or something
12:06  shylent: charas: surprisingly, it 'just works'
12:06  charas: shylent, Thanks I will re-read it. So it means the inbuilt auth is enough for all user registration tasks?
12:06  nosklo: charas: django is not a written program, like drupal. It's just a framework. You have to write the program.
12:07  hopthrisC: charas: no, the built-in auth is for authentication, the built in registration is enough for registration
12:07  shylent: ^^
12:08  charas: Thanks guys. I better try that again and see how it works
12:08  nosklo: and django sucks. :-/
12:08  charas: nosklo, Okay why does it suck now?
12:08  hopthrisC: what doesn't.
12:09  NelleV: charas: that's a question of personal opinion on tools
12:09  verte: Nonpython: exponentiation is **
12:09  nosklo: NelleV: not really a question of personal opnion
12:09  NelleV: even though a lot of person agrees on that one
12:09  nosklo: I have arguments
12:09  NelleV: nosklo: arguments are not proof.
12:09  hopthrisC: and we have working django-sites, so what?
12:09  hopthrisC: shut it.
12:10  nosklo: NelleV: but it already takes you out of "I just don't like it"
12:10  NelleV: nosklo: oh, I never said that.
12:10  verte: charas: it's not very flexible
12:10  nosklo: charas: I just enumerated the reasons, a few minutes before you joined. I could enumerate them again, but you won't get most of them because you don't know it yet
12:10  charas: verte, That I will take. I have also noticed that while playing with it a little bit
12:11  charas: but it's admin is FTW
12:11  verte: charas: it's good for what it's good for, but outside of its niche, it makes you work harder than you should have to
12:11  verte: and yes, the admin is pretty neat
12:11  nosklo: charas: url mapping by regex, no url writing, orm too magical, can't store binary data, no query caching, testing bites...
12:12  NelleV: nosklo: it probably has good points too... Else no one would use it
12:12  NelleV: it is bad for some users, good for others.
12:12  VladDrac: verte isn't that true for most frameworks out there?
12:12  hopthrisC: charas: this was my starting point: http://blog.montylounge.com/2009/07/12/django-forgot-password/
12:12  VladDrac: anyway
12:12  charas: The answer by pylons founder on SO was very succinct about django
12:12  nosklo: yeah, but there are better frameworks
12:12  VladDrac: one big plus for django: it's not php
12:12  lucian: NelleV: it has some definite design flaws, but it's not exactly bad
12:12  VladDrac: (though it sometimes feels php-ish)
12:12  hopthrisC: charas: there is more to it, but from there you should be able to roll your own
12:12  nosklo: NelleV: sure, it's better than PHP
12:12  VladDrac: another big plus: it's not zope
12:12  NelleV: lucian: *every* software has design flaws...
12:12  nosklo: VladDrac: it could run on zope, why not?
12:13  lucian: NelleV: django has several that are widely recognised
12:13  NelleV: lucian: that's not the point
12:13  NelleV: lucian: I use ipython other bpython despite ipython having huge recognized problems
12:13  verte: VladDrac: many frameworks let you drop into any level you like. you can swap template engines and orms with minimal fuss, say.
12:13  nosklo: NelleV: the point is that there are better options, which have the good side of django, but don't have the bad side
12:13  lucian: NelleV: and there are other frameworks with less or worse flaws
12:13  NelleV: lucian: why ? Because bpython lacks a couple of features that are just necessary for me to work with it
12:14  NelleV: lucian: ie, I'm ok with copping with things because other things make my life easier
12:14  NelleV: lucian: it's a question of give and take, and what you are looking for
12:14  charas: nosklo, What are those options, like pylons/pyramid?
12:14  lucian: NelleV: sure. i didn't say "no one should use django"
12:14  lucian: it's still pretty good
12:14  NelleV: after, I don't use django
12:14  lucian: but there's better
12:14  VladDrac: verte unfortunately that doesn't have to be a good point
12:14  nosklo: charas: yes, that's better
12:14  NelleV: lucian: better doesn't mean anything
12:14  NelleV: better is relative to your expectation
12:14  VladDrac: django is probably popular because all you need to know is django templating and django orm
12:14  \3TATUK: If I set var=ctypes.c_void_p() then pass it as a parameter Cfunction(ctypes.byref(var)) which modifies it, is there a way to access it's attributes? (Since I didn't specify them in _fields_ to a ctypes.Structure)
12:14  nosklo: not really.
12:14  lucian: NelleV: there's a consensus about django
12:15  shylent: lucian: whose consensus?
12:15  shylent: lucian: consensus of you and yourself ?
12:15  verte: \3TATUK: in which way does a c_void_p have attributes?
12:15  lucian: shylent: no, of several python developers
12:15  VladDrac: frameworks that are flexible with their orm, templating are more collections of tools / packages, they don't provide alot of overall  integration
12:15  lucian: there are entire communities built around this consensus
12:16  shylent: lucian: sounds like they might have too much time on their hands, really
12:16  shylent: sounds like a silly reason to form a community around
12:16  NelleV: lucian: no, not the entire communeauty
12:16  NelleV: lucian: I know VERY good and well known programmers that launched project using django
12:16  lucian: NelleV: i said "communities". subsets of the overall python community
12:17  shylent: NelleV: I think you are using too much logic in this discussion, - you oughta know, that when its django bashing time on #python its all religion :)
12:17  NelleV: lucian: I don't think you understand my point...
12:17  NelleV: shylent: arf, that's true xD
12:17  lucian: shylent: i don't get you. i never said "django sucks" or anything of the sort
12:17  FxIII: hi all
12:17  lucian: all i said is that it's ok, but it has some design flaws that are don't exist in other frameworks
12:18  FxIII: does someone knows how to set the passprase when I try to wrapp a socket using ssl if the private key is encrypted?
12:18  shylent: lucian: well, everything has flaws :/
12:18  \3TATUK: Verte: take this as an example: http://cairographics.org/freetypepython/  ft_face is the variable in question which in C is set to an FT_Face object, but in python it's initialized as a ctypes.c_void_p() ... so in C ft_face would have attributes such as 'glyph' (ft_face->glyph) which I still need to access somehow in this ctypes code
12:18  verte: shylent: guess you've never seen my code
12:18  NelleV: verte: :-p
12:19  shylent: verte: yea, guess I didn't :P
12:19  shylent: verte: you mean, the kind of code that you see when you open a new buffer in emacs?
12:19  FxIII: it make use of ssl._ssl2 which is a dynamic library
12:19  shylent: verte: yeah, that kind of code most certainly does not contain any flaws whatsoever
12:19  shylent: :)
12:19  FxIII: i dont know how to prevent the use of stdin/stdout
12:20  Taos: I hate knowing how to program and then never knowing what to create
12:20  NelleV: Taos: get a job ?
12:20  Taos: Too young, not got the experience (yet)
12:20  NelleV: Taos: plenty of opensource projects
12:20  shylent: Taos: contribute to twisted :P
12:20  Imek: there are plenty of op- aw
12:20  \3TATUK: Taos: Depends on how well you program.  Do you have any experience with freetype/OpenGL/ctypes?
12:20  Taos: Way to dumb for twisted ^^
12:21  Taos: Nope. Not one bit
12:21  \3TATUK: Ah.
12:21  Taos: I didn't say I could program well I just said I could
12:21  NelleV: Taos: oh, and there's never too young to get a job !
12:21  \3TATUK: Taos: create a videogame with pygame
12:21  \3TATUK: and go from there
12:22  verte: \3TATUK: if you want to access the attributes in python, you probably can't call it a c_void_p, but rather cast it to a struct somehow
12:22  Taos: Nellev, 17.
12:22  NelleV: Taos: I know people who started working at 16
12:22  NelleV: it's allowed legally in france at least
12:22  verte: \3TATUK: c_void_p is treated here like an opaque type
12:22  Taos: NelleV, I am still in fulltime education atm but I have finished most of my work :/ I can't apply for the jobs I want without the degree I need
12:23  nosklo: sweep the floor
12:23  \3TATUK: Verte: so i'll have to define a subclass of ctypes.Structure with the appropriate _fields_ attributes.  This is what I feared because these freetype headers are really hard to code in ctypes... There are ambiguous(seemingly unavailable) and cyclical references...
12:23  lvh: Greetings!
12:23  Taos: lvh, morning
12:23  verte: \3TATUK: any reason not to use cython?
12:23  Fratyr: What python version is best to use atm? 2.7 or 3.* ? I'm currently trying to run Flask framework
12:23  lvh: Fratyr: 2.x.
12:23  \3TATUK: verte: The ambiguous definitions at least have some documentation online but I don't know how to handle the cyclical references in ctypes.
12:24  Fratyr: Thanks
12:24  nosklo: \3TATUK: ctypes is kind of bad and hard to get right, I suggest you write an extension using cpython
12:24  Taos: lvh, perhaps you can give me something to do that doesn't involve game design...
12:24  verte: Fratyr: unless they specify otherwise, existing libraries are for python 2.
12:24  \3TATUK: Verte: Because if I were going to make a platform-specific compilable binary project I'd just code in C.
12:24  Taos: lvh, (and isnt too crazy)
12:24  lvh: Taos: Write a Diplomacy adjudicator.
12:24  Taos: Which is?
12:24  nosklo: yay! diplomacy adjudicators!
12:25  verte: \3TATUK: good on you :)
12:25  lvh: Man, KirkMcDonald must be asleep
12:25  charas: I hear this suggestion about writing dimplomacy adjudicator everytime I'm on #python
12:25  \3TATUK: Verte: don't care to try helping me out with this freetype/ctypes specific code?
12:25  charas: diplomacy*
12:25  verte: lvh: like, totally
12:25  nosklo: \3TATUK: Cython-generated code compiles on all platforms cpython runs
12:25  lvh: \3TATUK: Wait, wait, you know Cython is portable to pretty much all platforms CPython works on, right?
12:25  lvh: \3TATUK: I don't understand the "platform-specific" argument -- Cython isn't
12:26  Taos: what is a dimplomacy adjudicator when its at home
12:26  lvh: Taos: It's a running gag. It's got to do with this board game: http://en.wikipedia.org/wiki/Diplomacy_(game)
12:26  \3TATUK: lvh: the binary you compile is platform specific, heh
12:26  lvh: \3TATUK: That's true for everything
12:26  verte: nosklo, lvh: cython doesn't compile to pypy/jython/ironpython yet, without cpyext/ironclad, which are a bit flaky
12:26  FxIII: any idea on how to open encripted private keys using ssl?
12:27  lvh: verte: pypy does cexts
12:27  lvh: verte: Is that so flaky?
12:27  verte: lvh: via cpyext, yes. but it's flaky and doesn't support the whole API.
12:27  Taos: So is there any ideas that are not a running gag?
12:27  lvh: verte: Okay, if you say so :)
12:27  Taos: :P
12:27  \3TATUK: lvh: Not totally... for example .pyc files are technically platform-independent compiled binaries. (with the exception of the requirement of python)
12:27  lvh: Taos: That doesn't mean it's not a legitimate answer ;-)
12:27  Taos: hmmm
12:27  lvh: \3TATUK: False
12:28  lvh: \3TATUK: (how long is an int on x86_64? :-))
12:28  Taos: It seems mentally complicated and would require a grammer parser
12:28  \3TATUK: lvh: i dunno 64 bits?
12:29  lvh: \3TATUK: And how big is it on x86?
12:29  \3TATUK: lvh: So a .pyc compiled on a 32bit system won't run on 64bit?
12:29  verte: lvh: to give an impression of how flaky it is, Ademan (I think?) spent hours getting psycopg to work with it
12:29  \3TATUK: Wasn't aware. I thought python abstracted the data types and such.
12:29  lvh: \3TATUK: It abstracts it away in programming
12:29  lvh: \3TATUK: ints autopromote to longs, and stuff
12:29  nosklo: \3TATUK: you distribute .py files, it compiles to .pyc on target platform automatically
12:30  \3TATUK: I mean the bytecompiled representation of the data types.
12:30  lvh: \3TATUK: 9223372036854775806 fits in an int on my machine, but it wouldn't on a 32 bit box
12:30  \3TATUK: Thought those were abstracted by the python VM
12:30  verte: lvh: it's not the vm so much as marshal
12:30  verte: er
12:30 --- kanor is now known as tyrus
12:30  verte: it's all the same discussion :)
12:31  eggy_: "This module contains functions that can read and write Python values in a binary format. The format is specific to Python, but independent of machine architecture issues"
12:31 --- tyrus is now known as kanor
12:31  eggy_: So it's certainly not dependent on the platform, only on the python version
12:31  verte: neat
12:32  eggy_: (and there is no architecture marker in the .pyc file, only a version marker)
12:32  verte: that explains why .pyc can live in /usr/share
12:32  lvh: \3TATUK: You are mistaken. type info (int vs long) ends up in the bytecode, here's an example: http://bpaste.net/show/12153/
12:32  Taos: Is there a way to rip open py2exe apps?
12:32  lvh: \3TATUK: 9223372036854775807 fits in *my* ints but it wouldn't fit in a 32bit int obviously
12:33  \3TATUK: Okay so my more specific freetype/ctypes question, then, is: Does anyone know how to handle a cyclical reference like how FT_Face have an attribute 'charmaps' which is of type FT_CharMap* but FT_CharMap has an attribute 'face' which is of type FT_Face ?
12:33  eggy_: lvh: what's your point? I think Python takes care of this automatically
12:33  nosklo: Taos: open it with your zip program
12:33  Taos: fuck me.
12:33  eggy_: \3TATUK: seriously, don't use ctypes, it sucks. It doesn't know the sizes of many C things, it cannot use the C header files
12:34  eggy_: \3TATUK: use Cython, it generates C code that uses C header files, which means the C compiler will know what to do
12:34  \3TATUK: python is partially procedural and so it's like a 'catch22/chicken-vs-egg' of which comes first the FT_Face or FT_CharMap definition, but one will not exist at one point.
12:34  Fratyr: Hmm.. after installing apache2, python 2.7+easy_install, flask. How can I access the files through web now? by just pointing to the file: http://myipaddress/flask/flask.py shows me the content of the file, It doesn't really runs It on python ;-)
12:35  nosklo: Fratyr: you don't need apache
12:35  Fratyr: um
12:35  nosklo: flask can serve itself, you know, that's good enough for development
12:35  Fratyr: how then? o_0
12:35  Taos: nosklo, so after opening it I cant find the code itself, only every module bundled inside
12:35  lucian: Fratyr: for development, don't bother with apache
12:35  nosklo: Fratyr: if you want to use apache, you need mod_wsgi
12:35  lucian: Fratyr: you'll need mos_wsgi for apache deployment
12:36  nosklo: Fratyr: here's row you run it using apache http://flask.pocoo.org/docs/deploying/mod_wsgi/
12:39  Fratyr: lucian: no, if flask can serve It by himself Its fine... It should be started somehow? because http://localhost:5000/ is not available
12:39  Taos: I only found the bundled modules not the original code
12:39  nosklo: Fratyr: you have to start it
12:39  nosklo: Fratyr: python myfile.py
12:40  Fratyr: o_0
12:40  Fratyr: disaster
12:40  nosklo: Fratyr: what do you mean? :D
12:41  Fratyr: It's like running each file from python in order to see It's output, It's like a whole web application supposed to be in one file. I thought I can run flask and put all files in some monitored directory that is accessible via http
12:42  verte: that *is* what you're doing.
12:42  nosklo: Fratyr: you have a main file
12:42  Fratyr: you know like C:\flask\myfile.py -> http://localhost:5000/myfile.py
12:42  lucian: Fratyr: which is your dispatch, among other things. right?
12:42  Fratyr: yes
12:42  lucian: Fratyr: so what's the issue?
12:43  lucian: Fratyr: do you mean how often PHP applications let apache do the dispatch for them?
12:43  Fratyr: Is there some directory in which python will look for the files?
12:44  Fratyr: when running python myfile.py
12:44  Fratyr: *Windows
12:44  nosklo: Fratyr: you point to a main program. THis program is free to include other files, based on url
12:44  lucian: Fratyr: what do you mean? what files. the file is myfile.py
12:44  nosklo: Fratyr: or based on whatever you want
12:44  nosklo: Fratyr: you're not forced to have the same structure of the url in the filesystem, but you could if you want
12:46  Fratyr: Let me test It guys, I'm totally confused. Thanks for patience and help. :)
12:47  nosklo: Fratyr: I suggest you go through the tutorial, and after that you take your conclusions...
12:47  nosklo: Fratyr: http://flask.pocoo.org/docs/tutorial/
12:47  lucian: Fratyr: i think you're confused because PHP confuses the application files and the media files
12:48  lucian: Fratyr: with python, you'll usually have your application outside the server's path
12:48  Fratyr: of course. I'm relying on my php experience and It drives me crazy when things are totally different starting from where to drop files and how to run them in web
12:48  lucian: Fratyr: so static files go in a different place to your application code
12:49  Taos: When opening a py2exe app in 7zip I don't see the original source file not even the pyo/pyd/pyc
12:49  lucian: Fratyr: and python frameworks tend to like to do their own url dispatch, so you'd install a main.py as a dispatch for, say http://example.com/bla/
12:49  lucian: anything after bla/ will get dispatched by your application
12:51  lucian: Fratyr: so you just run flask from your main file and point your browser to the relevant port
12:51  lucian: Fratyr: flask's development server starts and it listens on that port
12:52  Taos: Yup its just not in there
12:52  lucian: Taos: you might want to look at how py2exe packs them in the first place, i guess
12:53  Pinas: hello
12:53  Pinas: i am looking for a tutorial on how to create pluginable python programs - any ideas ?
12:54  nosklo: Taos: they are stored as resources in the exe file
12:54  verte: Pinas: there's a twisted module for handling plugin functionality
12:55  lucian: Pinas: http://www.google.co.uk/search?sourceid=chrome&ie=UTF-8&q=python+plugin#hl=en&expIds=17259,18168,20782,25907,27213,27744,27867,28097&xhr=t&q=python+plugin+system&cp=15&pf=p&sclient=psy&safe=off&source=hp&aq=0&aqi=&aql=&oq=python+plugin+s&gs_rfai=&pbx=1&fp=24ebbf6bcd184597
12:55 --- elpargo_ is now known as elpargo
12:56  Pinas: kk thx
12:56  nosklo: Pinas: http://goo.gl/etuT7
12:56  mtduv: What's the new way of replacing in strings since the current doc says that string.replace is deprecated?
12:57  nosklo: mtduv: use the replace method of string objects
12:57  nosklo: mtduv: mystring.replace('foo', 'bar')
12:57  mtduv: nosklo: Ahhh, thanks :-)
12:57  lucian: Pinas: http://yapsy.sourceforge.net/ is my personal favourite
12:57  shylent: I wonder if there are any useful things left in 'string' at all :P
12:58  lucian: shylent: isn't it dead already?
12:58  nosklo: there are
12:58  Pinas: thx lucian
12:58  nosklo: string.maketrans
12:58  nosklo: string.letters / string.ascii_letters / etc
12:59  shylent: yeah, constants are definitely useful
12:59  nosklo: string.Formatter
13:00 * lucian wonders what string looks like in py3k
13:01  apsinvo: Is there a way to eval code in python? i.e. code="print 'test'"  print eval(code) ?
13:01  Taos: apsinvo, you don't want to eval code
13:01  nosklo: apsinvo: that's rarely useful
13:01  verte: apsinvo: print isn't an expression, so you'd exec it rather than eval it
13:02  fliebel: Hey, I'm trying to follow a set of links on a page with Mechanize by looping over br.links(url_regex=r"\?page=40"). If I just print link, I get quite a lot, but when I add br.follow_link(link) br.back() as in the example on the website it shows only one.
13:02  apsinvo: OK, Ignoring my example with print; code="en.spelling.suggest("comptuer")"  print eval(code) would return 'computer'
13:02  verte: apsinvo: but it's not something that is useful to do, and almost all usages of exec/eval are bugs. we use exec from time to time for static analysis purposes, but it's still ugly.
13:03  verte: apsinvo: where are you getting en.spelling.suggest("computer") from?
13:03  apsinvo: verte: import en
13:03  nosklo: apsinvo: that's not a python standard module
13:03  verte: apsinvo: why don't you just call the function? I mean, why do you have a string of code
13:03  Taos: apsinvo, what if i type '__import__('time').asctime()'
13:04  apsinvo: verte: I'm accepting commands over a socket server. I'll issue 'spelling.suggest("compuer")', python will run en.spelling.suggest("compuer") and return the output to my socket
13:04  verte: apsinvo: rather than, say, a function you've built with combinators or the like?
13:04  Taos: accepting commands is the worst way to use eval. consider my example
13:05  verte: apsinvo: any reason not to use an existing rmi solution?
13:05  apsinvo: What's an existing rmi solution
13:05  verte: like pyro
13:05  lucian: or http://rpyc.wikidot.com/
13:06  Taos: or impliment ssh?
13:07  apsinvo: It must be socket as PHP will be accessing it
13:08  lucian: apsinvo: if it's not coming from another python program, use some existing RPC
13:08  lucian: apsinvo: or define a set of commands that you can parse on the python side
13:08  lucian: eval-ing stuff coming from a network is VERY dangerous
13:09  Fratyr: anyone has sqlite running on windows?
13:09  nosklo: Fratyr: it comes with default windows python
13:09  Taos: or if you must eval set the globals
13:10  lucian: Taos: and the builtins
13:10  Taos: that too
13:10  Taos: But its better not to to begin with
13:10  lucian: and sanitise the input a bit, tooo
13:10  lucian: apsinvo: or you can try pypy's sandbox
13:10  lucian: that's a pretty safe way to run python code
13:10  lucian: but it's pointless, as you can't write your application in the sandbox, you still need a driver
13:11  lucian: it's better to either parse commands or use a RPC
13:11  Fratyr: I cannot use tabulation in python code, right?
13:11  lucian: Fratyr: tabs as in \t? sure you can
13:11  nosklo: Fratyr: you must use some kind of "tabulation"
13:11  lucian: Fratyr: just make sure indentation is consistent
13:12  Fratyr: oh
13:12  Fratyr: alright
13:12  nosklo: Fratyr: best way is to configure your editor to insert 4 spaces when you press tab
13:12  lucian: Fratyr: it is recommended to use 4 spaces for indentation, but it's not enforced by the compiler
13:12  Fratyr: Its 4 by default, so Its fine
13:13  nosklo: Fratyr: which editor are you using?
13:13  Fratyr: currently testing on editplus
13:14  nosklo: goof
13:14  nosklo: good
13:14  cwillu_at_work: Fratyr, you probably want to double check that it doesn't do something silly like inserting a tab character every 8 spaces though
13:14  fliebel: Is there a way I can make looping over Mechanize.Browser.links work while moving around inside the loop?
13:15  Taos: create a variable called all_links = [item for item in m.b.links]
13:15  nosklo: fliebel: store the links in a list first?
13:15  starenka: hello channel
13:15  Fratyr: fck it... :) i'll try It at home on my linux machine.
13:16  Taos: hey
13:16  jase21: whois starenka
13:16  starenka: how can i call method on fly (f.e i have the method name in string)?
13:16  jase21: ?
13:17  fliebel: Taos, nosklo, I'll try, but I think it's because br is mutable, so it doesn't contain the expected document upon the next iteration. Though I'm not sure of that, as going back did not resolve the issue.
13:17  Taos: m.b.r.links shouldnt be mutable I thought it was a generator?
13:18  due: starenka: You'd need to find the actual object behind the method name. Try globals()[string_with_method_name].
13:18  Taos: due: No!
13:18  fliebel: Taos: No, not the links are mutable, but the browser object that is going to browse to them is I think.
13:18  Taos: starenka: map strings to objects inside a dict then call di['method']()
13:19  lucian: starenka: if it's a method on an object, you can also do getattr(obj, method_name)()
13:19  lucian: and don't do what due suggested
13:20  fliebel: Yay, putting them in a var solved the issue, thanks guys!
13:22  starenka: lucian Taos: thanks you!
13:28  eyeofhell: Hello. If i try to __import__ scripts that have different folders ut same script names (i.e. /folder1/build.py and /folder2/build.py) the first import succeed but the second fails with "build not found". I'm setting sys.path each time and clear sys.modules, but it don't work. Is it intended?
13:30 --- omakase_ is now known as omakase
13:47 --- simonrvn_ is now known as simonrvn
13:48  willvarfar: anyone use opengl?  I'm on ubuntu and glGenTextures(3) returns [0,0,0] ... that can't be right??
13:52  tuxx-: looks like glGenTextures returns an array, so i think its doing what it should do? :)
13:53  willvarfar: aha, looking at code, it seems to return zeros if there is no gl context active
13:54  tuxx-: =)
14:00  zatan: hi what three number comes after these 2 ; 5 ; 7 ?
14:00  lvh: zatan: There are an infinite amount of solutions.
14:01  tuxx-: sounds like an exam question
14:01  tuxx-: xD
14:06  lvh: zatan: Here's an example solution. f(x) = -1/2 * x**2 +  9/2 * x  - 2
14:06  lvh: zatan: f(1) = 2; f(2) = 5, f(3) = 7.
14:07  zatan: lvh,  thanks let me look a this
14:07  lvh: f(4), f(5), f(6) == (8, 8, 7)
14:07  lvh: zatan: Why do yo uneed to know this?
14:08  evildmp: is this error: http://dpaste.com/284837/ reporting a problem with circular imports?
14:08  lvh: Like I said, there's an infinite amount of solutions. Mine can't possibly be very interesting
14:09  zatan: lvh, just doing some mathematics exercises
14:09  lvh: zatan: Okay, please don't use #python to do your homework in the future
14:09  kerio: zatan: there are an infinite (really) number of sequences that start with 2 5 7
14:09  zatan: its not homework
14:10  lvh: Does anyone know any REST API documentation they really, really like?
14:10  lvh: I'm looking for something done well to copy.
14:15  marlun: I want a script which fetches all the folders in a given dir and replaces all the 'å' in names to 'a'. I tried only doing this: https://gist.github.com/734700 but I'm getting: UnicodeDecodeError: 'ascii' codec can't decode byte 0xcc in position 2: ordinal not in range(128) What am I doing wrong?
14:18  zamba: marlun: try f.replace('å', 'a') instead
14:18  zamba: f is of type str, not unicode
14:21  Griffon26: should a print at the end of a generator function never be executed twice or is there something wrong with my understanding of generators?
14:21  lvh: Griffon26: Pastebin the code you're talking about please
14:23  marlun: zamba: hmmm then it just goes through and don't change anything and don't show an error
14:25  Griffon26: lvh: I think I've pasted the relevant part, check here: http://paste.pound-python.org/show/369/
14:25  Griffon26: lvh: the "Continuing with" print in the top function is being printed multiple times.. I'll paste the output as well
14:25  gorakhargosh: When python tries to open a file and the file is locked, can the python process die with a bus error?
14:26  Griffon26: lvh: output is here: http://paste.pound-python.org/show/370/
14:28  Griffon26: it's a bit messy with generators within generators, but it's code to prototype a routing algorithm and it's the quickest way I could transform it into routing step by step on each keypress
14:31  lvh: Griffon26: Well, you call optimizeroute multiple times
14:31  lvh: so yes, the print gets called multiple times
14:32  Griffon26: lvh: how do you figure I call it multiple times?
14:32  solstice: hi. on archlinux now, python 2 is installed as /usr/bin/python2. How is do the other linux distro deal with that ?
14:35 --- elpargo_ is now known as elpargo
14:36  souperhearo: If I have a function is there a way to determine if its a class method or just a regular function?
14:37  VladDrac: why do you need to know?
14:39  VladDrac: you can use the inspect module (ismethod)
14:39  VladDrac: at a lower level, a method will have an im_self attribute (which will actually be set if the method is bound)
14:39  VladDrac: but I'd still like to know why you need to know :)
14:41  souperhearo: I wanted to take all of the urls in my django project and print out the pretty names if they do not have names already associated with them
14:41  evildmp: Hi - is this error: http://dpaste.com/284837/ reporting a problem with circular imports?
14:41  souperhearo: The names begin just the function name or if its a class use the class name
14:42  souperhearo: or if its a class method use the class_name.function_name
14:42  lvh: Griffon26: Hm, right, you're not
14:42  lvh: Griffon26: Well, something is
14:42  VladDrac: evildmp, could very well be
14:42  lvh: Griffon26: I'm guessing that your event fires multiple times
14:44  evildmp: VladDrac: how does one deal with a circular import problem?
14:44  evildmp: I can't work out where it might be
14:44  kerio: circular import?
14:44  Griffon26: lvh: yes it does, but I'm calling .next in there on the generator
14:45  VladDrac: evildump: if A depends on B and B depends on something in A, say, A.x, put x into a separate module, and make A and B include that module
14:45  Belxjander: hrmmm
14:45  lvh: Griffon26: Where?
14:46  lvh: Griffon26: I don't know what that generator is or does
14:46  Griffon26: in on_key_press_event
14:47  Griffon26: lvh: see the last line. It's the generator returned by do_routing
14:47  lvh: Right, that has to be called multiple times
14:47  evildmp: kerio: this is the error: http://dpaste.com/284837/ r- I think that VladDrac must be rght
14:48  Griffon26: lvh: I'm not sure what you mean
14:48  VladDrac: filer.vfields.ideo depends on filer.models which depends on (indirectly) files.fields.video
14:49  lvh: Griffon26: I'm trying to follow your code. optimizeroute appears to create progressively more optimized routes?
14:49  woniu: Hello everyone , why 017+32 is not equal to 17+32 ?:)
14:49  VladDrac: 017 is octal
14:50  chronos: Hey people, help me here. I have a server, centos with python 2.4 native, some time ago, someone compiled python 2.6 and put it to /opt/python2.6, now I installed pip, etc, etc, but when try to install stuff in a different prefix I get this error: http://dpaste.de/x4wE/
14:50  chronos: Guys can see that I tried to force EGG cache directory to another path too
14:50  lvh: Griffon26: If you're confused what your call stack is, you can always pdb.set_trace and ask for it instead of just printing where you are
14:51  gorakhargosh: hmm it does die with a bus error when attempting to open locked files
14:52  woniu: oh ,  VladDrac  thinks
14:53  VladDrac: no I'm sure ;)
14:53  Griffon26: lvh: I've reduced the code to just a few lines and there's still something I don't get. I'll paste it in a minute.
14:54  lvh: Griffon26: Okay
14:54  lvh: Griffon26: I'm moving some stuff around here so don't be alarmed if I don't reply instantly
14:55  Griffon26: np
14:56  woniu: You are right ,17(oct)=15(dec)
14:56  lvh: Also 31 oct == 25 dec ;-)
14:57  Aufwind: I know this is offtopic, but this channel has so much skilled people in it. I hope for an answer or a direction for my task. If it is doable in python the better. :-) I need to visualize some geotagged data on a map like pictures on google earth. Is there some api or some librarys for that?
14:58  lvh: Aufwind: google maps has an API
14:58  lvh: Aufwind: You'd create points, typically supplied as KML
14:58  Aufwind: lvh: I'll have a look at that. Thank you!
14:58  Griffon26: lvh: http://paste.pound-python.org/show/371/
14:59  Griffon26: so basically, the print statement at the end of the generator function is executed each time a value is generated. I would expect it to be executed only when StopIteration is raised.
14:59 --- elpargo_ is now known as elpargo
15:02  chronos: I get same error about permission if I try to install manually
15:02  chronos: http://dpaste.de/3hOb/
15:03  lvh: Griffon26: I have no idea what you're doing but that is *not* how generators behave
15:03  lvh: Griffon26: http://bpaste.net/show/12156/
15:03  lvh: Griffon26: As you can see, no continuous exiting
15:03  lvh: Griffon26: How are you running this?
15:10  Griffon26: lvh: I'm not doing anything special. Maybe it's a python or compiler bug causing this.
15:10  lvh: Griffon26: What version/platform?
15:10  Griffon26: 2.6.6 on Gentoo
15:10  lvh: Griffon26: can you run dis.dis agains that thing?
15:11  lvh: http://bpaste.net/show/12157/
15:11  papna_: Griffon26: Run Python with the flag -tt and do this again?
15:11  lvh: As you can see from the bytecode that really should not be possible at all
15:11  lvh: bbl
15:11  papna_: Griffon26: and/or filebin the actual file
15:14  Griffon26: in my dis.dis output the print is within the pop_top/pop_block pair. On to -tt
15:15  lvh: Griffon26: Are you sure your indentation is consistent
15:15  Griffon26: lol, that's it
15:15  lvh: Griffon26: Take your editor, take it out back, shoot it
15:15  lvh: Install emacs
15:16  Griffon26: lvh: it's a matter of configuration. I didn't have the right configuration from the start.
15:16  NelleV: or vim :p
15:16  papna_: lvh: Not only is your demeanor as bad as House's, so are your diagnostic abilities! ;)
15:16  Griffon26: NelleV: I'm actually using vim =)
15:17  NelleV: Griffon26: erf... how the hell did you manage that ? o_O
15:17  lvh: Griffon26: Why does your editor need to be told to do the right thing
15:17  NelleV: ok, install emacs...
15:17  papna_: Griffon26: sys needs to be 8
15:17  NelleV: at least there must bya python-mode per default...
15:17  Griffon26: NelleV: no expandtab, but I did have shiftwidth to 4
15:17  papna_: *sts
15:17  lvh: Griffon26: With any emacs since gnu emacs 21, you have to *change* the indentation command to get it to do the wrong thing
15:17  NelleV: is there a python-mode per default in emacs ?
15:17  lvh: of course
15:17  lvh: has been for years
15:18  Griffon26: lvh: how do you define wrong?
15:18  papna_: lvh: emacs believes a tab is eight spaces wide for Python, or period?
15:18  papna_: Griffon26: When writing Python code, a tab **IS** eight spaces wide.
15:18  NelleV: lvh: to be honest, I *never* had any problems with indentation using vim. Ever... Since day 1
15:18  papna_: Griffon26: (And you don't use them, ideally.)
15:18  lvh: Griffon26: It does whatever it needs to do so that when you produce a thing that needs an indented block, python will interpret it as an indented block
15:18  lvh: Griffon26: Which means that it follows PEP8 when it comes to the consistency rule
15:19  lvh: Griffon26: If you edit code that has tabs, it will do that
15:19  lvh: if you edit 2s code, it'll do that
15:19  lvh: if you edit 4s code, it'll do that
15:19  lvh: if you edit opening-bracket-on-assignment-line code, it'll do that
15:19  Griffon26: yeah, the thing is it isn't detecting the file type. Haven't looked into it yet.
15:19  cnf: i still prefer tabs over spaces, but as most people use spaces i adopted that
15:20  NelleV: Griffon26: you should add a command that display tabs in a certain color in your vimrc
15:20  lvh: I don't see why I should tell my editor what shiftwidth/expandtab should be set to
15:20  lvh: If I edit Go and I edit Python at the same time, the indentation rules chang
15:20  lvh: e
15:20  cnf: lvh: for new files
15:20  Griffon26: NelleV: I have that on my regular box, but not on this laptop
15:20  lvh: cnf: ?
15:20  NelleV: lvh: I use two terminals, two instances of vim, and I don't have problems
15:20  lvh: cnf: Oh, you mean the default
15:20  cnf: you tell your editor what to indent with for new files
15:20  cnf: yeah
15:21  papna_: cnf: Python makes a lot of debateable decisions we should always follow when writing Python.
15:21  lvh: cnf: Yes, but it doesn't work there either
15:21  cnf: lvh: sorry?
15:21  lvh: cnf: The default indentation for Python (following PEP8) is 4s
15:21  cnf: uhu
15:21  lvh: cnf: The default indentation for Go is tabs
15:21  cnf: yes
15:21  lvh: You can have a default, but it still ought to be something specific, not something global
15:22  cnf: so what does it do on a new file
15:22  lvh: cnf: depends what kind of file
15:22  papna_: cnf: What's the file named?
15:22  cnf: that has no filetype associated with it
15:22  cnf: papna_: nothing
15:23  lvh: cnf: Whatever Fundamental says it is
15:23  lvh: (by default, tabs, but you can change that)
15:23  cnf: yeah, your default setting
15:23  lvh: cnf: No
15:23  lvh: cnf: Default for modes that extend Fundamental, sure
15:24  cnf: i never said every filetype should follow your default
15:24  cnf: maybe i should call it the fallback setting :P
15:24  lvh: cnf: Okay, yes, you can set a fallback in Fundamnetal mode and modes that extend fundamental will use it
15:24  lvh: Fortunately I can't remember the last time I actually used Fundamental
15:24  cnf: :P
15:24  cnf: neither can i
15:24  lvh: even *scratch* is Lisp Interaction
15:25  papna_: (Indeed, I agree with its decision to use tabs for tabs in that case.
15:25  papna_: (And vim's.)
15:26  cnf: editors are a hot topic, to be sure
15:26  lvh: I would be surprised if someone hadn't hacked together some crazy-ass piece of vimscript that could detect what indentation was currently being used
15:26  lvh: why is it that every language used to script editors has to be terrible
15:26  cnf: indeed
15:26  lvh: emacs... elisp. vim... vimscript. scite... python
15:27  storrgie: anyone vouch for pycharm?
15:27  storrgie: I am kind of sick of using gedit and nano to work on my stuff
15:27  storrgie: I want a good debugger
15:27  lvh: storrgie: It's not bad
15:27  lvh: storrgie: It does what Emacs did 5 years ago
15:27  storrgie: i need completion and debugging
15:27  lvh: But it's not *bad*
15:27  cnf: i can't wait for TM2
15:27  cnf: but i'll have to
15:27  storrgie: TM2?
15:27  javade06: storgie:
15:27  lvh: TM2 doesn't actually exist
15:27  mage_: storrgie: take a look at pida too
15:27  storrgie: pida?
15:28  spht: I wouldn't hold my breath
15:28  cnf: lvh: not at this time, now :(
15:28  storrgie: I have used eclipse+pydev quite a bit lately
15:28  slestak: anyone use pylint.vim?  had it working ok, but I have borked it.
15:28  cnf: storrgie: textmate 2
15:28  slestak: ewww, eclipse
15:28  mage_: http://pida.co.uk/
15:28  storrgie: slestak, i know, its so heavy
15:28  nu7hatch: hello everyone... i've short question, is there way to patch/extend installed package by another one?
15:28  slestak: pida on linux can swallow vim
15:28  slestak: pida can be built on win32
15:28  storrgie: does pida do debugging?
15:29  storrgie: i like doing runtime object inspection
15:29  storrgie: its how i explore new APIs
15:29  cnf: TM does a LOT of things right
15:29  slestak: my pylint is running, but the compiler errors do not come u in a new windows
15:29  cnf: but it is a far cry from perfect
15:29  slestak: they com up in teh stdout
15:29  javade06: what about SPE
15:29  slestak: that is some good engrish
15:30  storrgie: does pida do debugging?!
15:30  lvh: I try most of the reasonable alternatives once in a while
15:30  lvh: Emacs is terrible but AFAICT everything else is worse
15:30  slestak: looking at the page.  u can too :)
15:30  storrgie: slestak, installing instead
15:31  eggy_: How can I detect the version of a Python inferior from the debugger without calling any functions?
15:31  lvh: I write reST docs, rest-mode is simply the best reST editor in the world bar none
15:31  lvh: eggy_: inferior?
15:31  cnf: lvh: yeah, for me i can only live with TM and vim in a terminal
15:31  storrgie: ewww, i dont like emacs or vim... i'm an ignorant minimalist
15:31  eggy_: lvh: the debuggee (assuming a C debugger like gdb)
15:31  cnf: neither are perfect, everything else is just worse to me ^^;
15:31  slestak: the default in pida is a nice editor called mooedit
15:32  lvh: eggy_: Oh, no idea
15:33  eggy_: Basically, the problem is that I need to find out the type of an arbitrary object safely (i.e. without modifying state), and flags like Py_TPFLAGS_INT_SUBCLASS are new in 2.6
15:33  eggy_: Now usually I can compare like ob->ob_type == &PyInt_Type, but for things like PyBaseExceptionObject I dunno how to do this, and it's ob_type is PyType_Type
15:35  eggy_: s/and/as/
15:35  eggy_: Downcasting is a bitch :(
15:38  apsinvo: 'import nltk' takes forever - is there any way to avoid this? This only way I can think of is to import nltk, then run a socket server on a loop which I can call from elsewhere
15:39  papna_: apsinvo: It has to do a lot on run. That time will have to occur at some point.
15:40  papna_: apsinvo: Also, SocketServer is so bad it shouldn't be used.
15:41  Niyalla: Hi, I got a really stupid question. I am trying to run a python script on windows 7, python is installed, but simple opening the script is not doing anything. Can someone tell me what I am doing wrong?
15:41  papna_: Niyalla: How are you opening it?
15:41  papna_: Try opening up the command prompt, navigating to it, and running "python yourfile.py"
15:42  apsinvo: Is there a quick way to tokenize a string by spaces ?
15:42  Niyalla: Double clicing and cmd..
15:42  Niyalla: i tried that
15:42  lvh: askhl_: s.split()
15:42  papna_: Niyalla: How does this differ from what you expect?
15:43  Niyalla: Uhm, should open a gui, and atm its not doing anything
15:44  Baribal: Hi. How do you execute a Python script on Windows? A friend of mine is clicking on the files icon and only gets the editor. On unixes, I'd usee #!, but, well, it's not a Unix.
15:44  papna_: Niyalla: Pastebin a cmd session where you "type yourfile.py" and "python yourfile.py"
15:45  papna_: Baribal: Change the association for .py files to C:\Python26\python.exe (or Python27 or whatever), like with any other extension.
15:45  ojacobson: pythonw surely
15:45  Baribal: Thanks, papna_
15:46  papna_: ojacobson: No.
15:46  ojacobson: No?
15:46  ojacobson: You *want* the console, I suppose?
15:46  Juhaz: the convention is that .pyw files are for pythonw
15:46  papna_: ojacobson: .py files should associate with python.exe and .pyw files should associate with pythonw.exe, so that his computer works like *everyone elses*
15:46  cnf: what does pythonw do?
15:47  papna_: cnf: No terminal.
15:47  ojacobson: Ah, fair enough. I don't have a windows box around to examine.
15:47  cnf: oh
15:47  apsinvo: I have a socket server listening and accepting on an infinite while loop. Is there a way to gracefully catch ^C or ^D, and close the sockets before terminating. At the moment, 2 ^Cs will kill the script but I can't reopen it for a while as it thinks the socket is still in use
15:47  ojacobson: cnf: compiled as a windows app rather than a console app, so it doesn't force the console subsystem to start
15:47  ojacobson: otherwise identical
15:47  cnf: i don't get the windows thing
15:47  _habnabit: apsinvo, any reason you're not using twisted?
15:47  cnf: my coworker tried to run python in the win7 power shell
15:47  cnf: and it launched a bloody cmd thingie
15:48  apsinvo: _habnabit: What is that ?
15:48  _habnabit: apsinvo, it's a networking library.
15:48  ojacobson: cnf: wpsh isn't a console app, so the window it owns isn't a console window
15:48  ojacobson: python.exe requires a console window
15:48  apsinvo: Ill check it, thank you
15:48  cnf: huh?
15:48  cnf: it isn't a console app?
15:48  cnf: wtf?
15:48  ojacobson: cnf: that's an actual distinction in the .exe metadata and startup protocol
15:48  ojacobson: It's an app that gives you a terminal, but it's not a "console app" as far as windows is concerned
15:49  cnf: no wonder i can't get along with windows O,o
15:49  cnf: so python on windows is locked to the bloody cmd thingie?
15:50  ojacobson: hence pythonw, which uses WinMain rather than main
15:50  ojacobson: (and is compiled as a windows application, instead of a console application)
15:50  cnf: oh, so if you run your python scripts with pythonw in powershell, it works "as expected" ?
15:50  papna_: Frankly, sometimes it's amazing anything ever works on Windows.
15:51  cnf: papna_: indeed
15:51  ojacobson: cnf: I'm not a windows developer, so I can't tell you whether it's "as expected"
15:51  ojacobson: in particular I'm not sure what happens to stdin/out
15:51  ojacobson: /err
15:51  cnf: the lack of anything even resembling a halfway decent terminal app just… you know…
15:51  cnf: ojacobson: meh, he can figure that stuff out himself
15:52  cnf: i don't really use windows
15:56  chachan: Hi guys, I would like to convert a XML into a dictionary, is there a module which can help me on this?
15:56  papna_: chachan: That depends on the format.
15:56  papna_: chachan: Most generally, lxml and write the conversion code yourself.
15:57  papna_: chachan: There are things that try to do this automagically, but they are too bad to bother with.
15:57  papna_: chachan: Why a dict?
15:57  chachan: papna_,  it's: <?xml version="1.0" encoding="UTF-8"?>
15:57  papna_: chachan: That's not the format.
15:57  papna_: chachan: By "format", I mean schema, meaning.
15:57  frosch: chachan: what do you do with this case:  <listOfFoos><foo><data>1</data></foo><foo><data>2</data></foo></listOfFoos>
15:58  ojacobson: hmm, looks like a plist, almost
15:58  frosch: chachan: shall myDict['foo'] then return a list of <foo> references?
15:59  chachan: frosch, yes
16:00  chachan: papna_, ok, let me check something
16:00  gwork: chachan: if speed is not imported, you can use minidom very easily
16:00  papna_: chachan: Can you be concrete about the problem you are facing?
16:00  papna_: gwork: EWWWWWWWWWWWWWWWWWWWWWWW
16:00  gwork: papna_ : i know, but it works :)
16:00  papna_: gwork: Poorly!
16:00  papna_: gwork: ElementTree stuff is so much better.
16:00  papna_: gwork: Don't recommend minidom to peopl.
16:00  papna_: e
16:01  apsinvo: Is there a way to set breakpoints or edit on the fly?
16:02  apsinvo: I have 4 imports that take forever to open, I dont want to kill the script each time I make a mod
16:02 --- elpargo_ is now known as elpargo
16:02  gwork: papna: is elementree builtin yet btw?
16:02  chachan: papna_, I would like to get this http://goo.gl/gl60Z
16:02  lvh`: gwork: Yes.
16:03  papna_: gwork: There are multiple elementtree implementations in the stdlib.
16:03  lvh`: gwork: There seriously is no reason to ever use minidom anymore
16:03  lvh`: A few days ago someone managed to get it to use *2GB* of memory
16:03  lvh`: On a frickin 40MB XML file!
16:03  gwork: lvh: thanks! great..  lol. then i need to study those lib pages again :)
16:03  chachan: I was checking pyxml, what about it?
16:03 --- lvh is now known as lvh``
16:03 --- lvh` is now known as lvh
16:03 --- lvh`` is now known as lvh`
16:03  d1b: lvh: really?
16:03  lvh: d1b: Yes.
16:03  d1b: hahahahahah
16:04  d1b: that is most lol
16:04  itmustbejj: how would I use lxml.etree.iterparse to parse xml coming from a request instead of a file?
16:04  d1b: sorry revoked lol.
16:04  d1b: iolaire: use fromstring()
16:04  d1b: erh woops, i meant itmustbejj
16:05  papna_: gwork: Because that schema has some unique stuff, like type="integer" making you want to turn their "5" into an int, not a string, I would not want some autoconverter but would find something specifically for this format (if there is such a thing) or use xml.etree.cElementTree/lxml.etree to walk through it myself and make the structure I want.
16:05  itmustbejj: dlb: so iterparse(fromstring("http://myxml.source.com")) ?
16:05  cnf: oh, ffs
16:05  cnf: i hate encoding errors
16:06  papna_: cnf: Encoding errors, and a mistake?
16:06  cnf: no
16:06  d1b: iolaire: from lxml?
16:06  gwork: papna: thanks.. i'm so accustomed to dom that minidom was my first choice. I do use python for the speed of coding, but i'm reading the xml.etree docs right now.
16:06  cnf: someone elses SOAP interface returning ascii instead of utf-8
16:06  cnf: python throwing errors
16:07  gwork: cnf: what soap lib are you using?
16:07  cnf: suds
16:07  hydester: is there a way to convert a string to a literal?  for example, "does\this\test\not\work?" is coming in to my function, where \t is a tab, \n is newline, etc.  i want it to convert it to "does\\this\\test\\not\\work"
16:07  papna_: cnf: Valid ASCII IS utf-8.
16:08  salat: hey..how can i draw _over_ the childs of a gtk.Layout ?
16:08  d1b: itmustbejj: iirc, it is something like from lxml import etree --- etree.fromstring ... use it
16:08  chachan: papna_, thanks :)
16:08  papna_: hydester: Perhaps you want raw literals r"foo\nar"
16:08  cnf: UnicodeDecodeError: 'ascii', <stuff> ordinal not in range(128)'
16:08  papna_: hydester: docs.python.org/tut explaisns them.
16:08  itmustbejj: dl oh I gotcha you are saying use fromstring instead of iterparse
16:08  papna_: cnf: Sounds like you are using a bytestring where a unicode string is required.
16:08  d1b: itmustbejj: http://codespeak.net/lxml/tutorial.html
16:08  cnf: papna_: i'm not doing anything
16:09  papna_: cnf: Python stupidly tries to decode it using ASCII, but it's not ASCII.
16:09  papna_: cnf: Okay, I don't know what you're doing.
16:09  hydester: papna_: i understand how to set that to a variable.  but this is coming in as a non-literal, and i want to change it to its literal representation after the fact
16:09  lduros: Hi, I'm new to python, and I'm trying to read the lines of some html file, like this: f = open('blah.html', "r") and then for line in f: but I get the following error: UnicodeDecodeError: 'utf8' codec can't decode byte 0x97 in position 3602: invalid start byte -- i googled the error but I'm not sure what to do to avoid this. Obviously there's an issue with character encoding. Thanks
16:09  cnf: papna_: soap fetch, print
16:09  cnf: that's all
16:09  papna_: cnf: But your statement about 10:07 < cnf> someone elses SOAP interface returning ascii instead of utf-8
16:09  papna_: is nonsense.
16:09  papna_: cnf: Oh, so you ARE
16:09  papna_: cnf: You're printing.
16:09  papna_: cnf: You can't print a unciode string directly. It has to be encoded.
16:10  cnf: o,O
16:10  papna_: cnf: Encode it in the appripriate encoding.
16:10  cnf: it's an object, how do i do that?
16:10  papna_: cnf: A unicode string is an abstract sequence of unicode code points.
16:10  cnf: and how do i find the encoding?
16:10  papna_: cnf: some_unicode.encode("the_right_encoding")
16:10  papna_: cnf: I don't know what encoding your terminal is / the file you want should be.
16:10  cnf: yeah, it's not a string, it's a soap object, and i don;t know the right encoding
16:11  papna_: cnf: It's difficult to believe that SOAP has a __str__ so badly written, and I've never ran into it.
16:12  hydester: is there way to take a string and turn it into its escaped representation?  like convert chr(9) to "\\t" ?
16:12  papna_: cnf: *SUDS
16:12  papna_: cnf: Ask in #suds preferably with reproducing code.
16:12  papna_: hydester: Why?
16:12  gwork: repr?
16:13  cnf: see, i hate encoding errors
16:13  gwork: cnf: i so agree
16:14  kerio: hydester: repr()
16:14  papna_: cnf: To be quite frank, your statement above suggests to me you don't understand encodings.
16:14  hydester: kerio: sweet!  thanks a bunch
16:14  cnf: sure, i still hate them
16:15  cnf: and #suds is a mostly dead channel
16:15  papna_: cnf: People eventually come an d answer questions.
16:16  papna_: cnf: That's how 90% of IRC help channels work.
16:17  cnf: how can i see the structure of an object without printing it?
16:18  Sindwiller: Does anybody know how to run multiple interpreters simultaneously in Pydev/Eclipse?
16:19  papna_: cnf: Some things you can explore that might be printable for an object with a __str__ that isn't working are repr(x), help(x), and vars(x).
16:19  papna_: cnf: I'm not quite sure what "structure" should mean.
16:20  cnf: but for __str__ i use print, right?
16:21  papna_: cnf: print calls __str__
16:22  andre_pl: how can I get pip to install a package where setup.py isn't in the top-level directory? It seems to be having a problem with that.
16:22  cnf: which is throwing errors atm
16:22  papna_: cnf: That's why I'm suggesting calls that don't call __str__
16:23  papna_: cnf: At your direct request.
16:23  cnf: yes, i'm trying those
16:24  apsinvo: How to turn a list (from .split() ) back into a string?
16:24  apsinvo: (a space separated string)
16:24  papna_: apsinvo: ' '.join(ss)
16:24  papna_: apsinvo: docs.python.org/tut
16:25  ryan_languagelab: is there a better way to do something like: x = [l for f,l in z if f=='9366'][0] ... is it okay to use a list comprehension to just get one element/
16:25  chachan: papna_, I'm having this: "AttributeError: 'module' object has no attribute 'etree'"
16:25  papna_: ryan_languagelab: next(l
16:25  papna_:                           for f,l in z if f=='9366'_
16:25  cnf: hmm
16:26  papna_: ryan_languagelab: With a ) at the end.
16:26  chachan: do I need to install something?, I saw it's in the standard library, why can python find it?
16:26  cnf: neither of repr help or vars gives me anything i can use atm :/
16:26  papna_: chachan: Did you do "import xml.etree.cElementTree"?
16:26  ryan_languagelab: papna: elegant cheers!
16:26  papna_: chachan: or "import lxml.etree"?
16:26  chachan: import xml
16:26  chachan: xml.etree.ElementTree.parse(f)
16:27  papna_: chachan: You have to import the module you need.
16:27  tilt: good whatever
16:27  papna_: chachan: Importing a package doesn't import all its modules.
16:27  chachan: papna_, I didn't know that
16:28  cnf: papna_: i think it should behave like a dict
16:28  salat: hey..how can i draw _over_ the childs of a gtk.Layout ?
16:29  papna_: cnf: NO AMBIGUOUS ANTECEDENTS
16:29  papna_: salat: #pygtk on irc.gnome.org might know if we don't.
16:30  cnf: papna: whar?
16:30  cnf: what*
16:30  salat: papna, ah ok thanks:)
16:31  cnf: o,O
16:33  tilt: i can say "try: ... except BarBaz as b: ...." i can also say "try: ... except (BarBaz, BarBlah): ..." ... but how can I assign an alias to multiple caught Exceptions in a single "except" statement?
16:33  tilt: "except (BarBaz as b1, BarBlah as b2)" or "except (BarBaz, BarBlah) as b" give syntax error
16:34  papna_: tilt: except Foo, Bar as e:
16:34  papna_: I thought the latter there worked. Weird.
16:35  papna_: In fact, mine might only work on 3.
16:35  papna_: tilt: Are you sure except (BarBaz,  BarBlah) as b"
16:35  papna_: gave you a /syntax/ error?
16:35  cnf: papna_: i have no idea what that comment means
16:35  papna_: tilt: What version of Python are you using?
16:36  papna_: cnf: I didn't know what "it" was.
16:36  cnf: oh
16:36  Juhaz: salat, unless you know for sure that all the children are windowless types, you probably can't do that very efficiently. I don't see any way of making sure they don't draw over you other than redrawing every time after _any_ of the child widgets gets an expose event.
16:36  cnf: sorry, the SOAP object i get with suds
16:36  cnf: the thing i'm trying to print
16:37  tilt: papna_: actually im not sure
16:37  tilt: papna_: i just read http://docs.python.org/tutorial/errors.html
16:37  tilt: papna_: i am using python 2.5.2
16:38  papna_: tilt: The "as" was added in 2.6
16:38  papna_: tilt: Use "except (Foo, Bar), e"
16:41  salat: Juhaz: i could redraw just the area they have drawn on, couldnt i?
16:41  salat: that would be somehow efficent, or not?
16:43  cnf: sigh, windows devs and SOAP
16:43  cnf: i wish i was home ^^;
16:43 --- nosk1o is now known as nosklo
16:44  NelleV: cnf: still what... 1 - 2 hours of work ?
16:44  cnf: 45 minutes
16:44  nosklo: SOAP :(
16:44  NelleV: erf... 45min :(
16:44  cnf: then 1:30, maybe 2 hours of buss and trains being late
16:44  Juhaz: salat, I suppose. It also sounds like a pain in the ass.
16:44  cnf: a bit of snow, and ALL traffic here stops functioning
16:44  NelleV: so I'll be home before you :~
16:45  cnf: 2 more weeks
16:45  cnf: and i'll be unemployed again
16:45  cnf: \o/
16:45  NelleV: cnf: I got stuck in London because of the snow... I was supposed to go back to france last week-end
16:45  cnf: NelleV: bummer
16:45  NelleV: cnf: and that sounds very weird xD
16:45  papna_: cnf: You're using SOAP for free?
16:46  NelleV: cnf: bummer ? o_O
16:46 --- init is now known as ^_-
16:46 --- ^_- is now known as init
16:47 --- ChanServ sets modes [#python +o nosklo]
16:47  cnf: papna_: for free?
16:47  cnf: for the next 2 weeks, it's my job
16:47  cnf: NelleV: what, bummer?
16:47  cnf: well, sort of my job
16:47  NelleV: 15:45 < cnf> NelleV: bummer
16:47 --- nosklo sets modes [#python -o nosklo]
16:47  cnf: NelleV: that youy didn't get home, it's a bummer
16:48  NelleV: oh... yes
16:48  NelleV: that's the brits dealing with snow. I didn't expect more to be honest
16:48  NelleV: it's not like their used to it :-p
16:48  cnf: :P
16:51  salat: Juhaz: yes it sounds like that:D but once written, i can draw on a canvas like normal and the ugly stuff will be made automatically:D
16:54 --- kwame_ZzZzZzZzZ is now known as kwame
16:56  Xxaxx: How can I get this file stream from C module to python variable "void Trace(int value, FILE *stream);" ?
16:57  tyebud: Hey Python,  what framework would you recommend for a beginner to start working on a web app?
16:57  Xxaxx: tyebud: django
16:57  NelleV: tyebud: I would recommand pylons/pyramids
16:57  burhan: tyebud: #django
16:57  burhan: tyebud: my second recommendation is pylons
16:58  tyebud: I've seen web2py as well.  What is the advantage of django over that or pylons?
16:58  NelleV: tyebud: you will probably start faster with djanfo, but will probably run into roadblocks pretty quickly
16:58  NelleV: django*
16:59  gorakhargosh: does python have multisets as a built-in collection?
17:00  papna_: gorakhargosh: You can do what you want with collections.defaultdict, most likely.
17:00  tyebud: Alright.  I'll give it a shot.  Thanks guys!
17:00  papna_: gorakhargosh: There's also a collections.Counter in recent Pythons.
17:00  gorakhargosh: I can see python2.7 has collections.Counter, not sure whether python2.5 or 2.6 have it
17:00  gorakhargosh: papna_: ah
17:00  dgl: gorakhargosh: you can port collections.Counter to 2.6
17:01  papna_: A collections.defaultdict(int) works prettymuch as well.
17:01  gorakhargosh: dgl: yeah
17:02  gorakhargosh: papna: alright. i'll look into that
17:02  gorakhargosh: i need this code to work on python2.5 at the minimum
17:06  jaapz: hello, i am trying to save my password to a gnomekeyring, but this code gives me a gnomekeyring.NoMatchError: http://nopaste.info/6d82ab6402.html
17:06  jaapz: does anyone here know whats wrong?
17:10  kamsky: hi, im having problems with qt4 + twisted, i have done the backend of my app, and now i wanna do the GUI, i have downloaded qt4reactor, and tried it with this test app: http://paste.pound-python.org/show/2b6dYYInNk45dqkjb5Ez/ , it works!, but when i follow the same logic in my app: http://paste.pound-python.org/show/9ZGwvwT6DSou0c39IM98/ it fails!  it loads the first Screen of the GUI, but only the borders of it, not buttons, not labels... :s some id
17:10  kamsky: ea?
17:12  papna_: kamsky: Do the FaceSniff* modules use twisted?
17:13  dash: kamsky: Oh. looks like you didn't do what the README says
17:13  kamsky: do you refer to the modules created by QtDesigner?
17:13  dash: kamsky: try moving line 308 to line 6
17:14  NelleV: dash: didn't you say exactly that to someone else yesterday ? o_O
17:15  dash: NelleV: same guy! and no, i told him to move the qt4reactor import, not the QApplication bit
17:15  dash: not having read the docs for qt4reactor before
17:15  NelleV: mmh ok. I can't remember what it was about exactly
17:16  kamsky: sorry, i read it, but yesterday i only changed two lines of import and i forgot that line, im gonan try
17:17  kamsky: now it loads 2 screens of the GUI! :D im gonna check it, thanks!
17:18  jkyle: morning
17:18  jkyle: does python have a messaging api?
17:19  jkyle: like notifications in objc or signals in qt4?
17:21  Gerrit: Does seeking in a GzipFile require any decompression?
17:22  Wild_Cat: jkyle: nothing built-in. But it's trivial to roll your own, and if all else fails it can use Qt's, GTK's or whatever else you're using.
17:23 --- TiCPU__ is now known as TiCPU
17:24  kamsky: dash, is the way i show the first window (config) and when i close it i show the main window ok?? lines 314-317 and 278-279 code: http://paste.pound-python.org/show/Cc4FlXgxITNJQj9ZWMUc/
17:28  lduros: hello, i'm trying to match what's between <h1> tags in html files, but it seems the following re.compile("<h1>(.*)<\/h1>") matches them, except when there are white spaces on the line around it, any idea why this is happening? If I do re.compile(".*<h1>(.*)<\/h1>") then it finds the h1 that have spaces around them -- thanks
17:28  jkyle: Wild_Cat: yeah, I'm using objc notifications right now. but the bridge framework might come with a performance hit that a native solution would not
17:28  nosklo: lduros: use lxml.html
17:28  dash: kamsky: I don't know, I've never used Qt
17:28  nosklo: lduros: don't use regexes to parse html
17:28  Wild_Cat: jkyle: don't worry about performance yet ;)
17:29  dash: lduros: doc = lxml.html.fromstring(yourstring); h1s = doc.findall("//h1")
17:29  lduros: nkosklo: even if i'm just trying to get the title from an h1 and then output it as a csv file?
17:29  dash: lduros: correct
17:29  nosklo: lduros: exactly
17:29  lduros: dash: sounds a lot more straightforward indeed
17:29  nosklo: lduros: that's a problem where regular expressions won't help
17:29  nosklo: lduros: never use them to parse irregular stuff, like html
17:29  kamsky: dash, but isnt a Qt stuff, is the way i do it, i dont know if its the correct way
17:30  nosklo: lduros: fortunately, it's a solved problem - using a real html parser
17:30  lduros: nosklo dash: ok, sounds good, thanks
17:32  dash: kamsky: ?
17:32  jkyle: Wild_Cat: hehe, well, I'm getting to that point
17:32  lduros: nosklo dash: so in when do you use regex? For instance, I'm using it also to match .html in filename: for filename in files: then, if re.match(".*\.html$", filename) is not None: -- is the use of regex justified in this case?
17:32  nosklo: lduros: no... there's endswith
17:33  lduros: nosklo: hmmm
17:33  lduros: nosklo dash: it seems you use regex much else in python than many languages'
17:33  nosklo: lduros: I'd avoid using regex if I can, they're unreadable, hard to get right and to maintain later
17:34  nosklo: lduros: you could use if filename.endswith('.html'):
17:34  dash: lduros: less? not really
17:34  nosklo: lduros: or os.path.splitext(filename)[1] == '.html'
17:34  dash: lduros: what were you thinking of, in particular?
17:34  lduros: dash nosklo: ok thanks :-)
17:34  nosklo: lduros: the latter is better because it won't catch a file named only ".html"
17:34  ahammond: I'm trying to return a True from a C extension. What do I pass as the format string to Py_Build
17:35  ahammond: s/Py_Build/Py_BuildValue
17:35  lduros: nosklo: thanks
17:35  nosklo: ahammond: any reason you're not using Cython to build your extension?
17:35  lduros: dash: well I do php originally, and I use regex quite to do many things
17:35  papna_: ahammond: Just return Py_True
17:35  papna_: ahammond: Don't forget to incref it.
17:36  ahammond: papna_: thanks. nosklo: yeah, I'm working on an f'd up hack of python that runs on wince 4.0 for embedded stuff.
17:36  nosklo: ahammond: I'm sorry :(
17:37  papna_: Win CE?
17:37  papna_: Do you realise it's 2010?
17:38  nosklo: a regular on this channel ported pyserial to wince, I forgot which
17:38  ahammond: papna_:  you know that and I know that, but somehow I don't think the business doodz with the ancient point-of-sale systems either know or care. :)
17:38  papna_: =p
17:40  dash: lduros: well yes, php encourages all kinds of bad things
17:45  burhan: wow wince 4.0 -.-
17:46  burhan: appropriately named wince cause that's generally the first reaction from a developer.
17:47  ark3qqq: Using numpy 1.3.0, I find that arr[:] = -1 is a no-op for sufficiently large memmapped arrays, with sufficiently large meaning arr.size > 2**31. This is on RHEL 5 64bit. Thoughts?
17:49  ark3qqq: This is on Python 2.6, by the way, i.e. not the 2GB file size limitation.
17:49  papna_: ark3qqq: #scipy would know better, and the numpy mailing list would probably actually know.
17:50  burhan: ark3qqq: curious as to what you are using such a large array for?
17:50 --- kwame is now known as kwame_home
17:51  ark3qqq: burhan: I'm storing a small, commonly-used subset of the full dataset my analysis tools run on. Big speed wins for using mmapped storage. :)
17:51  burhan: cool :)
17:51  ark3qqq: papna_: Yep, already asked in #scipy. I await an answer there, but I thought I'd stir things up in here as well.
17:52  papna_: ark3qqq: Like I say, in your shoes I wouldn't expect someone actually to know short of the mailing list.
17:54  ark3qqq: papna_: Gotcha, thanks.
17:54  lazydancer: hey hey hey
17:55  ajmilazzo: Hai
17:55  burhan: its faaaat albert @lazydancer
17:55  lazydancer: what is a preferred pastebin?
17:56  ajmilazzo: blast
17:56  dash: lazydancer: a website where you can paste code and it gives you an url where we can look at it
17:56  NelleV: that's a question of personnal preferance...
17:56  NelleV: preferences*
17:56  ajmilazzo: bpaste.net
17:56  lazydancer: but last night the bot told me not to use the one i did :(
17:56  ark3qqq: lazydancer: http://paste.pound-python.org/
17:57  dash: lazydancer: oh. so, 'which'
17:57  NelleV: lazydancer: there are some mentionned in the topic
17:57  lazydancer: http://www.bpaste.net/show/12158/
17:57  dash: lazydancer: what's preferred is no ads and python syntax highlighting
17:57  lazydancer: string index out of range in the giant while loop.
17:57  sickn3ss: I need a little help, I want to convert several mp3 files to WAV files, and I want to make a python script to do so, this is how it looks like: http://pastebin.com/PPAPM9UJ the problem is that instead of taking first line from lista_nr with the first line from lista_mel he takes all line from the first than from the seccond
17:57  infobob: http://bpaste.net/show/12159/ (repasted for sickn3ss)
17:57  lazydancer: sorry to ask for such newbie help
17:58  ajmilazzo: There was another good one it was like poocoo or something
17:58  MostAwesomeDude: paste.pocoo.org
17:58  papna_: lazydancer: Use collections.Counter and not your function at all.
17:58  sickn3ss: so can someone help me ?
17:58  lazydancer: ah
17:59  dash: sickn3ss: your code doesn't say anything about lines
17:59  dash: sickn3ss: so why did you expect it to do anything with lines?
17:59  dash: sickn3ss: also, you can use shell=False and get rid of the 'cd' bit
17:59  sickn3ss: dash, well if I try and print lista_nr for example
18:00  sickn3ss: it prints every line
18:00  dash: sickn3ss: instead, pass "cwd='/root/Melodii'" to Popen
18:00  dash: sickn3ss: Okay
18:00  sickn3ss: ok I will do that
18:00  dash: sickn3ss: .read() reads the entire file
18:00  dash: sickn3ss: it doesn't break it up into lines.
18:00  sickn3ss: and places it in a variable
18:01  papna_: sickn3ss: It creates an object.
18:01  sickn3ss: hmmm  ok .... so how can I read each line of it and make this thing work
18:01  sickn3ss: I really need it
18:02  nosklo: sickn3ss: what does the files contain?
18:02  nosklo: sickn3ss: file names?
18:02  sickn3ss: nosklo, a files contains numbers.wav
18:02  sickn3ss: yes
18:02  nosklo: sickn3ss: can you give an example of the file's contents and the expected behavior?
18:02  sickn3ss: one contains numbers.wav and another one name.mp3
18:03  soomsoom: Hello, How can i get all the raws that sended on irclib?
18:03  sickn3ss: ok for example lista_nr contains "1.wav" and lista_mel contains "melody.mp3"
18:03  sickn3ss: and I want to run something like 'mpg123 -w 1.wav melody.mp3'
18:03  dash: soomsoom: don't use irclib.
18:04  soomsoom: dash: why not?
18:04  lazydancer: http://svn.python.org/view/*checkout*/python/branches/py3k/Lib/collections.py?revision=84852
18:04  lazydancer: how can I get that module like that?
18:04  dash: soomsoom: because there's twisted.words instead :)
18:04  papna_: lazydancer: What?
18:04  dash: soomsoom: have you seen this example bot? http://habnabit.org/twistedex.html
18:04  soomsoom: i dont like to use twisted...
18:04  sickn3ss: the reason I want to do this is because I want it to be done automatically and not type 170 things in bash.
18:05  dash: soomsoom: that's ok, you don't have to like it.
18:05  soomsoom: its not very well documented
18:05  nosklo: soomsoom: something like this? http://bpaste.net/show/12161/
18:05  dash: soomsoom: No doubt it could be better documented.
18:05  dash: nosklo: wrong button
18:05  _habnabit: soomsoom, you think that irclib is better documented?
18:05  nosklo: yeah
18:05  NelleV: it's not that bad... o_O
18:05  nosklo: soomsoom: sorry
18:05  nosklo: sickn3ss: http://bpaste.net/show/12161/
18:05  nosklo: sickn3ss: check if that helps
18:06  Kuba: how to generate random string?
18:06  NelleV: _habnabit: I think it is well documented (if that makes you happy, which I doubt)
18:06  nosklo: Kuba: with what purpose?
18:06  nosklo: 'foo' is a random string
18:06  Kuba: nosklo: create a unique ticket number
18:06  nosklo: Kuba: use the uuid module
18:06  nosklo: Kuba: http://docs.python.org/library/uuid
18:06  Kuba: anr randomized as well
18:06  Kuba: thanks
18:07  papna_: Kuba: Your database can do this.
18:07  sickn3ss: nosklo, it worked ... thanks
18:08  Kuba: papna_: Can it? ;o
18:08  Supra7: sometimes i do not care why things work... only that they work.
18:08  dash: a sound strategy
18:09  nosklo: Supra7: the problem is how to differentiate stuff that *works* from stuff that "works"
18:09  papna_: Kuba: It can't?
18:09  lazydancer: what module do i have to import to use counter ()?
18:09  dash: Kuba: what db are you using? :)
18:10  nosklo: lazydancer: counter ()?
18:10  dash: lazydancer: hmm? just keep a dict of letters to counts.
18:10  nosklo: lazydancer: you mean collections.Counter?
18:10  Kuba: dash: don't know yet, I need to store tickets that will be valid for given period of time, any suggestions? ;p
18:11  lazydancer: yes, i think
18:11  lazydancer: http://docs.python.org/dev/library/collections.html
18:11  lazydancer: the function i want is on that page
18:11  Kuba: dash: for starters I'm using sqlalchemy with sqlite3 :memory:
18:12  tesseracter: im looping though a list of strings, and want to find which ones have capitol letters. what way would be most pythonic? not a regex right?
18:13  papna_: tesseracter: Any caps? All caps? Caps and not-lowercase?
18:13  papna_: tesseracter: All of the strings? One of the strings?
18:14  kamsky: dash, me again... now it fails cause changing import lines... in ClientRequest class, in the line: self.reactor       = reactor   fails: exceptions.NameError: global name 'reactor' is not defined
18:14  kamsky: dash, http://paste.pound-python.org/show/XYnjuVLxJVaCBxMNVSGA/
18:14  tesseracter: papna_, "this is acceptable" "This is Not acceptable". i'm gunna slugify any item with a capitol letter
18:15  tesseracter: papna_, and i have ~14k items to go through.
18:16  lazydancer: i still can't figure out how to import collections.counter
18:17  burhan: lazydancer: form collections import counter
18:17  burhan: err, from not form
18:17  lazydancer: ya i tried that burhan
18:17  lazydancer: no go
18:20 --- Andyman_ is now known as Andyman
18:20  tesseracter: papna_, so... you would just use a regex huh? no fancy stuff with string.uppercase to get me out of it? or you just wanted to complain about my lack of a detailed question?
18:24  denshi: anyone know how to list the contents of a namespace?
18:25  zykes-: does sqlalchemy have some kind of orm/schema generator from a database ?
18:30  purch: denshi: locals()
18:30  nosklo: zykes-: yes
18:33  denshi: purch: thanks!
18:34  purch: denshi: same with globals()
18:34  _habnabit: denshi, you should only ever use this for debugging, though.
18:34  denshi: how about the program text out of a method?
18:34  _habnabit: denshi, it's can't really be used programmatically.
18:34  nosklo: denshi: yeah, don't rely on it, use it for debugging
18:34  denshi: _habnabit: i don't need it programmatically, just to work the once while i hammer on it
18:34  nosklo: denshi: a real debugger is better
18:35  denshi: i absent-mindedly wrote a network app in the python shell a month ago
18:35  denshi: the running shell, i should point out, and this app has been in prod since then
18:35  _habnabit: ... :T
18:35  _habnabit: How did you deploy something to production without any unit tests?
18:36  denshi: i went to that server yesterday to update the 'script'
18:36  denshi: and discovered that there wasn't a script per se
18:36  nosklo: you mean you wrote your entire program in the python interactive interpreter??
18:36  denshi: so i'm trying to reconstruct the script from what's in the interpreter
18:36  dash: denshi: you're mostly screwed.
18:36  denshi: nosklo: don't you find that the fastest way to interatively develop?
18:36  nosklo: denshi: of course not
18:36  denshi: dash: more than you know
18:37  _habnabit: denshi, 'interactively develop' ?
18:37  nosklo: denshi: having a .py file I can run many times is a lot easier
18:37  nosklo: denshi: I rarely use the interactive interpreter at all
18:37  nosklo: denshi: just for quick tests
18:37  denshi: not me, i use it heavily
18:37  _habnabit: denshi, sounds like you could benefit from learning about unit testing.
18:37  shylent:  maybe you should change that :/ I mean, what about testing?
18:37 * shylent is slow
18:37  denshi: i can't disagree, nor am i saying i don't write unit tests
18:37  nosklo: denshi: you can't get the source code anymore, unless it is on scrollback
18:38  _habnabit: denshi, how can you write unit tests if everything is in the interactive interpreter?
18:38  NelleV: I use the interactive interpreter heavily as a documentation tool
18:38  denshi: nosklo: 'screen' kind of hoses TERMCAP, so does the py inter have a scrollback log?
18:38  _habnabit: denshi, only if you have readline.
18:39  denshi: readline i have
18:39  nosklo: denshi: you can get the scrollback from "screen", then, no?
18:39  denshi: working on it
18:39  dash: while we're discussing terrible things
18:39  dash: readline.write_history_file
18:40  denshi: alrighty
18:40  denshi: _habnabit: i'm not saying that this is the only piece of code i've ever written, or that this is the only style i ever develop in
18:40  denshi: written quite a pile of unit tests on other projects
18:41  _habnabit: 09:35:58 < _habnabit> How did you deploy something to production without any unit tests?
18:41  denshi: ssh and moxy
18:41  denshi: that might be spelled 'moxie' these days
18:41  _habnabit: s/How/Why/
18:41  denshi: well, given that the unit tests in this case are in the process of development
18:42  denshi: evaluating and testing functions
18:42  denshi: your question isn't really valid
18:42  _habnabit: uh
18:42  denshi: i mean, it is valid if there's only one way to write a unit test, namely your preferred library and execution style
18:43  denshi: but if you consider a unit test to be, wait for it, testing a unit
18:43  denshi: then yes, they were done
18:43  _habnabit: Yours aren't repeatable or automated. It kinda removes the point.
18:43  dash: denshi: i believe the general feeling is that it's not valid to try to run code that isn't in a file
18:43  denshi: note that it's been running bug-free for a month
18:43  paxl: Is there a way to make tarfile support lzma (xz) archive in python3.1 ?
18:43  dash: denshi: and probably not valid to run code that isn't checked into version control somewhere
18:43  denshi: but i understand your queasiness
18:43  _habnabit: denshi, you can't prove that.
18:43  denshi: dash: bingo.
18:43  _habnabit: denshi, and that's that unit tests are for.
18:44  denshi: sure sure
18:45  denshi: i think you might have a kind of a magical thinking view of unit tests
18:45  _habnabit: What
18:45  dash: denshi: Oh?
18:45  denshi: neither they nor any other automated test system gives proof of perfect code
18:45  dash: oh. well, obviously.
18:45  denshi: by definition they're not integrative
18:46  shylent: its kind of like that, really. I mean, when you have tests for certain kind of behaviour you can assert that 'my code, given the following inputs, behaves like this and this' and that would be truth, the whole truth and nothing but the truth. The rest is speculation, really
18:46  denshi: so it can all fall down when the code is running outside the unit test mockup
18:46  shylent: I mean, who knows that it works?
18:46  dash: denshi: the issue isn't unit tests per se
18:46  dash: denshi: it's having a functioning epistemological framework
18:46  denshi: to me the issue is that i didn't save the final code and stuff it in git
18:47  dash: denshi: that's a big part of it, yeah.
18:48  dash: I do find your predicament very surprising
18:48  dash: because I find writing code in the interactive interpreter slightly infuriating
18:48  denshi: why is that?
18:48  dash: denshi: because it's not a text editor
18:48  _habnabit: Yeah, it's not exactly easy.
18:48  _habnabit: Especially writing functions.
18:49  _habnabit: Especially especially functions with more than one level of static nesting.
18:49  denshi: i usually just copy blocks of code between emacs buffers, some of which are python interpreters
18:49  denshi: which handles the indentation
18:50  denshi: but i find coding outside of a running system mildly infuriating
18:50  denshi: b/c any testing, proof, evaluation, etc requires rebuilding the world
18:51  dash: denshi: right, this is what i mean by having a valid epistemological framework.
18:51  denshi: start process, load code, pull in gigs of data, eval, hope a one-line fix doesn't blow up 5 minutes later
18:51  denshi: when you're back from your coffee break
18:52  denshi: python being interactive means i can build up chunks of working code immediately
18:52  denshi: rather than the old compile-link-wait10minutes
18:52  dash: denshi: what's the 10 minutes part?
18:52  denshi: dash: waiting for 'compiling', loading, execution
18:53  dash: denshi: what's taking 10 minutes in there, though?
18:53  dash: why isn't it 10 seconds?
18:53  bill_sbt: anyone have any recommendations for a gnome ide for ubuntu? i'm fine with the features IDLE has but I'm not satisfied with it's looks. i'm a newbie so something newbie friendly would be nice
18:53  dash: bill_sbt: i like emacs. some folks use gedit, i hear
18:53  tpratt: bill_sbt: maybe gedit or geany
18:54  thrall: kdevelop here, though it's for KDE but it's not impossible to install on gnome.
18:54  denshi: dash: because the datasets are many gigabytes
18:54  shylent: eclipse works in gnome. but yes, do feel free to use emacs :P
18:54  _habnabit: Bleh, eclips.
18:54  dash: denshi: why don't you have a smaller data set for testing?
18:54  shylent: well, I've *had* to say it :P
18:54  _habnabit: I'll recommend emacs too.
18:55  bill_sbt: tetris in emacs!!?! i'm sold, thanks guys!
18:55  denshi: bill_sbt: heh
18:55  dash: heh
18:56  dash: denshi: more specifically, why would you wait to load your entire dataset instead of using only enough to exercise all your codepaths?
18:56  denshi: dash: well, i do have a smaller dataset for testing, which i made by chopping a chunk out of the full dataset -- inside the running interpreter
18:57  dash: denshi: okay. well, that gets rid of your first objection, then
18:57  dash: denshi: you don't have to wait 10 minutes
18:57  denshi: i speak in hyperbole too much
18:58  KirkMcDonald: Speaking in hyperbole is the WORST THING EVER.
18:58  denshi: heh
18:58  dash: denshi: so, back to epistemology
18:58  dash: denshi: at any point that you're editing code you want to be able to answer the question "does this work?"
18:58  dash: which of course requires answering the question "how do I know that this works?"
18:59  dash: unit testing is an attempt to answer those.
18:59  denshi: but i do think there's an attention span concern from the time required to exec-and-read, and going from milliseconds in the shell to seconds in running a new program is small but cumulatively aggravating
18:59  denshi: how are we not connecting on the unit test concept?
18:59  dash: it's not always the best, but it at least _is_ one. :)
19:00  denshi: when one is editing code in the interpreter, the answer to 'how do i know this function works over this data' is found by *evaluating the function on the data*
19:00  denshi: right?
19:00  dash: denshi: for extremely simple or small pieces of code, sure.
19:00  denshi: i think that 'extremely' is hyperbole
19:01  denshi: we're all kind of chewing up each other's thursday here
19:01  dash: denshi: well, specifically: for stuff that's purely functional
19:01  denshi: obviously keeping the script file and stuffing it in git is the way
19:01  dash: denshi: once you introduce any mutable state it's inadequate
19:01  NodoLibero: hello
19:02  denshi: and if there's going to be multiple edits and revisions, putting the method tests in a group to be called automatically is obvious as well
19:03  dash: denshi: well right, that's what a unit test is. a repeatable way to invoke code and assert stuff about its behaviour
19:03  dash: denshi: the key factor is starting from a consistent environment each time though, rather than whatever random state is in your existing process
19:03  denshi: i'm just saying that a block of code that tests a function return value against expected output is not made different by the block having a name that ends with '_test'
19:04 --- kanor is now known as tyrus
19:04  denshi: i strongly support not having random state
19:04  dash: denshi: of course not. it's made different by being repeatable in a consistent environment
19:04 --- tyrus is now known as kanor
19:04  dash: denshi: in general, if you're not restarting python every time you test, you have random state :)
19:04  jarlg: Using python3, I'm wondering how to override python's "in" regarding objects. I tried making __iter__() return the list I'd like for it to iterate, but to no avail. Any suggestions?
19:04  _habnabit: jarlg, __contains__
19:05  jarlg: _habnabit: Ah! Thanks, will try! :)
19:05  _habnabit: jarlg, __iter__ returns an iterator. Lists aren't iterators.
19:05  kerio: jarlg: return iter() of that list
19:05  kerio: for __iter__
19:05  jarlg: _habnabit: Oh. I read a changelog for python 2.2 (couldn't find any recent ones) which specified __iter__() returns the object you want iterated. :/
19:05  kerio: or just yield
19:06  jarlg: kerio: Ah, I see.
19:06  nosklo: jarlg: note the difference between iterator and iterable
19:06  _habnabit: jarlg, you didn't look at the docs at all?
19:06  jarlg: nosklo: Ah, exactly.
19:07  jarlg: _habnabit: I just said I did? :/
19:07  _habnabit: jarlg, the changelog is not docs.
19:08  jarlg: _habnabit: I see your point. Excuse my impatience. :/
19:08  magcius: jarlg, http://docs.python.org
19:10  kerio: python's object model is simple - don't fuck up with it
19:10 --- elpargo_ is now known as elpargo
19:11  kerio: it's not worth it, it takes like 10 minutes to read it whole
19:11  dash: it could be simpler :C
19:11  kerio: dash: how
19:11  tarpsocks: SyntaxError: from __future__ imports must occur at the beginning of the file
19:11  tarpsocks: I am getting this error message trying to install a library, it seems strange
19:11  kerio: apart from __new__, which is still kinda needed for immutable objects
19:12  dash: kerio: get rid of classes
19:12  kerio: dash: no u
19:12  _habnabit: tarpsocks, it's a poorly-written library. That's all.
19:12  tarpsocks: even if I put the from future import at teh beginning i get that error
19:12  magcius: tarpsocks, what library?
19:12  dash: kerio: __new__ doesn't give you immutable objects
19:12  tarpsocks: soappy
19:12  tarpsocks: SOAPpy
19:12  nosklo: ugh
19:12  dash: ugh.
19:12  kerio: __new__ is the only way to customize immutable objects
19:12  naxa: i see in the topic, it's not too early to use py3k anymore?
19:12  dash: kerio: __new__ doesn't give you immutable objects
19:12  dash: naxa: well, you _could_
19:12  jarlg: Well, the problem lied within my not seeing the difference between iterable and iterator. I was in the docs, however in the wrong place. (said changelog because I saw "new in python2.2" and didn't think much :| )
19:12  dash: naxa: but why would you want to?
19:12  kerio: and ok, let's get rid of classes - how do i make... objects
19:12  jarlg: Works now, thanks!
19:13  magcius: naxa, other people started an argument so the topic changed
19:13  tarpsocks: _habnabit: i'm getting this error from the setup.py, maybe ill just try manually doing what the setup.py does instead
19:13  _habnabit: tarpsocks, nah, don't do that.
19:13  naxa: magcius, dash: i see. so there is a shift from "too early" to "maybe you could consider".
19:13  dash: naxa: we ran out of room, basically
19:13  dash: kerio: well you'd replace them with object literals
19:14  magcius: naxa, no. We still don't like Python 3.
19:14  kerio: itt: old people who dislike the AWESOME of python 3
19:14  _habnabit: magcius, we? You're not even an op. :V
19:14  kerio: dash: object literals? huh?
19:14  ark3qqq: kerio: itt is ...?
19:14  magcius: _habnabit, when did ops take over usage of the word "we"?
19:15  _habnabit: magcius, who the hell else would 'we' refer to?
19:15  tarpsocks: _habnabit: what do you reccomend i do then, I'd like to use this library, do you think I just have too new a version of python or something?
19:15  dash: kerio: instead of "class Foo: def ..."
19:15  magcius: _habnabit, denizens of #python who've been around a while?
19:15  dash: kerio: what if you had 'object foo: def ...'? :)
19:15  naxa: magcius: are "we" pythonlovers or also python-devs?
19:15  kerio: dash: so how do you make more of the same object
19:15  dash: _habnabit: don't get your knickers in a twist
19:15  magcius: _habnabit, basically anyone in #python-offtopic plus dash
19:16  nosklo: naxa: python3 is great. I don't know what magcius is talking about
19:16  dash: kerio: write a function
19:16  _habnabit: dash, note the :V
19:16  magcius: nosklo, if by "great" you mean "missing twisted"
19:16  nosklo: naxa: the problem is that it lacks 3rd party libraries...
19:16  dash: _habnabit: what's that
19:16  kerio: dash: ew, factory functions instead of classes?
19:16  dash: kerio: sure! why not.
19:16  kerio: it would still work, but WHY
19:16  magcius: I was also tainted by ARCH PYTHON3 IS THE FUTURE YOU BROKE STUFF
19:16  tarpsocks: dash is evil
19:16  _habnabit: dash, it's like a 'hurrrr' face.
19:17  dash: kerio: we were talking about 'simple'
19:17  dash: kerio: this is simpler :)
19:17  magcius: Go's object system is super cool yo.
19:17  dash: kerio: also, it makes 'isinstance' *super* hard to do.
19:17  kerio: dash: substituting "class Foo" with def Foo: obj foo: ...; return foo
19:17  dash: which is a plus.
19:17  _habnabit: kerio, classes in python basically work this way anyway.
19:17  _habnabit: kerio, classes are callables that return an object.
19:17  kerio: _habnabit: yeah, but better
19:17  _habnabit: kerio, 'better' ?
19:17  kerio: you also have class methods and class attributes
19:17  dash: kerio: "better" is a whole separate question! I agree it's not clear.
19:18  magcius: _habnabit, it's dash's idea, not kerio's
19:18  _habnabit: magcius, what
19:18  ark3qqq: kerio/dash: Are you talking about Prothon or some other prototype-based Python-like language?
19:18  magcius: <dash> kerio: instead of "class Foo: def ..."
19:18  magcius: <dash> kerio: what if you had 'object foo: def ...'? :)
19:18  dash: ark3qqq: No, not prototypes.
19:18  _habnabit: magcius, yes, I know how E works.
19:18  NelleV: _habnabit: the question was how to make python simpler
19:19  dash: ark3qqq: i'm makin' stuff up
19:19  kerio: dash: it's not simpler :\
19:19  magcius: _habnabit, I know how E works too.
19:19  _habnabit: ...
19:19  dash: kerio: why not! it gets rid of a big source of complications :)
19:19  ark3qqq: dash: Not prototypes. Okay, cool.
19:19  magcius: _habnabit, I have no idea why you're addressing kerio instead of dash.
19:19  dash: ark3qqq: 'closure-based objects', if anything
19:19  _habnabit: magcius, dash didn't say 'better'
19:19  NelleV: 'better' still needs to be define :s
19:19  magcius: _habnabit, he implied it with "simpler"
19:19  ark3qqq: dash: Ah, gotcha. Like in JavaScript.
19:20  kerio: ark3qqq: nope, he's getting rid of types
19:20  kerio: dash: how do you handle "primitives" in that case
19:20  ark3qqq: kerio: Types? JavaScript's closure-based objects don't have types/classes either. Or do you mean something else?
19:20  dash: ark3qqq: well, except js is prototype based
19:21  ark3qqq: dash: JavaScript goes both ways. :)
19:21  dash: which is why it's so popular, i guess.
19:21  dash: kerio: what kind of handling are you thinking of?
19:21  RichW: I cant believe python lets you nest a class inside a function, thats silly but cool :)
19:21  kerio: dash: what is an "int" in that case
19:22  kerio: RichW: python lets you nest classes inside of classes
19:22  kerio: inside of classes
19:22  _habnabit: RichW, there's no reason to explicitly disallow it, and the grammar is pretty flexible.
19:22  kerio: inside of function
19:22  kerio: *functions
19:22  dash: kerio: why do you care what it "is"? can't you just settle for knowing what it does?
19:22  RichW: you can nest a class in a class?!?
19:22  dash: RichW: I do it all the time
19:22  RichW: mad
19:22  _habnabit: RichW, yeah, but it's pretty pointless.
19:22  dash: RichW: classes in functions I mean
19:22  kerio: RichW: classes are just... objects
19:23  RichW: i mean the actual class Blah: pass
19:23  kerio: yeah, that defines a class objects
19:23  RichW: python lets you put them all over the place
19:24  RichW: any other strange but true things python lets you do?
19:24  _habnabit: That list is pretty big.
19:24  _habnabit: Also depends on how you define 'strange'.
19:25  dash: RichW: you can write arbitrarily terrible code in python
19:25  dash: RichW: anything's possible
19:26  TheCommieDuck: If I have a = 3, b = 2, and c = (a,b)..then c = (3,2). However, if a changes to 4 then c is still (3,2). Is there a way to make c update when a/b change?
19:26  _habnabit: TheCommieDuck, no.
19:26  TheCommieDuck: _habnabit, ok.
19:26  _habnabit: TheCommieDuck, ints are immutable.
19:28  TheCommieDuck: _habnabit: I know, I just wondered if there was something like reference(a) or whatever.
19:28  _habnabit: TheCommieDuck, fortunately, no.
19:29  Wolfpaws: I have a problem... I'm trying to make a simple threading.Timer work with the method of a class as callback function, but nothing happends. The method doesn't get executed. Any idea, why?
19:29  TheCommieDuck: _habnabit: Ok, thanks!
19:29  _habnabit: Wolfpaws, why are you using threading.Timer?
19:29  Wolfpaws: _habnabit: Because I don't know of any other way.
19:29  Supra7: because it R0X0R!!!
19:30  _habnabit: Wolfpaws, any other way to do what?
19:30  TheCommieDuck: Wait, one more quick question: Will something like a class with a just a few variables/no methods be significantly slower than a tuple doing the same thing?
19:30  Wolfpaws: _habnabit: Call a method in a timely interval
19:30  _habnabit: TheCommieDuck, tuples are immutable, so they can't do the same thing.
19:31  _habnabit: Wolfpaws, your event loop should be able to handle that.
19:31  TheCommieDuck: _habnabit: Ah, good point. I get mixed up sometimes. s/tuple/list or just single variables/.
19:32  Wolfpaws: _habnabit: It could, but a thread is required to execute methods independant of the main loop
19:32  _habnabit: TheCommieDuck, well, that's not what you'd use a list for.
19:32  _habnabit: Wolfpaws, okay, you really need to explain what exactly you're trying to accomplish here.
19:32  TheCommieDuck: _habnabit: Um. Apologies, I'm not thinking straight. :L
19:32  ark3qqq: TheCommieDuck: It sounds like you want to use a class instance. :)
19:33  _habnabit: TheCommieDuck, if it's immutable, used a namedtuple. If not, use a class.
19:33  dash: Wolfpaws: in general, you don't need threads for that.
19:33  TheCommieDuck: Ok, thanks guys! :)
19:33  Wolfpaws: dash: Why not?
19:34  dash: Wolfpaws: because you can do it without threads.
19:34  _habnabit: Wolfpaws, one should avoid threads whenever possible.
19:34  Wolfpaws: How so?
19:34  _habnabit: How? Well, don't use them.
19:35  _habnabit: That part is easy.
19:35  Wolfpaws: No; I mean -- What's the main reason against them...
19:35  _habnabit: They add a lot of extra complexity for no gain.
19:35  ali3n0: hi folks. how can I check if a given file name is executable? I'm trying with os.access but I understand it is meant for paths not files
19:35  ark3qqq: There's no challenge when using threads. :)
19:35  _habnabit: In most cases.
19:35  papna_: tesseracter: I wasn't complaining. You have to ask a fully-defined question.
19:35  _habnabit: ark3qqq, haha what
19:36  _habnabit: ali3n0, try to execute it
19:36  papna_: tesseracter: Why don't you slugify every string?
19:36  papna_: tesseracter: That's what it's for.
19:36  ali3n0: _habnabit, I want to check it before executing via subprocess to avoid errors
19:37  _habnabit: ali3n0, what's wrong with handling the error?
19:37  KirkMcDonald: ali3n0: And what do you want to do if it isn't executable?
19:37  _habnabit: ali3n0, what if it becomes non-executable between the time you check and try to execute it?
19:37  ali3n0: KirkMcDonald, just don't execute
19:37  dash: Wolfpaws: Threads complicate your program
19:37  KirkMcDonald: ali3n0: And then?
19:37  tilt: ali3n0: http://docs.python.org/library/stat.html
19:37  dash: Wolfpaws: making it harder to read
19:37  _habnabit: tilt, haha, no.
19:38  dash: Wolfpaws: everything else being equal, simpler code is better.
19:38  Wolfpaws: dash: Yeah. I've figured that part out :)
19:38  dash: Wolfpaws: well, that's the main reason to not use 'em :)
19:38  ali3n0: KirkMcDonald, nothing. I've got a list of files to execute, if it is executable I want to  run it, otherwise tell the user it's a wrong filename
19:38  dash: Wolfpaws: sometimes you can't avoid it. but plenty of times you can.
19:38  KirkMcDonald: ali3n0: So you don't want to do nothing, you want to emit an error message.
19:39  _habnabit: ali3n0, try to execute it, catch the error, and handle it.
19:39  ali3n0: KirkMcDonald, yes
19:39  tilt: ali3n0: your problem is solved. please read the docs.
19:39  ali3n0: _habnabit, ok tnx
19:39  Wolfpaws: dash: Maybe I can avoid em this time
19:39  Wolfpaws: Thanks, tho
19:39  ali3n0: tilt, I'm reading. And replying to people who question too
19:39  tilt: ali3n0: ok :)
19:40  KirkMcDonald: ali3n0: There are any number of other things which could go wrong, other than it not being executable.
19:40  _habnabit: ali3n0, no, os.stat is definitely not what you want.
19:40  ali3n0: KirkMcDonald, ok I'll go for error handling, thanks everyone
19:40  KirkMcDonald: ali3n0: It could not exist. It could execute, but have an error and give a non-zero return code.
19:40  tilt: he now allows users to execute arbitrary files?
19:40  tilt: m/
19:41  _habnabit: tilt, it sounds like that's the entire point of this program, yes.
19:41  tilt: webshell.py
19:41  tilt: ^^
19:41  ali3n0: it's just a gui to let me chose from a list of programs I'd like to run at desktop boot
19:41  tilt: _habnabit: whats wrong w stat
19:42  _habnabit: tilt, requires a lot more parsing; exacerbates the race condition.
19:42  tilt: what race condition?
19:43  chronos: someone know something that authenticate with ldap and offer a openid server ?
19:43  _habnabit: tilt, the race condition that happens between checking if it's executable and executing it.
19:43  tilt: _habnabit: who cares :) it sounds like a convenience thing only to offer executables for selection
19:44  magcius: tilt, how did you know?
19:44  tilt: magcius: know what?
19:44  magcius: "who cares"
19:44  _habnabit: tilt, and the fact that it takes much more time and effort to deal with os.stat instead of just handling the error?
19:44  magcius: we care, that's the whole point of this channel
19:44  tilt: you want to execute every file on the system to find those that can be executed?
19:44  magcius: tilt, that it's only a "convenience thing only to offer executables for selection"
19:44  tilt: this is the biggest shit i heard today
19:45  _habnabit: What
19:45  magcius: tilt, we're not trying to execute every file
19:45  magcius: tilt, he's going to 1) execute it anyway, so if it's not executable it's not executable
19:45  _habnabit: Hahahah
19:45  _habnabit: I think he was trolling.
19:45  dash: _habnabit: i don't think it's unreasonable to look at the +x bit to decide whether to add a file to a list of things you can execute for presentation to the user
19:45  magcius: also, the stat module is useless now that os.stat returns a namedtuple
19:46  _habnabit: magcius, stat.S_IS*
19:46  ahammond: dash:  that seems like a pretty reasonable starting point... unless of course you want to handle #! scripts, too... that could get interesting
19:47  _habnabit: ahammond, those are +x too.
19:47  magcius: ahammond, those have to be +x too to be natively executable by ld
19:47  ahammond: sure, but if you want to be clever, you say "oh, a shbang file... it's not executable, but... I know where that interpreter is... " :)
19:47 --- CamargoBP is now known as bret
19:48  magcius: ahammond, why do you want to be clever?
19:48  _habnabit: It's not executable?
19:48  Juhaz: ahammond, no, you say "it's not executable", and that's it.
19:48  _habnabit: Oh.
19:48  ahammond: magcius: I dropped in late to the conversation. Ignore me. :)
19:50  ali3n0: damn this stat thing is harder than I though :)
19:53  ark3qqq: ali3n0: What version of Python are you using?
19:54  ali3n0: ark3qqq, 2.6.6
19:54  thyko: what does ReconnectingClientFactory.resetDelay() do? exactly?
19:54  kerio: resets the exponential delay
19:54  kerio: you're supposed to call it once the connection is established from the protocol
19:54  thyko: why?
19:54  kerio: reconnectingclientfactory retries with exponential time
19:55  thyko: i see
19:55  ark3qqq: ali3n0: Okay. If you are using os.stat(...), you're aware that the result is a namedtuple, right? Just making sure...
--- Log closed Thu Dec 09 20:00:34 2010
--- Log opened Thu Dec 09 20:15:58 2010
20:15 --- Users 804 nicks [0 ops, 0 halfops, 0 voices, 804 normal]
20:16  dash: saju_m: there's lots.
20:16  nosklo: saju_m: there's winpdb
20:16  doki_pen: nosklo: got it, urlparse.urljoin('http://', 'techcrunch.com')
20:16  nosklo: saju_m: it's a graphical python debugger
20:16  doki_pen: nosklo: if there is a protocol in arg 2 then it ignores arg 1
20:17 --- Channel #python was synced in 90 seconds
20:17  magcius: nosklo, the name of winpdb sucks though
20:17  doki_pen: nosklo: yours doesn't work because it could be https or god knows what else
20:17  nosklo: magcius: what's wrong with it?
20:17  doki_pen: nosklo: you'd need a regex
20:17  magcius: nosklo, "win"
20:17  shylent: maybe it is that good
20:17  nosklo: magcius: you'd prever losepdb?
20:18  magcius: nosklo, even though it's wxwidgets and thus cross-platform
20:18  dash: heh
20:18  nosklo: prefer
20:18  magcius: nosklo, I'd prefer "this-is-not-windows-specific"-pdb
20:18  nosklo: magcius: doorpdb?
20:20  doki_pen: :S, actually doesn't work
20:20  TheCommieDuck: Sorry, but I have another question. Is there a way to compare class instances based on what values their variables have? For example, if I have class Foo with members bar and baz..then Foo(bar=1, baz=2) != Foo(bar=1, baz=2).
20:21  papna_: TheCommieDuck: Define __eq__ and __ne__
20:21  dash: TheCommieDuck: then also __hash__
20:22  papna_: Maybe.
20:22  papna_: Hopefully, I guess.
20:22  nosklo: doki_pen: I don't think that's what urljoin does, no
20:22  TheCommieDuck: Um, ok. Would, for example, just __eq__ work? Or would I need to do all of them?
20:23  nosklo: doki_pen: you can use urlparse.urlparse(), and then rejoin
20:23  Sagan: hello, if a program that was compiled by python2.xxx wont run on python3.xxx ?
20:23  nosklo: Sagan: no.
20:23  dash: TheCommieDuck: only if you are sure you'll never use != on those objects ever
20:23  nosklo: Sagan: not even the same source code would work, probably
20:23  dash: TheCommieDuck: (hint: you'll use it)
20:23  papna_: TheCommieDuck: "if self.a == other.a and self.b == other.b"
20:24  locojay: hi how can i convert a defaultdict(list) back to a regular dict
20:24  papna_: TheCommieDuck: Oh, I misunderstood the question.
20:24  dash: TheCommieDuck: twisted.python.reflect.FancyEqMixin is a nice thing to read
20:24  locojay: only thing i can think of is using json.dumps and json.loads?
20:24  papna_: TheCommieDuck: == < <= > >= !=  don't depend on each other.
20:24  dash: locojay: why?
20:24  papna_: locojay: dict(your_default_dict)
20:24  papna_: locojay: Why?
20:24  locojay: passing it to mongo and it needs a dict
20:24  TheCommieDuck: So if I get you, then defining __eq__ defines the == operator, and __ne__ the != operator?
20:25  dash: TheCommieDuck: yes.
20:25  locojay: thnks
20:25  papna_: TheCommieDuck: Correct.
20:25  Sagan: nosklo: thanks, I"ll try out the convertor tool 3to2tool.
20:25  TheCommieDuck: (Just I'd like to be able to say Position1 == Position2, rather than (Position1.x, Position1.y, Position1.zx, Position1.zy) == (Position2.x, Position2.y, Position2.zx, Position2.zy)
20:25  ark3qqq: Interesting. I thought a defaultdict is a dict.
20:25  dash: Sagan: or just use python 2
20:26  TheCommieDuck: Then what does the __hash__ function do? If you compare the hashes?
20:26  TheCommieDuck: Wait, no. That wouldn't make sense.
20:26  papna_: TheCommieDuck: It lets your object be used as a dict key
20:26  papna_: TheCommieDuck: Or in sets
20:26  ark3qqq: TheCommieDuck: But don't do that if your object is mutable.
20:26  nosklo: doki_pen: http://bpaste.net/show/12163/
20:27  TheCommieDuck: papna_, dash: Thanks for the help. :D
20:29  TheCommieDuck: (For the __ne__ method, is it safe to just do 'return not self == other'?_
20:30  KirkMcDonald: Sure.
20:30  papna_: TheCommieDuck: That's pretty reasonable.
20:30  TheCommieDuck: Ok. I just vaguely remember something in C++ about not implementing some operator using its inverse.
20:31  dash: Things are all crazy up in C++ land.
20:31  natalie: again i need help freezing a python file =/
20:31  papna_: TheCommieDuck: That's certainly an option that a language can run with.
20:31  TheCommieDuck: I must say, it feels hard work to write it [C++] now after using Python for...a month and a bit?
20:31  _habnabit: C++ is terrible, yeah.
20:35  ark3qqq: Speaking of C++, has anyone here played around with Google's Go?
20:35  KirkMcDonald: ark3qqq: Little bit.
20:35  nosklo: I can't find a use case for Go
20:35  ark3qqq: KirkMcDonald: What did you think of it?
20:35  KirkMcDonald: I liked it.
20:35  dash: yeah it has a couple nice ideas but overall i think it's a mistake
20:36  KirkMcDonald: nosklo: The use case it was created for was writing long-running servers.
20:36  dash: which is why it's baffling that it uses shared-state concurrency
20:36  KirkMcDonald: heh
20:37  KirkMcDonald: As a rule state is shared using the built-in queues.
--- Log closed Thu Dec 09 20:41:09 2010
