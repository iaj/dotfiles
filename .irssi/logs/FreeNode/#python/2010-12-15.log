--- Log opened Wed Dec 15 00:00:31 2010
--- Log closed Wed Dec 15 00:02:36 2010
--- Log opened Wed Dec 15 00:07:59 2010
00:07 --- Users 741 nicks [0 ops, 0 halfops, 0 voices, 741 normal]
00:08  bob2: cypha: so in a sense whether to return anything or not is one of the things you decide when you say "I'm writing a function to do foo"
00:08  bob2: dash: do you know of any good books or articles to teach effective unit testing?
00:08  cnfer: zamba:  it sais not uploaded yet?
00:09  bob2: cypha: but beyond that, your functions (methods in particular) generally either return something or modify something, but not both
00:09  cnfer: oh, nm
00:09  cnfer: i'm tired
00:09  zamba: cnfer: hehe
00:10 --- Channel #python was synced in 129 seconds
00:10  cnfer: so do you have something that works now
00:10  cnfer: ?
00:11  cypha: bob2, guess i'll understand that by example..i'm waiting for the juicy stuff in the tutorial
00:11  jorn: I'm trying to split a unicode string (Python 2.6) so that its utf-8 representation will have at max n byte.
00:11  jorn: i already found a nice way to do this: unicode(myUnicodeStr.encode("utf-8")[:maxlength], "utf-8", errors="ignore")
00:11  bob2: encode then slice
00:11  zamba: cnfer: yeah, but still not been able to figure out the calculating of the checksum
00:11  jorn: but I'm thinking of the problem of combined characters, which could still be split in the middle
00:11  bob2: jorn: that's not a sensible thing to do
00:11  cnfer: o,O
00:11  cnfer: zamba:  and you have the actual device?
00:12  bob2: jorn: what's this for?
00:12  zamba: cnfer: yup
00:12  fission6: i have a bunch, lets say 6 different subclasses of unittest.TestCase, is it reasonable to create a "wrapper" class which subclasses all of these so i can run unit tests and access all the tests each subclass provides?
00:12  cnfer: zamba:  didn't the devs respond to your queries?
00:12  bob2: fission6: no
00:12  zamba: cnfer: still no answer
00:12  cnfer: o,O
00:12  jorn: bob2: inserting into a db with utf-8 encoding, fixed length size, i have a unicode string, orm mapper expects unicode string
00:12  fission6: bob2: what is prefered
00:12  fission6: and why is this bad
00:12  wm4: how can I get dir() to list "private" members of an object, i.e. those starting with __ (and which get mangled to _Classname_)
00:13  bob2: fission6: your test runner handles running them all together
00:13  jorn: bob2: and I'm on this for quite some time so why is it not a sensible thing to do?
00:13  cnfer: zamba:  i say again, the datetime is not in hex
00:13  bob2: wm4: don't think of them as private, think of them as mangled (and they're very rarely used in modern python code)
00:13  bob2: wm4: and dir does list them
00:14  fission6: well i can only gather asserts if my testcase inerhits them so I have to create a class which would inherit all the different subclasses of TestCase
00:14  zamba: cnfer: so how should that be xor-ed?
00:14  bob2: jorn: because you're breaking things.  any char that isn't in ascii will use more than one byte, so you will be randomly cutting single chars in to pieces
00:14  zamba: cnfer: read in as an int?
00:14  cnfer: not a clue
00:14  wm4: bob2: so why don't they appear when I do dir() on my object? I'm 100% sure my object went through the ctor, where such a member must have been set
00:14  cnfer: maybe
00:14  zamba: cnfer: that's a big int, though
00:14  wm4: bob2: it's like it disappeared
00:14  jorn: bob2: true, that's why i'm using errors="ignore"
00:14  bob2: fission6: I don't know what that means, but your test runner will find the classes and run the tests
00:14  bob2: fission6: what problem are you trying to solve?
00:14  bob2: jorn: right, so you're just trashing your data then
00:15  jorn: uhm nope
00:15  zamba: cnfer: i've asked on #crypto as well, maybe they can provide some insight
00:15  bob2: jorn: you can't recover it
00:15  cnfer: :P
00:15  jorn: bob2: i have a unicode string
00:15  jorn: i'm encoding it to utf-8
00:15  jorn: so i know there shouldn't be any encoding errors
00:15  jorn: now i split it somewhere
00:15  jorn: might break the last char
00:16  jorn: which is why i decode it with errors=ignore
00:16  bob2: wm4: http://paste.pocoo.org/
00:16  bob2: jorn: right, which makes it not reversable
00:16  fission6: i have 6 different subclasses of TestCase mainly with assert tests broken out across the 6 subclasses, i am trying to write some testcases which pull from different subclasses of TestCase so in some sense I need to create a wrapper class which inherits form all the 6 subclasses
00:16  jorn: bob2: well, truncating is never reversable
00:16  bob2: so why bother doing this at all?
00:16  bob2: base64 encode it or something that can be reversed
00:17  jorn: i have a fixed size db table column, what does this help?
00:17  jorn: did you take the time to read what i said?
00:17  wm4: bob2: the code is a bit complicated, there might be some PyGTK interaction causing this problem
00:17  jorn: s/said/wrote/
00:17  bob2: wm4: http://paste.pocoo.org/show/304965/ <- works
00:17  bob2: wm4: but really, just don't use __
00:17  wm4: bob2: is it ok to paste a partial example?
00:17  dash_: wm4: http://paste.pound-python.org/
00:17  cypha: bob2, when i start python from the cmd prmpt, and i import ex1.py, i cannot type "fib" or "fib2" to receive "<function fib2 at 0x028C1770>"
00:17  cypha: but when i use the python shell, it does give that
00:17  wm4: hm, someone must trash my __ members then
00:18  bob2: jorn: yes, of course I read it.  the thing you are doing means you cannot recover the initial data (due to cutting up chars and ignoring errors).  so why even try to do this?  encode to utf-8, base64 encode, stick that in the db.
00:18  wm4: bob2: how can I take the advice of not using __ seriously, when __init__ uses it? :D
00:18  bob2: cypha: I don't know what you mean by python shell
00:18  bob2: cypha: if you import ex1, then fib and fib2 are attributes of ex1
00:18  bob2: wm4: ????
00:18  dash_: wm4: leading _and_ trailing '__' is reserved for names that python treats specially.
00:18  bob2: wm4: __foo__ names are magic internal names
00:19  cypha: bob2, ohh, duh
00:19  jorn: bob2: well, tell me how i would truncate a unicode string to fit in a fixed utf-8 size then please
00:19  cypha: that's what it is
00:19  bob2: wm4: __blah is a silly way to mangle the name, and has been discouraged for a very long time
00:19  dash_: wm4: for names _you_ define, start with one underscore if it's non-public, otherwise none.
00:19  cypha: i had to use it as an attribute
00:19  cypha: thanks
00:19  wm4: anyway, my problem persists when I just use _ instead of __, it didn't have anything to do with __ in particular
00:19  bob2: wm4: sure
00:19  wm4: what could an object member possible make disappear?
00:19  bob2: wm4: I'm just sayiong that in general you shouldn't use __names
00:19  wm4: I'm not doing anything strange
00:20  bob2: jorn: I think your actual constraints are "I have a unicode string and I need to split it across a series of fixed-size db columns that have to contain valid utf-8 data", right?
00:20  bob2: wm4: pastebinz
00:20  jorn: bob2: nope
00:20  bob2: ok!
00:20  jorn: bob2: i want to get rid of the leftovers, no use for them anymore
00:20  jorn: just truncate
00:21  jorn: but my problem is that unicode allows combined chars...
00:21  bob2: ok, but that sounds like a bad idea to me.  best of luck.
00:21  wm4: bob2: partial example,. not independently runnable: http://paste.pound-python.org/show/lOALrr6FxrVUkMbqYOJY/
00:22  wm4: bob2: I get an exception on line 36 that self._rc doesn't exist, but only sometimes (it works on most other cases, no clue why/when)
00:22  jorn: e.g. u"Å©" can be represented as u"u~"
00:22  dash_: jorn: why are your buckets defined in byte size rather than character size?
00:22  bob2: wm4: pastebin the exception
00:22  jorn: dash_: well, it's postgresql with a varchar(2048)
00:23  wm4: bob2: http://paste.pound-python.org/show/bnxuxiQk8yQa0xu9SYTq/
00:23  fission6: bob2: i think the testcase class has to inherit al the subclasses of testcase else i don't see how it could run
00:23  KirkMcDonald: jorn: You can normalize combining characters using unicodedata.normalize().
00:23  bob2: fission6: I don't understand what you're doing
00:23  bob2: fission6: you create subclasses of TestCase to group related tests together
00:23  wm4: KirkMcDonald: oh, looks like python has relatively good unicode support
00:24  fission6: i have several Test classes which subclass TestCase, i want to create a testcase which pulls from several of these subclasses
00:24  jorn: KirkMcDonald: yupp, it's in NFC, still there are chars that don't have a precomposed equivalent
00:24  bob2: fission6: TestSuites are how you group TestCases together
00:24  KirkMcDonald: jorn: Such as?
00:24  bob2: fission6: why do you want to do that
00:24  bob2: wm4: are doing bizarre things like reloading or using pickle or zodb?
00:25  wm4: bob2: no
00:25  fission6: because, i have several related tests which are broken out by subclasses TestCase classes which I need to pull form for high level tests
00:25  kevinh: is there a way to select rows values from memcache with wildcard keys? ... ie memcache.get(article-*) ?
00:25  bob2: no
00:25  wm4: bob2: the only "strange" thing involved is pygtk... as you see, the function is indirectly called by a singla handler installed in a GTK widget
00:25  bob2: pygtk is not deleting attributes
00:25  wm4: s/singla/signal/
00:25  _habnabit: kevinh, memcached doesn't do that.
00:26  wm4: well it's the only clue I have
00:26  bob2: wm4: I guess point us at the full source tree
00:26  bob2: wm4: wait
00:26  bob2: wm4: does gtk have thing called GtkImage2?
00:27  wm4: bob2: no... it has GtkImage though, which is called gtk.Image in PyGTK
00:27  marcoBXBro1: If I want to create a server with multiple ports listening on what is better tcp server or threaded server
00:27  jorn: KirkMcDonald: from http://en.wikipedia.org/wiki/Unicode_normalization : For example, the character U+1EBF (áº¿), used in Vietnamese has both an acute and a circumflex accent. Its canonical decomposition is the three-character sequence U+0065 (e) U+0302 (circumflex accent) U+0301 (acute accent). The combining classes for the two accents are both 230, thus U+1EBF is not equivalent with U+0065 U+0301 U+0302.
00:27  jorn: Since not all combining sequences have a precomposed equivalent (the last one in the previous example can only be reduced to U+00E9 U+0302), even the normal form NFC is affected by combining characters' behavior.
00:27  dash_: marcoBXBro1: that's pretty easy, using Twisted
00:27  bob2: marcoBXBro1: all the server stuff in the stdlib are mostly toys
00:27  bob2: marcoBXBro1: twisted is pretty neat, though
00:27  dash_: marcoBXBro1: http://twistedmatrix.com/
00:27  marcoBXBro1: ok
00:28 --- SquishyNotHere is now known as squishy
00:28  marcoBXBro1: dash_: Thanks Brother
00:28  dash_: marcoBXBro1: tutorial stuff here: http://krondo.com/?page_id=1327
00:28  bob2: wm4: put a print in __init__ I guess
00:29  marcoBXBro1: dash_: u rock!
00:29  cypha: bob2, a couple questions for you: why does "print fib(0)" --> "None" in the Python shell; but when i run python from the cmd prmpt and import ex1.py, and i run "print ex1.fib2(0)" --> []
00:29  wm4: bob2: from what I can tell, self._rc is always there in __init__, and it appears when I print dir(self)
00:29  bob2: cypha: presumably fib doesn't return anything and fib2 does
00:29  jorn: hehe: unicodedata.combining(u"áº¿")
00:29  jorn: TypeError: need a single Unicode character as parameter
00:30  cypha: wow, i'm an idiot
00:30  cypha: i didn't even realize i was checking two different functions
00:30  bob2: cypha: easy to miss, you know what you meant so you see that instead of what is there :)
00:31  cypha: yes, exactly, haha
00:31  wm4: bob2: btw. it seems that all members starting with _ that are not methods disappear at that point
00:31  bob2: it is suspicous
00:31  wm4: maybe, actually all members, that are not methods
00:31  cypha: bob2, print fib(100) --> "0 1 1 2 3 5 8 13 21 34 55 89 None"
00:31  cypha: why is the none there?
00:32  bob2: subclassing PixBufImage is probably a bad idea
00:32  bob2: cypha: I can't see the code
00:32  wm4: bob2: PixbufImage is a normal python class as well
00:32  cypha: http://pastebin.com/aAZxJDCB
00:32  infobob: http://paste.pound-python.org/show/540/ (repasted for cypha)
00:32  wm4: maybe bad naming, but should be ok
00:32  bob2: wait, it's your class?
00:33  papna: cypha: fib returns None
00:33  wm4: bob2: yes
00:33  papna: cypha: You print what it returns.
00:33  bob2: cypha: fib returns None, so tyhat gets printed
00:33  bob2: cypha: because you suppressed all the newlines, it gets printed on the same line as the numbers
00:33  bob2: wm4: pastebin it too I guess
00:35  wm4: bob2: here is the full source file (but still not the complete code): http://paste.pound-python.org/show/GI3mTwS8p8OKS2sZxH3j/
00:35  bob2: abstract() :(
00:35  papna: wm4: Your abstract == going to hell
00:36  wm4: papna: give me something better
00:36  cypha: papna, why does fib(0) get printed as well --> none?
00:36  papna: wm4: Nothing would be better.
00:36  bob2: raise NotImplementedError
00:36  bob2: or leave them empty
00:36  papna: cypha: fib retrurns None.
00:36  wm4: papna: then how can I document it
00:36  papna: cypha: If you did "x = fib(0)", x would be None.
00:36  wm4: sigh, maybe I should just use good old C
00:36  papna: wm4: In your documentation.
00:36  wm4: or Vala
00:36  cypha: fib returns <function fib at 0x02261330>
00:37  papna: wm4: Alternitively, you could use zope.interface.
00:37  wm4: pazope what
00:37  wm4: papna: zope what
00:37  bob2: cypha: that's the function
00:37  bob2: cypha: () calls it
00:37  cypha: why does the line end with None though
00:37  papna: wm4: Your approach leads to writing extra, non-meaningful code, and further breaks super (makes calling parent class methods not work)
00:37  cypha: i'm trying to trace it, and i don't see why
00:37  papna: cypha: The fin function RETURNS None
00:37  bob2: cypha: you print a bunch of numbers with no newliens between them, right?
00:38  bob2: cypha: then the python shell prints the RETURN VALUE of the function, which is None
00:38  wm4: papna: so what, the parent method is not supposed to be called... it's fucking abstract
00:38  papna: cypha: http://codepad.org/HGpxJIeF
00:38  bob2: cypha: since you didn't print any trailing new lines, None ends up on the same line as them
00:38  wm4: papna: and I know it leads to "not meaningful" code, but python kind of makes me (my approach would be perfectly fine in a static typed language)
00:38  bob2: wm4: I give up, I don't know how they can get undefined
00:38  wm4: well, dammit
00:38  bob2: wm4: eh, no, it means you need to adjust your approach in python
00:39  papna: wm4: You assume you know whose method you're calling; you can't know that in a robust approach.
00:39  bob2: wm4: I'd be wondering if you have another GtkImage2 somewhere
00:39  wm4: bob2: no, that's the only one
00:39  cypha: bob2, the function has no return value
00:39  cypha: ohh, so that's why it's none
00:39  bob2: cypha: = it returns None
00:39  papna: wm4: No, not in "a statically typed language". This has *nothing to do with dynamic typing*, but relates to completely different aspects of Python's semantics.
00:39  cypha: papna, ur codepad link didn't work
00:39  bob2: wm4: line 368 doesn't save you from event.region being destroyed btw
00:40  papna: cypha: How so?
00:40  wm4: papna: whatever, somehow the user has to see that the existence of this and that method is guaranteed
00:40  wm4: bob2: I patched PyGTK
00:40  _habnabit: wm4, so use zope.interface.
00:40  cypha: doesn't connect for me
00:40  papna: wm4: That's what your documentation is for.
00:40  bob2: ok
00:40  papna: Or, as I mentioned, zope.interface
00:40  wm4: I don't know what zope is
00:41  _habnabit: wm4, anyway, don't do anything that would raise an exception in the super-most method. Even if it's 'abstract'.
00:41  papna: wm4: You could google zope.interface if you wanted to find out.
00:41  bob2: zope.interface is a thing for documenting interfaces
00:41  _habnabit: wm4, doing anything else makes your code break when something inherits from it.
00:42  wm4: _habnabit: it doesn't add any more breakage that could possible occur... e.g. what if I add some super method later? then it will break because the inheriter doesn't call it
00:42  _habnabit: wm4, I can't parse that.
00:42  dash_: wm4: the moral of the story is "don't subclass"
00:42  wm4: dash_: wat
00:42  bob2: subclassing isn't always bad
00:43  papna: bob2: I wouldn't go that far.
00:43  bob2: it's just the hammer everyone learing class-based-oop sees
00:43  wm4: honestly I wonder why python has oop futures at all
00:43  papna: Subclassing isn't always ill-advised.
00:43  wm4: Lua has a so much better approach
00:43  bob2: haha
00:43  papna: wm4: ...
00:43  srilyk: nice flamebait
00:43  wm4: sorry I'm just annoyed that python randomly uses class members
00:43  wm4: s/uses/loses/
00:43  bob2: it doesn't do that
00:43  _habnabit: Yeah, um, no.
00:43  bob2: somehting in your code or pygtk is
00:44  bob2: provide the full code and I'm sure someone is riled up enough to find it
00:44  _habnabit: I'm going to guess it's pygtk.
00:44  wm4: bob2: well I don't necessarily want to show my code (considering in what sorry state it is), and it also depends on the input data
00:44  bob2: _habnabit: http://paste.pound-python.org/show/GI3mTwS8p8OKS2sZxH3j/, at line 362 self._rc is gone
00:44 --- squishy is now known as SquishyNotHere
00:44  _habnabit: Then how do you expect us to do anything?
00:45  bob2: "please debug this code you can't see"
00:45  wm4: e.h. it happens on an expose event, so it depends on your window size
00:45  srilyk: we're magic, _habnabit, didn't you know?
00:45  wm4: _habnabit, bob2: yeah, I know
00:45  bob2: no reloading, no pickle, seemingly no duplicate GtkImage2 class
00:45  wm4: and I have not the slightest clue how to reproduce this problem in a debuggable way
00:45  wm4: it's basically a heisenbug
00:45  wm4: and that in python
00:45  wm4: I'm totally screwed
00:45  bob2: ?
00:45  _habnabit: bob2, 'is gone' ?
00:46  bob2: _habnabit: AttributeError
00:46  wm4: maybe PyGTK randomly corrupts memory or something
00:46  _habnabit: bob2, you get an AttributeError on /assignment/ ?
00:46 --- SquishyNotHere is now known as squishy
00:46  bob2: _habnabit: http://paste.pound-python.org/show/bnxuxiQk8yQa0xu9SYTq/
00:46  bob2: _habnabit: 374, sorry
00:47  cypha: bob2, how would i get None not to show up?
00:47  cypha: i need a return value then?
00:47  nosklo: bob2: it doesn't seem to have a _rc
00:47  wm4: sorry I edited the code between pasting the code and the exception
00:47  bob2: cypha: it's just how the interactive interpreter works
00:47  papna: cypha: Don't print it
00:47  papna: bob2: What?
00:47  bob2: oh
00:47  bob2: sorry
00:47  wm4: nosklo: it disappears
00:47  _habnabit: wm4, ddo you have any try-excepts in your code?
00:47  bob2: nosklo: not defined on 343?
00:48  wm4: _habnabit: no
00:48  cypha: so papna, i should return it, and then print the variable?
00:48  wm4: _habnabit: well the GTK mainloop does
00:48  papna: cypha: I don't know what you're asking me.
00:48  wm4: the GTK mainloop catches and prints any exceptions and then continues
00:48  cypha: how do I get the None not to show up at the end of print fib(10)
00:48  _habnabit: wm4, pastebin your code and a traceback that matches that code.
00:49  papna: cypha: Don't print it.
00:49  _habnabit: cypha, remove the 'print'
00:49  wm4: _habnabit: does the code has to be complete/runnable
00:49  nosklo: bob2: print dir(self) on line 358 prints it?
00:49  cypha: is it cuz i'm printing it twice? once within the function and then printing the function?
00:49  _habnabit: wm4, no.
00:49  _habnabit: wm4, but your code and traceback don't line up.
00:50  papna: cypha: fib ****RETURNS None****
00:50  papna: cypha: What you are printing is None
00:50  papna: cypha: Since that's what fib returns.
00:50  papna: cypha: You're not printing anything twice.
00:50  wm4: _habnabit: sorry, I can't... the error disappeared
00:50  _habnabit: :T
00:50  papna: cypha: The things you print *in* fib are /completely different/ than the None you are printing
00:51  wm4: _habnabit: wait, different input and it happens again
00:51  cypha: print fib gives me <function fib at 0x028C1BB0>
00:51  wm4: hm, no
00:51  bob2: cypha: do you understand the difference between 'print fib' and 'print fib(10)'?
00:52  papna: cypha: That's because you are now printing the function itself.
00:52  cypha: the only way i can replicate the None is if i do "print fib(0)"
00:52  papna: cypha: Before, you were CALLING the function and printing what it returned (None)
00:52  papna: cypha: fib is a function.
00:52 --- squishy is now known as SquishyNotHere
00:52  cypha: right
00:52  papna: cypha: fib(10) is whatever fib returns there; in your case None.
00:52  wm4: lol... remove the debugging prints, and the error happens again
00:52  wm4: wtf
00:53  wm4: I seriously hope this is my own fault, otherwise this really is a heisenbug
00:53  cypha: how can I save the "None" portion to a variable?
00:53  cypha: papna ^^
00:53  wm4: code: http://paste.pound-python.org/show/iaGU2WgMpSTm1ntzUjsa/ exception: http://paste.pound-python.org/show/gc1HBRMS7leuaKkxubHr/
00:53  papna: cypha: Are you looking for "x = fib(10)"?
00:55  lamdk: are supernoob,  how do i see the help() in the interpreter for.... http://docs.python.org/library/re.html#re.RegexObject?    im trying help(re.RegexObject)
00:55 --- sipsniffa1 is now known as sipsniffa
00:55  bob2: lamdk: and what happens then?
00:55  _habnabit: wm4, in _draw_rect, add traceback.print_stack()
00:55  wm4: _habnabit: NameError: global name 'traceback' is not defined
00:55  _habnabit: wm4, whatever is printing the traceback is omitting the full stack.
00:56  wm4: maybe import traceback ?
00:56  _habnabit: wm4, import it, hurrrrrr
00:56  wm4: lolk
00:56  cypha: papna, how can I get it to show me the return value of fib, exclusively?
00:57  cypha: fib(0) is the only way I can get JUST a return value of None
00:57  bob2: cypha: edit fib to not print things
00:57  wm4: _habnabit: no additional info... it only adds these two lines to the exception backtrace: File "./pzgv", line 11, in <module>    gtk.main()
00:57  bob2: lamdk: if it is an error about re not existing, you need to import it first
00:58  wm4: _habnabit: but it's correct... it's GTK that calls the expose signal handler
00:58  abbe: Hi everyone
00:58  smw: lamdk, I suggest reading http://docs.python.org/library/re.html#re.RegexObject .
00:58  papna: cypha: The return value of fib is ALWAYS None.
00:58  papna: cypha: That's what a function returns if you don't return anything else.
00:59  abbe: is it possible to trace python libraries being loaded by python program ?
00:59  cypha: so how do I get that to print?
00:59  papna: cypha: When you call fib those numbers get printed, because that's what you programed fib to do.
00:59  cypha: if i just want to know the value of a function, how do i check it?
00:59  bob2: abbe: python -v
00:59  bob2: cypha: x = somefunction()
00:59  dash_: also, functions _are_ values.
00:59  bob2: cypha: I think you're just mixing up "a function happens to print stuff" and "the return value"
01:00  cypha: printing a function gives it's return value, right?
01:00  dash_: cypha: no
01:00  dash_: cypha: print the return value of a function prints its return value. :)
01:00  abbe: bob2, thanks, but i'm trying to trace a python webscript which gets called. so i'm planning to modify that script to log all libraries loaded in a file.
01:00  KirkMcDonald: A function call evaluates to its return value.
01:01  papna: cypha: When you call a function, it evaluates to its return value. When you print that value, that value gets printed.
01:01  bob2: abbe: what's a python webscript?
01:01  abbe: bob2, python script called from httpd using mod_python/mod_wsgi
01:02  cypha: hmm..ok, i think it's becoming clearer
01:02  cypha: any way to run a function without getting it's return value?
01:03  lvh: cypha: Just run it?
01:03  dash_: cypha: well, you can ignore its return value, sure
01:03  bob2: abbe: what problem are you trying to fix?
01:03  cypha: because, for example, this function prints numbers, but it prints "None" at the end, because no value is actually ever returned
01:03  tos9: cypha: what's the return value of def f(x): print 12
01:03  cypha: how do I get rid of that None while still utilizing the function's Print feature
01:03  lvh: cypha: Okay, so don't do anything with it?
01:04  lvh: cypha: Why do you have to get rid of the None at all
01:04  abbe: bob2, the python code, runs fine when ran standalone, but not with wsgi handler. and box has multiple python versions installed.
01:04  lvh: All functions return or raise, those are the breaks
01:04  dash_: cypha: I bet it doesn't print None at the end.
01:04  lvh: Either they explicitly return, or it implicitly returns None.
01:04  lvh: (Or it raises.)
01:04  abbe: i doubt its mismatch of modules, but i'm not so sure.
01:04  cypha: ohhh
01:05  cypha: i see what papna and bob2 are saying now
01:05  cypha: just don't print it
01:05  wm4: halp
01:05  lvh: ding ding ding ding.
01:05  cypha: i only print if i want the functions return value as well
01:05  lvh: right.
01:05  abbe: I'm running 2.5
01:06  cuga: I have just created my first useful (for me) python program and I am wondering if somebody more experienced then me could take a quick look at 2 versions of it that I created and let me know if i'm doing anything perticulary stupid or that could be done much better before I continue on creating small programs like this (they are only about ~60 lines each)
01:06  papna: cuga: Inherit from object rather than nothing so that you're using new-style classes.
01:06  papna: cuga: Don't use "except:".
01:07  bob2: abbe: in what way does it not run fine?
01:07  papna: cuga: Oops, sorry, those remarks usually come about 85 seconds later.
01:07  tos9: cuga: sure. pastebin it and you'll get a bunch of eyes looking at it.
01:07  cuga: Simple version: http://paste.pound-python.org/show/545/ me just putting a class around it for fun and learning: http://paste.pound-python.org/show/546/
01:07  tos9: papna:  heh.
01:08  papna: cuga: Don't use os.system. It's less flexible and unnecessarily invokes the shell, which is silly and dangerous. Use the subprocess module instead.
01:08  cuga: tos9, thanks, pasted links above, they are just very simple programs to help me start some processes when it sees they arn't running
01:09  cypha: ok, why does "print fib2(10)" and "fib2(10)" give the exact same thing?
01:09  papna: cuga: Generally in Python, we don't use system utilities like grep when we can use native Python stuff instead.
01:09  cypha: shouldn't "print fib2(10)" duplicate the return value?
01:09  bob2: cypha: class names traditionally start with a capital letter (StartDaemon), so they're easy tp pick out in the code
01:09  cuga: papna, thanks, I'll look into using subprocess module
01:09  nosklo: cypha: "print" is a statement. It doesn't return anything.
01:09  bob2: cypha: no need for an empty else block
01:09  cuga: bob2, I can just exclude it from the block altoghether?
01:10  bob2: cypha: spaces after commans in arg lists (and everywhere else) make things a bit easier to read, too.  no need for #End comments
01:10  bob2: cypha: just not have an else block, yeah
01:10  nosklo: that is confusing
01:10  nosklo: bob2: I think there's a target problem
01:10  ciupicri: is there a way to attach the pdb debugger to another python process? I'm using python-2.7-8.fc14.1.x86_64
01:10  abbe: bob2, it exhibits some weird behaviour which i can't reproduce in the standalone version.
01:11  bob2: ciupicri: don't think so, but you can attach gdb or hack the other program to call pdb.set_trace
01:11  papna: cuga: I don't think you understand how classes work or what they're for.
01:11  ciupicri: bob2, it's a daemon... so pdb.set_trace wouldn't work (no stdin, stdout etc.)
01:12  papna: cuga: You wouldn't call TheClass.theMethod(self....); you'd call self.theMethod
01:12  cuga: papna, you are probably write, I was just seeing if I could get it working even though for what I'm doing I probably don't need a class at all
01:12  papna: cuga: Classes are interesting in that they give you somewhere to bundle up all your state and use operations made just for those data
01:13  cuga: papna, am I way off in how I used it or am I almost there just with a few changes?
01:13  cypha: bob2, does it make sense if "fib2(10)" --> [0, 1, 1, 2, 3, 5, 8]    then "print fib2(10)" --> [0, 1, 1, 2, 3, 5, 8][0, 1, 1, 2, 3, 5, 8] ?
01:14  cypha: or is writing plain old "fib2(10)" implied that it needs to be printed?
01:14  cypha: so it just cancels the redundancy
01:14  bob2: I'm lost
01:14 --- SquishyNotHere is now known as squishy
01:15  cypha: fib(10) --> 0, 1, 1, 2, 3, 5, 8
01:15  cypha: print fib(10) --> 0, 1, 1, 2, 3, 5, 8, None
01:15  papna: cuga: I suppose "way off"
01:15  cypha: fib2(10) --> [0, 1, 1, 2, 3, 5, 8]
01:15  papna: cuga: A class isn't really very interesting unless you're storing some sort of data on instances of it
01:16  tos9: cypha: yes. Generally you want your function fib to *return* that thing not print it. And then you'd do print fib(10)
01:16  cypha: so why doesn't "print fib2(10)" return the value of fib2 on top of what it would have done anyway?
01:16  cypha: so that it would be [0, 1, 1, 2, 3, 5, 8][0, 1, 1, 2, 3, 5, 8]
01:16  papna: cypha: fib2(10) ALWAYS returns None.
01:16  papna: cypha: You happen to print it.
01:17  papna: Oh.
01:17  papna: fib2
01:17  gigamonkey: How do you describe what a generator function does? E.g. fib yields a <mumble> of Fibonacci numbers?
01:17  cypha: papna, http://pastebin.com/aAZxJDCB
01:17  infobob: http://paste.pound-python.org/show/540/ (repasted for cypha)
01:17  papna: cypha: fib2 ALWAYS returns that list.
01:17  cuga: papna: so based on that, for the purpose of my program I should stick with my non-OO version since OO doesn't really add benefit at this point?  I was using it more as just an exercise in playing with classes more then anything by making that 2nd version
01:17  tos9: gigamonkey: how bout "lazy iterable"
01:17  bob2: gigamonkey: fib yields the elements of the fibonacci sequence?
01:17  nosklo: cypha: because print doesn't return anything. It only prints.
01:17  papna: cypha: fib2 only makes that list; it doesn't print anything itself.
01:17  bob2: or 'lazily generates'
01:18  gigamonkey: bob2: I like that one. And that second one.
01:18  gigamonkey: Thanks.
01:18  cypha: if fib2(10) --> [0, 1, 1, 2, 3, 5, 8]
01:18  nosklo: cypha: the return value of fib2 is returned to print, which prints it. So you get only one result.
01:18  mar77i: can anyone give me a hint on this one? uncommenting lines 8 and 10 will make the thing run foreverhttp://paste.pocoo.org/show/304760/
01:18  mar77i: sry http://paste.pocoo.org/show/304760/
01:18  papna: cuga: I wouldn't worry about using classes and I definitely wouldn't use them like you were. The use of classes doesn't really mean you're doing OOP; you're not in that code.
01:18  cypha: ok, so it cancels the redundancy for me?
01:19  nosklo: cypha: there's no redundancy
01:19  nosklo: cypha: the redundancy is on your perception
01:19  cypha: because if "fib2(10)" does something, why does "print fib2(10)" do the same exact thing
01:19  bob2: mar77i: in is implemented in a slightly odd way
01:19  bob2: mar77i: you need a __contains__ magic method to do it efficiently
01:19  bob2: mar77i: let me find the bit in the langref, it blew my mind last week
01:20  smw: cypha, are you running it from the shell?
01:20  mar77i: bob2: lovely :D
01:20  cypha: yes
01:20  smw: cypha, the python shell prints out a variable if it is not put anywhere
01:21  bob2: mar77i: http://docs.python.org/reference/expressions.html#membership-test-details
01:21  cuga: papna: ok thanks, I'll keep refining the first version based on the comments here then and look into the subprocess module you told me about instead of relying on the import of os.  Thanks again for the help, I think python will be fun :)
01:21  papna: mar77i:If you don't define __contains__, "foo in bar" checks `foo == bar[0]`, `foo == bar[1]`...until it's true or you get a specific type of error.
01:21  tos9: mar77i: you know about what happens with your default arg there right?
01:21  smw: cypha, x and print x are pretty much the same thing.
01:21  smw: cypha, in the shell of course
01:21  bob2: mar77i: so since oyu have no __contains__ and no __iter__, it tries __getitem__(self, 0), __getitem__(self, 1), forever
01:21  gigamonkey: Is it wrong to say a generater function 'returns an iterator'?
01:21  cypha: smw, ok, cool, that answers that
01:21  smw: cypha, and there are exceptions
01:21  cypha: thanks
01:21  papna: mar77i: This doesn't really work well for your class.
01:21  bob2: does it return an iterable or an iterator?  I always mix them up
01:22  _habnabit: Iterator.
01:22  tos9: Really? I'd have said neither
01:22  bob2: iterator = thing that has a .next(), iterable = thing that has a __iter__ ?
01:22  _habnabit: tos9, if it was neither, you couldn't iterate over it.
01:22  _habnabit: tos9, ... and yet you can.
01:23  _habnabit: bob2, right, and iterators are also iterable.
01:23  tos9: _habnabit: it doesn't "return" an iterator though. It's itself iterable.
01:23  _habnabit: tos9, ... yes, it does return an iterator.
01:23  gigamonkey: _habnabit: wait, what?
01:23  _habnabit: tos9, if you call a generator function, you get an iterator.
01:23  papna: A generator function returns a generator-iterator object.
01:24  bob2: tos9: calling a generator return and iterator
01:24  gigamonkey: _habnabit: you mean all iterators have an __iter__ ?
01:24  mar77i: tos9: that's totally intentional
01:24  _habnabit: gigamonkey, yes.
01:24  gigamonkey: what does it return?
01:24  gigamonkey: self?
01:24  _habnabit: gigamonkey, itself.
01:24  papna: gigamonkey: Usually.
01:24  tos9: mar77i: k, figured
01:24 --- lancebass is now known as macfag
01:25  _habnabit: Anything else would be a little odd.
01:25  mar77i: I should take not dicts but the class itself there, I know
01:25  papna: You might even say, unusual.
01:25  gigamonkey: _habnabit: yes. But is there a reason why it's important for every iterator to support __iter__
01:25  papna: gigamonkey: So that you can do "for x in some_iterator:"
01:25  _habnabit: gigamonkey, 'cause that's a part of the iterator protocol???
01:25  gigamonkey: papna: Right. Thanks.
01:25  mar77i: umm, instances, I mean, making it a copy and not-quite-copy constructor
01:26  bob2: ahh
01:26  gigamonkey: So the point is 'for x in ...' takes an iterable. And actual iterators are trivially iterable.
01:27  _habnabit: Yes.
01:27  gigamonkey: _habnabit: so just to be pedantic __iter__ isn't really part of the iterator protocol. It's partof the iterable protocol. And know we've come full circle. ;-)
01:27  _habnabit: gigamonkey, pretty sure it is part of the iterator protocol.
01:28  _habnabit: http://docs.python.org/library/stdtypes.html#iterator-types <- yes, it is.
01:28  mar77i: iterables are ... uh iterable :D
01:29  nosklo: gigamonkey: iterators are iterables.
01:30  SeanInSeattle: Hey all.  Can someone point me to the easiest process for creating debian packages out of python projects/eggs?
01:30  _habnabit: stdeb
01:30  bob2: SeanInSeattle: http://pypi.python.org/pypi/stdeb
01:30  bob2: but doing it by hand is quite easy too
01:30  mar77i: um, would this statement be wrong then? "iterables are iterators".
01:30  _habnabit: mar77i, yes.
01:30  nosklo: yes
01:30  _habnabit: mar77i, lists are iterables which aren't iterators.
01:31  gigamonkey: _habnabit: yeah. Though it doesn't seem like for any good reason.
01:31  dropdrive: iterators := { x such that iter(x) is x } right?
01:31  mar77i: oh figured as soon as I sent... stl*::iterator in c++ isn't the same as stl*
01:31  gigamonkey: Other than to say that all iterators are iterable.
01:31  nosklo: dropdrive: not necessarily
01:31  gigamonkey: via duck typing.
01:31  papna: dropdrive: Wrong.
01:31  _habnabit: mar77i, kinda flawed logic.
01:31  _habnabit: mar77i, C++ is pretty batshit crazy.
01:31  dropdrive: iterators := { x such that x.next() works } ?
01:31  bob2: is there a reason the 'contains' protocol couldn't use __getitem__ and interpret 'KeyError' as 'no'?
01:31  papna: dropdrive: x with next and __iter__
01:32  nosklo: dropdrive: it doesn't have to work
01:32  dropdrive: nosklo: So everything is an iterator.
01:32  nosklo: dropdrive: if it has a __iter__() and a next(), it is iterator.
01:32  mar77i: _habnabit: depends if you started programming with one or the other :P
01:32  _habnabit: mar77i, not really.
01:32  nosklo: dropdrive: if it has only __iter__, it is iterable.
01:33  dropdrive: So iterators := { x such that x.next works }
01:33  dropdrive: (not necessarily x.next())
01:33  nosklo: dropdrive: no, it has to have __iter__ too
01:33  papna: dropdrive: The link to the official definition was posted above.
01:33  papna: dropdrive: Stop trying to make up your own.
01:34  tpratt: bob2: you don't always want to implement a __getitem__ just have __contains__ support? (str or list-like stuff)?
01:35  wm4: bob2, _habnabit: if you care, it is possible that the problem was caused by Python garbage collecting the object, even though it was indirectly used and referenced from GTK... if that's the case, it's PyGTK's fault
01:35  bob2: wm4: nope
01:35  bob2: wm4: being an attribute counts as a reference, so that will keep it forever
01:35  mar77i: _habnabit: well I've used boost's templates, but c++ if you say pointervsreference-fucking is batshit crazy, I was right :P
01:35  bob2: tpratt: hm? strings and lists have both
01:35  dropdrive: papna: I'm not making up my own; I'm just trying to figure out what makes sense without blindly taking the docs as "the unarguably best/most intuitive definition"
01:36  wm4: bob2: I mean, PyGTK didn't properly maintain the python object's reference count... it must have dropped to 0, but PyGTK called into the object anyway
01:36  dropdrive: papna: docs.python.org may be your bible, but it's not mine.
01:36  wm4: bob2: scratch that, it (the error) happened again
01:37  tpratt: bob2: true, but s["substr"] or l['item'] won't work for their getitem implementations?
01:38  bob2: tpratt: oh, re my comment, those would raise TypeError not KeyError, you're right
01:38 --- macfag is now known as lancebass
01:39  papna: dropdrive: ..............
01:39  papna: dropdrive: You're blindly guessing at a technical definition.
01:40  papna: dropdrive: That definition *IS* giving in various documents on python.org
01:40  papna: dropdrive: If we have a better definition, we're WRONG, because it's a technical term specified formally.
01:40  dropdrive: papna: You think that definition is precise?  Please.
01:41  papna: dropdrive: I never said "precise"
01:41  papna: dropdrive: Not once.
01:41  dropdrive: papna: I don't see what you mean by "formal" then.
01:41  dropdrive: papna: "Official"?  Fine, it's official.
01:42  dropdrive: papna: That doesn't mean it can unambiguously answer the question: given x, is x an iterator?
01:42  dropdrive: papna: Well, not to me, anyway.
01:42  papna: dropdrive: However, your *random guessing* and *hostility toward the thing that _really defines_ what Python stuff is* is a much, much, much worse way to figure out what something is.
01:43  dropdrive: papna: For example: suppose x's class implements __iter__ (which returns self), and implements .next() using __getattr__ which returns "lambda: 1/0"
01:43  dropdrive: papna: Is that an iterator?
01:44  quizme: does the name of the file need to be the camel-case name of the class in the file ... or is that just a convention?
01:44  nosklo: dropdrive: according to the formal definition, yes, right? Unless I misread
01:44  papna: dropdrive: Sounds like it is.
01:44  dropdrive: nosklo: Well, I don't know :P ...
01:44  bob2: quizme: no and not a convention
01:44  arkanes: quizme: thats not even really a python convention
01:44  bob2: quizme: a single class in a file is relatively rare
01:44  nosklo: dropdrive: did you read the formal definition yourself?
01:45  arkanes: quizme: modules contain as many classes as people think is reasonable
01:45  dropdrive: nosklo: I read it, yes (but only after papna told me to...)
01:45  papna: dropdrive: I'm not sure what "implements .next() using __getattr__" means and I don't think you know what 'returns "lambda: 1/0"' means.
01:45  marienz: class-per-file is a bit of a javaism, it usually makes for somewhat awkward python
01:45  smw: quizme, files and directories are modules. files can hold classes
01:45  dropdrive: papna: def __getattr__(self, name): return (lambda: 1/0) if name == 'next' else None
01:45  papna: quizme: Most maintained Python files have multiple classes.
01:45  nosklo: oh
01:46  papna: quizme: Most of the rest have 0.
01:46  marienz: dropdrive: ...why would you do that
01:46  nosklo: dropdrive: then no, it is not iterator.
01:46  smw: papna, lol
01:46  dropdrive: nosklo: Really?  Someone above said that x.next() doesn't have to work.
01:46  nosklo: dropdrive: the specification says the *class* must implement next. __getattr__ only works on the instance.
01:46 * smw always forgets the l-o-l rule once per day
01:47  marienz: dropdrive: are you just trying to understand definitions better or is there some real-world goal to this?
01:47  arkanes: next really should be __next__ of course
01:47  marienz: nosklo: huh?
01:47  bob2: was it changed in py3k?
01:47  marienz: arkanes: it is in 3
01:47  arkanes: marienz: I know
01:47  marienz: iirc
01:47  nosklo: marienz: what?
01:47  dropdrive: nosklo: 19:32 < nosklo> dropdrive: it doesn't have to work
01:47  cwillu_at_work: yeah;  you call next(foo)
01:47  arkanes: but most importantly, why are you doing stupid stuff and why are you starting stupid conversations about definitions
01:47  marienz: nosklo: why would "next" need to be defined on the class?
01:47  papna: quizme: files and directories are used for namespaces in Python. This may or may not be the best thing to do, but it's what Python does, so it's how you should do things. Files are for organizing your namespaces, not your cdoe.
01:47  nosklo: marienz: in order for it to work
01:47  dropdrive: nosklo: In my messed up example, x implements __iter__ and __getattr__ only
01:48  arkanes: marienz: I'm not sure if its true or not for next(), but __magic__ methods are only looked up in the class, not on instances
01:48  papna: quizme: Filenames should be all lowercase. http://www.python.org/dev/peps/pep-0008/
01:48  marienz: nosklo: you're doing something completely nuts if it's not defined that way, but I'd be quite surprised if you can't loop over an iterator that has it defined through __getattr__ like that
01:48 * marienz checks
01:48  arkanes: dropdrive: are you seriously trying to have a discussion about whether or not an interator that just raises non-iteration exceptions is an iterator or not?
01:49  arkanes: dropdrive: because that is dumb and I will kick you for trolling if you persist
01:49  quizme: papna: thanks!  That helps a lot.
01:49  nosklo: marienz: I'm pretty sure it must be in the class
01:49  nosklo: marienz: even stuff like instance.next = somefunction won't work
01:49  dropdrive: marienz: I was just trying to point out to papna that the official definition isn't really a deifinition because it seems to be ambiguous for certain degenerate objects
01:49  marienz: nosklo: interesting. sec.
01:50  dropdrive: arkanes: I was only defending myself from papna, see what I wrote to marienz
01:50  arkanes: dropdrive: yeah I don't care
01:50  arkanes: dropdrive: drop it or leave
01:50  papna: dropdrive: You want a more precise definition than exists/matters.
01:50  arkanes: semantic arguments are stupid and they're even more stupid when at least one party is arguing in bad faith
01:51  papna: dropdrive: You were shooting in the dark, so I pointed you to the documentation which defines the term; you responded with a diatribe likening me to a religious zealot.
01:51  marienz: all this does is point out peculiarities of the cpython implementation, as far as I'm concerned, as nobody in their right mind would implement next this way
01:51  nosklo: marienz: you can define __getattr__ in the metaclass though. That would work.
01:51  arkanes: papna: *soothe*
01:51  papna: *purrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr*
01:51  dropdrive: papna: Well, yes and no; you can't say that my definition is "wrong" just because it's not worded like the docs if the docs themselves don't define iterators rigorously
01:51 --- ChanServ sets modes [#python +o arkanes]
01:56  marienz: nosklo: you're quite right, it looks like the *type*'s tp_iternext field gets set to a helper that calls the next() method if it exists and set to a different helper that raises an exception if not
01:56  LeoAtWork: have any of you ever used pymysql?
01:56  marienz: I think I should've remembered that
01:56 @arkanes: LeoAtWork: oursql is preferred
01:56 --- ChanServ sets modes [#python -o arkanes]
01:56  dropdrive: papna: Anyway after re-reading your link I think the docs are saying "if you want to write an iterator that behaves like what every reasonable Python programmer expects then it had better do this:" -- and I learned about tp_iter and tp_iternext..
01:56 --- ChanServ sets modes [#python +o arkanes]
01:56 --- arkanes sets modes [#python +b *!*dropdrive@*.nyc.res.rr.com]
01:56 --- ChanServ sets modes [#python +o infobob]
01:56 --- infobob sets modes [#python +b $a:dropdrive]
01:56 --- infobob sets modes [#python -b *!*dropdrive@*.nyc.res.rr.com]
01:56 --- ChanServ sets modes [#python -o arkanes]
--- Log closed Wed Dec 15 02:02:13 2010
--- Log opened Wed Dec 15 02:07:37 2010
02:07 --- Users 700 nicks [0 ops, 0 halfops, 0 voices, 700 normal]
02:07  arkanes: htoothrot: to answer the more general question, you use a sentinal value
02:08  arkanes: htoothrot: SENTINAL=object() is a way to make one that won't ever be a valid value
02:08  pozican: I'm using read_until function in the telnetlib module - Is there a way to make it 'timeout' if the read_until value isn't found in X seconds?
02:08  htoothrot: Nice, thanks guys..
02:08  ivan`: sentinel
02:08  arkanes: yeah
02:08  arkanes: not sure what happened there, I did it twice :(
02:08  arkanes: pozican: nope
02:08  pozican: arkanes: what is the proper way to complete what I'm trying to do?  :\
02:08  arkanes: pozican: telnetlib is pretty bad and unfunctional, twisted has some better implementations
02:08  pozican: le sigh
02:09  pozican: Thanks
02:09  lvh: pozican: FWIW arkanes is correct
02:09 --- Channel #python was synced in 125 seconds
02:09  arkanes: pozican: theres very little good about any of the network related stuff in the stdlib
02:10  pozican: lvh: I beleive him - I remember before 2.6 there wasn't even a timeout ability
02:10  arkanes: pozican: especially if you care about things like concurrency or timeouts and so on
02:10  pozican: unfortunately in this case twisted isn't really an option, so I have to move to another scripting language it appears
02:10  arkanes: .. yes that is way less work :P
02:10  papna: pozican: Why is that?
02:10  arkanes: but whatever lifts your skirts
02:10  cwillu_at_work: pozican, how is twisted not an option, but a different language _is_?
02:11  lvh: pozican: Whoa. Why isn't twisted an option?
02:11  pozican: cwillu_at_work: twisted isn't installed and other languages are?
02:11  papna: pozican: Why is that an issue?
02:11  pozican: I've never had good luck with installing modules into my home folder.
02:11  lvh: pozican: Neither is your software, yet
02:11  lvh: pozican: But that doesn't prevent you from using it :)
02:11 --- pr3d4t0r is now known as pr3d4k4t
02:12  papna: pozican: Using virtualenv is not so hard.
02:12  arkanes: for what its worth I don't think any other scripting language I can think of has any useful networking out of the box either
02:12  pozican: and since this script will be polled from another (under priv'ed) user, I'm sure it won't be worth the effort
02:12  tpratt: just put a copy of twisted in the same directory as your script.
02:12  Eevee: perl has...  IO::Socket...
02:12  cwillu_at_work: pozican, the quick and dirty way is to put the files in the same place as your modules.  The clean and correct way is a virtualenv as mentioned
02:12  arkanes: perl doesn't even have IO::Socket out of the box :P
02:12  arkanes: you get a socket() syscall
02:12  lvh: Eevee: except it doesn't
02:12  lvh: Eevee: That's an extension, just like twisted
02:12  lvh: Eevee: IF you wanted to do it right under perl, you'd use POE
02:13  Eevee: http://perldoc.perl.org/index-modules-I.html  IO::Socket comes with core
02:13  Eevee: take THAT, twisted
02:13  lvh: if you get perl from there, yes, you do
02:13  abbe: anyone has any ideas about programmatically tracing loading of python modules ?
02:14  lvh: that doesn't match what people actually have installed though
02:14  lvh: (unless you compile perl from scratch, or run slack, or something)
02:14  arkanes: abbe: python -V
02:14  lvh: pozican: Anyway, I can't stop you
02:14  lvh: pozican: But that sounds like a very silly reason to stop using Python
02:14  pozican: lvh: it looks like it might not be an issue.
02:15  lvh: pozican: (For reasons already mentioned: your software isn't installed either -- what's the difference between twisted and your app that makes one harder to get running than the other?)
02:15  abbe: arkanes, thanks, but I'm looking for some function which I could embed in a script to enable tracing.
02:15  lvh: pozican: Well, yes: I don't see how it could ever be an issue either
02:15  pozican: lvh: is a virtualenv going to work for another user?
02:15  arkanes: abbe: what kind of traceing, exactly
02:15  lvh: pozican: I run code that depends on twisted and a bunch of other stuff as users with very low privileges all the time and have never had issues
02:15  lvh: pozican: Well the point of a virtualenv is to have an independent environment
02:15  lvh: pozican: so "yes"
02:15  pozican: lvh: I presume twisted isn't installed as a virtualenv though - but in your standard modules dir or w/e
02:16  pozican: lvh: installed 'properly'
02:16  lvh: pozican: especially if you use --no-site-packages (otherwise it's possible that you have a user-installed dependency, which is then used, but your underprivileged user is missing)
02:16  lvh: pozican: Right
02:16  abbe: arkanes, loading of python modules, and I want to capture output similar to 'python -v', but i've no control over command-line parameters passed to the script. It's invoked through WSGI.
02:16  lvh: pozican: I don't see why you wouldn't do that though
02:16  lvh: pozican: What platform are you running on
02:16  pozican: lvh: centos - it's in rpmforge
02:16  pozican: I don't like playing with python on centos
02:16  pozican: it gets all pissy
02:17  lvh: pozican: Well, if that version is at all recent, I'd use that
02:17  lvh: (recent twisted versions use year numberings, so 10.x is from 2010)
02:17  lvh: to be fair it probably doesn't matter, the telnet code probably hasn't changed in a few years
02:17  pozican: lvh: lvh it's 8.1.0 - but considering my python version is 2.4.3 - I dont' consider it too bad
02:17  lvh: oh
02:17  lvh: wow
02:17  arkanes: abbe: you can install an import hook
02:17  arkanes: abbe: although of course that will only catch imports after the hook as been installed
02:18  lvh: pozican: Yeah, thanks to that crap I can't use genexps in twisted code -.-
02:18  pozican: lvh: unfortunately centos's core utils depends on python 2.4, so upgrading it causes all sorts of problems
02:18  abbe: arkanes, cool, that will be great, any hints ? I'm running Python 2.5.2.
02:18  arkanes: abbe: theres some better stuff in 2.7, but basically you just replace the built-in __import__ with your own version
02:19  abbe: arkanes, real_import=__import__  \n __import__=log_import_and_call_real_import <<< something like this to enable logging ?
02:19  arkanes: abbe: basically yeah
02:20  lvh: pozican: Well, yes, but I just use tox to ship recent interpreters with my software
02:20  abbe: arkanes, thanks :)
02:20  lvh: pozican: The thing I ship to servers for production is entirely self-contained
02:20  rubyruy: has anyone tried to make a PEP for a "safe dereference operator" a la groovy?
02:20  rubyruy: e.g. http://log4p.com/2007/08/17/groovy-and-the-safe-dereference-operator/
02:20  pozican: lvh: tox?
02:20  arkanes: abbe: since you're not actually trying to affect the behavior of import you don't need to worry about any of the wierdness when packages and relative imports are involved
02:20  arkanes: rubyruy: python doesn't have references, so there's no need for any such thing
02:20  abbe: arkanes, okay
02:20  uncreative: i have the following structure: ./top/__init__.py , ./top/inner/__init__.py , ./top/inner/needed.py , ./top/inner2/__init__.py , ./top/inner2/main.py
02:20  lvh: pozican: It has a virtualenv with its own packages and dependencies and even it's own interpreter
02:20  uncreative: in main.py i have: import top.inner.needed
02:20  pozican: lvh: neat
02:20  lvh: pozican: if the native system has libc and is the right arch, it works
02:21  rubyruy: arkanes: the name is somewhat decieving in python terms - might be better described as a "null accessor" or somesuch
02:21  uncreative: but when i try to run python top/inner2/main.py i get: File "top/inner2/main.py", line 1, in <moduleâ¦ ImportError: No module named top.inner.needed
02:21  arkanes: rubyruy: yeah no its a waste of everyones time
02:21  lvh: pozican: http://codespeak.net/tox/
02:21  pozican: lvh: thanks
02:21  Rhamphoryncus: rubyruy: python likes having an error when things are messed up.  Constantly silencing AttributeError would undermine that
02:21  uncreative: does anyone know how i can import a module from a sibling package?
02:22  arkanes: happily, you can't even do it in your own packages
02:22  arkanes: uncreative: same way you import any other package
02:22  bob2: uncreative: scripts don't go in packages
02:22  bob2: uncreative: and top should be a package
02:22  rubyruy: Rhamphoryncus: well the nice thing about it is that you only  use it when you know for a fact you don't care about objects not existing
02:22  uncreative: bob2: top is a package - it has __init__.py
02:22  bob2: uncreative: so 'from top.inner import needed'
02:22  rubyruy: it's definitely  better then catching AttributeError since you can specify which attribute in a chain
02:22  Rhamphoryncus: rubyruy: in that exceedingly rare circumstance you can use hasattr
02:23  bob2: uncreative: is the directory above top in the path?
02:23  rubyruy: exceedingly rare? you never do thing.person.name ?
02:23  uncreative: bob2: i tried your suggestion, from top.inner import needed but i'm still getting: ImportError: No module named top.inner
02:23  Rhamphoryncus: I never do thing.person.name *and expect it to fail*
02:24  rubyruy: person might be blank
02:24  Rhamphoryncus: If some of my person's don't have a name I'd rather give it default values
02:24  rubyruy: 'null'
02:24  bob2: uncreative: then I guess the parent dir of top is not in your path
02:24  arkanes: rubyruy: null object pattern is happy enough for people who like that sort of thing but it's not encouraged or supported in Python
02:24  Rhamphoryncus: or handle a None person
02:24  uncreative: bob2: it is the current directory - can i make the current directory be searched?
02:25  uncreative: bob2: that is when i do ls, i see top
02:25  rubyruy: null object is more dangerous because you can't really specify where to stop
02:25  rubyruy: :(
02:25  bob2: uncreative: depends what you're doing
02:25  rubyruy: anyway i was actually just asking if someone has actually tried to make a PEP about this
02:26  MostAwesomeDude: Nope.
02:26  uncreative: bob2: what do you mean? i'm trying to refactor some python code so it is not all in one package and one module
02:26  bob2: uncreative: blah blah
02:26  bob2: depends how you're running the whatever
02:26  uncreative: bob2: :D
02:26  Rhamphoryncus: rubyruy: it doesn't have nearly enough usage to justify an operator
02:27  bob2: uncreative: 'python ./blah.py' works
02:27  bob2: uncreative: but if your script is buried in the package, I don't think it will
02:27  bob2: uncreative: PYTHONPATH=`pwd` python blah/blah/main.py
02:27  rubyruy: *shrug* maybe we work with vastly different types of codebases, i see it everywhere
02:27  uncreative: bob2: ah i see - thank you!
02:28  Rhamphoryncus: rubyruy: very different approaches to programming too.  Python is not ruby :)
02:29  rubyruy: you're just judging me by name now :p
02:29  rubyruy: it feels almost like racism
02:29  ciupicri: could some please help with the following cheetah-2.4.3-1.fc14.x86_64 problem http://paste.pound-python.org/show/547/ ? It looks like the Template's method isn't bound and I don't know how to bound it.
02:30  ciupicri: rubyruy, s/racism/rubyism/g
02:30  bob2: ciupicri: you made your SNIPPET method incompatible
02:30  bob2: ciupicri: afaictr
02:30  rubyruy: i can find a lot more to complain about ruby then python if that makes you feel better ;)
02:30 --- toastedpost is now known as signpsot
02:30 --- signpsot is now known as signpost
02:31  Rhamphoryncus: rubyruy: oops, didn't realize groovy was java-based.  It sounded ruby-ish.  Sorry
02:31  cuga: is there a 'pythony' way of checking for a running process other then relying subprocessing out to something like ps with some grepping?
02:31  rubyruy: hah
02:31  ciupicri: bob2, what should I do then?
02:31  bob2: cuga: there's a psutils package on pypi iirc
02:31  bob2: ciupicri: well, you have the source code, check if BuiltinTemplate's SNIPPET takes one or two args
02:32  _habnabit: '//aw
02:32  _habnabit: ugh
02:32  _habnabit: fucking irssi
02:32  ciupicri: bob2, BuiltinTemplate = Cheetah.Template.Template.compile.....
02:32  rubyruy: it would also be cool if python had a spread operator: http://groovy.codehaus.org/Operators#Operators-SpreadOperator%28.%29
02:32  rubyruy: *ducks*
02:32  rubyruy: :D
02:32  ciupicri: bob2, it takes only one
02:32  bob2: ciupicri: self?
02:33  Rhamphoryncus: rubyruy: we have a for loop for that ;)
02:33  rubyruy: now you're just trolling me
02:33  ciupicri: bob2, #def SNIPPET($param1)
02:33  bob2: whatever that means
02:34  amikrop: nosklo: Hello again :)  I wonder if you could now help me out with this, please: http://paste.pound-python.org/show/548/
02:34  Rhamphoryncus: rubyruy: tongue-in-cheek, but it's actually true
02:34  rubyruy: for one, whenever i complain about some would-be-nice iteration related feature in python I am told to stfu and use a list comperhension!
02:34  bob2: ciupicri: anyway, examine the source code of your super classes and see how they define SNIPPET
02:34  _habnabit: rubyruy, list comprehensions are wonderfully general.
02:34  bob2: ciupicri: you can't add extra required args
02:34  rubyruy: yeah they are :)
02:34  ciupicri: bob2, all the necessarily source code is on the pastebin
02:35  bob2: ciupicri: don't think so
02:35  bob2: ciupicri: read the source for your super classes and see how they define SNIPPET
02:35  ciupicri: amikrop, the error is pretty clear; you have either an invalid ("corrupted") utf-8 text or it isn't utf-8, it might be latin1 or whatever
02:35  ciupicri: bob2, what super classes?
02:36  Rhamphoryncus: rubyruy: I'm not saying to stfu.  It's just that shortcuts like you propose are iffy from a language design point of view, and this channel has an apologist mentality.  Probably due to defending against many such critiques over the years
02:36  bob2: ciupicri: BuiltinTemplate, MacrosTemplate
02:36  rubyruy: oh i wasn't saying i felt up-shut! i just meant the flippant answer i usually get is lisp comperhensions not for loops :p
02:36  ciupicri: bob2, they're on the pastebin and the cheetah_macros file is over here http://git.fedorahosted.org/git/?p=cobbler;a=blob;f=contrib/cheetah_macros;h=338bbd4d94ef63249bf8796bf1bab82f62b240ff;hb=65e5646cb11655c39376711550a5a5ba9c854d2e
02:36  bob2: whatever
02:37  ciupicri: bob2, never mind, it's actually empty
02:37  amikrop: ciupicri: but when I parse it manually (copy/paste to the interactive interpreter) I find out it is the unicode character u'\ufffd'
02:37  rubyruy: ... the spread operator would be less useful in python now that i think about it since you have things like len() not being methods
02:37  Rhamphoryncus: rubyruy: Also, this isn't a language design channel.  It's a help channel for using python as-is.  If it's a really good suggestion then we'll support it, that happens once in a while, otherwise it's offtopic
02:38  rubyruy: why is that anyway? len(list) vs list.len() i mean
02:38  Rhamphoryncus: rubyruy: ahh, yes, I've gone down that road before
02:38  ciupicri: amikrop, try saving it to a file, read that file then try to decode its content rather than doing copy&paste
02:38  Rhamphoryncus: len() is conceptually an operator, we just don't pay for the special syntax of an operator
02:38  bob2: http://docs.python.org/faq/design.html#why-does-python-use-methods-for-some-functionality-e-g-list-index-but-functions-for-other-e-g-len-list
02:38  ciupicri: bob2, could you please be more explicit? To be honest I don't understand a thing.
02:38  bob2: ciupicri: nevermind
02:38  rubyruy: figured it would be a faq :p
02:39  Rhamphoryncus: rubyruy: the FAQ gave a totally different explanation than I did ;)
02:39  amikrop: ciupicri: I did so, and it worked. It only doesn't work when I read it from that specific website
02:39  amikrop: ciupicri: what could I do to prevent such errors?
02:40  Rhamphoryncus: rubyruy: I'm quite interested in language design btw, so I'd happily discuss the tradeoffs in PM or another channel
02:40  ciupicri: amikrop, can't you initialize a PyQuery from a file?
02:40  amikrop: ciupicri: sure I can, then what? :S
02:40  rubyruy: is #python-dev for that kind of stuff?
02:41  Rhamphoryncus: #python-dev is more for concrete issues, bug fixes and the like.  This isn't even specific to python
02:41  ciupicri: amikrop, save that webpage with wget or whatever, load its contents into a var, decode it and see if it works; if it works create a PyQuery from it
02:41  rubyruy: ah
02:41  Rhamphoryncus: There is #proglangdesign ;)
02:41  rubyruy: ok let's take it there
02:44  dash_: rubyruy: the historic reason is that there's a special slot on the C definition of python types for length
02:44  dash_: rubyruy: leftovers from ancient times when classes written in python and in C were a lot different from each other
02:45  rubyruy: why not do a gradual phase-out like newclasses? Keep len(foo) but start encouraging foo.len()
02:45  omnirizon: what's a good way to manage non-python files in a project?  say I have image files in an img directory, and some python scripts in a bin or lib directory, and my scripts need to access the image files.  I don't know how to use relative paths in this situation, and absolute paths seem to be a bad idea given distribution needs.
02:45 --- JamesN_ is now known as JamesN
02:46  dash_: omnirizon: oftentimes stuff will put those directories inside python packages
02:46  dash_: omnirizon: and use directories relative to __file__
02:46  bob2: omnirizon: there's no good answer
02:46  dash_: rubyruy: Why bother?
02:46  dash_: rubyruy: it isn't hurting anything the way it is now.
02:46  bob2: omnirizon: but you can use __file__ + os.path.abspath to find them at runtime after you've been installed
02:47  omnirizon: ok.  __file__ sounds promising.  I'll look into it...
02:47  rubyruy: *shrug* it is indeed a low priority aesthetic issue mostly
02:48  amikrop: ciupicri: In fact, it turns out that error occurs when I decode it to utf8
02:48  papna: rubyruy: The argument continues to be made that len(x) reads better than x.len(), especially for beginners.
02:49  amikrop: ciupicri: how can I set PyQuery to use another encoding?
02:50  amikrop: ciupicri: Or should I manually decode the HTML source (in an except clause) and feed it to PyQuery?
02:51  ciupicri: amikrop, a proper website should say the encoding used for the web page in the http headers
02:52  ciupicri: amikrop, have a look at this: http://stackoverflow.com/questions/269060/is-there-a-python-library-function-which-attempts-to-guess-the-character-encoding
02:52  ciupicri: amikrop, if you can't figure out the encoding from the http headers or it's wrong
02:52  ciupicri: amikrop, use one of the answers to convert the webpage to a unicode string that you will pass to PyQuery
02:54  amikrop: ciupicri: thanks
02:57 --- ChanServ sets modes [#python +o infobob]
02:57 --- infobob sets modes [#python -b $a:dropdrive]
03:02 --- infobob sets modes [#python -o infobob]
03:17  rook2rook: hmmmm.....
03:20  quizme: you can't have a "-" in the name of a python namespace ?
03:20  KirkMcDonald: quizme: Module names must be valid Python identifiers.
03:21  ssbr: quizme: "foo-bar" isn't a valid python identifier
03:21  quizme: ok thanks
03:21  ssbr: You *can* create something named like that, but it's inconvenient
03:23  ssbr: what would be "sub-foo-gazmatter" is sub_foo_gazmatter, SubFooGazmatter, or subfoogazmatter for a variable, class, and module respectively in Python
03:39  rook2rook: hi
03:40  ssbr: queen2bishop4
03:44  ojacobson: Is there a way to get at the certificate info for the remote peer when using urllib2 to open https URLs?
03:44  ojacobson: The docs don't say much (particularly, there are almost no docs for HTTPSHandler)
03:45  bob2: probably need to check the source
03:45  ojacobson: I was afraid someone would say that
03:46  bob2: seems not
03:47  ojacobson: thanks for having a look
03:48  bob2: I think you could write a httpshandler replacement that could
03:52  ojacobson: that's a lot more of HTTP than I really want to write myself
03:52  ojacobson: I might see if httplib2 can get me where I need to go
03:52  ojacobson: or give up and use openssl -s_client ;)
03:52  bob2: pycurl lets you
04:01  k_sze: Does Google have a page the explains why Python is the main scripting language they use?
04:04  ivan`: k_sze: the founders liked Python
04:04  ivan`: there is an explanation somewhere but not at Google
04:05  _habnabit: k_sze, what's a scripting language
04:05  k_sze: _habnabit: is that a rhetorical question? XD
04:06  _habnabit: k_sze, not at all. I see a lot of people who use that term who are very, very confused.
04:06  Tau: i'm using pexpect to read data from a program, i want to read the entire buffer at once time. how could i do it ?
04:06  Tau: there are just functions like read(bytes) etc.
04:07  ivan`: maybe bytes is an optional argument
04:07  _habnabit: k_sze, it's probably just best to avoid that term.
04:07  ciupicri: is anyone using Cheetah with Python 2.7 and also extending templates like this http://paste.pound-python.org/show/547/ ?
04:07  Tau: ivan`, well when i make it handle.read() it simply breaks.
04:08  Tau: well at least it doesn't work as i expect and it doesn't send me what i really need.
04:08  _habnabit: Tau, 'the entire buffer' ?
04:08  _habnabit: Tau, what buffer?
04:08  Tau: _habnabit, well. you know, i used handle = pexpect.spawn('prog') then i'm reading from handle with handle.read(100), but, i don't know how to read all data which prog is sending me.
04:09  k_sze: _habnabit: It's not really me saying it's a "scripting" language. The Google Python Style Guide says exactly this: "Python is the main scripting language used at Google."
04:09  Tau: i need to read all data at once time when i make handle.send('command') to prog.
04:09  Tau: so, prog sends me back the result and i want to read all data which prog sent at once.
04:09  _habnabit: Tau, you never want to read anything from the program ever again?
04:09  Tau: but, i don't know how to obtain this behavior since read seems to break when i don't pass 'bytes' to it.
04:10  Tau: _habnabit, how so ?
04:10  _habnabit: Tau, it is a question.
04:10  _habnabit: Tau, please answer it.
04:10  Tau: _habnabit, i do handle.send('command') then it sends me back a result.
04:10  Tau: so, i need to read all data which it sent me.
04:10  _habnabit: er.
04:10  Tau: _habnabit, and after do handle.send('command2') and so on.
04:10  _habnabit: I mistyped it. :T
04:10  Tau: _habnabit, did i answer ?
04:10  _habnabit: Tau, okay, so, that's a very nebulous concept.
04:11  Tau: _habnabit, hm
04:11  Tau: yea
04:11  _habnabit: Tau, how do you know when it's done?
04:11  Tau: _habnabit, well. i'm sending and receiving data from a python instance which i open.
04:11  Tau: _habnabit, that is what i'm trying to discover. apparently when i try to expect for a EOF it doesn't work.
04:11  _habnabit: Tau, ... that's odd.
04:11  Tau: how does python work when it finishs printing the results in the interpreter ?
04:11  _habnabit: Tau, why python?
04:12  _habnabit: Tau, python doesn't do anything special at all when everything has been printed.
04:12  Tau: i mean, when i do for i in range(0, 10): print i, does python send a special character informing that all data was sent ?
04:12  Tau: like end of filf etc
04:12  _habnabit: Tau, no.
04:12  _habnabit: Tau, EOF isn't a character.
04:12  _habnabit: Tau, it's signaled by closing the pipe.
04:12  Tau: _habnabit, hmm, yes.
04:12  Tau: sorry.
04:13  Tau: _habnabit, but, have you idea of how i can solve it ?
04:13  _habnabit: Tau, well, first, why python?
04:13  Tau: _habnabit, well, i'm just learning something here and testing.
04:13  Tau: just curiousity.
04:13  Tau: and, _habnabit i'm gonna do something with python so i'm testing it.
04:13  _habnabit: Tau, 'something with python' ?
04:14  Tau: _habnabit, yes. i have written a little script for vim
04:14  Tau: which permits you to select text and make it run on the fly
04:14  _habnabit: Tau, that's been done already.
04:14  Tau: so, i'm trying to rewrite it without using exec and val
04:14  Tau: _habnabit, hmm, how so ?
04:14  _habnabit: Tau, I mean there's already a million implementations of this?
04:15  Tau: _habnabit, well. i don't know. i have looked for but i didn't find.
04:15  Tau: so, i decided to implement.
04:15  Tau: _habnabit, do you know whether there is something alike for vim ?
04:15  _habnabit: Tau, I don't use vim, but I pretty much guarantee there is.
04:15  _habnabit: Tau, emacs can do it, at least. :V
04:15  Tau: _habnabit, yes i have heard of emacs.
04:15  Tau: i asked in the #vim no one simply answered.
04:15 --- bellicose_ is now known as bellicose
04:15  Tau: i presume it there wasn't.
04:15  Tau: idk
04:16  _habnabit: Tau, I'm sorry that vim is terrible.
04:16  Tau: _habnabit, hehe. i was thinking to learn emacs.
04:16  Tau: but, i found vim easier idk.
04:17  Tau: now, i'm fearing to program it. if there is such a script i simply will be spending time.
04:17  Tau: :/
04:23  Tau: _habnabit, do you know how is called that feature ?
04:23  Ed_Money: can anyone familiar with scrapy help me figure out why the Spider isn't find any Request objects? http://dpaste.com/286788/
04:25  dash_: Ed_Money: what error do you get?
04:26  Ed_Money: dash: no run-time error, but the spider doesn't move past the items in start_urls.
04:26  dash_: Ed_Money: wait, you're scraping _wikipedia_?
04:26  dash_: don't they have a library for this?
04:27  Ed_Money: dash: just the article titles
04:27  _habnabit: There's a database dump.
04:27  Ed_Money: dash: the download page for wikipedia dumps has been down a long time
04:27  Ed_Money: nonetheless, I'd like to figure out why this isn't working
04:28  dash_: Ed_Money: you've seen this? http://www.mediawiki.org/wiki/API
04:28  Ed_Money: dash: DOH
04:29  Ed_Money: but now I'm knee deep into Scrapy and want to figure out what is wrong with my spider
04:29  R0b0t1: I have: for i in xrange(13): odds.append(shift(odds[i], 1))
04:29  R0b0t1: Yet I get: TypeError: sequence index must be integer, not 'slice'
04:29  R0b0t1: In my slice function, which is defined as "shift = lambda l, n: l[n:] + l[:n]"
04:30  papna: R0b0t1: What is the type of odds?
04:30  R0b0t1: papna: List. Note the appends line should be "odds.append(shift(odds[i - 1], 1))", but this still produces an error.
04:31  papna: R0b0t1: Pastebin your code.
04:31  R0b0t1: papna: http://paste.pocoo.org/show/305011/
04:32  papna: R0b0t1: The items in odds are xrange objects.
04:32  papna: R0b0t1: xrange objects don't support slicing.
04:32  R0b0t1: ...
04:32  nosklo: er, they do
04:32  papna: R0b0t1: change line 3 to say "range"
04:33  R0b0t1: So how do I expand an xrange into an actual list?
04:33  nosklo: xrange objects support slicing just fine
04:33  papna: nosklo: Nope.
04:33  papna: nosklo: Used to I think.
04:33  papna: nosklo: Don't.
04:33  papna: R0b0t1: Use "range" to start with.
04:33  nosklo: hm, that sucks
04:33  papna: R0b0t1: Is there a reason you cannot do that?
04:33  papna: nosklo: There was a bug in it for years and when it was finally caught, it was decided "no one uses this"
04:34  R0b0t1: papna: No, not really.
04:34  papna: R0b0t1: Also, never write " = lambda"; use a def for named functions.
04:34  R0b0t1: def is for the weak
04:34  papna: R0b0t1: Also, use four-space indents and no tabs http://www.python.org/dev/peps/pep-0008/
04:35  papna: R0b0t1: R0b0t1 http://paste.pocoo.org/show/305012/
04:43  m0nkfish: sooo xrange cant take 0.5 as a parameter
04:43  MindVirus: Hello. I'm trying to use regular expressions to match any data between 's, including "\'". My regular expression is r"'([^']|\\')*?'". It doesn't seem to match properly.
04:44  Spirits-Sight: Hello, I want to learn python, I don't know ANY thing about programing where should I start?  I want to create a program that gets a file(s) from a site and then compares it to the metadata of last file I have and if newer download it and then check the next file and do this in till the list of files have been download
04:44  MindVirus: Spirits-Sight: Follow the tutorial. http://docs.python.org/tut/
04:44  bob2: m0nkfish: correct
04:45  bob2: Spirits-Sight: http://learnpythonthehardway.org/index is pretty popular at the moment
04:45  Spirits-Sight: MindVirus: it seems the tutorial from the perpecitve of a person that already understand concept of programing
04:46  Spirits-Sight: bob2:  thanks will look at it
04:47  MindVirus: Anyways, does anyone know what might be wrong with my regular expression?
04:48  nosklo: MindVirus: don't use regular expressions for that.
04:48  MindVirus: nosklo: Why?
04:48  MindVirus: Seems like the perfect use case.
04:52  quizme: http://pastie.org/1378299  <--- what does this mean?  "Commands out of sync"
04:53  MindVirus: nosklo: OK, what should I use instead?
04:53  quizme: nm
04:53  quizme: it's because i submitted multiple sql statements.
04:53  nosklo: MindVirus: what's your use case?
04:54  bob2: ugh don't do that
04:54  nosklo: I mean, why are you extracting text out of quotes
04:54  MindVirus: Personal curiosity.
04:55  bob2: quizme: do this: cursor.execute("UPDATE new_runs SET last_updated=%s WHERE new_runs.id=%s", (datetime.datetime.now(), run_id))
04:56  nosklo: well, then use a parser
04:56  MindVirus: nosklo: Seriously, I'm writing a programming language to learn what it's like.
04:56  nosklo: MindVirus: then you want to define a grammar in a parser library... I suggest pymeta
04:56  MindVirus: nosklo: Thing is I might port to C if I like it.
04:56  nosklo: that's ok
04:56  KirkMcDonald: MindVirus: Define a formal grammar.
04:57  KirkMcDonald: MindVirus: C, too, has parser generators.
04:57  nosklo: MindVirus: you still want a parser library, not a bunch of regexps
04:57  MindVirus: nosklo: Everything else parses without regexps.
04:57  KirkMcDonald: MindVirus: "Everything else"?
04:58  MindVirus: All valid code without strings.
04:58  KirkMcDonald: MindVirus: Regexes can parse regular languages. Most programming languages are not regular.
04:58  MindVirus: I am not parsing a programming language.
04:58  MindVirus: I'm just getting the strings out before I remove comments.
04:59  KirkMcDonald: MindVirus: So you're tokenizing something.
04:59  MindVirus: Absolutely.
04:59  KirkMcDonald: Well, regexes are made for that.
04:59  MindVirus: Well jeez.
04:59  MindVirus: So why don't I just tokenize using regex?
05:00  KirkMcDonald: What exactly are you tokenizing?
05:00 --- dash_ is now known as dash
05:00  MindVirus: KirkMcDonald: Source code.
05:00  KirkMcDonald: MindVirus: Also, based on the regex I see above, I don't think you want a non-greedy match.
05:00  KirkMcDonald: MindVirus: Python source code?
05:00  MindVirus: Right on, which is why I used *? instead of *.
05:01  MindVirus: Negatory.
05:01  MindVirus: I'm calling the language "Twig".
05:01  KirkMcDonald: MindVirus: You may want to negotiate my double negative again.
05:01  KirkMcDonald: MindVirus: You *don't* want a non-greedy match.
05:01  MindVirus: Ahh, missed that one.
05:01  MindVirus: Why's that?
05:02  KirkMcDonald: MindVirus: Because you're already explicitly matching [^'] or \'
05:02  KirkMcDonald: And then ending with a '
05:02  MindVirus: KirkMcDonald: I see your point, but does it make a difference?
05:02  KirkMcDonald: I think you also want \\'|[^']
05:02  MindVirus: ...?
05:02  KirkMcDonald: Since [^'] will match the backslash.
05:03  KirkMcDonald: Or... something.
05:03  MindVirus: KirkMcDonald: It's still not matching properly.
05:03  MindVirus: I don't know why/.
05:03  MindVirus: *why.
05:04  KirkMcDonald: MindVirus: Let's see your code.
05:04  MindVirus: import re; re.search(r"'(\\'|[^'])*'", "This is a 'test.'").groups()
05:05  KirkMcDonald: I think you want group(), not groups().
05:06  MindVirus: KirkMcDonald: I think I want groups() because there will be multiple matches (no?).
05:06  KirkMcDonald: MindVirus: search() finds the first match only.
05:06  KirkMcDonald: MindVirus: Notice how the parentheses form a group.
05:06  MindVirus: Noticed.
05:07  MindVirus: Aha, that makes total sense.
05:07  KirkMcDonald: MindVirus: A group which will always consist of either a single character or \'... yeah.
05:07  MindVirus: So, what is the solution? I really just want to split a string into quoted and non-quoted parts.
05:08  MindVirus: So "This 'is' a 'test'." will become ["This ", "'is'", " a ", "'test'", "."].
05:08 --- d4red3vil is now known as johndeere
05:08  dropdrive: shlex is kind of close.
05:09  MindVirus: Yeah but that isn't quite what I need.
05:10  talented: MindVirus, you're not being specific enough for a regular expression to help in this case
05:10  KirkMcDonald: MindVirus: I'd probably use finditer and a loop.
05:10  KirkMcDonald: talented: Eh?
05:10  talented: well, he's capturing everything, so it wouldn't help
05:11  KirkMcDonald: talented: He's tokenizing a string.
05:11  KirkMcDonald: There are two kinds of tokens: Quoted stuff and stuff which isn't quoted.
05:12  KirkMcDonald: MindVirus: The match objects can tell you the start and end indexes of each match, and the search method of compiled regexes can be given a start position.
05:12  MindVirus: Quotes are surrounded by ' and contain any character other than ' unless it is preceded by \'.
05:12  MindVirus: *preceded by \.
05:12  KirkMcDonald: Though, I don't think you'll call search if you use finditer, never mind that.
05:12  dropdrive: Can you just re.split using the quoted regexp and clean up the "in-betweens" with a loop?
05:13  MindVirus: dropdrive: Kinda ugly.
05:13  KirkMcDonald: Using split() would require tweaking the regex to use groups more properly.
05:14  KirkMcDonald: Which is easily done.
05:14  dropdrive: findall and r"('(\\'|[^'])*'|[^']+)" ?
05:15  MindVirus: re.split(r"('(?:\\'|[^'])*')", "This is a 'test.'") seems to work.
05:15  melignus: Quick pylons question, is it possible to run a query that returns an array of all values in the table? A select * from x type response?
05:16  MindVirus: dropdrive: I'd do (?!') instead of |[^']+. I don't know which is better but that is my first instinct.
05:16  KirkMcDonald: MindVirus: No, I think his is correct.
05:16  melignus: Or do I have to set something up in the constructor for the model? Like a self.everything = ['thing one', 'thing two']?
05:16  MindVirus: KirkMcDonald: Mine won't match future characters.
05:16  KirkMcDonald: MindVirus: I'm not sure what you mean.
05:17  bob2: sounds more like an sqlalchemy question
05:17  melignus: It's quiet tin there and #Pylons.
05:17  bob2: right, but you didn't mention it in your question
05:17  MindVirus: KirkMcDonald: His will match "'test'." in "This is a 'test'." while mine will only match "'test'".
05:18  Spirits-Sight: bob2:  thanks for the book reference!!! I am now starting to read it, I am hoping it gives my brain what it needs to move forward!
05:18  bob2: Spirits-Sight: excellent, good luck :)
05:18  melignus: Oh, well, heh, yes I suppose it is a SQLAlchemy question, a pylons flavored one :)
05:18  ciupicri: bob2, https://fedorahosted.org/cobbler/ticket/605 this was my issue with cheetah
05:18  ciupicri: my real issue that is
05:18  Spirits-Sight: bob2: thanks
05:18  bob2: right but without that keyword no one can know what you're talking about
05:19  bob2: melignus: session.query(Whatever) I guess
05:19  KirkMcDonald: MindVirus: No. The period will be a distinct match.
05:19  MindVirus: KirkMcDonald: OK. What is wrong with my regex?
05:20  dropdrive: MindVirus: re.findall(r"('(?:\\'|[^'])*'|[^'\s]+)", "This 'is' a 'test'.")  ==>  ['This', "'is'", 'a', "'test'", '.']
05:20  melignus: bob2: Yes and then to enumerate through the values I set, c.db_list = [student for student in self.student_q.all()]
05:20  KirkMcDonald: MindVirus: The difference here is using .findall() vs. using .split().
05:20  quizme: how do you replace a newline character in the middle of a string?
05:20  KirkMcDonald: MindVirus: You need different regexes for each.
05:20  bob2: melignus: is that a question?
05:20  bob2: quizme: with what?
05:20  MindVirus: I see. :)
05:20  bob2: quizme: and please fix your code to not use % while producing queries
05:20  Spirits-Sight: one last thing for now, does any one have simple code that compares python to php (same task) just writen in both codes side by side saying what each is doing?  I ask as I started to try and learn php in the past (2 years ago)
05:20  quizme: bob2: with whitespace I guess
05:20  melignus: bob2: The problem is the output when I loop through the results.
05:21  quizme: bob2 why is using % bad ?
05:21  KirkMcDonald: MindVirus: In a proper tokenizer, you might have a series of regexes, each associated with a different token type, and you attempt to match the current position in the string against each of them, and indicate an error if none of them match.
05:21  melignus: bob2: I end up with this     * <student('a')
05:21  melignus:     * <student('b')
05:21  melignus:     * <student('c')
05:21  KirkMcDonald: MindVirus: In those terms, you have two kinds of tokens. Your strings, and anything which doesn't contain a quote.
05:22  melignus: bob2: The response doesn't include the other 6 columns of data, even with the .all()
05:23  bob2: melignus: I think you just need to access those attributes
05:23  dropdrive: MindVirus: The regex I placed is basically (quoted_string|not_quoted_string)
05:23  KirkMcDonald: MindVirus: Thinking about it in those terms also makes it easier to add other kinds of tokens later, if you should want to.
05:24  MindVirus: OK. :)
05:24  dropdrive: KirkMcDonald: What's a good package for this stuff?
05:24  bob2: melignus: unless I'm mistaken, you're just using str() or repr() on the result rows, which isn't very useful.  is that right?
05:24  bob2: quizme: because % lets people inject stuff in to your queries
05:24  bob2: quizme: and doing it safely in python is trivial, so you should always just do it right
05:25  KirkMcDonald: dropdrive: Heh, the last time I needed to lex something, I think I hacked a pygments lexer into doing it.
05:25  dropdrive: KirkMcDonald: Does pyparsing handle this stuff?
05:25  KirkMcDonald: dropdrive: Of course, if it's Python source, there's a Python tokenizer in the standard library.
05:26  KirkMcDonald: dropdrive: It could, but I've always regarded pyparsing as somewhat fiddly.
05:27  bob2: quizme: do this: cursor.execute("UPDATE new_runs SET last_updated=%s WHERE new_runs.id=%s", (datetime.datetime.now(), run_id))
05:30  roe: is there some quoting that will resolve variable?
05:30  roe: print "I would like a var please"
05:30  bob2: no
05:30  talented: roe, there's string formating
05:30  quizme: bob2 thanks
05:31  roe: I have to use the '+' operator
05:31  roe: ?
05:31  bob2: print "I would like %s please" % (somevar,)
05:31  bob2: print "I would like", somevar, "please"
05:31  roe: ah that works too I guess
05:31  charas: which tutorial helped you to learn web scraping?
05:31  bob2: print "I would like " + somevar + "please"
05:31  roe: right that is what I am using now
05:31  GothAlice: Is the following a reasonable summation? "WSGI defines a conversation held between two parties, optionally with intermediaries that understand both sides of the conversation. This conversation is between the "server" (or "gateway") and the "application" (or "framework") with "middleware" between them."
05:32  KirkMcDonald: GothAlice: It is specifically a Python API.
05:32  GothAlice: KirkMcDonald: mod_wsgi, while utilizing Python to execute the WSGI application, is a non-Python gateway.
05:32  bob2: roe: #1 is probably the best way, #2 depends on the fact that the 'print' statement is magic and joins successive args together, separated by spaces, #3 only works if somevar is a string
05:33  GothAlice: And Ruby is capable of utilizing WSGI as well, both as servers/gateways and applications.
05:33  bob2: are you sure about that?
05:34  KirkMcDonald: GothAlice: WSGI defines a Python API. I am not sure what you are talking about.l
05:38  roe: My output is not expected: http://paste.pound-python.org/show/552/
05:38  GothAlice: See: Ruby Rack. Not interoperable, but still, WSGI has an impact outside Python.
05:38  roe: dn_update was from a previous LDAP search
05:39  roe: so I know the dn is correct
05:39  preaction: Perl now has PSGI, influenced mainly from WSGI
05:40  KirkMcDonald: GothAlice: That appears to be a Ruby API along the same lines as WSGI, but it is not itself WSGI.
05:40  vock: I was wondering if someone could help me with what I hope is a simple problem with Scipy, I posted what I'm trying to do here: http://paste.pound-python.org/show/553/
05:41  exarkun: What are the circumstances http://docs.cython.org/src/userguide/special_methods.html is referring to when it says that it is possible for __init__() to be called more than once?
05:44  GothAlice: KirkMcDonald: Rack is distinctly based on WSGI.
05:46  exarkun: Hm.
05:46  exarkun: How do I declare a C++ class in Cython that subclasses another C++ class when neither one has a default constructor?
05:51  wm4: when is Python 3 supposed to be widely standard?
05:52  bob2: it'll probably be another few years
05:56  Chaorain: I'm trying to make a custom module, I can't seem to find a tutorial on this, Help?
05:57  bob2: a module is just a file with python code in it
--- Log closed Wed Dec 15 06:02:27 2010
--- Log opened Wed Dec 15 06:07:53 2010
06:07 --- Users 677 nicks [0 ops, 0 halfops, 0 voices, 677 normal]
06:08  bob2: Chaorain: setup.py is the installer script
06:09  bob2: Chaorain: http://jcalderone.livejournal.com/39794.html is the suggested way to lay things out btw
06:09  Chaorain: oh, so rename that?
06:09 --- Channel #python was synced in 125 seconds
06:10  Chaorain: oh so what I'm trying to make is actually a Package?
06:10  bob2: yes
06:10  eoss: how would you randomly pick something out of a dictionary of string keys?
06:10  bob2: eoss: d[random.choice(d.keys())]
06:10  eoss: ty
06:10  bob2: eoss: or d[next(d)]
06:11  bob2: which is similar but er less um random
06:11  papna: bob2: That's not random, not is it valid!
06:11  papna: *nor is
06:11  papna: bob2: next takes an iterator.
06:11  Chaorain: bob2: yes to both?
06:11  quizme: rx = re.compile('[\n\r]')  <--- does that detect end of line characters ?
06:12  bob2: quizme: what are you trying to do?
06:12  bob2: papna: oh, bah
06:12  papna: quizme: What is this for?
06:12  bob2: d[next(iter(d))] is much less snappy
06:12  quizme: bob2: remove a line break in the middle of a string
06:12  bob2: quizme: and replace it with what?  nothing?
06:12  quizme: bob2: with "X"
06:13  eoss: whats the difference between d[random.choice(d.keys())] and random.choice(d.keys())
06:13  bob2: seriously?
06:13  bob2: s.replace("\n", "X")
06:13  quizme: bob2 i tried that
06:13  quizme: bob2 i think it's some other character besides "\n"
06:13  bob2: quizme: then explain in what way it failed to satisfy you, since it meets your stated goal :)
06:13  quizme: but i don't know what it is
06:13  eoss: nm
06:13  bob2: eoss: one returns a random key, one looks up a random key
06:13  eoss: yep
06:14  quizme: i tried this: rx = re.compile('[\n\r]')     partition_name = rx.sub(' X ', partition_name)
06:14  quizme: but that didn't detect the end of line character
06:15  quizme: is there a way to "see" what character it is ?
06:15  bob2: print repr(whatever)
06:15  quizme: in vi it just shows up as a line break
06:16  oldmanstan: anybody know why pypi allows '-' in package names but setuptools doesn't allow them in requires, is there an alternate name to use?
06:16  quizme: SyntaxError: EOL while scanning string literal
06:17  quizme: http://pastie.org/1378407
06:17  quizme: bob2: http://pastie.org/1378407
06:17  bob2: pypi is for more than setuptools users
06:17  bob2: quizme: tf
06:18  quizme: bob2: what's tf ?
06:18  bob2: quizme: use triple quotes
06:18  quizme: """ ?
06:18  bob2: yes
06:18  quizme: 'Server:gamma\n'
06:18  quizme: dude
06:18  quizme: i tried \n
06:19  quizme: bob2: thanks for the repr
06:19  bob2: I think we need to take a step back
06:19  bob2: pastebin the input data and explain what you want to do with it
06:21  quizme: bob2: http://pastie.org/1378407
06:21  quizme: that's the input
06:21  quizme: i want to get rid of the line break after gamma
06:21  bob2: what
06:21  bob2: let's take another step back
06:22  bob2: are you trying to fix some sql you generated using % ?
06:22  quizme: bob2: lemme check
06:22  bob2: basically I get the feeling you've gone down a slightly insane path and if we go up a bit you can do this much more simply ;)
06:23  quizme: http://pastie.org/1378407  <-- that's what i'm using
06:23  quizme: bob2: this is my first time using python, so yeah it's probably insane
06:23  bob2: ok, so that's just insane
06:23  bob2: like I said, don't use % to build sql
06:24  quizme: bob2 i'm building a string, so should i just use  +   ?
06:25  bob2: http://paste.pocoo.org/show/305028/
06:25  bob2: DO NOT PUT THE VALUES IN THE SQL YOU PASS TO EXECUTE
06:25  Eevee: ^
06:25  Eevee: ^^^^^^^^^^
06:26  quizme: bob2: ok... this is an internal app
06:26  bob2: it doesn't matter
06:26  bob2: this isn't php
06:27  bob2: doing it right is less work thatn doing it wrong
06:27  bob2: so just do it right
06:28  quizme: ok
06:28  quizme: so
06:28  quizme: now what ?
06:29  bob2: now pastebin the error or explain the problem
06:29  bob2: is it "partition_name has a newline"?
06:29  roe: I have list and I want to remove an item from the list that matches a regexp
06:29  roe: I'm not sure how to do that
06:29  bob2: what's the regexp?
06:29  quizme: bob2 yes
06:29  bob2: quizme: print repr(partition_name)
06:29  roe: ^filename
06:30  bob2: roe: newlist = [item for item in oldlist if item.startswith('filename')]
06:30  cypha: wow, bob2, u must never sleep
06:30  cypha: anytime i have a question, i see u around already helping people
06:31  roe: that will result in newlist *not* having the 'filename' item?
06:31  cypha: it's really great
06:31  bob2: or I have a very boring job
06:31  bob2: roe: yes
06:31  cypha: haha
06:31  cypha: i like how you chose boring job over good heart :)
06:31  roe: I don't follow that
06:31  cypha: that's funny
06:31  Chaorain: ARGH, I hate typos
06:32  Chaorain: I feel like an idiot
06:32  bob2: roe: sorry, 'if not item.startswith'
06:32  cypha: ok, so i'm not understanding how arguments work here: http://pastebin.com/eHgS0fdD
06:32  infobob: http://paste.pound-python.org/show/555/ (repasted for cypha)
06:32  roe: bob2, that makes sense
06:32  roe: thanks
06:32  vock: I was wondering if someone could help me with a problem I'm having with Scipy, I posted what I'm trying to do here: http://paste.pound-python.org/show/553/, I just can't get an array where I'm hoping to get it
06:33  quizme: bob2: http://pastie.org/1378407
06:34  bob2: vock: try the scipy mailing list if no one here pipes up
06:34  vock: bob2: thanks, i'll try that next, was just hoping it was a quick and easy, I just assumed something I shouldn't have
06:35  bob2: quizme: please stop doing that, it's a terrible habit and leads to bugs even if users aren't malicious
06:35  bob2: http://paste.pocoo.org/show/305030/
06:36  PKKid: So, I understand that you can pipe stdin to a command using subprocess.  Does anyone know if there is a function can convert a string like "mycommand --arg < input.file" to easily run this in python?
06:36  cypha: is "prompt" a variable or a known argument here http://pastebin.com/eHgS0fdD ?
06:36  infobob: http://paste.pound-python.org/show/555/ (repasted for cypha)
06:36  bob2: cypha: an argument
06:37  bob2: PKKid: well, maybe, but it'd be easier to just split it up yourself
06:37  bob2: or keep this thing as a shell script
06:38  bob2: cypha: arguments are more or less like local variables created before the first line of the function
06:38  cypha: bob2, so it knows that prompt should be a string?
06:38  bob2: cypha: not at all
06:38  bob2: cypha: prompt is whatever you pass in as the first argument
06:38  PKKid: bob2, I'm thinking thats the case.. its actually not looking as terrible to do as I imagined..
06:38  bob2: cypha: if it's not a string, though, raw_input will probably puke
06:39  cypha: i hate that i can't lol
06:39  bob2: you just did
06:39  cypha: do i eventually get kicked if i lol?
06:39  bob2: it just means people will h8 and/or kick you
06:39  bob2: long before that people will stop helping you
06:40  cypha: wow, such hatred for it
06:40  bob2: it's just obnoxious
06:40  bob2: and leads to obnoxious conversations like this
06:40  bob2: which are worse than just not doing it
06:40  bob2: so not doing it saves a lot of time
06:43  cypha: obnoxious? what if i was on the floor rolling, or away from keyboard? acronymns are efficient :)
06:44  amitz: I wish I can carry mikegrb to this channel :-p
06:44  amitz: to make a point.
06:45  amitz: s/a/the/
06:45  amitz: how one wrong article can mean so much different in meaning... heh
06:48  amitz: cypha: I think one the problem is the dilution of the "lol". If you use it too much, it looses its meaning.
06:49  cypha: good point
06:49  mgeary: bah, say I
06:49  mgeary: text encodings hate me
06:50  mgeary: what's the best way to start debugging this error: UnicodeDecodeError: 'utf8' codec can't decode bytes in position 2482-2483: invalid data
06:50  bob2: pastebinning ze code
06:51  mgeary: i'm pulling down some HTML that appears to be latin-1, and i want to turn it into utf-8. I'm doing the_html.decode("utf-8")
06:51  seen_: mgeary: the_html.decode('latin-1').encode('utf-8')?
06:51  bob2: html lies
06:52  mgeary: like a rug, apparently
06:52  bob2: your html parser should beat it in to shape (html5lib, lxml.html or beautifulsopu)
06:52  mgeary: lxml.html
06:52  bob2: pastebinz then
06:52  mgeary: but this is before i run it through that
06:53  bob2: right, lxml.html is the thing that needs to decode it
06:54  mgeary: well, that's what i was doing yesterday, but i was having issues. for that source doing html.decode("utf-8") seemed to do the trick, but that doesn't work for this source. looks like i may need to parameterize that on a per-source basis
06:55  bob2: I think you just want to let lxml.html at it
06:56 --- pr3d4k4t is now known as pr3d4t0r
06:57  quizme: bob2: http://pastie.org/1378407  <--- ok i'm doing it your way, but i'm getting "TypeError: %d format: a number is required, not str"
06:58  bob2: yeah, %s not %d
06:58 --- Xeross|AFK is now known as Xeross
06:58  blognewb: is python more secure than using php?
06:58  bob2: same with %i
06:59  dash: blognewb: python's better than PHP in every conceivable way
06:59  dash: so yes.
06:59  quizme: bob2 k
07:07  cypha: bob2, http://pastebin.com/eHgS0fdD what makes ask_ok true in the first place?
07:07  infobob: http://paste.pound-python.org/show/555/ (repasted for cypha)
07:07  bob2: ask_ok is a function
07:07  bob2: functions are always true
--- Log closed Wed Dec 15 11:04:11 2010
--- Log opened Wed Dec 15 11:09:33 2010
11:09 --- Users 700 nicks [0 ops, 0 halfops, 0 voices, 700 normal]
11:10 --- signpost is now known as mozy
11:11 --- Channel #python was synced in 127 seconds
11:14  Microman171: Does wxPython look good?  I'm planning on using windows 7
11:15  An_Ony_Moose: Microman171: I can recommend it to you, it works very well for me. I don't know exactly what you want of course, but I think it should be good
11:16  Microman171: An_Ony_Moose: Does it support an image field?  I plan to have a window with video / images on it
11:16  Microman171: window / field
11:17  An_Ony_Moose: Microman171: Image, yes. Video, I'm not quite sure if there's anything specifically for it but it definitely can be done
11:17  Microman171: The image feed will actually be a JPEG image transfered over a serial modem...
11:27  cousteau`work: what happens exactly on the interactive console when I enter a variable? it checks if it's None, printing its __repr__() otherwise, or it does something more?
11:27  gorakhargosh: Now if I could obtain the process ids of programs accessing files monitored, I could possibly isolate performance problems.
11:27  Alberth: cousteau`work: before, it checks whether the variable exists
11:28  cousteau`work: so, the only methods that are used when converting an object to a string are __str__ (which is used by print and str()) and __repr__ (which are used by the interactive console and repr()), or is there any other related method?
11:30  m0no: cousteau`work: __unicode__
11:31  cousteau`work: only that one? ok
11:31  nosklo: __unicode__ is used when converting an object to unicode, not bytestring
11:33  nosklo: cousteau`work: any expression you write on the interactive console get evaluated. If the result of the expression is not None, repr() of it is printed
11:33  nosklo: cousteau`work: that's what happens when you type any expression on interactive console
11:36  goldroger: hi guys, a question please - I'm executing an sql query using cursor.execute(), but in cases where the first column has the value None, the columns get reordered so that the None-s get pushed towards the back. This only happens in rows where the first column has the value None. Why is this happening ?
11:43  cousteau`work: nosklo: ok, thank you
11:43  bob2: goldroger: http://paste.pocoo.org/ your code
11:43 * cousteau`work is reading http://docs.python.org/reference/datamodel.html#special-method-names
11:44  nosklo: goldroger: not sure, I can't reproduce it. It doesn't happens the way you say
11:44  nosklo: goldroger: here's some testing code http://paste.pound-python.org/show/559/
11:45  nosklo: goldroger: try running it and you will see that None is being returned in first column as expected
11:50  ab3: hello
11:50  ab3: I am using lxml.html to
11:51  ab3: I am using lxml.html to parse a td from a html file, but when i do tostring there is a part missing
11:52  gorakhargosh: Does python deprecate the "string" module? I'm using string.Template at the moment.
11:52  ab3: the td is closed to it can't be a tag error
11:52  bob2: gorakhargosh: no
11:52  bob2: gorakhargosh: just that most of the thigns in it are useless now, as they are str methods
11:53  bob2: ab3: http://paste.pocoo.org/ what you did
11:53  gorakhargosh: bob2: ah.
11:53  bob2: where now = 1999 or so
11:54  goldroger: nosklo: thanks man, looks like a problem at my end, will debug and paste the cause
11:56  An_Ony_Moose: I want to use IDLE for programming but it complains about tcl not being installed correctly. Can I install it even though I installed python using Less MSIerables, a tool that simply extracts files from MSIs?
11:57  bob2: it's ok to not use idle
11:57  bob2: it's not super great
11:57  An_Ony_Moose: bob2: other than that I have the option of cmd + notepad. Are you sure? :P
11:57  bob2: you can't install a real editor?
11:57  An_Ony_Moose: I have no admin rights
11:58  scbunn: emacs doesn't require admin rights and is a fine editor for python
11:58  bob2: so?
11:58  An_Ony_Moose: wait, emacs exists for windows?
11:58 --- crallion is now known as alabackern
11:58  scbunn: of course
12:01  An_Ony_Moose: scbunn: I should've known... xD
12:20  rapidec: How can I search for a a string within a line and then remove the entire line?
12:20  ironfroggy_: are you talking about in a file?
12:20  ironfroggy_: or in a multi line string?
12:20  rapidec: string in a line in a file
12:21  ironfroggy_: easiest thing is to loop over the lines, and add all that dont match into a new file, then copy that file over the original.
12:21  An_Ony_Moose: I don't believe it
12:21  An_Ony_Moose: I've forgotten how to use emacs
12:22  An_Ony_Moose: does anyone know a different editor that's good for python?
12:22  jorrit: gvim!
12:22  Aufwind: Is there a way to "paste screenshots" like pasting code?
12:22  jorrit: Aufwind, tinypic.com
12:22  Aufwind: jorrit: Thanks!
12:22  An_Ony_Moose: my main criteria are syntax highlighting, automatic tabbing and working on windows (only for today though :P)
12:22  jorrit: An_Ony_Moose, still gvim.
12:23  An_Ony_Moose: hmm
12:23  An_Ony_Moose: what's the difference between gvim and vi ? :P
12:23  _habnabit: An_Ony_Moose, how can you forget how to use emacs?
12:23  jorrit: gvim open in a separate window.
12:23  pratz: hey guys, in need to integrate captcha in my project, can you suggest me some good captcha package ??
12:23  jorrit: And has support for menus and mouse.
12:23  An_Ony_Moose: _habnabit: that's what I'm wondering
12:24  rapidec: this is what I tried:  http://paste.pound-python.org/show/560/
12:24  rapidec: It didnt work well
12:25  ironfroggy_: rapidec: you just created a new string each time you found a match, you didnt do anything with it
12:25  ironfroggy_: like i said, write the new lines to a new file
12:25  ironfroggy_: and then move that over the original location
12:26  ironfroggy_: use the tempfile module to open a temporary file you can uise
12:26  rapidec: ok
12:27  rapidec: So I would do a search and replace in the entire file and then copy the temp file over to the original file?
12:27  jase21: Please look at this simple code: http://paste.pound-python.org/show/561/
12:28  ironfroggy_: rapidec: thats the idea.
12:28  jorrit: jase21, what about it?
12:28  jase21: Why am I not able to call MyClass.f
12:28  rapidec: But the problem is my file has multiple lines.
12:28  jorrit: jase21, you need an instance.
12:28  ironfroggy_: rapidec: so?
12:28  jorrit: jase21, a=MyClass()
12:28  jorrit: jase21, a.f()
12:28  ironfroggy_: rapidec: that was the assumption.
12:28  jase21: jorrit:: I created an instance x = MyClass()
12:28  gorakhargosh: Does distutils allow one to determine the presence of a C compiler on the system?
12:29  jorrit: jase21, then call x.f()
12:29  rapidec: the beginning of the lines are slightly different but the ends are completely random
12:29  jorrit: jase21, don't forget the ()
12:29  ironfroggy_: rapidec: do you think that is a problem?
12:29  jorrit: jase21, you are doing x.f without () and that doesn't call the function.
12:30  kostja_osipov: Hello! I'm trying to add 'exec sql' statement to python. This is necessary to be able to run MySQL SQL directly from python, and get results directly into python variables, etc. So I'm looking for a best way to extend python grammar.
12:30  rapidec: I want to search for the keywords that are at the beginning of a certain line and then replace the ENTIRE line, not just the keywords that are at the beginning
12:30  jase21: jorrit: Thank You. The () was missing in my call.
12:30  rapidec: What I really want to do is remove the line
12:30  kostja_osipov: so far I found goto.py module, which seems to somehow add a new grammar to python, but I don't understand how it works.
12:30  _habnabit: kostja_osipov, ... why?
12:30  nosklo: kostja_osipov: you don't need a statement to do that
12:30  kostja_osipov: is there a place i can read up?
12:30  _habnabit: kostja_osipov, and goto.py doesn't add new grammar.
12:30  ironfroggy_: rapidec: so do that.
12:30  jase21: jorrit: Thanks, bye
12:30  rapidec: I dont know how
12:30  ironfroggy_: rapidec: you have complete control over what you write to the new file
12:30  _habnabit: kostja_osipov, it repurposes existing grammar.
12:30  ironfroggy_: if you dont want a line in it, then dont write it
12:30  kostja_osipov: nosklo: no I do. this is is how you get python mysql stored procedures
12:30  nosklo: kostja_osipov: c.execute('SELECT ....')
12:30  nosklo: kostja_osipov: say what?
12:31  kostja_osipov: mysql stored procedures in python
12:31  cnfer: mornin
12:33  kostja_osipov: should I look at EasyExtend?
12:33  nosklo: kostja_osipov: I don't think mysql allows you to write the stored procedure using python
12:33  kostja_osipov: i need, however, something, that would work with standard python.
12:33  An_Ony_Moose: woo. I just finished opening the file in vim :P
12:33  kostja_osipov: nosklo: I am a MySQL engineer (well, ex, i quit oracle, but it doesn't matter).
12:33  kostja_osipov: i was responsible for SQL/PSM stored procedures
12:33  _habnabit: kostja_osipov, you can't modify the grammar and have 'standard python'
12:33  kostja_osipov: i know what it allows.
12:33  rapidec: ironfroggy_: something like this
12:33  rapidec: http://paste.pound-python.org/show/562/
12:33  kostja_osipov: i'm trying to implement mysql stored procedures in python
12:33  _habnabit: kostja_osipov, it requires changing python.
12:33  kostja_osipov: does easyextend require a patched python?
12:33  rapidec: I want to be able to type "num1" into an input and it removes that entire line
12:33  rapidec: I dont see how writing to a temporary file will accomplish that
12:33  nosklo: if you was responsible by it, why didn't you document it, then? I mean, if I knew there was a way to write stored procedures in python, I would have done it, as I have done in postgresql
12:34  jase21: jorrit: Can you please take a look at the doc:http://docs.python.org/tutorial/classes.html#class-objects where it says MyClass.f is a valid attribute reference. Isn't it MyClass.f() instead?
12:34  ironfroggy_: rapidec: you read the file line by line, and every line that you want to KEEP, you write to the temp file. then replace the original with the temp.
12:34  jorrit: jase21, f() is for functions. A function is not an attribute.
12:34  rapidec: ironfroggy_:I dont know how to do that.
12:34  nosklo: kostja_osipov: you should have told me before, I need to write stored procedures in python right now -- where can I find info on how to write them?
12:35  ironfroggy_: rapidec: you had half of it in your first pastebin
12:35  kostja_osipov: nosklo: you can't right now!-)
12:35  jase21: jorrit: Yes, but the doc seems to be something wrong.
12:35  kostja_osipov: the only supported language is sql/psm
12:35  ironfroggy_: just write the good lines to another file. did you look at the tempfile module to see about opening up a temp file for writing?
12:35  nosklo: kostja_osipov: oh, so you can't. I'm confused
12:35  _habnabit: kostja_osipov, easyextend is pretty dead.
12:35  jorrit: jase21, why is it wrong?
12:35  rapidec: not yet
12:36  kostja_osipov: nosklo: you can write mysql storedprocs in sql language. everything else mysql doesn't support
12:36  rapidec: but I dont see how I would "keep" certain lines
12:36 --- kanor is now known as tyrus
12:36  rapidec: I understand what I would be doing, I just dont know how
12:36  kostja_osipov: _habnabit: okay... so I guess I have to patch python?
12:36  ironfroggy_: rapidec: because you write them to the new file and you DONT write the lines you want to remove
12:36  nosklo: kostja_osipov: then I don't understand what your question is. YOu want to make that possible?
12:36  kostja_osipov: yep
12:36  jorrit: rapidec, you keep lines by writing to the new file and you remove lines by not writing them.
12:36  _habnabit: kostja_osipov, I still don't see the point.
12:36  nosklo: kostja_osipov: why can't you use a function call c.execute() instead of a statement?
12:36  ironfroggy_: rapidec: do you see how that leaves you with a file that only includes the lines you want?
12:37  rapidec: yes
12:37  jase21: jorrit: Okay my question is : Is MyClass.f a valid attribute which returns a function object?
12:37  _habnabit: kostja_osipov, postgres didn't modify python syntax to allow stored procedures in python.
12:37  rapidec: but I dont see how I would sort out the lines I want to keep
12:37  jorrit: jase21, yes
12:37  rapidec: in code, how do I do that?
12:37  kostja_osipov: nosklo: because micro-languages rock.
12:37  ironfroggy_: rapidec: if they start with something?
12:37  ironfroggy_: rapidec: if line.startswith('num1'):
12:37  nosklo: kostja_osipov: I'm not sure how that is related
12:38  kostja_osipov: nosklo: when I write exec sql select a, b, c from t1 into :pythonvar1, pythonvar2, pythonvar3
12:38  jase21: jorrit: We usually call attribute for varibles isn't and not for functions? If I call some thing as attribute then calling it using foo.attributeName should return some value.
12:38  kostja_osipov: it's way easier to write and understand than a bunch of execute/fetch statements
12:38  kostja_osipov: i want SQL exceptions map nicely to python exceptions
12:38  kostja_osipov: etc, etc.
12:38  jorrit: jase21, the function itself is just as equally an attribute as any other attribute.
12:39  rapidec: line.write(tempfile)?
12:39  nosklo: kostja_osipov: you don't need to define that new statement to do that
12:39  nosklo: kostja_osipov: kostja_osipov: pythonvar1, pythonvar2, pythonvar2 = mysql.execute('SELECT a, b, c FROM t1')
12:39  rapidec: is that what would come next?
12:39  nosklo: kostja_osipov: something like that
12:39  ironfroggy_: rapidec: you need to learn some very basic python stuff if you dont know how to write to a file
12:39  nosklo: kostja_osipov: and you can use exceptions etc
12:39  ironfroggy_: rapidec: you've not read the basic tutorial, have you?
12:39  kostja_osipov: nosklo: this is not obvious to SQL people
12:39  rapidec: Most of it
12:39  nosklo: kostja_osipov: but it is obvious to python people
12:40  nosklo: and you're not writing sql here
12:40  ironfroggy_: rapidec: out_file.write(line)
12:40  kostja_osipov: nosklo: those python people would not use stored procedures anyway. they would use mysql connector/python
12:40  jase21: jorrit: Oh. Okay, we call both functions and variables as attributes. If its a function we call it with a () and for a variable () wouldn't be there. Is my thinking right?
12:40  rapidec: ironfroggy_:  I have done this in the past: f.write("\n%s" %result)
12:40  rapidec: I was just making sure
12:40  nosklo: kostja_osipov: not really. I'm a python people and I'd use python stored procedures. I do use them in postgresql
12:40  kostja_osipov: nosklo: I also know I can somehow extend python preprocessor with 'codecs' library.
12:41  kostja_osipov: would about this approach?
12:41  jorrit: jase21, functions are usually not called as attributes though. Doing that happens but is not the common usage.
12:41  ironfroggy_: rapidec: you shouldnt have to add that newline, since the lines are coming from a file and would already have them
12:41  _habnabit: kostja_osipov, this just sounds really insane.
12:41  nosklo: kostja_osipov: I think it is a really bad idea that will ruin your python support
12:41  rapidec: But it seems to be that would save the line that has num1, I want to save all other lines, right?
12:41  _habnabit: kostja_osipov, but the rest of mysql is insane already, so.
12:41 --- tyrus is now known as kanor
12:41  jase21: jorrit: You mean we don't call a function like MyClass.myFunction() ?
12:41  _habnabit: kostja_osipov, go hog wild
12:41  jorrit: jase21, that's not what I said.
12:41  rapidec: ironfroggy_: I thought I was writing to a tempfile
12:41  nosklo: you should really stick to python syntax
12:41  ironfroggy_: rapidec: so add a not. jeez, you need to know the basics at least. this channel is for giving you the direction, not driving you there.
12:41  kostja_osipov: _habnabit: have you seen SQL/CLI?
12:41  jorrit: jase21, I mean we don't usually call them attributes.
12:41  ironfroggy_: rapidec: yes?
12:42  kostja_osipov: Oracle PRO/C?
12:42  jorrit: jase21, we just use them as functions.
12:42  _habnabit: kostja_osipov, sure?
12:42  kostja_osipov: don't you find Oracle PRO/C convenient?
12:42  ironfroggy_: rapidec: 'out_file' would be whatever you had named that open file to write to. i dont know what you're going to name it.
12:42  rapidec: I know that
12:42  jase21: jorrit: Ahh! Okay. That's what I was telling. The docs actually confused me.
12:42  ironfroggy_: rapidec: remember you can negate any condition with 'not' so you can do `if not line.startswith('num1'):`
12:43  rapidec: I had forgotten that.
12:43  rapidec: Thanks for the help ironfroggy_
12:43  jase21: jorrit: okay thanks for making it clear
--- Log closed Wed Dec 15 12:46:51 2010
--- Log opened Wed Dec 15 13:24:21 2010
13:24 --- Users 714 nicks [0 ops, 0 halfops, 0 voices, 714 normal]
13:26 --- Channel #python was synced in 128 seconds
13:27  hlamer: hi. I have a problem. My project contains package. Let's call it "thepackage" and script "thescript.py".  thescript.py imports package and opens data files.  When I'm coding, thescript.py must imports thepackage from ./thepackage dir (relative path, where my sources stored), and open data files from ./data (relative path). But, when project is installed by distutils, it should import /usr/local.../thepackage and use /usr/local/share/theprogramm/data as data dir.
13:27  hlamer:  Is there "common" way for point thescript.py where is data and where is thepackage?  I don't want to reinvent the wheel
13:30  BrianE: blamer: Just set variables with the paths, and use them instead of hard-coding paths
13:30  BrianE: As for the modules, you need to add the directory they're located in to the path
13:31  BrianE: EG: sys.path.append('/usr/local/.../thepackage')
13:31  ivan`: sys.path manipulation is wrong
13:31  BrianE: Then: import something_in_thepackage
13:31  hlamer: For doing it, I need modify the code. I don't want to modify it for "development" and than modify it again for "release"
13:32  ivan`: hlamer: first do http://jcalderone.livejournal.com/39794.html then make your setup.py install your data files
13:32  BrianE: hlamer: You could create config files of some sort - one for development, one for release
13:32  ivan`: your data should be accessible relative to some module, whether or not your package is installed
13:34  ivan`: the common way is to do path manipulation based on the __file__ of some module
13:36  hlamer: ivan: do you mean os.path.split(mks.__file__)[0] + 'thedatafile.dat' ?
13:36  ivan`: something like that, I prefer to use the filepath module
13:37  hlamer: filepath?
13:37  ivan`: it's on pypi as a standalone module and also in Twisted
13:37  ivan`: but os.path.join(os.path.dirname(__file__), 'something')
13:38  hlamer: ok, thank you
13:40  kai: hi folks
13:42  burhan: is continuous integration something that is useful when developing python applications?
13:43  Habbie: burhan, whether or not CI is useful does not depend on language choice
13:46  burhan: Habbie: the reason I asked is because I want to automate some _testing_ (which means, deployment and running something like selenium tests) so I'm not sure if CI is the best way to go about it or should I use something else like fabric
13:46  pratz: hey guys, how can i format the output printed by "dir()" ??
13:46  Habbie: burhan, i feel that fabric is a tool that may be suitable for automating part of CI
13:47  Habbie: pratz, it's a list; use whatever seems appropriate to format a list
13:48  asn: Building a socket server should I use the "low lever" socket module or the SocketServer module? I had never heard of the latter, that's why I'm hesitant.
13:48  Habbie: asn, you probably should use twisted
13:49  asn: Habbie: twisted?
13:50  Habbie: yes
13:50  asn: I haven't heard of that either
13:50  asn: Habbie: do you happen to know of any 'trustworthy' projects using Twisted? or SocketServer?
13:51  asn: I have no problem working with socket, it's just that if there are official modules for this job, there is no point on reinventing the wheel. I just see minimal resources on both of them
13:51  Habbie: asn, the original BitTorrent is twisted
13:51  Habbie: asn, http://twistedmatrix.com/trac/wiki/ProjectsUsingTwisted
13:52  asn: I see
13:53  asn: Habbie: I'll check it out then, thank you very much :)
14:03 --- andjew2 is now known as andjew
14:07  burhan: asn: Zope uses twisted.
14:07  burhan: can't get any more heavy duty than that.
14:11 --- jbake_ is now known as jbake
14:20  bjwebb: hi, i'm getting encoding errors from a vars(object) - is there a way to get it to output uft-8?
14:20  bjwebb: actually, i mean unicode strings, don't I
14:21  engla: bjwebb: vars only returns a dict, you can do what you want with it.
14:22  nosklo: you shouldn't be using vars except for debugging
14:23  bjwebb: nosklo: what should i be using instead? this is an object from suds that i don't know what looks like
14:24  papna: bjwebb: Were you the one who had encoding issues with reprs from suds last week?
14:24  bjwebb: nope
14:25  papna: bjwebb: I've never seen the problem, but someone had a similar one recently. Where did you gets your SUDS?
14:25  bjwebb: papna: pip i think
14:25  papna: Within the last three months?
14:25  bitreader: Hi, I'm going to start learning python, I already have the IDLE 2.6 installed, but I need a nice editor to write my scripts. Which ones would you guys recommend to a beginner?
14:26  papna: bjwebb: Are you positive you've never asked about this here before?
14:26  bjwebb: actually, no it was from arch's package
14:26  bjwebb: papna: i may have at some point, but not for several months
14:27  burhan: bitreader: if you are on a mac, use textmate. If you are on Windows, I would recommend komodo edit.
14:28  burhan: bitreader: textmate isn't free, komodo edit is (and also runs on osx and linux)
14:29  papna: bitreader: The choice of an editor is highly personal and doesn't involve Python much.
14:29  pr3d4t0r: bitreader: I'd recommend MacVim over TextMate because you can use the GUI tools for basic editing, then get into the commands later, and the skills you'll learn will be portable to any OS or UI you can find.
14:30  bitreader: papna, I'm very aware of that. I just want to take some options, test them, and choose which one to stick with :).
14:30  pr3d4t0r: bitreader: If you aren't on a Mac, gVim instead of MacVim (think of MacVim as a special case of gVim).
14:30  bitreader: pr3d4t0r, I do have gVim installed. I'm on Windows.
14:31  bitreader: I just haven't got the time to learn vim editing at its full potential. It might be time now that you mention it.
14:31  pr3d4t0r: bitreader: Cool - that's probably a good choice.
14:31  pr3d4t0r: bitreader: I've been using Vi(m) for 25 years and I still don't use it at its full potential ;)
14:32  bitreader: pr3d4t0r, Well imagine that. I need to acquire the basic skills though :). Thanks guys.
14:32  pr3d4t0r: bitreader: Think of it like this:  if you want editing that you can move to any OS/UI/environment you can think of, (g)vi(m) is a good bet.  What you learn in one will take you anywhere :)
14:32  pr3d4t0r: bitreader: You can get fancy later -- or not at all.
14:32  pr3d4t0r: bitreader: Cheers!
14:33  nosklo: emacs
14:42  Insolsence: Hey guys
14:42  Insolsence: Am small issue
14:42  Insolsence: \
14:42  Habbie: Insolsence, are you?
14:43  Insolsence: well, am using subprocess module
14:43  Insolsence: for opening pipe
14:43  Insolsence: and its not being opened
14:43  Insolsence: I don't get the outpit
14:43  Insolsence: output, its always empty
14:43  Insolsence: the len() of output is 0
14:43  Insolsence: am using this
14:44  ironfroggy_: how do you know the process is writing to stdout?
14:44  c3l: how can I make a user input, where the input is like function. eg. the user can type f(VAR), g(VAR) etc. and if the syntax is wrong or similar, it prints somestring?
14:45  Insolsence: I know it
14:45  Insolsence: its ffmpeg
14:45  Insolsence: it writes stuff to the console
14:45  Insolsence: and this is the code0
14:45  Insolsence: code-
14:45  ironfroggy_: maybe its writing to stderr
14:45  Insolsence: p = Popen(cmdline, stdin=PIPE, stdout=PIPE, stderr=PIPE)
14:45  Insolsence: print p.stdout.read(1024)
14:45  Insolsence: nah, the thing runs successfully
14:45  Insolsence: no error
14:45  Insolsence: it does what it's made for
14:46  ironfroggy_: stderr is also often used for logging
14:46  Insolsence: hmm.
14:46  Insolsence: okay wait please
14:46  Insolsence: lemme try
14:46  ironfroggy_: also, maybe you are rading before anything has been written
14:46  ironfroggy_: you arent waiting for the process to run at all.
14:47  Insolsence: well that was just a sample; actually I'm using a while True: loop
14:47  Insolsence: then if not output: break
14:47  ironfroggy_: thats terrible.
14:47  ironfroggy_: pastebin the actual code
14:47  Insolsence: You were right
14:47  Insolsence: its writing to stderr
14:48  Insolsence: thanks anyway!
14:50  kkb110: how can I join a string list to a string. EX.      ['abc','def'].join == 'abcdef' ]  ?
14:51  papna_: kkb110: ''.join(['a', 'b'])
14:51  papna_: kkb110: join is a string method since it does a string thing and accepts an arbitrary iterable.
14:51  kkb110: thanks a lot
14:52  gigasoft: ?
14:53  hetii: hello :)
14:53 --- sacho_ is now known as sacho
14:53  hetii: i have strange issue. I use m = imp.load_source('someModuleName', '/path/To/SomeModule.py')
14:54  hetii: then i add some argument into /path/To/SomeModule.py and save my changes, after that i do load_sources again
14:54  hetii: and see that m had my old args. and new
14:55  hetii: even when i delete the old one.
14:55  papna_: hetii: Pastebin your code.
14:55  zaytsev: hi folks! a question about internal implementation of the dictionaries in Python. When I do d.values()[1] does it actually generate the whole list first allocating memory for it or it's somehow smarted than that?
14:55  papna_: zaytsev: That's what it does. dict.values returns a list.
14:55  papna_: zaytsev: Why are you doing d.values()[1]? Do you realise dicts aren't in any particular order?
14:56  zaytsev: papna_, I am wondering if it will be quicker to use a LUT to look up dictionary key and then do d[key] or d.values[id]
14:56  ironfroggy_: what are you trying to do in the first place?
14:57  zaytsev: papna_, from what I read in the documentation, the order of the items in the dictionary is constant, that is in the order they were added
14:57  papna_: zaytsev: You absolutely did NOT read that in the documentation.
14:57  papna_: zaytsev: dicts are unordered.
14:57  papna_: zaytsev: The way you get a value from a dict is to do d[key]. Why would you want to do something else?
14:59  zaytsev: papna_, I did and http://docs.python.org/tutorial/datastructures.html is not saying that the order is not constant. It says that they are not in any specific order.\
14:59  hetii: look at this code:
14:59  hetii: http://pastebin.ca/2020316
14:59  infobob: http://paste.pound-python.org/show/563/ (repasted for hetii)
14:59  papna_: zaytsev: You just said that dicts were in insertion order. That is MOST CERTAINLY not the case.
14:59  papna_: zaytsev: dicts are unordered collections.
15:00  zaytsev: papna_, check it. It is indeed the case, but I was looking for a confirmation from someone who knows the details of cPython implementation.
15:00  papna_: zaytsev: Obviously when you iterate over or make ordered things out of dicts--like the list dict.values returns--those are ordered. That order is completely arbitrary and not something you'd ever use interestingly.
15:00  papna_: zaytsev: Your plan is completely misguided. Don't try to do what you8're doing.
15:01  papna_: zaytsev: I know the concept and the implementation.
15:02  zaytsev: ironfroggy_, let's put it this way. I have a set of data stored in a dictionary. It is loaded once. The key is a string which associates the data to a specific item in the file. However, later on the code, in order to speed up processing I need to rearrange the data  similarly to what dict.items() does in a numpy array. However, in the numpy array I can have numbers. Strings are pita.
15:03  papna_: hetii: The second time you load /gtest/magicBox/apps/rpc/cruise.py
15:04  zaytsev: So I either I need to construct a LUT  (numeric id <-> dictionary key) or I can profit from the fact that the values in the dictionary are in the constant order, which indeed seems to be the case when I tested it
15:04  zaytsev: That's more or less what I want to do
15:04  hetii: ok its the same issue i test it on two different project path
15:04  shylent: dictionaries *are* unordered, as it was already pointed out
15:05  shylent: that is, you can't really depend on any order in them
15:05  hetii: but even if the path is the same it works as i describe
15:05  papna_: zaytsev: Looking up something in a dict is of the same complexity (but in practice probably slower by a fairly big constant) than looking things up in a numpy array. However, it's a REALLY cheap thing to do.
15:05  papna_: zaytsev: The implementation of dict is one of the most optimized hash tables on earth.
15:05  papna_: zaytsev: If you have performance problems and want to optimize your code, you're doing it wrong.
15:06  papna_: zaytsev: First you would profile and find the small parts. Then you'd consider the algorithms affecting them.
15:06  papna_: zaytsev: Then, after that, you'd empirically test alternate things.
15:06  LuckySMack: what are the main reasons for not using python3 yet for web development. is it any different for doing desktop only scripts/apps
15:06  papna_: zaytsev: A worthwhile solution will not think of dicts as if they were ordered.
15:06  creative83: Hello together. I need your opinions. Whats the best way to ensure single instance on unix like os? PID file? tying to kill own pid with signal 0? Some other (not file) mutexes?
15:07  papna_: zaytsev: Also, as originally mentioned, dict.values returns a list. (Indeed, for this reason I never use dict.values, but if I needed the values would use dict.itervalues).
15:07  shylent: creative83: I'd use the tools that your OS provides (ie start-stop-daemon)
15:07  shylent: hell, I'd probably use twistd :)
15:07  sn0tt: Hi, quick question. I just cant get this sorting thing to work. Any suggestions? - http://pastebin.com/wt3kD4fc
15:07  infobob: http://paste.pound-python.org/show/564/ (repasted for sn0tt)
15:08  creative83: shylent: Hm. Good point :)
15:08  hetii: papna, it will be some sort of plugin system that will allow me reload rpc subhandlers for python but as i describe it works strange :>
15:09  zaytsev: papna_, I already know what makes it slow (and guess what, I found this by profiling). To solve this issue, I rewrote my algorithms to use vectorized operations on numpy arrays. At this point I need to link the id's in numpy tables to the original items in the dictionary. That's why I came to the idea of using the empirical fact that the order was constant to me, instead of making a LUT, but I decided to consult knowledgeable poeple first
15:09  zaytsev: . I don't see why it offends you so much.
15:09  shylent: creative83: but yes, a pid file is something you should be diong
15:09  sente: somehow i printed my data out to a file such that it was all on one line, all the formatting characters were escaped. so i have one line file with '\t' and and '\n' in it, etc
15:09  hetii: ahh and one think more if i do reload(m) then i got ImportError: No module named m
15:10  sente: how can i reverse-fix this most easily
15:10  zaytsev: papna_, then probably my best bet is to create a LUT basing on a dictionary which will link numeric id as a key to the original string id as a value?
15:11  sn0tt: It's like it only checks the first char in the keys.
15:11  c3l: how can I make a user input, where the input is like a function. eg. the user can type f(VAR), g(VAR) etc. and then the result of that function is returned. but if the syntax is wrong, input is not one of the functions or similar, it prints somestring?
15:12  ironfroggy_: sn0tt: you are sorting by strings, not by integers
15:13  sn0tt: aah, any hint on what i should read about? Started with python 3 days ago.
15:16  pedro3005: sn0tt, use int() perhaps?
15:17  nosklo: sn0tt: store ints in the dict
15:17  nosklo: sn0tt: in first place
15:17  nosklo: sn0tt: d['192.168.0.100'] = 100 instead of '100'
15:17  sn0tt: aah, stupid me. Thanks for poiting that out.
15:22  hetii: papna, any idea?
15:23  papna_: hetii: The reload behavior makes sense. reload looks in sys.modules; your module isn't in sys.modules.
15:23  creative83: Another question. This time about logging. I create 2 logging handlers (1. File, Level=ebug, 2. Console (stderr) Level=critical). Then i register them both logger.addHandler(logFileHandler) logger.addHandler(logConsoleHandler. The problem is now that only critical messages are being logged (to logfile and console) despite definition of loglevel=debug for the logFileHandler...
15:24  creative83: Is this because I register them both to logger?
15:24  papna_: hetii: I am inclined to think, as you're not showing me the relevant code, that I'm missing something about what you're doing. Also, to be on the safe side, delete your pycs.
15:24  papna_: hetii: Also, if your goal is to use this for live reloading in running code, you're going to find that a poor option.
15:24  papna_: hetii: Are you choosing to build a brand new thing using XMLRPC?
15:25  papna_: hetii: If so, please don't. AMP and JSON-RPC are among much better protocols.
15:26  hetii: yes i know its better but xmlrpc seams to be more better implemented into twisted. But not the point. The point is that i need had possibility to reload some code in live without restarting whole application
15:30  slestak: question, i have two db "accounts" on my system, they are basically directories for production and test development.
15:30  spht: hetii:  Using for example zeromq, distribute work using a push socket, then you can disconnect works and upgrade them without stop processing requests
15:30  Taos: Why is this not working the way I hoped it would work http://codepad.org/WQ78MC2W
15:30  spht: s/works/workers/
15:30  Segaja: hi, is there a way to validate a XML file against a XSD?
15:31  slestak: Segaja: look at lxml
15:31  Segaja: is lxml in the standard lib?
15:31  slestak: no, but it is nice
15:31  Taos: lxml is worth having
15:32  Segaja: what about dtd validation?
15:32  slestak: does anyone ever have mopre than one site-packages?  or per project site-packages?
15:32  slestak: google is your friend  http://codespeak.net/lxml/validation.html
15:33  slestak: "prob mine too"
15:33  ab3: hello any function in urllib that deals with ' ' to %20 convertion?
15:33  Juhaz: Taos, kind of hard to say without knowing what you hoped it would do. If it's supposed to just read the file again and again why don't you jut re-seek it back to beginning instead of some recursive horror?
15:33  nosklo: slestak: virtualenv
15:34  nosklo: ab3: urllib.quote
15:34  ab3: nosklo: thx
15:34  slestak: nosklo: i hadn;t considered venv.  ty
15:42  Taos: Juhaz: why not just call the generator again
15:42  Krauzi: hi guys, can anyone explain me what ctypes.CFUNCTYPE is good for?
15:42  renatofilho: hi all, is possible to make the function tp_getattro recursive,  like if I have some base type which implement this function use that on my derived type?
15:42 --- chrischambers_ is now known as chrischambers
15:43  nosklo: Krauzi: segfaults
15:44  papna_: hetii: Right, but using "reload" to attempt to reload code doesn't work.
15:44  Krauzi: nosklo: ?
15:44  nosklo: Krauzi: http://en.wikipedia.org/wiki/Segmentation_fault
15:44  papna_: hetii: AMP is implemented better than XMLRPC in twisted, so I'm afraid I don't follow.
15:45  nosklo: Krauzi: using ctypes in general and ctypes.CFUNCTYPE in particular are good ways to cause those
15:45  hetii: papna,  ok i need to check AMP, that sure.
15:45  renatofilho: I'm using PyObject_GenericGetAttr, in the end of my new type tp_getattro funcion but this does not call the base tp_getattro
15:45  Krauzi: renatofilho: try to iterate through the base list and call all tp_getattro with the same arguments you had in the parent instances
15:45  lokai: I'm having a lot of trouble with out of memory and cpu usage when I increase n>4000 or the following script: http://pastebin.com/RJmX4YAa Is there any way to optimize this routine for much larger n?
15:45  infobob: http://paste.pound-python.org/show/566/ (repasted for lokai)
15:45  Krauzi: nosklo: well i know what a segfault but your answer is not very helpful
15:45  renatofilho: Krauzi, I did that ant this cause a infinity loop
15:46  nosklo: Krauzi: why are you trying to use ctypes?
15:46  Krauzi: renatofilho: i dont think so (no infinity loop)
15:46  Krauzi: nosklo: i want to write an interface for a application which uses dll plugins
15:46  hetii: papna,  ok  i don`t force that need use reload just wondering if it work, but still im not sure what i can do if imp.load_source is not a secure way when i need reload module.
15:46  nosklo: Krauzi: use cython
15:47  daemonkeeper: How can I debug a SimpleXMLRPCServer. I get an Exception from remote but I have no idea where and setting _send_traceback_header doesn't change anything in the output of the client (using xmlrpclib)
15:47  Krauzi: nosklo: thought about that, but first i want to know that the CFUNCTYPE is exactly good for
15:47  nosklo: Krauzi: well, I've never seen it used outside of segfault-producing code.
15:47  lokai: Here's the new pastebin: http://paste.pocoo.org/show/305160/   Script is only 15 lines long by the way ;P Why can't my (modern) PC handle n>4000 here?
15:48  papna_: hetii: imp.load_module builds a completely new module from a file.
15:48  papna_: hetii: Your pastebin was inconsistent, so I wonder if you didn't get mixed up and think you're seeing something you're not.
15:49  papna_: hetii: Also, there is some risk of loading out-of-date precompiled files.
15:50  papna_: hetii: Perhaps you could post an interpreter session in which you open and output the files each time to prove to both of us *exactly* what you're loading.
15:50  renatofilho: Krauzi, I will try again, but for some reason this cause a recursive loop (which cause the infinity loop), because that call my current tp_getattro again, I will try to have sure about that, thanks
15:50  hetii: no  :) the code is ok :) in aaa.py letter i had some classes but it has nothing to do with attributes in module. BTW attributes into classes are reloaded correctly
15:51  papna_: hetii: I cannot parse your last statement.
15:51  hetii: ok i will prepare some examples letter and show you all scenario
15:51  papna_: hetii: Are you doing "m = imp.load_module(...); a = m.a; m = imp.load_module" ?
15:52  Krauzi: renatofilho: try to check weather the instance you call is the caller instance itself (maybe the type itself is in the baselist and this will cause an infinitly loop)
15:52  papna_: hetii: In that case, a will always be the same object, based on the one that was found in the first m.
15:53  Krauzi: renatofilho: or just try an print of the caller instance to check where exactly the inifinity loop starts
15:53  Krauzi: so noone here who know what CFUNCTYPE is good for?
15:54  lokai: http://paste.pocoo.org/show/305160/    <--15 line script, I need to increase n by at least a factor of 10, but my computer starts to die at n~4000. How can I optimize this code for large n?
15:54  papna_: Krauzi: You're misusing the word "good"
15:54  nosklo: ctypes is not good for anything
15:55  lvh: well, portability between interpreters
15:56  kai: lokai: hm, weird
15:57  lokai: What do you mean kai ?
15:57  kai: lokai: ok, for 1000 the script doesn't seem that slow
15:57  kai: but for 4000 I see what you mean
15:58  papna_: lokai: Profile and figure out what's so slow. I would guess you shouldn't be passing millions of points to mpl, but I don't know.
15:58  papna_: Eh, it only takes a couple seconds for me at 4000.
15:58  lokai: right, but I need to increase n to about 10,000+
15:58  lokai: and my computer can't handle n=5000
16:00  papna_: lokai: Profile to figure out what's taking the time.
16:00  papna_: lokai: I assume mpl is unhappy getting 100M points.
16:00  papna_: filter them first, if that's the cased.
16:00  papna_: case
16:00  lokai: what do you mean filter them?
16:01  kai: swaptastic :)
16:01 * kai just tried 40k points
16:01  papna_: lokai: Plot some regular subset instead; this is very common in visualization.
16:02  papna_: If you find that's what's taking the time.
16:02  papna_: Which I don't even know is the case.
16:03  zaytsev: lokai, you code doesn't make sense to me
16:03  zaytsev: results.extend(list(F(i,D1)))
16:03  zaytsev: lokai, you realize that you are getting increasingly huge list?
16:04  lokai: Yes, I'm doing a calculation on each member of D with itself
16:04  lokai: So the list should be n^2
16:04  zaytsev: aha
16:05  lokai: And then making a histogram of the resulting list
16:05  lokai: obviously the script has no purpose, but the problem I am working on involves exactly this operation
16:05  lvh: well, yes, N**2 algorithms are hard
16:05  lokai: yes, but I would think I could do better than n=5000 =/
16:06  lvh: lokai: it's hard to give you accurate advice without knowing exactly what's going on
16:06  zaytsev: 100 000 000 * 4 bytes is already 400 Mb without overheads
16:06  lvh: lokai: the best I can do is what papna_ has already said
16:06  lokai: ok
16:06  jaegr: what's the difference between carriage return and newline?
16:06  zaytsev: jaegr, historical difference
16:07  jaegr: which should I use?
16:07  zaytsev: lokai, now plots with few thousands of points can be already a problem with such plots. The computation itself should work out fine
16:07  Alberth: jaegr: newline
16:07  zaytsev: jaegr, depends on you platform
16:07  jaegr: linux
16:07  zaytsev: \n
16:07  lvh: jaegr: newlines
16:07  jaegr: thanks
16:07  lokai: zaytsev, hm, perhaps mpl hist isn't the way to go then
16:08  Alberth: zaytsev: no it does not, the application handling text files should use \n always, and the C library mangles that to whatever the OS expects
16:08  zaytsev: Alberth, Windows?
16:08  lvh: lokai: not necessarily
16:08  Rhamphoryncus: lokai: my computer does n=10000 in 75 seconds, but that's pushing other things into swap and I have 8 gigs of ram
16:08  lvh: lokai: hist can be fine
16:08  lvh: lokai: just do it for a smaller set
16:08  xristos: does open(filename) behave differently in windows and linux? It seems that it opens files in binary mode in Linux but text mode in Windows
16:09  xristos: (with the mode specifier omitted)
16:09  Juhaz: Linux does not have a "text mode"
16:09  Alberth: zaytsev: at windows as well. The \r trouble comes from people opening text files in binary mode, where the mangling does not happen any more
16:09  Alberth: Juhaz: it does, it just does the same as binary mode
16:09  xristos: Juhaz: that's not really what i asked
16:09  zaytsev: Alberth, read RFC for mail stuff. They explicitly require you to use "\r\n" sequences and, by the way, almost nobody adheres to it
16:09  Juhaz: xristos, okaym then. The answer is no, it doesn't behave any differently.
16:10  xristos: explain this then: open(filename).read() reads the whole file in linux
16:10  xristos: but it only reads part of the file in windows
16:10  zaytsev: Alberth, what you are talking about? Open \n-only text file created on Linux in Windows Notepad.
16:10  xristos: unless i specify 'rb'
16:11  Alberth: zaytsev: the point is that \n-only files are not windows native file format, and at windows, in text mode you don't get those
16:11  Alberth: zaytsev: you either have to use binary mode, or do a binary copy from unix to windows
16:12  Juhaz: xristos, Linux doesn't mangle files, whatever mode you open it in. Open behaves the same, but the OS does not.
16:13  zaytsev: Alberth, how does this contradict with my suggestion of producing \r\n text files if you are targeting Windows users?
16:13  zaytsev: And vice-versa for Linux
16:14  Alberth: zaytsev: you should not do that yourself, but let the C library of the system do it for you by writing text files in text mode using \n only. Then at every platform you get the right EOL convention
16:15  Alberth: zaytsev: if you write in binary mode, you get to do the EOL stuff for every platform in your app
16:15  Jonny0stars: Hello, has anyone experience with dpkt? I can't figgure out how to find out if its a TCP or UDP packet
16:17  Jonny0stars: It throws an exception eg. AttributeError: 'IGMP' object has no attribute 'dport'
16:17  Alberth: xristos: "but it only reads part of the file in windows" <-- how did you find out?  are you sure you are not just missing the \r characters only? (which is supposed to happen at windows in text-mode)
16:17  Jonny0stars: So it must know its type
16:17  xristos: Alberth: file is 50kbytes long
16:17  xristos: it reads like 1k bytes
16:17  xristos: anyway problem solved
16:18  Juhaz: Alberth, it doesn't just translate line endings, it stops at nul bytes
16:18  xristos: the default behavior is idiotic
16:18  An_Ony_Moose: does anyone here use pyglet?
16:18  Alberth: Juhaz: ah, good point
16:19  An_Ony_Moose: set the mode to rb to make it not skip them
16:19  Alberth: reading non-text files as text-file may cause trouble ;)
16:19  An_Ony_Moose: (or whatever, just add b as the second character in the mode)
16:19  Jonny0stars: No one has used dpkt?
16:20  Alberth: An_Ony_Moose: yep, but then you lose EOL translation (which of course is correct for a non-text file)
16:20  An_Ony_Moose: you can always translate the ends of lines manually
16:20  An_Ony_Moose: data.replace("\r\n", "\n"
16:20  An_Ony_Moose: )
16:20  An_Ony_Moose: :P
16:21  Juhaz: of course, you could let python worry about it and use the universal newline mode.
16:23  Juhaz: also, "text" is more ambiguous than ever. What is text? Is utf-8 encoded text text? Is utf-16?
16:24  lvh: ascii
16:24  lvh: damn azns need to stop using funny squiggles
16:24  plwert: I have a script which loops over the contents of a directory with 'glob' and reads each file in, parsing them one by one. Whenever I ctrl-c to kill the script, I instead see a weird character ([?]) and the script seemingly jumps to the next file, until it eventually accepts its fate and dies in a fire after the ~200th ctrl-c it received (a minute or two later). Any idea what might be causing this? I'm not launching any subprocesses, w
16:24  cwillu_at_work: plwert, you're probably calling out to another process?
16:24  lvh: plwert: show code
16:25 * cwillu_at_work sighs;  fingers haven woken up before the mind apparently.
16:26  lvh: REST pub/sub reminds me of FTP
16:26  lvh: The server calls the client!
16:27  plwert: I lied and cannot read code and don't actually call glob
16:27  plwert: (just a sec, pasting a minimal version that still exhibits the same problem)
16:29  zamba: can someone explain how working with microseconds and timedelta sometimes yields timedelta.seconds = 86399?
16:29  zamba: http://docs.python.org/library/datetime.html
16:29  zamba: i see it mentioned at that documentation, but i don't really understand what it really means and how i should practically "fix" it
16:29  shylent: do you have negative values?
16:30  zamba: shylent: no, i shouldn't have
16:30  plwert: lvh: http://paste.pound-python.org/show/v5vQpcXYfP4ORmncKhxb/      when I ctrl-c, it jumps to the except clause and then moves on to the next file
16:30  papna_: zamba: You looped around midnight at some point.
16:30  zamba: papna_: nope
16:30  zamba: shylent: but evidently i must have
16:30  Abhinav11: I am running this code http://paste.pound-python.org/show/570/ snippet and getting error
16:30  cwillu_at_work: plwert, oh, that's because you're catching the InterruptException
16:30  Abhinav11: can anyone help me?
16:30  cwillu_at_work: plwert, never use bare except:
16:30  plwert: cwillu_at_work: gah
16:30  cwillu_at_work: (well, hardly ever :p)
16:31  plwert: thanks
16:32 --- Abhinav11 is now known as Abhinav1
16:32  Alberth: Abhinav1: never used glade, but it looks like an error in your glade file.
16:32  cwillu_at_work: Abhinav1, include the entire trace
16:32  roppert: what's the recommended lib for working with curses? The built in?
16:32  cwillu_at_work: Abhinav1, and the entire file, in order to make sense of the line numbers
16:33  papna_: roppert: urwid
16:33  Abhinav1: cwillu_at_work: Its all that I am getting while running in terminal..
16:33  An_Ony_Moose: does anyone here use pyglet and know how to make the on_draw event be called regularly (at 60Hz, surprise surprise!:P) ?
16:34  Abhinav1: cwillu_at_work: http://paste.pound-python.org/show/571/
16:34  cwillu_at_work: An_Ony_Moose, tried #pyglet?
16:34  roppert: papna_: I see, thanks!
16:34  An_Ony_Moose: cwillu_at_work: I would, but there are hardly any people in it
16:34  An_Ony_Moose: I guess it's worth a try though
16:35  cwillu_at_work: An_Ony_Moose, number of people in the channel isn't indicative of how useful the channel is
16:35  cwillu_at_work: Abhinav1, lose that silly try: except: block
16:36  An_Ony_Moose: cwillu_at_work: it is most of the time. of course there are exceptions (#wxpython, I'm looking at you ;D), but generally it is. :P
16:37  Abhinav1: cwillu_at_work: removed, but same error :(
16:38  Juhaz: Abhinav1, I answered in gimpnet. It's not the code, the problem is in the glade file.
16:39  Juhaz: why is it using libglade anyway? GtkBuilder is the way to go
16:40  Abhinav1: Juhaz: is gtkBuilder is better? I am newbie
16:42  Abhinav1: Juhaz: should I paste glade ?
16:43  Juhaz: Abhinav1, can't hurt. And yes, it's better - and more importantly newer and actively maintained.
16:44  Abhinav1: Juhaz: No problem, I will switch to gtkbuilder.. :)
16:45  Abhinav1: Juhaz: http://paste.pound-python.org/show/573/  Its my glade file.. don't think It have error
16:46  cwillu_at_work: Juhaz, why do I have you on my friends list?
16:47  zamba: when expressing microseconds.. isn't 0900000 valid? meaning 9th of a second?
16:48  Juhaz: cwillu_at_work, on a what?
16:48  plundra: zamba: What?
16:48  cwillu_at_work: zamba, in what context?  foo = 0900000 will interpret that as an octal
16:48  zamba: or how is 9th hundredth of a second expressed as a datetime object as ms?
16:48  zamba: i don't really know what i'm asking now :)
16:48  zamba: but strptime() has %f
16:48  cwillu_at_work: Juhaz, * [Juhaz] is logged in as Juhaz, which means at some point I wanted to know when you joined a channel I was in, but I can't remember why :(
16:49  zamba: Microsecond as a decimal number [0,999999], zero-padded on the left
16:49  zamba: for instance i have the value 9, which should mean 9 hundreds of a second
16:49  zamba: if i give it 9, it will interpret this as 900000
16:49  cwillu_at_work: zamba, post some code to a pastebin, I haven't got the foggiest idea what you're talking about :p
16:49  zamba: cwillu_at_work: :D
16:52  zamba: cwillu_at_work: i'm reading in hundreths of a second.. for 100 is 1 second.. 50 is half a second, and so on.. ok?
16:52  cwillu_at_work: ...okay...?
16:52  zamba: so i have a variable like this:
16:52 * An_Ony_Moose joins in to watch
16:53  zamba: 10121516525534 which i parse to a datetime object like this: datetime.datetime.strptime(s, "%y%m%d%H%M%S%f")
16:53  Juhaz: cwillu_at_work, huh. Can't say I remember anything special either.
16:53  cwillu_at_work: zamba, 10121516525534 is a string?
16:53  zamba: cwillu_at_work: yup
16:53  cwillu_at_work: (if so, type "10121516525534")
16:54  zamba: cwillu_at_work: sorry :)
16:54  zamba: anyway.. the problem is that strptime pads zeros to the right of the %f value
16:54  cwillu_at_work: oh, you're asking about strptime format strings
16:54  zamba: so 9 turns into 900000, as does 90
16:55 * An_Ony_Moose bails out for lack of understanding
16:55  zamba: just try it yourself
16:56  cwillu_at_work: have you read the docs? :D
16:56  zamba: i have, but i don't really understand it :)
16:56  zamba: Microsecond as a decimal number [0,999999], zero-padded on the left
16:56  zamba: ah!
16:56  zamba: i have to zero-pad the INPUT
16:56  zamba: :D
16:56  zamba: got it :)
16:56  An_Ony_Moose: oh, I thought that was obvious xD
16:56  zamba: *giggle*
16:57  zamba: An_Ony_Moose: don't give me that :)
16:57  An_Ony_Moose: xD
16:58  greg_f: I have an iterator with lines of file, how can I send param calculated in first step of iteration to next steps?
16:58  zamba: where do i find the format specifier?
16:58  Scala: greg_f: create a variable before the loop
16:58  zamba: not under the print statement
16:58  Abhinav1: Juhaz: Can I add Menu in gtkbuilder, It is disable in for window
16:58  lvh: greg_f: An object that composes the iterator with some other stuff.
16:58  cwillu_at_work: zamba, "%08d" % 5 => "00000005"
16:59  greg_f: Scala: thanks
16:59  zamba: "%02d" is what i need, i guess
17:00  cwillu_at_work: zamba, "%06d", no?
17:00  zamba: since 50 hundreths of a second is 500000 microseconds
17:00  datadude: Hello,all. Dumb question here.  What happens if I mess with the system Python in Mac Snow Leopard? I've messed with the system PHP and Ruby consistently, and never had any problems, but my cousin, a pro Python developer, told me that doing so would result in me spending days recovering my machine.   Can someone explain why?
17:00  cwillu_at_work: zamba, [0,999999], zero-padded on the left
17:00  cwillu_at_work: makes me think you need 6 digits
17:00  zamba: microseconds is millionth of a second, isn't it?
17:00  cwillu_at_work: oh, if so, yeah
17:00  gorakhargosh: datadude: Use homebrew and virtualenv/zc.buildout.
17:01  cwillu_at_work: datadude, if macos is using python for system stuff, then mucking with it can potentially break stuff
17:01  datadude: gorakhargosh: I've now eight days into learning Python. Is there a tutorial or explanation you can point me towards?
17:01  cwillu_at_work: datadude, an operating system that used php internally would be a crime against nature
17:02  cwillu_at_work: Tutorial: http://docs.python.org/tut/ is pretty good.
17:02  mollison: i need to write a python 2 script that works on both arch linux and debian
17:02  datadude: cwillu_at_work: That makes perfect sense. I can imagine why Mac would use Python internally.
17:02  mollison: problem is, debian does not have python2, only python
17:02  mollison: but in arch linux, i need to use python2, since python goes to python 3, which is not what i want
17:02  mollison: any ideas?
17:02  gorakhargosh: datadude: https://github.com/mxcl/homebrew and http://www.buildout.org
17:03  datadude: cwillu_at_work: Oh, I meant a tutorial or explanation about homebrew virtualenv/zc.buildout.
17:03  Juhaz: Abhinav1, disabled? btw. the error seems to be because the notebook is empty
17:03  cwillu_at_work: datadude, I've got python2 and python2.6 symlinks here :/
17:03  cwillu_at_work: granted I'm on ubuntu, not debian, but I don't think they deviate on this
17:04  cwillu_at_work: er, mollison, not datadude
17:04  mollison: ah, now i see that debian does have python2.6
17:04  Krauzi: maybe now someone how can tell me how to work with CFUNCTYPE ? I need to call a funtion of a .pyd module with it (this function then should be able to call this function).
17:04  datadude: By the way, off topic, but is anyone else having trouble connecting with new nicks to freenode?
17:04  mollison: i did not know to try that... i just tried python2 and debian actually does NOT have that
17:04  Krauzi: *who*
17:05  Abhinav1: Juhaz: ya, I can n't add menu while using gtkbuilder
17:05  datadude: I'm trying to switch from my nickname to a nick that is my real name, and I just can't connect.
17:05  openwatts: I have an issue where I need to send commands to a subprocess on windows but the call block on subprocess.communicate() until the subprocess terminates.  The same occurs if I try to use subprocess.stdin.write.  Is there a work around for this.  Again I am on a windows system
17:05  mollison: aah, but python2.6 does NOT exist on debian
17:06  cwillu_at_work: mollison, might ask in #debian
17:06  odracoon: How can I print a error in a except statement?
17:06  mollison: so basically btw. `python2.6', `python2`, and `python`, there is NO way to get the same python interpreter on arch linux and debian...
17:06  Juhaz: Abhinav1, but how? is the button grayed out or what?
17:06  Moriaantje: @openwatts The easiest "solution" would be to use threads
17:07  odracoon: like try: open(file) stuff() except: print error close(file)
17:07  Moriaantje: but it is somewhat unclear as to what you are trying to achieve
17:07  dash: Moriaantje: wrong
17:07  Abhinav1: Juhaz: ya the button is grayed out
17:07  lvh: openwatts: If you want to do asynchronous communication with one or more processes, I can strongly reccomend Twisted
17:08  lvh: openwatts: It requires you to be a bit more explicit up front about what you actually wnat to do, but the benefit is that it actually works
17:08  lvh: openwatts: In a cross-platform way, too.
17:08  openwatts: well I have a JTAG debugger that I need to send commands to in order to automate a test harness.  I want to be able to send the JTAG commands from my python test harness communicating through stdin
17:09  lvh: openwatts: Hah, I did something similar except I talked to a serial port instead of a process :)
17:09  openwatts: OK i will look into the twisted library
17:09  lvh: openwatts: Are you familiar with how asynchronous IO works?
17:09  odracoon: How can I print a error exactly like python would print if there was no "try" block?
17:09  openwatts: not really but I can figure it out pretty fast I am sure
17:09  lvh: openwatts: You might want to consider reading the first chapter of http://krondo.com/?page_id=1327
17:10  Wild_Cat: odracoon: import traceback; traceback.print_stack()
17:10  lvh: openwatts: The entire thing is a bit verbose, but that should give you a quick idea fast :)
17:10  lvh: openwatts: You'll want to look at twisted.internet.reactor.spawnProcess
17:10  cwillu_at_work: Wild_Cat, no;  odracoon traceback.print_exc() will also include the exception name
17:10  lvh: openwatts: Here's the docs you want: http://twistedmatrix.com/documents/10.1.0/core/howto/process.html
17:10  cwillu_at_work: odracoon, but if all you're doing is exiting cleanly, just reraise the exception, rather than printing it yourself
17:11  cwillu_at_work: also, file.close() probably makes more sense in a finally: block, presumably you need to close it anyway :p
17:11  lvh: openwatts: (If that uses terminology you don't understand yet, skim the http://twistedmatrix.com/documents/10.1.0/core/howto/tutorial/index.html -- it's written assuming you already know that)
17:11  Habbie: i'm building a python package for the LISP networking protocol (unrelated to the programming language). can anyone suggest a good name? best i've some up with so far is lispnetworking but that's a bit verbose
17:12  Juhaz: Abhinav1, dunno. That doesn't really make any sense...
17:12  cwillu_at_work: Habbie, needs more parenthesis
17:12  fission6: where can i browse the python source online?
17:12  Habbie: cwillu_at_work, i considered lispnoparens
17:12  openwatts: Thanks for your help guy.  I really appreciate it
17:13  Abhinav1: Juhaz: in palette I can't choose menu to add in window
17:13  cwillu_at_work: Habbie, slytherin? :p
17:13  cwillu_at_work: (poking fun at the snake-like lisp)
17:13  cwillu_at_work: oooh, parseltongue :p
17:13  Habbie: cwillu_at_work, <homer simpson> mmmmmmmm, far fetched
17:13  lvh: Habbie: slobberweb
17:13  Habbie: lvh, why?
17:14  Scala: fission6: The SVN repo I believe
17:15  Habbie: (it's not web-related)
17:15  sternocera: Is there a variadic function in python that will return the first argument that isn't None?
17:15  cwillu_at_work: next(arg for arg in args if arg is not None)?
17:15  cwillu_at_work: (eww?) :p
17:15  Juhaz: Abhinav1, the only grayed out widgets I see in the palette with a builder project are in the "Gtk+ Obsolete" -section.
17:16  fission6: thanks
17:18  datadude: Whoohoo, about to be back under my real name.
17:18  dheerajchand: And, here I am. Hello, all!
17:18  sgo11: hi, can anyone recommend egroupware alternative opensource project which is written in python? thanks. I failed to find one by googling.
17:19  Scala: sgo11: What is egroupware
17:20  sgo11: Scala, a web based software for team collaboration, central data management and CRM: email client, online calendar, contact and task management etc....
17:21  cwillu_at_work: oh, like emacs!
17:21 * cwillu_at_work ducks
17:21  Scala: cwillu_at_work: He's not looking for an operating system ;)
17:21  sgo11: ..... not like emacs...
17:22  kerio: emacs is great
17:22  sgo11: emacs is not for user. is for developer.
17:22 * cwillu_at_work sneaks off, having confirmed the explosives went off
17:22  psykidellic: sgo11: Google Apps?
17:23  psykidellic: I know its not an opensource project but seems it eases out lot of things.
17:23  joenp: I'm getting a KeyError for line 7 in this paste: http://paste.pound-python.org/show/576/
17:23  joenp: I don't see what's wrong
17:23  sgo11: psykidellic, I am trying to setup a groupware server in LAN. all existing open source groupware (CRMs) are written in php. (most of them). none with python.
17:24  Moriaantje: reguest.session.get('deck')
17:24  cwillu_at_work: Moriaantje, joenp, better yet:  request.session.setdefault('deck', Deck()), but only if you don't mind making an extra Deck every time, just to throw it away
17:24  joenp: Moriaantje: request.session['foo'] is only for setting then?
17:24  joenp: cwillu_at_work: It's important that it stays the same :)
17:24  Scala: joenp: You can do request.session.get('deck', Deck())
17:25  cwillu_at_work: otherwise if 'deck' not in request.session:  request.session['deck'] = Deck()
17:25  Moriaantje: no, is also good for getting, but if the element does not exist it throws an error
17:25  cwillu_at_work: Scala, that doesn't set the deck though
17:25  psykidellic: sgo11: I dont see why a language should be a bottleneck? I am sure there are other softwares that does the same in different language. Maybe just use it (or you want some custom feature)?
17:25 --- dgiagio is now known as drk
17:25  Scala: cwillu_at_work: get has a 2nd argument which is the default value in case the key doesn't exist
17:25 --- drk is now known as drk-
17:25  cwillu_at_work: sgo11, I understand your dilemma :p
17:26  cwillu_at_work: Scala, ... which doesn't set the dict
17:26  cwillu_at_work: Scala, look at his paste :p
17:26  Scala: Ohoh heheheh
17:26  sgo11: psykidellic, I don't know php. I would like to do some customization/personalization.
17:26  Scala: Just glanced
17:27  sgo11: cwillu_at_work, thanks for your understanding.
17:27  cwillu_at_work: sgo11, I don't know of anything full and complete;  I personally avoid any use of php for moral reasons ("I don't want to hate myself in the morning")
17:27  cwillu_at_work: trac is python I believe, but it's not really a full groupware system
17:28  cwillu_at_work: might work though;  I think zope may or may not be useful here too, but I haven't used it, and I'm not sure how much it does out of the box
17:29  sgo11: cwillu_at_work, ok. thanks. actually, I prefer django.
17:29 * cwillu_at_work 's opinions are his own, and not those of #python :p
17:29  cwillu_at_work: sgo11, django is definitely even more build-it-yourself that zope :p
17:30  bartek: I want to check if "a_numeric_string" is in [1,2,3,4] a list of numbers .. Is the best approach to cast the numeric string (I always know it will be numeric) or is there a smarter way?
17:30  sgo11: cwillu_at_work, yeah. :)
17:30  vr6: Curious if there is a pythonic philosophy regarding choosing the number and combination of returns from a function?  I.e., In C it is generally considered best practice to only have ONE return statement per function.  See lines 1 and 42-47 at http://paste.pound-python.org/show/577/
17:30  bartek: when I say cast, I mean to wrap it with int()
17:30  joenp: Off topic - anybody here shot their parents in law and gotten away with it?
17:30  cwillu_at_work: Moriaantje, a couple style points:  your play function can be simplified a fair bit;  if card:  request.session['cards_on_table'] = [card] is all you need
17:31  kriel: not sure if this is a py problem or a sql problem. my program consistently freezes on mycursor.execute("update incmed set errorcheckbox = 1, errorwhy = '%s' where id = %d; commit;" % (reason, pcrid)) where, before, it'd go right through it. context: http://pastebin.com/nCMbg5Mg
17:31  infobob: http://paste.pound-python.org/show/578/ (repasted for kriel)
17:31  Moriaantje: @cwillu_at_work, thanks but is not my snippit ;-)
17:31  papna_: kriel: Never ever ever ever ever use string interpolation for building your SQL queries.
17:31  papna_: kriel: http://bobby-tables.com/
17:32  cwillu_at_work: vr6, several is fine.  c's style is in part due to the typical length of c functions;  single returns makes it much easier to track control flow.  In python, on the other hand, having a function that doesn't fit on the page is frowned upon, and when you can see the whole function, multiple exit points hurts a lot less.
17:32  cwillu_at_work: (and often allows for a shorter function in the first place)
17:32  Moriaantje: I was also reviewing joenp's snippit and it is okish
17:32  papna_: kriel: some_cursor.execute() isn't for sending stuff like you're typing at an SQL shell. You wouldn't try to do transactions by doing "query; commit;"
17:32  kriel: papna_: no user input, it's all db manipulation, and all the 'reasons' are provided by me elsewhere in the script
17:32  cwillu_at_work: vr6, pastebin a function to discuss if you want
17:33  cwillu_at_work: kriel, that's no excuse.  It's trivial to do this right :p
17:33  vr6: cwillu_at_work:   See lines 1 and 42-47 at http://paste.pound-python.org/show/577/
17:33  papna_: kriel: You are still stuck with having to escape yourself, and having unnecessarily insecure code.
17:33  joenp: cwillu_at_work: Well thanks :)
17:33  papna_: kriel: Doing this right is easy and is a good habit.
17:33  papna_: kriel: There is no benefit to doing it wrong.
17:33  cwillu_at_work: kriel, mycursor.execute("update incmed set errorcheckbox = 1, errorwhy = %s where id = %s; commit;", (reason, pcrid)) (depending on the module in question) is the correct way to do that
17:34  Moriaantje: @kriel, you could also return a dict
17:34  vr6: cwillu_at_work:  guess my issue with what is in pastebin is I hate the arg to determine what type of return in the function def.
17:34  Moriaantje: is a lot cleaner and makes it easier for you function callers to get the preferred data out
17:34  kriel: Moriaantje: that... would have saved me a lot of trouble had i found that out earlier. x.x;
17:34  cwillu_at_work: vr6, sec, looking
17:35  papna_: kriel: Execute your query doing it right and outside of it do the transactions.
17:35  papna_: kriel: Also, name your variables better.
17:35  cwillu_at_work: vr6, I'm just giving it a quick formatting, be one minute
17:35  cwillu_at_work: (for comparison)
17:36  cwillu_at_work: vr6, one major style point:  use "for foo in dct_compYearDates:" instead of indexing yourself
17:37  cwillu_at_work: vr6, and if you have to do indexing, use "for index, foo in enumerate(dct_compYearDates):" in most cases
17:37  kriel: cwillu_at_work: papna_: Okay, I'll look into the syntax for mycursor.execute() and reformat that statement to do it right. However, it was working fine before, and suddenly stopped. Any ideas why?
17:37  cwillu_at_work: kriel, probably because the escaping broke
17:37  vr6: cwillu_at_work: mmm, yeah, that is a left over of something I did earlier...
17:37  papna_: kriel: I don't know. With a good SQL driver, I don't think trying to do the transaction your way should have worked.
17:37  cwillu_at_work: kriel, get it working the right way, and then see if it's still broken
17:38  cwillu_at_work: vr6, dct_compYearDates is a list or a dict?
17:38  vr6: cwillu_at_work: dict
17:38  cwillu_at_work: k
17:39  cwillu_at_work: vr6, ah, I understand your hungarian now :p
17:39  cwillu_at_work: (also, don't use hungarian :p)
17:39  vr6: cwillu_at_work: I got rid of just about all my horrid hungarian var naming notation except for lists and dicts where I usually prefix them with lst, and dct, respectively. It just helps me out as a beginner.
17:39  rdz: hi all. is there a module that implements the SLIP protocol?
17:40  foomanchu: I have a list of datetime objects (20-200) bounded by a day (00:00:00.0-23:59:59.9). I want a pythonic way to dump them into buckets of 10 minutes. With integers (to which, of course, i can convert time) the most obvious approach is mod/div math. Anything in the standard library to help me? Is there a common name for this task in CS land?
17:40  papna_: vr6: I doubt it.
17:40  cwillu_at_work: vr6, can startDate ever be negative?
17:40  vr6: cwillu_at_work:  you shoulda seen the hungarian notation horror show I posted last week... :P
17:41  vr6: papna_: ?
17:41  papna_: vr6: I doubt it's helping you.
17:43  vr6: papna_: ha
17:43  Moriaantje: @foomanchu, actually you are trying to make some kind of histrogram
17:45  kriel: still freezes. mycursor.execute("update incmed set errorcheckbox = 1, errorwhy = ? where id = ?; commit;", reason, pcrid) http://code.google.com/p/pyodbc/wiki/GettingStarted
17:45  kerio: vr6: ugh
17:45  papna_: kriel: Don't do "commit" like that.
17:46  papna_: kriel: You aren't sending stuff to an SQL interpretter.
17:46  papna_: kriel: You do transactions OUTSIDE of the query language.
17:46  papna_: kriel: Not by execute("query; commit;"...
17:46  foomanchu: Moriaantje: histogram, of course ... oh, what happened to my Photoshop3 days ... Just having a name will help dig around.
17:47  Moriaantje: it's actually a pretty straighforward problem, here wait a sec...
17:47  vr6: kerio: what now?  bring it on, please :).  (I am here to improve my python coding to that of something respectable :)  )
17:47  papna_: vr6: When people learn to ski, they don't want to let go of their poles. They want to clutch them tight and use them all the time.
17:47  papna_: vr6: Instructors often make them not even carry their poles.
17:48  kerio: vr6: you have absolutely *no need* to return different things like that
17:48  papna_: vr6: They feel like they help, but they do the opposite.
17:48  papna_: vr6: Such are most crutches.
17:49  kerio: not to mention that it's a NameError on like 4, right ther
17:49  kerio: e
17:49  vr6: papna, kerio: This is exactly why I asked the question - the code had a dirty feel to it.  Unfortunately right this second I need to head to a meeting. feel free to private message...
17:49  papna_: vr6: The moral of the story: stop coding and go skiing.
17:49  vr6: k
17:49  kerio: who the hell uses hungarian notation
17:50  vr6: apparently someone named vr6... haha
17:50  papna_: kerio: Joel Spolsky.
17:50  Scala: hungarian in python code? O_o
17:50  SeanInSeattle: Hey all.  How to go from a python project with a setup.py file to a debian package?  i'm confused about how to create debian packages from a python project using something like this:  http://pypi.python.org/pypi/stdeb/0.5.1#bdist-deb-distutils-command
17:51  kriel: ohhhhh...
17:51  dash: SeanInSeattle: i usually just download an existing debian package for some python project and mimic its rules file
17:51  kriel: papna_: were you saying to use execute('query'), cnxn.commit() ?
17:51  kriel: ;*
17:51  papna_: SeanInSeattle: Are you going to ask Debian to include it or just distribute it yourself?
17:52  papna_: kriel: That could work.
17:52  SeanInSeattle: papna_:  I'm going to distribute it myself.
17:52  gavino: dump everything savew archlinux+bsd
17:52  gavino: debian and redhat obsolete
17:52  SeanInSeattle: dash:  what do you mean by "mimic its rules"? Do you mean the rules file itself?
17:53  unRuhe: hi there
17:53  dash: SeanInSeattle: sure
17:53  papna_: SeanInSeattle: I thought bdist_deb was supposed to work okay if you are't picky.
17:53  dash: gavino: Haha.
17:53  papna_: I haven't tried it in forever.
--- Log closed Fri Dec 17 18:23:32 2010
