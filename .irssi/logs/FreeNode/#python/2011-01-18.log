--- Log opened Tue Jan 18 10:14:49 2011
10:14 --- Users 718 nicks [0 ops, 0 halfops, 0 voices, 718 normal]
10:16 --- Channel #python was synced in 91 seconds
10:21  lrh9: Does anyone know of a neural network package?
10:32 --- aminpy is now known as aminpy_
10:32 --- aminpy_ is now known as aminpy
10:43  Phazorx: morning
10:44 --- Super_Meat_Boy is now known as Meat_Boy
10:45  Phazorx: trying to update to 3.1 form 2.x tree... and have something erroneous that doesnt match change list: except tweepy.TweepError, e: SyntaxError: invalid syntax (at comma)
10:45  VladDrac: 3.1 uses except Exception as error: syntax
10:45  Phazorx: did i miss somrthing global... like the way are exceptions are passed now?
10:45  VladDrac: I think
10:45  bob2: Phazorx: 2.x and 3.x are (deliberately) incompatible
10:46  bob2: code is only compatible if the author is a masochist/ran 2to3 over it
10:46  Phazorx: bob2: obviously.. .and i am correcting things to mitigate that
10:46  _habnabit: Phazorx, why are you doing it manually instead of using 2to3?
10:46  bob2: oh, well, http://docs.python.org/release/3.0.1/whatsnew/3.0.html
10:46  Phazorx: _habnabit: probably similar reasons to what bob2 just mentioned
10:47  bob2: eh?
10:47  bob2: I'd suggest 2to3
10:47  bob2: instead of hand porting
10:47  _habnabit: Phazorx, ... you're not using 2to3 because 2.x and 3.x are incompatible?
10:47  Phazorx: is it safe enough? i'm not a big fan of codegen
10:48  Phazorx: _habnabit: i'm not using 2to3 because i beleive i know more about my code than 2to3 does... perhaps i'm paranoid though
10:48  bob2: it is what everyone else uses
10:48  bob2: hah
10:48  bob2: run 2to3, see if your tests pass
10:48  Alberth: if you are paranoid, run the program, then compare the changes
10:48  _habnabit: Phazorx, but apparently you don't know more about how 3.x works.
10:48  _habnabit: Phazorx, tradeoffs!
10:49  bob2: harsh
10:50  bob2: if your code runs under 2.6/2.7 with no warnings, 2to3 should do the right thing
10:51  amitz: paranoid who tell people (s)he is paranoid is not paranoid enough.
10:51  Phazorx: hmm... it lost b-soup after cponversion i wonder how
10:51  bob2: just becaaaaause i'm paranoid, don't mean 2to3's not after you
10:51  bob2: has BS been ported?
10:52  Phazorx: well if would not be ported it would stop working right?
10:52  bob2: hm?
10:52  bob2: it converts your package, it doesn't convert the world
10:52  bob2: nor even import any of your code, afaik
10:53  bob2: bs on python3 is probably relatively boned, though
10:53  ribng: hi, i am not sure what s=" something %%H" % str
10:53  ribng: what does %%H  means ?
10:54  _habnabit: lxml is all-around better and runs on 3.x.
10:54  ribng: could someone help me ?
10:54  Phazorx: so... i should go back to 2.X if i want BS?
10:54  Phazorx: ahh alternatives... nice
10:54  bob2: http://www.crummy.com/software/BeautifulSoup/3.1-problems.html
10:54  Alberth: ribng: look at escape sequences of string interpolation
10:54  bob2: that looks like a ValueError to me
10:55  bob2: oops, TypeError
10:55  aleray: hi, how can I merge this two regexp together?
10:55  aleray: r'^(?P<category>[\w-]+)/(?P<slug>[\w-]+)/images/$'
10:55  aleray: r'^(?P<category>[\w-]+)/(?P<slug>[\w-]+)/images/(?<id>\d+)/$'
10:56  aleray: (in other words, how can I mage <id> optional?
10:56  aleray: )
10:56  bob2: django?  or appengine?
10:56  Phazorx: (optional|)
10:56  aleray: bob2, yes django
10:56  bob2: r'^(?P<category>[\w-]+)/(?P<slug>[\w-]+)/images/?((?<id>\d+)/)$' or something
10:56  bob2: bleh regexp routing
10:57  aleray: r'^(?P<category>[\w-]+)/((?P<slug>[\w-]+)/images/(?<id>\d+)/|)$'
10:57  aleray: oups
10:57  aleray: bob2, thanks
10:57  aleray: I try
10:57  _habnabit: bob2, I know right
10:58  ribng: Alberth, thanks.
10:58  bob2: yo dawg I heard you liked an unreadable way to map urls to code so I put regexps in your freaking routing shit oh god please help me
11:00  lrh9: Hahahaha.
11:00  lrh9: Hahahaha.
11:00  aleray: bob2, shall I put the first quotation mark in ?((?<id>\d+)/)  ???
11:00  bob2: I'm gonna assume this is all an elaborate practical joke
11:00  bob2: kudos to you good sir
11:01  gjvc: bob2, what do you prefer?
11:01  Phazorx: _habnabit: off hand could you suggest lxml alternative for BeautifulStoneSoup(data, convertEntities=BeautifulStoneSoup.ALL_ENTITIES) ?
11:01  mahmul: why don't you just make both routes point to the same function and sort it out there?
11:02  mahmul: that's more explicit
11:02  bob2: gjvc: I like pyramid's traversal stuff
11:02  bob2: but I guess I'm just complaining that if you need help writing the regexp to map stuff (and I would too, I don't know wtf aleray's does)it's all far too hard
11:03  gjvc: mmm
11:03  gjvc: sounds reasonable
11:03  gjvc: i concur
11:03  gjvc: will look at pyramid, thank you
11:03 --- Meat_Boy is now known as Super_Meat_Boy
11:03  aleray: bob2, didn't get the thougth
11:04  MechanisM: please point me to how set custom filenames for uploaded images: username_slug_date.extension
11:04  aleray: bob2, what does the pipe stands for?
11:05  _habnabit: MechanisM, uploaded how?
11:05  bob2: MechanisM: is that a django question?
11:05  bob2: aleray: 'or' operator
11:05  MechanisM: yep django
11:05  _habnabit: MechanisM, #django
11:05  aleray: bob2, thanks :-)
11:05  bob2: #django might know more
11:05  MechanisM: I'm using django-imagekit app.
11:06  MechanisM: _habnabit: noone answers there
11:06  _habnabit: MechanisM, it's not a python question.
11:06  _habnabit: MechanisM, not relevant here.
11:07  MechanisM: wow.. django written in diffirent than python lnguage? sorry then
11:07  aleray: bob2, it is the same as r'^(?P<category>[\w-]+)/(?P<slug>[\w-]+)/images/((?P<id>\d+)/)?$' right?
11:07  bob2: MechanisM: don't be silly
11:07  _habnabit: MechanisM, python is written in C. Why don't you try ##C as well?
11:07  bob2: MechanisM: but answering your question requires specific django knowledge, whereas this channel is mostly for python-the-language-and-stdlib
11:07  MechanisM: I'm using #c for helping me writing mods for nginx server
11:07  bob2: MechanisM: sure some people here use django, but /everyone/ in #django does, so it is perhaps more likely to get you an answer :)
11:07  _habnabit: MechanisM, cool story bro
11:08  MechanisM: ok.. sorry guys. I'm just bad in english.. maybe I've said bad words..
11:09  bob2: MechanisM: no, it's fine :)
11:10  Alberth: MechanisM: it is just a matter of asking the question to the wrong set of people  (also known as being off-topic in the channel)
11:10  MechanisM: ok ok I understand.
11:12  Phazorx: how can i use lxml to convert ALL html entities when parsing?
11:12  bob2: it's not very offtopic, it's just that django questions historically don't get answered in here :)
11:12  _habnabit: It does by default.
11:13  MechanisM: ok then which lib is better to generate pdf from some blog post for example.
11:13  nosklo: Phazorx: are you using the lxml.html subpackage to parse?
11:13  nosklo: er, it's a module
11:13  Phazorx: nosklo: i'm reading docs at the moment
11:13  Phazorx: but yes i guess it will make more sense
11:13  nosklo: Phazorx: html is not xml
11:14  bob2: MechanisM: I'm not sure there's any great ways
11:14  Phazorx: nesklo it used to be a subset of xml :)
11:14  bob2: you wish ;)
11:14  _habnabit: Phazorx, nope.
11:14  bob2: MechanisM: you can use reportlab, or generate some xml and apache-fo
11:14  _habnabit: Phazorx, it never was, and never will be.
11:14  Phazorx: well yes they both SGML based, i stand corrected
11:14  _habnabit: Phazorx, XML and HTML are both subsets of SGML,.
11:14  Phazorx: but regardless, how do i deal with entities?
11:15  _habnabit: Phazorx, lxml.html does.
11:15  MechanisM: bob2: apache-fo? it's need apache server? coz I'm using nginx+uwsgi
11:15  _habnabit: Nothing special needed.
11:15  bob2: Phazorx: sure it's not already decoding them all?
11:15  bob2: MechanisM: apache.org runs about ten thousand projects, httpd is just one
11:15  Phazorx: bob2: well i found &lt;
11:15  Phazorx: so i presumed it is passing them
11:16  bob2: Phazorx: was it correct in the source?
11:16  Phazorx: couyld be bad data though
11:16  nosklo: Phazorx: are you using lxml.html ?
11:16  Phazorx: checking that
11:16  MechanisM: Yeah.. really. I'm using cassandra
11:16  bob2: MechanisM: right
11:16  _habnabit: Phazorx, maybe it's &amp;lt;
11:16  bob2: MechanisM: reportlab is probably less hassle
11:16  Phazorx: _habnabit: possible.. .hcecking
11:17  MechanisM: bob2: reportlab doesn't covers my needs in free version. I need also include images in pdf
11:17  bob2: ok
11:18  mahmul: MechanisM: you can do that in reportlab
11:18  MechanisM: mahmul: in free version?
11:18  mahmul: MechanisM: yep
11:18  MechanisM: ohh good
11:19  mahmul: MechanisM: read the docs, they're unsurprisingly a pdf
11:19  mahmul: MechanisM: just skip to the platypus stuff
11:22  MechanisM: mahmul: reportlab can insert flash or video in pdf like adobe acrobat?
11:22  nosklo: heh
11:22  mahmul: oh god
11:22  cwillu_at_work: that sounds like something I'd pay to not be able to do
11:22  nosklo: MechanisM: we hope not
11:22  mahmul: MechanisM: well those aren't images.  the pdf standard considers only jpegs to be images
11:22  mahmul: at least so sayeth the reportlab people
11:23  due: <3 reportlab!
11:23  mahmul: it'd be nice if tables broke cells across pages
11:23  due: MechanisM: you most definitely can include JPEG images in reportlab; I have done it myself.
11:24  mahmul: you can do anything pil supports
11:24  mahmul: but he wants to stuff evil into his pdfs
11:24  MechanisM: due: ok.. I'll try. Need to add possibility: "save post as pdf, and read later"
11:24  due: yeah. though evince renders embedded images *weirdly*.
11:25  mahmul: hm, it does?
11:25  MechanisM: due: but posts have images or videos
11:25  cwillu_at_work: yeah.  None of the pdf exploits work :(
11:25  Bacta: Has anyone had experience with Tornado?
11:25  MechanisM: maybe some libs for djvu?
11:25  due: mahmul: yeah; it present them with odd compression and scaling artefacts, even if the image hasn't been scaled or compressed.
11:25  mahmul: MechanisM: um, pdf might not be the best thing if you want videos
11:26  due: MechanisM: PDF isn't really what you want then, imho.
11:26  mahmul: due: this in pdfs generated with reportlab?
11:26  due: mahmul: yes.
11:26  due: mahmul: it renders without issue in acrobat for Unix, but in evince it's a bit icky. it even print it oddly.
11:26  due: *prints it, rather.
11:27  mahmul: due: i've never seen anything like that.  i'll check some of the stuff i've generated in evince tomorrow
11:27  mahmul: evince is libpoppler, right?
11:27  due: i believe so, yes
11:27  mahmul: they're fine in xpdf?
11:27  due: hm, not entirely sure.
11:28  due: let me see if i can get into the pc they're on.
11:28  mahmul: i guess evince isn't libpoppler
11:29  Phazorx: is it possible to get lxml w/o lxml.html with easyinstall?
11:29 --- bradleyayers_ is now known as bradleyayers
11:29  mahmul: huh maybe it is, who knows
11:29  cwillu_at_work: Phazorx, why?
11:29  due: mahmul: Accordin gto Wikipedia it uses poppler.
11:29  nosklo: Phazorx: no. lxml.html is built on top of lxml.etree
11:29  Phazorx: somehoe easyinstall is convinced lxml present but i cant import lxml.html
11:30  nosklo: Phazorx: easy_install is that way
11:30  due: Phazorx: pip > easy_install, too :D
11:30  nosklo: Phazorx: installer package > pip > easy_install
11:30  _habnabit: Bacta, enough to avoid it whenever possible.
11:30  Phazorx: great
11:31  nosklo: pip is not a good idea to install lxml
11:31  Phazorx: pillow fight of packagemanagers
11:31  nosklo: specially on windows
11:31  Bacta: _habnabit: I feel the same way, it's a piece of crap but early design decisions elsewhere mean I'm stuck with it :(
11:31  due: nosklo: oh, meh, forgot about windows. :D
11:31  _habnabit: Bacta, I'm soryr.
11:31  Phazorx: where does it put them on linux?
11:32  Bacta: _habnabit: Coming from a Pylons background I'm in tears
11:32  Bacta: _habnabit: Who could possibly do anything productive with this?
11:32  MechanisM: maybe I can use some apis from linux's tools which can generate rich pdfs?
11:32  mahmul: MechanisM: what do you want to accomplish with these pdfs?
11:33  cwillu_at_work: MechanisM, putting videos in pdf's is a perversion of what pdf's are for
11:33  nosklo: MechanisM: could you please not put videos on pdf? Thanks.
11:34  nosklo: Phazorx: which distro are you in?
11:34  due: mahmul: hm, I tell a lie; it renders the same in xpdf, evince and acroread. Meh. I'll have to work out what I'm doing wrong with images.
11:35  Phazorx: gentoo
11:35  mahmul: due: fair enough, thanks for checking
11:35  Phazorx: slocate -u is still running :)
11:35  due: mahmul: i remember being pained because telling it the dimensions of the image, it appeared to scale it down or otherwise up.
11:35  mahmul: hmmm
11:36  due: mahmul: this is more indicative of my lack of experience with reportlab rather than an issue with the library itself.
11:36  nosklo: Phazorx: emerge python-lxml or something like that
11:36  Phazorx: nosklo: question is where does it put it
11:36  nosklo: Phazorx: at the right place
11:36  nosklo: Phazorx: did you call your file lxml.py ?
11:37  Phazorx: err... no ?
11:37  due: mahmul: canvas.drawImage('logo.png', 110, PAGE_HEIGHT-120, width=200, height=99) seemed to draw it correctly but the image itself is 300x149.
11:38  mahmul: due: well, why are you calling canvas.drawImage directly instead of using the Image() flowable?
11:38  mahmul: due: reportlab really wants you to use platypus
11:39  due: mahmul: there was a specific reason but i can't remember why; i ran into issues with platypus that were probably related to my lack of complete understanding.
11:39  nosklo: Phazorx: good
11:39  nosklo: Phazorx: you said you can import lxml but not lxml.html ?
11:40  mahmul: due: definitely look into using the Image flowable instead.  it'll save you a ton of grief
11:40  mahmul: unless, of course, pil doesn't have a decoder for the image you want to use
11:40  Phazorx: i think easy_install just failed miserably
11:40  due: mahmul: I have it in a variety of formats including eps and vector and so-on.
11:40  Phazorx: lxml is nowhere to be found
11:41  Phazorx: and no i can not import it directly either
11:41  due: mahmul: but yes, thanks for the recommendation! I've put it on my todo list :)
11:41  bassliner: hello, i need to find out the subject of a cert file in python and it seems that pyOpenSSL has something for this called get_subject() - unfortunately i can't find it when looking for an attribute of OpenSSL in ipython. any help how to find it?
11:41  nosklo: Phazorx: fail is normal easy_install behavior
11:42  Phazorx: quite usefull tool it is, eh
11:42  nosklo: it's not useful. Just hard to avoid
11:42  ribot: hey
11:42  nosklo: since everybody seems to write stuff that depends on it
11:43  ribot: do you experience problems with curses, that you see strange characters and stuff?
11:43  Phazorx: so just to rub it in: portage > installer package > pip > easy_install
11:43  mahmul: due: sure thing, good luck
11:43  Phazorx: lxml.etree.c just spat 1890 warning sthough
11:43  Phazorx: not a good sign
11:44  due: bassliner: get_subject would appear to be in crypto.so, so check OpenSSL.crypto?
11:45  bassliner: due: i've looked with tab completion in OpenSSL.crypto.X509.<TAB> but i don't see get_subject() there. i'm a python beginner so maybe i just don't know how to find it there.
11:45  _habnabit: bassliner, ...
11:45  _habnabit: bassliner, why is it you're mucking around in ipython instead of reading the documentaiton?
11:46  due: bassliner: You probably need to import the key into whatever key structure crypto provides and then call .get_subject() on the object returned; also, I do not understand most of what you just said.
11:46  bassliner: _habnabit: in the first place because http://packages.python.org/pyOpenSSL/openssl-x509.html didn't tell me where to look too.
11:46  bassliner: hm.
11:47  bassliner: due: but with the openssl command i don't need to load any key as well.
11:47  bassliner: due: i mean i just want to display a subject and extract some data from it.
11:48  due: bassliner: OpenSSL.crypto.load_certificate would convert the certificate from a buffer into an  X509 instance which would then provide get_subject.
11:48  due: _habnabit: oh, and thanks for the urwid recommendation you gave months (weeks?) ago, it has been immensely useful
11:51  bassliner: due: this may be a stupid question, but how could i find out how to use OpenSSL.crypto.load_certificate proper?
11:52  due: bassliner: google?
11:56  Phazorx: hmm... is there an analog for tweepy already Py3 ported?
11:57  bob2: is that just some oauth-enabled twitter client library?
11:57  Phazorx: bob2: yup\
11:58  Phazorx: ... or would it be sane to try to 2to3 port it ?
11:58  krikulis: hello
11:58  krikulis: does anybody have a clue why M2Crypto segfaults on x64 CentOS when doing EVP.load_key ?
12:02  bassliner: ah
12:02  bassliner: due: thanks.
12:03  bassliner: unfortunately, it seems like the object returned only gets a has_expired() method - what i would need to find out is *when* it is expired...
12:08  Phazorx: heh "TabError: inconsistent use of tabs and spaces in indentation" glory of 3.1 :)
12:11  industrial: How do I find out where python installed django? I need to copy some files but can't find it. OS X.
12:12  nosklo: industrial: import django ; print django
12:12  TheSheep: industrial: run pytho and type:  import django; django.__file__
12:12  industrial: cheers
12:12  TheSheep: python*
12:13  bob2: moduoe's repr includes .__file__
12:16 --- _Unode is now known as Unode
12:33  caution: in keeping my lines to 79 chars in accordance with PEP8, how should I split strings onto multiple lines?
12:34  cwillu_at_work: what's in the string?
12:35  caution: a url
12:35  caution: it looks rather ugly splitting it up
12:35  cwillu_at_work: '' +\n'', or just put it inline if it's not that much longer
12:36  cwillu_at_work: if it's not already at the top-level, consider moving it there as a constant'ish thing
12:36  the_isz: caution: you could end your inner-string lines with a \ which would continue the string on the next line.
12:36  the_isz: but i don't find that an awesome solution, either...
12:36  cwillu_at_work: imo, it's too easy to break it with trailing whitespace
12:36  caution: ('abc'\n'def') works fine without the + or \
12:37  cwillu_at_work: mmm
12:37  cwillu_at_work: forgot about that
12:38  the_isz: cool, haven't tried that in python yet (only C++).
12:38  cwillu_at_work: still, myself I'd just break the line limit if it's <~ 120 characters or so
12:39  caution: where are the experts to tell me what to do!
12:39  cwillu_at_work: caution, you could also consider putting it in a config file
12:40  caution: it's a format string rather than a URL constant
12:41  bassliner: wow. that centos 5.5 has some pyOpenSSL that doesn't even have the 'get_notAfter', 'get_notBefore' attributes.
12:41  bassliner: damn...
12:41  caution: seems like you have to build everything yourself on most distros these days
12:41  caution: or use a 20 year old version
12:42  bob2: centos is about the worst of them
12:42  bassliner: caution: as long as you don't take some 7 years old stuff it's probably there. at least on my ubuntu desktop machine it is.
12:42  bassliner: yea
12:42  caution: centos is worse than debian stable?
12:43  bob2: yes
12:43  bob2: far far far far worse
12:43  caution: good to know
12:45  bassliner: i'm short of just parsing the .pem files and extracting the strings.
12:46  NekoDeko: If I have a bot (Pyborg) that joins an irc channel, would there be a simple way to make it automatically say the phrase "Identify (password)" a few seconds after joining the channel (not "/identify password", the identify is to be said in the channel)?
12:46  bob2: bassliner: http://docs.python.org/dev/library/ssl.html#certificates ?
12:46  aljosa: is it possible to read nested sections with ConfigParser? how?
12:46  bob2: NekoDeko: extraordinarily bot-specific
12:46  bob2: aljosa: don't think so, it just does ini files
12:47  lvh: caution: it is so much worse it's not even remotely funny
12:47  lvh: caution: If I'm given a RHEL box the first thing I do is figure out what virtualization stuff it has
12:47  bob2: hahaha
12:48  azareth: what is the fastet way to get hash(or other unique string) for a dict objects?
12:48  lvh: bob2: I'm not even joking:(
12:48  Juhaz: it's a feature. You're not supposed to develop anything on RHEL, you're supposed to put something you finished at about the same time it released onto it, stick it in a closet for seven years and forget about it.
12:48  lvh: azareth: You can't. dicts are mutable
12:49  lvh: azareth: You could hash(tuple(d.iteritems())), I suppose, but there's no guarantee that two equal dicts will work the same way
12:49  bob2: Juhaz: heh
12:49  lvh: Also, hash(frozenset(d.iteritems()))
12:49  lvh: Which still might not actually necessarily be equal
12:49  caution: what about id(d)?
12:49  amitz: that's why rhel is secure, the packages are so old people forget how to exploit them.
12:49  lvh: caution: Well, yes, if identity is enough
12:49  azareth: lvh : i need to add a dict representation to my memcache key, there must be a way?
12:50  caution: he's given you two ways
12:50  lvh: id() is a shitty way though if it's for memcached
12:50  caution: yeah
12:50  lvh: it's machine specific and not recoverable
12:50  caution: but his question wasn't specific
12:50  lvh: yeah, I know, I'm just pointing that out in case he doesn't realise it
12:50  azareth: caution : id(d) is not unique
12:50  NekoDeko: I added the pyborg-irc.py file to a pastebin if that is helpful in finding out whether or not a few lines to make it identify could be added. http://paste.pound-python.org/show/1711/ I am not really sure if making it work would take a lot of effort, or if there is a simple fix.
12:50  lvh: well, it is, for one process
12:51  lvh: azareth: Right, I think he knows that
12:51  bob2: irclib shocker
12:51  lvh: azareth: Anyway, there's a number of ways, tuple(sorted(d.iteritems())) # might be best
12:51  lvh: iterkeys if you don't need to hash values too
12:51  bob2: from irclib import * # gold
12:52  azareth: thanks lvh, i think the first one will do the job
12:52  lvh: I would assume that is the case? otherwisse you'd need the value (so you can hash it) that you're looking up in the memcache
12:52  lvh: so I'm not sure how that makes sense
12:52  lvh: azareth: Which first one
12:52  lvh: azareth: be careful, one of them is implementation-specific!
12:52  lvh: (the one without sorted or frozenset)
12:53  lvh: actually the frozenset one is sort-of implementation-specific too
12:53  azareth: lvh : tuple(sorted(d.iteritems()))
12:53  lvh: azareth: Let's start with "what are you actually trying to do"
12:53  lvh: azareth: Oh, okay. Why items? What's the value in your memcache?
12:53  lvh: azareth: Also, what does this dict look like?
12:53  lvh: It's still entirely possible that a different data structure is a good idea here, hence the question
12:54  azareth: lvh the dict containc database fields and correspodingin values - it is a filter
12:54  azareth: and I want to cahce the result from this filter
12:54  lvh: azareth: What sort of structure does it have?
12:54  lvh: You mentioned dict comprehensions, so that probably means you have OrderedDict too
12:54  azareth: lvh : single level, key : value, where value is string
12:55  azareth: wait value may be also an object
12:55  lvh: azareth: Hashable object
12:55  azareth: lvh : no the dict is not sorted, but I coulld sort it
12:56  lvh: azareth: I was thinking namedtuple
12:56  lvh: azareth: instead of a dict
12:57  azareth: lvh : never head of it, but I`ll check
12:58  lvh: azareth: collections.namedtuple
12:58  lvh: azareth: The advantage is it's always ordered
12:58  azareth: thanks a lot lvh I`ll read for it
12:58  NekoDeko: For starters, is there some way to identify what the python command for making the bot send a message to a channel is?
12:59  grirgz: hi
12:59  grirgz: i am using imaplib, i can't find a way to store a new message on the server
13:00  lvh: NekoDeko: Sorry, I'd help you, but I'm sick and tired of debugging irclib
13:00  filip: what's the best way to determine wheter PyObject is None in C API?
13:01  NekoDeko: So the file I would have to work with is irclib.py and not pyborg-irc.py?
13:01 --- Super_Meat_Boy is now known as Meat_Boy
13:01  lvh: filip: Py_None
13:01  grirgz: ok, found it, it was the first function in the doc..
13:01  nosklo: NekoDeko: self.msg(channel, bot)
13:01  lvh: filip: That's a *Py_Object
13:01  nosklo: NekoDeko: oh, don't use irclib, it's pretty bad
13:01  lvh: filip: None's a singleton, so you can just compare pointers
13:01  filip: lvh: cool, thanks :)
13:02  NekoDeko: M..
13:02  nosklo: NekoDeko: are you writing your own bot?
13:02  NekoDeko: No.
13:02  nosklo: NekoDeko: or just using one?
13:03  NekoDeko: It is Pyborg, it already works, but I would like it to send the message "Identify password" to the channel when it joins.
13:03  nosklo: ok
13:03  NekoDeko: It joins the network im.bitlbee.org and the channel &bitlbee
13:04  grirgz: bitlbee is not dead ? Oo
13:04  NekoDeko: I suppose not.
13:04  bob2: it got ported to libpurple even
13:05  NekoDeko: self.msg(channel, bot)  <-- Would I change channel to &bitlbee and bot to botname?
13:06  nosklo: NekoDeko: that won't work for you
13:06  nosklo: NekoDeko: I assumed you were using something saner, not irclib-based bot
13:06  Phazorx: hmm... no this is interesting... i have xml data with html entities (xml data formated for js on web end) and i want to filter it with lxml.html but it complains since it got no hrml headers and whtever else html is suppsoed to have... is there a proper way to deal with it
13:06  NekoDeko: Ah.
13:06  nosklo: NekoDeko: I'm sorry
13:06  Phazorx: or should i just go back to plain lxml
13:06  NekoDeko: Mkays.
13:07 --- elpargo_ is now known as elpargo
13:07  azareth: lvh : the bad news is that out hosting (media tample) uses python2.4 but namedtupple is avaialble in 2.6 (
13:08  NekoDeko: Can you send private message to channels resulting in a "normal" message?
13:08  grirgz: pythoncard really rocks!
13:08  bob2: Phazorx: smack someone i guess
13:09  Phazorx: bob2: for what reason exactly?
13:09  Phazorx: data makes sense in it's context... just not for lxml.html
13:09  bob2: for making your life a pain by making something that's not html or xml
13:09  nosklo: Phazorx: it doesn't complain here
13:09  bob2: oh, score
13:10  bob2: CARRY ON
13:10  nosklo: Phazorx: print lxml.html.fromstring('&eacute;').text prints é
13:10  Phazorx: nosklo: http://dpaste.com/329019/
13:11  nosklo: Phazorx: that traceback is incomplete
13:11  nosklo: Phazorx: you've cut the top
13:11  Phazorx: File "./gv2.3.py", line 29, in <module>
13:11  nosklo: Phazorx: but the error seems that you're calling fromstring() with something that is not a string
13:12  mgaunard: what's the equivalent of print that doesn't append a newline at the end?
13:12  NekoDeko: http://paste.pound-python.org/show/1712/ <--- Might this work?
13:12  nosklo: mgaunard: sys.stdout.write()
13:12  Phazorx: lemme print it 1 sek
13:12  NekoDeko: Ignore the comment. Forgot to change that.
13:12  Phazorx: http://dpaste.com/329025/
13:13  nosklo: Phazorx: that doesn't seem to be html
13:13  Phazorx: well these are html entities
13:14  Phazorx: which i want converted
13:14  nosklo: mgaunard: but remember that terminals are line-buffered by default so you won't see the partial line unless you finish writing it or flush
13:14  Phazorx: it is not formatted as html file becxause it is not meant to be used as one
13:14  Phazorx: it is a filler for dinamic text block
13:14  nosklo: Phazorx: where's the code?
13:14  Phazorx: for generating this?
13:15  Phazorx: i got no clue even what language/tool/whatever it is produced in
13:15  nosklo: Phazorx: no, your parsing code. 1) pastebin the code 2) that is xml 3) I don't see any html entities
13:16  caution: &#123;
13:16  Phazorx: let me repharse that then.... what can i use in python to convert &#XXXX; to corresponding utf character in same way as html spec suggests it
13:18  nosklo: Phazorx: lxml does that automatically
13:18  nosklo: Phazorx: and the html spec doesn't suggest that
13:18  nosklo: Phazorx: that is XML - there's nothing HTML in your text
13:18  nosklo: caution: that is a xml entity, not html
13:18  nosklo: Phazorx: html entities are like that: &eacute;
13:18  caution: true
13:18  nosklo: Phazorx: xml entities are like that: &#34ab;
13:19  nosklo: Phazorx: use lxml.etree and it will be parsed automatically
13:19  nosklo: Phazorx: http://bpaste.net/show/13005/ here's proof
13:19  Phazorx: lemme try... s there fromstreen in etree as well?
13:19  Phazorx: bah
13:20  Phazorx: * is there "fromstring"
13:20  caution: yes
13:20  nosklo: Phazorx: read the paste I just linked you to
13:20  nosklo: Phazorx: the code is already there
13:22  NekoDeko: I do not like indentation errors
13:23  nosklo: NekoDeko: indent properly, then
13:23  bob2: yeah, best to avoid them =)
13:23  NekoDeko: I do not even know what I did wrong.
13:23  nosklo: besides using irclib?
13:24  caution: you should learn some basic python before you try modifying someone's python script
13:24  azareth: what do you think about this way to hash dict -> http://dpaste.com/329059/
13:25  nosklo: azareth: filter_set = frozenset(d.iteritems()) ; return hash(filter_set)
13:26  bob2: heh
13:26  caution: azareth: why sort it?
13:26  nosklo: caution: because order matters when generating hash
13:26  nosklo: caution: and he wants the same data to generate the same hash later
13:26  nosklo: but, just use frozenset
13:27  azareth: caution : because dicts are not sortable
13:27  caution: yeah but the dict will be in the same order if it has the same values
13:27  azareth: but {'a': 1, 'b': 2} is the same as {'b':2, 'a': 1}
13:27  caution: correct nosklo?
13:27  bob2: no
13:27  nosklo: caution: no, that's not guaranteed
13:27  bob2: 'order' depends on mroe than just contents
13:28  nosklo: caution: the same dict will be on the same order if you don't modify the dict. But if it's another dict on another day then you can't rely on that
13:29  grirgz: wow, i just discovered bpython, it rox ! it's a python interactive interpreter in ncurses which show documentation on typing, can undo and can save the session to a file
13:29  nosklo: azareth: frozenset also don't have order, and is hashable, so you don't have to sort
13:29  nosklo: grirgz: yeah, bob_f did it
13:29  nosklo: grirgz: he used to come here talk with us, but I think he's on vacation
13:30  grirgz: nosklo: so you can tell it i love his program =)
13:30  grirgz: *tell him
13:31  azareth: nosklo : never used it
13:31  nosklo: grirgz: donate him some money to help funding development
13:31  nosklo: azareth: filter_set = frozenset(d.iteritems()) ; return hash(filter_set)
13:31  nosklo: grirgz: http://bpython-interpreter.org/
13:32  azareth: nosklo : the frozenset is immutable
13:33  nosklo: azareth: so what? you're just calculating the hash
13:33  NekoDeko: "ModIRC instance has no attribute 'send_raw'
13:33  azareth: this is why it is hashable
13:33  nosklo: azareth: so is the tuple
13:33  nosklo: NekoDeko: :(
13:33  azareth: nosklo : but If I create frozen set from differently ordered dicts I would have dofferent sets
13:33  azareth: and different hashes
13:33  nosklo: azareth: no
13:34  NekoDeko: Print is only on the console, it does not send anything to channel?
13:34  chachan: Hi guys, I new using threads in python. I'm having a problem. This is part of my code: http://fpaste.org/apA5/
13:34  nosklo: azareth: frozenset doesn't have order, just like the dict
13:34  nosklo: azareth: frozenset('ab') == frozenset('ba')
13:34  perplexa: nosklo: bpython is damn sexy :o
13:34  chachan: the problem is that I have success for the first 500 threads, then I start to get errors, is there a limit?
13:34  nosklo: perplexa: I don't use it much
13:35  nosklo: chachan: don't use 500 threads.
13:35  johdev: hey, i am writing a console based python script and i want to add a clock, that incrases the time every second, is it possible to update a line or do i have to write a new line every second?
13:35  nosklo: chachan: ever
13:35  nosklo: chachan: why are you launching those threads?
13:35  perplexa: nosklo: the screenshots look promising, tho. i'll give it a shot later
13:36  nosklo: johdev: you can update the line.
13:36  caution: johdev: you might want the curses module
13:36  chachan: nosklo, HTTP connections, I don't want to wait for each one, is it way too high?
13:36  nosklo: johdev: if you write '\r' the cursor moves to the beginning of the current line, so you can overwrite the text
13:36  johdev: thanks! curses!
13:36  nosklo: johdev: no, don't use curses
13:36  nosklo: it is... well... curses
13:36  caution: I should just stop giving advice
13:37  nosklo: johdev: if you want a fancy text UI take a look at urwid
13:37  johdev: ok, so \r could do the job :/ even if there is text after the clock line?
13:37  johdev: well, i dont :)
13:37  nosklo: johdev: \r returns to the beginning of *current* line
13:37  nosklo: johdev: if you move to the line below then it is over
13:37  johdev: Well, i will :/
13:37  nosklo: johdev: you can't. You have to put it all in one line
13:38  johdev: Even with curses?
13:38  nosklo: johdev: otherwise you're in "fancy text ui" territory
13:38  nosklo: johdev: did I mention to not use curses?
13:38  NekoDeko: Are there forums with people bored enough to get into irclib?
13:38  johdev: So i probably am.. i'll give it a try.. urwid
13:38  smw: nosklo, what should people use then?
13:39  caution: urwid apparently
13:39  nosklo: smw: urwid has a nicer api
13:39  smw: nosklo, ok
13:39  nosklo: instead of wrapping a what? 50 years old? c library
13:39  nosklo: curses api is terrible
13:39  chachan: nosklo, is it a big number of threads?
13:39  nosklo: chachan: you shouldn't start any
13:39  nosklo: chachan: you can make HTTP requests in a single thread and not wait
13:40  johdev: Ok, i should have told you, i need something windows compatible :P
13:40  nosklo: chachan: so you can have thousands of requests going on in a single thread
13:40  nosklo: johdev: then you're doomed
13:40  nosklo: johdev: windows console doesn't work right
13:40  nosklo: johdev: nobody uses it
13:40  johdev: well, python does :P
13:41  lrh9: Hello. I'm attempting to define a method of an object at runtime for performance reasons. The data is available when the object is created. I can't determine how to create the method and assign it though.
13:41  johdev: i think i will build a gui.. thanks anyway!
13:41  nosklo: johdev: python programmers do. But finished python programs for windows have a GUI instead
13:41  chachan: nosklo, mm, I was doing that at first but it was too slow. Is there a way to make a urllib.urlopen without waiting?
13:41  bob2: lrh9: prformance reasons?
13:41  johdev: yep, but since i use a py2exe tool, i dont think a gui will be able to "translate".. whatever, i will give it a try!
13:42  nosklo: chachan: may I ask what those requests are? Are you extracting information from websites?
13:42  bob2: lrh9: anyway, it is super easy to add an instance method via the class - just assign it
13:42  caution: chachan: you might want to start using Twisted
13:42  nosklo: chachan: depending on your answer I'll recommend something different
13:42  bob2: lrh9: adding it to an instance is way fiddlier
13:42  lrh9: bob2: Yes. I can check a condition each time the method is called, but since the condition never changes after it has been made it is much more clever to simply define it one way or another based on that condition.
13:43  bob2: lrh9: or to delegate the responsibility
13:43  chachan: nosklo, no, I don't want to extract data from websites. I want make POST with some data
13:43  lrh9: bob2: What?
13:43  nosklo: chachan: I see. Well, then twisted.web.client could do it for you nonblocking
13:43  NekoDeko: How far into the tutorials would I have to go get closer to managing this?
13:44  smw: chachan, pycurl also does many requests at once.
13:44  nosklo: chachan: you'd need some kind of queue where you only do so many requests, or you'll DoS the server
13:44  nosklo: smw: yeah, however pycurl is pretty terrible
13:44  caution: don't use pycurl
13:44  nosklo: smw: the API sucks, it segfaults all the time...
13:44  lrh9: bob2: Anyway, I got method definition and assignment working in a test class, but it failed in my actual implementation. The only difference being is that in my actual implementation I use super() to call a superclass method.
13:45  johdev: nosklo what gui framework do you prefer?
13:45  caution: Qt
13:45  johdev: its not cross platform right
13:45  johdev: PyQt.. well.. it is
13:45  lrh9: bob2: Actually, I think I realize the problem now. I need to assign the method to the class instead of the instance.
13:45  chachan: nosklo, caution and smw, Ok, thanks, let me see with Twisted if a get a better result
13:45  nosklo: johdev: I prefer pygtk. there's a new all-in-one installer for windows here http://ftp.gnome.org/pub/GNOME/binaries/win32/pygtk/2.22/
13:46  nosklo: chachan: let me know if you have any questions with regard to twisted usage
13:46  bob2: lrh9: http://paste.pocoo.org/show/322652/ <- delegation
13:46  chachan: nosklo, great
13:46  bob2: lrh9: yes, as above, adding an instance method to an instance is hard, adding it via the class is just assignment
13:46  CatKiller: Hi! I've got an issue with Python Metaclasses I'm trying to resolve. I wonder if someone could help?
13:48  bob2: as always, just ask
13:48  CatKiller: Thanks, here it is:
13:48  nosklo: johdev: it installs gtk, pygtk and glade, which is a graphical gui builder. You can build the gui in glade graphically and just load it on your code
13:48  bob2: please don't paste a wall of text though
13:48  lrh9: bob2: Hm. I like delegation. I might write it somewhat differently, but it makes sense to declare (or define) once and assign as needed.
13:49  bob2: lrh9: plus reduces the combinatorial explosion if you want something other than just Drinking (e.g. BuildingABridgeInFirstYearEngineeringWith) and makes testing easier since each class does dick all
13:50  lrh9: Oh. Ugh. Actually, the optimization is per instance. Assigning to class simply isn't going to cut it.
13:51  Phazorx: nosklo: thanks
13:51  lrh9: bob2: Pastebin coming. Be gentle.
13:52 * bob2 is mad of lambswool and puppies
13:52  Phazorx: err... i got logic issue
13:52  bob2: er made
13:52  bob2: hm
13:53  Phazorx: tostring() in etree, in tontext of converting sometihng, it takes that sometihng as an first  argument
13:53  Phazorx: but what do apply that method to?
13:54  Phazorx: this: >>> etree.tostring(html) in tutorial kinda doesnt make sense to me
13:55  CatKiller: I've got an element factory class called "ElementMetaClass" (how original) that reads class attributes names, and according to their name, I would like to add the attributeName as a string into a dictionary in the factory created class, let's call it "serializable". Up until there I can manage, but the problem is that this dictionary will only contain "local" class attributes, the factory will not stick the superclass "serializable" attributes in there. Ther
13:55  CatKiller: efore when I lookup the class's "serializable" dict I am missing all of the superclass "serializable" attributes names. I was wondering how I would go about to tell the "ElementMetaClass" factory to loopup superclass's "serializable" dictionary and/or attributes to add them to the current class' "serializable" dictionary. I'm not sure if I expressed myself correctly, please let me know if not.
13:55  lrh9: bob2: The basic idea is an abstract coordinate system supporting an arbitrarily high number of dimensions.
13:55  lrh9: The idea is that axes and coordinates don't exist until they are: a) retrieved or b) assigned to.
13:55  lrh9: If an axis is the last axis, every value in it is a coordinate. It returns the value at that coordinate if it exists or None.
13:55  lrh9: If an axis is not the last axis, every value in it is another axis. It returns an axis if it exists, or creates a new one and returns the new one.
13:55  lrh9: The behavior of an axis is conditional, but it the condition is only evaluated once.
13:55  lrh9: Source: http://pastebin.com/hckFQsLU
13:55  infobob: http://paste.pound-python.org/show/1713/ (repasted for lrh9)
13:55  bob2: WALL
13:55  bob2: OF
13:55  bob2: TEXT
13:55  bob2: Phazorx: to your element object (the thing fromstring gave you)
13:55  bob2: Phazorx: you would think it'd be an instance method
13:56  CatKiller: Sorry maybe I should have split it in a few messages. I didn't want to spam too much by keeping posting in between other people's
13:56  Phazorx: bob2: so i apply it to same thing that is being passed to it as 1st param ?
13:56  bob2: Phazorx: I don't know what you mean
13:56  Phazorx: a.tostring(a, encoding='...')
13:57  kerio: lrh9: don't subclass dict
13:57  bob2: Phazorx: I don't see an instance method called that in the lxml.html docs
13:57  lrh9: kerio: I was aware someone was going to say that.
13:57  kerio: if you really have to, use __missing__
13:57  lrh9: It hasn't changed for a reason.
13:57  kerio: or, hell, defaultdict
13:57  seen_: Phazorx: lxml.html.tostring(a, enco...)
13:58  Phazorx: bob2: http://codespeak.net/lxml/api/lxml.etree-module.html#tostring
13:58  Phazorx: seen_: NameError: name 'lxml' is not defined
13:58  seen_: Phazorx: import lxml
13:58  bob2: Phazorx: right, a free function you didn't import yet
13:59  bob2: Phazorx: import lxml.html ; lxml.html.tostring(a)
13:59  Phazorx: damn it i only imported fromstring and forgot i commented other one
13:59  Phazorx: sorrry
14:00  bob2: ah
14:00  lrh9: bob2: Actually, I think the best idea would be to define two classes.
14:00  bob2: sorry, got mixed up trying to find the instance method in the api docs
14:00  kerio: lrh9: http://paste.pound-python.org/show/1714/
14:00  bob2: lrh9: only hitch is converting when it is no longer the last axis
14:01  bob2: is there a defaultordereddict yet
14:02  reeniginEesreveR: is there any multi-index data structure in python? Say I have a network buffer in which I should be able to access packets by their IDs and also they are sorted by the time they are queued in.
14:03  lrh9: I've got a few ideas. Thanks for the help.
14:03  lrh9: Let me see what I can do.
14:03  bob2: reeniginEesreveR: do you mean sorted or indexed?
14:03  kerio: reeniginEesreveR: OrderedDict, but you don't have a way to access them by index if not by iterating over it
14:03  reeniginEesreveR: bob2, both ... sorted by time indexed by IDs
14:03  kerio: is that ok?
14:03  smw: reeniginEesreveR, you could have two lists. Or use an in memory sqlite db
14:04  bob2: CatKiller: maybe explain what you're trying to do instead of explaining what you did?  I don't quite follow it
14:04  reeniginEesreveR: kerio, sorta yes sorta no. In case I'm iterating the elements and I need to pop one, its index should be popped too
14:04  CatKiller: Yes I will, thanks
14:04  smw: reeniginEesreveR, there is no reason not to have two lists
14:04  kerio: reeniginEesreveR: yeah, del foo[idx]
14:04  CatKiller: I have a module called elements, which contains all possible elements I will ever use in my programs.
14:04  reeniginEesreveR: smw, you mean a list and a dictionary
14:04  joenp: is there a way to make the gc module write out names rather than hex references?
14:04  bob2: CatKiller: and an element is what?
14:04  CatKiller: These elements are partially created by a metaclass.
14:04  CatKiller: An object
14:05  CatKiller: A class that contains data, and getter and setters basically
14:05  smw: reeniginEesreveR, whatever, the point is to have multiple data structures.
14:05  bob2: this is still pretty "the code I wrote" rather than "the problem I want to solve"
14:05  reeniginEesreveR: smw, how would i sync the two?
14:05  smw: reeniginEesreveR, maybe have them both in a class that makes sure they are in sync?
14:05  CatKiller: Ok the problem I want to solve is: how to, within a metaclass, access a superclass' attributes?
14:05  bob2: why do you have a metaclass?
14:05  reeniginEesreveR: smw, wondering if there is an already available solution in python?
14:06  CatKiller: That metaclass is used to build a class "C", subclass of class "B"
14:06  smw: reeniginEesreveR, with methods like pop() from one, remove from the other
14:06  CatKiller: How do I get access to "B"'s attributes from the metaclass
14:06  bob2: what are the 'elements', concretely?
14:06  CatKiller: I have one because there are so many different classes in that module it needs to be mostly automated
14:06  smw: reeniginEesreveR, I don't think anything exists. An in memory sqlite db is another option if it is alot of data.
14:06  CatKiller: elements is a module that contains hundreds of classes representing elements types
14:06  CatKiller: a "disk" class, a "raid" class
14:07  bob2: do they have any behaviour?
14:07  CatKiller: They mainly store data, and have a few utility functions. We use them also to serialize the data to a DB
14:07  CatKiller: A utility function would convert the object "Disk" into a serializable dictionary that we use for pickling
14:08  kerio: reeniginEesreveR: OrderedDict
14:08  CatKiller: But mainly, they are here to keep data.
14:08  kerio: really
14:08  pythonirc1011: How is this order determined? -->  set(['v',10,100]) --> ([10, 100, 'v'])
14:08  kerio: pythonirc1011: implementation-defined
14:08  kerio: don't rely on it
14:08  pythonirc1011: is that a hash order? or a sorted order?
14:08  kerio: hash
14:09  pythonirc1011: where is the hash function?
14:09  kerio: hash()
14:09  kerio: it calls __hash__ on the object
14:09  pythonirc1011: ah i see
14:09  kerio: or if there's no __hash__, it gets the object's id()
14:09  reeniginEesreveR: kerio, thats interesting!
14:09  smw: very interesting
14:10  pythonirc1011: kerio: for numbers it seems there is no __hash__ or id()?
14:10  bob2: ints have an id
14:10  pythonirc1011: they have a hash actually
14:11  bob2: they have both
14:11  pythonirc1011: but for some reason 10.__hash__() doesnt work
14:11  smw: pythonirc101, (10).__hash__()
14:11  lrh9: kerio: Did you try your code? It's failing for me.
14:11  lrh9: http://paste.pound-python.org/show/1715/
14:11  pythonirc1011: I know...why doesnt 10.__hash__() work?
14:12  bob2: because digt, digit, fullstop are the beginnings of a float literal
14:12  kerio: pythonirc1011: because number literals can have .
14:12  pythonirc1011: and I dont see any id() for int in dir(int)
14:12  pythonirc1011: ah! thats right!
14:12  kerio: lrh9: hmm...
14:12  bob2: why would you?
14:12  bob2: id is a free function in builtins
14:12  bob2: not all free functions map to __magic__ methods
14:12  lrh9: kerio: 3.x here, if that makes a difference.
14:12  jorrit: pythonirc1011, you will not find an id() in other objects either.
14:12  pythonirc1011: bob2: oh thats right.
14:13  pythonirc1011: why not just use id instead of hash for sets then?
14:13  smw: bob2, the hash of an int is just the int?
14:13  jorrit: smw, except for very big ints.
14:13  bob2: because you might want things to have the same hash value even if they are different instances
14:13  kerio: lrh9: hrmpf, defaultdict is made in c
14:13  jorrit: smw, try (344444444444444444444444444444444444444).__hash__()
14:13  bob2: smw: it seems so, but I'm not sure what the deal with that is
14:14  bob2: it seems collide-y
14:14  pythonirc1011: bob2: if you can have no collisions, then isnt that a better hash function?
14:14  kerio: lrh9: http://paste.pound-python.org/show/1716/
14:14  bob2: if you have no collisions, it's not a hash function ;p
14:14  smw: right, I guess that makes sense. I just think of hash as md5, sha1, etc
14:15  smw: bob2, it makes perfect sense though, it is small and no collisions
14:15  smw: It is amazing what you learn here :-)
14:16  lrh9: kerio: Ack. Your link is just giving me a white page.
14:16  lrh9: /me detects large amounts of bad luck. First a method won't work? Now a page?!?
14:16  kerio: lrh9: delete your pound-python.org cookies
14:16  kerio: it does that, yeah :<
14:16  zmotok: hello everyone, I'm trying to debug some code, I have a version that works, and a SVN version which doesn't; the code gives an " NameError: global name 'kuk' is not defined " error, and I'm trying to find where that kuk function (?) is defined, but without luck, any.. suggestions
14:16  jorrit: zmotok, well without the code there is not much we can do.
14:17  kerio: lrh9: (also you can't define __getitem__ on instances - do the check on __getitem__)
14:17  Habbie: zmotok, if python is saying it is not defined, perhaps it's not weird that you can't find it :>
14:17  kerio: *in
14:17  jorrit: zmotok, but it seems logical that it would complain about 'kuk' if there is no 'kuk'. Seems ok to me?
14:17  zmotok: jorrit: well, it's a big scientific software, Inelastica (on sourceforge)
14:17  jorrit: zmotok, big or not. Without more context or code there is little we can do.
14:17  plundra: (Really? kuk? I hope no swedes will have to use/read that code :-P)
14:17  pythonirc1011: smw: It seems -- the default __hash__ method returns the id of the objects? ! ?
14:17  bahamas: zmotok: does the file have any star imports, namely from foo import *?
14:18  zmotok: Habbie: of course, but it's used everywhere in that code, and I'm not finding its definition in the imported libraries
14:18  Alberth: pythonirc101  it does, unfortunately
14:18  zmotok: libraries/modules
14:18  smw: pythonirc1011, that does make sense
14:18  jorrit: zmotok, ok so what is the problem then? Clearly it is not defined and both the code and python agree on that.
14:18  jorrit: zmotok, so all is working as it should.
14:18  pythonirc1011: so hash () is just a awrapper that you can modify, if you want to...otherwise its just the id all the way :)
14:18  zmotok: jorrit: in the stable version it doesn't get defined also, but it works :)
14:18  jorrit: zmotok, then you should look at that code.
14:19  bob2: pythonirc1011: id() = address of object in cpython
14:19  jorrit: zmotok, if it isn't defined it can't work.
14:19  bob2: pythonirc1011: so is unique within a process
14:19  smw: pythonirc1011, bob2, does that mean that most classes can't be put in a set?
14:19  CatKiller: brb
14:19  kerio: smw: well, Hashable is defined as "has __eq__ and __hash__"
14:19  zmotok: jorrit: logical isn't it? unfortunately it Must be defined someplace, and I can't find out where, so back to my original question, how can I backtrace a statement in python?
14:19  Alberth: zmotok: if you never use code that calls a non-existing function, all is fine
14:19  kerio: define the first, define the second and make the class immutable
14:20  bob2: smw: the default __hash__ and __eq__ fine for putting things in sets, so you have to actively make your classes not work in sets
14:20  kerio: and presto! sets everywhere
14:20  smw: bob2, ok, how does it work?
14:20  zmotok: Alberth: it's used in a lot of places, I believe it's some kind of exit function
14:20  Alberth: zmotok: you get a backtrace with the NameError, don't you?
14:21  bob2: kerio: is there a Hashable abc? ;p
14:21  bob2: smw: hm?
14:21  smw: bob2, if you have two identical objects with different ids, wouldn't that make it not work?
14:21  kerio: bob2: yup
14:21  pythonirc1011: I still cant explain this >>> set([x,y,z]) --> set(['100', 10, 'vz']) [It's neither id() nor hash()]
14:21  pythonirc1011: x=10, y = vz, z = '100'
14:22  Phazorx: bah... TypeError: Can't convert 'bytes' object to str implicitly
14:22  kerio: although it only requires __hash__
14:22  bob2: smw: well, I mean, the set won't consider them to be identical
14:22  bob2: smw: so both will go in
14:22  Phazorx: i', prettty sure it was string not bytes
14:22  Alberth: zmotok: it is definitely not a standard function in the library, so it is an application function. Ask the author, search the repository, or a malinglist for that software, the sf bug tracker, or whatever other source you can find
14:22  jorrit: pythonirc1011, well in that case they are not identicial.
14:22  bob2: smw: if you want to make that not happen, you need to make __hash__ and __eq__ do something fancier
14:22  smw: bob2, that is the problem. It becomes a multiset...
14:22  zmotok: Alberth: http://inelastica.svn.sourceforge.net/viewvc/inelastica/TestCalculations/TestF90code.py?revision=101&view=markup
14:22  bob2: Phazorx: welcome to python3
14:22  smw: bob2, is that a time with monkeypatching is allowed? lol
14:23  smw: when*
14:23  Alberth: pythonirc1011: sets have no order
14:23  pythonirc1011: seems like its using __hash__ -- sets that is
14:23  kerio: sets use the equivalent of the builtin hash()
14:23  Phazorx: bob2: nah... i mean it was a string on line before
14:23  bob2: smw: hm, I don't get quite what you mean - maybe it's better to describe it as two things aren't "two identical objects" unless __hash__ and __eq__ agree?
14:24  Alberth: pythonirc1011 of course they do, and also __eq__
14:24  pythonirc1011: and in my case the hash() is being used in decreasing order on sets
14:24  zmotok: Alberth: yes it's nothing standard, I've been looking into that, and in its imports - Inelastica and Numpy as you can see, but kuk doesn't get defined anywhere, and the old (Inelastica 1.1) code is exactly the same at those TestCalculations files and still, it works
14:24  pythonirc1011: Explains the order--> set(['vz',10,'100',100]) --> (['100', 'vz', 100, 10])
14:24  bob2: I think pythonirc1011 is trying to understand the order of the repr for sets
14:24  pythonirc1011: yes indeed
14:24  bob2: when the answer is probably "it's an accident of the implementation"
14:24  pythonirc1011: bob2: absolutely...its the CPython 2.7 on win 7
14:25  seen_: zmotok: it seems the author of inelastica uses `kuk` as a method of flow control (instead of explicit `raise SomeException(message)`)
14:25  pythonirc1011: does a dict use hash() as well?
14:25  bob2: http://svn.python.org/view/python/trunk/Objects/setobject.c?revision=81029&view=markup
14:25  lrh9: kerio: Thank you! :)
14:25  lrh9: http://paste.pound-python.org/show/1718/
14:25  Alberth: pythonirc1011:  yes, dicts use hash too
14:26  bob2: set_next is the thing used to iterate over it
14:26  olaf: hello, does python have a notion of local scope variables, like local XY in bash or { int xy; } in C?
14:26  zmotok: seen_: argh.. that implies there's another problem with the code, and the SVN version takes a branch where it gets to the kuk, whereas the 1.1 stable one doesn't
14:26  Phazorx: bob2: http://dpaste.com/329203/
14:26  Phazorx: codecs output bytes now ?
14:27  pythonirc1011: bob2: thanks. From the code i dont see how its sorting in the decreasing order of hash in repr() yet...
14:27  bob2: olaf: yes, that's the default
14:27  Phazorx: a utf8 encoded bytestream to be exact?
14:27  Alberth: olaf: functions/methods/classes(?) have their own scope, but otherwise, no
14:27  olaf: I just want to avoid overwrite global variables by accident if I write if state == None: x = "abc" where x could be potentially a global var
14:27  bob2: Phazorx: msg is a bytestring
14:27  bob2: olaf: you won't
14:27  Alberth: bob2: in C, you can do { int x; ... { int x; ... } }
14:28  Phazorx: bob2: is it?
14:28  Phazorx: in that case it would error on line 2 where i try to appaend a str to it
14:28  bob2: Phazorx: why?
14:28  zmotok: seen_: ok thanks.. this must be it, kuk is just for exit clauses..
14:28  bob2: Phazorx: it is all bytestrings in the snippet
14:29  Phazorx: i dont think i really get it now
14:29  bob2: Phazorx: .encode() returns bytestrings too
14:29  Phazorx: it used to be mixed butes and chars
14:29  Phazorx: oh.. .really?
14:29  olaf: Alberth: so if I'm in a def foo_fn() I could write the above and it would not mess with a 'x' outside that foo_fn?
14:29  Phazorx: so how do i get everything in realm of strings
14:29  bob2: Phazorx: that's the point of it
14:29  Phazorx: if even encoding gives me bytes?
14:30  bob2: Phazorx: http://dpaste.com/329213/
14:30  bob2: Phazorx: I don't know what your last line means
14:30  bob2: Phazorx: encoded text = bytes
14:30  Alberth: olaf: unless you write 'global x' first, an assignment to x creates a local variable x.  A better idea is however not to have global variables at all :)
14:32  olaf: Alberth: ok, I dont have a 'global x'. would a 'globel x' potentially also come from import Xyz? I assume yes.
14:32  caution: is there a convention for function parameter order e.g. parameter that's the main focus of the function first?
14:33  Alberth: olaf: 'import xyz' creates a global module name 'xyz', and nothing more. Anything inside the module must be accessed with xyz.name.
14:33  Phazorx: bob2: write() ? i ithnk it is from codecs
14:33  olaf: Alberth: thanks.
14:34  Alberth: olaf: from xyz import *   however dumps everything from xyz into your current scope, a recipe for great disasters
14:34  bob2: Phazorx: well you don't need codecs at all
14:34  bob2: Phazorx: http://dpaste.com/329225/
14:35  Phazorx: bob2: if strings are utf8 probably not
14:35  bob2: Phazorx: ???
14:35  bob2: Phazorx: py3k's open() takes an encoding arg
14:35  Phazorx: i mean if everything is utf-8 strings to start with i dont need to convert it explicitly when i wrote data to file
14:36  bob2: yes
14:36  bob2: I don't know how to open a bytes file in py3k though
14:36  bob2: :)
14:36  Phazorx: ouch
14:38  Phazorx: i tihnk it does not like open as is
14:38  olaf: Alberth: It did what I wrote, and its close to what I need. thanks for your time.
14:38  Phazorx: is it sys.open or some other one?
14:38  Phazorx: i get TypeError: an integer is required on last tile
14:38  Alberth: 'tile' ?
14:38  Phazorx: line
14:39 * Phazorx goes for coffein shot
14:39  imexil: Hi, I'm currently looking at including pyhon code into a LaTeX document. I found that up to 2.5 there existed a "texinput" dir under doc/ but not any longer. Is there a improved version of those style files or was LaTeX "support" simply dropped?
14:40  bob2: Phazorx: did you do 'from os import *'
14:40  Alberth: oh, sys.open()  yes it needs a integer parameter at the end. It is the C library open() call, and most likely not what you want to use
14:40  Phazorx: bob only popen and sys from that
14:41  Phazorx: i take it i need sometihng isntead of codecs which is better than sys.open
14:41  bob2: what
14:41  bob2: the builtin open
14:41  seen_: Phazorx: if you'd like to get bytes use builtin open(fn, 'rb')
14:41  Phazorx: seen_: i might later so thanbks
14:41  Alberth: imexil: the docs are now generated from rest doc strings.  for including python code in a report, would \begin{verbatim} .... \end{verbatim} not work?
14:42  Phazorx: bob2: it wasnt an intereger somewhere as it is in your last dpaste
14:42  Phazorx: *it wants
14:42 * bob2 looks up the docs 
14:42  imexil: Alberth: I like to have it execute some function, e.g., to create a nice plot
14:42  NekoDeko: If you installed your own bitlbee, is there a way to make it skip the identify part?
14:43  Phazorx: bob2: i gues it would make sense first to figure out which open exactly it is using :)
14:43  bob2: NekoDeko: this is more a 'learning to program in python' kinda channel
14:43  lrh9: Out of curiosity, is there a free function one can call that returns the equivalent of x.__sizeof__()?
14:43  bob2: Phazorx: they put the encoding arg after the buffer arg
14:43  bob2: what does __sizeof__ do?
14:43  NekoDeko: M... Yes, I started with that but apparently irclib is unpopular.
14:43  NekoDeko: So tried a different solution.
14:43  bob2: Phazorx: open(filename, 'a', encoding='utf-8')
14:44  Phazorx: bob2: is that new for Py3 or been like that forever?
14:44  Alberth: imexil: oh, use python code to generate pieces of document. I use 'make' to first run the various programs to generate the various pieces, then run LaTeX to assemble them in a document. You could also use a shell script (or a Python program :) ).
14:44  bob2: Phazorx: new in py3k because open in python 3 is the same as codecs.open in python 2
14:45  vr6: hi all; anyone up for some code critiquing?  Pasted two functions/methods here: http://paste.pound-python.org/show/1719/  looking for any non-pythonic anomolies and general good python coding practices!
14:45  Phazorx: oh...
14:45  lrh9: bob2: help() says it returns the size of an object in bytes.
14:45  james78: I've been having trouble with the Python imaging library today. I've been getting mostly errors like "No module named PIL", and "The _imagingft C module is not installed". I fixed both problems, (no module named PIL required a symbolic link in site-packages, and the other one needed to be compiled with libfreetype2 and libjpeg). Now that it's working fine, there's this other really weird error I keep getting now. "IOError: unknown
14:45  james78: file format". The error only occurrs once in awhile, but I'd like to fix it. Here's my traceback. http://pastebin.com/39bHp32h
14:45  infobob: http://paste.pound-python.org/show/1720/ (repasted for james78)
--- Log opened Tue Jan 18 14:48:26 2011
14:48 --- Users 758 nicks [0 ops, 0 halfops, 0 voices, 758 normal]
14:48  bob2: vr6: it'd be saner for the zip function to always take a list and always return a list
14:48  vr6: papna: are you telling me my code stinks and i'd be better off skiing? Say it ain't so...
14:48  papna: vr6: No, I'm telling you coding sucks and you're better of skiing.
14:49  Alberth: vr6: indenting at 3..8 is off one space. However, you better use docstrings instead
14:49  bob2: vr6: but if you want to do it the way you have, return zip5[0]
14:49  vr6: papna: phew ;)
14:49  bob2: instead of the subtraction that always == 0
14:49  vr6: note: I just added the comments in for pasting..... that isn't my intended method of commenting
14:49 --- Channel #python was synced in 94 seconds
14:50  Alberth: line 15: endDate = wkEndingDates[-1]
14:51  vr6: bob2: ok, flip-flopped on zip5[0]
14:51  Phazorx: what can i use as alternative to hmac for 3 ?
14:51  bob2: vr6: the subtraction is totally pointless and confusing imho :)
14:51  vr6: Alberth: yup, forgot about the nice [-1] indexing strategy!
14:52  vr6: bob2: line number on subtraction?
14:52  bob2: the 3rd last line
14:52  vr6: bob2: line 46?
14:52  bob2: Phazorx: 3 has the hmac module
14:53  bob2: but really, just return the listcomp result
14:53  bob2: magic iincompatible return type fiddling is annoying
14:54  Alberth: vr6: not sure whether it was already mentioned but the i=0 ... i = i + 1 at 23..28 should be a for-loop over wkEndingDates
14:55  Alberth: vr6: docstrings and comments in code are two different things imho
14:55 --- elpargo_ is now known as elpargo
14:56  vr6: Alberth: agreed diff between docstrings and comments... see above, these comments are temporarily added after I pasted functions as a quick explanation to critiquers
14:56  kerio: vr6: why do you have ambiguous return types
14:57  vr6: kerio: meaning a string or a list being returned in zip9 function?
14:57  kerio: yup
14:57  vr6: kerio: was taking a liberty and hoping it was somehow pythonic?
14:57  kerio: also functions should be words_separated_by_underscore
14:57  kerio: it's really not
14:57  kerio: Special cases aren't special enough to break the rules
14:57  vr6: kerio: so then just pick a single return type and deal with it on the catching end?
14:58  kerio: why isn't it an iterator anyway
14:58  nosklo: vr6: if you always return the same type, it will be easier to deal with on the other end
14:58  Phazorx: bob2: i guess i'm a bit over my head here: http://dpaste.com/329276/
14:58  vr6: kerio: haven't explored iterators in depth .... yet :/
14:59  pythonirc1011: is this how dicitionaries lookup data -- > http://paste.pocoo.org/show/322691/ ?
14:59  nosklo: Phazorx: python2
14:59  Phazorx: nosklo: 3.1
14:59  nosklo: Phazorx: you asked for alternative
15:00  nosklo: Phazorx: use python2 instead
15:00  Phazorx: that was a while ago :)
15:00  jorrit: pythonirc1011, not completely.
15:00  Phazorx: and i want to learn ways of the 3 at the moment
15:00  jorrit: pythonirc1011, remember, hash() returns a 32-bit (usually) integer. That's 4 billion values.
15:00  nosklo: Phazorx: why?
15:00  kerio: also i thought timedelta had a weeks= parameter too
15:00  bob2: Phazorx: yeah, you need to make it work with no warnings on python2.6
15:00  jorrit: pythonirc1011, you don't want d.data to contain 4 billion items.
15:00  Phazorx: but i have issues with understanding of sources of issues
15:00  bob2: Phazorx: ie fix the deprecation warning about sha1
15:00  kerio: yup, it does
15:00  bob2: sha
15:00  nosklo: Phazorx: python2 rocks, it works!
15:00  vr6: Alberth not seeing how to deal with  "but the i=0 ... i = i + 1 at 23..28 should be a for-loop over wkEndingDates" as it is working and shouldn't overrun...
15:01  pythonirc1011: So its missing a "% table size"?
15:01  jorrit: pythonirc1011, so I think that typically the result of hash is applied to a modulo operator as well to map the hash to an index in the hash table.
15:01  jorrit: pythonirc1011, yes, something like that.
15:01  bob2: vr6: because manually incrementing indexes is annoying and unpythonic
15:01  Phazorx: bob2: it will make no difference in this case, import sha is a part of try catch structure which is compatibility for 2.6 2.6 etc
15:01  pythonirc1011: jorrit: can you fix that code?
15:01  nosklo: ugh
15:01  jorrit: pythonirc1011, yes and so can you. Just add the % table_size :-)
15:02  nosklo: don't tell me you're trying to write code that runs on both python 2 and 3
15:02  pythonirc1011: anything else?
15:02  nosklo: that would produce ugly code
15:02  jorrit: pythonirc1011, not that I can see.
15:02  Phazorx: it trys hmac and if it works it goes on happy but if it faisl it goes for sha
15:02  Phazorx: since it failed with TypeError: expected bytes, but got 'str' in hmac it got to import sha and hence the bottom part
15:02  bob2: vr6: http://paste.pocoo.org/show/322693/
15:02  Phazorx: but i tihnk root of the issue is in hmac error
15:03  pythonirc1011: thanks jorrit
15:03  bob2: Phazorx: bleh
15:03  Phazorx: which is a bit strange since you mentioned it is ported
15:03  bob2: vr6: bleh http://paste.pocoo.org/show/322694/
15:03  Alberth: vr6: euhm, I was thinking line23: for wkEndingDate in wkEndingDates:   lines 24..27 indent one more, line 28 remove, line 25  replace wkEndingDates[i] by wkEndingDate
15:03  bob2: Phazorx: what?
15:04  vr6: bob2: oooooh, pretty.  I was wondering how to get around manual indexing!  thanks for the example!
15:05  Phazorx: bob2: http://dpaste.com/329296/
15:05  bob2: Phazorx: so you ran 2to3 over tweepy or what
15:05  Phazorx: yup
15:06  bob2: I think I don't believe that's the code you're running
15:06  bob2: and or your unknown script is broken
15:06  Phazorx: this isnt mine
15:06  Phazorx: i mean tweepy or hmac arent
15:07  Phazorx: and again - the errors seems to be relevant to internals of hmac in py31
15:07  Phazorx: actually
15:07  Phazorx: i might be passing bad data
15:07  vr6: Alberth: ah, got it.  did you see bob2's example....sounds like a good alternative and gets rid of second for loop: http://paste.pocoo.org/show/322694/
15:07  Phazorx: and it is not validated anywhere
15:08  Phazorx: so that is a posibility as well
15:08  Phazorx: oauth tokens i mean
15:08  kerio: lrh9: http://paste.pound-python.org/show/1721/
15:08  kerio: er
15:08  Phazorx: however they are defined just as str='text'
15:08  kerio: vr6: http://paste.pound-python.org/show/1721/
15:08  kerio: lrh9: sorry about that :<
15:08  bob2: no, our code is buggy, not hmac
15:08  bob2: yours
15:08  bob2: i ain't see it, so i ain't taking no blame
15:08  lrh9: Hahahaha.
15:09  kerio: you both have numbers at the end!
15:09  lrh9: That's OK.
15:09  lrh9: Say my name!
15:09  bob2: Phazorx: again
15:09  bob2: Phazorx: that's a unicode string
15:09  bob2: Phazorx: hmac needs bytes
15:09  kerio: lrh9: lvh!
15:09  kerio: awww :(
15:10  Phazorx: bob2: and with 2.X it knew no difference and was autoconverted i preseum - so tweepy has no chacks/validations for that ?
15:10  bob2: not really, no idea
15:10  bob2: it's basically just your code being incorrect
15:10  vr6: kerio: for some reason paste.pound-python does not come up for me, it hasn't for a while. just get a blank screen, no error message.  could you paste some place else please?
15:10  bob2: and now you got the relevant exception and can fix it :)
15:10  crazygir: hiya! I'm trying to make the leap from silly, single-system python webapp deployments to properly isolated and stable virtualenv's for django. There are quite a few ways to do this, which I'm getting a little tripped up on. Would you folks have some suggestions?
15:10  kerio: vr6: delete your paste.pound-python.org cookie
15:10  crazygir: My primary goals are to have a fully contained SVN checkout that includes everything needed to build the development environment (not worrying about nginx/etc). I would like my devs to not need to worry about net connections either, so I would like to package the module/pkg installers with this
15:12  wallunit: Is there a Python library for XMPP with pubsub extensions?
15:15  papna: wallunit: Wokkel does I think.
15:19  vr6: kerio: nice!  thanks for sharing as its great to see how more experience and familiarty with python lends to creative and cleaner code.
15:19  cmathieu: Hi, I get "NameError: global name get_python_version is not defined" when building a RPM of my application on Centos 5.5. Any documentation how to fix this issue ?
15:20 --- locojay_ is now known as locojay
15:20 --- AaronMT_ is now known as AaronMT
15:20 --- Xerion_ is now known as Xerion
15:21 --- zedxz_ is now known as zedxz
15:25  vr6: bob2: your pasted example wasn that a type of enumeration you mentioned earlier? or did you mean to literally use the enumerate()?
15:26  vr6: Looks like you mighta been booted (?!?!) when I posted this....  kerio: nice!  thanks for sharing as its great to see how more experience and familiarty with python lends to creative and cleaner code.
15:26  lvh: vr6: freenode is experiencing some hiccups
15:27  christianp: hi friends
15:28  svaksha: lvh: #postgres saw a similar part/join attack
15:28  kerio: is it ok to sum two dicts?
15:28  Alberth: sum?     not d.update(d2) ?
15:29  lvh: kerio: what would that mean
15:29  lvh: svaksha: Pretty much every major channel -- it's server-related, not channel-related
15:32  efphe: hello, I have a question about gettext: in particular, having a gettext.GNUTranslations, how can I know if a particular string is present on the .mo file(s)?
15:32  kerio: aw, it doesn't work :(
15:32  dvheumen: hi everyone. For the last half year I've become very interested in python. I'm gradually (as time allows) learning the language and all the possibilities that open up :) I know there are a lot of resources on python, but it feels like a lot of the python-related sites I know are kind of geared towards a specific topic. Is there sort of a news site for python-related topics that can keep me up to date with the latest developments?
15:33  kerio: lvh: why doesn't it work?
15:33  kerio: lvh: d = d1.copy(); d.update(d2)
15:34  lvh: kerio: Doesn't it?
15:34  Alberth: kerio: we are still wondering what summing two dicts means
15:34  lvh: kerio: What part of it doesn't work
15:34  kerio: nope - TypeError: unsupported operand type(s) for +: 'dict' and 'dict'
15:34  lvh: kerio: Yes, I know how to do it and that's how you do it
15:34  lvh: copy and update
15:34  kerio: :( why?
15:34  lvh: it's okay, we'll have frozendicts eventually
15:35  kerio: hmm, do you guys use single quotes or double quotes?
15:36  lvh: kerio: Doubles.
15:36  lvh: kerio: Mostly because ' happens more inside a string than ".
15:36  lrh9: When I only need one type, single. When I need both it depends on the context.
15:36  Alberth: dvheumen: I guess there are mailing lists for development in their various specialized topics, I don't think you'd want them all, it would be too much
15:37  Wild_Cat: same here
15:37  ivan`: dvheumen: reddit.com/r/python
15:37  kerio: why does python use single quotes for the repr() of strings though :(
15:37  Wild_Cat: and for the exact same reason as lvh. Not to mention that on a french leyboard, double quotes aren't any harder to type than singles
15:37  grirgz: bye
15:37  Alberth: kerio: depends on how shift-y I am that day
15:38  Wild_Cat: (double quotes are unshifted 3, single quotes are unshifted 4)
15:38  Alberth: kerio: it used " for repr too,  try repr("'")
15:38  Alberth: *uses
15:38  lvh: Wild_Cat: Uggghhhhh
15:38  kerio: Alberth: i did that, yeah
15:38  lvh: Wild_Cat: They make us type on that thing here too
15:38  dvheumen: Alberth: I think it would probably take like 12 hours a day reading all that :)
15:38  kerio: i have double quotes on shift-2
15:39  NekoDeko: http://paste.pound-python.org/show/1723/ Can you find something wrong with this?
15:39  lvh: kerio: In code, { and [ are unshifted and next to each other for me
15:39  Alberth: dvheumen: I would expect so. Normally you pick one or two topics you really care about, and just work in there
15:39  james78: I've been having trouble with the Python imaging library today. I've been getting mostly errors like "No module named PIL", and "The _imagingft C module is not installed". I fixed both problems, (no module named PIL required a symbolic link in site-packages, and the other one needed to be compiled with libfreetype2 and libjpeg). Now that it's working fine, there's this other really weird error I keep getting now. "IOError: unknown
15:39  james78: file format". The error only occurrs once in awhile, but I'd like to fix it. Here's my traceback. http://paste.pound-python.org/show/1720/
15:39  lvh: kerio: Since I pretty much always want them matched anyway
15:40  Wild_Cat: lvh: meh, it's mostly all I use. It's easier to code on an azerty than it is to write French on a qwerty
15:40  kerio: i have [] as alt+è and alt++, {} are the shifted version of []
15:40  lvh: Wild_Cat: colemak <3
15:40  Wild_Cat: colemak?
15:40  Alberth: dvheumen: and of course, interests shift over time :)
15:40  lvh: Wild_Cat: http://colemak.com/
15:41  Alberth: james78: random guess, the file you feed it is not a valid graphics file
15:42  Wild_Cat: lvh: it has the exact same problem as qwerty -- accented letters are dead keys only.
15:42  james78: Alberth: It works fine 80% of the other time.
15:42  james78: :/
15:42  bob2: vr6: either
15:42  Wild_Cat: French requires éèàù to be bound to their own keys if you want any kind of efficiency.
15:42  bob2: I don't really know what your code is doing anyway
15:43  Wild_Cat: (that said, it's moronic that µ and § aren't AltGr, if not charmap-only)
15:43  dvheumen: Alberth: well, the reason I ask is the following. I'm familiar with a few languages, like C, C++ and Java, and PHP in the "world of the web" so to speak. But I absolutely love the way Python is set up. ... No nonsense about making a language "completely object oriented" and such. And I know (or at least I read) that python has lots of possibilities in different areas. So I want to keep up to date on the developments to get a grasp of the possibil
15:44  dvheumen: ities :)
15:44  Alberth: james78: is it reproducable?    Note that the Internet has several definitions of 'valid graphics format'
15:44  james78: Alberth: Actually, the really weird thing is that I needed libfreetype2 and libjpeg. I've always compiled it without and it's always worked fine. The image is png, yet it won't work without the others. On my home development environment it still works normal like it should. I deleted the virtualenv a few times and remade it too.
15:44  Wild_Cat: dvheumen: actually, Python *is* completely object-oriented -- it's more OO than at the very least Java and C++
15:45  jorrit: Wild_Cat, in what sense?
15:45  james78: Alberth: I can reproduce it by reloading the page until the error comes, that's about it.
15:45  Wild_Cat: jorrit: in the sense that *everything* is an object.
15:45  Alberth: dvheumen: you should ask yourself what you want to spend your time on. Reading what others do all day, or doing something yourself.
15:46  jorrit: Wild_Cat, ok, in that sense you are right. But in other ways java is more OO then python though. For example, in Java you *must* use objects. You can't have standalone functions and code.
15:46  Wild_Cat: jorrit: as opposed to C++ and Java where damn near everything that people use all the time (numbers, booleans, even strings in C++) aren't objects.
15:46  jorrit: Wild_Cat, and luckily in more recent versions of java there is autoboxing to make sure that non-object ints get casted to object Integer when appropriate and the other way around. But you are right about that aspect though.
15:46  Wild_Cat: jorrit: oh, and in Java, classes and methods aren't first-class objects, which is laughable at best.
15:46  Alberth: james78: never installed PIL, and barely used it, so install details mean little to me.  However, 'reproducable' as in does it fail with the same image each time?
15:47  dvheumen: Alberth: currently, mostly reading up, because a lot of time goes to my education and with the little bit I have left, I want to think of a new idea to implement, but I haven't had a good idea for some time. (Blaming the lack of time for that ...)
15:47  dvheumen: Alberth: but I get your point
15:47  Alberth: james78: what they consider valid files, and what you consider valid files are not the same
15:48  james78: Alberth: Not each time. Just occasionally. Like I said, the image shows up 80% of the time, and fails only sometimes.
15:48  Alberth: dvheumen: just join an open source project that you like would also be an option
15:48  james78: I have the EXACT same code on my development machine, and it isn't having this problem. The only thing I can see as the common denominator is PIL.
15:48  james78: I'm testing with a newly made environment right now.
15:48  dvheumen: Wild_Cat: I think it also depends on the way you look at it. What I like about Python is that you can just put 3 lines of code in a file and run the file and it runs. It doesn't force you to create a class with a static main function that is the initial point of execution, etc., etc.
15:49  Alberth: james78: it could also be some race condition, where the web is sometimes not fast enough, or it may serve different files (because you get it from another machine or so?)
15:49  dvheumen: Alberth: yeah, I'm kind of doing that, but that got cut of by one of my school assignments. Was (and am still very much) interested in Bazaar. And I have done a little bit of work for that.
15:50  dvheumen: Alberth: but thanks for the suggestion, I appreciate it, because it is more or less what I would like to do :)
15:50  Wild_Cat: dvheumen: requiring dozens of lines of boilerplate code has nothing to do with the OO-ness of the language. I mean, look at COBOL :p
15:50  james78: Alberth: It's generated locally, but you may be right. I think it happens when I reload the page enough times quickly.
15:51  james78: Ya.
15:51  james78: I get the error on here too.
15:51  Alberth: james78: in that case, the remote generator may be buggy too
15:51  james78: Alberth: Ya, somethings bugging up.
15:52  james78: Alberth: I'm going to test with the last release.
15:53  dvheumen: Wild_Cat: maybe not with OO directly, you're right :P ... I just really like the set-up of how python does things. I think it's a good way of working without the language getting *in the way* of what you want to accomplish. Really love that you can just pass on functions and methods and such
15:53  Alberth: james78: fine with me :)   no need to tell me every detail :)
15:53  Wild_Cat: dvheumen: on that particular point, I fully agree. Python rarely gets in your way, and that's awesome.
15:53  kerio: dvheumen: python sucks, but everything else sucks way more
15:54  dvheumen: kerio: hehe, yeah you can put it like that :)
15:54  utdmr: is there something wrong with that connect? http://paste.kde.org/2751/ . because the self.click function is never triggering.
15:54  CatKiller: Hi again, I've got another quick question, this time more concise than the previous one ;)
15:55  kerio: python has a consistent object model, very clear and simple syntax, good C bindings and overall good enough performance
15:55  dvheumen: k guys, thanks for the info! I have to get back to reading papers :|
15:55  CatKiller: Let's imagine 3 classes in a chain: C is a subclass of B, which is a subclass of A
15:55  CatKiller: They each have a dictionary called "test" that contains some values.
15:56  CatKiller: How can I, from a C instance, concatenate the dictionaries of the superclass A, and B, and C?
15:56  CatKiller: the "test" dictionaries I mean
15:56  jorrit: CatKiller, they will each have the same 'test' dictionary if you give them the same name.
15:56  CatKiller: Will it be the same?
15:56  jorrit: CatKiller, 'test' is an attribute of the instance of 'C' and there can be only one attribute named 'test' for that instance.
15:56  jorrit: CatKiller, it doesn't matter if it 'comes from' C, A, or B.
15:57  CatKiller: Yes, but I'd like to fetch the values contained in A and B
15:57  jorrit: CatKiller, they are already in self.test
15:57  CatKiller: ahhhhh
15:57  CatKiller: great stuff!
15:57  jorrit: CatKiller, there is only one self.test. It is the same for A, B, and C.
15:57  CatKiller: Thanks amillion I will try right now
15:57  CatKiller: I thought there was three instances of self.test, but that python was fetching the first one it found
15:59  marcinkuzminski: Hi, anybody played with psycopg2 async queries, I'm interested if it's possible to fetch results while query is running ? the docs are little unclear for me.
16:00  SpComb: they advertise that feature now?
16:01  lvh: SpComb: Oracle started doing it, so yeah ;-)
16:01  kerio: hmm, why doesn't itertools.groupby work?
16:01  kerio: :<
16:01  seen_: kerio: sort input
16:02  lvh: It senses what you are
16:02  kerio: no, really, it doesn't work D:
16:03 --- babilen_ is now known as babilen
16:03 --- chrischambers_ is now known as chrischambers
16:03  SpComb: marcinkuzminski: if you want insights, you could also look at the underlying libpq docs on the async interface
16:03  rioch: var=1; def foo(): var=2; <-- how do I get foo to change the value of var rather than create a local one?
16:03  SpComb: since that's what psycopg uses
16:04  jorrit: rioch, don't use global variables.
16:04  jorrit: rioch, it is bad practice.
16:04  SpComb: jorrit: that might also be a closure
16:04  jorrit: SpComb, might but but doubt it.
16:04  marcinkuzminski: SpComb, ok thanks i'll take a look it's always some more info
16:05  SpComb: marcinkuzminski: http://www.postgresql.org/docs/8.1/static/libpq-async.html
16:05  SpComb: marcinkuzminski: although it seems the psycopg2 API isn't really the same
16:05  kerio: i'd make you guys see that too, but it's stuff that takes 100+ MBs of ram
16:06  marcinkuzminski: SpComb, yes, i think it's a problem since i know libpq can do, but psycopg2 might not...
16:07  lvh: rioch: What version of Python?
16:07  Ddorda: ‎hey, i can't find in the documentation if there's such thing as "split the first", like if i have "102002514" and i want to split it to "10" and "002514"
16:07  jorrit: Ddorda, look for 'slices'
16:08  jorrit: Ddorda, s[x:y] notation basically
16:08  Skola: To count the greatest subsequent occurence of some regular expression, what do I use?
16:08  smw: Ddorda, "102002514"[:2]
16:08  Skola: To find*
16:08  rioch: lvh: 2.6
16:09  Ddorda: ‎smw: what you said split it by 3rd char, no?
16:09  dangerouslyfluff: I had a nightmare about uuid.getnode()
16:09  smw: Ddorda, try it
16:09  jorrit: Ddorda, no
16:09  bartek: Hi there. Given three lists of values, I want to check if 3 accompanying values are in each of their respective lists. Now this is fairly simple to write with 3 lines of code, but is there a more Pythonic way of doing this? Looking through itertools to start..
16:10  jorrit: Ddorda, try it out in the interactive interpreter.
16:10  Ddorda: ‎oh, so i understood it all wrong
16:10  Ddorda: ‎forgive me :P
16:10  dangerouslyfluff: The docs said it launches a seperate process, so I dreamt that it opened so many it froze my computer
16:10  james78: Alberth: I think I found the cause.
16:11  dangerouslyfluff: bartek: create sets from each list if you're doing this more than once
16:11  bartek: dangerouslyfluff: Why a set?
16:11  dangerouslyfluff: bartek: `n in myset` is extremly efficent
16:12  dangerouslyfluff: O(1) to be precise
16:12  Ddorda: ‎seems like it doesn';t work with ints
16:12  jorrit: Ddorda, no you have to convert to string first: str(i)
16:12  bartek: dangerouslyfluff: Unfortunately I can't combine the three lists, they all need to be computed separately.
16:12  dangerouslyfluff: bartek: so make three sets
16:13  Ddorda: ‎maybe i should have been more specific. something like "hello dear hello friend" and i wish to get "dear hello friend"
16:13  bartek: dangerouslyfluff: There is not a more pythonic way? What if I wanted to do this with 20 sets of data?
16:13  caution: why does python have such a low recursion limit?
16:13  kerio: bartek: a for loop?
16:13  dangerouslyfluff: bartek: you can use a for loop or map()
16:13  bartek: perhaps I am overcomplicaitng it
16:13  kerio: all({item1, item2, item3} <= set(l) for l in my_lists)
16:13  NekoDeko: I managed to make the bot send a message to the channel in a separate script.
16:13  jorrit: caution, because recursion is rarely the best solution.
16:13  NekoDeko: The separate script is the upper code http://paste.pound-python.org/show/1727/
16:14  smw: Ddorda, what do you want to do?
16:14  NekoDeko: But when I try to add the code (below) to the main bot, I can not get it to work
16:14  dangerouslyfluff: if you want it done lazily, itertools.imap(set, lists)
16:14  kerio: dangerouslyfluff: what? no
16:14  Ddorda: ‎smw: split a str by text
16:14  NekoDeko: Wait, I think I used the wrong code at top.
16:14  james78: Alberth: It was a broken font.
16:14  kerio: if you want 3 items to be in each one of a bunch of lists, all({i1, i2, i3} <= set(l) for l in (l1, l2, ..., ln))
16:14  smw: Ddorda,  split a string by whitespace?
16:15  james78: Alberth: A font file I had was no good.
16:15  Ddorda: ‎smw: no, but by another string
16:15  Ddorda: ‎and only the first ine
16:15  Ddorda: ‎one*
16:15  dangerouslyfluff: bartek: or you can try all(x in y for x,y in zip(items, lists))
16:15  kerio: dangerouslyfluff: doesn't work
16:15  sherl0ck: im looking to tell the boolean on my object - bool(obj()) - ive tired __eq__, __ne___, any idea?
16:16  dangerouslyfluff: again, itertools.izip will work
16:16  kerio: nope
16:16  smw: Ddorda, can you give me an example?
16:16  kerio: not like that
16:16  dangerouslyfluff: keiro: why?
16:16  kerio: read again what you wrote
16:16  bartek: dangerouslyfluff: Hmm that seems reasonable. Will give it a shot, thanks
16:16  CatKiller: Can I reiterate my previous questions with private attributes?
16:16  dangerouslyfluff: it's simple iterator comprehension kiero
16:16  kerio: dangerouslyfluff: and it doesn't work
16:16  Ddorda: ‎smw: "Ddorda: hey Ddorda, whatsup?" > to split the first "Ddorda: " and to get "hey Ddorda, whatsup?"
16:16  dangerouslyfluff: kerio: why? in 2.x?
16:17  kerio: because you're zipping one of the items to each one of the lists
16:17  kerio: and checking for that item only
16:17  dangerouslyfluff: kerio: that's what he asked for
16:17  kerio: ooh, i see
16:17  dangerouslyfluff: "each item is in its respective list", notice the singular
16:18  dangerouslyfluff: antway :-)
16:18  smw: Ddorda, ah, I don't know if there is an easy function for that.
16:18  kerio: converting to a set won't help
16:18  dangerouslyfluff: kerio: if he's doing it repeatedly, it will help on a big-O perspective
16:18  NekoDeko: http://paste.pound-python.org/show/1728/   Fixed now I suppose - The upper code (above ###) can be run alone in its own script. The code works as I would like it to, and I am now trying to add it to an already existing code, but have no idea how to add it to the existing code and still have it work. The existing code already connects and joins the server and channel in question, so those parts are removed from the lower code. Should I pos
16:18  kerio: dangerouslyfluff: contains for sets is O(1), for lists it's O(n)
16:18  kerio: but converting a list to a set is O(n)
16:19  sherl0ck: ah found it bool(obj())  - obj.__nonzero__(self)
16:19  dangerouslyfluff: kerio: so you do the O(n) operation only once and you do the O(1) operation as many times as you like
16:19  kerio: dangerouslyfluff: of course, but memory costs too :)
16:20  dangerouslyfluff: kerio: yes, but there is at heart the von-neumaan bottleneck. Each query from the CPU to RAM is more expensive than the hash computation
16:20  smw: Ddorda, str.partition
16:21  kerio: def __hash__(self): time.sleep(20); return whatevrs
16:21  Ddorda: ‎smw: i'll lokk for it. many thanks!
16:21  sid3k: hi all. which variable name you would use for a datetime value storing the time of last action in a pool
16:21  blueadept: why is #python +r ?
16:21  sid3k: ?
16:21  kerio: blueadept: why not?
16:21  blueadept: my client joins before i identify
16:22  dangerouslyfluff: kerio: if someone did that, they would deserve to be whacked with a large trout
16:22  nosklo: blueadept: which client are you using?
16:22  smw: sid3k, datetime
16:22  blueadept: so i can't autojoin the channel on connect
16:22  blueadept: x-chat aqua
16:22  ivazquez|laptop: Put your NickServ password as the server password.
16:22  kerio: blueadept: sounds like a crappy client
16:22  nosklo: blueadept: you can use set irc_auto_join on your startup command for the server
16:22  blueadept: kerio: this is i think The Only issue ive ever had
16:22  nosklo: blueadept: putting the password as server password instead of nickserv password also helps
16:22  kerio: "nickservusername:nickservpassword" as your server password
16:22  blueadept: nosklo: i'll try that
16:23  sid3k: smw: it's not meaningful. how can someone understand it's the datetime of the last action in a pool?
16:23  dangerouslyfluff: kerio: no, that won't work. Good clients can auto-auth however
16:23  kerio: dangerouslyfluff: huh?
16:23  kerio: worksforme
16:23  nosklo: dangerouslyfluff: it works on freenode
16:23  smw: sid3k, I don't think I understand your question.
16:24  blueadept: awesome that worked
16:24  blueadept: thanks!
16:24  sid3k: smw: consider that you have a pool with some users
16:24  kerio: yay
16:24  dangerouslyfluff: the server password is a seperate mechanism used by IRCOps, NickServ runs its own show. If freenode does it differently, that sure-as-hell isn't standard
16:24 --- Cain` is now known as Cain
16:24  kerio: blueadept: consider getting a hostname cloak
16:24  sid3k: you want to store the time of last user action
16:24  blueadept: kerio: will do
16:24  nosklo: dangerouslyfluff: yeah, it is not standard
16:24  nosklo: dangerouslyfluff: but it works nicely
16:24  smw: sid3k, why not datetime?
16:24  kerio: i thought IRC worked by chance
16:25  lvh: why don't you just use SASL
16:25  nosklo: SASL is even better
16:25  dangerouslyfluff: nosklo: it's a kludge, and quite possibly a security hole
16:25  nosklo: dangerouslyfluff: what?
16:25  sid3k: smw: did you read my previous reply?
16:25  nosklo: dangerouslyfluff: it's "safer" than nickserv identify
16:25  dangerouslyfluff: nosklo: think of a kernel, with its privelage rings
16:25  lvh: dangerouslyfluff: The alternative is plaintext nickserv identify
16:25  sid3k: I'm saying, datetime is so general, it's not a good name for a variable like that
16:26  nosklo: dangerouslyfluff: kernel has nothing to do with that
16:26  lvh: dangerouslyfluff: Pray do tell me about the security hole
16:26  sid3k: it also overrides python's datetime library!
16:26  dangerouslyfluff: if you have people using the inner rings to identify with an outer level service (nickserv)...
16:26  smw: sid3k, ah, you want a variable, not an object class...
16:26  lvh: what
16:26  sid3k: yeah!
16:26  smw: sid3k, variable name*
16:26  nosklo: dangerouslyfluff: people are in the outer ring
16:26  lvh: you identify to the *server*
16:26  lvh: *it* tells nickserv, which is a serviced
16:26  sid3k: I know how to get date and time dude!
16:26  dangerouslyfluff: you can introduce bugs allowing regular users to become IRCops if you're not very careful
16:26  smw: sid3k, ok :-)
16:27  smw: sid3k, last_action_ts
16:27  lvh: dangerouslyfluff: Got a link for that?
16:27  smw: sid3k, I like to append _ts to timestamps
16:27  sid3k: hmm
16:27  Habbie: dangerouslyfluff, it's a kludge, and it's broken, but apart from 'every piece of code you write has the potential to introduce bugs', there's no security hole
16:27  dangerouslyfluff: lvh: and ideally NickServ is seperate from the server, from a security perspective
16:27  sid3k: looks good
16:27  sid3k: thanks
16:27  smw: sid3k, lastAction_ts
16:27  nosklo: dangerouslyfluff: no, that doesn't happen. Chances are that you don't understand what is going on.
16:27  lvh: dangerouslyfluff: What? Why? Nickserv has *very* special powers
16:28  dangerouslyfluff: kind of like the difference between setuid() and sudo, one is user-level, the other kernel-level
16:28  nosklo: dangerouslyfluff: you send your password to the server, and the server sends it to nickserv. Which is a service. I can't see how that would go wrong
16:28  nosklo: dangerouslyfluff: stop comparing with kernel and linux, they're not related to irc at all
16:28  lvh: the server doesn't send it to nickserv, actually
16:28  kerio: the server *is* nickserv
16:29  nosklo: I see a message from nickserv saying "thank you for sending me your password" though
16:29  nosklo: or something like that
16:29  dangerouslyfluff: nosklo: if someone compromises NickServ with some type of bug (it being out here with the users, parsing messages), it could enable access to server internals
16:29  nosklo: dangerouslyfluff: if someone compromises nickserv, then you're doomed
16:29  NekoDeko: Let us say I started "bot.py", How can I import and run "script.py" 5 seconds or so after I started "bot.py", but WITHOUT having "bot.py" not do anything for 5 seconds?
16:29  dangerouslyfluff: The server does not process messages besides a well-defined command set
16:29  nosklo: dangerouslyfluff: any means of authentication will fail
16:29 --- blueadept is now known as Guest14287
16:29  kerio: dangerouslyfluff: and... so does nickserv
16:30  kerio: because they're the same thing
16:30  caution: NekoDeko: you need to learn the basic concepts before you try things like that
16:30  dangerouslyfluff: nosklo: but if NS is a seperate service, you can cut it off at the inner level and isolate the probelem
16:30  nosklo: dangerouslyfluff: there aren't all those levels you make
16:30  lvh: dangerouslyfluff: And now external services have to be able to set +ir flags
16:30  NekoDeko: So there is no simple way to do it?
16:30  kerio: i don't think ircd-seven can work without nickserv
16:30  lvh: Obvious improvement
16:31  dangerouslyfluff: kerio: NS was developed later in IRC. Let me pull up Dia so I can show you
16:31  lvh: So far it basically boils down to "if someone finds a bug in ircd-seven, they might be able to become IRCops"
16:31  kerio: btw i'm totally lvh
16:31  dangerouslyfluff: lvh: hold on...
16:31  kerio: i swear
16:31  lvh: dangerouslyfluff: Do you have any documentation on this supposed problem?
16:31  kerio: dangerouslyfluff: who cares about IRC as a whole
16:32  dangerouslyfluff: lvh: I said let me draw a diagram
16:32  lvh: dangerouslyfluff: Not dia charts you're making yourself
16:32  kerio: nickserv in ircd-seven was probably developed togheter
16:32  lvh: dangerouslyfluff: Documentation. Peer-reviewed things.
16:32  lvh: An article "oh hey so here's how I hacked ircd-seven and became an ircop"
16:33  brian: ircd-seven is the IRC daemon, and atheme is the IRC services daemon that connects NickServ, ChanServ, etc and they work independently of each other.
16:33  cheater-: lvh: i think he wants you to review it then.
16:33  brian: ircd-seven is a fork of charybdis
16:33  brian: It was created to facilitate certain freenode-only features.
16:34  lvh: (Also, alis and memoserv. Not sure if that's all of them)
16:35  lvh: there's frigg and stuff but I don't think that's part of atheme, haven't seen it on other networks at least
16:39  NekoDeko: I do not understand why the script works alone but not when I try to run it after other scripts.
16:41 --- josemaria is now known as nodie
16:45  amstan_i: hello
16:45  dangerouslyfluff: See http://img822.imageshack.us/img822/1669/irczt.png (if I undertand IRC correctly). Each piece is modular, and client's don't interface directly with the only SPOF on the network. Each machine is a limb, and can be cut off if it is breached or is disabled by a bug
16:46  SpComb: NekoDeko: you can't smash two modules together and expect them to just work, especially if you're tring to use an event loop like irc.process_forever()
16:47  kerio: wait, what?
16:47  NekoDeko: I suppose that could prove problematic.
16:47  SpComb: NekoDeko: you need one connection, you need to do something to it, and then you need to call process_forever() exactly once, and you can't do anything after that
16:47  kerio: use twisted
16:48  SpComb: NekoDeko: after that the magic happens when you have callbacks or whatever irclib uses
16:48  NekoDeko: Why does it actually have to process forever? Is not joining once enough?
16:49  dangerouslyfluff: Ah, irclib I see
16:50  SpComb: NekoDeko: because it's an event loop, it reacts to events
16:50  SpComb: something happens so it calls some function
16:52  SpComb: NekoDeko: mostly because IRC as a protocol works like that, it isn't really possible to use it synchronously
16:53  SpComb: NekoDeko: so you need to set up your connection, then run the event loop, and then implement your behaviour in the callbacks/event handlers that irclib provides
16:54  NekoDeko: It does connect already, the only part left is for the bot to send the identify-message to the channel.
16:54  SpComb: NekoDeko: the .join() method doesn't wait for the server to say "ok, you've joined", it just sends/buffers the request
16:55  dangerouslyfluff: lvh: as freenode's own web page indicates, there are hub servers and leaf servers. Any IRCop password needs to be checked against cached configuration data. If that password is sent to NickServ by ircd-seven, any bug in atheme can allow one to possibly access IRCop passwords, causing havoc even after the hole is repaired
16:55  NekoDeko: Would it have to be added in the irclib.py file?
16:55  SpComb: no
16:55  dangerouslyfluff: NekoDeko: have you looked at twisted.words or some similar integrated solution?
16:55  SpComb: dangerouslyfluff: IRCops use the OPER command, not the PASS command
16:55  NekoDeko: I could search for it.
16:56  SpComb: NekoDeko: Twisted is the same stuff, just more complicated :)
16:56  dangerouslyfluff: twisted is complicated, overly so. But it wraps things together so you can work from the same base
16:57  smw: twisted just has a high learning curve
16:57  SpComb: NekoDeko: pastebin the specific scripts you're trying to join together, you've only shown the server.privmsg('identify ..') so far
16:57  smw: very high...
16:57  dangerouslyfluff: I'm working on a twisted rewrite actually to trim the fat off while retaining that notion of a uniform network interface
16:57  SpComb: dangerouslyfluff: har har
16:58  NekoDeko: Pastebin the script I am running to start the bot?
16:58  amitz: smw: is it worth it to learn twisted for future not-known usage?
16:58  habnabit: amitz: Absolutely.
16:58  SpComb: dangerouslyfluff: there are already plenty of python non-twisted frameworks/libraries out there
16:58  smw: amitz, without a doubt
16:58  variable: UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 2247: ordinal not in range(128)  -> from core.read() where core is a file descriptor (the output of open)
16:58  habnabit: amitz: I use twisted very frequently.
16:58  dangerouslyfluff: SpComb: I nuked several folders already, I can integrate them in later
16:58  smw: amitz, twisted is awesome once you figure it out.
16:58  amitz: habnabit: smw: hmmm, noted.
16:59  dangerouslyfluff: amitz: habnabit is probably the most experienced one here. I never had a need for twisted in my work, but this project might. It's often used for servers that have to get several protocols to exchange information
17:00  NekoDeko: pyborg-irc.py: http://paste.pound-python.org/show/1729/
17:01  dangerouslyfluff: NekoDeko: There is *so much* wrong with that script
17:01  amitz: wtf "It contains a web server, numerous chat clients, chat servers, mail servers, and more." <- just need kitchensink for completeness :-p
17:01  NekoDeko: It is a rather old script, I believe.
17:02  smw: amitz, twisted is all
17:02  NekoDeko: March 2008.
17:02  dangerouslyfluff: amitz: you can choose to install only what you need
17:02  ivazquez|laptop: Twisted *does* have a kitchen sink in there somewhere...
17:02  amitz: dangerouslyfluff: oh, noted. The ability to have convert in-between protocols, hmm..
17:02  ivan`: if you can read Python, Twisted is not very hard
17:02  ivan`: lots and lots of Python
17:03  lvh: dangerouslyfluff: That's working under the assumption atheme actually stores passwords
17:03  dangerouslyfluff: NekoDeko: one: use threading, not thread. Or better, multiprocessing
17:03  friendlystranger: How can you launch the Python interpreter from a file the Django manage.py shell? Could anybody give me a push in the right direction?
17:03  smw: amitz, it has libraries for everything you would want to do asynchronously. And it has threads for anything they didn't make ;-)
17:03  ivan`: if you pretend Twisted is perfect and you never need to read any source, you will find it hard
17:03  friendlystranger: like*
17:03  ivazquez|laptop: code
17:04  lvh: dangerouslyfluff: I haven't checked if it does, but that sounds ridiculously stupid
17:04  lvh: dangerouslyfluff: I would expect some reasonable KDF to be in place so actual passwords aren't compromised
17:04  dangerouslyfluff: lvh: even a hashed password is a security risk, particularily if you find a collision, or you replace the password hash
17:04  lvh: dangerouslyfluff: Unless you're suggesting some kind of MITM attack
17:04  Varriounz: I know this is a stupid question, but what should pythonpath be set to upon installing python 2.7 on windows 7?
17:04  dangerouslyfluff: lvh: exactly
17:04  ivan`: Varriounz: nothing?
17:04  lvh: dangerouslyfluff: What? That's not what you're describing
17:05 --- Varriounz is now known as Varriount
17:05  Varriount: Oh? Hm..
17:05  ivan`: Python populates sys.path despite a lack of PYTHONPATH
17:05  lvh: dangerouslyfluff: 1) collisions are an unreasonable thing to assume with a reasonable KDF
17:05  amitz: hmm
17:05  SpComb: NekoDeko: didn't know pyborg was such terrible code, the call to __init__ from a non-__init__ method, and the use of threads..
17:05  lvh: dangerouslyfluff: By reasonable KDF I mean PBKDF2, bcrypt or scrypt
17:05  dangerouslyfluff: lvh: In fact I was working today on using hmac as a salting mechanism
17:06  lvh: dangerouslyfluff: Stop doing it
17:06  lvh: dangerouslyfluff: use scrypt
17:06  SpComb: NekoDeko: but what do you want it to do, connect to bitlbee and identify?
17:06  dangerouslyfluff: lvh: is it x-platform?
17:06  NekoDeko: Yes.
17:06  lvh: (I'm giving a talk at Pycon *why*, but that's almost two months away)
17:06  lvh: dangerouslyfluff: Yes.
17:06  NekoDeko: It is an identify you have to say in the channel to make Bitlbee let you continue.
17:07  ivan`: is https://bitbucket.org/mhallin/py-scrypt/src any good?
17:07  NekoDeko: As said, it identified when the identify script was run alone, but not together with the other script because of the loop, it seems.
17:07  SpComb: NekoDeko: take a look at on_welcome and such
17:07  lvh: dangerouslyfluff: The only thing HMAC successfully protects you against is extension, anyway
17:08  variable: UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 2247: ordinal not in range(128)  -> from core.read() where core is a file descriptor (the output of open)
17:08  SpComb: NekoDeko: you'll need to use the normal settings stuff to have it connect to bitlbee, and then modify the ModIRC class such that once it's joined the channel, it identifies itself
17:08  lvh: doesn't really change that an off-the-shelf videocard computes 5.6 billion MD5's a second
17:08  lvh: the overclocked sapphire ones peak 6.2, 6.3
17:08  SpComb: NekoDeko: in other words, add a `def on_join (...)` method/event-handler that looks for &bitlbee and sends the 'identify' command
17:09  NekoDeko: Could I use the script I already had for sending the command on that event?
17:09  dangerouslyfluff: lvh: I didn't use md5, I used the sha-512 constructor
17:09  SpComb: NekoDeko: the .privmsg(channel, ...) call, yes, the rest of it, no
17:09  lvh: dangerouslyfluff: Okay, so then it's not 6 billion, it's only 2 billion
17:10  SpComb: NekoDeko: the pyborg code already opens up the IRC connection, joins the channel etc, you don't need to and can't do that yourself
17:10  lvh: dangerouslyfluff: the point remains: cryptographic hash functions are designed to be fast
17:10  lvh: dangerouslyfluff: a reasonable KDF is designed to be ridiculously ecruciatingly slow
17:10  NekoDeko: I see.
17:10  lvh: excruciatingly* even
17:10  variable: lvh, some cryptographic hash functions are designed to be fast
17:10  variable: bcrypt is designed to be slowish
17:11  SpComb: NekoDeko: excepting that you modify the pyborg code such that you can feed in your own irclib connection, but you don't really need to
17:11  SpComb: NekoDeko: since pyborg can already connect and join, you just need to add your own identify behavior to the existing code
17:11  lvh: variable: yes, bcrypt is a KDF
17:11  NekoDeko: The process of adding it was what I found problematic
17:12  lvh: variable: See what I was talking about previously: PBKDF2, bcrypt, scrypt
17:12  variable: lvh, oh woops; I missed your second line- sorry
17:12  dangerouslyfluff: scrypt is not impressing me. And secure hashes aren't restricted as cryptographic software is
17:12  SpComb: NekoDeko: well yes, it requires that you understand the code, but there isn't really any alternative for that..
--- Log closed Tue Jan 18 17:15:31 2011
--- Log opened Tue Jan 18 17:15:42 2011
17:15 --- Users 737 nicks [0 ops, 0 halfops, 0 voices, 737 normal]
17:15  dangerouslyfluff: lvh: PyCrypto is much better, and more active. Also see point #2
17:17  lvh: dangerouslyfluff: How is PyCrypto better
17:17  kyrobeshay: is this the proper place to ask a question regarding beautifulsoup?
17:17 --- Channel #python was synced in 101 seconds
17:17  lvh: dangerouslyfluff: You're going to have to articulate your second point, I don't grok it
17:17  kyrobeshay: it's relatively trivial
17:17  cwillu_at_work: kyrobeshay, yes.  And the answer is to use lxml.html instead, I think
17:17  lvh: kyrobeshay: Yes, but the primary answer is "consider using lxml.html instead"
17:17  kyrobeshay: ok
17:18  smw: kyrobeshay, only use soup when lxml fails.
17:18  lvh: dangerouslyfluff: Remember, we're talking now specifically about key derivation functions
17:18  kyrobeshay: i'll change it to that later
17:18  lvh: dangerouslyfluff: AFAIK, PyCrypto doesn't even *have* KDFs, but I could be mistaken
17:19  lvh: Here's my preliminary slides for Pycon, you might want to read them, particularly slide 7
17:19  kyrobeshay: for now, i have an anchor with text 'Lk 3:1 − 189', and soup is throwing me an error saying that string is an unsupported type for the NavigableString class
17:19  kyrobeshay: does that make any sense?
17:19  lvh: Except s/SHA-3/SHA-512/
17:19  lvh: http://bit.ly/fsSXpz
17:19  dangerouslyfluff: lvh: crypto export restrictions. They are much weaker now, but scrypt uses modified versions of two-way algorithms. HMAC is unencumbered, very easy to use, well tested, and in the stdlib. I don't see much more to this issue.
17:20  cwillu_at_work: people pay attention to crypto export restrictions?
17:20  lvh: dangerouslyfluff: You're not using better crypto because of export restrictions that don't affect scrypt?
17:20  kyrobeshay: is the '-' not considered a normal string property?
17:20  cwillu_at_work: dangerouslyfluff, it's also the wrong answer for storing password hashes, period.
17:21  lvh: dangerouslyfluff: And, yes, it does -- so does every reasonable KDF ever, including bcrypt
17:21  lvh: Again, the only thing HMAC actually protects against is extension attacks
17:21  lvh: Modern attacks on password databases have nothing to do with exploiting cryptographic weaknesses of hashes
17:22  lvh: Turns out just putting John the Ripper on it and *trying* every single password is no longer computationally infeasible for pretty much every popular cryptographic hash
17:23  dangerouslyfluff: lvh: for how long? 8 weeks?
17:24  lvh: dangerouslyfluff: Did anyone really ever express that as time?
17:24  lvh: dangerouslyfluff: That's obviously a bogus measurement: using what?
17:24  VSpike: What is best way to build a set from a generator?
17:24 --- RAMNUS is now known as RaMnuS
17:24  lrvick: Hey all if i have a date that looks like "2011-01-18T15:01:01.317Z" WTF is the 317Z part and hwo do i get strptime to ignore it?
17:24  dangerouslyfluff: lvh: big and little O are just theories, time is what matters. Time for people to change passwords, time for things to change
17:24  smw: VSpike, set(gen)?
17:24  ivazquez|laptop: Fractional seconds and timezone.
17:24  VSpike: I want to extract a bunch of unique items from a generator, assuming sets are a good way to do that
17:24  NekoDeko: So before I start this, am I to expect something like 3 lines of code, or could it quickly get 10 and beyond?
17:25  VSpike: smw: oh god, really? :)
17:25  lvh: dangerouslyfluff: Who said anything about little o/big O
17:25  smw: VSpike, I believe so
17:25  lvh: dangerouslyfluff: The litmus test is *cost* for designing an asic that does it
17:25  lvh: dangerouslyfluff: Turns out you don't need equal amount of state for completely different KDFs
17:25  smw: VSpike, python rocks :-)
17:25  lrvick: ivazquez|laptop: ok i want the time zone but i want it ignore the fractional seconds
17:26  lvh: dangerouslyfluff: Saying X is n times faster than Y is, as a result, a useless metric
17:26  lrvick: so how do i match it? %Y-%m-%dT%H:%M:%S.???
17:26  dangerouslyfluff: lvh: What's the difference between needing 1 billion years and o1 million years, the person will be dead by then anyway
17:26  ivazquez|laptop: You can't get the timezone.
17:26  lvh: dangerouslyfluff: You don't need a million years.
17:26  ivazquez|laptop: Look at e.g. mxDateTime.
17:26  lrvick: there is %Z
17:26  VSpike: smw: sure does :)
17:26  lvh: dangerouslyfluff: Didn't I already tell you *one* video card can do > 1 billion SHA-512's a second?
17:27  dangerouslyfluff: lvh: 1000? 100? give me some numbers for a password of 16 bytes and a salt fo 4 bytes with SHA-512 and HMAC
17:27  NekoDeko: Depends on how many computers you have?
17:28  lvh: dangerouslyfluff: http://www.tarsnap.com/scrypt/scrypt-slides.pdf
17:28  dangerouslyfluff: 1 PC, 2600hz, 8 GB
17:28  dangerouslyfluff: *2600Mhz
17:28  lvh: dangerouslyfluff: Slide 19/21
17:28  lvh: BRB, dinner
17:29  lvh: dangerouslyfluff: http://www.golubev.com/hashgpu.htm
17:29  lvh: dangerouslyfluff: If you look at that guy's blog, there's a bunch of people commenting with speeds with different hardware for each new version
17:29  lvh: dangerouslyfluff: Who cares what a PC can do? Attackers can afford video cards, and they give you a hell of a lot more bang for your buck for popular hashes
17:30  smw: lvh, or rent from ec2
17:31  smw: lvh, also, an 8 char random password with letters, numbers, and capital letters would still take forever to crack.
17:31  lvh: Right, they sell those boxes now
17:31  lvh: smw: Depends on the device
17:31  smw: lvh, eh?
17:31  lvh: smw: See the table I linked.
17:32  lvh: smw: (slide 19/21 of the scrypt slides)
17:32  smw: I read through all the slides and don't remember a table..
17:32  lvh: smw: A good password (8 chars, 10 chars) with MD5, MD5 CRYPT and DES crypt is pretty much broken
17:33  smw: lvh, nm, found the pdf
17:33  lvh: smw: gawker was unsalted DES
17:33  lvh: smw: they had
17:33  lvh: *lots* of people with "good" passwords
17:33  smw: yeah, I read that
17:33  lvh: DES is way too fucking fast
17:33  dangerouslyfluff: Sha-512 or Whirlpool?
17:33  lvh: not even a good key can save you
17:33  lvh: dangerouslyfluff: For a KDF? Who cares? They're both too fast
17:33  SpComb: lrvick: Z = Zulu = GMT
17:33  smw: lvh, I loved the "md5 is broken, sha1 isn't" :-)
17:33 * lvh & more dinner
17:33  kerio: was scrypt proven to require ungodly amounts of cpu and space?
17:34  lvh: kerio: Yes
17:34  lvh: kerio: Read his paper
17:34  lvh: Also his doctoral dissertation on provably-memory-hard functions
17:34  lvh: smw: Not
17:34  smw: lvh, not what?
17:34  lvh: smw: not my slides, the ones by cperciva himself
17:34  smw: ok
17:34  lvh: smw: http://www.tarsnap.com/scrypt/scrypt-slides.pdf
17:34  smw: lvh, sorry, I got confused
17:34  lvh: smw: 19/21
17:35  lvh: smw: I'm going to steal that though
17:35  smw: lvh, you have XKCD :-)
17:35  dangerouslyfluff: smw: that comic was GIMPed
17:35  lvh: smw: the problem is that there's this massive band of idiots that doesn't understand what a KDF is
17:36  dangerouslyfluff: http://xkcd.com/538/ is the original
17:36  lrh9: Kraft Dinner Food?
17:36  smw: dangerouslyfluff, I read it before ;-)
17:36  lvh: smw: And they keep pretending anything merkle-damgard based or sponge based is a kdf
17:36  VSpike: How can I go from a generator that returns open text files to a generator that gives the combined lines of all those files?
17:36  lvh: (unless you're running it like glibc2.7 is running it with crypt5/6, yeah, no, it isn't)
17:36  smw: lvh, I don't know what a kdf is... from how it was used in the slides, it looks like a slow hash function
17:37  smw: lvh, what does kdf stand for?
17:37  SpComb: http://en.wikipedia.org/wiki/KDF
17:38  dangerouslyfluff: lvh: and don't forget, this all sounds nice, but a snail's-pace algorithm run on millions of passwords a day (imagine Facebook) is not a pleasant reality.
17:38  lvh: smw: Key derivation function
17:38  smw: VSpike, as in have it return a new line each call of next()?
17:38  lvh: dangerouslyfluff: Are you suggesting Facebook uses such a fast algorithm?
17:39  VSpike: smw: yep, exactly
17:39  dangerouslyfluff: and funny, Wikipedia's only source is the scrypt website itself. Something smells fishy...
17:39  Eevee: dangerouslyfluff: so it should be easy for anyone to run an algorithm on millions of your passwords as fast as possible?
17:39  smw: VSpike, I would make a function that uses yield.
17:39  dangerouslyfluff: Eevee: No, there needs to be a compromise at some point.
17:39  Eevee: VSpike: chain()?
17:40  lvh: dangerouslyfluff: Your argument would also have held against bcrypt.
17:40  lvh: dangerouslyfluff: Are you suggesting bcrypt is not a good idea?
17:40  VSpike: Eevee: I was trying to do it with chain, but I can't get it right
17:40  smw: VSpike, I would just make a function that yields a new line time next is called.
17:40  lvh: dangerouslyfluff: Also, FB has a hell of a lot more than one box to run that on.
17:40  lvh: dangerouslyfluff: Also, scrypt and bcrypt have tunable work factors. If it actually *is* too slow, you turn it down a notch.
17:41  dangerouslyfluff: lvh: I'm saying that a lot of crypto science breaks down in the real world. You could spend 500 days on a single insanely slow hash function, but no one will be able to use it
17:41 --- Varriount is now known as Varraway
17:41  lvh: The point is that a million passwords a day becomes feasible, but a million times * John the Ripper's few billion password guesses isn't.
17:41  NekoDeko: Tutorials say "Let's write a simple function" and the function turns out to be everything BUT simple.
17:41  frag4now: hi all. how can I do a tag selection into an xml file? I taked a look at xml.parser.expat but I'm not sure it's the right module...any help is appreciated
17:41  lvh: dangerouslyfluff: Are you suggesting bcrypt is crypto science that breaks down in the real world?
17:42  NelleV: is there a way to get the version of the module imported ? (I'm not sure my question is very clear)
17:42  smw: frag4now, lxml and xpath
17:42  lvh: NelleV: Only if that module exports it.
17:42  zalun: is there a way to refer other document in Sphinx? a.rst relates to b.rst ?
17:42  frag4now: smw: thanks
17:42  ivazquez|laptop: "Version" is not a standard property of modules.
17:42  zalun: create a link?
17:42  NelleV: lvh: ok :(
17:42  lvh: NelleV: If you mean the path, try m.__path__. Modules may export __version__ or sometimes version
17:42  SpComb: __file__
17:43  lvh: err, yes, __file__, sorry
17:43  NelleV: lvh: I have the path
17:43  NelleV: lvh: ok. __version__ did the trick
17:43  SpComb: some modules have __version__
17:43  SpComb: but it's hardly required
17:43  lvh: dangerouslyfluff: Also, please don't strawman. We're not talking about work factors that mean 500 day computation. We're talking about 10ms to 1s computation lengths.
17:44  lvh: dangerouslyfluff: (If you read my slides, you'd know that.)
17:44  NelleV: SpComb: I excepted bpython to autocomplete it. I shouldn't have trust it :-(
17:44  lvh: a 200ms login delay is perfectly acceptable. How many times do you actually log in to Facebook?
17:44  lvh: NelleV: Hm? Unless that module does something funky, it should start once you have m.__
17:45  lvh: NelleV: By default, protocol methods and things starting with single or double underscores are not exported, because they're typically implementation details like __all__
17:45  NelleV: lvh: yep. I excepted to do it without the _. I had never used bpython for that before
17:45  ghufran: hi. i have a small problem.. im using python for the first time and trying to extend a script i found online .. here's what im working with : http://pastie.org/1474032 problem is .. it works if i comment the only line i added (line 10). otherwise i get "IndentationError: unindent does not match any outer indentation level"
17:45  VSpike: Ah, got it
17:45  VSpike: all_lines = itertools.chain.from_iterable(files)
17:45  lvh: NelleV: You can tell bpython to do that, it just doesn't by default because typically they're implementation details.
17:45  VSpike: Eevee: ^
17:46  kbm: yellow
17:46  NelleV: lvh: ok. But now that I know it doesn't, I don't really need to activate it
17:46  kbm: yellow everyone :D
17:46  NekoDeko: The @root user of Bitlbee (who handles registrations etc) always says "If you already have an account on this server, just use the identify command to identify yourself." when you join. Can this be used as an event?
17:46  NelleV: I get this error: http://bpaste.net/show/13012/
17:46  kbm: using urllib/2 im trying to hit : http://en.m.wikipedia.org/wiki/Salineño,_Texas
17:46  kbm: and im getting a unicode error :(
17:47  kbm: work arounds anyone?
17:47  SpComb: ghufran: check your editor, probably tabs vs spaces
17:47  lvh: dangerouslyfluff: With a 500ms delay, normal logins are still fine, since people don't actually log in that often. Spending half a billion seconds (== almost 16 years) to try a billion (which typically isn't enough) passwords isn't.
17:47  kbm: >> UnicodeEncodeError: 'ascii' codec can't encode character u'\xf1' in position 16: ordinal not in range(128)
17:47  ghufran: SpComb, standard vim
17:47  kbm: which makes me sad
17:47  NelleV: nevermind, I think I understand what is going on
17:47  lvh: dangerouslyfluff: Additionally, nV sells cards for servers now, too, so for a company the size of Facebook it still wouldn't be aproblem
17:48  lvh: NelleV: haha
17:48  smw: kbm, I do not think wikipedia likes urllib. When I tried it a while ago, it was not allowing me to see the page
17:48  SpComb: NelleV: irclib should give you on_join or similar, which should be enough
17:48  kerio: s/it still wouldn't be aproblem/using even harder KDFs is not a problem/
17:48  SpComb: erk, NekoDeko ^
17:48  ghufran: SpComb, just did the indentations again explicitly. all tabs now
17:48  kbm: smw: if its a standard request it works fine
17:49  lvh: NelleV: Is that a virtualenv?
17:49  VladDrac: kbm: what if you urllib.quote() the path-component of the url? eg. ehttp://n.m.wikipedia.org/wiki/Saline%C3%B1o%2C_Texas
17:49  kbm: smw: im facking the useragent
17:49  smw: kbm, ok, cool. That is what I did :-).
17:49  frag4now: sorry for dumb question: how can I install an egg file on Windows? (sadly I have to use it)
17:50  NekoDeko: Yes, you mentioned "def on_join (...)".
17:50  kbm: http://en.m.wikipedia.org/wiki/Saline%C3%B1o%2C_Texas
17:50  kbm: nope
17:50  kbm: wiki doesnt like it
17:50  kbm: sends me to the search page
17:51  NekoDeko: Does def on_join (...) define the arguments within the parentheses on join, or does it define the on_join command?
17:51  smw: kbm, urllib.urlopen('http://en.m.wikipedia.org/wiki/Salineño,_Texas').read() works for me
17:51  smw: kbm, but I am not faking my user agent...
17:51  kbm: im using urllib2
17:51  VladDrac: kbm: so does your original url
17:51  Aufwind: If I do have a tuple like this ((16133L,), (17050L,), (18754L,)) How do I extract the 3 integers elegantly? Is there a python oneliner?
17:51  VladDrac: oops
17:51  kbm: i need to build a request for the useragent
17:52  Juhaz: Aufwind, list comprehension.
17:52 --- Varraway is now known as Varriount
17:52  Aufwind: Juhaz: I did this: paper_ids = [paper_id for ((paper_id),) in cursor.fetchall()] But it turns out, that paper_ids is from type "long"...
17:53  NelleV: lvh: yep it is
17:53  SpComb: NekoDeko: I don't know what arguments the on_join method has
17:53  NekoDeko: I am not sure either.
17:53  NelleV: lvh: and I don't find it funny at all :(
17:53  lieuwe: I need to get a list of files in a directory and all subdirs, what's the best way to do this?
17:53  NekoDeko: You only mentioned it as (...), trying to figure out.
17:53  Juhaz: Aufwind, so? It'd be trivial to convert, but why would you ever need to care about the difference?
17:54  kbm: smw:
17:54  Aufwind: Juhaz: I don't know. I tyed to iterate over the long object, but it resulted in an error.
17:54  kbm: smw: no that didnt work
17:54  lvh: Additionally, for the people who think a light Wikipedia page is a reason not to use scrypt: unless you've actually, you know, reviewed the code and the paper (like I have), and you're capable of taking tptacek and dfranke on in a discussion about KDFs, please shut the hell up
17:54  kbm: SyntaxError: Non-ASCII character '\xc3' in file /Users/buzzi/project/visibilityrevolution/common/wikipedia.py on line 48, but no encoding declared; see http://www.python.org/peps/pep-0263.html for details
17:54  Aufwind: Juhaz: So I thought I miss something. You mean list(paper_ids) will do it?
17:54  lvh: NelleV: Have you figured out what the problem is already
17:54  Juhaz: Aufwind, oh, sorry, I didn't read that right
17:54  smw: kbm, that one liner gave me output
17:55  lvh: kbm: Define a character encoding for your source files.
17:55  smw: kbm, urllib.urlopen('http://en.m.wikipedia.org/wiki/Salineño,_Texas').read()
17:55  kbm: return urllib.urlopen('http://en.m.wikipedia.org/wiki/Salineño,_Texas').read()
17:55  smw: kbm, and that gives you nothing?
17:55  kbm: syntax error
17:55  NelleV: lvh: nah, not yet, but I'm reading the readme file (which I didn't last week when I deployed it). I'll proceed step by step and check out what's going on
17:56  dangerouslyfluff: kbm: wikipedia has an API that is easier to parse
17:56  NelleV: lvh: which means I won't have anymore problems with virtualenv today, as the first step is install cx_oracle -__-'
17:56  lvh: kbm: It's going to keep giving you a syntax error until you define your source's encoding.
17:56  smw: kbm, works for me.
17:56  kbm: how do i define a source encoding
17:56  Juhaz: Aufwind, but it's unpossible for paper_ids to be a long after that.
17:56  kbm: im using django
17:56  lvh: smw: Most likely in an interactive interpreter?
17:57  smw: lvh, yeah
17:57  dangerouslyfluff: kbm: # _*_ encoding: utf-8 _*_
17:57  lvh: kbm: emacs style:  # -*- coding: utf-8 -*-
17:57  Juhaz: Aufwind, paper_id would be.
17:57  dangerouslyfluff: pretty much standard notation either way
17:57  lvh: smw: Interactive interpreters use your terminal's encoding
17:57  lvh: smw: That's probably utf-8. Hence why it works there, but not in a source file.
17:58  smw: lvh, good to know
17:58  lieuwe: I need to get a list of files in a directory and all subdirs, what's the best way to do this?
17:59  kbm: yup - that works... how can i get that to work with urllib2?
17:59  Aufwind: Juhaz: My fault, sorry. I made type(paper_id) instead of type(paper_ids)
17:59  Aufwind: Juhaz: Thank you for mentioning.
17:59  amitz: lieuwe: os.listdir and recursion.
17:59  frag4now: ok thanks anyway. I have to go.
17:59  lieuwe: amitz: really?, damn...
17:59  Juhaz: Aufwind, though I would probably use paper_ids = [row[0] for row in cursor.fetchall()], the unpacking stuff isn't very legible when there's only one value
18:00  smw: lieuwe, look at http://docs.python.org/library/shutil.html . It might have something
18:00  Aufwind: Juhaz: That's a cool tip. Thanks!
18:00  smw: lieuwe, nm, only cp/mv functions
18:03  kbm: smw: ???
18:03  lvh: smw: I added the oblig XKCD to the slides
18:04  NekoDeko: I am not sure how to use the def on_join (...) function.
18:04  NekoDeko: I search for it, but there are just samples along the lines of def on_join(word, word_eol, userdata)
18:04  smw: lvh, sweet :-)
18:04  kerio: NekoDeko: why are you using irclib
18:04  kerio: use twisted.words.irc
18:04  smw: kbm, what are you confused about?
18:04  NekoDeko: Because using something else would be even harder.
18:05  kerio: nope
18:05  NekoDeko: I was not the one who decided to use irclib, the one who made the script did.
18:07  kbm: smw: im building a url using your method and it doesnt work
18:08  kerio: NekoDeko: is the script working?
18:08  kbm: "(reguaral string)" + "(non-ascii)"
18:08  smw: kbm, what happens?
18:08  NekoDeko: The script itself works.
18:08  kbm: *bangs head*
18:08  smw: kbm, same errors?
18:08  NekoDeko: I just need to make the bot say "identify password" when it joins the channel.
18:09  kbm: smw, yup
18:09  sopho: identify password
18:09  smw: kbm, did you do as lvh suggested and added that line to your code?
18:09  kerio: sopho: hunter2
18:09  DennBen: how do you create a dynamicly named variable?
18:09  kbm: yea
18:09  kerio: DennBen: no
18:10  kbm: thats how i got it to work
18:10  kbm: with a string literal
18:10  kbm: but when i concat - it crashes
18:10  kbm: term = "{0}, {1}".format(city.name, city.province)
18:10  habnabit_: DennBen: Use a dict.
18:10  sopho: kerio: http://goo.gl/6OKNT
18:10  kbm: name = Salineño, province = Texas
18:11  kerio: kbm: are those strings or unicode objects?
18:11 --- habnabit_ is now known as habnabit
18:11  kbm: unicode
18:11  DennBen: habnabit_: cant us a dict, i want to shorten some lines of code - using the vars within a form class
18:11  kerio: so why are you concatenating them into a normal string
18:11  kbm: and i had u"{0} {1}"
18:11  kbm: but that crashes when i do urllib.urlopen(url).read()
18:12  kerio: use urlencode
18:12  habnabit: kbm: URLs are bytes, not Unicode strings
18:13  lvh: smw: Fast table interpretation for beginners: http://sphotos.ak.fbcdn.net/hphotos-ak-snc6/hs245.snc6/179316_499798573350_674268350_5923687_2163037_n.jpg
18:13  smw: lvh, where does that $ figure come from?
18:14  smw: lvh, nm
18:15  kbm: lol
18:15  kbm: nice
18:17  nosklo: lvh: cool data
18:17  sproingie: urllib really should allow a unicode string seeing as how there is a canonical encoding for them
18:18  nosklo: sproingie: "canonical"?
18:18  TheSheep: sproingie: is there?
18:18  TheSheep: sproingie: what is it?
18:19  lieuwe: amitz: I tried doing that, but it's way too slow, there are 5000+ files I need to find. any other way?
18:19  csjp: what is the name of the library I need to link to get access to PyObject_CallObject() ? I am embedding python into another application
18:19  cheater-: lieuwe: what are you doing?
18:19  lieuwe: cheater-: making a minecraft cartographer
18:19  lieuwe: cheater-: but it uses a lot of small files
18:19  cheater-: and what is the problem?
18:20  lieuwe: cheater-: trying to use listdir to get them all takes like 10secs for 40 files?
18:20  cheater-: use find then
18:20  lieuwe: cheater-: find? wth
18:20  Kruptein: minecraft ftw
18:20  nosklo: can I use bcrypt as encryption for my ssh keys?
18:21  cheater-: bcrypt is not a cipher
18:21  cheater-: you might mean blowfish
18:21  nosklo: yeah, I want to use it in the keys not in the data
18:21  lieuwe: cheater-: what find function in which module?
18:21  nosklo: to store the keys
18:21  cheater-: lieuwe: man find
18:21  cheater-: nosklo: oh
18:21  cheater-: nosklo: to store them encrypted, or to store a hash you compare other keys against?
18:22  lieuwe: cheater-: oh, I'm trying to be as platform independend os possible, and I can recall python having a function for recursively finding files
18:22  cheater-: you mean globbing
18:22  lieuwe: cheater-: no
18:22  nosklo: currently my openssh implementation uses MD5 to store passphrases on my key files
18:22  cheater-: lieuwe: yes
18:23  lieuwe: cheater-: I have a folder, which contains 64 folders, each of those contains 64 folders and each of those contains 64 files, I need all dem files
18:23  cheater-: you mean globbing
18:23  Kruptein: indeed
18:23  nosklo: lieuwe: os.walk
18:23  lieuwe: cheater-: I don't want to do wildchar matching, I tried the glob module,. it doesn't work
18:23  cheater-: why?
18:23  lieuwe: cheater-: 'cause I need to go inside subdirs?
18:23  Kruptein: lieuwe: why btw a cartographer? aren't there already many
18:23  nosklo: lieuwe: for path, dirs, files in os.walk('directory'): for file in files: if os.path.splitext(file)[1] == '.dem': ... do stuff ...
18:24  cheater-: the right pattern is ./*/*/*.ext
18:25  cheater-: nosklo: i think maybe you mean [-1] ?
18:25  cheater-: otherwise you will have matches on file.dem.old, and will not have matches on file.2.dem
18:26  cheater-: (i think)
18:26  cheater-: oh no, that's right, [1] is correct
18:26  nosklo: cheater-: no. I mean [1]
18:26  nosklo: but [-1] would work too
18:27  cheater-: :)
18:28  taljurf: guys, the pycairo gradient isn't working with me: http://www.fpaste.org/R20H/
18:28  taljurf: see lines 59 - 64
18:28  taljurf: i'm just trying to create a simple black-white gradient
18:30  deepy: Is taking an image and putting text on it and then saving it
18:30  deepy: is that as easy with python as with php?
18:30  NekoDeko: server.privmsg ( channel, 'identify password' )  Yes?
18:34  sproingie: TheSheep: sorry, little distraction called work, boss at my desk.  the canonical encoding for urls is utf8
18:35 --- elpargo_ is now known as elpargo
18:35  sproingie: at least as http urls are concerned.  i can't recall which rfc it's attached to
18:37  lvh: For people interested, I updated the slides now with all of the table data as well http://bit.ly/fsSXpz
18:38  lvh: Those are probably roughly the slides I'll use in the talk
18:38  lvh: Just under 50 slides for a five minute lightning talk. Yay, six seconds per talk!
18:38  lvh: err, slide
18:39  lvh: (It's actually almost seven, but still.)
18:39  hiptobecubic: Is there a "python" way to make a standard linux app package? distutils is only good for libraries I guess? Should I use distutils for the app and then make to put the extra files in place? (*.desktop, /usr/share/icons..., etc)
18:40  sproingie: six second lightning talk, that would be something
18:40  sproingie: blipvert
18:42  lvh: sproingie: I wonder how many times I can say "USE SCRYPT ALREADY" in six seconds
18:43  kerio: lvh: "YOU DUMB FUCKS, USE SCRYPT OR I WILL KILL YOU"
18:44  joenp: I'm counting card references in the thousands for my simple game with a 52-card deck (using gc). I have no clue why that is, but the end result is 2GB+ mem usage. Any advice on how to approach this problem?
18:44  lrh9: Puny fleshlings.
18:44  kerio: joenp: pastebin your code
18:44  joenp: kerio: Sure, but there's a lot of it
18:45  NekoDeko: "ModIRC has no attribute 'privmsg'
18:45  lrh9: joenp: To be sure, we need to see source, but you're probably just creating new cards for each deck. (Instead of referring to the same exact 52 cards, which should never change.)
18:45  tpratt: lvh: On slide 2, are there any libs you want to talk about (use libgreat, don't use libmightaswellbecleartext)?  just a thought, it doesn't really matter to me.
18:45  sproingie: lvh: your talk looks inspired by that one other thing i saw somewhere along the lines of "if you choose AES, you've already lost"
18:46  sproingie: lvh: not so much in the sense that AES is secure, but if you're wiring in a specific algorithm
18:46  sproingie: er insecure
18:46  joenp: lrh9: You're right, I am creating a new deck for each round. I'll look into putting the card references back in the deck, and failing that, paste the large code.
18:46  lrh9: joenp: http://paste.pound-python.org/show/1732/
18:47  sproingie: lvh: and i gotta say those are nice slides.  i had no idea how cheap it was to brute force md5 in a year
18:47  sproingie: and a year seems a reasonable window if the owner of the password is in no shape to change it
18:47  kerio: sproingie: 1$ for a year
18:47  kerio: 400$ for 20 minutes
18:48  kerio: i assume that was the point
18:48  sproingie: jeebuz
18:49  NekoDeko: http://bpaste.net/show/13015/
18:49  sproingie: scrypt looks so darn cpu heavy it's like some kind of proof-of-work system.  i gotta learn more about this stuff
18:49  NekoDeko: What am I supposed to add as arguments and function? =|
18:49  joenp: lrh9: You have some experience, I see ;)
18:49  psykidellic: NekoDeko: What does the docs say?
18:50  psykidellic: NekoDeko: Also, ampirc.
18:50  NekoDeko: I have no docs at all.
18:50  psykidellic: Huh? From where you got that code?
18:50  NekoDeko: I was told to def on_join as event handler and then do functions under that.
18:50  lrh9: joenp: Working on my own card project.
18:50  NekoDeko: Moment
18:50  psykidellic: Who told you?
18:50  lvh: sproingie: The idea of CPU-hard KDFs isn't new
18:50  NekoDeko: SpComb
18:50  lrh9: I have a hand ranking system that ranks hands according to standard ranks, but it's brittle and ugly for performance reasons.
18:51  lvh: sproingie: This has been the idea ever since phk's stretching and md5 crypt/des crypt
18:51  lvh: sproingie: ie the eighties
18:51  lvh: tpratt: the idea is not particularly to hand out a list no
18:51  evilbulgarian: hi, i have an function that returns http://pastebin.com/3HBKj7zq what is the best way to loop through the result and map the id to the domainid so that i get a list with host / domain?
18:51  lvh: tpratt: not an exhaustive list at least
18:51  NekoDeko: SpComb did not give exact code. Just names of functions. So I have been trying to figure out what to write for a while now.
18:51  lvh: tpratt: I just wanted to say "verify that you actually need to store a password"
18:52  NekoDeko: I keep getting undefined and no attribute errors.
18:52  lvh: tpratt: isn't libgreat a fuzzer, anyway?
18:52  lvh: tpratt: It's a lightning talk so I'm not planning on saying anything specific about the alternatives to storing passwords
18:53  kerio: well isn't using openID just storing the password somewhere else?
18:53  psykidellic: NekoDeko:  Well, I have no idea about the reference point. What are you trying to do? Write an IRC bot? Why not use Twisted?
18:53  NekoDeko: Because the only thing I have to add is for the bot to say "identify password" when it joins the channel.
18:53  sproingie: lvh: i think just communicating the very idea of the difference between "hashed secret" and "derived key" is an uphill climb
18:54  NekoDeko: It is a Pyborg bot.
18:54  sproingie: lvh: i guess demonstrating the practical difference is the best way
18:54  kerio: sproingie: what's the difference?
18:54  psykidellic: Hmm, I really dont know where that method is defined. I have never used Pyborg.
18:54  psykidellic: NekoDeko: So you have to import that module.
18:54  NekoDeko: Which module?
18:55  psykidellic: NekoDeko: Pyborg maybe. I dont know. Whichever library you are using.
18:55  NekoDeko: irclib
18:55  psykidellic: NekoDeko: Well then I guess the docs will be there for that.
18:55  psykidellic: Never used irclib.
18:55  sproingie: kerio: hash's only job is to distribute nicely and avoid collision.  key derivation has the same duties but it's also intended to be expensive.
18:55  kerio: oh, ok
18:56  kerio: well it's not complicated
18:56  kerio: seems fairly simple to me :<
18:56  sproingie: it's simple when lvh explains it with those brute-forcing numbers
18:56  NekoDeko: "<SpComb> NekoDeko: in other words, add a `def on_join (...)` method/event-handler that looks for &bitlbee and sends the 'identify' command"
18:56  NekoDeko: Which is what I have been trying to do for a while now.
18:57  sproingie: there's actually a virtual currency out there based entirely on expensive hashing algorithms.  called bitcoin.
18:57  kpoman: hello !
18:57  kpoman: guys do someone know what is the difference between a buffered and unbuffered app in python ?
18:57  qwerty1793: hi, does anyone know of some examples of a finite state machine class other than those on http://wiki.python.org/moin/FiniteStateMachine ?
18:58  sproingie: personally i think bitcoin's big daisy-chain will screw it in the end based on some attack we don't know of yet.  but it's probably better-protected by its total obscurity
18:58  kerio: qwerty1793: regexps
18:58  kpoman: I mean is an buffered python script much slower to output its stdout than a unbuffered ?
18:58  psykidellic: NekoDeko: Okay, So he probably meant something fromn the irclib. So look into its docs.
18:58  NekoDeko: It barely has documentation
18:58  tpratt: I don't know what a "fuzzer" is
18:58  psykidellic: Hmm, this is the first time I have heard the term: "buffereed and unbuffered app"
18:59  psykidellic: NekoDeko: That is why use a better library which has actual docs :)
18:59  NekoDeko: But the bot is not written with those libraries.
18:59  lvh: sproingie: yep, hence the numbers
18:59  sproingie: tpratt: a fuzzer generates semi-randomized input in order to test boundary conditions
19:00  psykidellic: NekoDeko: Then the best place to ask would be the actual bot developers. Or wait for SpComb to come back. Looks like he knows about irclib. I dont. Sorry, could not be of much help.
19:00  sproingie: test or exploit that is
19:00  kpoman: or... do someone know how the buffered stdout works ?
19:00  kpoman: I mean, does it wait for x bytes ? for a specific character ? for specific amount of time to flush ? or what
19:00  seku: how do i do os.environ['HOME'] so it works on windows too?
19:00  sproingie: kpoman: if it's a tty it's line-buffered.  if it's not, it's block-buffered.
19:00  NekoDeko: The library has not been modified since 2008. I do not think contacting the developers will be easy.
19:01  sproingie: kpoman: you can change your own buffering, but you can't do anything to change the buffering on the other side of a pipe
19:01  poundplay: hey guys i am a noob trying to learn can i get some noob assistance please?
19:01  sproingie: except ask it nicely which usually doesn't happen
19:01  kpoman: sproingie: I do have scripts that do stdout.write ... I see the out in real time however I did not specify the unbuffered option
19:01  tpratt: oh I see, there actually is a 'libgreat'
19:01  sproingie: it comes up with pipes but it has nothing to do with pipe buffers specifically, it's a libc stdio thing
19:02  niko-nojo: Hi room, Just wondering has anyone here used web.py http://webpy.org/ - is it still an active project ?
19:02  sproingie: kpoman: if the output was to a terminal, then it will have been line-buffered
19:03  sproingie: kpoman: send it to a pipe then tail -f it and you'll notice it block-buffers
19:03  TheSheep: niko-nojo: https://github.com/webpy/webpy/commits/master
19:03  seku: i want to store a sqlite3 thing for my script to use. How should i do it and where should i put it on windows?
19:03  TheSheep: niko-nojo: last commit in December
19:04  psykidellic: So how does one unittest a method (like: generateSalt()) which uses random value internally?
19:04  niko-nojo: TheSheep - thx, have you used it much ?
19:04  TheSheep: niko-nojo: never
19:05  TheSheep: psykidellic: what would you like to test in it?
19:05  sproingie: psykidellic: if you want to be really persnickety, there are randomness tests
19:05  kpoman: sproingie: what is a block ?
19:05  psykidellic: TheSheep: Well, come to think of it, nothing. Every call returns a different value - which kind is its purpose.
19:06  TheSheep: psykidellic: you could just call it once and ignore the value, to make sure no obvious errros
19:06  psykidellic: But how does one guarantee/test that its returning *correct* value (which I guess is random).
19:06  sproingie: kpoman: it's a chunk of ram.  it won't flush the output til it fills up the block or it explicitly flushes
19:07  TheSheep: psykidellic: you can check ranges
19:07  kpoman: sproingie: I understood: http://pastebin.com/YuvaLsDK
19:07  TheSheep: psykidellic: and any other requirements you have on the output
19:07  kpoman: sproingie: why sending to windows console it prints instantly, and sending to a pipe doesnt ?
19:07  psykidellic: TheSheep: Yeah. My method returns different length salt. So I can check that I guess.
19:08  sproingie: kpoman: that's the same thing.  windows goes to great lengths to duplicate this unix misfeature :(
19:08  psykidellic: And I would assume that random module returns random values :)
19:08  TheSheep: psykidellic: you should only check the things that you care about
19:08  TheSheep: psykidellic: don't force it
19:08  sproingie: actually the misfeature is just that you can't negotiate with the other side to change it
19:08  psykidellic: TheSheep: Yeah.
19:09  habnabit: sproingie: I just like that one side can make it nonblocking for the other side.
19:09  habnabit: sproingie: Or blocking again.
19:09  seku: how would i do sqlite3.connect("{}/.myscript/db.sqlite3".format(os.environ['HOME'])) in windows ... or something
19:09  sako: hey all, whats the best way to go from pdf -> jpeg with python?
19:09  kpoman: sproingie: but then the output was already printed or outputed if the console is able to show it... so why the pipe doesnt ?
19:09  kpoman: is the pipe that has a problem ?
19:09  habnabit: seku: os.path.expanduser
19:09  sproingie: kpoman: because it's stuck in the buffer
19:09  kpoman: sproingie: imagine if I open this with subprocess, with bufsize to 0, will it print instantly ? and behave different that the pipe ?
19:10  seku: habnabit: thanks .. all i have to do is switch / to \ and use expanduser?
19:10  sproingie: kpoman: bufsize is the buffer on your end.  you can't do anything about the buffer size on the other end
19:10  seku: (i don't have a windows)
19:10  habnabit: seku: You can use /
19:10  sproingie: kpoman: only thing you can do if you want to force line buffering is to open a pty.  and no such beast on windows.
19:10  kpoman: but console has also the buffer on the end ... how does it manage to get and print the data ?
19:10  seku: ok, thanks
19:10  habnabit: seku: Or os.path.join
19:11  sproingie: kpoman: the console is a device that causes it to print the data out when it receives data
19:11  kpoman: sproingie: the pipe is something similar to a console ? is it a device that causes it to pass to stdin of another program ?
19:12  sproingie: kpoman: they're lower-level things than devices, they're kernel primitives
19:13  kpoman: sproingie: is subprocess emulating a console or a pipe ?
19:13  sproingie: kpoman: it uses pipes.  to emulate a console, you need to use pty
19:13  lvh: In case anyone was wondering, MySQL is still crazy broken: http://code.djangoproject.com/ticket/14661#comment:7
19:14  sproingie: and yes it'd be really damn nice if subprocess borged up pty's functionality on platforms that supported it
19:15  kbm: is there a way to convert all latin characters to their ascii equivalent?
19:15  nosklo: kbm: latin characters don't have ascii equivalents
19:15  nosklo: (some)
19:15  sproingie: ascii is a subset of the latin charsets
19:15  kbm: using unicodedata?
19:15  sproingie: any codepoint >127 has no ascii equivalent
19:16  sproingie: if you want the accents on chars removed, you could decompose them and strip out the combining marks
19:16  taljurf: guys, i've been looking through pygtk classes but couldn't find one that would make it stick to the bottom like the gnome-panel, is there anyway to do that
19:16  taljurf: ?
19:17  sproingie: just don't go mistaking a char with accents as "equivalent" in some way to the one with the accents removed
19:21  habnabit: Typically when I see someone trying to transliterate to ASCII, they don't understand Unicode and this is the only way they can think of to work around an imagined problem.
19:21  habnabit: kbm: ^
19:21  sako: is there a good imagemagick python library
19:21  sako: i just tried to get PythonMagick, it's outdated and the download link on pypi 404s
19:22  dangerouslyfluff: convert your code base to unicode, save yourself some 2-3 hassle, end of story
19:22  dangerouslyfluff: sako: google for copies and put one on github/bitbucket so we can work on it
19:23  sproingie: yah, stripping accents off is almost universally The Wrong Thing To Do
19:23  sproingie: i can see apps not managing full unicode but fer godsake at least support latin
19:24  dangerouslyfluff: http://www.imagemagick.org/download/python/
19:24  Back2Basics: has anyone gotten python working on winpe 64 bit?
19:24  dangerouslyfluff: winpe?
19:24  NekoDeko: >_> It keeps telling me on_join() takes exactly 2 argumetns (3 given),
19:24  habnabit: sproingie: Don't deny that there's no reason they shouldn't support Unicode.
19:24  NekoDeko: But I only added TWO arguments.
19:24  cwillu_at_work: dangerouslyfluff, preexecution environment
19:24  cwillu_at_work: dangerouslyfluff, basically a windows livecd
19:24  habnabit: NekoDeko: You forgot self.
19:24  kpoman: sproingie: isnt there a way to open a "windows console" and get the output there ?
19:24  Back2Basics: dangerouslyfluff: so that's a 'No'
19:24  kpoman: in realtime
19:24  habnabit: sproingie: I will frown at you so much.
19:24  NekoDeko: Where do I put self?
19:24  sproingie: habnabit: ancient apps with no unicode.  really no excuse in python tho.
19:24  dangerouslyfluff: cwillu_at_work: use linux and get a *real* live cd
19:25  cwillu_at_work: dangerouslyfluff, I do.  Use more than one operating system and get a *real* opinion
19:25  dangerouslyfluff: NekoDeko: first arg to an instance method, then use liberally inside said method
19:25  dangerouslyfluff: cwillu_at_work: I do. I'm on a Vista 64 bit right now
19:25  Back2Basics: dangerouslyfluff: except you can't write to NTFS.
19:25  kpoman: sproingie: I mean I do already have a py2exe app compiled without the unbuffered option. I want to get its output in realtime so I take decisions on it ... any way to do that ?
19:26  plm: how to format a string '12542.00' to '12.542,00'?
19:26  habnabit: NekoDeko: You put it in your python tutorial.
19:26  sproingie: kpoman: use something other than stream IO
19:26  habnabit: plm: Is it currency?
19:26  Back2Basics: plm: you mean the other way around?
19:26  NekoDeko: What tutorial?
19:27  sproingie: kpoman: windows has a rich toolbox of IPC primitives you can use
19:27  habnabit: NekoDeko: The one you're reading.
19:27  NekoDeko: I am not reading a tutorial.
19:27  plm: habnabit: yes
19:27  habnabit: NekoDeko: Well, there's your problem.
19:27  habnabit: plm: locale.currency
19:27  kpoman: sproingie: imagine the app that wants to read in realtime that output is a python script. what module to use ?
19:28  sproingie: wish windows supported SCTP out of the box.  or linux for that matter
19:28  kpoman: sproingie: or will I need something like win32all or whatever to open ?
19:28  sproingie: kpoman: define "realtime".  you may be overestimating the impact of buffering here.
19:29  kpoman: sproingie: see that example I posted ... basically the awk command never prints anything ... see here: http://pastebin.com/YuvaLsDK
19:29  sproingie: kpoman: if your stdin and stdout aren't mutually dependent on each other, buffering is not going to screw you
19:29  NekoDeko: Now it tells me ModIRC instance has no attribute 'privmsg' again.
19:29  kpoman: sproingie: if I dont buffer, the awk wont ever print anything
19:29  sproingie: kpoman: if they are, then you need a pty.  on windows you're screwed.
19:29  plm: habnabit: I'm using : c = float(c); c = locale.format_string("%s%.*f", (conv['currency_symbol'], conv['frac_digits'], c), grouping=True) This format a '12542.00' to '12542,00' but I would like the '.' milhar: '12.542,00'
19:30  kpoman: sproingie: in that I had to ctrl+c after one minute with nothing printed at screen
19:30  plm: habnabit: I'm using the locale, but the '.' not works... do you know why?
19:30  sproingie: kpoman: i imagine if you waited longer it would eventually print.  does kinda suck to have to wait tho, doesn't it?
19:31  sproingie: kpoman: try sys.stdout.flush() before every sleep
19:31  sproingie: not actually sure flushing like that will help, can't hurt to try
19:32  kpoman: sproingie: yeah I could do that but it would imply having to modify the "compiled script"
19:32  sproingie: i run into this problem all the time with long pipelines doing summary analysis on streams
19:32  kpoman: which I wanna avoid
19:32  GlassDeviant: anyone know why when I try to install 64-bit Python in Win7 64-bit, it tries to
19:32  GlassDeviant: run some arbitrarily named .msi file?
19:32  qwerty1793: hi, is there an equivalent to string.rstrip() for lists? I want to do something like [1,2,4,1,14,1,1,1,1].rstrip(1) and get [1,2,4,1,14]
19:33  sproingie: kpoman: i don't know of anything you can do that wouldn't involve code changes
19:33  habnabit: qwerty1793: nope.
19:33  habnabit: plm: Works4me with locale.currency
19:33  sproingie: GlassDeviant: the installer is an exe that unpacks a .msi file that has a generated name
19:34  sproingie: could be even the .msi file has a sub-installer
19:34  GlassDeviant: ok thanks
19:34  mbutubuntu: hello folks
19:35  mbutubuntu: I'm using PIL and I've splitted an image into bands
19:35  mbutubuntu: how to manipulate each band (for color balancing)
19:35  sproingie: qwerty1793: itertools might have something but they usually only work from the left
19:35  jchysk: are there any decent shopping carts available for pylons?
19:35  mbutubuntu: I'm googling but I can't find anything
19:35  sproingie: qwerty1793: so you'd have to do it on reversed(mylist) at the very least
19:35  sproingie: itertools.dropwhile or something like that
19:36  vr6: I have a choice to make about query a db 200 or so times or grabbing one big huge chunk of data (i.e., 2 million records) at once and storing it in python data structure.  The
19:36  vr6: big huge query takes 43 seconds... no biggie
19:37  vr6: is there a pythonic point of view on this?
19:37  plm: habnabit: did you try locale en_US right? grouping works the '.' and the ',' right? here too. problem is with pt_BR locale. not works the '.'
19:38  habnabit: plm: No, I actually used pt_BR as well.
19:38  plm: habnabit: please, see this http://dpaste.com/329936/
19:38  habnabit: plm: Works just fine.
19:38  habnabit: plm: I said locale.currency. This is not locale.currency.
19:38  sproingie: vr6: nothing so much python-specific as concerns you'd have in any language.  do you have the resources to handle the whole resultset at once or should you stream it?  up to you.
19:39  sproingie: vr6: only python-specific concern here is depending on the dbapi driver you might get the whole resultset in one gulp like it or not
19:39  uran-238: hi all
19:39  qwerty1793: sproingie: yeah thanks, that looks like it should be workable
19:39  frostschutz: vr6: if you store the whole thing in memory, it's not a database anymore ... so do you even need the database? because loading the entries from a file might be faster than the db overhead
19:40  vr6: spoingie: using oursql
19:40  sherl0ck: how do i check if a varaible is callable?
19:40  plm: habnabit: could you paste your example?
19:40  psykidellic: sherl0ck: Why dont you already know?
19:40  habnabit: plm: No, I'm on my phone
19:40  sherl0ck: for var in dir(self):
19:40  sproingie: vr6: i suspect oursql does cursors, habnabit would know better.  all depends then if your mysql server can handle it
19:40  vr6: frostschutz: I have to read data from a database, but never store anything back to the database.
19:40  Luyt_: vr6: with proper indexing each of those queries could take 0.1s
19:41  habnabit: sherl0ck: Why are you doing that?
19:41  sherl0ck: psykidellic, wanting to call methods that match 'is_*'
19:41  Luyt_: vr6: My app was also suffering from slow queries, I brought them down from 1500 ms to 14msec
19:41  psykidellic: sherl0ck: That is weird requirement.
19:41  sproingie: dbabi using "cursor" for connection was another annoying mistake.  at least that one is just terminology.
19:41  Luyt_: vr6: Lots of debugging with slow_queries, ANALYZE, and adding good indexes.
19:42  sproingie: i think "cursor" dates back from vsam
19:42  vr6: As far as I can tell the server is handling the 2 million records, but I fear a day when the recordset is 10 million and it can and will happen.
19:42  Luyt_: vr6: Furthermore, if the same query is made from different parts of your app, use memcache
19:42  sherl0ck: psykidellic, its for some validation, without having to write out all the options
19:42  sproingie: vr6: oh yeah what Luyt_ says: if you can do fine-grained caching of pieces of your query then you may be better off with individual queries
19:43  psykidellic: sherl0ck: What exactly are you trying to do? The whole idea of looking into is_* and calling it if its callable seems strange.
19:44  vr6: Luyt_, sproingie: hmmmm, not sure I ever encountered the need for caching.  is it a python library?
19:44  Luyt_: vr6: The idea is to avoid table scans with good indexes.  Then it isn't important if you have 2 or 10 million records.
19:44  Luyt_: vr6: Memcache is web scale.  It has python bindings.
19:45  Luyt_: vr6: But grabbing 200 million records in 400 MB of data from a relational database into your Python app, in 40 seconds, isn't a good usage for a relational DB
19:45  vr6: Luyt_: could you please provide a link to the Memcache - python you are talking about so I can begin to wrap my head around it.
19:45  sproingie: memcache is pretty simple as caches go but it does that one job very well
19:45  Luyt_: sproingie: However, it is not a remedy for sub-optimal queries.
19:46  Luyt_: The low hanging fruit is to analyze how MySQL executes your queries and eliminate the table scans.
19:46  sproingie: Luyt_: no certainly not.  though sometimes you can't get away with adding indexes
19:46  Luyt_: If you don't know what a 'table scan' is, look it up. It's the performance killer of your database.
19:46  sproingie: our mysql db is slammed right now from index updates
19:46  Luyt_: sproingie: Mindlessly putting indexes on everything is also not the way to do it
19:47  sproingie: the optimal solution in my case would be to not use mysql but alas
19:47  freinhard: hi!
19:47  plm: habnabit: works with currency. Thanks
19:47  vr6: Luyt, sproingie: Let me time test my current two query alternatives and then read up on the memchacing bit.  A starter link to it would be great so that I know I am reading the right thing
19:47  Luyt_: vr6: memcache is only of use if your queries are repetively the same
19:48  freinhard: i'm opening a webpage with urllib2.build_opener opener, but i keep getting "[Errno 104] Connection reset by peer"
19:48  vr6: Luyt: they will be
19:48  Luyt_: vr6: First thing should be determining your slow qeuries using the slow query log, and the ANALYZE those queries and identify the table scans, then work to eliminate those.
19:49  freinhard: the problem is: the website litterally tags AGES to respond. on firefox the page took 8minutes till it finally showed up
19:49  Luyt_: vr6: That way you can bring queries down from seconds to milliseconds.
19:49  vr6: Its a one table query.  I rarely use SQL with any joins - in fact I pretty much avoid it like the plague in code.
19:49  Eevee: er
19:49  Eevee: then why are you using a relational database
19:49  Eevee: if not for: relations
19:49  vr6: Eevee: its not my db
19:50  Luyt_: vr6: I don't know your use case of course, but it sounds intruiging!
19:50  vr6: its where data is stored that I need for my app.  just a quick read only operation
19:50  Luyt_: vr6: Not even a WHERE on the SELECT?
19:50  Luyt_: vr6: Or an ORDER BY?
19:50  ejaury: how do i get fully-qualified name for a module to be used as logger name?
19:50  sproingie: hey at least it's a record-based file
19:51  ejaury: __name__ gives only relative name, depending on how caller imports the module
19:51  vr6: Luyt: I do a WHERE and GROUP by, yes. This causes table scans you referring to, also?
19:51  habnabit: ejaury: "relative name"?
19:51  lvh: ejaury: As usual, Twisted has a tool for everything!
19:51  lvh: ejaury: http://twistedmatrix.com/documents/current/api/twisted.python.reflect.html
19:52  habnabit: ejaury: It sounds like your imports are wrong.
19:52  vr6: Luyt_: once I get this going and I have a little time (working against a milestone timeline right now) I will post variations of what I am doing.
19:52  lvh: ejaury: fullyQualifiedName(x)
19:53  ejaury: e.g. if my project module structure is like this: project_name.module.another_module, and i import my module using 'from another_module import something', then __name__ in another_module will give 'another_module', and not 'project_name.module.another_module'
19:54  habnabit: ejaury: Yes, because that import is wrong.
19:54  habnabit: ejaury: It should be "from proj.module.another import ..."
19:54  ejaury: i know it makes sense for python not to know my definition of 'fully-qualified name'.. but i'd like to be able to name my logger using my project name as the root level
19:55  habnabit: ejaury: Yes. And if your imports were correct, the __name__ would be correct.
19:55  lvh: Anyone know how I can get trial to count the assertions in a test suite
19:55  lvh: ejaury: habnabit is right though: don't do relative imports
19:55  Luyt_: vr6: Yes.
19:56  Luyt_: vr6: MySQL has to fall back on table scans when it can't find a proper index to use.
19:56  lvh: habnabit: What happens when you use explicit relative imports? Does it do the same thing as for implicit relative imports?
19:56  lvh: I don't know because I don't use them
19:56  habnabit: lvh: It does the right thing.
19:56  Luyt_: vr6: And table scans make your app fall on its face
19:58  kpoman: sproingie: ok it seems to buffer 4k of data before outputing. this sucks ...
20:00  TheoMurpse: After logging into a website with this code: http://paste.pound-python.org/show/1734/    How do I make a request that will involve the cookies in the cookiejar as well as submit headers (namely, "referer":"some_referral_page")?
20:00  sproingie: kpoman: 4k sounds about right.  buffering is annoying, no doubt about it.
20:00  TheoMurpse: I can't figure out how to incorporate a urllib2.Request() object that will still involve the cookiejar included in opener
20:01  kpoman: sproingie: any way to emulate then a console or something with a python module ?
20:01  kpoman: an existing module I mean
20:01  nosklo: kpoman: on which OS?
20:01  kpoman: nosklo: windows xp
20:01  nosklo: kpoman: You're doomed.
20:02  kpoman: the only way is a real console  ?
20:02  GlassDeviant: Once I have installed Python (64-bit, on windows 7 64-bit), where do I put the pdb files from python-2.7.1.amd64-pdb.zip (_hashlib.odb, _ctypes.pdb, etc.) ?
20:02  nosklo: kpoman: even the real console doesn't work right
20:02  pLr: hi, im using python 3.1 with urllib -- how can i change urllib.request.urlopen to handle a file filled with urls (foreach..) instead of a single hardcoded link like http://paste.pound-python.org/show/1735/
20:02  kpoman: nosklo: wow this sucks
20:02  kpoman: :p
20:02  lieuwe: is it possible to get os.walk to skip locked files instead of freezing up?
20:02  nosklo: kpoman: yeah, that's why everybody on windows uses GUI apps exclusively
20:02  kpoman: aha
20:03  sproingie: kpoman: pty is how you do it, but that's a unix thing, and python doesn't even implement it on many unixes
20:03  nosklo: lieuwe: os.walk doesn't freeze - what must be freezing is whatever you're doing with the file *after* os.walk found it
20:03  Luyt_: I feel empowered.
20:03  kpoman: nosklo: but, just to understand well... all the commands that print stuff do flush the buffer explicitly ? for example, I did a "ls -la" right now
20:03  nosklo: Luyt_: be carefukl
20:03  nosklo: careful
20:03  nosklo: kpoman: do you have ls for windows installed? Or this is cygwin?
20:04  kpoman: nosklo: it is mingw/msys
20:04  Luyt_: nosklo: Allright. I'm writing my own mini-Wiki (to use in a CherryPy app) and it's going like a rocket.
20:04  nosklo: kpoman: The answer is "no they don't".
20:04  lieuwe: nosklo: well, it stops printing after calling walk, and everytime I interrupt it it gives http://pastebin.com/0DrG3Es2
20:04  sproingie: i think ls might actually flush explicitly
20:04  nosklo: it doesn't
20:04  lieuwe: nosklo: so if it isn't walk, what is?
20:04  vr6: Luyt_: k.  hopefully I can get a little set  on pastebin current two ideas and timing results, another set of eyes is always good :).  thanks for the info, you too, sproingie!
20:05  kpoman: nosklo: it is autoflushed whren the command ends, right ?
20:05  kpoman: I mean it flush when 4k or command ends ?
20:05  nosklo: lieuwe: hm, os.stat() shouldn't block, unless your entire filesystem is blocking somehow? I mean, the file doesn't have to be read to os.stat() it
20:05  Luyt_: vr6: Also use 'EXPLAIN SELECT ...
20:06  Luyt_: vr6: The query plan shows where MySQL has to resort to slow table scans.
20:06  lieuwe: nosklo: I don't know wtf is going on then, there's a very good chance that a file is in use though, I'm trying to map a game map whilst the server is running
20:06  nosklo: kpoman: it detects the destination - if it's a real console, then it flushes every line. Otherwise it never flushes
20:06  nosklo: kpoman: of course when closing the file descriptor, it flushes, or when the os buffers are full
20:06  Luyt_: vr6: See http://dev.mysql.com/doc/refman/5.0/en/using-explain.html
20:07  jhl: What's the best way of getting rid of the zero left padding in strftime? Specifically for %d. I want 1 instead of 01.
20:07  nosklo: lieuwe: if you close the game at the time, does it unlock?
20:07  vr6: Luyt_: also can you point me to that memcache info you were talking about.... just want to make sure I end up at the correct place.
20:07  lieuwe: nosklo: I can't just go and stop them server, there are people using it :P
20:07  kpoman: nosklo: ok I see ... then I am stuck and will have to call py with -u or whatever
20:07  kpoman: :(
20:07  kpoman: damned
20:07  Taos: kpoman: sucks to be them
20:07  habnabit: jhl: There's another formatter for without 0 padding.
20:07  nosklo: jhl: strftime doesn't offer that functionality. You could use '%d' % mydatetime.day
20:07  habnabit: jhl: Check the docs.
20:07  Luyt_: vr6: I myself use the pure python tummy implementation at http://www.tummy.com/Community/software/python-memcached/
20:08  jhl: habnabit: Thanks.
20:08  habnabit: Maybe it's %D
20:08  nosklo: habnabit: really?
20:08  nosklo: it's not documented, then
20:08  lieuwe: nosklo: hm, I could copy the savegame though, hold on.
20:08  habnabit: man 3 strftime
20:09  nosklo: I mean, python docs don't mention it
20:09  artli: Hello. I have some trivial question:
20:09  artli: I'm creating script parsing some pages in CP-1251 encoding. It's ok in browser, but in shell it writes "�������".
20:09  artli: How should I encode CP-1251 to UTF-8?
20:09  nosklo: that means it varies across platforms
20:09  vr6: Luyt_: one more real quick question... if I have a dbcursor in a loop, each query will overwrite the previous dbcursor results, yes?   I.e., it doesn't keep appending does it?
20:09  nosklo: artli: decode it first, and then reencode to utf-8
20:09  seen_: habnabit: %D produces '01/18/11'
20:09  artli: Ok, but how? :)
20:10  lieuwe: nosklo: hm, my problem lies somwhere else
20:10  nosklo: artli: unicodeobj = mybytestring.decode('cp1251')
20:10  Taos: lieuwe: what is your problem?
20:10  Luyt_: vr6: I think so, but I'm not sure since I've never used my database driver like that
20:10  nosklo: artli: utf8encodedbytestring = unicodeobj.encode('utf-8')
20:10  lieuwe: Taos: I'm trying to get all these files to my renderer
20:10  artli: nosklo: Ok, thanks a lot
20:10  lieuwe: Taos: but for some reason it borks
20:10  Taos: lieuwe: paste some code?
20:11  chaoflow: How can I put something into a class dictionary after the class is created?
20:11  vr6: Luyt_: its oursql, I'll test it out!
20:11  lieuwe: Taos: won't do much good without the datafiles, but surer
20:11  nosklo: chaoflow: MyClass.foo = something ?
20:11  lieuwe: Taos: http://pastebin.com/LcF0pm9q , the problem seems that my queue doesn't get filled
20:11  nosklo: chaoflow: your question isn't fully clear
20:11  lieuwe: Taos: which seems correct, as it aint finding any files
20:11  chaoflow: nosklo: ouch, that was obvious - thx!
20:12  lieuwe: Taos: but my filemanager tells me there are like 600 there
20:12  Taos: lieuwe: your threading -_-
20:12  nosklo: er, infobob ?
20:12  lieuwe: Taos: wut?
20:12  Taos: lieuwe: why are you threading D:
20:12  lieuwe: Taos: them render is IO intensive
20:12  Taos: lieuwe: anyway
20:12  Taos: lieuwe: change how os.walk returns see this
20:13  lieuwe: Taos: that made no sense?
20:13  mbreslin: is there a simple way to catch all exceptions that could be thrown by urllib.urlopen, including asking for credentials?
20:13  Taos: lieuwe: http://codepad.org/1o9jIqe6
20:14  nosklo: mbreslin: why do you want to catch them all? You should catch only the ones you plan into handling
20:14  mbreslin: nosklo: i want to return None on any exception
20:14  nosklo: mbreslin: yeah, don't do that
20:14  Taos: mbreslin: you dont wanna do that
20:14  lieuwe: Taos: how is that different from what I'm doing?
20:15  Taos: lieuwe: because im using a generator ;)
20:15  lieuwe: Taos: good point, but doesn't os.walk return a generator?
20:15  jhl: habnabit, nosklo: "%-d" is what I was looking for.
20:15  nosklo: jhl: great, but I don't think it's cross-platform
20:15  Taos: lieuwe: technically but it doesn't handle the files in the two other results
20:15  jhl: As nosklo mentioned, it might not be standard across platforms.
20:16  lieuwe: Taos: two other results?
20:16  jhl: Luckily, neither am I.
20:16  mbreslin: nosklo: ok, i want to catch anything like lookup error or anything that asks for a password ;p
20:16  Taos: lieuwe: dirs and files are lists inside a tuple
20:16  filePeter: What to return from a function to check if it worked or not? if (function()): …  - Return -1 for error and what for noerror?
20:16  lieuwe: Taos: oh, I'm joining them filenames wrong, durk
20:16  Taos: lieuwe: well there is that
20:17  nosklo: mbreslin: the general approach when using a library that can raise an exception, is to try it without catching, and you'll see the error - then you can catch that; the other good idea is to look at the documentation; it should document which exceptions are raised and what they are for
20:17  Luyt_: filePeter: Usually you raise an exception if something goes horribly wrong.
20:17  nosklo: filePeter: when it doesn't work, you rais an exception
20:17  Luyt_: However, if you work at Google and use C++, you're not allowed to use exceptions.
20:17  nosklo: filePeter: so you can assume that the function worked, no need to return anything
20:17  nosklo: Luyt_: sounds reasonable
20:17  Taos: Luyt_: Im supprised they use C++...
20:18  nosklo: you shouldn't be allowed to use C++ in first place
20:18  mbreslin: nosklo: ok, it's a large list of urls (140k) some random new thing keeps poppying up after like an hour ;p
20:18  mbreslin: s/poppying/popping
20:19  mbreslin: (though poppying is fun to say outloud)
20:19  lieuwe: also, wtf is up with python not garbage collecting threads on a crash?
20:19  Taos: mbreslin: find out work out what the specific exceptions are and then except for them
20:19  hackeron: is there anything equivalent to ruby gems in python? -- I mean being able to do install/uninstall/update-all, etc -- I know of easy_install but it doesn't update or uninstall from what I can tell
20:19  Luyt_: Google uses a lot of languages, and they have style guides for them all. See http://code.google.com/p/google-styleguide/
20:19  Taos: lieuwe: because python hates you using threads ;)
20:19  Taos: Luyt_: Mmm
20:20  lieuwe: Taos: well, yeah, but using threads for this is a bit silly
20:20  KirkMcDonald: Luyt_: And Google's Python style guide is... really different from PEP8.
20:20  ayust: hackeron: http://pypi.python.org/pypi/pip
20:20  sproingie: Luyt_: pointedly missing is a java style guide, considering google writes everything in java
20:20  lieuwe: Taos: if it'd be possible to do inter-process comunication easily I'd go with processes
20:20  Luyt_: KirkMcDonald: I noticed that too, earlier. So be it ;-(
20:20  hackeron: ayust: pip doesn't update from what I can tell?
20:20  ayust: but it does uninstall
20:20  Taos: lieuwe: maybeso
20:20  hackeron: ayust: right, I want update too
20:21  Luyt_: KirkMcDonald: In practice I've noticed that a suboptimal styleguide is more useful than a mix of different styles (in a big project)
20:21  sproingie: "don't use exceptions" is way more than a style guide, that's coding standards
20:21  KirkMcDonald: Luyt_: Actually, it's less different from PEP8 than I remember.
20:21  ayust: well, technically uninstall+install is equivalent to update, if the conf files are external
20:21  KirkMcDonald: Luyt_: But yes, consistency is key.
20:21  ayust: aside from possibly grabbing a bit more data
20:21  ayust: but that's about as close as it gets if you're pulling packages straight from PyPI
20:22  hackeron: ayust: :(
20:22  sproingie: would have been nice if they shared their java coding standards.  i guess you can see them on display in stuff like guava and gwt tho
20:22  nosklo: hackeron, ayust: pip install --upgrade
20:22  Luyt_: KirkMcDonald: At the moment I'm working on a database system which names all its tables like 'TBL_contactPersons' and has fields like 'person_name'.  And those 'contact' hungarian prefixes are pretty random
20:22  hackeron: nosklo: You must give at least one requirement to install (see "pip help install")
20:22  nosklo: hackeron: exactly
20:22  ayust: hackeron: yes, add the package name
20:22  ayust: to the command line
20:22  hackeron: nosklo: I want all packages
20:23  nosklo: hackeron: use a for-loop then
20:23  Taos: hackeron: huh? all packages?
20:23  hackeron: Taos: yeh, kind of like apt-get upgrade
20:23  hackeron: Taos: or gem upgrade
20:23  Luyt_: KirkMcDonald: I'd rather name my persons table 'Person' and the name field just 'name'. The scope, by table aliasing, will be clear anyway without all those nasty prefixes.
20:23  hackeron: nosklo: huh?
20:23  KirkMcDonald: Luyt_: Man you don't have to complain to me about Hungarian notation, I've used the Windows API.
20:24  nosklo: hackeron: for package in lsit_of_packages_i_want: ....
20:24  hackeron: nosklo: where do I get the list?
20:24  Luyt_: KirkMcDonald: The guys who came up with this database naming scheme were also Microsoft-only developers
20:24  sproingie: using javascript now that uses hungarian notation.  hatesssss it
20:24  nosklo: hackeron: you keep it yourself
20:24  hackeron: nosklo: right, then it's not what I'm looking for
20:24  nosklo: hackeron: by the way, pip isn't like gem or not even *close* to apt-get
20:24  nosklo: hackeron: use apt-get to install your packages, if you want that functionality
20:24  hackeron: nosklo: I'm looking for something like gem
20:25  nosklo: hackeron: use gem
20:25  hackeron: nosklo: I can use gem with python?
20:25  habnabit: hackeron: People like gem?
20:25  nosklo: hackeron: no, it's ruby only - there's no equivalent in python
20:25  hackeron: :(
20:25  nosklo: hackeron: the best you can do is use apt-get
20:25  nosklo: hackeron: it works with python packages
20:25  habnabit: hackeron: All of the ruby programmers I know hate it.
20:25  hackeron: nosklo: it's hugely out of date on ubuntu
20:26  nosklo: hackeron: really? it seems updated on my copy of ubuntu
20:26  hackeron: habnabit: erm, what, lol?
20:26  nosklo: hackeron: which version of ubuntu are you on?
20:26  nosklo: hackeron: and which package are you installing?
20:26  hackeron: nosklo: natty
20:26  Luyt_: I'm on BSD and many python packages are also in the ports tree. Installing them is trivial.... cd /usr/ports/devel/py-pkgname && make install clean
20:26  hackeron: nosklo: say django or django-debug-toolbar or gevent
20:26  hackeron: nosklo: pretty much everything is out of date
20:26  habnabit: hackeron: Say that again in english.
20:26  nosklo: hackeron: it's not hugely outdated then... django is 1.2.3
20:27  hackeron: nosklo: well, it's out of date
20:27  nosklo: habnabit: the latest is 1.2.4 so you're only one release below - that's a good tradeoff for having sane packageing
20:28  hackeron: nosklo: currently I use easy_install and various hacks like this to keep things up to date in my development environment: yolk -U | cut -d ' ' -f 2 | xargs easy_install
20:28  hackeron: nosklo: wish python had something like gem/bundle though :(
20:29  nosklo: hackeron: I use apt-get for things I don't care and install by hand things I care. I don't use easy_install/pip at all
20:29  Varriount: I am forced to use windows, heh
20:30  seku: is installing python packages on windows harder?
20:30  Varriount: Sometimes
20:30  pLr: hi, im using python 3.1 with urllib -- how can i change urllib.request.urlopen to handle a file filled with urls (foreach..) instead of a single hardcoded link like http://paste.pound-python.org/show/1735/
20:30  sproingie: for pure python it's just as easy
20:30  Varriount: Compiling them is a pain
20:30  Luyt_: Nah, I use easy_install, and some come with their own installer, like win32com
20:31  seku: umm... couldn't you install cygwin or something
20:31  Varriount: Not all luyt
20:31  Varriount: I have mingw, it just that I would like to use pip
20:31  Luyt_: PIL also has a installer ;-) But I agree compiling them from src can be pretty nasty
20:31  hackeron: nosklo: well, you must have a lot of time to kill then - what about deployment? -- in ruby, I just do bundle install and my GemFile has a list of all supported versions
20:32  Varriount: And despite pip saying it reads the distutils config files, it doesn't on win7
20:32  nosklo: hackeron: it's not that hard as you make sound
20:32  nosklo: hackeron: having the latest software isn't important to me, specially on deployment
20:32  Varriount: Is for me
20:32  nosklo: most packages I just use whatever is on apt-get
20:32  hackeron: nosklo: it is, you have to use virtualenv and a bunch of easy_install or pip commands, or keep a copy of all libraries you care about and update manually - it's very hard
20:33  nosklo: hackeron: I care about very few libraries
20:33  Varriount: Is there anything with easy_install to update all packages you have?
20:33  hackeron: nosklo: you can't rely on apt-get - an update can break your application
20:33  psykidellic: hackeron: Same can be said about Gem also.
20:33  hackeron: Varriount: no :( - but you can run this: yolk -U | cut -d ' ' -f 2 | xargs easy_install
20:33  Luyt_: ideally you want the same stuff on your dev machine, your staging server, and your production servers. Subtle breakage due to version difference is unacceptable in production.
20:33  hackeron: psykidellic: how so?
20:33  nosklo: hackeron: not really - I use maverick meerkat so no version updates, only security fixes
20:33  psykidellic: How would apt-get break?
20:34  hackeron: psykidellic: you create a GemFile with all supported versions and run bundle install -- done
20:34  hackeron: psykidellic: and it will keep the gems you want up to date and those you don't at the supported version
20:34  hackeron: psykidellic: say a new version of a library that breaks backward compatibility?
20:34  cwillu_at_work: hackeron, so, it does the same thing that apt does?
20:34  hackeron: cwillu_at_work: not at all
20:34  psykidellic: hackeron: Eh then dont apt-get that library.
20:35  cwillu_at_work: hackeron, apt allows you to pin packages
20:35  hackeron: cwillu_at_work: what if you still want security updates?
20:35  cwillu_at_work: hackeron, you can specify that
20:35  hackeron: cwillu_at_work: also, the packages in apt are out of date
20:35  cwillu_at_work: hackeron, that would depend on the package, and its source
20:35  psykidellic: hackeron: Well then use your deployment scripts etc.
20:36  markimpgs: Can someone help me with iphone-python?
20:36  hackeron: cwillu_at_work: and you can't rely on apt to be available where you deploy your application
20:36  cwillu_at_work: to say nothing of not having bleeding edge dependencies
20:36  cwillu_at_work: sure I can
20:36  cwillu_at_work: why wouldn't I be able to?
20:36  hackeron: psykidellic: I do, but it's a pain to do it all manually, so my question was quite simple, is there something like gem/bundle in python - guess there isn't :(
20:36  kerio: distribute + pip?
20:37  psykidellic: hackeron: Simple question No. And if you need such bleeding edge in production, maybe you want to look into it.
20:37  papna: markimpgs: Probably not.
20:37  psykidellic: hackeron: Also, I am not sure I can say Gem will be there but not apt-get if its Ubuntu.
20:37  ssbr_: kerio: pip requires setuptools
20:37  hackeron: kerio: doesn't handle updates
20:37  ssbr_: specifically, easy_install
20:37  markimpgs: papna: =/ thanks
20:37  papna: markimpgs: If they could, you'd have to ask your actual question.
20:38  hackeron: psykidellic: gem is a core part of ruby - if you can say ruby 1.9 is there, gem will be there too
20:39  ssbr_: hackeron: the closest thing bundled with python is distutils
20:39  ssbr_: I do believe you're wrong about pip not handling updates though
20:39  markimpgs: papna: I can build the interface but I can not use the events
20:39  markimpgs: papna: sorry my english
20:39  hackeron: psykidellic: and no, I have a list of production and development versions, then I just do bundle update and it figures everything out based on if my environment is deployment, testing or production - it's really sexy
20:40  hackeron: ssbr_: hmm? - nothing in the manpage and can't find much on google
20:40  hackeron: ssbr_: only thing I found was yolk -U | cut -d ' ' -f 2 | xargs easy_install
20:40  kerio: apt does that too
20:40  ssbr_: hackeron: what is that supposed to do?
20:40  psykidellic: Okay, Gem is awesome. We get that.
20:40  hackeron: ssbr_:  equivalent to 'gem update'
20:40  Varriount: ^
20:40  psykidellic: kerio: But they dont have the latest libs.
20:40  sproingie: someone actually likes gem?
20:40  Varriount: point of fact, python doesn't have GEM
20:40  ssbr_: hackeron: oh, you want to update everything.
20:41  ssbr_: that seems slightly crazy!
20:41  hackeron: ssbr_: yep, but I want it to take into account specific python packages I don't want updated
20:41  hackeron: ssbr_: like a Gemfile
20:41  Taos: hackeron: use the -U flag
20:41  hackeron: Taos: where?
20:41  ssbr_: hackeron: pip (and presumably easy_install) let you update a whitelist
20:41  ssbr_: a blacklist is a pretty bad idea, honest
20:42  hackeron: ssbr_: they don't let you do either
20:42  ssbr_: hackeron: sure. just need a requirements file
20:42  Taos: why can you not create a list of packages and do a simple forloop
20:43  lvh: updating all packages sounds like a reasonable thing to want
20:43  lvh: if only for deployment
20:43  hackeron: Taos: that's what I do now, so I have 3 lists of development, test and production and hack my own way to having the versions I want and use virtualenv for each environment
20:43  ssbr_: sounds exactly wrong for deployment.
20:44  ssbr_: hello mysterious failures that cannot be isolated to a single cause
20:44  dash: huh. still here, eh?
20:44  dash: just checking
20:44  lvh: ssbr_: sorry, I meant to say "development"
20:44  lvh: very bad typo
20:44  KirkMcDonald: What's up with dash?
20:44  hackeron: Taos: and when working with bleeding edge has various hacks like  yolk -U | cut -d ' ' -f 2 | xargs easy_install then try to figure out the version of each to "lock" things
20:44  ssbr_: I think dash is a pretty cool guy.
20:44  lvh: KirkMcDonald: IRC vacation
20:44  KirkMcDonald: Ah.
20:44  ssbr_: eh wants us all to die and doesn't afraid of anything.
20:44  hackeron: Taos: it's very, very painful
20:45  KirkMcDonald: ssbr_: Consequences will never be the same.
20:45  Taos: hackeron: write a updater written in python using subprocess
20:45  ssbr_: and then dash was a zombie.
20:45  kerio: dash dun goofed
20:45  hackeron: Taos: aha, "write your own solution" is exactly what I'm doing - I came here to ask if there's something better than write your own :P
20:46  hackeron: Taos: guess not :(
20:46  Taos: hackeron: I don't see the problem writing your own script
20:46  ssbr_: lvh: honestly I wouldn't do it for development either.
20:46  ssbr_: unless I was in a virtualenv maybe
20:46  nosklo: hackeron: that reminds me, I have a updater script
20:46  ssbr_: Taos: there are lots of problems with that
20:46  ssbr_: like it being a waste of time
20:47  Taos: ssbr_: really?
20:47  ssbr_: why spend time writing something that you believe should already exist, when you could be doing real work, or else playing Half-Life 2 which is still a great game btw?
20:47  nosklo: hackeron: it updates bzr/hg/svn/git repositories to tip - it iterates over my project folder and runs the correct version control update command on each directory automatically
20:47  Taos: ssbr_: for shits and giggles?
20:47  ssbr_: Taos: that's what real work is for
20:47  ssbr_: HL2 of course has neither shits nor giggles. HL2 is serious business.
20:48  hackeron: Taos: 1) detecting current versions 2) updating to required version based on environment 3) updating to bleeding edge 4) freezing current versions 5) deployment options 6) whitelists/blacklists/requirelists - there are many things involved, it's not all that easy
20:48  Taos: hackeron: see what nosklo has sounds good
20:48  kerio: ssbr_: meh, it can be finished in 1:42
20:48  hackeron: Taos: it doesn't do much of what I just listed....
20:49  hackeron: nosklo: but sure, lets have a look if you don't mind :)
20:49  ssbr_: kerio: that is one fast speedrun
20:49  kerio: yup
20:49  ssbr_: I'm pretty sure just the walk to Barney takes longer than that
20:49  kerio: 1h42m
20:49  kerio: not 1m42s
20:49  ssbr_: oh that's different.
20:49  kerio: still fast
20:49  ssbr_: still fast.
20:49  ssbr_: as I said, serious business.
20:50  ssbr_: (except with achievements)
20:50  kerio: little rocket man is ^_^
20:51  nosklo: it's not good. every time I run it, something breaks on my system
20:51  nosklo: I don't like random updating to tip
20:52 --- r0bby is now known as robbyoconnor
20:55  subsume: how can I cleanse a string of all ascii chars
20:56  KirkMcDonald: subsume: Can you be more specific?
20:56  ivazquez|laptop: ''.join(c for c in S if ord(c) < 128)
20:56  subsume: http://dpaste.com/330096/
20:57  nosklo: ivazquez|laptop: that cleanses the string of *non*-ascii
20:57  subsume: stupid service is returning a bunch of junky ascii characters. I just want unicode
20:57  subsume: and ignore all else.
20:57  ivazquez|laptop: Whoops. Right.
20:57  sproingie: not too hard to reverse it
20:57  hackeron: nosklo: sucks :( - yeh, without proper package management like gem/bundle/apt-get it is a huge pain :( - unfortunately apt-get is frequently out of date, I wanted to use django 1.2 for it's pluggable authentication backend, so had to install it and it's dependencies with easy_install, and been having various messy scripts to manage python libraries - really wish for something like gem/bundle in ruby :(
20:57  kerio: str.translate(None, string.maketrans("", "")[:128])
20:57  deepy: nosklo: wouldn't inverting < help?
20:57  ssbr_: subsume: uh, what?
20:57  nosklo: subsume: you seem confused about what unicode/ascii is
20:57  subsume: its true, I am.
20:57  ssbr_: subsume: the ascii characters are a strict subset of the unicode characters
20:57  ivazquez|laptop: subsume: Did you forget to decode it?
20:57  deepy: hackeron: see if pkgsrc is supported on your system
20:58  hackeron: deepy: nope
20:58  subsume: ivazquez|laptop, I don't even see what those would decode too
--- Log closed Tue Jan 18 21:21:56 2011
--- Log opened Tue Jan 18 21:22:19 2011
21:22 --- Users 780 nicks [0 ops, 0 halfops, 0 voices, 780 normal]
21:22  lvh: hackeron: If you needed a magic mysql library that didn't block, then you should've used a similar non-blocking magic mysql library
21:22  lvh: (for twisted, that is)
21:22  lvh: twisted.enterprise
21:22  hackeron: lvh: it had to use a non blocking C mysql driver, yes - no way around that
21:22  lvh: hackeron: That's my point
21:22  nosklo: qwerty1793: that for loop seems great
21:22  encrypted: sproingie: Thankyou Sir.  Good thinking - xoxoxo
21:23  hackeron: lvh: well, how do I use twisted.enterprise with django?
21:23  lvh: hackeron: X needs a magic driver to perform and doesn't perform without it
21:23  lvh: hackeron: I'm pretty sure someone wrote something for that
21:23  hackeron: lvh: in gevent, I just do pymysql.install_as_MySQLdb() - what's the equivalent in twisted?
21:23  lvh: I don't actually use django, just WSGI
21:23  nosklo: qwerty1793: for f in list_of_f: inpt = f(inpt) # perfect - it is concise and clear
21:23  lvh: hackeron: however, I remember there being pretty much the equivalent of that
21:23  hackeron: lvh: well, same with twisted really, what's your point?
21:23 --- Channel #python was synced in 101 seconds
21:24  lvh: hackeron: That you can't pretend "it takes 5 minutes with gevent and much longer with Twisted" is a reasonable benchmark if gevent gets to use a greenified mysql driver and twisted has to use blocking mysqldb connections
21:24  hackeron: lvh: but in twisted, it was much harder and required modifying django code last I looked at it - whereas with gevent, it registers an alternate mysql driver and that's it, you just serve with WSGIServer
21:24  lvh: hackeron: I'm pretty sure that's not true (about the modifying django code)
21:24  lvh: it used to be, but hasn't been since django actually had pluggable drivers
21:25  hackeron: lvh: it takes 30 seconds to take pretty much any django project and serve it with gevent in a highly concurrent way
21:25  hackeron: lvh: I couldn't find such way to do it with twisted
21:25  qwerty1793: nosklo: thanks, but i could have sworn i saw a built in function ("apply" ?) a while ago that did the same thing
21:26  nosklo: hackeron: twistd -no web --wsgi=myapp
21:26  lvh: hackeron: Since Twisted doesn't actually use greenlets, if your django's mysqldb is configured to use a threadpool, you actually need zero changes
21:26  hackeron: lvh: this is the entire gevent script to serve: http://pastie.org/1474910
21:26  lvh: hackeron: nosklo just gave you the twisted equivalent, that's a shell command, not even a script
21:26  lvh: as in, not even a greenified mysql driver
21:26  hackeron: nosklo: what would myapp be in that context?
21:26  lvh: hackeron: the wsgi application
21:27  nosklo: hackeron: myapp.py is: from django.core.handlers.wsgi import WSGIHandler; application = WSGIHandler()
21:27  hackeron: lvh: my WSGI app is from django.core.handlers.wsgi import
21:27  hackeron: lvh: WSGIHandler
21:27  hackeron: nosklo: ah, ok, let me try and benchmark
21:27  lvh: hackeron: So, make a module that does that import and exposes an "application"
21:27  nosklo: hackeron: er, actually, the command is wrong
21:27  nosklo: hackeron: twistd -no web --wsgi=myapp.application
21:27  lvh: hackeron: that's basically how you serve wsgi
21:27  bluespark: thank you for recommendations guys... I will jump on pyGTK for sure. Now I have one more question, is about "pyGobject"? Some simple definition I would like to know?
21:28  lvh: usually it's called xxx.wsgi for mod_wsgi though
21:28  lvh: hackeron: If it's significantly slower, that's probably a mysql threadpool configuration issue
21:28  lvh: (also, obviously, don't use the greenified mysql driver with twisted)
21:28  m0ar: Hope you guys accept this question in here, remotely related.. My vim only applies syntax colouring when saving and reopening a python file, never when it's being written into for the first time. Any ideas?
21:29  lvh: hackeron: In all seriousness though, nobody uses this for serving wsgi
21:29  hackeron: lvh: why not?
21:29  lvh: hackeron: The real apps I've seen end up reverse proxying nginx in front of it anyway
21:29  ivazquez|laptop: It doesn't know you want a Python file when you first start vim.
21:29  lvh: hackeron: because people have written wsgi servers in C.
21:29  ssbr_: process pools are so great
21:29  nosklo: hackeron: because there are better alternatives for wsgi than both gevent and twisted
21:29  hackeron: lvh: I reverse proxy nginx, what's your point?
21:29  Luyt_: nginx adresses the spoonfeed problem
21:29  lvh: hackeron: dude, calm down a bit
21:30  lvh: hackeron: reverse search for "what's your point"
21:30  sproingie: i gotta learn how to set up nginx.  i'm still using pound right now.
21:30  hackeron: lvh: I am calm, I reverse proxy nginx to my django app that listens on a port on localhost - process pools are a giant memory leak
21:31  bluespark: Ok... I checking on google for "GObject"...what the hell is that? :)
21:31  lvh: hackeron: My point is that a) maybe percentages in your app server aren't that crazy important, and b) you can pull the same concurrency tricks in C using stuff like libev or libevent, and pretty much always have the Python code beat
21:31  hackeron: ssbr_: what if you have a request that can take several seconds to run due to IO? - you would need a separate process for each one - process pools is not a great way to handle concurrency
21:31  nosklo: bluespark: gobject is a C library to allow object-oriented code.
21:31  nosklo: bluespark: gtk is built on top of it
21:31  ssbr_: hackeron: wait, what are we talking about?
21:31  nosklo: bluespark: are you on windows, by any chance?
21:31  ssbr_: hackeron: I'm talking about something completely different :*
21:32  ssbr_: oh, I see
21:32  bluespark: nosklo; no... good Lord.. I hate windows
21:32  hackeron: lvh: percentages? - my app is for a more or less embedded application, so I want to minimise memory use and run as a single process - I managed to do it with gevent with a couple lines of code and it works really well - I'll try with twisted like you suggested
21:32  ssbr_: hackeron: maybe not, but they're probably necessary for running a server, considering there are many ways to accidentally hang a greenlet/thread/callback/etc.
21:32  nosklo: bluespark: ok.
21:32  ssbr_: and processes are the only way that let you continue on in all cases and also recover from the failure
21:32  nosklo: bluespark: me too.
21:32  lvh: hackeron: About this giant memory leak thing: yes, but I haven't heard any other solution that makes it reasonably work across multiple processes
21:32  ssbr_: I have it on good authority that mod_wsgi does this well
21:32  Sub_Zero: http://stackoverflow.com/questions/4702422/python-twisted-on-windows
21:33  ssbr_: hackeron: anyway, I agree with you
21:33  ssbr_: hackeron: WSGI sucks
21:33  hackeron: lvh: I don't want multiple processes :)
21:33  bluespark: nosklo; what are you using.... which sys
21:33  lvh: hackeron: You're on a one-CPU thing?
21:33  ssbr_: hackeron: unfortunately, your position appears to be that it's OK to work around WSGI by monkeypatching libraries
21:33  nosklo: bluespark: gnu/linux
21:33  ssbr_: hackeron: I would not do this, it's veery risky.
21:33  hackeron: lvh: no, quad code, but the cores are busy enough doing video compression
21:33  hackeron: lvh: leo1.xanview.com - user/pass: demo/demo
21:33  hackeron: lvh: just so you know what I'm talking about here :)
21:33  ssbr_: hackeron: instead, use actual async code. patch django to work with twisted/eventlet explicitly, etc.
21:33  Back2Basics: does anyone know if winpe falls into a category listed in here http://www.python.org/dev/peps/pep-0011/ ?
21:34  kerio: hackeron: slooow
21:34  lvh: hackeron: Right, okay. That's a bit of an unusual situation for a web server, though, hence why process pools are still popular and not always useless
21:34  cwillu_at_work: kerio, that's because he just got 50 hits from this channel ;p
21:34  sproingie: Back2Basics: i suspect winpe does not fall on most platform lists
21:34  nosklo: Back2Basics: what is winpe?
21:34  nosklo: oh, windows pe
21:34  cwillu_at_work: nosklo, windows live cd
21:34  hackeron: ssbr_: I want to avoid that like the plague, I don't want to rewrite my patches every new django release
21:34  sproingie: Back2Basics: winpe is just windows with some restrictions
21:34  lvh: hackeron: Since, like ssbr said, accidentally hanging a thread or especially a greenlet is hardly unheard of
21:35  ssbr_: hackeron: you're supposed to actually submit them to django you kno
21:35  lvh: hackeron: And, once that happens with a single gevent WSGI server, your entire web server just hangs
21:35  hackeron: lvh: oh, not at all, but a process pool of something very concurrent like twisted or gevent is better than just a normal process queue
21:35  ssbr_: hackeron: your solution is basically really bad. Don't use Django in ways it was not meant to be used. :/
21:35  ssbr_: there *are* asynchronous web frameworks. Use those.
21:35  lvh: hackeron: Perhaps we're talking about different things
21:35  kerio: lvh: what about something made with twisted.web?
21:35  lvh: hackeron: Neither me nor ssbr is suggesting fork-per-connection
21:35  hackeron: ssbr_: huh?
21:35  lvh: hackeron: I'm pretty sure we're both suggesting roughly NUMCORES forks
21:36  hackeron: lvh: and I never had a handing greenlet yet with gevent, been serving a single process with gevent for months
21:36  ssbr_: hackeron: Django works on WSGI, and you are providing it something similar to, but not, WSGI
21:36  hackeron: lvh: not to say it can't happen, but I have tests in case it does
21:36  lvh: hackeron: Gawker never had a leaked password before a few weeks ago either
21:36  ssbr_: lvh: I don't know enough about multiprocessing to suggest exactly how many processes
21:36  lvh: I'm just saying it's not very hard
21:36  FireSlash: if I don't need cross platform support, and need to use a different lib's mainloop (Twisted), what's a good windows compatible GUI framework?
21:36  hackeron: lvh: why? - the other cores are busy enough
21:36 * cwillu_at_work watches the traffic drive passed the window
21:36  lvh: It's certainly not unheard of
21:36  ssbr_: just that having more than one, and being able to restart one if it hangs on a single request, is nice stuff
21:37  sproingie: Back2Basics: the installer probably doesn't understand winpe, you might have to do some hand-hacking to make python work that way.  if you can work it back into the installer, i'm sure the patch would be welcome
21:37  lvh: hackeron: Sorry, more detail: not in your particular case perhaps, but, in general, for web servers
21:37  hackeron: ssbr_: yeh, I don't need that :)
21:37  hackeron: lvh: yeh, I know what you mean
21:37  ssbr_: hackeron: that's what you think, until it happens
21:37  ayust: FireSlash: http://twistedmatrix.com/documents/current/core/howto/choosing-reactor.html maybe good reading?
21:37  ssbr_: hackeron: but anyway, the point about Django stands
21:37  lvh: hackeron: I had a thing with some pretty big number processing behind it
21:37  ssbr_: if you want an asynchronous web framework, use one.
21:37  hackeron: lvh: btw what was the twisted command? - I tried to copy paste but it says -- not recognized
21:37  Back2Basics: sproingie: it gets even more difficult.  win pe doesn't understand msi's (by default)
21:37  FireSlash: ayust, cheers
21:38  cwillu_at_work: Back2Basics, what's the problem you're seeing?  my first guess is that you're running into the max number of allowed processes or some such, but that's just a guess
21:38  lvh: hackeron: That was never a problem because I didn't have web servers that were also app servers
21:38  lvh: then again we had about 1.2k EC2 instances
21:38  ssbr_: Otherwise you actually *do* need multiple processes because someday it *will* hang, because it can really-block on a lot more than just SQL requests
21:38  lvh: so maybe that's a different scale
21:38  hackeron: ssbr_: yeh, I know, but it works just fine in an asynchrenous setting through gevent, so why not :P
21:38  sproingie: Back2Basics: maybe try BartPE?  or are you stuck with WinPE?
21:38  Back2Basics: sproingie: I used to copy the c:\python26 dir over and that's how I would install in on the 32 bit version.
21:38  ssbr_: hackeron: because it's a terrible idea?
21:38  ssbr_: hackeron: that you even got this far is bad
21:38  hackeron: ssbr_: how so?
21:38  ssbr_: hackeron: I just spent the past several minutes explaining
21:38  Back2Basics: sproingie: I'm stuck with 64 bit  which bart pe doesn't support.
21:38  ssbr_: I assumed you were reading. My apologies.
21:39  hackeron: ssbr_: I want to use an MVC because it's a website - but I don't want it to require a process pool
21:39  hackeron: ssbr_: I did read, it didn't make sense
21:39  lvh: hackeron: you need a module that exposes an attribute called "application"; then twisted web --wsgi=module.application
21:39  sproingie: Back2Basics: ah.  it should be just a matter of copying the dir and the registry hive
21:39  ssbr_: hackeron: if it doesn't make any sense, either I'm more delirious than I thought, or you don't really know what the monkeypatching does
21:39  lvh: hackeron: Is your mysqldb configured to use a thread pool?
21:39  sproingie: Back2Basics: not too hard to write a script that applies the registry bits
21:39  Back2Basics: cwillu_at_work: python.exe errors out with "platform unsupported" or some such error.
21:39  hackeron: lvh: not yet, but I'll change that -- you said twistd -no web --wsgi=wsgi_app.py -- that says /usr/bin/twistd: option -- not recognized
21:40  Back2Basics: sproingie: it uses the registry?
21:40  sproingie: Back2Basics: didn't think it depended on it
21:40  ssbr_: hackeron: Django can block. you have patched it to work with an event loop and not block in certain circumstances. You have zero guarantee that this patching is perfect.
21:40  sproingie: Back2Basics: if python.exe is complaining then you might have to hack the platform detection code and compile it custom
21:40  ssbr_: hackeron: if it really blocks on something, without yielding to the event loop, the app halts
21:40  Back2Basics: sproingie: yeah.  I thought making builds for linux and mac.. they wouldn't include reg keys.
21:40  hackeron: ssbr_: I know roughly what the monkeypatching does, but the point is I don't want to know and I don't care - I just want it to work and so far it does :P - if there's a better not too complicated way to do this without skyrocketing my memory use, I'm all ears :P
21:41  ssbr_: hackeron: this is much harder to have happen on accident if you use a web framework designed for asynchronous use
21:41  ssbr_: hackeron: it *DOESN'T* work
21:41  Back2Basics: sproingie: yeah that's what I was thinking.
21:41  lvh: hackeron: hackeron that's not what I said
21:41  ssbr_: hackeron: there is a very, very large probability that it blocks on more than just what you have accounted for
21:41  deepy: hackeron: pkgsrc does not interface with pip or pypi
21:41  lvh: hackeron: You're thinking of nosklo, who later corrected that
21:41  sproingie: Back2Basics: all it does is register an installation far as i know.  but it sounds like you might need to hack the executable.  be a good patch to submit to support winPE once you get it working
21:41  hackeron: ssbr_: well, try making it block on leo1.xanview.com :P
21:41  deepy: (told you I'd get back to you on that one)
21:41  ssbr_: hackeron: I haven't seen your code, and quite frankly I don't care enough
21:41  ssbr_: hackeron: anyway
21:42  sproingie: Back2Basics: it should compile cleanly with VS express
21:42  ssbr_: hackeron: the better not-too-complicated way is to use a web framework that is designed for asynchronous use
21:42  ssbr_: hackeron: that is, one that is NOT built on WSGI, but built on some asynchronous web server
21:42  lvh: hackeron: But if the argument is "gevent often does a good job making blocking python code appear non-blocking", then yes, sure
21:42  ssbr_: and then you reverse proxy it through nginx or whatever
21:42  hackeron: ssbr_: like what?
21:42  kerio: lvh: i'd say that it makes a surprisingly good job
21:42  ssbr_: hackeron: I think nevow is such a thing, but I never paid much attention
21:42  ssbr_: you can also use twisted.web directly
21:42  Back2Basics: sproingie: Oh yeah. I was wondering about visual studio.  does it have a choice of platforms?  (this might be easy)
21:43  NelleV: is there a way to say to easy_install "please do not try to connect to internet" ?
21:43  kerio: NelleV: detach your ethernet cable
21:43  Back2Basics: hehe kerio
21:43  lvh: hackeron: don't listen to ssbr_, he's full of lies. yes wsgi blocks, yes wsgi sucks, unfortunately it has craploads of software written for it
21:43  lvh: such is life with PJE
21:43  hackeron: lvh: and yeh, that's kind of the point, it was just so easy to add and my memory use went down from over 800MB to like 30MB - so now I use that extra memory for postgres to cache indexes :) - I understand the many drawbacks, but it works in my case - it's not a global application with millions of users, but maybe 5-10 users
21:43  sproingie: Back2Basics: the source should come with VS project files.  not sure how up to date they are but they shouldn't give much trouble with VS express
21:44  NelleV: kerio: it can't connect to internet. I have very good proxy settings that avoids my computer to connect to any dumb site (or useful...)
21:44  lvh: hackeron: heh
21:44  lvh: hackeron: yeah, I had an 80TB dataset, we tried to get some of it into memory ;-)
21:44  sproingie: Back2Basics: long as you compile it 64 bit, shouldn't be any special target platform considerations, you'll probably have to hack the python source where it peeks at the platform
21:44  Luyt_: Python's extremely nice data structures pulled me into it, and away from C++ (STL gets pretty horrible with more-than-trivial data structures)
21:44  NelleV: kerio: found it
21:45  ssbr_: lvh: what?
21:45  vagvaf: hello people, is there any other page that i should read about distutils, other than docs.python.org ?
21:45  ssbr_: :<
21:45  Back2Basics: I've been reading blogs about this topic one of them listed "You'll need to install the Microsoft C runtime redistributables. An installer to do this is buried in Microsoft Visual Studio 2008. The are installed to the C:\Windows\WinSxS subdirectory. Take a look at this directory and see if Microsoft really has solved "DLL Hell"."
21:45  ssbr_: it's what I'd do if process pools weren't good enough
21:45  hackeron: ssbr_: I need like a well supported MVC - djasngo makes development much faster and running it through gevent makes it concurrent in my case - I understand it's not exactly robust, but for what I'm using it, it is truly concurrent and I haven't had a hanging greenlet thus far
21:45  ssbr_: and they're good enough for my use cases
21:45  sproingie: Back2Basics: because i don't think that "unsupported platform" thing is from windows -- far as windows is concerned, winPE is vista
21:45  hackeron: ssbr_: django*
21:45  sproingie: or probably win7 by now
21:45  pigdude: or cat
21:46  lvh: hackeron: out of interest, did you try any of the other mvc frameworks
21:46  hackeron: lvh: :) - I'll try the twisted method though with the threadpool and get back to you, thanks
21:46  ssbr_: hackeron: yours is actually the most flawed argument that has any support
21:46  lvh: (man I hate the name)
21:46  lvh: hackeron: Why? it works
21:46  deam: can anyone advice me a python rrdtool wrapper? Ideally it supports both Windows, Linux and OSX.. some of the libraries seem to be unmaintained..
21:46  sproingie: Back2Basics: i'd say it's become more of a "DLL Purgatory" now
21:46  hackeron: lvh: just to learn more about twisted, everyone seems to love it :)
21:46  lvh: hackeron: okay, you get a few nice features like an ssh admin console into your web server
21:47  lvh: hackeron: personally I'd wait until you have something that twisted is worth switching for
21:47  ssbr_: hackeron: that said, I don't see how Django's MVC makes development faster. MVC is like, 30 lines of code. The real cool thing is all the contrib stuff django comes with -- auth, comments, etc.
21:47  hackeron: lvh: I tried rails very recently, really like it so far, might rewrite some parts in it
21:47  ssbr_: but poor man's MVC is SQLA + jinja2 + some routing library
21:47  lvh: hackeron: that gevent doesn't do, like, say, stdio or something
21:47  sproingie: hackeron: rails 3.0 is pretty nice from what i've seen
21:47  lvh: quick, stop talking about rails before _habnabit wakes up
21:48  Back2Basics: sproingie: I'm thinking python (even the 64 bit versions) are looking for the 32 bit windows libs.
21:48  ssbr_: I love rails
21:48  ssbr_: they are the best way to travel anywhere
21:48  sproingie: far as i know it still comes with erb for its view layer, which i can't understand at all
21:48  lvh: hackeron: I meant pyton
21:48  lvh: python* even
21:48  _habnabit: lvh, your plan backfired; I wasn't watching #python until you said that!
21:48  hackeron: lvh: heh, but it's really, really good - from my experience with rails, I'm not completely restructuring my django project to look more like rails :P
21:48  ssbr_: _habnabit: maybe it was his plan to have his "plan" backfire
21:48  lvh: _habnabit: :(
21:48  hackeron: lvh: I'm now restructuring I mean
21:49  lvh: hackeron: Let's not get into that one
21:49  lvh: your project is using mysql though
21:49  sproingie: Back2Basics: not really sure, don't think i've ever compiled python 64-bit on windows
21:49  lvh: so rails isn't the worst part about your stack
21:49  hackeron: lvh: switching to couchdb actually
21:49  Back2Basics: sproingie: well I'm off to try it.
21:51  hackeron: lvh: but that's not done yet - another cool thing in rails is almost none of it blocks, so there's no need for gevent/monkeypatching for the most part :) - just to use a fiber version of rack. But yeh, that's going off topic abit.
21:51  kerio: twisted doesn't block either
21:51  hackeron: lvh: django does though
21:51  lvh: hackeron: I didn't say that.
21:51  hackeron: lvh: woops, sorry that's to kerio
21:51  lvh: hackeron: Yeah, django's pretty terrible
21:51  sproingie: i'm pretty sure activerecord blocks
21:52  lvh: (also, yes, I thought that too)
21:52  lvh: but I'm desperately trying to not talk about rails
21:52  ssbr_: Django needs to be dispersed into many independent modules that do not rely on Django's core
21:52  hackeron: sproingie: nope, only the mysql driver, but you either replace it to something else or dont' use activerecord (e.g. use mongoid)
21:52  kerio: isn't rails awesome?
21:52  lvh: because I'd like to get shit done tonight
21:52  ssbr_: and then we could definitely have an asynchronous django :T
21:52  ssbr_: kerio: aren't*
21:52  sproingie: i'm pretty sure all of rails is not async.  maybe it's mongrel that doesn't block
21:52  ssbr_: and yes, they are
21:53  ssbr_: never been taken anywhere faster than a jet, and following that, a railcar
21:53  deepy: ssbr_: the django orm is <3 in my opinion
21:53  sproingie: i'm pretty sure we're just being trolled now
21:53  hackeron: sproingie: no, mongrel actually blocks, thin doesn't
21:53  lvh: deepy: I can't figure out if you're serious or trolling
21:53  ssbr_: deepy: it's not <3 until it works asynchronously
21:53  ssbr_: lvh: what if I said it
21:53  deepy: lvh: I genuinely enjoy working in it with one exception!
21:53  ssbr_: the django ORM is <3 in my opinion
21:53  sproingie: can't say as i've kept up with ruby's webservers
21:54  hackeron: sproingie: it does provided you use a non blocking mysql driver
21:54  sproingie: the django ORM is horrendous
21:54  hackeron: heh, ORM war? :P
21:54  lvh: hardly
21:54  deepy: is storm better?
21:54  lvh: yes
21:54  sproingie: just about anything is
21:54  hackeron: I'll start, django's orm is better than sqlalchemy :P
21:54  lvh: pretty much everyth...
21:54  _habnabit: deepy, sqlalchemy is the best out there.
21:55  sproingie: hackeron: how about you do something different and hush
21:55  ayust: ORMs become a pain as soon as you try to do something not "ORM-ish"
21:56  _habnabit: ayust, like what?
21:56  sproingie: sqlalchemy is nice in that you're not stuck with the ORM level
21:56  deepy: _habnabit: is there anything special I can do in alchemy that I can't in django?
21:56  deepy: I'm entirely on the orm level
21:56  Luyt_: ORMs are nice for simple  'hello world' blog examples, but fail horribly with bigger data models.
21:56  ayust: _habnabit: like certain unorthodox queries that don't follow a nice object model
21:56  _habnabit: deepy, insert binary data, swap out your backend, separate your schema and relations from your mapped objects, ...
21:57  ayust: also
21:57  ayust: you lose a -lot- of performance with an ORM for many operations
21:57  _habnabit: deepy, oh, and there's none of this column__operator bullshit
21:57  lvh: ayust: Citation needed
21:57  Luyt_: The ORM can't possibly know how much data you need from the database.
21:57  _habnabit: ayust, sqlalchemy has a SQL builder as well as an ORM.
21:57  _habnabit: ayust, so, there you go.
21:57  ayust: _habnabit: yes, and we use sqlalchemy's query builder
21:57  ssbr_: Luyt_: "possibly" is a very hard thing to prove
21:58  ayust: I was specifically referring to the ORM portion
21:58  ssbr_: Luyt_: what if I could tell it how much I wanted?
21:58  deepy: _habnabit: I never deal with binary data in my database and I can't see how I benefit from swapping out hte backend or separating my schema and relations from the mapped objects
21:58  ssbr_: er, "can't possibly" rather
21:58  ssbr_: or perhaps "disprove"
21:58  Luyt_: ssbr_: Then you'd probably have to do much more work than formulating a conventional SQL query instead ;-)
21:58  sproingie: i've switched backends several times.  i can certainly relate to that
21:58  _habnabit: deepy, the middle point means more of "django is hilariously inflexible compared to how sqlalchemy is built."
21:59  sproingie: SA doesn't force you into an ORM to abstract backends tho
21:59  ayust: lvh: profiling runs of certain DB-intensive operations on our site (top500) that are 3x slower with ORM, and nearly all of that difference is the time spent in Python creating objects
21:59  _habnabit: deepy, I mean switching out which driver you use to connect to /the same database/
21:59  ssbr_: Luyt_: that argument is flawed
21:59  _habnabit: deepy, django can't handle that. At all. Period.
21:59  ssbr_: Luyt_: whenever providing the same information to the database takes more effort than an SQL query, fall back to specifying an SQL query
21:59  _habnabit: deepy, django-oursql has to completely replace parts of django.
21:59  deepy: Ah
21:59  lvh: ayust: Oh, yes that. I've stopped worrying about problems pypy solves in new code
21:59  ssbr_: so an ORM can provide the same information as an SQL query to the database, but be no more verbose
22:00  _habnabit: deepy, integrating oursql into sqlalchemy was a matter of just telling sqlalchemy how its `connect` function works.
22:00  _habnabit: deepy, aaaaand that was it.
22:00  Luyt_: ssbr_: And when most of your queries are like that, that pretty much defeats the purpose of using an ORM in the first place.
22:00  _habnabit: deepy, oh, and django doesn't have a query builder.
22:00  ssbr_: Luyt_: not really
22:00  _habnabit: deepy, and if you make the same query twice, you get two separate sets of mapped objects.
22:00  deepy: But I have no use OF a query builder
22:00  lvh: _habnabit: you mean str.__mod__? ;-p
22:00  ssbr_: Luyt_: it gives me a higher level of abstraction when I don't care, and lets me fall back when I do
22:00  ssbr_: sort of like how Python relates to C thanks to the C-API
22:01  Luyt_: ORMs could be nice for simple CRUD jobs.
22:01  _habnabit: deepy, and if you don't see any utility in separating schema and relations from mapped objects, you've never had a complex schema.
22:01  ayust: _habnabit: when 66% of your query time is spent in Python, ORM is a bad idea
22:01  lvh: _habnabit: "of course django has a query builder, they call it str.__mod__"
22:01  ssbr_: Luyt_: who do you think invented ORMs. :| |:4
22:01  _habnabit: lvh, ha ha ha
22:01  deepy: _habnabit: I've never had a complex schema no :)
22:01  Luyt_: The Indians?
22:05  Luyt_: I guess it depends on the complexity of your database whether it's advantageous to use ORMs.
22:06  sproingie: i think WebObjects was the first ORM that saw real use
22:06  SpComb: ORMs <3
22:06  Luyt_: It certainly solved a problem for people.
22:06  SpComb: but sqlalchemy is useable
22:07  SpComb: (<3 in the sense of </3)
22:07  sproingie: <3 in the sense that it looks like a butt
22:07  _habnabit: It looks more like a scrotum.
22:07  sproingie: =3
22:07  Luyt_: Looks more like an ice cone with two balls of ice in it to me.
22:08  Luyt_: But maybe I'm too optimistic
22:08  _habnabit: I'm just a fan of scrota.
22:08  sproingie: nice to know
22:08  Luyt_: If you get bald at old age, you might be able to grow new hair by transplanting your scrotum skin upon your scalp
22:09  lvh: must lead to interesting hairstyles
22:09  SpComb: sqlalchemy leaves you in control of your schema, and it doesn't stop you from using your relational database as a relational database
22:09  SpComb: compared to ORMs like ActiveObject that scoff at using silly things like foreign key constraints
22:10  joenp: Variables defined in a class outside method definitions = class variables, right?
22:11  Luyt_: Scrotum hairstyle is a somewhat sparse kind of hairstyle tho, I think. Might be appropriate if you like sparse matrices and sparse files.
22:11  bob2: joenp: 'class attributes' might be a clearer term, but yeah
22:11  bob2: Luyt_: tmi
22:11  kerio: methods are class attributes too
22:11  joenp: Point being that they are shared among all instances
22:11  Luyt_:  @staticmethod and @classmethod
22:12  bob2: TWOSHAY
22:12  SpComb: and SQLAlchemy's ORM knows how to do JOINs if you ask it to
22:12  lrh9: joenp: Ah. Trying to figure out OOP?
22:12  bob2: which ORMs don't do joins?
22:12  SpComb: and it supports transactions
22:13  joenp: lrh9: Actually, wondering why the hell my code works since I accidentally used a class attribute/variable instead of an instance one :D
22:13  _habnabit: bob2, guess!
22:14  bob2: haha no way
22:14  Luyt_: joenp: Maybe there is just one instance of that class in your app?
22:14  joenp: Luyt_: Nope. It's which player a playing card belongs to. But maybe the same player has won over and over, and I just didn't notice
22:15  kerio: joenp: is it an attribute of *the card*?
22:15  kerio: :<
22:15  Luyt_: I hope it was not for real money ;-)
22:15  joenp: kerio: Yup. To link it back to a player instance.
22:16  kerio: the player holds the card, the card doesn't hold the player
22:16  kerio: you add unnecessary reference change for each card operation
22:16  Luyt_: I'd model the card either being part of a deck, or in a player's hand.
22:16  joenp: kerio: Now that you mention it, I can't remember why that is there
22:17  joenp: Maybe it's linked with the 90.000+ card references after just a few games :P
22:17  kerio: Luyt_: yeah but the card doesn't hold the deck, the deck holds the card
22:17  Luyt_: kerio: I'd immediately agree with that.
22:17  lrh9: joenp: You were probably looking for a simple way to determine who the winner was based on what the winning hand was.
22:18  lrh9: I prefer "pure" OO, but it isn't always easy.
22:18  _habnabit: As opposed to what?
22:18  joenp: lrh9: Actually spot on. It was for determining the winner of at rick
22:18  joenp: a trick*
22:18  bob2: PEWAH
22:19  joenp: What would be a more elegant way to achieve that?
22:19  Luyt_: That reminds me of a slight memory leak (probably) in my webapp which requires me to restart it once a week. I dislike that. I want apps to run for years, like certain operating systems do.
22:19  joenp: Luyt_: You mean Windows ME, right?
22:20  qwerty1793: nosklo: ahh, turns out i was thinking of reduce()
22:20  Luyt_: joenp: Worse. CherryPy app under FreeBSD. There shouldn't be any leaks, but after 9 days or so, static requests take a minimum of 5 seconds, and that disappears after restarting the app.
22:20  NelleV: first time I ever hear of a memory leak in a web app
22:20  _habnabit: qwerty1793, `reduce` is not a thing you should use.
22:20  _habnabit: qwerty1793, not in any real code.
22:20  SpComb: http://blogs.tedneward.com/2006/06/26/The+Vietnam+Of+Computer+Science.aspx
22:21  Luyt_: NelleV: It could be a caching misconfig, I'm not sure about it. Only happened two times up until now, and I've adjusted the cache config somewhat
22:21  joenp: NelleV: Really? My card game also becomes slower with each round. Probably due to references++
22:21  Luyt_: (to cache only 1 hour instead of 24 hours)
22:21  lrh9: joenp: There is no easy solution. In my game hands are hashable, so I decided to use a dictionary with hands as keys and players holding hands as values. Looking up the winners would be as simple as doing dictionary[max(hands)] if your hand has a computed score. Remember though, in some games there can be ties where multiple hands are the "winner".
22:22  qwerty1793: _habnabit: what's so wrong about reduce?
22:22  _habnabit: qwerty1793, it's a very easy way to turn O(n) algorithms into O(n^2)
22:22  kerio: hehe
22:22  joenp: lrh9: *Sigh*, yes. And while I want this to work here and now, I want it to be reusable for multiple games in the future
22:22  kerio: reduce() isn't nearly as bad as they picture it
22:22  qwerty1793: _habnabit: Well I was looking for something that did apply_functions(list_of_functions, inpt): for f in list_of_functions: inpt = f(inpt) return inpt (i.e. apply_functions([f_1, f_2, f_3], 10) == f_3(f_2(f_1(10))) )
22:22  kerio: but sometimes it's really bad, yes
22:23  kerio: qwerty1793: so make it a tiny loop
22:23  _habnabit: qwerty1793, writing an explicit loop is clearer than using reduce.
22:23  kerio: infobob: redent qwerty1793 def compose_functions(arg, *funcs): for func in funcs: arg = func(arg);; return func
22:23  infobob: Error: GeneratorExit()
22:24  kerio: what
22:24  _habnabit: Um.
22:24  Luyt_: MongoDB is web scale: http://mongodb-is-web-scale.com/
22:24  kerio: ;_; i broke infobob
22:24  kerio: infobob: redent qwerty1793 def compose_functions(arg, *funcs): for func in funcs: arg = func(arg);; return func
22:24  infobob: Error: GeneratorExit()
22:24  kerio: infobob: codepad qwerty1793 def compose_functions(arg, *funcs): for func in funcs: arg = func(arg);; return func
22:24  infobob: qwerty1793, http://codepad.org/ao50TX86
22:24  qwerty1793: kerio: i did, but i thought there was a built in way of doing it, turns out i was thinking of reduce
22:25  kerio: yeah but reduce is for applying the same function to a bunch of values, not viceversa
22:25  joenp: lrh9: Actually, a simpler solution in my case would be to simply check for the winning card.short_name (e.g. 9S, QH) in each players original_hand (a deep copy of the hand after dealing)
22:25  qwerty1793: kerio: thanks, yes i realised that
22:26  Taos: joenp: can you not create a object known as hand?
22:26  joenp: Taos: I have that. But like in a real game, the card leaves the hand. I guess I could just not do that.
22:27  joenp: Taos: It wolud still be easier just to 'ask' the card which player it belongs to
22:27  qwerty1793: _habnabit: sorry, could you give me an example of a reduce that 'looks' O(n) but is actually O(N^2)?
22:27  lrh9: A lot of stuff is game specific. Divide and abstract.
22:28  _habnabit: qwerty1793, reduce(operator.add, [[1], [2, 3], [4, 5, 6]], [])
22:28  Wild_Cat: qwerty1793: reduce(lambda x, y: x + y, list_of_strings)
22:28  mbreslin: in multiprocess can i have 2 processes reading from (or writing to) the same file?
22:28  Wild_Cat: qwerty1793: reduce(lambda x, y: x + y, list_of_strings, ""), actually
22:28  _habnabit: Wild_Cat, operator.add
22:28  lrh9: mbreslin: Don't do it.
22:28  Wild_Cat: _habnabit: yeah, sure, but if you're gonna go the ugly reduce way, you might as well go *all* the ugly reduce way :p
22:28  lrh9: mbreslin: Don't even try.
22:29  mbreslin: lrh9: fair enough.
22:29  bob2: mbreslin: they'd need to synchronise
22:29  _habnabit: Wild_Cat, pffffft, you're not going far enough
22:29  bob2: mbreslin: prolly easier to push to the queue and have the master write
22:29  Spira: Anyone use Komodo Edit? IS there a way to view the list of classes like in Geany or Eclipse?
22:29  Wild_Cat: mbreslin: well, reading should work, as long as they both open them (that is, no shared file object) and nobody's writing to it
22:29  qwerty1793: Wild_Cat: ah, is this because concatination of strings is O(n)?
22:29  _habnabit: Wild_Cat, 'cause you /can/ make it O(n)!
22:30  Wild_Cat: qwerty1793: correct. Concatenating 2 strings creates a new string object of length equal to the sum of both strings' lengths.
22:31  brrant: #fedora
22:31  Amorgos: I'm tearing my hair out trying to get Popen / communicate to work in linux. It works fine in windows but just doesn't enter the command with stdin in linux. What is the difference?
22:32  ayust: can you pastebin your current code Amorgos ?
22:32  Luyt_: I'm curious about how your code looks
22:32  KirkMcDonald: Amorgos: Show us.
22:32  Luyt_: Does it look nice and web scale?
22:32  ayust: rofl
22:32  Amorgos: http://paste.pound-python.org/show/1737/
22:33  _habnabit: Wild_Cat, L = [[1], [2, 3], [4, 5, 6]]; apply(lambda a=[], b=lambda x: lambda y: x.append(y) or x: reduce(b, L, a))
22:33  _habnabit: Er, whoops, typo.
22:33  Amorgos: its a bit hard to read due to the variables etc. but its just a command askign for username / password
22:33  Wild_Cat: _habnabit: yeah, there's no second argument to your apply
22:34  ayust: Amorgos: why not just use getpass?
22:34  ayust: import getpass; password = getpass.getpass()
22:34  Luyt_: _habnabit: Can you do something like that for my pet problem too? Suppose I have a list like [1,0,4,6,2,0,8,0,2,3,4] what would be a good way to 'split' it on 0 values, resulting in something like [[1], [4,6,2], [8], [2,3,4]] ?  I already solved it procedurally but it could be more elegant.
22:34  Amorgos: ayust: what is getpass?
22:34  KirkMcDonald: ayust: That is not relevant.
22:34  _habnabit: >>> L = [[1], [2, 3], [4, 5, 6]]; apply(lambda a=[], b=lambda x: lambda a, y: x.extend(y) or a: reduce(b(a), L, a))
22:34  _habnabit: [1, 2, 3, 4, 5, 6]
22:34  Wild_Cat: _habnabit: also, you don't need to prove to me once again that you can, in fact, write code that would require me to do drugs to come up with (or, in that case, to forget about). I still haven't been able to un-see your chat server one-liner. :p
22:34  ayust: oh, sorry
22:34  ayust: i read what you were trying to do backwards
22:34  _habnabit: Wild_Cat, I just wrote one for stack overflow too!
22:35  KirkMcDonald: Amorgos: What is it you are giving the password to?
22:35  _habnabit: Luyt_, I'd use itertools.groupby
22:35  Luyt_: _habnabit: Thanks for the hint.
22:35  _habnabit: Luyt_, actually, that wouldn't /remove/ the zeroes.
22:35  Luyt_: I can skip them later on
22:35  Wild_Cat: _habnabit: does your evil know no limits!? :p
22:36  _habnabit: Wild_Cat, http://stackoverflow.com/questions/4710763/how-do-i-check-if-a-list-is-sorted/4711017#4711017
22:36  Amorgos: KirkMcDonald: It's a gae python script called appcfg.py. So I'm executing this from my own script
22:36  KirkMcDonald: Amorgos: I ask because many applications which prompt for passwords do it in such a way to prevent exactly what you are trying to do.
22:37  Luyt_: My boring procedural code (which works, but is not pure functional) can be seen (loathed) at http://codepad.org/DrYGwxoi
22:37  KirkMcDonald: Amorgos: And that such methods can easily work on Linux while not working on Windows, which would account for what you are seeing.
22:37  Amorgos: KirkMcDonald: well its weird, as the exact same scripts behave ok in windows
22:37  _habnabit: Luyt_, actually. I know how to solve this!
22:37  Wild_Cat: _habnabit: dear Lemmy in heaven, I think my *brain* cried.
22:37  _habnabit: Luyt_, with one of my favorite tricks, too.
22:37  Wild_Cat: love the way you use obscure stuff like 1..__radd__ :D
22:37  Luyt_: Really? That would be nice. brb toilet
22:38  KirkMcDonald: Amorgos: I'm not familiar enough with GAE to know how to configure it to not ask for a password.
22:39  KirkMcDonald: (Or indeed if you even can.)
22:39  Aufwind: I used xpath this way and I want to know if xpath has the possibility to look up the content of title but case insensitive. http://fpaste.org/DQSa/
22:39  Aufwind: Is this doable?
22:40  Luyt_: How do I write code that will be understandable for COBOL and Java programmers in about 30 years?
22:40  sproingie: write it in COBOL
22:41  lrh9: import things from the __future__.
22:41  Wild_Cat: Luyt_: COBOL programmers will all have died of old age in 30 years
22:41  Luyt_: But new ones will pop up
22:41 --- Unode is now known as _Unode
22:41  kerio: infobob: codepad _habnabit def is_sorted(l): for i, item in enumerate(l): if item != min(l[i:]): return False;;; return True
22:41  infobob: _habnabit, http://codepad.org/6bzLrGhj
22:42  Luyt_: As long as big banks are paying $$$ to fix their 40-year old (and bug-free) COBOL transaction processing code.
22:42  kerio: it should be O(n!)
22:43  Luyt_: Hell, Java programmers also still exist (I'm in the opportunity to meet a few saturday evening)
22:43  Luyt_: Apparently they make good money
22:43  xiliax: a friend of mine works in a company that deals with cobol and currently they're working on compiling cobol to java bytecode.. :P
22:44  Luyt_: How innovative!
22:44  lrh9: If you can't know ahead of time if a data set has been sorted, but you do know suppliers of data use the same framework, make data sets have a flag. If the data set is sorted the flag is true. If it has been altered the flag is false. Voila. you know if it has been sorted or not.
22:44  Luyt_: I'm studying LISP by way of Clojure, which compiles to java bytecode too!
22:44  kerio: is there a simple way to make a... reverse generator
22:45  Luyt_: kerio: Interesting question. I think I have a file about that, moment
22:46  vr6: I have a zipcode string '00123', however, I want it to be a number, but it loses the leading zero padding on conversion (not a surprise).  Is there a way I can force leading zeros in a number representation in python? (sending lit of zips to db query)
22:46  Luyt_: kerio: http://codepad.org/pcCgpwxB might be interesting to you
22:46  _habnabit: vr6, so, you really want a string, not a number.
22:47  _habnabit: vr6, numbers don't have padding.
22:47  kerio: Luyt_: ...
22:47  kerio: not that kind of reverse
22:47  kerio: i have an iterator i want to feed to a bunch of functions
22:47  kerio: each one will keep some state
22:48  _habnabit: >>> (lambda L: apply(lambda it=iter(L), y=[]: [y + list(itertools.takewhile(0..__ne__, it)) for x in iter(lambda: list(y.__setitem__(slice(*range(2)), [it.next()]) for _ in [_]), [])]))([1, 0, 4, 6, 2, 0, 8, 0, 2, 3, 4])
22:48  _habnabit: [[1], [4, 6, 2], [8], [2, 3, 4]]
22:48  vr6: _habnabit: I know... I am just really confused by results.  I send query zips in string format and it yields 996 results, I send it in number format and I get 3939 results. It is the latter that I need.
22:48  _habnabit: :D
22:48  kerio: _habnabit: ...
22:48  Luyt_: _habnabit: Thanks, I'll try it
22:48  kerio: jesus christ, this is not #perl
22:48 * Luyt_ codegolfclaps for habna
22:48  _habnabit: Oh, whoops, there's a mistake there.
22:49  kerio: bonus points for apply()
22:49  _habnabit: lambda L: apply(lambda it=iter(L), y=[]: [y + list(itertools.takewhile(0..__ne__, it)) for x in iter(lambda: list(y.__setitem__(slice(*range(2)), [it.next()]) for x in [y]), [])])
22:49  _habnabit: There you go.
22:49  Luyt_: Your favourite 0..__oper__ construction working as a method wrapper off a float, hence the two consecutive dots
22:49  unRuhe: hi, what is the @ delimiter used for?
22:49  eniac: I'm using beautifulsoup and it converts all strings to unicode but when outputting a beautifulsoup string some characters like (& or ') display their hex value &amp; ? Anyone know why is that ?
22:49  sproingie: unRuhe: decorators
22:49  _habnabit: unRuhe, it's decorator syntax.
22:49  kerio: Luyt_: doing that for ints would require extra parentheses
22:49  unRuhe: ty
22:50  _habnabit: Luyt_, actually that's not my favorite trick. :3
22:50  _habnabit: list(y.__setitem__(slice(*range(2)), [it.next()]) for x in [y])
22:50  _habnabit: That is my favorite part.
22:50  sproingie: wouldn't 'bool' work as well as 0..__ne__?
22:51  vr6: _habnabit: nm.  someone sent me a query with a ref to a slightly different table name! grrrrr.... problem cleared (thank heavens b/c I never heard about being able to store a number padded with zeros, print it out padded with zeros, yes, store no!)
22:51  _habnabit: sproingie, oh, that would obsfucate it further! Thanks.
22:51  sproingie: :)
22:52  _habnabit: I wanna see someone pick apart that code to figure out what the trick I'm referring to is. :D
22:53  Luyt_: _habnabit: I broke my brains over your convoluted bubble sort oneliner last night, didn't figure it out, don't wanna do it again ;-)
22:53  FireSlash: obfuscating code is fun
22:53  _habnabit: eniac, any reason you're not using lxml.html?
22:53  FireSlash: is an art really
22:53  Luyt_: The problem with nested lambda's is that you can't properly format them. Their indent only increases, never decreases
22:54  eniac: _habnabit: I never heard of lxml.html
22:55  Luyt_: eniac: It's a parser for HTML pages which can extract parts of the page for you
22:55  eniac: _habnabit: but I'm quite happy with beautifulsoup does the job just fine. Just something wrong with the encoding. And it's probably me.
22:56  _habnabit: eniac, I used to think that, and then I actually tried lxml.html.
22:56  _habnabit: eniac, it's just better in so many ways it ain't funny.
22:56  eniac: probably but like I said beautifulsoup does the job just fine no need for me to rewrite all the code I've already written.
22:57  eniac: but I appreciate the suggestion.
22:59  anr78: I'm also curious about the Q in http://effbot.org/pyfaq/tutor-whats-the-best-editor-ide-for-python.htm. What editors does the python-dev-developers use? :)
22:59  Luyt_: _habnabit: You code runs flawlessly as demonstrated at http://codepad.org/EeoF8PVC , but I wonder: what compels you to write onliners nowadays?
22:59  Luyt_: anr78: vi, emacs or TextMate.
22:59  kerio: Luyt_: masochism
23:00  _habnabit: Luyt_, it's fun~!
23:00  anr78: I'm looking at different editors to find out if there's competition for my emacs out there :)
23:00  Luyt_: But it's also opaque.
23:00  _habnabit: anr78, nah, emacs still is the best.
23:00  KirkMcDonald: anr78: vim is the usual emacs competitor.
23:01  anr78: _habnabit: that's my conclusion so far as well
23:01  eniac: nothing beats notepad.exe !
23:01  eniac: no flame ware please.
23:01  KirkMcDonald: Notepad? What nonsense. Clearly ed is the standard editor.
23:01  }dec3pti0n{: I'm using optparse and I'm wondering if there is any flag to say that an option is required ? I can't seem to find anything on the reference page
23:02  KirkMcDonald: }dec3pti0n{: Options are optional.
23:02  anr78: I'd beat notepad.exe pretty hard if I knew how to do it
23:02  }dec3pti0n{: KirkMcDonald: there is no way to make one not optional ? I really have to check if the option dest got defined ?
23:02  Luyt_: just DEL it and put some other EXE of your choice in place
23:02  KirkMcDonald: }dec3pti0n{: If you want one to be mandatory, you need to do this yourself, e.g.: if options.foo is None: parser.error("--foo is required")
23:02  NelleV: }dec3pti0n{: but you can check their presence and exit the program with the print
23:03  }dec3pti0n{: yeah that's what I was gonna do .. thanks
23:03  KirkMcDonald: parser.error() is a really great method.
23:03  NelleV: }dec3pti0n{: and your nick is asbolutely horrible to write :s
23:03  KirkMcDonald: NelleV: Nonselse: }<tab>
23:03  KirkMcDonald: Nonsense, too.
23:03  NelleV: KirkMcDonald: yeah... the first letter is anoying
23:03  NelleV: KirkMcDonald: at least on my keyboard it is
23:03  }dec3pti0n{: sorry
23:04  KirkMcDonald: NelleV: dec<tab> works in irssi, too.
23:04  Luyt_: For the nick 'NelleV', I have to depress at least the 'N', 'e' and 'l' before the TAB key will complete it to 'NelleV'.
23:04  NelleV: Luyt_: so what should my nickname be ? :p
23:04  Luyt_: I think I'd better level my huntard a bit now ;-)
23:05  Luyt_: NelleV: Your nick is fine, damn my GUI.
23:05  NelleV: KirkMcDonald: what is dec ?
23:05  KirkMcDonald: NelleV: The first three letters of his name.
23:05  NelleV: KirkMcDonald: arf... ok xD
23:05  KirkMcDonald: NelleV: irssi figures it out.
23:05  Luyt_: Hey, dec<TAB> works in Konversation too
23:05  NelleV: KirkMcDonald: yep, just tested it
23:06  NelleV: KirkMcDonald: I didn't know that
23:06  KirkMcDonald: Except now he's gone.
23:06  NelleV: man, today I've learnt a lot of things... Most useless and stupid, but still...
23:07  Luyt_: like what?
23:08  E0x: hello
23:08  NelleV: Luyt_: euh... Like that all assaults involving an injury are followed by an investigation in the  UK. That UK policers do not have to read your rights before arresting you (with a "we're not in the states here"), how to install oracle, and that dec<tab> works for }dec3pti0n{ autocompletion
23:08  NelleV: I think the last one if the most useful one
23:09  KirkMcDonald: NelleV: Are you arrested in the UK often?
23:09  dullboy: well if you install oracle, the first one is impotant too
23:09  subsume: does getattr get a pointer?
23:09  Luyt_: Installing Oracle seems the best to me, since Real Soon Now, Oracle will own us all
23:09  KirkMcDonald: subsume: It returns an object.
23:09  Wild_Cat: subsume: no. Python has no concept of pointers.
23:09  Wild_Cat: getattr returns an object.
23:09  dullboy: subsume: there is no such a thing as a pointer. variables are labels
23:09  KirkMcDonald: subsume: Everything ever returns an object.
23:09  Wild_Cat: (or raises AttributeError)
23:09  NelleV: KirkMcDonald: it wasn't me, but I had a phone call this morning from a friend
23:09  subsume: hrmz
23:09  sproingie: NelleV: they don't have to read you your rights in the states until they question you
23:10  _habnabit: subsume, what's a pointer
23:10  NelleV: sproingie: wrong. They have to, when they arrest you
23:10  dullboy: _habnabit: C stuff :)
23:10  subsume: if I do obj = getattr(obj2,'x') does obj.value have bearing on obj2?
23:10  sproingie: NelleV: cite the case
23:10  Luyt_: Oracle has already usurped Sun, MySQL and Java, and PHP and Linux are next. After that, Python, Ruby and Web Commerce will follow.
23:10  _habnabit: dullboy, this isn't ##C ???????
23:10  _habnabit: subsume, I dunno, does it?
23:10  dullboy: _habnabit: uh, yes but with no {}
23:10  KirkMcDonald: subsume: obj will refer to the same object that obj2.x doe.
23:10  KirkMcDonald: does*
23:10  subsume: thanks.
23:10  NelleV: sproingie: there's no case to cite... "you are under arrest. Everything you say blablabla"
23:11  E0x: very noob question , i am modify a python program and have add something like this :urllib2.urlopen('http://circle.local:8080/xbmcCmds/xbmcHttp?command=ExecBuiltIn(Notification(Testing,Text_Testing))' and i wan change the worlds :Testing and Text_Testing for some variable , that contain a string i try urllib2.urlopen('http://circle.local:8080/xbmcCmds/xbmcHttp?command=ExecBuiltIn(Notification("%s,%s"))' % (var1, var2) but not work
23:11  E0x: any idea ?
23:11  _habnabit: dullboy, I can't parse that
23:11  sproingie: NelleV: they don't have to until before they question you.  anyway, off topic here.
23:12  sproingie: in fact they *usually* read you your rights again and get it on tape
23:12  NelleV: sproingie: mmh. OK. Maybe you are right
23:12  dullboy: _habnabit: from __future__ import braces
23:12  NelleV: yeah, well they are probably scared of being sued -__-'
23:12  sproingie: sued nothin, getting the case thrown out.  anyhoo, #amateur-lawyering over there :)
23:13  dullboy: E0x: have you pasted a missing ) ?
23:13  KirkMcDonald: NelleV: http://en.wikipedia.org/wiki/Miranda_v._Arizona
23:13  E0x: dullboy: where ?
23:13  E0x: at the end ?
23:13  dullboy: E0x: yes
23:13  NelleV: KirkMcDonald: ok. Well, it's not the case in the UK "apparently"
23:13  E0x: hm , not
23:14  E0x: look not missing ) at my code
23:14  KirkMcDonald: NelleV: I don't see why it would be.
23:14  dullboy: rllib2.urlopen('http://circle.local:8080/xbmcCmds/xbmcHttp?command=ExecBuiltIn(Notification("%s,%s"))' % (var1, var2))
23:14  dullboy: sorry, missed the first letter E0x
23:14  sproingie: NelleV: i think the EU has something similar tho
23:15  NelleV: KirkMcDonald: well. I do think it is the case in france, but I'm not 100% sure
23:15  dullboy: E0x: btw, note that the new syntax is '...({0},{1}))'.format(var1, var2)
23:15  cached: recommendations for postgres interaction with python?
23:16  KirkMcDonald: cached: psycopg2 is the usual thing.
23:16  lvh: Would you say it is reasonable for a REST service to simply refuse your PUT/POST if it's missing a Content-Type
23:16  lvh: (And not proivde options for setting a default, either)
23:16  sproingie: lvh: i'd say it's reasonable yes
23:16  SpComb: lvh: if the rest service does something with it
23:16  sproingie: you could try to sniff the content type if it's obvious, but the client is misbehaving anyway
23:17  lvh: sproingie: Yeah, the thing is, it currently does that
23:17  lvh: sproingie: And I'm pretty sure I want to throw that out
23:17  lvh: It's big, it's ugly, and clients that work with it and not without it are just wrong
23:17  sproingie: if breaking the client is okay, you may as well
23:17  sproingie: do it now before it gets really entrenched
23:17  lvh: so it's basically "fuck you and your broken software"
23:18  sproingie: if you have a lot of clients out there then it might not be worth it
23:18  cached: KirkMcDonald: looks like it uses basically the same syntax as MySQLdb... thanks
23:19  sproingie: besides, having a default content-type is a perfectly well-defined behavior, if not the most elegant
23:19  E0x: dullboy: thx , works great
23:19  paxcoder: can someone plz get me started here: I'm getting a "AttributeError: 'TestWindow' object has no attribute 'actionNarudzba'" What I did is self.connect(self.actionNarudzba, QtCore.SIGNAL("activated()"), self.page). actionNarudzba is an "action" - like in the toolbar. Ideas?
23:19  paxcoder: *Qt
23:19  dullboy: E0x: welcome
23:22  kheeper: hi guys I need a bit of your help. Here is my script http://paste.kde.org/2780/ and I need create from getImage() a format what I can include to the html script
23:22  dullboy: paxcoder: as far has I can see the action is the third argument, the first is the object the signal is bound to
23:23  dullboy: paxcoder: swap self.page with self.actionNarudzba
23:24  _habnabit: kheeper, 1) don't use mod_python. 2) don't generate HTML with string formatting. 3) don't embed HTML in code.
23:24  sako: hey guys is there any alternative to imagemagick when it comes to pdf->jpeg conversion?
23:25  sako: pythonmagick is such a pain to get installed on OSX
23:25  lvh: Hey, so, if someone forgets a Content-Type in POST or PUT, is it 412 Precondition Failed or 415 Unsupported Media Type
23:28  TheSheep: lvh: don't forget about 400 Bad request
23:28  paxcoder: dullboy, don't think so
23:28  dullboy: paxcoder: http://developer.qt.nokia.com/wiki/Signals_and_Slots_in_PySide
23:28  kheeper: _habnabit: I just try to get a format what I can in future use for watching my webcam in web
23:28  SpComb: kheeper: you want two requests, one for the HTML, and one for the image itself
23:28  _habnabit: kheeper, okay. So, use a WSGI framework and template engine.
23:28  lvh: Or potentially 400 bad request yes
23:28  paxcoder: dullboy, action is the event originator
23:28  SpComb: _habnabit: explain to me why you need a template engine for three lines of HTML
23:28  lvh: TheSheep: Isn't bad request only for broken http syntax
23:28  _habnabit: SpComb, prevents XSS attacks
23:28  _habnabit: SpComb, more easily, anyway.
23:28  SpComb: not the only option for that
23:28  dullboy: paxcoder: have you tried making that action static?
23:28  kheeper: _habnabit: Alrady tell you this is just a part of test script, understand? I just need know how it's help me wsgi?
23:28  eniac: IIRC there is a method for stripping white spaces at the beginning and end of a string ?
23:28  _habnabit: SpComb, embedding HTML in code generally means "you're doing it wrong," though.
23:28  TheSheep: lvh: I think it's a general "I don't like your request, go away" thing, just like 500 is a general "Not today, I have a headache".
23:28  KirkMcDonald: eniac: .strip()
23:28  _habnabit: kheeper, What
23:28  paxcoder: dullboy, i'm using generated UI code, so i don't know where it is really.
23:28  TheSheep: lvh: of course one should be as specific as possible with errors
23:30  SpComb: kheeper: easiest way to do that specific thing that you asked is to just have a normal static .html file, and then load the image from a CGI/WSGI script
23:30  eniac: KirkMcDonald: ty
23:30  Marionumber1: i have a question in this code: http://paste.pound-python.org/show/1739/. why wont bot_cmd_listen() work?
23:30  dullboy: paxcoder: ok, I think I have to stop here... sory
23:30  paxcoder: dullboy, sure. thanks.
23:30  kheeper: SpComb: thanks men
23:30  SpComb: kheeper: so the .html file just has the <img> tag with a src="" pointing to an URL that's handled by your WSGI script, and returns the image/jpeg response that you have
23:30  lvh: oops.
23:30  _habnabit: Marionumber1, ... this is some rather odd code.
23:30  Marionumber1: why?
23:30  SpComb: kheeper: you could write a plain CGI script, or better yet, a very simple WSGI function and then use wsgiref.handlers.CGIHandler().run(yourwsgi_app_function)
23:30  _habnabit: Marionumber1, well, you're not doing buffering correctly.
23:30  ejaury: why is type() returns 2 different classes depending of how the class is imported?
23:30  kheeper: SpComb: ok will found out some documentation about that I never did something like this before
23:31  _habnabit: ejaury, since you haven't responded since I told you "your imports are wrong", I'm going to guess the answer is still "your imports are wrong"
23:31  ejaury: this results in type(obj) == ActualClassOfThisObject  false
23:31  _habnabit: ejaury, also, don't ever use == on the result of type()
23:31  ejaury: oh sorry i forgot to respond you earlier
--- Log closed Tue Jan 18 23:35:29 2011
