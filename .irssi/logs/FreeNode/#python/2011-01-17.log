--- Log opened Mon Jan 17 01:10:13 2011
01:10 --- Users 755 nicks [0 ops, 0 halfops, 0 voices, 755 normal]
01:10  bob2: Amorgos: looks ok to me but flushing stuff is beyond my skillz alas
01:11 --- Channel #python was synced in 91 seconds
01:12  paxcoder: bob2, http://paste.pocoo.org/show/321846/
01:12  jafo: Thanks for the replies, folks.  TTYL.
01:12 --- bradleyayers is now known as bradleyayerswork
01:13  bob2: paxcoder: that would only work if ./module/__init__.py defined Database
01:13  paxcoder: bob2, why?
01:13  bob2: paxcoder: http://paste.pocoo.org/show/321849/
01:13  bob2: paxcoder: because 'import module' means 'import the thing called module', which it does, and contains nothing
01:14  bob2: paxcoder: import doesn't recursively load all submodule and subpackages, and even if it did the db thing would (presumably) be at modules.database.Database
01:14  jsizzle: working on learning python the hardway :) can anyone take a look at this excercise and tell me why its not working? I have double and triple checked and I typed exactly what is in the tutorial. Thanks in advance http://paste.pound-python.org/show/1662/
01:14  jsizzle: python 2.7.1 here btw
01:15  paxcoder: bob2, alright.. but i still get an error, this one this time: NameError: name 'module' is not defined
01:15  paxcoder: o wait sorry
01:15  paxcoder: didn't see the rest of the code
01:15  paxcoder: bob2, thanks! :-)
01:16  armence: sqlalchemy has the most clever way to implement its "where" method. I though it had to be some weird thing that allowed you to pass "tests" to a function, but instead, they just implemented __eq__ and other similar methods to return a representation of the test and called it a day! Brilliant!
01:16  Qauzzix: bob2]$ Any idea what could cause this -> http://i.imgur.com/wm3Lh.png
01:16  bob2: jsizzle: in what way does it not work
01:16  CarlFK: jsizzle: works for me
01:17  pythonirc1011: bob2: when I say this line -- factory = client.XMPPClientFactory(self.jid,password)  -- and add bootstraps to this factory, where is the actual communication happening? which object does first receive the xml stanzas?
01:17  bob2: jsizzle: that'll fail under 3.x, if that's what you mean
01:17  bob2: Qauzzix: no sorry, only know windows from afar
01:17  CarlFK: jsizzle: http://paste.pound-python.org/show/1663/   post the output
01:17  Qauzzix: bob2]$ Lucky bastard ;)
01:18  jsizzle: hmm.. paste.pound-python.org doesn't seem to be working for me for some reason although I just pasted there a min ago
01:18  jsizzle: wtf
01:18  papna_: jsizzle: Works for me.
01:19  jsizzle: http://pastie.org/1468378
01:19  jsizzle: not me so here's the output
01:19  paxcoder: bob2, since i have interdependence of these module things, would you suggest i load them in the correct order in __init__.py? i tried to import it in the correct order in the root, but that didn't work
01:19  papna_: paxcoder: No, you should leave __init__.py empty.
01:19  bob2: jsizzle: you forgot to have python run it
01:19  bob2: paxcoder: I agree with papna_
01:20  papna_: paxcoder: The ones that need the others ones should import the ones they need.
01:20  paxcoder: papna_, ok. multiple imports are fine?
01:20  paxcoder: (of the same thing)
01:20  jsizzle: bob2: omg, I'm a dumbass.. forgot the shebang
01:20  Reith: anyone can tell me what's gtk.Dialog syntax? gtk.Dialog(title="sth", ...) i have problem on title="sth". why it's valid?!
01:20  papna_: paxcoder: Sure.
01:20  jsizzle: the tut I'm reading doesn't use it..
01:20 * jsizzle is dumb
01:20  jsizzle: lol
01:20  paxcoder: ok, thanks
01:21  jsizzle: works now :)
01:21  jsizzle: <-- retard
01:21  papna_: That's not a nice word. :(
01:21  bob2: Reith: what do you mean?
01:21  bob2: jsizzle: easy msitake to make
01:21  paxcoder: bob2, papna_, thanks
01:21  Reith: bob2: http://stackoverflow.com/questions/3349908/python-variable-assignment-order-of-operations
01:22  bob2: jsizzle: if you have 'import' statements in your python code and run it under bash, it'll take screenshots for you
01:22  bob2: Reith: yes
01:22  bob2: Reith: foo(bar="whatever") passes a keyword argument to foo
01:22  bob2: Reith: it doesn't create a local variable called bar
01:22  Reith: bob2: ohmmm. why it's useful?
01:23  Qauzzix: lol, os.remove dosn't work for dirs, I should have used os.rmdir :)
01:23  Reith: bob2: i'm find! very thanks :D
01:35  Aufwind: How is this way of iterating called:   newlist = [item for item in mylist]
01:35  bob2: list comprehension
01:35  Aufwind: bob2:
01:35  Aufwind: bob2: thx
01:42  twobitsprite: hey guys... the docs for the __metaclass__ attribute says it can be any callable, but must create the class and return it. Does that mean I can just "def __metaclass__(...)" in the class description, do my thing, then just return "type(...)"?
01:42  _habnabit: Sure, why not.
01:43  twobitsprite: ok, just wanted to make sure I wouldn't miss any other steps that were necessary while creating a class...
01:43  _habnabit: But if you're defining it as a function instead of a type, there's not much point to it.
01:43  _habnabit: Since it's not inherited or anything.
01:43  russet: Hello - I'm having trouble with "ImportError - no module named ..."
01:43  russet: Can someone explan how I can fix this?
01:43  _habnabit: russet, with no context? Nope!
01:44  twobitsprite: _habnabit: the docs say if a class doesn't define a __metaclass__, then the parent's class __metaclass__ is used....
01:45  _habnabit: twobitsprite, that's not strictly true.
01:45  twobitsprite: "# If dict['__metaclass__'] exists, it is used.
01:45  twobitsprite: # Otherwise, if there is at least one base class, its metaclass is used (this looks for a __class__ attribute first and if not found, uses its type)."
01:45  twobitsprite: http://docs.python.org/reference/datamodel.html#customizing-class-creation
01:45  _habnabit: ... yes, and?
01:46  _habnabit: russet, please don't PM me.
01:46  twobitsprite: doesn't that mean the parent class's __metaclass__ will be called?
01:46  _habnabit: russet, also, use a pastebin.
01:46  _habnabit: twobitsprite, no. It means that the parent class's type will be called.
01:46  _habnabit: twobitsprite, it doesn't look for __metaclass__ along the MRO.
01:47  _habnabit: twobitsprite, but if __metaclass__ is a type, /usually/ then classes with that metaclass will be instances of that metaclass.
01:48  twobitsprite: I see
01:48  lvh: metaclass programming for fun and profit
01:48  lvh: mostly justconfusion
01:48  _habnabit: twobitsprite, there's no strict requirement that a class's type and its metaclass are the same.
01:48  twobitsprite: ok
01:48  twobitsprite: yeah, I just tested it and you're right
01:49  twobitsprite: damn
01:49  russet: _habnabit, http://pastebin.com/QA9yd1jQ
01:50  infobob: http://paste.pound-python.org/show/1664/ (repasted for russet)
01:51  _habnabit: russet, isn't there a supybot channel
01:51  _habnabit: twobitsprite, of course I'm right.
01:51  _habnabit: twobitsprite, that's why I'm here. :V
01:54  KirkMcDonald: This stuff is also fun when you use a function as a __metaclass__.
01:54  wardi: bob2: found the cause.  many unit tests + new unhandled exception immediately after a fork triggered by every test = bad
01:54  lvh: KirkMcDonald: Nothing special there I would think?
01:54  JoeGazz84: _habnabit: Please see http://pastebin.com/q72pi4ut No one is active in supybot channel and I also get this when I use other python things too
01:54  infobob: http://paste.pound-python.org/show/1665/ (repasted for JoeGazz84)
01:54  lvh: KirkMcDonald: The problem is that metaclass is a wrong name ;-)
01:55  KirkMcDonald: lvh: I just mention it as a trivial way for a class's __metaclass__ and its type to be different.
01:56  wardi: bob2: so python3 is innocent.  this time.
01:56  lvh: __class_factory__ wooo
01:56  JoeGazz84: _habnabit: Please see http://pastebin.com/q72pi4ut No one is active in supybot channel and I also get this when I use other python things too
01:56  infobob: http://paste.pound-python.org/show/1665/ (repasted for JoeGazz84)
01:56  _habnabit: JoeGazz84, why are you repeating yourself
01:56  JoeGazz84: I saw some Private Message from a bot, so I didn;t know if the MSG got through
01:58  pythonirc1011: _habnabit: by any chance do you know when one uses XMPPClient -- what part actually does the communication in twisted?
02:01  JoeGazz84: _habnabit: can you help me?
02:02  lvh: JoeGazz84: How are you installing it
02:02  pythonirc1011: i installed pyusb, it installed without any problems. Now it complains, "No backed available" when I run anything...
02:02  pythonirc1011: anyone used pyusb here?
02:02  JoeGazz84: lvh: Without root access
02:03  JoeGazz84: I also set the PYTHONPATH already
02:04  lvh: JoeGazz84: That's not really an answer to my question
02:04  lvh: JoeGazz84: Specifically, why aren't you installing it with pip
02:04  JoeGazz84: SSH
02:04  JoeGazz84: I am not sure how
02:04  _habnabit: lvh, are you going to let him shush you like that
02:04  JoeGazz84: I am running it on a server
02:04  JoeGazz84: No
02:05  JoeGazz84: SSH as in Secure Shell
02:05  JoeGazz84: Or whatever it stands for
02:05  lvh: JoeGazz84: Again, that doesn't matter. What command were you running to install it?
02:05  JoeGazz84: ohhhhhh
02:05  JoeGazz84: let me get that
02:05  lvh: and, specifically, why isn't it pip install --user twisted
02:05  lvh: wrt supybot: no, not in a million years
02:05  JoeGazz84: [joegazz@gator1311 ~/Packages/runbot]$ python setup.py install
02:06  lvh: Is that RHEL?
02:06  JoeGazz84: I was told to do that in #supybot earlier
02:06  JoeGazz84: but now the user who helped is not there available anymore
02:06  JoeGazz84: Can you tell me how I SHOULD have installed it and I will redo it?
02:07  lvh: JoeGazz84: python setup.py install isn't necessarily *wrong* but that paste looks really ugly
02:07  lvh: at least PATH isn't correctly set
02:07  JoeGazz84: How do I set that correctly?
02:07  lvh: That depends how you installed it
02:08  JoeGazz84: Okay
02:08  lvh: I'm pretty sure python setup.py install  isn't actually what you did, becuse then there wouldn't be a ~/Packages directory
02:08  JoeGazz84: Oh
02:08  JoeGazz84: oopsie
02:08  JoeGazz84: there was a part after it
02:08  lvh: JoeGazz84: Yeah, you can't just drop random parts off of commands you said you executed, that makes it impossible to help you
02:08  JoeGazz84: [joegazz@gator1311 ~/Packages/runbot]$ python setup.py install --prefix=$HOME/Packages
02:08  JoeGazz84: No I copied the wrong one
02:09  JoeGazz84: I followed a guide given to me
02:09  JoeGazz84: http://sourceforge.net/apps/mediawiki/gribble/index.php?title=Supybot_Install_Guide#If_you_don.27t_have_root_access.2C_or_want_a_local_install
02:09  lvh: Wow, they really do tell you to let setuptools loose upon your system
02:09  lvh: consideirng it's supybot not *entirely* surprising
02:09  JoeGazz84: ok
02:10  JoeGazz84: how should I do it?
02:10  lvh: JoeGazz84: Ideally? pip, but working from what you already have
02:10  lvh: that tutorial forgets to set PATH
02:11  JoeGazz84: So I should set Path how?
02:11  JoeGazz84: *PATH
02:11  lvh: You're asking for commands like supybot and supybot-wizard but your system has no idea where to get them from
02:11  JoeGazz84: Ok
02:11  lvh: PATH=~/.local/bin:$PATH
02:11  lvh: export PATH
02:11  lvh: well, replace ~/.local/bin with ~/Packages/bin
02:11  lvh: or whatever it is you called it
02:11  JoeGazz84: Okay
02:12  JoeGazz84: Soo....
02:12  lvh: _habnabit: I'm not sure of the ethical ramifications of helping people with supybot
02:12  JoeGazz84: export PATH=~Packages/bin
02:12  lvh: JoeGazz84: Wait what? That's not what I said
02:12  JoeGazz84: Oh
02:12  JoeGazz84: I should do what?
02:13  lvh: JoeGazz84: ... What I typed. Notice the two lines
02:13  bob2: wardi: hah
02:13  lvh: JoeGazz84: also the :$PATH
02:13  JoeGazz84: ok
02:13  JoeGazz84: So What should I type? in one line please....
02:13  lvh: JoeGazz84: No, there's a reason it's two lines
02:13  JoeGazz84: Oh
02:13  JoeGazz84: Okay
02:13  JoeGazz84: So I should do...
02:14  lvh: JoeGazz84: First you set an environment variable, then you export it. Ideally this'd go in ~/.bashrc so you wouldn't have to type it every time.
02:14  JoeGazz84: I have to actually type "PATH=~/Packages/bin
02:14  JoeGazz84: with out the :
02:14  JoeGazz84: *"
02:14  JoeGazz84: Pp[s
02:14  JoeGazz84: *oops
02:14  JoeGazz84: ugh
02:14  JoeGazz84: so I do...
02:14  lvh: JoeGazz84: No, notice how I added :$PATH
02:14  JoeGazz84: Okay
02:14  JoeGazz84: let me try again, I appreciate your patience
02:15  lvh: JoeGazz84: Also, press <RET> a lot less, you are taking up large amounts of vertical space
02:15  mr_gant: The :$PATH adds the current value to the string. So you're not overriding, but extending the value.
02:15  JoeGazz84: PATH=~Packages/bin:$PATH
02:15  JoeGazz84: That is first?
02:15  lvh: JoeGazz84: No, that's the home directory for a user called "Packages"
02:16  lvh: JoeGazz84: ~/Packages
02:16  JoeGazz84: PATH=~/Packages/bin:$PATH
02:16  JoeGazz84: That?
02:16  lvh: (That's "the directory called Packages in my current user's home directory")
02:16  lvh: JoeGazz84: Yes.
02:16  JoeGazz84: Okay
02:16  JoeGazz84: Then secondly
02:16 --- DagoRed is now known as Guest48928
02:16  JoeGazz84: export PATH
02:16  lvh: Yes.
02:17  JoeGazz84: Okay
02:17  JoeGazz84: let me try
02:17  JoeGazz84: What directory should I be in when I execute it?
02:18  lvh: JoeGazz84: Doesn't matter.
02:18  JoeGazz84: lvh: Okay
02:18  lvh: None of the paths in it are relative to the cwd.
02:19  JoeGazz84: Should it return anything?
02:19  lvh: No.
02:19  JoeGazz84: Okay
02:19  JoeGazz84: Now what should I run?
02:19  lvh: It should set your PATH environment variable.
02:19  lvh: Try supybot.
02:19  lvh: (Again, stop using supybot :()
02:19  JoeGazz84: So this command...
02:20  JoeGazz84: [joegazz@gator1311 ~]$ python /home/joegazz/Packages/bin/supybot-wizard
02:20  JoeGazz84: lvh: Pardon?
02:20  lvh: JoeGazz84: Supybot is terrible
02:20  marienz: so is everything else though
02:21  JoeGazz84: lvh: I need it for the RSS capability
02:21  JoeGazz84: :(
02:21  lvh: JoeGazz84: I didn't say that, I just said "supybot"
02:21  JoeGazz84: Okay
02:21  JoeGazz84: Traceback (most recent call last):
02:21  JoeGazz84:   File "/home/joegazz/Packages/bin/supybot", line 37, in ?
02:21  JoeGazz84:     import supybot
02:21  JoeGazz84: ImportError: No module named supybot
02:21  JoeGazz84: Error
02:22  JoeGazz84: I need to configure it
02:22  lvh: JoeGazz84: ... Also don't paste in this channel
02:22  JoeGazz84: Ok
02:22  JoeGazz84: Pastebin?
02:22  lvh: JoeGazz84: I'm pretty sure "no module named supybot" means supybot isn't in your PYTHONPATH
02:22  JoeGazz84: lvh: What should I set my PYTHONPATH to>
02:22  JoeGazz84: *?
02:22  CarlFK: foo.sh bash shell script calls foo.py.  I want foo.py to shell out and run "firefox http://a.b.c/abc.html" then exit back to foo.sh.  will Popen just work?
02:23  lvh: this PYTHONPATH being set thing, I don't actually buy it. What's echo $PATH say?
02:24  JoeGazz84: http://pastebin.com/0mNJn22j
02:24  infobob: http://paste.pound-python.org/show/1666/ (repasted for JoeGazz84)
02:24  lvh: (Also you should read that notice the bot sends you, it keeps telling you to stop using pastebin.com ;-))
02:24  JoeGazz84: Why?
02:24  lvh: JoeGazz84: echo $PYTHONPATH
02:25  JoeGazz84: Will do
02:25  lvh: JoeGazz84: 1) Ads. 2) Performance. 3) Lodgeitlib, so I can grab it straight into my editor
02:25  JoeGazz84: /home/joegazz/packages/lib/python2.4/site-packages
02:25  JoeGazz84: Returned that
02:26  JoeGazz84: http://paste.pound-python.org/show/1667/
02:26  lvh: JoeGazz84: Notice how the Packages directory in /home/joegazz (note the capital) isn't *actually* in your PYTHONPATH.
02:26  JoeGazz84: I need to set that there?
02:26  lvh: JoeGazz84: My best guess is when you changed your PYTHONPATH, you screwed up with the capital.
02:26  open: hey - I've just gotten python (with pacman), and when I invoke it ("python" - and I guess the repl thing opens up) -- and when I do this: >>> print "hello" -- I get "File "<stdin", line 1... SyntaxError: invalid syntax
02:26  lvh: JoeGazz84: Yes, paths are case sensitive
02:26  open: What's the problem there? What do I do to get at it?
02:26  JoeGazz84: So what SHOULD it be set to?
02:27  bob2: open: heh arch
02:27  lvh: open: Yes, for some reason Arch decided as the only distro in the word it was going to make "python" be py3k
02:27  lvh: open: The real problem is Arch
02:27  bob2: open: I think you want to run 'python2'
02:27  lvh: open: Since you won't believe me when I say that, you want to run/install python2
02:27  JoeGazz84: lvh: THANK YOU! You made it work!
02:27  lvh: JoeGazz84: I just told you. The capital is wrong.
02:27  JoeGazz84: It was the ONE capital
02:27  lvh: JoeGazz84: Yay.
02:27  JoeGazz84: Thank you so much!
02:28  lvh: JoeGazz84: You *think* you're better off but you're not, really
02:28  open: ok, I'll pacman -Syu python2 then
02:28  lvh: JoeGazz84: You went from a not-running supybot to a running supybot, that's a downgrade
02:28  JoeGazz84: xP
02:28  lvh: open: freebsd.org, debian.org, ubuntu.com
02:29  lvh: open: Or yeah, pacman -Syu python2 might work
02:29  open: but wait -- if it's py3k... why doesn't the repl still accept it? that seems like a very generic command, which one would expect to work on any version
02:29  lvh: open: If you're going to take python development seriously, you would install python locally in your home directory, independent from arch
02:29  lvh: open: No. Py3k changed the semantics of print.
02:30  lvh: open: These rather fundamental syntactic differences are precisely what made changing what "python" meant (when so much software expects it to be python2) a bad idea.
02:30  lvh: open: It's okay, I just stopped packaging for Arch.
02:31  bob2: open: no, it's not a generic command - and python 3 and python 2 are deliberately incompatible in ways such as this
02:32  open: ok - and sorry to ask a question that's probably been asked many times: isn't it naturally a better option to learn the ropes of the language of the newer version of the language?
02:32  open: s/of the language//
02:32  lvh: open: The last version in 3.x is 3.1. The last version in 2.x is 2.7. 2.7 is newer than 3.1.
02:32  lvh: open: Additionally, no: there is a massive amount of perfectly fine software written for 2.x that hasn't been ported and isn't trivial to port.
02:33  bob2: open: they're more or less different languages
02:33  open: ah, hm. so they're almost like separate languages now?
02:33  open: ok
02:33  bob2: open: python2 has far more software/libraries/documentation now
02:33  lvh: open: Only last week did PEP 3333, which made WSGI (and thus webapps) feasible get ported.
02:33  lvh: open: It's an ongoing process.
02:33  bob2: open: very very closely related languages with a mostly common community, but incompatible nonetheless
02:33  lvh: open: If you write *good*, new 2.x code, there is little difference with how said code will behave in 3.x
02:34  lvh: open: Since there are so little semantic differences, there are automated translators from 2.x to 3.x (2to3).
02:34  lvh: open: That way, you can use and maintain a 2.x codebase now, and change to 3.x as soon as your dependencies all work.
02:34  lvh: Eventually dropping 2.x when it becomes irrelevant.
02:34  GrahamDumpleton: lvh: The basis of that PEP 3333 proposal has been around for well over a year as did Python 3 implementations. Just took this long for people to agree. :-)
02:35  lvh: GrahamDumpleton: So?
02:35  open: going further with the "2.x is in a sense a different language from 3.x" - are there debates in which people make the point that one is better than the other? if they do - which version do they side with?
02:35  lvh: GrahamDumpleton: It still only happened last week, I'm not sure that getting people to switch when the spec doesn't even exist yet is a reasonable idea
02:35  lvh: precisely *because* people disagreed
02:36  lvh: open: See the topic
02:36  lvh: open: It basically boils down to "do you need 2.x only things or not"
02:37  lvh: open: 3.x is mostly a better language -- there are and have been some rough edges
02:37  lvh: apparently email is fixed now? but I'm pretty sure it's been broken for the majority of the time it was available
02:38  lvh: open: Unfortunately something being a great language doesn't mean it's a useful language for developing things in
02:38  lvh: open: An extreme example is PHP
02:38  lvh: open: PHP is pretty objectively a horrid mess of a language, yet people still write things in it
02:39  open: alrightie :) thanks for answers, I'll go ahead and pacman -Syu python2 now
02:40  plush: heya. i am trying to profile a python app that is taking way too much time. this is the profiler output: http://pastebin.com/ExNStDpF
02:40  infobob: http://paste.pound-python.org/show/1668/ (repasted for plush)
02:40  plush: my brain somehow fails to parse this. anyone got an idea what is happening here?
02:41  lvh: open: twisted doesn't work yet, django doesn't work yet, gevent doesn't work yet. pygtk is close to being complete. Also: when projects *say* they have py3k support, verify that
02:41  lvh: open: More than once I've found that actually means "one guy managed to hack a branch so that it looks like it works on py3k, but we don't update that branch, so it's actually diverged from trunk, which still doesn't convert cleanly"
02:42  lvh: which is fine, I completely accept these people have better things to do, I just think calling that "py3k support" is a bit funky
02:43  kosh: plush: is your source code one gigantic set of code in a single module with no functions?
02:43  plush: kosh: this is the mapnik renderer from openstreetmap. it is mostly c++ with a python interface. i have full source here but have not dug into it further yet
02:44  plush: kosh: the app can be seen in top as taking 100% cpu in the python process. but that may be misleading if the c++ code runs inside the same process of course
02:44  DasIch_: i'm getting a 'SystemError: PyEval_EvalCodeEx: NULL globals' what is this supposed to mean?
02:45  kosh: plush: just wondered since I have not see profiling data before that did not show any functions
02:45  lvh: DasIch_: Wow. How did you pull that off
02:45  DasIch_: lvh: i'm investigating
02:45  lvh: DasIch_: Well, it's not very complex
02:45  kosh: plush: an python code runs slower when it is not inside a function/method since even if you are interfacing with some c library if the python code that you have written is just one long piece of code it will run slower
02:45  plush: kosh: i have never seen any python profiling data, so i do not know what it should look like, but the "method 'disable' " sounds to me like something may be disabling profiling, hence producing no output?
02:46  lvh: DasIch_: You know how EvalCodeEx takes a code object, globals, locasl...
02:46  lvh: DasIch_: That just means the globals was NULL.
02:46  lvh: DasIch_: Which won't work.
02:46  wardi: what's the recommended way to reopen stdout in binary mode in python 3?  os.fdopen(sys.stdout.fileno(), "wb") doesn't always work
02:46  plush: kosh: actually, it is all methods, this is heavily object-oriented python
02:46  kosh: plush: that one I don't know either, I have not seen that before either
02:46  plush: kosh: we have gotten as far as finding the method call that takes forever. so i wrapped that one call in a cProfile.runctx(...)
02:47  kosh: plush: http://docs.python.org/library/profile.html#module-pstats   that is what profiling usually looks like
02:47  plush: kosh: so the line exec'd by the profiler for sure is a method
02:47 * wardi finds detach()
02:47  DasIch_: lvh: it's a function wrapped in a proxy, in order to call the function directly without alerting the proxy i'm doing foo.__class__.__call__(foo)
--- Log closed Mon Jan 17 02:52:47 2011
--- Log opened Mon Jan 17 02:58:07 2011
02:58 --- Users 759 nicks [0 ops, 0 halfops, 0 voices, 759 normal]
02:58  smw: Anyone know if there are coupon codes for pycon?
02:58  _habnabit: photofroggy, so don't make it take a long time.
02:58  plush: kosh: of course, makes perfect sense. the python profiler stops at the native code boundary
02:58  _habnabit: smw, please stop spamming that here.
02:58  smw: _habnabit, sorry
02:58  lvh: madhat: You're trying to see if the first bit is zero?
02:58  photofroggy: _habnabit: the application I am making can use extensions made by others
02:58  brando753: mdeboard, its a prompt, anything you enter will go to its append file having a Ctrl+B will take you back to the main menu of the script
02:58  plush: kosh: while my problem persists, it is clearly not python-related. thanks for your quick tip. now i know i have to start looking elsewhere...
02:58  lvh: madhat: not n & 1, then
02:58  _habnabit: photofroggy, so make them write their methods async.
02:58  inductiveload: hi! I'm getting very confused as to what I am supposed to do with drawingAreas in pygtk. I have a drawing area that I load a TIFF into (that is done and OK) and now i want to redraw it (it will have stuff on top later). what is the best way to do that? the drawingArea is self.drawingArea and i tried self.drawingArea.queue_draw()
02:59  dhaivat: Hello everyone. Do you guys think that this looks like a good idea: http://blogbox.tk/
02:59  kosh: plush: no problem
02:59  photofroggy: _habnabit: yes but what if they write something that takes an hour to run?
02:59  lvh: photofroggy: There are three solutions to your question
02:59  photofroggy: not that they would
02:59 --- Channel #python was synced in 91 seconds
02:59  lvh: photofroggy: If you are actually worried about CPU-time concurrency (hence possibly using parallelism), you'd use processes, not threads
02:59  photofroggy: ok
02:59  lvh: photofroggy: If you are actually worried about blocking your application, you would preferably use cooperative tasks
03:00  photofroggy: what?
03:00  inductiveload: however, the previous guy just had expose-event link to a function that just reloaded the image into the pixmap every time and killed the CPU dead
03:00  lvh: photofroggy: Otherwise, possibly, if the operation is fundamentally blocking and can not be made unblocking, you could use reactor.deferToThread
03:00  brando753: mdeboard, is it really going to be that difficult to pull back on a Ctrl + B press?
03:00  lvh: photofroggy: well, you could either write your own thing, but unsurprisingly twisted already has what you asked for
03:00  lvh: photofroggy: http://twistedmatrix.com/documents/current/api/twisted.internet.task.Cooperator.html
03:01  lvh: terminationPredicateFactory is definitely the awesomest name in the core :-p
03:02  seen_: DasIch_: jython produces the same error as pypy  (even better error message)
03:02  dhaivat: anyone for my question?
03:03  lvh: dhaivat: You posted a link to a blog. I don't understand the question part.
03:03  mdeboard: brando753: Well, it's almost certainly not "difficult" but it doesn't sound liek a very pythonic design choice. I don't know how to set up a special keyboard interrupt key combination for a loop. I'm sure it can be done but wow, that seems unnecessarily complicated.
03:03  h0ho: !books
03:04  kosh: dhaivat: I don't get what you are even asking
03:05  photofroggy: Ok, I definitely have an irrational dislike for Twisted
03:05  h0ho: like php is the best book for python the python manual itself?
03:05  lvh: h0ho: We don't have bots here that respond to that kind of thing
03:05  photofroggy: And I think it's only me being stubborn that stops me from using it
03:05  lvh: h0ho: See the topic for a few links
03:05  brando753: mdeboard, how else would you recommend to exit without impairing the database's ability to input names and numbers?
03:05  photofroggy: thing is, I like Python 3
03:05  h0ho: lvh: will do thanks
03:06  mdeboard: brando753: Exit when the process is done?
03:06  lvh: photofroggy: It's okay, no offense, but when ten minutes ago you thought the  answer was threads, I'm not sure many people are going to take your opinion on cooperative schedulers seriously
03:06  kosh: dhaivat: and what is the point of the entire thing being a frame that actually uses another domain name?
03:06  photofroggy: lvh: I know
03:06  Orborde: If I have ifilter(func, seq), and it turns out that func(x) is False for all x in seq, how do I catch this condition without the awkwardness of try/except?
03:06  lvh: photofroggy: AFAIK, nothing similarly reasonable has been ported to 3.x
03:06  photofroggy: lvh: I most likely don't need to use threads so I'll just not bother for now
03:06  mdeboard: brando753: "for item in sequence: write item to database"
03:07  kosh: Orborde: look at any and all
03:07  dhaivat: kosh: yeah, but that's just so I don't have to pay for a domain name until someone tells me its a good idea.
03:07  kosh: dhaivat: what are you even asking about that?
03:07  dhaivat: kosh: just the idea that you can post w/e the heck you want a ebsite.
03:07  lvh: photofroggy: Threads are basically never the answer
03:08  brando753: mdeboard, no, the user is inputing names and numbers, repeat function to give them a new prompt to enter names and number and again until the user is done how does the user signal he is finished inputing data?
03:08  lvh: photofroggy: There are very specific cases in which they are, but it's unlikely you'll run into them
03:08  Orborde: kosh: I need to get the first element x for which func(x) is True, not merely check whether there exists one.
03:08  photofroggy: lvh: Yeah I know.
03:08  lvh: photofroggy: So why are you still pretending they're in the running
03:08  photofroggy: lvh: Sometimes they seem like a good idea but end up being pointless and overcomplicate things...
03:08  photofroggy: lvh: I was just contemplating it
03:09  lvh: People just end up using libraries that aren't threadsafe as if they were
03:09  lvh: Or they forget to lock datastructures and hope it won't be a problem because of the GIL
03:10  kosh: dhaivat: that seems like a very very poor idea
03:10  photofroggy: lvh: How would you do synchronous IO in the terminal using only standard libs?
03:10  lvh: (thought experiment: if your operation isn't made atomic through an explicit lock, what do you know about when what expressions will get executed? What do you know about similar code being executed concurrently with yours? Where are the race conditions?)
03:10  lvh: photofroggy: I'm assuming you mean asynchronous?
03:11  kosh: Orborde: make a little helper function that does that?    def firstTrue(seq): for i in seq: if i: return i
03:11  kosh: Orborde: then use that wherever you need it
03:11  mdeboard: brando753: How does a user signal anything? Make it an explicit choice for them. "Type -d- when done." Or whatever. Otherwise you're going to have to have your module listening for Ctrl-B, plus using Ctrl-B opens up a ton of problems, what if Ctrl-B is bound to another OS function?
03:11  photofroggy: lvh: ? I expect to be able to give input while output is being written to the screen.
03:11  lvh: photofroggy: that's not sync, that's async
03:11  mdeboard: brando753: I don't know, I would personally just find another way. I'm sure it can be done, just seems like a bad idea.
03:12  Orborde: kosh: I was kind of hoping there'd be an obvious standard library function, because I think it's poor form to write my own copies of standard helper functions if I can avoid it.
03:12  lvh: photofroggy: In which case: twisted does it with only the stdlib (and z.i)
03:12  photofroggy: lvh: It does?
03:12  photofroggy: brb
03:12  lvh: photofroggy: Yes, what did you think it did?
03:12  photofroggy: I didn't know it did IO for the terminal
03:13  lvh: I told you yesterday it did.
03:13  lvh: urwid works with twisted. twisted.internet.stdio. twisted.conch.
03:13  photofroggy: Did I ask yesterday?
03:13  photofroggy: If so my memory really is shot to shit
03:14  lvh: photofroggy: Yes, you did. Could've been the day before.
03:14  photofroggy: I remember asking about this stuff ages ago
03:14  photofroggy: but Twisted was not mentioned
03:15  lvh: photofroggy: Then your memory is shot.
03:15  photofroggy: fair enough
03:15  lvh: If for some reason you want to do it *yourself* using the stdlib, good luck
03:15  lvh: I'm not interested in these "cross the snakepit over this tightrope with your hands tied behind your back blindfolded" exercises, sorry
03:17  photofroggy: lvh: I already made something usable (windows-only) using WConIO, but that doesn't count as stdlib, and it was still a messy solution
03:17  photofroggy: and most likely buggy
03:17  lvh: oh god, conio.h
03:18  photofroggy: yeah it's odd
03:18  lvh: I have no idea why you have such trouble using twisted, but buggy craptacular windows console libraries from ten years ago are fine
03:18  lvh: instead of psychoanalyzing I'm going to go do something more useful though
03:19  photofroggy: lvh: I was curious :P
03:22  kosh: Orborde: I can't think of any standard library function for that
03:26  brando753: is there a way to make python go back go a line number if a condtition is met in a if else statement?
03:26  mdeboard: NO
03:26  mdeboard: No, god
03:27  kosh: brando753: python is not interpeted, it compiles before it runs
03:28  lvh: brando753: http://mail.python.org/pipermail/python-announce-list/2004-April/002982.html
03:29  _habnabit: brando753, have you heard of a thing referred to by some as a 'loop
03:29  _habnabit: '
03:29  mdeboard: lvh: Oh right, I forgot about that. I remember being so relieved when they implemented the advanced functionality of BASIC to Python
03:30  brando753: ya and its killing me
03:30  brando753: brand new and still figuring it all out 'first day'
03:31 * jeffszusz shivers at the mention of GOTO
03:31  jeffszusz: I used to love GOTO.
03:31  lvh: _habnabit: The best part is how they made it look like a keyword
03:31  _habnabit: lvh, yeah. :D
03:31  jeffszusz: Then I learned there was another way. That same day I stopped hitting myself with hammers and stuffing my pants with poison oak.
03:31  lvh: _habnabit: Took me longer than it should have before I figured out "oh, right, a dot and a star"
03:32  mdeboard: brando753: Have you done any tutorials or read anything at all about Python?
03:33  brando753: mdeboard, read half of python documentation under turtorial and am designing my version of a hello world program (a database of sorts)
03:35  mdeboard: brando753: I'd recommend reading some basic tutorials about for loops, while loops, and maybe even if...else. Those are pretty fundamental concepts in Python, especially if you're building a database of sorts based on user input.
03:36  brando753: I read the for loops in python documentation and couldnt figure it out, im doing a makeshift while loop :D
03:36  mdeboard: makeshi--
03:37  mdeboard: ok, good luck. I believe in you
03:37  jeffszusz: ahahah
03:37  jeffszusz: i can almost picture the look on your face, mdeboard.
03:38  Slix`: What?
03:38  Slix`: for loops are.. so.. simple..
03:39  brando753: what are they??? i dont know
03:39  brando753: I couldnt figure what you would ever use them for
03:39  DasIch_: brando753: they are like foreach in other languages
03:39  DasIch_: brando753: you use them almost always
03:39  brando753: DasIch_, lets pretend I dont have much experience with other languages
03:39  DasIch_: brando753: in fact while loops are rarely used
03:39  brando753: :D
03:40  DasIch_: brando753: a for loop allows you to iterate through the items of an iterable and do something with each item
03:40  jeffszusz: hey brando753, you should try http://learnpythonthehardway.org
03:40  mdeboard: DasIch_: He doesn't know what an iterable is
03:40  jeffszusz: i'm using it to teach about 10 guys in my college program.
03:41  DasIch_: brando753: an iterable could be a list, something like [1, 2, 3]
03:41  mdeboard: DasIch_: But not a dictionary? Why not a dictionary? Well, you see...  He just needs to go do learnpythonthehardway and the bit.ly link in the topic
03:42  brando753: i just downloaded the book and am putting it on my ereader
03:42  jeffszusz: w00t that's a second for learnpythonthehardway :D
03:43  cgc17: jeffszusz: that looks like a nice approach. have you had success teaching people with it?
03:43  jeffszusz: I will certainly keep you posted - we start this Tuesday coming up!
03:44  smw: jeffszusz, you are teaching people with it?
03:44  jeffszusz: My friend Ben and I pored over 5 or 6 different python tutorials looking for the best one for this group
03:44  jeffszusz: learnpythonthehardway seems the best for our purposes.
03:44  cgc17: jeffszusz: awesome I've been going through http://en.wikibooks.org/wiki/Non-Programmer's_Tutorial_for_Python_3/ and maybe I'll switch over after i'm finished
03:44  smw: jeffszusz, I would like to see if this works. I remember learning C with my dad handing me a book and saying making these programs run.
03:45  jeffszusz: smw, we chose this particular ebook in order to allow those who like teaching themselves to just go ahead in the text without us
03:46  jeffszusz: whereas those who need a little more guidance can get it.
03:46  brando753: just got it on my reader will post back if it helps "D
03:47  DasIch_: lpthw is definitely nice in that it forces you to actually understand what is going on
03:48  glittle: Hey guys, got a question about tuples.  When creating a tuple out of multiple tuples (appending tuples to tuples) and then removing an entry from one of the nested tuples AFTER they've already been nested results in the larger tuple to have that entry removed as well.  Why?
03:48  bob2: glittle: containers refer to the things inside them
03:48  DasIch_: glittle: you can neither add nor remove items from a tuple
03:48  DasIch_: glittle: they are immutable
03:49  bob2: oh
03:49  glittle: Daslch_ not true (I believe).  Want me to supply code?
03:49  bob2: tuples really are immutable
03:49  DasIch_: glittle: you probably mean lists which are created with brackets []
03:49  bob2: but you can mutate things inside them (if they support that)
03:49  _habnabit: Or made new tuples.
03:49  pbx: I'm unable to make a virtualenv using Python 2.7. Error is exactly as reported here, but like the last commenter I don't see how it's resolved: https://bitbucket.org/ianb/virtualenv/issue/63/now-python27-requires-_weakrefset
03:50  magn3ts: I'm getting "No module named simplejson" even though I have python-simplejson installed. Any tips?
03:50  _habnabit: magn3ts, yes, install it for the correct python.
03:51  magn3ts: uh, heh, ok
03:51  seen_: glittle: tuples are immutable; things they contain could be mutable: t=([],); t[0].append(1)
03:51 * magn3ts not sure what that means
03:51  _habnabit: magn3ts, you have multiple pythons installed, and installed simplejson for the wrong one.
03:51  bob2: magn3ts: how did you install python and simplejson
03:51  bob2: pbx: it means 'use a newer virtualenv version'
03:51  magn3ts: `sudo apt-get install python python-simplejson`.
03:51  bob2: magn3ts: and how are you runnign your script?
03:51  glittle: Daslch_: absolutely right, I am working with lists and not tuples.  My question still holds though, why do actions change something I've originally defined?
03:52  magn3ts: bob2, you asked the right question. I can import it in python-interactive fine, but not through GAE. I'll go ask there instead of here, my nad.
03:52  pbx: bob2: interesting. looks like that machine has 1.4.9. i'll upgrade to 1.5.1 and if that solves the issue i'll comment on the ticket.
03:52  bob2: magn3ts: yeah, the sdk has its own python afaik
03:53  magn3ts: bob2, yeah, I'd been using json only to find out that it works locally in the dev server, but not when I uploaded it to GAE. simplejson works on GAE but not locally >_< :P
03:53  _habnabit: magn3ts, I don't think we really want to hear about your nads
03:53  magn3ts: _habnabit, what about just one of them at a time? :)
03:54  MNichie: When comparing strings, does python stops the comparison on the first character that makes it false, or will it compare  both strings until it reaches the end?
03:54  bob2: pbx: appears to be fixed in 1.5.1
03:54  _habnabit: MNichie, is the question really "can python be used for cryptographic string comparison" ?
03:54  bob2: MNichie: former, I assume.  are you worried about a timing attack?
03:54  bob2: glittle: because the container refers to the objects you put inside it
03:55  bob2: glittle: it doesn't copy them
03:55  pbx: bob2: you were correct, thanks
03:55  MNichie: _habnabit: I'm concerned about a value of one of the strings being 2 gigs worth of xml..
03:55  _habnabit: MNichie, and you're doing an /equality/ check on them?
03:55  DasIch_: MNichie: if you hold the entire string in memory you already have a problem
03:55  glittle: bob2: so things can't be in an "outdated" state?
03:56  bob2: pbx: hot
03:56  bob2: glittle: I guess no
03:56  bob2: glittle: but that's a slightly convoluted way of thinking about it :)
03:56  MNichie: did not think about the memory problem, creates a bit of a problem.
03:57  cgc17: "Learn Python the Hard Way" says not to start with python 3; is that the best approach? (starting with 2.x)
03:57  bob2: cgc17: I'd say so
03:57  bob2: cgc17: if only because almost all the tutorial around are for python2
03:58  DasIch_: MNichie: with 2GB (i assume in bytes as low-level datastructure not the str object)  that bit of a problem will probably cause a MemoryError
03:58  jeffszusz: cgc17: yes, because most of the tools out there are still only python 2.x compatible, most companies out there are still using 2.x, and the best support available (i.e. this room) is generally 2.x specific.
03:59  jeffszusz: cgc17: and if you follow proper coding practices, it will be very easy for you to switch to 3.x if and when you need to.
04:00  cgc17: jeffszusz> bob2> thanks
04:01  MNichie: DasIch_:Currently I am making the call to get the XML with urllib2, which places the response in an object.  I guess a streaming the data to a file would be the only other way to do this without eating up all of my computer's memory?
04:02  DasIch_: MNichie: the response object has a .read() method with a size argument
04:02  DasIch_: MNichie: also a library like lxml.html will take care of these things for you
04:02  smw: MNichie, you could also use an xml library that accepts file like objects.
04:03  datacaliber: I'm trying to get a feel for how a python project flows from prototyping => full fledged project. Seems to me that most projects stay pretty shallow and only break out into packages once you get enough similar modules. Django seemed to have started out with a lot of hierarchy, whiles most of ian bickings stuff usually starts off as one big module (pip was like 3000 lines at one point) and then breaks up. Is there a "best practice" fo
04:03  bob2: that'll use even more of teh ram
04:03  datacaliber: this kind of stuff?
04:03  smw: bob2, point taken...
04:03  bob2: smw: oh, actually, iterparse
04:03  bob2: touche
04:03  smw: MNichie, what is so big that you can't store it in memory?
04:04  smw: bob2, that is what I was thinking. parse and save to db as it comes in.
04:04  bob2: datacaliber: I wrote a template project based on http://jcalderone.livejournal.com/39794.html and branch from that
04:04  jsizzle: greets
04:04  smw: MNichie, I am curious as to how big this xml file is.
04:05  MNichie: its for api to a program to pull reports, if you select a date far back, the size of the xml file is huge.
04:06  tomas_: hi, can somebody please tell me how can I search if 'Green' in list([{'term': u'Green', 'scheme': None, 'label': None}, {'term': u'Implementation', 'scheme': None, 'label': None}])?
04:06  tomas_: >>> 'Green' in list([{'term': u'Green', 'scheme': None, 'label': None}, {'term': u'Implementation', 'scheme': None, 'label': None}])
04:06  tomas_: False
04:06  jsizzle: I'm working on "Learning Python the Hard Way" and one of the excercises is to comment a file properly. Would anyone mind taking a quick look at a paste and see if I am on the right track? Thanks in advance! http://pastie.org/1468680
04:06  tomas_: I know I need to do some itterations, but I thought maybe thre's a quick way
04:06 --- Eliyak is now known as Eliyak_away
04:06  MNichie: smw: few bytes to GB depending
04:06  mdeboard: jsizzle: Yes
04:07  smw: MNichie, in that case I suggest lxml iterparse.
04:07  jsizzle: I know I'm supposed to use paste.pound-python.org but its not working from here for whatever reason.. sorry
04:07  jsizzle: mdeboard: Thanks! loving the tutorial thus far btw, thanks for the tip!
04:08  DasIch_: jsizzle: .read() is a method, raw_input() is a function
04:08  seen_: MNichie: yesterday somebody posted: http://www.ibm.com/developerworks/xml/library/x-hiperfparse/
04:08  mdeboard: tomas_: Whoa, you have a tuple of a list of dictionaries
04:08  mdeboard: tomas_: Why?
04:09  tomas_: mdeboard: that's stuff I get from feedparser
04:09  mdeboard: tomas_: I've used feedparser extensively
04:09  mdeboard: tomas_: What you want is
04:09  mdeboard: tomas_: if "Green" in list.keys()
04:10  tomas_: I want to check if 'Green' is in entry['tags']
04:10  tomas_: where entry['tags
04:10  tomas_: well like above
04:10  mdeboard: tags is a dictionary?
04:10  tomas_: I'll try in list.keys
04:10  mdeboard: right?
04:10  jsizzle: DasIch_: thx! fixed that up! other than that did it make sense and seem on track?
04:10  DasIch_: jsizzle: everything else is fine
04:11  jsizzle: DasIch_:  Thx again! I appreciate your help
04:13  bob2: tomas_: not possible to do efficiently
04:13  bob2: tomas_: but: any(u'Green' in item.values() for item in yourlist)
04:14  tomas_: yeah looks strange (:
04:14  tomas_:         entry_categories = []
04:14  tomas_:         for category in entry['tags']:
04:14  tomas_:             entry_categories.append(category['term'])
04:14  tomas_:         if lookingfor in entry_categories:
04:14  bob2: :|
04:16  tomas_: bob2: your solution works (:
04:16  tomas_: better
04:18  tomas_: thanks bob2
04:19  glittle: how does one open a python file from the command line?
04:20  smw: glittle, windows, linux, or mac?
04:20  mdeboard: python filename.py
04:20  glittle: mac, IDLE
04:20  mdeboard: step 1: install ubuntu virtual box
04:20  mdeboard: step 2: ctrl-alt-t
04:20  mdeboard: step 3: vim filename.py
04:20  smw: glittle, as mdeboard said, python filename.py
04:20  glittle: mdeboard: hahah very funny
04:21  glittle: SyntaxError
04:21  mdeboard: glittle: By open do you mean to run a script or to open for editing?
04:21  glittle: both
04:22  mdeboard: ok well to open for editing open it with watever text editor or IDE you use
04:22  glittle: but there's no command for that?
04:22  _habnabit: glittle, emacsclient -n foo.py
04:22  glittle: OH I'm sorry, I don't mean in Terminal, I mean in the Python Shel
04:22  glittle: *Shell
04:22  _habnabit: glittle, there's no command for that, no.
04:23  glittle: really?
04:23  smw: glittle, in ipython, you can do %run
04:23  glittle: what's that?
04:23  smw: glittle, ipython is an interactive terminal that is easier to use than the one python comes with.
04:23  _habnabit: There's an important caveat, though.
04:23  _habnabit: ipython isn't a python interpreter.
04:24  glittle: oh, well I don't have that.  There's no command in the Python Shell (IDLE) to either run or open a .py?
04:24  _habnabit: glittle, IDLE is not "the python shell"
04:24  DasIch_: idle is a wannbe ide nobody uses
04:24  smw: DasIch_, what do you use?
04:24 --- emma is now known as em
04:25  DasIch_: smw: vim
04:25  glittle: ok... well w/e it is, what do I type to open or run a .py
04:25  smw: DasIch_, so you use a build your own ide instead of a wannabe ide :-P
04:25  _habnabit: glittle, I told you.
04:25  _habnabit: 19:22:17 < _habnabit> glittle, emacsclient -n foo.py
04:25  _habnabit: glittle, that'll open it.
04:25  _habnabit: glittle, `python foo.py` to run it.
04:26  glittle: SyntaxError: invalid syntax
04:26  _habnabit: ...
04:26  DasIch_: smw: if you want to use pida, eclipse or whatever but idle causes more problems than it solves
04:26  bob2: glittle: you run that from your shell, not from pytohon
04:26  bob2: glittle: people generally use their favourite editor to edit python files, and then either run the script from the command line or have their editor run it
04:26  glittle: The header of my "python" says "Python Shell"
04:26  smw: DasIch_, good to know. (I use gedit at the moment. I am looking at switching to spyder)
04:27  DasIch_: smw: use what you are most comfortable with
04:27  DasIch_: smw: and decide early because the longer you stick with something the harder it is to switch
04:27  bob2: jsizzle: open() doesn't do anything to do with lists (re: your comments)
04:27  glittle: I would like to run or open from the editor
04:27  glittle: is that possible?
04:28  bob2: jsizzle: and line 23 just opens the file, it doesn't read it in (you do that on line 26)
04:28  smw: DasIch_, It is not hard to switch from gedit ;-).
04:28  zedxz: /join startups
04:28  DasIch_: smw: if you switch to vim/emacs it is
04:29  smw: DasIch_, I am sure.
04:35  pyml: hi there- i am trying to find/replace text in some html files.  basically, i rip thru a root dir with os walk and build a dict of all of the files and filepaths, then i rip through another dir with the html files.  since i now have the replacement filepaths, i can replace the text in the html files if i find it matches any of the filenames in my dict keys.  what i would like to know is what people might use to do the string replacement.  reg
04:35  pyml: open() ?
04:35  glittle: I would like to run or open from the editor
04:35  glittle: is that possible?
04:35  _habnabit: glittle, anything is possible.
04:37  Sargun_Screen: _habnabit: :-)
04:37  psykidellic: _habnabit: http://bpaste.net/show/12988/ - thoughts?
04:37  pyml: i saw this: http://bytes.com/topic/python/answers/870172-python-search-text-file-string-replace
04:37  pyml: which suggests that open() would be used twice in two modes
04:37  _habnabit: psykidellic, what does "doesn't work" mean
04:37  psykidellic: _habnabit: I am just following the docs at: http://docs.cython.org/src/tutorial/external.html but for some reason my method f is not exported.
04:38  _habnabit: psykidellic, cdef functions aren't exported, no.
04:38  _habnabit: psykidellic, only def and cpdef
04:38  pyml: it also mentions the fileinput object
04:38  smw: pyml, are you trying to rewrite links on websites?
04:38  pyml: yep
04:38  psykidellic: _habnabit: Hmm, then shouldnt the docs say so?
04:38  smw: pyml, use lxml
04:38  _habnabit: psykidellic, pretty sure they do
04:39  smw: pyml, You can use lxml to locate all a tags and then modify each url.
04:39  pyml: smw: it's not serverside- does this matter?
04:39  psykidellic: _habnabit: Maybe, they do in later. From the first glance, it seemed they were giving an example of a method called from Python module. But I guess it was not intended.
04:39  smw: pyml, if it was server side, I would tell you to do something different :-)
04:40  pyml: smw: cool; thanks for the tip
04:40  smw: pyml, you can parse the webpage with lxml. Then modify all a tags. Then remake the html file.
04:41  smw: pyml, you can find a tags with doc.xpath('//a')
04:41  pyml: smw: i see that this could be useful, and possibly faster, but i've already got almost all of the script written
04:42  smw: pyml, which part of the script is written?
04:42  pyml: smw: everything except for the text replacement, which i assume would be regex
04:43  pyml: smw: i am interested in doing it
04:43  _habnabit: pyml, never ever ever use regexps on HTML.
04:43  _habnabit: pyml, that's what lxml is for.
04:43  pyml: _habnabit: ok- would you recommend multiple uses of open() with repace() ?
04:43  pyml: hm; ok
04:43  pyml: thanks all
04:43  _habnabit: pyml, str.replace? No way.
04:44  _habnabit: pyml, just use lxml.
04:44  pyml: k
04:44  seen_: pyml: http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454
04:44  pyml: seen_: thanks
04:45  smw: pyml, it is a very bad idea to use regex for this.
04:45  pyml: smw: yea, i got that.  thanks again
04:53  disappearedng_: http://paste.pocoo.org/show/321906/ Anyone here knows what error is this ? ( it's only on my server machine so I guess it must have been 1 outdated module)
05:03  Louis11: I'm working with Google Checkout. On the notification, Google Posts values back to my server, one value is shopping-cart.items, which has two values. However, when I try to access these values as a list, I only get the last value. Is there anyway to access these values as a list?
05:03 --- Eliyak_away is now known as Eliyak
05:07  blackthorne: hi
05:07  blackthorne: I'm trying to extract all the heading and subheadings of an html page using beautifulsoup
05:08  mdeboard: Louis11: Try "items = [item for item in shopping-cart.items]"  ... disclaimer: I have no idea about Google Checkout but that list comprehension might work
05:08  blackthorne: unfortunately I can't do things like for heading in soup.findAll('h*')
05:08  blackthorne: to get the ordered list of the existing headings, any ideas?
05:08  ornot: im using sockets for communication with some server software, and i need to receive some structure with fixed size fields
05:09  pyml: _habnabit: how to install this stuff on osx?  i put the frameworks in System/Library/Frameworks and xmllint + xmlcatalog in /usr/bin/* can i now just import?  also, what part of the docs do you think pertains to my particular use case?
05:09  ornot: like 1 byte for number, 4 bytes for size
05:10  ornot: how i can create something like struct in C ?
05:10  pyml: _habnabit: should i look into ElementTree, lxml.etree, or lxml.objectify?
05:11  _habnabit: pyml, uh
05:11  mdeboard: blackthorne: You're going to have to loop over each <h*> tag
05:11  _habnabit: pyml, never touch /System
05:11  _habnabit: ornot, struct module
05:12  pyml: _habnabit: where to put frameworks?
05:12  _habnabit: pyml, /Library/Frameworks
05:12  _habnabit: pyml, and if it's html, lxml.html
05:12  pyml: _habnabit: no folder there called framworks
05:12  pyml: _habnabit: or Frameworks
05:12  _habnabit: pyml, then make one.
05:12  pyml: _habnabit: ok; was my intuition; thanks
05:12  blackthorne: mdeboard: I want to keep the heading hierarchy, that seems very heavy stuff
05:15  mdeboard: blackthorne: http://paste.pocoo.org/show/321915/
05:16  mdeboard: blackthorne: Just an example, don't go dropping that in your code and expect it to work flawlessly
05:17  seen_: blackthorne: beautifulsoup should support regexs to specify a tag name. See docs for find(), findAll()
05:17  blackthorne: mdeboard: I think that will not give me order
05:17  mdeboard: blackthorne: Oic
05:18  disappearedng: Anyone here knows why this error is occuring? http://paste.pocoo.org/show/321916/
05:18  blackthorne: my target here is to generate a table of contents from an htmlpage, from headings and subheadings like an index
05:18  blackthorne: I don't want 3 or 6 lists of heading, each for each level
05:19  bob2: disappearedng: bsd?
05:19  disappearedng: bob2: No just ubuntu 9.10
05:19  seen_: disappearedng: google it might related to whether /dev/shm is mounted and its permissions; but it doesn't always work
05:19  seen_: disappearedng: google says^
05:19  bob2: ah, didn't think of that
05:20  seen_: bob2: dist-packages is ubuntu thing (i think)
05:21  mdeboard: blackthorne: Take a look at findParents, there may be something useful for you there.
05:21  bob2: yeah, I just saw /usr/local at the top of the traceback, and thought I remembered some bsd's don't have the shmem thing
05:22  mdeboard: blackthorne: But there's no simple way of doing it
05:22  blackthorne: mdeboard: all headings may share the same parent, thank you though
05:22  disappearedng: yeah I researched and found this: UP- finally done, /dev/shm was not mounted. so add shm to fstab mount shm set full 777 permissions on /dev/shm
05:24  mdeboard: blackthorne: Impossible, if that's the case then there's no hierarchy
05:25  jeffszusz: whatever happened to #python.web ? wasn't it huge before? there are like 10-15 people in there at a time now.
05:25  mdeboard: blackthorne: And the html is way too borked to bother with, and creating a Table ofContents would be more quickly done by hand
05:25  jmt: Someone help me with this? http://pastebin.com/zP7ZimTT Question is asked in the paste, might be confusing to do it here.
05:25  infobob: http://paste.pound-python.org/show/1669/ (repasted for jmt)
05:26  tos9: jmt: whatever it is not like that. What does the first line have to do with the third? Or really what's your expected output
05:27  seen_: blackthorne: soup.findAll(re.compile(r'^h\d')) seems to be working
05:27  tos9: jmt: you want the first element of that list?
05:27  _habnabit: jmt, do something like what?
05:27  jmt: I want to print a[0].
05:27  ryguillian: w/indow 8
05:27  mdeboard: tos9: He's expecting word = 'abc' to behav elike word = a + 'bc'
05:27  jmt: No, I made it into a list [a, b, c]
05:28  ecret: when running a function in python, i want to breakpoint at a line to access the stack at that line.  Since its in a function, is there a pause or breakpoint command?
05:28  jmt: And want to print a[0] after getting a from the string.
05:28  _habnabit: jmt, pastebin input and desired output.
05:28  _habnabit: jmt, this paste is too confusing.
05:28  bob2: ecret: 'import pdb ; pdb.set_trace()' is the usual incantation
05:28  tos9: jmt: yeah don't do that
05:28  jmt: Okay, hold on.
05:28  tos9: jmt: (don't pull global vars from strings)
05:28  mdeboard: jmt: word[0] will forever be a string
05:28  _habnabit: ecret, `python -m pdb yourwhatever.py ...`
05:29  _habnabit: ecret, and then you can set a breakpoint.
05:29  tos9: jmt: pastebin some more context if you can, that'll help with an alternative
05:29  ecret: i am using emacs, so i just eval the buffer
05:29  ecret: was hoping to stop at one line in a function, and check the stack. I will try pdb
05:30  glittle: boop
05:30  jmt: http://paste.pound-python.org/show/1670/
05:30  seen_: ecret: M-x pdb
05:31  tos9: jmt: Ouch.
05:32  mdeboard: he's trying to do this
05:32  mdeboard: http://paste.pocoo.org/show/321934/
05:32  ecret: seen_ ah cool
05:32  mdeboard: jmt: To literally do what you're trying to do, you'd have to do something like http://paste.pocoo.org/show/321934/
05:33  tos9: Or a list of lists if you'd like. Depends what you want to be doing with those. Also, don't build strings like that.
05:33  tos9: (by concating tons of them)
05:33  jmt: Ummm...
05:33  blackthorne: the answer to my problem while ago: soup.findAll(name=re.compile(r"h\d"))
05:34  jmt: The concatenation was just to see if I made any mistakes :D
05:34  mdeboard: blackthorne: Yeah someone suggested it to you about 20 minutes ago
05:35  jmt: I'll try the dictionary, cheers.
05:36  phoe6: http://uthcode.codepad.org/2PwGjMR7  I am trying to emulate echo "header information" | cat - data.csv > dataInfo.csv  via subprocess.
05:36  phoe6: I see that shell=True is required when doing  cat -  to get the value from the PIPE.
05:36  phoe6: but it misses the second argument.
05:37  bob2: what's the point of the program?
05:37  phoe6: bob2: add header to a each of the files
05:37  tos9: That should be fairly simple to do in pure python I'd guess...
05:37  phoe6: tos9: excep that it would be costly to open the file and then add a line.
05:37  phoe6: *except
05:37  bob2: no more costly than what you're doing
05:37  bob2: what's split do?
05:38  phoe6: split is a unix command to split a huge file into number of smaller files
05:38  blackthorne: mdeboard: yes, maybe. I'm not so good with the docs. I read them but I need examples
05:38  bob2: right
05:38  bob2: so, doing the whole thing in python is probably easier
05:39  phoe6: how? You will have to keep track of opening files/closing it/ count the lines and SIZE etc.
05:39  phoe6: and then writing to a file too.
05:39  bob2: heh
05:39  phoe6: isn't wrapping over split faster??
05:39  tos9: What? Keep track of what?
05:40  phoe6: tos9: keep track of number of lines and size written for each file.
05:40  tos9: You'd be essentially doing exactly what you're doing there
05:40  pythonirc1011: in strings that use .format() -- how do you write "{}"? I tried "\{" but it doesnt seem to work
05:41  bob2: {{}} iirc
05:41  tos9: phoe6: er why though? You're just adding a header to a bunch of files?
05:41  phoe6: tos9: split is a single step here. For splitting in Python, I will have to read the lines of the file and keep writing them.
05:42  phoe6: tos9: it is a requirement. :)
05:42  phoe6: think about it this way, the next stage will recognize a file from its header.
05:42  bob2: yeah, definitely quicker to do in python
05:42  phoe6: but that stage wont be able deal with huge file sizes. so I split it and then send it.
05:43  pythonirc1011: bob2: thanks
05:45  subsume: hrmpf
05:45  prsteele: pythonirc1011: hey, not sure if you ever got this earlier, it took me a while, but if you're still interested: http://pastebin.com/Bsny8pBu
05:45  infobob: http://paste.pound-python.org/show/1671/ (repasted for prsteele)
05:45  subsume: I know this isn't a python question, but is there a way to execute a script of literal commands?
05:45  subsume: shell script i guess it would be
05:46  pythonirc1011: thanks
05:46  denisesballs: hey all. is there an easy way to print the ↳ character (i think its unicode 0x21b3)?
05:46  phoe6: split takes care of size calculation. Suppose you want to split a file into chunks each 100KB, using split is easy, than reading the line calculating the len() and then comparing if exceeded 100KB
05:46  Varriount: Anyone familiar with the twistd script, part of twisted, and getting it to run on windows?
05:48  prsteele: denisessballs: what do you mean by print?
05:48 --- JanC_ is now known as JanC
05:48  denisesballs: print that character out on a line
05:48  prsteele: denisesballs: python handles that character, just do u"↳"
05:48  bob2: phoe6: http://paste.pocoo.org/show/321957/ or so
05:49  denisesballs: prsteele: so it does! i was looking all over at unicode conversions and had a feeling it was much easier...
05:49  denisesballs: thanks!
05:49  bob2: subsume: sure, get a shell to run it
05:49  prsteele: welcome!
05:49  bob2: Varriount: best to just ask (here or #twisted)
05:50  denisesballs: actually prsteele: that works in debugger but when i use it in my script i get "SyntaxError: Non-ASCII character '\xe2' in file ./match.py on line 82, but no encoding declared; see http://www.python.org/peps/pep-0263.html for details"
05:50  subsume: bob2 ./whatever ?
05:51  _habnabit: denisesballs, and did you see that page for details?
05:51  denisesballs: reading now
05:51  bob2: subsume: if it is executable and has a shebang, yeah
05:51  denisesballs: similar to the other stuff i was reading. i just wasnt sure what encoding would include that character
05:52  subsume: bob2 so I could just run this as root? http://dpaste.com/324795/
05:52  bob2: I guess so
05:53  bob2: I'd be a bit batshit insane, but sure
05:53 --- KyleXY[CoD] is now known as KyleXY[2]
05:53  subsume: what's so insane?
05:53  bob2: running django crap as root
05:53  subsume: I could run it as my webserver I guess
05:53  bob2: I assume supervisord is at least dropping privs to something else
05:53  subsume: oh wait. supervisord needs to be run as root
05:53  phoe6: bob2: thanks for the snippet.
05:53  seen_: denisesballs: just use u'\u21b3' if it is the only non-ascii character, otherwise add at the top of the script # -*- coding utf-8 -*- (if the file you are editing is in utf-8)
05:54  bob2: phoe6: it's a bit ugly, but I hate writing sh in python ;)
05:54  seen_: denisesballs: add : after coding
05:54  phoe6: few changes, which  I would  need is do readlines instead of read - because of reading full lines.
05:54  denisesballs: seen_: thats exactly what i wanted. thanks
05:54  phoe6: :)
05:54  bob2: phoe6: no, you wouldn't use readlines
05:54  denisesballs: i only need it for one character, didnt think id need the encoding line
05:54  bob2: phoe6: that'd read the whole thing in to ram at a time
05:55  bob2: well, maybe that's ok for you
05:56  phoe6: ohh
05:56  phoe6: but the read() has the possiblity that it would read incomplete line
05:56 --- Faithless is now known as Sorrowful
05:56  phoe6: bob2: that is why I was thinking that a solution might need to iterate through the file handle to count.
05:57  phoe6: readlines may not okay given the file-size.
05:58  bob2: so you want N lines? or N bytes, then backpedal to the last newline?
05:59  phoe6: It is actually upsize of N Bytes, without the line being broken
06:01  jsizzle: greets
06:01  bob2: phoe6: don't know what you mean, sorry
06:03  phoe6: bob2: Sorry. It is like this. If you read 100 Bytes of a 'Log file'. You will need the Log file where the bottom line is not broken
06:03  bob2: ok, so go high or go low?
06:03  phoe6: So, while reading 100 bytes if the last line crosses 100, one would read a line less.
06:04  bob2: so low
06:04  phoe6: yes.
06:04 --- Varriount is now known as Varraway
06:07  seen_: denisesballs: print & Unicode combo is non-trivial in general http://wiki.python.org/moin/PrintFails
06:14  Burgundy: Hello! Any clue why this very basic stackless python embedding code crashes ? http://ideone.com/j9isd
06:14  nekr0tik: So, real quick. It seems when I open a file in 'a+' for appending, attempts to read the first line with 'readline' return no string.
06:14 --- nekr0tik is now known as Nekr0tik
06:16  bob2: I suspect 'a' means it seeks to the end
06:16  bob2: but what are you trying to do?
06:16  _habnabit: No.
06:16 --- Varraway is now known as Varriount
06:16  _habnabit: 'a' mode is special; writes always go to the end, no matter where the file cursor is.
06:17  bob2: hm, python docs say "on some Unix systems means that all writes append to the end of the file regardless of the current seek position"
06:17  Nekr0tik: _habnabit~ I'm not writing though. I'm attempting to read the first line.
06:17  _habnabit: Nekr0tik, did you seek to the beginning?
06:18  Nekr0tik: _habnabit~ Neg, let me add that snippet in and see if it works.
06:18  jmt: Got everything working perfectly, thanks guys.
06:18  strawberrybunny: okay, so I'm looking at the documentation for the socket module, and the example code doesn't work
06:18  bob2: Varriount: seriously just ask
06:18  Varriount: Here or there?
06:18  Nekr0tik: f.seek(0) should place it at the beginning of the file correct?
06:18  _habnabit: strawberrybunny, then you probably did it wrong.
06:18  Nekr0tik: Given that f is my file object.
06:18  _habnabit: strawberrybunny, better yet, just use twisted.
06:19  bob2: Varriount: either
06:19  bob2: Nekr0tik: depends on the unix, according to the docs
06:19  strawberrybunny: um
06:19  bob2: Nekr0tik: what specifically are you trying to do?
06:19  strawberrybunny: that's way more than I need
06:19  strawberrybunny: I need a microproxy that simple substitutes strings
06:19  strawberrybunny: *simply
06:19  bob2: strawberrybunny: http://paste.pocoo.org/ your code, then explain in which way it fails (e.g. pastebin tracekacbk)
06:19  _habnabit: strawberrybunny, so?
06:19  _habnabit: strawberrybunny, twisted would make it simple.
06:20  Nekr0tik: bob2~ Well, I'm appending records to a file. At the beginning of the file though, I'm maintain a total and a value. I'm trying to append the records, adding and subtracting from that total.
06:20  strawberrybunny: Hm.
06:20  bob2: strawberrybunny: if you want to handle more than one connection, you'll end up writing your own event loop
06:20  Nekr0tik: So, "TOTAL = XXXX" would be the first line.
06:20  Nekr0tik: Records follow it one by one, line by line.
06:20  bob2: homework?
06:20  strawberrybunny: hang on then
06:20  Nekr0tik: Na, tired of doing it on my own.
06:21  Nekr0tik: Personal project.
06:21  Nekr0tik: In "r" mode, I can use readline to take the first line as a string, and then remove the first part to obtain my value.
06:22  strawberrybunny: http://paste.pocoo.org/show/322019/
06:22  Nekr0tik: But if I try and use the append mode to write my lines to the end of the file, I can no longer read the first line.
06:22  traceback0: is it possible to re-import something?
06:22  strawberrybunny: there's the client, the server, and the error
06:22  traceback0: for example I have a module with globals
06:22  _habnabit: traceback0, what would that mean
06:22  ivazquez|laptop: So then tell before appending, and seek after.
06:22  traceback0: _habnabit: I have a module with globals so state will remain preserved when I'd rather them get recreated
06:23  bob2: strawberrybunny: that host doesn't resolve
06:23  _habnabit: traceback0, 'recreated' when
06:23  strawberrybunny: hrm
06:23  ivazquez|laptop: The other modules will still have a reference to the original import.
06:23  strawberrybunny: oha
06:23  strawberrybunny: my god
06:23  Nekr0tik: Looks like that did it actually.
06:23  bob2: traceback0: so...there's an epiphany to be had here :)
06:23  traceback0: _habnabit: module A: a = 1; module B: from A import a; module C import A.a
06:23  Nekr0tik: <file object>.seek(0) before the readline.
06:23  bob2: traceback0: don't use modules to hold global mutable state, use instances :)
06:23  bob2: (perhaps with a default one in a module)
06:24  traceback0: example/
06:24  traceback0: bob2: ^
06:24  bob2: traceback0: the thing you're doing
06:24  _habnabit: traceback0, your example raises an ImportError
06:24  strawberrybunny: Is there a windows command line equivalent to suing the ampersand after a script to run it in the background?
06:25  _habnabit: strawberrybunny, ##windows
06:25  KirkMcDonald: strawberrybunny: Short answer: No.
06:25  strawberrybunny: I doubted it
06:25  strawberrybunny: but I figured it was worth a shot
06:26 --- Guest67489 is now known as hemanth
06:26  lxsameer: hi ,what do you suggest for a pythonic web server (like fapws3)?
06:26  _habnabit: lxsameer, a web server for what
06:27  lxsameer: _habnabit: for using as a internal web server for a software that have a web UI too
06:27  KirkMcDonald: lxsameer: Anything with WSGI or FastCGI support will work in a pinch.
06:27  amitz: SimpleHTTPServer.
06:27  ivazquez|laptop: CherryPy
06:27 * amitz hides
06:27  zeekay: i like nginx + uwsgi <3
06:28  lxsameer: zeekay: nginx and uwsgi need configuration i want to stick with python code
06:29  lxsameer: KirkMcDonald: but some of them have some issue for example fapws3 have some issue with DB commit
06:30  _habnabit: lxsameer, I can't imagine how a /web server/ would have "some issue with DB commit"
06:30  seen_: Nekr0tik: if managing your file becomes too complex; consider using sqlite?
06:30  Nekr0tik: seen_~ It's not that big of a project. Besides, I'm purposely doing this to maintain my programming skills.
06:30  lxsameer: _habnabit: me too , but i see some issue in its issue tracking system
06:31  zeekay: gunicorn is pretty simple to use
06:33  bob2: Nekr0tik: so the normal method is to just rewrite
06:33  bob2: the whole thing
06:34  bob2: since your current method only works if you don't change the length of the toal
06:34  strawberrybunny: Hrm.
06:34  Nekr0tik: bob2~ Well, what I'm thinking about doing is this. The first line is a string, rip off "TOTAL = " before that, replace that value, then rewrite "TOTAL = XX" with XX being the new value
06:35  bob2: ok, but as above
06:43  mh3rn4nd3z3: hello, I have a BASH script where i use "lynx --dump some-link", is it possible to do this in python 3 somehow?
06:43  ivazquez|laptop: urllib.request
06:43  ivazquez|laptop: (I think)
06:44  mh3rn4nd3z3: ivazquez|laptop: lol. I will look into that module.
06:44  bob2: that made you laugh out loud?
06:44  bob2: not that ivazquez|laptop isn't funny, to be sure
06:44  mh3rn4nd3z3: the (I think) part did
06:44  mh3rn4nd3z3: :S
06:44  meltingwax: if I have a block of bytes in the form of a hex string like "a2 3b" how can i convert it to a byte-like string that i can use in a socket?
06:45  _habnabit: meltingwax, where did you get that string from?
06:45  ivazquez|laptop: I can't open the docs in my browser since I'm restarting them right now, so I'm not certain.
06:45  meltingwax: _habnabit: example in a doc, want to test it out
06:45  meltingwax: a protocl doc*
06:46  ivazquez|laptop: ''.join(S.split()).decode('hex')
06:46  meltingwax: ivazquez|laptop: thanks
06:47  pythonirc1011: anyone knows how to fix this (py2exe): creating python loader for extension 'PIL._imaging' (C:\Python27\lib\site-packages\PIL\_imaging.pyd -> PIL._imaging.pyd)*** finding dlls needed ***error: MSVCP90.dll: No such file or directory
06:48  jsizzle: last line of this paste is giving me errors about output being a 'str' type.. not sure what's going on can anyone enlighten me? Thanks in advance http://pastie.org/1468924
06:48  bob2: jsizzle: -> pastebin the output you have, too
06:49  jsizzle: bob2: output is here http://pastie.org/1468927
06:49  bob2: jsizzle: so, .write() returns None
06:50  bob2: jsizzle: and one line 17 you set 'output' to the return value of .write()
06:50  jsizzle: bob2: that wasn't my intention :)
06:51  ivazquez|laptop: pythonirc1011: Uh...
06:51  jsizzle: bob2: trying to do some extra credit on learn python the hard way :)
06:51  bob2: jsizzle: if you do it on one line, you have no chance to keep a reference to the file object
06:51  bob2: so you can't close it
06:51  ivazquez|laptop: pythonirc1011: Are you sure you want us to answer that?
06:51  jsizzle: bob2: so would it be open still? or can I just blow away the last line and be all good?
06:52  bob2: jsizzle: well, you have to get rid of the last line, because you have nothing to call close() on
06:52  bob2: jsizzle: but due to how cpython works, it will be closed as soon as the function ends
06:52  jsizzle: bob2: I'm feeling like that isn't a good practice for me to get into, is that correct?
06:52  bob2: jsizzle: actually, that's a lie, it'll be closed as soon as the write() finishes
06:53  jsizzle: bob2: I was trying to shorten the excercise, but maybe I took a bad shortcut?
06:53  bob2: jsizzle: (because there will be no references to the file object, so it'll get closed)
06:53  bob2: jsizzle: in the vast vast majority of cases, it is ok - the file gets closed immediately and even if it didn't, you can open hundreds/thousands of files
06:54  jsizzle: bob2: ok cool, I kinda thought that the .write() must be closing the file but I couldn't confirm that in pydoc
06:54  bob2: jsizzle: it's not the write, it's that once write9) returns, there's no way for anyone to access the open file anymore, so python closes it as part of clearing up the file object
06:54  jsizzle: bob2: yep, taking out the last line makes it work
06:55  bob2: jsizzle: http://pastie.org/1468940 is probably best practice nowadays
06:55  jsizzle: bob2: I believe I understand :)
06:55  fetushockey: sup #python
06:56  fetushockey: <-- new to python and programming in general. having a hard time coming up with ideas to help me learn.
06:56  bob2: jsizzle: the 'with' statement is speficially designed for controlling how things get cleaned up - in this case it (indirectly) closes the file as soon as the with block ends
06:56  jsizzle: bob2: haven't gotten to "with" yet
06:56  jsizzle: fetushockey: me too!! check out learn python the hard way, it rocks so far!
06:56  fetushockey: book?
06:57  jsizzle: fetushockey: nope website pdf type dealie, but you gotta follow the instructions to the letter including typing out all of the examples not just copy and pasting
06:57  jsizzle: fetushockey: http://learnpythonthehardway.org/static/LearnPythonTheHardWay.pdf
06:58  bob2: jsizzle: they are pretty spiffy
06:58  jsizzle: fetushockey: it will take you a LONG time to complete doing all the excercises and extra credit stuff, but you will actually UNDERSTAND and RETAIN the info much better IMO... also it helps to be able to come in here and ask questions once in a while too :)
06:59  fetushockey: yeah just googled it.
06:59  jsizzle: bob2: what's spiffy? "with"?
06:59  fetushockey: is it based on python2 or 3?
06:59  jsizzle: I think python 2.. from what I've seen that seems to be the best to get started with.. lowest common denominator and all
06:59  fetushockey: eh i started with python3 heh
06:59  bob2: jsizzle: yes
07:00  fetushockey: seems to be the future of python so why not, you know
07:00  bob2: 2 is probably better for newbies
07:00  jsizzle: bob2: hopefully they cover that later on in this tut. I am determined to make it all the way through
07:01  jsizzle: in other languages that I have learned once you know the older-ish version its really easy to pick up the newer stuff.. it's true in perl at least, just newer functions and methods and the like
07:01  fetushockey: seems like i've already learned a lot of the stuff in this tutorial
07:01  bob2: python is like that too, and amk writes ridiculous useful "What's new in Python x.y" guides for each new release
07:02  jsizzle: up to you though I guess, but I will say that tutorial I pasted rox.. the dude really knows how to write very practical tutorials
07:02  fetushockey: i just dont have any ideas for programs
07:02  bob2: but python 3 is explicitly incompatible with 2.x
07:03  jsizzle: fetushockey: there are 50+ programs in that tutorial to write
07:03  fetushockey: bob2, in a way. there are some minor differences (annoyances) but overall i've found transfering code around to 3 or vice versa is somewhat simple
07:03  fetushockey: i meant, not a stupid 2+2 calculator but a real-world, functional application
07:03  jsizzle: fetushockey: somewhere in the earlier ones they have you write a batch password generator
07:04  jsizzle: that's real world
07:04  jsizzle: the calculator crap gets you ready, knowing how to do math in any language is the first steps
07:05  jsizzle: ya gots to crawl before ya walk! :)
07:05  bob2: fetushockey: hehe
07:05  fetushockey: k
07:05  fetushockey: so can i get a quick idea of an app?
07:05  bob2: fetushockey: reliably porting thigns requires people to have pretty good understanding of unicode, alas
07:05  jsizzle: it's boring as hell but trust me, shit will not make sense later on if you don't have the basics down
07:06  fetushockey: i'm having trouble not getting confused during class creation
07:06  fetushockey: and what each definition is, etc.
07:06  jsizzle: I went through all the painfully boring excercises and extra credit and there's still a lot of stuff I need to brush up on
07:06  fetushockey: How do you guys like pygame?
07:07  jsizzle: fetushockey: why don't you write a program to convert standard to metrics? like inches to cm and lbs to kg (by the way this is an excercise in the tutorial :-] )
07:07  fetushockey: ugh :math:
07:07  jsizzle: my extra credit program converted mph to kph and miles to km and all kinds of useless crap! :)
07:08  fetushockey: i like words better haha
07:08  jsizzle: fetushockey: if you don't like math, programming may not be for you
07:08  fetushockey: alright ill give that tutorial a try
07:08  mahmul: that's not entirely true
07:08  fetushockey: ^^
07:08  fetushockey: not all programming is math
07:08  jsizzle: fetushockey: I highly recommend it
07:09  jsizzle: yes, but if you skip all the math stuff in a language I think it will bite you in the ass later on
07:09  mahmul: well, programming might just change your perspective on math for one
07:09  fetushockey: a month or so ago i wrote a simple ssh-like daemon and client using minimal numbers/math
07:09 * jsizzle <3's math :)
07:10  jsizzle: fetushockey: in what language?
07:10  fetushockey: python
07:10  fetushockey: it wasn't all that effective
07:10  jsizzle: or very ssh like if it didn't use math my friend
07:10  jsizzle: :)
07:10  jsizzle: no math = no encryption
07:10  jsizzle: so maybe it was telnet-like?
07:10  fetushockey: it didn't have encryption.
07:11  jsizzle: right, telnet
07:11  fetushockey: either way, semantics
07:11  Checkie: What's better for iterating over every directory entry?  os.listdir or glob.iglob or something else?
07:11  bob2: jsizzle: fetushockey might be from the blessed generation who are too young to know of telnet :-)
07:11  bob2: Checkie: listdir
07:11  fetushockey: I know of telnet.
07:11  due: fetushockey: "semantics" doesn't come into it. ssh is "secure shell" and by definition encrypted. telnet is just plaintext. :)
07:11  jsizzle: hehehe, the next time our PCI QA busts my balls for having telnet running somewhere I'm gonna say "eh semantics!" hehehe
07:12  fetushockey: ...
07:12  due: Checkie: or os.walk
07:12  Checkie: bob2... thanks.
07:12  fetushockey: okay by "ssh-like" i meant it connected to a daemon, and the client could perform commands.
07:12  fetushockey: jesus christ.
07:12  jsizzle: gross oversimplification accepted
07:12  fetushockey: thank you.
07:12  jsizzle: :)
07:12 --- SpitfireWP_ is now known as SpitfireWP
07:13  mahmul: fetushockey: have you gone through the tutorial?  if you have enough programming experience it will help you with your problems in understanding classes and objects
07:13  fetushockey: why make things complicated
07:13  jsizzle: no problem! ;p
07:13  fetushockey: going through it now
07:13  fetushockey: classes is what gets me, don't know how to explain what i'm not getting about it.
07:13  due: have you ever done object oriented programming before?
07:14  fetushockey: not exactly, no
07:14  jsizzle: fetushockey: I was just having fun with ya buddy, no harm meant
07:14  fetushockey: i was actually about to ask how to call a certain function to open another .py program
07:14  fetushockey: say, a login script runs a different script when the login is accepted
07:15  fetushockey: again, total newb with scattered knowledge
07:15  bob2: normally you wouldn't do that
07:15  bob2: instead you'd import something and run it
07:15  bob2: jsizzle: do they make you install antivirus software on your unix machines still?
07:15  jsizzle: if it's a *nix box you'd just throw it into .bashrc or .profile
07:16  fetushockey: nonono
07:16  bob2: oh, I thought we were still talking about the telnet thing
07:16  fetushockey: i meant a python script.
07:16  fetushockey: nevermind.
07:16  fetushockey: ill just read more
07:16  bob2: I think the thing you want to have a look at is modules and packages
07:17  jsizzle: bob2: no, but I had to fight really hard to get them to concede that it was completely pointless on MY unix boxes because mine don't share to windoze boxes.. but other admins who do share with windoze still have to have AV and worry about it
07:17  fetushockey: no, it's hard to explain i guess
07:17  bob2: sure, but I still think the things you want to look up are modules and packages :)
07:17  fetushockey: ohgod is this the kinda channel where people call windows 'windoze' to be 'cool and quirky'?
07:17  bob2: jsizzle: bwahaha
07:17  bob2: fetushockey: I think you may be reading far too much in to one line of text from one person
07:17 * jsizzle agrees
07:18  jsizzle: sometimes mispelling is just faster
07:18  jsizzle: I don't care what OS something runs as long as you pay me to work on it
07:18  bob2: and pay a lot more if the OS is windows, I assume ;)
07:19  jsizzle: bob2: obviously :)
07:19  fetushockey: Without importing anything, is there a way to run another python script from within a function?
07:20  bob2: fetushockey: yeah
07:20  bob2: but usually you want to import
07:20  due: fetushockey: You could start another python interpreter using subprocess or something similar.
07:20  jsizzle: but then your losing flow control right?
07:20  fetushockey: that's in the os module, right?
07:20  bob2: what is?
07:20  fetushockey: subprocess stuff
07:20  due: fetushockey: No, os = os.system. subprocess is a module specifically for starting processes. os.system is depracated.
07:20  bob2: no, subprocess is the name of the module
07:21  fetushockey: ah, awesome
07:21  fetushockey: thanks
07:21  due: Okay, brain broken, can someone confirm: try/except blocks don't count as separate scopes, yes?
07:21  bob2: they do not
07:21  bob2: only class (kinda), functions, modules
07:22  due: good, good. I need to stop coding C++. it's breaking my brain :(
07:23  ShadowOfGed: fetushockey: http://paste.pound-python.org/show/1672/
07:23  fetushockey: another question. has input('') in python3 replaced raw_input AND input of python2?
07:23  bob2: hm, I don't think I'm forgetting any
07:23  bob2: input is dead, raw_input renamed to input
07:24  ivazquez|laptop: There is no direct equivalent of 2.x input() in 3.x.
07:24  ivazquez|laptop: It shouldn't have existed in the first place.
07:24  _habnabit: functools.compose(input, eval)
07:24  due: ivazquez|laptop: surely it existed to make people stare at the screen for 20 minutes when they wrote input instead of raw_input, yes? :D
07:25  fetushockey: ShadowOfGed, thank you.
07:25  bob2: _habnabit: bwahaha
07:25  bob2: wait, is there a functools.compose?
07:26  _habnabit: bob2, yhbt hand
07:26  bob2: heh
07:26  fetushockey: could someone explain, in a total newb method, what the whole __main__ or __whatever__ is all about?
07:27  fetushockey: as in, what's with the underscores?
07:27  bob2: 'magic'
07:27  due: speaking of functools, is there anything better than the decorator module in pypi for creating sane decorators?
07:27  _habnabit: fetushockey, it's a lexical convention that means 'this is internal to the interpreter'
07:27  due: it is also common to prepend _ to private variables, members and functions to denote 'these are private to this module'.
07:28  fetushockey: so it calls "built in" variables rather than user created variables?
07:28  dstufft: ok, for some stupid reason i am getting this u"{u'where': u'here'}" from a third party system for i think it's supposed to be json but obviously the u'' instead of '' causes json parsers to choke, what are my options that don't involve screwing with the system giving me this :(
07:28  ivazquez|laptop: ast.literal_eval()
07:29  dstufft: ivazquez|laptop: oh snap, i didn't even know that existed
07:29  dstufft: thanks
07:30  bob2: hm, though, you'd need to guess the encoding
07:30  due: dstufft: basically i have this reaction whenever i look at this channel. it is always a learning experience.
07:31  tos9: due: your brain?
07:32  fetushockey: haha i got an idea. gonna write a simple script that calculates the new air force PT scores, and make a gui for it with tkinter.
07:32  fetushockey: does py2exe still work?
07:33  due: tos9: well, that is partly it. "oh snap, i didn't know that existed" though.
07:33  tos9: due: heh yeah, well, I lose mine all the time. It happens.
07:34  sterna: hi
07:34  sterna: http://dpaste.com/325019/ fails me
07:34  sterna: can anyone see what the problem is?
07:35  bob2: it'd save time if you explained the problem you are observing
07:36  sterna: the last line doesn't get logged anywhere
07:36  sterna: the logfile gets created but it's empty
07:36  sterna: and nothing gets sent to stderr
07:37  sterna: if i put print 'meh' after self.log.info('starting') i can see it very well
07:37  sterna: if i strace -e write python watchdog.py i can see the print write to stdout
07:37  sterna: or to stderr if i add >>sys.stderr
07:37  sterna: but not the logging module
07:38  sterna: there must be something trivial going on that i just can't see
07:38  due: sterna: have you tried adjusting the level?
07:38  sterna: it's set to logging.DEBUG
07:39  sterna: ok this is silly
07:39  sterna: due: thanks
07:39  sterna: print loglevel after the last line in that __init__ now outputs
07:39  sterna: <__main__.MemoryWatchdog object at 0x1bfd410>
07:40  sterna: i'm just being obtuse
07:40  due: just ran it locally and it spat out "INFO", sooo.
07:40  due: oh, okay. :D
07:40  sterna: >--->---super(MemoryWatchdog, self).__init__(self)
07:40  sterna: should be
07:40  sterna: >--->---super(MemoryWatchdog, self).__init__()
07:40  sterna: obviously
07:40  sterna: or i'm passing self twice
07:41  sterna: thanks
07:41  fetushockey: stupid question, looking for a stupid answer: what does __init__ do?
07:41  ivazquez|laptop: Initializes the instance.
07:41  fetushockey: without it being called by the script, just automatically, right?
07:42  ivazquez|laptop: The constructor calls it.
07:42  fetushockey: constructor?
07:42  tos9: (so yes, automatically, in some sense)
07:42  fetushockey: i see, heh
07:42  sterna: when you instantiate a class
07:42  ivazquez|laptop: Constructor (Foo()) → Allocator (Foo.__new__()) → Initializer (Foo.__init__())
07:43  tos9: fetushockey: __new__, which you don't really have to worry about
07:43  sterna: i.e. call it
07:43  sterna: obj = class()
07:43  bob2: +1 for gratutious use of unicode arrows
07:43  sterna: this happens
07:43  fetushockey: right, obj calls class()
07:43  fetushockey: but that's only when obj is called, correct?
07:44  sterna: obj doesn't call class
07:44  bob2: calling a class creates an instance
07:44  ivazquez|laptop: The constructor creates an instance via the allocator and initializer.
07:45  fetushockey: k i kinda understand now
07:45  fetushockey: english isn't my first language. i literally just did a dictionary lookup of "instance"
07:46  fetushockey: thanks for the help guys, im sure ill be back with more newb questions
07:46  juanefren: I have a datetime object, how should I convert it to a 9 item sequence, so it can be used with strftime
07:47  _habnabit: juanefren, your_datetime.strftime('%balls')
07:48  gjvc: datetime.datetime.now().strftime( '%Y%m%d' )
07:49  juanefren: gjvc: thanks...
07:49  gjvc: listen to _habnabit
07:49  tos9: his answer was right too, I think %balls is the date format they use in europe
07:50  gjvc: ISO8601 uber alles
07:51  juanefren: gjvc, _habnabit: oh! I really was saying thanks to _habnabit... did not realize I had another answer already... (that is why I confused the username)
07:51  gjvc: ha
07:51  gjvc: right i have to go to work
07:51  gjvc: enjoy, all!
07:51  juanefren: _habnabit solution is working right now, thankyou all of you :_)
07:54  Accelerator: http://pastie.org/1469022 <- I'm getting this error trying to build Twisted for python
07:55  Accelerator: I have gcc installed and updated to the latest Centos version.
07:57  VladDrac: Accelerator, you need python dev stuff (headers and such)
07:57  ivazquez|laptop: Twisted is in EPEL.
07:57  fetushockey: isn't that the networking module?
07:57  fetushockey: that hasn't been updated in years?
07:58  fetushockey: nevermind
07:58  gusg: I'm trying to use the PyDev module in Eclipse and  code completion is not always working. For some modules, I see the following: http://i.imgur.com/87qoR.png   here is an example of it working: http://i.imgur.com/Lnfir.png
07:59  meltingwax: question about sockets in python, if i get a 40 byte message can the message be retrieved with socket.rev(36) + socket.recv(4)?
07:59  _habnabit: meltingwax, /can/, yes.
07:59  _habnabit: meltingwax, but .recv returns /at most/ that many bytes.
07:59  _habnabit: meltingwax, not exactly that many.
07:59  meltingwax: _habnabit: i see, thank you
08:00  _habnabit: meltingwax, you should probably be using twisted, though. It has things for this.
08:02  meltingwax: i will look into twisted, right now i'm just working on trying to get a protocol working
08:02  _habnabit: meltingwax, yes, and it would be much easier with twisted.
--- Log closed Mon Jan 17 08:39:29 2011
--- Log opened Mon Jan 17 08:44:40 2011
08:44 --- Users 708 nicks [0 ops, 0 halfops, 0 voices, 708 normal]
08:45  verte: fetushockey: because exec is a function
08:45  verte: functions are called with parenthesis
08:45  fetushockey: so exec(fh) then?
08:45  verte: you need to pass the environment as the second argument
08:46 --- Channel #python was synced in 91 seconds
08:46  bob2: _habnabit: how long did that take you?
08:46  verte: habnabit: you really are evil :)
--- Log opened Mon Jan 17 08:52:00 2011
08:52 --- Users 709 nicks [0 ops, 0 halfops, 0 voices, 709 normal]
08:52  hemanth: bob2, i have few many insert queries, if that check can be handled by a flag it would be easy so
08:52  verte: your inflexible requirements may be at odds with your goals
08:52  zykes-: would there be any more optimal way to do http://projects.bouvet-ds.net/indefero/p/zenoss-api/source/tree/master/routers/events.py ?
08:52  meltingwax: verte: talking to me?
08:52  verte: sql sucks; deal with it
08:52  verte: no
08:53  sector119: ))
08:53  bob2: hemanth: doubt it could sanely be done that way
08:53 --- Channel #python was synced in 103 seconds
08:53  bob2: oh zenoss
08:54  zykes-: bob2: yeh, i've actually done something productive for once :)
08:54  verte: zykes: don't use vtable default arguments
08:54  hemanth: bob2, hmm
08:54  verte: mutable*
08:54  zykes-: vtable ?
08:54  verte: stupid phone
08:54  bob2: heh
08:54  zykes-: how you mean by that ?
08:54  _habnabit: Someone downvoted me. :(
08:54  verte: query=None)
08:55  zykes-: args=None ?
08:55  bob2: zykes-: default args are evaluated once when 'def' executes
08:55  bob2: zykes-: if you mutate it, it persists across function calls, which is probably not what you want
08:55  zykes-: k, but in what library do you mean ?
08:56  bob2: zykes-: http://paste.pocoo.org/show/322054/ is usually what you do instead
08:56  zykes-: ah
08:56  zykes-: well I can just leave it as None
08:56  zykes-: and have _build_args fix it ?
08:58  Alberth: yeah, can can move the 'if' a level down :)
08:58  Alberth: s/can/you/
09:00  zykes-: atm i load the argdata from a json file, should i move that inside a py module or something else instead ?
09:00  fetushockey: I see what you guys mean about trying to execute a file rather than importing.
09:00  fetushockey: Importing is shittons easier
09:03  zykes-: in regards to documenting args etc
09:03  _habnabit: How do I have two downvotes. :(
09:03  _habnabit: This is terrible.
09:04  zykes-: downvotes for ?
09:04  kosh: _habnabit: the gigantic one line one
09:04  zykes-: a PEP ?
09:04  _habnabit: kosh, yeah.
09:06  zykes-: bob2: do you know if there's any library or a good way to build up args and document them in one fell swoop ?
09:07  bob2: not super sure what you mean
09:08  zykes-: atm i load all the defaults for each Command from a JSON file which has the same name as the module / plugin
09:08  zykes-: but that's without documentation
09:08  kosh: _habnabit: you should get downvated for that :)
09:08  _habnabit: kosh, nooooo
09:09  DigitalKiwi: if i had a stackoverflow account i'd flag it ;D
09:10  Accelerator: http://irc.icyrc.com:3989/ Is this a white screen?
09:11  kosh: _habnabit: that posting is a crime against sentience
09:12  stockholm: this is a (trivial) python sql problem, i guess. what am i doing wrong? http://paste.debian.net/104837/
09:13  _habnabit: stockholm, (hostname) is the same as hostname
09:13  _habnabit: stockholm, commas make tuples, not parentheses.
09:13  fetushockey: how secure are the currently available python encryption modules?
09:14  fetushockey: and which one should a newb play with first?
09:14  _habnabit: fetushockey, 'how secure' ?
09:14  stockholm: _habnabit: do i want a tuple here?
09:14  bob2: stockholm: yes
09:14  _habnabit: stockholm, yep.
09:14  stockholm: why?
09:14  bob2: stockholm: it simplifies things if it always takes a tuple even if it has one item vs trying to guess if the thing passed should be considered a 1-sequence or not
09:17  stockholm: so i just write "hostname," instead of "(hostname)"? isnt that butt ugly?
09:17  stockholm: i am not sad about the () gone, but about the ,
09:17  bob2: well, that seems subjective
09:17  bob2: you co do (whatever,) if you prefer
09:17  bob2: or tuple([whocares])
09:18  bob2: making () produce a tuple would be disruptive to lots of other things, alas
09:18  _habnabit: It would be all sorts of silly.
09:18  stockholm: yes, i dont want that, either :-)
09:18  stockholm: thanks for the help
09:18  _habnabit: stockholm, well tell me what you want and I'll go commit it to python trunk right now!!!!!
09:19  DigitalKiwi: he wants timsort to be renamed to digitalkiwisort
09:19  _habnabit: bob2, one time I had a thought: use ; as the tuple constructor instead of commas. Then you can mix them in a bunch of contexts!
09:19  stockholm: _habnabit: dont ask for my oppinion :-) i have not developed a good taste for python syntax yet
09:19  gusg: I see something like "from enthought.chaco.api " and I see the directory structure under dist-utils/enthought/chaco. I don't see a directory or file "api" though.
09:20  bob2: _habnabit: hah
09:21  bob2: gusg: import enthought.cacho.api ; print enthought.cacho.api
09:22  due: bob2: any chance we could organise a direct downlooad of your python knowledge into my brain? ;)
09:22  bob2: due: I would hit up _habnabit or verte or someone instead
09:22  gusg: bob2: thanks. It appears there is an api.pyc
09:22  bob2: gusg: yowzer
09:22  bob2: wonder if verte is coming to lca
09:22  due: gusg: eek :(
09:23  due: bob2: maybe i can get a three-for-one deal :D
09:23  gusg: bob2: yeah, I'm not too happy about this. The reason I care is because PyDev is not code completing some stuff... and I guess this would explain it, right? No source code. I guess you guys are all "eeking" because of a similar reason?
09:23  bob2: gusg: could still work
09:24  jdahm: I'm having trouble getting some of the cherrypy templating to work with my installation the way they are in the documentation, specifically the py:for in http://genshi.edgewall.org/wiki/Documentation/0.6.x/templates.html
09:24  jdahm: I get the error: unbound prefix at line blah
09:25  due: gusg: well, if it's a package, complain to the maintainer. possibly the .py file is just missing. but "eek": distributing .pyc is frought with danger.
09:25  due: speaking of .pyc, is it necessarily cross-platform? i'm unsure.
09:25  _habnabit: Far, far from cross-platform.
09:25  bob2: I''m guessing it's the crazy enthought 'scientific' python distribution thing
09:25  gusg: due: I installed it from synaptic. I don't know if enthought does it this way too
09:25  _habnabit: It's a transient cache file.
09:25  bob2: all that stuff is in debuntu
09:26  detly: _habnabit, due - I thought it was as cross platform as the underlying .py ...?
09:26  bob2: jdahm: pastein template + error
09:26  _habnabit: detly, ha ha ha not at all
09:26  _habnabit: detly, not even close
09:26  detly: interesting
09:26  bob2: detly: no promises
09:26  gusg: bob2: this installation is from "debuntu" I think. I installed it via synaptic as you pointed out was an option a few evenings ago
09:26  due: detly: _habnabit can probably explain better but seeing as it's byte-compiled code it's making a lot of assumptions that the byte compiler is the same.
09:27  due: there's a python-enthoughtbase package in standard ubuntu.
09:27  bob2: gusg: hm
09:27  _habnabit: The format changes between minor versions of python.
09:28  detly: _habnabit - wow, I was not aware of that at all...
09:29  due: does it contain a "compiled for version <x>"? at least in that case it would just fail rather than executing and Weird Stuff happening.
09:30  _habnabit: due, like I said, it's a transient cache. If the magic number doesn't match, python silently discards it.
09:30  due: ah. I assumed that was what you meant, but my assumptions are often proven wrong. :)
09:31  due: ">>> import enthought.chaco.api" took 10 seconds to load.
09:32  due: lrwxrwxrwx 1 root root   42 2011-01-17 18:30 /usr/lib/python2.6/dist-packages/enthought/chaco/api.py -> /usr/share/pyshared/enthought/chaco/api.py
09:32  due: -rw-r--r-- 1 root root 5390 2011-01-17 18:30 /usr/lib/python2.6/dist-packages/enthought/chaco/api.pyc
09:33  jdahm: figured it out, I had the wrong xmlns tag
09:33  due: gusg: (Oops, sorry, only meant to paste the one line.) Looks like this package contains the api.py file at lest.
09:33  lotrpy: hello, what does this mean? __import__('pkg_resources').declare_namespace(__name__)
09:34  due: lotrpy: the equivalent of "import pkg_resources" "pkg_resources.declare_namespace(__name__)", I'd imagine.
09:34  _habnabit: lotrpy, which part is confusing you?
09:35  lotrpy: I just find this line in a __init__.py. don't know this style yet.
09:35  gusg: due, bob2: whoops there _is_ api.py It's a symlink and I accidentally overlooked it
09:37  zykes-: bob2: would it be possible to make a "response" object in the zenoss-api library ? an object that holds the raw undecoded json response and all other stuff like http code etc
09:38  gusg: then I'm not sure why PyDev is having trouble: saying the module is not in the PYTHON path
09:40 --- Gentle` is now known as Gentle
09:44  hemanth: which is best way to do exactly word match in a line? using "in" it's does not work cos, "B.A" in "B.B.A" is true and that is not exact word match
09:44  hemanth: i'm trying to do exact keyword match over few files
09:44  _habnabit: hemanth, what exactly /do/ you want it to match?
09:45  hemanth: _habnabit, i have two files on is keywords and other is just plain text file with junk+keywords; need to match and extract those key words
09:45  sudharsh: hemanth, use something like \bfoo\b
09:46  hemanth: sudharsh, sorry?
09:47  sudharsh: hemanth, http://docs.python.org/library/re.html#regular-expression-syntax look for \b here
09:47  sudharsh: hemanth, \b is the meta-char for word boundaries
09:48  hemanth: sudharsh, i was not using R.E, okies will check
09:49  hemanth: sudharsh, so i loop through my list of keywords, compile and match?
09:49  sudharsh: hemanth, yeah.. or do something like r"\b(%s)\b" % ("|".join(keywords))
09:50  sudharsh: hemanth, both should work.
09:51  hemanth: sudharsh, trying, i have secondary level of mapping also
09:51  _habnabit: sudharsh, you forgot re.escape
09:51  sudharsh: hemanth, don't forget to have it as a raw string.. \b is the backspace character
09:52  sudharsh: hemanth, oh yeah.. as _habnabit re.escape too
09:52  sudharsh: *said
10:02  fetushockey: I tried googling and looked through python.org but maybe im not searching correctly,
10:02  fetushockey: How can I limit a user's input to only 2 characters, and have it do something as soon as one of those 2 characters is pressed?
10:03  hemanth: sudharsh, how about reading both text files to sets and doing an intersection?
10:03  fetushockey: rather than wait for the user to input whatever, hope that it matches up with an 'if' function after they press enter?
10:03  _habnabit: fetushockey, getting just a single character is more complicated than you'd think.
10:04  fetushockey: Could you point me in the right direction as far as documentation goes?
10:04  sudharsh: hemanth, hmm... I thought you wanted to read keywords from a F1, get lines in F2 containing those keywords
10:05  bob2: fetushockey: urwid
10:05  bob2: fetushockey: but it may not be worth it
10:05  hemanth: sudharsh, yup trying to do the same, F1 is just a dict of lists
10:05  bob2: zykes-: sorry, don't know anything about the zenoss api
10:05  fetushockey: right now i got if=y, do this, elif=n, do that, else=quit
10:06  sudharsh: hemanth, and the lists are unique?
10:06  fetushockey: *that is, exit() with a message to try again
10:06  hemanth: sudharsh, yes for each key its unique
10:06  sudharsh: hemanth, I am guessing its a word -> synonyms mapping
10:06  hemanth: sudharsh, you are right that is the second level mapping
10:06  VladDrac: fetushockey, you want to read individual characters from stdin in stead of lines.
10:07  hemanth: sudharsh, its UG,PG,Specialization match
10:07  sudharsh: hemanth, ah ok.. then just do it per key in the dict?
10:07  Alberth: fetushockey: or if you want to go graphical, pygame or a GUI toolkit
10:07  VladDrac: fetushockey, eg http://code.activestate.com/recipes/134892/
10:07  sudharsh: hemanth, and about intersection of two files.. I didn't quite understand that
10:08  fetushockey: yeah i might as well go with tkinter...
10:08  fetushockey: since y=opens up a gui for a new user
10:09  hemanth: sudharsh,say i have no data structure, i have just two files, one with keywords and other with junk+keywords, if i read them to sets and do an intersection on them..will i not get the common terms b/w them?
10:09  fetushockey: thanks again
10:10  fetushockey: Another question, why does tkinter make a file in the script directory called tkinter.messagebox when i call for a messagebox in the script?
10:10  fetushockey: it still appends to the file i want it to, just make this new file
10:10  sudharsh: hemanth, hmm... not really. if your sets have entire lines, then intersection won't help obviously... if the sets are just words, then you will end up getting just the keywords
10:11  hemanth: sudharsh, yes just for keywords that is fine...hmm..as of now i have dict of lists and that R.E works fine to get the match on the keys, now for values ??
10:13  sudharsh: hemanth, a simple way would be have an outer loop for each key.
10:13  sudharsh: then merge the keys + values into a big regex and see if text matches. if it does, then the line matches for that particular key
10:14  fetushockey: Can I ask how you guys start with an idea? Do you sit down and basically sketch it out on paper first or just go at it?
10:14  sudharsh: hemanth, this is simple and quick
10:14  fetushockey: I have trouble keeping a steady train of thought when scripting a lot of things.
10:14  kosh: if you can't keep a train of thought you will be in deep trouble with programming
10:15  sudharsh: fetushockey, I just go at it... and end up writing bad code :P
10:15  fetushockey: kosh: i know some ADHD-as hell mofos and they write awesome code
10:15  Alberth: fetushockey: get the core problem solved, and add 'TODO' comments for all cases that you skip, after deciding they won't cause fundamental trouble
10:16  hemanth: sudharsh, i should get both the key and value that is matched, the logic is : if key is found the look and match the values, return both key,value
10:17  sudharsh: hemanth, what if the key is not there but one of the values is present in your file?
10:19  hemanth: sudharsh, that is neglected, the keys and values are tightly coupled, for example : B.E in C.S, where B.E is my key and C.S is my values, latter i can check for synonymous also
10:20  Alberth: fetushockey: I do try to think ahead where the idea may break (and for cases that conclude to 'too complex to think ahead' those are the points to code first as they may break in a fundamental way), but usually while codong I find I am missing a fundamental case, and have to start over :)
10:20  sudharsh: hemanth, hmm. then look for the key first and the the values? a simple 'if' should cut it
10:21  fetushockey: i just try to keep my newb code to a bare minimum
10:21  fetushockey: less characters = less reading = quicker problem solving?
10:21  fetushockey: but that limits me a lot. you should've seen me struggle with sockets
10:22  _habnabit: fetushockey, network programming is very hard.
10:22  fetushockey: i noticed.
10:22  lyrae: in my __init__ method, i have self.var = value. but in another method, when i try to print self.var, it says instance has no attribute "var". what could be causes of this?
10:23  Alberth: code it as compactly and fast as you can, while puzzling with the concepts, means you are fighting at two fronts. Better first make it work, then try to do it neatly
10:23  meganbrown: Newbie question I haven't found an answer for.  I have two strings: a = "foo"; b = "bar" and I want to write a loop to modify their values to be "baz foo" and "baz bar".  "for v in [a,b]: v = 'baz ' + v" doesn't work because I'm not updating the references.  How can I do this in a loop (no function call)?  Thanks!
10:23  sudharsh: meganbrown, strings are immutable in python
10:23  Alberth: meganbrown: not, you cannot change strings, you have to build new ones each iteration
10:24  hemanth: sudharsh, ok R.E for values also?
10:24  meganbrown: is there a way to update the contents of the variables "a" and "b" in a "for" loop?
10:24  _habnabit: meganbrown, no, because those contents are immutable.
10:24  _habnabit: meganbrown, it means you can't modify them.
10:25  meganbrown: Al, hemanth, and habnabit: thanks
10:25  sudharsh: hemanth, yeah if you want the word boundaries like fullstops and whitespaces to be ignored
10:25  fetushockey: so there is no way to change what variables are other than writing over them?
10:25  hemanth: sudharsh, phews okies trying, key match is fine, now doing values
10:25  _habnabit: fetushockey, what does that mean
10:26  fetushockey: meaning if i have a variable a="one" at the beginning of my code, and later want to change it to "two"
10:26  Alberth: fetushockey: variables are just references to data, unlike many other languages where they contain data
10:26  _habnabit: fetushockey, `a = "two"`
10:26  fetushockey: right
10:26  fetushockey: so you can change it
10:26  sudharsh: fetushockey, think of variables like a label
10:26  fetushockey: i understand that
10:26  sudharsh: when you do a = '10' later
10:27  sudharsh: you are just re-assigning the name to it
10:27  fetushockey: what i dont understand is why he can't change his variables in the case he stated
10:27  _habnabit: fetushockey, the list [a, b] doesn't contain variables; it contains /the objects those variables reference/
10:28  Alberth: the 'a' label stays with 'foo', until you do a = ...
10:28  meganbrown: _habnabit: is there anyway to recreate the array [a,b] to be "references" to the variable names (I'm from C, so I'd like something like [&a,&b] if you catch my drift)
10:28  _habnabit: meganbrown, no.
10:28  hemanth: sudharsh, me getting values like B.ABIE :(
10:29  hemanth: sudharsh, for keys!
10:29  sudharsh: hemanth, use re.espace to escape the '.'
10:29  meganbrown: _habnabit: ok, thanks -- much appreciated.
10:29  Alberth: meganbrown: 'a' is just a label, 'a' is not space that contains a string.
10:30 --- Super_Meat_Boy is now known as Meat_Boy
10:30  sudharsh: meganbrown, <shameless_plug>http://sudharsh.wordpress.com/2009/02/05/thinking-inside-the-box/</shameless_plug>
10:31  sudharsh: meganbrown, about variables
10:31  hemanth: sudharsh, escape().compile()?
10:31  meganbrown: sudharsh: reading now.  thanks.  Thanks Alberth too.
10:32  sudharsh: hemanth, re.compile(re.escape(x))
10:32  sudharsh: also re.I + re.U if you want ignorecase and unicode. The docs should tell how to use them
10:37  blip-: hi all, I write utf8 non-latin characters to a utf8 mysql table using python MySQLdb.  The text that is written appears as question marks when retrieved and displayed in a Windows Flash app.  However, it displays correctly when i look at the actual database content with phpmyadmin
10:37  _habnabit: blip-, yes, neither mysql nor mysqldb nor php are very good at handling unicode.
10:37  blip-: so my question is, how can I print the actual bytes that I'm writing to the DB to check for any special line endings or such ?
10:39  _habnabit: blip-, there's about a million ways this could've failed because your tools don't have any way of checking for failure.
10:39  blip-: _habnabit: but isn't it strange that phpmyadmin running on Linux can display the DB content fine... but my Windows flash app can't ?   If I manually populate the DB from a CSV then it's th other way around, Flash app fine, phpmyadmin question marks
10:39  _habnabit: blip-, no, not strange at all.
10:39  blip-: _habnabit: but I only care about it appearing in the Flash app.   phpmyadmin doesn't matter
10:39  _habnabit: blip-, anyway, use oursql for inserting the data into the database.
10:39  _habnabit: blip-, then you can guarantee that the data, at least, is correct.
10:39  _habnabit: blip-, from there you can poke at the flash app.
10:40  blip-: _habnabit: hmm can you clarify how oursql would help ?  I'm already making a utf8 connection with MySQLDB.  I have a feeling the byte order markings are having an effect.  but just need to inspect the actual stuff more
10:40  Habbie: any snippet or stdlib piece for saying '15M' instead of '15000000' automatically, with support for some scales (K,M,G)?
10:40  _habnabit: blip-, oursql actually has unicode support.
10:41  hemanth: sudharsh, on escape no return value :(
10:41  _habnabit: blip-, mysqldb's is terrible/virtually nonexistent.
10:41  _habnabit: blip-, and it'll make sure the data's integrity is preserved.
10:41  sudharsh: hemanth, escape returns a string
10:41  sudharsh: In [3]: re.escape("f.")
10:41  sudharsh: Out[3]: 'f\\.'
10:42  sudharsh: hemanth, ^^
10:42  _habnabit: sudharsh, what about it?
10:42  _habnabit: Oh.
10:42  hemanth: sudharsh, re.compile(re.escape(r"\b(%s)\b" % ("|".join(emap["UG"].keys())))) is what i have done
10:42  _habnabit: hemanth, um, you're escaping the entire regexp.
10:42  _habnabit: hemanth, it'll only match literally the same regexp.
10:42  sudharsh: hemanth, you will escape \b too
10:42  _habnabit: hemanth, and that .keys() is redundant too.
10:43  sudharsh: hemanth, move the re.escape to "|".join thing
10:43  blip-: _habnabit: looks like I have to install it manually, no ubuntu package for oursql
10:43  _habnabit: hemanth, re.compile(r'\b(%s)\b' % ('|'.join(re.escape(s) for s in emap['UG']),))
10:45  sudharsh: hemanth, printing out the final regex is a good way to check if you are creating the right regex.
10:50  jrodger:  Can you have an "If...then...else clause with 2 variables? (eg. If x in y and z in a (where x & z are 2 values in a list)?
10:51  _habnabit: Sure, why not.
10:51 --- yuwang is now known as yuwang_afk
10:55  _habnabit: MostAwesomeDude, ping
10:55  blackrock: Hey guys. Please recommend a reference on writing large scale apps or memory management in Python
10:55  _habnabit: blackrock, 'memory management in python' isn't a thing.
10:56  _habnabit: blackrock, but what does 'writing large scale apps' mean?
10:57  blackrock: My software is crashing after a few days from memory deficiency. It seems the memory is full of unused variables
11:03  evildmp: I am using:             plugin.body = plugin.body.replace("  ", " ")
11:03  evildmp: but I want to catch multiple blank spaces, not just double spaces
11:03  _habnabit: s = ' '.join(s.split())
11:05  hemanth: sudharsh, _habnabit got it, it was my issue i was doing a "".join() on the resultant as i was updating to a list, but i'm getting something like 'B\x0fA'
11:05  sudharsh: hemanth, use
11:05  sudharsh: hemanth, r''
11:05  sudharsh: hemanth, raw string
11:05  evildmp: thank you _habnabit
11:05  hemanth: sudharsh, okies trying
11:13 --- timj_ is now known as timj
11:14  Accelerator: If you set up HTTPS on a python based web page, is it still fully encrypted? This may be a stupid question.
11:15  Habbie: Accelerator, the question does not make a lot of sense
11:16  Accelerator: Habbie, Say I have a web page that is powered through python. Iris, for example. An IRC web client, powered by python. If I access iris through HTTPS, will it be encrypted?
11:17  Accelerator: Since as far as I know, some objects don't get encrypted through HTTPS
11:19  Habbie: Accelerator, HTTPS encrypts everything; but your HTML may refer objects on HTTP URLs
11:19  Accelerator: Habbie, Gotchya, thank you.
11:26 --- Meat_Boy is now known as Super_Meat_Boy
11:26  Mr18: Hi
11:26  earwigs: hi
11:26  Mr18: Should I use 2.6 or 3.1.3?
11:26 --- Super_Meat_Boy is now known as Meat_Boy
11:27  earwigs: 2.6 if you're new to python, else 3
11:27  Mr18: May I ask why not 3?
11:27  earwigs: no idea, but all the nub books have told me start with 2.6
11:27  Mr18: Oh
11:28  earwigs: Mr18: http://learnpythonthehardway.org/index will get you started quickly
11:28  Mr18: earwigs: Well, I already have previous programming experience.
11:29  bob2: tutorial in the topic is pretty good if you know another language well
11:30  Mr18: thanks bob
11:30  bob2: 2.x has better doc/library/software support, and relies less on you understanding unicode well
11:33  Mr18: Well, on Linux I have 2.6 and I would like to update to 2.7, unfortunantly i cannot uninstall and reinstall to the latest 2.x
11:34  londonmet050: http://paste.pound-python.org/show/1675/
11:35  _habnabit: londonmet050, what about it?
11:35  londonmet050: why does new_list makes it run in unlimited loop
11:35  londonmet050: while I give func(list1) it works
11:36  _habnabit: What
11:36  londonmet050: when I try func(list1) where list1 is a list  it works
11:37  londonmet050: if I do def func(list1) in that fucntion
11:37  londonmet050: rather new_list
11:37  bob2: Mr18: no need to uninstall anything
11:37  _habnabit: Pastebin your failing code; you're not making any sense.
11:37  _habnabit: This code is terrible anyway, but.
11:38  bob2: londonmet050: what are you trying to do?
11:38  Nekr0tik: If you pull the contents of a file as a list, change the list, then writelines back to the file, shouldn't it overwrite the contents inside and not append if it is in r+ mode?
11:38  londonmet050: I am just going to copy in paste bin
11:39  _habnabit: Nekr0tik, the file cursor is at the end of the file if you've read it all.
11:39  Nekr0tik: I kind of hacked together a work for my problem earlier. It's working as expected but the file line doesn't get overwritten.
11:39  _habnabit: Nekr0tik, so if you do any writing, it goes to the end.
11:39  Nekr0tik: _habnabit~ Ahhh, that explains it.
11:39  bob2: Nekr0tik: ie you need to seek back
11:39  _habnabit: And truncate.
11:40  Nekr0tik: bob2~ Seek back right before the write, correct?
11:40  bob2: _habnabit: to make sure you don't have old data at the end, or does writing without trncating not do anything?
11:40  _habnabit: bob2, the former.
11:41  londonmet050: http://paste.pound-python.org/show/1676/
11:41  Nekr0tik: So, basically remove the length of the file before the write, starting at the beginning.
11:41  Nekr0tik: Well, working backwards.
11:41  _habnabit: londonmet050, what is the point of this code.
11:42  londonmet050: I am trying to follow the book
11:42  londonmet050: So for learning
11:42  _habnabit: londonmet050, what book are you reading
11:42  londonmet050: head first python
11:42  neumaennl: londonmet050: you're mixing global and local varibales
11:43  _habnabit: londonmet050, if it's telling you to write code like this, it's a pretty terrible book.
11:43  londonmet050: ok
11:43  _habnabit: londonmet050, do you have any experience with other programming languages?
11:43  londonmet050: Yup
11:44  _habnabit: londonmet050, then read the tutorial in the /topic.
11:44  londonmet050: ok
11:44  londonmet050: but just wondering why the function is behaving that way
11:44 --- yuwang_afk is now known as yuwang
11:45  neumaennl: londonmet050: it's behaving that way because you use the variable name list1 for two different things: you use it outside the function and inside the function
11:47  londonmet050: neumaennl:  I want the second output  it does when I use list1 as argument
11:49  neumaennl: londonmet050: just do yourself and all the people you ask about python a favour and do the tutorial in /topic first. It will help you quite a bit
11:49  londonmet050: ok
11:50  tasslehoff: If I have done self.something = my_class(), and then do self.something = null, will __del__ for my class be called there and then?
11:50  tasslehoff: s/null/None/
11:50  kerio: tasslehoff: not necessarily
11:50  kerio: the gc can do whatever the hell it wants
11:50  nosklo: tasslehoff: never use __del__
11:54  tasslehoff: nosklo, meaning never delete an object yourself?
11:55  _habnabit: tasslehoff, ... no? That's not what he said at all.
11:55  _habnabit: tasslehoff, __del__ isn't generally useful.
11:55  nosklo: tasslehoff: meaning, never add a method with the name "__del__" to your classes
11:55  nosklo: tasslehoff: also, you shouldn't delete an object yourself, because that's not possible to do in python
11:56  nosklo: tasslehoff: if you're refering to the "del" keyword - it only deletes the reference, not the object
11:56  DeadPanda: nosklo, some of the standard libraries do it though, for example in telnetlib to ensure the connection is closed properly
11:57  bob2: telnetlib is not really a model of sanity however ;)
11:58  DeadPanda: true
11:58  bob2: hm, it's __del__ seems pointless, just resetting some stuff and closing the socket
11:59  nosklo: DeadPanda: don't use stdlib as example, ever - there are lots of awful code on stdlib
11:59  bob2: heh
11:59  nosklo: DeadPanda: "the stdlib does it" is a reason to *not* do it, more often than the opposite
11:59  DeadPanda: nosklo, wow, my brain just nearly imploded
12:00  bob2: standards were lower in the past
12:00  bob2: and styles have evolved
12:04  tasslehoff: _habnabit, nosklo: I'm looking at post 3 in http://stackoverflow.com/questions/616645/how-do-i-duplicate-sys-stdout-to-a-log-file-in-python :)
12:04  _habnabit: tasslehoff, that's rather silly.
12:04  tasslehoff: It's trivial to solve without __del__ and a class, but I was just curious
12:04  nosklo: tasslehoff: ok, that question teaches how to mangle sys.stdout, which is already a bad idea in itself
12:06  tasslehoff: nosklo, yeah. I'm looking for a way to copy stdout from my app to a file, in a way that makes it easy to turn it on and off from within the app.
12:06  bob2: can't you setup logging to go to both stdout and a log file, and then just use logging instead of print?
12:06  sphenxes: data = open("file.txt") print(data.readline(), end = " ").SyntaxError: invalid syntax. I am getting syntax error for this statement (linux, squeeze, python 2.6). I don't know why?
12:06  nosklo: tasslehoff: use the logging module.
12:06  _habnabit: sphenxes, you're reading a tutorial for python 3.x and using python 2.x.
12:07  bob2: sphenxes: python 3 and python2 are incompatible
12:07  sphenxes: thanks
12:07  bob2: sphenxes: you need a python2 tutorial - 'learn python the hard way' is pretty popular and assumes no programming knowledge
12:07  bob2: the tutorial in the topic is pretty good if you know another language well already
12:08  nosklo: tasslehoff: the right answer is "create a function that writes in the screen and in the file, and use that instead of print" - but that function is already implemented inside the logging module, so just use that
12:08  tasslehoff: I already use it, so I guess I should just take it to the next level
12:08  nosklo: tasslehoff: you can configure the logging module itself to send to a file, it even rotates the file when it's too big, etc
12:09  bob2: all with a super annoying java-esque setup api ;)
12:09  tasslehoff: nosklo, yep. thanks
12:11  tamiel: sphenxes: you need "from __future__ import print_function" for 2.6
12:11  tamiel: sphenxes: http://docs.python.org/library/functions.html?highlight=print#print
12:11  sphenxes: tamiel, thanks
12:12  blip-: hi all, I'm reading some tutorials online to learn about utf8 in python. Can you please help me understand these 3 lines in terms of how many bytes are being used in each ?  http://pastie.org/private/f93qd8mqxfzwgmnmbxtsbg
12:12  Nekr0tik: So, instead of seeking back to the beginning of the file and truncating, I just closed the file after I gained my list from it.
12:12  blip-: This is what I understand:
12:12  blip-: S is a bytestring in ascii so 1 byte per char
12:12  Nekr0tik: Then opened it again right before my save in 'w' mode for an overwrite, writing my entire list back to it.
12:13  bob2: Nekr0tik: that works too
12:13  blip-: U is utf8 so 2 bytes per char, ie The H in hello becomes encoded in 2 bytes
12:13  Nekr0tik: bob2~ Yep, cleaned up the code a little too.
12:13  blip-: but then I don't get the 3rd line..
12:13  bob2: blip-: you don't ever use unicode() like that
12:14  bob2: blip-: http://pastie.org/private/qgdbfya5qjhyf118mf2uw
12:14  blip-: bob2: wow I need to stop using these websites then.  Got it from this guide  http://evanjones.ca/python-utf8.html
12:14  bob2: blip-: s is a byte string - a sequence of bytes, maybe in some encoding, maybe random crap, who knows - if it is encoded, the encoding needs to be specified somehow, e.g. by a header in the string (ala xml) or by a spec (ala json)
12:15  bob2: blip-: u is a unicode string, which is a sequence of unicode characters.  how many bytes each char takes is not something you need to think/worry about 99% of the time
12:16  bob2: blip-: line 3 takes that unicode string and encodes it in to a byte string, in this case using the the utf-8 encoding (which is a variable width encoding, chars that are also in ascii take one byte, every other char takes more)
12:17  havocologe: is there a way for python3 to interact with mysql databases ? i could not find the good old mysqldb working..
12:17  bob2: havocologe: oursql supports python 3, I believe
12:23  bob2: blip-: (think of the unicode strings as something like a list of indexes into the giant list of characters that is unicode)
12:24  blip-: bob2: sorry I still have some confusion on the last two lines. Is it accurate to say:   In line 2 we say 'read/decode/decipher the byte string using utf8 and store in U' ?   Why would we do line 2 and 3 ?
12:25  blip-: I'm trying to think of it more concretely in terms of bytes.
12:25  bob2: blip-: yes
12:25  _habnabit: Unicode strings don't have bytes.
12:25  _habnabit: They're sequences of code points.
12:25  gzy: funfact, super fails inside a classmethod if I import a class, if I import the module, and user module.Class it works. can someone please explain this to me?
12:26  bob2: blip-: well, unicode strings only have an internal byte represetnation, that you don't need to know/think of most of the time
12:26  bob2: super in a class method is most likely wrong
12:26  _habnabit: gzy, What
12:26  _habnabit: bob2, why would it be?
12:26  _habnabit: gzy, pastebin a failing test case; you're probably just doing it wrong.
12:26  bob2: _habnabit: I guess because people here seem to mostly use classmethods wrongly:)
12:27  blip-: bob2: can line 2 by removed if line 1 had been  s = u"hello normal string" ?
12:28  bob2: blip-: the default encoding of unicode literals in python source files in python 2 is not utf-8, but it doesn't matter in this case
12:28  bob2: blip-: if you have this at the top of your file, they are equivalent:  # -*- coding: utf-8 -*-
12:28  bob2: (http://www.python.org/dev/peps/pep-0263/)
12:30  blip-: bob2: ah ok I see. I gotta run now, thanks for the help
12:30  blip-: _habnabit: thanks
12:31  ssbr_: why are descriptors so ugly? I want to know this. Is there a *reason* that __get__ is overloaded for both class and instnace get? why not __get__ and __get_class__ ? or __get_instance__ and __get_class__ or whatever
12:31 --- davidhaddad_ is now known as davidhaddad
12:32  gzy: _habnabit: trying to make a minimal failing example, and indeed a very simple case works,  i need to figure out what other part of my code causes this to fails...
12:32  gzy: *fail
12:33  ssbr_: gzy: that's the trick, isn't it?
12:33  ssbr_: debugging is so sucky
12:34  havocologe: bob2 you know if it possible to do database indepented queries with oursql? something like creating users/databases or changing existing ones ?
12:34  bob2: not sure what you mean
12:35  havocologe: bob2: just would like to know if it is possible to bring up sql-querries that do not query a specific database like "CREATE USER" "GRANT..." so not only selct/insert/update/delete stuff.
12:35  bob2: i assume so
12:35  cousteau: is there any convention on when single and double quotes are used?
12:37  ivan`: use whichever avoid the most backslashes; be consistent
12:37  cousteau: (like, singles for dict tags and other keywords, and doubles for human-oriented text)
12:37  ivan`: also prefer single quotes to avoid the shift key
12:37  ivan`: yeah, I put English in doubles
12:38 --- DasIch_ is now known as DasIch
12:39  ssbr_: I don't think consistency even matters
12:39  ssbr_: just do whatever
12:39  TheSheep: consistency is the hobgoblin of little minds?
12:39  ssbr_: (the double-quotes for human-oriented text is a neat thing, though)
12:40  ssbr_: TheSheep: only when it doesn't make any sense at all
12:40  bob2: i boggle at my coworkers using ' and then escaping ' again and again inside it
12:40  airtonix: do i have to provide full project path to import from an adjacent module or can i use some kind of relative path ?
12:40  ivan`: always use absolute imports
12:41  airtonix: doesn't really maket the code portable then
12:41  airtonix: make*
12:41  ivan`: from mypackage import mymodule
12:41  ivan`: there is no portability issue there
12:42  airtonix: i suppose you don't use django then
12:42  bob2: airtonix: you would only need to change it if you renamed your package
12:42  airtonix: nevermind
12:42  bob2: which is hyper rare
12:42  ssbr_: hee hee hee django
12:42  ivan`: (you should have a working setup.py that installs your code. it doesn't matter where the source is imported from.)
12:42  ssbr_: airtonix: OK, in django, never install an app as a subpackage
12:42  bob2: how does django mess up your own package name?
12:42  ssbr_: airtonix: Django lets apps be installed as separate packages. Use that feature, and only use absolute imports
12:42  ssbr_: problems solved
12:42  airtonix: no not really
12:42  ssbr_: airtonix: Yes, really.
12:42  airtonix: be cause you assume to much, ill post a tree
12:43  nosklo: django recommends you do sys path manipulation
12:43  ssbr_: IIRC that's even the normal way to install third-party apps
12:43  bob2: yowzer
12:43  ssbr_: so no portability issues
12:43  ssbr_: (where "port" means "port to different projects", I assume)
12:44  bob2: why do they recommend fiddling sys.path?
12:44  airtonix: http://pastebin.com/5eyv1dB6
12:44  infobob: http://paste.pound-python.org/show/1677/ (repasted for airtonix)
12:45  airtonix: i want to import fuzzy_dates inside virtualhost
--- Log opened Mon Jan 17 13:25:08 2011
13:25 --- Users 779 nicks [0 ops, 0 halfops, 0 voices, 779 normal]
13:25  lvh: faze`: sqlite
13:25  faze`: spcomb: how many concurrent connections can sqlite3 support?
13:25  SpComb: faze`: not many, if they're writing
13:25  SpComb: faze`: and they aren't connections
13:25  lvh: faze`: With WAL? Depends, there's a separate write lock and read lock
13:25  faze`: spcomb: i use sqlite3 as a test db for django and it works fine for that
13:25  d1b: 1 writer
13:25  lvh: faze`: people use SQLite for large things and it works fine
13:25  d1b: iirc
13:25  faze`: alright, thanks guys
13:26  faze`: one more question
13:26  NelleV: well. Sometimes you just don't have the choice of the database.
13:26  lvh: faze`: For things where you actually have only one reader (but are still powering a large app, just a well-structured one that doesn't try to use threads as an IO concurrency primitive)
13:26  SpComb: for development, you get to drop the database and re-create it if you rename a column or such
13:26  faze`: is it better to use a separate sqlite server or is the one built-in to python just fine?
13:26 --- Channel #python was synced in 89 seconds
13:26  lvh: NelleV: Yes, hence my point 2) that starts with "if you absolutely must"
13:26  lvh: faze`: One built into Python is fine
13:26  faze`: lvh: thanks
13:26  ssbr_: faze`: what do you mean "a separate sqlite server"?
13:27  ssbr_: sqlite isn't a server, it's a library
13:27  SpComb: faze`: there isn't any sqlite server, just the one library that's the same everywhere
13:27  faze`: ah ok
13:27  jimbauwens: lvh, nevermind, I think i got it
13:27  faze`: i got it now
13:27  lvh: jimbauwens: That's the only way I know how to do it
13:27  lvh: jimbauwens: I would assume that you can just tell gobject to stop listening for it, and it collects it internally
13:27  faze`: i'm still fairly new to python/programming/etc
13:27  sdfuhsdkjfhdsjkf: Hi all. Is it possible to make a method work as both an instance method and a static method?
13:27  faze`: thanks for putting up with my lack of detailed knowledge haha
13:27  jorrit: sdfuhsdkjfhdsjkf, make two methods.
13:27  ssbr_: sdfuhsdkjfhdsjkf: your question is causing me pain
13:28  ssbr_: what do you mean? and why, oh god why?
13:28  lvh: jimbauwens: source_remove *probably* works
13:28  jorrit: sdfuhsdkjfhdsjkf, and don't use static methods. Use class methods instead.
13:28  lrh9: sdfuhsdkjfhdsjkf: No.
13:28  nosklo: jorrit: huh, no, the answer is "use free functions instead"
13:28  lvh: jimbauwens: I don't use gobject directly though, I just use it as a reactor and let twisted worry about it so I have the same API no matter what the backing reactor is, I'm too stupid to learn more than one thing
13:28  nosklo: sdfuhsdkjfhdsjkf: if something can be a static method, then why should it be a instance method?
13:28  cheater-: nosklo: what's a free function?
13:28  jorrit: nosklo, well I often like to encapsulate them with a class. But that's my personal taste.
13:28  nosklo: cheater-: a function outside the class, in the module scope
13:29  jimbauwens: lvh: I'll see, as I'm a newbie to python and pygtk
13:29  cheater-: oh ok
13:29  jimbauwens: lvh: not so easy :-)
13:29  lvh: jimbauwens: IIRC, that's tag = gobject.timeout_add(...); r = gobject.source_remove(tag)
13:29  lvh: jimbauwens: if not r: raise RuntimeError("Oh noes!")
13:29  jimbauwens: lvh: ok, thanks
13:30  Juhaz: jimbauwens, you can also just return False from the callback
13:30  nosklo: jimbauwens: glib.source_remove()
13:30  lvh: Juhaz: Yeah, I already said that ;-)
13:30  lvh: nosklo: And that!
13:30  lrh9: sdfuhsdkjfhdsjkf: Now what are you trying to do? Get a better nickname.
13:30  nosklo: jimbauwens: the number timeout_add() returns can be used with source_remove() to stop calling the callback
13:30  Juhaz: lvh, ah, so you did. Haven't had any coffee yet.
13:31  lvh: jimbauwens: FWIW, here's the API I like better: l = LoopingCall(f); ... l.stop();
13:31  sdfuhsdkjfhdsjkf: All right, instance method and class method at the same time is also not possible or just a bad idea?
13:31  jimbauwens: guys: thanks!
13:31  lvh: jimbauwens: Personally I find a "stop" method on the thing that's looping to be more logical than some function called "source_remove", but YMMV
13:31  kerio: lvh: twisted! woot!
13:31  lrh9: sdfuhsdkjfhdsjkf: Not possible. The definitions are mutually exclusive.
13:32  nosklo: the thing that is looping is not the object returned by timeout_add
13:32  jimbauwens: I'll pastebin some code to show what I want to do
13:32  ssbr_: lrh9: well, actually...
13:32  lrh9: sdfuhsdkjfhdsjkf: But I think you can access class attributes via self. Maybe even class methods.
13:32  lvh: nosklo: Yes, I know -- my point is that I would thing such an API is nicer
13:32  lvh: nosklo: that's not gobject's fault, it's just trying to be a tiny wrapper around a C lib
13:32  bob2: sdfuhsdkjfhdsjkf: I think it might be possible to do it via terribleness, but it would involve adding it to instances by hand
13:33  bob2: lrh9: yup
13:33  lvh: nosklo: I'd just expect the return value to be a Source, which can be remove()d.
13:33  lrh9: sdfuhsdkjfhdsjkf: You still haven't told me why.
13:33  ssbr_: bob2: writing a descriptor that does it isn't particularly hard
13:33  ssbr_: in fact, it's exactly the same as writing a classmethod descriptor. You just use the *other* argument to __get__
13:33  bob2: ssbr_: that typechecks the first arg?
13:34  ssbr_: maybe I don't understand what we're talking about
13:34  ssbr_: @unimethod def foo(self_or_cls, ...): ... ?
13:34  ssbr_: if it's that, then it's easy
13:34  sdfuhsdkjfhdsjkf: Maybe I'm not using the correct words for it. This is what I'm trying to do: be able to call a function like this: sql = SQL(); sql.execute(string) and like this: SQL.execute(string)
13:35  kerio: make it a module
13:35  bob2: sdfuhsdkjfhdsjkf: why?
13:35  jimbauwens: very simple code of what I want to do: http://pastebin.com/6EFVJaPJ
13:35  infobob: http://paste.pound-python.org/show/1679/ (repasted for jimbauwens)
13:36  lrh9: sdfuhsdkjfhdsjkf: Don't. There's no need. Maybe if you were tying to use the singleton pattern, but that's considered by many to be an antipattern. Just use an instance and its method.
13:36  lrh9: *trying
13:38  the_isz: sdfuhsdkjfhdsjkf: if the execute function needs to call other member functions of the SQL object or access its members (read: it uses "self"), make it a bound function. if not, make it a class or free function.
13:40  bob2: if you really want that, make it a classmethod
13:40  sdfuhsdkjfhdsjkf: the_isz: it only needs to call other member functions some of the time
13:40  bob2: but it's kinda pointless, and leads to your db connection being a class attribute aka fancy global mutable state
13:40  the_isz: sdfuhsdkjfhdsjkf: a member function it is then.
13:41  the_isz: sdfuhsdkjfhdsjkf: or it's actually two functions you're talking about and you just didn't realize yet.
13:41  the_isz: sdfuhsdkjfhdsjkf: different functions, that is, with different names and different doc strings.
13:41  sdfuhsdkjfhdsjkf: so either I'll have to create an instance every time i want to call the method, even when it doesn't need to call other methods in the class, or I create two versions of the method (with different names)?
13:42  sdfuhsdkjfhdsjkf: the_isz: saw your last comment too late
13:42  jimbauwens: btb
13:42  jimbauwens: brb
13:42  the_isz: sdfuhsdkjfhdsjkf: no problem. try to determine when your function needs an object and when it doesn't. split those parts into separate functions then.
13:43  lrh9: sdfuhsdkjfhdsjkf: If you have typed something, you probably should pastebin it and link.
13:43  cousteau: ok, I'm going to use BeautifulSoup for the HTML thing (it's for an Exaile plugin, it's what they normally use)
13:45  eggy_: Is it bad (or rather, invalid) to have an uncleared exception set without returning an error indicator from the function?
13:46  sdfuhsdkjfhdsjkf: ok, thanks for the help
13:47  bob2: eggy_: is that a C/python api question?
13:47  eggy_: bob2: yep
13:50  jimbauwens: back
13:51  Dynetrekk: h5py question: when compressing datasets with the gzip flag, my .hdf5 file is 4.9 MB. gzipping it reduces it to 1.3 MB. if I do not compress datasets with h5py, I get a 2.8 MB file size, and if I gzip this file, I get it all down to 1.2 MB. why does the h5py compression result in larger files?
13:52  ronny: again: anyone aware of a argument parsing lib that supports distutils style multiple subcommands at once invocations out of the box?
13:53 --- Meat_Boy is now known as Super_Meat_Boy
13:53  jimbauwens: j
13:54  Dynetrekk: ronny: doesn't argparse do that?
13:54  Dynetrekk: ronny:  with the add_subparsers() function?
13:55  ronny: Dynetrekk: only a single subcommand at a time
13:55  ronny: so you cant use 2 of them in the same invocation
13:55  Dynetrekk: ronny: oh, you want to do something like 'program thing1 thing2' ? where thing2 is not a subcommand of thing1?
13:55  ronny: Dynetrekk: exactly
13:56  jimbauwens: Ehm, I had some network ups and downs,  so I don't know if I have seen everyting what you guys wrote
13:56  jimbauwens: But its working now, so I'm happy
13:56  Dynetrekk: ronny: sorry, no help from me then :)
13:56  lvh: Dynetrekk: gzip has a compression factor
13:56  Dynetrekk: lvh: what is a 'compression factor'?
13:56  ronny: hmm
13:56  lvh: ronny: Yes, twisted.python.usage ;-)
13:56  lvh: arbitrarily nestedly, even!
13:57  lvh: Dynetrekk: A number that says how good you want the compression
13:57  lvh: Dynetrekk: Obviously higher compression typically takes longer
13:57  lvh: Dynetrekk: Normal hdf5 files are *not* sub-5M
13:57  Dynetrekk: lvh: sure, I know that. but gzip compression in h5py _doubles_ the file size...
13:57  ronny: lvh: that thing is a WTF
13:57  Dynetrekk: lvh: I'm not sure about normality, I'm still surprised though
13:57  ronny: flags and options ?!
13:58  lvh: ronny: Yes? Flags are boolean. On or off.
13:58  lvh: ronny: Options are things with values.
13:58  ronny: lvh: but from what i see it cant have 2 different commands at a time
13:58  Dynetrekk: lvh: how come gzip on the command line successfully compresses the file that much then?
13:58  lvh: Dynetrekk: That's... strange, especially since doing it manually works
13:59  Dynetrekk: yeah, that's my source of confusion
13:59  lvh: Dynetrekk: Obviously there are infinitely more inputs that gzip *enlarges*
13:59  Dynetrekk: although my datasets are individually small. I use h5py to organize many smaller datasets
13:59  lvh: but it doesn't make sense that it grows when hdf5py  does it and not when you do it manually
13:59  Dynetrekk: lvh:  sure, but in this case command line gzip works like a charm
14:00  lvh: Dynetrekk: If you ungzip both again, do they hash equal?
14:00  Dynetrekk: lvh: heh, haven't checked in detail
14:00  lvh: ronny: Oh, you want two different commands that aren't subcommands of each other?
14:00  Dynetrekk: lvh: I'm going to try making larger datasets and see if the artifact disappears
14:01  lvh: ronny: t.p.usage interprets script a b ... as {a: {b: ...}}, not [a, b, ...]
14:01  lvh: I don't know anything that does the latter, no
14:02  ronny: lvh: i din't ask for distutils style for no reason
14:02  ronny: oh boy
14:03  ronny: twisted.python.usage looks like the retarded painfull little brother of argparse
14:03  lvh: It really is quite pleasant once you actually use it.
14:03  Dynetrekk: lvh: I think since h5py does per-dataset compression, not full-file compression, it makes little sense to use compression when I have many small datasets.
14:04  lvh: Building things like Axiomatic is *wayyyyy* less painful, for example.
14:04  lvh: Dynetrekk: That would explain why it's larger: the set of things that compresses to a larger size has a large overlap with the set of already-compressed files
14:04  TheSheep: I think you two mean different kinds of pain :)
14:05  ronny: lvh: for some reason i get the feeling twisted will never be done with hiding away the pain it creates in the first place
14:05  Dynetrekk: lvh: sure, but gzipping the h5py-compressed file brings it way down in size... seems paradoxical at first
14:05  lvh: ronny: Yeah okay, if you're just going to talk shit instead of code I'm going to do something else, sorry
14:05  ronny: bye
14:06  lvh: Dynetrekk: Yeah, that is pretty strange. Are the files up somewhere?
14:06  Dynetrekk: lvh: you mean, the files I just made?
14:07  lvh: Dynetrekk: Like you said, it's likely that the stuff hdf5py does only starts working well for the sizes hdf5py is designed for
14:07  lvh: that isn't 5MB :-p
14:08  Dynetrekk: lvh: by the way - we shouldn't blame h5py, I'm sure h5py calls the C library. but yeah. I guess you are right. I have several hundred datasets of about 350 floats each - I guess it compresses each datasets
14:08  lvh: Dynetrekk: I'm surprised those floats even compress at all
14:08  Dynetrekk: lvh: they do when you do the whole file
14:08  lvh: Dynetrekk: Even if they're all roughly the same exponent, that's difficult to compress (using the techniques gzip uses at least)
14:08  Dynetrekk: eh, when you compress the whole file
14:09  Dynetrekk: lvh: for reasons of symmetry in my test case, there's a lot of 0 around
14:09  lvh: Dynetrekk: Yeah, I mean the 350 floats each
14:09  Dynetrekk: oh sure, that doesn't work at all
14:09  lvh: Dynetrekk: Oh, I see. If they're *literally* float zeroes and not almost-eps, that's likely to compress, yeah
14:09  Dynetrekk: it would be nice to have overall-file compression I suppose
14:09  lvh: Dynetrekk: sort-of
14:09  Dynetrekk: lvh: well, they are probably almost-eps sometimes, but not always
14:09  lvh: Dynetrekk: Doing it per dataset has advantages for parallelism
14:10  Dynetrekk: lvh: absolutely. but it should be easy to make some sort of flag and run it through gzip itself
14:10  Dynetrekk: lvh: gotta run, thanks for a nice discussion
14:10  lvh: Dynetrekk: Which, when you're compressing datasets hdf5py is designed for, makes sense
14:10  lvh: Dynetrekk: Yes, there's a module for that
14:10  lvh: I think it's just called gzip
14:10  lvh: That basically gives you a file object that transparently gzips it
14:10  Dynetrekk: ok, I'll see if I find that. thanks, bye!
14:10  lvh: (also bzip2, but apparently that doesn't work well with the new IO layer)
14:11  cousteau: how can I get the Unicode version of chr() on python 2.x?
14:11  cousteau: (2.6)
14:11  lvh: cousteau: unichr
14:11  cousteau: oook... was looking for uchr or something
14:17  theyranos: u'a\u030a' and u'\xe5' both appear to be the same character (å). is there a way to compare unicode strings such that those two representations are considered equal?
14:18  Juhaz: they are not the same character
14:18  Juhaz: oh, sorry, missed the a in the first string
14:19  kerio: theyranos: unicodedata.normalize
14:19  theyranos: kerio: ty!
14:19  babilen: å å ?
14:20  theyranos: babilen: yes?
14:20  babilen: do both of them render the same for you?
14:21  theyranos: yes
14:21 --- SpitfireWP_ is now known as SpitfireWP
14:21  theyranos: they're both a letter "a" with a small circle above it
14:21  theyranos: further, they were both originally the same character. the first one got mangled by the filesystem.
14:21  babilen: Ah, the second one looks different here.
14:22  theyranos: ...what platform are you on?
14:22  nosklo: theyranos: the first one is two unicode chars, using composition
14:23  nosklo: theyranos: 'a' and "COMBINING RING ABOVE"
14:23  babilen: theyranos: Linux (Debian) -- and nosklo's remark might be important.
14:23  kerio: babilen: your client sucks
14:23  nosklo: in second one they're already together in a single char: 'LATIN SMALL LETTER A WITH RING ABOVE'
14:23  kerio: they should be displayed the same
14:23  kerio: and normalization turns one into the other as you wish
14:24  Juhaz: it's hardly rare for font rendering engines to suck with combining characters
14:24  nosklo: theyranos: to turn one into the other you use normalization... yeah what kerio said
14:24  theyranos: nosklo: i think what's happening is my OS is normalizing everything to the composition version even though within the files everything is using the single-char representation.
14:25  theyranos: so unicodedata.normalize is exactly what i need
14:25  paxcoder: hello. is there a feature in db api to find out column types?
14:26  NelleV: anyone has any idea where to svn checkout matplotlib's code ? it's hosted sourceforged which apparently has forgotten to do a usable UI
14:27  NelleV: found it...
14:27  nosklo: NelleV: heh
14:27  babilen: paxcoder: sqlalchemy can reflect tables
14:28  NelleV: nosklo: found it but appears to have problem to checkout the code anyways :p
14:28  babilen: paxcoder: http://www.sqlalchemy.org/docs/core/schema.html#reflecting-all-tables-at-once (for example)
14:28  paxcoder: babilen, is this what you peeps use for db interaction?
14:29  paxcoder: anyone using anything else? (trying to get the feel for the common tool)
14:30  Who: umm guys i need a little help, i have made GUI using tkinter using python 3, now to showcase it on different computer does it need the IDLE or there is way to run the program without the need of IDLE
14:30  paxcoder: babilen, basically, i wanted to do it myself tho... sqlalchemy's gotta do it somehow
14:30  DeadPanda: odd question, should metadata be capitalised as MetaData or Metadata in class names?
14:30  DeadPanda: (yeah, I'm picky)
14:31  lvh: ironfroggy_: I found a good slide to put the cost of cracking scrypt in perspective
14:31  lvh: ironfroggy_: Cracking a good password, properly scrypted, takes 20x the US public national debt in 2010.
14:31  babilen: paxcoder: You would still need some API to speak to your database (psycopg2 for postgresql for example). And yes, you *can* do it by hand, but why would you do that if you can use a widely used, powerful and maintained module for that?
14:32  lrh9: Who: You need Python.
14:33  DeadPanda: lvh, ooh, can I use that slide too?
14:33  paxcoder: babilen, thanks for the suggestions
14:33  DeadPanda: lvh, perfect for something I'm putting together
14:33  Who: lrh9: can py2exe than ?
14:33  lvh: DeadPanda: Sure, it's CC with attribution and not share-alike clause
14:34  lrh9: Who: I don't know.
14:34  lvh: DeadPanda: (ISC license but not for software, basically)
14:34  DeadPanda: lvh, cheers
14:34  lvh: DeadPanda: Here's a link to my slides http://bit.ly/fsSXpz
14:34  lvh: DeadPanda: I will attempt to give this talk at Pycon US 2011 in Atlanta, roughly 2 months from now
14:35  DeadPanda: lvh, thanks, it's a talk I'm giving next week on live digital forensics; explains quite neatly why it's best to capture useful information and a memory image _before_ you switch off a pc
14:35  DeadPanda: lvh, I'll attribute it to "lvh" then, since that's the moniker you've used on the slides
14:37  farciarz84: lvh: nice slides, thx
14:37  theyranos: lvh: those are awesome slides
14:37  lvh: DeadPanda: yeah, I like @lvh_  that way people can find me on twitter
14:37  lvh: lvh is harder to find since apparently my initials are also a heart disease
14:38  lvh: which explains a lot, really
14:38  farciarz84: would be nice to have some python scripts simulates the attacs and proving salts + hash weakness
14:38  DeadPanda: lvh, hah, okay, "@lvh_" then (doesn't really fit in with the IEEE referencing I'm using for the rest of it, but meh)
14:38  paxcoder: babilen, this is too easy for me.  °¬˙
14:38  lvh: DeadPanda: Oh, okay. You can use lvh then :-)
14:39  DeadPanda: lvh, <3
14:39  babilen: paxcoder: Yes, you prefer a Frankendebian and a lot of manual work ;)
14:39  lvh: DeadPanda: I don't mean to be a dick about it, it's just that lvh can't easily be traced back to me
14:39  lvh: @lvh_ can because everyone understands twitter
14:39  bassliner: hello - say i want to write a download manager that gives you a shell with just 2 commands, "list" and "download", where the download command accepts one argument (a url) that is being fetched and where i always get back to the prompt after adding a url that is being fetched in the background and the list command just displays the process of current tasks being performed. what's a good thing to have a look at? threads?
14:39  DeadPanda: lvh, dw, I'll use @lvh_ and drop the convention
14:39  lvh: DeadPanda: okay, cool :)
14:39  paxcoder: babilen, are you spying on me?
14:39  DeadPanda: lvh, tbh, I doubt our students will ever a) download the slides to check references, and b) pay attention anyway :(
14:39  lvh: farciarz84, theyranos: Thanks :-) I had a lot of good feedback about my last project
14:40  lvh: DeadPanda: oh, academia? I'm sorry :(
14:40  DeadPanda: lvh, hehe, yeah :(
14:40  cousteau: ok, about the HTML reference unescaping thing, I'm going to use this self-made code: http://codepad.org/TOfg71oL
14:40  theyranos: bassliner: why not just use wget and & ?
14:40  paxcoder: oh academia, i'm sorry for you
14:41  DeadPanda: it's actually great, students, however necessary, are the only hindrance
14:41  paxcoder: with educational systems where neither students nor professors care, you amount to little for a few
14:41  bassliner: theyranos: in the very first place because i couldn't easily watch the process of ongoing downloads. to be exact what i try to do is learning python rather than writing a good download manager.
14:41  DeadPanda: paxcoder, natch
14:41  theyranos: bassliner: fair enough. go look at import multiprocessing
14:42  cousteau: (I don't want to mess with HTML parsers just for replacing HTML escaped chars)
14:42  paxcoder: DeadPanda, wthbbqprof
14:42 --- Alien_Freak is now known as csgeek
14:43  papna_: bassliner: You can use twisted.web for downloading files with feedback.
14:43  cousteau: (I prefer using regex and having 2 problems rather than using regex and HTML parsers and having 3)
14:44  lvh: oh man, the blip.tv links are broken for my europython videos
14:45  theyranos: bassliner: papna_: i wouldn't recommend twisted for someone who's trying to learn python. twisted is awesome, and definitely "the right way" to do networking code, but it's also got a pretty extreme learning curve.
14:46  theyranos: maybe find some non-network-intensive examples to do until you're comfortable with python, then come back to the download manager project?
14:46  bassliner: thanks guys :)
14:47  lvh: theyranos: But the alternative is using a process as an IO concurrency primitive
14:47  lvh: theyranos: That doesn't sound like reasonable advice
14:47  lvh: Also apparently bit.ly only broke *MY* talk :(
14:48  theyranos: lvh: true, hence the "do something else for a while" suggestion.
14:48  lvh: (I'm also not convinced that gatherResults is more difficult than pool.map)
14:48  bassliner: theyranos: actually what i'm currently trying to fully understand is classes, thread modeling and such.
14:49  theyranos: bassliner: well, in python, threading is not what you want 90% of the time.
14:49  lvh: bassliner: You should probably forget about threads
14:49  theyranos: twisted is awesome specifically because it manages to be a robust networking library that doesn't use them
14:49  bassliner: so how about callbacks?
14:49  Juhaz: the learning curve is not that extreme if you're familiar with event-based programming in general, from having worked with GUI's or anything like that. And if you're not, well, it might actually be easier to grasp early on before your mind gets railed on the concurrency track
14:49  lvh: bassliner: Threads is basically never what you want, occasionally in other languages (hi Java) it's not a very terrible idea because threads in Java aren't actually threads
14:50  Alberth: bassliner: twsisted is about doing callbacks all the time
14:50  lvh: it can be
14:51  lvh: @inlineCallbacks means you don't really see them anymore
14:51  Alberth: oh man, I need typing lessons :(
14:51  lvh: also it works fine with stackless.py and corotwine
14:51  lvh: so, by default, yes, but that's certainly not a hard limitation
14:51  theyranos: so has twisted's documentation improved now to the point where one does not have to read the source to effectively use the library?
14:52  lvh: theyranos: Which parts of the library
14:52  lvh: theyranos: Conch: no, nobody understands conch
14:52  lvh: theyranos: The core docs have always been pretty good.
14:52  lvh: It's somewhat unfortunate that most of them assume you understand async IO already (well, mostly, the tutorial just glosses over it)
14:53  lvh: That's why the krondoblog posts are great
14:53  theyranos: lvh: well, no. besides the initial tutorial (which is helpful, yes), as recently as two months ago I utterly failed to find anything approaching an API reference.
14:53  theyranos: could be it's there and not googleable
14:54  lvh: theyranos: You're joking, right? The twisted guys wrote pydoctor years ago specifically for this
14:54  kerio: http://twistedmatrix.com/documents/current/api/
14:54  lvh: And that's pretty much all I find when I google
14:54  jasonsmr: hey, I have a error related to tis python file
14:54  kerio: first result for "twisted api"
14:54  lvh: we're trying to make it *less* googlable because it drowns out the non-api-docs
14:54  jasonsmr: there it is >>> /usr/lib/rpm/brp-check-python
14:54  lvh: because a) they get linked a lot b) there's a lot more of them, because they're autogenerated, and most of them interlink
14:55  ivan`: has anyone ever had problems with distutils mysteriously failing to copy a .py file to build/?
14:55  ivan`: I can't reproduce it in any sane way
14:55  ivan`: it always happens when I'm not looking
14:55  Alberth: distutils tries to be smart in not copying existing files
14:56  Alberth: unless they are changed iirc
14:57  theyranos: http://twistedmatrix.com/documents/current/api/twisted.internet.reactor.html <-- okay, this is vastly improved
14:57  theyranos: the last time I looked there, there were a series of undocumented method stubs
14:57  ivan`: Alberth: I think that might have changed sometime in 2.7
14:57  Alberth: jasonsmr: ?    python files usually end with ".py", and I don't have that file.
14:57  jasonsmr: it is a error that says 'inquiry' should be perhaps replaced with 'lenfunc'
14:57  ivan`: the thing is, I still have the problem in 2.7.1+
14:57  theyranos: being able to find the right documentation depended on being able to effectively guess which interface it was in
14:58  Alberth: ivan`: could be, I am happily living in the 2.5 era :)
14:58  ivan`: though it was much more common in a Python 2.5.2-based pypy
14:58  jasonsmr: <Alberth>: sorry the directory is listed the file is a >>/usr/lib/rpm/brp-check-python.data/ssizecheck.py
14:58  jasonsmr: at line 11 and line 219
14:59  jasonsmr: at line 11 >in module check file ? then at line 219 this lineno
14:59  powersurge: So I'm using a validation mixin that relies on __setattr__ and I'm intending on using this with elixir (based on sqlalchemy) models and I was wondering how the two __setattr__ would conflict?
15:00  Alberth: jasonsmr: euhm, #python is not a 'change my python file for me' channel, it is a 'I am stuck learning python' channel. Perhaps you should ask the author of the 'rpm -qf /usr/lib/rpm/brp-check-python.data/ssizecheck.py' package about it
15:00  powersurge: I looked at the Method Resolution Order and it seems like I can use a super() call to go "sideways" to the elixir's __setattr__ but I'm still a little fuzzy
15:00  powersurge: anyone able to share some insight?
15:00  jasonsmr: I relize this,,
15:00  kerio: powersurge: inheriting sucks
15:00  aminpy_: does twisted have a method for private message?
15:01  lvh: aminpy_: twisted.words
15:01  powersurge: kerio: seems like the multiple inheritence is hard to figure out, lol
15:01  Alberth: jasonsmr: I don't even have the file
15:01  fluter: powersurge, python have no multiple inheritence, no?
15:02  lvh: fluter: What? Sure it does.
15:02  powersurge: I guess maybe I'll poke around in elixir or sqlalchemy ircs and they can tell me how the __setattr__ clanks
15:02  aminpy_: dfd
15:02  powersurge: yeah, it does have multiple inheritance
15:02  lvh: fluter: Since 2.2, it even has reasonable semantics for diamond inheritance lattices
15:02  fluter: lvh, how?  class C1(object, B1, B2): ..?
15:02  Alberth: jasonsmr: nor do I understand what 'inquiry' or 'lenfunc' means
15:02  lvh: fluter: Ideally just B1, B2 since they will already derive from object, but yes
15:02  aminpy_: lvh, is there in IRCClient class?
15:03 * Alberth guesses in twisted.words
15:03  fluter: lvh, aha, I see, thanks, I just learned that we can have more than one base class in python :/
15:03  lvh: aminpy_: Yes, it's called "msg"
15:03  amitz: fluter: really? nice
15:03  lvh: aminpy_: For details on how to implement, see lp:infobat for an example of a bot that does it
15:03  jasonsmr: <Alberth>: I understand that, the top of the file says to check http://www.python.org/dev/peps/pep-0353/ for usage
15:04  fluter: amitz, sir, why?
15:04  lvh: amitz: To IRC, messaging a channel or a user is the same thing
15:04  jasonsmr: usage: python ssizecheck.py mysources/*.c
15:04  amitz: fluter: oh, just found out too.
15:04  Juhaz: fluter, don't go about using that feature, though. MI sucks.
15:05  powersurge: mixins are awesome until your methods clank, lol
15:05  fluter: Juhaz, yeah, that what I think so, so any good reason that MI exists in python?
15:05  lvh: MI is okay as long as everything only uses the public API of things up in its MRO
15:05  lvh: fluter: Sure, it's useful
15:05  jasonsmr: the files at >>http://sprunge.us/WXUO
15:05  lvh: fluter: It's possible to abuse it, but so many things Python allows you to do are
15:05  fluter: lvh, ok, when?
15:05 --- Unode is now known as _Unode
15:05  lvh: fluter: Mixins.
15:06  Silex: hi, how would I parse a custom DSL using python?
15:06  Silex: which library I mean
15:06  Alberth: using a parser
15:07  lvh: Silex: pymeta, pyparsing
15:07  Alberth: PLY
15:07  Silex: lvh: thanks
15:07  fluter: hey, mixin is sth like interface, is it?
15:07  fluter: http://en.wikipedia.org/wiki/Mixin
15:08  powersurge: fluter: I don't know what an interface is, but a mixin is sort of an incomplete object, it adds a new functionality to something, but can't do much on its own
15:08  Alberth: jasonsmr: this 'error' is just the output of this script, right?
15:08  powersurge: fluter: like my validation mixin adds validation to models.
15:08  jasonsmr: its part of a total compile using a tool system!
15:08  fluter: powersurge, like interface in java/C#, it cant be instanciated
15:09  jasonsmr: the command I call is  # rpmbuild -rebuild xen.spec
15:09  fluter: powersurge, so, with mixin in python, what is requrirement for the base classes?
15:09  jasonsmr: it is a file called by the spec file
15:09 --- naimon is now known as LyQuid
15:09  aminpy_: lvh, I want a function like privmsg with many differences. privmsg diesn't ditermine a message is private or send in channel or ...
15:10  jasonsmr: and is applied to C files in the build later on
15:10  lvh: aminpy_: 15:04 <lvh> amitz: To IRC, messaging a channel or a user is the same thing
15:10  powersurge: fluter: requirement? Python has a lot of things like this that don't strictly adhere to most other languages
15:10  lvh: aminpy_: Also, I said msg, not privmsg
15:10  powersurge: fluter: With python, you *shouldn't* instantiate a mixin, but you still can
15:10  jasonsmr: if you look at the file it has a bit at line 11 that checks for a old call called 'inquiry' in these c files I was saying
15:10  lvh: aminpy_: privmsg doesn't send messages, it's a thing that gets called when messages are sent
15:11  aminpy_: lvh, yeah
15:11  aminpy_: lvh, there isn't any function called when anyone send message
15:11  fluter: powersurge, well, I see,
15:11  jasonsmr: then when that sizecheck.py file sees that these.c files have this old call it outputs the error message
15:11  aminpy_: lvh, but it ditermines that message is private or ...
15:11  cheater-: aminpy_: everything is /msg
15:11  jasonsmr: /usr/src/packages/BUILD/kernel-desktop-2.6.36.2/linux-2.6.36/drivers/firewire/sbp2.c:94: 'inquiry' should be perhaps replaced with 'lenfunc'
15:11  Alberth: jasonsmr: for lineno, text in enumerate(open(file)):   <-- line 11, where is 'inquiry' ?
15:11  cheater-: aminpy_: are you using twisted?
15:12  lvh: aminpy_: 15:04 <lvh> amitz: To IRC, messaging a channel or a user is the same thing
15:12  lvh: aminpy_: IRC does not make that distinction
15:12  Alberth: jasonsmr: we don't fix your C files here
15:12  lvh: aminpy_: If you want that distinction, you implement privmsg, determine if the source is a channel or the user itself
15:12  NelleV: aminpy_: but you can make the distinction by looking at the chanel where it comes from
15:12  jasonsmr: I know that ;P
15:12  lvh: aminpy_: for a practical example, see lp:infobat
15:13  amitz: aminpy_: which is why all channels are prefixed with #.
15:13  NelleV: aminpy_: or twistedex
15:13  jasonsmr: It looks like this was ether done in this pyton file for the reason of doccumenting these c files and there lines for editing later?
15:13  jasonsmr: or someone goofed up
15:13  jasonsmr: or somewhere in between?
15:13  Alberth: jasonsmr: that script file looks like it checks for changes w.r.t. some newer python-C API
15:14  jasonsmr: hmm?
15:14  Alberth: jasonsmr: but I don't know it, as I programmed against that API about 10 years ago or so
15:15  jasonsmr: oh? the python -C API?
15:15  Alberth: jasonsmr: my guess is that the source is for python version X and you use version Y where Y > X
15:15  jasonsmr: isnt that cython?
15:15  jasonsmr: or something?
15:15  Alberth: cython is a python-like / c-like language, it is not python
15:15  jasonsmr: wouldent it be nice if that were true..
15:16  jasonsmr: oh thanks
15:16  Alberth: who knows, it may happen one day... :)
15:17  jasonsmr: enumerate(open(file)):
15:17  jasonsmr: is a file yet to be defined?
15:18  jasonsmr: with a line of code above the line 11 says def check(file)
15:18  Alberth: def check(file):  <-- there, although is must be a list or set if filenames, to work
15:18  Alberth: s/if/of/
15:19  Alberth: s/is/it/
15:19  jasonsmr: I think before this problem the build scripts called a diffrent python file..
15:19  aminpy_: lvh, sorry thanks I got it know
15:19  jasonsmr: Its just that with all these errors being printed the whole build takes 10 times longer
15:21  evildmp: I'm using BeautifulSoup: illegal_attributes = soup.findAll(style = True) - how can I get it to match tags with (say) align, width and height attributes all in the same go?
15:23  jasonsmr: yes it looks like its just'** all* files in a filder
15:23  jasonsmr: folder
15:25  jasonsmr: kernel-source-2.6.36/drivers<and all folders with c files>
15:25  jasonsmr: it must be checking all drivers!
15:26  Alberth: hmm, so perhaps not a C-Python API, but some modified kernel API?
15:27  jasonsmr: its XEN
15:27  jasonsmr: lol did I mention that?
15:27  jasonsmr: sumesen
15:27  Alberth: somewhere you did, but I never looked at its source, so it has no meaning to me :)
15:28  hever: Hej I fall into a .lstrip([chars]) trap. I thought it would trim preceding words, but it's just a list of characters ;) I see no good out of the box solution by a function for this. How should I do it?
15:28  jasonsmr: good greif
15:29  Alberth: hever: a  while s.startswith('xyz'): s = s[3:]   or so?
15:30  Alberth: although that may do a lot of string copying in some cases
15:30  lvh: Alberth: Not more than lstrip would've
15:31  lvh: so yeah it's that or re2
15:31  AgentZ86: hello chat
15:33 --- papna_ is now known as papna
15:35  AgentZ86: I just started learning python, installed 3.2 interpreter and IDLE, I'm assuming the IDLE is what I use to program the code ? and the interpreter interprets/executes it ? please confirm this is what I should have to start my learning ?
15:36  TheSheep: AgentZ86: no
15:37  Juhaz: most people don't like or use idle, you don't HAVE to do anything with it, but you can of course.
15:37  papna: AgentZ86: You can use any text editor and you use Python to run it.
15:37  TheSheep: AgentZ86: use your favorite text editor to write the code
15:37  papna: AgentZ86: Many editors have built-in stuff for running, like IDLE does.
15:37  TheSheep: AgentZ86: idle is not a good idea
15:37  papna: AgentZ86: IDLe actually sort of sucks, so most people avoid it.
15:37  ivan`: I solved my distutils non-problem: the file I expected to have copied didn't actually exist in the source tree
15:37  AgentZ86: oh ok, thanks, i had trouble confirming this subject on all the python websites,
15:37  NelleV: AgentZ86: you also might want to learn python2 and not python3
15:38  NelleV: AgentZ86: it's more widely used right now, and you'll find help more easily
15:38  papna: AgentZ86: Also, 3.2 isn't the version you want.
15:38  AgentZ86: NelleV - i did read about that, thanks
15:38  papna: AgentZ86: You might want 2.7, 2.6, or 3.1.
15:38  jasonsmr: Alberth: well for example in output from this file>>> '_PyTuple_Resize' uses Py_ssize_t for input parameters
15:38  NelleV: AgentZ86: if you are aware of it, then I guess it is OK :-)
15:38  AgentZ86: 3.1 from ubuntu install, but I have them both in stalled 2.6 and 3.1
15:38  NelleV: AgentZ86: python2.6 is the one by default
15:38  AgentZ86: I guess I can read both, wouldn't hurt me to learn the differences i guess
15:39  jasonsmr: '_PyTuple_Resize' is listed under a list # all changed/new APIs (from MAL):
15:39  Alberth: jasonsmr: PyTuple_X is a python-C API function
15:39  AgentZ86: thanks
15:39  Silex: what's the most common thing used to do guis in python? PyQt?
15:39  papna: I didn't even realize PEP 3148 got accepted.
15:40  Alberth: Silex: or PyGTK
15:40  Silex: Alberth: ok, thanks.
15:40  Silex: Other question, should I go python 3 or python 2.7? does it really matter?
15:41  Alberth: all production code and libraries are at python 2, although that is slowly changing
15:41  papna: Silex: Python 2.x has much wider library and documentation support at this point. For example, I don't think PyGTK supports 3.x
15:41  AgentZ86: i guess for me 3.1 will be ok, since I'm going to make something for local use only and probably not distribute anything right now
15:41 --- rodasc is now known as crodas
15:41  Alberth: AgentZ86: as long as you don't need to use libraries that do not exist in 3
15:42  papna: AgentZ86: That depends. If you want to add a GUI or do networking or build a website or perform scientific computations, you will find that the stuff you need isn't available.
15:42  Silex: okay, thanks guys
15:42  Alberth: but the transition from 2 to 3 should not be too difficult once you understand python 2
15:42  jasonsmr: what does the part of the printed message 'uses Py_ssize_t for input parameters'
15:42  AgentZ86: libraries ? hmm perhaps I'll learn on 2, and transition the language should be almost the same right ?
15:43  Alberth: jasonsmr: I am guessing that 'resize' takes one or two size parameters of type Py_ssize_t
15:43  papna: AgentZ86: At the language level, the differences are minor.
15:43  Alberth: AgentZ86: and there is a 2to3 conversion program
15:43  papna: AgentZ86: What kind of software do you plan to build?
15:44  AgentZ86: thanks, this will help, this is my first language, it was recommended by a lot of people to start here
15:45  jasonsmr: Alberth well there are a few lists in this file
15:45  AgentZ86: well I just want to learn it first I dont have a specific thing in mind for python really, other then to grasp the concept of programming
15:45  jasonsmr: one lable # all changed/new APIs (from MAL):
15:46  jasonsmr: # Py_ssize_t output parameters (these MUST be fixed) (from MAL)
15:46  jasonsmr: and finaly # Py_ssize_t return values (these may need overflow checks) (from MAL)
15:46  AgentZ86: then I may do something in ubuntu, but my main project I want to learn is mql4 / mql5 but I don't understand the documentation or programming concepts so many suggested to start with python
15:46 --- Super_Meat_Boy is now known as Meat_Boy
15:46  jasonsmr: but it says that its for imput
15:46  jasonsmr: I think a google search should help ;)
15:46  jasonsmr: youve helped a lot though ;)
15:46  Alberth: jasonsmr: and else the rpm script author :)
15:47  AgentZ86: so i have other projects I may like to work on after i learn concepts, then mql, so i can program EA's into the forex trading, but I know that once I start to learn python I will want to make other things too, like an ebay listings program and/or some sort of small seller inventory program, etc.
15:49  AgentZ86: just like anything once you know some skills then you use them for everything, I've been putting off learning programming for too long and after all the google searches and asking around it would seem many suggest to start with python overall, I don't know if that is the right thing to do but seems to have an agreement all over the net on that subject
15:49  AgentZ86: some recommended Ruby first , but almost all recommended against C/C++ as my first language so I sort of narrowed it down a bit
15:51  amitz: AgentZ86: depending on your timeframe, perhaps you want to learn VB instead for best result.
15:51  Alberth: ha!
15:52  Alberth: amitz: at Ubuntu?
15:53  ssbr_: jokes for great justice
15:53  ssbr_: VB is a more complex language than Python, anyway.
15:53  ssbr_: Not a better starting language these days.
15:53  Alberth: and no doubt a lot less clean :)
15:53  amitz: Alberth: hmm...
15:54  NelleV: isn't that just a troll ? :s
15:54  AgentZ86: i have time, i'm not looking for a career in programming it's more of a hobby for things I always wanted to do
15:54  amitz: ssbr_: but it takes some time to get visible result, you must admit.
15:55  ssbr_: amitz: I programmed in Python after I programmed in VB .Net
15:55  ssbr_: And I do not agree. From step one, Python programs are simpler to get working.
15:55  amitz: ssbr_: I'm not talking about good inheritance, design, etc. Just to make things work.
15:56  NelleV: I agree with ssbr_
15:56  ssbr_: amitz: So am I.
15:56  ssbr_: Of course Python is better on the "making sane design" fronts, too
15:56  NelleV: amitz: and a lot of teachers actually agree with ssbr_ :-)
15:57  amitz: hmm..., this surprises me..
15:57  NelleV: amitz: during my stay at UofT, I introduced python to gr8 girls, with no programming experience
15:57  Alberth: NelleV: actually, most teachers have never seen anything beyond windows, and believe VB is the best you can use.
15:57  ssbr_: I mean there's "print 'hello world'", and then there's Module MyModule Sub Main() Console.WriteLine("hello world") End Sub End Module
15:57  NelleV: amitz: you should also be able to find some talk of Hans Petter Langtangen about the use of python as a first language
15:57  ssbr_: which is easier to gets tarted with? :P
15:58  ssbr_: get started, too*
15:58  NelleV: Alberth: he... You really need to change your teachers... I've never heard of VB as a programming language taught at school here...
15:58  papna: ssbr_: Right, but that Python code sucks.
15:58  ssbr_: the key argument here is that when starting with Python, you don't need to know (or consciously ignore) as many concepts
15:59  Alberth: NelleV: luckily, I have never experienced that myself
15:59  ssbr_: there are other things too. VB is fundamentally a more complicated language, with things like variable declarations and more weird scoping issues
15:59  NelleV: Alberth: I started with C :p
15:59  amitz: ssbr_: well, how about to get GUI working? The idea of event, properties, seems obvious while click and drag GUI.
15:59  ssbr_: Dim foo as Integer = 1
15:59  NelleV: amitz: GUI programming isn't basic programming IMO
15:59  amitz: while clicking and dragging
15:59  ssbr_: amitz: that isn't what people do when they first learn how to program.
15:59  NelleV: amitz: it shouldn't be used as an introduction
16:00  ssbr_: And even if it were, VB.Net doesn't have anything on Python, which can use WinForms just as easily. Glade/etc. aren't terrible either
16:00  Alberth: NelleV: me with Pascal, then C, then Modula 2, then C++, then some function languages, then Python, then Java/eclispe
16:00  Alberth: NelleV: oh, I missed the 6502, 6809, and 68000  assembly languages :)
16:00  ssbr_: oh god, and VB.Net apparently still has gotos
16:00  ssbr_: so yeah, way more complicated a language
16:01  Alberth: ssbr_: one more concept to ignore :p
16:01  ssbr_: yeah I never learned those, thankfully
16:01  NelleV: Alberth: most students in france start with Caml :(
16:02  papna: haha
16:02 * svaksha notes that VB is still a part of the syllabi in some Indian colleges
16:02  NelleV: papna: are you laughing at me ? :(
16:02  Wild_Cat: NelleV: what!?
16:02  NelleV: papna: caml is a widely used programming language
16:02  NelleV: papna: very useful :p
16:02  amitz: NelleV: that, I can agree, not used as introduction.
16:03  daemonkeeper: If you mean "computer science" students, you shouldn't care at all. First lesson in a CS university college is "you don't learn programming, you learn computer science"
16:03  NelleV: papna: you can even find *one* company that actually employs people to do ocmal programming
16:03  AgentZ86: well, it's concept I'm wanting for starters, I started reading C++ which was not unreasonably hard but most that I've talked to said don't do it first, it's more complicated to learn, better to learn the programming concept from python. Not that they thought it was better then others but just a better start was basically what many have suggested in order to understand the concepts simpler so that when moving to another
16:03  Wild_Cat: if, and only if, by "most", you mean "most at the INRIA"
16:03  papna: NelleV: ;)
16:03  NelleV: Wild_Cat: nope, actually I was thinking of Jane street
16:03  ssbr_: AgentZ86: C++ is literally the biggest programming language ever created
16:03  AgentZ86: I don't know if thats right or not since I just started so I can only guess at what might be a best starting point based on what many suggested
16:03  amitz: ssbr_: you may be right, I don't know what python can do GUI-ly, never write a GUI-ed python before.
16:03  ssbr_: AgentZ86: it's language reference is three or four times the size of Python's, and it's more densely worded, too.
16:03  NelleV: Wild_Cat: else, I don't consider INRIA as a company. Merely a research organisation that happens to sometimes employ people
16:04  Wild_Cat: NelleV: sure, but they're basically the only people on the planet to use Ocaml
16:04  ssbr_: If you think you know C++, you don't know C++ :<
16:04  NelleV: Wild_Cat: and rarely employs people to code :p
16:04  the_isz: AgentZ86: i totally agree with your "most" :)
16:04  NelleV: Wild_Cat: you forgot the research of Paris Sud
16:04  pythonirc1011: ssbr_: nice line...
16:04  amitz: AgentZ86: it really depends on your expected timeframe...
16:04  NelleV: Wild_Cat: and the four teachers at ENS ulm
16:04  Alberth: ssbr_: what about Ada?
16:04  NelleV: Wild_Cat: and jane street :-)
16:05  ssbr_: pythonirc1011: I stole it from quantum mechanics
16:05  ssbr_: Alberth: ooh, *maybe*
16:05 * ssbr_ compares
16:05  jdahm: I'm using <li py:for="something"> $somethingelse </li> in some cherrypy, but I'd like to apply a div class to the first element in the list.  How could that be done?
16:06  ssbr_: Alberth: doesn't look like it
16:06  Alberth: AgentZ86: C and C++ are heavily oriented to fast execution at the expense of being conceptually clean, so yeah, first learning the concepts and then seeing how it gets changed for the purpose of fast execution is a sane order of learning languages imho.
16:06  amitz: AgentZ86: I mean, if you have the equivalent of 4 years undergrad time, you can do the whole CS courseworks ;-).
16:06  AgentZ86: i can read it and practice everday for about 2-3 hours per day at least so that should make some progress in programming, maybe even 3-4 hours per day
16:06  Alberth: ssbr_: that's a surprise to me
16:07  ssbr_: Alberth: I'm counting language size as "the size of the specification when excluding the stuff about the standard library"
16:07  AgentZ86: the whole CS ?
16:07  Alberth: AgentZ86: I often make a lot of progress while pondering a problem away from the computer :)
16:07  pythonirc1011: I'm getting this wierd error with py2exe -- error: MSVCP90.dll: No such file or directory -- I did install vc redistributable...any other ideas on how to get py2exe to work?
16:07  ssbr_: C99 is 120 pages, Scheme is like 90, Python is (cheating, since it isn't a strict spec, but) 120ish, Ada is 380, C++ is 450
16:07  amitz: AgentZ86: well, software engineering, I guess.
16:07  AgentZ86: how long should python take to learn @ 2-3 hours per day of reading ?
16:08  pythonirc1011: AgentZ86: For Ever!
16:08  ssbr_: AgentZ86: the problem is in learning how to think really
16:08  Dynetrekk: reading programming is like reading swimmimg :)
16:08  pythonirc1011: unless you only want to know the grammer :)
16:08  Alberth: AgentZ86: you learn by doing more than by reading
16:08  svaksha: AgentZ86: how do you define learning. One can learn all through life
16:08  ssbr_: Alberth: anyway, when I said "doesn't look like it", I hadn't downloaded the PDF yet, just noticed that its file size was 3MB to C++'s 11
16:09  Alberth: :)
16:09 --- Meat_Boy is now known as Super_Meat_Boy
16:10  ssbr_: most of that appears to be that ada has a tiny standard library, though
16:11  ssbr_: AgentZ86: don't set your goals for practice, just come up with stuff to do
16:12  amitz: AgentZ86: do you have android phone?
16:12  ssbr_: the best way to learn is to have fun
16:12  AgentZ86: well, thats is sort of practice to me
16:12  AgentZ86: no android
16:12  Reite: x**0.5 == math.sqrt(x) right?
16:12  Alberth: yes
16:13  amitz: AgentZ86: ah, okay. python can run on android phone so that you can play around with it.
16:13  Reite: thanks thought so, was just confused why so many people import math to do square root
16:13  jargon-: how do i pop characters from a string until i hit a whitespace?
16:14  jargon-: is there a method for that?
16:14  jorrit: Reite, math.sqrt is possibly more optimal.
16:14  lvh: jargon-: Why do you need to pop them? Do you need those characters?
16:14  jorrit: Reite, as it only has to calculate the square root while the ** operator has to be able to copy with any number.
16:14  lvh: jargon-: Well, yes, but the optimal solution depends what you're actually trying to do
16:14  papna: jargon-: Are you sure you don't want your_string.split()
16:14  papna: ?
16:14  lvh: jargon-: It might be s.split(None, 1)
16:15  lvh: That'll split on whitespace until the first
16:15  lvh: Why the hell isn't maxsplit a kwarg :(
16:15  kerio: if math.sqrt() is much more efficient than ** 0.5 then it's a bug in int.__rpow__
16:15  papna: lvh: Histeretic risings?
16:15  jorrit: kerio, I don't know if it is much more efficient. Just that it could possibly be.
16:15  lvh: papna: So why the hell didn't they fix it in 3
16:16  papna: lvh: They left unfixed a LOT of things.
16:16  lvh: papna: I know that! WHY
16:16  jargon-: lvh: papna: i'm trying to get the first name or a person from a string like so: "Mr. John H. Doe". then pop the characters till it's only "Mr. John H." left
16:16  Alberth: kerio: not really, x**0.4999999 != math.sqrt(x)
16:16  lvh: jargon-: Hi, my name is Laurens Van Houtven
16:17  lvh: jargon-: Laurens Van isn't my first name
16:17  kerio: Alberth: that's why i said x ** 0.5
16:17  jorrit: kerio, I doubt the ** operator will actually test if the argument is equal to 0.5 to then do a special case though.
16:17  papna: lvh: Why don't they fix EVERY poorly-implemented old builtin/stdlib function and method? Tons don't accept kwargs.
16:18  papna: jargon-: s.rsplit(None, 1)[0] would basically do that.
16:18  kerio: jorrit: it seems something easy enough to test
16:18  functor: I have a friend who is a politics grad and wants to learn python, any good online resources?
16:18  papna: jargon-: Also, don't try to manipulate names.
16:18  lvh: jargon-: http://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/
16:18  jorrit: kerio, it would mean an extra additional tests for all other numbers that are not equal to 0.5 however.
16:18  lvh: jargon-: Don't try to add structure to unstructured name strings, it doesn't work
16:18  jorrit: kerio, also comparing floats is not easy. What if the argument is 0.499999999?
16:19  TheSheep: So, I think I'm going crazy. I have this crappy binary python library written in C++, and python code that calls one of the functions with a tuple as argument. In the library, the PyTuple_Check returns false. On the same machine, exactly the same code, but deployed with buildout works fine...
16:19  TheSheep: They both use the same python interpreter
16:19  kerio: jorrit: it's not, it's 0.5
16:19  kerio: it's *one half*
16:19  kerio: exact representation
16:19  TheSheep: And they have the same LD_LIBRARY_PATH
16:19  jorrit: kerio, still doubt there will be a special case.
16:19  kerio: yeah, it's probably something generic that works equally well
16:19  lvh: kerio: file a bug report
16:19  TheSheep: Of course I double-checked that the parameter passed is really a tuple, and it is.
16:20  lvh: kerio: mostly because I'm too tired to fight and dickinsm is good at it
16:20  kerio: lvh: for what?
16:20  lvh: kerio: ** .5 being slow
16:20  kerio: why is it slow?
16:20  kerio: :o
16:20  jargon-: lvh: papna: i know Laurens Van is not your first name, but poppen the Houtven let's me format it like so: Houtven, Laurens Van
16:21  jorrit: kerio, http://stackoverflow.com/questions/327002/which-is-faster-in-python-x-5-or-math-sqrtx
16:21  kerio: jargon-: huh? you mean Van Houtven, Laurens right?
16:21  jorrit: kerio, so math.sqrt is a lot faster.
16:21  jorrit: Well rather with psycho it is.
16:21  jorrit: Not with straight python (misread at first)
16:22 --- Cain` is now known as Cain
16:22  jargon-: kerio: damn. point taken
16:22  jargon-: arrrgh
16:22  tazle: jorrit: why would x**0.499999 be slower than sqrt(x)?
16:22  kerio: tazle: it's... different
16:22  jorrit: tazle, because the ** operator works on numbers different then 0.5 and sqrt can be a special algorithm designed to calculate just square root.
16:22  lvh: jargon-: That depends
16:22  tazle: kerio: rather it *may be* different, depending on your CPU
16:22 --- lixinfish is now known as lxyu
16:22  TheSheep: Why would PyTuple_Check return false on a tuple?
16:23 --- lxyu is now known as lixinfish
16:23  Alberth: kerio: so computing j=0; for i in range(1000): j=j+i is also a bug? (it is j = 500500)
16:23  jorrit: tazle, also look at that link I posted. sqrt *is* a lot faster (except on python 2.5)
16:23  tazle: kerio: obviously the python ide of things is different
16:23  lvh: jargon-: In the US? Yes. In the Netherlands? No. In Belgium? Depends if I'm north or south of the border.
16:23 --- lixinfish is now known as lxyu
16:23  tazle: jorrit: yes, I expect that's because of things other than the actual operation
16:23  kerio: Alberth: no but if pypy manages to optimize that away then i'm removing CPython for good
16:23  lvh: jargon-: Also: French people who write their name like this: STINNER Victor
16:24  jorrit: tazle, no don't think so. It is a simpler algorithm to calculate square root compared to general power operator.
16:24 * ssbr_ would expect it being because of the difference in algorithms used
16:24  tazle: jorrit: did you look at what each of the operations actually entails in bytecode and its execution
16:24  ssbr_: tazle: bytecode is irrelevant
16:24  NelleV: lvh: eh... do we ?
16:24  Wild_Cat: lvh: you forget about those who write it First_name LAST_NAME
16:24  jorrit: tazle, there is no byte code as math.sqrt goes to C library function.
16:24  lvh: jargon-: Also, Japanese people with Anglicized names
16:24  Wild_Cat: (e.g. me, except when I don't.)
16:24  tazle: ssbr_: when combined with interpreter it gets you the actual machine code that is executed
16:24  kerio: jorrit: does it matter though?
16:24  lvh: NelleV: I didn't say all French people did all the time
16:24  Alberth: kerio: so why can x ** 0.5 not do things differently from math.sqrt(x) ?
16:24  jorrit: kerio, does what matter
16:24  tazle: jorrit: so there is a function call
16:24  ssbr_: tazle: uhhhhhhh
16:25  kerio: the difference in speed
16:25  jargon-: lvh: in this scenario i have control over the formatting
16:25  ssbr_: tazle: yeah, but we don't really care about that
16:25  lvh: NelleV: There are just french people who do. Victor Stinner, specifically ;-)
16:25  jorrit: tazle, the difference in speed is because of algorithm.
16:25  jorrit: kerio, it is pretty big.
16:25  NelleV: jargon-: why do you want that ?
16:25  kerio: Alberth: because it's pretty easy to test, i dunno
16:25  ssbr_: tazle: the difference between a method call and function call is like, nothing
16:25  tazle: jorrit: did you look at the machine code that was actually run?
16:25  ssbr_: and the machine code is also unimportant
16:25  ssbr_: look at the C.
16:25  NelleV: lvh: well. He lacks certain point of the french etiquette I think...
16:25  kerio: also carmack hack ftw
16:25  ssbr_: intobject, AWAY
16:25  jorrit: tazle, no
16:26  lvh: jargon-: And you will never have to deal with people from Ireland, Japan, Korea, China, the UK, the US, Spain, Mexico, Brazil, Peru, Russia, Sweden, Botswana, South Africa, Trinidad, Haiti, France, or the Klingon Empire
16:26  lvh: NelleV: That certainly isn't the first time I've seen French people do that
16:26  NelleV: jargon-: and some of them can be very annoying with the way you write there name (french)
16:26  jorrit: Anyway, have to go.
16:26  tazle: jorrit: did you compare it to the C equivalent and see what the speed differences are there?
16:27  jargon-: NelleV: lvh: i'm reading out 'cn' and 'sn' attributes from ldap. 'sn' == "Houtven" and 'cn' == 'Laurens Van Houtven". so i'm trying to split out the 'Laurens'
16:27  NelleV: lvh: I guess it depends of the context
16:27  tazle: (wouldn't sn be Van Houtven?)
16:28  lvh: I would hope so
16:28  NelleV: I think it would...
16:28  paxcoder: is there some function that could give me a value of an XML node if i provide such string: 'root_node/parent_node/node'?
16:28  ssbr_: tazle: you can ask me
16:28  ssbr_: instead of a guy that is leaving
16:28  ssbr_: paxcoder: "find" in etree
16:28  jargon-: tazle: it *should* be,but it's not for some reason. i didn't write the interface that let's me enter names into ldap. but i'm writing the one that let
16:28  ssbr_: also "xpath"
16:28  ssbr_: or maybe it was findall
16:28  jargon-: tazle: *that let's me read them out again.
16:28  ssbr_: (also, these are methods)
16:29  lvh: jargon-: Well, then 1) file a bug report 2) str.rsplit(None, 1)
16:29  lvh: And hope Stinner never gets into your LDAP
16:29  ssbr_: tazle: anyway, looks like the difference between math.sqrt() and int_pow is that int_pow does a ton more checking and calls a completely different function
16:29  tazle: ssbr_: did you compare the C equivalents of ** and sqrt, and the python versions too?
16:29  VladDrac: I always forget... what stdlib method decodes foo=bar&bla=this-style strings?
16:29  ssbr_: tazle: do I have to?
16:29  VladDrac: into a dictionary that is
16:29  lvh: NelleV: It's extra annoying because of all those post-Napoleonic orphans who have first names as last names
16:29  jargon-: lvh: unfortunately,that bug report would be my responsibilty. i inherited the infrastructure
16:29  ssbr_: tazle: in order to say what my expectations are?
16:29  smw: paxcoder, definitely  xpath
16:29  lvh: NelleV: So not even a human can figure it out
16:29  ssbr_: I would expect a more general function to be slower
16:29  VladDrac: oh wait.. it's in cgilib
16:29  lvh: jargon-: I file bug reports I fix myself all the time!
16:29  ssbr_: this is a useful rule of thumb that holds very strongly in CS
16:30  NelleV: lvh: oh yes. Is that french specific ?
16:30  lvh: NelleV: Pretty much
16:30  NelleV: great :p We found a new way to annoy everyone \o/
16:30  jargon-: lvh: yeah,but this bug report will require diving into perl. not fun,imo.
16:30  lvh: jargon-: I write perl!
16:31  lvh: (postmodernically ironically)
16:31  paxcoder: smw, don't like non-std modules
16:31  jargon-: lvh: my condolensces! :P
16:31  lvh: jargon-: I *used* to write perl is probably a better description
16:31  tazle: ssbr_: my expectations are that at low level both are some stores and loads, and then one instruction that does the math pretty fast
16:31  lvh: paxcoder: you're screwed
16:31  d0m: I try to do: dropwhile(x,y)[1:] but it says dropwhile objects aren't subscribel
16:31  smw: paxcoder, didn't you ask how to search xml and get a value?
16:31  VladDrac: cgi.parse_sq
16:31  VladDrac: qs..
16:31  d0m: I can do list(dropwhile(x,y))[1:] but is there a way to just say skip the first?
16:31  ssbr_: tazle: x86 has a pow instruction and a sqrt instruction?
16:32  lvh: d0m: Correct! Use itertools.islice
16:32  tazle: ssbr_: and my expectation is that whatever great difference there is, it is caused by CPython, not the operations themselves
16:32  jargon-: lvh: but seriously,if i paste the perl code sometime,could u have a look at it?
16:32  lvh: ssbr_: x86 has an everything instruction
16:32  tazle: ssbr_: I'm just checking, but I'm 90% sure
16:32  tazle: ssbr_: it may not have the latter
16:32  d0m: lvh: ok thank you : )
16:32  lvh: jargon-: Not for free, sorry, I'm going to need consulting fees to cover the medical expenses
16:32  lvh: tazle: of course it does
16:32  jargon-: lvh: that's funny!;-)
16:33  tazle: ssbr_: also, x87 ;)
16:33  tazle: (or maybe SSE or whatever)
16:33  lvh: tazle: Technically it's x87 though
16:33  lvh: yeah
16:33  paxcoder: smw, yep
16:33  lvh: there's also SIMD instructions in SSE and MMX
16:33  paxcoder: lvh, why?
16:33  ssbr_: well it defers sqrt to an asm thing
16:34  ssbr_: pow also
16:34  ssbr_: damn
16:34  lvh: my x86 is rusty, but I think it's D9 FA # ST0 -> ST0
16:34 * ssbr_ doesn't know how to find the asm source in the glibc tree
16:34  smw: paxcoder, in that case, a library that handles xpath is what you want.
16:34  lvh: paxcoder: The majority of stuff in the stdlib is pretty bad
16:36  lvh: it probably has the usual x86 markers (SP DP EP) and raises FPU flags that have nothing to do with ieee754 standards
16:36  lvh: in true intel style
16:36  lvh: ssbr_: it's okay, don't use GCC
16:36  tazle: some pow() imlementations seem to have around 13 x87 instructions
16:37  aljosa: how can i modify shell environment from python? if i can do "export PYTHONPATH=..." from shell can i do the same thing with "python myscript.py"?
16:37  lvh: tazle: Yes, they're probably more correct
16:37  ssbr_: lvh: no I really wanna know how to read the glibc source tree
16:37  lvh: ssbr_: No, you really really don't
16:37  ssbr_: finding the math implementation was easy enough until I realized all it did was call out extern'd __iee754_foo functions
16:37  ssbr_: so how do I find those :(
16:37  lvh: ssbr_: GCC is wrong all the time about FPU flags, especially wrt internally extended precision
16:38  lvh: ssbr_: additionally, when they're wrong, they refuse to admit they're wrong
16:38  lvh: http://gcc.gnu.org/bugzilla/show_bug.cgi?id=323
16:38  lvh: "volatile" fixes it, which is *never* supposed to happen for an optimization
16:39  lvh: code is either correct without it or it isn't
16:40  lvh: (for evidence that they don't even understand the problem, grep that for suggestions that -ffloat-store fixes it)
16:41  lvh: ssbr_: it's okay, use LLVM, it comes with a sane license *and* it does this correctly
16:43  ssbr_: lvh: right but then I need to see llvm's implementation of pow and sqrt
16:44  lvh: ssbr_: right?
16:45  ssbr_: lvh: right was a general "sure, sounds good"
16:45  lvh: ssbr_: okay, so do that :)
16:45  ssbr_: the rest was "except for the part where I have to do more work"
16:50  aljosa: is it possible to change shell environment variables from python script?
16:51  NelleV: aljosa: probably by using the subprocess module, but there might be a much better way to do it
16:51  NelleV: or maybe I'm totally wrong
16:52  evildmp: i have a nuisance character being pulled from a text field in the dataabse, whose hex value is A0 (a non-breaking space)
16:52  evildmp: how can I match it?
16:53  evildmp: i.e. if xxx in body_field:
16:57 --- joseCooking is now known as joseGone
16:57  lvh: aljosa: You can only change your own enviornment.
16:57  lvh: aljosa: By default, children inherit environments.
16:57  lvh: aljosa: (so, os.setenv)
16:57  lvh: aljosa: *exporting* that is a shell-specific feature. Those are only meaningful because new shells get them.
16:57  lvh: aljosa: So, you might want os.system to call export.
16:58  lvh: subprocess won't help you, you can basically only use that to create children that will inherit but never affect your environment
16:58  lvh: Typically exporting isn't that interesting anyway, like I said, it's a shell-specific feature
17:01  aljosa: lvh: i don't have os.setenv, is it provided by some additional python module? i'm using python 2.6.6
17:02  papna: aljosa: Did you "import os"?
17:02  papna: aljosa: Also, why are you using setenv?
17:02  lvh: aljosa: The real question is: what are you actually trying to do
17:03  papna: aljosa: Setting environment variables isn't very useful. Normal variables are better to use.
17:07  aljosa: papna, lvh:  i did "import os", what i'm actually trying to do is set environment for my projects from python. http://dpaste.com/326316/
17:08  armence: Is there a basic internationalization format/module for python? I'm thinking having a bunch of files with key-value pairs (one file per language)
17:09  aljosa: papna, lvh: os.setenv - http://dpaste.com/326321/
17:11  paxcoder: if i can import blah in root, can i from .. import blah in root/sub?
17:11  lvh: aljosa: ah, yes, 2.6: use os.environ
17:12  lvh: aljosa: that behaves roughly like a dict
17:12  lvh: paxcoder: Yes. Create a package.
17:12  lvh: paxcoder: The tutorial covers packages in section six.
17:12  papna: aljosa: What do you mean "set environment for my projects"?
17:12  papna: aljosa: Are you launching subprocesses you want to feed environment variables?
17:12  lvh: (Specifically, section 6.4 -- but you want to read the stuff before that too.)
17:13  paxcoder: lvh, come on, i just put __init__.py, do I not?
17:13  papna: aljosa: Do you expect to change environment variables system wide? That's not how they work.
17:14  paxcoder: it's not working though... i've been reading this tutor
17:15  papna: aljosa: If you want to change a subprocess's environment variables, subprocess.Popen provides means.
17:15  paxcoder: i hate imports
17:15  papna: aljosa: If you want to change them system-wide, you'll have to edit your profile or something.
17:18  paxcoder: "ValueError: Attempted relative import in non-package"
17:18  MJ94: Hi! I am a beginning programmer and was told to try http://projecteuler.net/index.php?section=problems&id=1
17:18  aljosa: papna: i don't want to change my settings system-wide, just temporary for shell/environment i'm currently in.
17:18  MJ94: But I don't even know how to start.
17:18  MJ94: Can I have help, please?
17:18  kerio: start by not doing project euler
17:18  kerio: it's for mathematicians, not programming beginners
17:18  aljosa: papna: if i do "git clone myproject-url" in windows or linux i would like to call "python my-env-script.py"
17:19  kerio: MJ94: beginner as in "never programmed before"?
17:19  MJ94: Yes.
17:19  kerio: MJ94: http://www.greenteapress.com/thinkpython/ or http://learnpythonthehardway.org/
17:19  kerio: the first is more theoretical, the second is more practical
17:19  aljosa: papna: and setup some environment vars required for my project(s) to work properly
17:19 * paxcoder freaks out
17:20  MJ94: Thanks kerio.
17:20  kerio: (note - project euler is totally awesome, it's just a different kind of exercise)
17:22  armence: The python tutorial says that the output of repr should be understandable by the interpreter. How does that work? What do you feed the output of repr to?
17:22  papna: aljosa: You can't set parent processes'
17:22  papna: aljosa: You can't set parent processes' environment variables.
17:23  papna: aljosa: You should write a shell script and source it in linux. ". myprofile"
17:23  papna: aljosa: I don't know how Windows works.
17:24  paxcoder: lvm you gave me a wrong answer. it's one fullstop too many. and it STILL won't work
17:25  tpw_rules: not sure if this is the right place but how do i use the cgi FieldStorage with WSGI?
17:25  paxcoder: i love it when you ignore me
17:26  Wild_Cat: paxcoder: please don't be rude.
17:26  gusg: if I have a wxTimer calling a function A() once every 20 ms, but A() takes longer than 20ms to compute, does wx queue the calls or block?
17:26  kerio: armence: lies
17:26  paxcoder: Wild_Cat, wth?
17:27  Wild_Cat: <paxcoder> lvm you gave me a wrong answer. it's one fullstop too many. and it STILL won't work <paxcoder> i love it when you ignore me
17:27  charas: Can I also get django help here? Pagination in my app is giving me this error http://pastebin.com/7du90exV
17:27  infobob: http://paste.pound-python.org/show/1681/ (repasted for charas)
17:27  kerio: armence: ideally, if the object is very simple, repr() should give something you can paste in a python repl and get the same object
17:27  Wild_Cat: that, to me, is being rude.
17:27  aljosa: papna: i currently do have bash script that does what i'm trying to do in python. i'm trying to do this in python to get cross OS compatibility
17:27  paxcoder: Wild_Cat, <Wild_Cat> paxcoder: please don't be rude. <paxcoder> Wild_Cat, wth?
17:29  zxww: i have some code that does something similar to this, is there a way to do it in one line? http://paste.pound-python.org/show/1682/
17:30  paxcoder: there's /config.py, there's /__init__.py, there's /database/__init__.py, and then there's /database/singleton.py that has "from . import config". why is it not working darnit?
17:32  armence: kerio: thanks
17:32  kerio: (also eval(), but we don't talk about eval)
17:33  paxcoder: a possible solution: everything to root, and then python never again
17:33  Juhaz: gusg, block.
17:33  amitz: eval(also eval(), but we don't talk about eval)
17:35  gusg: Juhaz: thank you
17:35  paxcoder: i love the amount of "answers" here: http://www.mail-archive.com/python-list@python.org/msg238331.html
17:35  bisco77: hey all...i have a module that uses construct to parse messages from a device, http://paste.pound-python.org/show/1684, the 'data' section seems to be giving me issues...i need to change the way the last four items in that array are parsed and i'm not sure what the best way to go about that is...sample output and issues are in the bottom of the paste...
17:36  armence: Any recommendations for python blogs? I'm looking for the kind that will teach me useful techniques/good practices...
17:39  Wild_Cat: paxcoder: Look (because you clearly didn't get it the first time around), acting like a douchebag with a sense of entitlement is 1. not the best way to get answers, 2. frowned upon on #python. Please cool off and try again. As for your problem, I suspect it's because you don't have a config.py in your "database" folder. As lvh suggested, read the relevant part of the tutorial and/or language reference.
17:42  ^robertj: hello all, anyone have suggestions on 2-d text-wrapping? I've got three lines so I don't want A Big Bl\nue House C\nat
17:43  Wild_Cat: ^robertj: take a look at the textwrap module in the stdlib
17:43  paxcoder: Wild_Cat, 1. wasn't really getting them anyway 2. -_- config.py is in the parent folder naturally.
17:43  gregglind: time.strftime('%#d %Y %H:%m',time.gmtime(time.time()-10*86400))  still gives a leading zero on the day.  Any ways around this?
17:43  ^robertj: Wild_Cat, it does just what I described above, so ti doesn't use multiple lines well
17:43  Wild_Cat: paxcoder: in which case you should be importing from ..
17:43  gregglind: never mind %e is fine!
17:44  paxcoder: Wild_Cat, i'm sure I did that (like a 100 times). It's been hours now. I've decided it's staying in the rood.
17:44  paxcoder: *t
17:44  Wild_Cat: paxcoder: also, try importing the fully-qualified name.
17:44  Wild_Cat: but importing from . means importing from the same package, not the parent package
17:45 --- nek4life__ is now known as nek4life
17:46  paxcoder: Wild_Cat, don't have time to create subdirs anymore. do you know how i can stop py from creating pyc?
17:47  Wild_Cat: paxcoder: I don't think you can, other than by chmodding -w the folder that contains your sources
17:47  paxcoder: XD. ok, thx
17:49  ssbr_: paxcoder: python -B
17:49  ssbr_: or set the PYTHONDONTWRITEBYTECODE environment variable
17:49  paxcoder: ssbr_, ty
17:49  ssbr_: I do like the -w solution though
17:50  Wild_Cat: PYTHONDONTWRITEBYTECODE? That's an actual environment variable? Wow.
17:50  Wild_Cat: PYTHONDONTWRITEBYTECODEKTHXBYE
17:50  kerio: PYTHONYUWRYTEBYTECODE
17:51  sproingie: 3.2 writes .pyc files to a separate dir now
17:52  papna: alshain: Changing the environment variable doesn't change it for parent processes.
17:53  papna: aljosa ^
17:53  papna: Oh
17:53  alshain: ;)
17:53  papna: They're gone anyway.
17:53  papna: And they didn't listen the other 5 times I said it.
17:57  ronny: does anyone know how to have argparse stuff with nargs=2 use different names for each item?
18:03  seen_: ronny: add two arguments with nargs=1?
18:04  ronny: seen_: its a optional argument that starts with --
18:04  vr6: A function is returning a list and must be tested for empty list:   if not list: "print list is [] - empty."    Is the standard way to test for an empty list?
18:05  Wild_Cat: vr6: no, because the empty list is not a singleton -- far from it.
18:05  Wild_Cat: vr6: er, wait
18:05  Wild_Cat: vr6: yes, "if not l:" is the standard way to do it
18:05  Wild_Cat: sorry, I'd confused your code and your print statement :p
18:06  cousteau: well, if you're sure it's a list, yes, you can do ``if not list:``
18:06  nosklo: and if you're not sure, well, why?
18:06  nosklo: you should be sure
18:06  cousteau: (this is, if you're not going to use that function with something that is not a list)
18:06  nosklo: it works for list-like enough objects
18:07  vr6: i don't foresse using it with anything but a list... but then again I don't foresee a lot of things right now
18:07  Wild_Cat: it works for all containers, yeah
18:07  cousteau: I mean, if you're not going to do stuff like   list=0
18:07  nosklo: cousteau: why would you do that
18:07  vr6: is myList = []  <--- is that the same as empty list?
18:07  cousteau: nosklo, ehm... because you hate the human being or something
18:08  nosklo: cousteau: there are better things to do when you hate the human being
18:08 * cousteau makes the perl joke
18:08  vr6: or is an empty list one that may be delcared but never instantiated?
18:09  sproingie: foo = []
18:09  sproingie: foo is an empty list, and instantiated
18:09  sproingie: python has no concept of an empty variable
18:10  nosklo: vr6: "[]" is the empty list.. "myList = " is an assignment. "myList = []" means "create a new empty list, a new name myList, and make the name myList refer to that new empty list"
18:10  Wild_Cat: vr6: really, "if not foo:" is the standard, idiomatic Python way of testing for empty dicts/lists/strings/tuples/sets. You were right all along, I swear ;)
18:11  seen_: ronny: try specify tuple as a `dest` if it doesn't work; define custom action (it is relatively simple: call setattr(namespace,..) in __call__ and you're done)
18:11  Wild_Cat: also note that "if not foo:" also allows you to detect zero-value numbers (0, 0.0), None, objects whose __nonzero__ method (or __bool__ in 3.x) returns False, and of course, False itself.
18:12  vr6: Wild_Cat: that's what I thought that if not list was the python way... but my simple piece of code isn't seeing it that way!  So I am off to write print statements ad nauseum and if my eyes can't catch it I will be back with posted code!
18:12  Wild_Cat: vr6: sure thing.
18:12  Wild_Cat: vr6: note that it is bad practice to call a list "list", however. Because list is the Python builtin list type
18:13  Wild_Cat: (likewise dict, str, unicode, bool, int, float and basically everything dir(__builtins__) returns)
18:14  Gaap: hi all
18:14  Gaap: i need a little help, i just installed python-wifi
18:14  Gaap: using easy install
18:15  Gaap: how do i load the module?
18:15  sproingie: are there no docs?
18:16  sproingie: if you installed it with easy_install (pro tip: use pip, not easy_install) then it should be on pypi.  ergo: http://pypi.python.org/pypi/python-wifi
18:17  Gaap: sproingie, there's a doc folder
18:17  Gaap: it says from pythonwifi.iwlibs import Wireless
18:17  sproingie: there you go
18:17  Gaap: but it doesn't work
18:17  sproingie: "it doesn't work" is not helping
18:17  Gaap: ImportError: No module named pythonwifi.iwlibs
18:18  sproingie: you on a mac?
18:18  Gaap: linux
18:18  sproingie: you using the right version of easy_install?
18:18  sproingie: as in for your version of python that is
18:18  Gaap: yes
18:18  Gaap: 2.7
18:18  Gaap: for both
18:18  sproingie: what does `which easy_install` say?
18:19  sproingie: (oh it's probably in freakin /usr/bin)
18:19 --- emma_ is now known as em
18:19 --- Matrice64_ is now known as Matrice64
18:19  sproingie: sudo updatedb && locate pythonwifi
18:20  Gaap: /usr/lib/python2.7/site-packages/python_wifi-0.3.1-py2.7.egg/pythonwifi
18:20  Gaap: /usr/lib/python2.7/site-packages/python_wifi-0.3.1-py2.7.egg/pythonwifi/__init__.py
18:20  Gaap: /usr/lib/python2.7/site-packages/python_wifi-0.3.1-py2.7.egg/pythonwifi/__init__.pyc
18:20  Gaap: /usr/lib/python2.7/site-packages/python_wifi-0.3.1-py2.7.egg/pythonwifi/flags.py
18:20  Gaap: /usr/lib/python2.7/site-packages/python_wifi-0.3.1-py2.7.egg/pythonwifi/flags.pyc
18:20  Gaap: /usr/lib/python2.7/site-packages/python_wifi-0.3.1-py2.7.egg/pythonwifi/iwlibs.py
18:20  Gaap: /usr/lib/python2.7/site-packages/python_wifi-0.3.1-py2.7.egg/pythonwifi/iwlibs.pyc
18:20  Gaap: sorry for flood
18:20 * sproingie facepalms
18:20  sproingie: looks like iwlibs isn't a package
18:21  Gaap: mom
18:21  Gaap: i found the problem
18:21  sproingie: looks about par for the course with their documentation
18:21 --- Super_Meat_Boy is now known as Meat_Boy
18:21  Gaap: no it's working :/
18:21  nosklo: it could be.
18:21  Gaap: the python alias was wrong
18:21  sproingie: ah
18:21  Gaap: sorry for waste of time, my bad
18:21  sproingie: no prob.  btw, use pip :)
18:21  sproingie: nice to see easy_install is at least deploying unpacked by default tho
18:22  nosklo: sproingie: it's opt-in
18:22  sproingie: oh right it depends on some "zip safe" flag
18:22  nosklo: sproingie: the python_wifi setup.py probably opted for it
18:22  sproingie: i still like eggs in theory.  i just wish setuptools didn't make such a hash of them
18:22  sproingie: (har get it, hash)
18:22  nosklo: I don't.
18:23  sproingie: i think python's far more along than perl in terms of supporting zipimport to do single file deployment units
18:23  sproingie: perl's PAR makes eggs look elegant
18:27  NoReflex: hello! I'm looking to enable access to the serial port on my computer to multiple machines on my LAN. On that serial port I have a temperature sensor which can be read. I can communicate with the sensor just fine using pyserial but in order  to allow other access to it i want to create a small webservice with soappy. My question  is: how can I handle multiple simultaneous connections. How do I make one client wait until the other finishes?
18:29  nosklo: NoReflex: don't use soappy/pyserial
18:29  sproingie: NoReflex: by its very nature a serial port is only going to allow for one client at a time
18:29  MJ94: I'm new to programming, can someone show me how to make a loop please?
18:29 --- bduncan_ is now known as bduncan
18:30  sproingie: MJ94: http://www.greenteapress.com/thinkpython/thinkpython.html
18:31  sproingie: NoReflex: if you need your web app to serve clients independently of the state of the serial port, you'll need to decouple it somehow, either using threads or a process or twisted (assuming twisted has serial support)
18:31  NoReflex: sproingie, the connections are very "short" -  the user connects, reads the value and closes the connection ...the case where there are two simultaneous connections is very rare but I want to be prepared for it ... that is make hte new connection wait until the old one finishes.
18:31  balaa: twisted has serial port support
18:31  sproingie: NoReflex: the connection will be queued until the first request has finished serving.  it depends on the value passed to the socket's .listen() method
18:32  nosklo: NoReflex: it will wait automatically :) since soappy can't handle two connections.
18:32  NoReflex: There's no problem if for example a client has to wait two seconds to get a reading
18:32  sproingie: soap in python will frankly be disappointing.  if you have any choice about it, i'd avoid it.
18:33  nosklo: s/in python//
18:33  balaa: whats the difference between soap and regular http requests
18:33  sproingie: soap is a big complex protocol on top of http
18:33  NoReflex: using soap I can have a wsdl and a user can connect to it and it will be self-documenteed
18:33  cwillu_at_work: balaa, soap puts a messaging api into your messaging api so you can message while you message
18:34  cwillu_at_work: almost literally
18:34  nosklo: balaa: soap _uses_ regurar http requests to do stuff
18:34  Imek: heh
18:34  sproingie: yes, creating a service from wsdl is a nice use case for soap.  python's soap implementations just happen to be garbage
18:34  sproingie: soappy may be the best of a bad lot
18:34  sproingie: actually suds is probably better
18:34  nosklo: well, there's no way to write a good implementation
18:35  sproingie: java and .net manage it
18:35  nosklo: the problem lies in SOAP itself, not on any of python implementations
18:35  nosklo: they don't :(
18:35  sproingie: but it's a sausage-making process, you don't want to peek under the hood
18:35  sproingie: and getting java and .net's soap stacks to interoperate is ... not fun
18:35  nosklo: no, they don't work fine.
18:35  NoReflex: sproingie, I've read that soappy is easy to use ... I first wanted to clarify the conncurrent access to the serial port
18:36  sproingie: NoReflex: suds is just about as easy to use and it may actually be threadsage
18:36  sproingie: threadsafe
18:36  sproingie: not that threaded servers in python are a big hit either but it's still nice for stuff to at least be safe around them
18:36  NoReflex: sproingie, isn't suds a client only library?
18:37  sproingie: i thought it did some serving.  i may have them mixed up.
18:37  nosklo: "don't use SOAP" is the right answer
18:37  sproingie: much as i tend to ignore the dogma that flies around here, when it comes to the soap stack in python, nosklo's got the right of it
18:38  nosklo: NoReflex: I'd suggest amp > JSONRPC > XMLRPC > your own hand-made protocol > SOAP
18:38  sproingie: comfort yourself in the knowledge that at least it's not as sorry as perl
18:38  nosklo: SOAP is the last in the list
18:38  dh: What's "amp"?
18:38  sproingie: twisted-specific thing
18:39  nosklo: sproingie: no, it's not twisted-specific at all
18:39  nosklo: it has implementations for many languages, including PHP and Java
18:39  nosklo: dh: http://amp-protocol.net
18:39  pythonirc1011: anyone has used pyinstaller here?
18:39  pythonirc1011: I just used it, it creates a .exe file, then when i run it, i get -- ImportError: No module named PyQt4.QtCore
18:40  sproingie: php implementation of async messaging, that's interesting
18:42  DigitalKiwi: _habnabit: just wanted to say, the second solution was the best ;p
18:42  DigitalKiwi: _habnabit: on SO
18:43  balaa: so amp is best for web services?
18:43  DigitalKiwi: _habnabit: second you submitted rather
18:44  sproingie: amp is good for request/response rpc.  something like service discovery isn't in amp's scope tho
18:45  nosklo: service discovery is overrated
18:45  MJ94: Is  http://learnpythonthehardway.org/static/LearnPythonTheHardWay.pdf good for beginning programmers?
18:45  sproingie: not really
18:45  nosklo: balaa: amp is not much of "web" - most implementations don't go over http, but use a separate port on a socket
18:45  sproingie: zed even says that you should have prior programming experience
18:46  MJ94: GAH
18:46  nosklo: MJ94: it's good, yes
18:46  sproingie: zed's got a really standout style but he's not really a good teacher
18:46  balaa: why cant amp do discovery
18:46 * MJ94 gets very frustrated.
18:46  MJ94: I don't know where to start, ever!
18:46  nosklo: MJ94: but the http://www.greenteapress.com/thinkpython/thinkpython.html is better
18:46  sproingie: balaa: because it's nothing more than an ask/answer protocol
18:46  DigitalKiwi: how to think like a computer scientist python edition was decent
18:46  balaa: what does discovery mean
18:46  sproingie: balaa: it doesn't specify a transport or data types
18:46  sproingie: balaa: wsdl is a type of service discovery.  you get an endpoint, you get something back describing what you can do and how
18:46  nosklo: MJ94: if you check in the /TOPIC of this channel, there's a link under New Programmer that points to http://www.greenteapress.com/thinkpython/thinkpython.html
18:47  balaa: sproingie: word
18:47  nosklo: MJ94: that means it's the recommendation of this channel to new programmers
18:47  nosklo: sproingie: yeah, but it doesn't work
18:47  sproingie: technically wsdl is only a piece of service discovery, UDDI is the service discovery itself
18:47  MJ94: thanks
18:47  nosklo: as in, the spec is bronek
18:47  sproingie: but no one uses UDDI
18:47  nosklo: broken
18:47  balaa: sproingie: i like that idea
18:48  balaa: couldn't one implement that type of discovery functionality around amp
18:48  sproingie: you could
18:48  sproingie: though the point of discovery is that it has to be a common standard
18:49  sproingie: if all you want is to enumerate available methods, you could do something like _ask=xxx, _command=help
18:49  sproingie: you'd just have to implement help
18:49  balaa: standard in my organization?
18:49  sproingie: as standard as you need it to be
18:50 --- squishy is now known as SquishyNotHere
18:50  sproingie: if amp had topic subscription, then it would be roughly equivalent to the average message queue protocol
18:51  nosklo: sproingie: I think someone did that already
18:51  sproingie: the spec is totally silent on what happens with unsolicited answers
18:52  nosklo: you should probably ignore those
18:52  nosklo: in fact they shouldn't happen
18:52  sproingie: that sounds wise.  but then you have a problem with doing pub/sub
18:52  sproingie: okay not so much "unsolicited" as "duplicate"
18:53  nosklo: why?
18:53  nosklo: sproingie: amp is two-way
18:53  nosklo: after the connection, doesn't matter which side is client and which is server anymore
18:53  sproingie: oh it could send commands
18:54  sproingie: _command: notify, topic: /foo/xyz
18:54  sproingie: that makes sense
18:55  nosklo: NoReflex: by the way, it's weird that I answered this question just earlier today: http://stackoverflow.com/questions/4715340/python-twisted-receive-command-from-tcp-write-to-serial-device-return-response/4715520#4715520
18:55  nosklo: NoReflex: the question itself isn't related to your problem, but it's about the same subject
18:56  NoReflex: nosklo, reading now; thx
18:58  nosklo: NoReflex: I'd use the stack she is using on the question (twisted) but amp or txJSONRPC instead of rolling her own protocol
18:58  sproingie: amp is something you'd use to have your services talk among each other
18:59  sproingie: to the client i presume you're speaking http
18:59  sproingie: twisted will do nicely at blocking the response til you get a reply event from your serial service
18:59  nDuff: I have a production failure in a call to datetime.strptime: "ImportError: Failed to import _strptime because the import lockis held by another thread"
18:59  nDuff: ...what, if anything, can I do to avoid that?
19:00  sproingie: amp's all right but by the time i get to wanting a compact messaging protocol, i'd reach for amqp
19:01  psyferre: hey folks, I've got a situation where i need to compare two (potentially large) datasets, and I'm hoping for some advice on how to do it efficiently... I need to compare a large list of items to a very large database to find which ones have not already been added.
19:01  sproingie: which is no longer simple or peer-to-peer but you get other nice guarantees on top
19:02  zeekay: sproingie: have you used zeromq for anything
19:02 * nDuff hugs Celery (as a nice pretty Python library for message queuing)
19:02  ronny: hmm, python actually lacks a reasonable way to generate archives, each arcive type has a rather different api
19:02  sproingie: zeekay: nope, just java ones and played a bit with rabbitmq
19:03  psyferre: My initial approach was to pull a bunch of those records from the db into memory and compare the lists, but I'm ending up with a lot of iteration through the records that I'm sure will soak up a lot of time... there's got to be a better way, but I don't really know what it would be
19:03  sproingie: i'm not a fan of 0mq's breathless claims of being everything for every need
19:04  rjune: I'm looking for a python module that's able to interact with MSI packages, install, remove, list, etc. does anyone know of such a beast?
19:04  bisco77: did anyone have any ideas about my post? http://paste.pound-python.org/show/1684
19:04  sproingie: psyferre: can you compare your dataset on the db side?
19:05  sproingie: psyferre: like insert your list into a temp table then do a "where not in" or a left join?
19:05  psyferre: I can, but wouldn't it take a lot more time to hit the db with a query for every item to see if it's already there?
19:05  sproingie: probably want a where not in most of the time
19:06  sproingie: psyferre: that's the point, you're saving time by pushing your list to the db and doing only one query
19:07  sproingie: well, two now.  one for the temp table and one for the query
19:07  psyferre: sproingie: that's not a bad idea...  for the items that DO have a match in the database I need to some other comparisons... perhaps I could do something like "select crap, i, need from table where id not in (list of ids from items)"
19:07  Aranel: [oop newbie question] on my auto-generated UI, there's some line called self.lineEdit.something, how  can I call it outside of the class?
19:07  Aranel: classname.lineEdit.something didn't work.
19:07  sproingie: psyferre: if your list is small you can inline it right there, yes.  sqlalchemy knows how to do this, i don't know of any dbapi driver that does though
19:08  sproingie: database CLIs in general are terrible at dealing with non-scalar parameters
19:08  psyferre: sproingie: small might be a relative term in this case... anywhere from a few hundred to 15,000 or so
19:08  sproingie: yeah you should go with the temp table
19:09  sproingie: 15,000 id's in a single literal is too big for most databases to handle
19:10  sproingie: that many and you might even want to do a left join since it'll have a better chance at using a cursor
19:10  sproingie: depends on your db
19:11  psyferre: sproingie: better chance at using a cursor?  I'm not sure I understand...  using mysqldb
19:11  sproingie: pessimism serves me well when it comes to mysql, i.e. assuming it will do the slowest possible thing
19:11  psyferre: heh
19:12  psyferre: prefer oracle?
19:12  sproingie: and get thee to oursql, mysqldb will be heinous when it comes to creating that temp table
19:12  kerio: s/oracle/postgres/
19:12  ssbr_: psyferre: who do you think makes mysql
19:12  sproingie: i prefer postgres or firebird or about a dozen other rdbms's over mysql
19:12  psyferre: ssbr_: santa?
19:12  ssbr_: firebird! man I haven't heard about that since I read up the etymology on firefox
19:13  ssbr_: psyferre: close enough. His elves.
19:13  psyferre: ssbr_: (you caught me) :)
19:13  psyferre: sproingie: oursql.  I'll check it out
19:14  psyferre: sproingie: Thanks. :)  The temp table is a great idea... It would have been a long time before I thought about it from that angle.  I very much appreciate the advice
19:17 * bisco77 wonders if anyone actually even saw his earlier post
19:19  balaa: whats the best way to handled authentication in a restful web service
19:28  lvh: balaa: You need a metric first
19:28  lvh: balaa: Cryptographically secure? Pre-shared SSL certs.
19:28  sopho: "metric" is also an excellent music band
19:29  kerio: well surely you need to save passwords in cleartext so the user can get it back if he forgets it
19:33  winterweaver: I have a app that makes a request to facebook and the response I get back is a dict containing { 'ids[]': ['1234', '5678'], ... } ... Now if I try to access the request['ids[]'] it only returns the first item in the list. Why is that? Does it have anything to do with the name of the Key?
19:34  Eevee: paste your code
19:34  kerio: winterweaver: no
19:34  Eevee: and no, the key name is completely irrelevant
19:35  winterweaver: ok in a bit I'm just testing something else quick
19:38 --- aminpy_ is now known as aminpy
19:40  JonMarkGo: I did easy_install selenium and it was successful but when I do from selenium import selenium I get ImportError: cannot import name selenium
19:40  reg3x: hi everyone. i would appreciate a lot if anyone could tell me which is the right way to use threads on python?
19:40  reg3x: is there a module ?
19:41  reg3x: whjich is the updated and standard way ?
19:41  reg3x: i want to run a progress and then also a pygtk progressbar ...
19:41  Juhaz: the right way is usually not to use them
19:41  kerio: the right way is not using threads
19:41  reg3x: oh really?
19:41  strangl3r: reg3x: threads module
19:41  sproingie: NO
19:41  TheSheep: reg3x: there is a `threading` module, but the correct way to deal with threads in python is to rethink if you really need them
19:41  kerio: strangl3r: nope
19:41  sproingie: threading module
19:41  strangl3r: http://docs.python.org/library/thread.html
19:41  nosklo: strangl3r: well, no
19:41  reg3x: i thought was the best practice in the case of having a gui  and using a progressbar
19:41  sproingie: the threading module.  the threads module is awful.
19:42  nosklo: reg3x: no, you don't need either
19:42  sproingie: as for how to use the threading module, it presupposes you know something about threaded programming
19:42  reg3x: so do u guys recommend me to avoid threads for avoiding freezin gui ?
19:42  reg3x: ok
19:42  reg3x: thanks nosklo
19:42  nosklo: don't use threading module
19:42  reg3x: thank you nosklo
19:42  strangl3r: nosklo: why not use the threading module?
19:42  nosklo: strangl3r: because it doesn't solve the problem, and adds other problems to the stack
19:43  Juhaz: reg3x, the same thing we recommended a month ago when you last asked. glib.spawn_async and io_add_watch
19:43  strangl3r: oh you're referring to his issue specifically, I thought you were talking about in general
19:43  nosklo: strangl3r: I'm talking in general
19:43  reg3x: Juhaz,  someone here in the same channel told me not to use glib.spawn_async.. since i was running an external program which does a search... i redid that with python code
19:43  strangl3r: well, how do you propose to solve issues that need non-serialized processing?
19:44  sproingie: threading module is based on java's thread api, which itself is mostly like pthreads.  thing is, even java doesn't recommend using those primitives directly anymore
19:44  reg3x: Juhaz,  instead of using find and tools like fdupes. i used walk module
19:44  nosklo: strangl3r: it depends on the actual processing
19:44  strangl3r: I'm writing something right now that uses threading and an alternative would be nice
19:44  nosklo: strangl3r: what are you doing?
19:44  strangl3r: I have a queue of jobs (site benchmarking) and multiple clients connect to a central server to get their jobs to execute.
19:45  nosklo: strangl3r: use asynchronous IO
19:45  nosklo: strangl3r: that will get you the highest level of concurrency with the smaller possible overhead
19:45  kunguz: What is the proper way to run a function with some frequency? I mean let's say, I have a function that prints and do a small summation and I want to make it work at 100 Hz. When I use time.sleep() function, I have to dinamically change sleep value, instead of that is there any timer interrupt alike functionality in Python?
19:45  strangl3r: nosklo: interesting... reading now
19:45  TheSheep: kunguz: cron?
19:46  cwillu_at_work: TheSheep, a hundred times per second?
19:46  kerio: haha cron at 100hz
19:46  kerio: nice
19:46  sproingie: kunguz: there's a sched module.  if you can figure out its utterly alien API, that's how to do it
19:46  TheSheep: cwillu_at_work: missed that part
19:46  nosklo: argh
19:46  nosklo: sproingie: please stop recommending terrible things
19:46  bisco77: nosklo: do you have a link to some reading on async_io?
19:46  TheSheep: kunguz: I use pygame.clock for things like that
19:46  strangl3r: bisco77: I'm reading this: http://teddziuba.com/2010/02/eventlet-asynchronous-io-for-g.html
19:46  sproingie: oh right, the answer is "don't do it"
19:47  kunguz: TheSheep: can pygame.clock act as an interrupt?
19:47  kerio: strangl3r: the usual way is twisted
19:47  nosklo: bisco77, strangl3r: http://krondo.com/?page_id=1327
19:47  kunguz: TheSheep:  or do you check for the right timing all the time?
19:47  TheSheep: kunguz: of course not
19:47  strangl3r: as in the twisted framework?
19:47  TheSheep: kunguz: it only does the right delay
19:47  kunguz: TheSheep: I should better check that again, I think I missed that part
19:47  bisco77: i'm writing a program that has to write to the serial port then read and parse the response several times a second and, currently, i have it set up to use threading.Thread
19:48  strangl3r: kerio: gotcha. thanks for the link.
19:48  Juhaz: reg3x, well, if this is another issue then that does not necessarily apply. If it's about the same thing, then you have to ensure that the gtk main loop gets the control every now and then during your walking code.
19:48  howlymowly: hi poeple....  is just tried installing pyopengl on python3.1  and I get this errror message: http://www.pasteall.org/18358/python  any idea?  does anyone know if pyopengl is compatible with python 3.1?
19:48  sproingie: kunguz: apscheduler looks like something that's actually usable
19:48  kunguz: TheSheep: so you use this right: pygame.time.set_timer?
19:49  nosklo: bisco77: interesting, I just helped two people doing that same thing
19:49  TheSheep: kunguz: no, pygame.clock.Clock
19:49  bisco77: nice
19:49  nosklo: bisco77: why are you writing this? Is this some kind of homework?
19:49  TheSheep: kunguz: let me check
19:49  nosklo: bisco77: I find it weird that everybody wants to do it the same day
19:50  bisco77: no...it's actually a project one of my companies clients...kind of a remote monitoring thingy that i seem to be having problems with (my earlier post(s) kinda go into more detail) using pyserial, threading and construct
19:50  TheSheep: kunguz: pygame.time.Clock sorry
19:51  TheSheep: kunguz: and its .tick(fps) method
19:51  kunguz: TheSheep: the thing is I am currently trying to get pictures from camera at a certain frequency using pygame. There is a strong variance in the frequency all the time when I use delay functions...
19:52  kunguz: TheSheep: but this only counts the FPS? how do you make something run at 10 FPS for example?
19:52  bisco77: nosklo: currently i'm having issues with getting the parsing correct for the data portion (data is set up as an Array of 20 SBInt32's, but, the last for elements need to be formatted differently and I can't figure out how to do it :-/ )
19:52  JonMarkGo: I did easy_install selenium and it was successful but when I do from selenium import selenium I get ImportError: cannot import name selenium <- Anyone know what the issue might be?
19:52  TheSheep: kunguz: the clock remembers when it was last time called, and waits apropriate amount of time
19:52  bisco77: nosklo: s/the last for/the last four/
19:53  TheSheep: kunguz: as long as your code gets less than that to execute, it should work
19:53  kunguz: TheSheep: still this is not a constant operation, it will vary
19:53  TheSheep: kunguz: how so?
19:54  kunguz: TheSheep: If I did not misunderstand, you call tick() function and wait until your FPS value is right?
19:55  TheSheep: kunguz: tick() will wait for the next frame
19:55  sproingie: kunguz: Clock is how pygame figures out fps in the first place.  you call .tick() every frame, and Clock.get_fps is actually getting ticks per second
19:55  sproingie: kunguz: if you give .tick a parameter, it will make sure it never ticks more often than that many times per second
19:55  sproingie: no idea if it supports fractional values
19:56  TheSheep: you can also switch it to active waiting for better precision
19:56  TheSheep: but this will eat cpu, of course
19:56  bisco77: nosklo: would you happen to have any insight??? cuz, i'm currently to the point of pulling my hair out...
19:56  sproingie: you'll still want to sleep for some fixed amount, and that will constitute your clock's jitter
19:56  sproingie: otherwise your CPU becomes a space heater
19:57  kunguz: sproingie: how is the condition for lower FPS then the limit? Clock.tick(40) if I use it like this this will make my program run at 40 FPS righT?
19:57  nosklo: bisco77: well, I can't see the relation with your problem and the usage of threads/pyserial
19:57  nosklo: bisco77: but I'd use async IO nonetheless
19:57  kerio: according to what lvh said, pyserial is one big wtf
19:57  sproingie: kunguz: it'll make Clock.tick delay so that it won't tick more than 40 times per second
19:57  kunguz: TheSheep: by saying active waiting, what do you mean exactly?
19:58  sproingie: kunguz: how smoothly it adjusts, i don't actually know.  it's not a highly sophisticated framerate smoother though
19:58  kerio: so yeah, use twisted.serial
19:58  kunguz: sproingie: rest is upto my CPU, I guess so it can be 39 or 38 also?
19:58  sproingie: it can be slower if you do expensive processing outside of Clock.tick, yes
19:58  kunguz: sproingie: TheSheep thanks guys, this I try right away.
19:58  sproingie: how well Clock.tick adjusts to its actual call frequency, i don't know, but i have to assume they kept it simple
19:59  sproingie: if you need delays of several seconds, i'd use some kind of scheduler object
19:59  bisco77: nosklo:that just had to do with the use of the threading module
19:59  sproingie: the api for apscheduler looks all right, no idea how accurate it is
20:01  fireangel: regex question: im using pattern.sub with '[\W_]+' to strip all non-alphanumeric chars, how can i keep the ; char too?
20:01  kunguz: So it turns out good enough and result is heavily depending on CPU...
20:02 --- CamargoBP is now known as bret
20:02  bisco77: nosklo: but i would love some insight, if you have any, as to my earlier issues;)
20:02  kunguz: Do you guys have a similar problem with pygame.camera? Whenever I operate with pygame.camera more then say 5-10 minutes continously, process crashes.
20:03  sproingie: memory leak?
20:03  sproingie: what does it crash with?
20:03  kunguz: sproingie: it says process is stopped
20:04  kunguz: sproingie: I am operating under a linux distro named as Pardus
20:04  nosklo: bisco77: move your code to twisted.serial - it calls your callback automatically when there's data available to read at the serial port - so you don't need threading anymore, because your code can keep running
20:04  fireangel: nevermind, of course i got it 30 s after finally asking here
20:08  zalun: hi
20:08  zalun: I tried to create an epub doc for python, why make epub is not working? is it blocked? or not provided
20:11  kunguz: sproingie: any suggestion?
20:11  JonMarkGo: I did easy_install selenium and it was successful but when I do from selenium import selenium I get ImportError: cannot import name selenium
20:12  sproingie: kunguz: don't know.  could be buggy camera drivers, could be pygame, could be anything.  no traceback or anything?
20:12  bisco77: nosklo: thanks...i'll look into that later today...how about the issue i'm having with the parsing bit, http://paste.pound-python.org/show/1684/ , example at the bottom of the paste
20:12  Taos: would opening a ascii file in binary mode effect the content?
20:13  bisco77: nosklo: btw, i really appreciate you taking the time...you've helped me on more than one occasion ;)
20:15  nosklo: bisco77: looks like you have some endian issue
20:16  nosklo: bisco77: you said 0x0f610000 should be 97-15 -- but 0x0f is 15 and 0x61 is 97
20:16  nosklo: bisco77: the same holds true for your other bytes
20:16  bisco77: yeah...but if i change it the rest of the data gets f'd up...i need to be able to change the endianess of the last four elements (engine error code information)
20:17  nosklo: bisco77: I'm not familiar enough with construct to know how to configure that though
20:17  bisco77: and leave the first 16 alone
20:17  bisco77: no worries...
20:18 * bisco77 wonders if there is anyone here who is familiar with construct who might shed some light on this situation
20:18  hamster_dance: in h5py, say I load a dataset into memory, then I change some values, how do I save my changes?
20:19  Hamled: on Windows if you install Python to a non-standard directory, does that make the normal windows package installer not able to detect that installation of Python in the registry?
20:19  Eevee: bisco77: um, break it into two arrays?
20:19  reg3x: guys which is the best way to compare files in order to find duplicates???  ive heard about the module  'filecmp'
20:19  Eevee: Array(16, SLInt32('data')), Array(4, SBInt32('data2'))
20:21  ronny: reg3x: walk over the file collection and do a cheap but reasonably collision-free crypto hash
20:21  ronny: have a mapping of hash -> filenames
20:21  ronny: then walk them
20:22  ronny: it should be 5-7 lines of code it hink
20:22  ronny: have fun with figuring those tho :P
20:22  aljosa: i can get locals() but is there a way to set local variables from a function? something like setattr(locals(), key, value)?
20:22  sproingie: i actually do this but it's in shell
20:22  bisco77: Eevee: i didn't think of that...i'll give it a go and let you know what shakes out...thx
20:22  ronny: aljosa: why would you do that?
20:23  ronny: aljosa: i dont think there is a good enough reason to make something as nasty as that a good idea
20:23  reg3x: ok ronny thanks :)
20:23  aljosa: ronny: i'm importing settings for somefile.ini with ConfigParser and i don't know what's inside except that i need it in current context
20:24  hamster_dance: anyone work with h5py?
20:24  ronny: aljosa: sounds like a really bad idea
20:24  ronny: aljosa: what are you really aiming at? the path you choose as solution is just not acceptable
20:25  sproingie: there's a structure that lets you assign values to arbitrary names and keep them in their own contexts
20:25  sproingie: it's called a dict
20:26  bisco77: Eevee: could i do that with an embedded struct maybe? cuz i don't want to break the format for sending msgs to the device
20:27  aljosa: ronny: ok, i'll figure out a better way
20:27  zuo: Hi .*
20:27  zuo: (and cya for a few moments)
20:28  Eevee: bisco77: not sure; you might have to write your own adapter for that
20:28  bisco77: k...i'll give it a shot
20:28  bisco77: thx again
20:29  sproingie: aljosa: just use a dict instead of locals when you want to update values by name
20:30  nosklo: reg3x: compare size first, it's cheaper
--- Log closed Mon Jan 17 21:26:37 2011
--- Log opened Mon Jan 17 21:32:07 2011
21:32 --- Users 807 nicks [0 ops, 0 halfops, 0 voices, 807 normal]
21:32  nosklo: so you don't have to test
21:32  Cam: nosklo, yeah, but it would be easier to parse it..
21:32  Cam: is that above code correct?
21:32  nosklo: Cam: it would be a lot easier using get_user and get_user_from_string
21:32  nosklo: Cam: since the calling person knows which one to call. By making a single function you're discarding that information
21:33  traceback0: bob2: oh well, since sys.path is just a list anyway you can either prepend or append
21:33  sproingie: yah don't overload function parameter types if you can ever help it
21:33  Eevee: Cam: I have no idea what you're doing, based on this
21:33  traceback0: bob2: and control which one
21:33  Cam: Eevee, good for you.
21:33 --- Channel #python was synced in 99 seconds
21:33  bob2: traceback0: shudder :)
21:34  traceback0: bob2: yeah...well...come up with something better ;)
21:34  traceback0: upgrade python is not a viable solution atm :P
21:34  Eevee: Cam: well, usually that's a bad sign.
21:34  exalt: kerio, where does the sieve call millerrabin ?
21:34  Cam: Eevee, cool.
21:35  kerio: exalt: nah, it doesn't, just ignore the first function
21:35  exalt: kerio, can i leave it out ?
21:35  zuo: Cam: I don't understand... user = {} or there should be users = {} ???
21:35  zuo: (3rd line)
21:35  Cam: zuo, users **
21:36  zuo: Cam: and each user is a dict?
21:36  Cam: zuo, check that each dict being passed was returned from my function.
21:36  bob2: traceback0: the above two things works pretty well
21:36  traceback0: bob2: prepend?
21:37  Eevee: Cam: ok, what you're trying to do is definitely wrong.  make a User class and just let the caller look the user up himself in your dictionary
21:37  zuo: Cam: ok, but generally: what is a typical element of users?
21:37  zuo: Cam: what is key, what is value?
21:37  Cam: zuo, what do you mean?
21:37  Eevee: Cam: also I have no idea what you're trying to accomplish with namedtuple there, but setting somenamedtuple[var] = anything will certainly not work
21:37  Cam: Eevee, I am not talking to you, please stop highlighting me :<
21:38  pythonirc1011: there is no concept of global variables for all modules in python, right? (Except perhaps the keywords / __builtins__ )
21:38  kerio: nope
21:38  Eevee: Cam: please stop being antagonistic; you are asking for help in a help channel
21:38  pythonirc1011: is that statement correct?
21:38  Eevee: pythonirc1011: right
21:38  Cam: Eevee, and I am talking to zuo. Thanks.
21:38  zuo: Cam: use create users = {} and use it in a few places...
21:38  zuo: Cam: You create users = {} and use it in a few places...
21:38  Spira: Just make a global.py, then import global then use global.var
21:38  Cam: I know.
21:39  bob2: traceback0: nto collding with the stdlib, putting your code in a package
21:39  kerio: pythonirc101: that's correct - the thing you get when you use global is just module-level scope
21:39  Eevee: naming a module 'global' will not yield success
21:39  kerio: Spira: nope
21:39  kerio: what Eevee said
21:39  pythonirc1011: kerio: but one can reassign builtins and share them among modules?
21:39  bob2: don't reassign builtins
21:39  Spira: Oops
21:39  Eevee: pythonirc1011: danger will robinson
21:39  traceback0: bob2: unfortuantely we want to make things easier for devs when they bring down repos
21:39  zuo: Cam: and my question is: what is the type of keys and the type of values of that dict
21:39  Spira: globals*
21:39  kerio: pythonirc101: eeeeeew
21:39  Spira: xD
21:39  kerio: Spira: globals is equally bad
21:39  Cam: zuo, strings or ints or lists. who knows.
21:39  pythonirc1011: say one says : sorted = mysorted() , will this sorted be called when other modules use it? or is it just a local name?
21:39  bob2: traceback0: right
21:39  Spira: How so?
21:39  kerio: because it shadows __builtins__.globals
21:40  Spira: constants then?
21:40  Spira: o.O
21:40  bob2: pythonirc1011: no
21:40  Eevee: Cam: you should know; it's your dict
21:40  pythonirc1011: bob2: so its just a local name, right?
21:40  kerio: import globalmutablestatebecausewhocaresaboutwritinggoodprograms
21:40  Eevee: pythonirc1011: it's local the same way any other var name is local
21:40  Cam: Eevee, it depends on what is added.
21:40  pythonirc1011: thanks
21:40  bob2: pythonirc1011: in that case it exists in whatever scope you put it in
21:40  zuo: Cam: def make_user(user): users[user] = {}  # <- what is user here?
21:40  Eevee: Cam: he's asking about keys/values for `users`, not each individual user
21:40  zuo: Cam: a string?
21:40  Cam: Eevee, I could do user["eevee"]["cars/colors"] = {"jeep":"red"}
21:41  Cam: zuo, user is a string, users[user] is a dict.
21:41  bob2: pythonirc1011: I think the real answer is something lik "you're unlikely to ever want to globally replace a builtin, and if you did, do it in the module with an import or people will beat you" ;)
21:41  zuo: Cam: ok, I understand
21:42  Cam: zuo, http://pastie.org/1471238 is what I guess it would look like, just threw that up.
21:42  lieuwe: I need to monitor stdout from an java aplication and need to be able to send stdin to it, but using subprocess doesn't work, my guess is that it forks, is there some way to handle this?
21:43  pythonirc1011: bob2: is there a way to create global variables across all modules in python, without explicitly mentioning the global variable in any of these modules?
21:43  vr6: What are the thoughts on having more than one exit() statement in a function? Is it taboo, generally accepted?
21:43  lieuwe: pythonirc1011: you don't want to
21:43  pythonirc1011: I can of course import a global variable/or pass it to other modules...
21:43  bob2: lieuwe: well sure it forks, that's how you run another process on unix - what problem are you having?
21:43  kerio: vr6: what?
21:43  pythonirc1011: I want to know if its possible
21:43  bob2: pythonirc1011: yeah, btu that'd be shit
21:43  bob2: vr6: it is fine
21:43  pythonirc1011: bob2: is this even possible?
21:43  bob2: pythonirc1011: yes
21:44  lieuwe: bob2: I need to capture the output, but I don't get anything back, but it does output shit to the console when ran normally
21:44  pythonirc1011: bob2: using files perhaps...any other ways? using just python?
21:44  bob2: vr6: in C people often try to avoid it because they have to use goto to clean stuff up
21:44  vr6: kerio: function opens file, looks for something, fails to find, and can not proceed with processing.
21:44  bob2: pythonirc1011: don't know what you mean
21:44  bob2: vr6: but in python we have better ways
21:44  unclecameron: why is this http://paste.pound-python.org/show/1687/ giving me a SyntaxError: EOL while scanning string literal?
21:44  pythonirc1011: bob2: does python allow you to create a global variable and let you access it from every module in your package?
21:44  bob2: pythonirc1011: yes
21:44  pythonirc1011: how?
21:45  bob2: pythonirc1011: but it's a terrible idea
21:45  bob2: see for example web2py's db idiocy
21:45  vr6: bob2: Ok, thanks.
21:45  pythonirc1011: bob2: Not using databases/files/shared memory/etc
21:45  pythonirc1011: just using the language
21:45  bob2: pythonirc1011: yes
21:45  bob2: unclecameron: read it again
21:45  sproingie: globals are local to modules
21:45  lieuwe: bob2: any idea why processing is unable to capture output?(this is a java app btw)
21:45  pythonirc1011: sproingie: Thats what i thought
21:45  sproingie: you can import them for read, or use module.foo to write
21:45  bob2: unclecameron: first of all, you can't have literal newlines in '' strings
21:46  kerio: sproingie: well, __builtins__ is more than global
21:46  bob2: unclecameron: second line 4 is nuts
21:46  zuo: Cam: a few remarks: 1. IMHO you should have two separate functions: set_user_info(user, var, info) -- setting user[var] = info, and add_user(username, user): -- setting users[username] = user
21:46  pythonirc1011: sproingie: but can you get access to "pi" in all your modules without importing "math.pi"?
21:46  pythonirc1011: using python that is
21:46  sproingie: kerio: screwing with __builtins__ is something even i'm not going to recommend
21:46  kerio: pythonirc1011: you have very confused ideas
21:46  sproingie: pythonirc1011: you can't.  import it.
21:46  kerio: how would a module work without pi?
21:46  sproingie: you import it.
21:46  kerio: a module is supposed to work by itself
21:46  sproingie: presumably you're not going to change pi
21:47  Cam: zuo, I have two functions... add_user and set_user_info
21:47  pythonirc1011: bob2: how can you do this using python then?
21:47  Cam: and zuo I want user[username] to be `{}`
21:47  Cam: Because then I can assign other values.
21:47  lieuwe: bob2: halp?
21:48  bob2: unclecameron: http://paste.pound-python.org/show/1688/
21:48  sproingie: from math import pi
21:48  sproingie: presto
21:48  bob2: pythonirc1011: it's a terrible idea, so not going to encourage you, sorry :)
21:48  bob2: lieuwe: http://paste.pocoo.org/
21:48  exalt: 1:21 for 7 decimal primes :S
21:48  exalt: :D
21:48  zuo: 2. If not, you can simply check in set_user_info(user_or_username, var, info) -- if isinstance(user_or_username, collections.Mapping): user = user_or_username
21:48  sproingie: nothing wrong with global constants like pi.  as for a "true" global, not gonna happen
21:48  zuo: Cam: ^
21:49  zuo: Cam: else: user = users[user_or_username]
21:49  pythonirc1011: bob2: How do you do it? :)
21:49  Cam: zuo, thanks....
21:49  zuo: Cam: adn then: user[var] = info
21:49  bob2: unclecameron: important things: don't use '' for strings if you want to have ' characters in there, '' strings can't have newlines in them like that, you didn't balance your quotes, my example shows how to safely include user data
21:49  pythonirc1011: everyone else thinks its impossible..
21:49  bob2: pythonirc1011: no one said it was impossible
21:49  lieuwe: bob2: I just threw it out, sorry, but what I did was p=sub.popen(whatever,sys.stdout=PIPE,sys.stdin=PIPE) and then p.comunicate() in a while loop
21:49  pythonirc1011: bob2: "pythonirc1011: you can't.  import it."
21:50  bob2: pythonirc1011: ok!
21:50  pythonirc1011: bob2: do you mean write c code to change that object internally?
21:50  bob2: pythonirc1011: no I don't
21:50  unclecameron: bob2: thanks, thought the paste link doesn't work for some reason
21:50  pythonirc1011: so this can be done using just pure python -- I can give access to "pi" to all my modules without importing anything...?
21:50  bob2: unclecameron: reload
21:50  bob2: pythonirc1011: yes, but it's stupid
21:51  pythonirc1011: i know. I'm just curious. how!
21:51  bob2: lieuwe: communicate() waits for the process to exit
21:51  sproingie: pythonirc1011: dig around with dir() if you're curious
21:51  pythonirc1011: damn!
21:51  bob2: lieuwe: so a while loop is not gonna help ;)
21:51  pythonirc1011: Now I know
21:51  zuo: Cam: namedtuple is here rather unnecessary; anyway, if you use it, first you should create your namedtuple type: MyType = collections.namedtuple('MyType', 'field another_field') # globally, outside your function -- and only then you can instantiate it, e.g. my_named_tuple = MyType('value', 'another_value')
21:51  kerio: pythonirc101: how would modules know that they've got pi already?
21:51  zuo: Cam: 3. ^
21:51  lieuwe: bob2: ohlol
21:51  ssbr_: pythonirc1011: sure, it's possible
21:51  lieuwe: bob2: so, how do I do this then?
21:52  bob2: lieuwe: I don't know what you're trying to do
21:52  ssbr_: pythonirc1011: all you have to do is patch up the builtins module to add a new constant
21:52  ssbr_: presto, new constant available without importing anything!
21:52  bob2: lieuwe: if it is "repeatedly talk to a process and get replies", I think you need pexpect
21:52  pythonirc1011: no it wont work -- what i thought that is...the problem is -- when you dir(module) -- the module already exists as an object -- and it would not if "pi" was not available?
21:52  ssbr_: there is definitely no way that does not involve rebuilding Python
21:52  ssbr_: no sir
21:52  bob2: or more fiddling than I know how to do
21:52  kerio: ssbr_: yeah but this isn't donkey punching, it's donkey nuking
21:52  lieuwe: bob2: ahkay
21:52  Cam: zuo, ohhhh, I see.
21:52  Kaedenn: Okay, I want to generate all permutations of a sequence, but allowing for an element in said sequence to be repeated.
21:52  pythonirc1011: ssbr_: but if you do, wont that modification be in your own module?
21:52  kerio: ssbr_: what? you can just assign to __builtins__ you know
21:53  kerio: i think
21:53  Kaedenn: So perm([1,2,3], 3) -> [(1,1,1),(1,1,2),(1,1,3),...]
21:53  ssbr_: kerio: SARCASM
21:53  bob2: Kaedenn: does one of permutations/combinations in itertools do that?
21:53  Kaedenn: Nope.
21:53  zuo: Cam: 4. your set/get... methods rather don't need to use your user_exists() -- e.g: all this code: if self.user_exists(user): ret = collections.namedtuple('get_user', self.users[user]); return ret
21:53  Kaedenn: They don't do repeats.
21:53  ssbr_: or, no, sarcasm isn't right
21:53  ssbr_: the thing where you tell a lie and go all shifty eyes, obviously lying
21:53  ssbr_: that thing. what do you call it?
21:53  Cam: Okey okey.
--- Log closed Mon Jan 17 21:57:19 2011
