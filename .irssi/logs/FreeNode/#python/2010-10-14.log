--- Log opened Thu Oct 14 00:00:02 2010
--- Day changed Thu Oct 14 2010
00:00  kerio: ssbr: Cocoa eventloop?
00:00  kerio: no, Carbon
00:00  kerio: eeeew
00:00  ssbr: OK, Carbon would make more sense.
00:00  ssbr: If it was for Cocoa, it'd still be around in 3.x
00:10  ssbr: Yergh. How would one install wxPython to a home directory?
00:10  habnabit: Just like anything else?
00:10  ssbr: "anything else" usually don't want me to run ldconfig
00:11  ssbr: which I apparently need to do, according to make install
00:11 --- oracle_ is now known as destroyacle
00:11  ssbr: (all I know is, I can't use it yet)
00:11  ssbr: (imports fail)
00:12  ssbr: (I can't run ldconfig because I'm not root, or something)
00:12  squigle: hmm, im struggling to find where I can do it but with arg parse I have a variable called -r for range that accepts two numbers
00:12  habnabit: Hahaha ldconfig
00:12  habnabit: I'm sorry.
00:12  squigle: the help describes is as -range RANGE RANGE
00:13  squigle: Is there a way to make it say -range FIRST LAST
00:13  ssbr: Aha! I bet I can do /sbin/ldconfig -r $HOME/local/
00:13  squigle: ssbr, why do you want to do that?
00:13  ssbr: squigle: to do what?
00:14  squigle: run ldconfig
00:14  ssbr: squigle: because that's part of the installation process for wxPython
00:14  squigle: LD_LIBRARY_PATH is a very neat environment variable
00:15  ssbr: Sure. I have to modify that, too.
00:16  ssbr: Actually, huh, these are the instructions for wxWidgets. Did wxPy install that, too? Damn it.
00:16  ssbr: I hate not having root! Aaaaah!
00:16  ssbr: (I wonder if this will even work at all in the end?)
00:16  ssbr: http://paste.pocoo.org/show/275199/ by the way
00:18  qwerty1793: hi, is there a python equivalent to C++'s parallel_for?
00:18  squigle: ssbr, wxWidgets is the wx lib
00:18  papna-work: qwerty1793: Not exactly.
00:18  KirkMcDonald: qwerty1793: What does parallel_for do?
00:19  papna-work: qwerty1793: multiprocessing.map might be for you.
00:19  papna-work: qwerty1793: What are you doing?
00:19  habnabit: qwerty1793: Assume we've been fortunate enough to has avoided C++.
00:19  ahmed-tux: hi
00:20  qwerty1793: papna-work: there's a large / slow for loop in my code in which each run through is totally independant. I want to parallise this.
00:20  papna-work: qwerty1793: What does it do?
00:20  ahmed-tux: how can i compare the speeb  between java and python ?
00:20  papna-work: ahmed-tux: Implement an app in Java and Python.
00:20  papna-work: ahmed-tux: Make some test cases.
00:20  papna-work: ahmed-tux: Time them.
00:21  ahmed-tux: papna-work: when i execute i know the python tooooooooooooooooooooo fast but i want to se time
00:21  ahmed-tux: see*
00:21  ssbr: squigle: I know what wxWidgets is
00:21  ahmed-tux: see*
00:22  ssbr: what bothers me is that the Python bindings installed that, and that I have no idea if that can even work when it's being installed to my home directory
00:22  qwerty1793: papna-work: in short some maths. it computes invarient irreducible polynomials given a representative string. but there are a lot of these strings so the run time ~ 2hours
00:22  ahmed-tux: papna-work: thank you i'll use "time' command
00:22  ssbr: ahmed-tux: use the shootout. http://shootout.alioth.debian.org/
00:22  ssbr: Don't use the time command, it will give Python an unfair advantage.
00:22  squigle: ssbr, why wouldnt it work from your homedirectory?
00:23  ssbr: squigle: well, for a while I didn't even think ldconfig would work
00:23  qwerty1793: papna-work: i want to calculate 2 polynomials at once using both cores on my computer
00:23  papna-work: qwerty1793: Look into multiprocessing.map
00:23  ssbr: Maybe it wants to integrate with X somehow rather than just act as a library, etc.
00:23  papna-work: qwerty1793: Also, you may get a bigger speedup through serial optimization.
00:24  squigle: ssbr, ? in what way would it integrate?
00:24  ssbr: squigle: I don't know.
00:24  ssbr: squigle: you act as if this is something more concrete than the worries of the ignorant
00:25  squigle: ssbr, why would you bable about it here if you dont want to talk about it
00:25  qwerty1793: papna-work: well ive been working on this for about 2 weeks and so far I've sped it up by about a factor of 65 through various tricks, this is the last idea i had.
00:26 --- jweiss is now known as jweiss-out
00:26  ssbr: squigle: because I want somebody to talk to me about it?
00:26  ssbr: squigle: I don't know anything about it. That's why I'm asking questions here.
00:26  ssbr: squigle: you, on the other hand, are asking me silly questions about why I am asking questions.
00:26  papna-work: You've profiled, found the hotspots, considered closely the algorithms you've used, and moved the speed-critical parts into C?
00:27  squigle: ssbr, your concerned that wxPython is doing things to your X server?
00:27  ahmed-tux: ssbr: thank you hehehe
00:28  ahmed-tux: i don't know why people still devlop with java realy
00:28  dash: ahmed-tux: because other people develop with java
00:28  qwerty1793: papna-work: (C++) but yes
00:28  ssbr: squigle: no, I'm concerned that I won't be able to get wxPython to work locally.
00:28  squigle: ssbr, it should work locally, but you mean run out of your home directory? it will, why wouldnt it?
00:28  qwerty1793: papna-work: this one loop is the slowest by over a factor of 1000
00:29  ahmed-tux: dash: no
00:29  ahmed-tux: dash: bcs people want to waste time
00:29  papna-work: qwerty1793: So you wrote a C extension for the inner loop.
00:30  ahmed-tux: dash: if yoiu devlop with java i'm sorry but me i left it long time a go i change from darkto light
00:30  qwerty1793: the innermost loop is directly calling some C code. it's fast, there's just a lot of itterations to run (~10^8)
00:30  ssbr: squigle: I already answered that.
00:30  ssbr: "because wxWidgets needs root stuff" is the gist of it.
00:31  papna-work: qwerty1793: Great.
00:31  ssbr: Obviously wxPython would work fine, but it's insisting on installing wxWidgets, too, and I'm not so sure of that.
00:31  squigle: ssbr, it doesn't its just a library
00:31  dash: ahmed-tux: Java's not the worst thing
00:31  qwerty1793: papna-work: does this sound like the sort of place where parallisation would help?
00:31  dash: ahmed-tux: besides, there's Clojure now.
00:31 --- destroyacle is now known as oracle
00:32  papna-work: qwerty1793: Potentially.
00:33  ahmed-tux: dash: and fantom*
00:34  dash: ahmed-tux: i've only heard of that, what's good about it?
00:34  ssbr: dash: there's also Oracle now.
00:34  merlincorey: is there a good way to "add a type" to simplejson or json's decoder?  What I mean is the object_hook only works for parsed dicts, but I am dealing with something of the form '''{"a":1,"b":Thing('asdf')}''' and I want to be able to parse it, but since b is not actually an object, my hook doesn't get called and I just get a decoding error
00:34  dash: ssbr: whatever, there's open source java implementations
00:35  merlincorey: basically what I want to do is make Thing() just return the inner string
00:35  dash: merlincorey: that isn't json syntax, so no
00:35  ahmed-tux: dash: when i begin devlop with python , ryby and perl i didn't get new about java and java drived program
00:35  ssbr: dash: Yeah. And Oracle. :D
00:35  merlincorey: dash: is there a higher level parser I ought to be using?  It's json format aside from the Thing() which I just need the inner string of :(
00:36  dash: merlincorey: there's nothing convenient, AFAIK
00:36 * ssbr still can't remember the name of the E thing
00:36  dash: i wrote a parser but i'm not sure it'd be useful to you
00:36  dash: ssbr: terml
00:36  merlincorey: dash: thanks... I guess I'll have to just remove Thing() from the string before parsing after all
00:36  ssbr: Terml, OK
00:37  dash: fantom looks pretty boring as a language
00:37  dash: multiple backends is sorta interesting.
00:40  papna-work: http://imagebin.org/118397
00:41  dash: papna-work: haaaa
00:41  dash: who did that
00:41  papna-work: dash: Me.
00:41  dash: Cuuuuute.
00:41  ssbr: Hahahaha
00:43  papna-work: lvh: US history test.
00:45  lvh: papna-work: ?
00:46  lvh: papna-work: Oh, the picture?
00:47  tomas_: hi, is there a method I can use to get function name within the fuction?
00:47  lvh: papna-work: USMC motto, Gadsen flag,
00:47  papna-work: tomas_: No.
00:47  dash: tomas_: and do what with it?
00:47  dash: there's a town near here named Gadsden
00:47  papna-work: tomas_: Why do you want this? A function's name isn't semantic data. It exists for debugging.
00:47  papna-work: lvh: ............
00:47  dash: wasn't named after the same guy though, it was named after his grandson
00:47  tomas_: tell log.debug (" Running fuction %s" % function_name)
00:48  dash: papna-work: my laptop needs a new sticker i think
00:48  lvh: papna-work: I was assuming you were talking about your link.
00:48  KirkMcDonald: tomas_: log.debug("Running function %(funcName)s")
00:49  lvh: papna-work: "Don't tread on me", the rifle creed, and "semper fi(delis)" all remind me of the usmc
00:49  KirkMcDonald: tomas_: And the logging module does the rest of the magic.
00:49  lvh: papna-work: were you trying to refer to something else
00:49  tomas_: KirkMcDonald: thanks that's what I'm after
00:49  papna-work: lvh: You've failed.
00:49  papna-work: tomas_: Use a decorator or type the name manually.
00:49  lvh: papna-work: okay then
00:49 --- zemanel_ is now known as zemanel
00:50  tomas_: KirkMcDonald: nogo DEBUG:build:Running function %(funcName)s
00:50  KirkMcDonald: tomas_: Oh, you may need to specify it as the format string when configuring the logger.
00:51  lvh: dash: Okay so Twisted extreme track. I'm not sure what to do. It's got to be technical.
00:52  dash: lvh: let's ask glyph
00:52  tomas_: KirkMcDonald: can you elaborate please?
00:52  tomas_: logging.Formatter("%(levelname)s %(asctime)s %(funcName)s %(lineno)d %(message)s") ?
00:54  papna-work: tomas_:  http://docs.python.org/library/logging.html#logging.Formatter
00:54  ssbr: woo, rifle creed
00:55  KirkMcDonald: tomas_: I'd just: log.basicConfig(format="%(levelname)s:%(name)s:%(funcName)s:%(message)s") or whatever.
00:55  tomas_: KirkMcDonald: thanks
00:57  tomas_: hehe works
01:00  sig^: mm, in that case, run with --may-not-work
01:00  qwerty1793: papna-work: thanks for the hint. Got a 44% speedup using a 2nd core.
01:06  explodes: Ok on a windows machine, my threaded app starts with the end first, and then waits for the list of threads to finish
01:06  explodes: whereas on my mac, it waits for the list of threads to finish, then runs the end. what gives.
01:07  _habnabit: explodes, you're using threads. That just invites your app to be crazy.
01:07  _habnabit: explodes, so, fix that.
01:07  ssbr: explodes: "the end"?
01:07  explodes: let me mock up a sketch of whats going on...
01:08  Yhg1s: explodes: the order threads get executed in is arbitrary.
01:08  Yhg1s: explodes: if you want them to execute in a particular order, make them wait on each other -- or better yet, use a single thread.
01:09  explodes: http://pastie.org/1219493
01:09  explodes: Windows: Prints out totals, while the threads are still running
01:09  explodes: Mac: Runs threads, prints out totals
01:10  explodes: naturally, windows prints out a total of Zero.
01:10  Yhg1s: explodes: so wait for the threads to finish.
01:10  explodes: lines 12-13 are the waiting mechanism
01:10  ssbr: explodes: if you want to wait for all threads to finish, join them
01:10  Yhg1s: explodes: and remember to do all communication between threads with proper synchronization -- using Queue.Queues preferably.
01:11  explodes: jobcount keeps a count of how many jobs are running
01:11  ssbr: lines 12-13 are wrong.
01:11  Yhg1s: explodes: they don't wait for the threads to end. They wait for jobcount.done to be set, which is outside the scope of your paste and apparently not thread-safe.
01:11  ssbr: join the threads.
01:11  explodes: for thread in threads: thread.join() ?
01:11  Yhg1s: explodes: if you insist on using threads, you should use them correctly. Which is very hard.
01:11  ssbr: (also, don't use threads. Somebody said that already, right? Threads are awful!)
01:12  _habnabit: This is exactly why you shouldn't use threads: you don't know how.
01:12  Yhg1s: (hardly anybody knows how.)
01:12  _habnabit: Well, yes.
01:12 --- zemanel_ is now known as zemanel
01:13  Yhg1s: I thought I knew how, and then I worked with Jeff Yasskin, and now I'm sure I don't and never will.
01:13  heltonbiker: a simple question, but which I could not figure out a working answer: if I have to pass a list to a function (variable arguments) and after that iterate that list inside the function, how can I call the variable argument list again, pythonically?
01:14  Yhg1s: heltonbiker: I'm not sure what that means.
01:14  heltonbiker: Yhgls: I'll pastebin my short file
01:14  ssbr: Huh, Jeff Yaskin looks like a pretty cool guy.
01:14  ssbr: Yasskin*
01:14  heltonbiker: http://pastebin.com/jes67Fj2
01:14  infobob: http://paste.pocoo.org/show/275217/ (repasted for heltonbiker)
01:15  Xunnamius: Question: Was wondering if it's possible to launch a new console window from a "master" python console program that I could access (write to) using some sort of object reference. (Windows, python 2.7)
01:15  Xunnamius: Thought the subprocess module and Popen were my answer, but either I'm not using it right (very possible) or I'm barking up the wrong tree.
01:15  Yhg1s: heltonbiker: ok, so what's the question again? I see no variable arguments there.
01:16  heltonbiker: Yhgls: I want to eliminate fit, hand, const explicitly, so I can declare them at the function call from a local list
01:16  heltonbiker: fit, hand, const actually should be some vararg, but now I only know how to hard code them
01:17  Yhg1s: heltonbiker: I still don't understand what you mean. 'declare' what? Are you looking to pass variable arguments, or receive them, or do you just want to save on some typing?
01:17  Yhg1s: heltonbiker: if you want variable arguments, that would be '*args' instead of 'fit, hand, const', and you would just do 'for section in args:'
01:17  heltonbiker: hmmmm, that seems what I want
01:18  Yhg1s: Xunnamius: yes, that's not how pipes work. You can't really remote-control a console window easily.
01:18  Yhg1s: Xunnamius: what are you trying to do? Show some output in a separate window?
01:19  heltonbiker: so, when I call the function, and supposing I have list="fit", "hand", "const"    then I could call>>> function(*list)     ?
01:19  Yhg1s: heltonbiker: if you want to pass those three arguments, yes.
01:19  heltonbiker: would it be equivalent to >>> function("fit", "hand", "const")
01:19  Yhg1s: yes.
01:19  KirkMcDonald: (That's a tuple, not a list. But yes.)
01:19  heltonbiker: fine!
01:19  Yhg1s: see section 4.7 of the tutorial.
01:19  heltonbiker: great"
01:20  Xunnamius: Yhg1s: well... yes, I'd like it to go through an object to be colorized first (which would be the python program behind the second console window)
01:20  heltonbiker: sorry if I am too dumb, but I am not a programmer, only want to solve some domain problems (bicycle design) with this wonderful tool (python). Thanks Yhgls!
01:21  Yhg1s: Xunnamius: you'll have to use a GUI toolkit to create a window of your own, then, especially because the Windows console is pretty crap. For an interactive Python console, though, you don't need a separate process. See the 'code' module.
01:22  jeremyw: Let's say I have a dict and I want to merge it with another dict.  So "{'name': 'Jeremy'}" + "{'age': 29}" => "{'age': 29, 'name': 'Jeremy'}"
01:22  jeremyw: It's probably something simple.
01:22  lvh: jeremyw: dict.update
01:22  Yhg1s: jeremyw: d1.update(d2)
01:22  ssbr: jeremyw: there's the .update() method, which mutates a dict
01:22  lvh: jeremyw: That mutates in place, though
01:22  ssbr: if you want something more like list + operator, (not in-place), you'd start with an empty dict and update twice.
01:23  jeremyw: Fricking sweet.
01:23  KirkMcDonald: d1.update(d2) or d1
01:23  Xunnamius: Yhg1s: Would the GUI toolkit be necessary due to the colorization (I have the colorama module to handle that) or is it simply impossible for the two windows to communicate?
01:23  lvh: KirkMcDonald: You make me want to cry :-(
01:24  ssbr: [d1.update(d2), d1][1] # more general!
01:24  Yhg1s: Xunnamius: the "remote control" you want isn't possible, as far as I know.
01:24  lvh: KirkMcDonald: needs more itertools.chain, attrgetter("iteritems") and apply tbh
01:24  explodes: thanks guy
01:24  Yhg1s: Xunnamius: the command window is a separate program.
01:24  explodes: thanks guys
01:24 --- _Unode is now known as Unode
01:25  Yhg1s: ssbr: but it evaluates d1 needlessly!
01:25  Yhg1s: can't have that.
01:25  KirkMcDonald: Yhg1s: Not at all, given that update always returns None.
01:25  Yhg1s: KirkMcDonald: maybe not! If we're doing silly things, we might as well assume dict.update returns something else.
01:26  Xunnamius: Yhg1s: awww... on to plan B then. Thanks!
01:26  ssbr: Yhg1s: yeah, but that's exactly the case in which my solution works as intended. :P
01:26  kerio: it should return 42
01:26  _habnabit: Yhg1s, [d1.update(d2)] and d1
01:27  KirkMcDonald: Clearly what Python needs is an equivalent to C's comma operator.
01:27  kerio: (d1.update(d2), d1)[1]
01:27  atoi: what's the PEP standard? is it {'key' : 'value'} or {'key': 'value'} ??
01:27  KirkMcDonald: atoi: The latter.
01:27  ssbr: Clearly.
01:27  kerio: KirkMcDonald: TUPLE MOTHERFUCKER, DO YOU SPEAK IT
01:27  KirkMcDonald: kerio: Why yes, Python does ascribe meaning to the comma.
01:27  atoi: k
01:28  KirkMcDonald: kerio: But it does not have an equivalent to C's comma operator.
01:28  kerio: tuples are better :3
01:28  ssbr: I dunno, I kind of like C's comma operator...
01:28  ssbr: Backticks are free, we can use those! (and they look like a lifted comma, too!)
01:30  Yhg1s: just use (x, y)[-1] and make the compiler smart enough to evaluate but not store the other items in the tuple.
01:30  kerio: or use the ; operator
01:31  KirkMcDonald: Multiple statements? What nonsense!
01:31  Yhg1s: kerio: something else entirely. it separates statements, not expressions.
01:31  ssbr: ; isn't an operator and works differently from C's comma.
01:31  KirkMcDonald: heh
01:31  kerio: it still works ok
01:31  kerio: python golfing sucks anyway
01:31  Yhg1s: kerio: not in any case where you use C's comma operator.
01:31  ssbr: C's comma can be used so that you do something like "foo(a=2,b)". Arguably you should be doing "a=2; foo(b);", but what you can't do is "foo(a=2;b)"
01:31  ssbr: er, damn
01:32  ssbr: foo((a=2,b))
01:32  ssbr: or maybe not even there. I need a C compiler.
01:32  kerio: a, _ = 2, foo(b)
01:33  Yhg1s: the C comma operator is pretty useless in Python code, yes.
01:33  KirkMcDonald: It's not even all that useful in C.
01:33  Yhg1s: except in macros.
01:34  kerio: a = (2, foo(b))[0]
01:34  KirkMcDonald: Perhaps.
01:34  ssbr: kerio: the sensible version is always a = 2; foo(b) :(
01:35  kerio: def foo(*args, **kwargs): nonlocal a; a = 2; return foo(*args, **kwargs)
01:35  kerio: foo(b)
01:35  kerio: no, wait
01:35  kerio: meh, you know what i mean anyway
01:43  piero: Hi! I have a gtkentry (in which the user must type a date) with an "on_changed" signal.  What I need is a way to format a string var I get every time some key is pressed in a way I can change the entry value to automatically input bars "/" in the text entry. So, How can I make 14 change to 14/. 1410 to 14/10 (the user can paste the value), and 14/10 to 14/10/ ??
01:43  DiesIrae: Hi
01:44  DiesIrae: Gryllida
01:45  DiesIrae: Shit
01:45  DiesIrae: Nvm
01:45  DiesIrae: HI everyone
01:45  piero: Well, the problem is bigger than this, in really. Because 10/5 should automatically transform in 10/05/
01:46  piero: any str proof here?
01:49  ssbr: dash: is it just me or is Twisted (and in particular, t.w.p.irc) sort of inherit-y as opposed to compose-y?
01:52  ssbr: like, take a look at http://twistedmatrix.com/trac/browser/sandbox/exarkun/irc2.py for example (which is some gigantic monolithic subclass of the IRC protocol)
01:57  lvh: ssbr: composition is definitely better than inheritance
01:57  lvh: ssbr: but sometimes it's just way easier to inherit
01:58  lvh: ssbr: you could have like an IIRCBotBehavior or something
01:58  lvh: but it'd be pretty bogus separation, since you'd need a 2-way link to get to, eg, the nickname
01:59  lvh: ssbr: then again I don't know any python projects other than zope that do more interfacey things
02:02 --- Unode is now known as _Unode
02:03  ass: hello, what's the best way to asynchronously read from socket and from stdin?(windows). i'm now reading input in another thread, but i can't print text to console in the main thread.
02:03  lvh: ass: twisted
02:03  _habnabit: ass, use twisted.
02:07  _habnabit: dash, I just realized a thing that maybe exocet should deal with.
02:08  ass: lvh, _habnabit, thanks for the answer, but isn't there some native way? i don't want to install any addons to python.
02:09  _habnabit: ass, why not?
02:10  traceback0: I have some complex code that interacts with lots of services (mysql, etc) and I often write timing functions to detect bottlenecks or debug them when they are happening like this: http://dpaste.com/257562/ . My question is, is there a better way then putting all these time() calls all over the place--is there a more modular way of doing this?
02:11  ass: _habnabit: i don't like installing anything, i guess..
02:11  _habnabit: ass, you're going to have to overcome your irrational fears sometime.
02:11  rajesh: hi, noob qstn. - how can i pass a dict object to a method that's defined to take **kwargs?
02:11  Dulak: traceback0: you could use a decorator to wrap functions in your time() calls, but that will only help if you have really tight functions that do 1 thing
02:12  _habnabit: rajesh, method(**D)
02:12  traceback0: what do you mean by really tight?
02:13  rajesh: _habnabit: thanks.
02:13  lvh: ass: you said "best"
02:13  lvh: ass: that's the best, sorry
02:13  lvh: ass: writing your own async things is very annoying
02:14  _habnabit: (And frequently doesn't work.)
02:14  lvh: _habnabit: I was counting that under "annoying"
02:14  Dulak: traceback0: a function that does exactly 1 thing that wrapping in time() calls would be able to show issues with just one thing, like a single call to mysql, or a transformation on a single piece of data, etc
02:14  traceback0: ah yeah that's an issue
02:14  traceback0: it could call out further
02:14  traceback0: or i need to do it mid function
02:15  traceback0: I need a quick way to wrap a block of code
02:15  scvrory: how do you use lxml.etree.tostring to pretty print xml but with empty attributes formatted like this: <child></child>
02:16  Tim1357: Hey there. Does urllib2 support persistent HTTP connections?
02:16  Dulak: decorators wrap a function, which is what you need, break it down into smaller discrete functions.
02:16  Tim1357: In other words, when you make a request, does it open up a new connection, or does it reuse an existing one?
02:17  nosklo: Tim1357: it opens a new connection.
02:17  nosklo: Tim1357: there's no support for persistent connections, at all
02:18  ironcamel: can someone point me to nice documentation on decorators
02:18  Tim1357: nosklo: Thats too bad.
02:18  ssbr: ironcamel: http://www.python.org/dev/peps/pep-0318/#current-syntax
02:18  KirkMcDonald: Tim1357: httplib may be of interest.
02:19  ironcamel: ssbr: does that show how to define decorators?
02:19  ironcamel: doesn't look like it
02:19  ssbr: ironcamel: decorators are just callables.
02:20  ssbr: ironcamel: the way in which you define them is only constrained by the way in which they are used.
02:20  ssbr: So, read that. And then write a function.
02:20  ironcamel: ssbr: on one site, i saw that the decorator had an __init__ method
02:20  bencc: how do I transform a 2D matrix to a 1D matrix in opencv python interface?
02:20  nosklo: I don't think httplib doesn't support it either
02:20  ssbr: ironcamel: Sure. Classes are callable.
02:20  nosklo: er.. I mean, httplib doesn't support persistent connections either
02:20  ironcamel: ssbr: so decorator can be a function or a class?
02:20  _habnabit: ironcamel, any callable.
02:20  Dulak: ironcamel: any callable
02:21  ironcamel: how many args should the callable expect?
02:21  nosklo: a single argument
02:21  _habnabit: One, always.
02:21  ssbr: ironcamel: a decorator can be any callable object.
02:21  ssbr: ironcamel: class objects and function objects are both callable.
02:22  lvh: _habnabit: arbitrary decorator expressions pleaaaase :(
02:22  nosklo: ironcamel: the function being decorated is passed to the decorator, and whatever the decorator returns is bound to that function's name
02:23  ironcamel: i remember in the past decorators worked different when wrapping around methods vs functions
02:23  ironcamel: am i right?
02:23  _habnabit: Nope.
02:23  lvh: ironcamel: no
02:23  _habnabit: They've always worked exactly the same way.
02:23  lvh: ironcamel: decorators always work the same way regardless of what you apply them to
02:23  ironcamel: i remember i had to do something different, it was a pain
02:23  Habbie: ironcamel, perhaps you remember back when the @ syntax did not exist?
02:23  ironcamel: i wrote a decorator to just log the args
02:23  _habnabit: I'm going to guess you were hallucinating.
02:23  ironcamel: and had to write 2
02:24  ironcamel: one for functions, and one for methods
02:24  lvh: ironcamel: yeah, that ain't right
02:24  lvh: ironcamel: they would work fairly identically
02:24  lvh: ironcamel: perhaps you are thinking of writing a decorator inside a function that returns a decorator
02:25  lvh: @log(*argNames) for example
02:26  nosklo: nah, I don't want arbitrary decorator expressions
02:26  nosklo: it would allow lots of @lambda
02:26  papna_: qwerty1793: Sweet.
02:28  ssbr: nosklo: @d.get(BAR).register
02:29  qwerty1793: papna_: hmm strange result, theres a section where it does a lot of file IO, so I moved the files to a RAMdisk and now it runs slower?!
02:30  qwerty1793: like a good 7-10% slower
02:31  nosklo: ssbr: sure
02:31  nosklo: qwerty1793: perhaps you're hitting the swap?
02:31  ironcamel: guys, i dug out my code where i wrote 2 seperate decorators for logging methods vs functions :)
02:32  qwerty1793: nosklo: its only a 40MB RAMdisk and there's over 1GB of RAM still free
02:32  ironcamel: http://fpaste.org/8wnX/
02:33  astruasdh: I'm using psycopg2 to access postgresql, and I'm geting an error related to "pg_hpa.conf". Is it needed to have pg installed in the machine with the .py, or this message was for the server's pg?
02:34  Habbie: astruasdh, i'm guessing it's _hba, not _hpa, and it should be about the server
02:34  astruasdh: ty!
02:37  cdwillis: why does this not work, print "He's got %s eyes and %s hair." % {my_eyes, my_hair}
02:37  _habnabit: Define 'not work'
02:37  nosklo: cdwillis: it works
02:38  nosklo: cdwillis: are you trying to produce a syntax error?
02:38  nosklo: you put two %s but only one object at the right
02:38  KirkMcDonald: cdwillis: You want a tuple.
02:38  cdwillis: python says it is a syntax error, invalid syntax
02:38  timemage: cdwillis, maybe you meant () not {} ?
02:38  Habbie: cdwillis, if i have to guess, try ()
02:38  nosklo: cdwillis: {} generates a single set
02:39  cdwillis: ah, thats it. () not brackets. I guess my eyes are a little strained haha
02:40  cdwillis: thanks guys
02:42  Dulak: oh nice codepad.org has a python subdomain for running code examples.
02:43  bmoloney: if I have private (prefixed with _) helper methods, is it better to pass information through arguments or private members (again prefixed with _)?  Or is it just a personal preference?
02:44  _habnabit: bmoloney, um, parameters
02:45  _habnabit: bmoloney, what happens if you try to call the same method again before it returns the first time?
02:47  bmoloney: _habnabit: I see how that could be problematic in some cases.  In my case I was getting large argument lists for some helper methods, and many of those arguments were read only
02:48  _habnabit: bmoloney, make smaller methods
02:49  bmoloney: _habnabit: I do, but sometimes a small piece of functionality needs a significant amount of info from the parent function
02:51  whalesalad: hey everyone.. is there a simple way to convert an epoch into a datetime?
02:51  bmoloney: _habnabit: but i suppose that betrays a problem in my data modeling
02:51  _habnabit: whalesalad, datetime.datetime.fromtimestamp
02:51  whalesalad: _habnabit: thanks a lot, I'll give it a spin
02:55  whalesalad: _habnabit: thanks, that did the trick!
02:56 --- coderanger__ is now known as coderanger
02:58 --- coderanger__ is now known as coderanger
03:01 --- lv is now known as Aphelion
03:20  didi: Is it possible to index a matrix made of lists using a tuple?
03:20  _habnabit: Nope.
03:20  _habnabit: Lists only want numeric indexes.
03:21  didi: _habnabit: Thanks.
03:40  ezzieyguywuf: is there an easy way to turn all keys from kwargs into variables with their respective values?
03:41  papna_: ezzieyguywuf: No.
03:41  papna_: ezzieyguywuf: That doesn't make any sense.
03:41  ezzieyguywuf: I am currently just doing myvar = kwargs.get('myvar',default_value)
03:41  ezzieyguywuf: I wanna know if there is a builtin way to do this
03:41  papna_: ezzieyguywuf: put myvar=default_value in the function declaration.
03:41  papna_: ezzieyguywuf: No, there isn't. That's not a feature we would want.
03:41  ezzieyguywuf: papna_: I'm sure if I thought about it I could imagine why :-P
03:42  ezzieyguywuf: I don't wish for it to be in the function declaration because there are soooo many arguements that the declaration is getting cumbersome
03:42  papna_: ezzieyguywuf: I can't imagine any place that would have in a good design.
03:42  ezzieyguywuf: maybe there is a better implementation for my code actualy....
03:42  papna_: ezzieyguywuf: A long function declaration is fine.
03:42  papna_: s/declaration/definition.
03:43  ezzieyguywuf: ttp://paste.pocoo.org/show/275239/ thats my code right now
03:43  papna_: text transfer protocol--for all your chillaxed text transfering
03:44  ezzieyguywuf: heh, sorry, missing that leading h
03:44  papna_: ezzieyguywuf: If I add it, I still can't load your link.
03:44  papna_: Oh. There it goes.
03:45  papna_: ezzieyguywuf: Put those things in the actual function definition.
03:46  papna_: ezzieyguywuf: Also, do you want most of them to default to None, or ought they be present?
03:46  ezzieyguywuf: papna_: I want them to be different based on what is being plotted
03:46  papna_: What?
03:47  ezzieyguywuf: I've decided to merge all my plot_* into one plot_any and conditionally set the parameters to pass to create_plot
03:50  kancha: hi
03:51  kancha: http://paste.pocoo.org/show/275241/
03:51  kancha: what is the problem in this program
03:51  _habnabit: Other than the inconsistent indentation?
03:51  andar: yea, wow.. that's a bit ugly
03:51  papna_: kancha: Indentation errors.
03:51  papna_: kancha: Name errors.
03:52  kancha: indentation
03:52  kancha: what is that
03:52  papna_: kancha: Suboptimal naming.
03:52  _habnabit: :V
03:52  andar: haha
03:52  papna_: kancha: docs.python.org/tut
03:52  kancha: what is the problem in the progrma
03:53  kancha: in which line
03:53  andar: all of them
03:53  kancha: lol
03:54  kancha: andar:
03:54  kancha: can you tell me how to do
03:54  kancha: in this program
03:55  kancha: the error it says as
03:55  kancha: TypeError: __init__()
03:56  _habnabit: I'm going to guess that's not the complete error.
03:59  kancha: _habnabit: thanks
03:59  kancha: I am really new in python
04:00  _habnabit: kancha, docs.python.org/tut
04:00  kancha: so i am trying to correct me myself
04:00  kancha: ya I will go through that
04:00  kancha: _habnabit: can you tell what is the error exactly
04:01  papna_: kancha: You've given inconsistent and unrealistic information, and you've shown many errors.
04:01  kancha: I think error is in construtor
04:02  kancha: in methed __init__ itself
04:02  kancha:  I just want to publishe "hi" through class
04:02  _habnabit: 19:00:09 < _habnabit> kancha, docs.python.org/tut
04:03  kancha: ok
04:06  alket: Is there any IDE for python like MonoDevelop visual designer ?
04:07  papna_: alket: You're asking if you can build GUIs graphically?
04:07  dpn`: alket, it depends on what GUI toolkit you want to use
04:07  papna_: alket: Each GUI toolkit has something popular for that.
04:07  alket: papna_, yes
04:07  papna_: For example, using pygtk you'd use glade.
04:07 --- peshalto_ is now known as peshalto
04:07  alket: dpn`, GTK+ of course
04:07  dpn`: alket, you want glade then
04:07  alket: papna_, i tried glade but i don't know who to integreate it within ide
04:07  papna_: alket: Nope.
04:08  alket: like MonoDevelop has for Mono
04:08  dpn`: alket, there was something, an extension for glade and pygtk
04:08  dpn`: i can't remember the name
04:10  dpn`: alket, something like this: http://sane-pygtk.sourceforge.net/glade2py.html
04:11  dpn`: alket, but anyway, using tight integration like that generally goes against python principles
04:11  tomas_: this might sound stupid, but how do I add a dictionary inside another dictionary without overwriting existing entries?
04:11  Brend: tomas_: What do you mean?
04:11  tomas_: with list I have list.append(entry)
04:11  dpn`: tomas_, for k,v in d1.items(): if k not in d2: d2[k] = v
04:12  tomas_: is there something like append in dictionary?
04:12  alket: dpn`, thank you
04:13  dpn`: tomas_, there is setdefault
04:13  dpn`: d.setdefault(key,item)
04:13  tomas_: dpn`: cheers I think I should add dictionary inside the list
04:13  Brend: temp = newDict.copy(); temp.update(origDict); origDict = temp
04:25 --- PythonNub is now known as HellNub
04:25 --- HellNub is now known as PythonNub
04:27 --- PythonNub is now known as Your_Mom
04:27 --- Your_Mom is now known as YourMother
04:27 --- YourMother is now known as Your_Mother
04:28 --- Your_Mother is now known as PythonNub
04:40  amitz: What propery of python makes it better in meta-programming than java?
04:41  _habnabit: Less boilerplate
04:41  _habnabit: More expressive
04:41  papna_: You create anything where you want when you want it with its normal syntax.
04:41  papna_: In Python, we call meta-programming "programming".
04:43 * amitz is digesting
04:44 --- lv is now known as Aphelion
04:45  ssbr: papna_: except when we don't.
04:45  ssbr: amitz: mostly Java can do anything Python can w.r.t. "metaprogramming", except where it can't. But doing it in Java takes a lot more work.
04:46  ssbr: (I say mostly because a large category of things involving metaclasses are very impractical or impossible in Java, same with decorators onless you do a really weird functor composition thing, and then it won't work with any functions other than yours, and...)
04:49  amitz: my concern in python is that it's not moron resistant, due to dynamic typing (run time error instead of compile erro) and difficulty to limit the ways to use a class. Is there any python keyword I can google to overcome these problems? (obviously my python is really lacking so any help is appreciated)
04:50  _habnabit: amitz, static typing doesn't prevent compile-time errors
04:50  _habnabit: errrrrr
04:50  _habnabit: amitz, static typing doesn't prevent runtime errors.
04:50  amitz: I mean, the compile time error reminds people of mistakes.
04:51  _habnabit: amitz, and the 'problems' that static typing 'fixes' are accomplished in python with unit tests.
04:51  _habnabit: amitz, which java code should have anyway.
04:52  amitz: I meant, with dynamic typing, some errors are discovered on run time, where as with static typing, some errors are discovered at compile time. But good point about unit test anyway, which should be mandatory practice.
04:54  papna_: Java is not moron resistant.
04:54  papna_: AT ALL.
04:55  _habnabit: (Especially with, say, Eclipse. Normally you have to bang on your code until it compiles by hand; eclipse will bang on it for you!)
04:56  ssbr: amitz: you have presented a dichotomy that isn't
04:57  ssbr: amitz: it's always the case that some errors are discovered at compile time, and some at run-time, unless your language syntax is exceptionally strict or tolerant
04:58  ssbr: it's just that for Python, the ratio of run-time to compile-time errors is bigger.
04:58  ssbr: (there are no type-related compile-time errors in python)
04:58  p3rror: hello
04:59  p3rror: please when i run urllib.request that take a while
04:59  p3rror: and i see that in 2.6 python version that a new parameter was added
04:59  p3rror: to the urllib.request function
05:00  p3rror: but that not work for me as fine as i want
05:00  amitz: _habnabit: good point of eclipse banging it for me.
05:00  p3rror: i'm looking to a timeout paramaeter
05:01  p3rror: please can you help on that
05:01  _habnabit: amitz, hint: I wasn't praising eclipse
05:01  papna_: p3rror: You want timeout functionality pre-2.6? Or what?
05:02  ssbr: p3rror: what's wrong with the timeout parameter?
05:02  amitz: yeah but it gets the jobs done anyway :-P
05:02  _habnabit: amitz, yes, that's the issue
05:02  p3rror: papna_, ssbr , will it does not work
05:02  ssbr: p3rror: what do you mean "it does not work"?
05:02  ssbr: does it raise an exception?
05:03  ssbr: ...?
05:03  p3rror: ssbr, it does not break the session
05:03  p3rror: i'm still waiting even the remote server return a not found
05:05  p3rror: ssbr, there are no exception
05:06  ssbr: p3rror: what kind of connection are you using?
05:08  x0rs: is it possible to for loop through a dictionary?
05:09  _habnabit: Anything is possible.
05:09  papna_: x0rs: Of course.
05:09  x0rs: papna_: is the syntax much different than a list or would it be something like for i in dict.values(): ?
05:10  papna_: x0rs: `for k in d:` will go through the keys. dicts iterate over their keys.
05:10  papna_: x0rs: The nor common case is `for key, value in d.iteritems()`.
05:12  x0rs: papna_: okay, thanks very much =)
05:14  x0rs: papna_: excellent explanation, working great now... crazy how using k instead of i can help understand the concept
05:16 --- Soulneko is now known as dotSoulneko
05:16 --- dotSoulneko is now known as Soulneko
05:18  didi: How would I read single characters input from the user?
05:19  talented: didi, do you mean only accepting a single character? or reading each character from possibly a string they enter?
05:20  didi: talented: A single character, indeed.
05:21  talented: what is it's purpose didi?  Just wondering if suggesting a way to do it would be better if handled by event capturing instead
05:22  didi: talented: Sure. I am making a little terminal game and I would like to control the character using WSDA keys.
05:23  _habnabit: didi, are you using urwid?
05:23  didi: _habnabit: No. Is it a library?
05:23  _habnabit: didi, yes. You should use it.
05:23  talented: handling it by events would be better than waiting on user input then
05:24  didi: _habnabit: Thank you, I will take a look at it. But for now, I would like it to be very primitive.
05:24  didi: talented: How would I do that?
05:24  _habnabit: didi, man 2 fcntl
05:24  _habnabit: didi, good luck
05:24  didi: _habnabit: Thank you.
05:25  _habnabit: didi, (seriously, use urwid.)
05:25  talented: didi, _habnabit's suggestion of using urwid would be better in this case, as it handles the looping process
05:26  didi: talented: I will read it (unfortunately the page is not loading now). But as my game is turn based, I think a simple while True: read_input() draw() will make it.
05:30  talented: my suggestion wouldn't be compatible for some platforms, sys.stdin.read(1) but it still relies on user pressing enter, also this is based on a single-byte char, not unicode
05:32  didi: talented: Hum. Yeah, the "pressing enter" part is a problem. Let's hope "urwid" server comes to life.
05:33  talented: hmm... curses can handle what you want too, but it's platform specific too
05:34  _habnabit: urwid is way, way better than curses.
05:34  tos9: curses is pretty terrible
05:34  Gryllida: python-setuptools <- where does it put installed applications by default?
05:34  lowks: hi
05:34  Gryllida: hi
05:34  didi: talented: Funny, I was at "curses" page. The platform is not a issue now.
05:34  lowks: does 'python setup.py develop' now delete conflicting packageS?
05:35  lowks: i mean the standard distutils?
05:35  Jerub: develop isn't in standard distutils
05:35  Jerub: that's an extension
05:36  lowks: that means that develop is most probably my own extension right ?
05:36  _habnabit: Gryllida, applications?
05:36  _habnabit: Gryllida, like what?
05:36  Jerub: lowks: i don't know what you're saying
05:36  Gryllida: _habnabit: like, I tried to get eir via easy_install
05:37  lowks: Jerub, ermm it's an official extension of distutils?
05:37  _habnabit: Gryllida, why didn't you use your package manager?
05:37  Gryllida: _habnabit: 'Trac 0.11 is already the active version in easy-install.pth' and no idea where that is; I don't think eir is in the repos.
05:37  Gryllida: _habnabit: (eir == trac, eir is the new name)
05:37  Jerub: lowks: no, it's part of setuptools i think.
05:38  _habnabit: Gryllida, what platform
05:38  Gryllida: _habnabit: ubuntu
05:38  Jerub: there are no official extensions of distutils
05:41  lowks: Jerub, ok
05:44  lowks: doesn't 'python setup.py develop' delete conflicting packages anymore ?
05:44  lowks: i see the --delete-conflicting but it's said not to use that anymore
05:44  lowks: but
05:45  lowks: my upgrade chokes of packages
05:45  lowks: eg: error: Installed distribution Paste 1.7.1 conflicts with requirement Paste>=1.7.2
05:47 --- cnc-away is now known as cncfanatics
06:02 --- cncfanatics is now known as cnc-away
06:06  slestak: how can I override the compiler that pip uses when compiling extensions?
06:07  slestak: i see some notes about --install-option="build --compiler=gcc" but this does not execute teh build
06:08  slestak: this gets me every time
06:08  slestak: I have exported CC=gcc
06:23  esotericbyte: Any opinions about pycrust?
06:23  dash: man, is that still around?
06:25  dash: i doubt anyone uses it
06:25  esotericbyte: i believe it is installed as part of wxWindows as a tool for developing and debuging gui apps with the tool kit
06:26  ssbr: wxWindows? Man, is that still around?
06:26  ssbr: ;)
06:30  eoss: if this function takes a dictionary object how would i use the keys() method to print an ordered dictionary and value pair
06:30  _habnabit: pprint.pprint
06:39  james_027: hi all, I have a list for tuple of 3 elements ... the first and second element are string and the 3rd is integer. any shortcut to get the sum of the 3rd elements?
06:39  dash: james_027: waht do you mean by "sum"?
06:40  ssbr: sum(zip(yourlist)[2])
06:41  ssbr: er
06:41  james_027: dash: hi, like [('apple', 'banana', 3), ('orange', 'mango', 4), ('melon', 'berry', 1)]  i want 3+4+1
06:41  ssbr: zip(*yourlist)
06:41  dash: james_027: a loop
06:42  james_027: will sum(zip(yourlist)[2]) works?
06:42  dash: have you trid it?
06:42  dash: e
06:42  james_027: let me try :)
06:44  james_027: doesnt work
06:45  dash: do you understand why?
06:45  james_027: zip is not needed
06:45  james_027: use map?
06:45  _habnabit: hahahah
06:46  james_027: use map to get the 3rd element of the tuple?
06:46  _habnabit: james_027, no. Also, guessing isn't good for you.
06:46  james_027: _habnabit: what should be done?
06:46  dash: james_027: write a loop
06:47  _habnabit: sum(x for _, _, x in L)
06:47  james_027: dash: so no short cut ? :)
06:47  dash: james_027: not sure what you mean
06:47  james_027: _habnabit: thanks
06:53  ssbr: People don't read what I say.
06:53  ssbr: zip(*yourlist)
06:53  james_027: ssbr: what does * do?
06:54  ssbr: unpacks a list into the arguments.
06:54  ssbr: f(*[a, b, c]) is equivalent to f(a, b, c)
06:54  Brend: How come no-one has suggested zip(*yourlist)?
06:54  ssbr: I did.
06:54  Jerub: yerah, zip(*hislist) would've worked
06:54  Jerub: i wonder why none of you jerks mentioned it.
06:54  dash: james_027: read section 4.7.4 in the tutorial.
06:54  Brend: Seems kinda weird.
06:54  ssbr: god damn you both
06:54  james_027: wow the zip(*list) is like magic :)
06:55  james_027: sorry i am beginner
06:55  Brend: You're welcome james!
06:55  Brend: Glad Jerub and I could help
06:55  Jerub: james_027: no worries mate.
06:57  ssbr: You know what bothers me? _, _, foo = bar works, but def bar(_, _, foo) is a SyntaxError.
06:58  Jerub: ssbr: philistine
06:58  Jerub: you always attach the semantic data to what you're throwing away as to what it is.
06:59  Jerub: def bar(_money, _currency, number_of_notes):
07:05  ssbr: I do what I want!
07:05  Jerub: what's the correct way to use __setstate__ so that when an object is unpicked it will have an extra attribute?
07:06  dash: Jerub: Cut yourself.
07:06  ssbr: Jerub: WHY
07:06  dash: http://www.penny-arcade.com/comic/2005/04/06/
07:06  Jerub: oh here.
07:06  Jerub: ssbr: persistent on disk object storage combined with needing new attributes!
07:07  dash: Jerub: this is why you use axiom.
07:07  Jerub: actually, we're moving to our own tstuff
07:08  ssbr: oh man, that comic is old
07:08  ssbr: penny arcade has been around for over a decade! weird!
07:09  dash: ssbr: yeah they're married with kids now
07:09  dash: it's a super bizarre world we live in!
07:15  tomas_: hi, I'm scraping data from rss feed and sorting it in lists, dictionaries and whatnot ending up with everything sorted in one variable. I'm in the process of extracting stuff from that varible and putting it where it needs to go. Every time I make a mistake in my code I need to wait for rss feed to get downloaded and processed in that large variable. My question: is there any way of saving that large variable in memory so I can use it in another script?
07:16  dpn`: tomas_, why aren't you using feedparser?
07:16  tomas_: dpn`: I am
07:16  tomas_: I'm parsing output from feed parser (:
07:16  tomas_: it's a long story
07:16  dpn`: tomas_, you can use pickle if you want, it's not the best way, but it'll work for what you want
07:16  dash: tomas_: i'd put it in sqlite.
07:16  dpn`: or store it as a json object, if the data in it object is simple
07:17  tomas_: mh sqlite you say...
07:17  tomas_: this might work
07:18  tomas_: thanks I'll try that
07:18  Jerub: bah!
07:18  Jerub: durus doesn't like __getstate__
07:19  Jerub: and threading.Lock objects can't be pickled
07:19  dash: Jerub: Durus? Sheesh
07:20  dash: Jerub: Haven't you learned _anything_ from us
07:20  Jerub: dash: don't judge me man.
07:20  Jerub: dash: yeah.
07:20  Jerub: i learned you made the same mistakes.
07:20  Jerub: at around the same time
07:20  dash: Jerub: you mean "2003"?
07:20  Jerub: dash: yes.
07:20  Jerub: well, no.
07:21  Jerub: the heritage of this code hits 2002.
07:21  Jerub: maybe 2001.
07:21  dash: there was that one time we wrote an orthogonal persistence layer for python that didn't use pickle
07:21  dash: that woulda been 2002, yeah.
07:21  Jerub: just installing svn so i can figure out when this was done
07:25  Jerub: dash: okay, there's no cvs history before 2004, which is the initial commit of that subproject
07:26  Jerub: which certainly existed before '04
07:26  dpn`: wtf are you doing Jerub ?
07:27  dpn`: oh. old code.
07:27  dpn`: D:
07:27  Jerub: i was compelled to spelunk
07:28  dpn`: Hope you remembered your safety line and helmet
--- Log closed Thu Oct 14 08:39:21 2010
--- Log opened Thu Oct 14 09:03:12 2010
09:03 --- Users 688 nicks [0 ops, 0 halfops, 0 voices, 688 normal]
09:04 --- Channel #python was synced in 80 seconds
09:05 --- anyoneofus|away is now known as anyoneofus
09:05  xro: Yhg1s>, yes the '?' was because of the mysql client, but i have latin-1 chars in one of my column.... thanks for your help
09:11  kancha: hi
--- Log closed Thu Oct 14 09:18:53 2010
--- Log opened Thu Oct 14 12:55:14 2010
12:55 --- Users 718 nicks [0 ops, 0 halfops, 0 voices, 718 normal]
12:56 --- Channel #python was synced in 79 seconds
12:58 --- cncfanatics is now known as cnc-away
13:01  naxa: when I'm tryign to redirect stdout to a file on win32, like `python sample.py >output.txt` i get "close failed: [Errno 9] Bad file descriptor". i debugged with `sys.stderr.write("debugmsg")` and i see that the whole script runs OK only when it exits, i get this error. why is that? i'm on 2.5
13:01  naxa: the resulting `output.txt` is 0 bytes long
13:03  grundic_c: Hello! Has anybody worked with superfastcgi module?
13:03  christopher22: hello i'm relatively new to lambda functions but this one I wrote should convert a boolean to either True or False.. depending on it's initial value.. I was wondering if you Python people find this way of doing it correct: http://dpaste.com/257736/
13:04  Brend: christopher22, no.
13:04  Brend: christopher22, firstly that's going to give True for every value except False ... including None, zero, empty lists and dicts, and objects which implement __nonzero__ and thereby claim to be false
13:04  christopher22: Brend: what would the correct way of doing this theb?
13:05  Brend: christopher22, secondly, there's bool()
13:05  Brend: And thirdly, there's almost never a good reason to explicitly convert things to bools anyway
13:05  Brend: Since every object has a truth value implicitly
13:06  christopher22: Brend: what would be the correct way of doing it then?
13:06  Brend: bool().
13:06  Brend: And if you really want to rewrite bool() yourself, then just: lambda x: True if x else False
13:06  Brend: (Which is going to call bool(x) implicitly anyway)
13:07  ruxpin: I need to convert an integer to a string with fixed amount of leading zeroes. how should I formulate '"%i" % myint'?
13:07  christopher22: ok but I would convert a boolean value.. so if the variable (boolean type) is True.. I would like to change it to False.. and vice versa if it's already False
13:07  Brend: Oh!
13:07  Brend: "not x"
13:07  Brend: (Sorry, I'm tired)
13:07  christopher22: Brend: no problem.. thanks for helping out
13:09  naxa: ruxpin: ("%s"%4).zfill(10)
13:09  christopher22: Brend: thanks.. it's working perfectly toggleBoolean = lambda x: True if not x else False
13:09  Brend: christopher22, how about: category.active = not category.active
13:10  temp01: ruxpin: "%06d" % myint
13:10  naxa: that's a nicer way to do it :)
13:11  ruxpin: also "%0*i" % (6,myint) # where 6 is the size of string
13:12  ruxpin: temp01: your method seems to be the best
13:12  christopher22: Brend: omg you gotta be joking.. i'm thinking way to complicated about this.. thank you brend for the third time today
13:12  naxa: doh :P
13:13  VladDrac: the * format makes sense when the amount of padding is variable itself, else use %06d
13:13  Vinetou: hello
13:14  Vinetou: def trunc(f, n):
13:14  Vinetou:     '''Truncates/pads a float f to n decimal places without rounding'''
13:14  Vinetou:     slen = len('%.*f' % (n, f))
13:14  Vinetou:     return str(f)[:slen]
13:14  shylent: boo, use pastebin
13:14  Vinetou: please tell me what does the %.*f do?
13:15  Brend: That's a pretty hilarious function right there
13:15  shylent: ..yeah
13:16  Vinetou: why gillaroous?
13:16  Vinetou: is it not correct?
13:17  Vinetou: syntactically i mean
13:17  Vinetou: hillarious*
13:17  neumaennl: Vinetou: you'd rather tackle this with string formatting
13:17  Vinetou: i know
13:17  neumaennl: Vinetou: the function does an easy thing in a complicated way
13:17  Kylarr: (hilarious has one 'l', just saying)
13:17  Vinetou: i just wanna know what does the %.*f do
13:17  mukul: <mukul> http://paste.ubuntu.com/513030/ Can someone help me understand in understanding this code a bit. I'm new to python and pygtk
13:18  mukul: <mukul> The code is for grayscaling and is used in paint. I want to implement a similar thing for inverting colors.
13:18  Vinetou: so... what does this format specifier do?
13:18  Vinetou: is using a star * before a format specifier used for unpacking data?
13:18  shylent: Kylarr: you forgot to mention, that 'hilarious' starts with 'h', rather than with 'g'
13:19  Kylarr: shylent, yeah, but they corrected that at least.
13:19  shylent: ahh, yes
13:20  naxa: Vinetou: it converts float to string and makes sure that max * amount of decimals used.
13:20  neumaennl: I didn't know this was #spelling
13:20  Vinetou: max * ??
13:20  Vinetou: so how many is max *?
13:20  Kylarr: Vinetou, "%.*f" % (6, 3.52) is the same as "%.6f" % (3.52)
13:20  naxa: Vinetou: eg "%.*f"%(2,32.34535) outputs "32.35" becouse * == 2
13:20  Kylarr: and the 6 there means the number of digits to put after the decimal.
13:21  Vinetou: i get it
13:22  Vinetou: so in the function i found on the net and spammed with it here, uses the user's value (provided with the parameter n) instead of a hardcoded one
13:22  Vinetou: ?
13:24  Kylarr: I'm not sure what you mean about spamming, but the rest sounds correct.
13:24  Kylarr: n is the number of digits to put after the decimal point.
13:27  Vinetou: so whatever value is put to argument 'n' in the function trunc(), that will be applied where the star is, so if used like  trunc(2, 3.123)   then the function would make %.*f as %.2f
13:27  Vinetou: right?
13:27  Kylarr: Yes.
13:27  Vinetou: great
13:27  Vinetou: thank you
13:28  Vinetou: another question is regarding the truncating using some built-in method
13:28  Vinetou: does one exist?
13:28  Kylarr: round() maybe.
13:28  Vinetou: i know about the round() method, but i am interested in some truncating method
13:29  Vinetou: basically, i need to chop off the .0 part if the function returns that float value
13:29  VladDrac: truncating mostly makes sense with strings
13:29  VladDrac: that's int() basically
13:29  Vinetou: if the function returns 2.2, that's fine
13:30  Vinetou: but if 2.0, then i want the output to be 2
13:30  VladDrac: you want 2.0 to be 2, and 2.2 to be 2.2 ?
13:30  Vinetou: without the .o part
13:30  Vinetou: VladDrac yes
13:30  confluency: Vinetou: I suggest multiplying bu an appropriate power of 10, using int() and then dividing.  i think that's the least horrible way of doing this.
13:30  confluency: Oh, wait
13:30  confluency: Never mind.  You're not doinf what I thought you were doing.
13:31  confluency: Do you perhaps want %g?
13:31  Vinetou: i have one solution
13:31  confluency: Is this for printing the numbers out?
13:31  naxa: Vinetou: well this is not the nicest but if string.endswith(".0"): string = string[0:string.find(".0")] # :))
13:31  Vinetou: but it's a pseudo-code solution
13:31  Vinetou:             if calculatedYears % 1 == 0:
13:31  Vinetou:                 pass
13:31  Vinetou:                 # truncate(calculatedYears)
13:31  VladDrac: % 1 ?
13:32  temp01: naxa: you could do string = string[0:-2] there
13:32  VladDrac: anyway, %g does seem to do what you want, didn't know that one
13:32  Vinetou: every float that ends in .0 is going to result in a 0 remainder
13:32  naxa: temp01: true
13:33  Vinetou: i tried with %g, but then i don't have the option of having just one decimal point
13:33  __rob: hello
13:33  confluency: Vinetou: what do you actually want?
13:33  __rob: anyone know how I can get a blocking read on a file
13:33  Vinetou: i want to format floats in a certain way
13:33  __rob: but not return an empty string if EOF is reached
13:33  confluency: What way, exactly?
13:34  naxa: VladDrac, Vinetou: "%g" is perfect and new for me, too
13:34  VladDrac: Vinetou, %.2g ?
13:34  Vinetou: i want the float to round to one decimal, so 1.256789 to be 1.3
13:34  Vinetou: and if the float is, say, 1.0, i want to be displayed as 1
13:35  Vinetou: is there a format specifier in Python that does this?
13:35  naxa: Vinetou: first round, then chop: "%g"%round(my_float,1)
13:35  __rob: it rounds up anyway
13:35  naxa: i don't know about format specifier, maybe the others.
13:35  confluency: What naxa said.
13:36  Vinetou: the rounding is done by the 'g' format specifier
13:36  confluency: (Also please ignore my multiplying, dividing and int(); I should have read what round() does properly. ;))
13:36  Vinetou: i don't need rounding if i use the 'g' solution
13:36  VladDrac: "%.2g" % 1.2567, "%.2g" % 10000
13:36  Vinetou: ok i'll rephrase my question
13:37  VladDrac: add a . somewhere
13:37  confluency: Vinetou: round() will round it to one decimal place; then %g witll print the decimal place if it's not 0 and not print it if it is 0.  Which sounds like exactly what you want.
13:37  Vinetou: how to check whether a float is a 1.0, 2.0, 3.0 and so on   ?
13:37  naxa: but "%.2g" tends to output in e+ format
13:37  __rob: that %g doesn't seem perfect
13:37  Vinetou: naxa exactly
13:38  cosmodad: can anyone using nose tell me why my application's log messages using the logging module won't show up during test runs?
13:38  confluency: VladDrac: %.2g doesn't do anything; it's identical to %g, as far as I can see.
13:38  __rob: print "%.3g" % 1.2555
13:38  __rob: print "%.3g" % 1.255
13:38  Vinetou: and i don't want e notation for the users of my app to see
13:38  naxa: Vinetou: my_float == round(my_float,0)
13:38  __rob: they should both round up to 1.26 ?
13:38  __rob: only the first does
13:38  Alberth: __rob: disk IO is always nonblocking afaik at unix, see also read(2)
13:38  __rob: bit dodgy
13:38  VladDrac: confluency, "%.2g" % 1.234 vs "%g" % 1.234
13:38  Vinetou: how to check whether a float's value after the dot is a 0
13:38  Vinetou: ?
13:38  kancha: Alberth : can you go with this link http://paste.pocoo.org/show/275364/
13:39  confluency: VladDrac: Ah, I see.
13:39  naxa: Vinetou: if(my_float == round(my_float,0)): print "your float is an int"
13:40  Kylarr: __rob not really. 1.55 is close to 2 than 1. 1.5 is exactly half way between 2 and 1.
13:40  confluency: Vinetou: if you really want to, you can check if int(yourfloat) = yourfloat
13:40  kancha: http://paste.pocoo.org/show/275364/
13:40  naxa: Vinetou: or my_float == int(my_float)
13:40  Kylarr: I guess Python just decides to round down instead of up.
13:40  Vinetou: i want it to be readable and Pythonic
13:40  kancha: what is the problem in this code
13:40  Kylarr: closer*
13:40  __rob: Kylarr, no
13:41  __rob: 1.255 rounded to 2 decimal places
13:41  __rob: is 1.26
13:41  Vinetou: naxa your version would chop pff the .1 .2 .3 .4 numbers as well
13:41  Vinetou: off*
13:41 --- cnc-away is now known as cncfanatics
13:41  Kylarr: __rob, it's half way between 1.25 and 1.26.
13:41  __rob: 5 rounds nds up
13:41  confluency: Vinetou: these are tests to see if your float is an integer.
13:41  Alberth: kancha: line 3: *always* dervice from 'object':    class Ran(object):
13:41  __rob: always
13:42  naxa: Vinetou: you mean the `if my_string.endswith(".0"): ...` I think that's definietly won't
13:42  __rob: pre-school maths
13:42  Kylarr: It's exactly in the middle. There's no real right or wrong way to round.
13:42  bahamas: kancha: Ran().num()
13:42  Vinetou: kancha as Alberth said... you wanna use new-style classes
13:42  Kylarr: People often round up, yes. Some people round up if the number is even and down if it's odd. Some people round down.
13:42  __rob: Kylarr
13:42  naxa: Vinetou: please help me what is "my version" i'm lost a bit :)
13:42  __rob: look at what I pasted above
13:42  Vinetou: in math, a number .5 is always rounded up
13:43  __rob: if 1.2555 rounds to 1.26
13:43  Vinetou: so Python is mathematically correct
13:43  __rob: why does not 1.255 ?
13:43  Kylarr: Because the extra 5 makes the number above half way
13:43  Vinetou: __rob it ought to
13:43  __rob: Vinetou, with what I pasted above ,ptyhon is wrong
13:43  Alberth: kancha: line 9: you inherited from 'Ran' at line 7, so you can simply call the function 'self.rand()'
13:44  __rob: I guess actually, but 0.05 if i asked to be rounded to 1 decimal place
13:44  __rob: should be 0.01
13:44  __rob: 0.1
13:44  Vinetou: round(1.255) == 1.0
13:44  kancha: bahamas: thanks
13:44  Alberth: kancha: line 5: you assign to 'num', but don't store it, so it gets lost. I suggest you add "return num" below line 5
13:44  kancha: Binetous: thanks
13:45  confluency: Vinetou: you need a ,1
13:45  kancha: Alberth: just a min
13:45  Vinetou: i think you need to tell round() how many decimal places to round to
13:45  Vinetou: yeah
13:45  Vinetou: ok i'll try for __rob
13:45  Vinetou: >>> round(1.255, 1)
13:45  Vinetou: 1.3
13:45  __rob: im not too worried :)
13:45  Vinetou: perfectly normal
13:45  __rob: my question was about blocking reads
13:45  Vinetou: >>> round(1.255, 2)
13:45  Vinetou: 1.25
13:46  __rob: it seems all teh methods in python for reading will not block on a normal file, just returns ""
13:46  Vinetou: huh?!
13:46  kancha: Alberth: I will do that as you said
13:46  confluency: Vinetou: naxa was suggesting round(...,1) for rounding your number down to one decimal place.  You're looking at naxa's suggestion for checking if it's an integer.
13:46  Vinetou: that's got to be a bug in Python
13:46  VladDrac: In [20]: 1.255
13:46  VladDrac: Out[20]: 1.2549999999999999
13:46  VladDrac: it's how floats work
13:46  Alberth: __rob: the OS does not implement it then.
13:46  __rob: anyone know how I an get this behavior
13:47  Vinetou: confluency i don't want rounding (that will be done by the 'g' format soecifier)
13:47  __rob: at the moment i have to poll on the read
13:47 --- yacc_ is now known as yacc
13:47  papna_: http://docs.python.org/tutorial/floatingpoint.html
13:47  kancha: Great
13:47  __rob: and sleep between reads
13:47  kancha: thanks
13:47  Vinetou: specifier*
13:47  kancha: Alberth: it really works
13:47  __rob: is this the only solution ?
13:47  kancha: I am really happy
13:47  Vinetou: i want to truncate the .0 part of the float
13:47  __rob: this is on linux
13:47  kancha: Alberth: i tried this simple for 5 hours
13:47  kancha: lol
13:47  Alberth: __rob: that, or you need some notification of changes to the file
13:47  papna_: __rob: You're at the end of an actual file and reading, and you want to wait until there's more to actually read?
13:47  VladDrac: __rob, you want tail -f-like behaviour?
13:48  __rob: I really want to only return if there is an actual character written to the file
13:48  Alberth: kancha: I think what you tried is too difficult for you at this time
13:48  kancha: ALberth: yes
13:48  confluency: Vinetou: if you never want to see scientific notation, then you can't just use %g.
13:48  naxa: Vinetou: if my_float == int(my_float): my_float = int(my_float)
13:48  Vinetou: if there is a float that its decimal is a 0, so like 5.0, i want to chop off that .0 for the 5.0 result to be displayed as 5
13:48  naxa: that will truncate the .0 part
13:49 --- sukeri1 is now known as sukeri
13:49  naxa: Vinetou: that will truncate the .0 part. however your "float" will be int for the time being
13:49  Alberth: __rob: from 'man 2 read':  ...Many  filesystems and disks were considered to be fast enough that the implementation of O_NONBLOCK was deemed unnecessary. So, O_NONBLOCK may not be available on files and/or disks....
13:49  Vinetou: naxa that would not work
13:49  naxa: Vinetou: ok but please let me know why as I can't see
13:49  confluency: naxa: that doesn't quite help, because you still can't use %g, and if you use %f it will print that as a float.
13:49  Vinetou: because a value with .0 will always be regarded as a float to Python
13:50  confluency: Vinetou: no, naxa's latest suggestion casts the float to an int.
13:50  confluency: But this is still not what you want.
13:50  confluency: So forget %g.
13:50  Vinetou: i can't check whether a value is an int if it's actually a float (even though it has a zero decimal)
13:50  naxa: confluency, Vinetou oh i see. why not use string truncating then as originally suggested: `if my_string.endswith(".0"): my_string = my_string[0:-2]`
13:51  Vinetou: if my_float == int(my_float): my_float = int(my_float)
13:51  Vinetou: this is wrong
13:51  naxa: I don't know about a good way to do this with a format specifier... i may be wrong but I just can't come up with one
13:51  Vinetou: if my_float == int(my_float)    that would always be False
13:52  Vinetou: and hence the my_float = int(my_float) part would never occur
13:52  confluency: 1) round to one place 2) if it's an integer, use %.0f; if it's not, use %.1f
13:52  naxa: Vinetou: that's not true. (32.0 == int(32.0) == True
13:52  confluency: Vinetou: did you try it?
13:52  naxa: *)
13:52  Alberth: Vinetou: convert to string, then repeatedly chop off the last "0", and then the "." if it is there ?
13:52  Vinetou: <naxa> Vinetou: that's not true. (32.0 == int(32.0) == True
13:52  Vinetou: really?
13:52  Vinetou: i didn't know that
13:52  Vinetou: thanks
13:52  papna_: Vinetou: The typical solution is to change your desire to want 15.0 instead of 15 displayed.
13:52  Vinetou: then i solved it
13:52  confluency: Yes. 2.0 is equal to 2.
13:52  Vinetou: i mean you did dude
13:52  Vinetou: thanks
13:53  Kylarr: What about "%s" % str(num).rstrip('0.
13:53  Kylarr: ')
13:53  Alberth: Kylarr: you missed the "." at the end
13:53  Vinetou: that is perfect!
13:53  papna_: Kylarr: That code is buggy!!!!
13:53  Alberth: no, 10.0  becomes 1
13:53  confluency: This is the most epic bikeshedding of a simple (and silly) float formatting issue ever. ;)
13:53  naxa: Kylarr, Vinetou : well I think  that's doing the conversion twice
13:53  Kylarr: aw =(
13:53  Vinetou: "%s" % str(num).rstrip('.0')
13:53  papna_: Alberth++
13:53  Vinetou: i think this is the winner
13:54  papna_: Vinetou: That code is WRONG
13:54  naxa: Kylarr: and you mistyped: 0. instead of .0 i think.
13:54  BenO: confluency, so this wasnt an obsfucated code contest in disguise? ;)
13:54  Alberth: Vinetou: (13:53:42) Alberth: no, 10.0  becomes 1
13:54  Kylarr: naxa it works either way. (well, until papna_ explains why it's wrong =P)
13:54  papna_: str(num).rstrip("0").rstrip(".") is similar in many regards.
13:54  papna_: Kylarr: Alberth already did.
13:54  confluency: Hmm.  I could have sworn %f had some way of specifying a range of decimal places.
13:54  Kylarr: ah right
13:54  papna_: TWICE
13:55  Vinetou: "%s" % str(%s).rstrip('.0')
13:55  Vinetou: ?
13:55  naxa: Kylarr: Vinetou : isn't this doing the float-> string conversion twice for no other reason but to be less number of characters in the source code?
13:55  papna_: naxa: That isn't an accurate description.
13:56  Vinetou: naxa if there is a truncate() or trunc() method in Python Standard Library, please let me know
13:56  Alberth: Vinetou: just for fun, try it with 10.0
13:56  naxa: papna_: sorry (blush)
13:56  Vinetou: ok
13:56 --- cncfanatics is now known as cnc-away
13:56  naxa: Vinetou: str(%s) is syntax error i think
13:57  naxa: Vinetou: it's str("%s"%my_string)
13:57  Vinetou: "%s" % str(%s).rstrip('.0')
13:57  Vinetou: ah sorry
13:57  Vinetou: >>> "%s" % str(10.0).rstrip('.0')
13:57  Vinetou: '1'
13:57  Alberth: yep
13:57  Vinetou: but then i need to convert that '1' into an integer
13:58  papna_: Vinetou: ...................................................................
13:58  Vinetou: because the control accepts only floats or numbers
13:58  naxa: Vinetou: as someone suggested, "%s"%str(10.0).rstrip('0').rstrip('.') works
13:58  Vinetou: a text control in wxPython
13:58  Vinetou: called NumCtrl
13:58  papna_: Vinetou: 1) this isn't a string formatting problem? 2) That '1' *wasn't what you wanted*
13:58  papna_: You might have wanted 10.
13:58  papna_: Not 1.
13:58  Vinetou: oh
13:58  Vinetou: yeah you're right
13:59  Vinetou: sorry this is 10.0 not 1.0
13:59  Vinetou: hmmm
13:59  Vinetou: is that a bug in Python?
13:59 --- cnc-away is now known as cncfanatics
14:00  stargaming: help(str.rstrip) basically says "Return a copy of the string with trailing characters in chars removed."
14:00  Vinetou: ok i have found my solution
14:00  Vinetou: >>> int("%s"%str(10.0).rstrip('0').rstrip('.'))
14:00  Vinetou: 10
14:00  Vinetou: it returns an int!
14:00  Vinetou: what i wanted
14:01  stargaming: Sorry I'm late to the discussion but what *exactly* are you trying to achieve?
14:01  papna_: Vinetou: No, no, no, no.........that's completely unreasonable code.
14:01  Vinetou: but, this clearly is not very Pythonic, is it?
14:01  Vinetou: i know papna_
14:01  stargaming: Looks like int(10.0) would have done exactly the same.
14:01  papna_: Vinetou: I thought you were trying to do string formatting. It turns out you're trying to do type conversion?
14:01  papna_: Explain your problem at a high level.
14:01  Vinetou: yeah bit that would bite me in cases where I have, say, 2.4
14:02  Vinetou: bit=but
14:02  stargaming: 2.4 would fail with the code you have demonstrated above, too.
14:02  Vinetou: yeah
14:02  Vinetou: is there really no trunc() method in Python stdlib?
14:02  papna_: Vinetou: You want to take a float and make an int of its integer portion
14:02  papna_: int
14:02  confluency: Oh, right, I forgot that you wanted to truncate and not round.
14:02  Vinetou: or perhaps one with a different name but that does truncation
14:02  stargaming: Please follow papna_'s advice and try to explain what you are trying to do (I start to think you *goal* might be unreasonable too).
14:02  papna_: int(2.4) == 2
14:03  naxa: Vinetou: i it's better to do `my_string = "%.1f"%my_float; if my_string.endswith(".0"): my_string = my_string[0:-1]` than anything else mentinoed earlier.
14:03  naxa: in my opinion
14:03  Vinetou: papna_ just for floats that are .0
14:03  papna_: naxa: Why are you string formatting? It sounds like this problem has nothing to do with strings?
14:03  naxa: Vinetou: sorry [0:-2] at the end
14:03  papna_: Vinetou: Why?
14:03 --- mukul is now known as mukul_afk
14:03  Vinetou: i must code it that way
14:03  papna_: Vinetou: Explain your problem at a high level.
14:03  Vinetou: i have rules to follow
14:03  naxa: papna_: well maybe I'm lost a bit... i thought he wanted to print 10.x if x != 0
14:04  stargaming: Vinetou, what should happen to 2.4? Should it stay a float, and why?
14:04  Vinetou: i might as well just pastebin the source
14:04  Vinetou: just a sed
14:04  papna_: naxa:Doesn't sound like he's printing it.
14:04  Vinetou: sec
14:04  ius: I want to check whether all elements of a list are equal. What's the cleanest way of doing that? All I can come up with is len(set(mylist)) == 1..
14:04  naxa: papna_: well I've shortened my description
14:04  papna_: ius: That works.
14:04  naxa: papna_: i think we will see in a moment what's his problem in rl. :)
14:04  papna_: ius: all(item == items[0] for item in items) short-circuits.
14:05  naxa: i mean "actually"
14:05  ius: papna_: Doh. Thanks.
14:05  papna_: ius: A for loop is also a clear method.
14:06  ius: Yeah I'm a bit undecisive in my use of map() as opposed to a for-loop, which usually is easier to read (totally unrelated)
14:06  Vinetou: there's the soruce of my app
14:06  Vinetou: http://pastebin.com/83NVBTfi
14:06  infobob: http://paste.pocoo.org/show/275374/ (repasted for Vinetou)
14:06  Vinetou: hack it ;)
14:06  Vinetou: but don't get annoyed by the text strings
14:06  Vinetou: they are in my native tongue
14:07  Vinetou: they are not relevant to my problem
14:07  neumaennl: Vinetou: is that Czech?
14:07  papna_: Slovenian?
14:08  confluency: OK, so *why* do you need to truncate and not round, truncate to 1 decimal place, and truncate to no decimal places of it's an integer?
14:09  lvh: Hi.
14:10  naxa: Vinetou: so you want to do it inline? :)
14:10  Bonaparte: Hi lvh
14:11  papna_: Vinetou: So this IS a string formatting problem?
14:11  papna_: Then start liking "1.0", or use the s specifier rather than the f specifier and do what we discussed, using the d or f specifiers to get the string with which you use the s specifier.
14:11  papna_: lvh: Hi.
14:11  Vinetou: neumaennl it's Slovenian
14:12  Vinetou: i cannot use the %s specifier
14:12  Vinetou: on floats
14:12  Vinetou: :/
14:12  naxa: Vinetou: `def my_truncate(my_string): return my_string if not my_string.endwith(".0") else my_string[0:-2]` then use it like `number=my_truncate(calculatedYears)`
14:12  papna_: Vinetou: Don't, make a string *first*.
14:13  papna_: Vinetou: That is the string you *want*
14:13  naxa: Vinetou: sorry, i mean `number=my_truncate("%1f"%calculatedYears)`
14:13  Vinetou: is there a way in Python to check whether the float is .0  ?
14:14  Vinetou: if calculatedYears == .0   ?
14:14  VladDrac: geez, still working on the same issue?
14:14  naxa: Vinetou: if my_float == int(my_float) it means that .0
14:14  papna_: Vinetou: Yes, that would check if a float is zero.
14:14  Vinetou: nice
14:14  Vinetou: i'll use my version
14:14  Vinetou: it's Pythonic (in a way, because it is readable)
14:15  naxa: Vinetou: you mean the rstrip("0").rstrip(".") ?
14:16  naxa: VladDrac: well the goals are cloudy
14:16  papna_: Note that the double-rstrip can give unwanted results if somehow the string passed to it is something like "250"
14:17  Kylarr: Yeah that rstrip idea was pretty bad.
14:17  Vinetou: >>> 30.0 == .0
14:17  Vinetou: False
14:17  Vinetou: my version sucks
14:17  naxa: Vinetou: try 30.0 == int(30.0)
14:17  Kylarr: Vinetou, because 30.0 isn't 0.
14:17  naxa: Vinetou: 30.0 == .0 asks if 30 is 0
14:17  Vinetou: .0
14:18  Vinetou: !
14:18  papna_: Vinetou: .0 is a way of writing 0.0
14:18  Kylarr: He took what you said literally when you asked.
14:18  Vinetou: dot zero
14:18  Vinetou: aha
14:18  naxa: Vinetou: that's what you want to ask but for python asking == .0 means == 0
14:18  Vinetou: 0.0 is .0
14:18  Vinetou: i see
14:18  Vinetou: hmmm
14:18  Vinetou: back to the drawing board
14:18  naxa: Vinetou: may I ask why don't you accept the solutions already given to you?
14:18  naxa: what's the problem with them?
14:19  naxa: like the my_float == int(my_float) or my_string.endswith(".0") stuffs
14:19  manixor: Hi all.
14:19  naxa: or the stuff others 've said
14:19  naxa: manixor: hi
14:20  sa125: hi - trying to create a regex to match a YYYY-mm pattern in a string to search in directories. I got p = re.compile(r"201[1-9]-0[1-9]|1[0-2]"), but it's not great. any thoughts?
14:20  VladDrac: you can also wonder if it's really necessary at all, and if it makes sense
14:20  manixor: I have strings like xml nodes: <cid>4567</cid> or <cid>456456567</cid>, How can I get the nr inside <>...<> ?
14:20  VladDrac: becauase 2.0 and 2 mean something different
14:21  VladDrac: '2' suggest a possible rounding, 2.0 suggest a certain accuracy
14:21  shylent: manixor: well, is it actually xml?
14:21  manixor: shylent: Yes
14:21  shylent: so use lxml, then
14:21  naxa: VladDrac: for me it always seemed to be a cosmetic sort of thing
14:21  papna_: VladDrac: Not really.
14:21  papna_: manixor: Use an xml parser, like xml.etree.ElementTree or lxml.etree
14:22  naxa: VladDrac: i mean "cosmetic" what Vinetou is trying to do; not what you've said. just my impression
14:22  Vinetou: if calculatedYears == .0:
14:22  Vinetou:                 calculatedYears = int(calculatedYears)
14:22  Kylarr: sa125 you're missing some parentheses around the month stuff.
14:22  Vinetou: is this correct?
14:22  Vinetou: if you omit the .0 art
14:22  Vinetou: part*
14:22  naxa: Vinetou: no it's not if i understand you well
14:22  Vinetou: part*?
14:22  papna_: Vinetou: .0 is a way or writing 0.0
14:22  Vinetou: yeah
14:23  Vinetou: is the 'calculatedYears = int(calculatedYears)' part okay?
14:23  Vinetou: or is 'int(calculatedYears)'
14:23  papna_: Vinetou: That probably isn't something you'd do.
14:23  naxa: Vinetou: i really think you want to write `if calculatedYears == int(calculatedYears): calculatedYears = int(calculatedYears)` . please try it and see if it's good foryou
14:23  papna_: Vinetou: You're trying to convert type. This is misguided. Your interest is manipulating strings.
14:23  Vinetou: ok i'll try it
14:24  sa125: Kylarr like re.compile(r"(201[1-9]-0[1-9]|1[0-2])")? I'm trying to get something like "/home/sa125/files/2010-10/blah.csv" to match and /home/sa125/files/blah.csv" to skip
14:24  Vinetou: why strings?
14:24  marmoute: I'm trying to make a "merge copy" (as windows do) of a file tree into another with python
14:24  neumaennl: ignorance is bliss
14:24  Vinetou: the NumCtrl accepts ints and floats only
14:24  naxa: Vinetou: becouse manipulating calculatedYears is not a good way to solve a string cosmetic display problem
14:24  Vinetou: no strings allowed in that control
14:24  marmoute: shutils.copytree doesn't merge target and destination. any idea ?
14:24  Vinetou: naxa oh that
14:24  Vinetou: you're right
14:25  papna_: Vinetou: /lastlog Vinetou
14:25  papna_: Oops.
14:25  papna_: Vinetou: I think your pastebin didn't explain your problem.
14:25  papna_: You also refused to explain your problem at a high level.
14:26  Kylarr: sa125 your regex is basically saying "201[1-9]-0[1-9]" OR "1[0-2]", so the first part is failing, then 1[0-2] matches the "12" in "sa123".
14:26  Vinetou: you can run my app and see
14:26  Vinetou: but have python installed
14:26  Vinetou: the unicode version
14:26  Vinetou: 2.8.11
14:26  Vinetou: argh, not python installed (that too, yes) but have wxPython installed i ment
14:27  Kylarr: try 201[1-9]-(0[1-9]|1[0-2])
14:27  Kylarr: Note that that will still match like "352011-1222" because "2011-12" is in the middle of it
14:27  naxa: Vinetou: try http://pastebin.org/171086
14:27  infobob: http://paste.pocoo.org/show/275380/ (repasted for naxa)
14:28  naxa: hehe
14:28  Vinetou:             if calculatedYears == int(calculatedYears):
14:28  Vinetou:                 calculatedYears = int(calculatedYears)
14:28  Vinetou: this doesn't work at all
14:28  Vinetou:             if calculatedYears == int(calculatedYears):
14:28  Vinetou:                 int(calculatedYears)
14:28  Vinetou: i'll try though
14:29  Vinetou: ... nope
14:29  Vinetou: omg
14:29  Vinetou: it hit me!!
14:29  naxa: Vinetou: what about: http://paste.pocoo.org/show/275380/ and then ... number = cosmetic(calculatedYears) ...
14:29  Vinetou:             if calculatedYears == type(int):
14:29  Vinetou:                 calculatedYears = int(calculatedYears)
14:29  Vinetou: :D
14:30  Vinetou: maybe that'll work
14:30  Vinetou: ah shit
14:30  Vinetou: sorry for cursing
14:30  naxa: Vinetou: casting an int to an int is not what you want in my opinion and it also doesn't make any sense. please try http://paste.pocoo.org/show/275380/ and see if it works for you like number=cosmetic(calculatedYears).
14:31  naxa: *cosmetics
14:31 --- cncfanatics is now known as cnc-away
14:31  naxa: and don't worry defining a function is ok in python, too
14:31  naxa: it's more pythonic than casting an int to an int i think
14:32  naxa: we're totally lost
14:32  naxa: :D
14:32 --- cnc-away is now known as cncfanatics
14:32  shylent: there's no casting in python
14:32 --- rizzuh_ is now known as rizzuh
14:33  aidan: If I expect a bunch of methods to return a dict with 3 keys, should I use some other data structure to make that expectation explicit?
14:33  naxa: shylent: sorry for the incorrect terminology, then
14:34  naxa: shylent: is it type conversion, then? just to make me learn it
14:35  naxa: I'm very loose on right terms here. :(
14:37  naxa: aidan: for me it seems to be a clean idea..
14:40  naxa: anyone knows why i get "close failed: [Errno 9] Bad file descriptor" in 2.5 when trying to redirect the output to a file? like "python sample.py >output.txt". the scripts runs ok but then it gives me this error and I can't understand why
14:40  lemiffe: hey guys, is there an easy way of determining if a computer is linux or windows with Python to get the real time difference using .time?
14:40  aidan: naxa: what datastructure though?
14:40  naxa: lemiffe: if sys.platform == "win32":
14:41  naxa: aidan: well maybe an own class what implements __getitem__ and some other stuff
14:42  lemiffe: cheers naxa
14:42  naxa: aidan: internally it could use a dict or maybe even inherit from dict...
14:42  avu: naxa, there's no type conversion in python either
14:42  naxa: lemiffe: welcome :)
14:43  naxa: avu: what is it then? :) don't leave me alone in the dark
14:43  Dynetrekk: does there exist a function that returns a valid filename, given an input string? e.g. the string 'spam/ham/eggs' could be converted to, say, 'spam_ham_eggs'
14:43  avu: naxa, when you do int('23') for example, you're creating a new int object
14:43  avu: naxa, just like with any other constructor call
14:43  naxa: avu: i see. ok
14:44  Kylarr: You'd be converting a string to an integer.
14:44  naxa: avu: and thanks :)
14:44  avu: Kylarr, not really
14:44  avu: Kylarr, the str object is still there and untouched
14:45  Kylarr: Yeah.
14:45  Kylarr: help(int) starts with "Convert a string or number to an integer, if possible"
14:45  neumaennl: avu: but that also holds true for a cast in another language: double a = 1.0; int b = (int)a;
14:45  Kylarr: So I dunno.. the word convert seemed okay to use.
14:46  avu: neumaennl, no, there's still only one location in memory containing that value in that case
14:46 --- DasIch_ is now known as DasIch
14:48  neumaennl: avu: huh? in my case a would be untouched and b would be created. The result is the same as a = 1.0; b = int(a) in python, although the way it works is probably different
14:48  Vinetou: naxa your function cosmetic() works! :)
14:48  neumaennl: surprise!
14:48  tamiel: Kylarr: this is like dynamic_cast in C++, raising exception if types are incompatibles .
14:48  Vinetou: i just don't like the  my_string[0:-2] part
14:49  Kylarr: tamiel, yeah, but I'm just wondering what word *is* appropriate if "convert" isn't.
14:49  tamiel: Kylarr: and dynamic_cast is a convertion like you say (and int doc say) =)
14:49  naxa: Vinetou: nice. :) enjoy
14:49  avu: Kylarr, convert is ok if you're not in a pedantic discussion about the topic ;)
14:49  Kylarr: Great, convert it is! *goes and makes a cup of tea*
14:49  naxa: Vinetou: however, it's called cosmetics with S at the end, i think. it seems it is determined to be mistyped as i mistyped it myself, too. :P
14:50  avu: neumaennl, you're right, casts with primitive/value types behave differenty, problem of using a concept that doesn't exist in python
14:51  naxa: Vinetou: the [0:-2] says that copy the string except the last 2 chars (`-2`).
14:51  Axius: How do I open a file for in read-mode in python?
14:51  avu: (the 0 can be left out there)
14:51  naxa: Vinetou: that's the same as with list indexing
14:51  avu: Axius, open(foo)
14:51  neumaennl: avu: you're right. I know that. That's why I said the outcome is the same.
14:52  naxa: Vinetou: if you ever need to change the digits displayed from 1 to whatever, you should adjust the `-2` part or even do `my_string.find(".0")` instead of `-2`
14:53  naxa: Axius: or: open(filename, "rb") # that's more explicit
14:53  avu: and something different.
14:53  avu: (at least on windows)
14:54  naxa: Axius: if it's a text file but not ascii then you will want to do: import codecs; codecs.open(filename, "rb", "<insert-the-name-of-your-encoding-here>")
14:55  naxa: avu: "rb" is the same behaviour in win32 as "r" in anything else, isn't it?
14:55 --- papna-wo1k is now known as papna-work
14:56  avu: naxa, yes, which is why I said what I said :)
14:56  Axius: How about appending some text to a file.
14:56  avu: naxa, open(foo) is not the same as open(foo, 'rb') - at least on windows
14:56  avu: Axius, open(foo, 'a')
14:56  avu: Axius, maybe you should re-reas the tutorial?
14:56  naxa: avu: that's true but maybe he wants "rb" anyway as it's safer
14:57  Vinetou: naxa what about.....
14:58  Vinetou: something = my_string.find(".0")
14:58  Vinetou: del something
14:58  Vinetou: ?
14:58  naxa: Axius: tutorial: http://docs.python.org/tutorial/inputoutput.html#reading-and-writing-files docs: http://docs.python.org/library/functions.html#open
14:59  aidan: How can I log the URLs opened when using http://pypi.python.org/pypi/zope.testbrowser ?
14:59  Axius: Is this this syntax ok: fileobject = open("notes.txt, 'r')
14:59  avu: that would just remove the name 'something' from the namespace
14:59  Kylarr: Vinetou, you're still doing this..?
14:59  Vinetou: yes
14:59  avu: Axius, as I said, if you want to append, use 'a', nor 'r'
14:59  naxa: Vinetou: you don't need to del something as python automatically deletes it when it exits from the function
14:59 --- ghostrocket_ is now known as ghostrocket
14:59  sa125: Kylarr - sorry for the lag, had to deal w/ people. Thanks for the tip, I'll look into it
15:00  Vinetou: naxa i wanna make a reference to the .0 part that the string method find() finds
15:00  Vinetou: and then delete that object via the reference 'something'
15:00  avu: Vinetou, something isn't a reference in the way you probably think, it's just a name
15:00  Vinetou: i might as well do this: del my_string.find(".0")
15:00  naxa: Vinetou: oh i see. i think that in python you don't want to do it like this. it's not a "pointer-oriented" language...
15:00  avu: Vinetou, del doesn't delete anything other than that name
15:01  avu: Vinetou, and that won't work
15:01  avu: Vinetou, strings are immutable anyway
15:01  neumaennl: Vinetou: why don't you just read something about string formatting
15:01  Vinetou: i did
15:01  naxa: Vinetou: del my_string.find(".0") means deleting an integer; an unnamed integer what is == with the output of the find function.
15:01  Kylarr: Vinetou, that won't work if you have like "3.05"
15:01  Kylarr: Just use something that works and move on.
15:01  neumaennl: Vinetou: we're not here to recite documentation for you
15:01  Vinetou: do you happen to know if there's any truncate() built-in function in the stdlib?
15:02  lvh: del my_string.find(".0") is unlikely to do anything interesting
15:02  naxa: Kylarr: i wrote this http://paste.pocoo.org/show/275380/ for him... he speaks about this, i think
15:03  lvh: Vinetou: I have no idea what you're trying to do. I joined late. Care to reiteratE?
15:03  Vinetou: ha!
15:03  naxa: lvh: i think he is modifying this... http://paste.pocoo.org/show/275380/ to work not only with %.1 but %.x where x is some integer
15:03  Vinetou: maybe i can iterate the float and chop off the .0 part?
15:03  Vinetou: is that doable?
15:03  Kylarr: lvh basically he wants to convert a float to a string and then remove ".0" if it ends with ".0".
15:04  Vinetou: yes
15:04  Vinetou: exactly what Kylarr said
15:04  naxa: Vinetou: you are really overcomplicating things
15:04  Kylarr: But for some reason he also wants to ignore every solution we give him.
15:04  lvh: that's crazy talk
15:04  Vinetou: i don't want a function for my solution
15:04  naxa: Vinetou: but why not?
15:04  Vinetou: it works but ....
15:05  Vinetou: i don't like nested functions
15:05  naxa: Vinetou: they are nested anyway you just can't see it
15:05  Vinetou: Flat is better than nested
15:05  Vinetou: :)
15:05  lvh: "%i" % (n,) if n % 1 == 0 else "%d" %(n,)
15:05  lvh: next question
15:05  naxa: :D
15:06  lvh: Vinetou: that's not what nested means
15:06  Vinetou: no?
15:06  Vinetou: what does it mean then?
15:06  naxa: lvh: he want's 234.645 -> "234.6" but 234.0 -> "234"
15:06  lvh: A nested function would be a function defined within a function -- none of the things I've seen describe that
15:06  Vinetou: lvh why the comma after n?
15:07  sid3k: naming question: what name should I give to a function returning getText function? any ideas?
15:07  Kylarr: Vinetou, it's not a tuple otherwise.
15:07  Vinetou: "%i" % (n,)
15:07  naxa: Vinetou: that means that it's a tuple with only 1 item
15:07  naxa: element
15:07  Vinetou: aha
15:07  Vinetou: i see
15:07  sid3k: any suggestions?
15:07  Vinetou: why do you need to have a tuple?
15:07  Vinetou: does the 'i' speficier requires a tuple?
15:08  sid3k: come on guys
15:08  lvh: Vinetou: because the typechecking in str.__mod__ is a mistake
15:08  lvh: Vinetou: also, it makes it misbehave as soon as n becomes a tuple
15:08  lvh: with a useless error message
15:09  lvh: Vinetou: also, presumably you'll want to replace %d with %f or some other string formatting trick
15:09  Kylarr: sid3k, I'd probably go with uh.. getText_func?
15:09  Vinetou: lvh there's 'g'
15:09  lvh: sid3k: Why do you have such a function at all
15:09  Kylarr: or similar
15:09  Vinetou: 'g' is kinda okay
15:10  Vinetou: but sometimes it spits out E notation
15:10  lvh: Vinetou: Furthermore: 'flat is better than nested' is really about data structures, not functions
15:10  Vinetou: oh, so nesting a nested list is bad
15:10  lvh: (Python isn't a lisp-1, it makes the distinction.)
15:10  lvh: Vinetou: Pragmatism beats purity.
15:11  Vinetou: sometimes yes
15:11  lvh: Vinetou: *Arbitrarily* nested data structures are generally bad, yes.
15:11  Vinetou: i still wanna make my code Pythonic
15:11  naxa: lvh: my next question is: i'm redirection output to a file: `python sample.py >output.txt` and i'm getting "close failed: [Errno 9] Bad file descriptor" on stderr. i checked and the scripts runs ok python's just giving this afterwards and the output.txt is 0
15:11  Vinetou: lvh please do tell me how to check if the float is a .0 one
15:11  Habbie: naxa, > is stdout
15:12  lvh: naxa: Python doesn't know if it's output is being piped
15:12  lvh: Habbie: well, yes, that's why he's seeing the error message :-)
15:12  Vinetou: can you check which decimal does a float have using some python trick?
15:12  Habbie: oh i am misreading again
15:12  lvh: Vinetou: I've just told you
15:12  lvh: Vinetou: like five minutes ago
15:13  Vinetou: with the   if n %1 == 0  ?
15:13  lvh: Vinetou: if number % 1: # has-decimal-part
15:13  Vinetou: ah
15:13  Vinetou: got it
15:13  lvh: Vinetou: else: # doesn't have decimal part
15:13  Wild_Cat: Vinetou: if int(i) == i: # no decimal part
15:13  Vinetou: if type(int) == i
15:14 --- mukul_afk is now known as mukul
15:14  lvh: Vinetou: What? No.
15:14  PDani: hi
15:14  Vinetou: or is it   if type(int) is i
15:14  blubbi: Does anyone know if this is the right translation from Fortran to python: cf = 0.d0 -> cf = 0 (I dont care about the output format, but as much as I understand the d0 it means no digits rights of the decimal point)
15:14  lvh: type(int) == type, always.
15:14  PDani: I installed a python module from deb, which puts the python source into /usr/share/pyshared dir. But when i try to import this module from python2.5, it can't find the module. why isn't the default behaviour of python2.5 to look after modules in pyshared, and how can i reach this behaviour in ubuntu-way?
15:14  lvh: Vinetou: No. Forget type exists.
15:14  Vinetou: ok
15:14  NelleV: xD
15:14  lvh: blubbi: I speak fortran, but I have no idea what you're talking about.
15:15  lvh: blubbi: What's a transition?
15:15  blubbi: lvh: translation
15:15  blubbi: sry
15:15  lvh: blubbi: Err, not your fault, I misread.
15:15  blubbi: np
15:15  Vinetou: type(int) == type, always.
15:15  lvh: blubbi: What's wrong with cf = int(thing)?
15:15  Vinetou: ???
15:15  lvh: Vinetou: I just told you to forget type exists.
15:16  blubbi: I am trying to understand some fortran code to implement it in python
15:16  Vinetou: type(int) == 5
15:16  lvh: You don't need it for anything.
15:16  lvh: Vinetou: No.
15:16  blubbi: lvh: okay, that explains it
15:16  Vinetou: please explain why not
15:16  lvh: Vinetou: Forget type exists. You obviously don't know what it does, and you don't need it for anything.
15:16  lvh: Vinetou: Because Python is a duck typed language. Caring about types means your program is wrong.
15:16  Vinetou: how else am i about to check a type of an object?
15:16  lvh: Vinetou: You don't.
15:16  blubbi: lvh: I was just curous why one declares a varaiable as  0.d0 instead of simply 0
15:17  naxa: lvh, Habbie: ok. could you please give me a hint how could i make python bear with the situation? :)
15:17  lvh: blubbi: Ah, yes: arbitrary precision. Python doesn't *quite* have something like that for floats except in the decimal module.
15:17  Vinetou: lvh what if i am doing something that requires a certain type?
15:17  Vinetou: i need to check if the type is the right one, don't i?
15:17  aidan: Is therea compact syntax for this: a = if Foo is None then Bar else Foo
15:17  lvh: Vinetou: Can't happen, almost by definition.
15:17  blubbi: lvh: ah, I see thanks for the info
15:18  lvh: Vinetou: EAFP. Just do it, if the type is wrong stuff will blow up and raise an Exception.
15:18  Vinetou: i see
15:18  Vinetou: you're right
15:18  lvh: Vinetou: If your caller feeds you stuff that doesn't work, it's his responsibility to fix it.
15:19  Vinetou: what caller?
15:19  confluency: aidan: a = Bar if Foo is None else Bar (trinary operator, added in 2.6? 2.7?)
15:19  lvh: Vinetou: The thing that gave you the wrong type.
15:19  Vinetou: oh that
15:19  neumaennl: Vinetou: you really make me wanna scream. Reading what you write causes agony. You obviously have absolutely no idea what you're talking about and you refuse advice. Go do a tutorial at least.
15:19  lvh: Since it'll be just above you on the stack, it will be the first thing to see the exception.
15:20  lvh: neumaennl: Sssh, I'm countertrolling.
15:20  Alberth: confluency: s/else Bar/else Foo/
15:20  aidan: thanks confluency
15:20  lvh: Aww. :-(
15:20  lvh: confluency: ternary is new in 2.5.
15:21  Vinetou: lvh is there a truncate method in python?
15:21  Vinetou: i know about round...
15:21  naxa: Vinetou: it's true that if you would read http://docs.python.org/tutorial/ it would really save both our AND your time
15:21  lvh: Vinetou: What's truncate?
15:21  Vinetou: a method to truncate floats
15:21  Vinetou: does it exist?
15:21  Vinetou: a built-in one that is
15:21  Vinetou: or one from some module
15:21  confluency: Oops.  i couldn't decide which way around was prettier, and made it neither. :p
15:21  Vinetou: in stdlib
15:22  Vinetou: ?
15:22 --- cncfanatics is now known as cnc-away
15:22  Alberth: Vinetou: floats work differently than you believe in computers
15:22  lvh: Vinetou: There's floor.
15:23  aidan: so .. entry['guid'] if entry['guid'] is not None else entry['link']
15:23  lvh: Vinetou: Which is not quite the same, but close. The other way is decimal -> float.
15:23  aidan: Doesn't seem very small :(
15:23  naxa: Habbie: could you hint me how should i make python work with redirecting stdout like "sample.py >out.txt" ?
15:23  lvh: Vinetou: However, if you are only doing this to make a float *display* nicely, that's a stupid way of doing it.
15:23  lvh: Vinetou: If it's purely for display purposes, use string formatting.
15:23  Alberth: aidan: entry.get('guid', entry['link'])
15:24  Wild_Cat: aidan: entry["guid"] or entry["link"], then?
15:24  naxa: aidan: you could do entry['guid'] or entry['link'] # however it gives the "link" thing whenever bool(entry["guid"]) == False
15:25  aidan: ah neat
15:25  lvh: Vinetou: Furthermore, please stop using <RET> as punctuation. Only a few words per line, with a sentence spanning multiple vertical lines, is *extremely* annoying to read.
15:26  pozic: If I have def f(g): x.g(), how can I pass g?
15:27  lvh: pozic: That looks almost like the signature of getattr.
15:27  naxa: lvh: could you hint me how should i make python work with redirected stdout?
15:27  lvh: Except with some function application mixed in.
15:27  lvh: naxa: You are most likely seeing some other problem.
15:27  pozic: lvh: so I need to pass a function as a string?
15:27  pozic: lvh: or rather a method.
15:27  Alberth: naxa: how is that not working?
15:28  Wild_Cat: pozic: getattr(x, "g")()
15:28  lvh: pozic: No. It's just a name.
15:28  lvh: pozic: One and the same function/method can have many names.
15:28  lvh: pozic: The name is how you *access* the function, it is not the function itself.
15:28  pozic: lvh: Class.<myname> would have been nicer, imho.
15:28  pozic: lvh: but I suppose that doesn't work in general.
15:28  Azzkikr: question: with exceptions, you can do `except: Exception as e' then `print e.value'. In help(Exception) and help(BaseException) I can't find any trace of this `value' param. Is this set dynamically?
15:28  naxa: Alberth: i do `python sample.py >output.txt` and it gives me "close failed: [Errno 9] Bad file descriptor" in stderr, however, the script otherwise runs ok. i don't understand what's happening
15:28  pozic: lvh: I understand the details. Thanks for the answer.
15:28  naxa: Azzkikr: except Exception, e:
15:29  lvh: pozic: Well, you are passing it along in a variable.
15:29  lvh: pozic: How would you have expected it to work?
15:29  lvh: pozic: You can use Class.method just fine.
15:29  naxa: Azzkikr: oh i misread. sorry
15:29  Alberth: naxa: don't catch ExceptIon !!
15:29  lvh: pozic: Just make sure you call the method with an instance of Class.
15:29  naxa: Alberth: he said it.. :)
15:29  pozic: lvh: I think it is better to write it as g(x).
15:30  naxa: Alberth: so what do you think about this with close failed: [Errno 9] Bad file descriptor?
15:30  Alberth: naxa: so tell him he should not do that :)
15:30  Alberth: naxa: > only redirects stdout, not stderr
15:30  Azzkikr: oh, wait, I also got it wrong, nevermind my question
15:30  naxa: Alberth: yes but his question was about the "value" part of e.value, actually
15:30  lvh: pozic: Hang on, I'm confused. Can you give me a concrete example? It is not obvious what "g", "x"... etc are.
15:31  Alberth: naxa: perhaps you want  "python sample.py >& output.txt" (with bash) ?
15:31  lvh: pozic: What are you even trying to do?
15:31  naxa: Alberth: well I see but why is it giving me an error message? i mean it seems that python cant write to the file output.txt and gives me an error message. i didn't intended to redirect stderr in the first place, of course
15:31  pozic: lvh: never mind, I already rewrote it again, without passing a function for this parameter.
15:31  naxa: Alberth: what's worse i'm on win32 :)
15:34  Alberth: naxa: it looks like an OS error when you close some file handle, most likely  stdout, or stderr (or theoretically stdin).  Does it work without output redirect? for a different file than output.txt? (I never use win32, no basically /me is clueless on what happens here)
15:35 --- cnc-away is now known as cncfanatics
15:35  Alberth: cncfanatics: could you turn off your away messages?  thank you
15:35  cncfanatics: Alberth: I have away messages ? Oh, sec
15:35  naxa: Alberth: it work's without output redirect. i also noticed that `sample.py | grep -i "S"` only works if i instead do `grep --text -i ...` and it seems that there is some two-byte unicode strings in the stdout?!
15:35  cncfanatics: Alberth: Or do you mean the rename ?
15:36  Alberth: cncfanatics: (15:35:04) cnc-away is now known as cncfanatics  <-- such messages
15:36  naxa: Alberth: the filename is not the matter, i have rights to write to the directory and there is many gb of space on the device left and i have no quota
15:37  cncfanatics: Alberth: Thats my bouncer changing my nick when I reconnect, its the same as enter/leave room messages for others really
15:37  Alberth: naxa: I think you need someone with a bit more win32 expertise
15:38  zubin71: Hi, im wrote a small Lexer(http://paste.pocoo.org/show/275397/) and wrote a unittest which fails(http://paste.pocoo.org/show/275399/) ; the error i get on running the unittest has also been pasted on the second link. Could someone point out where im making the mistake? I get the feeling its a silly mistake but cant quite put my finger on it. thanks.
15:38  Vinetou: ahem!
15:38  Vinetou: >>> math.trunc(2.0)
15:38  Vinetou: 2
15:38  Habbie: zubin71, please don't put () directly around URLs
15:39  Vinetou: :)
15:39  Vinetou: but.....
15:39  naxa: Alberth: ok i will try and ask; in the meantime do you think that is it possible that it's not an OS-related problem? what else could be the cause?
15:39  Alberth: cncfanatics: you do it all day, it is a bit noisy
15:39  Vinetou: >>> math.trunc(2.4)
15:39  Vinetou: 2
15:39  Vinetou: :(
15:39  zubin71: Habbie: sorry.. do you want me to re-paste?
15:39  Habbie: zubin71, no, just remember next time
15:39  zubin71: sure, will do
15:40  naxa: Vinetou: please accept that you will have to use an own function don't try to accompilish the impossible, you're refusing every single solution given to you on the python help channel while you said you're trying to find a "pythonic" way to do something. please consider the usage of the solutions already given to you
15:40  lvh: Vinetou: Yes, trunc floors
15:40  lvh: Vinetou: If it did what you wanted it to do, I would have told you about it.
15:41  Alberth: naxa: [Errno 9] Bad file descriptor      looks like a typicial OS error. outputtting non-ascii may be related, of course
15:41  naxa: Alberth: i see. thanks for your effort!
15:42  Vinetou: lvh like how?
15:43  lvh: Vinetou: What?
15:43  lvh: Vinetou: That's not a complete sentence, I don't understand what you are trying to say, sorry.
15:45  tos9: Dumb question from someone just learning how to write unit tests. So I've got a library that I've written without any unit tests (yay intelligent programming). It interacts with data from an API not under my control. So it looks like I should be using mock objects and fixtures a lot. But more basically, how much do I unit test? I know I want to cover all the code, but once it's already written, it seems like a herculean task to deciphe
15:46  lvh: tos9: Everything.
15:46  lvh: tos9: And yes, that's a Herculean task, that's one of the reasons you unit test first.
15:46  lvh: tos9: Excessive mocking is generally a sign of a poorly designed codebase or test suite.
15:46  lvh: tos9: (Which means that you might not have a choice.)
15:46  lvh: Some things are hard to test.
15:47  tos9: lvh: So I always should write the unit tests first, before any code whatsoever, that's what I think I've learned here. That accurate?
15:48  Davedan: how can I build latest numpy on ubuntu?
15:48  lvh: tos9: That's what I've always done and it's never let me down
15:49  lvh: tos9: (In fact, our bugtracker didn't even let you mark a bug as "confirmed" without a failing test case.)
15:49  tos9: lvh: Is there a programattic way of figuring out, given some written unit tests, how much code coverage it provides?
15:49 --- metasyntactic is now known as kunwon1
15:50  tos9: Or do I have to sit here and figure out how to logically break my code into smaller and smaller pieces, always unsure of whether my unit tests are somehow interdependent and not really helping as much as they should
15:50  lvh: tos9: Yes! Ned Batchelder's coverage.py
15:50  Wild_Cat: lvh: how do you test GUIs?
15:51  lvh: tos9: It even gives you super awesome HTML output and Cobertura output.
15:51  lvh: Wild_Cat: Web GUIs: Selenium
15:51  lvh: Wild_Cat: Desktop GUIs: class FakeHumanThatFiresQtEvents(object):
15:52  tos9: lvh: oh wow that's great. So then if you're writing your unit tests beforehand, obviously this doesn't help though right?
15:52  tos9: It only will help after you've then written some code
15:52  dash: tos9: it does, after yoU run your tests you can see if there's any uncovered bits :)
15:52  lvh: tos9: "this"? "it"? I'm not following sorry
15:52  tos9: lvh: coverage
15:52  lvh: tos9: Oh.
15:53  lvh: tos9: It's more a confirmation thing than a to-do list, yes.
15:53  dash: tos9: also fwiw i don't always write my tests before I implement stuff
15:53  tos9: dash: I don't follow how it would manage to find "uncovered bits" in unwritten code
15:53  dash: but i often wish i did
15:53  dash: :)
15:53  dash: tos9: well sure it won't
15:53  dash: coverage testing is what you do after your tests pass.
15:53 --- cncfanatics is now known as cnc-away
15:53  lvh: tos9: At $FORMER_DAY_JOB, we had a red light. Like they have blue ones of on police cars, but red.
15:53  tos9: dash: I don't predict I will either :) but I'll make believe I do
15:54  lvh: tos9: Once the code reaches non-perfect coverage, it goes off.
15:54  lvh: tos9: Good luck ignoring a *giant red light* in the middle of your development room.
15:54  lvh: Conditioning works, Skinner proved it.
15:54  tos9: Dammit its hard being a responsibile programmer...
15:54  aljosa: is there any difference between {} and dict()?
15:55  lvh: aljosa: Yes! One is a function call, the other is a literal.
15:55  lvh: aljosa: You can see the difference if you disassemble a piece of code.
15:56  tos9: dash: So then write some unit tests, run coverage, write some more? How does that solve the second problem (i.e. making sure you're not writing unnecessary unit tests)
15:56  lvh: aljosa: http://bpaste.net/show/10125/
15:56  tos9: Or does that just require as much care as you can muster
15:56  Alberth: lvh: thanks for link to coverage.py, looks interesting
15:56  lvh: aljosa: The VM has explicit BUILD_MAP/STORE_MAP instructions.
15:56 --- cnc-away is now known as cncfanatics
15:57  lvh: People didn't know about coverage.py yet?
15:57  cncfanatics: disabing the renaming now, btw
15:57  lvh: How shocking. I must blog more.
15:57  dash: tos9: well the concept is that every time you want to make your program do a thing, you write a test for that thing, and that your code does it right
15:57  dash: tos9: you only have to test things that need to work
15:57  lvh: dash: this is why academia doesn't make you test
15:57  Alberth: tos9: writing tests beforehand is good for getting tests that are not based on your implementation. tests for better covering the code can only be done afterwards, obviously
15:58  zubin71: lvh It'd be great if you could find time to write a post on your experience with TDD.
15:58  dash: the _main_ problem with writing tests first is that you need to know what you want the program to do before you can write tests for it
15:58  aljosa: lvh: but the end result is the same? is there some doc that has more info on recommendations when to use?
15:58  lvh: zubin71: "Do more of it, and fire people who disagree"?
15:58  tos9: Please... if I showed you the code at the intro to python class that the offer at my undergrad uni (which I didn't take, I learned on my own a couple of years ago), I think you'd punch someone in the face
15:59  lvh: dash: Problem? That's the biggest benefit!
15:59  ab3: hey
15:59  lvh: dash: DEATH TO SCOPE CREEP
15:59  Alberth: dash: writing tests makes you aware of that problem earlier, only :)
15:59  dash: Alberth: i'm constantly aware of it
15:59  dash: lvh: well for example
15:59  lvh: zubin71: I'll try! I'm going to talk at Pycon US about CI/CD
15:59  dash: lvh: i don't think i could have written exocet test first
15:59  tos9: Aw, I like scope creep a bit.
15:59  lvh: zubin71: I'm already blogging about CD, I don't know if you read those rants
15:59  NelleV: lvh: I wouldn't be able to write my tests first
16:00  NelleV: not most of them at least
16:00  lvh: NelleV: There's a difference between correct functionality and better benchmark performance
16:01  lvh: NelleV: Unit tests assert correctness, not quality (of code or results or anything else, really)
16:01  lvh: NelleV: Your program still has some basic structure which can be tested.
16:01  lvh: (Or at least the parts of it I have seen.)
16:01  zubin71: lvh your blog address? I lost it.
16:01  ab3: I am using urllib2 with cookielib. I have a request that I fill with post data and build a HTTPCookieProcessor. how can I get this opener to use my request
16:02  lvh: dash: http://www.arewefastyet.com/
16:02  lvh: dash: JM sans TM now beats Nitro as well.
16:02  lvh: dash: (On Sunspider. By a very tiny margin.)
16:02  dash: fun times
16:02  NelleV: lvh: true, but I don't test that :p
16:02  NelleV: lvh: it's a pain to write tests in C++ :s
16:02  lvh: NelleV: Why would you write them in C++
16:02  gnu_d: Hi, why calendar.month_abbr[name] doesn't work, fails with exception: UnicodeDecodeError, when set to my locale, which has encoding utf8 ?
16:02  lvh: zubin71: lvh.posterous.com
16:03  NelleV: lvh: because the core functionnalities are in C++ :'(
16:03  dash: NelleV: well it's a pain to write anything in C++, so that'snot surprising :)
16:03  lvh: zubin71: (It's fairly new)
16:03  lvh: NelleV: And?
16:03  zubin71: lvh: Ok
16:03  lvh: NelleV: I wrote the tests for Fortran code in Python
16:03  ab3: http://dpaste.com/257814/ this is the code I am using
16:03  dash: lvh: makes you wonder if TM is even worth it
16:03  lvh: dash: That depends how far they get with Jaeger :-)
16:03  NelleV: lvh: I don't have the python wrapper for the basic methods. I only have the score return
16:03  dash: lvh: or if it's like the Sufficiently Smart Compiler
16:03  NelleV: lvh: but I test throught the score
16:03  zubin71: gnu_d: does decoding using ascii work?
16:04  lvh: NelleV: Yes, we've had this discussion before: your current layout isn't sanely unit testable
16:04  gnu_d: zubin71: the names are in utf8
16:04  NelleV: dash: true
16:04  lvh: NelleV: That doesn't mean your problem space isn't
16:04  NelleV: lvh: also true :p
16:04  blubbi: lvh: Again Fortran -> Python : edg*1.d-10 == edg*1.0E-10 ?
16:05  lvh: blubbi: Well, Python only has one float type
16:05  lvh: blubbi: But yeah.
16:05  blubbi: 1*10^-10
16:05  blubbi: lvh: okay
16:05  lvh: blubbi: No, not ^
16:05  lvh: blubbi: ^ is binary xor
16:05  blubbi: lvh: Yes i know, just as **
16:06  blubbi: or however one expresses the exponent
16:06  blubbi: in normal life ;)
16:06  phetips: does anyone have some time to help me out with a little subprocess problem?
16:07  gnu_d: phetips: what's the problem ?
16:07  lvh: blubbi: just use e
16:07  tos9: Alright, time to get to work then I suppose. Thanks guys.
16:07  lvh: blubbi: It's part of float literal syntax, and it means that you store the float you *want* in bytecode
16:07  phetips: gnu_d: i am trying to create a wrapper around the bash shell, so i have opened it instantiating the Popen class
16:08  phetips: gnu_d: when i then use the communicate() method to pass a command to the stdin, i get the correct result in the stdout
16:08  cfaftw: hey guys, i need help with inspect.stack().  is there any reason it should fail?  here's the traceback i'm getting:  http://fpaste.org/sDsD/
16:08  blubbi: lvh: okay, does it make a differenece in python if e or E
16:08  lvh: blubbi: Oh, hey, I'm wrong -- Python optimizes that away nowadays
16:08  lvh: blubbi: Nope
16:08  phetips: gnu_d: only thing is, it closes the out/in streams and terminates the shell
16:09  gnu_d: phetips: you want to capture the output in a variable ?
16:09  phetips: gnu_d: so now, i'm trying to write to the stdin and stdout streams directly, only it hangs on the read (nothgin to read)
16:09  blubbi: lvh: okay, thanks a lot... its a hard time understanding this fortran stuff
16:09  cfaftw: all i'm doing it calling "inspect.stack()" from a method... i don't even assign it to a variable, and i still get that error
16:09  phetips: gnu_d: well yes, and i did using communicate()
16:09  phetips: gnu_d: but that way i can only pass one command to the shell and it will terminate
16:10  phetips: sec let me pastebin
16:10  dash: cfaftw: why are you calling that?
16:10  cfaftw: trying to log when a certain method is being called at some point below another method
16:10  lvh: dash: I just got a box to run lp on
16:10  lvh: dash: turns out I had an i7 lying around with 8GB RAM
16:11  dash: lvh: haha
16:11  phetips: gnu_d: http://pastebin.com/CfD17itL
16:11  infobob: http://paste.pocoo.org/show/275407/ (repasted for phetips)
16:11  lvh: dash: (#firstworldproblems)
16:11  ychaouche: sqlalchemy exceptions are in french. What do I have to do to get them in english ?
16:11  phetips: gnu_d: the write at line 21 returns 3, but the script hangs at the readline() @ line 22
16:11  ychaouche: is it an environement variable to set ?
16:11  cfaftw: dash, and there is no recursion in the call stack between the two functions
16:11  ychaouche: i am using python 2.6 under linux
16:11  ychaouche: I don't know if its sqla's related or python related.
16:12  dash: cfaftw: i'd just use pdb, honestly
16:12  dash: cfaftw: if you're tryign to debug a problem
16:12  phetips: gnu_d: do you see what i am trying to do?
16:13  gnu_d: phetips: kind a
16:13  poppiez: if I do "type = None type = 1 def whatever(): global type print type" type is still none. why is this? if I in the beginning set type = 1 type is 1 in the whatever definition
16:13  phetips: the "ls\n" is there for testing purposes, it was supposed to be the command var
16:14  gnu_d: phetips: I see
16:14  dash: poppiez: What
16:14  phetips: gnu_d: if i replace that write and readline with p.communicate(command)
16:15  phetips: it works just fine, except that it terminates the process and closes the descriptors
16:15  phetips: so i'd have to open it for every command, which does work
16:15  phetips: only it's not a real shell, e.g: you can't cd or anything
16:16  cfaftw: dash, i was hoping to use inspect.stack() so i can just run the program like normal, and see all the various cases that a method was called below some other method
16:16  phetips: so, simply put: does anyone know how to write/read to/from a subprocess more than only once?
16:16  poppiez: dash: http://pastebin.com/0EhkZ7qp
16:16  infobob: http://paste.pocoo.org/show/275410/ (repasted for poppiez)
16:16  poppiez: should be "type = None" in the beginning
16:16  lvh: phetips: Twisted if you want to do it properly
16:17  luist: hey... can anyone help me with this error: http://imagebin.org/118475
16:17  phetips: lvh: isn't that a networking library (a bit new to python tbh)?
16:17  phetips: guess it has IPC stuff too then?
16:17  cfaftw: dash, now i'm more concerned with why the heck inspect.stack() would even fail :(  can't find anything on google... yet
16:17  cosmodad: can anyone using nose tell me why my application's log messages using the logging module won't show up during test runs?
16:18  dash: cfaftw: stack inspetion should basically never be done
16:18  dash: c
16:18  ab3: urllib2's doc is not the most coherent in the python lib reference.
16:18  cfaftw: dash, why?
16:18  dash: phetips: what is the difference between "networking" and "IPC"?
16:18  dash: ab3: What is?
16:18  dash: poppiez: this is normal behaviour for python; what surprises you?
16:18  phetips: dash: "networking" is not about spawning sub processes/threads ?
16:18  cfaftw: (other than the obvious reason that it fails)
16:19  dash: phetips: well, threads have nothing to do with IPC, certainly :)
16:19  phetips: i knew you were going to say that :)
16:19  ab3: dash urllib2's doc
16:19  dash: ab3: you just said it isn't, though
16:20  dash: phetips: seriously though; bytes being sent over a pipe aren't really different from bytes sent over a socket
16:20  ab3: ok i misread your comment
16:20  phetips: dash: indeed so :)
16:20  phetips: except that this spawned process doesn't seem to do anything with them
16:20  phetips: which doesn't seem to categorize as a "networking" issue in my book :)
16:20  poppiez: dash: well, what do I have to do to make type accessible in the doSomething definition? just set "global type" in the main definition?
16:21  dash: poppiez: right
16:21  dash: poppiez: but don't
16:21  phetips: but yeah, if twisted can do it, so can i :) Twisted is just a framework implemented in python right?
16:21  dash: phetips: sure!
16:21  dash: phetips: but why wouldn't you use twisted, it does the hard parts for you
16:22  phetips: dash: well this is a hobby thing, so it's more about figuring out the hard parts than it is about getting result :)
16:22  poppiez: dash: what then?
16:22  luist: heeey i need help -> http://imagebin.org/118475
16:22  dash: poppiez: return values from functions
16:22  dash: poppiez: don't use global variables
16:22  NelleV: phetips: twisted's pretty interesting. If you are bored, you should have a look at it
16:22  phetips: dash: plus i'm quite new to python, so i've decided putting off the frameworks for at least a bit
16:22  dash: phetips: that sounds backwards
16:23  nosk1o: phetips: when you get experienced, put off the frameworks
16:23  phetips: not really
16:23  phetips: i am not new to programming
16:23  phetips: just new to python
16:23  dash: phetips: okay?
16:23  phetips: i don't want my impression of python to be heavily affected by the way some framework does things
16:23  dash: phetips: so you want to start in a new language by reimplementing all the useful stuff in it? :)
16:23  phetips: dash: correct :)
16:23  phetips: it is how i do things
16:23  phetips: i am slightly neurotic
16:23  dash: phetips: well, it's not how we do things
16:24  dash: phetips: so expect continuous discouragement :)
16:24  phetips: dash: i am more than used to it :)
16:25  poppiez: dash: how is a return value applicable in my example?
16:25  phetips: dash: but you cannot seriosuly recommend to someone who's barely ever programmed in python to start out with some framework?
16:25  dash: phetips: I can and I do
16:25  dash: phetips: why wouldn't I?
16:25  phetips: ah well, i guess i prefer bottom up over top down
16:26  dash: phetips: writing code is the worst way to learn stuff
16:26  phetips: i messed with C and ASM before my first scripting language :P (VBscript aside)
16:26  phetips: dash: lol
--- Log closed Thu Oct 14 16:32:12 2010
--- Log opened Thu Oct 14 16:47:35 2010
16:47 --- Users 753 nicks [0 ops, 0 halfops, 0 voices, 753 normal]
16:47 --- Server: [barjavel.freenode.net] [freenode-info] channel trolls and no channel staff around to help? please check with freenode support: http://freenode.net/faq.shtml#gettinghelp
16:47  phetips: dash: allright thanks, of course i will take your word for it if you say library X has the best solution for problem Y, and it will require the least work.. and i appreciate it, so thanks. but
16:47  phetips: < dash> phetips: writing code is the worst way to learn stuff
16:47  pantsman: phetips: yes, but you seemed to be implying that using existing code meant not solving new problems
16:47  phetips: that i couldn't just let slip ;p
16:48  Alberth: JordiGH: where?  there is no 'null' in Python,  None comes closest.
16:48  dash: phetips: i stil haven't heard you mention a worse way to learn :)
16:48  phetips: dash: yes you have
16:48  pantsman: phetips: you don't have to take anyone's word for it, you can use it and read its source
16:48  phetips: dash: thinking inside the box, taking "best practises" for granted is much worse than thinking about it yourself and coming up with a solution that is way worse
16:48 --- Channel #python was synced in 84 seconds
16:48  JordiGH: Alberth: Yeah, None, that's what I meant. In x = CNode() ; x.data = ... and x.left = ....
16:49  JordiGH: Oh, they're ellipses.
16:49  JordiGH: Stupid font made them look like underscores...
16:49  phetips: if you try to solve a problem yourself, you are thinking about it.. and while doing that you will come across MUCH more inside your brain than when you just use library call X and leave it at that
16:49  AlexMax: what in the world kind of font are you using where that gets confused heh
16:49  phetips: no matter how much better the library is than your own solution
16:49  ibansal: i have defined a gtk.toolItem  Presently i am using "clicked" signal.  Can i send a signal "change" also for this
16:49  phetips: so for learning, trying yourself is definitely much better than simply using library calls
16:49  dash: phetips: Yeah, I can't agree with that at all
16:49  phetips: ;p
16:49  dash: phetips: the only value in learning is in producing better programs
16:50  phetips: so this is your best way to "learn":
16:50  phetips: 1. problem
16:50  phetips: 2. google problem
16:50  phetips: 3. download solution
16:50  phetips: 4. use solution
16:50  dash: phetips: that's the _ideal_, yes.
16:50  johnrdavisjr: test
16:50  phetips: 5. profit ?
16:50  dash: phetips: It so rarely works out that way, of course.
16:50  Mqrius: Is there a module that lets me see the progress of uploading a file (via HTTP) to some server I don't have access to?
16:50  phetips: so, give me the step where i have learned anything at all dash?
16:50  phetips: 1-5
16:50  dash: phetips: why would you want or need to?
16:50  dash: your problem is solved
16:51  phetips: haha ok
16:51  dash: "learning for its own sake" is one of the most damaging ideas of our time
16:51  phetips: you claim it is the best way to learn, and when i ask you way
16:51  phetips: you say
16:51  phetips: why would you want to learn
16:52  phetips: *way = why
16:52  phetips: lazyness is the most damaging concept of our time
16:52  Mqrius: online arguments are the most damaging concept of our time!
16:52  pigdude: dash: jQuery is one of the most damaging ideas of our time
16:52  phetips: asking "why would you want to learn" is the epitome of our times' damaging ideas
16:52  dash: phetips: So the _normal_ situation is that you can't just fetch a thing that solves your problem
16:52  Wild_Cat: A certain form of laziness is a *big* quality in a programmer.
16:52  dash: pigdude: jquery isn't so terrible
16:52  nosklo: laziness is a great quality... what Wild_Cat said
16:53  phetips: dash: the _normal_ situation when you want to _learn_ something is that you _figure_ it out and not just get someone else to do it
16:53  dash: phetips: and you have to read some code to figure out how a thing works
16:53  mahound: hello
16:53  dash: phetips: do you'd prefer to learn stuff without other people doing the work for you?
16:53  phetips: you keep arguing as if learning == achieving fastest/best result
16:53  dash: s/do/so/
16:54  phetips: no, i prefer learning over googling for the best result and leaving it at that
16:54  phetips: i prefer thinking over obeying 'best practises'
16:54  mahound: i am using a contextlib.contextmanager decorator, and i'm getting occasional "Generator didn't stop" errors (no other information). shouldn't any exceptions occurring inside the code block under "with" be re-raised?
16:54  dash: phetips: well, "best practices" just means stuff nobody ever got fired for doing, so sure
16:54  phetips: dash: yes, you are still talking corporate
16:55  dash: phetips: "best practices" is a corporate term :)
16:55  phetips: yes indeed
16:55  phetips: that is what i mean
16:55  dash: phetips: Anyway
16:55  phetips: i am not trying to achieve the fastest/best result
16:55  dash: phetips: yes. the problem is that your scale of values is not in harmony with ours.
16:55  phetips: i'm trying to figure out how i can do things with computers
16:56  phetips: which is why i like to mess around with x86 assembly
16:56  dash: phetips: i don't understand the distinction.
16:56  ibansal: How can i pass a 'changed' signal for gtk.ToolItem
16:56  phetips: dash: clearly you do
16:56  csenges: i want to catch the tk root.mainloop() event to start my gui properly. is there a callback i can set or a startup method i can overwrite?
16:56  pantsman: your idea of learning is an odd one, if it involves ignoring what others have already discovered
16:56  phetips: pantsman: i have never said ignoring best practises
16:56  phetips: at all
16:57  phetips: i have just argued against implementing them because (quoting once more my key point:)
16:57  phetips: < dash> phetips: writing code is the worst way to learn stuff
16:57  whoever: to put file(s) in the current working directory is it ($wd)?
16:57  phetips: that is the argument dash uses to tell me to implement twisted
16:57  dash: phetips: and again, what I mean by that is: readign code is superior to writing it
16:57  phetips: because writing code is the worst way to learn ...
16:57  Wild_Cat: whoever: os.getcwd
16:58  dash: phetips: programmers should read more code than they write.
16:58  pantsman: phetips: twisted is generally accepted as a good way to solve your problem, so if you want to learn how that problem is solved, look at twisted's source
16:58  phetips: dash: oh i do, but i learn most when iḿ writing
16:58  phetips: after i read something
16:58  phetips: i write something, and not just implement something
16:58  whoever: Wild_Cat: i am using tarextract so tarextract(os.getcwd)
16:58  phetips: i know nothing about python, how do you think i cooked up this (admittedly horrible) piece of code wihtout knowing python
16:58  Wild_Cat: whoever: os.getcwd is a function. You need to call it to get the current working dir
16:58  dash: phetips: I don't understand the difference between "write" and "implement"
16:58  phetips: by reading
16:59  phetips: dash: when i say implement i am referring to your suggestion to use
16:59  mahound: cause i mean... if i'm getting this kind of error, i guess it means the original exception is not being re-raised... no?
16:59  phetips: solve_problem() over trying to figure it out yourself
16:59  pantsman: if you want to learn how to write good python, read good python
17:00  phetips: if you want to learn how to write better python, write horrible python, read good python, write better python
17:00  dash: phetips: 'implement' means 'write', not 'use' :)
17:00  phetips: seriously
17:00  phetips: dash: i'm sorry english fail then
17:00  dash: <3
17:01  phetips: not my main language
17:01  phetips: just as python isn't ;p
17:03  phetips: i just cannot agree with the statement that to become a good programmer you need to learn how to use the best libraries, what if you come across some problem that there isn't some pre-baked best-practise solution for?
17:03  pantsman: btw reading existing implementations is hardly lazy, you will have to work hard and learn fast to understand them
17:03  phetips: pantsman: yes, but the argument is shifting
17:03  dash: phetips: Then you write code to deal with it
17:03  phetips: i do agree that reading code is good practise, never denied that
17:03  dash: phetips: what's surpsiign about that?
17:03  dash: er, surprising
17:03  phetips: about what?
17:04  dash: english _is_ my first language but i stll can't type it apparently :(
17:04  dash: phetips: plenty of times you have to write code to deal with a problem there's no good existing solution for
17:04  phetips: you recommend starting out with a framework to learn python, isn't a framework geared towards the problem domain?
17:05  phetips: isn't a framework a "frame" in which you code
17:05  dash: phetips: "a framework to learn python"?
17:05  phetips: no
17:05  dash: phetips: no
17:05  phetips: start out with a framework, to learn python
17:05  dash: phetips: a framework is a pile of code you can use to solve some problems :)
17:05  NelleV: phetips: from my point of view; you learn a program by coding
17:05  dash: Python, too, is a pile of code you can use to solve some problems
17:05  phetips: yes, and instead of bothering with the language itself, you bother with method names and predefined constants
17:05  NelleV: phetips: I've learnt C++ by using UNO, on OOo
17:06  NelleV: phetips: UNO's a framework, it didn't stop me from learning C++
17:06  dash: phetips: False dichotomy, I think
17:06  phetips: dash: you mean a language is it's frameworks too?
17:06  dash: phetips: What?
17:07  pantsman: are you not writing Python code when you use those frameworks?
17:07  dash: phetips: I mean that "learning to use Python" and "learning to use some code written in Python" are both valuable and don't conflict with each other at all
17:07  papna-work: Frameworks are geared to solving certain problems. To learn to code, you practice by solving problemns.
17:07  papna-work: 2. ???
17:07  papna-work: 3. Profit!
17:08  dash: phetips: of course you are. you seem to think that learning to use a Python library will impair your ability to learn the language
17:08  NelleV: dash: I do agree that twisted's not the best framework to start with :p
17:08  phetips: perhaps i have had horrible experiences with frameworks so far :)
17:08  papna-work: NelleV: That depends what problem you want to solve.
17:08  phetips: perhaps the python one's are better (and i truly hope they are)
17:08  kerio: dash: using twisted as a neophyte is... impratical
17:08  dash: NelleV: if you want to write numerical simulations or screensavers maybe
17:08  kerio: *impractical
17:09  NelleV: papna-work: it depends how crazy you wanna get you mean ? I was already insane, so it wasn't a problem
17:09  dash: kerio: why?
17:09  kerio: dash: dunno, i kinda like actually knowing what's going on
17:09  dash: phetips: what did you have a horrible experience with?
17:09  kerio: and for something like twisted, that's pretty much impossible for a neophyte
17:09  dash: kerio: Don't kid yourself
17:09  dash: kerio: noen of us know what's going on.
17:09  dash: er none
17:09  kerio: yeah but we can pretend!
17:09  phetips: i am just coming from an entirely different mindset, i'm a guy who learned ASM before C, just so i wouldn't feel like i was taking things in C for "granted"
17:09  phetips: dash: Zend framework
17:09  dash: phetips: Right, that's dumb
17:10  dash: phetips: Haha oh man
17:10  phetips: dash: not at all and i do not regret it at any rate
17:10  dash: phetips: PHP is bad from top to bottom, there is nothing good in it.
17:10  kerio: hahaha wow
17:10  NelleV: dash: if you have no knowledge of python, no knowledge of asynchronous programming, you might not want to start with twisted
17:10  phetips: and i am confident in saying that it has made me a better c coder
17:10  dash: phetips: So yes, I would indeed expect you to have a bad experience with it.
17:10  kerio: phetips: how can you be so confident
17:10  phetips: dash: no argument there
17:10  dash: NelleV: What would you start with instead? Stevens? :)
17:10  Wild_Cat: dash: the parsing errors in Hebrew are pretty fun, though.
17:10  nosklo: asynchat?
17:10  papna-work: Does z.i distinguish between class attributes and instance attrbiutes? I guess not? I guess I shouldn't bother?
17:10  NelleV: dash: I would start by another project xD
17:11  papna-work: NelleV: That depends what problem you want to solve.
17:11  dash: papna-work: well maybe the class provides an interface
17:11  dash: NelleV: Such as?
17:11  papna-work: dash: Ugh. I don't think I'm going to do that.
17:11  papna-work: Actually...I may.
17:11  dash: papna-work: i wouldn't either unless it was relevant
17:11  NelleV: dash: I dunno. Write a dummy web application. A C++ wrapper
17:12  phetips: this discussion is silly, learning for the sake of learning is not the evil of our time.. in fact it is the sole reason you should be learning anything at all
17:12  NelleV: dash: write a program that displays a train in your terminal :p
17:12  NelleV: ok, maybe not the last one
17:12  phetips: you anti-hackers
17:12  pantsman: ouch
17:12  papna-work: phetips: Hackers like doing for the sake of doing.
17:12  papna-work: Not learning for the sake of learning.
17:12  dash: phetips: yeah, no.
17:12  phetips: not in your sense of the word "doing"
17:12  phetips: of using best practises and pre baked libraries
17:13  papna-work: phetips: You're confusing "hack" and "hacker.
17:13  dash: phetips: The world is too full of crappy broken software to waste time on software that doesn't work as well as it can
17:13  phetips: no i am not
17:13  NelleV: phetips: pre baked libraries xD
17:13  phetips: NelleV: i was waiting for a remark on that ;p
17:13  NelleV: phetips: ok, maybe you should have a look at twisted
17:13  Juhaz: phetips, if people thought like you do, and refused to utilize the work of those that came before, we'd still be living in caves
17:14  papna-work: phetips: A "hacker" isn't someone who makes only "hacky" stuff.
17:14  NelleV: phetips: I don't like loosing my time reinventing the wheel
17:14  phetips: Juhaz: yes only thing is that i do not refuse to utilize the work of others AT ALL
17:14  NelleV: phetips: and for me python is all about not reinventing the wheel
17:14  phetips: not once
17:14  phetips: i am just saying that to learn you have to think outside the box aswell
17:14  NelleV: phetips: instead of loosing your time coding something that already exists, you could have a look at a lot of libraries that do awesome stuff
17:14  papna-work: To learn effectively, you don't avoid boxes.
17:15  phetips: if everyone thought like you, we would still be inside caves.. because that was the "best practise" 5000 years ago, and no one would've bothered to come up with something else.. because after all it was the best practise
17:15  papna-work: To accomplish effectively, you are intimate with the boxes.
17:15  dash: phetips: Nobody's denied that at all
17:15  dash: phetips: Anyway, your view isn't consistent. Why learn Python? it's nothing _but_ a big "pre baked library"
17:15  papna-work: Python's a library that's much bigger than twisted.
17:16  phetips: dash: i am not saying i am not interested in getting things done
17:16  phetips: i am just denying "< dash> phetips: writing code is the worst way to learn stuff" to the best of my abilities here
17:16  dash: phetips: (it was by reading Python's code that I learned how to write my own language implementation)
17:16  phetips: and ruthlessly quoting it out of context, over and over, while at it ;p
17:16  Trashlord: how is writing code the worst way to learn stuff?
17:16  dash: phetips: Yeah, and you're still making the same mistake
17:16  phetips: THANK YOU TRASHLORD
17:17  dash: Trashlord: Every other way of learning is better
17:17  phetips: ...
17:17  dash: Trashlord: that is how.
17:17  phetips: you sound like a programming nazi tbh
17:17  dash: phetips: What does that even mean?
17:17  dash: phetips: Be specific.
17:17  Juhaz: clearly you do learn by writing code, the problem is what you learn.
17:17  Trashlord: dash: I believe people learn to program through writing useful programs
17:17  phetips: that you want coders to conform to best practices, and you claim we would be cavemen if they didn
17:17  meinwald: Different people learn differently.  Some learn more by studying and some more by doing
17:17  dash: Trashlord: Sometimes
17:18  dash: Trashlord: But that's not the only way to learn stuff
17:18  Trashlord: of course it's not the only way
17:18  phetips: i learn more by doing, and i thought python was the language to go with if you did
17:18  dash: trashlord; and every other way is better.
17:18  phetips: but clearly iḿ mistaken
17:18  Trashlord: I have learned about C, for example, through reading the K&R book
17:18  NelleV: I learn the most throught code review
17:18  dash: phetips: It might be! I don't really care if it is or not
17:18  Trashlord: but I also practiced what I had learned, and discovered new things
17:18  NelleV: doing it and having feedback
17:19  dash: phetips: Python is an excellent language for solving problems, though
17:19  dash: Trashlord: Of course.
17:19  jhl: How can I obtain a list of the ASCII-based text encodings that the json module can use to read in a .json file?
17:19  phetips: i haven't managed to get through the K&R book once, and i've tried several times.. but i have done some linux kernel module development
17:19  lorenzocabrini: phetips: judging a language by the opinions of some people in #python is not really fair...
17:19  phetips: lorenzocabrini: i know, i was being dramatic
17:19  dash: jhl: what's an "ascii-based text encoding"?
17:20  jhl: dash: From
17:21  jhl: dash: From http://docs.python.org/library/json.html: "If s is a str instance and is encoded with an ASCII based encoding other than UTF-8 (e.g. latin-1), then an appropriate encoding name must be specified."
17:21  jhl: I know 'latin-1' works. Just trying to figure out what other strings are valid encoding names.
17:21  papna-work: jhl: That's a silly feature to an extent. JSON specifies utf8.
17:22  papna-work: jhl: Why do you want this?
17:22  pantsman: how will having a list of encodings help you to determine if something isn't UTF-8?
17:22  jhl: papna-work: I agree, but I have a situation that involves large JSON files encoded in latin-1 and possibly other encodings.
17:23  jhl: papna-work: I'm loading a user-defined dictionary of approximately 150,000 entries.
17:23  papna-work: jhl: The codecs module documentation lists available codecs. It won't tell you which are supersets of ASCII, but that's not hard information.
17:23  papna-work: jhl: Who gave you these data?
17:23  papna-work: I'll go kick their ass.
17:23  pantsman: "this is in windows-1251, now let me just consult my list of encodings that aren't UTF-8 to see if it's UTF-8 or not..."
17:23  papna-work: Also, you don't have JSON files encoded in latin-1.
17:23  jhl: papna-work: A stenographer. I'll warn her you're coming! ;)
17:23  papna-work: There's no such thing (unless it's also utf-8)
17:24  papna-work: All JSON files are utf-8.
17:24  jhl: papna-work: Fair enough. I have a file encoded in latin-1 with which I abuse the json module.
17:24  phetips: dash: when i do something, i just want to know how it works entirely.. and from a (corporate) programming point of view, that might indeed be more of a flaw than an asset.. but it is what computers are all about for me :)
17:24  phetips: so indeed perhaps i should not argue it is the best way to learn
17:24  phetips: it is just the only way, for me 8)
17:24  papna-work: phetips: Then Python isn't for youl.
17:25  dash: phetips: OK
17:25  papna-work: phetips: Perhaps you want to pick up a multimeter.
17:25  dash: phetips: i have a video for you then
17:25  dash: phetips: http://www.infoq.com/presentations/click-crash-course-modern-hardware
17:25  papna-work: jhl: Available encodings seems like an odd measure. Figure out what encodings you actually HAVE then use the JSON module or transcode to utf8 first if it's not there.
17:26  phetips: dash: in fact i have studied cpu internals quite a bit yes
17:26  phetips: and i find it much more fun to do tha tlearning about progamming libraries :)
17:26  dash: phetips: Great. Go do that some more, then.
17:26  phetips: haha
17:26  phetips: i cannot use python because i do not come from the same mindset as you ;p ?
17:26  papna-work: phetips: Then you're not interested in Python.
17:26  phetips: in fact, i am
17:27  dash: phetips: I couldn't possibly stop you from using Python if you wanted to.
17:27  phetips: i just still want to know how it works, too
17:27  papna-work: phetips: No, the mindset you describe does not lead to a rational interest in Python.
17:27  phetips: papna-work: perhaps i am not a rational being
17:27  jhl: phetips: I appreciate your stance and occasionally even adopt it, though less so now than previously. Reminds me a friend of mine how started as a mechanical engineer, then taught himself analog electronics, then taught himself digital electronics, then built his own computer, then programmed it in hex. He understands all those things inside and out. But he can barely use a computer.
17:27  jhl: /s/how/who
17:28  dash: well if you're using a modern x86 chip you have no idea what it's actually doing at any given time, anyway :)
17:28  phetips: hahaha yes jhl
17:28  pozic: dash: I think lots of people do have some idea how it works.
17:28  papna-work: phetips: Welllllll, we cannot have a discussion about your motivations if they arne't based on reasons.
17:28  jhl: phetips: That said, he really enjoyed learning all that stuff and is happy with it all.
17:28  dash: pozic: Wrong ideas mostly, these days
17:28  pozic: dash: it's just that it is extremely complicated.
17:28  delaney: are there any metric for how much overhead there is in creating new process with the multiprocess module?
17:28  dash: pozic: watch that Cliff Click video :)
17:28  pozic: dash: memory coherence mess, mostly.
17:28  dash: delaney: just space and time, i guess
17:28  phetips: jhl: perhaps i am just that guy struggling to learn a language that does allow me to achieve results :)
17:29  papna-work: delaney: Not really. n-times the memory of stuff that's in each. That's not usually the performance issue.
17:29  papna-work: delaney: What problem are you looking of solving with the subprocess module?
17:29  dash: anyway, what orwell said still holds true for program design today
17:29  dash: ignorance is strength
17:29  delaney: well i'm writing a game server than host multiple games
17:29  phetips: well than my weakness is that i do not tolerate ignorance :)
17:30  phetips: *than = then
17:30  pozic: dash: that's from 1984.
17:30  magicblaze0071: will both these asus motherboards - P7H55-M LE and A455-2996 take the same ram - CT 25664BA1339 2GB PC10600 DDR3 ?
17:30  dash: phetips: Probably.
17:30  pozic: dash: ah, should have read your previous sentence.
17:30  dash: pozic: Sure. But he also put three fundamental software design rules in there.
17:30  jhl: phetips: If you really want to understand what's going on under the hood, I recommend learning C for microcontrollers and try to implement some of the Python interpreter for a microcontroller. Very informative. :)
17:30  delaney: not sure what the 'right' way to host 100s of games is, threads, greenlets or multiprocess are the main areas
17:30  pozic: dash: what a visionary.
17:30  dash: delaney: what do these game servers do?
17:31  dash: delaney: are they all the same game?
17:31  phetips: jhl: i have been messing with microcontrollers a bit lately
17:31  phetips: looking into coding interrupt controllers
17:31  pozic: Implementing a programming language in theory only requires you to have some basic input and output instructions and one computational operation.
17:31  jhl: Cool.
17:31  phetips: but yeah sometimes i come up with an idea, and i think
17:31  phetips: man i wish i code in a language like python
17:31  delaney: dash: yes obviously the states/levels are different, but the core rules are the same
17:31  phetips: ;)
17:31  pozic: In practice, people do much more complicated things, because they don't write ultra-generic tools that would be able to turn that into something efficient.
17:32  dash: delaney: sure. i'd use twisted and do it all in a single process
17:32  papna-work: delaney: You probably aren't interested in the multiprocessing module, which is for parallelization of CPU-intensive task.
17:32  Menuhin: hi
17:32  delaney: the AI is cpu intensive, hence why i want to mutliprocess :P
17:32  papna-work: delaney: You might want multiple actual processes, or you probably want some scalable network concurrency model, such as Twisted provides.
17:33  delaney: well we are using zeromq on the messaging side, so orders faster than twisted
17:33  dash: "orders faster"?
17:33  delaney: and i can do inproc stuff for the messaging
17:33  papna-work: delaney: That's not true or especially claimable.
17:33  phetips: jhl: but yeah the ability to embed python into things like that, and it's connection with C is what has drawn me to it in the first place
17:33  dash: faster at what, I wonder
17:33  papna-work: delaney: You have a server with hundreds of cores?
17:33  Menuhin: :O
17:34  dash: phetips: embedding python in stuff isn't a great idea, really
17:34  delaney: no, orders is over stated, but we do have a 16 core box
17:34  jhl: phetips: Take a look at PyMite. Not sure if it's still active.
17:34  papna-work: jhl: Then launching processes for 100 CPU-bound tasks won't work great.
17:34  ibansal: hi can anyone provide me instance of how can i create my own signal 'changed' for toolitem
17:34  dash: delaney: sure, i run twisted servers on 16 core boxes at work
17:34  ibansal: gtk.toolitem
17:34  DigitalKiwi: python for AI is hahaha
17:34  dash: DigitalKiwi: tell that to the dudes who wrote Civ 4. :)
17:35  delaney: isn't twisted a single threaded thing?
17:35  dash: delaney: Sure
17:35  jhl: dash: But embedding Python-like syntax is awesome.
17:35  DigitalKiwi: civ 4 what a joke! ;p
17:35  delaney: what's going on with the other 15?
17:35  dash: jhl: No, it's not
17:35  jhl: papna-work: 100 CPU-bound tasks?
17:35  dash: delaney: what do you mean other 15? there's more than one process running :)
17:35  dash: so we saturate all processors
17:36  jhl: dash: I stick by my guns, but I can understand why it might not be right in every instance.
17:36  dash: jhl: why would you want to embed python rather than extend it?
17:36  dash: http://twistedmatrix.com/users/glyph/rant/extendit.html
17:36  DigitalKiwi: Lua <3
17:37  Wild_Cat: dash: the most common use case for embedding Python would be interaction wit legacy code or a 3rd-party engine.
17:37  Wild_Cat: with*
17:37  phetips: i have to say
17:37  dash: Wild_Cat: but you can do that via extending, of course.
17:37  phetips: i have never recieved this amount of discouragement against learning a language in a channel dedicated to it ;p
17:38  dash: phetips: #python is not here to make you feel good
17:38  Wild_Cat: dash: I think it'd take significant refactoring of the legacy code (and, in the case of 3rd-party binary blobs, that may not always be an option)
17:38  phetips: it is to recommend against using python for purposes redeemed UNPURE
17:38  DigitalKiwi: phetips: the things you say drew you to python are better done by other languages >.> it's kind of amusing
17:38  delaney: we are already using zeromq so saying 'use twisted' isn't really helpful at the moment
17:38  dash: phetips: no
17:38  jhl: dash: I agree with glyph. I don't think we're talking about the same thing here.
17:38  magicblaze0071: is there a problem if i just tape a ssd onto my box? I dont want to pay $30 for a box for it. Any other suggestions?
17:39  dash: phetips: our recommendation is to write programs in python, and write them to work as well as possible.
17:39  delaney: do you know what twisted is doing under the hood?
17:39  phetips: DigitalKiwi: http://www.immunityinc.com/products-immdbg.shtml this is one of the things i meant
17:39  magicblaze0071: oops, sorry wrong room
17:39  dash: delaney: Sure.
17:39  skyl: can I get a traceback in ReST or sth, html even?
17:39  phetips: dash: good, then i guess there is no conflict in our intentions
17:40  dash: phetips: great.
17:40  dash: skyl: the 'cgitb' module may be interesting to you
17:40  phetips: except that i will still run python in a debugger and see what it's doing ;p
17:40  DigitalKiwi: phetips: i just got in here a few minutes ago and haven't read everything you wrote, but what i have read makes me think Lua fits  your use case better than Python
17:40  phetips: because that is my fetish
17:40  phetips: DigitalKiwi: nahh
17:40  dash: phetips: well, that's how i learned the language
17:40  pozic: phetips: in Squeak you can inspect whatever you want.
17:40  dash: phetips: stepping through code in zope 2
17:41  DigitalKiwi: python makes microcontrollers have night terrors
17:41  jhl: dash: What I mean by implementing a python-like syntax in a microcontroller is to write a simple interpreter in C that roughly follows some syntactic conventions of python. Mind you, this is on a 8- or 16- bit machine with kilobytes of memory, not the sort of thing a normal python interpreter could fit within.
17:41  Wild_Cat: DigitalKiwi: well, Lua is far easier to embed than Python, that's for sure.
17:41  pozic: phetips: and it has better tools, imho, just a factor of 100(?) less popular.
17:41  Wild_Cat: jhl: with that kind of constraints, I'm not sure you're gonna be able to embed anything, though.
17:41  pozic: phetips: and if you want to know exactly what is happening before your code runs, use Agda or Coq.
17:41  dash: pozic: squeak has some nice ideas, but it has some pretty crippling flaws
17:41  dash: pozic: hahaha
17:41  phetips: no ;p
17:41  pozic: dash: tell me about the flaws :)
17:41  jhl: Wild_Cat: I never said it was easy. :)
17:42  dash: pozic: no module system
17:42  phetips: i am going to use python, and i am still going to want to know exactly what happens
17:42  dash: phetips: Get used to disappointment.
17:42  phetips: not before it runs though
17:42  dash: pozic: no filesystem storage of code
17:42  pozic: dash: just putting a dot in some places of a name doesn't have any inherent advantages.
17:43  pozic: dash: you can store your code in a filesystem.
17:43  phetips: seriously dudes, using libraries and all has it's valid points.. but actually encouraging ignorance is overdoing it
17:43  pozic: phetips: you only need to be an expert in your area.
17:43  pozic: phetips: anything else is irrelevant.
17:43  papna-work: phetips: Ignorance is great.
17:43  OOPMan: Hey guys, I'm getting the following error: UnicodeDecodeError: 'ascii' codec can't decode byte 0xbf in position 0: ordinal not in range(128)
17:43  DigitalKiwi: especially when it is ignorance of incredibly stupid practices ;D
17:44  papna-work: OOPMan: You're mixing unicode strings and bytestrings.
17:44  OOPMan: With a call to re.sub
17:44  phetips: i sincerely hope i am being trolled all along
17:44  papna-work: OOPMan: Stop it.
17:44  dash: pozic: I agree that "just putting a dot" has no advantages
17:44  dash: pozic: but that is not what I was talking about.
17:44  pozic: dash: or do you mean that in Python a module is an actual object?
17:44  dash: pozic: There's that, too.
17:45  pozic: dash: I suppose you could argue that that is useful, but I never use that functionality, and similar constructions can be done in Smalltalk if you care.
17:45  OOPMan: papna-work: Okay.
17:45  tntcoda: Hi, if i have a list of lists like this: http://pastebin.com/Cwj8MTdj please could someone tell me how I can sort the lists variable based on the 2nd numerical element in the list?
17:45  infobob: http://paste.pocoo.org/show/275450/ (repasted for tntcoda)
17:45  pozic: dash: exactly because everything is available at run-time.
17:45  papna-work: phetips: I am currently writing an MPI program. I don't know how MPICH sends messages around. Not knowing is positive, since OpenMPI sends them differently and I'm writing valid OpenMPI code too. I don't care. It doesn't help me do my task and it would be no better (and possibly worse) to try to think about what it's doing.
17:45  papna-work: tntcoda: sorted(lists, key=operator.itemgetter(1))
17:45  tntcoda: papna-work, thanks very much :)
17:46  papna-work: tntcoda: http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#sorting-with-keys
17:46  phetips: papna-work: lol that really makes no sense at all, you are saying because you know nothing of these different implementations you are writing a program that works with all of them
17:46  dash: phetips: _exactly_
17:46  pozic: dash: do you have an URL of that video you were talking about that works?
17:46  phetips: you could do that too if you actually knew the different implementations
17:46  dash: phetips: this is called "abstraction"
17:47  phetips: dash: ......
17:47  phetips: rofl
17:47  phetips: ignorance = abstraction :P, yeah right
17:47  phetips: there is much more to the word ignorance than just abstracting things away
17:47  pozic: Abstraction is getting told a predicate P holds for some object x.
17:47  phetips: you can abstract things away even if you know how they would work in a situation where they would be relevant
17:47  pozic: How P is achieved in x is irrelevant.
17:48  pozic: That's your ignorance part there.
17:48  phetips: i know what abstraction is, but you are saying that kind of abstraction could not exist if you knew about how P is achieved
17:48  phetips: which is retarded
17:48  tos9: Another unit test question: how do I test proper run with a missing module without running my code inside a virtualenv without that module? (i.e. how can I prevent a specific module import I guess)
17:49  OOPMan: papna-work: I'm having some trouble eliminating the issue. My function call is re.sub(pattern, replace, input) where pattern is a rawstring, replace is a callback and input is the input value
17:49  OOPMan: papna-work: I'm guessing the input value is coming in as unicode, right?
17:49  babilen: Hi all -- Does the Python 2.5 makefile defines an "uninstall" target?
17:50  jhl: papna-work: Yeah, transcoding to UTF-8 is the way to go. I shouldn't give users an encoding option - nothing but bad will result.
17:50  lorenzocabrini: babilen: grep uninstall Makefile
17:50  lorenzocabrini: should help
17:50  OOPMan: papna-work: But which part of the re is causing the issue? The replacement pattern is just a raw string? Should it be a unicode raw string?
17:50  OOPMan: papna-work: Or is my replacement callback the issue?
17:50  babilen: lorenzocabrini: Thanks - I would have done that if I had the source. But you are right, I'll download the source, unpack it and grep.
17:51  phetips: and my problem with the kind of ignorance you encourage, is that when i have a problem with a script i'm trying to write a certain way
17:51  phetips: the only response you can generate is, use twisted
17:51  ibansal: please guide me on creating a signal which could check for any value being entered in a box for gtk.toolitem
17:51  teratorn: phetips: that's usually the best advise
17:52  babilen: Just assuming that there is no uninstall target -- How would I uninstall it?
17:52  dash: ibansal: you might have better luck on #pygtk on irc.gnome.org
17:52  coulix_greg__: Hello is there a way to shrink this method, like in ruby ? http://friendpaste.com/2fErfeM7uTB15ll6104mQ7
17:52  ibansal: dash, thanks
17:52  teratorn: phetips: the kind of ignorance that resists that advise is quite common, unfortunately
17:53  phetips: for a reason
17:53  dash: phetips: for some kinds of problems that's the best answer. why's that bad?
17:53  jhl: phetips: Suggesting a tool isn't encouraging ignorance. It's encouraging you to go learn about the tool.
17:53  phetips: true
17:53  dash: tos9: i have some code for that kind of module stuff
17:53  dash: tos9: it's not entirely finished though
17:53  tos9: phetips: I don't think that most people that resist that advice in here do it because they're qualified to be making such a decision.
17:53  jhl: It just so happens that twisted *is* the right tool for a lot of what people want to do.
17:54  nosklo: ibansal: I'm sorry, I was afk for a moment
17:54  dash: phetips: anyway I find your bigoted attitude hurtful
17:54  nosklo: ibansal: I don't understand what you want to do, yet
17:55  phetips: but the question was not, "how should i solve this problem?", the question was "why is the read() statement not reading anything... to which "use twisted" is definitely not an asnwer... and i understand i cannot expect to get an answer to anything i post in here, that's not what i'm complaining about
17:55  nosklo: oh well
17:55  nosklo: ibansal: I don't understand what you want to do, yet
17:55  nosklo: ibansal: I have your code -- where's the entry you're refering to?
17:55  tos9: phetips: don't be dumb. You can get an answer for whatever you'd like, but if you're doing something dumb don't expect everyone else to help out
17:55  dash: phetips: i hope you can overcome your anti-ignorance bias.
17:55  ibansal: nosklo, can you guide me on creating a signal which could check for any value being entered in a box for gtk.toolitem
17:55  phetips: :P
17:56  phetips: okay well thanks anyways, i guess the read() statment is not working because i'm not using twisted
17:56  nosklo: ibansal: what do you mean by box for gtk.toolitem?
17:56  phetips: i shall from now one use twisted -.-
17:56  phetips: you win.
17:56  teratorn: phetips: we could help you fix your issue, sure... but writing your own networking code is tricky, and there are about 2 dozen corner cases and platform-specific issues that you *will not* know about until they bite you
17:56  DigitalKiwi: remember, when using javascript you use jquery to add two numbers!
17:56  phetips: they are biting me
17:56  phetips: and iḿ trying to know about them in the future :)
17:56  tos9: dash: Are you gonna tease me :). It's not terribly important, I already know myself that simplejson and json are compatible for everything I've done in my module, but can I see how you're trying to do such a thing?
17:57  phetips: they will not bite me if i use twisted
17:57  phetips: and that is _exactly_ my point
17:57  dash: tos9: http://launchpad.net/exocet
17:57  nosklo: ibansal: the question isn't clear enough
17:57  ibansal: i have to create a signal similar to 'clicked' signal present in code which could check if there is any change done in the button object height  or object width
17:57  tos9: dash: Oh this is your __import__ business... Nice, alright, I'll take a look
17:58  ibansal: nosklo, i think now it would be clear
17:58  teratorn: phetips: I'm not sure what you're saying
17:58  phetips: i am just careful when i see those kind of responses when people want to know something
17:58  nosklo: ibansal: so you want to check for a resize?
17:58  dash: tos9: your problem is one of the things exocet is meant to solve, but I haven't tried it out extensively :)
17:58  phetips: "excuse me, do you know which bus i need to get to central station", "why would you do that? a helicopter is much faster"
17:58  coulix_greg__: ?
17:58  pantsman: christ, this is still going on?
17:58  phetips: instead of, "no i don't know", or "yes, bus 30"
17:58  dash: phetips: remember the rules of the evil overlord
17:59  ibansal: nosklo, yep
17:59  DigitalKiwi: pantsman: unfortunately
17:59  dash: phetips: "if I have an unstoppable superweapon, I will use it early and often"
17:59  nosklo: ibansal: well, what could cause a resize? Is the user allowed to resize your button with the mouse?
17:59  dash: phetips: anyway, we've done this todeath
17:59  teratorn: phetips: fortunately #python isn't a directory service, or a faq machine :)
17:59  coulix_greg__: can't all() take a second argument ?
17:59  phetips: dash: yessir
17:59  lorenzocabrini: phetips: if you don't want to use twisted you could still *read* twisted, since you'd like to reinvent the wheel, at least look at how the wheel was invented the first time.
17:59  ibansal: nosklo, just give me a min
17:59  babilen: lorenzocabrini: Well, doesn't look like there is an uninstall target, which I assumed. Any other tips on removing Python?
18:00  tos9: dash: K, humor me. Isn't this a dumb problem though? Every library in the world has an import chain somewhere. How is this not possible already? If lvh says they don't push code that isn't 100% covered, how do they get around this? Running from setup to setup and switching modules in and out?
18:00  phetips: teratorn: 'i do not want to answer that' is equally fine
18:00  teratorn: it's a place where people come when they want to learn about writing good software, or at least that's the idea
18:00  phetips: lorenzocabrini: which is what i am doing atm :)
18:00  dash: phetips: #python does not exist to satisfy anyone's curiosity, it is to help people write the best programs possible. that is why when people ask for helping doing stuff in a less than ideal way we recommend better ways of doing stuff.
18:00  phetips: dash: ^
18:00  lorenzocabrini: babilen: hm.. not off-hand, sorry
18:00  teratorn: phetips: it's possible nobody knew the answer
18:00  phetips: teratorn: i already typed 'i do not know'
18:00  phetips: but haha
18:01  phetips: this is turning way out of hand ;P
18:01  phetips: i am not making any claims about the usefullness or purpose of this channel
18:01  Trashlord: heh
18:01  DigitalKiwi: i am not a crook!
18:01  phetips: i just said i want to learn about things and not just solve them :)
18:02  dash: pozic: www.infoq.com/presentations/click-crash-course-modern-hardware
18:02  phetips: i am just saying the answer "why would you want to do that?" is evil in my opinion :)
18:03  dash: hah, oh man: http://github.com/ramen/phply
18:03  dash: a PHP parser in Python.
18:03  phetips: =)
18:03  phetips: and yes PHP is aweful, just for the record
18:03  ibansal: nosklo, the button is such that alongside the button a field is also displayed which shows the current value of height and width like you see in msword font size.      Presently we have to click on the respective button to change the height and width but what i want to do is that as we enter value in the box manually it should change automatically
18:03  teratorn: phetips: oh come on, people come in here asking all kinds of ridiculous questions, and wanting to do all kinds of ridiculous things... asking "why" is often highly constructive :)
18:03  papna-work: Didn't KirkMcDonald try to write EBNF for PHP at some point?
18:04  dash: papna-work: heh, i don't know.
18:04  pozic: dash: right, but that video doesn't work.
18:04  nosklo: ibansal: in which box do you want to enter the value?
18:04  pozic: dash: 'connection timed out' with 20 attempts or so in wget too.
18:04  dash: pozic: dang.
18:04  dash: pozic: well that's the only one i know about
18:04  phetips: teratorn: haha yes okay
18:05  phetips: teratorn: cannot disagree
18:05  pozic: dash: it seems to work now.
18:05  pantsman: I interviewed for a PHP job earlier this year, I didn't get it, they said I was "too opinionated" :(
18:06  nosklo: ibansal: do you mean the user will type the value directly in the "field"? Is that field a gtk.Entry? Where is it, in the code?
18:06  whoever:  http://paste.pocoo.org/show/275458/
18:06  pozic: pantsman: they need workers, not people that know too much.
18:06  DigitalKiwi: pantsman: did you wear your #sex shirt to it?
18:06  whoever: here is my script
18:06  pozic: pantsman: just look at your nick.
18:06  pozic: smarty pants.
18:06  DigitalKiwi: I think that is the syntax anyway
18:07  DigitalKiwi: sex symbol in Ruby
18:07  whoever: it errors on line 2 unexpected ( , but it rums fine if i tue it in python line bu line
18:07  pantsman: DigitalKiwi: wouldn't that be :sex
18:07  whoever: can some one assist me
18:07  ibansal: nosklo, check http://imagebin.ca/view/RTR-mmOP.html
18:07  DigitalKiwi: maybe
18:07  whoever:  http://paste.pocoo.org/show/275458/
18:07  nosklo: whoever: looks like you're using your shell to run your script, not python
18:07  zubin71: whoever: whats the problem?
18:07  DigitalKiwi: http://www.bash.org/?925050
18:07  DigitalKiwi: I never claimed to be good at ruby :)
18:08  pantsman: I'm no good at Ruby either
18:08  nosklo: whoever: I mean, your shell is interpreting the script, instead of python compiler/interpreter
18:08  DigitalKiwi: but yes it appears : is the symbol one
18:08  schlaftier: otherwise, the pun would be lost
18:08  nosklo: whoever: run it by typing "python myfile.py" and it should work
18:09  whoever: athe: i pasted my script above and runs mine if i tupe line by line in sell but when i put it in a .py it error out on line 2 'unexpected ('
18:09  nosklo: whoever: looks like you're using your shell to run your script, not python
18:09  nosklo: whoever: run it by typing "python myfile.py" and it should work
18:09  nosklo: ibansal: ok. you want to type the text directly on one of those boxes. What are those boxes?
18:10  ibansal: nosklo, can you see the boxes having numeral enteries
18:10  pantsman: DigitalKiwi: I sent that bash.com link to 2 ruby devs in my company
18:10  pantsman: should I go and hide now?
18:10  whoever: nosklo:  that worked so whts a good fix for what i want to do
18:10  phetips: teratorn: i guess what i mean is that when i ask a question like "Should component X work like this, if so; why is it not in this case?" the answer "use component Y" is slightly lame
18:10  DigitalKiwi: pantsman: haha
18:11  nosklo: whoever: there's nothing to fix. The shell can't run python code, you have to use python to run python code.
18:11  ibansal: i need that when we change value in that instead of clicking icons beside it directly changes the measurements of image
18:11  DigitalKiwi: pantsman: if they're anything like most of the ruby devs I know, they're too puss to do anything ;p
18:11  pantsman: they found it funny
18:11  nosklo: ibansal: ok, I now understand what you want
18:11  ibansal: nosklo, that gr8
18:12  zubin71: whoever: if you wanna run your script as "./myscript.py" then add "#!/usr/bin/env python" as the first line.
18:12  nosklo: ibansal: so please tell me what are those boxes with numeral entries. Are them gtk.Entry() instances?
18:12  zubin71: whoever: im not sure if that answers your question; if not please be a bit more clear.
18:12 --- simonrvn_ is now known as simonrvn
18:13  whoever: nosklo: i remember being able to run scripts by themselws .. but they also ended with if_name_==_main_
18:13  ibansal: nosklo, yes
18:13  pozic: How much time does a large unoptimized Python graph application generally spend in garbage collection?
18:14  nosklo: whoever: scripts don't run by themselves. They are interpreted by a interpreter. If you use a shell script interpreter to interpret python code, it will give errors
18:14  whoever: zubin71: thx will try that
18:14  zubin71: whoever: which platform are you on? What do you mean by "run scripts by themselves"?
18:14  dash: pozic: three, probably
18:14  nosklo: whoever: you have to setup your OS so that your python code is ran by python interpreter
18:14  pozic: dash: I can answer questions like that for other language implementations.
18:14  pozic: dash: time can be specified as a percentage.
18:15  nosklo: ibansal: gtk.Entry() instances have the 'changed' signal that fires when there's a change in the text
18:15  papna-work: pozic: Blue-green.
18:15  dash: pozic: what do you mean by "graph application"?
18:15  Yhg1s: pozic: it all depends on how much allocations and deallocations you do.
18:15  pozic: dash: an application that has lots of circular references basically.
18:15  pozic: dash: let's say tens of millions or so.
18:16  Yhg1s: pozic: besides, Python uses refcounting for most of its collection, which doesn't take up much time.
18:16  nosklo: ibansal: that signal is inherited from gtk.Editable, since gtk.Entry is a subclass of gtk.Editable
18:16  dash: pozic: no idea, it's never been a problem for me
18:16  pozic: Yhg1s: is there ever a 'full gc'?
18:16  dash: pozic: yes.
18:16  Yhg1s: pozic: nope.
18:16  pozic: :_
18:16  Yhg1s: there is the cyclic-gc, which only tracks certain objects.
18:16  papna-work: pozic: CPython only does refcounting and cyclic cyclefinding.
18:17  ibansal: nosklo, i tried the command by changing the signal to changed instead of connect but it showed no such signal defined in toolitem
18:17  pantsman: cyclic cyclefinding sounds a bit... cyclic
18:17  papna-work: pantsman: cyclic cyclefinding for cycles
18:17  whoever: zubin71: thx tthat was what i was looking for , nosklo thx for the explination
18:17  Wild_Cat: which is great, because as long as you're avoiding cyclic references your memory management is completely deterministic.
18:17  pozic: So, basically you argue that an actual gc is a bad idea.
18:17  Yhg1s: the cyclic-gc runs after every X allocations, where X is configurable with the 'gc' module, and you can see how long it takes by calling gc.collect() manually.
18:18  Wild_Cat: papna-work: sup dawg, I heard you liked cycles, so I put cycles in your cycles, so you can garbage collect cycles while you garbage collect cycles.
18:18  papna-work: pozic: No one is arguing that.
18:18  pozic: In Haskell it's very easy to spend 10-15% in the gc.
18:18  Yhg1s: pozic: I could argue that if you want.
18:18  whoever: are comments denoted by '//' ?
18:18  papna-work: whoever: Not in Python.
18:18  Yhg1s: whoever: no. please spend some time with the tutorial.
18:18  nosklo: ibansal: yeah, that signal is not in the toolitem. It is in the gtk.Entry()
18:18  papna-work: whoever: docs.python.org/tut
18:18  pozic: In Python either the profiles never show the gc, or the gc simply doesn't use a lot.
18:18  nosklo: ibansal: gtk.ToolItem is not a gtk.Editable so it doesn't have 'changed' signal
18:18  papna-work: <3 Twisted -- "except:" with no raise or even log.err()
18:18  Wild_Cat: whoever: comments are prefixed by #. // is strict integer division.
18:18  ibansal: nosklo, okay
18:18  inuit-joe: Hey, when i goto run a script i get this error 'TypeError: must be bytes or buffer, not str' Running 3.1.1 on winxp if that means anything.
18:18  pozic: I haven't investigated the details of the profiling tools.
18:19  Yhg1s: pozic: refcounting is constant overhead, rather predictable, and with great locality of reference.
18:19  ibansal: nosklo, so how can i implement that in this case
18:19  papna-work: inuit-joe: It wants a bytes, but you're giving it a unicode string,.
18:19  papna-work: Stop it.
18:19  Yhg1s: inuit-joe: you're trying to pass strings to something that expects bytes.
18:19  papna-work: inuit-joe: Perhaps you want to encode the str with a specific encoding.
18:19  Yhg1s: inuit-joe: or perhaps you want to use Python 2.x instead, where 'str' is bytes and not unicode.
18:19  phetips: bytes(string, 'utf-8')
18:20  phetips: haha another "use Y" answer
18:20  phetips: <3
18:20  papna-work: inuit-joe: phetips: That's poor style. s.encode("utf8") is the prevailing style.
18:20  phetips: mkay
18:20  papna-work: phetips: "Use Y" is a great thing to be told.
18:20  pozic: Yhg1s: I suppose one of the advantages is less potential memory leaks in a language with a real gc, but in Python you could also write a module which tells you where the leaks are and then simply remove them.
18:20  nosklo: ibansal: checking your code, I can't find where you create the gtk.Entry()
18:20  nosklo: ibansal: it seems that you're using a gtk.SpinButton instead
18:20  phetips: papna-work: yes but this is rediculous, "why does this function not accept this parameter? " "use python 2 "
18:20  papna-work: pozic: CPython's gc scheme isn't more prone to memory leaks.
18:20  phetips: -.-
18:21  ibansal: nosklo, okay
18:21  Yhg1s: pozic: no, the problem with reference cycles is that you *can't* tell where the leaks are, not without hooks in the runtime (which is where the cycle-gc comes in.)
18:21  Wild_Cat: papna-work: well, it is, if you have cyclical refs in objects that define __del__
18:21  papna-work: Wild_Cat: The same problem exists in another scheme.
18:21  nosklo: ibansal: you have to connect the signal to the spinbutton instead
18:21  inuit-joe: papna-work, Ok, so do i declare that as a variable?
18:21  nosklo: ibansal: not to the toolitem
18:21  ibansal: nosklo, i get it now
18:22  Yhg1s: phetips: no, the error si an indication that the program or library he's using is written for Python 2.x, not 3.x.
18:22  phetips: Yhg1s: my bad then
18:22  Wild_Cat: papna-work: true. Although I'd have chosen, as an alternative, to restrict what can be done in __del__.
18:22  pozic: Yhg1s: since cycle-gc is there, there is no issue then, right?
18:22  ibansal: i had understood it completely wrong
18:22  pozic: Yhg1s: I have used the gc module to tell me where a cycle was.
18:22  Yhg1s: pozic: finding the reference cycles is now no problem, yes.
18:22  phetips: i will refrain myself from complaining now
18:22  phetips: perhaps get some sleep
18:22  papna-work: inuit-joe: That creates a bytes object. You probably want to bind a name to it or something.
18:22  Yhg1s: pozic: Python will clean them up if it can figure out how, but as soon as there's a __del__ method involved, it can't.
18:22  phetips: thanks for the provoking discussion guys ;p
18:22  phetips: laters
18:23  pozic: Yhg1s: ok.
18:23  papna-work: inuit-joe: What are you doing?
18:23  dakoda: Is the difference in speed between python and C++ minimal?
18:23  pozic: Yhg1s: or rather, it could, but you would have to modify the run-time system.
18:24  inuit-joe: Um, simple irc bot, i coded it 2.7 i think and it fully worked. but since then i moved PCs and OSs so i just reinstalled py.
18:24  Wild_Cat: dakoda: it's the opposite of minimal.
18:24  dakoda: please explain
18:24  avu: inuit-joe, python 3 isn't backwards compatible, if the code is written for python 2.x, run it with 2.x
18:24  pozic: dakoda: I would say anywhere between a factor of 20 and 1000.
18:25  _habnabit: dakoda, C++ takes forever to write, whereas python can be written quite qickly.
18:25  pozic: dakoda: for I/O code, it's less important.
--- Log closed Thu Oct 14 18:30:55 2010
--- Log opened Thu Oct 14 18:31:17 2010
18:31 --- Users 750 nicks [0 ops, 0 halfops, 0 voices, 750 normal]
18:31  dakoda: alright, thanks
18:31  Wild_Cat: papna-work: sure, you can do that, but it won't really work as "well" (yeah, right) as it does in C++. Especially if the new __class__ is implemented in C.
18:32 --- Channel #python was synced in 85 seconds
18:33  Wild_Cat: that Python runs in a managed environment helps a lot in that regard, mind.
18:33 * ibansal is away
18:34  dash: ibansal: oh really
18:34 --- avu is now known as pedobot
18:35 --- pedobot is now known as avu
--- Log closed Thu Oct 14 20:03:40 2010
