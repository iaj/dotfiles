--- Log opened Sat Jan 15 00:00:02 2011
--- Day changed Sat Jan 15 2011
00:00  limelime: screwed up
00:00  psykidellic: limelime: Eh?
00:00  dpham: geez
00:01  bob2: limelime: http://paste.pocoo.org/
00:01  limelime: thanks
00:01  psykidellic: Hmm, seems you have copied correctly from the site.
00:01  bob2: limelime: paste the whole program there, followed by the traceback
00:01  psykidellic: ^^
00:01  limelime: yeah :D
00:01  psykidellic: bob2: You are from down under, correct?
00:02  bob2: psykidellic: yup
00:02 --- elpargo_ is now known as elpargo
00:02  bob2: the dry ish part
00:02  woozly: question...
00:02  woozly: :)
00:02  psykidellic: bob2: Ha, that was going to be my next question :)
00:02  psykidellic: bob2: I guess you are tired of answering the same thing again and again!!!
00:03  limelime: here wo go: http://paste.pocoo.org/show/320774/
00:03  bob2: sydney is kinda on a river, but not the sort of river that ever really floods
00:03  psykidellic: Though things dont seem to be that good in Brazil too.
00:03  pedro3005: is there a way to check if a certain object is a function?
00:03  psykidellic: pedro3005: Why do you want to check?
00:03  woozly: somefunc returns list ['some1','some2','some3'], how I can returs it to print output? I mean: print "%s %s %s" % someFunc(somevar) <-- ?
00:03  dpham: anybody ever make a socket recvall() for python before? i don't know how i should go about making one. looking for some tips.
00:04  woozly: like 'list command in php'
00:04  pedro3005: psykidellic, I'm trying to make a tree structure that represents a mathematical expression. members might be either literals or another function.
00:04  woozly: ($var1, $var2, $var3)list = someFunc($somevar)
00:04  kerio: " ".join(foo)
00:05  bob2: psykidellic: but things seem a bit better in sudan!
00:05  woozly: mm.. okay thanks
00:05  bob2: pedro3005: it's easier to just make them have a consitent API
00:05  psykidellic: bob2: Ha, you actually watch Daily Show?
00:05  bob2: pedro3005: have a Literal class that has an 'evaluate' method that returns the value
00:06  woozly: oh.. greate site, I found it
00:06  woozly: http://www.php2python.com/wiki/function.list/
00:06  woozly: alternative of php.funct.list
00:06  bob2: psykidellic: my #1 source of US news!
00:06  woozly: func
00:06  psykidellic: limelime: Hmm, I am almost tempted to blame the library.
00:06  pedro3005: bob2, seems silly to evaluate a literal
00:06  pedro3005: but I get what you mean
00:07  limelime: you mean the gasp one?
00:07  psykidellic: limelime: Yes.
00:07  bob2: pedro3005: well, mixing up functions and literals is sillier :)
00:07  bob2: pedro3005: I'd've thought you'd at least by typechecking if it was an int or a Multiplication
00:07  pedro3005: bob2, is there a better way of doing this?
00:08  pedro3005: it's not necessarily a multiplication...
00:08  psykidellic: limelime: Or maybe you need to call some other method before begin_graphics().
00:10  neruda: PyQt4 question: trying a simple example using PyDev (Eclipse) getting bitched at for the following:  super(HelloPython,self).__init__(parent)
00:10  limelime: id say your first explanation is closer, the site's supposed to be a tutorial after all
00:10  pedro3005: bob2, so using this method I should do "if isinstance(obj, Literal)", yes?
00:11  bob2: pedro3005: oh, no: http://paste.pocoo.org/show/320776/
00:11  bob2: pedro3005: polymorphism ftw
00:11  psykidellic: limelime: Yeah. I would rather just go straight to pygame. Its pretty easy.
00:11  bob2: pedro3005: other operators work the same way etc
00:12  pedro3005: bob2, ...... I love you
00:12  limelime: oks, ill try that
00:12  bob2: pedro3005: I hope this isn't homework
00:12  neruda: nervermind, indented everything, including the super() and all errors are gone
00:12  neruda: unbelievable
00:12  pedro3005: bob2, no, it's not
00:12  neruda: that has to a be quirk in PyDev, python cant be that anal
00:12  psykidellic: bob2: Even if it was HW, I would say his problem was more Python solving?
00:12  bob2: pedro3005: the only other interesting bit is parsing
00:13  bob2: psykidellic: h,, quite possibly, I can't remember first year CS anymore :)
00:13  psykidellic: Who does?
00:13  bob2: neruda: well, it needs to be indented sensibly (ie each block more than the next outermost one)
00:13  bob2: neruda: mixing tabs and spaces can mess things up too
00:13  psykidellic: neruda: Maybe you want to read on Python docs?
00:13  pedro3005: bob2, what do you mean, parsing?
00:14  bob2: which is annoying in other languages but can be fatal in python
00:14  bob2: pedro3005: converting a string "1 * 4 + 5" to an expression
00:14  pedro3005: Oh. the good thing is, I don't need to do that
00:14  neruda: bob2: so you're saying its not pydev, python syntax requires proper indenting?
00:14  bob2: neruda: for some value of proper, yeah
00:14  neruda: lol
00:14  bob2: neruda: note that lack of braces? ;)
00:14  neruda: right
00:15  bob2: braces are (omstly) redundant if code is indented correctly
00:15  bob2: s/correctly/sensibly/
00:15  neruda: this was my hello world with python (threw in pyqt for fun)
00:15 --- explodes_ is now known as explodes
00:19  ssbr: magcius: so my power cut out last night
00:19  ssbr: also I figured out a suitable counter-example to your tautology that does not rely on features of Python that I made up in my head (because I am apparently delusional :<)
00:19  ssbr: x = (1 for _ in [1])
00:20  ssbr: well no
00:20  ssbr: x = iter([1, 2]); for a in x: assert a in x
00:21  ayust: what tautology was this?
00:21  ssbr: for a in x: assert a in x
00:21  ayust: oh
00:22  KirkMcDonald: Any iterable which doesn't implement containment.
00:22  ayust: well, that would be an inherent lack of iterators
00:22  KirkMcDonald: ssbr: Also: Files.
00:22  ssbr: right
00:22  ayust: s/lack/lacking/
00:22  KirkMcDonald: ssbr: Database cursors.
00:22  ssbr: For some reason I thought previously that iterators raised TypeError on containment checks
00:22  KirkMcDonald: ssbr: iter(callable, sentinel)
00:22  ssbr: but Python decides that it's better to consume it, for some reason
00:22  sproingie: python using indentation to delimit scope wasn't even a new idea.  ISWIM proposed this back in the 60's
00:22  sproingie: 'course they never got around to writing ISWIM
00:23  ssbr: anyway, point is, I consider enumeration different from containment checks. :|
00:23  ssbr: (even if it reuses a keyword)
00:23  RandIter: where do i submit a docs correction?
00:23  RandIter: where it'll be read
00:23  ssbr: (it's totally reasonable to have a "container" that lacks a way to enumerate its contained elements, and an enumerator for which you can't sensibly check containment)
00:24  ssbr: RandIter: the bug tracker
00:24  ssbr: It will get read there. Fixed, well, that's a different issue. But it'll get read.
00:25  nosklo: RandIter: what's the correction
00:25  johnf_: does anybody know how to really compile psycopg2 on OSx.
00:26  RandIter: nosklo: http://docs.python.org/dev/py3k/library/curses.html#module-curses.wrapper says there is curses.wrapper.wrapper but there is no such thing, at least in 3.2b2. there is only curses.wrapper which is it.
00:26  MindDrive: jonhf, it's built as part of our product suite here at my work and I have it building successfully on OS X; what issues are you having?
00:27  nosklo: RandIter: yeah, that seems a bug. there's no curses.wrapper in 2.x either
00:27  nosklo: er
00:27  nosklo: curses.wrapper.wrapper
00:27  RandIter: nosklo: i don't know if the bug is in the documentation or the implementation. i assume the docs.
00:30  RandIter: nosklo: okay i see there is a bug or two about it
00:30  pedro3005: is there a way to check the recursion depth from within a function?
00:31  sproingie: it's not usually something all that useful to know
00:31  ayust: pedro3005: you could probably do something with the 'traceback' module
00:31  johnf_: MindDrive: - I have tried using easy_install but it always tells me that it can't find pg_config and libfe.h
00:31  ayust: but if the function is designed to recurse, you're probably better of explicitly passing a depth
00:31  ayust: better off*
00:32  MindDrive: johnf, I assume you have Postgres installed already?
00:32  johnf_: Yes - I do
00:32  sproingie: install the appropriate postgres-devel package
00:32  MindDrive: What sproingie said, and if that doesn't work, it may not be looking in the right places for Postgres.
00:32  twobitsprite: is there any sort of two-way mapping type? I.e., a dict which you can also find keys by values? or, maybe the right question is: I need something like a C enum... currently I'm looking keys up in dicts, but I can't go the other way easily.
00:33  sproingie: twobitsprite: not built in, no.  you'll have to maintain two dicts
00:33  twobitsprite: yuck
00:33  bob2: enums are usually module-leval ALL_CAPS variables rather than dicts
00:33  johnf_: The files are there
00:33  sproingie: someone here was working on a bidirectional dict
00:34  ayust: it wouldn't be hard to implement a pure-python class to do it
00:34  twobitsprite: ok, maybe I'll just write a class that keeps a list and does lookups and finds... that should work for an enum
00:34  MindDrive: Then it's not looking in the right place, johnf.  You might try building it yourself rather than using easy_install.
00:35  johnf_: MindDrive: is that what you had to do?
00:35  twobitsprite: ayust: the only problem is, how do you handle non-unique values?
00:35  sproingie: ayust: no it wouldn't.  the semantics of how it should act aren't perfectly clear, so no one implementation would necessarily be satisfactory
00:35  ayust: twobitsprite: it'd probably have to have a uniqueness requirement for both
00:35  sproingie: twobitsprite: presumably with similar semantics to assigning to the same key twice -- last one wins.  but that's one of the areas where it's ambiguous, yes
00:35  MindDrive: We have a highly integrated build system that actually builds postgres and Python, then builds psycopg to point to those things; no easy_install used.
00:36  sproingie: another is what do you do when a value is the same as a key?  does one side dominate?
00:36  ayust: if you didn't want a uniqueness requirement, you'd have to maintain lists
00:36  sproingie: it's just not a really well-defined problem which is one reason it's not built in
00:36 * ayust nods
00:37  sproingie: and when you do need it it's pretty easy to do yourself
00:37  ayust: or there's a better option ;)
00:37  _Ray_: Hey :) Is there a pythonic way of saying "index is args[0] if args.length is not 0, else it is 0"?
00:38  _Ray_: I realize now that's almost valid python syntax xD
00:38  sproingie: index = args[0] if len(args) != 0 else o
00:38  sproingie: er else 0
00:38  _Ray_: Yeah, thanks :)
00:39  sproingie: yah it's awesome how english translates to python :)
00:39  sproingie: tho you often get into trouble with 'or'
00:39  sproingie: i actually saw a language where "if x = 1 or 2" was valid
00:39  Eevee: er
00:39  Eevee: 'index = args[0] if args else 0' is equivalent
00:40  sproingie: yah i transliterated a bit too much :)
00:40  ayust: yep
00:42  sproingie: i actually kinda like the idea of an alternation operator like "if x == 1 or 2" but sadly we've overloaded most usable syntax
00:42  Eevee: perl 6 has `if x == 1|2`
00:42  Eevee: python has `if x in {1, 2}`
00:43  sproingie: except perl's alternation i suspect is lazy
00:43  ejaury: Hi
00:43  sproingie: yah i forgot bitwise operators got screwed with horribly
00:44  ejaury: what's the proper way to define custom level in python logger?
00:45  ejaury: i see that python logging has __levelNames dict, and i can register new levels via addLevelName()
00:45  ejaury: however, apart from defining new levels, i also want to change the priority of the default levels
00:46  ejaury: what's the proper way of doing this? anyone?
00:46  sproingie: not sure if there's any way to do that but globally
00:46  KirkMcDonald: ejaury: What, to change their order with respect to each other?
00:46  psykidellic: SegFault|Laptop: TIAS ?
00:46  sproingie: if you want to change them globally, i'm pretty sure they're just constants in the module
00:47  KirkMcDonald: sproingie: Which gets you into the issue of when those constants are used when you call functions, and when they were used during module initialization.
00:47  sproingie: if you're lucky it might be on a logger object
00:47  sproingie: KirkMcDonald: oh yeah fun
00:47  ejaury: basically the levels i want (from the most importatnt): emergency, alert, critical, error, warning, notice, info, debug
00:48  Eevee: doesn't "critical" already mean "emergency"?
00:48  KirkMcDonald: ejaury: I see no reason to need to redefine the existing levels for this.
00:49  sproingie: it's all shades of meaning
00:49  ejaury: yea the name may not be very differentiave but what i really want with this is to have more granular levels
00:49  sproingie: info("data center on fire")
00:49  KirkMcDonald: ejaury: The values of the predefined levels are defined in steps of 10.
00:50  KirkMcDonald: ejaury: Finding values between these values is left as an exercise for the reader.
00:51  ayust: if needbe, you could write a python function to do it for you ;)
00:54  ssbr: How does one write a patch for python? svn diff?
00:54  KirkMcDonald: ssbr: Sure.
00:54  shemale_magic: hey any cherrypy people up in here?
00:55  JrelwoF: I hope not.
00:55 --- Unknown[NF] is now known as Unknown[OFF]
00:57  ejaury: ok i think i have a better idea how to do this now... thanks kirk!
00:58  pax-: Hi guys, what would the correct syntax for this be: http://paste.pocoo.org/show/320783/
00:59  KirkMcDonald: pax-: What on earth.
00:59  pax-: it's quotes inside quotes inside quotes
00:59  sproingie: ...
00:59  seemant: pax-: what are you trying to do?
00:59  pax-: is that possible?
00:59  pax-: a fabric script for automatic deployment
01:00  pax-: checking what's the current version is on the server
01:00  sproingie: ok that's making a little more sense.  so um, use triple quotes
01:00  seemant: triple quotes?
01:00  KirkMcDonald: That command doesn't "do" anything.
01:00  pax-: hmm
01:00  seemant: pax-: what happens to the dirlist variable?
01:00  KirkMcDonald: Also: ls | sort
01:00  sproingie: yah i'm not going to try to make sense of it
01:01  seemant: to me it looks like it just gets thrown away
01:01  seemant: KirkMcDonald for the win
01:01  pedro3005: isn't -9 ** (1/2) supposed to be the square root of -9 ?
01:01  KirkMcDonald: pedro3005: Note the value of 1/2 in Python 2.x.
01:02  pedro3005: I'm using "from __future__ import division"
01:02  KirkMcDonald: pedro3005: Note, too: (-9) ** (0.5)
01:02  traceback0: if you're import a in c, a imports b, b import c ... is that circular?
01:02  KirkMcDonald: traceback0: Yes.
01:02  traceback0: gah
01:02  traceback0: ok
01:02  pedro3005: KirkMcDonald, now why doesn't that happen when I do -9 ** (1/2) ?
01:03  pedro3005: >>> 1/2
01:03  pedro3005: 0.5
01:03  pedro3005: >>> -9 ** (1/2)
01:03  pedro3005: -3.0
01:03  KirkMcDonald: pedro3005: ** has a higher precedence than unary operators to its left.
01:03  KirkMcDonald: http://docs.python.org/reference/expressions.html#the-power-operator
01:03  pedro3005: a-ha
01:03  pedro3005: thank you
01:03  pax-: seemant: I had this in a file on the server and it worked when I run the file from fabric: http://paste.pocoo.org/show/320784/
01:04  ssbr: I don't think any operators have higher precedence than unary ones :X
01:04  KirkMcDonald: ssbr: One would think so.
01:04  pax-: So there's no way to do quotes inside quotes inside quotes?
01:05  KirkMcDonald: pax-: Sure you can.
01:05  pedro3005: KirkMcDonald, that's not fair though. It complains on (-8) ** (1/3) which is perfectly valid
01:05  KirkMcDonald: pax-: Either use the relevant escape sequences, or use triple quotes, or whatever.
01:05  ssbr: well.
01:06  ssbr: That's weird. I forget if it's that way in regular arithmetic. I don't think it is. :<
01:06  Terrasque: What is the best way of making a seperate copy of an existing class instance? Or a new instance of self?
01:06  KirkMcDonald: pedro3005: cmath.sqrt(-9) works just fine.
01:06  seemant: yeah, triple quotes
01:06  pedro3005: KirkMcDonald, what if I want the nth root?
01:06  ssbr: Terrasque: there isn't really one. It's painful every way
01:07  ivazquez|laptop: Which nth root would you like?
01:07  Terrasque: ssbr: ugh :( Tried copy / deepcopy but ran into some issues / gotchas
01:07  ssbr: Terrasque: I generally do it explicitly.
01:07  sproingie: generally you have to write your own.  semantics of copying are different for each use case
01:07  ssbr: But more and more I've been moving away from doing it at all.
01:07  KirkMcDonald: pedro3005: (-8 + 0j) ** (1.0/3)
01:07  sproingie: deepcopy will do it but it's almost always extreme overkill
01:07  KirkMcDonald: pedro3005: Which does... something.
01:07  ivazquez|laptop: Rotates it 120 degrees.
01:08  pedro3005: 120 degrees is how many radians?
01:08  KirkMcDonald: pedro3005: Two-thirds pi
01:08  Eevee: 2/3π
01:08  Terrasque: ssbr: ideally I'd like the class to be a generator for itself (and subclasses of itself), but doesn't look like I'll get my wish :(
01:08  Eevee: pardon, ⅔π
01:09  KirkMcDonald: 2π/3
01:09  pedro3005: wait, I gotta use Euler's formula on this
01:10  pluma: Anyone familiar with couchdbkit? How do you best restrict a property? Subclass and override `validate`? I would ask this in #couchdbkit, but it's been dead for hours.
01:10  ssbr: pluma: mailing list time!
01:10  pluma: ssbr: It's a fairly straightforward question. Mailing lists aren't exactly a realtime medium.
01:12  sproingie: yes but they are at least a relevant one
01:12  ssbr: pluma: neither is a dead IRC medium, or an OT IRC channel with nobody that uses couchdb
01:12  ssbr: s/medium/channel/
01:12  Luyt: pi is 3.14, 2*pi is 6.28, 6.28 / 3 is 2.1 or so?
01:12  KirkMcDonald: Luyt: Sure.
01:12  ssbr: pluma: it's gonna take hours or days on IRC, so, better to do it on a format designed for such long waits
01:13  pluma: ssbr: Well, it's a python library and how am I supposed to know who uses couchdb or not?
01:13  pluma: ssbr: But I agree. It's a stretch.
01:13  Terrasque: ssbr: the words "dead" and "medium" seem to fit well together :) Ouija-based support?
01:13  sproingie: might have been worth asking here, but looks like no one uses it
01:13  sproingie: no one who's awake anyway
01:14  ssbr: right
01:14  shemale_magic: I dreampt of a chat based on ssh account with limited path a file that ets cat-ed
01:14  shemale_magic: am I kooky?
01:15  pluma: sproingie: we have a saying which roughly translates as "no response is a response too". So, yes, my question has been answered, wrt this channel.
01:15  shemale_magic: echo "$name $date my thoughts n witty comments" >> freebsd
01:15  sproingie: http://browsertoolkit.com/fault-tolerance.png
01:15  shemale_magic: tail -40 freebsd
01:15  shemale_magic: wtf is couch db?
01:15  sproingie: it has web scale
01:16  Terrasque: shemale_magic: nosql thingy
01:16  shemale_magic: oh like redis?
01:16  shemale_magic: hmm
01:16  pluma: shemale_magic: you know how when you sit on a couch and move a pillow sometimes you find small change?
01:16  shemale_magic: yep
01:16  pluma: shemale_magic: it's got nothing to do with that.
01:17  shemale_magic: or used condom
01:17  shemale_magic: in memory variables?
01:17  shemale_magic: with exposed operations?
01:17  shemale_magic: hmmmm
01:17  shemale_magic: well avoiding disk is fast
01:17  Terrasque: it's some sort of personal / desktop nosql db. ubuntu have tied it into its system (like email contacts, and sync via its cloud service), which makes it a bit interesting
01:17  shemale_magic: how do you run operaiton on in memory varaibles n stuff on a differetn physical box over the wire?
01:18  shemale_magic: without hitting disk?
01:30 --- DDR_ is now known as DDR
01:31  ssbr: shemale_magic: what exactly do you want? I'm not following, and you're also saying a few things that aren't really necessarily true in modern OSes also
01:32  shemale_magic: well to get a web request, parse it, then fire off a database query to the nosql cluster where data structures are in RAM, you would go over the wire but avoid disk, how?
01:33  shemale_magic: I can run ssh commands liek ssh me@box34: "uptime"
01:33  shemale_magic: thats all i know howto do
01:33  shemale_magic: I never used sockets
01:33  ssbr: shemale_magic: ah, you're wondering how communication is done across processes, but without touching disk?
01:33  shemale_magic: yes over network to different unix box
01:35  ssbr: shemale_magic: well, it's sent in-memory to the operating system, and then the operating system sends it to the hardware, and the hardware sends it down the network to a router, which sends it to the other box, where it's read in by the kernel, and then the kernel passes it in-memory to the program receiving the stuff
01:35  ssbr: or something like that
01:35  ssbr: but disk doesn't have to be involved at any step of the process
01:35  shemale_magic: how do you execute such communication?
01:35  shemale_magic: by using some python function?
01:36  ssbr: shemale_magic: a networking library of some sort.
01:37  ssbr: most are built on top of the low-ish level socket library, which Python has in the stdlib
01:37  ssbr: but other ones offer more features and ease-of-use either for a specific protocol, or for communication in general
01:37  ssbr: e.g. urllib, Twisted, etc.
01:37  shemale_magic: ah
01:40  Taos: Morning all
01:40  glittle: hey there, could someone tell me why this line of code:  "guess_word = guess_word[:word.index(guess)] + guess + guess_word[(word.index(guess) + 1):]"  gets this error: "UnboundLocalError: local variable 'guess_word' referenced before assignment"
01:41  talented: hi
01:41  bob2: because you have a global called guess_word, too
01:41  bob2: but don't use the global statement in that function
01:41  bob2: so python assumes guess_word is a local
01:41  glittle: ooohhhhh
01:41  glittle: that actually makes sense
01:41  bob2: and you obviouisly can't read from it before assigning to it
01:42  bob2: short answer: global statement, long answer: don't use globals for that sort of thing
01:42  glittle: I have that line of code in a definition though, and I want to call the defintion multiple times
01:42  traceback0: if I have folder called proc_globals with a file cache.py under it, how do I access cache.py if I import proc_globals (e.g. proc_globals.cache.<something in cache.py>
01:43  bob2: http://paste.pocoo.org/ it all if you want more help
01:43  talented: can any one tell me why spong bobs bestfriend is a starfish?? thats a har one and why is there a spong in the sea?? hmmm dont make me get to the squirell
01:43  bob2: talented: import proc_globals.cache
01:43  bob2: er traceback0
01:43  traceback0: ah thanks
01:43  bob2: but http://jcalderone.livejournal.com/39794.html
01:44  shemale_magic: anyone here seriously try any of the webservers done all in python?
01:44  shemale_magic: like cherrypy?
01:44  glittle: bob2: http://paste.pocoo.org/show/320795/
01:44  bob2: paster is widely used at least for development
01:44  glittle: line 36
01:45  sproingie: i used cherrypy a while back.  i rather liked it.
01:46  sproingie: using werkzeug now but my apps have like maybe five users tops
01:46  shemale_magic: got any lil site I can see?
01:46  sproingie: nope, all internal work stuff
01:46  shemale_magic: oh
01:49  traceback0: isn't this the correct way to call the super __init__() ? super(RepairKeyValueCluster, self).__init__(*args, **kwargs)
01:49  traceback0: I am getting expected arg even though the base class has the right thing
01:50  traceback0: http://dpaste.com/317986/
01:52  traceback0: ideas?
01:52  bob2: heh pickle
01:53  shemale_magic: python seems a byzantine labrynth of object thingines with each having certain # inputs and you goat get used to them?
01:53  bob2: otherwise should work
01:53  traceback0: bob2: ?
01:53  bob2: traceback0: I would guess your pickle file has calcified
01:53  traceback0: bob2: looks right doesn't it?
01:53  traceback0: bob2: what?
01:54  traceback0: why would pickle mess up the inheritance?
01:54  bob2: ?
01:54  bob2: I'm guessing you've altered the code since you put things in the pickle
01:54  bob2:  = breakage
01:54  pax-: got a string looking like this: foo bar blah
01:54  pax-: how do i convert it to a list
01:54  traceback0: bob2: I am seriously not following you
01:54  bob2: traceback0: pastebin the rest of the traceback I guess
01:55  bob2: traceback0: pickle doesn't version squat, so you can't alter initialisers after you put something in pickle
01:55  glittle: how can I take a global variable and use it in local?
01:55  bob2: since you didn't provide a traceback, I'm assuming the exception is raised by pickle
01:55  bob2: pax-: .split
01:55  glittle: I know return puts a local variable in global...
01:55  pax-: i want ['foo', 'bar'] not ['f','o','o']
01:55  traceback0: bob2: http://dpaste.com/317999/
01:56  bob2: glittle: no it doesn't
01:56  bob2: glittle: the crappy answer is to use a global statement
01:56  bob2: pax-: yes, so .split
01:56  glittle: I thought return foobar meant you could use it globally after using it locally?
01:56  bob2: no
01:56  bob2: not at all
01:57  traceback0: bob2: WOW
01:57  traceback0: bob2: DEF instead of CLASS
01:57  traceback0: such an idiot
01:57  bob2: hah
01:57  traceback0: insane
01:57  traceback0: that was a total mind f**k )
01:57  traceback0: ;)
01:58  RandIter: bob2: is there a version of split that returns an iterator
01:58  glittle: explain return then?
02:00  bob2: glittle: it returns a value
02:00  bob2: glittle: the caller can do something with it throw it away
02:01  bob2: er or throw it away
02:01  bob2: RandIter: don't know, haven't seen one
02:01  RandIter: a regex based tokenizer could do it
02:01  bob2: meh
02:01  bob2: glittle: 'global whatever' will 'fix' your immediate issue
02:01  bob2: (in the function that uses whatever)
02:02  glittle: is "global" a command?
02:02  bob2: it is a statement
02:03  ssbr: woo, another documentation bug reported
02:04  ssbr: I wish I'd find real bugs in Python, so I could supply patches. :(
02:05  RandIter: I've a good old one i would like reopened
02:07  RandIter: ssbr: 8354, for 3.2 because it exists for me
02:10  traceback0: I have a hierarchy like: /long/path/proc_globals/a.py, b.py, c.py and I want to import `a` by import proc_globals and referencing it: proc_globals.a.<var>
02:10  traceback0: how might I do that
02:11  glittle: I know foo.index(bar) returns the lowest index of where bar is found but how do I find ALL instances?
02:11  kerx: Hi, I'm a PHP guy here, and I'm playing with Python.  What's the easiest way to lookup functions?  For example with PHP's website you can do http://www.php.net/functionName
02:11  ivazquez|laptop: [i for i, e in enumerate(foo) if e == bar]
02:12  ivazquez|laptop: pydoc somename
02:12  nadando: glittle: [a for a in range(len(bar)) if bar[a] == foo]
02:12  sedeki: how do i use the enumerate() object?
02:12  kerx: ivazquez|laptop, thx, that would work similar to perldoc i guess
02:12  ivazquez|laptop: Iterate over it.
02:13  kerx: wups..
02:13  kerx: no Python documentation found for 'unquote'
02:13  ivazquez|laptop: Try the full name.
02:13  sedeki: i want to use it like a enum
02:13  ivazquez|laptop: It's not like an enum.
02:13  sedeki: okay, thanks.
02:13  Juhaz: kerx, urllib.unquote, python stdlib isn't a flat namespace like most everything in php, everything is in modules
02:14  kerx: Juhaz, gotya, getting some used to I guess.
02:14  kerx: Hope ya'll don't mind these simple questions
02:14  kerx: Unless you have a good reference to something that would quickly sum all of this up for me?
02:14  nosklo: we don't really mind, but it would be easier for you to just read the tutorial
02:15  kerx: Oh, that thing.  Makes sense.  Any suggestion on a book?
02:16  Nullslash: Hello, could someone tell me what's wrong with my code -> http://codepad.org/YB0nUffk ?
02:16  cafesofie: def dis(self):
02:16  Nullslash: nvm
02:16  Nullslash: thanks :D
02:17  traceback0: I have a hierarchy like: /long/path/proc_globals/a.py, b.py, c.py and I want to import `a` by import proc_globals and referencing it: proc_globals.a.<var>
02:18  Nullslash: cafesofie, But why I have to use self ? it's like passthing *this in all the function in C++
02:18  bob2: simplest solution is to not bother
02:18  bob2: since it's silly or means your layout is a bit crap
02:19  bob2: but you can 'import proc_globals.a as a' in proc_globals/__init__.py if you insist
02:19  kerx: Is there a simple command line script that would download, compile, and install Python modules for me?  Such as mysqldb?
02:19  bob2: kerx: pip
02:19  nosklo: Nullslash: the first argument to a method (which we name "self" by convention) is a reference to the instance used to call the method
02:19  bob2: kerx: but on windows that's often painful
02:19  kerx: -bash: pip: command not found
02:20  nosklo: Nullslash: it is passed by python automatically
02:20  kerx: It appears to be a pain on Linux as well :)
02:20  kerx: Shouldn't that be packaged in with Python core itself?
02:20  nosklo: kerx: no... I don't even have it installed
02:20  nosklo: it's not that good
02:20  ejaury: i encountered a weird behaviour when trying to define 2 lambda function subsequently
02:20  Nullslash: Thanks nosklo
02:20  nosklo: kerx: which distro are you on
02:20  bob2: ejaury: http://paste.pocoo.org/
02:20  kerx: nosklo, So how do you manage your python modules?  I'm running CentOS
02:20  nosklo: kerx: ugh
02:21  nosklo: kerx: why?
02:21  kerx: nosklo, Probably because I started off learning Linux with a CentOS book
02:21  bob2: kerx: condolences
02:21  kerx: Any recommendation on another distribution?
02:21  nosklo: kerx: I'm running debian right now, I use apt-get to manage all my software
02:22  bob2: so one hilarious consequence is that you only have python2.4, which is from 2004
02:22  dpham: is there an easy way to print all the fields of an object instead of doing it manually?
02:22  kerx: Well, we have this thing called 'yum'
02:22  kerx: It's actually written with Python
02:22  nosklo: kerx: you could use it to install python packages
02:22  kerx: Is apt-get written in Python?
02:22  bob2: kerx: sure, and centos a) doesn't support multiple python packages installed simulataneously and b) depends on python2.4
02:22  nosklo: kerx: no, but it works
02:23  bob2: kerx: so getting something other than python2.4 means building from source and installing to /opt
02:23  nosklo: and works very well - in fact, apt system is the best packaging system I've ever seen
02:23 --- bellicose_ is now known as bellicose
02:23  kerx: Ok, a  'yum -y install MySQL-python'  did the trick
02:23  bob2: wherease debian is both more recent and supports multiple versions of python installed side by side, automatically building modules for each as needed
02:23  cgc17: I run ubuntu and love the apt system
02:23  kerx: So would you recommend me using  yum  to manage Python modules as opposed to  'pip' ?
02:23  gregcoit: what's the advantage (if any) of using getattr(x, 'y') over x.y?
02:23  ejaury: example code: http://pastebin.com/Z4NedVCk
02:23  infobob: http://paste.pound-python.org/show/1611/ (repasted for ejaury)
02:24  bob2: gregcoit: they do different things
02:24  dpham: is there an easy way to print all the fields of an object instead of doing it manually?
02:24  bob2: gregcoit: if you only have it as a string, use getattr
02:24  nosklo: gregcoit: it has the disadvantage of being visually unpleasant, but sometimes (rarely) you need to get an attribute where the name is in a string
02:24  bob2: dpham: not really
02:24  bob2: dpham: vars(someinstance) does a thing
02:24  kerx: I'll have to check out Debian then.  I was planning on using FreeBSD next, but I'll skip that for a bit
02:24  ejaury: sorry i missed something, let me modified the code
--- Log closed Sat Jan 15 02:28:17 2011
--- Log opened Sat Jan 15 02:28:42 2011
02:28 --- Users 780 nicks [0 ops, 0 halfops, 0 voices, 780 normal]
02:29  bob2: ejaury: it stores the name v, and looks up the current value when you call it
02:30 --- Channel #python was synced in 91 seconds
02:30  RandIter: how do i use curses' window.getch, but in a separate thread, so it can run without blocking my main program?
02:30  nosklo: ejaury: here's a simpler version of your problem http://paste.pocoo.org/show/320808/
02:30  nosklo: ejaury: and here is the solution http://paste.pocoo.org/show/320809/
02:31  bob2: you can capture with a kwarg iirc, but I always forget how
02:32 --- Unknown[OFF] is now known as Unknown[NF]
02:33  nosklo: RandIter: heh
02:33 --- Unknown[NF] is now known as Unknown[OFF]
02:33  nosklo: RandIter: There's a reason that curses is named that way
02:33  RandIter: hehe
02:34  nosklo: RandIter: by the way, did you check out urwid yet?
02:34  ejaury: nosklo: thank you!
02:34  nosklo: RandIter: http://excess.org/urwid/examples.html
02:34  nosklo: RandIter: it's way easier to use than curses. At least the api is a bit saner
02:36  RandIter: nosklo: it looks interesting. at the moment I'm using py3.x.
02:36  nosklo: RandIter: why?
02:37  RandIter: I'd like to use concurrent.futures
02:37  nosklo: oh no :(
02:37 --- Unknown[OFF] is now known as Unknown[NF]
02:38  nosklo: RandIter: http://code.google.com/p/pythonfutures/
02:38  nosklo: RandIter: here's the backport to 2.x
02:39  nosklo: RandIter: what are you using it for?
02:40  RandIter: nosklo: thanks for the link. at the moment not much but perhaps later for doing IO calculations for a bunch of nodes
02:41  nosklo: IO calculations?
02:41  nosklo: is that IO or calculation? :D
02:41  RandIter: just monitoring data transferred at the moment
02:41  RandIter: on that note, i wonder if there's a network mgmt system with python bindings for making plugins
02:42  nosklo: I don't think futures do that
02:42  nosklo: it doesn't make sense
02:42  photofroggy: Does anyone know of anything that produces nicer looking documentation than pydoc?
02:42  photofroggy: And something that produces better html...
02:43  ssbr: photofroggy: sphinx perhaps?
02:43  RandIter: nosoh: yeah sorry that's just the general task at hand. there's some number crunching involved that could be done in parallel
02:43  photofroggy: brb google
02:43  RandIter: i mean nosklo
02:44  RandIter: nosklo: calculating deltas
02:44  RandIter: it's a very simple task and probably not worthy of parallel
02:45  cgc17: just learning to program.. if i want to: print("a=", a) without a space between the "=" and the value, how do i do that?
02:45  photofroggy: bah there isn't a port for 3.x yet
02:45  photofroggy: although, I wonder...
02:45  KirkMcDonald: cgc17: String formatting is one thing.
02:45  KirkMcDonald: cgc17: This is Python 3?
02:45  cgc17: yes
02:45  KirkMcDonald: cgc17: print("a={0}".format(a))
02:45  photofroggy: hm, my code seems to work with 2.6
02:46  KirkMcDonald: cgc17: You may be able to use {} instead of {0}, too.
02:46  AbstractBeliefs: good evening everyone. whats the best module for MySQL? (Python 2.6 Windows). I've looked at MySQLdb, but windows support is too poor. Thanks
02:46  bob2: photofroggy: pydoctor
02:46  cgc17: KirkMcDonald: thanks
02:46  KirkMcDonald: AbstractBeliefs: oursql is the usual module for MySQL these days.
02:46  KirkMcDonald: AbstractBeliefs: Though, in what way is MySQLdb poor on Windows?
02:47  AbstractBeliefs: requires more setup and a C compiler. (im on a minimal system right now, dont fancy installing build tools)
02:47  AbstractBeliefs: ill have a look at oursql now =]
02:48  ssbr: cgc17: print("a=%s" % a)
02:49  cgc17: ssbr: thank you
02:49  KirkMcDonald: AbstractBeliefs: Here is a useful list of Windows builds of various Python modules, if the projects themselves don't offer the relevant binaries: http://www.lfd.uci.edu/~gohlke/pythonlibs/
02:50  KirkMcDonald: AbstractBeliefs: I believe that MySQLdb is on there as MySQL-python.
02:50  nosklo: AbstractBeliefs: oursql offers a binary
02:50  AbstractBeliefs: it is, thanks. +bookmarked
02:50  nosklo: AbstractBeliefs: http://www.habnabit.org/software/oursql/
02:50  nosklo: AbstractBeliefs: it's *way better* than mysqldb
02:50  KirkMcDonald: Yes, oursql is to be preferred.
02:51  shemale_magic: postgresql
02:51  AbstractBeliefs: got both, now, so ill just copy my linux code over to here, and start work on porting it to oursql
02:51  shemale_magic: is zope awesome?
02:51  nosklo: shemale_magic: zope is many things
02:51  shemale_magic: best website stuff?
02:51  nosklo: shemale_magic: some of the things are actually pretty good
02:52  nosklo: shemale_magic: the "best" usually depends on what exactly you want to do
02:52  nosklo: shemale_magic: there's no generic "best"
02:57  gregcoit: ls
02:57  slestak: i think i am pretty close here.  i am trying to assign all three filenames in line 7, but im screwing it up.  http://paste.pocoo.org/show/320817/
02:57  remote: gregcoit, public/ display/ misc/
02:57  shemale_magic: zope not need mysql
02:57  shemale_magic: has zodb
02:57  gregcoit: remote: nice!
02:57  remote: nice!: command not found
02:57  gregcoit: lol
02:58  remote: read the topic
02:58 * remote laughs
02:58  nosklo: shemale_magic: you can use zodb outside of zope, and mysql inside zope if you want, too -- it all depends on what you're doing - sometimes it's better to use one or the other
02:58  ivazquez|laptop: oname, nname, dname = [(tdir + os.sep + '%s.pdf') % (x,) for x in (old, new, diff_run_id)]
02:58  ivazquez|laptop: But you should be using os.path.join().
02:59  ivazquez|laptop: And doing the interpolation separately, since tdir can't be guaranteed to not contain a %.
02:59  slestak: ok, so forget the tuple assignment
03:00  slestak: and use os.path.join..
03:00  slestak: ty
03:02  spatula: Hi. I'm looking for a tool I can use to lookup the appropriate zoneinfo TZ name for arbitrary locations. Anyone know of anything? (python-specific is preferred but not essential)
03:03  bob2: you mean a given lat-long?
03:03  nosklo: spatula: there's the pytz module, I think it has something
03:03  AbstractBeliefs: KirkMcDonald, nosklo, thanks guys, that works great. Have a nice evening
03:04  spatula: I'll look again, but I didn't think it did.
03:04  shemale_magic: zodb!!!!
03:04  spatula: It does support a lot of different options for timezones, though.
03:04  shemale_magic: is zodb pretty dope?
03:04  bob2: it's a thing
03:04  bob2: good for some things
03:05  ssbr: s/dope/zope/
03:07  shemale_magic: so postgresql is goood
03:07  nosklo: shemale_magic: good for some things
03:07  shemale_magic: zodb can scael a bit?
03:07  shemale_magic: or limited?
03:07  nosklo: shemale_magic: how much it can scale depends on the application
03:08  bob2: and whether you use zeo
03:08  nosklo: it's web scale!!11!
03:10  shemale_magic: :)
03:10  slestak: its not too scaly, but its elbows are a little ashy
03:12  pedro3005: hey bob2 . Given your method for coding mathematical expressions, if I have an object a which is an instance of Addition or Multiplication or ... or Literal or Variable, how could I "mutate" this object? That is, take one instance down on the nested instances and substitute it for a different expression or literal
03:13  pedro3005: I can do it by hand-coding it, but I need a dynamic method
03:13  pedro3005: >>> g = Addition(Variable(), Literal(2))
03:13  pedro3005: >>> evaluate_expression(g, 10)
03:13  pedro3005: 12
03:13  pedro3005: >>> g.y = Literal(3)
03:13  pedro3005: >>> evaluate_expression(g, 10)
03:13  pedro3005: 13
03:13  bob2: don't know what you mean
03:13  bob2: the above sounds like what yo uwant
03:14  Dude-X: kind of looks like a closure
03:14  pedro3005: yeah, but i need to randomly pick an instance.. like, given a g, I might have g.x.y.x.y.y.x etc
03:14  pedro3005: and I need to access that randomly to change it
03:14  Dude-X: sounds like bad engineering/architecting
03:14  bob2: really vague
03:14  bob2: what are you trying to do?  randomly fuck up an expression?
03:15  lightcatcher: lol'd
03:15  pedro3005: probably fuck up. but there's a slim chance I'll make it better
03:15  pedro3005: it's a GA
03:15  bob2: :|
03:15  caaakeeey: sounds like genetic programming or somethign
03:15  caaakeeey: yeah
03:15  bob2: right, so do that then
03:15  pedro3005: I have a function which generates a random expression
03:16  pedro3005: so do what? no one suggested anything
03:16  bob2: you have a tree of things, randomly alter one bit
03:16  pedro3005: how, exactly?
03:16  bob2: perhaps by assigning a number to each node, picking a random number <= that, then alter it
03:16  caaakeeey: do it recursively?
03:16  bob2: it's your homework man
03:16  ssbr: recursively is hard to do
03:16  pedro3005: it's not homework
03:16  ssbr: you want the total number of things, and then randomly select one such thing, and then modify it
03:17  ssbr: so you need a way of encoding the entire tree as a flat list, probably
03:17  dualbus: show the class definition for that object, pedro3005
03:17  caaakeeey: nah:def mutate(): mutate this with probablity(x);for subtree in children: mutate(subtree)
03:17  caaakeeey: somethign liek that
03:17  RandIter: no flat list. use recursion.
03:18  pedro3005: http://paste.pocoo.org/show/320813/
03:18  ssbr: RandIter: how do you propose randomly selecting something recursively, with a uniform distribution?
03:18  bob2: http://paste.pocoo.org/show/320825/ gives you the len
03:18  ssbr: caaakeeey's solution is rather non-uniform and probably bad for a GA
03:18  caaakeeey: my point is if hes doing genetics, you dont have to restrict yourself to changing jiust 1 element
03:19  bob2: sure
03:19  ssbr: oh wait
03:19  caaakeeey: a probablity should be enough
03:19  ssbr: I see
03:19  caaakeeey: even so
03:19  bob2: raise UnderSpeced()
03:19  caaakeeey: you can traverse the tree and enumerate the options
03:19  RandIter: ssbr: so the goal is to select a random element of a tree, right?
03:19  ssbr: nonuniform, but in a different way
03:19  caaakeeey: then choose one
03:19  pedro3005: and this is the genetic interface to it http://paste.pocoo.org/show/320826/
03:19  ssbr: RandIter: with a uniform distribution on the elements.
03:19  timClicks: Any suggestions for extracting content from doc format?
03:20  RandIter: ssbr: if each element of the tree has an index, you first determine the index of the element to be mutated. you then search the tree using one of various tree search methods
03:20  bob2: timClicks: call out to wvtext or antiword
03:20  pedro3005: caaakeeey, the problem with that is, after I selected one and altered it, how do I build the expression back?
03:20  ssbr: RandIter: "has an index"? "determine the index"?
03:20  caaakeeey: ?
03:20  timClicks: bob2: ty
03:20  ssbr: it sounds like you're describing my flat list solution actually, which assigns each node an index in a list.
03:20  caaakeeey: the value of the node is separate to its children
03:20  caaakeeey: the children stay intact
03:21  caaakeeey: or you can copy the children
03:21  caaakeeey: if you have less subtrees wgarecver
03:21  pedro3005: my point is if I have g and I do b = g.x and then I do b.y = Bla,  I don't think that changes g.x.y to Bla
03:22  caaakeeey: nodes=[]; def traverse(tree):nodes.append(tree);for child in tree: traverse(tree); ->elementtochange=random.choice(nodes)
03:22  caaakeeey: and im pretty sure it does
03:22  alecstory: I have a tuple with a bunch of elements, and I want to make a new tuple with all those elements and one more added.  What's the pythonic way to do this?
03:22  caaakeeey: oh wait
03:22  caaakeeey: but while cant you keep the original g
03:22  caaakeeey: *why
03:23  pedro3005: because I need a dynamic way of further accessing the next children
03:23  pedro3005: so I can't do g.x.y...... without hard coding
03:23  lightcatcher: getattr ?
03:23  pedro3005: I have an idea of how to do this now
03:24  caaakeeey: also
03:24  caaakeeey: i just testedit
03:24  caaakeeey: it does change the list
03:24  bob2: alecstory: guess
03:24  caaakeeey: *change the original g
03:24  pedro3005: it does?
03:24  pedro3005: let me test that
03:24  caaakeeey: have a list/dict of children!
03:24  bob2: lordy
03:24  alecstory: bob2: tuple(list(original) + [new_element])?  That seems ugly
03:25  GuySoft: hi all, does anyone know of a python lib that can mix two audio files together?
03:25  ssbr: tuple(itertools.chain(original, [new]))
03:25  pedro3005: huh
03:25  bob2: alecstory: ?
03:25  pedro3005: it does
03:25  bob2: alecstory: x = x + 1,
03:25  alecstory: bob2: that works?  huh.
03:25  bob2: alecstory: but tuples are typically 'records', so appending is fairly rare
03:25  bob2: GuySoft: gstreamer
03:26  alecstory: bob2: this is for some django configuration that expects a tuple
03:26  RandIter: ssbr: if the elements of the tree aren't going to be deleted, you don't need to store a list of their indexes
03:26  alecstory: thanks!
03:27  caaakeeey: [02:17] <caaakeeey> nah:def mutate(): mutate this with probablity(x);for subtree in children: mutate(subtree)
03:27  pedro3005: caaakeeey, so I guess I can just access one children, do a rand_bool(). If false, continue, if not, alter. and do that until either I alter something or hit the end (and then forcibly alter it)
03:27  caaakeeey: whats wrong with that?
03:28  caaakeeey: well
03:28  mr_chris: New to Python. I'm writing some simple status reporting scripts for my home server. What's the easiest way to send mail, the smtplib package or calling the system mail via os.system?
03:28  GuySoft: bob2, where should i start if i want to do that? the documentation is vast on this
03:28  caaakeeey: wat i jost posted, considers them al
03:28  bob2: GuySoft: no idea
03:28  caaakeeey: but if you want to just edit exactly one
03:28  bob2: mr_chris: smtplib
03:28  caaakeeey: (which i don't think is necessary in ga/gps)
03:28  caaakeeey: [02:22] <caaakeeey> nodes=[]; def traverse(tree):nodes.append(tree);for child in tree: traverse(tree); ->elementtochange=random.choice(nodes)
03:29  caaakeeey: i dont think theres an issue with references
03:29  pedro3005: I can't see how that'd work
03:29  bob2: that'd be fine
03:29  bob2: that's what ssbr suggested
03:29  mr_chris: bob2: Is it ever appropriate to send through the normal os mail command?
03:29  bob2: mr_chris: can't think of a case, no
03:29  caaakeeey: whats the issue?
03:30  mr_chris: bob2: Thanks
03:30  pedro3005: you can't do "for child in tree"
03:30  pedro3005: tree is not iterable
03:30  bob2: then make it iterable
03:30  caaakeeey: tree should read node
03:30  RandIter: caaakeeey: you can't do randbool because you don't know the depth of the subtree
03:31  caaakeeey: the node youre currently on
03:31  RandIter: so it won't be uniform
03:31  caaakeeey: its just the node is assumed to also be a tree
03:31  bob2: but list(exp) would work in that case anyway
03:31  pedro3005: it would?
03:31  pedro3005: >>> list(g)
03:31  pedro3005: Traceback (most recent call last):
03:31  pedro3005:   File "<stdin>", line 1, in <module>
03:31  pedro3005: TypeError: 'Addition' object is not iterable
03:31  bob2: because you didn't make it iterable
03:31  dpham: if a thread unexpectedly dies, does the parent process die as well?
03:31  bob2: dpham: no
03:32  caaakeeey: traverse the list first
03:32  caaakeeey: then pick a node
03:32  caaakeeey: *tree
03:32  bob2: lordy
03:32  bob2: you're both going in circles
03:32  ssbr: RandIter: I wouldn't have done indices
03:32  bob2: a) define what probability distribution you want
03:32  bob2: b) define what a mutation is
03:32  ssbr: I would have had a list of functions that knew how to modify the element in question, and then just do random.choice(L)(...)
03:33  pedro3005: I'll just code this idea I had and see if it works
03:33  pedro3005: thanks everyone for the help
03:37  geckos: How can I redirect stdout, in such way that messages printed go to stdout and to a given file?
03:37  lightcatcher: geckos, i just saw this yesterday
03:37  habnabit: tee
03:38  ssbr: geckos: from python or from the shell?
03:38  ssbr: for the latter, tee
03:38  ssbr: for the former, define your own file-like object that writes to two other file-like objects
03:38  ssbr: tee is probably better
03:38  lightcatcher: geckos: I'm finding the snippet right now
03:40  geckos: tee
03:40  geckos: ok thankyou guys
03:40  lightcatcher: geckos: https://github.com/dag/attest/blob/master/attest/__init__.py#L387
03:40  lightcatcher: from the attest library
03:42  bob2: heh
03:42  bob2: cheesey
04:14  Cam: Why doesn't `for i in list: list.remove(i)' clear a list?
04:15  ssbr: Cam: because of the way list iterators work
04:15  _habnabit: You can't mutate a list as you iterate over it.
04:15  _habnabit: Just do `L = []`
04:15  Cam: Hmm... but I want it to add items to a new list and remove the ones it has added from itself.
04:15  _habnabit: Make two new lists.
04:15  Cam: I basically want a scrambler() for text.
04:15  bluewres: you could make a copy of the list to iterate over
04:15  Cam: I have two..
04:15  _habnabit: No, don't do that.
04:15  Cam: What do I do then?
04:15  _habnabit: Don't mutate lists; make new ones instead.
04:16  Cam: But I don't want it to add "a" 10 times because there are 10 letters..
04:16  _habnabit: I'm not sure what you're talking about.
04:16  Cam: I want scramble("text") to return "extt".
04:16  Cam: Or "text" scrambles
04:17  _habnabit: ''.join(random.sample(S, len(S)))
04:17  bob2: ''.join(random.shuffle(yourword))
04:17  Cam: >.>
04:17  _habnabit: bob2, shuffle is in place.
04:17  bob2: oops
04:17  Cam: That's cool
04:18  Cam: thanks!
04:37  dylan_noktum: how do i add a null carictor
04:37  dylan_noktum: is it simpely \000
04:37  KB1PKL: \0, AFAIK
04:39  smw: dylan_noktum, why do you want a null character?
04:40  dylan_noktum: well for any ascii character for that matter
04:46  verte: dylan_noktum: \xNN where N is the hex code
04:46  verte: dylan_noktum: or programatically, chr()
04:46  dylan_noktum: thanx
04:48  dpham: i have a string that looks like this a = 'words\x00\x00\x00\x00`\r', i have a func that removes all the non ascii chars, but when i print it, it still contains all the junk chars. any idea how can i get the string just up to the nul byte?
04:49  dpham: example code here: http://pastie.org/1462493
04:49  verte: dpham: what makes you think \x00 is not an ascii char?
04:50  dpham: oops. what im reallt trying to do is to get a string up to the nul byte.
04:50  verte: I assume you don't mean the \r, which just suggests end-of-line wierdness
04:50  verte: s.partition('\x00')[0]
04:50  KB1PKL: dpham: 'words\x00\x00\x00\x001\r'.split('\x00')[0]
04:50  KB1PKL: verte: Does yours work and mine not?
04:51  verte: KB1PKL: they both work, partition always and only splits once
04:51  verte: so it's typesafe, and you can unpack the result
04:51  KB1PKL: Learning new things every day :-)
04:52  verte: as in: prefix, first_null, rest_of_string = s.partition('\x00')
04:52  dpham: KB1PKL and verte: thanks alot guys, it works.
04:52  verte: (which unpacks correctly even if there was no null in the string, which s.split('\x00', 1) wouldn't have given you)
04:53  syntho: Hello! Does anybody know how could I use sqlite's 'PRAGMA' through pyODBC?
04:53  amstan_: so.. i have this epic joystick... I wanna make an opengl cube controlled by the joystick
04:53  amstan_: what do i use? pyglet or pygame?
04:54  KB1PKL: amstan_: I've seen pygame demos that do that, as well as using Blender, but never pyglet.
04:54  verte: syntho: any reason to use pyODBC rather than the built-in sqlite3 ?
04:54  amstan_: KB1PKL: is pygame opengl capable though?
04:54  syntho: Yep. Because it should be one common interface to many DB on windows.
04:55  syntho: I know that it is nont the best way.
04:55  amstan_: KB1PKL: most examples i've seen are 2d
04:55  KB1PKL: amstan_: Not that I know, but Blender is, and is Python-extendable.
04:55  amstan_: no, i wanna do standalone, something from scratch
04:56  KB1PKL: Then using any library isn't from scratch :)
04:56  amstan_: well.. i can't really be doing 1s and 0s now can I..
04:57  amstan_: i just don't want to rely on blender, i know it's cool, but i can't justify as having it as a dependency
04:57  KB1PKL: amstan_: How do you justify pygame etc.?
04:57  amstan_: ugh...
04:57  amstan_: look.. i don't wanna use blender...
04:58  KB1PKL: Not meaning to drill you, I'm just curious.
04:58  amstan_: well.. i can't do 3d and joysticks without at least one library
04:58  amstan_: so.. it might as well be 1
04:58  KB1PKL: amstan_: PyOpenGL?
04:58  amstan_: what about the joystick then?
04:59  KB1PKL: PySerial...? I honestly don't know, I've never interfaced with hardware.
04:59  amstan_: ....
04:59  amstan_: it's a usb joystick.. 6 axis that already has a driver..
05:00  KB1PKL: What model joystick?
05:00  amstan_: why would it matter?
05:00  amstan_: That's what drivers have to worry about..
05:01  KB1PKL: amstan_: Python Computer Graphics Kit has a Joystick class that looks like it will do what you want.
05:03  amstan_: KB1PKL: looks promising, except it's not in my repo... :'(
05:04  KB1PKL: amstan_: Doesn't need to be in your repo to use it :-)
05:04  amstan_: no, but it's nicer
05:04  amstan_: and usually signs of better supported by the community
05:05  KB1PKL: very true.
05:17  tacotron: im sorry.. stupid question..c ant think right now.. if i have 3 for loops, 1 embedded in each other, if i do a break statement in the inner most loop, it only gets me out of THAT loop and the second one will continue right?
05:17  KirkMcDonald: Correct.
05:17  tacotron: thanks KirkMcDonald
--- Log closed Sat Jan 15 08:09:34 2011
--- Log opened Sat Jan 15 08:14:43 2011
08:14 --- Users 728 nicks [0 ops, 0 halfops, 0 voices, 728 normal]
08:16 --- Channel #python was synced in 95 seconds
08:19  argent0: hi, i'm using p=Popen(blah,...,stdout=PIPE) and when I print(p.stdout.readline()) i see b'<real-output>\n', any idea?
08:19  _habnabit: Ideas about what?
08:20  argent0: why I'm not seeing <real-output>?
08:20  _habnabit: Because you're using python 3.x.
08:21  ssbr: because you can't print bytes like that in 3.x
08:21  styelz: doh!
08:22  Skola: what linux distro's are you folks using for deving?
08:22  styelz: stoopid computers
08:22  _habnabit: Computers are terrible.
08:22  argent0: ssbr: how should i print'em then
08:22  _habnabit: Skola, ha ha linux.
08:22  Skola: Y U LAUGH!?!?!
08:22  ssbr: Skola: I use Windows and FreeBSD
08:22  Skola: >_>
08:22  _habnabit: Skola, because linux is terrible.
08:22  Skola: ;) ok
08:22  ssbr: wat is this lunix you speex of
08:22  ssbr: (mostly Windows, by the way. Well, for a unix environment in windows, there's also cygwin)
08:23  Skola: well I'm actually on MacOSX
08:23  DigitalKiwi: how is cygwin supposed to be pronounced?
08:23  ssbr: ha ha ha Mac OS X
08:23  Skola: you wonder: then y the fuck do you want linux
08:23  _habnabit: Skola, that's good!
08:23  styelz: sigwin
08:23  Skola: because I want to mess around with it
08:23  ssbr: I say "sig win"
08:23  ssbr: Skola: so install Slackware in a VM
08:23  _habnabit: Skola, get a linode
08:23  styelz: wee
08:23  ssbr: ha ha ha linode
08:23  Skola: ye I have VMWare
08:24  ssbr: "let us pay much cash for stuff we can do for free. yay linode"
08:24  ssbr: ha ha ha VMWare
08:24  DigitalKiwi: i use arch cause it used to be the best, now i'm not sure anymore :(
08:24  ssbr: _habnabit: man, this mocking laughter thing is addictive
08:24  Skola: :D
08:24  _habnabit: DigitalKiwi, pretty sure that was 'never'
08:24  ssbr: arch always did really stupid stuff with its package management stuff
08:24  DigitalKiwi: hey if you don't use python or ruby it's pretty good!
08:25  ssbr: I mean the actual mechanism of package management beats, you know, Slackware and Gentoo, but the contents of the package repositories were always worse than both
08:25  DigitalKiwi: i like its package manager better than yum or apt-*
08:25  ssbr: they did crazy things like divide out the documentation without actually even providing a documentation package, upgrading at crazy times to new versions, etc.
08:25  DigitalKiwi: i think they stopped doing that documentation dividing thing like oh
08:25  DigitalKiwi: years ago?
08:26  ssbr: DigitalKiwi: Yes. The issues form a timeline.
08:26  ssbr: They stopped doing that, they started doing something worse.
08:26  ssbr: Someday they will learn!
08:26  ssbr: That, or they'll become like Debian
08:26  DigitalKiwi: one of my coworkers is one of the devs
08:26  DigitalKiwi: we're talking about forking it with some of the other arch devs
08:27  ssbr: suit yourself
08:27  ssbr: Skola: anyway I actually don't know why you'd want to play around with linux
08:27  ssbr: Mac OS X does actually have the important parts, sort of
08:28  ssbr: just spend all your time in the terminal instead of that godawful Finder
08:28  DigitalKiwi: why 'suit yourself'?
08:28  Skola: Yeah, I already do
08:28  ssbr: DigitalKiwi: because your decision is based on a set of ideas that I never shared
08:29  ssbr: well, no
08:29  ssbr: at one point I was tempted to move from Slackware to Arch because they had, like, a real package manager
08:30  ssbr: DigitalKiwi: anyway, it's just a totally alien idea that anyone would fork it. *shrug*
08:30  DigitalKiwi: it's happened before
08:30  ssbr: Well, what do you want to fix?
08:30  DigitalKiwi: sometimes even moderatly successfully
08:30  DigitalKiwi: chakra, though now they aren't a fork of arch anymore and are something else *shrug*
08:31  ssbr: Skola: so what do you want to gain from this?
08:31  Skola: I guess it's just curiosity
08:31  ssbr: what would be the raison d'etre of your fork?
08:31  Skola: to be honest
08:31  DigitalKiwi: ssbr: that's part of why we're still in "we should do this" and not "ok it's done" we're not sure all what we would fix/ do differently
08:31  DigitalKiwi: could use some suggestions :D
08:31  Skola: ah you meant to highlight him?
08:31  Skola: :p
08:32  ssbr: Skola: no, I'm holding two conversations at once
08:32  Skola: lol, skillz!
08:32  DigitalKiwi: ssbr is such a woman, multi tasking ;p
08:32  ssbr: Skola: well, what are you curious about?
08:33  Skola: about what tools are available, if I could benefit etc
08:33  ssbr: DigitalKiwi: my suggestions would be to stop messing with packages unless you're prepared to actually test the changes. That means a debian-style model of stability. That, or else stop changing them at all and submit any desirable changes upstream -- the Slackware model of stability.
08:33  ssbr: Also to adhere to what the package maintainers think is the best idea, instead of doing your own thing and distributing the wrong package version.
08:33  DigitalKiwi: i've been thinking about trying freebsd tbh, i only haven't at this point I think because my /home is encrypted and freebsd doesn't support how i have it
08:34  ssbr: because all I really know about Arch is how totally screwed up its package repo continues to be. they are doing that wrong. so that's all I can suggest.
08:34  DigitalKiwi: ssbr: believe it or not packages are (at least supposed) to be tested
08:35  DigitalKiwi: the maintainers of the packages are supposed to use the software they maintain, and there are sign offs and stuff
08:35  ssbr: Skola: well, nearly everything that works on linux works on OS X
08:35  ssbr: the difference is, like, window managers and stuff.
08:35  DigitalKiwi: if i get a mac I am installing awesome wm
08:35  DigitalKiwi: am i bad person? :(
08:35  ssbr: DigitalKiwi: and yet they still make changes that break tons of software and enrage and confuse users
08:35  ssbr: somehow this is something most other OSes, except, like, Windows, fail to do
08:36  DigitalKiwi: ssbr: like the python updates? yeah that's one of the big reasons i am mad at it right now
08:36  ssbr: Right. Nobody else did that. Not a single distro anywhere in the entire universe did that.
08:36  DigitalKiwi: and I don't even really like python I just use it for development and it was a big pain :(
08:36  ssbr: except possibly Gentoo, come to think of it. But do you really want to share space with Gentoo? :(
08:36  DigitalKiwi: (I don't hate python it's just not my favorite)
08:37  Skola: what is then?
08:37  ssbr: Skola: what's what?
08:37  MostAwesomeDude: ssbr: I work across the hall from a handful of Gentoo maintainers. Gentoo's way ahead of Arch in terms of QA.
08:37  DigitalKiwi: Lua or Lua+C
08:37  Skola: ssbr: it was in response to - DigitalKiwi: (I don't hate python it's just not my favorite)
08:38  ssbr: MostAwesomeDude: I meant the change from 3.x default to 2.x. Somebody told me that somebody else said that Gentoo switched to 3.x as the default. is it true?
08:38  MostAwesomeDude: ssbr: Totally false. Gentoo's package manager is written in Python and needs Python 2.x.
08:38  ssbr: well, if gentoo did it, there are ways to do it that are sane
08:38  ssbr: MostAwesomeDude: I see
08:38  ssbr: DigitalKiwi: so then it's just arch
08:39  DigitalKiwi: allan is totally batshit insane
08:39 --- FirefighterBlu3 is now known as Blu3
08:39  ssbr: anyway, so that's what I'd change in arch, not having ever used it.
08:39  DigitalKiwi: he thinks that everyone is going to follow in archs wake eventually and switch to python 3.x as default
08:39  DigitalKiwi: i think he's wrong, you guys think he's wrong, *shrug*
08:39  ssbr: the python core devs think he's wrong, as does the debian package maintainer IIRC
08:40  DigitalKiwi: though I do think it's kind of funny if he is wrong, why would python people make a new language version and not expect it to succeed the old one?
08:41  DigitalKiwi: name it something else or don't make it!
08:41  ssbr: oh, it's expected to succeed the old one
08:41  DigitalKiwi: but named python3 or slt?
08:41  ssbr: but so was python 2.x, and people still use python 1.x software all the time
08:41  ssbr: remember that 1.x was ten years ago
08:41  DigitalKiwi: I didn't even know there was a python 1.x
08:41  DigitalKiwi: ;)
08:41  ssbr: so maybe we can turn python3 into python in, say, fifteen years
08:42 * DigitalKiwi thought it came into existence as like 2.4
08:42  ssbr: maybe sooner, since there's more incentive to port 2.x/1.x code to 3.x than 1.x code to (idiomatic) 2.x
08:42  ssbr: prediction: python 4.0 will mark when we begin to reuse the python executable
08:42  ssbr: (I won't bet any money on it though)
08:45  jrabbit: is there a saner pythonic database I could dump a fairly complex csv into?
08:45  DigitalKiwi: sqlite?
08:45  Peng: There are Python bindings for every database ever.
08:45  jrabbit: I could make it less complex but I basically would like to access it not having to learn SQL and just using pythonic stuff
08:45  jrabbit: I don't want bindings
08:45  jrabbit: I want to use it like a dict :P
08:45  _habnabit: jrabbit, sqlalchemy+sqlite
08:45  jrabbit: ah
08:46  jrabbit: _habnabit: will that let me iterate and stuff without learning nonsense I can't apply to any other programming I do? :P
08:46  _habnabit: Yes!
08:47  jrabbit: awesome.
08:47  DigitalKiwi: because learning sql will never help you anywhere
08:47  DigitalKiwi: /snark
08:47  jrabbit: DigitalKiwi: I've avoided needing a database for a long time
08:47  jrabbit: I'm jsut workign with a big data set now.
08:47  DigitalKiwi: I avoided learning java for years, even switched majors
08:48  DigitalKiwi: now i'm doing android development and almost wish i hadn't avoided it :(
08:48  jrabbit: DigitalKiwi: haha
08:48  jrabbit: Android sucks sadly
08:48  jrabbit: is great for a phone but compared to my computers its an endless osurce of frustration
08:49  pr3d4t0r: jrabbit: Android is the new Windows - the OS for the masses.
08:49  jrabbit: it feels that way :(
08:49  pr3d4t0r: jrabbit: With all the cool and bad that entitles :)
08:49  jrabbit: I couldn't even loop mount on mine
08:49  DigitalKiwi: 'windows phone will kill android!'
08:50  DigitalKiwi: some dude a guy i work with knows was showing me his windows phone, thing looked like crap
08:51  jrabbit: I'm hoping one day I can run git on my goddamn android or atleast hg
08:51  jrabbit: silly bionic c lib
08:51  DigitalKiwi: android-scripting has python
08:51  jrabbit: yeah
08:51  DigitalKiwi: hg is the python one right?
08:52  jrabbit: but it has a bug that won't et you run hg
08:52  DigitalKiwi: oh
08:52 * jrabbit tried
08:52  _habnabit: bzr is python too.
08:52  _habnabit: hg ain't so great, though.
08:52  jrabbit: I'd rather die than touch bzr _habnabit
08:52  DigitalKiwi: isn't there a haskell one?
08:52  jrabbit: :P
08:52  jrabbit: DigitalKiwi: don't go there :P
08:52  _habnabit: jrabbit, hg is worse in like every way
08:52  DigitalKiwi: i just want the name
08:52  jrabbit: I like git
08:52  jrabbit: it was just git wasn't liking not having gnulibc
08:52  jrabbit: and no libiconv
08:53  DigitalKiwi: i hate committing
08:53  jrabbit: how the fsck did Google get bash to build without the gnu libc stuff?
08:53  jrabbit: _habnabit: hg-git woudl let me not have to do any conversion
08:54  _habnabit: jrabbit, this doesn't make hg any less terrible
08:54  jrabbit: yeah I know
08:54  jrabbit: I don't use it on anything
08:54  jrabbit: I use git all the way down
08:55  jrabbit: git and bad anydmb dbs with json (I might replace these if they ever get used heavily)
08:56  jrabbit: The following 6 additional packages will be installed: cloog-shlibs djbfft gcc44 gcc44-compiler gmp ppl-shlibs
08:56  jrabbit: hahaha
08:56  jrabbit: fr scipy
08:56  magcius: jrabbit, what's wrong with git?
08:56  jrabbit: Won't build without libiconv for me => no build for android
08:57  magcius: How did you get a working system without iconv?
08:57  magcius: everything requires iconv, because it's useful
08:57  jrabbit: Android. Doesn't. Have. Iconv.
08:58  jrabbit: or atleast not in the ndk
08:58  jrabbit: they don't have gnu libc ethier
08:58  jrabbit: nor gettext...
08:58  jrabbit: they have bionic some bastard child of gnu libc and bsd libc
08:59  jrabbit: ANywho git compiling and me don't get along
08:59  jrabbit: I told it not to build against iconv and it refused
08:59  jrabbit: :)
08:59  DigitalKiwi: what is iconv?
09:00  jrabbit: a core gnu system lib
09:00  dgoon: iconv is a module to convert bytesquence from some-encoding to another encoding
09:01  jrabbit: I'm sure android has something
09:01  cwillu: iconv - Convert encoding of given files from one encoding to another
09:01  DigitalKiwi: ah
09:01  DigitalKiwi: thanks
09:02  jrabbit: Android is great for psuedo-java :P
09:03 * jrabbit mumbles somethign about jgit
09:06  MostAwesomeDude: jrabbit: What's this have to do with Python, again?
09:06  jrabbit: nothing large tangent.
09:07  jrabbit: MostAwesomeDude: I have to compile all of scipy's deps :)
09:08  MostAwesomeDude: jrabbit: My heart bleeds.
09:08  l34k: i have a quick questoin: how do i get all my integer devision to behave like floats? i'm not sure if there is a built in for it, but i would like to preserve decimals
09:09  bob2: l34k: decimals != floats
09:09  bob2: l34k: but 'from __future__ import division' in each file you want / to work like //
09:09  l34k: all i know is i can't preserve decimal places with ints
09:09  l34k: thank bob2
09:09  bob2: because it does integer division instead of making them floats and then dividing
09:10  l34k: thanks bob
09:10  l34k: bob2*
09:10  l34k: works perfectly
09:10  MostAwesomeDude: l34k: Just to make sure you understand... floats don't perfectly preserve sigfigs.
09:10  MostAwesomeDude: Just like floats in every other language.
09:10  l34k: of course
09:11  MostAwesomeDude: I mention this because, if you *absolutely* need exact sigfigs, there's a (slower-than-float) decimal module, and decimal.Decimal is a thing.
09:11  l34k: it's different in python because i can't specify passed values as floats
09:14  bob2: not really
09:14  bob2: just requires you to convert or document
09:16  Aranel: I'm trying a simple Qt4 button to call def baglan(), I wonder what's wrong about it: QtCore.QObject.connect(self.pushButton, QtCore.SIGNAL("clicked()"), baglan()) ?
09:17  bob2: and theexcepption you get is a NameError?
09:17  magcius: jrabbit, look on the bright side, at least it's not sgae :)
09:17  magcius: er
09:17  magcius: sage
09:18  magcius: bob2, if you want '/' to work like '//'?
09:18  magcius: bob2, that sounds useless, now you have integer division all around
09:19  bob2: meh
09:19  bob2: i'm a liar
09:19  cwillu: yes you are
09:21  pr3d4t0r: Habbie: Do you know of any Python implementations for Dalvik?  I could get into experimental Android hacking if I had Python for it.
09:22  pr3d4t0r: _habnabit: ^^^^^
09:22  cwillu: http://code.google.com/p/android-scripting/
09:22  pr3d4t0r: _habnabit: I play around with some tools using PyObjC on the iPhone; I wish it'd be officially supported.
09:23  pr3d4t0r: cwillu: Ah, lemme check that.
09:24  pr3d4t0r: cwillu: Have you used it, or did you just google it? ;)
09:39  norton-: What argument should I pass to exit() when I have to exit because of failure? I can't seem to find anything similar to EXIT_FAILURE in Python.
09:39  bob2: 1
09:39  cwillu: norton-, or just let the exception happen
09:39  bob2: (sys.exit(1))
09:40  norton-: cwillu: yeah, that might actually be better
09:41  norton-: bob2: really? Doesn't it differ between systems?
09:41  cwillu: no
09:41  bob2: ?
09:42  cwillu: even windows got that one right
09:44  norton-: Well, in C, the only valid return values are 0, EXIT_SUCCESS and EXIT_FAILURE. And EXIT_FAILURE is defined to be the correct number for the system you are using.
09:45  norton-: So it sounds suspicious that 1 would work, unless Python does some conversion behind the scenes
09:45  norton-: I mean it *works*, but just wondering if it is "correct"
09:45  norton-: :)
09:45  timClicks: which double underscore method is called on a list when one of its keys is called?
09:45  MostAwesomeDude: EXIT_SUCCESS and EXIT_FAILURE have been 0 and 1 for years now.
09:46  MostAwesomeDude: Decades, even.
09:46  cwillu: norton-, I'm not certain you're correct there, but one sec :p
09:46  norton-: cwillu: ok :)
09:47  norton-: MostAwesomeDude: Ok, I see. So nowadays no one cares about EXIT_FAILURE anymore?
09:47  ssbr: norton-: unfortunately nobody codes that strictly to the C standard
09:48  ssbr: the GNU tools are all documented to return quite a variety of return codes, for example
09:48  cwillu: more relevantly, no common operating systems are limited to a single bit for the return value
09:48  MostAwesomeDude: norton-: *I* do, but I'm an exception, these days.
09:48  norton-: I used to read comp.lang.c, so that's why I think about these things when coding :)
09:49  ssbr: norton-: I think, since Python does not export these constants, it would be reasonable to expect returning 1 or 0 to work
09:49  kerio: excessive portability is a problem
09:49  ssbr: and if Python is compiled on some strange system that uses different numbers, maybe it can intercept your sys.exit and change the values.
09:49  norton-: anyway, so, when writing Python code, should I just use 1 and 0 then?
09:50  kerio: norton-: sys.exit(message)
09:50  kerio: way better
09:50  cwillu: norton-, the acceptable values are defined by the operating system, not the language
09:51  norton-: kerio: Yeah, thanks!
09:51  kerio: cwillu: on the other hand, if you're using an OS that has really weird return codes, you probably know already
09:51  norton-: cwillu: that's why I thought Python would have defined some constants for that
09:52  cwillu: norton-, why?  that prevents you from doing anything useful with the exit code
09:52  ssbr: norton-: Python doesn't make getting rid of magic constant literals a big deal
09:55  norton-: cwillu: Isn't it normally the operating system that does something useful depending on the exit code?
09:55  cwillu: sorry, say that again?
09:55  cwillu: ah
09:56  cwillu: yes, but the program needs to have the flexibility to give useful return codes
09:56  cwillu: (unix and windows both allow more than 0 and 1, and that flexibility is often used)
09:56  norton-: alright
09:57  The_Ball: In a function can I get a list of arguments passed to the function? something like def foo(a,b,c): print 'Got these arguments %s' % list(**args) ?
09:57  cwillu: The_Ball, def foo(*args)
09:58  norton-: well, thanks for the input all of you. Think I'll use sys.exit(message) or let the exception happen from now on
09:58  cwillu: The_Ball, def foo(*args, **kwargs) if you also want to handle keyword args
09:58  The_Ball: cwillu, I would like to do this in a normal function
09:58  cwillu: The_Ball, print "Got these arguments %s' % [a, b, c]
09:58  bob2: The_Ball: why?
09:58  cwillu: bob2, debugging, no doubt :p
09:59  cwillu: The_Ball, print "Got these arguments %s' % ([a, b, c],), sorry :p
09:59  The_Ball: cwillu, bob2, I want to sprinkle debug statements throughout the code i.e. print 'in some function with %s' % list(bla)
09:59  cwillu: The_Ball, use a debugger?
09:59  bob2: yeah well no dice
09:59  bob2: you can do a hilarious arg-logging decorator, though
10:00  The_Ball: bob2, haha, no thanks :)
10:01  The_Ball: debuggers will show you the current scope of arguments right? but I guess they do a lot of fancy stuff behind the scense
10:01  The_Ball: s/scense/scenes
10:02  kerio: nah, not as much
10:02  bob2: so, a hilarious way to do it is to scrape the stack
10:03  cwillu: okay, who gave bob2 the weed?
10:07  ivan`: http://wordaligned.org/articles/echo does this with a decorator
10:11  bob2: http://paste.pocoo.org/show/320927/
10:11  bob2: easier than I thought
10:12  kerio: bob2: :<
10:13  bob2: :)
10:18  pankajm: how to modify global variables from inside functions?
10:18  nosklo: pankajm: there's a keyword to do that
10:19  nosklo: pankajm: but, even better is to make them not global variables anymore
10:19  nosklo: pankajm: if you have to modify them, that means they should really be attributes of some class instance, instead
10:20  bob2: +1, but the short answer is 'global foo' in a function makes 'foo' refer to the global in that function
10:21  pankajm: bob2: so if my global variable is x , inside the function (global x) can modify my global x?
10:22  bob2: if you have a 'global x' statement in the function, reassigning x will alter the global
10:22  pankajm: thanks
10:23  bob2: but what nosklo said
10:27  Aranel: How can I make a lineEdit on Qt4 to change python variable?
10:27  kerio: and by "global" they mean module-level
10:28  bob2: Aranel: what do you mean?
10:29  Aranel: bob2: I mean, I created a UI using Qt4 Designer and a script using Python, now I want to bind the empty line I created on designer, to a python variable.
10:30  yeshuah: I have a script which when run on my localserver runs fine - but now on my webserver it just exits with a "killed" message. It has run fine here before also - what could be the cause?
10:34  comawhite: yeshuah, well give us the error message, we can't read your bloody mind
10:34  Peng: yeshuah: Perhaps your web server has some draconian program to kill stuff that uses too many resources.
10:34  kerio: if your mind is bloody you should go to a doctor
10:34  cwillu: no, that rings a bell, I can't remember what causes it though
10:34  yeshuah: comawhite: the message is just "Killed" nothing else
10:34  cwillu: it literally just says "killed"?
10:35  comawhite: kerio, it's a british word for something I can't say :P
10:35  Peng: sys.exit("Killed") # Screw with yeshuah
10:35  kerio: comawhite: i know
10:35  kerio: Killed is a kill -9 from somewhere else
10:35  yeshuah: Peng: yeah maybe - but just wierd that it has been running fine 3 times a day without any problem until today
10:35  kerio: and the shell tells you that
10:35  cwillu: comawhite, ulimit maybe?
10:36  comawhite: ?
10:36  sam_sam: in a dict if i have a value how to get its key ?
10:36  cwillu: perhaps you shouldn't administrate servers :p
10:36  cwillu: comawhite, man ulimit, and then learn how your server is put together
10:36  cwillu: not really a python question though
10:36  comawhite: cwillu, why do I need that?
10:37  cwillu: comawhite, type it into a terminal
10:37  cwillu: google it
10:37  cwillu: whatever
10:37  comawhite: yes I know, but I don't need that
10:37  cwillu: comawhite, it doesn't sound like you know how your server is put together.  I'm suggesting it as a possibility for why your app is getting killed
10:38  comawhite: cwillu, that's for yeshuah not me. I am not doing no server work plus my server works fine anyways
10:39  yeshuah: cwillu: my ulimit is unlimited
10:39  cwillu: sorry, mixing up my users
10:39  comawhite: lol
10:39  cwillu: yeshuah, shared server?
10:39  yeshuah: vps
10:39  cwillu: with who?
10:40  cwillu: non-reputable provider might be "fixing" your server for you :p
10:40  yeshuah: cwillu: slicehost
10:40  Peng: Well, you could've installed a draconian daemon on your slice...
10:42  yeshuah: alright so the cause is probably some other process killing the python script due to resource usage
10:42  cwillu: yeshuah, check dmesg for oom
10:43  yeshuah: cwillu: yes - thanks - found something there
10:43  yeshuah: [303523.831706] Out of memory: kill process 1397 (python) score 85444 or a child
10:43  yeshuah: [303523.831740] Killed process 1397 (python)
10:43  kerio: out of memory :<
10:43  kerio: how do you get out of memory
10:44  cwillu: trivially?
10:44  kerio: no, in any sensible application
10:44  cwillu: kerio, it's not that hard
10:44  cwillu: small slice + big dataset
10:44  kerio: *sensible*
10:44 * cwillu plonks kerio 
10:46  yeshuah: I just think it's wierd that it's suddenly out of memory on the 20th run and not before - when the dataset hasn't changed much
10:46  cwillu: yeshuah, so run it and see what it does
10:46  cwillu: you're not a special snowflake that makes programs without bugs unlike everyone else :D
10:47  cwillu: crying "it never did it before!" is just whining.  You're a big boy, you can fix your mistakes :)
10:52  yeshuah: cwillu: well rebooting the server helps.. the swapfile was running very low - it looks like this script releases memory fine when run - so maybe something else is slowly leaking
10:53  cwillu: yeshuah, admin tip:  avoid killing the patient if you can;  rebooting just hides the problem for a while, and forces you to wait before you can look at what's using too much memory again
10:53  cwillu: yeshuah, top, sorted by swap or mem usage is useful
10:54  cwillu: and you might want to check if /tmp is a tmpfs that was getting big, or similar
10:58  yeshuah: thanks
11:00  cwillu: it's one thing if you absolutely need the service back up this second with people breathing down your neck, but if it's not a panic situation...
11:03  yeshuah: cwillu: this was sort of essential to get online asap - but I'm in the process of moving the heavy scripts processing script off to a seperate server and then only pushing complete result sets onto the prod - to avoid these problems again
11:03  kerio: yeshuah: dd if=/dev/zero of=swapfile bs=1m count=10240 && mkswap swapfile && swapon swapfile
11:03  kerio: there :D
11:04 * cwillu makes a note to keep kerio away from his servers
11:11  cwillu: kerio, _everyone_ knows that the _right_ answer to memory pressure is to _compress_ your _existing_ swap
11:12  kerio: cwillu: pleease
11:13  cwillu: preferably via loop devices backed by compressed filesystems
11:19  Loafers: im new to python.  trying to run a program, i keep on getting "inconsistent spacing tabbing" error.  heres my short program http://codepad.org/3aNnjAhi
11:19  Loafers: says the error is on line 17
11:20  _habnabit: Loafers, pastebin the full traceback
11:20  cwillu: Loafers, make sure you're not mixing tabs with spaces
11:21  Loafers: _habnabit: traceback is the error output right?
11:21  cwillu: yes
11:22  Loafers: _habnabit: ok here it is http://pastebin.com/PVSknTEJ
11:22  infobob: http://paste.pound-python.org/show/1614/ (repasted for Loafers)
11:23  Loafers: cwillu: i was using vim and it autoindented so there should be no spaces mixed with the tabh
11:24  cwillu: Loafers, given the error, it would seem that that's not the case
11:30  Loafers: cwillu: yeah your right :/  i did copy paste from another file and there spaces in the tab on another line
11:30  Loafers: cwillu: i wish python would just recognize that their in the same scope :(
11:31  cwillu: I wish python considered the tab character to be a syntax error regardless of its context
11:31  SpComb: python -t
11:31  cwillu: ... by default
11:32  SpComb: alias python=python -t
11:32  cwillu: that's not a default
11:32  Gentle: was about to type that ;)
11:32  Loafers: cwillu: why? entering all those spaces is tiring
11:32  cwillu: SpComb, it's also not what I said anyway
11:32  ssbr: Loafers: he didn't say ban the tab key, just the tab character
11:32  cwillu: I'm saying _any_ tab, not just tabs which are ambiguous
11:32  TFKyle: cwillu: no thanks, some people still prefer using tabs for indentation (being consistent of course)
11:33  kerio: Loafers: you *push* the tab key, but your text editor should align to the right multiple of 4 of spaces
11:33  SpComb: Loafers: ideally your editor would insert the spaces for you when you autoindent/tab
11:33  ssbr: Loafers: my tab key in my editor of choice indents the code by one level, and does so with spaces.
11:33  cwillu: TFKyle, such people have my sympathy.  Brain injuries are terrible things
11:33 * cwillu ducks
11:34  Loafers: o
11:35  SpComb: tabs are fine when used consistently, it's when you start fine-tuning the indentation..
11:38  current_gypsy: Seems the Python style guide agrees with cwillu diplomatically.
11:39  current_gypsy: I'm rather lazy. Pressing the backspace key four times rather than once is... though the style guide. I suppose I can try.
11:39  cwillu: current_gypsy, get a decent editor?
11:40  cwillu: hell, even gedit will handle space-based indentation with single keystrokes
11:40  TFKyle: cwillu: I really fail to see what's wrong with tabs (other than some ancient editors suck, and (C)Python translates translates them to 8 spaces internally, nothing wrong with that as long as you're consistent though)
11:40  cwillu: poor thing
11:41  TFKyle: but yeah, PEP8 recommends 4-space indents, I just choose to ignore that in my own code :)
11:42  _habnabit: current_gypsy, any editor worth /anything/ will treat four spaces as one contiguous unit.
11:42  xgkkp: tabs don't maintain consisted alignment across many peoples spacing configurations
11:43  TFKyle: xgkkp: really? what editors/common configurations do that by default?
11:44  SpComb: can't find my pyPgSQL example anymore
11:44  SpComb: it was pretty pathological
11:44  xgkkp: TFKyle: Any? If you align everything with 4 space tabs and someone tries to view it with an editor on any other spacing, it messes up. It messes up line continuations, it messes up line wrapping etc
11:45  xgkkp: also, tabs look messy when you have whitespace display turned on!
11:48  cwillu: xgkkp, you're talking about _mixing_ tabs and spaces though
11:48  cwillu: which is utterly insane
11:50  xgkkp: cwillu: if you indent with a mix, sure it messes up, but if you only use tabs you can't guarantee that anyone opening the document will see it properly
11:50  cwillu: xgkkp, think about that
11:51  cwillu: oh, you're talking about overly formatted continuation lines and such
11:51  cwillu: more sillyness
11:51  xgkkp: Even ignoring continuation lines, your line character limit can get messed up causing unnecessary wraps
11:51  TFKyle: xgkkp: ah, that, I agree about wrapping, line continuations don't have a problem in my experience if you use "\t"*indent_level + " "*characters, tbh that's another area I don't always follow PEP8 on, a lot of the time if a statement is longer than 76ish characters I just keep it on the same line and don't bother with separating it
11:52  cwillu: xgkkp, that would be an exceptionally broken editor
11:52  xgkkp: cwillu: An exceptionally broken editor is one that cannot display more horizontal characters than the terminal width it is running in?
11:53  xgkkp: what would you prefer, just hiding the code that goes over?
11:53  cwillu: or folding it, whatever.  I don't deal with 80 column terminals or windows basically ever
11:54  xgkkp: cwillu: There are other programmers an other environments, not all of which have an identical setup to yours
11:54  cwillu: xgkkp, and conveniently enough, they can change the width of the indent in any non-broken editor? :p
11:55  xgkkp: cwillu: on potentially every document they open?
11:55  cwillu: that's the editor's problem
11:55  cwillu: if their environment is that broken, perhaps they should consider a different environment
11:55  DigitalKiwi: some nanos handle really long lines really poorly
11:55  cwillu: (no, I don't believe you if you claim that most people have hard 80 character limits)
11:56  xgkkp: cwillu: again, are you suggesting the editor is broken if it can't correctly guess the intended tab alignment of every document it opens
11:56  cwillu: it's not hard
11:57  DigitalKiwi: like, a long time ago i remember a distros installer occasionally breaking if you used nano for the config files cause they didn't use --nowrap
11:57  ivan`: tabs allow indenting and dedenting without parsing the program
11:58  b14ck: Quick decorator question. I've got a decorator from a library that I'm using. It requires an argument. So I can use it like `@do_something('orelse'); def foo() ...`. How can I use that same decorator using old notation (without the @ sign)? If I do `x = do_something('orelse', foo)` I get errors.
11:58  Kruptein: If I want to copy all files and folders from dir "x" to dir "y"   how would I do that with shutil? I'm using shutil.copy() wrong somehow
11:58  cwillu: b14ck, the same way
11:58  b14ck: cwillu: how do you mean?
11:58  gorakhargosh: How does one compile a debug build of Python 2.7 from source code?
11:58  cwillu: do_something('orelse')(foo)
11:58  TFKyle: ah, nano's hard wrapping, I forgot about that, that was annoying
11:58  b14ck: Ok!
11:58  cwillu: do_release isn't the decorator.  The object that do_release() returns is the decorator
12:00  SpComb: Kruptein: copytree
12:00  Kruptein: SpComb: okay thanks
12:14  Taos: I aready don'tt but what is the reason not to use os.system if i just want to call a program not caring for the results
12:23  Peng: Taos: Shell injection.
12:27  nosklo: Taos: many reasons
12:28  nosklo: Taos: os.system needlessy invokes the shell. That means you needlessy invoke 2 processes instead of one. You also must deal with many shell quirks.
12:31  lionping: nosklo: do you know why os.system() is still there in python3.X?
12:33  Taos: nosklo: thanks mate
12:34  nosklo: lionping: no. It's not deprecated or anything, but the 3.x docs suggest you don't use it http://docs.python.org/py3k/library/os.html#os.system
12:34  nosklo: Taos, lionping: "The subprocess module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using this function."
12:36  lionping: nosklo: yeah. subprocess.call() and subprocess.Popen() is also my thing.
12:37  lionping: I expected os.system() to be removed from the python3-universe (no need to be backwared compatible)
12:38  dizital: hello all
12:41  dizital: I'm  new to python and I'm currently in a boggle and confuse on what is wrong- i typed this #!/usr/bin/python   #Filename: helloworld.py   print('Hello World') and saved it to a file on my desktop and when i run the command prompt and enter the python helloworld.py i get python: can't open file 'helloworld.py': [Errno 2] No such file or directory
12:41  VladDrac: dizital, is your current working directory your desktop?
12:42  dizital: VladDrac: yes, thats where i have the idle and a folder at to save anything i do to
12:42  VladDrac: that's not what I asked
12:43  lionping: dizital: helloworld.py has x-rights?
12:43  VladDrac: pwd in your terminal says something like /somewhere/Desktop/ ?
12:43  dizital: I'm confused then I'm new to linux and python
12:43  VladDrac: lionping, that's irrelevant
12:44  dizital: oh no it doesn't
12:44  dizital: change to the location on my terminal and it should work?
12:44  VladDrac: then cd to the directory your desktop is at, usually something like ~/Desktop
12:44  VladDrac: or better, don't work from your desktop
12:44  Taos: nosklo: I already use subprocess and love it, its just trying to explain to someone why system sucks was trucky so I used your help
12:45  dizital: save it somewhere else then?
12:45  dizital: i'll move them to my home folder
12:48  dizital: VladDrac: ty for the help
12:48  VladDrac: it works now?
12:51  dizital: haveing problems getting the terminal to my home folder lol
12:51  Skola: cd
12:53  xgkkp: dizital: To expand on that, 'cd' without arguments takes you back to your home folder
12:53  dizital: xgkkp: ye ai just notice that but its still giving me the same error
12:53  Skola: do
12:53  Skola: ls
12:54  Skola: see if your file is there
12:54  xgkkp: I wonder if the distro 'home' on the gui file manager is really a subdirectory like ~/Documents or something
12:54  dizital: k i got it now, i had to get into the folder inside my home folder to get it. ty all
12:55  Skola: good :) xgkkp: that would be aweful but yeah who knows
12:56  dizital: working on getting out of the windows and learn this, and linux
12:56  earwigs: getting out of the windows?
12:56  dizital: microsoft sorry about that
12:56 * babilen defenestrates dizital 
12:56  Skola: rofl babil
12:56  earwigs: dizital: found ubuntu was a nice OS to learn python on
12:57  dizital: thats what i read that ubuntu was user friendly and python is suppose to be very easy to learn
12:57  babilen: I think that linux from scratch is better for learning linux -- debian afterwards :)
12:58  earwigs: dizital: yeah, and ubuntu already comes with python propperly installed and gedit to start playing around with.
12:58  pff_Manji: i would recommand ubuntu too as a starting linux
12:58  earwigs: dizital: "Learn Python the Hard Way" has been a good way to learn it, but comes down to your own learning style.
12:58  purch: archlinux or gentoo if you want to learn linux under the hud
12:59 --- Cain` is now known as Cain
12:59  dizital: earwigs: yea thats whats killing me it i'm currently going along with the book a byte of python to learn the simple stuff
12:59  earwigs: dizital: yeah i have that too, try Learn Python the Hard way, its .. mm, less painful and the title is an oxymoron
13:00  purch: archlinux comes with python3 (also python2 supported)
13:00  earwigs: dizital: http://www.ubuntu.com/ and http://learnpythonthehardway.org/index
13:01  dizital: earwigs: k ty for the tip and link
13:01  purch: and burn live-cd and try out first
13:01  earwigs: dizital: one thing that blew me away when i first installed ubuntu, was that once you boot from the CD you can go into 'test mode' where you can use the desktop, connect to the internet, and do a number of useful things
13:01  xgkkp: It was my understanding that dizital already was running linux, just trying to learn it
13:02  earwigs: dizital: letting the user connect to the net on boot from CD is what sold me on ubuntu
13:02  dizital: yea i already have it install and running, just learning it the system slowly
13:03  purch: I recommend to install ipython on your ubuntu
13:03  dizital: whats the difference?
13:04  purch: better python commmand prompt
13:04  earwigs: dizital: if you want to find linux alternatives to your windows programs, you can go to google and search for "best IRC client for ubuntu" or "best IDE  for ubuntu" and it almost always leads to a useful forum thread.
13:05  purch: dizital: http://ipython.scipy.org/moin/
13:05  dizital: purch: ty ill check it out
13:07  dizital: earwigs: yea that was one of the first things i did and play around with the ubuntu software center
13:09  earwigs: dizital: have you set up gedit for autoindenting?
13:10  dizital: earwigs: not yet i was using a idle and not got that far with it yet
13:11  earwigs: dizital: section 0 in the ebook i refered you to takes you through it.
13:11  dizital: earwigs: I already started reading on that one
13:12  earwigs: dizital: nifty, you should enjoy it, it actually gets you typing things and making things happen very early.
13:12  dizital: earwigs: yea i'm an hands on guy not much on being able to read and just do it later
13:13  earwigs: dizital: yeah same here, you'll definatly enjoy the book then.
13:13  dizital: earwigs: kool ty
13:22  Eruquen: Hey, I've just discovered the Modules/Setup.dist file. How can I tell which modules have been compiled into my libpython?
13:33  earwigs: dizital: let me know how you go with it.
13:33  earwigs: im out for now
13:35  dizital: earwigs: k i just got done with the first excercise, its different from the other book, since i'm using gedit and not the idle but getting it so far
13:44 --- Dynetrekk_ is now known as Dynetrekk
14:06  lvh: Hello.
14:06 * cwillu stabs
14:07 * lvh roars ferociously and accidentally stomps cwillu.
14:07 * cwillu is flattened
14:07  papna: AHHH!
14:07  papna: WHAT DID YOU DO!
14:07 * papna picks up lvh and rocks lvh in his arms.
14:07  papna: Don't worry.
14:07  papna: Mommy will take care of everything.
14:08  papna: Don't worry.
14:08 * cwillu emits a papery giggle
14:08 * papna digs cwillu an absurdly shallow grave.
14:08 * cwillu escapes to a nearby fax machine
14:09  lvh: Oh boy. Is it Saturday already? I wouldn't have guessed.
14:09  papna: Shit, it's WHAT?
14:10  cib0: Hello. Does anyone here happen to be familiar with python AST's?
14:10  lvh: papna: It's caturday! Everyone post some cats: http://bpaste.net/show/12934/
14:10  lvh: cib0: Lots of people.
14:10  lvh: (Don't ask to ask, just ask, if someone can help with your question they will.)
14:12  Taos: lvh: I see your challenge and take it
14:15 --- Velanor is now known as Vel^work
14:17  cib0: My specific question for now would be how to point nodes at a specific file/linenumber/caret position, but I'm generally looking for some more elaborate explanation on how that stuff works. I've looked at the official documentation, but it doesn't really tell me much.
14:18  talin: hello. what do you guys use for making webpages with typical inventory/database display/edit/query functionality?
14:18  talin: i'm trying django, but there's so much magic in there, that no one (including myself) has any clue how to fix it when it breaks
14:20  NelleV`: talin: I use pylons.
14:22  tmu: talin: you could have a look at turbogears2.1 and its admincontroller
14:23  talin: tmu: i'll check it out
14:23  yuwang: hello ~
14:24  Taos: lvh: http://codepad.org/fiVc5I7Y
14:24  tmu: talin: also sprox might be of interest, some like it, some don't.
14:24  Taos: caturday ^^
14:26  talin: tmu: ah, oki. will look it up... thanks
14:28  meltingwax: is xah lee a troll or is he just autistic
14:29  Taos: meltingwax: why do you say that?
14:29  meltingwax: i don't know, may have been too harsh
14:30  meltingwax: "do you know what's CGI? (web history personal story)"
14:30  Taos: Some people don't know what CGI Is, I didn't until last year
14:31  meltingwax: i see
14:34  xgkkp: Taos: Sure, but it's not exactly comp.lang.py relevant
14:34  lvh: talin: Depends what you need
14:34  lvh: talin: Really just CRUD isn't enough specification
14:34  lvh: talin: I'm building something using twisted.web since it's not really a webapp, more an API that uses HTTP
14:34  Taos: lvh: do you have any other silly days?
14:35  lvh: talin: For a webapp, I'd probably end up using Flask or Pyramid depending on what I actually need
14:35  talin: lvh: hmm, okay. i need to make a site like this over a few weeks. i don't have time to dedicate my life to it (since you mention twisted)
14:35  lvh: talin: Flask/Pyramid is a good example of how this "software weight" thing is a load of crap
14:35  lvh: talin: I'm not sure how the "dedicate your life to it" follows
14:36  lvh: talin: Like I said, it's a tool for doing HTTP, not a tool for doing websites
14:36  lvh: if you wanted a web framework on top of t.w.s, you'd use Nevow, not t.w.s
14:36  lvh: I only mentioned it because you asked me what I used, and that's what I use
14:36  lvh: (I'm pretty sure a clear separation of backend API that actually does things and frontend pretty web pages is a good idea)
14:39  lvh: Taos: No.
14:39  lvh: meltingwax: Xah Lee is a well known internet troll.
14:39  lvh: meltingwax: (He's banned from #python.)
14:40  meltingwax: lvh: thats what i thought
14:40  meltingwax: thanks
14:42  Taos: Xah lee seems like an asshole to be totally honest
14:44  lvh: Taos: Unfortunately he occasionally also does reasonable things.
14:45  lvh: cib0: You typically do that the other way around, ie check the code objects. If you want a detailed implementation you'd probably look at pdb.
14:45  Taos: lvh: Im reading his site and not finding anything worth comment on -_-
14:46  cib0: lvh: I'm not sure what you mean by checking the code objects.
14:47  lvh: cib0: def f(): return;; f.func_code.co_firstlineno
14:48  lvh: cib0: Additionally, all AST nodes ought to have lineno and col_offset attributes.
14:49  lvh: eg the implementation of ast.increment_lineno.
14:50  lvh: Taos: He's written some tutorials which are probably among the top tenth percentile of quality for most languages.
14:51  lvh: Taos: Also, some interesting Emacs stuff.
14:52  Taos: lvh: bleh
14:53  cib0: lvh: Interesting. Well, I'm writing a custom python syntax, or rather, have written it, but so far it's only a text to text translator. I'm trying to find a way to directly compile my syntax and get useful runtime errors.
14:55  lvh: alternative syntax with the ast module? interesting
14:55  lvh: I'd expect a parser construction kit for that
14:58  cib0: I like to do things myself. ;) My main goal is to get at least the correct linenumber for runtime errors, but I'm not expecting too much compatability otherwise.
14:59 --- ereslibre_desk is now known as ereslibre
14:59 --- ereslibre is now known as django
15:00 --- django is now known as ereslibre
15:00  cib0: Thanks for pointing me at pdb, I think that one will be helpful to understand when messing with python's internals.
15:01  lvh: to be fair pdb is way older than some of those tools
15:02  lvh: it's possible not all things in pdb use the ideal (let's hope that means "most recent") thing and instead keep using the old thing because a) it works b) a lot of existing software expects it to work in a particular way
15:10  Reite: Im pretty new to Python and I want to make a semi-simple program with a GUI. I got the impression from some previous discussions here that TkInter is not very good. Someone recommended GTK+ which looks nice to me, but then again I have no clue. Any reccomandations on what I should go with?
15:11  naeg: Reite: i used Qt(with pyqt) and it seemed pretty nice to me
15:11  naeg: though, my requirement were platform-independence
15:11  naeg: was*
15:12  naeg: and qt is pretty common on linux and windows, not like gtk
15:12  naeg: (afaik) :P
15:13  kerio: qt looks native on windows, can be made to look almost native on os x and *is* native on qt-based DEs on linux
15:14  Reite: I appreciate your opinion:) Have another question though, one thing that I liked about GTK+ is glade which is a gui for making guis :P Do you use some kind of gui for designing or do you just write the guis from scratch`?
15:14  tank_eev: holywars... here too ;)
15:15  naeg: Reite: i coded the whole gui, but there is a designer included
15:15  Juhaz: Reite, another vote for pygtk from me
15:15  daemonkeeper: Honestly I don't know about Python's GTK+ bindings, but it is worth to note that GTK is a C library, that is, you program your Guis using C which is a pain in my opinion
15:15  kerio: qt is a c++ library :/
15:15  daemonkeeper: Yes
15:15  kerio: it's not good
15:15  tank_eev: lol
15:16  Juhaz: what is "you program your guis using C" supposed to mean with bindings?
15:16  kerio: Juhaz: nothing, really
15:16  naeg: isnt gtk+ c++ too? at least you can use it with c++, right?
15:16  kerio: wrappers always feel like wrappers though
15:18  talin: can you make websites the same way that "php" does with python?
15:18  talin: that is, inline with code?
15:18  Juhaz: talin, in theory, yes. It's a bad idea, nobody does.
15:18  marienz: talin: please don't :(
15:18  kerio: talin: thankfully no
15:18  talin: ack... i guess i should use php then
15:18  marienz: talin: there are a couple of templating libraries for python that you may want to look into
15:19  kerio: talin: why would someone make that decision?
15:19  talin: i've tried all these magical frameworks that do everything for you until it fails, and then no one has a clue how to fix it because it's magical
15:19  talin: i like when i hvae to do a lot of things manually.. because when it breaks, you need to go down to that level anyway
15:20  marienz: naeg: gtk (as well as several other gobject-based libraries) has c++ bindings (gtkmm)
15:20  tank_eev: QT have much more perspective. even next Ubuntu desktop are not gtk-based. maemo/moblin based on qt. qt is more multiplatform framework based on object-oriented patterns of UI. more mainstream way
15:21  Juhaz: well, that's a nice piece of FUD
15:21  Juhaz: especially the ubuntu part
15:21  marienz: gtk's object-oriented in my book
15:21  naeg: tank_eev: that's exactly why i use/used qt, and also why i would recommend it to you Reite
15:21  marienz: and I haven't heard anything about ubuntu switching away from gnome, and gnome definitely isn't switching away from gtk
15:22  naeg: who cares about ubuntu anyway :P
15:22  xgkkp: Nobody seems to have mentioned wxPython as a gui alternative yet
15:22  marienz: note that I don't think there's anything wrong with qt, but what you're saying about gtk seems a little off
15:22  Juhaz: and yeah, wrappers always look like wrappers but I've noticed that C bindings tend to drag a lot less baggage with them than C++
15:22  cib0: wxPython can hardly be called an alternative. ;)
15:22  daemonkeeper: naeg: Gtk+ is a C native librabry, there are C++ wrapper around (gtkmm). Qt on the other hand is native C++ (and is the best C++ I've ever used)
15:22  tank_eev: Juhaz: it just some real life examples
15:22  daemonkeeper: *C++ librabry
15:22  daemonkeeper: library
15:22  lvh: um, if you're using gtk you're probably *NOT* using those direct bindings
15:22  marienz: they're both fine, really. I suspect qt is a bit easier to get to look native on windows.
15:22  lvh: you're using gobject inspection
15:22  naeg: daemonkeeper: i see, thanks
15:23  marienz: lvh: many pygtks aren't gobject-introspection based just yet
15:23  marienz: that's coming but it's not yet the norm
15:23  lvh: marienz: gtkmm?
15:23  marienz: what?
15:23  Juhaz: tank_eev, it's hardly real life if you pull something out of your ass, like the ubuntu part.
15:23  lvh: marienz: Oh, wait, I misread what you actually said, sorry
15:24  lvh: marienz: I thought someone was suggesting that python used C++ bindings to GTK
15:24  marienz: gobject-based bindings, just not gobject-introspection-based bindings
15:25  lvh: tank_eev: Where's your source on the not-GTK-basedness
15:25  Juhaz: tank_eev, or some vague handwaving about "object oriented patterns" implying the alternative isn't OO
15:25  lvh: marienz: Ah, I thought they moved the core over already
15:25  marienz: lvh: upstream has, afaik
15:25  tank_eev: Juhaz: examples of architectural choises
15:25  marienz: lvh: but I'm pretty sure the api exposed to python by the new stuff isn't strictly backwards-compatible
15:26  Juhaz: as for maemo/moblin, wake me up when there's more than one device on that platform
15:26  marienz: lvh: I have yet to actually dig into the new stuff though
15:26  Juhaz: (besides, it supports gtk)
15:26  tank_eev: Juhaz: i don't get into your holywar it's just my own opinion
15:26  Juhaz: I'm not the one sprouting opinions as facts
15:27  Laurenceb_: hi
15:27  Laurenceb_: http://pastebin.com/nXXybTvB
15:27  infobob: http://paste.pound-python.org/show/1608/ (repasted for Laurenceb_)
15:27  tank_eev: some opinions has more wage than some of facts.
15:27  Laurenceb_: im working on a prject the requires feedback from a forked process
15:28  Laurenceb_: unfortunately its not working correctly
15:28  lvh: marienz: Ah, yes -- you're right -- they're moving to that so that py3k actually works properly with it
15:28  Laurenceb_: line 95+
15:28  lvh: marienz: but it's not quite there yet
15:28  lvh: The core works
15:28 * marienz nods
15:28  Laurenceb_: it does read data back
15:28  marienz: lvh: sounds like I remembered where they are roughly correctly then :)
15:28  Laurenceb_: but theres big pauses, and the pipe is apparently full
15:29  Laurenceb_: the subprocess is blocked writing to the pipe
15:29  lvh: tank_eev: The next Ubuntu GUI not being Gtk-based is hardly an opinion, it's either true or false
15:29  marienz: lvh: remember pygtk currently passes bytestrings around and forces the standard encoding to utf-8, so they have to do *something* awkward switching to py3 anyway
15:30  boegel: hashamalachshasssss
15:30  lvh: boegel: Sorry?
15:30  boegel: or do you guys talk English too?
15:30  boegel: s/talk/speak/
15:30  lvh: boegel: I'm pretty sure everything we've just said was in English.
15:30  tank_eev: lvh: http://www.omgubuntu.co.uk/2011/01/ubuntu-11-04-to-ship-with-2d-unity-session/
15:30  boegel: lvh: that was supposed to be the snake-langauge from Harry Potter :P
15:30  boegel: anyways....
15:31  boegel: how can I get a list of all the classes in a self-defined module, from within that module itself?
15:31  xgkkp: that sounded awfull like LOL
15:31  boegel: dir() isn't working, nor is dir(myModName)
15:31  nosklo: boegel: you don't
15:31  boegel: nosklo: as in, you can't?
15:31  nosklo: boegel: why do you need that list?
15:31  dheerajchand: Good morning, everyone
15:31  nosklo: boegel: as in, there are better ways
15:32  Juhaz: tank_eev, unity is a gtk app
15:32  boegel: nosklo: because I have a list of strings, with class names, and I want to run function X in those classes
15:32  Juhaz: or at least gdk
15:32  nosklo: boegel: why don't you make a list of classes directly
15:32  boegel: nosklo: but I want to make sure the class exists
15:32  nosklo: boegel: instead of a list of strings
15:32  marienz: boegel: it's usually possible to have a list of classes instead of a list of strings
15:32  boegel: nosklo: because that's easy to break...
15:32  marienz: also, I'm too slow
15:32  nosklo: boegel: wha?
15:32  lvh: tank_eev: "Someone is reimplementing a non-hardware accelerated version of Unity that uses Qt"
15:32  nosklo: no, it doesn't break
15:32  boegel: marienz: the list of strings comes from a file I read in
15:32  nosklo: ooh
15:33  marienz: boegel: it's usually much harder to break the list-of-classes approach, as you get a NameError (at import time or one pyflakes can catch statically) instead of having to check if you spelled the name right at runtime
15:33  marienz: ah
15:33  boegel: marienz: yeah, so list of classes isn't an option :)
15:33  naeg: Laurenceb_: i'm sorry i can't help you, but there is a typo in your comment, "gey" instead of "get"
15:33  lvh: So yes, okay: for 2D stuff
15:33  tank_eev: Juhaz: oh really http://bfiller.wordpress.com/2011/01/13/unity-2d/
15:33  nosklo: boegel: ok, then make a dict, where you have the name as a key and the class as attribute
15:33  boegel: it should be possible to get a list of classes/functions defined in the module I'm working in, no?
15:34  nosklo: boegel: then you can use that dict to fetch the class
15:34  boegel: nosklo: what if I add a class? then I need to adjust that dict
15:34  naeg: Laurenceb_: and i'd recommend to you, to post your problem again but in one message, so all see it and it doesn't get interrupted by other messages ;)
15:34  lvh: tank_eev: Yes -- that's unity 2d, which is distinct from unity
15:34  boegel: nosklo: it's easier to just add the class
15:34  marienz: boegel: what nosklo said (technically you might be able to get away with globals(), but an explicit dict of things the file is allowed to refer to is usually saner than using globals() and attempting to filter out things that shouldn't be accessible through it)
15:34  dheerajchand: Anyone around here familiar with geopy and its errors?
15:34  dropdrive: Is it true for every function call f(...) there is a unique tuple "args" and dict "kwargs" such that the function call f(*args, **kwargs) is equivalent to the original call, and "args" is of maximal length?
15:35 * boegel checks out globals()
15:35  nosklo: boegel: using a dict, means you have control, you also could have another name for a class, it's easier to test because you can just change the dict, it's easier to extend, you could have a class decorator that adds to the dict
15:35  marienz: boegel: I *really* don't recommend taking that approach
15:35  marienz: boegel: especially since you mentioned only wanting to find "classes"
15:36  boegel: nosklo: just adding the class is easier to extend, right? ok, it gives less control, but this is an in-house thing anyway
15:36  marienz: boegel: globals() has everything, including stuff your module imported. So if this file you're reading names out of is some kind of configuration file you'll probably end up having to add some kind of filtering, which'll end up being considerably more icky than the explicit dict of things the file's allowed to refer to
15:36  nosklo: boegel: when your program grows to more than one file, you can just add classes from more than one place to the dict
15:37  marienz: last time I did something like this was in py 3 so I could use a class decorator to add stuff to the dict
15:37  tank_eev: lvh: unity-2d will be mainstream way of canonical. and old unity - just another dead open-source project...
15:37  Laurenceb_: ok, http://paste.pound-python.org/show/1608/ im using that code to flork a subprocess. Whilst the subprocess is still running i want to continuously read back data through a pipe. This is not working correctly
15:38  Laurenceb_: the pipe fills and blocks the subprocess from writing
15:38  Laurenceb_: but data is occasionally read about once every 10 seconds
15:38  marienz: tank_eev: they're presumably still running primarily gnome apps inside that, and those are all gtk-based
15:39  Laurenceb_: http://code.activestate.com/recipes/440554/
15:39  Laurenceb_: im using that to read the data
15:39  naeg: Laurenceb_: now i understand your problem ;) well i guess your OS is blocking the file, so you need to open it in a special way i guess, so it alows you to read and write it from different processes
15:40  naeg: (that's just a guessing)
15:40  boegel: nosklo, marienz: thx for yr help
15:41  Laurenceb_: naeg: see lines ~50
15:41  boegel: I've only been working with Python for like 3 months, and it blows my mind from time to time, both in good and bad ways :)
15:41  Juhaz: tank_eev, there's NO indication whatsoever about anything like that happening. This "unity-2d" is not even in Ubuntu at the moment, it's a PPA package, something a few kubuntu developers dreamed up a few weeks ago
15:42  naeg: Laurenceb_: oh, seems like you do that already. but i am not familiar with that, and from my position it looks like it's your OS blocking, you may want to check if that is right as you did that
15:42  Juhaz: but I suppose not only your opinios are more important than facts, you also see the future
15:42  tank_eev: Juhaz: 11.04 both desktop and notebook editions are by default with it
15:42  nosklo: boegel: too bad you resorted to the worst solution, don't blame me when it blows your mind in the bad ways
15:43  naeg: boegel: same here, switched from c/c++/c#...simply awesome :D
15:44  boegel: nosklo: actually, I'm using the dict solution
15:44  dropdrive: Any users of the decorator module?  Where can I find the changelog for v3.3.0?
15:44  boegel: nosklo: partially because globals() isn't doing it for me either, and partially because you convinced me it's better
15:44  boegel: nosklo: it's less cool though ;)
15:45  nosklo: boegel: oh, hooray!!
15:45  boegel: naeg: I mostly worked with C before, but I'm into Haskell too
15:45  nosklo: boegel: we can make it cooler
15:45  boegel: nosklo: I'm sure you can
15:45  nosklo: boegel: which version of python are you in?
15:45  Juhaz: tank_eev, even if it will be included by default, it won't be used by default. Did you even read those blog posts your raving about? Do you know what this project is? It's a fallback for those who don't have graphics hardware powerful enough to handle unity
15:45  boegel: nosklo: 2.4.3 ^_^
15:45  nosklo: :(
15:46  boegel: nosklo: it's only a mean to an end
15:46  nosklo: boegel: that's.... 7 years ago
15:46  naeg: boegel: i hate you :P i really fucking want to learn haskell, but i just learned prolog(and python some months ago) and i can't find time for it
15:46  tank_eev: Juhaz: damn ppl who wrote this are idiots. it was just proof-links
15:46  naeg: but prolog is awesome too, wrote a sudoku solver and it's so easy :P
15:46  nosklo: boegel: 7 years is too much time
15:46  seen_: Laurenceb_: have you tried to read in another thread and pass required info via Queue?
15:46  boegel: naeg: you should buy the Real World Haskell book, or check out this website http://learnyouahaskell.com/ (he has a book too, due soon)
15:46  tank_eev: Juhaz: use google if you really want to know more.
15:47  boegel: nosklo: true, but I don't decide which version we're using
15:47  jarray52: Could someone point me to a guide comparing python's numerical types to those of gcc's g++? In particular, I'm interested in floats, doubles, numpy.float64, etc. I'd like to know the sizes, mantissa, etc. of each type.
15:47  naeg: boegel: thanks for the tip! gonna check that page when i decide to learn haskell
15:47  boegel: nosklo: we use it for sysadmin tasks on a HPC system
15:47 --- Xerion_ is now known as Xerion
15:47  boegel: naeg: check it out now, it'll suck you in ;)
15:47  Juhaz: tank_eev, google clearly says the same thing because that's what it is
15:47  naeg: boegel: ok ;)
15:47  boegel: naeg: the guy who wrote it is nuts, but it's the best (and most fun) Haskell tutorial out there
15:48  naeg: boegel: nuts?
15:48  cnfer: bonkers
15:48  cnfer: bananas
15:48  cnfer: few cards short of a full deck
15:48  cnfer: slightly off
15:48  cnfer: you know
15:48  cnfer: nuts
15:48  naeg: yeah ;)
15:48  boegel: naeg: yeah, I met him in real life, he's nuts :)
15:49  cnfer: boegel: all haskell coders i know are nuts
15:49  boegel: naeg: check out his tweets for example (http://twitter.com/#!/bonus500)
15:50  boegel: cnfer: nah, some are pretty sane (like me)
15:50 * boegel does a crazy dance around the table to confuse cnfer 
15:50  cnfer: lier
15:50  cnfer: liar
15:50  Juhaz: tank_eev, and the "idiot" who wrote that blog post you linked is the head of the project. You'd think he knows what his team is up to, no?
15:51  tank_eev: Juhaz: it was words cutted out of context
15:51  Juhaz: yes, you use a lot of words cutted out of context, that's for sure
15:51  naeg: boegel: he seems funny to me :D
15:51  boegel: cnfer: hey, ask my wife, she was yelling "What the hell are you doing? Stop that!"
15:51  boegel: naeg: he's funny, crazy funny
15:52  cnfer: :P
15:52  cnfer: boegel: silly woman
15:52  naeg: :o
15:52  tank_eev: Juhaz: pls leave me alone
15:52  boegel: cnfer: because she married me?
15:52  Juhaz: tank_eev, done. At least until I spot the next lie.
15:52  cnfer: because she tries to stop a man in his voodoo dance
15:53  cnfer: that is just Not Done
15:53  boegel: cnfer: yeah, her attempt was futile
15:53  Juhaz: tank_eev, if you don't want anyone to call out bullshit, then just don't try to bullshit anyone, it's pretty simple really.
15:53  cnfer: boegel: you tell her, either join in, or get out of the way, woman!
15:53  tank_eev: ignored
15:53  Juhaz: ooh, my heart bleeds
15:54  boegel: cnfer: yeah, she didn't want to with me being naked and all that
15:54  boegel: Juhaz, tank_eev: give it up, get a life
15:54  cnfer: the best voodoo dances are nakid!
15:54  cnfer: tsk
15:54  cnfer: silly woman!
15:54  cnfer: anyway, nao me walk to toon for noms
15:54  boegel: any way, Im off
15:54  Juhaz: boegel, you try getting a life when it's -23°C outside
15:54  boegel: all that talk about naked voodoo dances is making me horny
15:54  boegel: ttyl
15:55  boegel: Juhaz: you should become an ice road truckerm those guys manage ;)
15:55  naeg: boegel: cu and thanks again!
15:55  boegel: bye y'all
15:55  boegel: naeg: tell me I sent you :P
15:55  boegel: naeg: tell *them*
15:55  naeg: them?
15:56  boegel: naeg: the peepz in #haskell, because you'll end up there, mark my words ;)
15:56 * boegel throws some dust in the air
15:56  boegel: poof!
15:57  naeg: cnfer: you were right. boegel is crazy indeed ;)
15:58  Taos: o.O this is #python right?
15:58  naeg: how do you mean?
15:58  Taos: I can't see any python talk here
15:59  naeg: Taos: there was a pretty long conversation about pyqt vs. pygtk
15:59  Taos: Ah okay... :S
15:59  naeg: actually it then was about qt vs. gtk
--- Log closed Sat Jan 15 22:32:51 2011
--- Log opened Sat Jan 15 22:44:32 2011
22:44 --- Users 734 nicks [0 ops, 0 halfops, 0 voices, 734 normal]
22:46 --- Channel #python was synced in 106 seconds
22:46  DaveD0101: Is int(longvalue) an appropriate way to return the integer value of a long?
22:46  yakattak: longs can't fit in an int
22:46  yakattak: that's why they're a long
22:47  KirkMcDonald: There are plenty of longs which can fit in an int.
22:47  yakattak: yes
22:47  KirkMcDonald: However, generally one doesn't care.
22:47  yakattak: but the point of using a long is because the number is bigger than an int
22:47  KirkMcDonald: DaveD0101: Why is the distinction important?
22:47  dullboy: yakattak: in python is should use what it needs automatically
22:48  yakattak: well yeah
22:48  dullboy: *it
22:48  Nullslash: Hello, I'm looking for any function in python to convert LaTeX to plain text. For example, after writing x^2 , I want the function to return it as x^{2}.
22:49  DaveD0101: KirkMcDonald: I'm using a base36encode function (acutally from wiki) that requires an int or a long, but a check with isinstance seems to fail every time, so i'm trying to explicitly pass an integer.
22:49  KirkMcDonald: A long is an integer.
22:49  merijn: DaveD0101: Using isinstance is almost always a sign of your design being wrong
22:49  Nullslash: Does anyone know of such a function?
22:50  merijn: Nullslash: You mean turn python code into LaTeX?
22:50  dullboy: Nullslash: not in python. you could try making a pdf and converting it to plain text
22:50  DaveD0101: merijn: Like I said, it's from the wikipedia entry as a base36encoding function.  I'm a completely new to python.
22:50  merijn: Also, your example probably doesn't do what you think it does
22:50  KirkMcDonald: DaveD0101: Show us.
22:50  DaveD0101: hold
22:51  merijn: Nullslash: x^2 in python is a bitwise operator (I think XOR), not square, x ** 2 is x squared
22:51  Nullslash: merijn, Yeah, or regular string to LaTeX
22:51  blueadept: http://pastie.org/private/zemja4tfckdketi0sdhajg how do i order these entries by recent items first?
22:51  DaveD0101: http://pastie.org/1464911
22:52  dullboy: Nullslash: so you meant convert to latex from plaintext, not the other way aroubd
22:52  svip: Is it possible to use wildcards when selecting a list of files or should I walk through a dir and see which filenames matches a search string?
22:52  Nullslash: merijn, Yeah.
22:52  svip: e.g. '*.mp3'
22:52  merijn: dullboy: No, he means to convert python code to LaTeX
22:52  Nullslash: dullboy, python to LaTeX
22:52  Nullslash: dullboy, and LaTeX to PlainText
22:52  DaveD0101: http://pastie.org/1464915
22:52  dullboy: yeah, almost the same thing...
22:53  DaveD0101: that's the model
22:53  DaveD0101: the first was the functions
22:53  dullboy: svip: yes, use glob()
22:53  KirkMcDonald: DaveD0101: Why are these functions inside of a class?
22:53  DaveD0101: KirkMcDonald: If they shouldn't be, I just don't know any better. ;)
22:54  KirkMcDonald: DaveD0101: They shouldn't be.
22:54  KirkMcDonald: DaveD0101: I suspect that is your root problem.
22:54  DaveD0101: KirkMcDonald: I just had a bit of a discussion over at #django about where I should put them
22:54  merijn: blueadept: Use sort()? You can pass a function to use for comparing to sort, so just give sort() a function which compares the timestamps or whatever you use to decide what is recent
22:54  KirkMcDonald: DaveD0101: Second, get rid of that whole isinstance() check. It is not idiomatic.
22:54  DaveD0101: KirkMcDonald: Since they'll be reused by a couple diff models, I wanted them broken out, but not as part of a base class.
22:55  DaveD0101: ok
22:55  blueadept: marijn: ah, cool, let me try that
22:55  KirkMcDonald: DaveD0101: Those functions do not require any state. They are passed a value and return a string.
22:55  merijn: DaveD0101: If you have functions in a file named foo.py you can use those in different files by simply doing "from foo import myfunction"
22:55  KirkMcDonald: DaveD0101: They have no business being in a class.
22:55  DaveD0101: KirkMcDonald: Bizarre.
22:55  KirkMcDonald: DaveD0101: What?
22:56  merijn: DaveD0101: Are you new to programming? Or did you by any chance come from Java?
22:56  DaveD0101: KirkMcDonald: I'm used to function libraries being contained in a class in other languages.  Like I said, I'm new to all this.
22:56  DaveD0101: merijn: .net
22:56  KirkMcDonald: DaveD0101: Other languages being C#?
22:56  KirkMcDonald: Yeah.
22:56  KirkMcDonald: DaveD0101: That is a peculiarity of Java and C#.
22:56  merijn: C# inherited Java's brain dead "everything must be a class"?
22:57  dullboy: Nullslash: Laxtex to plain text = latex -> pdf -> pdftotext (poppler-utils on debian/ubuntu)
22:57 --- sitkack_ is now known as sitkack
22:57  pr3d4t0r: Heh.  I had this same conversation with someone in a parallel universe today.  Dude kept trying to put a stand-alone function in a class :)
22:57  DaveD0101: Ok, well removing the isinstance check altogether and stripping it out of the class.
22:59  bobng: DaveD0101: If it helps you can think of a module as a class
22:59  KirkMcDonald: Ehh
22:59  merijn: I strongly disagree
22:59  KirkMcDonald: Modules have very little in common with classes. :-)
22:59  KirkMcDonald: They are both namespaces... that's about it.
22:59  merijn: Try inheriting from a module...
23:00  bobng: KirkMcDonald: Thats what i was referring to
23:00  bobng: Rather than do what he was doing and add a class CommonLib at the top just strip it out and make them global at a module level
23:00  merijn: Thinking classes and namespaces are the same thing is the idiocy that got Java and C# in this mess to begin with
23:01  bobng: and then import "myfile" and treat that like the CommonLib class
23:01  KirkMcDonald: DaveD0101: The actual problem you were having, when you defined it as a method, is that methods require an explicit "self" argument.
23:01  KirkMcDonald: DaveD0101: By not providing one, each function was using "number" as the self parameter.
23:01  dullboy: DaveD0101: where self basically means 'this'
23:01  KirkMcDonald: DaveD0101: Which just breaks the whole thing.
23:01  DaveD0101: It works now. :)
23:02  DaveD0101: KirkMcDonald: I see...
23:04  DaveD0101: KirkMcDonald: I was off on a tangent thinking it had something to do with the goofy way the db api returns int pk's as long.
23:05  merijn: DaveD0101: In python there is no real difference between int and long, numbers get automatically converted to/from long
23:05  merijn: If you start with an int and keep adding 1 to it, eventually it'll become a long automagically
23:06  KirkMcDonald: Python 3 removes the distinction entirely.
--- Log closed Sat Jan 15 23:10:59 2011
--- Log opened Sat Jan 15 23:11:18 2011
23:11 --- Users 740 nicks [0 ops, 0 halfops, 0 voices, 740 normal]
23:11  merijn: KirkMcDonald: Just, but that is separate from the concept I'm referring to :p
23:11  DaveD0101: so in this case it just takes the long because the function can  use comparisons and perform divmod and the like just like it was an int?
23:11  KirkMcDonald: Yep.
23:12  merijn: DaveD0101: Yes
23:12  xgkkp_: but you don't need to care whether what you have is of type list, just that it looks like one
23:12  merijn: So instead of checking whether something is a number we say "well, we'll just accept everything that behaves as a number". For example a Decimal class was added (for finite precision floating points) which supports addition, subtraction, etc. so it behaves just like a number. As such we can just give a Decimal instance to code expecting a number and it will "Just Work" (TM)
23:12  DaveD0101: Makes sense.  A bit liberal maybe, but I guess as I get better at decyphering exceptions it won't be an issue.
23:12 --- Channel #python was synced in 107 seconds
23:13  dullboy: DaveD0101: you don't get that many exceptions
23:13  merijn: DaveD0101: Python is at one extreme on the static typing scale, yes. In practice I don't have much problems with it while coding, though
23:13  KirkMcDonald: DaveD0101: Welcome to the exciting world of dynamic typing.
23:14  merijn: Even though I often also code in languages for more statically typed then C#/Java. It is just a matter of switching mind sets when switching languages
23:14  DaveD0101: It's literally been a decade since I touched it, but doesn't PHP behave similarly?
23:14  kerio: merijn: you're referring to MutableSequence probably
23:14 * kerio ducks for cover from the ABC-hating crowd
23:14  KirkMcDonald: DaveD0101: There is another distinction to make here.
23:14  kerio: do we have an identity function?
23:14  KirkMcDonald: DaveD0101: While Python is dynamically typed, it is also strongly typed.
23:15  KirkMcDonald: DaveD0101: PHP, on the other hand, is dynamically and weakly typed.
23:15  merijn: DaveD0101: Try these two examples in the python interpreter: "foo" + 10 (error, can't add numbers and strings)
23:15  KirkMcDonald: DaveD0101: In Python, when you have an int object, it will always be an int object.
23:15  KirkMcDonald: DaveD0101: PHP tends to allow confusing what the type of a thing is.
23:16  merijn: "import decimal; 10 + decimal.Decimal(9)" (result: Decimal(19))
23:16  merijn: Doing "foo" + 10 in PHP would likely result in "foo10" instead of an exception
23:16 --- mikemac is now known as crazymykl
23:17  DaveD0101: Gotcha
23:17  KirkMcDonald: Conversely, C is statically typed, but it is also relatively weakly typed.
23:18  merijn: "relatively" is an understatement :p
23:18  KirkMcDonald: It is very easy to cast a pointer from one type to another, or get up to all kinds of trickery with a union, and so on, in C.
23:18  merijn: C has just one type, "bytes" :p
23:18  DaveD0101: Ick
23:18  ProButcher: Greetz
23:19  DaveD0101: I only touched C once, for about a day, and gave up.  But iirc they abstract some things away into string types and such, no?
23:19  KirkMcDonald: DaveD0101: merijn is exaggerating somewhat.
23:20  wunki: I'm looking at some source code and I find this ``getattr(filters.get_class(f)(content, filter_type=self.type), method)``
23:20  KirkMcDonald: DaveD0101: Though C doesn't have a string type, it just has arrays of chars.
23:20  DaveD0101: I see.  Well then, "woosh". :)
23:20  wunki: can someone point me into a direction what this is (f)(content...)
23:20  merijn: Hyperbole is the best style form ever! :D
23:20  wunki: how can you chain ()()
23:20  KirkMcDonald: wunki: Functions can return functions.
23:20  KirkMcDonald: Or other callable objects.
23:21  pythonirc1011: is anyone scripting firefox in python here by any chance?
23:21  wunki: KirkMcDonald: ah, missed that. Thanks!
23:21  merijn: First class functions are like the best thing since sliced bread :>
23:21  DaveD0101: I guess I should probably google python for .net guys primers.  No doubt there are many.
23:21  KirkMcDonald: DaveD0101: There's even IronPython.
23:21  merijn: DaveD0101: If you have some programming experience the tutorial in the topic is also a good place to start (it's fairly short and concise, though)
23:22  DaveD0101: Yeah I was about to say, with a -IronPython arg. :/
23:22  ProButcher: How is pygame?
23:22  ldleworker_: ProButcher: standard
23:22  KirkMcDonald: ProButcher: It's a thing.
23:22  ldleworker_: ProButcher: there is also Pyglet and a number of other options
23:23  DaveD0101: I'll take a look.  Since my slightly extended 'hello world' app here is actually a django project, I only really went through the polls tut on their site.
23:24  DaveD0101: the purpose of that base36 encode was to shorten urls.
23:24  ProButcher: Im looking to get into a game programming carreer, but I figured I'd start with python to get a general feel for programming, then move to C++ and C#.. Would moving from python to C++ be difficult, and should I just learn on C++?
23:25  merijn: ProButcher: It will be fairly tricky to move to C++ from any language I think, but I still think it is worth (and smart) to start with python
23:25  KirkMcDonald: ProButcher: They are very different languages.
23:25  merijn: It will be much easier to learn and start doing in python then in C++, and a lot of the high level stuff you will learn will still be useful for learning C++
23:25  ProButcher: I have had alittle experience with C++, and its certainly the better game programming language IMO
23:25  KirkMcDonald: ProButcher: If you are just starting out with programming, my ardent advice to you is simply to learn everything.
23:26  gjvc: truth
23:26  KirkMcDonald: ProButcher: Depends on the game.
23:26  merijn: I disagree that C++ is a better game programming language, but I'll concede there are better C++ tools around (free Unreal engine for non-commercial use!)
23:27  KirkMcDonald: ProButcher: It succeeds in the game industry not least because of its mature and extensive ecosystem of libraries, tools, and users.
23:27  KirkMcDonald: ProButcher: This should not be taken to mean that the language itself is anything other than terrible.
23:28  alshain: KirkMcDonald: merijn : what about speed when it comes to games? How does Python compare to C++ here and how relevant is it, since the "display" stuff is done by OpenGL anyway?
23:29  merijn: alshain: Well, you address it yourself. Python is undeniably slow for game engine stuff, but a lot can be offloaded to engine written in C++/OpenGL
23:29  KirkMcDonald: alshain: There are a handful of games which use both languages.
23:29  KirkMcDonald: Civilization 4 is the mote notable example.
23:29  KirkMcDonald: most*
23:29  merijn: alshain: Example: EVE has an engine written in C or C++, but much (if not most) of the game logic (i.e. AI and event scripting) is done in Python
23:29  alshain: so then you would implement the logic in Python?
23:30  TimothyA: what do you guys recommend for MUD servers?
23:30  KirkMcDonald: alshain: Yes, that's basically what Civ4 did. Also much of the UI.
23:30  merijn: TimothyA: You mean for coding your own from scratch?
23:30  alshain: ic, thanks, merijn , KirkMcDonald
23:30  TimothyA: marijn; yep
23:30  merijn: TimothyA: Then Twisted
23:31  TimothyA: blegh
23:31 * TimothyA kicks Twisted
23:32  Slix`: What's wrong with Twisted/
23:32  Slix`: ?
23:33  merijn: Twisted is awesome!
23:33  merijn: Well, I suppose I could also recommend Erlang/OTP because that seems really cool for writing MUDs (I've considered it a bunch of times), but that'd involve learning a new language :p
23:33  TimothyA: but Python won't cut it either for me at the moment
23:34  TimothyA: I'm currently looking for something which can cascade
23:34  TimothyA: e.g. system -> module -> application
23:34  TimothyA: where application code extends/overwriter module and/or system code
23:35  TimothyA: I like Evennia, but it just lacks the cascading
23:35  TimothyA: and it require django...
23:36  sjuxax: Hello, I am stupid today and can't remember how to tell if a key exists in a dict without throwing a KeyError; that is, I want to know with an if statement and not a try statement
23:36  merijn: sjuxax: "if key in myDict:"?
23:37  merijn: I know, it is suspiciously obvious, but it works :p
23:37  sjuxax: heh, thanks, I forgot about that for some reason. I've done it lots of times before but thought it'd be faster to ask than look through old code :p
23:37  figure002: hello. i'm using image files in my python app. the image files are stored in the app's package folder. but how do i get the path to the package folder so i can use the images?
23:38  gwz: hey can you call self of another class from inside different class
23:38  ProButcher: TimothyA: Veles?
23:39  TimothyA: veles?
23:39  daemonkeeper: gwz: Just pass self as parameter
23:39  leekaiwei: when accessing variables in a different function in but in the same class, isn't it just self.variablename?
23:39  ProButcher: TimothyA: Is that an alias you use?
23:39  TimothyA: no
23:39  dullboy: figure002: you could try using __file__ (the current file name) but that's not elegant at all
23:39  ProButcher: TimothyA: Okay, I know someone with the name Timothy A
23:40  dullboy: leekaiwei: yes
23:40  gwz: daemonkeeper: how would you do that?
23:41  figure002: dullboy: that seems to work just fine; why is it not elegant?
23:41  daemonkeeper: gwz: Consider you have a class Foo ... containing a def bar(self, parent). You would do: inst = Foo(), inst.bar(self)
23:42  daemonkeeper: Then, in bar use parent as caller's self
23:42  figure002: dullboy: i'm currently using pkg_resources.resource_stream, but it doesn't work in some situations.
23:42  gwz: ahh gotcha thanks
23:42  figure002: dullboy: i meant: pkg_resources.resource_filename
23:43  leekaiwei: dullboy: http://pastebin.com/dtS9YzBX i thought so but it says rightpanel has no attribute grid
23:45  leekaiwei: line 45
23:46  dullboy: leekaiwei: you're using grid insead of self.grid in __init__
23:46  dullboy: figure002: what do you mean 'in some situations'?
23:47  figure002: dullboy: in the case of .zip files, it is explained here: http://osdir.com/ml/python.distutils.devel/2005-10/msg00043.html
23:47 --- Vel^work is now known as Velanor
23:47  dullboy: leekaiwei: __init__ is a function like any other, so you assign to self everything you need inside the class
23:47  figure002: dullboy: but the solutions posted there didn't work for me
23:48  leekaiwei: dullboy: oh yes sorry
23:48  dullboy: in the case of zip files I guess you need to extract them in a temporary location
23:49  figure002: dullboy: yes, but the zip is created by py2exe, and the resulting .exe uses that zip file.
23:51  figure002: dullboy: but __file__ seems to work just fine, so i'll use that for now
23:52  dullboy: figure002: no, I don't think I get what you're doing. when I said __file__ i meant os.dirname(__file__) to know the absolute pathname of your package
23:53  figure002: dullboy: yes, that's exactly what i'm doing
23:53  figure002: dullboy: os.path.dirname(__file__)
23:53  dullboy: perfect. I didn't get the rest of the problem
23:55  figure002: dullboy: thanks for the help though
23:55  svip: Does os.system accept basic bash commands?
23:55  svip: Or does it use another shell?
23:56  Uncle_Entity: is there some trick to getting "from . import foo" working in py-3.1.2 -- seems that if I have stuff in __init__.py relative imports fail
23:56  svip: This works in my bash shell, but not in Python:
23:56  svip: screen -S mplayer -X "stuff" $'sleep %s; screen -S tmp -X "stuff" $\'timeout\\n\'\n'
23:56  dullboy: svip: depends on the system. I think it uses /bin/sh per default
23:57  dullboy: svip: be sure the escapes are ok. maybe try a rawstring, r'...'
23:57  figure002: damn, the __file__ method doesn't work with zip files either :$
23:58  svip: dullboy: Anyway to ensure it uses bash rather than sh?
23:59  dullboy: svip: write it to an external file, starting with #!/bin/bash and execute that instead
23:59  svip: Gosh, I am going to have plenty of those then.
--- Log closed Sun Jan 16 00:00:12 2011
