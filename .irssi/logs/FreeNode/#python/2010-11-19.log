--- Log opened Fri Nov 19 09:59:40 2010
--- Log closed Fri Nov 19 10:04:41 2010
--- Log opened Fri Nov 19 10:04:51 2010
10:04 --- Users 751 nicks [0 ops, 0 halfops, 0 voices, 751 normal]
10:04  verte: sente: even if it did, it would be less ugly
10:05  dhiaeldeen: jorrit: that example gives this error =[ , http://bpaste.net/show/11305/
10:05  dhiaeldeen: first example in http://zetcode.com/tutorials/pythontutorial/files/
10:05  Twey: The semantics (in terms of what the user has to consider when reading the code; I know there are other definitions of ‘semantics’ that could be considered relevant here) are lower-level and hence more complex with the list comprehension, because, even though the end result is the same, it makes the reader consider the per-element case rather than thinking of it as a transformation on the list as a whole
10:05  jorrit: dhiaeldeen, you forgot a parameter with read.
10:05  jorrit: dhiaeldeen, also don't do this.
10:06  ssbr_: Twey: you're using the wrong word, and I mean it
10:06  jorrit: dhiaeldeen, follow our advice and don't use stdin directly.
10:06 --- Channel #python was synced in 91 seconds
10:06  ssbr_: Twey: I agree with what you mean, but it has nothing to do with most definitions of "semantics", or of control flow complexity
10:07  lrh9: dict((a, b) for b, a in originaldict.iteritems())
10:07  lrh9: VS.
10:07  lrh9: dict(map(swap, originaldict.items()))
10:07  Twey: ssbr_: Feel free to rephrase
10:07  lrh9: Round 2.
10:07  ssbr_: The issue is basically that the syntax refers to specific imperative operations, as opposed to being more abstract. So you get pulled out into reading it as a step-by-step imperative process, as opposed to a simple transformation on the whole
10:07  dhiaeldeen: jorrit: i hate missing something from the tutorial
10:07  ssbr_: The syntax makes you want to think of it in a more complex way
10:07  dhiaeldeen: so how do i fix it
10:07  dhiaeldeen: i didn't change the example
10:07  ssbr_: but that is not the same as saying it is in fact more complex, code-wise or otherwise
10:07  dhiaeldeen: i copy pase it from there
10:07  jorrit: dhiaeldeen, please read more closely what I said.
10:07  lrh9: I wanted a dictionary that supported reverse lookup once. I just wrote a custom dictionary class that updated the dictionary with v, k for each k, v added.
10:07  jorrit: dhiaeldeen, you changed the tutorial. You forgot a parameter for read.
10:07  ssbr_: (the syntax is longer, though, and that is a way to say it's more complex)
10:08  dhiaeldeen: "you forgot a parameter with read"
--- Log closed Fri Nov 19 12:14:04 2010
--- Log opened Fri Nov 19 12:14:26 2010
12:14 --- Users 781 nicks [0 ops, 0 halfops, 0 voices, 781 normal]
12:14  Phazorx: actually add ruby to the list if it is applicable since it is another platform being considere that i know little baout
12:14  Yhg1s: Phazorx: I don't understand what you are asking for, sorry.
12:14  Yhg1s: I don't feel like explaining in detail why what I said is true.
12:15 --- Channel #python was synced in 90 seconds
12:16 --- Xeross|AFK is now known as Xeross
12:33  eyeofhell: Hello. Anyone experienced with PyQt / PySide? I have a trivial python + pyside code that hangs if i uncomment commented line: http://bpaste.net/show/11304 Maybe someone can hint me what i'm doing wrong?
12:33  Yhg1s: eyeofhell: well, what do you expect the thread to do?
12:40 --- Xeross is now known as Xeross|AFK
12:52  ggergelz: hello. i have two questions:
12:53  eyeofhell_: Yhg1s: I expect the thread to start and do message loop.
12:53  ggergelz: one: i have a learning project, with this layout: /src/projeckt /tmp
12:53 --- ikkebr_ is now known as ikkebr
12:53  ggergelz: one: i have a learning project, with this layout: /src/projeckt /test
12:54  ggergelz: i'd like to run a unit test placed in /test using the module projekt . how youzld i import that?
12:55  Yhg1s: ggergelz: you'd have to add '/src' to sys.path one way or another.
12:55  ggergelz: Yhg1s: ok, but i can add a relative path also? as / is the root of the projekt repo...
12:55  Yhg1s: ggergelz: the usual way is to have 'test' be part of 'projeckt', and have a testrunner live in '/src' that imports projeckt.test and runs the tests.
12:56  Yhg1s: ggergelz: you can, but it's a bad idea.
12:56  Yhg1s: eyeofhell_: I'm not sure what 'do message loop' means.
12:56  Yhg1s: eyeofhell_: perhaps you should give the thread something to do instead.
12:57  eyeofhell_: Yhg1s: In Qt, the thread started with start() will execute run() method. Default implementation does exec() that enter an infinite message loop. I can later use moveToThread() method to move any object "into" running thread so all object slots will execute in that thread.
12:59  dunpeal: So what's new and exciting in the world
12:59  ssbr_: dunpeal: Video games.
13:00  dunpeal: ssbr_: that's new?
13:00  ggergelz: dunpeal: new video games :)
13:00  ssbr_: On a geologic scale, yep.
13:00  lrh9: In the galaxy, scientists have discovered a planet we stole from another galaxy. Republicans are moving to deport it.
13:00  dunpeal: we've had those since the 70s
13:01  ggergelz: dunpeal: not the new ones!
13:01  dunpeal: ggergelz: aren't they like the old ones with better eye candy?
13:01  ssbr_: yeah I think black ops came out a week ago, not 40 years ago.
13:01  ggergelz: now. these are usually worse
13:01  ssbr_: It's no good, though.
13:01  Yhg1s: eyeofhell_: but you're not.
13:01  Yhg1s: eyeofhell_: since you just run the mainloop and do nothing else.
13:01  eyeofhell_: Yhg1s: I just reduced the code to pinpoin the problem. After i start app with line uncommented, GUI hangs :(
13:02  dunpeal: ggergelz, ssbr_: I remember hunting rats in a dungeon in the 80s. Now it's the same dungeon, and same rats, they're just prettier.
13:02  eyeofhell_: Yhg1s: Same app written in Qt/C++ don't hang (of course). So i somehow using PySide wrong :(
13:02  dunpeal: there's nothing new under the sun.
13:02  Yhg1s: eyeofhell_: or you found a bug in PySide, which is not unheard of.
13:02  ssbr_: dunpeal: You can make those dungeons and rats in Python now.
13:02  dunpeal: ssbr_: that's a good point: the games haven't improved, the technologies to make them have.
13:02  ssbr_: Computing hardware has improved to the point where it's feasible to write video games in actual programming languages, and those programming languages don't have to suck.
13:03  ssbr_: dunpeal: well, I'd take issue with all your other things, but it'd have to move to#python-offtopic
13:03  eyeofhell_: Yhg1s: Any way i can check is it my dumb code or bug in pyside?
13:04  dunpeal: ssbr_: I better get back to work :)  anyways, more on-topic: Python is kind of well positioned to take more market share now that Java is controlled by Mordor; too bad its performance is still meh
13:04  Imk0tter: What do you guys think of my recursive base conversion script: http://imk0tter.pastebin.com/hDcewBfM
13:04  infobob: http://paste.pound-python.org/show/100/ (repasted for Imk0tter)
13:05  Yhg1s: eyeofhell_: the usual debugging. find out what's actually happening when your program 'hangs'.
13:05  Imk0tter: It can convert between any base (upto base36)
13:05  dunpeal: Imk0tter: did you write it for the Google Code Jam challenge?
13:06  eyeofhell_: Yhg1s: So you suggest me to download python and pyside source code, build debug version, run alongside with my code, attach debugger and carefully sudy 50+ megs of VM spagetty code? :((
13:06  dunpeal: if Python's performance improved significantly, it may become a viable alternative to all those orgs that want to get off Java, yet remain on a free platform (i.e. not C#)
13:06  Imk0tter: dunpeal, what Google Code Jam challenge?
13:06  dunpeal: Imk0tter: there's one that requires exactly that.
13:07  Imk0tter: dunpeal, ohh.. lol
13:07  teratorn: dunpeal: I don't think you can call C# a "non-free" platform
13:08  TheSheep: I don;t think you can call C# a platform
13:08  teratorn: all you can really say is that "someone else controls future innovation of the language"
13:08  teratorn: but that's true for anything
13:08  Yhg1s: eyeofhell_: nope
13:08  dunpeal: teratorn: it's not more free than Java. if I'm getting off the Java bus due to lack of freedom, I'm unlikely to get on the C# bus.
13:09  Yhg1s: eyeofhell_: I'm suggesting you debug *your program*. See what it's doing when it's 'hanging'. Find out what's being executed.
13:09  lrh9: ...
13:09  dunpeal: TheSheep: fine, .NET
13:09  lrh9: I thought Python itself was open source...
13:09  dunpeal: lrh9: it is. Python is more free than both Java/JVM and .NET
13:09  teratorn: dunpeal: Mono is FOSS.... there's hardly any reason to use Microsoft code at all
13:09 --- Xeross|AFK is now known as Xeross
13:10  dunpeal: teratorn: it's a separate discussion, and kind of offtopic here I think. let's just say that in discussions about Java alternatives, nobody considers C# a safe harbor from what is happening to Java right now.
13:11  dunpeal: and Mono isn't safe in MS decides to play nasty or pull an Oracle on it.
13:11  teratorn: a bold statement
13:11  dunpeal: s/in/if/
13:11  teratorn: dunpeal: won't happen
13:11  teratorn: dunpeal: wouldn't work if it did
13:11  dunpeal: teratorn: how do you know?  and are you betting multiple millions of dollars on it? :)
13:11  teratorn: and besides, a big company can always come sue you or something you depend on
13:11  teratorn: I would, sure
13:12  dunpeal: right, but there are reasonable concerns, and unreasonable ones.
13:12  jophish: I have a while loop. while t != '>':
13:12  teratorn: sure, and I think your concerns are unreasonable :)
13:12  jophish: how can I terminate the while block?
13:12  teratorn: but we can drop it
13:12  dunpeal: being concerned about relying on MS technology is a reasonable concern, even without the plentiful historical reasons.
13:12  dunpeal: jophish: break?
13:12  eyeofhell_: Yhg1s: QApplication.exec_() is being executed :)
13:12  Yhg1s: jophish: make 't' not be '>', or use 'break'.
13:12  dunpeal: jophish: (read the tutorial)
13:12  Yhg1s: eyeofhell_: so find out what that's doing. Attach a debugger. See what it's doing.
13:13  jophish: I mean, how can I signal to python that the while block is over, and the rest of the file isn't in the block
13:13  dunpeal: hm?!
13:13  jorrit: jophish, what do you mean by that?
13:13  Yhg1s: jophish: indentation.
13:13  jophish: like the closing brace in C
13:13  Imk0tter: dunpeal, you talking about this one? http://code.google.com/codejam/contest/dashboard?c=32003#
13:13  Yhg1s: jophish: the same as any other block.
13:14  dunpeal: teratorn: if you are knowledgable about this, you're welcome to elaborate, here or in PM/different channnel. this is an active debate in our company.
13:14  jophish: Yhg1s: I have been indenting my code in a rather haphazard way. I didn't realise that it was important
13:14  dunpeal: jophish: why are you asking questions before reading the most basic of tutorials?
13:14  Yhg1s: jophish: it's how blocks are denoted. It's covered in any tutorial.
13:15  lrh9: In Python indentation has significance.
13:15  dunpeal: Imk0tter: yes, exactly.
13:15  kadoban: hell, it's within the first couple of things people mention about python every time i've heard
13:17  Imk0tter: dunpeal, going to modify my script for it just for fun :P
13:17  teratorn: dunpeal: so you're trying to escape the jvm, eh? what are you personally advocating? Python?
13:18  dunpeal: teratorn: yes, except I can't advocate it for many Java applications that are too performance intensive.
13:18  teratorn: well, there is Python/Cython/C
13:18  dunpeal: the good news is we're already writing in Python pretty much everything we can write in Python. the bad news is that the set of applications we can't write in Python is too large.
13:19  Krauzi: hi guys, i recently found out that there is a python<version>.zip in my sys.path (windows)
13:19  dunpeal: yeah, I'm actively advocating Cython here.
13:19  Krauzi: i didnt find it in the path where it should be so my question is: how can i create this zip file (im using it in my embedded application)?
13:20  teratorn: C#/Java are a lot more idiot-proof.. I suppose some companies might want that
13:20  dunpeal: teratorn: we might look into funding general generator support for it, actually. surprised nobody beat us to it; why doesn't Cython spread like wildfire?
13:20  dunpeal: hehe, not our kind of Java
13:20  lrh9: What's Cython, and what are the advantages of using it as opposed to using Python with extensions in C/C++?
13:21  dunpeal: lrh9: Cython is a language that's kind of in between C and Python.
13:21  teratorn: lrh9: it's faster to write Cython than C, and less error-prone
13:21  Yhg1s: Krauzi: you can just zip up all the .py files and packages in the standard library.
13:21  Yhg1s: Krauzi: Python treats the zipfile as a directory.
13:21  dunpeal: you can also incrementally optimize with it, starting with pure Python and incrementally adding C-like optimization.
13:22  Yhg1s: it can't import extension modules from zipfiles, though (because the platform doesn't allow it), but any Python modules will work.
13:22  Krauzi: hm i know that i can put all the files in there but isn't there a standardized way to do this?
13:22  Krauzi: so i can ensure that i have all *basic* files
13:22  Yhg1s: Krauzi: the standardized way is to put them all in. I don't understand what you're looking for.
13:23  Krauzi: the problem is that i've installed lots of other libs
13:23  Krauzi: and i dont want this libs to be included
13:24  dhiaeldeen: the last example here is buggin me
13:24  dhiaeldeen: http://zetcode.com/tutorials/pythontutorial/oop/
13:24  Yhg1s: Krauzi: so don't package them up. site-packages is not a package anyway; including it won't do anything.
13:25  Yhg1s: Krauzi: there's nothign to build this zipfile for you, if that's what you're asking.
13:26  Krauzi: hm setuptools is maybe the thing im looking for
13:27  Yhg1s: Krauzi: most assuredly not.
13:27  Yhg1s: setuptools, which is a piece of crap, creates eggs, which are a piece of crap. it doesn't do anythign for the standard library except crap all over it.
13:27  dhiaeldeen: what do __add__ mean?
13:27  jorrit: dhiaeldeen, it is a function.
13:28  jorrit: dhiaeldeen, you can override it so that you can do + with instances of your class.
13:28  jorrit: dhiaeldeen, the tutorial you're reading actually explains this.
13:28  dhiaeldeen: http://zetcode.com/tutorials/pythontutorial/oop/ << the last example
13:28  dunpeal: dhiaeldeen: http://docs.python.org/reference/datamodel.html#object.__add__
13:28  dhiaeldeen: what do repr do?
13:28  dhiaeldeen: will read this ok
13:28  dunpeal: (first result for Googling "Python __add__" ;)
13:29  dunpeal: dhiaeldeen: help(repr), or google "python repr)
13:30  dhiaeldeen: dunpeal: what is the difference between it and str?
13:30  Yhg1s: dhiaeldeen: str() gives you the object's data as a string. repr() gives you a string representation of the object itself.
13:31  dhiaeldeen: yhg
13:31  dhiaeldeen: Yhg1s: thanks
13:31  \3TATUK: How can I create a pointer to a python function with ctypes?
13:32  Twey: dhiaeldeen: (repr is meant for debugging, not output)
13:32  unRuhe: hey i want to test a module i've written in a python console. how do i import a local module?
13:32  \3TATUK: unRuhe: same as any other module: import mymodule
13:33  unRuhe: but how does python know where to look at?
13:33  Yhg1s: \3TATUK: as a PyObject*?
13:33  Yhg1s: unRuhe: the normal way: it searches sys.path.
13:33  yak^: unRuhe: sys.path
13:33  dhiaeldeen: in c:/python27
13:33  dhiaeldeen: 2x
13:33  Yhg1s: dhiaeldeen: is that a question?
13:33  dhiaeldeen: no
13:34  dhiaeldeen: i was answering unRuhe
13:34  Yhg1s: well, not very well.
13:34  unRuhe: so the is no way to import a module like: import "/home/me/pythonstuff/mymodule"
13:34  \3TATUK: Yhg1s: I think I have to do something with CFUNCTYPE
13:34  Yhg1s: unRuhe: not like that, no.
13:34  unRuhe: ok so i need to edit the pathvariable
13:34  Yhg1s: unRuhe: you can set PYTHONPATH to make Python add /home/me/pythonstuff to sys.path, though. Or you can run stuff in /home/me/pythonstuff and /home/me/pythonstuff will automatically be added to sys.path
13:34  yak^: unRuhe: sys.path is a list of paths it searches for modules, add your path there before doing import mymodule
13:35  \3TATUK: Yhg1s: figured it out CFUNCTYPE it is
13:35  lrh9: unRuhe: On Windows at least site-packages is always added to path, and you should use it for your modules and packages.
13:35  unRuhe: linux here
13:35  unRuhe: i'll try
13:35  Yhg1s: don't install stuff to site-packages manually. Use distutils, when you want to install stuff.
13:35  Yhg1s: If you don't want to install system-wide, use one of the other options I mentioned.
13:35  lrh9: unRuhe: Right.
13:36  dhiaeldeen: http://bpaste.net/show/11311/ << can anyone explain this to me, i want to understand __add__ , like track the program
13:36  Yhg1s: dhiaeldeen: 'track' what?
13:36  teratorn: Yhg1s: did you mention distutils --user option?
13:36  Yhg1s: teratorn: nope.
13:36  Yhg1s: dhiaeldeen: the __add__ method on an object is called when you try to add it to another object, with '+'.
13:36  Yhg1s: dhiaeldeen: that's pretty much it.
--- Log closed Fri Nov 19 13:42:33 2010
--- Log opened Fri Nov 19 13:42:52 2010
13:42 --- Users 779 nicks [0 ops, 0 halfops, 0 voices, 779 normal]
13:43  lrh9: __init__ is called automatically each time an instance is created.
13:43 --- MrElendig is now known as EvilOp
13:43 --- EvilOp is now known as mion
13:44 --- mion is now known as EvilAdmin
13:44 --- Channel #python was synced in 95 seconds
13:44  dhiaeldeen: lrh9: when i remove it from the code, it doesn't work
13:44  dhiaeldeen: aha
13:44  dhiaeldeen: I see
13:45  lrh9: Really?
13:46  dhiaeldeen: lrh9: yes, but i still think you can explain more?
13:47  dhiaeldeen: an instance is created at the bottom, why python didn't add it automatically?
13:47  dhiaeldeen: or automatically by the user?
13:47  dhiaeldeen: why did i say i see lol
--- Log closed Fri Nov 19 13:47:54 2010
--- Log opened Fri Nov 19 13:48:26 2010
13:48 --- Users 781 nicks [0 ops, 0 halfops, 0 voices, 781 normal]
13:48 --- Server: [bartol.freenode.net] [freenode-info] channel trolls and no channel staff around to help? please check with freenode support: http://freenode.net/faq.shtml#gettinghelp
13:48  lrh9: Do you know what an instance is?
13:49  dhiaeldeen: yes
13:49  lrh9: What?
13:49  dhiaeldeen: x = Vector([1, 2, 3])
13:49  dhiaeldeen: in the last code
13:49  dhiaeldeen: http://bpaste.net/show/11311/
13:49  dhiaeldeen: here is the code again
13:49  lrh9: I have the code.
13:49 --- Channel #python was synced in 90 seconds
13:50  Juhaz: dhiaeldeen, python can (and does) create instances automatically without __init__, but they're rarely useful
13:50  Juhaz: in this case, __init__ sets the data attribute to whatever is passed into it (eg. [1,2,3])
13:51  Juhaz: and none of the other functions make any sense without data being there
13:51 --- vin is now known as JESUS
13:52 --- JESUS is now known as vin
13:52  dhiaeldeen: Juhaz: so you mean when we use data in different functions in the class?
13:52  dhiaeldeen: then we have to use __inint__
13:52  pr100: I've got some code that reads some stuff from a file and sticks it in an array and then uses json.dump(). Elsewhere this is read using json.load(). Sometimes I get "ValueError: Invalid \uXXXX escape:". Is there a way of ensuring that whatever I write out with dump() I can get back with load()?
13:52  dhiaeldeen: i mean __init__
13:54  Juhaz: dhiaeldeen, it doesn't really matter where it's set, so long as it's done before it's used elsewhere, but yes, usually doing it in __init__ makes the most sense. That's what it's for, initializing the instance with all the necessary things other methods need.
13:55  dhiaeldeen: Juhaz: thanks!
13:56  marcchr: pr100: are you using binary io? i.e. open(filename, 'wb')/open(filename, 'rb')?
13:56  ido-: is there such a thing as a config file for python ? how does setuptools/etc know in which directories to search ?
13:56  ido-: I had python2.5 installed, and installed 2.7, however now when I am trying to run setuptools, I get the following error:
13:56  ido-: sh setuptools-0.6c11-py2.7.egg
13:57  ido-: error: /opt/local/lib/python2.5/site-packages (in --site-dirs) is not on sys.path
13:57  ido-: why is it searching in a python2.5 directory ?
14:00 --- skm_ is now known as skm
14:02  pr100: marcchr: it's linux, binary makes no difference
14:03  pr100: it's something to do with character encodings no doubt...
14:03  marcchr: pr100: ah, ok. does json.loads(json.dumps(your_data)) work?
14:04  marcchr: pr100: or are there two python involved? with different sys.maxunicode?
14:05  pr100: it's the same python, different processes, but same installation of python
14:08  jaunny: i hace class truc: x,y,z=0; def __init(a,b,c)__: self.x=a self.y=b ; def prt(self): for i in self: print i (does not work);     how can i print all the variables of the class?
14:08  Yhg1s: pr100: what is the exact error you get?
14:08  marcchr: I'm not sure how this could be an encoding problem. afaik json is plain ascii
14:08  Yhg1s: jaunny: your code is horribly wrong.
14:09  Yhg1s: jaunny: that's not even close to anything that would work.
14:09  Yhg1s: jaunny: but the way to do what you want is 'for i in (self.x, self.y): print i'
14:09  ccxCZ: Is there something that implements PEP 3101 (or something similar) for older pythons?
14:09  Yhg1s: ccxCZ: plain old string formatting.
14:09  jaunny: my problem is that i have x,y,z,t,u,x,w,d,b,g,h,k and i would like to write something automatic
14:10  ccxCZ: Yhg1s: that's not extensible by custom formats
14:10  Yhg1s: indeed it is ont.
14:10  Yhg1s: jaunny: so write a method that produces those attributes for you.
14:10  Yhg1s: jaunny: or perhaps you don't want to use attributes at all, but rather a list.
14:10  jaunny: Yhg1s i dont want to copy at hand all print self.x self.y
14:10  ccxCZ: I'm getting timestamp passed in as int and I want it format nicely, more types probably will pop up along the way
14:11  jaunny: there not a list already done of all class attributes?
14:11  Jimmey: Does anybody know the best library/method to use for getting the average colour from an image?
14:11  dhiaeldeen: if __name__ == '__main__': <<<<<<<<<< what does that mean?
14:12  jaunny: if (__name__ =="__main__"):
14:13  jorrit: jaunny, don't use brackets in python around if.
14:13  Wild_Cat: dhiaeldeen: __name__ == "__main__" when the Python file you're in is the program being run.
14:14  ccxCZ: Jimmey: probably numpy, fwih it has some nice image support
14:14  jaunny: jorrit thanks, maybe a link for that?
14:14  jorrit: jaunny, a link? Why?
14:14  jorrit: jaunny, that's just basic python.
14:15  jaunny: a basic link?
14:15  jorrit: www.python.org
14:15  flupke: I use Cython.Distutils.build_ext in my distutils script but it doesn't compile .pyx files (it just tries to compile the corresponding .c file, which doesn't exist), what am I missing ? http://paste.pocoo.org/show/293513/
14:15  dhiaeldeen: Wild_Cat: thanks
14:15  flupke: forgot the cmdclass: http://paste.pocoo.org/show/293514/
14:17  jaunny: thanks jorrit, but i think i will kepp the brackets it is so confusing C C# so many lanhguage
14:17  railsroad: Why is pdb garbling my input? I can't step through my code. http://stackoverflow.com/questions/4225336/why-is-pdb-garbling-my-stdin-i-cant-step-through-my-code-or-enter-any-data-acc
14:17  jorrit: jaunny, when writing in a programming language it is always best to follow the style and conventions from that language and not from another language.
14:17  jaunny: jorrit what is the name of the fearture of python doing that indent presentation is part of syntax? is there tools to adpt this to other languages?
14:17  jorrit: jaunny, it is just basic python syntax. It has no name.
14:18  jorrit: jaunny, in python one just does: if expression:
14:18  Wild_Cat: jaunny: syntactically-significant whitespace?
14:18  jaunny: yes jorrit you are right
14:18  Wild_Cat: jaunny: it's not exclusive to Python, though. A few other languages do this (e.g. Haskell)
14:18  jaunny: but it is not so important
14:18  jaunny: yes i would like to know the name of this feature?
14:19  jorrit: jaunny, it has no name.
14:20  Wild_Cat: jaunny: blocks delimited by indentation?
14:20  jaunny: hummm no name for a thing that exist with such force, is there tools to adpat that feature to other C like languages?
14:20  Wild_Cat: jaunny: not that I know of. The good news, however, is that there are tools to automatically reformat and reindent C-like languages
14:20  jorrit: jaunny, why would you ever want that?
14:21  Wild_Cat: jaunny: and if you use such languages, you should use those tools
14:21  jaunny: is there a dictionnary of one class attributes?
14:21  Wild_Cat: in fact, I'm baffled that there are companies that dictate the use of a particular coding style yet do not provide their developers with those tools and/or config files.
14:21  jaunny: if such a tool exist i would be happy to write Java or C# with a python like syntax
14:23  klattimer: hi, I was wondering what it would mean if you have Object at <address> (Object at <address>) when you print an object
14:23  klattimer: I think the one in brackets is the one I'm expecting, but can't access it
14:24  bsod1: I'm reading 'learn you a haskell' and there is a sentence: Speaking of characters, strings are just lists of characters. "hello" is just syntactic sugar for ['h','e','l','l','o']. Because strings are lists, we can use list functions on them, which is really handy.
14:24  bsod1: is it also true for python?
14:24  Yhg1s: klattimer: it means that that object prints like that when you print it. Any meaning to what it prints is specific to the object.
14:25  klattimer: Yhg1s: hmm, ok
14:25  Yhg1s: bsod1: strings aren't lists, but they are sequences, yes.
14:25  jorrit: bsod1, both strings and lists are sequences in python.
14:25  jorrit: bsod1, so things that work on sequences work on both.
14:25  lotrpy: bsod1, not the same thing.
14:25  bsod1: Yhg1s, lotrpy, jorrit: ok, thanks
14:25  lotrpy: we can change some_list, some_list[0] = 'a', but some_str[0] = 'a' is wrong
14:26  Yhg1s: that doesn't have much to do with lists, but with mutable and immutable containers.
14:26  jorrit: lotrpy, that's because strings are immutable. However some_str[0] works.
14:26  jorrit: lotrpy, and you can do for i in s: with s a string or a list.
14:27  lotrpy: yes, I just want to say str and list is not the same thing(or syntactic sugar)
14:28  bsod1: erm, is it also true for python :) : When you put together two lists (even if you append a singleton list to a list, for instance: [1,2,3] ++ [4]), internally, Haskell has to walk through the whole list on the left side of ++. That's not a problem when dealing with lists that aren't too big.
14:29  lrh9: bsod1: Would a better solution be to use the extend method of the list?
14:30  lrh9: Well. I'm forgetting that extend modifies the list.
14:32  dangerously_fluf: god, compiling pyOpenSSL on AMD64 is a nightmare
14:34  dangerously_fluf: in fact, this looks like someone forgot an #endif
14:34  Xeross: Is there a way to read an entire SQLite database into the memory and only periodically save it to the disk to improve query speed ?
14:35  cheater99: yeah, it's called memcached
14:37  mauriez: anyone knows a lot about zip? im trying to zip some data, but get the following err: http://pastebin.com/kSDrj9yZ
14:37  infobob: http://paste.pound-python.org/show/101/ (repasted for mauriez)
14:38  dangerously_fluf: Xeross: set isolation_level on sqlite3.connect() to "DEFERRED"
14:38  jorrit: mauriez, seems there is a non-ascii char in your input
14:38  dangerously_fluf: mauriez: first encode it as UTF-8
14:40  mauriez: thanks.. didnt know non ascii could not be zipped
14:40  dangerously_fluf: zip works on 8-bit characters due to its algorithm, in 2.x it needs to be done on bytes()
14:41  marcchr: mauriez: the problem is the filename is unicode, not str
14:41  jorrit: mauriez, it is not about the contents of the zip but the filename.
14:42  spike: hi, how can it be possible that with virtualenv running venv/bin/python setup.py install will still try to instasll config files system wide in /etc ? libs and beens are correctly installed locally to the venv, but the configs aren't and I don't get why. ideas?
14:42  mauriez: hmm.. must be an error somewhere.. filename consists out of simple characters.. let me check
14:42  spike: also using setup.py install --prefix gives the same result, it seems completely ignored
14:43  dangerously_fluf: mauriez: it still needs to be str() and not unicode() as well as being UTF-8 encoded
14:43  Yhg1s: bsod1: lists in Python are not linked lists, like lists in haskell are.
14:44  Yhg1s: bsod1: I suggest you stop worrying about which Haskell things apply to Python. If you want to know about Python, read Python documentation or source.
14:45  dangerously_fluf: python lists are more like arrays. collections.deque is more like a symmetric linked list in its big-O performance
14:45  spike: ah, nm, found it
14:47  mauriez: dangerously_fluf: thanks; i changed it to 'test.csv', which works.. now for the data.. can that be unicoded ?
14:49  dangerously_fluf: you need to encode it as UTF-8 for compression, then use decode('UTF-8') once decompressed
14:50  phloog: cheers
14:50 * dangerously_fluf hands phloog a whiskey sour
14:51  phloog: I'm wondering, can anyone explain to me the API change from python 2.4 -> 2.5, so that on 64 bit machines, modules built for 2.4 cannot be loaded in 2.5 any more? By hardcoding a rename of Py_InitModule4 to Py_InitModule4_64 in modsupport.h?
14:51  phloog: and why is there NO documentation at all about that in the net? ;)
14:51  phloog: was py <= 2.4 not 64bit safe or something?
14:51  phloog: Thanks dangerously_fluf :)
14:52  ssbr_: phloog: yerm, python doesn't have a consistent ABI. Is that what you're referring to?
14:52  phloog: well... yes :)
14:52  ssbr_: There's a PEP about that.
14:52  phloog: but the thing is, is there a real reason why 2.4 modules should not be loaded in 2.5 - only on 64bit
14:53  phloog: if the complete 2.4 -> 2.5 ABI was incompatible, I'd understand kinda
14:53  ssbr_: phloog: python doesn't have a stable ABI. Python developers do not care in the slightest.
14:53  phloog: can you kindly point me to that PEP?
14:53  dangerously_fluf: 2.4? *blink*
14:53  ssbr_: phloog: so apparently they did something that coincidentally didn't break on 2.5 for the subset of the modules that you tested for the subset of the functionality that you tested
14:53  ssbr_: phloog: except on 64bit.
14:53  ssbr_: phloog: just recompile.
14:53  ssbr_: http://www.python.org/dev/peps/pep-0384/
14:54  phloog: well no really ssbr_
14:54  phloog: I got an extension lib that doesn't load against the 2.5 interpreter - and I bet it would work without that hack in modsupport.h ;)
14:55  phloog: but I cannot exchange the interpreter that will be used to run my stuff. Sigh. I'll have to ship two .so's then :/
14:55  phloog: try to import the 1st, if it barfs, import the 2nd... yuck.
14:55  ssbr_: phloog: Um, that's a terrible idea.
14:56  ssbr_: Python doesn't have a stable ABI, and you're acting like this will work. :(
14:56  phloog: okay, do you have a better idea? :)
14:56  ssbr_: Yes. One .so for each version of python, and for each architecture.
14:56  ssbr_: It would be easiest if you shipped source.
14:56  Yhg1s: phloog: you can't load a Python 2.4 extension module into Python 2.5, no. The ABI changed significantly. the renamed symbosl are there to protect you, they're not the actual incompatibility themselves.
14:57  phloog: Yhg1s: So why does the stuff work on 32 bit then?
14:57  phloog: and why weren't such safety renamed done for 32bit?
14:57  phloog: -d+s
14:58  Yhg1s: the ABI changes involved changing types from 'int' to 'ssize_t', which is apparently a 32-bit type in your 32-bit builds (as is the case on most LP64 systems.)
14:58  Yhg1s: all the other changes are supposed to be compatible, so no explicit breakage was made.
14:59  Yhg1s: (but in the past, incompatible changes snuck in anyway; it's better to not load an older extension module into a newer Python.)
14:59  phloog: oh well.
14:59  dangerously_fluf: just recompile it
15:00  phloog: I'll just ship myStuff_2.3_32.so, myStuff_2.4_32.so, myStuff_2.5_32.so, myStuff_2.6_32.so, myStuff_2.3_64.so, myStuff_2.4_64.so, myStuff_2.5_64.so and myStuff_2.6_64.so  -.-
15:00  jorrit: Don't forget 2.7
15:00  Yhg1s: yes, that's what you need to do if you want to ship binaries.
15:00  phloog: well I know the target audience uses 2.3 .... 2.6
15:00  ssbr_: Shipping source really doesn't seem like a terrible idea.
15:00  phloog: and they almost never change their environment
15:01  dangerously_fluf: I see more plausibly as 2.5-2.7
15:01  Yhg1s: dangerously_fluf: oh, you've met phloog's audience? :)
15:01  phloog: no I know they also sometimes need 2.3ish
15:01  dangerously_fluf: the problem with source dist is installation, especially on anything other than linux
15:01  Yhg1s: nah.
15:01  Yhg1s: it's really only a problem on Windows.
15:02  phloog: well it's on linux, but they don't want to recompile ;)
15:02  dangerously_fluf: I have a source dist and it's killing me with MSVC++
15:02  dangerously_fluf: anyone want to look at http://paste.pocoo.org/show/293530/
15:02  ggergelz: i'd like to have a handler.py to provide handler.ping, and handler.foobar in its namespace, but i'd like these to be in the handlers/ping.py and handlers/foobar.py files. i'd like to have these use a class define in handler.py
15:02  dangerously_fluf: stupid encryption export laws
15:02  ggergelz: it it insane?
15:02  phloog: they are also using any combination of python versions and bitwidths in the same scripts (by sourcing stuff that hard changes the python-path and $PATH)
15:02  ggergelz: how cna i do it? i cannot manage to get it work
15:03  phloog: and no, I won't tell you who it is :D
15:03  Yhg1s: ggergelz: you can't have both handlers.py as a mdoule and handlers/__init__.py as a package.
15:03  Yhg1s: ggergelz: get rid of handlers.py, just have handlers/__init__.py, handlers/ping.py and handlers/foobar.py
15:03  ggergelz: i'd like handler.py and handlers/*
15:03  Yhg1s: too bad.
15:03  Yhg1s: you can't have it.
15:04  dangerously_fluf: I think someone needs to write a good alternative cc for windows. Something small, light, and easy to tuck away under an installer
15:04  Yhg1s: dangerously_fluf: that's what mingw tries.
15:04  dangerously_fluf: but mingw uses the gnu c stdlib
15:04  ggergelz: to have a handler.foobar() . that lives in handlerS/foobar.py. that has from .. import handler
15:04  ggergelz: but it does not work
15:04  marcchr: Yhg1s: handler.py not handlers.py
15:05  Yhg1s: oh, right.
15:05  Yhg1s: ggergelz: well, you can have that, then.
15:05  dangerously_fluf: I mean a c compiler that uses the MSVC runtime and all its system calls
15:05  Yhg1s: ggergelz: you can't use 'from .. import handler' unless both the 'handler' module and the 'handlers' package live in the same package.
15:05  ggergelz: ok. but why doesn't it work :)
15:05  Yhg1s: ggergelz: hard to say without seeing what you're actually doing and how it's failing.
15:05  Yhg1s: dangerously_fluf: there's probably IP issues with that.
15:05  ggergelz: Yhg1s: i can show the sources, but you will say that it is crap :)
15:06  ggergelz: as it is. my first python project
15:06  ggergelz: just to get to know the language after having read the tutor
15:07  dangerously_fluf: yhg1s: to use the standard system DLLs? I don't mean the static libs
15:08  Yhg1s: dangerously_fluf: it's Micosoft's licenses. I don't pretend to understand them.
15:09  ggergelz: Yhg1s: http://enyergija.hopto.org/hg/pyrkbot
15:10  pk4r: Is there a shorter and better way of making a list of obj.attr's given a list of obj's than a list comprehension ?
15:10  ggergelz: it is a great mess, but at a stage it could print messages i received from the irc server :D now trying to refactor it and add a module system... probably doinin the wrong way though
15:10  jorrit: pk4r, how can it be even shorter then a list comprehension?
15:10  dangerously_fluf: and also, I'd like it to be compact enough that it can be bundled with the source
15:10  Yhg1s: ggergelz: so you have an 'irc' package (which is probably not a good name for a toplevel package, as it's likely to conflict with existing modules, but that aside) that has a 'handler' module and a 'handlers' package inside it
15:10  Yhg1s: ggergelz: you can just import irc.handlers.foobar, and in irc.handlers.foobar import irc.handler
15:11  Yhg1s: ggergelz: you have to be careful with circular imports, however.
15:11  pk4r: jorrit, I find this task very common, list comprehension satisfies me enough I'm just curious..
15:11  ggergelz: Yhg1s: how can i avoid circular imports?
15:11  OwaisL: Hey Pythonistas; I want to know if I can specify the size of variables I use. Suppose I want an INT to be only 1 byte or some other value. Is this possible?
15:12  Yhg1s: ggergelz: don't have circular dependencies. refactor modules so that the stuff both modules need is in a third module.
15:12  Yhg1s: OwaisL: nope.
15:12  papna: ggergelz: Move everything a imports from b to a new module c.
15:12  TheSheep: OwaisL: they will use as much memory as needed for the object you put inside
15:12  ggergelz: ok
15:12  ggergelz: thinking about it
15:12  TheSheep: OwaisL: s/you put inside/you point it to
15:12  ggergelz: thanks
15:13  OwaisL: Yhg1s, TheSheep; Okay, what about binary files. I've noticed that on Linux binary is stored as plain text or am I doing it wrong?
15:13  TheSheep: OwaisL: variables in python don't store the values inside them, they only point to objects
15:13  Yhg1s: OwaisL: 'binary' doesn't mean much.
15:13  TheSheep: OwaisL: if you need t ogenerate a particular binary structure, use the struct module
15:13  Yhg1s: OwaisL: what are you storing how, and how do you expect it to appear in the file?
15:15  gregordian: I am pretty new to python, just been learning things the last couple days to see if I can do some shell type scripting using python rather than bash. I have 2 python lists, filled with unix file paths. I wish to use the simplest loop to copy the file from the first list to the file in the second list. Recommendations?
15:15  Yhg1s: gregordian: 'for src, dst in zip(srcs, dsts): shutil.copy(src, dst)'
15:15  Yhg1s: gregordian: although normally you'd not have the two separate lists, but rather have a dict or such.
15:16  gregordian: Yhg1s: yes I suppose I could rewrite it to use a dictionary
15:16  gregordian: thanks for the advise
15:16  gregordian: what is zip function for?
15:17  Yhg1s: for combining lists in a specific way.
15:17  papna: gregordian: Iterating over two iterables in lockstep.
15:17  papna: gregordian: help(zip)
15:19  pr100: unless you actually want a list like that in your hand it's often preferable to use itertools.izip
15:20  gregordian: Yhg1s, papna: thanks for your help
15:20  gregordian: pr100: i will look into itertools.izip as well
15:23  gregordian: just implemented. works great. I look forward to using python for more of my scripting needs
15:24  kerio: you can also use python 3!
15:24 * kerio ducks for cover
15:24  shlunk: hi all!
15:25  shlunk: i have a list of objects, each with a date
15:25  shlunk: how could i group them by week?
15:25  kerio: iterate over them?
15:26  shlunk: how would i get the week from the date, though?
15:26  kerio: huh... datetime
15:27  Tordmor: I think he meant number of week in the year. Does datetime have that?
15:27  railsroad: Where is socket.gethostbyaddr() defined?
15:27  pr100: sort them by date, then collect into buckets with a new one each time the week changes... roll it yourself or look at itertools.groupby
15:27  kerio: Tordmor: sure, date.isocalendar[1]
15:27  TheSheep: Tordmor: I think the calendar module has that
15:27  kerio: well, date.isocalendar()[1]
15:29  Tordmor: awesome
15:29  mauriez: ok.. so im able to zip my data now.. but when i check the datasize against the original datasize.. its not smaller! im clueless.. http://pastebin.com/n9S5qtvk
15:29  infobob: http://paste.pound-python.org/show/102/ (repasted for mauriez)
15:30  kerio: mauriez: well, it could also be larger of course
15:31  mauriez: kerio: but im zipping 3 meg of csv data.. that really should be smaller i would say
15:33  marcchr: mauriez: the default of ZipFile is compression=ZIP_STORED, use zipfile.ZipFile(filedatazipped, 'w', zipfile.ZIP_DEFLATED)
15:34  mauriez: aha! let me try that!
15:36  mauriez: marcchr: thank you!
15:36  neumaennl: why is the default uncompressed?
15:36  marcchr: mauriez: you're welcome
15:36  neumaennl: the usual intent of using zip files is compressing files, right?
15:36  mauriez: neumaennl: yeah.. does not make much sense.. makes the package useless imo :)
15:37  marcchr: neumaennl: good question..
15:37  Wild_Cat: neumaennl: not only. Using a zip file to simply store files is a great way to speed up access to tons of small files.
15:37  neumaennl: well, not exactly useless...
15:37  jorrit: Especially for files that compress badly anyway.
15:37  Wild_Cat: also, it's a good way of distributing stuff and/or abstracting away filesystem quirks.
15:37  neumaennl: Wild_Cat: of course, but that's not the way it is used most often
15:38  Wild_Cat: not to mention that if you really want compression, the zip format is obsolete. bz2 and 7z offer far superior compression ratios.
15:39  Wild_Cat: (however, defaulting to ZIP_STORED remains an idiotic decision)
15:39  marcchr: Wild_Cat: but there is no lzma comoressor in the stdlib :)
15:39  marcchr: -o+p
15:39  Wild_Cat: marcchr: so? There's a bz2 module.
15:40  azareth: i have s string that i used liek regexp its something like r'^123$', the problem i how can I use it as unicode
15:40  papna: azareth: Decode it using the appropriate codec and you'll have a unicode object.
15:41  papna: azareth: Or enter it as a unicode literal ur'^123$'
15:41  azareth: papna : ur was the cure, at first i tried it with ru and it didnt worked
15:42  azareth: its bad that they are not the same
15:50  adorablepuppy: Does anyone know of any natural language processing books?
15:53  Mkman: Hey!
15:53  adorablepuppy: hey
15:54  ryan_languagelab: i am using Pyflakes (like pychecker, pylint) and it's telling me I am assigning variables I never use. does this matter?
15:54  jorrit: ryan_languagelab, well why are you doing that?
15:54  papna-work: ryan_languagelab: If you use them, then you probably needn't have assigned them.
15:54  Yhg1s: ryan_languagelab: it's usually an indication you you're keeping things around you don't need, or that you're assigning to the wrong name.
15:55  ryan_languagelab: i mean the function might reutnr an object  but i don't care about it
15:55  Yhg1s: so don't assign it.
15:55  jorrit: ryan_languagelab, then don't assign it.
15:55  papna-work: ryan_languagelab: then do "foo()" instead of "x = foo()"
15:55  ryan_languagelab: yep thanks
15:56  papna-work: One of the best uses of unused names is "height, weight, eye_color, hair_color = person.appearance()" when all you need is eye_color.
15:56  jorrit: papna-work, then you can still use _ instead.
15:56  papna-work: Yeah, but then your code would be worse.
15:56  nosklo: no, not _
15:57  nosklo: please stop using _ to mean "I don't care"
15:57  jorrit: papna-work, worse in what sense?
15:57  shuaib: Do I need to do somethign extra to open urls using https with urllib2?
15:57  screen-x: what should _ be used for?
15:57  shuaib: Or just usign https:// would do it?
15:57  nosklo: screen-x: _ is clearly a gettext translation function
15:58  nosklo: I had to fix loads of code that used _ to mean "I don't care", thus overwriting the gettext function for the current scope
15:58  Yhg1s: shuaib: if your Python build supports SSL, and most do nowadays, it should just work.
15:58  screen-x: I have written an gui/translatable apps yet, but now I know to reserve _
15:58  shuaib: Yhg1s: umm any simple test I can perform to check
15:58  shuaib: ?
15:59  nosklo: papna-work: I'd do ign, ign, eye_color, ign = person.appearence()
15:59  Yhg1s: shuaib: try to get a https page.
15:59  shuaib: Yhg1s: ok
15:59  yak^: why not just index the tuple?
15:59  nosklo: yeah, or that
15:59  nosklo: sometimes you want two values out of, say, 5
15:59  yak^: eye_color = person.appearance()[2]
15:59  papna-work: nosklo: Mine is more understandable, more extensible, and clearer.
15:59  nosklo: .... and binds more variables
16:00  papna-work: nosklo: They're cheap.
16:00  papna-work: nosklo: And temporary.
16:00  nosklo: isn't hair color a list of a billion colors, one for each hair string?
16:00  nosklo: if so, not binding it is a good thing
16:00  papna-work: nosklo: But they enforce that I know how appearance works and they're ready for something new.
16:00  papna-work: nosklo: Not really. My function's returning in 0.4 seconds.
16:01  nosklo: anyway, my point was just to not use _
16:02  nosklo: which you weren't using in first place, so cheers
16:02  papna-work: Or you can use "gettext" for the gettext translation function.
16:02  Yhg1s: papna-work: nope!
16:02  nosklo: no, tools assume it's called _
16:02  Yhg1s: because then you can't use xgettext.
16:02  yak^: all valid points but I still think that if just one value is needed, indexing is the "right" way
16:02  Yhg1s: a better choice for unused parts of a sequence unpacking is 'unused', as most tools will ignore unused variables named (or starting with) 'unused'.
16:03  papna-work: yak^: In my experience, indexing is slightly more errorprone than unpacking.
16:05  yak^: papna-work: true, could be a problem for careless programmers
16:07  papna-work: yak^: Careless programmers are ones who do errorprone things.
16:11  locojay: hi i have os.path.abspath(os.path.dirname(__file__)). how can i use os.path to go one level up on the path basically do  a ../
16:11  nosklo: locojay: os.path.dirname()
16:12  nosklo: locojay: another way is os.path.join(yourpath, os.path.pardir)
16:12  locojay: thnks
16:12  nosklo: locojay: but since you already have absolute...
16:12  setog3: hi, I am trying to write a reader and writer for a binary file .. I think that I should use struct.unpack to do it.. but do you recommend some documentation to write something like that ? (what I want is a way to describe the file binary format in a place, and a read() and write() function that use these structure to do the job)
16:12  locojay: need to go 2 level up ;)
16:13  yak^: papna-work: I do a lot of embedded Python and often look for cheap ways of doing things and prefer them even if they are less readable and as you say, more error prone. If I do that, I take great care to ensure they work properly, comment the code, etc. I agree that when coding for systems where resources aren't critial, unpacking to unused variables might be a better choice.
16:14 --- gregglind_away is now known as gregglind
16:14  ironfroggy: Is there any good way to add a single module to a virtualenv *without* adding sibling modules in its parent directory?
16:14  papna-work: yak^: That sounds like hopelessly premature optimization.
16:14  Yhg1s: setog3: yes, that's what the struct module would do for you.
16:14  ironfroggy: The only thing I can think of is adding an empty directory to path and symlinking only specific modules there.
16:14  setog3: Yhg1s: are you sure, because for now I use a
16:15  Yhg1s: setog3: I'm sure yes, although your question seems to be cut off after 'for now I use a'
16:15  setog3: big python file that do struct.unpact... on each part of the binary file.. I didn't see any way to do reuse this code for writing the file.. but ok I am going to reread the struct documentation
16:16  papna-work: setog3: Save any fancy specs.
16:17  papna-work: setog3: If you make a bunch of pack/unpack calls and are hoping to define once something that can do both, the struct module is too low-level for you.
16:17  papna-work: setog3: What file format is this?
16:18  setog3: papna-work: it's gdf file format and other kind of scientific format to store EEG data
16:18  greg_f: I have csv file with list of networks with mask and isp city name, i need to create redix tree db. Somebody did it?
16:20  papna-work: setog3: Python doesn't ship a high level interface for trying to define arbitrary binary formats.
16:20  papna-work: setog3: You have to write the parts separately or write smoething to abstract them yourself.
16:21  setog3: hmm ok, I was thinking that lib as hachoir or things like that were there for that
16:21  papna-work: I meant "
16:21  yak^: papna-work: it isn't premature in my environment, it's something I use regullarily and was never bitten by, lets stop discussing this as we clearly have different opinions on this
16:22  papna-work: setog3: I meant "in stdlib", whcih was a stupid thing to mean implicitly.
16:24  setog3: ok, so.. you know what should I seach on google ? some keywords to find python code that do reading/writing of binary data ?
16:24  locojay: im doing sys.path.append on os.path.abspath(os.path.dirname(os.path.dirname(os.path.dirname(__file__)))), unfortunatly it does not end with a / so sys.path has no effect. how can i add / with os.path module thnks
16:25  papna-work: locojay: Modifying sys.path isn't something you do in a real program.
16:25  papna-work: locojay: Put all modules you want Python to find in place it can find.
16:26  papna-work: locojay: Use PYTHONPATH to let it find nee places.
16:27  locojay: i m loding a global mongoconn from a level up on my code is not an api so i don't whant to install and therefore to avoid an Importerror use sys.path
16:30  donspaulding: yak^: may I ask what kind of embedded systems you work with?
16:31  donspaulding: (I'm a sucker for small footprint python stories)
16:38  thyko: all i wanna do is implement a one-to-many in appengine. Is that too much to ask?
16:38  thyko: *relationship
16:40  yak^: donspaulding: symbian smartphones, we ship a custom python interpreter with close to no stdlib with the app
16:40  nosklo: thyko: well, what's stopping you from implementing it?
16:42  donspaulding: yak^: isn't python already present on symbian devices?
16:43  dangerously_fluf: FINALLY, I have compiled eGenix pyOpenSSL
16:43  ssbr_: donspaulding: only S60
16:43  dangerously_fluf: for 2.7 on AMD64
16:44  dangerously_fluf: and I made it smaller by symlinking the files with my preexisting openssl installation
16:45  yak^: donspaulding: it is and that's what we build on but we added a lot of customizations to the core and we don't want the users to have to download it separately so we have it built into the app and isolated from the system to prevent clashes with the standard python installation, should users have it installed
16:47  dash: dangerously_fluf: how is "eGenix pyOpenSSL" different from actual openssl?
16:47  thyko: nosklo: let me show you
16:49  thyko: nosklo: http://dpaste.com/277341/ now lets say a lient ex exists and is saved. Shouldnt g = App() g.client.name = 'ex' work?
16:50  thyko: hey wait, mybe it wants the actual 'ex' object. But then how do i convert a string 'ex' to .... ex?
16:54  robertosucks: i want to learn python, what book do you recommend?
16:54  Yhg1s: robertosucks: depends on your prior experience.
16:54  robertosucks: Yhg1s, C
16:54  Yhg1s: robertosucks: docs.python.org/tut may suit you then.
16:55  robertosucks: i want to have a paper book
16:55  robertosucks: i want to have a more strucutre study
16:55  Yhg1s: 'Python in a Nutshell' then perhaps. I suggest you read a couple chapters of a few books, see which you like.
16:57  robertosucks: Dive into Python what do you think about it?
16:58  donspaulding: yak^: cool, thanks.
16:58  ivan`: dash: I think it's nearly the same except for maybe some weird compatibility stuff in __init__.py
16:58  nosklo: robertosucks: it sucks.
16:58  ivan`: dash: it might even be the same now
16:58  donspaulding: robertosucks: DiP worked for me ;-)
16:58  robertosucks: nosklo, why?
16:58  robertosucks: :)
16:59  nosklo: robertosucks: it teaches open lies
16:59  robertosucks: like what?
16:59  thyko: nosklo: err ... doode/
16:59  nosklo: robertosucks: also, it teaches bad techniques and workarounds and promote them like if they were idioms. The author clearly doesn't like code that works.
16:59  thyko: ?
17:00  nosklo: I suggest you burn all copies of DiP you have, and then add a firewall rule so you never access the website
17:00  robertosucks: nosklo, so what book do you recommend?
17:00  nosklo: it is really bad
17:00  Twey: nosklo: For example?
17:00  nosklo: robertosucks: my recommendation is the same as this channel's recommendation, the ones in the /TOPIC
17:00  robertosucks: yes but i want a paper book
17:01  nosklo: robertosucks: you can print it or buy it printed too
17:01  nosklo: Twey: all chapters have examples. You can grab any piece of the book and it's bad
17:01  nosklo: you want an example? Well. It says python has "private members". And that's a lie.
17:02  nosklo: Python classed don't have private members.
17:02  nosklo: classes
17:02  nosklo: that lie hurts us everyday as people use stuff in DiP and think they're doing correct private members when that's not True
17:03 --- Rez is now known as LoRez
17:04  nosklo: and don't even get me started on the DiP python3K update.. it's even worse!
17:04  tesseracter: in ipython, sometimes when i print output, the color codes start showing as boxes with numbers inside them, and all the commands other than regular A-z keys spit control characters like ^[[0x213 and such. any ideas?
17:05  Yhg1s: tesseracter: yes: ipython's output is messed up. don't use it.
17:05  Yhg1s: tesseracter: you printed something that confused your terminal, and ipython keeps trying to use it.
17:05  tesseracter: Yhg1s, is this something recent? i'll probably be lost without some sort of interpreter helper.
17:06  Yhg1s: ipython has always had issues with input and output and not being Python.
17:06  Yhg1s: what kind of "helper" do you need?
17:06  dash: tesseracter: what's it do that's more valuable than the regular python prompt?
17:07  Twey: Tab-completion
17:07  donspaulding: history, arrow-key navigation, editing of previous input and output lines, ? for docs, tab completion
17:07  tesseracter: i like the circular import handler, the colors, the tab completion, the up-arrow completion...
17:07  Yhg1s: history, arrow-key navigation and tab completion you can get from the normal interpreter just fine.
17:07  Yhg1s: I'm not sure what "the circular import handler" is.
17:08 --- pr3d4t0r is now known as pr3d4k4t
17:08  tesseracter: Yhg1s, it gives you a stack of where you imported stuff, instead of the stupid spooky error python gives you.
17:08  Yhg1s: I still don't understand what you mean.
17:08  donspaulding: Yhg1s: yes, you can, by doing 'pip install ipython'
17:08  Yhg1s: donspaulding: no, ipython isn't python.
17:08  Yhg1s: it'
17:08 --- pr3d4k4t is now known as NikkiWade
17:08  Yhg1s: it's something that pretends to be python, and often fails.
17:08  sickn3ss: is it possible to call a function fro a python script from another python script ?
17:09  mordy: if you import it
17:09  Yhg1s: sickn3ss: only by having them not be separate scripts, but making one a module that the other imports.
17:09  dash: tesseracter: regular python givs you a stack of where you imported stuff.
17:09  sickn3ss: hmm ok thanks guys :)
17:09  tesseracter: and the regular interpreter can't work a completion off the start of a line-- i start typing "foo =" then hit the up arrow, and it shows me the last things i used, like "foo = range(0,30)" *up arrow* "foo = 'my hat'"
17:10  tesseracter: dash, not from what i've seen at ALL.
17:10  Yhg1s: tesseracter: readline uses '^R' for that. you can rebind it.
17:10  tesseracter: Yhg1s, ctrl r needs to be hit BEFORE you start a line.
17:10  Yhg1s: sure.
17:10  tesseracter: the intuition just isnt there.
17:10  Yhg1s: it's not a direct replacement.
17:11  Yhg1s: However, it doesn't have all the issues ipython has, like broken input and output handling.
17:11  Yhg1s: it's your choice.
17:11  lugzer: hey
17:11 --- Kami_ is now known as Kami
--- Log closed Fri Nov 19 19:02:21 2010
--- Log opened Fri Nov 19 19:02:49 2010
19:02 --- Users 820 nicks [0 ops, 0 halfops, 0 voices, 820 normal]
19:03  nosklo: jimbaker: do you have a runnable example I can use to reproduce the issue?
19:03  giaco: KirkMcDonald, I know that python has been created as a scripting language for an operating system, not mean to be transformed into what it's now
19:03  nosklo: jimbaker: can you pastebin your code?
19:06 --- Channel #python was synced in 222 seconds
19:06  jimbaker: nosklo: ahh, i found the problem. here's the difference between my code and the stackoverflow example
19:07  papna: gdbla: Sure. People compensate for Python's lack of scalable recursion, lack of an asynchronous model, lack of interfaces, lack of patternmatchable exceptions, and other things with various idioms.
19:08  MostAwesomeDude: giaco: Can you back that statement up? :3
19:08  papna: I guess I should write a book on the "explicit stack pattern" and the "use Twisted goddamnit pattern" and the "duck typing pattern" and the "bare raise if statement pattern"
19:09  Wild_Cat: papna: explicit stack pattern?
19:09  nosklo: papna: now I want to read the book
19:09  giaco: I'd be interested in "duck typing pattern"
19:09  jimbaker: the subprocess was actually starting a server (zookeeper for what it's worth), to do some testing. because it's a server, it's indefinitely long running. zk wants to get a signal to terminate, so i send it. normally this works. but if the test subset is too short, and doesn't actually wait on zk, then we send the signal to zk, then remove the directory tree before it handles the signal. zk gets very confused and complains
19:11  girasquid: I'm parsing about ~20GB of data, strewn across 10-15 files, and I need to keep large chunks of it in memory/dicts so that I can coerce the data into the format that I need. My parser is...mindnumbingly slow - does anyone have any tips on dealing with big/lots of data in python that I could use to speed up my parser?
19:11 * f8l quacks.
19:11  jimbaker: nosklo in the stackoverflow example, the subprocess.check_call implicitly does a subprocess.poll. adding that let's the termination proceed just fine
19:11  Wild_Cat: girasquid: maybe mmap can help you?
19:11  nosklo: girasquid: add 20GB ram?
19:11  jimbaker: so a data race - just on the opposite side
19:11  girasquid: nosklo: yeah, that'd be ideal :(
19:11  nosklo: girasquid: ram is cheap
19:12  girasquid: Wild_Cat: thanks, taking a look
19:12  papna: Wild_Cat: Using a for loop.
19:12  dash: girasquid: what's the slow part?
19:12  papna: Wild_Cat: nosklo: giaco: Note that all of those things sound less douchy without the word "pattern" at the end.
19:12  gdbla: i'd also be curious about what "bare raise if" is
19:12  ardian: Hi, There were some video tutorials about python on the webpage with a Virtual University do you have these links still
19:12  girasquid: dash: As far as I can tell, reading through and storing the data - I have a file that's ~5GB, and I'm reading through line-by-line and storing it into a dict of dicts so that I can refer to it later
19:12  nosklo: papna: yeah, that's why you should leave the "pattern" bit at end when you write it.
19:13  dash: papna: we really ought to write this stuff up
19:13  gdbla: papna: writing a book would be great, regardless of douchiness
19:13  nosklo: papna, dash: readers are waiting
19:13  dash: papna: "python tutorial sequel"
19:13  girasquid: It's basically a dump of a relational database in a bunch of flatfiles; I'm moving things into dicts so that I can refer to all of them at once in my parser and coerce it down into something I can work with
19:13  dash: ardian: look up 'google python class'
19:13  dash: girasquid: dang. would it not be easier to do actual queries?
19:13  ardian: dash, hmm it was some dude doing screen recording he was using some kind of linux
19:13  dash: ardian: Okay.
19:13  girasquid: dash: I don't think that I can actually load the data up into a database to query off of it - but I'll definitely have to do some more digging there
19:14  dash: girasquid: what are you parsing? the actual dump syntax?
19:14  girasquid: dash: yeah - it's in a format that csv almost-but-not-quite readers, with \x01 as a field seperator and \x02\n as a row seperator
19:15  nosklo: oh BCP
19:15 * nosklo shudders
19:16  dash: girasquid: yeah i'd be tempted to stick that in sqlite or postgres
19:16  dash: i'm not sure
19:17  dash: girasquid: what are you doing with it after parsing?
19:17  girasquid: I'll have to look into that, then
19:17  regebro: Any Python 3 c-extension coders out here? :-)
19:17  nosklo: regebro: looks like those are rare
19:17  girasquid: dash: saving it down to my actual database :)
19:17  dash: regebro: it's about the same as python 2's c api
19:18  dash: girasquid: what db are you using?
19:18  regebro: nosklo: Yup.
19:18  girasquid: dash: postgres
19:18  dash: regebro: i've ported some python 3 C API code
19:18  dash: girasquid: oh man so easy then
19:18  regebro: dash: Well, except for some important things, such as that everything is unicode now.
19:18  regebro: dash: Anything involving strings?
19:19  regebro: I'm looking at one module that does a lot of string thingoes.
19:19  girasquid: dash: so you're saying - load it up in postgres, query the stuff I need and insert it into the other db, and then do whatever extra processing I need on that?
19:19  regebro: But now everything is unicode, and I'm not sure of the best way to hanlde that.
19:20  dash: regebro: it was python 3's ast module
19:20  regebro: Doing everything with Python unicode objects instead is one option, but that's a *big* change.
19:20  dash: regebro: (i ported it to python 2)
19:20  regebro: dash: Ah.
19:21 --- SpitfireWP_ is now known as SpitfireWP
19:21  papna-work: regebro: You mean you do a lot of string operations in C using char*s?
19:22  dash: girasquid: i'd be tempted
19:22  dash: girasquid: based on what transforms you're doing
19:22  regebro: papna-work: Right.
19:22  girasquid: dash: it's kind of like "take these 15 tables, merge them into this one table, and then update a few columns using their own data"
19:22  dash: girasquid: sure
19:22  regebro: papna-work: Actually, looking at the code again it's not "a lot". Just "some"
19:22  dash: girasquid: i'd consider doing a lot of that in sql
19:23  girasquid: dash: yeah - I'm not sure why I figured python would be faster for that
19:23  regebro: I'll try converting them to native python string/unicode operations and see...
19:23  papna-work: regebro: For the most part, things that were unicode instances in Python 2 should be str instances in Python 3, and a very small subset of C string operations apply, and things that were str in 2 should be bytes in 3 and have limited stringiness to them.
19:24  papna-work: regebro: One would have to know what the data are to know what valid operations are.
19:24  dash: girasquid: it might! it all depends. :)
19:24  dash: girasquid: might be worth trying on a small scale both ways
19:24  girasquid: dash: haha, yeah - time to do some tests
19:24  girasquid: Agreed
19:24  regebro: papna-work: In this case it's text, so it should be (and is) unicode
19:25  papna-work: regebro: if you're converting code that used unicode to code that uses str(in 3), the same char* operations are valid (not many).
19:25  regebro: papna-work: In C, the "str" type in Python 3 is Unicode.
19:26  papna-work: regebro: In Python, the "str" type in Python 3 is Unicode.
19:26  regebro: papna-work: Char* operations tend not to apply at all. In fact, there is not even a method to make the unicode objects into char* /for reasonable reasons)
19:27  dash: regebro: yes there is :)
19:27  papna-work: regebro: Sure there is (just not a direct one)
19:27  dash: papna-work: also there is
19:27  dash: i don't remember if it's private though
19:27  regebro: dash, papna-work: There is? I couldn't find it.
19:28  regebro: And Brandon made his own method to do it.
19:28  papna-work: dash: There's something that gives the right thing. I didn't remember/don't care about it's type.
19:28  regebro: dash: Private? It's all function calls. :)
19:29 * regebro is confused now
19:29  dash: one sec
19:30  dash: regebro: sure but some things are in headers and some aren't
--- Log closed Fri Nov 19 19:35:50 2010
