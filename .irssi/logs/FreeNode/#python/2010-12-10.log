--- Log opened Fri Dec 10 02:27:36 2010
02:27 --- Users 730 nicks [0 ops, 0 halfops, 0 voices, 730 normal]
02:29 --- Channel #python was synced in 94 seconds
02:32  Chopinn: for foo in lol: is foo a reference?
02:32  Chopinn: :(
02:33  ij: Copy.
02:33  Chopinn: someway i can make it a reference?
02:33  Kaedenn: er
02:33  Kaedenn: It's not a copy.
02:33  Chopinn: ..
02:34  exarkun: Python only has references
02:34  zemanel: fixed the cx_Oracle thingy, was a driver arch problem
02:34  exarkun: It's a reference
02:34  ij: o.O Not? Then how come when I change it the lol doesn't get affected?
02:34  Kaedenn: Depends what's in it.
02:34  exarkun: What do you mean "change it"?
02:34  Kaedenn: If it's mutable and you mutate it, you'll see it in the result.
02:35  Kaedenn: If it's immutable and you reassign to it, then no, you won't see it.
02:35  exarkun: mutable vs immutable is almost a red herring.
02:36  _habnabit: It's just about reassignment.
02:36  _habnabit: If you reassign, it won't be affected.
02:38  yuriks: Hey
02:38  yuriks: is there a quick way to creat a lazy list, that, when first acessed, calls a function to get it's actual contents?
02:39  exarkun: sure, do it.  __getitem__.
02:39  yuriks: hmm, that covers iteration and everything, then?
02:39  otterpaw: it works :D
02:40  otterpaw: thanks to everyone who helped me
02:40  exarkun: yuriks: no, if you want everything, implement all of the necessary methods.
02:40  exarkun: yuriks: maybe the UserList module will help a little
02:42  dpn`: hey, is it possible to get a urllib2.Request object to print itself in the way the actual http request would look on the wire?
02:44  exarkun: dpn`: like a request.as_http11_request_bytes()?
02:48  yuriks: exarkun: hmm, it says UserList is deprecated, and tells me to subclass from list instead. Should I worry about that?
02:48  exarkun: yuriks: oh. python sucks.  sorry.
02:48  ratg0d: so why are async web apps better?
02:48  ratg0d: http://www.publiusforum.com/images/pelosipiggies_02.jpg
02:48  ratg0d: looking at this
02:48  yuriks: exarkun: .... uh?
02:48  dpn`: bah exarkun i actually tried as_http11_request_bytes :P
02:48  exarkun: dpn`: sorry, nothing as far as I know. :)
02:49  exarkun: yuriks: it's stupid that UserList is deprecated, it's what you want.
02:49  exarkun: yuriks: if you subclass list instead, then you won't have as much control over what happens.
02:49  TC01: Using the google module (http://pypi.python.org/pypi/google/1.01), is it possible to search a specific site with a built-in Google search?
02:49  TC01: For example: xkcd has a Google search built-in, is there a way I could make the google module search xkcd specifically, not the web in general?
02:49  exarkun: yuriks: file a bug in the python issue tracker asking for UserList to be undeprecated
02:49  TC01: Or is there some other way I could do that?
02:49  exarkun: ratg0d: I hope that isn't what you intended to paste.
02:50  ratg0d: http://git.emarhavil.com/chiral.git crap
02:50  ratg0d: I am not a communist tho
02:50  exarkun: ratg0d: Too bad.
02:50  deepy: Why not?
02:50  dpn`: ffs another async framework
02:50  exarkun: you're a git user, is that any better?
02:50  ratg0d: so async is good I guesS?
02:50  spacemagic: why not a communist?
02:50  deepy: TC01: doesn't adding "site:xkcd.com" into your search do what you want?
02:50  ratg0d: python seems to have a lot of web frameworks
02:50  spacemagic: are you scared of Mao?
02:50  exarkun: ratg0d: intrinsically?  yes, it beats rock, paper, and scissors.
02:51  yuriks: ratg0d: what a blunder ;)
02:51  dpn`: ratg0d: yes it sis, depending on what you want to build
02:51  dpn`: there is never a clear answer :P
02:51  ratg0d: I am scared of communists liek obama and american democrats who are bainwashign the stupid 16 year olds
02:51  spacemagic: lol
02:51  ratg0d: central planning fails
02:51  dpn`: lets leave that conversation alone
02:51  spacemagic: w/e rush limbaugh
02:51  exarkun: yes, please.  move on.
02:51  ratg0d: need new reagan revolution and mroe capitalism
02:51  ratg0d: let bad ideas die
02:51  dpn`: haha
02:51  ratg0d: :)
02:51  dpn`: ratg0d: shut up please
02:51  yuriks: exarkun: hmm, I'll try UserList. Or I may just as well do this properly, I'm doing this to hack around writing proper code elsewhere =P
02:51  TC01: deepy: oh, yeah
02:52  ratg0d: rush is pretty much right when i listen to him
02:52  TC01: obviously I wasn't thinking enough about this ;)
02:52  ratg0d: never hear dhim wrong did you?
02:52 --- ChanServ sets modes [#python +o exarkun]
02:52 --- exarkun sets modes [#python +q ratg0d!*@*]
02:52  dpn`: thanks exarkun
02:52 --- exarkun sets modes [#python -o exarkun]
02:52  exarkun: (if he'd been crazy in the other direction, I would have done the same thing, #python isn't the place)
02:52  dpn`: exactly
02:53  dpn`: finding myspace's private json apis hard to scrape :(
02:53  lazydancer_: from goto import goto, comefrom, label wont load in 2.7.1
02:53  exarkun: lazydancer_: That's a relief.
02:54  lazydancer_: i figured
02:54  lazydancer_: tell me why
02:54  exarkun: Beats me
02:54  lazydancer_: do you know how to make it load?
02:54  exarkun: Upgrade to Python 2.6?
02:55  dpn`: haha
02:55  lazydancer_: downgrade?
02:55  dpn`: use functions instead of goto
02:55  dpn`: :P
02:55  exarkun: If it has more functionality for you, then how is it a downgrade?
02:56  lazydancer_: howto use functions instead of goto?
02:56  exarkun: lazydancer_: Be prepared to take your time, http://docs.python.org/tutorial/
02:56  yuriks: oh lol
02:56  brianlions: hi guys, which library should i use to edit vector graphics? most of the operations are very simple, such as rotating, zooming and convert to jpeg.
02:56  yuriks: oops
02:57  dpn`: lazydancer_: after some googling, it turns out there is a goto lib for python.. it comes with this warning "The "goto" module was an April Fool's joke, published on 1st April 2004. Yes, it works, but it's a joke nevertheless. Please don't use it in real code!"
02:57  lazydancer_: lol, but it's better than a giant while loop
02:57  exarkun: not really
02:58  exarkun: but a _small_ while loop _is_ better than a giant while loop
02:58  exarkun: goto is a step *backwards* from a giant while loop, though.
02:58  lazydancer_: oh
02:58  deepy: while giants loop...
02:58  yuriks: wow, comefrom is really, really evil
02:58  lazydancer_: so use more functions to make the while loop smaller?
02:58  exarkun: edsger dijkstra, on goto as compared to while loops, http://www.u.arizona.edu/~rubinson/copyright_violations/Go_To_Considered_Harmful.html
03:00  commystomper: word
03:00 --- ChanServ sets modes [#python +o exarkun]
03:00 --- exarkun sets modes [#python +q commystomper!*@*]
03:01 --- ChanServ sets modes [#python +o infobob]
03:01 --- infobob sets modes [#python +q $a:republican_devil]
03:01 --- infobob sets modes [#python -q commystomper!*@*]
03:05  monokrome: Hey. Why is it better for Python to be used as a host instead of embedded?
03:06 --- infobob sets modes [#python -o infobob]
03:06 * monokrome has been Googling this, but thinks that he may have the terminology wrong.
03:06 @exarkun: monokrome: embedding requires extending
03:06 @exarkun: monokrome: extending doesn't require embedding
03:06 @exarkun: so, extending is easier.
03:06 @exarkun: plus, python is a good way to stick things together.  with extending, you get to use it for that.
03:07 @exarkun: with embedding, you're using C (or whatever) to stick things together.
03:07  monokrome: However, to use an application extending Python
03:08  monokrome: doesn't Python need to be installed separately?
03:08 @exarkun: I'm not sure what you mean by "separately" there
03:08 @exarkun: Python certainly needs to be installed, whether you embed or extend.
03:09 @exarkun: Lots of people who embed choose to distribute a version of Python with their software, rather than trying to use an already-installed version.
03:09 @exarkun: But that's not exactly a requirement of embedding.
03:09  monokrome: Doesn't that make deployment more difficult?
03:10  dpn`: any dependency makes deployment harder
03:10  dpn`: if you are using linux, i don't know of a linux distro that doesn't have python installed
03:10  monokrome: The app will run on Windows, also
03:11  spacemagic: yah. just type python in the terminal window
03:11  ZanQdo: hi
03:11  spacemagic: if it doesn't come up i'll pay you 1 bitcoin
03:11  dpn`: well, you will need to make an installer then? you may as well bundle the python installer
03:11  dpn`: monokrome: if you aren't using an installer, just get the user to install python
03:11  dpn`: in the same way that they would have to install .net
03:11  ZanQdo: whats the way to look over a float range? qrange doesnt seem to be working anymore√ß
03:11  monokrome: py2exe could help with that
03:11  dpn`: it could
03:12  monokrome: If it works with Python 3
03:14 --- montylounge__ is now known as montylounge
03:17  tos9: ZanQdo: what?
03:17  tos9: loop?
03:17  ZanQdo: yes
03:17  ZanQdo: sorry
03:18  ZanQdo: I think numpy's got an arange
03:18  tos9: ZanQdo: believe so yes. Or just write a genexp / listcomp
03:18  Wolfram74: hi, all, i've got a peculiar failure mode cropping u
03:18  Wolfram74: up
03:18  ZanQdo: ok
03:19  tos9: Wolfram74: what's a failure mode?
03:19  Wolfram74: http://dpaste.com/285067/
03:20  dash: monokrome: here's what one guy said one time about it: http://www.twistedmatrix.com/users/glyph/rant/extendit.html
03:20  Wolfram74: when i run my code instead of waiting to click on a button to run rockem, it instead runs it for each button as it's made
03:20  Wolfram74: and then, afterward, the buttons don't actually do anything
03:20  dash: Wolfram74: foo() isn't foo
03:20  Wolfram74: somewhat vexing, as ... come again?
03:20  ivan`: Wolfram74: self.rockem(i) calls it, it's not a reference to a function
03:20  dash: Wolfram74: 'foo' and 'foo()' do not do the same thing.
03:20  tos9: Wolfram74: whoa, that's overly complicated. isupper and islower
03:21  Wolfram74: oh
03:21  lazydancer_: http://pastebin.com/rDVw2C0J
03:21  infobob: http://paste.pound-python.org/show/390/ (repasted for lazydancer_)
03:21  lazydancer_: i know that some of the hits were longer than 1 but it still says 1
03:22  dash: teratorn: so how does the new STEPS report make you feel
03:22  Wolfram74: wait, but i've done command=self.foo(n) before, and it worked
03:22  ivan`: doubt it
03:22 @exarkun: lazydancer_: The computer is usually better at this than you, so take its word for it.
03:22  ivan`: Wolfram74: lambda i=i: self.rockem(i)
03:22 @exarkun: lazydancer_: If the results aren't what you expect, figure out why you expected the wrong thing.
03:23  lazydancer_: exarkun I can't
03:23  lazydancer_: wait let me try one more experiment
03:23 @exarkun: Well, I won't wait
03:23 @exarkun: But I'll let you try
03:23 --- exarkun sets modes [#python -o exarkun]
03:24  diegoviola: is python better than ruby? explain why please
03:24  lazydancer_: hmm
03:24  _habnabit: d	no
03:24  _habnabit: diegoviola, no
03:24  Wolfram74: ivan': that didn't make any sense to me, i apologize, could you suggest a region of the documentation to investigate? is lambda a general term?
03:24  lazydancer_: if hits is returned as a list does it need to be like hits [] =?
03:24  diegoviola: _habnabit: why no?
03:24  _habnabit: lazydancer_, docs.python.org/tut
03:24  monokrome: The difference between embedding and extending is that you use Python as your host and write Python modules in C that your main Python application uses when extended, right?
03:25  _habnabit: monokrome, right.
03:25  monokrome: kk
03:25  _habnabit: monokrome, when you're embedding, something else starts up the python interpreter.
03:25  ivan`: Wolfram74: http://docs.python.org/reference/index.html
03:25  dash: Wolfram74: it's a keyword for creating functions, like 'def'
03:26  monokrome: _habnabit: Which isn't very difficult in C anyway
03:26  _habnabit: monokrome, eh
03:26  dash: well, you _say_ that
03:26  _habnabit: monokrome, python doesn't make it easy.
03:27  monokrome: The first time it's not too simple, because of serverly lacking documentation
03:27  monokrome: but after you've done it once, you know what you need to do
03:27  monokrome: and I suppose Python.h is annoying
03:27  Wolfram74: so would i put lambda i=i: self.rockem(i)... in place of command=self.rockem(i)?
03:27 * monokrome extends after remembering that...
03:28  Wolfram74: yeah, that didn't work
03:28  Wolfram74: ok
03:28  dash: Wolfram74: well you still need command=
03:28  Wolfram74: hmmm
03:28  dash: since it's a keyword arg
03:29  Wolfram74: so command=lambda i=i: self.rockem(i)?
03:29  Wolfram74: huh, it ran
03:30  Wolfram74: not getting the kind of results i was hoping for yet, but it's, something
03:30  Wolfram74: unfortunately very empiracal, i couldn't explain how this worked, must puzzle with myself for a spell
03:34  teratorn: dash: I don't really have any strong feelings about STEPS... I just think it's interesting research
03:34  teratorn: you know... trying to make programming not be impossible
03:36  dash: teratorn: Hm
--- Log closed Fri Dec 10 03:40:32 2010
--- Log opened Fri Dec 10 03:46:05 2010
03:46 --- Users 718 nicks [0 ops, 0 halfops, 0 voices, 718 normal]
03:47 --- Channel #python was synced in 94 seconds
04:03  warz: hi all. is there a python binding for gmail, or just pop or something, that can receive email messages as they come in?
04:05  codebrainz: http://www.google.ca/search?hl=en&source=hp&q=python+gmail&meta=&btnG=Google+Search
04:06  _habnabit: warz, you'd need IMAP for that
04:07  warz: hrm, ok.
04:09  monokrome: ls
04:09  _habnabit: .   ..
04:12  saml: in twisted, can I use twistd command but supply my handler for /foo/bar  ?  I want it to server static files other than GET,POST request to /foo/bar
04:15  teratorn: saml: it's noooot very clear what you want... can you rephrase that?
04:16  saml: teratorn: I want to have a static file server. but for /foo/bar, I want to have my own python script that can handle GET and POST request to that path.
04:16  saml: do I write a WSGI or something and pass it as twistd --wsgi   ?
04:17  jhl: saml: cherrypy
04:17  teratorn: jhl: how does that solve his twisted problem?
04:18  teratorn: saml: that's certainly possible to do
--- Log closed Fri Dec 10 04:22:15 2010
--- Log opened Fri Dec 10 04:27:41 2010
04:27 --- Users 716 nicks [0 ops, 0 halfops, 0 voices, 716 normal]
04:27 --- Server: [verne.freenode.net] [freenode-info] channel trolls and no channel staff around to help? please check with freenode support: http://freenode.net/faq.shtml#gettinghelp
04:28  Varriount: Ah, so there is a python channel on here
04:28  saml: i'm writing some javascript multiple file upload demonstration. I wanted to write a simple server that can serve my html and js files  and also handle POST request for file upload.
04:29 --- Channel #python was synced in 94 seconds
04:29  ivan`: twisted.web does that, your files will be in memory in request.args
04:30  ivan`: no upload streaming though, your render_POST will get called when it's done
04:30 * ssbr would have figured using existing servers would be the way to go
04:30  pizzledizzle: dear sirs, what book for 3.x for someone who programmed a little in 2.x
04:31  saml: ivan`: hrm i see.. that could be a problem since i'm trying to get multiple file upload with progress bar
04:31  Varriount: Hm.. Gevent, eventlet, or greenlet
04:31  ivan`: saml: http://wiki.nginx.org/HttpUploadProgressModule
04:32  ssbr: pizzledizzle: the "What's New in 3.0" page should teach you what's different about 3.x
04:32  papna: pizzledizzle: Why are you switching to 3.x? Most of the better books I know still target 2.x, as does most software and documentation.
04:32  bob2: pizzledizzle: don't think there is one yet
04:32  ssbr: read the "What's New" for 3.1 as well
04:32  bob2: pizzledizzle: the "what's new in 3.x" thing + the ppython 2 tutorial would probably work well
04:32  papna: pizzledizzle: For an experienced 2.x programmer, the "What's New?" thing is enough to get them caught up in a few minutes.
04:32  jhl: saml: Lots of ways to do that. Twisted seems like overkill perhaps. An alternative is http://docs.cherrypy.org/dev/progguide/files/uploading.html
04:32  bob2: Varriount: what are you doing?
04:32  ssbr: bob2: I believe Python 3 has a version of the official tutorial for it
04:32  bob2: oh
04:32  bob2: touche!
04:32  ssbr: jhl: ain't no such thing as overkill
04:33  Jerub: ssbr: a little overkill never hurt anybody
04:33  ssbr: I don't know anything about cherrypy's server, but if it's easier to write stuff with, that's good enough
04:33  Varriount: bob2: Making a server application for a game called minecraft
04:33  ssbr: Jerub: tell that to Japan D:<
04:33  jhl: ssbr, saml: super easy and the docs are very accessible.
04:33  ssbr: Right. See, I would have suggested using Werkzeug or something.
04:34  bob2: Varriount: twisted might be a better option then
04:34  ssbr: Also super easy, also has decent docs (you can pick another microframework if they aren't good enough), and it runs on Cherrypy, Twisted.web, and a whole bunch of other servers
04:34  ssbr: Varriount: "server application"?
04:34  ivan`: Varriount: exarkun was not actually agreeing with you when you said it was overkill.  exarkun means use Twisted.
04:35  ssbr: Are you proxying the minecraft server, ... ?
04:35  Varriount: Er, no?
04:35  jhl: Cool, never heard of Werkzeug.
04:35  Varriount: Making a server
04:35  ssbr: Varriount: So you're replacing the Minecraft server?
04:35  Varriount: yes, it's been done before
04:35  Varriount: Multiple times
04:35  Varriount: In a range of languages
04:35  ssbr: Minecraft must do way too much client-side, if it's that easy.
04:35  ssbr: *sigh*
04:35  ssbr: alpha software is such a pain...
04:36  Varriount: Nah, most stuff is server side
04:36  Varriount: We just have about 30 people trying to decipher the protocol
04:36  Varriount: #mcdev
04:36  ssbr: It'll be an ongoing effort, since the protocol does have to change anyway
04:36  Varriount: True
04:37  Varriount: Even arm animations are server side
04:37  ssbr: from what I can tell, the minecraft client-server protocol trusts the client way too much, even if most of the processing *is* done server side
04:37  ssbr: but yeah, Twisted is great for this
04:37  Varriount: ssbr: I have a friend whose been doing it in eventlet
04:37  ssbr: as long as you understand the way it works, anyway
04:37  Varriount: ^ I don't
04:37  ssbr: Varriount: nobody does, before they learn it
04:38  Varriount: :p
04:38  ssbr: the question is whether you're one of those guys that doesn't "get" programming, and will have a lot of difficulty learning something like Twisted
04:38  ssbr: but why don't you help your friend and use eventlet?
04:38  Varriount: I "get" programming
04:38  ssbr: better not to reinvent the wheel, again
04:38  Varriount: Actually, I am
04:38  Varriount: I'm still deciding what to do
04:38  ssbr: Er, so why were you asking about greenlet et al? I'm a bit confused
04:39  Varriount: Just looking at what's out there
04:39  ssbr: the big fish is Twisted.
04:39  Varriount: This is true
04:39  Varriount: But it's called twisted for a reason
04:39  teratorn: saml: something like this: paste.pocoo.org/show/303016/
04:39  bob2: sure, and the reason is that  the authors have an odd sense of humour
04:40  ssbr: Varriount: Maybe so. but that reason isn't that it's hard to grasp or difficult or messy to use.
04:40  Varriount: True
04:40  ssbr: Varriount: it's more likely a pun on UTP or something.
04:40  ssbr: s/pun on/reference to/
04:40  Varriount: I worked on a minecraft server using twisted (classic protocol) and it works pretty well
04:40  ssbr: Varriount: if you get the reactor pattern, and like it, you'll have no problems with Twisted
04:41  ssbr: If you don't like it, or don't get it, you might prefer to use something else. Especially since one of Twisted's biggest advantages over other frameworks is that it already has a bunch of stuff implemented, but all that stuff probably isn't actually an advantage in this case
04:42  Varriount: Is this a channel where, if I mention pypy or stackless, I'll be eaten alive by sharks and have my computer exploded?
04:42  ssbr: (in fact, apparently your friend has been doing it in eventlet, so eventlet has that advantage)
04:42  _habnabit: What's wrong with stackless?
04:42  ssbr: Varriount: No
04:42  _habnabit: Or pypy?
04:42  saml: teratorn: thanks.   this is what i'm doing http://paste.pocoo.org/show/303017/     this is html5 demo for File and FileReader API. I just wanted to write POST handler to inspect request object that browser sends when I have <input type="file"  multiple="multiple" />
04:42  _habnabit: I mean, stackless is kinda silly, but.
04:42  ssbr: Varriount: the worst people think of stackless is that it's pointless, given the stuff that you can do with CPython
04:42  Varriount: I've met some people who dislike them for being not in cpython
04:42  _habnabit: hurrr
04:42  ssbr: Varriount: and the worst that I've seen people throw at PyPy in this channel is that it compiles really slow
04:43  Varriount: True
04:43  ssbr: (and it does. christ, it takes forever)
04:43  Varriount: Pypy is actually quite interesting though
04:43  ssbr: 'course it is
04:43 * Varriount runs ssbr on pypy
04:43 * ssbr waits a few days for it to compile before he can process his next instruction
04:44  ssbr: if you want me to run faster, get me a computer with more than 512MB of RAM :(
04:44  Varriount: I have a compy with 8 gb of ram
04:44  Varriount: Core i7 processor
04:44  teratorn: saml: rpy's are kind of a toy, but they work, and make it easy for you to keep using 'twistd web' and all it's features, so rock on I guess :)
04:44  ssbr: Varriount: why 8 and not 9 or 12?
04:45  ssbr: i7 has triple-channel memory, seems those would be better numbers
04:45  Varriount: Er, windows refuses to recognize more
04:45  ssbr: Ew
04:45  Varriount: Not my choice to use windows
04:45  teratorn: saml: otoh, it probably wouldn't be hard to copy the 'web' twistd plugin and add features to it
04:45  ssbr: No, I meant ew at what windows does, not ew at windows
04:46  Varriount: I think it limits memory at least
04:46  ssbr: it shouldn't. But I've never run a machine with more than 6GB, so... I don't know enough to contradict what you say
04:46  Varriount: Also, I'm 16, and get 5 dollars every 2 weeks
04:46  ivan`: http://msdn.microsoft.com/en-us/library/aa366778%28VS.85%29.aspx
04:46  Varriount: So, not much money for computer parts
04:46  ssbr: Varriount: winter break is coming! get a jerb
04:47  monokrome: Varriount: Is your Windows 32bit?
04:47  Varriount: I have 4 other siblings
04:47  Varriount: 64 bit
04:47  Varriount: So it appears I can have more
04:47  ssbr: excellent, much more
04:48  ssbr: means my eventual upgrade to 12GB shouldn't come with any problems
04:48  ssbr: (I think that's the limit imposed by my desktop's motherboard)
04:48  Varriount: Actually, those window limits  are imposed by the os
04:49  Varriount: I know that ubuntu can address much more memory
04:49  ssbr: any limit lower than 2**64 is imposed by the OS
04:50  teratorn: ssbr: iirc the actual memory model doesn't use all 64 bits
04:50  teratorn: but enough that it doesn't matter
04:50  ssbr: teratorn: of the processor?
04:50  teratorn: right
04:50  teratorn: consult wikipedia!
04:51  ssbr: Oh. Well, in that case... anything lower than 2**k for however many k bits the processor uses for addressing
04:51  teratorn: actually, consult an Intel manual
04:51  Varriount: Tell me, when (and how/where) would I need 192 gb of ram, and how would I get it?
04:51  ssbr: can't you get those for free?
04:51  teratorn: sure
04:51  ssbr: Varriount: for a server, perhaps. You'd need a very special motherboard.
04:51  ssbr: (not a desktop motherboard, not even a gaming mobo)
04:51  teratorn: Varriount: dumpster diving
04:51  KirkMcDonald: That is more RAM that I, personally, have used in a single machine.
04:51  KirkMcDonald: s/that/than/
04:52  ssbr: KirkMcDonald: even counting virtual memory?
04:52  bob2: processor uses like 48bits
04:52  bob2: for addresses
04:52  KirkMcDonald: ssbr: Quite possibly.
04:52  bob2: oops, 48bit virtual, 40bit pyhysical
04:52  ssbr: what are the other 26 bits used for?
04:53  ssbr: errr
04:53  ssbr: 16*
04:53  ssbr: (derp math)
04:53  Varriount: Used for love
04:53  teratorn: stegonography
04:53  Varriount: Trinary?
04:53  ssbr: I'm thinking maybe they put the instruction in there, but I don't know anything about x86 instructions
04:54  ssbr: (other than that they use 2 addresses, so I suppose you'd have 32 bits room for the opcode)
04:54  bob2: ssbr: future expansion
04:54  Varriount: Trinary Python = ?
04:54  ssbr: bob2: lame
04:54  bob2: ssbr: though it seems it can't do 64bits of physical ram without changing the page table format
04:54  ssbr: Varriount: "trinary python"?
04:54  Varriount: Trinary logic
04:54  ssbr: bob2: error-checking, maybe?
04:54  Varriount: Running python
04:55  ssbr: Varriount: people rarely use actual trinary logic
04:55 --- meadowman_ is now known as meadowman
04:55  ssbr: but, it depends what trinary logic you want.
04:55  ssbr: some logics are easy (you can use arithmetic instead of the logical operators, and -inf, 0, and inf for False, Undetermined, and True)
04:56  ssbr: so instead of a and b you can use min(a, b)
04:56  Varriount: That's one concept I could never understand about computing. How 0's and 1's turn into a byte, and then a byte turns into, say, a character
04:56  Varriount: And how the processor understands it all
04:56  ssbr: Varriount: the processor takes in words rather than bytes, as I understand it.
04:56  KirkMcDonald: Varriount: Are you familiar with base 2?
04:57  bob2: processors don't know about characters
04:57  Varriount: Only broadly
04:57  ssbr: Varriount: so there are 64 data lines coming in somewhere, and 64 data lines coming out. Maybe multiple sets of these.
04:57  bob2: unless you count BCD
04:57  teratorn: Varriount: it's a physical machine
04:57  bob2: and ha ha ha bcd
04:57  ssbr: each data line can be "on" or "off"
04:57  KirkMcDonald: Varriount: 8 bits make a byte.
04:58  Varriount: Well, goodnight guys. I'll be sure to come here again.
04:58  ssbr: You can group bits ("0's and 1's") fairly easily in the hardware. You just plop a register somewhere.
04:59  ssbr: Goodnight
05:07  Louis11: I'm attempting to use pycurl to access a website and work with cookies. To access the content I need, I have to enable cookies. I am using COOKIEFILE and COOKIEJAR and the cookies are being set, however it's acting like nothing is being set (I still cant access the website)
05:07  Louis11: Is there anything special that needs to be done to ensure cookies are set?
05:09  bob2: I'd not bother with pycurl
05:09  bob2: unless you really need something special
05:09  bob2: cookie stuff is really easy with urllib2 (which is in the stdlib)
05:10  Louis11: can I fetch the html with urllib2?
05:13  bob2: of course
05:13  Louis11: Hm, would you happen to have any examples? The docs don't show how to use it. Also, this is a cookie from a third party site. Does that matter?
05:14  tos9: Louis11: The docs don't show how to use what? urllib2?
05:14  Louis11: ah i see HTTPCookieProcessor. I take it that this handles storage of the cookies?
05:14  Louis11: alright I think i got it. One more question: Does urllib2 follow redirects?
05:15  ZanQdo: does anyone know what is the equivalent to the bessel function in py?
05:15  ZanQdo: like j0(var)
05:15  tos9: ZanQdo: scipy/numpy.special module I think
05:16  tos9: scipy
05:16  ssbr: Louis11: sure
05:17  ZanQdo: I dont have that module.. lame
05:17  ssbr: I think you can tell it not to, if you don't want it to. Might have to do some sort of custom request handling thing.
05:17  tos9: ZanQdo: what language exactly has the bessel functions as builtins?
05:17  Louis11: hm. Alright one more (stupid) question: If a cookie is set on one fetch, will the cookie still be set during the same process? Like if another function tries to access that page?
05:17  ZanQdo: tos9: c++ in cmath
05:18  bob2: Louis11: wrong question
05:18  Louis11: hm?
05:18  bob2: Louis11: you configure urllib2 to use a particular cookiejar
05:18  bob2: Louis11: if you keep having it use that cookiejar, yes, else, no
05:18  Louis11: alright, yea I just found http.cookiejar
05:19  bob2: oh, python3
05:19  bob2: please mention that in your questions in future
05:19  tos9: ZanQdo: Wow... Really... Well yeah, get scipy
05:19  ZanQdo: http://www.mail-archive.com/numpy-discussion@scipy.org/msg22574.html
05:20  ZanQdo: tos9: maybe that's it in numpy?
05:20  tos9: ZanQdo: Did you read the post? That's not it, it's a modified bessel function. j0 is in scipy.special
05:21  ZanQdo: yah Im  reading
05:21  ZanQdo: but thats not a standard module
05:21  ZanQdo: I need to distruute this
05:22  tos9: ZanQdo: What's a "standard" module? stdlib? Neither is numpy. And yes, you can distribute it. With your dependencies. Or use whatever you're using to distribute it, which will have some way to specify dependencies
05:22 --- omakase_ is now known as omakase
05:22  tos9: (The second way is what you want here)
05:22  blood: hey guys, is their a simpler way I can write this : BBDgiX27
05:22  blood: oops
05:22  blood: hey guys, is their a simpler way I can write this : http://pastebin.com/BBDgiX27
05:22  infobob: http://paste.pound-python.org/show/391/ (repasted for blood)
05:23  blood: the current code works, i'm just wondering if I can do it more efficient
05:23  tos9: blood: empty paste, so the answer would be no that's probably the easiest way :)
05:23  blood: haha sorry, let me fix
05:23  bob2: blood: change your password
05:23  blood: what password?
05:24  blood: http://pastebin.com/BBDgiXZ7
05:24  infobob: http://paste.pound-python.org/show/392/ (repasted for blood)
05:24  Louis11: minus the indention, is this correct: http://pastebin.com/DDZGn2Ch
05:24  infobob: http://paste.pound-python.org/show/393/ (repasted for Louis11)
05:24  Louis11: It's still acting like the cookies aren't being set
05:25  Louis11: gives a 503 error. If I turn off cookies in my browser, I also get a 503 error
05:25  ssbr: blood: looks pretty simple to me
05:25  ssbr: if there's a simpler way, it is library-specific
05:25  blood: ok great, thanks for input
05:31  laurus: What does this mean: "PyGTK will be phased out with the transition to GTK+ version 3. Instead, GObject introspection will be used to generate bindings for python and other languages on the fly."
05:35  ZanQdo: tos9: apparently scipy is not py3 compatible
05:36  charas: Apparently no help from #django so here I am. When I try "python manage.py dbshell" it gives me error "You appear not to have the 'sqlite3' program installed or on your path."
05:36  _habnabit: charas, what apart of that is confusing you?
05:36  tos9: ZanQdo: indeed it isn't. Why are you using python3? I'm sure you can find it in some other module, or write your own, or a cext or something if you have some c code if you really need py3
05:36  charas: _habnabit, I already have sqlite3 installed
05:36  charas: _habnabit, So why this error
05:37  _habnabit: charas, what's `which sqlite3` ?
05:37  ZanQdo: tos9: sdly Im forced to use py3
05:37  ZanQdo: dont ask why unless you promess not to make a big fuzz
05:37  _habnabit: ZanQdo, who's forcing you?
05:37  ZanQdo: _habnabit: blender
05:38  _habnabit: ZanQdo, haaaahaha.
05:38  ssbr: hahahaha
05:38  _habnabit: ZanQdo, I'm sorry.
05:38  charas: _habnabit, which sqlite3 retrieves nothing
05:38  ssbr: man, the jerks responsible for that hang around here sometimes :(
05:38  _habnabit: charas, well, there you go.
05:38  ZanQdo: :p
05:38  ssbr: it was such a bad move
05:38  ivan`: man, what did ideasman do now?
05:38  ivan`: I think it would be better if he had fewer ideas
05:39  ZanQdo: ivan`: hahaha
05:39  ivan`: all you need to do is make pypy run on python3
05:39  ivan`: might be a bit slow, though
05:40  ivan`: er I mean do some RPC thing to talk to a python 2 instance that can import scipy
05:42  ssbr: does anyone else ever open up a project they were working on a long time ago, and do $vcs status and notice there are some uncommitted changes? :(
05:42 --- squishy is now known as SquishyNotHere
05:42  ssbr: the me from 5 months ago was a lazy jerk who should have committed his changes
05:44  primepie: anyone knows a  library to summarize/paraphrase english text?
05:44  charas: _habnabit, Yeah I had to install it. I was under the impression sqlite3 comes with python/django already
05:44  _habnabit: charas, the sqlite3 /library/, yes.
05:44  _habnabit: charas, but not the sqlite3 /binary/.
05:44  charas: Ahh TIL
05:46 --- SquishyNotHere is now known as squishy
05:47  messalina99: q
05:47  _habnabit: w
05:56  fmoo: well that's a new error...
05:56  fmoo: "TypeError: argument 1 must be impossible<bad format char>, not classobj"
05:57  gusg: is the Python Windows distribution binary compiled with MinGW or MSVC? Does it matter which compiler I use for modules with extensions?
05:59  ssbr: gusg: MSVC, and I don't know.
06:00  bob2: pretty sure it does
06:00  bob2: and it needs to be the right version of it too
06:00  bob2: fmoo: impressive
06:00  bob2: you shouldn't have many classobjs lying around in 2010 though
06:01  RonHelp: Is there an already prebuilt function either via module or user made for determining the different addresses of a user comming from the irc protocal? (So I don't have to reinvent the wheel)
06:01  hariom: Is there anyway to include Numpy support on GAE?
06:02  dash: hariom: probably not, but ask #appengine
06:03  hariom: dash, thanks. asking in appengine
06:08 --- Xerion_ is now known as Xerion
06:08  hemanth: i have a tuple of labels that needs to be extract from a text read to a list, which is the most appropriate way of doing it?
06:09  hemanth: "in" ?
06:09  tos9: Don't understand the question.
06:09  tos9: What's a label?
06:10  Boardinary: Hi, I don't mean to ask a dumb question because I've searched and attempted for quite a bit, but how do I convert a list of stings to a list of floating point values?
06:10  hemanth: tos9, label here is just strings, i need to search a file from the tuple and update a set if found
06:11  tos9: Boardinary: [float(s) for s in s_list]
06:11  Boardinary: tos, thanks I think I may have tried that.  but maybe I had a syntax error so let me try again
06:12  tos9: hemanth: still don't completely understand. You have a tuple of strings and you want to know if they're in a file?
06:12  Boardinary: tos9, I was using a for loop so that is where I went wrong
06:13  hemanth: tos9, yup need to extract the exact string if found, just like grep
06:13  tos9: What exact string? You have the exact string.
06:14  tos9: You mean the line it's on?
06:16  hemanth: tos9, see for ex: if i have file with contents "Mary had a little lamb" and i'm searching for ('lamb','big','little') the code must print lamb and little and in someother file there might be only the words big and lamb, then the code must print big and lamb but not the whole line
06:17  tos9: hemanth: oh. Sure. (l for l in labels if l in the_file)
06:18  jzacsh: tos9: you can do the_file? or its a nested for..in ? (for line in open(the_file))
06:18  tos9: jzacsh: no, you can't. I'm assuming he has it read into a string.
06:18  jzacsh: aah
06:19  tos9: So (l for l in labels if l in the_file.read()) is what I probably should have made clear I guess.
06:19  hemanth: tos9, readlines() ?
06:19  hemanth: ha string ok
06:20  tos9: hemanth: yeah, you can iterate over the files if you really want to, if they're really big or whatever... it's not as trivial as that though, you'd want to write a generator probably...
06:21  Boardinary: Okay I am still having problems converting a list of strings to a list of floats.  If you would like to help, have a look at http://bpaste.net/show/12177/
06:21  hemanth: tos9,but how do i print from that generator object
06:21  tos9: hemanth: which generator object?
06:21  tos9: Oh the genexp I gave you?
06:22  hemanth: (l for l in labels if l in the_file.read()) returns <generator object <genexpr> >
06:22  hemanth: tos9, yup
06:22  tos9: Yes it does. If you want to print it print list(gexp)
06:23  jzacsh: Boardinary: i believe that should be `n for float(n) ...`
06:23 * jzacsh could very well be wrong
06:23  hemanth: tos9, kool, thanks :)
06:24  tos9: Boardinary: l = [[0]]
06:24  tos9: What is the first element of that list?
06:24  Boardinary: tos9, what do you mean?
06:24  tos9: That list there, what is it's first element?
06:24  tos9: its
06:24  Boardinary: 1360
06:25  tos9: No, no, the one I just made. But OK, fine, yours. It is not 1360
06:25  Boardinary: tos9,  ah ok, so what is it?
06:25  Boardinary: tos9, is there an extra set of brakets?
06:26  tos9: Boardinary: well, try it. Spoiler: it's ['1360', '4800', '4880', '4880', '2330', '2330']     (i.e. yes)
06:26  Boardinary: tos9,  thinking how to get rid of extra set......
06:27  tos9: Boardinary: I've told you :). If that's the first element, which list do you want to be iterating over in your list comprehension?
06:27  tos9: Bleh that came out unclear I think.
06:28  tos9: Anyways, you want [float(n) for n in vib_strings[0]]
06:28  Boardinary: tos9, the thing is, I need to import a varying amount of values from a config file that the user specifies.  This could change depending on what the user wants to calculate in my program.  So that is why I have this convoluted way of gettting values.
06:28  bobthemilkman: I'm trying to speed up my code. I've already run it through cython and icc -fast -parallel.  However, I think there should be some algorithm-level performance tweaks aI can do.  Profile: http://paste.pound-python.org/show/394/, code: http://paste.pound-python.org/show/395/
06:28  bobthemilkman: (no comma in that URL, obviously)
06:28  tos9: Boardinary: ah, so you may have more than one list in there then
06:29  Boardinary: tos9, vib_dump = 123,254,678 etc......
06:29  Boardinary: vib_list = 1360,4800,4880,4880,2330,2330
06:29  Boardinary: that is what I have in the config file
06:29  jzacsh: bobthemilkman: do you mind summarizing what hte script does?
06:29  Boardinary: the user can add or subtract as many values as he wants
06:30  tos9: Boardinary: so an arbitrary lengthed list? That's fine. What I showed you will work no matter how long the list.
06:30  bobthemilkman: jzacsh: It's essentially just a evolutionary algorithm that places a triangle on the screen. It creates a list of triangles, constructs an image from the triangles, makes a set of 100 modifications to the triangle image, picks the best one, then repeats.
06:31  tos9: bobthemilkman: ech, never use a bare except
06:31  bobthemilkman: tos9: You mean on line 37?
06:32  tos9: and 150, and 177, and 186 ...
06:32  Boardinary: tos9, so the following should work? l = [[0]]
06:32  bobthemilkman: I suppose I could have put index or file errors on those excepts. :S
06:32  jzacsh: tos9: so shouldn't be using some kind of catch-all ?  -- or doe `else`s work here?
06:33  tos9: s/could/should
06:33  tos9: jzacsh: come again?
06:33  jzacsh: ah
06:33  tos9: Boardinary: work for what? No sorry ignore that. I meant that [float(n) for n in vib_dump[0]] should work
06:33  tos9: or vib_strings whatever your var is called
06:34  jzacsh: tos9: shouldn't use a bare except, why? because you *should* be trying to anticipate what cna go wrong? bad practice to leave a catch-all ("in case *anything* goes wrong, do:") ?
06:34  Boardinary: tos9, I get [1,0] as the output :)
06:35  Boardinary: I mean [1.0]
06:35  tos9: jzacsh: yes. You should always only be catching exceptions that you mean to be catching and no more. Otherwise you're silencing exceptions that have nothing to do with what you mean / are expecting.
06:35  bobthemilkman: jzacsh: It's because the error I expect to get might not be the error I do get. Bare excepts make it nearly impossible to locate bugs, sometimes.
06:36  Boardinary: tos9, its because vib_dump is not really a list, but a string equal to the following:  123,345,523 etc
06:36  jzacsh: tos9: makes perfect sense. so is there a general solution when you're shipping a script because you don't want users to get trace_backs and the like?.  bobthemilkman sorry if i'm wayyy stearing off topic to get your help :P
06:36  tos9: Boardinary: Yeah.. then vib_string.. whatever your list of strings is
06:36  hemanth: tos9, the scope of the variables with in an genexp is limited to () is it? Cos i have defined labels=('hello','world') and then using it in (l for l in labels if l in the_file) it says undefined variable labels...
06:37  jzacsh: s/stear/steer/
06:37  bobthemilkman: For example, I might be expecting my list iteration to go past the final index, and then do something else.  If say, I get a different error, about some filesystem error or something, my code then executes the area that's meant to be for if I have the index out of bounds error.
06:37  bobthemilkman: So in this case, my code will be executing a portion of the code that I don't expect it to be executing, making it very difficult to track down bugs.
06:38  jzacsh: bobthemilkman: yeah, definitely makes sense. you're putting up a huge blinder.
06:38  tos9: jzacsh: sure. You handle whatever you can reasonably handle in your program. Anything else, well, the exception doesn't really matter, since your program is probably gonna crash
06:38  dash: jzacsh: why don't you want users to get tracebacks?
06:38  tos9: So yeah ^
06:38  Boardinary: tos9, you are a genius.  How the heck does that syntax work?  And it does it for any size list.  that is cool.
06:39  jzacsh: dash: well i guess if its a command line (script) - -the user won't be the type to cry over a trace back printing out -- but, i think it'd be nice to leave that stuff for the person doing the debugging (the author)
06:39  tos9: Boardinary: I'm not, list comprehensions are killer though :). You should check out the docs if you haven't seen them before, they're pretty ubiquitous.
06:39  dash: jzacsh: how can you debug it if the user can't give you a good bug report? :)
06:40  jzacsh: dash: lol, definitely a lot easier when tracebacks come out, but -- its definitely possible to find other solutions, i'm sure you can agree: logging tracebacks silently -- allowing the user to switch on a debug param -- idk, a lot of ways
06:41  bobthemilkman: jzacsh: I'm gonna leave the bare excepts on all except line 34. After all, those excepts essentially are just there to tell me where the error ocurred.
06:41  bobthemilkman: Which, I suppose I don't even need the try/except at all, in that case.
06:41  dash: jzacsh: mmm, reproducing bugs is often the hard part :)
06:41  jzacsh: :)
06:42  bobthemilkman: I don't see any problematic programming practices on lines 177 and 186.
06:42  bobthemilkman: And line 150 is doing exactly what I want it to do. (Do X if *anything* goes wrong)
06:43 * jzacsh doesn't like this pastebin -- line numbers are useless
06:43  tos9: bobthemilkman: there are. Your excepts are pointless.
06:43  bobthemilkman: The print statements are useful for me.
06:43  tos9: And as for 150, how bout a SyntaxError? An IndentError?
06:43  sroy2: Anyone have any advice: I want to take a string of unicode (%u1234%u5678...) which just happens to be all chinese characters, and return a string in english... I have a feeling that it isn't going to be easy.
06:43  bobthemilkman: It tells me exactly where the problem is, instead of what line the problem ocurred on.
06:43  Boardinary: tos9, I must have read that section a dozen times, but I did not know about the list[0] feature.  Does that indicate all values in list?
06:44  bobthemilkman: And also I might want the program to continue running if there's an error there.
06:44  dash: Boardinary: no.
06:44  tos9: Boardinary: No! That's just retrieving the first element in a list! Here you have a nested list, it's the same as if you had [[1,2], [3,4]]
06:44  disappearedng_: I am dying to find out the solution to this qn from my interview: You get k arrays of size n sorted integers, How do you effeciently merge them using divide and conquer ?
06:44  bobthemilkman: sroy2: def returnEnglish(chinesein = u''): return "This is a string in English"
06:44  Boardinary: tos9, alright I understand now.... now I feel silly
06:45  tos9: bobthemilkman: that's what exceptions are for
06:45  sroy2: bobthemilkman: seriously?
06:45  bobthemilkman: sroy2: Perhaps you should have been more specific in the description of your problem.
06:45  bobthemilkman: It takes a unicode string, and then returns a string in English. I'm not sure what more you wanted.
06:46  sroy2: bobthemilkman: lets give it a shot :)
06:46  bobthemilkman: Although, you might want to do return u"this is a string in English" instead, so that you get a unicode instead of a string.
06:46  sroy2: lol
06:46  hemanth: tos9, correct way http://codepad.org/Iqy298k6 right?
06:46  sroy2: *sigh
06:48  bobthemilkman: tos9: Somehow I don't feel any need to change line 150.
06:48  sroy2: So... more specific - I have a a unicode string I believe to be shellcode embedded in a javascript program. I went to look at the string and all the unicode characters turned out to be chinese... I was wondering what to do next and the first though was translate to english and see if they make sense.
06:48  tos9: hemanth: if you just need a list you might as well just use a list comprehension (so [l for l in labels if l in data]   )
06:48  hemanth: tos9, kool :)
06:48  jzacsh: hemanth: why two (( around your for...in?
06:49  jyf1987: hey, how to know the imported module in a .py file? i mean i want to get the result from programming not by my eye
06:49  tos9: Yeah, you actually don't need them there, genexp's usually only need to be paren'ed when they're on their lonesome
06:49  hemanth: jzacsh, first it was a genexp which was converted to list so
06:49  bobthemilkman: tos9: If there's an error that I don't expect, the traceback tells me what the error was.  I don't understand why I'd want anything else there.
06:49  jzacsh: ah, okay.
06:49  jzacsh: just curious
06:49  hemanth: jzacsh, now using just [] list comprehension
06:50  jyf1987: who can help answering the question?
06:50  hemanth: that was a type cast
06:50  tos9: bobthemilkman: How about an IndentError? Do you want to catch those?
06:50  bobthemilkman: I want it to catch every error.
06:51  bobthemilkman: I can think of about 15 different errors that could get thrown there. And I want it to catch all of those, as well as any errors that I can't foresee.
06:52  tos9: That sounds like poor design
06:52  tos9: 15 possible errors at that spot?
06:53  bobthemilkman: the 'dump' file might not exist. It might not have appropriate json data. it might not haev a list of 3 objects. the settable() method might cause errors if the 3rd object in the list isn't appropriately formatted.
06:54  jzacsh: bobthemilkman: maybe you should just wrap the things you know about in try/except
06:54  jzacsh: and let tracebacks print for whatever you hvaen't thought of.
06:54  jzacsh: bobthemilkman: wouldn't that be, essentially the same?
06:55  bobthemilkman: But what I want is, 'But all I want it, "Try to load the saved data. If you fail with that, just start with default values.""
06:55  bobthemilkman: Woops
06:55  bobthemilkman: But all I want is, "Try to load the saved data. If you fail with that, just start with default values."
06:55  Boardinary: alright, I have to say this chat room is the best one in existence, thanks for all of the help los9, peace
06:57  jzacsh: bobthemilkman: you might want to leave the load() function to be more simple, then
06:57  jzacsh: load() else default_params
06:57  jzacsh: in main
06:58  bobthemilkman: I don't see how that's very different from how it's currently written.
06:59  bobthemilkman: In both scenarios it's, "Try to load. If loading fails, use default values."
06:59  jzacsh: it seems a lot less messy. less decision making in load().
07:00  jzacsh: bobthemilkman: anyway, i'm just pitching in for fun -- not sure what the criticism is on the script at the moment (don't recall)
07:00  bobthemilkman: I want to increase the speed of the program.
07:01  bobthemilkman: There were several bare excepts.  I corrected the one that was actually a problem (well, a possible future problem), but some people seem to think I should change the rest, as well.
07:03  Withoutaname: what's the function that delays messages called?
07:03  Withoutaname: print messages, I mean
07:04  bobthemilkman: So I'd like to speed up this code. It's an evolutionary algorithm that restructures the mona lisa as a series of triangles. code: http://paste.pound-python.org/show/396/ profile: http://paste.pound-python.org/show/394/
07:05  bobthemilkman: I'm already running it through cython and icc -fast -parallel, but I think the icc optimizer is getting caught up on a lot of cython artifacts, such as the for i in xrange() statements, etc.
07:09  ssbr: bobthemilkman: print the profile data in a useful order (probably by cumtime, or by tottime)
07:09  Withoutaname: hello?
07:09  Withoutaname: does python have a time function?
07:09  ssbr: it's hard to optimize code when it's difficult to read what's slowest
07:09  ssbr: Withoutaname: what's a time function?
07:10  Withoutaname: okay, how do you delay "print" messages?
07:10 * jzacsh was just resorting the table on cutime
07:10  Withoutaname: like, I want to offset it by 2 secs
07:10  killadaninja: How many variables are there of 1-999 in every combination
07:10  Withoutaname: ssbr, I need help
07:10  killadaninja: to append them to 10 words
07:11  jzacsh: Withoutaname: http://docs.python.org/library/time.html#time.sleep
07:11  ssbr: Withoutaname: well, is there anything you want to do in the intervening 2 seconds?
07:11  bobthemilkman: ssbr: Sec, the data's a bit strange so I'm rerunning it.
07:11  Withoutaname: thanks
07:11  Jerub: killadaninja: are you basically asking for [(x,y,z) for x in range(100) for y in range(100) for z in range(100)]
07:11  Withoutaname: originally act as if an error had come up if someone typed something that exceeded a certain length
07:12  ssbr: Jerub: don't you mean itertools.product(xrange(100), repeat=3) ?
07:12  killadaninja: Jerub lets say I have a word
07:12  Jerub: ssbr: certainly not
07:12  killadaninja: dog
07:12  ssbr: Jerub: because you suck? :'(
07:12  Withoutaname: like, if the raw input is a string exceeding length ten, a delay would be caused
07:12  killadaninja: now I want to append 1-999 to dog
07:12  killadaninja: so dog1
07:12  killadaninja: dog2
07:12  killadaninja: dog3
07:12  killadaninja: and so forth
07:12  Jerub: ssbr: oh, that does work correctly.
07:13  Jerub: i thought you were just dumb.
07:13  bobthemilkman: http://paste.pound-python.org/show/397/
07:13  ssbr: Well, I'm that too
07:14  ssbr: Withoutaname: so it looks like the most effective optimization might be to get rid of all that copying
07:14  bobthemilkman: It looks like deepcopy and Image.py are the main issues.
07:14  ssbr: although it depends on how the things you're copying are being used.
07:15  ssbr: using a persistent data structure may be necessary to get good performance all around, if you mutate things a lot
07:15  bobthemilkman: Well, what I have is a triimage object, and then I want to make 100 copies of it, and then modify each copy, and then compare their results
07:15  killadaninja: ssbr how would I append 1-999 to the end of every word on a new line
07:15  killadaninja: SO my list is , dog, hello, mum
07:16  jzacsh: bobthemilkman: can you modify copy, store result, overwrite copy?
07:16  Withoutaname: ssbr, you mean bobthemilkman right?
07:16  jzacsh: or is the copy the result itself?
07:16  killadaninja: I want the list to turn into dog1 dog2 dog3 dog999, hello1 hello2 hello3 hello 999
07:16  ssbr: [s + str(i) for i, s in enumerate(L)]
07:16  bobthemilkman: jzacsh: No. I need to keep the original, in case it produces better data than the next mutation
07:17  jzacsh: bobthemilkman: i wonder if it'd be more efficient to just regenerate the one who's results were best?
07:17  ssbr: Withoutaname: yes
07:17  bobthemilkman: Hmmm. That's an interesting way of approaching the problem.
07:17  bobthemilkman: But then I'd have to do a lot of saving/setting the PRNG's state. (not that that's impossible)
07:18  ajmilazzo: if a package has no __all__, can i use 'from package import foo' to import from the package?
07:18  jzacsh: maybe i need to go google how this output is read -- but... you're looking at 'cumtime'?
07:18 * ssbr like the persistent data structure solution
07:18  papna: ajmilazzo: Sure.
07:18  ajmilazzo: papna: ok thnx
07:19  bobthemilkman: persistent data structure will require a major modification to the program. Currently the triimage object is a list of triangle objects, of undefined length.
07:19  bobthemilkman: I suppose I could put in a maximum number of triangle objects, but I don't really like that idea.
07:20  tos9: killadaninja: In that case, ("%s%s" % (word, num) for word in w for num in range(1, 999))
07:21  bobthemilkman: ssbr: Forgive me for not being completely familiar with all of these CS terms, but by persistent data structure, you mean replacing the list with a tuple, right?
07:22  ssbr: bob2: no, I mean replacing everything you mutate with immutable objects with fast operations that return modified copies
07:22  bobthemilkman: Okay, how do I do that?
07:22  ssbr: tuples aren't that, because they have O(n) append/prepend
07:23  ssbr: a linked list, on the other hand, has O(1) prepend
07:23  ssbr: and now that I've looked into it, you probably don't. at least not in Python
07:23  ssbr: (if you switched to Clojure, on the other hand... ;)
07:25  tos9: How bout collections.deque...
07:25  Rhamphoryncus: killadaninja: are you looking for itertools.product()?
07:26  kerio: hi all
07:28  killadaninja: Rhamphoryncus
07:29  killadaninja: I just want to append 1-999 to the end of every word on a new line
07:29  killadaninja: So the word dog would become 999 instances
07:29  killadaninja: on new lines
07:30  bobthemilkman: ssbr: Oh, I think I understand
07:30  Rhamphoryncus: oops, itertools.product is one.  It only takes one sequence
07:31  bobthemilkman: Instead of list[i].mutate(), instead of list.append(list[-1].mutate())
07:31  papna: itertools.product takes an iterable.
07:31  kerio: iterableS
07:32  Rhamphoryncus: doh yeah, I was right the first time
07:33  Rhamphoryncus: killadaninja: so you can do a nested for loop, or even a nested listcomp or genexp, but itertools.product() may be the most understandable way
07:33  killadaninja: here you go
07:33  killadaninja: http://pastebin.com/TiisL5zP
07:33  infobob: http://paste.pound-python.org/show/398/ (repasted for killadaninja)
07:34  tos9: killadaninja: I gave you a genexp above, did you catch it?
07:34  Rhamphoryncus: killadaninja: try list(itertools.product(['Dog', 'Hello', 'Mum'], range(4)))
07:35  killadaninja: Rhamphoryncus, is there away without listing the words in the file
07:35  killadaninja: So every word on a new line gets appended
07:37  Rhamphoryncus: killadaninja: you can read it in an strip off the linefeeds, then you'll have a list
--- Log closed Fri Dec 10 07:41:35 2010
--- Log opened Fri Dec 10 07:47:01 2010
07:47 --- Users 695 nicks [0 ops, 0 halfops, 0 voices, 695 normal]
07:48 --- Channel #python was synced in 96 seconds
07:52  killadaninja: Okay thanks for your help all Ill have alook
08:03  gusg: I am trying to install mlabwrap under Windows and distutil's is trying to use MinGW to compile the extensions. How could I force it to use MSVC? I tried "--compiler=MSVC"  but that was not correct
08:41  fluter: hi, is django easy to learn?
08:41  shylent: yeah, just read the tutorial
08:42  shylent: its easy to learm but not particularly easy to extend at times
08:42  fluter: shylent, for rapid web development, is django a good choice?
08:42  shylent: fluter: not the worst choice most certainly, but there are also other choices
08:43  fluter: shylent, what is the others?
08:43  shylent: flask
08:43  shylent: if you start with django, just make sure that django isn't *all* you know about python frameworks
08:43  shylent: otherwise, its perfectly fine
08:44  fluter: shylent, I only know django :)
08:44  shylent: fluter: you heard me
08:44  shylent: </inb4 foaming-at-the-mouth anti-django fanatics>
08:44  fluter: shylent, :) what is that mean?
08:45  shylent: no, nothing really
08:45  fluter: shylent, does falsk suppport databse?
08:46  shylent: you'd have to use an external tool for that, like sqlalchemy
08:47  fluter: shylent, ok, so I am going to write a workflow site, to make jobs automation, to save people's time
08:47  fluter: and improve efficiency
08:47  fluter: I am not sure wich framework to use,
08:49  shylent: I dont think it really matters. You might as well use django
08:49  shylent: thing is, if you want something *done* relatively well and quickly, you have to pick whatever you know best
08:49  fluter: shylent, looks like flask is more tiny and easier than django, is it?
08:50  shylent: fluter: easier?
08:50  fluter: shylent, I know niether the best, I got to start from zero :)
08:50  shylent: if only I knew your definition of 'easy'
08:50  fluter: shylent, yes,
08:50  shylent: easy to read the documentation for?
08:50  fluter: shylent, hm, I mean requires less time to get going :)
08:51  MostAwesomeDude: Django's great if you're using it for what it was designed to do.
08:51  shylent: dunno, each took me about half an hour to 'get going'
08:51  fluter: shylent, to implement the same function, which one use less code, and less knowledge
08:51  fluter: shylent, only have a hour
08:51  fluter: ?
08:51  fluter: MostAwesomeDude, hi, nice to see you again,
08:51  fluter: MostAwesomeDude, so what is django desinged to do?
08:51  MostAwesomeDude: fluter: I never really left. :3
08:51  shylent: if you follow the tutorials/documentation neither will give you any trouble, I assure you
08:52  MostAwesomeDude: fluter: Big amounts of content, high load, etc.
08:52  shylent: MostAwesomeDude: really?
08:52  shylent: thats news to me
08:52  fluter: shylent, but I got to write real app, not some simple program in the tutorials,
08:52  MostAwesomeDude: shylent: The Washington Post is one of the biggest Django users out there.
08:53  shylent: MostAwesomeDude: but it doesnt mean that you must use it for a newspaper site only, or something
08:53  shylent: fluter: in an hour?
08:53  shylent: fluter: what are you doing here on IRC then?
08:53  fluter: shylent, maybe the cycle is one month,
08:53  MostAwesomeDude: shylent: No, but a large part of Django's "fun" is that it it difficult to make it do things for which it was not designed.
08:53  fluter: shylent, Im seek advices :)
08:54  shylent: MostAwesomeDude: so if I am not running a newspaper site, I probably shouldnt be using django, right? is that what you are implying?
08:54  fluter: MostAwesomeDude, like what things is not it designed for?
08:54  MostAwesomeDude: Well, the last two projects I've used Django on were a parallel computation framework with Django for a web frontend, and a KVM manager with a Django frontend.
08:55  MostAwesomeDude: In both cases, getting Django to obey our rather unique databasing needs was a challenge. We've written a handful of apps just for overcoming missing or busted stuff in Django.
08:55  fluter: MostAwesomeDude, I also need the web intract with command line tools,
08:55  MostAwesomeDude: For example, Django doesn't ship with a worthwhile admin tool.
08:56  MostAwesomeDude: I'm biased though; being paid to write Django apps means that I have a lot more reason to hate it. :3
08:56  fluter: MostAwesomeDude, so you write a own admin tool?
08:56 --- dengar is now known as jgelens
08:56  fluter: MostAwesomeDude, thats cool
08:56  MostAwesomeDude: fluter: Yeah, we wrote a small chunk of admin tool that does what we want.
08:56  shylent: MostAwesomeDude: well, so you are saying that you have a weird schema / database interaction pattern and you've had to write some custom code? Sounds perfectly valid to me
08:56  MostAwesomeDude: We also wrote a non-sucky row-level permissions library, etc.
08:56  fluter: MostAwesomeDude, how is flask?
08:57  MostAwesomeDude: fluter: Fun but low-level. Be prepared to write lots of custom code.
08:57  fluter: MostAwesomeDude, I see, so with flask need to write more code than django?
08:57  shylent: fluter: I think the best thing for you would be to try both (at least on the tutorial level) and see whats best *for you*
08:57  fluter: so I guess django is quicker than falsk
08:58  MostAwesomeDude: fluter: Strangely enough, it depends on your needs, *your* code, and the amount of time you want to put in.
08:58  fluter: shylent, I am not sure I have enough time to try both, since I got to let it working in about 1month
08:58  MostAwesomeDude: I think Django needs a tiny bit more boilerplate, but it's definitely a matter of personal experience.
08:58  shylent: fluter: you could've done both tutorials already instead of making vague statements here
08:58  MostAwesomeDude: shylent: For example, http://pypi.python.org/pypi/django-object-permissions/1.0 is not part of Django.
08:58  MostAwesomeDude: shylent++
08:58  Cromulent: fluter: that's plently of time - you can get up to speed with django in 2 - 3 days max
08:59  MostAwesomeDude: Go try each one out and figure out which one you like.
08:59  shylent: 'more fast', 'less code' - what kind of technical talk is this? :S
08:59  anykey: As with everything, there's no silver bullet, and it all hinges on the actual use case. "best fit" or somesuch.
09:00  fluter: yeah, no silver bullet, -- the man-moon myth
09:00 * anykey is using Django for a site right now, and it seems it's the thing it's been designed for.
09:00  fluter: shylent, it is my bad english :)
09:00  fluter: anykey, so what is the thing? could you be detail?
09:01  shylent: well, django is difficult to extend, yes, especially the database bits are notoriously convoluted
09:01  anykey: Uh, a groupware kind of thing
09:01  shylent: I remember having lots of pain with that kind of thing
09:01  fluter: Cromulent, I see the django book is quite long
09:01  Cromulent: fluter: the docs on the website are more than enough
09:02  anykey: mostly managing data and sharing information between users
09:02  fluter: Cromulent, right? do you have any good recommended?
09:02  Cromulent: fluter: if you can already program you'll be fine - I didn't really know python when I started with django but picked both up at the same time with no issue
09:02  Cromulent: as long as you know a language like C or Java or Objective-C you'll be fine
09:02  fluter: Cromulent, I know a little with python, but no knowledge with django
09:04  fluter: ok, /me going to tutorials on django and flask
09:04  Cromulent: fluter: http://docs.djangoproject.com/en/1.2/intro/tutorial01/ start here - when you have read all 4 parts you'll know enough to just be able to read the sections of this site that you require to solve your current problem: http://docs.djangoproject.com/en/1.2/
09:05  fluter: Cromulent, ok, thanks much
09:07  anykey: Most approaches effectively are tradeoffs. Will I warp the framework to do my bidding or will I warp my antecedents to fit the framework? It is there where the actual ability of the framework to provide a best fit is decided. That's why different frameworks exist :-)
09:09  ssbr: Actually, mostly different frameworks exist because humans are particularly prone to NIH. The temptation to rewrite something because you don't understand it is strong.
09:09  anykey: based on experience, executives don't really like it when you tell them "I need more time to decide that sort of thing", but in an ideal world, everyone can make an informed decision given enough time to get to know their way around, playing with different things is essential.
09:10  ssbr: There's also the thing where people decide they need a C# version of some Python library, or a Python version of some Ruby library, etc.
09:10  anykey: ssbr: yeah, that's the other reason.
09:10  ssbr: they're both dumb reasons
09:10  ssbr: I remember seeing a Ruby version of Scipy. it's dead now. All the ruby folks that want that sort of thing just suffer through learning/writing Python.
09:11  anykey: ssbr: making something new because everything else doesn't fit is a perfectly valid reason if everything else *does* not fit indeed.
09:11  kosh: there are a lot of reinvented frameworks which is one reason that web security is so bad
09:12  ssbr: anykey: it's a valid reason only if the cost tradeoff makes sense
09:12  ssbr: anykey: but because of Hofstadter's Law, people never analyze the costs correctly, and overestimate the ease with which they can reinvent the wheel
09:12  kosh: every new framework decides that a lot of stuff was needless complexity but was there for security reasons
09:12  anykey: yes, I've seen it happen.
09:12  kosh: and it takes years to fix the security issues again and again
09:13 --- squishy is now known as SquishyNotHere
09:14  ssbr: It's surprisingly easy, most of the time, to reuse code while doing something that seems incompatible with the tools you've been given.
09:14  kosh: and many frameworks never fix the security issues
09:14  anykey: I also have seen cases where it was purely a matter of pride to the persons involved just to shoehorn in an "own" Framework where software reuse would have been a real time saver.
09:14  anykey: that's a dumb reason.
09:14  ssbr: anykey: I've never seen that, but I've never dealt with corporate dev teams
09:15  kosh: ssbr: I certainly do a wide range of things with zope and all the extra stuff it can do almost never gets in the way
09:15  ssbr: it sounds like something that mostly lives there
09:15  ssbr: kosh: right, but zope is quite flexible
09:15  ssbr: in fact, extremely flexible.
09:15  anykey: ssbr: people will always have people's weaknesses :-) but you are right.
09:15  kosh: ssbr: many people think it is far less flexible then it is
09:16  ssbr: kosh: no idea why they'd think that. anyone can see that it strives to be hyper-configurable
09:16  ssbr: and the stuff built for zope works even in the strangest configurations -- like if you set up pyramid the right way, you can use Zope components. That's just weird (and great)
09:16  ssbr: that's something Django hasn't done right, at least so far.
09:16  ssbr: (nor any other web framework, for that matter)
09:18 --- SquishyNotHere is now known as squishy
09:19  kosh: ssbr: can even use it with sqlalchemy and a bunch of others stuff, transactions persist across db boundaries if the db supports it
09:19  kosh: ssbr: for instance if you write something to the zodb and postgres, and oracle in the same transaction if any fails all will abort
09:19  kosh: ssbr: that doesn't entire work on mysql though because some of the mysql table types don't support that
09:20  ssbr: That is nice.
09:20  ssbr: I wonder how hard it would be to reuse that code for Django etc.
09:21  ssbr: it's probably all done in a pretty zope-specific way, but you never know
09:21  shylent: ssbr: are you sure django doesn't do this? you know, it supports multiple database backends for a given app
09:22  ssbr: shylent: No, come to think of it. I just sort of assumed.
09:22  kosh: ssbr: it is done as part of the zope transaction machinery, the sql db adaptors register some kind of rollback function I think
09:22  shylent: ssbr: .. yeah, I see :P
09:22  kosh: ssbr: so if anything in a transaction fails all the rollback stuff is called
09:22  ssbr: shylent: It's Django! :(
09:22  shylent: ssbr: yeah, of course, I mean, it is django and you are on #python, - might as well keep up the stereotypes
09:23  ssbr: kosh: and would the Zope transaction machinery be reusable elsewhere?
09:23  shylent: do carry on with the speculation though !
09:23  kosh: ssbr: not a clue
09:23  ssbr: shylent: stereotype nothing. My expectations are borne of actually working with Django.
09:24  ssbr: I expect them to handle only the cases they expect from their users. Anything else will not work, work by coincidence, or only appear to work
09:24  ssbr: Or the fourth option, work if you really struggle against the internal structure. But that doesn't apply here
09:25  kosh: that is not something I have encountered with zope
09:25  ssbr: Problem is, the only real alternatives to Django are probably web2py and Zope
09:25  shylent: goodness me, it might appear as if I am defending django, while what I am actually doing here is trying to keep the discussion technical and not religios. I mean, the sight of religious fanatics foaming at the mouths makes me shiver
09:25  kosh: usually stuff works extremely reliably no matter how stupid what you did is
09:25  kosh: sometimes it is just very slow if you do something massiveyl stupid
09:25  ssbr: chances are I'm going to use Pyramid and take the very slow road to learning Zope
09:25  ssbr: but that's when I can get around to learning Pyramid.
09:33  d1b: hi um stupid question maybe, but if i try do this unittest.main(verbosity=2), i get an exception that the keyword verbosity is unexcepted
09:37  ssbr: d1b: that's only in 2.7 and 3.2+
09:38  yuriks: http://paste.pound-python.org/show/400/
09:38  yuriks: anyone have any suggestions for removing the repeated code?
09:39  yuriks: (lines 11 and 15, and lines 23 and 26)
09:42  ssbr: yuriks: introducing a new variable in the second case, checking if it's still None in the first case
09:42  ssbr: or goto, but thankfully you don't get that in Python. :>
09:42  ssbr: (you could emulate the goto solution using exceptions if you like it, though)
09:43  yuriks: this is the one place where I think goto is useful, sharing common branches of code
09:43  d1b: ssbr: oh really :(
09:43  yuriks: ssbr: for the first case you mean replacing 'else:' by 'if profile.cart is None:'?
09:44  ssbr: yuriks: sure.
09:44  yuriks: and putting a pass on the exception
09:44  ssbr: yuriks: have you ever read Code Complete?
09:44  yuriks: ssbr: is it the one with the mythical man-month stuff? Then no
09:45  yuriks: (I always confuse that with some other book)
09:45  ssbr: yuriks: "mythical man-month" is an essay in a book with the same name
09:45  ssbr: it's a software engineering book, which covers things like sane use of goto and alternatives
09:45  yuriks: but not the same book?
09:46  ssbr: not the same book, no
09:46  yuriks: huh, weird
09:46  ssbr: Mythical Man-Month is by Fred Brooks, Code Complete is by Steve McConnell
09:46  yuriks: I heard it's a good reading (code complete), but I never actually got around to finding a copy
09:46  ssbr: Code Complete is more about software construction where the Mythical Man-Month is more about management.
09:47  ssbr: yuriks: it's dry reading
09:47  yuriks: ssbr: I meant good as in 'instructive'
09:48  ssbr: It is that. You should buy yourself a copy
09:48  ssbr: (and flip to page 398)
09:48  yuriks: hyh
09:48  yuriks: huh*
09:49 * m0no got brain seizure reading pro python
09:49  yuriks: ssbr: hmm, I'm thinking of leaving the code as it was =/
09:49  yuriks: removing the redundancy just makes it harder to follow
09:50  ssbr: yuriks: that's probably what I'd do.
09:50  ssbr: but I'm sort of lazy
10:04  Antonis: Hello folks. I have a question.. I have a 32GB USB and want to install python in it to be able to run python scripts within windows regardless if there is a python environment in windows or not. In other words is it possible to run python scripts in windows using a python installation in a USB?
10:06  MostAwesomeDude: Should be, yes.
10:06  Antonis: thank you
10:07  tr3x: Antonis probably more of a question for #windows.  IIRC you'd have to either set PATH to python on your usb disk, or create batch files that execute "<path>\pythonXX\python.exe script.py"
10:08  Antonis: oh I see thanks
10:08  Antonis: I will play around with it
10:21  hemanth: i have few files and huge heading list, heading list is a list of which has all possible headings that might appear in a them, the thing is i need to extract data between those heading, i'm planning to do weighted sort on them, any suggestions to do the same in easier ways?
10:23 --- romankrv is now known as rrr
10:23 --- rrr is now known as romankrv
10:28  cwillu_at_work: is there any diff utility that's more aware of python's indentation?
10:28  Cromulent: cwillu_at_work: what platform?
10:29  KirkMcDonald: cwillu_at_work: diff -w
10:29  cwillu_at_work: linux
10:29  cwillu_at_work: KirkMcDonald, that's being less aware, not more
10:29  KirkMcDonald: I'm not clear on what you mean, then.
10:29  Cromulent: cwillu_at_work: sorry I'm an evil mac guy
10:30  cwillu_at_work: KirkMcDonald, applying a diff works, but it gives a larger than necessary diff (and generally makes merging harder than necessary).  diff -w gives a wrong result
10:30  pr3d4t0r: cwillu_at_work: Ouch.
10:30  pr3d4t0r: cwillu_at_work: How many spaces are you using for indents?
10:31  cwillu_at_work: pr3d4t0r, 4, not that it matters?
10:31  KirkMcDonald: cwillu_at_work: What information is in the diff that you want to exclude?
10:31  pr3d4t0r: cwillu_at_work: Well, what do you mean then by "gives a larger than necessary diff"?
10:33  cwillu_at_work: pr3d4t0r, KirkMcDonald, consider wrapping a 10 line function in a try: finally: block.  The bulk of the function is unchanged except for indentation.  -w gives an incorrect result, and vanilla gives a patch that will conflict with any other changes to that function.
10:33  pr3d4t0r: cwillu_at_work: Ah.
10:34  cwillu_at_work: I'm aware that a line-based diff can't do better than that, it needs to know about indentation and handle it separately.  I'm asking if such a thing has been written (probably with python in mind).
10:34  KirkMcDonald: So what you want is a Python-aware merge.
10:34 * pr3d4t0r codes at 304 columns, seldom goes past column 120.
10:34  cwillu_at_work: KirkMcDonald, basically, although in principle this isn't specific to python
10:34  pr3d4t0r: cwillu_at_work: Let me think about that.  There were some Vim tools that took care of a lot of Python stuff; one of them was a diff, I think.
10:34  pr3d4t0r: cwillu_at_work: Let me see if I can find it in my bookmarks.
10:35  KirkMcDonald: cwillu_at_work: I would argue that maybe such a thing *should* conflict.
10:35  cwillu_at_work: KirkMcDonald, no, no it shouldn't.  It's an artifact of the language.
10:36  KirkMcDonald: cwillu_at_work: Not at all. Such a conflict would occur in any language, as long as you are indenting properly anyway.
10:37  cwillu_at_work: KirkMcDonald, unless you use -w, in which you get a syntatically valid diff in any language, except python, where you get non-trivially brokenness :)
10:38  KirkMcDonald: cwillu_at_work: Whitespace is not wholly insigificant even in C.
10:38  KirkMcDonald: insignificant*
10:38  cwillu_at_work: KirkMcDonald, the usual option is actually -b, for that reason
10:39  KirkMcDonald: Either way.
10:39  cwillu_at_work: Anyways, the lack of a conflict never implies a semantically valid result
10:39  cwillu_at_work: so gripes that it should do that are falling on deaf ears :p
10:39  cwillu_at_work: you might as well argue that any change at all should conflict with any patch
10:40  cwillu_at_work: <cwillu_at_work> I'm aware that a line-based diff can't do better than that
10:48  sundar: Hi... I don't understand how exactly max([(sum(a[j:i]), (j,i)) for i in range(1,len(a)+1) for j in range(i)]) works, could someone explain?
10:49  razamatan: so list.pop(0) is O(n).  is list.pop() O(1)?
10:49  razamatan: cpythong
10:49  medecau: been looking around and banging my head on the wall to find a way of using regex to match a string of size that is in the string itself
10:50  shylent: medecau: dunno, maybe you should just parse it without regexes?
10:50  shylent: what kind of string is that? can you provide a sample?
10:50  medecau: shylent, the exercise is exactly that, i would like to do it with regexes and learn a bit more about them
10:51  KirkMcDonald: razamatan: Yes, popping from the end is O(1).
10:52  medecau: shylent: the text would be '4:spammy'
10:52 --- ChanServ sets modes [#python +o infobob]
10:52 --- infobob sets modes [#python -q ratg0d!*@*]
10:52  medecau: i would like to match only 'spam'
10:52  razamatan: medecau: so given an str that's is \d+, you want to match itself?  so '1' works?  or the string is the textual form of the number?
10:53  razamatan: medecau: so 'four' is the only string that'd work? :D
10:53  medecau: i want to use what ever comes out of \d+ to be used has the size for the second part of the string
10:54  razamatan: medecau: you're using delimiters in the string though?
10:54  medecau: i wrote a string functions based one liner if you want to look at it
10:54  razamatan: KirkMcDonald: does pop necessarily deallocate the underlying array though?  i'm trying to fake a buffer
10:55  medecau: delimiter? i know the string starts after the':' and that it has the size provided by whatever comes before ':'
10:55  razamatan: medecau: by the sounds of it, you're doing something very contrived to do something very simple... what's the real use case
10:57  medecau: this is to read .torrent files, there's already libs for this outhere, but I am writing my own one has an exercise
10:57 --- infobob sets modes [#python -o infobob]
10:58  medecau: the problem with regexes is actually quite interesting and I have learnt a few things I did not knew before
10:58  ssbr: razamatan: deallocate the underlying array?
10:59  ssbr: razamatan: If it does that at all, it would only do so when the array gets very small (in order to keep amortized O(1))
11:01  razamatan: ssbr: when you list.pop() a sufficient number of times, does it deallocate the array implemented at the machine level in cpython?
11:01 --- ChanServ sets modes [#python +o infobob]
11:01 --- infobob sets modes [#python -q $a:republican_devil]
11:01  razamatan: medecau: are you looking for a one liner or something?
11:03  razamatan: medecau: b/c i don't think you can do what u want to do in one line b/c the state for the number of characters to match needs to be ascertained before you can use it in the regex
11:03  ssbr: razamatan: Doesn't look like it.
11:03  sundar: Hi. I don't understand what is maximised in "max([(sum(a[j:i]), (j,i)) for i in range(1,len(a)+1) for j in range(i)])", could someone explain? What's the list comprehension result?
11:04  ssbr: razamatan: although, maybe. Not sure what some of the macros do.
11:04  ssbr: sundar: Try it and see
11:05  ssbr: check what the value of [(sum(a[j:i]), (j,i)) for i in range(1,len(a)+1) for j in range(i)] is
11:06  razamatan: medecau: http://bpaste.net/show/12178/
11:06 --- infobob sets modes [#python -o infobob]
11:09  medecau: razamatan: yes, I'd like to do a one liner, I came quite close to it but the first match \d+ seems to be only accessible if I want to match that exact string and not if I want to use it has a integer
11:10  medecau: razamatan: something like this: match=re.search('([\d]+):(.{(?P=1)})', string)
11:11  medecau: execpt that raises an exception
11:11  razamatan: medecau: meh... a oneliner only hides the fact that you have to use 2 regexes..
11:12  medecau: oh, that's not what i meant, I wish only to use one regex
11:12  admiralshlorky: out of curiosity, would anyone care to help a total python noob? i've been following this tutorial and i seem to have run into a slight hiccup
11:13  ssbr: medecau: why?
11:14  razamatan: medecau: learn about finite state automata
11:14  ssbr: admiralshlorky: ask away
11:14  admiralshlorky: i've written this >> http://pastebin.com/YSEr6bs9
11:14  infobob: http://paste.pound-python.org/show/402/ (repasted for admiralshlorky)
11:14  ssbr: finite automata sure are great.
11:14  admiralshlorky: ok.
11:15  ssbr: admiralshlorky: OK, what's your problem?
11:15  medecau: I think I'm in for a world of pain with that... will see.
11:15  admiralshlorky: so, i tried running it, when i enter the choice, it just repeats the menu
11:16  admiralshlorky: quite frankly i have no idea what went wrong, i compared the original, this >> http://www.sthurlow.com/python/lesson05/
11:17  admiralshlorky: and i can't see what's wrong
11:18  ssbr: admiralshlorky: you have "==" instead of "="
11:18  dash: Jerub, _habnabit: i just read about why php doesn't have try/finally.
11:18  dash: I'm appalled, yet again.
11:18  ssbr: admiralshlorky: also, you are using input(), when you should be using int(raw_input())
11:18  admiralshlorky: huh, no kidding.
11:18  ssbr: dash: link plox
11:19  admiralshlorky: ahh, i was just using input() as per the tutorial
11:19  ssbr: admiralshlorky: your tutorial is wrong :/
11:19  admiralshlorky: D:
11:19  shylent: input does eval which is not a good thing to do at all
11:19  sundar: ssbr: thanks, I tried that part alone, it yields a list of tuples. how does max work on a list like that?
11:19  ssbr: sundar: (1, 0) > (0, 1) > (0, 0)
11:20  ssbr: it does it the same way it does it for strings: lexicographically
11:20  dash: ssbr: http://bugs.php.net/bug.php?id=32100
11:20  razamatan: medecau: specifically figure out how regex and fsa's relate... you should figure out how state would be handled during regex parsing
11:20  admiralshlorky: wait, what's eval? as far as input() is concerned
11:21  medecau: razamatan: thanks for the help
11:21  sundar: ssbr: oh, that explains it, thanks a lot
11:21  NelleV: dash: I don't understand... They don't support it because there's a way to emulate it
11:21  cmot: Yodel!
11:22  ssbr: admiralshlorky: eval evaluates a python expression and returns its value
11:22  NelleV: but this way to emulate it may create inconsistent code ?
11:22  cmot: can I cause python to still read $PYTHONSTARTUP even if I give a -c?
11:22  NelleV: I think I missing a part of the puzzle here...
11:23  admiralshlorky: ok, so that means you could put in a mathematical operation and it would use the result of that as the input?
11:23  ssbr: dash: ouch
11:23  NelleV: ssbr: maybe you can enlighten me... I don't understand their logic. Is it normal ? xD
11:23  ssbr: admiralshlorky: Yes. You could also put in "os.system('rm -rf /')"
11:23  razamatan: this one is related to my list.pop() efficiency question... but would hardcore complexity/efficiency ppl care to dissect http://gist.github.com/736048 ?  i'd like feedback... i was unhappy w/ the performance/implementaitons of a randomizing iterator found in the wild
11:23  ssbr: NelleV: no.
11:23  admiralshlorky: oh.
11:24  admiralshlorky: hrm.
11:24  ssbr: NelleV: they think it's unnecessary because you don't need it, if you silently quash all exceptions
11:24  admiralshlorky: that wouldn't be good
11:24  Baughn: Let's say I have a class hierarchy A -> B, where B only adds a few read-only methods. Is there any reasonable way to convert an A to a B, assuming I can only alter the definition of B?
11:24  ssbr: admiralshlorky: int(raw_input('give me a number> ')) lets people pass in numbers, and raises an exception if they do not enter a number
11:24  Baughn: razamatan: Randomness is *hard*. How random does it need to be?
11:24  NelleV: ssbr: I still don't understnad their logic...
11:24  ssbr: Baughn: Nope
11:24  ssbr: NelleV: their logic doesn't make sense
11:24  shylent: Baughn: make it possible to initialize B using an instance of A
11:24  razamatan: Baughn: as random as the random module can be.. :)
11:25  ssbr: they worked off of an invalid premise
11:25  shylent: Baughn: convert .. no
11:25  Baughn: shylent: ..I was afraid you'd say that.
11:25  NelleV: ssbr: ok, I understand why I don't understand then
11:25  ssbr: Baughn: consider using composition, instead of inheritance!
11:25  admiralshlorky: ok, seeing as this tutorial is apparently super flawed, i might as well use the one in the topic =/
11:25  razamatan: Baughn: google mixins
11:25  ssbr: Baughn: it frequently requires more effort, but it is more flexible, and allows you to do roughly what you're aiming for, where inheritance would not.
11:25  lokai: is there a simple way to create the matlab sequence hold on;plot(x1,y1);pause(5);plot(x2,y2) using matplotlib? I want to see the first plot() for pause(5) followed by the second plot. It seems that matplotlib.pyplot.show() must always come at the end.
11:25  admiralshlorky: thanks for pointing that ssbr, that could have turned out badly.
11:25  ssbr: razamatan: doesn't fix his problem in this case
11:26  ssbr: admiralshlorky: It probably wouldn't have. But it's useful to know.
11:26  razamatan: ssbr: he's only extending an object w/ some methods.. mixins would be appropos
11:26  ssbr: I don't know what exactly the tutorial is aimed at, but the one in the topic is pretty good if you already know another objects
11:26  Baughn: ssbr: I really, *really* can't alter A, otherwise I'd do so.
11:26  ssbr: razamatan: he wants to extend an object that already exists. mixins don't solve that any more than any other model of inheritance.
11:27  ssbr: Baughn: I think you misunderstood. I was suggesting you extend it by creating an object that holds a reference to an instance
11:27  Baughn: But yeah, adding a class method to do the conversion is an option. Annoying, but the best I'll get.
11:27  ssbr: Baughn: no, conversion is not the best you'll get
11:27  ssbr: it might conceivably be one of the worse options
11:27  Baughn: ssbr: Then I'm not sure what you mean
11:27  shylent: instantiating B using an instance of A is not a conversion
11:28  razamatan: x.__bases__ += B
11:28  shylent: razamatan: no, thanks !
11:29  razamatan: why can't that work if B strictly adds readonly methods?
11:29  ssbr: Baughn: have your class, B, *not* inherit from A. Instead, make it an entirely separate type that has an instance of A as a member attribute, which it gets during initialization. It "extends" the instance of A by proxying some method calls -- so that B.foo() actually calls B.a.foo() -- and creating entirely new ones that you wanted to add, so that B.bar() does, well, whatever
11:29  ssbr: Baughn: alternatively, just make your methods functions
11:29  ssbr: Baughn: or, instead of proxying, just use your B as a view into A that doesn't pretend to be an instance
11:30  ssbr: it all depends on what you're doing, really
11:30  ssbr: but conversion is almost the last resort, because it's difficult to pull off and can muck with code that expects to be able to sensibly mutate an instance of A
11:31  shylent: but please, no trickery with __bases__
11:31  ssbr: the only thing worse than that is mutating A like razamatan suggests
11:31  Baughn: I don't see how conversion would cause problems. An instance of B works just fine as an instance of A; it's a subclass, substitution principle, etc.
11:32  ssbr: Baughn: Conversion is copying. Copying is a nasty affair, and would interfere with any code that holds references to the version of the object that was copied, even while the rest of your code expects changes to be made with the copy
11:32  razamatan: i don't understand why ppl are so strict w/ what they learned in oo programming... python lets you rebase things quite easily
11:33  ssbr: Baughn: it's also difficult to determine how deeply you should copy. If you copy too shallowly, then your copies will share some state but not other state.
11:33  shylent: razamatan: thats exactly why they are strict - because python allows you to do too much for your own good
11:33  ssbr: Baughn: but if you copy too far, they won't share essential state that they're supposed to.
11:33  Baughn: ssbr: I can reassure you there, at least - the entire class is immutable.
11:33  ssbr: Baughn: it is much easier to simply wrap A, instead of subclass+conversion. Fewer problems, fewer bugs.
11:33  Baughn: Most of mine are. It simplifies things a lot
11:34 * ssbr shrugs
11:34  ssbr: then copying only carries with it a minor inefficiency, and less convenient code.
11:34  razamatan: shylent: but if you know what you're doing, it works nicely... it gets out of your way
11:35  shylent: out of the way and under the carpet
11:35  ssbr: razamatan: It isn't Python, won't work for all classes, is ugly, breaks expectations, isn't even fun
11:35  ssbr: of course, this is all related.
11:35  ssbr: It breaks expectations because it isn't Python, and it won't work for all classes because CPython only extends Python in this way when it's convenient
11:36  ssbr: as would other implementations
11:36 * Baughn can't believe he's actually longing for HLists now
11:36  razamatan: how isn't it python if it works in python?
11:36  razamatan: http://bpaste.net/show/12179/
11:36 * ssbr didn't know there was a sensible way of doing heterogeneous lists, in Haskell or otherwise
11:37  ssbr: razamatan: it works in CPython.
11:37  Baughn: ssbr: For 'heterogenous list', read 'object'.
11:37  ssbr: Baughn: I don't understand what you mean by that.
11:38  Baughn: ssbr: Basically the idea is that you define an object as a heterogenous list of values (type-indexable), and then when you subclass something you just add new values to the end.. front.
11:38  ssbr: Baughn: sounds more like a tuple
11:38  Baughn: ssbr: There are all kinds of subtleties there that HList handled badly, such as /field names/, but the basic idea seems good. It also makes converting a superclass to a subclass easy.
11:39  ssbr: albeit, an extensible tuple
11:39  razamatan: so what exactly would be the problem to reclass and object, esp since it works? http://bpaste.net/show/12179/
11:39  ssbr: razamatan: It works in CPython.
11:39  ssbr: razamatan: Current CPython.
11:39  razamatan: so why doesn't he just go w/it?
11:39  ssbr: Because it is not valid Python, CPython may decide to stop letting it work tomorrow.
11:39  razamatan: when will it break?
11:40  ssbr: razamatan: I offered a few reasons already.
11:40  ssbr: You have not refuted any of them.
11:40  shylent: well its a part of internal implementation details, so depending on it is not a good idea at all, whatever the real reasons behind your choice
11:40  shylent: you dont depend on implementation details of things
11:40  nosklo: razamatan: the reasons ssbr mentioned are enough, and besides that, it's also unintuitive and makes code harder to read and debug, for no gain
11:43  razamatan: nosklo: so is it still kosher to hang new methods off instances when we need to?
11:43  ssbr: Baughn: I'd caution against writing Python the way you'd write Haskell, anyway.
11:43  ssbr: Baughn: the restrictions are different. You can in fact do some wonderful things in Haskell that you can't in Python, and the converse is also true.
11:43  Baughn: ssbr: Yeah, I know. I won't do that. :P
11:43  ssbr: play to their strengths, blah blah blah
11:43  nosklo: razamatan: kosher?
11:44  nosklo: razamatan: you can add methods to instances just fine
11:44  nosklo: razamatan: without manipulating the class
11:44  razamatan: will the idea taht you can add methods and attributes and whatnot to an instance of an object willy nilly go away?
11:44  razamatan: ok
11:44  nosklo: razamatan: myinstance.method = mymethod
11:44  razamatan: and that somehow isn't as perverse as changing the class from out from under the instance?
11:44  ssbr: manipulating the class is extremely bad style, outside of decorators.
11:44  Baughn: razamatan: It *should*, but I guess it won't.
11:44  ssbr: (and metaclasses)
11:45  ssbr: razamatan: correct
11:46  nosklo: razamatan: setting a function in an attribute is valid python
11:46  ssbr: razamatan: manipulating a class is changing global state in ways that can break very badly, and breaks expectations
11:46  razamatan: and mixins (fscking around w/ instance.__class__.__bases__) is not safe/kosher either?
11:46  ssbr: razamatan: mixins are fine. Mixins have nothing at all to do with instance.__class__.__bases__
11:47  ssbr: mixins are mixed in at class creation time, not later.
11:47  razamatan: hmm...
11:48  razamatan: so what about http://www.linuxjournal.com/node/4540/print ?
11:48  razamatan: i was going off that
11:48  ssbr: razamatan: that article advocates a bad practice.
11:49  ssbr: Mutating global state is probably worse than goto
11:49  razamatan: it's the top result for python mixins via google.. :P (i've never done mixins in python myself, since i've never needed it)
11:52  razamatan: ssbr: so you're saying the style of creating a new class that's multiply inherited (metaclass) dynamically is the preferred way?
11:53  ssbr: razamatan: it's been my experience that if you want to do such a thing, the strategy pattern makes a lot more sense.
11:53  ssbr: it allows the dynamic creation of "mixed in" behaviours, but using composition instead of inheritance
11:56  doneir: hey guys, got a bit of a problem with the multiprocessing module. I've successfully submitted jobs for one round of work, however, when i submit the next batch the PCUs are not 'available' and only a minor amount of jobs are dispatched at any one time (32 cores available). A sample of the code, without classes but the required details are in the post, is available at http://pastebin.ca/2015465
11:56  infobob: http://paste.pound-python.org/show/403/ (repasted for doneir)
11:56  doneir: i'm not sure whether I need to destroy the Pool in a differing manner than a simple pool.close() pool.join()
11:57  doneir: probably something simple i'm missing here
11:57  nosklo: how can I do async IO in wx without using threads?
11:57  ssbr: nosklo: Twisted has a reactor for wx, doesn't it?
11:57  doneir: nosklo: can't, unless you os.lseek() or read in the data then dispatch
11:58  ssbr: that reactor uses threads, but you don't need to worry about it, so woohoo
11:59  ssbr: doneir: I don't get why you would call .close() before .join()
11:59  nosklo: doneir: you're pickleing a open file?
11:59  nosklo: oh, no, I misread sorry
12:00  doneir: ssbr: multiprocessing examples show the use of that
12:00 * nosklo drinks more of his coffee
12:00  doneir: from python docs
12:00  ssbr: doneir: it's used in one example, I see
12:00  ssbr: but it isn't documented
12:00  doneir: http://docs.python.org/library/multiprocessing.html#examples
12:01  doneir: it gets the results, processes fine. How would you recommend the closing of processes?
12:01  ssbr: oh, I see where it's documented
12:02  ssbr: .close() doesn't do anything special, though. But OK.
12:02  doneir: nosklo: i dumped the data to allow less ram utilised by forked processes (dealing with 10s of gigs of data), if i leave it there the processes inherit the RAM usage of the parent
12:02  ssbr: doneir: no, you don't need to do anything more elaborate
12:02  doneir: hmm
12:03 * doneir wonders why there's a block
12:04  ssbr: doneir: you're wondering why .join() blocks?
12:05  doneir: no no, just wondering why the multiprocessing pool considers the available CPUs are not available when the jobs are complete and a new round of jobs are ready (line 131)
12:05  doneir: already gathered the jobs from the first process (line 74)
12:05  doneir: s/jobs/results/
12:05  ssbr: doneir: wait, is that the same pool?
12:06  doneir: no, i recreated the pool
12:06  doneir: line 122
12:06  joenp: The docs say "random.shuffle(x[, random]) Shuffle the sequence x in place. " - does this mean this method can not be used for a list?
12:07  ssbr: joenp: lists are a kind of mutable sequence
12:07  verte: joenp: what makes you think that?
12:07  joenp: verte: random.shuffle(mylist) returns None
12:07  doneir: that's because it changes mylist, it doesn't return a new object
12:07  doneir: check mylist var
12:07  doneir: hence the 'change in place'
12:08  doneir: :]
12:08  verte: joenp: that's because it operates on-place
12:08  ssbr: doneir: I can't think of anything. Too tired, don't use multiprocessing. Sorry.
12:08  doneir: ssbr: that's cool, it's my first round with it, i'll work it out in the end, just thought i might eb doing something stupid
12:08  ssbr: you should reuse cpus the first time you create the pool, though, just for readability's sake. I missed the second one because it's much smaller
12:09  joenp: code: http://paste.pound-python.org/show/404/
12:09  nosklo: joenp: yeah, are you listening?
12:09  nosklo: joenp: <doneir> that's because it changes mylist, it doesn't return a new object
12:09  doneir: i'll give that a burl tomorrow, was something i had in mind, thanks for your suggestions
12:09  nosklo: joenp: <doneir> check mylist var
12:09  joenp: nosklo: Check out the paste, should 'deck' not be changed?
12:10  nosklo: joenp: random.shuffle(L) changes the L, and returns None
12:10  nosklo: joenp: so you're assigning the None return back to the "deck"
12:10  joenp: right.
12:10  nosklo: joenp: don't assign back. random.shuffle() already changes the list directly
12:10  joenp: nosklo: OK, so I just remove the deck = then
12:10  nosklo: joenp: yep
12:10  joenp: thanks.
12:13  zykes-: hmm, how does resolving on the filesystem of python modules work ?
12:14  zykes-: i see in some places that people to "from a.b.c import db", how does the a.b.c resolve to ?
12:14  verte: sys.modules is consulted, then the directory the entrypoint is in, then sys.path
12:14  nosklo: .pth files are ran
12:15  nosklo: which can (and will, if you use setuptools) contain code
12:15  verte: TCL strikes again
12:16  joenp: Alright, another question. How come the psuits loop prints the unicode characters fine, but once deck is printed, the hex equivalents are printed? http://paste.pound-python.org/show/406/
12:16  nosklo: joenp: because you're printing a list
12:16  doneir: it can also map to dir/dir/module class or function if dir is in path and each dir has a __init__.py
12:16  nosklo: joenp: printing a list prints the representation of its contents
12:17  joenp: nosklo: I.e. raw?
12:17  nosklo: joenp: no. the opposite of raw
12:17  nosklo: joenp: representation
12:17  doneir: aye, printing a list will utilise built in __repr__ or __str__ (i forget)
12:17  verte: doneir: in that case, the directory is a package
12:17  doneir: verte: aye
12:17  joenp: So what should I do instead?
12:17  nosklo: joenp: if you want to print each element, use a for loop
12:17  zykes-: is there any howto / doc on it ?
12:18  lvh: Looks like Unladen is pretty dead on the long run
12:18  lvh: http://groups.google.com/group/unladen-swallow/msg/bd4e6f935c23252a
12:18  lvh: I guess this is good news in a strange way
12:18  nosklo: zykes-: on for loops?
12:18  joenp:  nosklo: Alright, thanks
12:18  nosklo: argh
12:18  lvh: (Pypy has essentially made *much* better progress than they had expected, which somewhat destroyed US' release cycle)
12:18  nosklo: zykes-: sorry
12:18 * nosklo gets next cup of coffee
12:19  doneir: i had so many issues with multiprocessing and overridden __repr__ in objects
12:19  doneir: pain in the arse working on other people's code :)
12:21  soapcontainer: if i am just starting to learn python, should i learn the newest version or should i learn an older one?
12:22  lvh: soapcontainer: 2.7 *is* the newest version
12:22  doneir: mmm... i'd recommend 2.7
12:22  lvh: soapcontainer: So, that
12:22  nosklo: soapcontainer: newest, 2.7.1
12:22  soapcontainer: alrighty
12:22  doneir: it's production ready, whereas 3.x isn't yet
12:22  nosklo: doneir: to be fair, 3.1.3 is stable
12:23  doneir: stable, but perhaps not as effecient :)
12:23  nosklo: doneir: it just lacks libraries so not very useful for a beginner
12:23  lvh: Right, the problems with 3.x are mostly third party libs
12:23  verte: lvh: I don't think our progress is in the same ballpark, nay the same country, we expected. the goal for a long time was "faster than C", now it is "about twice as fast as cpython"
12:23  lvh: Although email is broken
12:23  soapcontainer: what is python 3.1.3
12:23  yuriks: whoa whoa
12:23  yuriks: I need to try PyPy =P
12:24  lvh: verte: Well, I remember an interview with Colin where he said: okay, it's interesting, but we're looking what we can do in 6 months, they're looking at what you can do in ten years
12:24  lvh: verte: I don't think they were expecting you to get where you got in a year or so
12:24  verte: and cool things like cli jit never are released etc
12:24  lvh: verte: Maybe even longer
12:24  verte: ah good point
12:24  lvh: verte: I just think that Pypy kind of ate US' lunch unintentionally
12:25  lvh: verte: They got pulled off to different projects so it just kind of stagnated
12:25  lvh: (And I think Pypy has actually pulled ahead now in the official Python benchmarks?)
12:25  lvh: We should really get pypy nightlies on the language shootout
12:25  lvh: Lua has luajit
12:25  verte: iirc, yes
12:26  lvh: verte: So in a way this is a feature not a bug
12:26  lvh: Competition is nice but I think anything that's going to beat Pypy after, say, a year from now, had better well get started soon
12:27  lvh: verte: What's this about a CIL JIT? Where can I read about it?
12:28  lvh: verte: Is that something that will eventually (combined with Ironclad, since IIRC that doesn't do anything very IronPython specific) replace IronPython?
12:28  zykes-: is there any guide on making python libs ?
12:29  verte: oh, from our documentation page I guess. it was anto's thesis, he was originally an ironpython hacker
12:30  verte: it is generated just like the x86 jit, but needs special features to enable patching in new code etc
12:30  lvh: right
12:30  lvh: I would imagine that magically getting x86 native code to run is slightly harder in CIL
12:30  lvh: but I don't know a lot about it
12:30  lvh: I should probably get over my microphobia ;-)
12:31  yacek19: Hi
12:31  verte: cli methods are immutable once created, which is sensible
12:32  verte: so control flow from a jit at this level is more complicated
12:33  lvh: I would imagine you can get COW semantics for them
12:33  verte: but that wouldn't really help
12:33  yacek19: I have installed Windows version of python 2.7.1. But wydm importing Tkinter I get DLL load failed
12:34  verte: you want to patch in some optimised code to some method referenced from elsewhere
12:34  yacek19: There was no problem with python 2.7.0
12:35  lvh: verte: Ah, I see, yes
12:35  lvh: verte: Hm. How did MS do it?
12:35  yuriks: CIL doesn't change at runtime, I guess
12:35  verte: they are operating on a level lower than methods
12:36  lvh: "I have to thank all of you - you've made our jobs much harder this year in the best of ways - by submitting an amazing number of high quality, enticing talks."
12:36  lvh: I guess a bunch of people that aren't me or dash signed up too
12:36  verte: to what?
12:37  lvh: verte: Pycon
12:37  lvh: US
12:37  verte: oh right
12:37  verte: the selection panel
12:37  lvh: verte: Is there a technological barrier from preventing you to do the same, or is it just that it would be much more work to teach Pypy's existing machinery to work like that
12:37  smw: where is pycon?
12:38  verte: it isn't an interface ecma cli exposes
12:40  lvh: smw: Atlanta
12:40  smw: lvh, just looked it up
12:40  smw: lvh, too far for me :-(. With linuxcon I had family up there.
12:40  verte: and it would be a lot of work for MS to expose that interface, because with it, you can violate language semantics
12:40  talat: How can i do a make list with limit number element in python 2.5
12:40  solstice: hi. how could I know if I use python 32 bits or 64 bits ?
12:41  lvh: solstice: 32 or 64 for what
12:41  lvh: solstice: Also: why'd you need to know
12:41  solstice: because of a bug supposed to be closed that is not
12:41  solstice: http://bugs.python.org/issue1202
12:42  lvh: solstice: sys.maxint
12:42  solstice: zlib.crc32 still returns negative numbers !
12:42  kosh: sys.maxint will only tell if you on unixes
12:42  kosh: on windows 32bit and 64bit still give the same sys.maxint
12:42  kosh: because windows 64bit does not change the size of a long unlike EVERY other dang platform out there
12:43  kosh: it sure is nice that 64bit windows once again does its own thing
12:43  solstice:  fortunately that does not matter here
12:46  bz: from sys import maxint
12:46  Kaedenn: Fix: don't use Windows.
12:46  Kaedenn: </troll>
12:46  bz: crap wrong window
12:46  talat: May you help me ? I dont create list with limit size
12:47  verte: talat: you can write a function which checks the len before appending, or raises an exception
12:48  talat: in pthon2.6 i use deque in collections library but in 2.5 there is not any function for this
12:49  Kruptein: I'm feeling retarded :f  why does this not work and how should I solve it (in one line) while cmd = raw_input("command?\n") and cmd != "":
12:49  smw: lvh, it is a 14 hr bus ride to pycon :-D
12:50  jorrit: Hi
12:50  Kruptein: smw where is pycon?
12:50  talat: verte, in pthon2.6 i use deque in collections library but in 2.5 there is not any function for this
12:50  smw: Kruptein, atlanta, georgia. I am near NYC
12:51  lvh: smw: I'm swimming
12:51  smw: lvh, ok. Is your company paying? lol
12:52 * smw forgets the l-o-l rule at least once per day
12:52  lvh: smw: no
12:52  Kruptein: lvh are you going to pycon?
12:52  bigbrovar: Hi guys
12:52  lvh: smw: should be ok. belgium -> uk,  ireland -> newfoundland
12:52  lvh: then hitchhike to atlanta
12:53  Kruptein: :p
12:53  lvh: Kruptein: Yes
12:53  lvh: Kruptein: I'm supposedly giving anywhere between zero and two talks
12:53  lvh: depending on how many get accepted
12:53  cheater99: lvh: belgium->uk->ireland->iceland->greenland, and then ice-skate through alaska
12:53  Kruptein: lvh and about what ar you going to talk? :p
12:53  Kruptein: *are :f
12:53  lvh: Kruptein: what a stupid question
12:53  lvh: Kruptein: obviously twisted
12:53  cheater99: twisted
12:53  cheater99: haha
12:53  Kruptein: :p
12:54  Kruptein: indeed quit stupid ^^
12:54  cheater99: what about continuous deployment?
12:54  lvh: Kruptein: no in all seriousness: continuous deployment
12:54  cheater99: lol
12:54  lvh: Kruptein: And a shared talk with dash on starting with twisted
12:54  Kruptein: hm I'm going to watch that one :p
12:54  lvh: Selling your soul for happier software development: Twisted for beginners
--- Log opened Fri Dec 10 13:05:28 2010
13:05 --- Users 743 nicks [0 ops, 0 halfops, 0 voices, 743 normal]
13:05  lvh: so I can call them a douchebag and it'll be ok
13:06 --- Channel #python was synced in 88 seconds
13:06  nosklo: lvh: heheh I wish I could make ti
13:06  nosklo: it
13:07  smw: so do I
13:07  smw: I am trying to figure out any way I can make it
13:08  smw: I can't afford the ticket. That is one hell of a student price XD.
13:18  lucian: smw: it's even worse if you're in the wrong country. or on the wrong continent
13:19  smw: lucian, I am sure
13:19  smw: lucian, however, not being able to go is not being able to go :-P
13:19  lucian: which is why, until i'm filthy rich, i won't be attending any interesting conventions
13:19  lucian: smw: True
13:20  smw: lucian, it was a miracle I got to linuxcon
13:20  Arkns: hi all. nice?
13:21  Arkns: I don't if here it's the best choice, but anyone know how I make python files (*.py) auto-run on CentOS?
13:22  smw: Arkns, that is a question for #centos. It is like autorunning any script.
13:22  smw: Arkns, are you trying to make it run at boot? login?
13:26  Arkns: smw: it's for a routine to login...
13:27  lvh: lucian: Just follow me
13:27  lvh: I'm swimming
13:28  lvh: good for your figure as well
13:28  lvh: Arkns: You probably want to ask centos people, there's nothing special about python here, it's just running an executable
13:28  lvh: Arkns: you might want bashrc depending on the kind of login you mean
13:29  Arkns: lvh: ok. thanks to both
13:30  smw: lvh, I tell him to check #centos and I don't get a thanks :-P
13:34  lericson: I'm looking at the reference for descriptors, and it strikes me that there are 'class bound' descriptors. http://docs.python.org/reference/datamodel.html#invoking-descriptors
13:34  lericson: I fail to see how these would ever be called, via metaclasses or?
13:35  lericson: Oh they are called
13:35  lericson: For simple classes
13:35  lericson: Interesting
13:47  cnf: hmz
13:47  cnf: i guess i still don't quite understand unicode in python
13:48  ssbr: lericson: descriptors are how, for example, classmethods are implemented. So being bound to a class is useful there
13:52  cnf: is u"foo" equivalent to unicode("foo") ?
13:53  yacek19: Yes
13:54  Juhaz: no.
13:54  Juhaz: in that specific case, they result in the same unicode object, though.
13:54  ssbr: for the specific string "foo"
13:55  cnf: so i can use unicode(farwithfooinit) ?
13:55  ssbr: (and for all ascii bytestrings in python source files with an ascii or ascii-superset file encoding)
13:55  cnf: var*
13:55  shylent: there are like 3 things you gotta know about unicode and python - 'bytestring', 'unicode object', 'encoding'
13:55  cnf: yeah, and i can't get my head around when  have what
13:55  Juhaz: you pretty much shouldn't use unicode() with anything
13:55  ssbr: cnf: if the string is something like "√¢foo", unicode() would fail.
13:55  cnf: o,O
13:56  shylent: you decode from bytestrings into unicode objects with a specified encoding. you encode unicode objects into bytestrings with a specified encoding
13:56  cnf: O,o
13:56  ssbr: cnf: if you communicate in something other than emoticons, we might be able to help you.
13:56  cwillu_at_work: cnf, you don't know jack about unicode :)
13:57  ssbr: cnf: read the Joel Spolsky article on unicode
13:57  cnf: ssbr: atm, all that comes to mind is "huh?"
13:57  cnf: ssbr: i just did
13:57  cnf: like 15 minutes ago
13:57  ssbr: cnf: read it again.
13:57  cnf: i did that, half an hour ago
13:57  ssbr: cnf: then give up, you are doomed.
13:57  nosklo: unicode(myint) is good, though
13:58  cnf: oh, right, thank you
13:58  ssbr: cnf: the unicode article explains all the terms that were used above.
13:58  nosklo: but I'd prefer u'%d' % (myint,)
13:58 --- emma is now known as em
13:58  ssbr: If you are confused by them, either you did not pay enough attention, or you are incapable of understanding.
13:59  jorrit: Or both
13:59  cnf: whatever
13:59  engla: that's unfair
14:00  engla: it's easy when you have learnt it. the unicode issue is vital but requires a small crossing of threshold
14:01  ssbr: engla: No difficult thresholds need to be crossed to be able to make at least a semi-intelligible response to conversation involving "unicode objects", "encodings", and "bytestrings"
14:01  ssbr: all the concepts are laid out by the article, and other sources that can be found through the google
14:02  ssbr: if someone has trouble actually putting them together, he can ask more specific questions than "o,O"
14:02  cnf: like i said, whatever
14:02  ssbr: Total and complete speechlessness means he has no idea whatsoever what anyone was talking about.
14:02  engla: whatever is what I say too
14:03  ssbr: (which means he needs to reread the article, since it was supposed to give him that idea.)
14:03  engla: this is the usual thing.. being aggressive to those that don't know as much as you do
14:03  ssbr: I don't care if he doesn't know as much as I do. I help people all the time with concepts they struggle with.
14:04  ssbr: But I need a starting point to help people.
14:04  cheater99: lvh: a mime what? what does that mean?
14:04  ssbr: engla: it isn't unfair to insist that people understand at least the basic concepts, or articulate their confusion. If they don't do that, there is no way for anyone to help them other than blindly guess at their problems and spam the channel with attempts at helpful advice, almost all of which will miss the mark.
14:05  engla: ssbr: if you hit the student on the head, you're a pretty bad teacher
14:05  engla: ssbr: then say that instead of calling people stupid
14:05  ssbr: engla: I didn't call him stupid. I said that he didn't pay enough attention, and should reread.
14:06  ssbr: engla: and I make no claims to being able to teach -- badly or well -- people that have absolutely no idea about unicode even after reading a comprehensive article on unicode, written by someone better at it than me, and reading it twice.
14:06  lvh: Furthermore, I seem to recall a very similar conversation yesterday with the same person
14:06  lvh: so it really does seem he does not quite understand how unicode works yet
14:07  Juhaz: engla, in this case, the student was hanging from a chandelier and making chimp noises
14:07  joenp: How can I simply make a script that keeps asking for input until I tell it to exit?
14:07  lvh: So I think telling him to read it again is sound advice, perhaps he can ask questions if something specific is unclear
14:07  lvh: joenp: raw_input and a while loopl
14:07  ssbr: joenp: a while loop and raw_input :B
14:07  lvh: loop* even.
14:07  engla: Juhaz: ? So it's ok to use violence on objects that are pathetic enough, that's your point?
14:07  lvh: No evidently the answer is "raw input and a while loop"
14:08  ssbr: engla: I was not violent.
14:08  lvh: engla: Let's not exaggerate, please.
14:08  Juhaz: engla, no, but he sure as hell would and should be thrown out of the class room.
14:08  lvh: engla: Since this discussion is meta, please move it to #python-offtopic
14:08  ssbr: Yeah, I've seen people thrown out of class for things like that.
14:08  kerio: what discussion
14:08  engla: cnf: I'm very sorry, all I'm doing is making the insults worse. I'm really sorry actually.
14:09  lvh: kerio: engla disagrees with ssbr telling cnf to go reread something
14:09  ssbr: kerio: I knifed a #python member and hung his body up on a cross
14:09  lvh: off
14:09  lvh: Well, yes, that
14:09  kerio: ssbr: was he jesus?
14:10  ssbr: kerio: nah, Jesus went up on a T-crucifix. Also he was put up, like, 2k years ago. And I'm pretty sure he's a lisp guru.
14:10  hkBst: is there a way to ask python about the paths it was installed to, such as at what path docs were installed?
14:10  lvh: engla: It doesn't seem he is nearly as insulted as you think he is.
14:10  lericson: hkBst: there is sys.prefix
14:10  kerio: ssbr: oh, that explains the hair
14:11  lvh: hkBst: sys.prefix, module.__file__ for builtins
14:11  lericson: hkBst: but no not docs really, that's too distribution-specific
14:11  aljosa: i'm getting a strange ""AttributeError: 'module' object has no attribute '__file__'  - http://dpaste.com/285249/ - any idea what could be causing this?
14:11  engla: lvh: I'm not him, I'm me and I am offended by people being so rude
14:11  jorrit: aljosa, what is 'app'?
14:11  cheater99: aljosa: the module has no __file__ attribute
14:11  lvh: In fact, in many cases specific docs are simply not installed
14:11  ssbr: aljosa: a couple things. how is 'app' loaded?
14:12  ssbr: (and what is it?)
14:12  lvh: engla: I didn't say anything about you except that you think he is insulted.
14:12  joenp: ssbr, lvh: Then I'm on the right track but just doing it wrong :)
14:12  lvh: joenp: Feel free to pastebin code.
14:12  ssbr: joenp: technically you could also do something clever with a for loop and iter()
14:12  engla: lvh: good, that was what I understood
14:12  ssbr: but yeah, paste code
14:13  ssbr: Can I claim offense?
14:13  lvh: ssbr: Well, it'd still involve a while loop, so not *very* clever
14:13  ssbr: I'm offended that my somewhat rough equivalent to "RTM" has been compared to physical violence
14:13  kerio: ssbr: there wasn't even a F!
14:14  yacek19: After installing python 2.7.1 for windows idle no longer works. It is because python cannot import Tkinter. DLL load failed because it's configuration is incorrect. Please, please help
14:15  lvh: ssbr: It seems to be the wikipedians all the time
14:15  lvh: ssbr: Maybe that's just sample bias :-)
14:15  ssbr: yacek19: Eee. This won't solve your problem, but, any chance you'd consider using a different editor? IDLE is mostly pretty bad, and this would be a handy way of dodging the actual problem instead of going through the process of fixing it. That sounds bad, but most things don't need Tkinter, so it might save you effort, and also force you to use a more awesome editor.
14:15  ssbr: lvh: ipatrol was totally different
14:15  ssbr: engla's mostly a pretty cool dude IIRC
14:16  yacek19: ssbr: I would like to use tkinter
14:16  lvh: ssbr: Really? Hm, my brain recalls mostly whining about non-issues
14:16  lvh: yacek19: Tkinter is optional at install time -- are you sure you didn't uncheck it?
14:16  ssbr: maybe it's just amicability fostered by familiarity
14:17  yacek19: Yes I am sure
14:17  ssbr: whoops, used up my big word quota for the day
14:17  lvh: yacek19: Did you have a previous version installed?
14:17  lvh: Typically shouldn't matter unless you have setuptools somewhere, but...
14:17  yacek19: Yes.2.7.0 works fine
14:18  ssbr: yacek19: can you show me the output of \Python27\python.exe -c "import sys; print sys.path"
14:18  ssbr: actually, also, how are you running IDLE?
14:20  cnf: lvh: mind you, i did start by saying i didn't get unicode in python yet
14:20  yacek19: Pasting code would be difficult. I am writing using Android mobile
14:20  ssbr: yacek19: OK, then don't bother
14:21  yacek19: I am running idle from right click menu
14:21  ssbr: yacek19: I can tell you what to look for -- is there anything from \Python26 in the list?
14:21  lvh: cnf: OK. The most enlightening document IMHO is joel spolsky's
14:21  lvh: cnf: Unicode in Python isn't really special
14:21  cnf: lvh: read it twice today
14:21  yacek19: There is none
14:21  lvh: cnf: We do it right, like Java and C#
14:21  lvh: cnf: There's a type for bytes, there's a type for unicode glyphs
14:21  lvh: Well, unicode code points
14:21  lvh: Well, unicode code units
14:22  lvh: But it's supposed to be unicode code points ;-)
14:22  aljosa: jorrit, ssbr:  'app' is a python module, i can import it and it has __file__. is there some situation when a module doesn't have __file__ attribute?
14:22  yacek19: The case is: I can't import tkinter, if I could, IDLE would start
14:22  ssbr: yacek19: you can try running \Python27\python.exe -c "import Tkinter" and verify it fails, to make sure it's Python 27 that's broken and you aren't trying to run IDLE on 2.6
14:23  ssbr: if that does fail, my next suggestion would be to look at the \Python27\python.exe -vc "import Tkinter" output to see if you can get a better handle on what fails. After that, I'm out of ideas
14:23  yacek19: Yes yes. I did that. I get DLL load fail
14:23  ssbr: yacek19: with -v ?
14:23  fabiocerqueira: how test in my django project if memcached is working correctly?
14:24  ssbr: aljosa: usually the only reason is that it is a builtin module.
14:24  yacek19: No
14:24  ssbr: yacek19: right, so do that and see if you can see exactly why it's failing
14:24  ssbr: (-v is verbose mode, and will have a lot of output)
14:26  yacek19: It says that Dll load failed: cannot run application because it's configuration is incorrect
14:26  chachan: Hi guys, I want to execute a function each 15 minutes, I'm trying to do it with threading.Timer but I can't figure that out, is that the best way to do it?
14:26  jorrit: That usually happens when you're missing the MSVC redistributables.
14:26  jorrit: yacek19, you can download and install those from the web for free.
14:27  yacek19: 2005 or 2008?
14:27  jorrit: yacek19, well don't know.
14:27  ssbr: chachan: well, usually not
14:27  jorrit: yacek19, depends on the dll but I would guess to start with most recent.
14:27  ssbr: yacek19: probably 2008, but you can check and/or download both to be sure
14:28  ssbr: jorrit: nah, the Python devs can be a bit behind MS
14:28  chachan: ssbr, what could be the best way?
14:28  ssbr: chachan: depends what, exactly, you want to do every 15 seconds, and what you want to do in the meantime, and how long the thing you want to do will take.
14:30  chachan: ssbr, Ok, I don't want to do anything else meanwhile, just that function every 15 minutes. And that execution takes less than a minute
14:30  ssbr: er, minute, yes
14:30  ssbr: maybe try the sched module. Your use case is simple enough for that
14:31  chachan: Ok, is that on standard?
14:31  chachan: I found it, thanks
14:37 --- elpargo_ is now known as elpargo
14:38  chachan: ssbr, but I need to "enter" each execution
14:38  chachan: I want to be "forever"
14:38  ssbr: ?
14:39  chachan: mm, I seeing that you need to specify each execution, am I wrong?
14:39  chachan: I'm*
14:40  Kruptein: What's the best way to use ssh with python?
14:40  ssbr: chachan: I don't understand what you're asking.
14:40  ssbr: Kruptein: possibly paramiko
14:41  Kruptein: ssbr: I tried paramiko but the problem is that with each exec_command() a new channel is opened, resulting in exec_command(cd www) followed by exec_command(ls)   giving as output the ls of the root folder :f
14:41  ssbr: chachan: are you unhappy that you can't specify "run every 15 minutes", but have to have each call schedule the next one?
14:41  Kruptein: instead of the www folder
14:42  chachan: ssbr, Ok, I want to run a function every 15 minutes, forever. I saw that sched module allow me execute every 15 minutes but I need to create each execution, so I don't thing it will be forever, did I make myself clear enough?
14:42  ssbr: chachan: it will be forever, provided you continually schedule the next one
14:43  ssbr: Kruptein: yeah, I don't know enough about paramiko to help with that
14:43  chachan: ssbr, mm, let me try it
14:43  ssbr: Twisted has a thing for SSH, but IIRC it's nasty
14:44  chachan: Kruptein, I have an example of paramiko, let me see if it's useful for you
14:44  Kruptein: chachan: send me please :)
14:45  Griffon26: I have some code dealing with horizontal and vertical line segments and I see I'm often duplicating the code for both cases. It deals with points that have .x and .y, and rects that have .top()/.bottom()/.left()/.right(). Any smart ideas how to prevent the duplication?
14:46  ssbr: Griffon26: you can create functions that operate in terms of the appropriate variables, in ways that would work for both x and y.
14:46  Griffon26: The only thing I can think of is to parameterize (sp?) the attribute getters in the same way for points and rects
14:46  chachan: Kruptein, I saw it, I do interface.exec_command("ls /folder/")
14:46  chachan: :-/
14:46  Kruptein: :p for such situation it is indeed a solution but for more complex tasks I'm afraid :D
14:46  ssbr: Griffon26: you'd call the function as foo(bar.top(), bar.bottom(), ...) or something
14:46  Kruptein: well you know what I'm just going to do that :p
14:47  Kruptein: chachan: any idea on how you can transfer a file from the ssh server to your local machine?
14:47  lokai: scp?
14:47  lokai: can't you just spawn a proc?
14:47  Kruptein: lokai  I tried scp objects.inv darragh@localhost:objects.inv   but that failed :D
14:47  Griffon26: ssbr: that's possible. I don't really like making such a big param list that is dependent on the algorithm in that function though
14:48  chachan: mm, I didn't try before, I' not sure if paramiko can help you with that
14:49  SmokeyD: hey everyone. I started a program using subprocess.POpen. I want to interact with that subprocess. If it prompts me for input, I want to write a response. So I use proc.stdout.read() but that locks up. Also proc.communicate() waits for the process to finish
14:49  SmokeyD: how can I read what the process has output up till now?
14:49  chachan: Kruptein, but you could use a little trick. I you use: cat file you could get the file at less it is binary
14:49  chachan: you could use*, sorry for my english
14:49  SmokeyD: so I can subsequently use proc.communicate('response') to give it the input it needs?
14:50  varnie: hello!
14:50  chachan: Kruptein, did you get it?
14:50  Kruptein: chachan: :p  so you mean cat filename  and then?
14:51  chachan: Kruptein, well, you have it in: stdout.readlines()
14:51  Kruptein: chachan: smart :D
14:52  chachan: it will be a mess if the file is binary
14:53  Kruptein: chachan: it won't be a binary :p I'm creating/updating a text-editor and I don't think someone is going to open a binary file in a text-editor
14:54  chachan: Kruptein, great ;)
14:54  varnie: could you help me with cx_Freeze? i have a problem: in my project i specified absolute path to some my resources. it's fine. but after i "deploy" my project with cx_Freeze, these resources got into zip-archive, so, that path became incorrect. how to fix it gently?
14:54  Kruptein: chachan: okay it works :p thanks!
14:54  chachan: Kruptein, np
14:55  ssbr: varnie: well, don't use absolute paths
14:55  varnie: ssbr, okay, i have to try relative one.
14:59  Griffon26: ssbr: I'm thinking of putting a rotation projection in the point and rectangle classes that can be reset at the end of a function. Similar to OpenGL's projection matrices, but simpler.
15:00  ssbr: Griffon26: just so you can treat ys the same way you treat xs?
15:00  ssbr: that's messy.
15:00  Griffon26: why is that messy? I think it's a lot cleaner than the other two alternatives
15:01  ssbr: Griffon26: computationally intensive, could potentially lose precision depending on how you do it
15:01  ssbr: considering you could just define an internal function, inside your bigger function, to do it...
15:02  Griffon26: ssbr: a function with an unlimited number of parameters, because the function operates on lists of points and rectangles
15:02  lvh: Griffon26: Why not simply have an iterable as an argument?
15:03  lvh: Griffon26: You can do it, see thte tutorial, 4.7.4
15:03  lvh: Griffon26: However, I've seen it be a mistake in hindsight a few times
15:03  SmokeyD: hey everyone, why does subprocess.POpen(['foo.exe'],stdin=subprocess.PIP,stdout=subprocess.PIPE).stdout.readline() lock up in idle?
15:03  papna_: SmokeyD: 1) Don't post code you've never ran.
15:03  Griffon26: lvh: ssbr was suggesting I pass the attributes (like x and y) of those points to the function
15:03  papna_: SmokeyD: readline blocks
15:04  Griffon26: so I can swap them in another call if I want to do stuff vertically i.s.o. horizontally
15:04  ssbr: Griffon26: wouldn't be hard
15:04  SmokeyD: papna_: I have ran the code. That is how I found out
15:04  lvh: Griffon26: If you're doing multiple points, I would expect iterables of x, y tuples
15:04  ssbr: Griffon26: xthing = foo(p.x for p in points) ; ything = foo(p.y for p in points)
15:04  SmokeyD: papna_: how can I the read from stdout while the process hasn't exited yet?
15:04  lvh: Or, even better, iterables of x, y namedtuples so you can later use a real object and it won't be annoying
15:04  papna_: SmokeyD: No, if you ran the code you posted, you'd see AttributeError.
15:05  papna_: SmokeyD: readline doesn't wait for the process to exit. It waits for stdout to have a newline.
15:05  papna_: SmokeyD: It's blocking until it finds \n
15:05  papna_: SmokeyD: You can use read to read instead of readline some number of bytes
15:05  cheater99: what are namedtuples?
15:05  Griffon26: lvh: the swapping happens within the iteration
15:05  cheater99: oh right i remember, there was something like that
15:06  lvh: Griffon26: Okay. I don't see the problem
15:07  Griffon26: I'll put some code online
15:08  Griffon26: http://paste.pound-python.org/show/407/
15:08  Griffon26: what I'm trying to do is get rid of the if p2.x == p3.x:
15:09  Griffon26: because as it is now I'd have to implement the else part as a copy of the then with x's/y's swapped (same for things like .left())
15:10  lvh: Griffon26: You're aware enumerate exists right
15:11  lvh: Griffon26: I don't really understand what that code does
15:11  Griffon26: lvh: yeah
15:11  lvh: Griffon26: Well, actually, I mostly do
15:11  Griffon26: lvh: it's about a series of points that describe a patch consisting of horizontal and vertical lines
15:11  lvh: I'm not sure why you want to get rid of the p2.x == p3.x
15:12  Griffon26: lvh: this moves line segments so they have some distance from the rectangles
15:12  Griffon26: the current code only implements moving of vertical segments
15:12  Griffon26: the else would handle horizontal segments
15:12  SenoraRaton: And what is the problem?
15:13  Griffon26: that that code would be identical if it weren't for a swap for anything related to an axis (.x, .y, .left(), etc)
15:13  lvh: Griffon26: Okay, so write that part in a function that takes some arguments
15:14  lvh: Griffon26: name the axes something that isn't tied to a particular direction
15:14  lvh: Griffon26: Pass it operator,attrgetter("x") for example
15:14  Griffon26: that sounds good
15:15  Griffon26: I was considering setting up an implicit rotation, so accessing .x would actually get .y for instance.
15:15  lvh: eghg
15:15  Griffon26: I'll think about the attrgetter
15:16  lvh: I'm going to go with "no"
15:16  lvh: I want .x to mean .x, not "occasionally .y"
15:16  Griffon26: lvh: do you know opengl a little?
15:16  lvh: Griffon26: I sleep with the orange book under my pillow!
15:16  Griffon26: lvh: well then, similar to the projection matrix there
15:17  Griffon26: but only for swapping x/y
15:17  lvh: Griffon26: That's different: projection matrices do things on new objects
15:17  lvh: Anyway, I would abstract that behavior into a class perhaps
15:17  lvh: Or, like I said, a partially applied function
15:17  swarog: isnt this argparse over-complicated a bit?
15:18  kerio: lvh: isn't it a bit uncomfortable?
15:18  lucian: i was wondering if there are any gotchas in subclassing dicts
15:18  lvh: lucian: Yes, don't do it
15:18  kerio: i prefer my pillow to be soft
15:18  lvh: swarog: Maybe, depends what you want to do
15:18  lucian: lvh: why, exactly?
15:18  varnie: is it correct that all my resources get into lib folder, generated by cxx_Freeze ?
15:18  kerio: lucian: because C methods in the stdlib will access the real dict
15:18  varnie: cx_Freeze*
15:19  lvh: lucian: That's part of my "don't subclass things, use composition instead"
15:19  kerio: not to mention that stuff like update() acts without passing through __getitem__
15:19  lvh: lucian: If you have to ask that question, that means you're worrying about it. A composed object will always have semantics you understand
15:19  swarog: lvh: simple args parsing as getopt does. argparse syntax looks kinda funny
15:19  lucian: kerio: that wouldn't be an issue for me, i'm populating the dict anyway
15:19  lvh: lucian: (Also the problems that kerio is mentioning)
15:19  kerio: lucian: with what
15:19  lvh: lucian: With a composed object, you always know exactly what the code is doing and importantly what it's not doing
15:19  lucian: kerio: i'm mostly just adding data to the dict
15:20  lvh: lucian: What behavior is in the subclass
15:20  lucian: s/adding data/adding methods/
15:20  lvh: lucian: Okay, semantically, why is it a dict
15:20  kerio: lvh: on the other hand, my AwesoemDict that sets self.__dict__ = self and self.__call__ == self.__getitem__...
15:20  lucian: lvh: because it's an .ini file
15:21  lvh: lucian: No, that explains semantically why it's a depth-2-nested mapping
15:21  lucian: lvh: yep. and it's a dict, too
15:21  lvh: lucian: Why's that
15:21  lucian: lvh: dicts are a convenient mapping
15:21  lvh: lucian: I'm not saying "don't use dicts", I'm saying "don't sublcass it"
15:22  lvh: lucian: Which is part of a general argument about composition almost always being favorable to inheritance, especially in languages like Python and Ruby where inheritance can mean inheriting a whole lot of customized behavior
15:22  Griffon26: great, attrgetter and methodcaller is what I needed.
15:22  lvh: Griffon26: You're welcome, have fun
15:23  kerio: lucian: you want a mapping
15:23  lucian: lvh: hmm. so would a UserDict be more convenient
15:23  lucian: kerio: yep. so why not dict?
15:23  kerio: why dict
15:23  lvh: lucian: No, UserDict has the same problems, the fundamental problem is inheritance, not which type
15:23  lucian: kerio: because it's fast and native
15:23  kerio: subclass object and add __getitem__
15:23  lucian: lvh: userdict composes a dict
15:23  lucian: kerio: that is an option, yes
15:23  lvh: lucian: Yes, and how do you use it
15:24  lvh: lucian: I understand how userdict works and why it composes a dict
15:24  kerio: lvh: hmm... would having self.__getitem__ = self.dict.__getitem__ work?
15:24  lvh: mostly because when it was written, you couldn't actually subclass builtin types
15:24  kerio: where dict is an underlying dict
15:24  lucian: lvh: i know
15:24  Griffon26: lvh: btw, where should I have used enumerate? Or did you mean I should have made tupleindex similar to enumerate?
15:24  lvh: lucian: so don't tell me ;-)
15:24  lvh: Griffon26: The latter
15:24  tazle: lvh: inheritance isn't any better in Java
15:24  lucian: kerio: i don't think so, __getitem__'s self would be self, not self.dict
15:25  lvh: tazle: That's true, but metaclass programming introduces a whole host of new kinds of crazy
15:25  Griffon26: lvh: yeah, you're probably right. Not sure why I didn't.
15:25  kerio: yeah but it's not a function in class declaration, it's added post-construction
15:25  kerio: and it's already a bound method
15:25  lucian: kerio: right
15:25  tazle: lvh: yes - instead Java has long, long, long, long inheritance chains
15:26  lvh: True :-)
15:26 --- RichGuk_ is now known as RichGuk
15:26  tazle: especially in Commons-related code, and MINA
15:26  lucian: the other reason to use dict is so that users can do whatever they want to it
15:26  lvh: lucian: Anyway, in short: please don't inherit from dict, compose one and implement __getitem__
15:26  lvh: lucian: That's just as true for a composed dict
15:26  lvh: When users *want* the dict, they can get it.
15:26  lericson: why not inherit from dict?
15:26  lvh: lericson: Predictability
15:27  lucian: lvh: there are many things that dicts do. users might expect those things
15:27  lvh: lericson: Exact knowledge of what you are and are not implementing
15:27  kerio: lvh: why can't i set self.__getitem__? :(
15:27  lvh: lucian: And the composed dictionary will do all of them, because it is a dict.
15:27  lericson: lvh: sorry, I haven't read the backlog - but you're essentially saying that the dict methods don't let you be lazy and just override a few methods, yes?
15:27  lericson: lvh: i.e. ye ole' UserDict argument
15:27  lericson: because then I am content
15:27  lvh: lericson: I think he wants to add behavior, not modify it
15:27  lucian: lvh: but why bother reimplementing it?
15:27  lucian: lvh: yes, i do
15:28  lericson: oh, not talking about any specific case, sorry - should've mentioned.
15:28  lvh: lucian: You're not reimplementing anything
15:28  lvh: What would you be reimplementing
15:28  lucian: lvh: i'm reimplemeting __getitem__ and update, etc.
15:28  lvh: lucian: How is that reimplementing?
15:28  kerio: so what's the problem
15:28  lvh: You're delegating to something else
15:29  lvh: There's not currently a thing that says "okay ask this thing how to get an item"
15:29  lucian: lvh: ok, delegating. but it's still extra indirection and code
15:29  lucian: lvh: i have to delegate all of set(dir(dict)) - set(dir(object))
15:31  lvh: lucian: Only if you actually want all behavior dict defines and will ever define
15:31  lvh: I find that hard to believe since a lot of it is implementation detail
15:31  lvh: Furthermore, that can quite easily break code down the line
15:31  lucian: lvh: i want a lot of it
15:31  lvh: Case in point: unittest suddenly grew a skip function
15:31  lvh: This broke everything that stupidly subclassed TestCase
15:31  lvh: And implemented skip
15:32  lvh: (This is why skip is named awkwardly)
15:32  lucian: lvh: i see
15:32  swarog: hmm, python 2.7 is not available even in debian lenny backports
15:32 --- izibi_ is now known as izibi
15:32  lucian: lvh: that is a good point
15:32  lvh: lucian: Yes, importantly: you want a *defined* subset of it
15:32  lvh: lucian: So define it
15:32  lvh: lucian: Define it programattically if you must, that's not a lot of work
15:32  lucian: all i'm adding is a different constructor and two methods for serialisation to .ini
15:32  kerio: lucian: does it work?
15:33  lucian: kerio: yep
15:33  kerio: so why are you complaining here
15:33  lucian: kerio: i was wondering if subclassing is a good idea, that's all
15:33  kerio: lvh: http://paste.pound-python.org/show/408/
15:33  lericson: lvh: Here's why you subclass dict: dict(o)
15:33  kerio: ain't that beautiful
15:34  lvh: lericson: Inconsistent constructor expressions?
15:34  lericson: kerio: breaks the expectation of getattr/delattr to raise AttributeError
15:34  lericson: lvh: huh? no
15:34  kerio: lericson: shame
15:34  lvh: lericson: Furthermore, he wants something that is semantically an ini file
15:34  lvh: I would expect the constructor expression to take a filelike object or a path
15:34  lucian: i'll show you the hack in a sec, let me dig the link
15:35  lericson: I think you missed my point entirely, dict() is a type. when called with a mapping-like argument, it creates a dict out of that mapping-like object.
15:35  lucian: https://github.com/lucian1900/python-utils/blob/master/configdict.py
15:35  lericson: if you make your own mapping-like object, you can't really make it work with dict() as dict itself does, can you?
15:36  lvh: lericson: I don't think I missed your point: he wants to make something which is an object repr of an ini file
15:36  jmy: What is the right way of checking for None: if not variable or if variable is None? Is there any difference?
15:36  lericson: I... am not him? :/
15:36  kerio: jmy: they're completely different things
15:36  lvh: lericson: As a result, I think that calling it with filelikes or paths is a more reasonable thing to do
15:36  VladDrac: jmy: if not variable tests more than just 'None'
15:36  kerio: there's a whole world of difference
15:36  lvh: lericson: I'm arguing for using composition in his case
15:37  jmy: kerio, please explain.
15:37  VladDrac: 0 and "" may be valid but are also False in a boolean context
15:37  lvh: lericson: I'm sure you can find specific examples where inheritance looks a lot easier
15:37  kerio: jmy: if not foo checks for the boolean value of foo
15:37  cnf: m00
15:37  lucian: lvh: i think i'll go with the ABCs
15:37  lvh: lericson: I don't think, in *this case*, dict's behavior when called with Mappings is a strong argument
15:38  lvh: (Also I think a cleaner language would add classmethods instead of magically work on a bunch of things that aren't mappings)
15:38  jmy: Can you give me a case where this breaks so that I can understand better?
15:38  lvh: jmy: s = ""; if not s:
15:38  lericson: lvh: mm, okay but I was sort of arguing about a hypothetical default case, ah nvm
15:38  lvh: jmy: There's a whole bunch of things that are false but not False
15:39  lvh: err
15:39  lvh: false but not None
15:39  lvh: jmy: Furthermore, explicit is better than implicit
15:40  kerio: lvh: there's also a whole bunch of things that are false but not False
15:40  kerio: not sure where 0 stands there, though
15:40  lvh: kerio: Well, yes, but that's irrelevant here
15:41  ssbr: kerio: 0 is both false and False!
15:41  lvh: ssbr: Only with English "is"
15:41  kerio: >>> 0 is False is False
15:42  ssbr: right
15:42  ssbr: kerio: yer face
15:42  genjix: yer mum
15:42  lvh: Anyway, False == 0 is not a crude hack
15:42  lvh: it's simply the iverson convention
15:42  kerio: False == 0 makes perfect sense
15:43  genjix: damn that's nonsensical
15:43  genjix: didn't know that.
15:43  lucian: kerio: i wouldn't say that, but it is a convention indeed
15:43  lucian: python is particularly consistent with booleans, unlike, say, ruby
15:43  locojay: hi do you guys know a python lib for shingling / simhash
15:43  lvh: http://arxiv.org/abs/math/9205211
15:43  ssbr: this stuff about is and so on has given me a perverse idea
15:43  lvh: Tell it to Knuth
15:44  genjix: is there a pythonic function to constrain a value to a range?
15:44  genjix: like min/max works
15:45  lvh: genjix: use min, max
15:45  lucian: genjix: x < value < y
15:45  lvh: lucian: I don't think that's what he means
15:45  lucian: oh
15:45  bazz: say soc is in state CLOSE_WAIT, what should (r,w,e) = select.select([soc],[][soc]) return?  (right now it's returning doc in r, which seems wrong to me)
15:45  ssbr: def is_even(n): return eval(('(' * n) + "True is False " + ' '.join(["is False)"]*n))
15:45  lvh: min(10, max(100))
15:45  genjix: heh nice :)
15:45  lvh: err
15:45  lvh: max(x, 100)
15:46  ssbr: the clamp() one-liner is so great.
15:46  lvh: Obviously if you want a continuous range in R you'd switch max and min :)
15:47  genjix: yeah clamp but doesn't exist. oh well... was just wondering.
15:48  lvh: genjix: It has been suggested a few times
15:48  lvh: genjix: However, people generally ocnsider the min,max idiomatic enough that it stuck
15:48  perplexa: ssbr: !(n%2) ?!
15:49  lvh: perplexa: He's being purposefully obstructive
15:49  ssbr: perplexa: but that wouldn't be nearly as deliciously perverse
15:49  genjix: well now I know the min/max trick, it's simple enough.
15:49  genjix: but clamp would look nicer
15:49  perplexa: ssbr: pff :)
15:49  ssbr: genjix: just define a clamp function
15:49  kerio: clamp = lambda m, x, M: min(m, max(x, M))
15:50  ssbr: kerio: is it too much to ask you to use "def"? :<
15:50  kerio: it is
15:50  genjix: that's like saying define a min function or define a quicksort function or define a make coffee function ;)
15:51  tos9: ssbr: def get_clamp() : return lambda m, x, M: min(m, max(x, M))
15:51  ssbr: genjix: nope.
15:51  tos9: ssbr: did I do it right
15:51 * ssbr stabs tos9
15:51 * ssbr stabs tos9 again. and again. and again.
15:51  kerio: genjix: coffeeeee
15:51  lericson: def getIsClampedWithNumber(x)
15:51  lericson: did i do it right
15:54  genjix: xwrap = [x]; xwrap._eq_ = lambda m, x, M: min(m, max(x, M)); (xwrap == xwrap)(1,2,3)
15:54  genjix: x = xwrap[0]
15:54  tos9: Yuck.
15:55  lericson: genjix: neat!
15:55  lericson: although I doubt it works :p
16:04  alperkanat: hey there.. calendar.LocaleTextCalendar(0, "tr_TR.utf8").formatweekday(3, 3).lower() + u"foo" gives me UnicodeDecoreError
16:04  alperkanat: can someone please help me with this?
16:06 --- cubicle17 is now known as figowen
16:07  nosklo: alperkanat: calendar.LocaleTextCalendar(0, "tr_TR.utf8").formatweekday(3, 3).decode('utf-8').lower() + u"foo"
16:07 --- figowen is now known as cubicle17
16:07 --- piken_train is now known as piken
16:08  alperkanat: nosklo: UnicodeDecodeError: 'utf8' codec can't decode byte 0xc5 in position 2: unexpected end of data
16:08  lvh: alperkanat: The thing you had wasn't UTF-8
16:09  alperkanat: lvh: what thing?
16:09  alperkanat: type(calendar.LocaleTextCalendar(0, "tr_TR.utf8").formatweekday(3, 3)) -> <type 'str'>
16:09  pielgrzym: hi
16:10  alperkanat: i'm using py2.7.1 btw
16:10  engla: alperkanat: what is the calendar module and what does its documentation say about encoding of the output?
16:10  alperkanat: engla: it's python's calendar module
16:10  pielgrzym: I've just found a nifty way to reverse string: s= "abcd" s[::-1] -> dcba - how does this work??
16:10  engla: alperkanat: oh I see
16:10  pielgrzym: I create a double list copy or wha?
16:10  jorrit: pielgrzym, what do you mean by 'how does this work'?
16:10  alperkanat: it says that it returns unicode object but it's always returned as str as type.. i've also tried this with py3k
16:11  pielgrzym: jorrit: is this some list trimming trick or a hard coded behaviour?
16:11  jorrit: I don't know what you mean by 'list trimming trick' but this is a python feature.
16:12  pielgrzym: jorrit: I meant this syntax to slice stuff out of lists
16:12  alperkanat: the documentation says: If this locale includes
16:12  jorrit: pielgrzym, yes? What about it?
16:12  alperkanat:  |  an encoding all strings containing month and weekday names will be returned
16:12  alperkanat:  |  as unicode.
16:12  pielgrzym: jorrit: and thought it's a kind of trick - try out [::-2] etc
16:12  alperkanat: but it doesn't
16:13  jorrit: pielgrzym, it is not a 'trick'. It is just a python feature. It is how slices work.
16:13  engla: alperkanat: I see, then it's buggy and broken. That's bad.
16:13  alperkanat: engla: it's the same in py3k?
16:13  pielgrzym: jorrit: ok, like list[:] makes a real copy of list etc?
16:13  jorrit: yes
16:14  pielgrzym: jorrit: ah, list[::2] is a slice with stride (returns every nth elem)
16:15  pielgrzym: and it works back way with -1 :D soo cool :)
16:15 --- Vorpal_ is now known as Vorpal
16:15  alperkanat: type(w.formatweekday(3, 3)) -> <class 'str'>
16:15  engla: alperkanat: I don't know. the bug must depend on the locale used
16:15  alperkanat: this is what it returns in py3k
16:15  alperkanat: so it still doesn't return a unicode object
16:16  engla: alperkanat: 'str' in Py 3 is the unicode of Py 2
16:16  alperkanat: oh i see
16:17  xian: Hi, this is embarassing I know, but I can't find the syntax for list comprehensions with multiple variables. I want something like [foo(x,y) for x in blah, y in qux]
16:17  Krishnandu: Hi, I want to develop PyQt apps using Eclipse, installed PyDev, but not getting code completion or code suggestion for PyQt apps. Please help
16:18  engla: alperkanat: it's also possible that your locale is broken, but IMO any API that returns either str or unicode is broken. Unicode or exception is much much better
16:19  alperkanat: Unicode or exception?
16:20  engla: I mean raise an exception on error instead of giving less than useful results
16:20  alperkanat: i can post the full traceback
16:20  engla: No, it's fine, we know what the problem is
16:21  tr3x: xian [foo(x,y) for x,y in zip(blah, qux)]
16:21  alperkanat: pff this is really awfull because i can't keep developing my project
16:21  alperkanat: this is a django project and i can't port it to py3k for now
16:21  engla: alperkanat: now start working around the bugs in Python I'm afraid.
16:22  engla: alperkanat: you get a bytestring back, can you find out what encoding it uses?
16:23  alperkanat: the bytestring comes directly from python (2.7.1).. i'm not sure about its encoding
16:23  alperkanat: my locale is tr_TR.utf8 too
16:23  alperkanat: but it behaves the same if i go back to C locale
16:23  engla: What I can see, the calendar module is buggy
16:23  xian: tr3x: Thanks, but this is not what I want. I want something like the cartesian product i.e. foo(x,y) should be computed for *every* combination of x and y.
16:24  lvh: xian: itertools.product
16:24  xian: Okay, so this is impossible to do with pure list comprehensions?
16:24  alperkanat: hmm
16:24  engla: alperkanat: the calendar module uses the locale you specify for LC_TIME, but not for LC_CTYPE (governs the encoding). I can't say for sure that this is bad but maybe
16:25  alperkanat: LC_* = C now
16:25  alperkanat: but it behaves the same
16:25  alperkanat: although i set the tr_TR.utf8 locale in python by doing LocaleTe....(0, "tr_TR..."
16:27  thm: how would I check in my code whether the textwrap.wrap() method accepts the 'drop_whitespace' keyword?
16:27  engla: alperkanat: I don't do web development, but isn't this locale stuff useless for web applications (if you need multiple languages in an application)?
16:28  alperkanat: engla: yes but LocaleTextCalendar is not aware of the application's language setting so i was setting it this way
16:31  engla: alperkanat: do you have the tr_TR.utf8 locale on your machine?
16:32  alperkanat: yes
16:33  engla: well I don't know how to help you with django interactions etc. Take a look at the code in the calendar module and see if you can troubleshoot it
16:34  alperkanat: ok thanks
16:34  tr3x: xian [(x,y) for x in foo for y in bar]
16:34  Miff: with the pexpect module in python, theres an issue where when you pipe a password to a program, it echoes the password back in cleartext to you. The class docs state that the solution for this is to set delaybeforesend to > 50ms, but even at 1000ms i still get the password i pipe in cleartext either in stdout or to a file log. Anyone know how to fix this?
16:36  Miff: described here: http://pexpect.sourceforge.net/pexpect.html#spawn
16:38  engla: thm: try create a TextWrapper with the keyword and catch the exception
16:39  byuva: A quick question about equality
16:40  byuva: mystr = "a"
16:40  byuva: mystr is "a" (evalutes to True)
16:40  xian: tr3x: Thanks, that's what I was looking for
16:40  byuva: mystr = "a b"
16:41  byuva: mystr is "a b" (evalutes to False)
16:41  engla: byuva: 'is' is not equality, it's identity
16:41  byuva: why does having a space in my string change the result?
16:42  TheSheep: byuva: short strings are interned
16:42  engla: byuva: that's an implementation detail
16:43  Mmike: if I do: import scipy <- that works fine. But if I do "from scipy.misc import imread" i get ImportError: cannot import name imread
16:43  thm: engla: ok
16:43  byuva: I thought with immutables there wasn't much difference between equality and identity?
16:44  thm: byuva: there can of course be two immuaables with the same value
16:44 --- kerio1 is now known as kerio
16:45  byuva: I've been using Python for quite a while and I must admit that the fact that identity holds for integers and short strings but not long strings mystifies me
16:45  NelleV: Mmike: from scipy import misc
16:45  NelleV: Mmike: then misc.imread
16:45  NelleV: Mmike: imread is not a module. Misc is the module
16:46  Mmike: NelleV, why can't I do it like this? Funny thing is, on my ubuntu machine I can do it, no prob. On debian lenny (test machine) I get this error.
16:46  NelleV: Mmike: o_O
16:47  Mmike: NelleV, ? :)
16:47  NelleV: Mmike: I don't think you can do that on your ubuntu machine... I don't think it was ever possible to do that, but I might be mistaken
16:47  engla: byuva: identity only holds for small integers, and it's nothing we can rely on
16:48  nosklo: byuva: it's a quirk that comes from cpython optimization. small integers and some strings are "cached" so you don't have to allocate lots of identical objects
16:48  Mmike: >>> from scipy.misc import imread
16:48  Mmike: >>>
16:48  Mmike: no error
16:48  nosklo: byuva: It shouldn't matter because integers and strings are immutable anyway
16:48  nosklo: byuva: you shouldn't rely on it though
16:48  NelleV: Mmike: arf, indeed it works
16:48  NelleV: probably something due to python version
16:49  SenoraRaton: I have a class,(Main) and I have two instances of "lower classes"(Do stuff)  ( Provide stuff)  How would I refrence (Provide Stuff) from (Do stuff)?   I tried main.(provide stuff).variable, but it tells me main is not def
16:49 --- metasyntactic is now known as kunwon1
16:50  Kuba: Anyone gere studying at Oxford? Or used to? ;)
16:50  hariom: can anybody suggest channel for google finance api (or data apis)? I am trying to use Python for accessing finance API
16:50  byuva: engla and nosklo:  thanks.   I must say I am more confused than ever on when to use is and ==.  I've been trying to avoid == as it can lead to strange stuff like 0.0 == False
16:51  byuva: I thought with immutables "is" should be the right thing to use.
16:51  papna_: byuva: Never ever ever ever compare to Flase with "is" or "=="
16:51  papna_: byuva: No, that isn't remotely the case.
16:51  engla: byuva: only use is for identity.. None is the only singleton that comes to mind
16:52  byuva: What is the best way to make sure a variable is False and not something else?
16:52  engla: byuva: if it's the object called False then you use 'is'.. However this is never an interesting question.
16:53  engla: byuva: just say  "if not x:"
16:53  byuva: engla: but what if I am worried that it it could be None?
16:53  hariom: How to access Google Finance - Stock price using Python?
16:54  thm: byuva: you can test None with 'is', no problem
16:54  engla: byuva: why worry? :-)  No, seriously, why do you worry?
16:55  byuva: engla:  Basically I am trying to indicate tri-state data.  It is either True, False or we don't know indicated by None.
16:56  byuva: engla:  Which is horrible I know because None == False
16:56  engla: byuva: that's not correct. (None == False) evaluates to False
16:56  nosklo: byuva: not really
16:56  byuva: whoops you are right
16:57  engla: byuva: so..  'if x is None: .. elif not x: .. else: ..'
16:57  engla: 'is' is back! because Python says None is a singleton
16:58  byuva: So there is only one instance where I should use "is" with an immutable object, None?
17:00  engla: there are cases where identity matters, then you also use is
17:00  mcantor: byuva: Or you could do handlers = [None: _do_if_none, True: _do_if_true, False: _do_if_false]; handlers[tri_state_data]()
17:01  byuva: For some reason I've always viewed immutable objects as singletons but clearly that is wrong.  What would be the harm in treating all immutable objects as such? (especially since some of them already work this way)?
17:01  eggy_: mcantor: s/[/{/, but that's bad in any case, as it wouldn't work for false values that are not False, or true values that are not True
17:01  nosklo: byuva: sometimes you want to create an object, and then check if you have the object you created yourself
17:01  nosklo: byuva: it's rare
17:02  mcantor: eggy_: Oh, that's a good point.
17:02  nosklo: byuva: but then you'd use "is"
17:03  engla: byuva: then all immutable objects have to be kept in a table; each time you create a tuple you need to look it up; then add multiple threads.
17:03  thm: byuva: you could also throw an exception for the third (None) case.
17:04  nosklo: byuva: if you find yourself trying to differentiate False from None too much, you should rethink your API
17:05  byuva: nosklo:  yes, I am not happy with such dangerously similar values being used but thought -1, 0, 1 was kind of ugly as well
17:05  nosklo: byuva: well, what are you writing?
17:05  engla: byuva: A,B,C = object(), object(), object() ; now use 'is' :-)
17:05  nosklo: byuva: can't you return True/False and raise exception instead of None?
17:06  thm: nosklo: that I was suggesting
17:06  byuva: I have a dataset that I need to move between a lot of different code.
17:06  byuva: Indicating True, False or "we don't know" (None).  All equally valid values
17:07  byuva: (ie None is not an exception)
17:07  b_52light: hi guys i have installed python2.6 manually in debian lenny
17:08  b_52light: i removed it
17:08  b_52light: but still when i call python it invoque version 2.6
17:08  b_52light: how could i switch back to 2.5 version
17:08  Segaja: hi, i have a list of a binary string and want to flip one bit (elment) of it
17:09  byuva: engla, nosklo:  There are times where I've screwed up and instead of having True, False or None I get an integer, string etc.  So in my code I want to always make sure that when I think something is False it is the Boolean value False and nothing else
17:10  engla: byuva: that I understand
17:10  byuva: (I realize that with Duck typing this is a bit discouraged but I think there is a place for readily determining if something is in fact False)
17:11  kerio: byuva: why do you even need to check that
17:11  engla: byuva: the flattening you want to do is simply   x if x is None else bool(x)
17:11  kerio: oh, tribool
17:11  engla: I see the problem myself.. you serialize something and for your boolean flag you have [] instead of a bool
17:12  nosklo: byuva: fix your api instead
17:12  nosklo: byuva: don't have functions that return None and False meaning different things
17:13  botanicus: Hey guys, I guess I'd need some help with Python's pack. I'm use to Ruby and there I'm getting from ["0"].pack(">H") irc://irc.freenode.net:6667/#¬†=> "\x00", while in Python from struct.pack('>H', 0) irc://irc.freenode.net:6667/#¬†=> '\x00\x00'. What is the difference? I'm struggling to find a good docs for it. Thanks.
17:15  byuva: noskla:  any suggestions for a better way to represent tri-state data?
17:16  thm: use 41, 42 and 43.
17:16  nosklo: byuva: depends on the data
17:16  nosklo: byuva: you have to be more specific about what your function does and what it is returning
17:17  nosklo: botanicus: what's this for? What are you writing?
17:17  engla: botanicus: on the same machine?
17:17  botanicus: engla: yes
17:17  botanicus: nosklo: I'm writing AMQP client in Ruby, and I'm looking into a Python's one (Pika)
17:18  nosklo: botanicus: I don't know ruby, but python one is correct, since unsigned int is 2 bytes
17:18  nosklo: er
17:18  nosklo: botanicus: unsigned short
17:18  txdv: hello
17:19  byuva: engla:  Dynamic typing is great but it still seems like there should be a way to quickly determine if in fact the Boolean value False without resorting to type(myvar)
17:19  txdv: C, Ruby and other languages have this inline if else condition (var ? true : false)
17:19  txdv: does python have something like that
17:19  txdv: ?
17:19  engla: byuva: did you see my comment on the flattening above?
17:19  papna_: txdv: "a if condition else b"
17:19  nosklo: byuva: no, you're mistaken. Type is not good for that
17:19  papna_: txdv: Actual if statements are generally preferred.
17:19  byuva: nosklo:  what is the best way to determine if a variable is the Boolean value False?
17:19  nosklo: byuva: the best way is to *not need that*
17:20  botanicus: nosklo: unsigned short? In Ruby doc, there's "H ‚Ä¶ hex string (high nibble first)"
17:20  papna_: byuva: Why would you want that for?
17:20  engla: botanicus: that might be the problem.. H is unsigned short in the python API :-)
17:20  engla: botanicus: help(struct)
17:20  papna_: byuva: That's not really the usage of False.
17:20  nosklo: byuva: please tell the tale about why you need it - what your function does and what it returns - so we can suggest a better way of writing it -- one that doesn't need what you're describing
17:20  nosklo: byuva: please don't ignore that request -- really, tell me -- what does your function do?
17:21  botanicus: engla: I see. I'd expect that this will be same everywhere. But as it's not the first difference, then probably not at all :)
17:22  byuva: Basically I am writing something with someone new to Python.  I've been burned several times because I've gotten something back from his functions that I thought was in my tri-state data (True, False, None) (yes, even "valid data has issues) but was instead a string, 0.0, etc
17:23  txdv: papna_: is that example a one liner or not?
17:23  txdv: papna_: o wait
17:23  txdv: ok thank you
17:23  txdv: :)
17:23  byuva: basically I am not sure the data I am getting back is even in the format I want
17:24  plwert: is there a way to get a list of a dict's values with a guaranteed order of the keys? (I have many dicts which contain the same keys and want to do something with the values, so I need a way to retrieve the values in the same order)
17:24  Habbie: plwert, sorted(d.items())
17:24  byuva: nosklo:  For my own sanity reasons how do I make sure the data returned to me is really True/False and not some string, number, etc that == True, False?
17:24  plwert: habbie: thanks
17:24  tori: I'm tempted to migrate to argparse for its extensive functionality, but the fact that it doesn't support argument groups within mutually exclusive argument groups puts me off. What kind of alternatives do I have?
17:25  mindrones: hello, question: if inside a while I do the copy of a list to work on it, does python take care of reusing the list I use to do the copy or I have the risk of filling the memory of copies?
17:25  nosklo: tori: change your requirements?
17:26  nosklo: tori: write a custom parser?
17:26  tori: nosklo: a custom parser would just add a level of complexity to the project that I'd rather not get into.
17:27  tori: I wish I had enough time to submit a patch to argparse.
17:30  engla: byuva: what does your collaborator indend with those return values?
17:30  byuva: engla:  We have all sorts of code we run them through mainly to generate stats
17:31  byuva: engla:  Basically the issue is that I am expecting my data to be True and False (we'll ignore None for the moment) but a lot of other things are == to those Boolean values. Is there any way to detect we are really getting True, False values without using type()
17:31  engla: byuva: why do you want to detect that? If that's the interface, your partner's code should better return True/False
17:32  kerio: byuva: what are you doing? what's the function returning the tristate doing?
17:32  engla: byuva: if you are working with "generalized" True/False boolean values then flatten the result to what you expect
17:32  byuva: we have hundred of functions dealing with this tri-state data and are constantly writing new ones
17:32  kerio: or just treat None as a special case - as it should be
17:33  kerio: byuva: yeah, but what are the three states
17:33  engla: byuva: look, in Python if you  need x to be an int, you don't start asking for what type x is, you just do int(x) and you have it
17:33  engla: :-)
17:33  engla: byuva: if you want to enforce an interface, write unit tests..
17:33  cwillu_at_work: byuva, foo is True; foo is False; foo is None; will do what you want, but you really shouldn't have to care
17:34  engla: byuva: all of this is still far too fuzzy for us to be able to really guide you in what to do
17:34  byuva: Yes ,but we are writing this stuff far faster than we should be and things get screwed up.  I was expecting a Boolean value and got an empty list instead but because it evaluated to False I get what look like valid results that can take hours to sort out
17:34  Miff: fout.write("Syncing %s ..\n") % reposBase <- whats an alternative to this wrongness?
17:34  cwillu_at_work: if you care about getting True as opposed to a tru'ish object, you're doing something wrong.
17:35  cwillu_at_work: print "Syncing", reposBase, ".."?
17:35  engla: byuva: each function must clearly define foritself what kind of interface it has. Then deal with it accordingly. If you need, define classes for the values etc.
17:35  cwillu_at_work: it's not really that wrong
17:36  projammer: i need help. i want to write my first program. im sick of reading tutorials. but i dont kow how to start my program....
17:36  byuva: I suppose this is more of a debug/workflow issue but basically I have an untrusted partner in the code I call.  I am not sure what I will get back and simply want to insure that I don't blindly treat something that is not Boolean as True/False
17:36  ojacobson: projammer: This is going to sound trite, but: "at the top"
17:37  cwillu_at_work: byuva, "foo in [True, False, None]" might work
17:37  engla: byuva: so you want your program to stop if a function returns a bad result?
17:37  projammer: ojacobson: u mean i need to figure out like ovjects and relationships and that kinda stuff, kinda like figure out the mechanics of how the program should run? is that what u mean?
17:38  byuva: engla:  More or less.  I've just been burned several times because I thought I was getting back False and got an empty list.
17:38  engla: projammer: what do you mean?, I think that's the important place to start at
17:38  engla: byuva: how were you burned
17:39  engla: byuva: (that's a serious question)
17:40 --- kanor is now known as tyrus
17:40  projammer: what do i mean???? i just want to create my fist program. i was thinking about somehting that would help me learn arabic vocab. but then i dont know how to go about it. and i dont know how im going to use arabic. i think unicode might have somehting to do with it .....
17:41  engla: projammer: yes good, that's a good explanation of what you want to do.
17:41  _habnabit: >
17:41  byuva: engla:  Simplifying a bit but I have a true_counter and false_counter and several functions I call from within loops.  There was a miscommunication and one function instead of getting True/False I was getting back lists.  I happily treat these lists as == True/False and get wonky counts that I spend hours trying to sort out
17:41  engla: projammer: general advice: start easy and piece by piece!
17:42 --- tyrus is now known as kanor
17:42  engla: byuva: I still don't see really what the problem is. Can you instead just look at the boolean value of your objects?
17:42  projammer: engla: yeah but i dont know how to go about doing it, and also, even when i figure out HOW to do, then i need to figure out HOW to code it...... this isht is so haaaaaaaaaard!!
17:43  nosklo: byuva: it seems you have a bug in your code. Your unit tests should catch this
17:44  kerio: projammer: yeah, programming is hard
17:44  siddhion: hey. I would really like to learn how to program a web app with Python so I cna really learn the ins and outs of it.
17:44  engla: projammer: start at the beginning, and come back here to ask specific questions
17:44  byuva: nosklo:  this is basically very rapid prototyping (for law firms who want something immediately and then don't care about it the next day)
17:45  byuva: no unit tests, just trying to slice and dice data in a matter of minutes/hours
17:45  siddhion: But I have been convinced that using a frame work is the better way. The thing is that I really do not know what is going on behind the scenes. Help!?
17:45  engla: projammer: the beginning maybe is  print u"Hello, <arabic hello here>"  for you.
17:45  projammer: hehehe
17:45  projammer: thats a good starting place
17:45  projammer: i didnt even think of that
17:45  projammer: thanks
17:45  kerio: engla: oh hell no
17:45  projammer: okay ill get to work on that
17:45  kerio: never print unicode strings
17:45  kerio: encode them into bytes, and print that
17:45  exarkun: kerio: encode them into which bytes
17:46  engla: kerio: he'll never get started with that
17:46  projammer: :(
17:46  kerio: exarkun: encode the unicode string, which is made of arbitrary codepoints, into something that your... terminal? GUI? can understand
17:46  exarkun: kerio: how do you know what your terminal can understand?
17:46  projammer: i remember reading about that, soon before giving up
17:46  kerio: exarkun: you... know your terminal?
17:46  projammer: ill have another look
17:46  engla: exarkun: you never know, you can only guess, and to do that you ask the locale
17:46  exarkun: engla: hush
17:46  kerio: oh, you mean in a general case
17:46  siddhion: Does anyone think it is feasible to program a web app with just Python (no web frame work) ?
17:47  exarkun: kerio: yes
17:47  exarkun: engla: sorry, I mean, I am teaching kerio a lesson!
17:47  byuva: engla:  The problem is that I was getting back something completely off-base (lists instead of Booleans) but if my code read if myvar is None: none_count += 1; elif myvar == True; true_count +=1  elif myvar == False: false_count +=1 would happily march along
17:47  kerio: exarkun: try to autodetect from the locale, fall back to UTF-8 and add that as an option for the user to change if it's wrong?
17:47  engla: byuva: never use == True and == False. Also, a list never equals either None, True or False
17:48  _habnabit: byuva, the problem is with your expectations, not with python's behavior here.
17:48 * projammer goes to create hello world in arabic , ill be back!!!
17:48  engla: byuva: just use   elif myvar: .. elif not myvar: ..
17:48  Motorin: Quick question -- what's the best analog to Perl's -x, -d, etc?  -e obviously translates to os.path.exists, but I don't see "is executable" in that package.
17:48  exarkun: kerio: And Python won't autodetect from the locale when you print some unicode to stdout?
17:49  engla: exarkun: ok, I'm quiet
17:49  byuva: engla:  That is how I would have actually written (was trying to illustrate something, unsuccessfully :-)  However that has the same issue as the empty lists, 0, empty strings all evaluate to False
17:49  kerio: exarkun: sure, but it's often wrong
17:49  engla: byuva: and what is the problem you are trying to solve? We are still drilling here
17:49  nosklo: projammer: print u'ŸÖÿ±ÿ≠ÿ®ÿß ÿßŸÑÿπÿßŸÑŸÖ'
17:49  kerio: i mean, very, very often
17:49  exarkun: kerio: What can you do that it can't do?
17:49  _habnabit: Motorin, it's not generally a good idea to check these things. They lead to race conditions.
17:49  kerio: exarkun: ask the user
17:50  exarkun: kerio: That's not autodetecting from the locale
17:50  byuva: My problem is that I want to assure myself that when I test for a value being Boolean it is in fact Boolean and not something that will happily evaluate like one
17:50  kerio: no it's not
17:50  kerio: it's better :)
17:50  exarkun: kerio: I suppose maybe you meant "autodetecting from the locale is often wrong"?
17:50  kerio: ooh, yeah, that one
17:50  Motorin: Well I need to, and there are no security or correctness concerns in my case.
17:50  kerio: (for instance - locale is broken by default on os x)
17:50  _habnabit: Motorin, why do you think you need to?
17:50  engla: byuva: and why do you want to do that?
17:50  exarkun: kerio: But Python already has a way for the user to specify their encoding here - ie, it already asks the user.
17:50  exarkun: kerio: Just set the locale correctly.
17:51  engla: byuva: if the function you use is broken, use unittests. If your expectation on the function is wrong, "flatten" the return value
17:51  Motorin: I'm writing a piece of logic similar to 'make' to see if a binary exists and is executable.  I know what I'm doing.
17:51  siddhion: I just want to really learn Python and do a web app at the same time. I feel like learning Pylons or Django would be cheating especially because I really want to learn how everything works in Python.
17:51  exarkun: kerio: What do you gain by duplicating that?
17:51  exarkun: siddhion: It's not cheating.
17:51  byuva: engla:  Because I am writing this stuff with turn around times in minutes or hours and don't always have time for unit tests
17:51  exarkun: siddhion: Learn Pylons or Django.
17:51  kerio: siddhion: so don't start with a web app?
17:51  projammer: nosklo: oh man, i need to learn to do that,  (i dont know what u said tho, i want to learn arabic, i dont know it yet)
17:51  kerio: learn pylons
17:51  exarkun: siddhion: You can always work "down" later.
17:51  pfrog: exarkun: pylons is dead, long live pyramid
17:51  exarkun: pfrog: whatever, they're all crappy
17:51  _habnabit: siddhion, pylons is superseded and django is crap.
17:51  kerio: or... jinja2+twisted.web?
17:51  nosklo: projammer: I said "Hello World" of course
17:51  _habnabit: siddhion, lean pyramid or flask.
17:52  projammer: nosklo: oh right!
17:52  exarkun: kerio: So what do you gain by duplicating all the stuff that's there already?
17:52  byuva: engla:  Back to my original issue I really hoped that myvar is False would ensure that the value is in fact the  Boolean value False and not something that can act like a boolean
17:52  Motorin: nevermind, it looks like "os.path.exists(fpath) and os.access(fpath, os.X_OK)" will work
17:52  projammer: nosklo....how?....dont tel me ill try figure it out on my own
17:52  kerio: Motorin: oh god no
17:52  Motorin: what?
17:52  kerio: that's screaming "RACE CONDITION!!!" very loud
17:52  Motorin: I DONT CARE
17:53  Motorin: I know what a race condition is and how it could affect my software, and it will not in my case.
17:53  cwillu_at_work: byuva, if myVar not in [True, False, None]:  raise ValueError(myVar)
17:53  siddhion: _habnabit, kerio  but why start with such abstraction? What are the real advantages when I really want to understand the inner workings
17:53  nosklo: Motorin: why are you checking that? What will you do if they are executable?
17:53  siddhion: It just seems too magical
17:53  kerio: python is magical!
17:53  _habnabit: siddhion, do you care about getting anything done?
17:53  _habnabit: cwillu_at_work, :(
17:53  siddhion: Pyramid, Pylons and Django
17:53  pfrog: no, no pylons
17:53  siddhion: _habnabit, sure I do
17:54  _habnabit: siddhion, then you'd use a web framework.
17:54  Motorin: I probably won't end up doing the +x check, if it doesn't exist, I'm going to build it.  The +x check is just there for sanity.
17:54  Motorin: I'm writing a script for myself for a very narrow use case in research software that will never be used by anyone else.
17:54  nosklo: Motorin: It already checks if a file is executable for you when you try to execute it, so, by checking yourself you're *duplicating* the check
17:54  _habnabit: siddhion, the entire point is that you'd remove work for yourself.
17:54  _habnabit: siddhion, tedious work.
17:55  Motorin: I'm not GOING to execute it.  Look, I appreciate the advise, but believe me when I say I understand the concern and it doesn't apply.
17:55  nosklo: Motorin: why check twice
17:55  _habnabit: siddhion, so, you get to spend time duplicating code that's been written about a million times before.
17:55  siddhion: _habnabit, right you are my chap (or chapette) but I really would like to learn learn Python in the process. See here?
17:55  kerio: siddhion: so learn python
17:55  _habnabit: siddhion, why do you think you wouldn't learn python when using a web framework?
17:55  siddhion: _habnabit, because lots of it is already writen for ya.
17:55  nosklo: Motorin: well, I understand that you already know what you want and what your application does, but I don't, and that's why I am asking, so I can help. I don't just answer random questions. I would appreciate if you could just provide the information asked then
17:56  _habnabit: siddhion, ... okay, and? You'll still be writing python.
17:56  _habnabit: siddhion, and a good amount of it, too.
17:56  dioek: Hello, I'm using libxml's css selectors with python, and trying to figure out if there's any way to select a parent element when it doesn't have a specific child, I figure its worth a shot asking in here ;).
17:56  nosklo: dioek: are you using lxml ?
17:56  dioek: nosklo: yes.
17:57  nosklo: dioek: can you give an example of what you want to select?
17:57  _habnabit: byuva, really, though, this is just going to be a crutch for you that doesn't work correctly in all cases.
17:57  siddhion: _habnabit, ok well I started learning Pylons and just felt like, 'I am calling this here function and I have no idea what that function is doing and how all this is really working'
17:57  Motorin: I appreciate the advice, but I'm not going to explain my whole app just so I can port one '-x' from Perl.  Thanks.
17:57  _habnabit: byuva, besides, this is something your unit tests should verify.
17:57  _habnabit: siddhion, so... read the source?
17:57  dioek: nosklo:  e.g: all li that don't have any <table> children. I want the parent element, not the child (that is, i want the selector to return all li elements, not li's children that are not table)
17:58  byuva: _habnabit:  My problem is that we don't have unit tests.  This is one off code we have to write far faster than we should.
17:58  siddhion: _habnabit, I see. I will consider this. I must think more about it.
17:58  _habnabit: dioek, xpath('//li[not .//table]') or so.
17:58  _habnabit: byuva, well, that's your problem.
17:58  dioek: _habnabit: I was wondering if there was a way to do it with css selectors :)
17:58  _habnabit: byuva, don't blame it on python.
17:58  nosklo: dioek: css selectors get compiled to xpath anyway
17:58  _habnabit: dioek, why do you care about css selectors?
17:59  dioek: _habnabit: because I'm not as familiar with xpath.
17:59  _habnabit: dioek, sounds like a good opportunity to learn.
17:59  byuva: _habnabit:  Yes, but it would it would be nice if Python gave an easy way to write an if statement that only applied to the Boolean value False
18:00  _habnabit: byuva, no, it wouldn't.
18:00  nosklo: dioek: I don't know if that is possible with css selectors or not. What I know is that xpath is more complete.
18:00  _habnabit: byuva, that's what I've been saying this whole time.
18:00  _habnabit: byuva, python has this design very intentionally. Stop blaming python for your own project's failings.
18:00  nosklo: byuva: it would be nice if your application didn't have to make such distinction
18:01  cwillu_at_work: byuva, there are such ways, but you really _really_ shouldn't need to use them.
18:06  Taos: can you find out the language of a local machine in python e.g. english, dutch etc
18:08  projammer: cmd.exe on windows doesn't seem to support arabic text, i am going to continue my efforts to create a hello world program in arabic, using IDLE....
18:08  byuva: _habnabit:  This isn't "a project" this is fast, gorilla-coding with an attorney for a collaborator, the very thing that if any language can help it would be Python.  I am not "blaming Python for [my] project's failings."
18:08  Dynetrekk: does anyone know a good excel/xls parsing module?
18:09  _habnabit: byuva, well, if you are having trouble telling what a function returns, maybe you need more 1) documentation or 2) communication
18:09  roxfan: Dynetrekk: not xls, but there is csv module
18:09  Dynetrekk: roxfan: good idea
18:10  asrenzo: Dynetrekk: xlrd
18:10  asrenzo: Dynetrekk: xlwt
18:11  Dynetrekk: asrenzo: rd for read, wt for write?
18:11  asrenzo: Yep
18:11  dash: _habnabit: i don't know, i've begun to think it'd be nice if python didn't have the Iverson property
18:11  Dynetrekk: asrenzo: I'll never ever write an xls file if I get to decide :P but thanks for the hint
18:11  asrenzo: Dynetrekk: http://pypi.python.org/pypi/xlrd, http://pypi.python.org/pypi/xlwt
18:11  byuva: _habnabit:  Agreed on both counts but sometimes both fail, especially when writing with inexperienced programmers and on short schedules.
18:11  Dynetrekk: asrenzo: I found it in macports
18:12  byuva: My question is why can't True and False be treated like Singletons??
18:12  _habnabit: byuva, because /that's not how python works/
18:12  _habnabit: byuva, it was intentionally designed that way from the beginning.
18:12  cwillu_at_work: byuva, because that's not how python works.  I already described how you can test for those specific values about an hour ago.
18:14  byuva: Why is None a singleton?
18:14  Taos: Anyone know how I can detect the language of a machine e.g. (english, french etc etc)
18:14  NemesisX11: Hi all - I am creating an application that I need to ask a user a yes or no question if they answer no I want it to just move to the next operation and if they ever yes I want it to continue with its instructions however if statments dont seeem to be working for me... any ideas
18:14  nosklo: byuva: because, when developing python, that was the idea. You should be there, you could suggest otherwise, maybe things would be different then... but they're not
18:15  asrenzo: Taos: Which OS ?
18:15  Taos: All OS's
18:16  cwillu_at_work: byuva, the evaluation of boolean expressions is unrelated to True/False/None being singletons
18:16  nosklo: Taos: you could use locale module to query system locale.
18:16  Taos: Ah, never thought of that
18:17  nosklo: Taos: you'll have to test it for each platform though, as the answer is not uniform across platforms
18:17  Taos: Why is it returning (None, None) for my windows build
18:17  nosklo: heh
18:17  _habnabit: byuva, None was intended to be used as a sentinel.
18:17  nosklo: Taos: what are you running?
18:17  Taos: win7 x64 (home pro)
18:17  nosklo: NemesisX11: code?
18:17  nosklo: Taos: no, I mean, code
18:18  Taos: import locale; locale.getlocale()
18:18  asrenzo: nosklos: Isn't locale module related to posix system ?
18:18  nosklo: Taos: try x = locale.setlocale(locale.LC_ALL, '')
18:18  Taos: Sexy.
18:19  byuva: I realize I am very unaware of the thinking that went into these decisions.  I guess I don't see the harm in having "if myvar is False" evaluate to True if and only if myvar is the Boolean value False
18:19  Taos: What are you doing in that line taht gets it to return that?
18:19  nosklo: asrenzo: no
18:19  cwillu_at_work: byuva, it does.
18:19  byuva: I thought that only worked for Singletons of which None was the only one
18:20  cwillu_at_work: no.
18:20  cwillu_at_work: Hence why I mentioned that an hour ago :p
18:21  byuva: cwillu_at_work:  earlier someone wrote "only use is for identity.. None is the only singleton that comes to mind"
18:22  _habnabit: byuva, booleans are a new feature of python.
18:22  _habnabit: byuva, prior to 2.3, everyone used 0 or 1.
18:23  byuva: Where the the singletons that you can use "is" with documented?
18:23  nosklo: byuva: you can use "is" with stuff that is not singletons, too
18:24  byuva: Let me rephrase.  What built-in immutable objects can I use "is" with?
18:24  _habnabit: byuva, here's a comprehensive list: None
18:24  nosklo: byuva: oh, the python idiom is to use it only with None.
18:24  byuva: Where is this documented?
18:24  _habnabit: Probably in the language reference.
18:24  lazydancer_: how to make a list of classes?
18:25  nosklo: in your IRC backlog :D
18:25  byuva: But True/False work but are not recommended?
18:25  nosklo: byuva: 2 is 2 "work" but shouldn't be used
18:25  nosklo: byuva: "working" is not a good reason to use something
18:26  nosklo: lazydancer_: L = [MyClass, MyOtherClass, AnotherClass]
18:26  lazydancer_: oh no, i want like a list of elements that are taken from a class
18:26  cwillu_at_work: nosklo, it's the same principle he's trying to enforce:  avoiding having a layman passing in a non-boolean object and having it "working" but not right.
18:27  lazydancer_: like something like list[1].classelement
18:27  nosklo: lazydancer_: I don't know what that means
18:27  byuva: nosklo:  understood although I wonder why "is" could not be valid for all built-in immutable types?  Short-hand for == and of the same type
18:27  nosklo: cwillu_at_work: yeah, that principle is wrong, that's what we're repeteadly telling him, for 2 hours now
18:27  cwillu_at_work: nosklo, that's simply not true.
18:27  nosklo: cwillu_at_work: why? do you have the backlog? Check 2 hours ago
18:28  cwillu_at_work: nosklo, I've been reading the whole time
18:28  nosklo: byuva: no, you can use *is* for any object
18:28  cwillu_at_work: nosklo, that the principle is wrong is what I said is not true.
18:28  nosklo: cwillu_at_work: then it's true. I have proof that I'm telling him that for 2 hours already.
18:28  nosklo: byuva: "is" and "==" do different things. Both are useful each on its own use case
18:29  lazydancer_: "is" is different from ==?
18:29  nosklo: lazydancer_: completely
18:30  Baughn: is compares physical object identity, == value
18:30  nosklo: lazydancer_: "is" checks for identity while "==" checks for equality
18:30  nosklo: byuva: you can use "is" with mutable objects
18:30  nosklo: byuva: it's useful sometimes when you have to know if it is the exact same object
18:30  byuva: nosklo:  is with mutable objects seems like a very different game (comparing pointers basically right?)
18:31  nosklo: byuva: yes, and with immutable objects too
18:31  nosklo: byuva: there's no difference about using it with mutable or immutable objects
18:31 --- jzacsh is now known as jzacsh_
18:31  cwillu_at_work: nosklo, allow me to explain:  you said "working" is not a good reason to use something.  This is a useful lesson.  However, it's not one that a layman will take on faith.  There are situations where forcing the user to be explicit (the layman coder in question) is a good thing.  We're not talking about defending against other people who should know better (which is a fools game, I agree), but helping somebody who isn't interested in programming to get
18:31  cwillu_at_work: this stuff right.  byuva, please tell me if I'm misrepresenting the situation.
18:31  byuva: nosklo:  It would seem though that with immutable objects they aren't really pointers and that is could have another meaning
18:32  byuva: cwillu:  not sure what you mean by "isn't interested in programming"?
18:32  cwillu_at_work: byuva, the other party isn't a programmer by trade, right?
18:33  byuva: yes, he is trying hard though :-)
18:33  byuva: Mutable and immutable give him headaches :-)
18:33  nosklo: byuva: no. even with immutable objects, it goes down to simple pointer comparision
18:33  cwillu_at_work: byuva, you might consider doing the check, but just printing a warning message rather than actually rejecting the value
18:33  nosklo: byuva: there's no other meaning
18:35  cwillu_at_work: byuva, tell him:  the dollar value of a 20 is immutable.  The dollar value of his bank account is not.
18:35  byuva: cwillu:  a good way to put it.
18:35  pinkisntwell: i have some unicode text that i want to parse. what's a regular expression that matches all alphabetic characters, i.e. all letters?
18:35  nosklo: cwillu_at_work: forcing the user to be explicit is good. however returning an empty list to mean False is completely acceptable. Checking the return value against a fixed object like False is not useful.
18:35  byuva: I think even I get confused and because of they can be hashed/keys/etc view all immutables as singletons
18:36  nosklo: byuva: but they are not
18:36  nosklo: byuva: you can get two different immutable objects that compare equal with "==" but are not the same object
18:36  TheCommieDuck: If I have a list [[1,2,3],[4,5,6],[7,8,9]]..is there a way to get [1,4,7]? I found a way with for loops, but I wasn't sure if there was a more compact slicing way.
18:37  cwillu_at_work: TheCommieDuck, [sub_list[0] for sub_list in main_list]?
18:38  byuva: nosklo:  I know but since they can not be changed in place I wonder what the harm is in treating them as not only "==" but as "is" (sacrilege I know)
18:38  Vornicus: TheCommieDuck:  zip(*my_list)[0]
18:38  cwillu_at_work: TheCommieDuck, you could also zip... what Vornicus said
18:38  TheCommieDuck: Ok, shall look up both of those (I like to know how I'm doing what I'm doing). Thanks guys!
18:38  nosklo: byuva: because you can create another object that is not the same one, and your check will fail
18:38  nosklo: byuva: while using == it would work
18:39  superdmp: I have pasted a little snippet of psuedo-code at http://dpaste.com/285338/ - I've been trying to find the best way of achieving this
18:39  cwillu_at_work: well, it'll work fine for boolean values
18:39  nosklo: not necessarily
18:40  superdmp: the first function needs to spawn the second and come back immediately (multiprocess), while the second needs to spawn a process and wait till it's done (subprocess.call()) - does that sound right
18:40  superdmp: ?
18:41  superdmp: and does that look like a reaosnable way of doing things?
18:41  cwillu_at_work: nosklo, on recent pythons, afaik from the datamodel reference, yes.
18:41  TheCommieDuck: Linking on...if I had a list of say 2000 variables, each about 32 bytes in size, would using a slice [:1900] or whutever be significantly memory intensive? I *read* that slicing makes a whole new list, but I wasn't sure if that was 'new list in memory' or 'variable of part of the list'.
18:42  nosklo: I disagree, but I'm too bored with that subject to keep arguing.
18:42  cwillu_at_work: "The two objects representing the values False and True are the only Boolean objects"
18:42  nosklo: Do whatever you want
18:42  byuva: nosklo:  I can already hear the objections but could a case be made that True/False be officially treated as singletons?  Given all the magic (usually desired) of evaluating strings/number/lists as boolean it would seem that being able to easily distinguish if something "IS" a boolean might (on rare occasions with bad programmers) be helpful
18:42  kerio: TheCommieDuck: lists are references anyway
18:42  kerio: so they take a lot more memory than the simple sum of the memory occupied by the objects they hold
18:42  nosklo: byuva: I disagree, but I lost interest in the subject, so I won't continue arguing.
18:42  pinkisntwell: i have some unicode text that i want to parse. what's a regular expression that matches all alphabetic characters, i.e. all letters?
18:43  nosklo: byuva: good luck, I wish happiness for you and your family
18:43  Vornicus: Slicing will tend to be spendy, yeah, but lists use references, so while having a lot of objects is problematic, having a list duplicated like that is less so.
18:43  TheCommieDuck: kerio: Ok. But is slicing a large portion of a list of large objects going to be a very slow thing to do?
18:43  Vornicus: Or, rather.
18:43  TheCommieDuck: Whoops, didn't see that Vornicus.
18:43  byuva: nosklo:  and to yours.  thanks for your help.
18:43  Vornicus: 3900 objects is more expensive than 2000 objects with just under 2 references each.
18:44  _habnabit: TheCommieDuck, python never implicitly copies anything.
18:45  Vornicus: But, um.
18:45  _habnabit: TheCommieDuck, it won't copy the contents of the slice.
18:45  Vornicus: When I run my python programs out of memory I do it with tens to hundreds of /millions/ of objects.
18:46  Vornicus: So, don't worry about memory usage until it becomes a problem.  Like, by saying "Out of Memory"
18:47  TheCommieDuck: _habnabit:  If I get you, then therefore until the data in a sliced list (say b) changes, it contains the same data as the original list?
18:47  _habnabit: TheCommieDuck, lists don't contain data.
18:47  _habnabit: TheCommieDuck, lists contain objects.
18:47  TheCommieDuck: _habnabit: Sorry, I meant...the data referenced by the objects in the list?
18:48  Vornicus: Technically I /think/ it copies the references; this means that methods mangling objects in the sliced list will mangle the same objects in the unsliced list.  However, assigning to the sliced list will break that link.
18:48  Vornicus: (for those indexes.)
18:48  Vornicus: (sort of.)
18:48  dash: Vornicus: it's a different list of the same objects.
18:48  blackthorne: hi
18:49  _habnabit: TheCommieDuck, just talk about objects.
18:49  _habnabit: TheCommieDuck, 'data' is misleading.
18:49  Vornicus: Right, that's what I was trying to get at, and not doing that well.
18:49  TheCommieDuck: _habnabit, ok.
18:49  ironfroggy__: I am seeing BeautifulSoup parse "<script>dont allow this<script>" into a <script> Tag with the text child "dont allow this<script>"
18:49  ironfroggy__: is that what you would expect it to do?
18:50  Vornicus: ironfroggy__: approximately?
18:50  ironfroggy__: treating the second <script> tag as text node content seems bad
18:50  Vornicus: Oh, that's what it's doing.  Ew.  No, no, bad wrong evil.
18:50  ironfroggy__: i usually trust BS and I'm surprised to see this behavior
18:50  _habnabit: ironfroggy__, you think it should be treated as a </script> tag ?
18:51  ironfroggy__: OR as a second <script> Tag
18:51  TheCommieDuck: So if I did I a = [1,2,3,4], b = a[:1], b[0] = 3, then the object at (?) b[0] is now a new object, but b[1] and b[2] are stil the same objects in a? Or at least I think that is it. (Sorry if I've misused 'objects'.)
18:51  Kaedenn: But two nested <script> tags is illegal.
18:51  Kaedenn: in HTML.
18:51  dash: ironfroggy_: html5lib time, i guess
18:51  ironfroggy__: Kaedenn: duh
18:51  dash: TheCommieDuck: no, i think you got it.
18:51  ironfroggy__: Kaedenn: im using it to write an HTML sanitizer for user-submitted stuff.
18:51  _habnabit: TheCommieDuck, that's correct.
18:52  dash: ironfroggy_: then htm5lib.clean may interest you
18:52  dash: ironfroggy_: or lxml.html.clean
18:52  _habnabit: TheCommieDuck, also your use of 'object' is fine. ;P
18:52  blackthorne: when I work with dictionaries, I get alphabetical sorting by default. Is it possible to change the sorting criteria to time?
18:52  dash: ironfroggy_: http://codespeak.net/lxml/lxmlhtml.html#cleaning-up-html
18:52  ironfroggy__: dash: might it? thanks
18:52  dash: blackthorne: dicts aren't sorted or ordered
18:52  _habnabit: blackthorne, that's a coincidence; dictionaries don't have an order.
18:52  TheCommieDuck: Ok. _habnabit / Vornicus / kerio /everyone else, thank you very much. :D
18:53  projammer: ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞ÿ∞
18:53  blackthorne: hold on, I know what dictionaries are but methods that work with it in fact order their output
18:53  projammer: bwahhahaha, PROGRESSSS
18:53  _habnabit: projammer, yes!
18:53  projammer: lololol
18:53  cwillu_at_work: blackthorne, the sort/sorted functions allow you to specify a different comparators and/or a function to convert each item to a different one for the purposes of sorting
18:53  _habnabit: projammer, no, none of that.
18:53  BlueLaguna: I have a java server that uses DataInput.readUTF()  and DataOutput.writeUTF() to read and write data to sockets respectively.  Are there any python modules that can handle this in the same fashion?
18:53  dash: _habnabit: Hah.
18:53  Vornicus: blackthorne: they "order" their output in an entirely implementation-specific order.  Do not, ever, depend on it.
18:54  dash: BlueLaguna: plenty of stuff
18:54  cwillu_at_work: blackthorne, there's no default sort on any of the dict methods
18:54  projammer: _habnabit: <3
18:54  CatKiller: Hiya! I have a quick question regarding dictionaries (should be easy):
18:54  BlueLaguna: dash: Sorry, I'm new to Python.  What would be the best way to approach this?
18:54  _habnabit: blackthorne, which UTF does it write
18:54  Vornicus: (specifically, the ordering is based on the hash codes, in cpython)
18:54 * _habnabit kicks irssi.
18:54  dash: BlueLaguna: you just want to convert unicode strings to bytes?
18:54  _habnabit: blu	^
18:54  _habnabit: BlueLaguna, ^
18:54  ironfroggy__: dash: i have the usecase and requirements of providing a whitelist of allowable tags and attributes (per tag) and it doesnt look like clean() provides that. my BS solution work fairly well, but I wish I'd see clean() this morning.
18:54  ironfroggy__: maybe i could have gotten different requirements then
18:54  kerio: BlueLaguna: unicode objects have an encode() method
18:54  cwillu_at_work: blackthorne, for key in sorted(dict): would work though, by sorting the keys before iterating
18:55  blackthorne: I know I shouldn't relay on this, I'm talking about a default behavior that makes usage on my much more handy, isn't not something that can't fail
18:55  cwillu_at_work: kerio, so do str's :p
18:55  dash: blackthorne: no, you can't rely on it
18:55  CatKiller: If I have a dict, say: dict = {2: 'test2', 3: 'test3'}, I then assign d as this dict: "d = dict", do some operations on the dict "d.pop(2)". The dictionary "dict" loses the value indexed by "2", so does the one in "d", but now if I do "del d", d is gone, but not the original dict! Does anyone know why, or if there is a way of doing so?
18:55  Vornicus: blackthorne: it still only works if your dictionaries are /tiny/.
18:55  cwillu_at_work: blackthorne, it's only working for you now by fluke.
18:56  BlueLaguna: Well, writeUTF() "Writes two bytes of length information to the output stream, followed by the modified UTF-8 representation of every character in the string s. Each character in the string s is converted to a group of one, two, or three bytes, depending on the value of the character."
18:56  dash: BlueLaguna: oh crap, "modified utf8" :(
18:56  _habnabit: Oh, right, good ol' java modified utf-8.
18:56  Vornicus: CatKiller: del on a variable deletes that variable, not the object it references.
18:56  _habnabit: What does it map U+0000 do?
18:56  ironfroggy__: CatKiller: you are just pointing the name 'd' to the same object the name 'dict' was pointing to (called "binding")
18:56  cwillu_at_work: kerio, 'uv xrevb'.encode('rot13')
18:56  blackthorne: still, it would be really nice I could change the sorting criteria to make the default behavior the one that I want without having to change all the code, I'm talking about something that can fail
18:56  blackthorne: {'b':1, 'a':2}.keys() == ['a', 'b']
18:56  CatKiller: Ahhhh pl
18:56  ironfroggy__: CatKiller: if you want to copy a dict, do new = dict(old)
18:56  _habnabit: blackthorne, well, you can't.
18:56  dash: blackthorne: there _is_ no sorting critera
18:56  CatKiller: ok, it makes sense!
18:57  kerio: cwillu_at_work: hi to you too
18:57  _habnabit: blackthorne, because that's not a thing dicts do.
18:57  Vornicus: CatKiller: however, methods on variables modify the object they reference; thus, since both dict and d refer to the /same/ dictionary, methods on one will work on the other.
18:57  ironfroggy__: CatKiller: also, dont name it "dict", because that is a builtin name in python
18:57  dash: blackthorne: you have to sort the list yourself if you want a sorted list.
18:57  kerio: (and no, i didn't decode that)
18:57  zaytsev: hi folks! could someone tell me if there is a sleep function in python that actually does no-op in a loop, unlike the real sleep function that does not increase time.clock
18:57  dash: zaytsev: why?
18:57  dash: BlueLaguna: what are you writing, btw?
18:57  cwillu_at_work: blackthorne, sorted({'b':1, 'a':2}.keys(), cmp=some_comparing_function_of_two_args)
18:57  _habnabit: zaytsev, why are you using time.clock?
18:58  _habnabit: cwillu_at_work, what, no
18:58  dash: cwillu_at_work: use key= not cmp= :)
18:58  _habnabit: cwillu_at_work, .keys() is redundant, and cmp= is hella deprecated
18:58  cwillu_at_work: dash, I could have sworn I got yelled at for doign keys= last time, sorry :p
18:58  zaytsev: dash, I want to write a test for my timing class, of course I can just write a cycle and every time check wall clock time, but if it's already done...
18:59  dash: zaytsev: what's a "timing class"?
18:59  blackthorne: ok, some background. I'm only into dicts YAML files. The order of the lines expected is top down, as well as, they key ordering. If it fails it's not a big problem but if I could make it work without having to depend on more than my pyyaml lib, it would be really handy
18:59  BlueLaguna: dash: A python port of a program I wrote in java that receives data about a video file, then receives the file itself, then sends back a re-encoded version of the video
18:59  zaytsev: dash, timing class is a class that one can use to time algorithms instead of timeit.
18:59  CatKiller: Thanks a lot! So the short answer, in my case, is to use "del" on the original dictionary. I was only using another variable to avoid typing the rather long dict name all the time (this is a three level dictionary here). Thanks again for your answers
18:59  blackthorne: loading dicts from YAML files
18:59  dash: blackthorne: would you like me to repeat myself again? :)
18:59  dioek: Hey, is there any way to force urllib's urlsplit function to preserve the case of the urlstr fed to it? It preserves the case of the path portion of the tuple, but not of the netloc, which is a bit annoying :)
19:00  dioek: (yes, I know case doesn't matter with domains, I'd like to preserve it for other reasons.)
19:00  dash: BlueLaguna: sounds pretty easy, using twisted and gstreamer
19:00  dash: zaytsev: what's wrong with timeit?
19:00  leachim6: hi.
19:00  zaytsev: dash, it's for short snippets
19:00  dash: zaytsev: oh?
19:01  zaytsev: dash, I need to time parts of very complicated thing, but still I just need simple thing, not a complete ultimate timing framework
19:01  dash: zaytsev: that's news to me
19:01  dash: zaytsev: why are you timing stuff?
19:01  BlueLaguna: dash: Well, I'm just seeing how easy it is to rewrite the client without breaking compatibility with the server
19:01  _habnabit: zaytsev, sounds like you want cProfile
19:01  dash: BlueLaguna: sure
19:02  zaytsev: dash, ok, I can actually invent some kludges for timeit, but it can't just call start and stop before/after I run something in a loop and then compute my own second order stats
19:02  dash: zaytsev: okay so you're doing something different, yeah
19:02  zaytsev: dash, but I just need a helper class that would automate collecting data after time.clock, not a full blown profiling
19:03  zaytsev: dash, I wrote the class, but I want to test it :)
19:03  dash: zaytsev: well if you're testing your code, it probably should not call time.clock at all during tests
19:03  zaytsev: dash, I want to test my timing class :) it itself needs to be tested for consistency
19:04  BlueLaguna: dash: So...could I just do socket.sendAll("string".encode('utf8'))?
19:04  zaytsev: _habnabit, this is what I am trying to avoid. Is it in standard Python package? Does it add a lot of overhead?
19:04  dash: zaytsev: of course
19:04  dash: zaytsev: but when testing it does not need to invoke time.clock at all
19:04  dash: BlueLaguna: probably not!
19:05  dash: zaytsev: cprofile is in the stdlib and is quite fast
19:05  zaytsev: dash, well, actually I wanted to start the timer a few times, sleep for a second and a half, check that the number that it gives is bigger than 1 s etc. But I realized that I can't do sleep() :)
19:05  dash: zaytsev: if you use it with runsnakerun or pyprof2calltree + kcachegrind, it will give you comprehensive and detailed timing of everything
19:06  dash: zaytsev: it's easy and pretty much the best thing.
19:06  dioek: On another note: Is there any way to tell urllib2 to use a specific interface? :) (linux, if it matters.)
19:06  dash: zaytsev: right. in a test of timing code you wouldn't call anything in the 'time' module at alll.
19:06  dash: zaytsev: because you don't need to test anything in the time module, you already know what it does
19:07  shuffle2: how can i create a new string, by giving a source string and a functor?
19:07  shuffle2: to operate on each letter
19:07  dash: shuffle2: python doesn't have anything named "functor"
19:07  shuffle2: hehe
19:07  shuffle2: lambda?
19:08  dash: shuffle2: 'function' is the word you want, probably
19:08  dash: shuffle2: so anyway what's the problem
19:08  dash: shuffle2: write a loop
19:09  zaytsev: dash, well, actually I was asking for a snippet like this: http://stackoverflow.com/questions/1725758/time-sleep-and-suspend-ie-standby-and-hibernate . Of course I know what time does. But I am not sure if the rest of my wrapping code is correct. Oh well, maybe I just need to read up about cprofile and the solutions you mentioned
19:09  dash: zaytsev: right! so you write tests for your wrapping code
19:09  dash: zaytsev: and have it _not_ call anything in time, when being tested.
19:09 --- bgome004 is now known as SocialRecluse
19:09  dash: you test the logic you wrote, not the behaviour of anything in 'time'.
19:10  BlueLaguna: Hmm, I have to go actually.  Let me come back later
19:10  dash: BlueLaguna: now or never!
19:10  dash: ;)
19:10  shuffle2: dash: i see, so now i'm using string.append(function_returning_char(src_char))
19:10  engla: shuffle2: "".join(map(f,s))
19:11  engla: shuffle2: consider using str.translate or unicode.translate instead though
19:12  dash: shuffle2: what are you writing?
19:12  dash: shuffle2: it's very rare to need to do stuff per-character like that.
19:13  shuffle2: a simple substitution cypher thing
19:13  dash: shuffle2: oh. why?
19:13  shuffle2: uni :)
19:14  _habnabit: shuffle2, so then why are you asking us and not your TA?
19:14  shuffle2: the problems are open ended, python isn't implied
19:15  dash: still.
19:15  shuffle2: what's so wrong about wanting to learn python? ;p
19:16  _habnabit: The problem is in learning it by doing silly things.
19:16  _habnabit: Solve a more useful problem instead.
19:16  shuffle2: hum, isn't that what i'm going to uni for?
19:16  dash: shuffle2: to learn by doing silly things? probably!
19:17  dash: shuffle2: at least, that was what uni was like for me.
19:17  _habnabit: shuffle2, learning programming in college is an utter waste of time.
19:17  dash: Eeh
19:17  _habnabit: shuffle2, unless you want to learn about how to come up with unrealistic solutions to contrived problems.
19:17  dash: if somebody else is paying for you to go to college it isn't _so_ bad. :)
19:17  dash: university libraries have neat books
19:18  _habnabit: Make a friend on campus. ;D
19:18  dash: you have a good bit of free time
19:18  dash: and college towns have lots of restaurants open late
19:18  _habnabit: Sounds like you're really saying "live near a college".
19:18  shuffle2: or never graduate :D
19:18  dash: _habnabit: which is easier and cheaper if someone is paying for you to go to college!
19:19  dash: if you're funding it yourself or taking out loans then yeah, just get a job
19:19  _habnabit: shuffle2, anyway, the key question is whether you want to program as a job later.
19:20  aidan: Can I do a getattr two layers deep? if getattr(foo, 'bar', False): if (getattr(foo.bar, 'baz', False): ... is there a neater way?
19:21  _habnabit: aidan, nope.
19:21  dash: aidan: what's this for?
19:22  aidan: dash: I want to access self.instance.item but I'm not sure either of them exist
19:22  nosklo: aidan: why aren't you sure?
19:22  aidan: nosklo: it's a django form, the form can be unbound, or bound but without item
19:23  nosklo: oh django
19:23  dash: oh hey, django.
19:23  nosklo: aidan: django includes a utility function to do just that
19:23  nosklo: aidan: unfortunately I forgot the name
19:24  nosklo: aidan: maybe #django knows?
19:25  aidan: tricky thing to google for :/
19:25  aidan: I'll give it a shot
19:25  explodes: yes yes use twisted, no no don't use threads
19:25  _habnabit: explodes, What
19:25  explodes: i'm using os.system to open wget on 3 different threads but os.system is locking all threads?
19:26  dash: explodes: doctor doctor, it hurts when I do this
19:26  Dynetrekk: explodes: why not just download the files with urllib?
19:26  explodes: :I
19:26  explodes: reliability,
19:26  cwillu_at_work: explodes, that's three processes, not three threads, but you'd want to use the subprocess module instead of os.system, and use...
19:27  explodes: Some of the files have bad file endings.
19:27  Dynetrekk: explodes: "bad"?
19:27  _habnabit: explodes, are you actually being serious
19:28  explodes: bad eof markers
19:28  zaytsev: dash, perfect, with pyprof2calltree I immediately run into this issue http://code.oliviergrisel.name/pyprof2calltree/issue/3/too-many-values-to-unpack
19:28  explodes: downloading a 300 KB file doesn't end after downloading 12 Gigs
19:28  explodes: Granted its i'm downloading from a non-standard system.
19:28  dash: explodes: There's no such thing as an "EOF marker"
19:29  explodes: But I have not control over it.
19:29  explodes: dash: Lack of EOF i mean
19:29  _habnabit: dash, except in DOS
19:29  dash: _habnabit: no such thing as DOS!
19:29  dash: it's a liberal myth.
19:29  explodes: Even some versions of wget are having trouble with it
19:29  zaytsev: dash, it seems it has been open for 2 months and nobody has even commented on that
19:30  dash: zaytsev: let me guess, you're trying to load profile data saved by cprofile
19:30  zaytsev: dash, actually not, I am trying to save it. Let me paste the command line
19:30  dash: ok
19:30  zaytsev: dash, pyprof2calltree -o profiling.dat -r tests/test_model.py &> $LOG_FILE
19:30  dash: explodes: yeah your problem is not what you think it is
19:30  zaytsev: Am I using it in a wrong way?
19:30  explodes: I'm not using twisted.
19:30  explodes: Or urllib.
19:31  explodes: EVER!!!!
19:31  dash: explodes: bye
19:31  simon: OKAY!!!!
19:31  dash: zaytsev: i haven't used the command line version
19:31  _habnabit: explodes, okay seriously are you just trolling or do you have a real question
19:31  explodes: I need to do some more research on subprocess
19:31  explodes: I though os.system would solve my problems
19:31  papna_: os.system is a problem.
19:31  explodes: Good thing it only took 10 minutes to implement.
19:32 --- ChanServ sets modes [#python +o _habnabit]
19:32 <-- _habnabit has kicked explodes from #python (hello is this thing on)
19:33  zaytsev: dash, hmm... too bad. So I absolutely have to change my code or is there any other way around just to profile and existing application?
19:34  dash: zaytsev: every time i've wanted to profile stuff, changing the code was not a big deal
19:35 --- bret is now known as terb
19:35 --- terb is now known as terb123
19:35  nosklo: terb123: [::-1]
19:36  engla: alien smiley
19:36  terb123: Arrgh... I was trying to change my nick on a different server...
19:37 --- _habnabit sets modes [#python -o _habnabit]
19:37 --- terb123 is now known as CamargoBP
19:37  dash: zaytsev: p = cProfile.Profile(time.clock); p.runcall(mymainfunction); data = pyprof2calltree.CalltreeConverter(p.getstats()); data.output(open("yourdata.profile", 'wb'))
19:37  dash: zaytsev: or something close to that
19:38  zaytsev: dash, ok, right now I am trying the iPython example. If it doesn't work I will try this code, thanks
19:39  dash: zaytsev: not sure what you mean
19:39  howlymowly: hi poeple..  anyone here using the leo outliner editor? I have a question: that is:  I am trying to "tangle" some files in the tutorial..  but I can not find that option under the "file menu"....
19:39  CatKiller: bye!"
19:40  warz: hi all. im writing a simple app that creates a thread. but, im trying to figure out why Ctrl-C isn't killing the app. I've pasted my code here: http://dpaste.org/p8AP/
19:40  warz: I've tried putting a KeyboardInterrupt exception in the poll() function, but that didn't seem to make a difference.
19:41  engla: warz: the reason is a long story I guess but ^C will only be caught once the main thread executes
19:42  papna_: warz: Signals and threads don't mix.
--- Log closed Fri Dec 10 19:46:41 2010
