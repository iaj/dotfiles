--- Log opened Fri Oct 22 10:55:20 2010
10:55 --- Users 700 nicks [0 ops, 0 halfops, 0 voices, 700 normal]
--- Log closed Fri Oct 22 10:55:26 2010
--- Log opened Fri Oct 22 10:55:34 2010
10:55 --- Users 700 nicks [0 ops, 0 halfops, 0 voices, 700 normal]
10:56  ssbr: Or Common Lisp.
10:56  ssbr: Templates are indeed "trivial" with macros!
10:56  aeurielesn: merijn: I think that there must be a default method that the visitor visits when the intended method (e.g. visit_Tex, visit_abbreviation, ...) are not defined
10:56  merijn: aeurielesn: I have no clue what "visit_Tex" is supposed to be or how you're visiting it
10:56 --- Channel #python was synced in 90 seconds
10:57  merijn: Which makes it sorta difficult to suggest alternate solutions without using telepathy
10:57  merijn: Unfortunately I'm not a very good telepath
10:57  merijn: ssbr: You just implement a small DSL :p
10:58  ssbr: merijn: actually you download the DSL someone else already wrote. But, same thing!
10:59  merijn: Hmm, maybe I need to get back into web 2.0 now that I can combine pretentious and web2.0...
11:00  merijn: Apparently some masochist implemented a Haskell to javascript compiler >.>
11:01  ssbr: Actually that sounds pretty fun.
11:03  Diverdude: How do i create a matrix in python?
11:04  merijn: Diverdude: Usually you create a list of lists
11:04  merijn: Diverdude: What do you need to use it for?
11:04  ssbr: merijn: there is no "usually"
11:04  ssbr: Or maybe there is, but there's more than one: usually it would be one of: a dict, a list of lists, or a numpy array, depending on what exactly you're doing
11:04  Diverdude: merijn, i need to do linear algebra...Matrix and vector multiplications, projections, decompositions and such
11:05  merijn: Diverdude: If you need to do a lot of math take a peek at NumPy?
11:05  ssbr: Diverdude: Have you a numpy.
11:05  Diverdude: no, dont have that lib
11:05  Diverdude: where do i get that?
11:05  ssbr: The google. http://numpy.scipy.org/
11:05  Diverdude: sorry for the stupid questions...i am just used to matlab
11:06  ssbr: Diverdude: http://www.scipy.org/NumPy_for_Matlab_Users
11:06  merijn: Diverdude: NumPy is a library designed for doing math ala Mathematica/MatLab/whatever in python
11:06  vin: I can use power to do 2 ^ 0.5
11:07  vin: but I want to take that result and transform it back into 2 again
11:07  vin: how do I do that
11:07  ssbr: vin: logarithms
11:07  ssbr: wait, I'm dumb
11:07  Diverdude: is it possible to install numpy using the packet manager in linux?
11:07  ssbr: squaring!
11:07  merijn: Well, for one thing ^ is not exponentiation
11:07  merijn: vin: 2 ** 0.5
11:07  merijn: vin: ^ is a bitwise operator
11:08  Alberth: Diverdude: usually a linux  package manager has numpy available
11:08  ssbr: (logarithms are for the .5)
11:08  vin: merijn: I would do math.power(2, 0.5)
11:08  vin: ssbr: how!
11:08  vin: ssbr: I have no idea, sadly
11:08  jorrit: Hi
11:08  ssbr: vin: I think you mean pow
11:08  ssbr: which is also a builtin
11:08  Alberth: jorrit: Hi again
11:08  vin: ssbr: yes
11:09  ssbr: vin: squaring is just taking something to the "power" of 2.
11:09  vin: ssbr: but I want to transform that result back into to 2
11:09  Evet: is there a state-of-the-art speech/signal processing library?
11:09  vin: so b = Math.pow(2, 0.5)
11:09  ssbr: in general, ((x ** y) ** (1/y)) == x
11:09  vin: now I want to make that b into 2
11:09  vin: thanks
11:09  ssbr: vin: How much math have you taken?
11:09 * vin feels stupid
11:10  Alberth: vin: http://paste.pocoo.org/show/278736/
11:10  vin: ssbr: well 7 years in high school
11:10  vin: but it's way down there
11:10  vin: I have to get it back up
11:10 --- boshhead_ is now known as boshhead
11:10  vin: I liked math...
11:10  ssbr: vin: you should work hard at remembering this!
11:10  vin: Yeah i know!
11:10  ssbr: this is 9th grade stuff I think
11:10  ssbr: :(
11:10  vin: I know, and I know I learned this
11:10  merijn: Meh, I still forget this stuff after 7 years of university :p
11:10  Diverdude: Alberth, do yu know how to install it on ubuntu?
11:10  mylisto: aloha folks
11:10  merijn: You just need to keep a math book and google close to look stuff up :p
11:11  vin: They should focus more on math in college
11:11  aeurielesn: merijn: I figured out ;), there is a GenericNodeVisitor class in docutils
11:11  aeurielesn: which does not raise an unimplemented exception when a visit method is not defined
11:11  mylisto: I'm trying to use python to get a google engine app (a free cdn) working...problem is I've never used python...anyone care to walk me through this?
11:11  mylisto: I'
11:11  mylisto: I'm on Ubuntu
11:11  Alberth: Diverdude: open the package manager gui, search for numpy, find something that looks good (usually there is something 'py' in the name too), click install, wait ?
11:12  merijn: mylisto: Any programming experience?
11:12  mylisto: haha, long long time ago
11:13  mylisto: I actually have a script that I've downloaded to take care of the CDN
11:13  mylisto: http://code.google.com/p/cirruxcache/wiki/QuickInstall
11:14  ssbr: to be fair I also forget basic math. long division? wtf is that?
11:14  Diverdude: hmm i think there is always numpy installed
11:15  mylisto: merijin: thank you can help me?
11:15  pylix: hello everyone i'm new to Python Programming languages in general I was wondering if i could be recommended some good references to get started.
11:16  pylix: python,
11:16  pylix: *
11:17  shylent: official tutorial, stdlib reference
11:17  wysek: pylix: diveintopython
11:17  shylent: some people say, that diveintopython is outdated and advocates bad practices
11:17  merijn: diveintopython is kinda bad
11:17  shylent: ^^
11:17  pylix: yeah i was reading diveintopython3 for like 30 secs
11:17  merijn: People are recommending "Learn Python the Hard Way" nowadays for people who have never programmed
11:18  Diverdude: hmm if i go np.array([1, 2, 3])   i get an error...so probably its not installed...hehe.....unless i need to load or import the lib first or something
11:18  merijn: Looked ok, though really boring if you're the type of person that "gets" things fast
11:18  merijn: mylisto: Well, not much experience with GAE, but the tutorial and links in the topic should help you get started.
11:19  merijn: pylix: Dive into python 3 is even worse, it uses Python 3.x, which you probably don't want
11:19  pylix: why not, it's the wave of the future?
11:19  Alberth: Diverdude: you need to import every library that you use
11:19  merijn: pylix: Most third party libraries have not been ported yet
11:19  pylix: i just want pylons to be compatible with it
11:19  Alberth: pylix: "of the future" being the key phrase at this time
11:20  merijn: pylix: So whenever we say "Well, use library X to solve your problem" you'll have to say "but I'm using python 3.x so it doesn't work..."
11:20  merijn: pylix: Python 2 and python 3 are so similar that once you've learned python 2 learning python3 should take you 30 minutes or less
11:20  pylix: you beat me to my question
11:21  Alberth: of course we welcome anyone that wants to port libraries before using them
11:21  cederman_: Alberth: Could you edit the code and show me how I implement it?
11:21  merijn: Alberth: I don't think that's a good start for newbie programmers ;p
11:22  pylix: for all practical reasons i was thinking 2.x would be a no brainer, but like i was thinking that'd i'd get so accustomed to two that the transition to 3 would be difficult
11:22  torpedotux: hi #python!
11:23  jankoprowski: Someone try turbogears2.1rc1?
11:23  merijn: pylix: Naah, the transition should be extremely easy
11:23  Alberth: cederman_: then you would not implement it, but me. Give it a try yourself, if you get stuck, post the code you have, and ask at the channel in general for advice.
11:24  Alberth: cederman_: perhaps make a shorter example for testing ?
11:26  pylix: the message on the python page that no new features would be developed for 2.x is kinda daunting
11:27  teratorn: why?
11:27  merijn: pylix: I wouldn't worry so much about it, the majority of the world is still using python2 without much worry
11:27  Alberth: pylix: as new programmer, Python is powerful enough for you, for the next 15 years or so :)
11:27  ssbr: only 15...?
11:27  pylix: lol
11:27  pylix: oh ok
11:27  pylix: forbidden
11:27  ssbr: pylix: in a few years you'll want to switch over to 3.x
11:28  merijn: ssbr: Of course, after that we'll all have switched to Epigram! :D
11:28  teratorn: merijn: surely you mean E?
11:28  ssbr: pylix: In fact, if you want, and you can find a gudie that doesn't suck for new programmers, you might want to learn 3.x
11:28  ssbr: teratorn: nah, Epigram
11:29  ssbr: pylix: but I don't know of any such guide, so...
11:29  merijn: teratorn: I looked at the front page of E and their claimed features don't sound remotely impressive
11:29  teratorn: merijn: hahaha
11:29  teratorn: capability security isn't impressive?
11:29  cnf: hmm?
11:29  cnf: E?
11:30  teratorn: promises? (Deferreds)
11:30  teratorn: a nice object composition model
11:30  ssbr: teratorn: compared to a dependent typing system that's as powerful as the language itself?
11:30  ssbr: teratorn: promises and object composition and even object capability models are old news
11:30  teratorn: well I wouldn't know about that...
11:30  pylix: Okay so 2.7 is the go to version since i'm beginning
11:30  merijn: teratorn: Peanuts compared to the power of dependent typing
11:30  ssbr: teratorn: but an actual decent dependently typed language, that's something that hasn't really been done yet.
11:31  ssbr: Epigram is an experiment in that direction.
11:31  cnf: pylix: i'm on 2.6.1
11:31  merijn: And now that I'm actually reading the Epigram papers it sounds like they actually have some reasonable ideas of making this stuff practical to use
11:31  pylix: I'm new so I won't get the differences
11:31  teratorn: so experiments are better than something you can actually use today
11:31  ssbr: 2.7 is fine for beginners.
11:32  merijn: teratorn: Do people actually use E?
11:32  ssbr: teratorn: ? merijn was making A) a joke, B) a reference to Epigram 2 or 3 or something, which would be much less of an experiment
11:32  teratorn: merijn: no, but you could!
11:32  pylix: i hear the syntax in 3.x is more simplified
11:32  fasta: What is an example of a project of at least a few thousand lines of Python code which is regarded as top-quality code?
11:32  merijn: teratorn: Same goes for Epigram, version 2 is out already
11:32  ssbr: pylix: it isn't simplified in any ways that will matter to you.
11:32  ssbr: merijn: Oh, version 2 came out? When was that?
11:32  merijn: fasta: Large parts of Twisted
11:32  pylix: heh i guess that's true
11:32  teratorn: merijn: (that's not really true... there is some interesting work that's been done in E... CapDesk for one)
11:32  merijn: ssbr: No clue, but I saw verson 2 on their page
11:33  cnf: hmm, i should look for a "whats different from 2 to 3" list thing
11:33  ssbr: well, at least epigram 2 doesn't have that ass-backwards insane syntax from epigram 1
11:33  pylix: so dive into python is a good resource for the noob programmer?
11:33  ssbr: who the hell writes a 2D language, anyway?
11:33  pylix: if i'm going 2.x
11:33  ssbr: pylix: terrible resource
11:33  ssbr: pylix: has anyone linked you to Think Python yet?
11:34  pylix: no
11:34  merijn: Anyway, time to go shopping instead of talking about obscure languages :p
11:34  ssbr: pylix: maybe try http://bit.ly/40CBHF
11:34  fasta: Python has no formal semantics, so in a sense there is no good resource to learn Python.
11:34  merijn: ssbr: Time to wait for dependently typed FRP :p
11:34  ssbr: fasta: Python has some formal semantics.
11:34  Wild_Cat: ssbr: sadly, Befunge has opened the way to not only 2D languages, but N-dimensional languages.
11:34  fasta: You could trace an interpreter to see what it does, though.
11:34  Wild_Cat: (yes, people have written N-dimensional Funges)
11:35  ssbr: fasta: there's a lot of stuff that isn't defined, and a lot of stuff that isn't 8sufficiently* defined, but plenty of stuff is very specifically defined in e.g. the langref
11:35  fasta: ssbr, where is the equivalent of the Standard ML description?
11:35  ssbr: fasta: I said some, not tons.
11:35  Alberth: fasta: reading the formal semantics is not the best way to learn a language
11:35  fasta: Alberth, the best way is someone witty going through the formal semantics, imho.
11:35  ssbr: fasta: it should also be pointed out that you're being an insufferable pedant to someone that doesn't even know how to program
11:35  fasta: Not the dumbed down books that most publishers come up with.
11:36  ssbr: and therefore, would be unable to read the formal semantics, not knowing what they are.
11:36  Alberth: fasta: so from a set of SOS rules, you are going to deduce the best way to use a dict/list/LC/etc ?
11:36  fasta: ssbr, uh, what?
11:36  fasta: ssbr, I have read tons of formal semantics.
11:36  ssbr: fasta: I was talking about pylix
11:36  ssbr: You don't tell a first-time programmer that there's no good way to learn Python because it lacks a sufficiently formal specification
11:37  fasta: ssbr, ah, it was mostly unrelated to him.
11:37  ssbr: So you just figured you'd use a conversation trying to help a newbie in order to interject some of your opinion about the formality of Python's language reference?
11:37  fasta: ssbr, right.
11:37  ssbr: I'm sympathetic to your cause, but not your methods
11:38  fasta: pylix, I recommend you get an interesting goal (e.g. irc client) and simply start to write it. Every time you are stuck you get a book and find the relevant section and/or you find documentation.
11:38  pylix: well i have time. I'm sure i'll come to some understanding eventually i'm just looking for the best way of going about it.
11:38  fasta: pylix, so, learn what you need.
11:38  xro: hi, i have a basic problem.... get a value from a list of tuple --> http://dpaste.com/261828/   can you help me? just say me what should i use...
11:39  Alberth: fasta: an IRC client is not a nice topic
11:39  fasta: Alberth, I agree, but lots of people do think so.
11:39  torpedotux: 8492 lines of manpage. really ?! :/
11:39  Alberth: fasta: so don't suggest it then, please
11:39  fasta: Alberth, what do you think is an interesting project for a beginner?
11:40  ssbr: A game.
11:40  Alberth: xro: a tutorial about indexing tuples is what you need
11:40  fasta: ssbr, 2D?
11:40  neumaennl: yup, I wrote a nonogram game to learn python :)
11:40  ssbr: fasta: preferably text-based.
11:40  ssbr: 2D requires learning too much, too fast.
11:40  Alberth: hangman?
11:40  ssbr: hangman is a good choice!
11:41  ssbr: Yeah, a lot of the bsd-games would work, for example.
11:41  pylix: well I love games.
11:41  ssbr: (isn't there a text-based monopoly in there? that could be the final thing before graduating to pygame or something :D)
11:42  nicark: text based game of 15 shouldn't be too hard
11:42  pylix: 15?
11:42  ssbr: a card game like go fish would teach usage of lists and some small amount of OOP...
11:43  Alberth: a small adventure game
11:43  ssbr: pylix: I think, http://en.wikipedia.org/wiki/Fifteen_puzzle
11:43  xro: <Alberth>, but i can't index it by a string? only like myTuple[0]?
11:43  ssbr: but maybe not. I don't know what 15 is
11:43  fasta: I agree with those suggestions, but I used a different path. Just do whatever you are interested in.
11:44  nicark: or was it called game of 16? you have a 4x4 square with numbers from 1 to 15 with random order, and the goal is to swap every number with the empty space to arrange all numbers sequentially
11:44  ssbr: I do agree with the "do what you're interested in" suggestion, yeah
11:44  Alberth: xro: indeed, tuples can only be indexed by number
11:44  ssbr: it keeps motivation high! no point doing boring "hello world" stuff... :(
11:44  ssbr: nicark: 15 was correct
11:45  Alberth: nicark: that's a good one too
11:45  xro: Alberth, so in my exemple...  how can i check that the 1000 value from the tuple ('a', '1', '1000') will be assigned to a1?
11:46  fasta: Can one overload the assignment operator in Python?
11:46  xro: <Alberth>, when i get 2 value i use a dict then use a string as index... but i can't with 3
11:47  Ratty_: Why does this fail to match the ] character? re.match(r'(\])', 'foo]bar')
11:47  Alberth: xro: "index" is the number 0 in   "myTuple[0]"   it has nothing to do with the contents of that tuple field, the field can be anything, including a string.
11:48  jorrit: Ratty_, same reason that re.match('a','bab') fails too.
11:48  jorrit: Ratty_, Put .* in front of the re to match the characters that come before the ]
11:48  Dulak: fasta: no, assignment can't be overridden directly afaik,  you can override +, ==, etc but not assignment (=)
11:48  DeVol: How can I print() (or some other output?) in a unittest?
11:49  Ratty_: jorrit: oooh. I thought it would assume that because I didn't have ^. Cheers.
11:49  pylix: well i'm gonna get started. A game of that sort seems very mathematically intensive i'll try something more basic as a first goal.
11:49  xro: <Alberth>, yes but i need to check the 2 first value in the tuple to know what to do with the the third one.... Like in my exemple... Have you an idea about how to proceed?
11:49  jorrit: DeVol, just use print
11:50  Alberth: xro: right, I see only now what you are trying to do.
11:50  teratorn: speaking of 2-dimensional syntax, this is pretty cool if just to make you think: http://subtextual.org/subtext2.html
11:50  xro: Alberth, no problem... And have you an idea?
11:51  Alberth: xro: pull out the first two values from the tuple, and combine them. Use the result as key for storing the 3rd value
11:51  DeVol: jorrit; oh right :P
11:51  DeVol: jorrit; isnt there some better alternative for use in unittests? like debug or something. i seem to recall something like that
11:51  Alberth: xro: in general, you don't want to create real variables dynamically, better store them as strings in a dict
11:51  jorrit: DeVol, what exactly is the problem you are having with print?
11:52  xro: <Alberth>, so create a dict like 'a1:1000'
11:52  Alberth: actually  { 'a1' : '1000' }
11:52  DeVol: jorrit; nothing serious, output doesnt start on a new line
11:52  jorrit: DeVol, then put a \n in front of the string.
11:52  DeVol: jorrit; i just thought there was a 'better' alternative
11:53  DeVol: jorrit; ok thank!
11:53  xro: Alberth, ok... seems to be the right way... thanks
11:54  torpedotux: wt! "The MongoDB server (mongod) must run on a little-endian CPU, so if you are using a PPC OS X machine, mongod will not work."
11:55  Ratty_: mongo is picky, it'd dodgy on 32bit intel too.
11:55  Dulak: 2g max data size for 32 bit with mongo
11:55  torpedotux: Ratty_: Dulak aye
11:56  teratorn: I remember I tried to play Crack Attack with someone on a ppc mac laptop.... wouldn't work because the network code used host-native ordering
11:57  LgZ-optical: Hey guys. I have a GZIP/zlib issue - details here http://fpaste.org/CmzA/ :)
11:58  merijn: torpedotux: I thought PPC was bi-endian
11:59 --- CHOCOBY is now known as chocoby
11:59  Punkoff: How do I send a file to user from WSGI app under Twisted?
11:59  torpedotux: merijn: is it? but that's still a wt. what if someone has ppc osx?
11:59  torpedotux: (and wnats to run mongod?) :(
12:00  torpedotux: suckered
12:00  Ratty_: they need a new mac anyway
12:00  ssbr: man, the only good 2D syntax is from http://en.wikipedia.org/wiki/Piet_%28programming_language%29
12:01  torpedotux: hehe
12:01  ssbr: "Composition with large red plane, grey-blue, yellow, black, ERROR, and blue"
12:02  teratorn: hahahaha
12:03  teratorn: how deliciously absurd
12:05  Yhg1s: LgZ-optical: you're looking for StringIO.
12:05  LgZ-optical: ih that sounds like a good idea
12:05  LgZ-optical: oh
12:05  LgZ-optical: *
12:05  Dulak: when writing a library what is the best way to abstract the data storage?  Is there a library out there that does this in a good way I can look at?
12:07  Dulak: I'm writing an a/b testing library and would like to see it able to be used with say, mysql, couchdb, or even flat files.  Not sure how realistic that goal is and am thinking I'm just gonna do it for my db of choice and leave it up to others to adapt it.
12:08  LgZ-optical: Thanks a lot Yhg1s. cant believe i didnt think of that
12:08  LgZ-optical: as is im busy rewriting all these file buffers to use stringio, god knows why i didnt think of it
12:08  LgZ-optical: t:p
12:09  merijn: Dulak: The best way to abstract is to think of a convenient data storage API for your program, then implement that API for each storage medium you want to run your code on
12:10  Dulak: merijn: There isn't any sort of generic solution widely accepted as correct to model after?
12:10  merijn: Dulak: For SQL database you could use SQLAlchemy or something, but if you want to go broader you need to implement your own solution for each database. Defining a simple API for yourself makes the latter task easier
12:10  merijn: Dulak: The correct solution is "Whatever API makes your main program simpler"
12:11  Dulak: Yes I am thinking I need to abstract my own database of choice from the start, to make it easier on others to write their own adapters, but I only care about couchdb so that's what I'm writing.
12:14  torpedotux: Dulak: what i do is have simple module that issues SQL statement and expose them via functions. KISS. although I would rather use an ORM if it was a project built from scractch but realworld is a bitch
12:15  Dulak: torpedotux: well personally I don't care about sql, I just want a generic object to contain the data, and a way for multiple backends to supply the object
12:17  torpedotux: Dulak: i don't have experience building multiple DB (assuming it confroms to DBAPI contract). sorry.
12:17  torpedotux: (bakends)
12:18  cederman_: Alberth: I tried this now http://gist.github.com/640160 It works just as break, the problem for me is understanding how to break the entry()-loop and when I'm back at the main menu I want it to realise that I just came back and want to break that loop too.
12:20  Alberth: cederman_: return that information from the enter() loop by using a 'return' statement.
12:21  cederman_: ok, if I return "finnished = True" how do I check for that statement in the main-loop?
12:24  Alberth: cederman_: suppose you let 'enter()' return a 'True' value if you want to exit (and a 'False' value otherwise). The returned value from the function can be caught at line 19 "want_to_exit = enter()" below line 19, then test that value, and set 'finished' accordingly.
12:24  Alberth: cederman_: what is line 29 doing exactly?
12:26  Alberth: you are aware that you run the menu as a sub-menu of itself?
12:27  Dulak: I guess looking at how sqlalchemy abstracts things would give me ideas on how to do what I want
12:28  Alberth: would using an existing abstraction framework not be easier?
12:28  cederman_: Alberth: I don't really follow your first reply. Line 29 in my first edit or the second?
12:29  Alberth: http://gist.github.com/640160 <-- this one
12:31  Alberth: cederman_: perhaps read a bit about returning values from functions first?
12:33  cederman_: Yeah, I guess =/ Line 29 is my attempt to show a list and then return to the menu. But I guess that's a stupid way to do it ><
12:35  Alberth: cederman_: there is a much easier way of doing that, indeed :)
12:36  cederman_: gahh ><
12:36  Taos: Anyone know how I can give a command to a twisted instance?
12:37  kinygos: hi...apologies for the noob question...i have an object modelling an order in my system...it goes through a series of stages (new, ready-for-payment, paid, not-paid), etc...what is a good/recommended way of tracking this state?  in very old-school ways, i'd have a series of global constants, but i'm not sure of the way to do this in python
12:37  Alberth: cederman_: I have seen that happen many times, it is a common mistake. The trap is that it seems to work at first sight.
12:37  Taos: kinygos: create a variable in the class called state then just read it back
12:38  cederman_: yes, and the problem appears when I try to add things in a local list for example, since the list gets emptied hehe. But I don't know how to work around it
12:40  kinygos: Taos: apologies, i have that variable, but it's just numeric...i guess i want to make my code more readable
12:40  ssbr: kinygos: how are those global constants? they are specific to a particular order
12:41  ssbr: kinygos: which would mean that the stage should somehow be represented as an attribute on that object, so that you can ask what stage it's in
12:41  kinygos: ssbr: well, they're specific to all orders...i'd like to write code like if current_order.status == paid:
12:42  ssbr: kinygos: What does "specific to all orders" mean?
12:42  ssbr: all orders do not have the same stage.
12:42  kinygos: ssbr: it's a class level attribute...sorry, i wasn't trying to be clever
12:42  Ratty_: When outputing to the terminal how do I overwrite my previous message, like if I wanted to make an ascii progress bar.
12:45  kinygos: ssbr: did you mean that i should have different query type member functions that return True/False depending on the state, and just keep the number internal to the class?
12:45  henri: hello here ! how are you doing ?
12:45  henri: I am looking for a web app (free) that would help us maintain 6000+ pythons unit tests
12:45  ssbr: kinygos: no, I just mean you have an attribute.
12:45  ssbr: you can do that too. It doesn't really matter.
12:45  ssbr: Point is, you store the state on the object. Easy.
12:46  kinygos: ssbr: indeed..i am, what i want to avoid is inadvertant bugs...for example by assigning the wrong value
12:47  ssbr: kinygos: if you assign the wrong value, there is no way to avoid a bug, no matter how you implement it.
12:48  kinygos: ssbr: indeed, but you can make it obvious...current_order.status = 3 vs current_order.status = paid
12:48  Taos: henri: web2py
12:48  henri: Taos: hi ! thanks I'm looking at it
12:48  ssbr: kinygos: so make some global constants.
12:49  kinygos: ssbr: lol...erm, apologies for the round-circle....i didn't think that was a very 'python' thing to do
12:50  ssbr: global constants are fine. It's when they're not constant that you get evil problems
12:50  henri: Taos: it seems it's a web application manager
12:50  henri: Taos: i'm looking for something like hudson but specilalized to python unit testing
12:50  kinygos: ssbr: am relatively new to python (at least, serious app dev in python)....thanks for that
12:50  henri: with tests results, a scheduler, etc...
12:51  ssbr: kinygos: yeah, I didn't understand you
12:51  kinygos: ssbr: no worries...was my failure to ask the question clearly
12:55  lvh: Greetings!
13:03  figure002: if use multiprocessing module to start a new process, why doesn't the code after p.start() execute while the process is running?
13:06  ceegee: hello there
13:06  x0rs_w: holy crap, just went to python.com instead of python.org on accident. That definitely isn't work friendly
13:06  merijn: x0rs_w: Yeah, I noticed before
13:07  ceegee: I am trying to read a configuration from a template file and write it to another file, during reading the template file I want to replace some lines with another one
13:07  merijn: At work, too
13:07  ceegee: like this:
13:07 * ikanobori has python.com in his companies dns.
13:07  ceegee: for line in fileIn:
13:07  ceegee:     if line == "PCADD=":
13:07  ceegee:         line = "PCADD=-v20"
13:07  ceegee:     fileOut.write(line)
13:07  x0rs_w: merijn: I'll definitely remember not to make that mistake again =)
13:07  nosklo: ceegee: please don't paste here in the channel
13:07  torpedotux: x0rs_w: why? did you see a cobra instead? :p
13:08  x0rs_w: torpedotux: well, just while at work  =P
13:08  torpedotux: hehe
13:08  nosklo: ceegee: lines read from file include line ending
13:08  ceegee: nosklo, \n ?
13:09  nosklo: ceegee: if line.strip() == "PCADD="    or    if line == "PCADD=\n"    or    if line.startswith("PCADD=")
13:09  nosklo: ceegee: something like that
13:09  nosklo: ceegee: one of these
13:09  ceegee: thank you
13:09  nosklo: figure002: it does execute while the process is running
13:10  acorn: When doing string formatting, how come both %d and %s works for an integer? I thought it would have to reflect the type of the value..
13:11  lvh: acorn: %s tries to convert to a string first -- ints understand how to be converted to strings
13:11  figure002: nosklo: hmm wait, you're right. wonder why it works with 'print somethin' and not with loading a GTK window.
13:11  acorn: lvh: okay, and if I use %d ? what's happening then?
13:11  lvh: acorn: use %d anyway -- it's semantically meaningful, plus it lets you do tricks like number formatting, padding...
13:12  Alberth: lvh: but %d breaks duck-typing
13:12  merijn: Alberth: By that logic so does int()
13:12  nosklo: figure002: it works for loading a gtk window too
13:13  lvh: Alberth: What? How?
13:13  qebab: Alberth: it actually doesn't - if the thing is convertable to an int, it Just Works
13:13  lvh: Alberth: It does not!
13:13  lvh: Alberth: Anything supporting __int__ works fine
13:13  lvh: Alberth: Examples: decimal.Decimal, floats
13:14  Diverdude: how do i see a list of all active variables in the current workspace scope? Like the whos command in matlab
13:15  figure002: nosklo: strange, my window only shows up after the process has finished loading.
13:15  nosklo: figure002: strange. I can't reproduce your issue
13:15  lvh: Diverdude: That depends! Why
13:16  nosklo: figure002: http://bpaste.net/show/10293/
13:16  Diverdude: lvh, what do you mean?
13:16  nosklo: figure002: the window shows up immediately
13:16  Diverdude: lvh, because i want to see what variables i have, what their dimensions are etc.
13:16  Alberth: lvh: Hmm, good point. The use case I had was a library that printed user-supplied values with %d, which breaks if you give it an instance of a class. I did not realize there was a method to convert to %d text as well.
13:17  lvh: Diverdude: because "active variables" and "current workspace scope" aren't meaningful things in Python, so I'm trying to figure out what you are trying to do.
13:17  lvh: Diverdude: are you using ipython or something?
13:17  Diverdude: lvh, right now just python in the terminal
13:17  lvh: Diverdude: Then you can't do that in a sensible fashion. (You can, but not in a sensible fashion.)
13:18  papna: Diverdude: Why don't you know from scrolling up?
13:18  lvh: Diverdude: Why don't you know which names you've assigned to?
13:18  figure002: nosklo: your code does work, i don't understand
13:18  Diverdude: lvh, because i might have assigned to 100 variables during last the hours, and now i want to check what i have
13:19  ceegee: nosklo, thanks, it works
13:19  Diverdude: lvh, its basically just getting an overview of the variables
13:19  figure002: nosklo: can you have a look at my code?
13:19  Diverdude: lvh, surely there must be some way of doing that
13:19  lvh: Diverdude: you keep saying "variables" but that doesn't really mean anything
13:19  papna: Diverdude: Your interpretter session's too long. You generally want to write a script so you can see what you did.
13:19  Xnotrun: in python3, the csv.reader don't have the next() method anymore Oo ??
13:19  Alberth: Diverdude: usually, you write and execute scripts only, the interactive interpreter is mainly for simple/fast experiments only.
13:19  lvh: Diverdude: if you did a = []; b = a; # what would you want to see?
13:19  fasta: Is it odd that one wants to commit code containing commented print statements to make it easier to debug something?
13:19  Azerith: dir filename?
13:20  papna: Diverdude: `print globals()` is kind of like what you're asking for, but isn't the nice solution to this problem.
13:20  Azerith: or rather dir mylib.py
13:20  papna: Xnotrun: x.next() ==> next(x)
13:20  lvh: globals() is the non-sensible thing I was talking about, yes
13:20  Xnotrun: papna: ty!
13:20  lvh: also, technically, from his explanation he wants locals()
13:20  Alberth: fasta: what are "commented print statements"?
13:20  papna: lvh: I know, and I almost said that.
13:20  papna: lvh: But I really don't think it is.
13:21  fasta: Alberth, # print "The foobar objects are:", foobar_objects
13:21  Xnotrun: papna:  but, for i in reader still works right?
13:21  papna: Xnotrun: Yes.
13:21  lvh: but then again, maybe not, because "workspace scope" is not a thing that exists in Python
13:21  fasta: Alberth, an ideal solution would be to have editor support to hide specific developer statements.
13:21  nosklo: fasta: logging.debug('Foobar objects')
13:21  ssbr: fasta: I've always considered commented code to be a bad thing to put in a repo
13:21  nosklo: fasta: also, use a debugger
13:22  papna: Diverdude: When your interpretter session lasts more than 4 minutes, you're asking for increased work.
13:22  fasta: nosklo, debuggers are not useful if you are interested in all the values, instead of just a few.
13:22  fasta: nosklo, that is print statements in e.g. loops or over time.
13:22  Alberth: fasta: yeah, I realized that later. Hmm, no, I have some code like that too. On the other hand, it is simple to add a DEBUG=False at the top, and add an "if DEBUG:" statement
13:23  fasta: Alberth, yes, but then the argument is 'it makes it hard to read'.
13:23  nosklo: fasta: logging module can be configured to show/hide debug statements
13:23  nosklo: fasta: logging.debug('foobar objects: %r', foobar_list)
13:23  fasta: nosklo, yes, but you still have that you can see it in the source code (that is, there is an impact on the readability).
13:23  Diverdude: hmmm so normally people areusing ipython and not python?
13:23  nosklo: Diverdude: no.
13:23  jorrit: Diverdude, nobody said that.
13:23  fasta: Diverdude, bpython is technically more advanced.
13:24  nosklo: Diverdude: we asked that because your issue could be related to that
13:24  Alberth: fasta: I suppose that is true to some extent.  On the other hand, otherwise you have to figure out where to add the right print statements after a year or so, which costs time
13:24  lvh: Diverdude: I was assuming ipython because you were saying things that made me think you were trying to do matlab in python
13:24  nosklo: Diverdude: but using the plain python interpreter is great
13:24  lvh: Diverdude: ipython is terrible
13:24  fasta: Alberth, that's why editor support would be best, I think.
13:24  fasta: Alberth, log_developer_name, instead of 'print' for example.
13:24  Alberth: fasta: that does not help with dead-tree copies :)
13:24  fasta: Alberth, then in the display, simply strip away those lines.
13:24  Diverdude: lvh, ahh okay i see
13:25  Alberth: fasta: sane editors support folding
13:25  fasta: Alberth, we never print code, so it's not an issue.
13:25  Diverdude: fasta, bpython is the normal python?
13:25  fasta: Alberth, but that's still a manual operation.
13:26  jorrit: Diverdude, nope
13:27  Alberth: fasta: you'll have to indicate in some way what should be hidden and what not. Perhaps you can script things away, eg generate a diff for a developer?
13:28  Diverdude: so in both normal python, bpython and ipython i can use all the same libs, such as e.g. numpy?
13:28  cryzed: Can anyone tell me how to escape curly braces in jinja2? I basically want to use \lhead{{{ chapter.title }}}
13:29  papna: Diverdude: Correct.
13:29  dalela: hi
13:30  Diverdude: papna, how many pthons exists besides python, bpython and ipython?
13:30  Alberth: cryzed: this is #python rather than #jinja2, last time I checked.
13:30  lvh: Diverdude: bpython is the only repl you should care about
13:30  cryzed: Alberth, well since Python is pretty general and Jinja2 is a Python module I thought it was okay
13:30  cryzed: Last time I checked
13:31  dalela: When I try to generate a captcha with the django-simple-cpatcha module, I get the error: The _imagingft C module is not installed
13:31  Diverdude: lvh, why is ipython so terrible?
13:31  lvh: Diverdude: there's a few obscure ones like the one on s60 phones
13:31  papna: Diverdude: There is a thing called Python or sometimes called CPython which the programs with binaries called `python`, `bpython` and `ipython` all use.
13:31  dalela: import Image and import _imaging works
13:31  cryzed: Alberth, especially seeing as the jinja2 channel is non-existent
13:31  lvh: isn't the jinja2 channel #pocoo?
13:31  lvh: I could be mistaken
13:31  cryzed: lvh, thanks
13:32  Alberth: cryzed: it probably is, but this channel is mostly about generic python programming questions, rather than of a library, so elsewhere you may get better/faster advice
13:32  cryzed: Alberth, alright
13:33  anev: is it possible for python to access windows clipboard? i.e. copy string from/ot ?
13:33  papna: Eh, this channel is glad to help with libraries about which people have expertise.
13:33  zxww: In django templates you can write forloop.counter inside a for loop to find how many iterations have been made, how do you do that in normal python code?
13:33  Diverdude: lvh, why is ipython so terrible?
13:33  papna: anev: Probably win32api
13:33  zxww: other than manually using a counter
13:33  papna: anev: Are you using a GUI toolkit?
13:33  merijn: anev: I'm sure it can, but not sure how. As papna said win32api would be a good start
13:33  anev: papna: http://
13:33  anev: sourceforge.net/projects/pywin32/?
13:34  papna: anev: YEah.
13:34  lvh: Diverdude: man, please don't repeat questions every minute until you get a reply, it's *really* annoying
13:34  anev: papna: cool cheers :)
13:34  Alberth: zxww: enumerate
13:34  Xnotrun: Diverdude: ipython isnt terrible, for me is terrific
13:34  merijn: anev: That lets you bind any arbitrary COM object, if you look at the MS documentation you'll probably find one related to the clipboard
13:34  lvh: Diverdude: ipython does all sorts of crazy things that aren't python (such as %run) and commits all sorts of crimes against your enviornment that make perfectly okay python software fail for incomprehensible reasons
13:35  nosklo: Diverdude: that's specially bad for beginners
13:35  nosklo: since they can't tell when the issue comes from ipython
13:35  lvh: Xnotrun: I would submit that you have not used it as a repl for an existing python project, and instead are only using it as a scipy frontend
13:35  lvh: which is what it was originally intended for
13:35  lvh: but people saw "oooh pretty colors" and decided it was a sane repl replacement
13:35  lvh: (it is not)
13:35  Xnotrun: nosklo: ipython is bad for beginners? o.o I love completition, and i use it to inspect objects that im not used to
13:35  zxww: so there isnt any other way than making a counter than incrementing it each iteration?
13:36  Alberth: (13:34:11) Alberth: zxww: enumerate
13:36  lvh: Xnotrun: bpython does that without screwing environments up in new and exciting ways
13:36  lvh: zxww: depends why you're doing that
13:36  zxww: what do you mean by that?
13:36  lvh: zxww: the correct answer is either enumerate or zip
13:36  dalela: When I try to generate a captcha with the django-simple-cpatcha module, I get the error: The _imagingft C module is not installed
13:36  dalela: what can I do ?
13:36  zxww: enumerate is a module?
13:36  lvh: zxww: enumerate is a builtin, see the docs
13:36  dalela: PIL is installed, import Image, _imaging works
13:36  Xnotrun: lvh: nice didnt know that, i normally use it with numpy
13:36  nosklo: Xnotrun: it's really bad because it's not python -- code that runs in python doesn't work in ipython and vice-versa
13:36  zxww: ok thanks, ill look into it
13:36  Alberth: it is a builtin python function
13:37  lvh: Xnotrun: Yes, that makes it a pretty numpy frontend, but *not* a generic repl replacement
13:37  lvh: Xnotrun: it is very good at the former and VERY VERY BAD at the latter
13:37  Xnotrun: lvh: i use that for small snippets only, never runned one of my programs with ipython
13:37  lvh: Xnotrun: Right -- so you have not yet discovered ipython's many flaws
13:38  lvh: that doesn't mean it doesn't have any
13:38  StarCraft_II: Windows programming makes my eyes bleed.
13:38  Xnotrun: lvh: bpython is fancy!
13:39  zxww: ok enumerate is amazing, love learning new python
13:39  Alberth: dalela: install that module seems like a way out of it.
13:39  Xnotrun: lvh: i use vim with completition too, pretty nice =D
13:39  Alberth: zxww: there are many nice builtin functions :)
13:39  lvh: Xnotrun: Yes, and importantly: not a gigantic mess of incomprehensible eldritch code from the nether regions of Dis
13:40  lvh: Xnotrun: Yeaaah don't get me started on vim's non-completion
13:41  lvh: (allow me to get out of that one with a simple paste from the program I'm currently using's about box: GNU Emacs 23.1.50.1 (x86_64-pc-linux-gnu, GTK+ Version 2.18.0))
13:41  Xnotrun: lvh: but i need to set up the colors of the bpython, or at least change my xterm background
13:41  Xnotrun: lvh: emacs its just too much for me, never achieve to remember all the hotkeys
13:42  merijn: StarCraft_II: That's normal for coding on windows
13:42  lvh: Xnotrun: http://docs.bpython-interpreter.org/themes.html#themes
13:42  Alberth: Xnotrun: vim also has too many
13:42  StarCraft_II: merijn, I'm not exaggerating.
13:42  lvh: Xnotrun: That's funny since vim7.1 comes with more by default
13:42  jorrit: StarCraft_II, I program on windows same as on linux. I use bash, gvim, gcc/python, make, whatever, ...
13:43  jorrit: StarCraft_II, so I hardly ever notice what OS I'm running.
13:43  dalela: Alberth: I cant find _imagingft to instal..
13:43  StarCraft_II: What I mean is, .NET, Visual studio, Win32 API etc
13:43  StarCraft_II: Winforms, Windows presentation foundation
13:43  StarCraft_II: etcetera
13:43  lvh: StarCraft_II: #python-offtopic
13:43  lvh: Unless your rant somehow ties into Python.
13:44  StarCraft_II: well, I guess that's why i'm in this channel now
13:44  lvh: StarCraft_II: Being told off?
13:44  StarCraft_II: no?
13:44  Xnotrun: lvh: i use a few only that i need, but idk i dont get along with emacs
13:44  lvh: Xnotrun: Okay, whatever -- I wasn't trying to convert you
13:45  anthonyw: :window splitv
13:48  ssbr: uck
13:48  ssbr: jinja2 requires setuptools.
13:48  lvh: ssbr: they expect you to install it into virtualenvs
13:49  ssbr: I feel like I'm corrupting something innocent by installing setuptools on jython... I've never done it before... :(
13:50  nosklo: ssbr: just make a link to jinja2 folder?
13:51  nosklo: I don't think you actually have to install it
13:51  Octave: Is there a way to view all active objects in python? My app hangs on close. I guess it's bad design, but I need to find where.
13:51  Habbie: Octave, are you using threads?
13:51  Alberth: dalela: by the name, it looks like a sub-module from imaging, perhaps some optional part that you don't have?  (PIL has quite a few sub-modules, but I never looked at their structure in detail)
13:51  nosklo: Octave: "active"?
13:51  ssbr: nosklo: it's too late!
13:51  Octave: Habbie: no
13:51  ssbr: jython will never be the same again :(
13:52  nosklo: ssbr: you can always reinstall jython :)
13:52  Octave: nosklo: any object still alive
13:52  nosklo: Octave: "alive"?
13:52  ssbr: nosklo: but it's the *concept* of jython that's been fundamentally altered!
13:52  ssbr: at least before I could have some idle fantasy that, for some strange reason, setuptools was unnecessary and wouldn't even install on jython...
13:53  Alberth: ssbr: perhaps invent another python designed to reject setuptools?
13:53  nosklo: current python rejects it enough
13:53  ssbr: nosklo++
13:53  nosklo: for me to not want to use it
13:53  Octave: noslo: when I close my wxPython app, after having opened a tab in a tabbed widget, it hangs.
13:54  Octave: The frame closes, but it hangs on the terminal.
13:54  nosklo: Octave: weird. Do you have a small, easy-to-run issue reproduction code you could paste?
13:55  Octave: nosklo: not really. I just merged two modules with code I'd done into my program.
13:57  Octave: fixed
13:57  Octave: I had some old test code still in one module. Sorry about that guys. Guess It's getting late. :/
14:01  Xnotrun: lvh: can you paste your config file? i dont have one, neither an example (of bpython)
14:01  figure002: i'm starting with multiprocessing, but i'm having some problems. my script doesn't do what i expect it to do. can someone have a look? http://bpaste.net/show/10294/
14:03  nosklo: figure002: looks like you're emiting signal in the subprocess and trying to catch it in the main process
14:03  nosklo: figure002: you can't do that
14:05  figure002: nosklo: but for some reason it receives the signal.. how else should i report to the main process that the sub-process is finished?
14:05  nosklo: figure002: well, since you're using gtk, I'd use glib.spawn_process() and glib.child_watch_add() to get your callback when the subprocess finishes, instead of using multiprocessing modle
14:06  nosklo: module
14:06  figure002: nosklo: does that mean i need to use another module: glib?
14:06  nosklo: figure002: glib is part of pygtk
14:07  nosklo: figure002: you already have it installed.
14:07  figure002: nosklo: does it work on windows also (the app i'm writing must run on win)?
14:07  nosklo: yes
14:08  Yhg1s: figure002: you should also realize multiprocessing is not for subprocesses as such.
14:08  Yhg1s: and what you're trying to do, mixing subprocesses and an event system like gtk, makes no sense and will break in weird ways.
14:08  nosklo: you can mix subprocesses in an event system, if you use the event system tools to do so
14:09  Yhg1s: but not multiprocessing.
14:09  nosklo: like glib.spawn_async
14:09  nosklo: figure002: sorry, I wrote the function name wrong earlier. It's glib.spawn_async
14:09  Yhg1s: eh, yeah, I meant 'mixing multiprocessing and an event system'
14:09  Yhg1s: mixing subprocesses and an event system can work, if you use the right tools.
14:10  figure002: Yhg1s: hmm, so *that's* the cause of the many weird errors i got, including those X server errors
14:11  figure002: can't believe i have to go through so much trouble just to get a progress dialog working :S
14:11  figure002: which is the reason i want to use threading/multiprocessing
14:11  nosklo: figure002: which database are you initializing?
14:12  figure002: at the moment a sqlite database, but later i will add support for a PgSQL database that's running here..
14:12  naquad: hi
14:12  nosklo: figure002: well, sqlite uses a blocking API, which blocks your GUI. That's why you have to go for so much trouble...
14:12  naquad: i've got a file path (/etc/some/file.txt) how do i get only its title (file)?
14:13  nosklo: figure002: postgresql has a async non-blocking api that you would want to use, that way you could do everything in the same thread/process without freezing -- much easier
14:13  nosklo: figure002: I don't have much details about it though
14:13  lvh: twisted.enterprise lets you do non-blocking things though
14:13  lvh: or at least fake it well enough
14:13  lvh: (see also: divmod axiom)
14:13  nosklo: figure002: another idea to make it easy is to use twisted -- it integrates well with gtk's mainloop and has twisted.enterprise to... yeah lvh  said it
14:14  figure002: nosklo: first threading, then multiprocessing, and now twisted.. *sigh* hope this one really works
14:15  nosklo: naquad: os.path.splitext(os.path.basename(yourfilename))[0]
14:15  Yhg1s: figure002: well, whoever told you you could do what you wanted with multiprocessing was flat-out wrong.
14:15  naquad: nosklo, thank you
14:15  Yhg1s: figure002: threads *can* work, if you do it right, but you have to strictly compartimentalize the work.
14:15  nosklo: figure002: subprocesses can also work
14:15  figure002: this also means another module the user needs to download and install to get my app working
14:16  Yhg1s: figure002: Twisted makes this kind of thing much easier, in general, but you have to work with Twisted. it's not a drop-in replacement.
14:16  Yhg1s: figure002: well, if you don't want that, don't have a progress bar.
14:17  figure002: Yhg1s: i really want to get the progress bar working, a freezing GUI doesn't look very professional. Btw, i almost got it working with threading, but it was getting very unstable.
14:17  nosklo: figure002: what's forcing you into all this trouble is the blocking API of the db -- it blocks, so you can't update the progress bar. Threading is hard. Twisted is the easy way out. glib.spawn_async is the middle ground
14:18  Yhg1s: figure002: there's basically four ways to do what you want: allow the GUI to update inbetween the work you're doing, do the work in a separate thread which only communiates through synchronized datatypes, do the work in a separate process (but *not* using multiprocessing) that communicates over a pipe or socket, or use a library that does it for you (generally through one of the aforementioned mechanisms.)
14:19  Yhg1s: figure002: what is it you're actually doing while you want to update the progress bar?
14:21  figure002: Yhg1s: i believe i got the first option working, but later on in the app, i got trouble with other progress bars. There are a few situations where i want to update the progress bar: 1) When it's accessing a database 2) While it's performing analysis on data from the database, which can take really long.
14:22  nosklo: figure002: for the latter you could do the "update gui inbetween" idea -- allow your gui to update between each step of analysis work
14:23  figure002: nosklo: that's exactly what i did, and the progress bar actually worked. but, after the analysis was finished, the app would hang.
14:24  nosklo: figure002: you said you used threading -- that's not what I'm suggesting here
14:24  nosklo: figure002: it's more like, for each iteration of your analysis work, yield control to GUI for a bit
14:25  Xnotrun: i made bpython go crazy ... , lvh i tryed the multiprocessing example in the reference... and gosh lol it went mad when i runned pool = Pool(processes=4)
14:26  nosklo: Xnotrun: multiprocessing example is meant to be ran as a script
14:26  nosklo: Xnotrun: not in interactive prompt
14:26  figure002: nosklo: without using another module?
14:26  nosklo: figure002: yes...
14:26  Xnotrun: nosklo: it run smooth in the python interpreter
14:26  nosklo: Xnotrun: it's not meant to
14:27  Xnotrun: i dont understand why ;/
14:27  nosklo: Xnotrun: because it starts a new python intepreter loading your module
14:27  nosklo: Xnotrun: to run the function in another process
14:27  nosklo: Xnotrun: it actually creates a new script that imports your module and runs the function
14:28  Xnotrun: nosklo: but since bpython is just a frontend to python it should not behaviour like python?
14:28  figure002: nosklo: guess i'm gonna give that a try..
14:28  nosklo: Xnotrun: it should.
14:28  Xnotrun: nosklo: it doesnt
14:29  nosklo: Xnotrun: open a issue in bpython's issue tracker
14:29  Xnotrun: yep
14:29  nosklo: figure002: it won't solve your database-access-blocks problem though
14:29  Xnotrun: nosklo: where is that ? im looking in his website but doint find it
14:30  nosklo: Xnotrun: http://bitbucket.org/bobf/bpython
14:30  figure002: nosklo: ok..
14:31  figure002: Yhg1s: you said that multiprocessing is not for subprocessing as such, can you explain?
14:32  nosklo: figure002: multiprocessing starts another python interpreter to load just a function and run it. Objects are serialized and recreated at the new process. That wouldn't work with, say, a window... That's why you can't really access gui objects
14:33  nosklo: figure002: also, since it doesn't integrate with gtk's event system, it's hard to get a notification when it ends, you'd have to poll for it
14:33  figure002: nosklo: i see.. what's poll?
14:33  nosklo: figure002: keep querying to see if it finished or not in a loop
14:34  figure002: nosklo: ah, alright
14:34  nosklo: figure002: as opposed to get your function automatically called
14:34  nosklo: figure002: which is what happens if you use glib
14:34  figure002: nosklo: would glib solve my problem?
14:35  nosklo: figure002: yes.
14:35  torpedotux: nosklo: figure002 doesn't it provide callback?
14:35  torpedotux:  /s
14:35  nosklo: torpedotux: multiprocessing? no.
14:35  torpedotux: nosklo: no no i thought you guys were talking about glib
14:36  nosklo: torpedotux: oh, glib provides, that's why it is one of the solutions
14:36  figure002: nosklo: i'm going to have look at glib...
14:36  torpedotux: nosklo: ahh yes. great. sorry carry on.. :)
14:37  nosklo: figure002: with glib you could just write another small script to init the database, launch it with glib.spawn_async() and add a callback with glib.child_watch_add(). That would get you a notification when it finishes
14:38  figure002: nosklo: sounds neat, can i combine that with a progress bar?
14:38  nosklo: figure002: yes. the problem is when you later want to do more with the database, like, show data
14:40  nosklo: figure002: you'd have to figure a way to move data from the subprocess to the main process. That could be done by serializing the data and using a pipe to move it, but it's a bit boring. That's why the most complete and easy solution is to just use twisted. I use twisted in a similar application.
14:43  figure002: nosklo: sound like i really should give twisted a try.. with twisted i can easlily create threads and access data from the database and display progress dialogs at the same time?
14:43  lucascastro: does someone know about python-tk ?
14:43  nosklo: figure002: yes. You wouldn't create any threads yourself, twisted itself would create them if needed
14:44  figure002: nosklo: that sounds really good.. can it be combined with pyGTK?
14:45  nosklo: figure002: yes. If you use twisted's gtk reactor, it will use glib internally to do all stuff
14:46  figure002: nosklo: that's already a part of twisted?
14:46  nosklo: figure002: yes
14:46  nosklo: figure002: http://twistedmatrix.com/documents/current/core/howto/choosing-reactor.html#auto11
14:47  figure002: nosklo: thanks, i'm going to try it out, hope it doesn't take too much time to figure it out
14:48  nosklo: figure002: oh, you have a lot of reading ahead of you, but it is for your own good :P
14:48  figure002: nosklo: i bet, but not so good for my deadline :P
14:49  lucascastro: I'd like to find out how I can change the font options in listbox on Tk()
14:49  lucascastro: like to turn it bold
14:50  lucascastro: ?
14:53  nosklo: lucascastro: lb = Tkinter.ListBox(...., font=myfont)
14:53  nosklo: er, Listbox
14:54  naquad: can i somehow make os.listdir to give me full path instead of file name?
14:55  nosklo: naquad: result = [os.path.join(PATH, fname) for fname in os.listdir(PATH)]
14:55  lucascastro: nosklo: But I want to change for each item.
14:55  nosklo: lucascastro: oh, then I don't know if it's possible
14:55  nosklo: lucascastro: use a real gui library
14:55  naquad: nosklo, got the same, but with map. thought there's a better solution or some flag for os.listpath.
14:56  nosklo: naquad: argh, map
14:56  naquad: nosklo, what's wrong with map? 0o
14:56  x0rs_w: Do python certifications exist?
14:56  lucascastro: noskle: 'cause I'm programming for Windows_CE
14:57  nosklo: lucascastro: I'm sorry :(
14:57  teratorn: you poor man
14:57  nosklo: lucascastro: it's never too late to quit
14:58  fasta: To what does * desugar like in x = 3 * [1]?
14:59  lvh: fasta: the usual rules for attribute access
14:59  lvh: fasta: first __mul__ on 3, then __rmul__ on [1]
14:59  lvh: (instance, type, mro)
14:59  lvh: well, actually just instance, mro
15:00  fasta: So o__rmul__(__mul__(3),[1]))?
15:00  fasta: -o
15:00  nosklo: naquad: generator expressions or list comprehensions are nearly always easier to read *and* more performant than map
15:00  lvh: fasta: no, only when __mul__ doesn't work
15:01  lvh: does anyone know a repo that they know works with pip install --user
15:02  lvh: I'm trying to install bugs everywhere and it doesn't actually work http://bpaste.net/show/10296/
15:02  lvh:     install_dir /usr/local/lib/python2.6/dist-packages/
15:02  lvh: that looks like the culprit right there
15:03  nosklo: lvh: have you tried just --user instead of that --install-option thing
15:03  lvh: nosklo: Doesn't work because my version of pip is too old
15:03  lvh: nosklo: but that's just an alias -- no behavior was changed afaik
15:03  fasta: lvh, I looked at the reference manual, but it doesn't state the details.
15:04  fasta: lvh, it does document rmul and mul, but not the relation with *.
15:05  lvh: http://effbot.org/pyref/__radd__.htm3
15:05  lvh: without the 3
15:06  lvh: fasta: http://docs.python.org/reference/datamodel.html#object.__radd__
15:06  lvh: These methods are called to implement the binary arithmetic operations (+, -, *, /, %, divmod(), pow(), **, <<, >>, &, ^, |) with reflected (swapped) operands. These functions are only called if the left operand does not support the corresponding operation and the operands are of different types. [2] For instance, to evaluate the expression x - y, where y is an instance of a class that has an __rsub__() method, y.__r
15:06  lvh: sub__(x) is called if x.__sub__(y) returns NotImplemented.
15:06  fasta: lvh, so, it's basically a fold of __radd__?
15:07  fasta: Or I suppose reduce in Python speak.
15:07  nosklo: lucascastro: looks like you can change only the foreground/background color of each item
15:07  lvh: fasta: What?
15:07  lvh: fasta: no, not at all
15:07  lvh: fasta: have you read what I linked you?
15:08  fasta: lvh, I meant a fold of rmul and yes, I think I read the relevant details.
15:08  lvh: fasta: that's just a link to a bunch of identical __r*__ methods
15:08  fasta: lvh, I will read it again.
15:08  lvh: fasta: folding has nothing to do with it
15:08  lvh: there is no reduce
15:08  lvh: it is simply a matter of trying left-to-right first, and if that doesn't work try right-to-left
15:08  lucascastro: nosklo: But I didn't find something how  I can do that.
15:08  tesseracter: i've got a tree built with lists and dictionaries(tree[0]['children'][1]['data']) and i need to do a depth first traversal. any ideas?
15:08  lvh: a * b will first ask a if it understands how to be multiplied with b
15:08  lvh: if that doesn't work, the other way around
15:09  lvh: I don't see what that has to do with a reduce/fold
15:09  nosklo: lucascastro: listbox.itemconfig(foreground=mycolor)
15:09  nosklo: er
15:09  nosklo: lucascastro: listbox.itemconfig(index, foreground=mycolor)
15:09  lvh: tesseracter: is this a homework question
15:09  lucascastro: nosklo: thanks.
15:09  fasta: lvh, ok, that's clear and surprising ;)
15:10  lvh: fasta: what's surprising about it
15:10  fasta: lvh, the extra call.
15:10  lvh: fasta: what extra call
15:10  fasta: lvh, the 'reflected' call.
15:10  lvh: __rmul__ only ever happens if __mul__ didn't work
15:11  lvh: it does the minimal amount of work to get a result
15:11  lvh: (and there is no way to know up front if a.__mul__(b) will work
15:11  fasta: lvh, yes, I understand that.
15:12 --- wagle is now known as wagle_
15:13  tesseracter: lvh, heh, feels like one - nope, ive got to produce a tree of categories for an ecommerce site, then load in the hit counts for items in each category.
15:13  tesseracter: lvh, and hopefully cull the tree of leaf nodes with count=0
15:14  lvh: tesseracter: and why does it need to be DF traversal?
15:14  lvh: tree[0] what's that
15:14  tesseracter: lvh: the culling...or i can do that as a separate step.
15:14  lvh: tree is the root node?
15:14  lvh: tesseracter: I'm not sure I understand why you're writing your own tree
15:14  tesseracter: lvh, sorry, multiple "root" nodes, so the tree starts as a list.
15:15  tesseracter: lvh, im working with treebeard.
15:15  kerio: so you have a root
15:15  kerio: that list
15:15  tesseracter: MPNodes.
15:15  lvh: haven't used that
15:16  lvh: tesseracter: http://bazaar.launchpad.net/~lvh/graphsearch/trunk/annotate/head:/graphsearch/blind.py
15:16  tesseracter: the treebeard API makes getting nodes easy, but stores stuff in a DB, and i just need the tree for a transient time, to throw in the number of hits.
15:17  lvh: tesseracter: note the difference is simple: in DFS, you prepend the children to the queue
15:17  lvh: in BFS, you append
15:17  kerio: lvh: so... pop(0) and then insert(0, foo)?
15:18  lvh: kerio: no, read that code
15:18  lvh: kerio: (use a queue)
15:18  kerio: oh, i see
15:18  alus: I have a function instance, foo. how can I tell how many parameters foo takes?
15:19  lvh: alus: Why don't you know already?
15:19  naquad: a bit offtopic: i'm trying to put function gtk.ListStore, my tries totally fail atm :( are there any examples of this? or type which will be processed as function?
15:19  alus: or more specifically, if a given *a, **kw will be acceptable for calling the function
15:19  naquad: *function into gtk.ListStore
15:19  alus: lvh: because I'm a library, and some use passed me a function instance
15:19  alus: *user
15:19  lvh: alus: okay
15:20  tesseracter: alus, better to try and ask forgiveness.
15:20  lvh: alus: EAFP
15:20  torpedotux: i recall some web devs using json objects directly in GET paramaters for comet style projects (not saying enc/dec isn't needed). Anyhow, is there a name for such technique?
15:20  lvh: alus: (what you want can be done, it's called inspect.getargspec, but it's a bad idea, because not all functions are inspectable)
15:20  alus: blerg
15:20  lvh: alus: what do you want to do if the function isn't what you want?
15:20  alus: the function knows. it raise a TypeError if you call it improperly
15:20  alus: lvh: raise the same type error it would raise if I called it
15:21  lvh: alus: yes, that's my point exactly
15:21  lvh: alus: so just call it
15:21  alus: but I don't want to call it yet.
15:21  lvh: it makes your code less ugly and the Exception means what it says on the tin
15:21  kerio: why not?
15:21  tesseracter: alus, so catch the exception, and deal with your mistake.
15:21  lvh: alus: who cares? you'll call it eventually
15:21  lvh: tesseracter: it's not his mistake -- it's his caller's
15:21  alus: I'm scheduling the call for the future, when the stack will not be relevant
15:21  alus: so the error message which appears then seems odd
15:21  alus: I'd like to fail fast
15:22  lvh: you appear to be optimizing for users giving you bad input
15:22  torpedotux: for e.g. - { "_id" : ObjectId("4c2209fef3924d31102bd84b"), "x" : 3 }
15:22  lvh: that's generally a bad idea unless that happens more often than the alternative
15:22  alus: sure, I'm being nice and doing more checking than I need to.
15:22  alus: I could also just not print anything and silently not call the function
15:22  lvh: yeah don't do that, the exception is meaningful without a stack trace as well
15:22  torpedotux: (yeah that goes in directly in GET and decoded at the other end).. is there a name for such style of passing parms around?
15:22  alus: and delete a random file off the disk as payment
15:23  lvh: alus: nice strawman
15:23  alus: "TypeError: __call__() takes exactly 2 arguments (1 given)" is not very helpful
15:23  lvh: since that is not what the exception gives you *at all*
15:23  lvh: sure it is, the caller will still be your code
15:23  torpedotux: (i suppose not :s )
15:25  alus: an example: http://codepad.org/IEYvrgN0
15:26  alus: in the presense of many callLaters, it's basically impossible to know which one contains an error
15:27  kerio: deferreds allow you to catch exceptions
15:28  alus: sorry, how is that related?
15:28  lvh: kerio: since when are callLaters deferreds
15:28  lvh: they're IDelayedCalls
15:28  lvh: alus: Anyway, you could do it, I already told you how, but I also told you why it's bad
15:28  naquad: how do i forward some methods instance variable? i.e. class T: def __init__(self): self.window = ...; .... @@delegate_to(window, hide, show, close, other, methods)
15:29  lvh: alus: as soon as someone decides to use a C function there for example, it'll blow up
15:29  alus: lvh: when it fails is it just that I can't do it with this function or that I will get lies?
15:29  lvh: (but I suppose you could just log a warning)
15:29  lvh: alus: You will get "I cant figure it out" from the argspec call)
15:29  alus: that seems fine
15:30  alus: cool, maybe I'll do that.
15:30  alus: lvh: thanks
15:33  cosmodad: is there a concise way to do "if 'foo' in mystr or 'bar' in mystr or 'baz' in mystr:"? I guess I could loop over all possible values but wondered whether there was a better way (maybe a contains()-method?).
15:34  lvh: cosmodad: if any(s in S for s in ('foo', 'bar', 'baz'))
15:34  muraii: Lurking here is so useful.
15:34  cosmodad: lvh: ah nice, thanks.
15:34  muraii: lvh: That's a really elegant solution.
15:34  lvh: muraii: in my previous life i was a cat
15:35  lvh: muraii: it is the only explanation for my incredible arrogance, condescension and disdain for puny hoomans
15:36  muraii: lvh: That hypothesis is underdetermined; you may, for instance, merely be a neckbeard with political aspirations.
15:36  lvh: muraii: I do have a beard but I shave my neck, so no
15:38  muraii: So further inspection eliminates one possibility, and science works!
15:40  al_admeld: any reviews of unittest2 vs py.test
15:42  lvh: al_admeld: they are different things
15:42  lvh: apples, oranges, etc
15:43  al_admeld: lvh: looks like py.test is pretty similar to unittest
15:44  lvh: al_admeld: quite similar in what respect
15:44  lvh: the internals are fairly different
15:44  lvh: the style of writing tests is fairly different
15:44  al_admeld: lvh: the usage looks about the same, looks like it uses the same model of test collection and processing unittest does
15:45  al_admeld: afaics the only difference is that pytest has more doodads
15:47 --- vin is now known as HIDDENHIDENOTME
15:47 --- HIDDENHIDENOTME is now known as Frots
15:47  lvh: al_admeld: the test collection system is pretty different: consider how unittest2 sends events
15:48 --- Frots is now known as vin
15:49  al_admeld: lvh: im not familiar with it, tell me more
15:50  lvh: al_admeld: well, two months ago it was still undergoing serious surgical transplants
15:51  lvh: al_admeld: consider looking at the code: voidspace wrote it so it cant be very terrible
15:52  al_admeld: lvh: im actually running 2.7, is their code similar to mine or should i just get the package anyway
15:53  Evet: i heard that global interpreter lock screws multi-core support. how to achieve this?
15:53  merijn: Evet: Define screws multi-core support
15:54  Brend: (Achieve what? Screwing multi-core support?)
15:54  merijn: Threads will not run in parallel, if that's what you mean
15:54  Evet: merijn: yeah
15:54  merijn: Use multiprocessing for that
15:54  Yhg1s: threads will, actually, access to Python objects (and anything touching them) is simply serialized using a single lock.
15:54  Yhg1s: Evet: what are you trying to do?
15:56  Bjartr: How would I go about creating a script which causes commands to be executed in an ~existing~ python interpreter process? I can do what I want manually by telnetting to the localhost port of the interpreter, but I want to automate that
15:56  Evet: Yhg1s: trying to build a cluster
15:56  Yhg1s: Evet: to do what?
15:56  Yhg1s: Bjartr: you would have to ask that interpreter process to execute the code.
15:57  Yhg1s: Bjartr: there's several ways to do that. importing a module is the common way.
15:57  Bjartr: How do I tell the interpreter process to import a module then?
15:58  Yhg1s: Bjartr: however you want it to.
15:58  Evet: Yhg1s: an app uses opencv
15:58  Yhg1s: Bjartr: the interpreter is executing your code, I presume.
15:58  Yhg1s: (if it isn't, you can't do it in any way.)
15:59  Bjartr: I can telnet to a port exposed by the interpreter and it gives me an interpreter prompt
15:59  Bjartr: I can't restart it for this, I need to perform commands on an already running process
16:00  Bjartr: I can do it manually, but I need to automate it
16:00  nosklo: Bjartr: how exactly is that port exposed? Which library are you using?
16:00  Brend: So perhaps you just want to write a little script that talks telnet with your existing thingy?
16:01  Brend: With pexpect or something?
16:02  Yhg1s: Bjartr: is it just this telnet port that you have access to, or do you want to change it to execute a script or import a module periodically, or when it's changed on-disk, or when something specific happens?
16:04  overdamped: hmmm... does python 3 not have cwd implicit in the PYTHONPATH?
16:06  Bjartr: I'm using a (very slightly) modified srpy module to provide a remote interpreter access to the locals() on another machine's interpreter process that's already running a script
16:09  Yhg1s: overdamped: no Python version does, no. Besides, PYTHONPATH isn't what you mean; you mean sys.path.
16:10  Bjartr: I'm doing it for diagnostics purposes, the less I modify existing code the better, srpy seems to be the way to go. I can set up the system by ssh-ing in and copying stuff where I need and performing some things manually, but I want to automate it
16:11  Bjartr: The specific issue is I need to pass literal input to the resulting python prompt after performing the telnet connection, my attempts to script this thus far have failed
16:11  overdamped: Yhg1s: from sys.path "the first item of this list, path[0], is the directory containing the script that was used to invoke the Python interpreter."
16:13  overdamped: Yhg1s: which I guess I associated with the CWD... not necessarily accurate, but correct most of the times for me
16:14  Rapp: hi everybody!
16:15  anev: trying to download a text file using ftplib
16:15  torpedotux: hello
16:15  anev: ftp.retrlines('RETR file.txt', filename)
16:15  Rapp: is it possible to convert and assign a list of strings to several integer variables (e.g. convert sys.argv[1:] to int and assign that to some variables)
16:15  anev: right?
16:16  anev: Rapp: yeah, just iterate through it and use int() to convert
16:16  Rapp: anev: i thought of a more compact form :)
16:16  Rapp: because i remember that you can assign a list to some enumeration of variables
16:16  Rapp: question is, can i convert at the sametime
16:17  anev: Rapp: not that i'm aware of but i'm relatively new to python
16:17  dassouki: is mvvm mostly a .net thing ?
16:18  jasonx_: Rapp map(int, sys.argv[1:]) or [int(x) for x in sys.argv[1:]]
16:19  Rapp: jasonx_: thanks. the latter one i /just/ found out myself :)
16:19  Rapp: i always have to read up on list comprehension
16:19  nijan: Hello all, I'm trying to run distutils but I get this error: error: Is a directory. I've tried to google it, but coulnd't find anything useful. The setup.py is pretty simple. I have uploaded the relevant parts and my directory structure. http://paste.pocoo.org/show/278852/
16:20  nijan: Thanks for your collaboration
16:22  Yhg1s: overdamped: yes. that part hasn't changed in any Python version.
16:22  Yhg1s: nijan: and the traceback?
16:22  axion: does anyone know how to return a widget's "Name" property, as it is called in glade-3? obj.name returns None for everything. and obj.get_name() returns the type of widget. I want to return the unique name field somehow.
16:22  nijan: No traceback unfortunately
16:23  Yhg1s: nijan: check to make sure all the files you mention in the setup.py file are actually files, and not directories, then.
16:23  nijan: Even with -v I get only running build_scripts
16:23  nijan: error: Is a directory
16:24  Yhg1s: nijan: why are you passing a dict to 'scripts'?
16:26  umc-work: hey guys. is there some 'magic' method that I can define on a stub so it will be called for any method I call on that object ?
16:26  umc-work: __call__ I saw it's for something else...
16:26  nijan: Yhg1s, that was the problem. Thanks.
16:27  Yhg1s: umc-work: a methodcall is two things, an attribute access and then a call of the object returned.
16:27  nijan: Yhg1s, have you noticed anything else? I'm not sure if I understood how distutils works very well.
16:27  Yhg1s: umc-work: so you need a __getattr__ or __getattribute__ (or, usually much better, a property for the relevant attributes) that return a callable object that does what you want.
16:27  Yhg1s: nijan: well, you didn't give much details there.
16:28  umc-work: thanks Yhg1s
16:32  nijan: Yhg1s, I have two main modules, one is the original module, which includes most functions and can be run from the conmnand line. scripts (bin/syllgui and bin/syll) are files which import the command line (sylli-command) and the gui (sylli) and do module.main(). When you run setup.py install they should go into some user/bin.
16:33  nijan: Am I doing it wrong?
16:34 --- chocoby is now known as CHOCOBY
16:34  bdesk: nijan: maybe this is relevant http://jcalderone.livejournal.com/39794.html
16:35 --- pr3d4t0r is now known as pr3d4k4t
16:38  fasta: Is there also a non-synchronized queue type?
16:39 --- pr3d4k4t is now known as pr3d4t0r
16:41  bdesk: fasta: no
16:45  bdesk: nijan: also #distutils
16:45  nijan: Thanks all
16:52  Yhg1s: fasta: collections.deque
16:53  Yhg1s: nijan: from that description it doesn't sound too wrong.
16:53  nijan: http://paste.pocoo.org/show/278859/
16:54  nijan: here I have uploaded the whole story, still I keep getting  errors like: error: can't copy 'sylli': doesn't exist or not a regular file.
16:55  al_admeld: hi, i have a question about the feasibility of creating a specific type of decorator: http://dpaste.de/PGhB/
16:55  Arimoto: Is there a way to get classes to print just their name when printed instead of <class 'widget'> ?
16:55  Yhg1s: nijan: doing 'find' instead of 'ls' is probably more useful.
16:55  Yhg1s: nijan: what does 'bin/' contain?
16:55  Yhg1s: Arimoto: what is their 'name'?
16:56  Arimoto: Yhg1s: Widget.
16:56  nijan: bin contain the scripts: for example, bin/syllgui contains import sylli + sylli.syllgui.main()
16:56  nijan: But even if I comment out the scripts line I get the same error
16:57  kerio: Arimoto: you could subclass "class" and set __repr__ to something else
16:57  Yhg1s: al_admeld: you can do that, yes, but only by using the debugging hooks (sys.settrace, sys.setprofile) and by inspecting each line as it's being executed.
16:57  kerio: and then use it as a metaclass
16:57  kerio: but... why
16:57  al_admeld: Yhg1s: is that terrible to do, performance wise?
16:57  Yhg1s: nijan: pastebin the output of 'find' and of the execution setup.py.
16:57  Yhg1s: al_admeld: it will be horribly inefficient, so yes, rather terrible.
16:57  andam: hello
16:57  andam: does python 2.5 have a builtin ssl module?
16:58  Arimoto: Yhg1s, kerio: thanks.
16:58  Yhg1s: Arimoto: 'Widget' or 'widget'? Is this a regular Python class you're talking about?
16:58  al_admeld: Yhg1s: hmn, thats the only option right
16:58  kerio: andam: http://docs.python.org/release/2.5.4/modindex.html
16:58  Arimoto: Yhg1s: I meant 'Widget'.
16:58  nijan: http://paste.pocoo.org/show/278864/
16:58  overdamped: Yhg1s: thx
16:58  Yhg1s: Arimoto: then the simplest thing to do is just 'print cls.__name__'.
16:58  dassouki: does anyone knof there is a matplotlib equivalent in c#? / net
16:58  Arimoto: Yhg1s: thanks.
16:59  Yhg1s: al_admeld: depends on what you're actually trying to do.
16:59  Yhg1s: nijan: did you notice the warning right before the error?
16:59  andam: kerio: thanks, I'm still not sure about my question
17:00  nijan: Yes, I did. But I didn't care since it's not fatal.
17:00  andam: I'm using python2.5 from macports, it says ssl is a builtin module, actually I see there's a "_ssl" module but no "ssl"
17:00  Yhg1s: nijan: well, maybe it is. The problem is the data_files you're asking setup.py to install.
17:01  andam: and this screws appcfg.py from Google AppEngine
17:01  al_admeld: Yhg1s: i write test cases, so after each line in a test case, i want to run a couple of checks on the web page to better catch errors
17:01  kerio: andam: http://docs.python.org/release/2.6.6/library/ssl.html says "New in version 2.6"
17:01  al_admeld: Yhg1s: someone told me i might be able to use a generator
17:01  Yhg1s: al_admeld: that doesn't sound terribly sensible.
17:01  kerio: and i thought appengine ran 2.6
17:01  Yhg1s: al_admeld: that depends on what you want the testcases to do, and what you want to check inbetween.
17:01  vilfredo: I'm looking for a way to validate email addresses according to the RFC -- any pointers?
17:01  Yhg1s: kerio: GAE uses 2.5.
17:01  nijan: But it is complaining about the destination directory. I really dunno, distutils errors are misty.
17:01  andam: kerio: I've been told it runs 2.5 and to stick with that
17:02  Yhg1s: vilfredo: pretty much anything is a valid email address.
17:02  Yhg1s: vilfredo: but see the email module.
17:02  andam: the point is my installation has _ssl but no ssl so appcfg.py doesn't use ssl
17:02  al_admeld: Yhg1s: the test cases do things like submit forms on websites. the steps i perform would do things like check the title of the page im on, do other validation based things
17:02  Yhg1s: nijan: well, did you read http://docs.python.org/distutils/setupscript.html#installing-additional-files ?
17:02  mdxi: it is 2.5. says so here: http://code.google.com/appengine/docs/python/gettingstarted/devenvironment.html
17:03  Yhg1s: andam: _ssl and ssl are two entirely different modules.
17:03  Yhg1s: andam: 2.5 doesn't have an 'ssl' module.
17:03  andam: Yhg1s: how is GAE supposed to work with it then?
17:03  Yhg1s: nijan: you're passing a dict instead of a list.
17:03  Yhg1s: andam: hard to say. perhaps it expects it to be installed separately.
17:04  andam: Yhg1s: oh so when you say 2.5 hasn't an ssl module you mean builtin?
17:04  vilfredo: Yhg1s: well, for example, "foo.@example.com" isn't valid
17:04  Yhg1s: vilfredo: why not?
17:04  Yhg1s: vilfredo: it's a perfectly valid email address.
17:04  Yhg1s: andam: in the standard library, yes.
17:04  vilfredo: http://www.mythic-beasts.com/~pdw/cgi-bin/emailvalidate
17:04  al_admeld: Yhg1s: http://dpaste.de/MUOy/
17:04  andam: so I have to install this http://pypi.python.org/pypi/ssl/
17:04  Yhg1s: vilfredo: any validator that thinks 'foo.@example.com' is invalid is plain wrong.
17:05  vilfredo: even a validator that implement the RFC spec?
17:05  Yhg1s: andam: maybe. see if the docs of whatever you're trying to install mention it.
17:05  al_admeld: Yhg1s: that would work with gmail i believe
17:05  vilfredo: * implements
17:05  andam: Yhg1s: http://code.google.com/appengine/kb/general.html#rpcssl
17:05  varnie: hello. suppose i have a list x = ['foo','bar',fred'] and want to 'shift' its items left. i.e. i want to get x having ['foo', 'foo','bar'], preserving the 1st item. how would i done this in a pythonic way?
17:05  mdxi: it's well-formed. it's invalid by definition, because example.com is reserved :)
17:05  Yhg1s: vilfredo: I have an email address that ends with a dot. it works fine. it's entirely valid.
17:05  Arimoto: If I wanted to create a new object similar to None, how would I do that?  For example, some functions might return Unknown.  Would it just be a global object of UnknownType?
17:05  Yhg1s: vilfredo: the RFC spec for email addresses doesn't say much more than that '@' separates the userpart from the domain, and that the domain should have A or MX DNS records.
17:06  Yhg1s: and I'm not even sure about that last part.
17:06  Yhg1s: vilfredo: it *does* explain how to separate comments and such from the email address itself. The email module does that.
17:06  ssbr: Arimoto: how similar to None, exactly?
17:06  Yhg1s: Arimoto: 'Unknown = object()'
17:06  EvanR-work: Yhg1s: uhm, the left half ends in a dot?
17:06  Yhg1s: EvanR-work: so what?
17:06  cognitiaclaeves: I have a question about threading theory.  I have a custom framework that includes logging, but python logging wasn't used.  I want the flexibility of python logging, so I wrote some code that basically provides both interfaces.  In order not to interfere with the original design, I'm adding two class methods to an already instantiated object's class (step_obj): both class methods have lines only like this: self.foo(bar).  In
17:07  EvanR-work: Yhg1s: you said the email address ends in a dot
17:07  vilfredo: I'm building a web app that interfaces to the UK domain name service, and that API is very picky
17:07  nijan: Right :/
17:07  nijan: I must have overlooked at it, thanks a lot.
17:07  EvanR-work: abc.@123.com does not end in a dot
17:07  arkanes_: Dots aren't special in the name part of email addresses
17:07  Yhg1s: EvanR-work: It wasn't obvious what I meant?
17:07  EvanR-work: no
17:08  EvanR-work: you seemed to say abc@123.com. is entirely valid
17:08  Yhg1s: vilfredo: perhaps what you want is something that implements the specific rules used by this validator.
17:08  Yhg1s: EvanR-work: context is everything.
17:08  Arimoto: ssbr: I suppose just functionally similar in common cases.  I'm not sure which if any parts would be hard to duplicate.
17:08  Yhg1s: vilfredo: but saying 'the RFC spec' certainly isn't enough.
17:08  EvanR-work: just be correct next time
17:08  kerio: vilfredo: "foo" is a valid email address
17:08  Yhg1s: EvanR-work: what an odd thing to say. Context is important.
17:09  Yhg1s: EvanR-work: I have no desire to make each statement I make be entirely correct for anyone who doesn't read the context.
17:09  EvanR-work: abc@123.com. is not valid, just saying that in general to fix anyones misconceptions
17:09  vilfredo: more specifically, RFC 822. Perl has a Mail::RFC822::Address
17:09  Yhg1s: vilfredo: yes. the email module handles RFC2822 addresses.
17:10  Yhg1s: vilfredo: but quite a lot of email addresses that people think are invalid are in fact perfectly valid. For example, user-parts that contain a +, or end in a dot.
17:10  EvanR-work: or contain a @ in quotes
17:10  kerio: using a + is great to have multiple websites (and the spammers they sell the addresses to) have different email addresses that point to the same one
17:10  varnie: is there any usable function to run through list's items and move all them one position ahead ?
17:10  kerio: so you can filter them
17:11  Yhg1s: varnie: you want to insert or remove an item from the front?
17:11  fasta: kerio, and of course the spammers are too stupid to watch for that?
17:11  kerio: "watch" what?
17:11  Yhg1s: fasta: they're distinct addresses.
17:11  cwillu_at_work: good parser maker for python?
17:11  EvanR-work: email validation is exactly one of those topics no one understands, fast and loose with jargon will not help that
17:11  kerio: do you think they do anything manually?
17:11  varnie: Yhg1s, insert.
17:11  Yhg1s: varnie: the 'insert' method does that for you.
17:11  fasta: Yhg1s, and they all end up at the same person.
17:11  varnie: Yhg1s, i want to update list with these changes.
17:12  arkanes_: EvanR-work: Enough
17:12 --- mukul_afk is now known as mukul
17:12  Yhg1s: fasta: only if that's what the mailserver is told to do.
17:12  Yhg1s: varnie: yes, that's what the insert method does.
17:12  vilfredo: there's a distinction between email addresses that work in practise, and emails that conform to this spec. I suppose it makes sense for software in general to accept the de facto usage
17:12  fasta: Yhg1s, unless you only receive + based addresses, it doesn't work.
17:12  Yhg1s: vilfredo: the spec you refer to is RFC2822, and the email module handles that.
17:12  kerio: vilfredo: we have a RFC for that
17:12  varnie: Yhg1s, thanks. have to try this out. i thought the itertools module might help though.
17:12  kerio: that is the standard
17:12  EvanR-work: my question is whether python '3' is recommended or at least not not recommend?
17:12  mukul: Please can some one help me how to use the textwrap function. I'm new to python.
17:12  Yhg1s: varnie: to do what? what you describe is exactly what the insert method does.
17:12  fasta: Yhg1s, I don't know anyone with a professional mail address that requires that.
17:12  fasta: Yhg1s, do you?
17:13  Yhg1s: fasta: I have no idea what you're saying, sorry.
17:13  varnie: Yhg1s, good, let me check this.
17:13  vilfredo: there doesn't seem to be a anything in email that will validate a string: email.utils.parseaddr only separates strings of the form "<Name> address"
17:13  Yhg1s: mukul: well, what's giving you trouble?
17:13  mukul: A syntax example on textwrap will be helpful.
17:13  xilo: EvanR-work: biggest problem you'll have with 3 is that some modules might not be updated for 3
17:13  arkanes_: vilfredo: There are no email addresses that work but do not follow the spec
17:13  Yhg1s: vilfredo: because that's all there is to it. What do you think should be an invalid email address?
17:14  EvanR-work: xilo: so theyre no longer in the dont use python 3 phase
17:14  Harpyon: How do I convert unicode urls into punycode?
17:14  xilo: correct
17:14  vilfredo: a..b@example.com is rejected by the registrar's API that I'm working with
17:14  EvanR-work: and im guessing the brand python 3000 is dead
17:14  Yhg1s: mukul: it's just a module with functions. you import the textwrap module, and then you call textwrap.wrap() with the text you want wrapped, and possibly other arguments to configure how it should wrap things exactly.
17:15  Yhg1s: EvanR-work: no, 'python 3000' *is* python 3.
17:15  fasta: Yhg1s, I mean that you only read mail if it is sent to  joeuser+tag@example.com and not when people send it to joeuser@example.com
17:15  arkanes_: vilfredo: You'll have to ask your registrar what accesses they accept
17:15  Yhg1s: fasta: I do that, yes, for some of my email addresses.
17:15  mukul: Yhg1s, Thanks.
17:15  Juhaz: EvanR-work, it was a codename, not brand.
17:15  Yhg1s: vilfredo: but 'a..b@example.com' is in fact entirely valid according to all RFCs.
17:15  vilfredo: arkanes_ I'm looking for something equivalent to Perl's Mail::RFC822::Address
17:16  arkanes_: vilfredo: Y
17:16  EvanR-work: Juhaz: so 'was'
17:16  varnie: Yhg1s, if i use insert, then i should remove all redundant items from tail. i just want to 2nd item became 1st item, 3rd item became 2nd item etc.
17:16  arkanes_: vilfredo: You are not listening
17:16  Juhaz: EvanR-work, was, is, whatever. Code names aren't used for released software.
17:16  vilfredo: I am trying, forgive me
17:16  arkanes_: vilfredo: Any module that correctly implements the rfc will pass that address
17:16  Yhg1s: varnie: then you just want 'del L[0]'
17:16 * EvanR-work looks at his browser which says namoroka
17:17  Yhg1s: vilfredo: Mail::RFC822::Address won't object to 'a..b@example.com' either.
17:17  arkanes_: vilfredo: You need something that implements something else arbitrary and probably random
17:17  varnie: Yhg1s, no, because i have to change 1st item in another way.
17:17  Yhg1s: varnie: what *do* you want then? Because 'del L[0]' does what you describe.
17:17  al_admeld: Yhg1s: would a generator do what i want?
17:18  vilfredo: Yhg1s: but it does object. You can play with at the URL I mentioned
17:18  bdesk: varnie: pastebin
17:19  Yhg1s: al_admeld: not as such, no. you'd have to make your code yield between tests, and then have the caller iterate over the generator and do what you want inbetween.
17:19  Yhg1s: vilfredo: I'm not saying it isn't rejected by the registrar. I'm saying it isn't an invalid address *according to the RFC*.
17:20  Yhg1s: vilfredo: you need something that implements *that registrar's exact rules*, which is something else entirely.
17:20  EvanR-work: isnt the RFC basically worthless, it defines the validity of addresses to be time dependent
17:21  vilfredo: I don't understand. If it isn't invalid, why does Mail::RFC822::Address say it is invalid?
17:22  dash: EvanR-work: what? where does it say that?
17:23  EvanR-work: to be valid its domain part must lead to a valid mx record
17:23  Harpyon: Does anyone know how to convert urls into punycode? Simply doing url.encode("punycode") doesn't seem to work properly
17:24  dash: EvanR-work: oh, well. that's unrelated to "syntactically valid".
17:24  dash: Harpyon: urls aren't encoded in punycode
17:24  dash: domain names are.
17:24  EvanR-work: id have to check to see if it makes that distinction
17:24  dash: EvanR-work: it has a grammar
17:24  dash: EvanR-work: addresses can match or not match that grammar.
17:24  varnie: Yhg1s,  bdesk: here's my question: http://dpaste.de/HtDZ/
17:24  EvanR-work: yes we choose which parts of the rfc to value
17:25  Harpyon: oh right.
17:25  dash: EvanR-work: well, when syntactica validity is being discussed, the part about email address syntax suddenly seems to have the most relevance
17:25  Yhg1s: vilfredo: no idea. Mail::RFC822::Address is an insane module that uses an absurd regexp. It's hard to tell why it thinks something is invalid.
17:25  dash: varnie: so call .insert on the list
17:25  arkanes_: dash: EvanR-work does not believe in context
17:26  EvanR-work: dash: well then, the module has the wrong name!
17:26  varnie: dash, and then i have to delete the last, becaming redundand, item.
17:26  Yhg1s: varnie: so you want x.insert(0, 'HEAD') to insert the first item, and del x[-1] to remove the last one.
17:26  dash: varnie: what's this for?
17:26  varnie: Yhg1s, yes, you're right
17:27  varnie: dash, i want to make my snake items change their positions while snake is moving ;))
17:27  EvanR-work: believing in stuff doesnt affect its existence
17:27  dash: varnie: ah, of course :)
17:27  vilfredo: Yhg1s: OK, this has been really helpful. Thanks. Apologies for my slowness.
17:27  dash: EvanR-work: Exactly.
17:28  Yhg1s: vilfredo: if you want something that does exactly what Mail::RFC822::Address does, I'm sure you can find a ported version of it somewhere. It just isn't in the standard library.
17:29  Yhg1s: (and I wouldn't want to use it, since it has so little value and most things that insist on valid email addresses have additional restrictions.)
17:29  EvanR-work: unless paranormal psychic phenomena are activated
17:29 --- calisto_ is now known as calisto
17:32  thyko: ola gringo
17:35  dassouki: what do you guys think of my program structure so far http://97.107.136.148/diag.jpg ?
17:36  fasta: dassouki, a BMP... are you joking or haxoring?
17:36 * thyko ate burger, lol
17:38  ppl: dassouki did you save that as a bmp.. it was loading upside down
17:38  explodes: Hey dudes, how do I get the current timezone of the computer that is running my app?
17:39  thyko: dassouki: really, you wont hack us that easy :P
17:39  cognitiaclaeves: I have a question about threading theory.  I have a custom framework that includes logging, but python logging wasn't used.  I want the flexibility of python logging, so I wrote some code that basically provides both interfaces.  In order not to interfere with the original design, I'm adding two class methods to an already instantiated object's class (step_obj): both class methods have lines only like this: self.foo(bar).  In
17:39  Yhg1s: cognitiaclaeves: your question is cut off. again.
17:39  thyko: explodes: if *NIX type date
17:39  cognitiaclaeves: I didn't realize it was cut off the first time.  Sorry.
17:39  explodes: thyko: Cross platform?
17:39  Yhg1s: cognitiaclaeves: it's cut off at 'self.foo(bar). In'
17:40  Yhg1s: explodes: what do you want to know, exactly?
17:40  cognitiaclaeves: In other words, all of the work is done through objects attached to the instance.  This is a distributed beast, so there may be many step_objs running around at the same time.  My question: Will this cause threading issues because class methods are used, or am I safe because said class methods all operate on self-related pieces?
17:40  Yhg1s: the name of the timezone? the offset to GMT? whether daylight savings is in effect?
17:40  explodes: ^
17:40  dash: cognitiaclaeves: if it's distributed, why use threads?
17:40  thyko: explodes: time.tzname
17:40  explodes: A "tzinfo" object of some kind
17:40  Yhg1s: explodes: then you need pytz.
17:41  Yhg1s: explodes: if you only care about specific information, the time module may have what you need.
17:41  merijn: Anyone know if Twisted supports WebSockets already?
17:41  dash: explodes: or dateutil
17:41  dash: merijn: which kind?
17:41  cognitiaclaeves: dash: I don't know enough to answer that question.  It's effective an application server written in Python.
17:41  dash: explodes: dateutil has tz stuff and other handy tools as well
17:41  Yhg1s: cognitiaclaeves: I'm not sure why you think adding methods to something would cause threading issues?
17:41  lvh: merijn: Not by default, but we moved the dominant implementation to github
17:41  explodes: I have pytz already
17:41  lvh: merijn: the problem was the api changed after the ticket was already under review
17:42  merijn: dash: I'm new to the whole WebSockets business, there's multiple kinds?
17:42  lvh: merijn: http://github.com/rlotun/txWebSocket
17:42  lvh: merijn: Yes
17:42  cognitiaclaeves: Yhg1s: Because they are class methods.  Which makes them apply to all instantiated objects.  Not the adding of the method, but the execution of the added method.
17:42  lvh: merijn: however, txWebSocket means you dont have to care
17:42  merijn: lvh: I'll check it out, thanks
17:42  Yhg1s: cognitiaclaeves: that's not how it works.
17:42  cognitiaclaeves: I'm thinking, actually, that it's probably safe.
17:42  ssbr: cognitiaclaeves: well, the background info is this: threads rely on memory sharing, but a distributed app can't share memory: it's got different processes running on different machines. If it's distributed, your basic unit of parallelism would presumably be independent processes communicating somehow with sockets
17:42  explodes: Yhg1s, dash: I need a tzinfo object so that I can put time-zoned timestamps into my database after transforming them to UTC, then pull them out, and transform them to the user's timezone.
17:42  Yhg1s: cognitiaclaeves: calling a method or a function or anything else alwasys happens in the same thread, unless you explicitly create a new thread for it.
17:44  zjblabs: Has python 3 performance improved any?
17:44  Yhg1s: zjblabs: some of it, sure.
17:44  Yhg1s: explodes: so, you want to ask pytz or dateutil for the local-timezone tzinfo object.
17:45  cognitiaclaeves: Ok, then, distributed may not be the right description.  It is part of a distributed framework, but itself is more modular, in the sense that different threads can be spun up to handle the same kind of work concurrently.
17:45  explodes: Oh, I should just use datetime.utcnow()
17:45  explodes: for my purposes.
17:46  cognitiaclaeves: Yhg1s: I guess that answers my question then.
17:47  aruntomar: i need some help in optimisation of my python code. i'm listing 2 directories and storing the filenames in a list variables list1, list2. then if list1 items are not there in list2, then append them to list3. this process is taking a lot of time.
17:47  al_admeld: is inspection the only way to iterate through a functions statements?
17:48  faldridge: I'm working on a patch for an existing C extension for Python (pysqlite), and I have a question about the weakref system.  Does it make sense to implement weakrefs for an object that will only ever have one external reference?
17:48  leadZERO: So, I'm trying to play with a little http.server program.  You can create the server with HTTPServer(addr, RequestHandlerCLass). I'd like to create a request handler that takes an argument of a DB logging class.  However, when I try to do db = DBClass(file); HTTPServer(..., MyRequestHandler(db)) I get object not callable. Any way to do this besides a global variable?
17:48  al_admeld: aruntomar: why not append them to list 1?
17:48  thyko: aruntomar: im probably wrong but .. try sets
17:49  dash: faldridge: what do you mean, exactly?
17:49  aruntomar: i need a separate list3 so that i can loop over it and perform some other processing
17:49  anev: what's the story with global variables?
17:50  anev: i'm trying to use a global flag which is initialised as False
17:50  dash: aruntomar: probably use some sets instead
17:50  dash: anev: they're a mistake that haven't been eradicated yet
17:50  aruntomar: dir1 has approx 150000 files and dir2 has approx 50000 files
17:50  EvanR-work: leadZERO: i think the nature of a 'logger' means you need to call it from anywhere where theres logging, which could be arbitrarily deep in a call stack
17:50  aruntomar: dash, thyko, i'll look into sets
17:51  lvh: why didn't we get rid of it in 3.x anyway
17:51  anev: dash: global get initialised first right?
17:51  lvh: (also why bytes.lower but not bytes.split? although that might be fixed now)
17:51  faldridge_: dash: I'm creating a Backup type.  A connection is allowed to have one and only one live backup object associated with it, so whereas a list of Cursor objects gets stored on the connection via the weakref mechanism, I will only need to store on backup reference on the connection.
17:51  Yhg1s: lvh: it would require quite a different language.
17:51 --- faldridge_ is now known as faldridge
17:51  Yhg1s: where a module isnt' created by evaluating code.
17:51  andam: bye thanks
17:51  varnie: anev, what's the problem you faced ?
17:52  Yhg1s: leadZERO: your request-handler argument is called to create a new handler. You need to store the db somewhere else, like a class attribute or a closure.
17:52  anev: varnie: i'm using optget to grab command line arguments which is working fine.. i use a flag to indicate when a specific command line argument is selected.. i print the flag to the screen and it's set to True which is fine. But once it leaves main() it's reset to false?
17:53  anev: varnie: it's causing problems as i'm trying to use the flag in other places
17:53  leadZERO: Yhg1s: k, thanks
17:54  Yhg1s: anev: sounds like you have a global and a local variable of the same name.
17:54  faldridge: s/store on/store one/
17:54  anev: Yhg1s: i've double checked, i'm not reusing the name globally or locally
17:54  anev: Yhg1s: i've change it to something obscure too
17:54  anev: same result.
17:55  Wild_Cat: anev: if you want to reassign a global variable from a function, you need to use "global my_var" before that.
17:56  Wild_Cat: anev: otherwise a local variable is created by the assignment, which shadows the global as long as you don't leave the function but is destroyed afterwards.
17:56  faldridge: meh, never mind.  I think I see what to do here
17:56  pitseleh: hi i've got a question regarding exception handling
17:57  lvh: Yhg1s: Huh? Are we both talking about the 'global' statement?
17:57  litb: hello all
17:57  litb: does python store locals on the stack?
17:57  litb: or will everything be stored on the heap?
17:57  EvanR-work: stackless python!
17:57  dash: litb: Yes.
17:57  merijn: litb: Why do you care?
17:59  raberaucht: could someone explain what 'python-config' is for?
17:59  ssbr: dash: eh, does it?
17:59  raberaucht: I'm on osx, python 2.7
18:00  ssbr: I mean it stores local pointers on the stack, sure
18:00  ssbr: but I'd imagine all objects would have to be heap-allocated
18:00  merijn: ssbr: I'm pretty sure locals on the heap to make closures work
18:00  Yhg1s: lvh: no, about *globals*.
18:00  ssbr: merijn: locals are different from closure variables
18:01  Yhg1s: anev: no, my point is that what you think are the same variable is probably two different ones. Pastebin your code and we'll see.
18:01  merijn: ssbr: I know, but they can be captured in closures, which means they would have to be outside the stack
18:01  ssbr: merijn: unless you mean objects that are assigned to local variables, in which case, yes
18:01  EvanR-work: cpython uses 'the c stack' for locals, right
18:01  ssbr: but the local names/pointers could be stored on stack frames. It's just not something you usually think of.
18:01  Yhg1s: EvanR-work: no.
18:02  ssbr: Which is why I'm very confused why one would claim stuff gets stored on the stack without further explanation: almost everything important isn't
18:02  pitseleh: i did have a question, it was answered quickly :)
18:02  Yhg1s: raberaucht: it's for asking python for compiler and linker flags, for things that don't use distutils to build extension modules or embedding Python.
18:02  merijn: ssbr: "def foo(a): def bar(): return a", obviously 'a' (its value anyway) can't be stored on the stack
18:02  raberaucht: is it just for displaying build flags? or is there some other use of it?
18:02  ssbr: merijn: Yes.
18:02  Yhg1s: raberaucht: no, that's it.
18:02  ssbr: merijn: well, no.
18:02  dash: ssbr: first make a useful distinction between "variables" and "pointers" for the context of this conversation :)
18:02  ssbr: merijn: actually in that case, a's value could be stored on the stack.
18:02  merijn: I suppose I'd want return bar at the end, but anyway
18:02  EvanR-work: oh
18:03  cognitiaclaeves: How do I detect that a method in an object is: <bound method type.write_line_to_proxyLogger ?
18:03  merijn: But, I typo'ed that :p
18:03  ssbr: merijn: only variables actually referenced in the inner-function get preserved, I think
18:03  raberaucht: is it used by pip or easy-install to check the build flags?
18:03  varnie: does python optimize tail recursion btw?
18:03  Yhg1s: varnie: no.
18:03  Yhg1s: raberaucht: no.
18:03  merijn: ssbr: return a was meant to be part of bar, and then return bar. But hard to show on a single line
18:03  merijn: varnie: It could, but CPython doesn't
18:03  Yhg1s: raberaucht: things you install with pip or easy-install tend to use distutils (or, unfortunately, setuptools), which don't use it.
18:03  ssbr: dash: I wasn't really making one. I meant to refer to the same thing: whatever lets you get access to an object.
18:03  fasta: cognitiaclaeves, you save a reference to the function beforehand and compare?
18:04  ssbr: merijn: lambdas!
18:04  dash: cognitiaclaeves: why try to?
18:04  cognitiaclaeves: fasta: yes, but how?  dash: because I only want to change it once.
18:04  raberaucht: where on the system are the 'general' build flags set?
18:04  ssbr: dash: what exactly do you claim gets stored on the stack, when you claim locals get stored on the stack?
18:04  Yhg1s: raberaucht: they're in distutils's data files.
18:04  merijn: ssbr: "lambda x: lambda y: x", think I've properly captured it now...
18:04  dash: cognitiaclaeves: "change it"? please explain :)
18:05  ssbr: merijn: right
18:05  robthebob: hi i need to tell what drive letter a UNC path corresponds to. e.g. \\169.254.1.1\tmp\ -> z:\ or similar
18:05  robthebob: is that possible in python?
18:05  Yhg1s: ssbr, merijn: jsut so you know: all Python objects are allocated in the heap, and Python stackframes are Python objects.
18:05  cognitiaclaeves: dash: I'm overriding the method after the object is instanced.
18:05  fasta: dash, self.f = lambda x: <something else> is what he wants to do.
18:05  raberaucht: so python-config asks distutils for the flags?
18:05  cognitiaclaeves: I only want to do that once.
18:05  Yhg1s: raberaucht: yes.
18:05  Harpyon: Okay, I can't get this to work. How can I convert an arbitrary URL into punycode? This is my current attempt: urlparse.urlsplit(url).hostname.encode("punycode")
18:05  merijn: Yhg1s: That was sorta what I expected
18:05  EvanR-work: so basically everything is in the heap
18:05  fasta: cognitiaclaeves, there is nothing special about functions or methods.
18:05  raberaucht: thx Yhgls!
18:06  dash: cognitiaclaeves: so why would you need to check?
18:06  ssbr: Yhg1s: so then all that gets stored on the stack is a pointer to a stackframe?
18:06  ssbr: (and some other stuff, yeah yeah)
18:06  ssbr: dash: your face is full of lies
18:07  Yhg1s: ssbr: and some other things, yes.
18:07  fasta: cognitiaclaeves, def f(self): pass def g(self): self.f = lambda omg: 1
18:07  aruntomar: thanks guys, set is working much faster
18:07  cognitiaclaeves: dash: Let's just say that I'm not entirely sure how this animal operates, and I want to check if I've already overriden the method before I attempt to override it.
18:07  ssbr: Yhg1s: Well, the other stuff is bookkeeping stuff for CPython I assume?
18:07  fasta: cognitiaclaeves, so you set a flag to indicate that for example.
18:08  Yhg1s: ssbr: yes, the offset into the instruction stream, the stackpointer, some temporaries.
18:08  gilaniali: Is there a python module that will let me encrypt data. The data will be stored on a different server?
18:08  Yhg1s: ssbr: the biggest point of "CPython uses the C stack" is that each Python functioncall is (at least one) C functioncall.
18:08  fasta: Instruction stream doesn't seem to be applicable to Python.
18:08  Yhg1s: fasta: why not?
18:08  cognitiaclaeves: fasta: That's less direct than I wanted.  I just wanted to check the type.  I'm not sure that a flag would stay in scope.
18:09  dash: cognitiaclaeves: Man =/ I would try to get more sure about how it operates then
18:09  ssbr: fasta: the CPython VM executes bytecode. I assume that's what he's referring to.
18:09  fasta: Yhg1s, because it is more like a finite list, no?
18:09  fasta: Yhg1s, i.e. not a 'stream'.
18:10  dash: gilaniali: GPG is probably your best bet
18:10  fasta: Just like operating systems also don't accept streams of instructions, some CPUs do, though.
18:10  dash: gilaniali: what kind of data?
18:10  Yhg1s: fasta: I'm not aware of the distinction you're trying to make. it's not a list, it's just a sequential, unbounded set of instructions.
18:10  fasta: Yhg1s, maybe it's not a universal distinction, never mind.
18:11  gilaniali: dash: source code files, i want to back it up on a VPS, but want to protect it incase, its hacked or something
18:11  dash: gilaniali: condier tahoe-lafs then
18:11  merijn: gilaniali: GPG is your best bet for data at rest
18:11  dash: er, consider.
18:13  gilaniali: dash:  looking over it now, but simply using GPG on the files and uploading to a server should suffice right?
18:13  dash: gilaniali: you could do that, sure.
18:13  Harpyon: How can I, in python 2.5, convert a url to punycode. I'm stumped :/
18:13  gilaniali: dash:  then how is tahoe-lafs better
18:14  thyko: dash: tahoe looks good
18:14  dash: Harpyon: you don't
18:14  ppl: Hi. I have a base class, which I didn't wrote, which has a position (tuple x,y) attribute called pos. In my derived class, I want to make a property with the same name, pos, so I can monitor access to the property. I want it to be transparent. Here is what I wrote: http://codepad.org/f1UZk70v However, I get an error TypeError: 'property' object is unsubscriptable. What did I do wrong? Is it
18:14  ppl: possible to make it 100% transparent?
18:14  Harpyon: dash: okay?
18:15  dash: Harpyon: it's something you do to domain names.
18:15  EvanR-work: you can percent encode...
18:15  anev: Yhg1s: http://pastebin.com/KCEbWdvy  here is an example.. the flag should always be true
18:15  infobob: http://paste.pocoo.org/show/278895/ (repasted for anev)
18:15  dash: EvanR-work: hush.
18:15  Harpyon: yeah, I have an URL, how do I convert the domain name part of that url into punycode, and reassemble the URL.
18:16  dash: Harpyon: 'urlparse' is a thing to know about
18:16  Yhg1s: ppl: when you define the property, it shadows the instance attribute of the same name. You can't just do 'return gui.Control.pos', you have to store the actual value somewhere else.
18:16  Yhg1s: ppl: use 'self._pos' instead of 'gui.Control.pos' and it might work.
18:17  anev: Yhg1s: it resets to Flase in func() when it should still hold True
18:17  Yhg1s: anev: yes. you have *three* different variables called 'flag'. A global variable 'flag', a variable 'flag' in 'func1', and a variable 'flag' in 'main'
18:17  Harpyon: dash: I've tried, but I'm no expert in this (as you're probably already understood), exactly which part of the url do I call .encode("punycode") on?
18:17  ppl: Yhg1s so it shadows my base class too? :/
18:17  xilo: Harpyon: the domain
18:17  xilo: as stated several times
18:17  anev: Yhg1s: shouldn't the global override the local?
18:18  Yhg1s: anev: nope, not unless you tell Python you want to use the global, using the 'global' declaration in the function where you do the assignment.
18:18  lvh: Yhg1s: Yeah, no -- I understand why we need globals
18:18  Harpyon: but I can't get it to work ;_;
18:18  anev: Yhg1s: ohh
18:18  Yhg1s: ppl: it doesn't shadow a class, it shadows the attribute.
18:18  lvh: Yhg1s: I was specifically wondering why people still have access to the global statement
18:18  Yhg1s: lvh: because it has use.
18:18  anev: Yhg1s: global flag = Flase produces a syntax error
18:18  Yhg1s: anev: because that's not how you use it.
18:19  Yhg1s: anev: it's a declaration. you say 'global flag' at the top of the function.
18:19  Yhg1s: lvh: because people would still store stuff globally anyway, just more hidden away.
18:19  bruse: i have read a 160 bit sha1 hash from a socket
18:19  bruse: is there a nice way to convert this binary data (in a string) to a long?
18:19  bruse: i want to do bitwise operations on it, and compare it to other hashes
18:19  ppl: Yhg1s im replacing it to _pos. Btw I'm new to Python and my conception of classes etc. is from C++.
18:19  lvh: bruse: struct module
18:20  marekw2143: how to redirect data from linux "cat" command to some file (e.g. cat file1 >> out_file) using subprocess?
18:20  cognitiaclaeves: Looks like what I wanted was: writeLineMethod.__name__ to identify the name of the method being used to override a method in an object.
18:20  bruse: lvh: but struct doesnt have 160 bit integers
18:20  dash: bruse: what are you writing?
18:20  Yhg1s: marekw2143: 'open('out_file', 'wb').write(open('file1', 'rb').read())'
18:21  leadZERO: What's the difference between single and double quotes?
18:21  MrElendig: marekw2143: taking cat(1) abuse to a new level?
18:21  Yhg1s: marekw2143: or, if the file is large, shutil.copyfileobj.
18:21  bruse: dash: i'm playing around with the bittorrent dht
18:21  dash: leadZERO: they do the same thing
18:21  Yhg1s: marekw2143: but if you really want to use subprocess, see the 'stdout' argument to subprocess.Popen.
18:21  lvh: bruse: int(s.encode("hex"), 16)
18:22  naquad: how do i expand list/tuple into function arguments?
18:22  ppl: Yhg1s with that change i get: line 2264, in __getattr__ AttributeError: pos
18:22  naquad: i.e. i have [1, 2, 3] and i want to pass it into print as print(1, 2, 3)
18:23  ppl: Yhg1s so I guess properties are not 100% transparent as a replacement for attributes?
18:23  EvanR-work: what is .encode("hex") ?
18:23  marekw2143: Yhg1s: I'm making script for joining many javascript files into one and then compress them
18:23  MrElendig: naquad: foo(*L)
18:23  kerio: ppl: is this a newstyle class?
18:23  EvanR-work: ah hex_codec
18:23  lvh: naquad: section 4.7.4 of the tutorial
18:23  marekw2143: Yhg1s: so it's not one file, and thought it would be easy to use cat :)
18:23  bruse: lvh: cool, thanks a lot
18:23  ppl: kerio I'm not sure what isa  newstyle class.
18:24  kerio: are you on python3?
18:24  Yhg1s: ppl: they are, but only on instances. if it's a class attribute, instead of an instance attribute you'd need a property on the metaclass.
18:24  ppl: this is 2.6
18:24  Yhg1s: marekw2143: so open multiple files.
18:24  kerio: does your class eventually inherit from object?
18:24  Yhg1s: ppl: oh, and yes, you should be inheriting from 'object' or another new-style class.
18:24  ppl: kerio, oh, that I don't know sure the class I derive from I don't ahve the source code.
18:24  Yhg1s: ppl: what does 'type()' say about the class?
18:24  ppl: s/sure/since
18:25  marekw2143: Yhg1s: yeah, now I'm doing it that
18:25  naquad: lvh, MrElendig, thank you. did the same and got syntax error, just found out it was previous code fault :(
18:25  marekw2143: Yhg1s: thanks
18:25  kerio: Yhg1s: shouldn't you check for type() on the instance?
18:25  ppl: Yhg1s  <class '__main__.Gem'>
18:26  Yhg1s: kerio: why?
18:26  ppl: kerio no, python 2.x
18:26  kerio: to see if the type of the instance is "instance"
18:26  Yhg1s: ppl: that's what type() of the *class* tells you?
18:27  Yhg1s: kerio: that requires creating an instance of it first, which may have side-effects. checking the type of the class is safer, and tells us just as much.
18:28  ppl: Yhg1s I did type(self) in the constructor of Gem. with the changes to _pos, it fails before the object is even constructed.
18:28  kerio: hm, is the type of old-style classes just "class"?
18:28  kerio: no, "classobj"
18:28  Yhg1s: ppl: hence why I'm asking you to do it of the *class*.
18:28  ppl: self.gem1 = Gem() print 'bar: ', type(self.gem1) gives: bar:  <class '__main__.Gem'>
18:28  Yhg1s: ppl: not of the instance of the class.
18:28  litb: I mean, say a simple int value as a local variable
18:29  ppl: oh, sorry
18:29  kerio: well, it's a new-style class, isn't it
18:29  litb: its value can be copied in a flat way
18:29  Yhg1s: litb: not really.
18:29  litb: i'm currently designing the codegen for some language, and i wonder how python does it
18:29  Yhg1s: litb: whatever you try to copy it, you just get back the same instance.
18:29  Arsanerit: Hi. I want to load two modules that have the same name; I have two versions of pytables installed, the latest ordinary version and the latest evaluation pro version. They can do different things, so I'd like to import both, but both are called tables, so all I can think of is unloading one by hacking sys.modules before loading the other. Can someone think of a prettier way?
18:30  litb: Yhg1s: I don't understand that
18:30  Yhg1s: Arsanerit: there isn't really a way to do that.
18:30  Yhg1s: litb: I'm not sure how to put it differently.
18:30  Yhg1s: litb: integers are immutable. They can't be changed. So, when you ask for a copy of an integer, you just get back the same one. there's no way to actually copy it.
18:30  ppl: Yhg1s print 'foo: ', type(Gem) gives foo:  <type 'type'>
18:30  kerio: ppl: it's a new-style class
18:30  Yhg1s: ppl: ok, so it's a new-style class, you should be fine.
18:30  litb: I mean, if i have a 32 bit int. why can't it be stored on the stack if it is just used in value contexts? I.e its value is taken as operand of arithmetical operators etc..
18:30  varnie: Arsanerit, import foo_module as foo1 maybe work?
18:30  Arsanerit: varnie: no
18:30  Yhg1s: litb: that's not how stuff works in Python.
18:30  Arsanerit: varnie: that only changes the name in the local namespace
18:30  litb: Yhg1s: oh
18:31  Arsanerit: varnie: it doesn't change the name by what everything is registered in sys.modules
18:31  sprezzatura: any YQL specialists here? i was wondering how can i get stock quotes along with other statistical data from either Y! or any other provider
18:31  litb: Yhg1s: why can i do    a = 10   and later i do  a = 20 ?
18:31  Yhg1s: Arsanerit: the only way to get them both without weird things happening is to rename one of them, or both.
18:31  litb: is a just a pointer on the stack that gets to point to immutable int objects?
18:31  Yhg1s: litb: because it changes the object the name 'a' refers to. it doesn't change the integer. Variables in Python aren't storage, they're references.
18:32  litb: oh
18:32  Yhg1s: so, yes, except not pointers on the stack.
18:32  litb: I wonder whether this is not inefficient. I mean when doing  a + 10 , it needs to allocate a new int object on the heap or for interning purposes lookup that value in the pool?
18:33  Yhg1s: litb: sure, it's inefficient when compared to somethign that optimizes integers to machine-level things. It's the only way to have Python semantics consistent throughout, though.
18:33  litb: when variables are storage, one could just create storage on the stac for the result of a + 10 and do a single write to it. or am I misunderstanding the performance characteristics?
18:33  ppl: Yhg1s well the code is complaining on __getattr_ attribute error: pos
18:33  Arsanerit: Yhg1s: rename in sys.modules, then?
18:33  litb: Yhg1s: oh
18:34  Arsanerit: Yhg1s: it's a whole package so that takes some looping, but it appears to work. I don't like it, though.
18:34  litb: Yhg1s: does python intern those int objects?
18:35  litb: i.e with some modulo hashed map or something? Or would that not pay off?
18:35  Yhg1s: ppl: when it does what, exactly? Perhaps you should pastebin the code.
18:35  Yhg1s: ppl: and the exact traceback.
18:35  Yhg1s: litb: sometimes.
18:35 --- mukul is now known as mukul_afk
18:35  litb: oh
18:35  ppl: Yhg1s http://codepad.org/nUDo0x7u
18:36  Yhg1s: Arsanerit: no, not rename in sys.modules. Rename the module *itself*. rename the package, fix all references to it.
18:36  Yhg1s: Arsanerit: I would recommend not doing this, and avoiding the need for this at all cost.
18:36  EvanR-work: litb: are you trying to make an optimized code generator for numeric applications by looking at python ;)
18:36  ppl: Yhg1s it say: Framework\src\engine\framework\gui.py", line 2264, in __getattr__: AttributeError: pos
18:36  ppl: I don't have the source for gui.py
18:37  Arsanerit: Yhg1s: Think it would be easier to start a second python interpreter, actually.
18:37  Yhg1s: ppl: well, how does the 'pos' attribute get set normally?
18:37  ppl: Yhg1s i just do: obj.pos = (5, 5)
18:38  litb: EvanR-work: this thing also has tuples and arrays though. And reference parameters. I figured that reference variables with languages that have dynamic presence ofnames in scopes that also try to store things on stack is quite a nightmare
18:38  EvanR-work: litb: i would too
18:38  Yhg1s: ppl: and that's what produces the exception? Or does instantiating the class already do that?
18:38  MadRobot: Hi all.
18:38  litb: because I want to do COW on tuple and array values. but reference parameters are deadly incompatible with COW :)
18:39  MadRobot: I have this friend of mine who claims Python is actually a blend between C++ and Delphi. How accurate is that?
18:39  litb: EvanR-work: so i have to disable sharing of variable values that are pointed to by reference parameters and such stuff. all very ugly. but performance is actually pretty well :) and it's my first compiler/runtime ever. sadly it'S not open source :)
18:39  EvanR-work: litb: reference parameters, you mean so the function can write to output variables?
18:39  Brend: MadRobot: Completely ridiculous
18:39  litb: EvanR-work: yep. arrays are passed-by-reference in this language
18:40  Arsanerit: Yhg1s: How would you compare the behaviour for different versions of the same library?
18:40  ppl: Yhg1s instantaiation is not even completed
18:40  EvanR-work: litb: thats not the same
18:40  Yhg1s: Arsanerit: By hand, probably. I don't recall ever actually needing to do that.
18:40  litb: EvanR-work: also writes to it will change the argument passed in
18:40  EvanR-work: extra mutable variables!
18:40  Yhg1s: Arsanerit: but if it was too much work by hand, I would execute the same program using the different modules. And using a new process for each test.
18:41  Yhg1s: ppl: ok, so is 'self.pos = (5, 5)' ever executed?
18:41  litb: EvanR-work: and while it sounds strange, in my implementation, because of COW, passing the array by value instead of by reference is actually more efficient :) because it does not need to disable sharing :)
18:41  EvanR-work: litb: if you only allow writing to data via a reference, and not allow writing to variables, its simpler
18:41  Yhg1s: ppl: does this run on some foreign machine or something, by the way?
18:42  ppl: Yhg1s not in my code no. But the base class I don't control and don't ahve src for it
18:42  litb: EvanR-work: oh
18:42  Yhg1s: ppl: does it run on your own system?
18:42  ppl: Yhg1s hmm, no. win7 64 bit english install
18:42  ppl: yes
18:42  Yhg1s: then you do have the source for it.
18:42  ppl: well it's pyc
18:43  kerio: eeew
18:43  Yhg1s: so decompile it. http://depython.com/
18:44  litb: EvanR-work: also I adopted the python concept of not having complete type graphs in objects. I.e that (10, 10) has somple type "tuple" and not the type "tuple(int, int)". to get the complete type, one has to recurse down into the value, like in python
18:44  Juhaz: MadRobot, considering it doesn't particularly resemble either of those, and in addition it predates Delphi by about five years, well...
18:44  ppl: Yhg1s I guess I could but as per the license agreemnt im not supposed to RE :/
18:44  Arsanerit: Yhg1s: Ok.
18:44  EvanR-work: litb: a more complex type system seems useless for dynamic language
18:44  EvanR-work: unless its actually used for something
18:45  Arsanerit: Yhg1s: That's probably wiser than what I'm doing now. Although it's not production code.
18:45  Yhg1s: ppl: ok, so we're back to seeing what *you* are actually doing.
18:45  ppl: Yhg1s I was hoping that properties would be 100% transparent
18:45  MadRobot: Juhaz, Thanks for the info. (Any additional notes are appreciated too). :)
18:45  Yhg1s: ppl: when you don't provide this 'pos' property, where does the pos attribute get set?
18:45  Yhg1s: ppl: for instance attributes, they are.
18:45  litb: EvanR-work: yeah, i figured when changin the content of variables, i would have to need to create new type graphs etc. and when having array types like int[N], where N can have a runtime value, that it is a PITA to have type graphs for them. since I can't say "create and never free" for such types :)
18:46  ppl: Yhg1s it's in the base class. from my point of view, as a user of the class. i set mygem.pos = (50, 50) and it visually relocate the image of the gem on the screen
18:46  EvanR-work: litb: what are the type graphs for?
18:47  EvanR-work: stopping you from cattings a list of int and list of strings?
18:47  Yhg1s: ppl: and if you access the 'pos' attribute of the *class*, instead of an instance, what do you get?
18:47  litb: EvanR-work: i need to know the types in expression operators. like in a + b, they can do some conversions. like int + float yields int. and  (a, b) + c does  (a + c, b + c).
18:47  ppl: Yhg1s the same tuple
18:47  Yhg1s: ppl: the same as what?
18:48  kerio: litb: why are you mixing tuples and numbers
18:48  litb: EvanR-work: but i figured i can just recurse into the objects and that way always get at the type of the values too
18:48  ppl: Yhg1s so they are tranasparent for instance attributes, but what about for properties?
18:48  litb: kerio: this language allows it
18:48  ppl: Yhg1s e.g. obj.pos = (5, 5)   print obj.pos will print (5, 5)
18:48  Yhg1s: ppl: yes, that's why I asked about *the class*.
18:48  EvanR-work: litb: so built in overloading of +, with several special behaviors
18:48  litb: yeah.
18:48  Yhg1s: ppl: if you defined the Gem class, what does Gem.pos give you?
18:49  ppl: Yhg1s so, shadowing properties with properties of the same name can be troublesome?
18:49  EvanR-work: i find that hard to understand unless something nearby is telling me what the arguments types are supposed to be
18:49  litb: EvanR-work: fortunately, LLVM makes all this codegen work quite easy :)
18:49  EvanR-work: since the + does not
18:49  Yhg1s: ppl: depends on what you call 'troublesome'. It's tricky to refer to the parent-class property.
18:49  ppl: Yhg1s well, without the property code I added, the same as the base class.
18:49  Yhg1s: ppl: which is?
18:50  ppl: oh, wait. sorry i wasnt paying attention. you said Gem.pos
18:50  minecraft: Hello everyone, a quick question: are python scripts able to write to itself? For example i have a script named test.py with the content print "blah" then some magic code. When i run it for the first time it prints "blah" and the next time i run it, it prints "hello"
18:51  Yhg1s: minecraft: you can just open the file and write to it, sure.
18:51  ppl: Yhg1s gem.pos gives <property object at 0x02464480>
18:51  bruse: when i do a get() on an empty Queue.PriorityQueue in the python shell, the entire thing hangs up on me
18:51  bruse: is this normal behaviour?
18:51  EvanR-work: litb: having every operation work in every context means the system cant in principle tell you if you wrote something you didnt mean to write
18:51  ppl: ok.. so that's the problem.. i need to call the property object on the base class, right?
18:51  EvanR-work: debugging nightmare
18:51  Yhg1s: ppl: ok, so it isn't an instance attribute at all, it's a property in the baseclass.
18:51  minecraft: Yhg1s: okay thanks!
18:51  ppl: I mean, that;s what I want to do.
18:51  Yhg1s: ppl: no, you need to call the functions behind the property object in the baseclass.
18:51  ppl: right
18:51  EvanR-work: like assembly language
18:52  Yhg1s: ppl: you can access them with 'gui.Control.pos.getter' and '.setter' and '.deleter'
18:53  kerio: minecraft: harder is to write a python program that when run writes another program that when run writes the first program
18:53  Yhg1s: bruse: yes, .get() blocks. if you don't want it to block, use get_nowait()
18:53  varnie: i have variables used in one function, and i want it to became visible within another module. is it OK?
18:53  bruse: Yhg1s: got it, thanks
18:53  varnie: i want them*
18:53  kerio: but it's still possible
18:53  Yhg1s: varnie: it's usually a bad idea, but you would have to make them available through some object. perhaps the module object, perhaps another object.
18:54  minecraft: kerio: =D
18:54  varnie: i thought Python dynamic 'nature' would resolve such scenarios automatically...
18:54  Yhg1s: varnie: then you don't understand what 'dynamic' means here.
18:54  Yhg1s: varnie: variable scope is decidedly undynamic.
18:55  varnie: Yhg1s, very may be because i am newbie in Python.
18:55  ppl: Yhg1s what I just did is this: http://codepad.org/RZgpanAT but I get the same: TypeError: 'property' object is unsubscriptable
18:55  Yhg1s: 'the same'?
18:55  Yhg1s: that doesn't sound like anything you described before.
18:56  MadRobot: Juhaz, actually, according to Wikipedia, Delphi (Object Pascal) is older (1986).
18:56  ppl: that's my original error
18:57  kerio: hmm, is there a way to swap two arbitrary strings within a bigger string?
18:57  Yhg1s: ppl: you said it was '__getattr__: AttributeError pos'
18:58  Yhg1s: kerio: creating slicing.
18:59  ziarkaen: kerio,The method depends on exactly wha you mean.  For instance, what if string A appears twice?
18:59  ppl: Yhg1s I got that too. but I'm pretty sure the very first one i posted was TypeError: 'property' object is unsubscriptable which is genreted by line 3931, in __set_pos
19:00  ppl: Yhg1s even if we don't get it fixed i'm learning a bunch in the process =)
19:00  Yhg1s: ppl: sounds like there's extra magic involved, then. it's a little hard to figure out what, though.
19:01  Yhg1s: ppl: it doesn't look like 'pos' is a regular property.
19:03  ppl: i was hoping that there would still be a way to write base.pos = whatever
19:03  ppl: but it looks like once my derive class shadows the base pos I can't reference to it
19:04  EvanR-work: ppl: is there no better place to put your variables
19:04  litb: EvanR-work: the language's designer said that most people like languages better that try to not emit error message, even if the result is not what they want
19:05  litb: i don't buy that though
19:05  ppl: EvanR-work well, what im trying to achieve is to make any code using my derived class who set the position, to also set the position of an other sprite
19:06 --- mukul_afk is now known as mukul
19:06  merijn: litb: Are you familiar with Hindley-Milner type systems? Those take the opposite approach :p
19:06  litb: i'm a types system n00b :(
19:06  merijn: litb: i.e. if you get no error message it probably worked
19:06  litb: merijn: in in favour of that :)
19:06  litb: s,in,i'm,
19:06  merijn: litb: It's what the type systems of Haskell, Ocaml, etc are based on
19:06  EvanR-work: litb: omission of error messages is a great way to not be able to write working code
19:06  ppl: so im trying to interpose, or "hijack" whenever someone set the .pos of the base class so I can also change the position of the second sprite.
19:06  litb: merijn: ah i see!
19:06  bdesk: those are teh programming languages that the nerds like
19:07  litb: i like haskell, though its logics are a bit over my head
19:07  EvanR-work: ppl: that sounds pretty bad
19:08  kerio: http://fpaste.org/FTYQ/ this was the best i could do :(
19:08  lieuwe: what would be the best way to parse url parameters? e.g. "www.site.com/index.php?some=stuff&more=stuff"
19:08  ppl: EvanR: I don't see why. Imho, that is exactly why you would create accessors in the first place.
19:08  EvanR-work: you arent creating accessors
19:08  EvanR-work: you are trying to do baseClass.pos = x
19:09  EvanR-work: so that instances randomly have some effect on something that is somehow represented by that class
19:09  EvanR-work: not even an instance of the class
19:09  ppl: EvanR: I want to do it for the instance of derived only
19:10  EvanR-work: so A -> B -> instance, instances affect A
19:10  ppl: not any instance of base. i agree that would be bad.
19:10  EvanR-work: cant you think of a better way
19:10  yakup: hi, i can't seem to split a multiline unicode on the line endings. the split function swallows last char of each line as well. ant solutions?
19:11  ppl: EvanR: other then rewrite tons of line of code, no.
19:11  EvanR-work: coded yourself into a corner i guess
19:11  kerio: http://fpaste.org/bIUL/ much better :)
19:11  ppl: EvanR: i mnot sure we understand each other because i really have a hard time beleiving you'd think that what i want to do is bad.
19:12  EvanR-work: you want to change the origin offset of several sprites at once?
19:12  kerio: hmm, maybe i can open one file
19:12  kerio: instead of two
19:13  ppl: EvanR-work yes
19:13  Yhg1s: ppl: you can referenc ethe baseclass property with 'baseclass.pos'
19:13  Yhg1s: ppl: but that doesn't seem to be the problem here.
19:13  Yhg1s: ppl: however, without seeing what actually *causes* the errors you're getting, it's hard to guess at what the problem *is*.
19:13  ppl: well i want it to be transparent to the user of the derived class.
19:14  ppl: Yhg1s Ya for sure.. :(
19:15  al_admeld: can you use pickle to append new dict data to a pre-existing file?
19:15  aruntomar: i've a quad core cpu, and i'm using multiprocessing in my script, but it spans only 2 processes and uses 2 cores, how can i make it use all the 4 cpu cores
19:16  bdesk: aruntomar: it should use them
19:17  kerio: http://fpaste.org/vDfW/ now with much less file operations :D
19:17  bdesk: aruntomar: you are using Pool(process=4 ?
19:18  varnie: say i have to be able to set: foo.x += 1;  will properties help me here?
19:18  bdesk: processes*
19:18  TheEmpath: 3 line of awesome http://gist.github.com/640979
19:19  TheEmpath: if thats my logging handlers, does that mean i have information that is sent to the logger being send to a file as well?
19:21  Hail_Spacecake: does python have java-style distinctions between class and instance variables?
19:22  bdesk: yes, classes and instances are different things in python
19:22  Hail_Spacecake: well, I'm sure it does, but how do you express the difference?
19:23  aruntomar: bdesk, i've not used Pool in it
19:24  aruntomar: bdesk, i've a list with certain data in it. i was looping over it and then inside the loop start the Process (target=somefunction,args=(some_arg,)
19:31  sontek: is there a good doc explaining why import * is bad?
19:32  bdesk: sontek: if you use it stupidly it defeats the purpose of namespaces
19:32  arkanes_: sontek: because it inserts an unknown and unknowable set of names into your local namespace
19:32  arkanes_: sontek: and even if you know all the names and that they don't conflict with anything at the time you write it, changes to the module you're importing can introduce clashes you didn't anticipate
19:33  sontek: Yeah, I'm looking for a page that outlines those problems that I can point a friend to
19:33  arkanes_: well thats them, right there
19:33  peper: is there a standard way of defining class scoped const values?
19:33  arkanes_: just use your words
19:33  sontek: arkanes_: thanks
19:33  arkanes_: peper: python doesn't have const values
19:34  peper: yeah, that's why I'm asking for a standard way ;)
19:34  bdesk: i wish it did.
19:34  box2: python is constantly awesome though
19:34  bdesk: especially const global
19:34  peper: is there a naming conventions or something?
19:34  arkanes_: peper: I'm not sure what you're asking then. There is no such thing, therefore there are no standard ways of doing it
19:35  arkanes_: ALL_CAPS is the naming convention
19:35  box2: last i remember for things of the global nature you DEFINE_THEM = like_this
19:35  bdesk: i use g_
19:35  peper: alright
19:35  bdesk: but yeah caps tries to mean const
19:35  box2: capslock is cruise control for do not touch
19:36  peper: and if i define it in a class I have to access it as class.CONST even from methods defined in that class, right?
19:37  zalun: do you know how to reference code in Sphinx?
19:37  bdesk: peper: right you can't just access it as MYCONST
19:37  zalun: I'd like to mae a reference to another method inside docstring
19:37  peper: bdesk: shame
19:37  Hail_Spacecake: how can I create a class variable whose state is shared among all instances of the class, like a class variable in something like java?
19:37  Hail_Spacecake: is this even possible in python?
19:37  bdesk: Hail_Spacecake: yes you can do it
19:38  arkanes_: Hail_Spacecake: attributes of a class are attributes of a class
19:38  zalun: so in the doc I'd be able to call :method:name_of_the_method
19:38  al_admeld: can you use a list of paths with os.path.exists?
19:38  arkanes_: Hail_Spacecake: and thus can be seen any time you look at the class
19:38  peper: bdesk: hmm, can i somehow reference the class I'm defining the method for? (other than by its name)
19:39  arkanes_: no, you cannot
19:39  arkanes_: peper: you can use self, though
19:39  arkanes_: attibute lookup fallback works for everything, not just methods
19:39  Hail_Spacecake: arkanes_, http://pastebin.com/gxTSa6nQ
19:39  infobob: http://paste.pocoo.org/show/278928/ (repasted for Hail_Spacecake)
19:40  bdesk: al_admeld: people often want functions to accept either an object or a list of such objects, and have the function work analogously on each.  This causes much frustration in #python.
19:40  Hail_Spacecake: that fails if I want i's state to be incrementable by any instance of Sugu
19:40  ssbr: people want things that are wrong!
19:40  ssbr: D:<
19:40  arkanes_: Hail_Spacecake: you need to access the right i
19:40  arkanes_: Hail_Spacecake: it's a *class attribute*. Access it via the class.
19:40  al_admeld: bdesk: if youre doing something like os.path.exists, and you could feed it a list, you would think it would return false or true for each item.
19:40  TylerE: Does anyone know of a good library for reading a pdf? (e.g. pulling out all the elements...text, images, vector art, etc)
19:41  al_admeld: i dont think thats asking for too much :)
19:41  TheEmpath: 3 line of loggin http://gist.github.com/640979 f thats my logging handlers, does that mean i have information that is sent to the logger being send to a file as well?
19:41  bdesk: al_admeld: this would probably work in a language like R.  But in python this is called typechecking and it is a cardinal sin.
19:41  TylerE: al_admeld: map(os.path.exist, list_of_paths)
19:41  Hail_Spacecake: arkanes_, ah, okay
19:41  arkanes_: al_admeld: sure, now muliply that times every method and every different thing that any person can think of
19:41  arkanes_: al_admeld: if you want to call a function on every item in a list, then do it
19:42  al_admeld: arkanes_: i dont think you should have to do a loop to check multiple items existence, personally
19:42  arkanes_: al_admeld: well your opinion is noted and filed
19:42  bdesk: al_admeld: i don't think it is asking for too much, but python doesn't do it.  maybe try another language.
19:42  arkanes_: al_admeld: *python* thinks that you have to
19:43  TylerE: al_admeld: See my previous. You don't have to loop.
19:43  arkanes_: you do have to loop, of course
19:43  al_admeld: TylerE: ill give it a shot, thanks
19:43  arkanes_: the idea that using map isn't looping is a ludicrous functionalism
19:43  TylerE: arkanes_: It's no more looping than having the function implicitly loop when given a list argument
19:44  al_admeld: when i say doing a loop, i mean physically writing out a loop
19:44  dash: al_admeld: why's that matter?
19:44  arkanes_: well there's nothing scary about that either
19:44  al_admeld: i want to do as little as possible to accomplish my goal in this case
19:44  nosklo: if you have to loop anyway, why not write it?
19:44  arkanes_: TylerE: all of those things are looping
19:44  dash: nosklo: well, there's the fact that not writing code is better than writing code :)
19:44  bdesk: so do you guys think that 'vectorization' is also looping?
19:44  dash: bdesk: who cares
19:44  arkanes_: TylerE: the idea that loops are something to be avoided is also a ludicrous functionalism
19:44  deepy: duck typing, if it doesn't look like a loop and if it doesn't quack like a loop, you can close your eyes and pretend it doesn't loop?
19:44  al_admeld: well, writing 3 additional letters is much better than writing out a loop
19:45  dash: bdesk: python doesn't do it.
19:45  arkanes_: bdesk: vectorization isn't a well defined term
19:45  bdesk: arkanes_: hence the scare quotes
19:45  TylerE: If you're really feeling lazy you could write a write a function that takes a function and returns a new function with an implicit loop
19:45  aruntomar: bdesk, i'm using multiprocessing.Process for creating process, and it's using all the 4 cores but the cpu load has sky rocketed. should i be using Pool?
19:45  TylerE: If that's really what you're after
19:45  bdesk: aruntomar: isn't it good that the cpu has sky rocketed?
19:46  al_admeld: TylerE: not at all, i just want to check a folder for the existence of 3 files, without typing too much junk
19:46  dash: al_admeld: python saves you plenty of typing
19:46  arkanes_: al_admeld: typing's not hard
19:47  arkanes_: you've done more of it talking about why you don't want to write a loop than writing the loop would have been :)
19:47  al_admeld: typing is easy, but im not in to doing more than i need to do, to accomplish my goal.
19:47  bdesk: al_admeld: if set(os.listdir(...)) & set(mypaths):
19:47  arkanes_: not that I'd actually use a loop instead of something else here anyway
19:47  arkanes_: al_admeld: well you've already written at least 50 words that you didn't need to do accomplish your goal
19:47  aruntomar: bdesk, cpu load went upto 11.03, then i stopped the script ;)
19:47  arkanes_: al_admeld: therefore, I submit that your problem is actually *not* with the amount of typing a loop takes, and instead of something else
19:47  bdesk: al_admeld: wait that's not quite right.
19:48  al_admeld: arkanes_: my goal is checking the folder for 3 files, not minimizing my irc chatter
19:48  dash: al_admeld: remember that readability counts.
19:48  varnie: why global variable instantiated in module m2 visible within the m1 module's function (of course, I have 'from m2 import *' in m1 header)
19:48  arkanes_: perhaps your problem is something more along the lines of "arguing with people I'm asking for help is more fun than writing programs"
19:49  arkanes_: varnie: don't use import *
19:49  varnie: why it has not to be declared as 'global' within this function in m2 ?
19:49  varnie: m1*
19:49  arkanes_: varnie: also don't use globals
19:49  al_admeld: arkanes_: you didnt actually offer me any help, you told me that i cant use a list. i knew that :)
19:49  varnie: these're just constants
19:49  arkanes_: al_admeld: thats because you already had an answer
19:49  bdesk: al_admeld: if set(mypaths) <= set(os.listdir(...))
19:49  arkanes_: bdesk: that doesn't do the same thing at all
19:49  bdesk: arkanes_: same thing as what
19:50  bdesk: arkanes_: my first answer was wrong.
19:50  arkanes_: bdesk: and anyway, since it's not clear what he wants to do with the results you can't really say whether he wants to use a list comp or map or all() or whatever
19:50  bdesk: i think my answer is best
19:50  arkanes_: al_admeld: on those lines, what *are* you going to do with the result of path.exists
19:50  dash: bdesk: it's silly.
19:51  bdesk: it checks for the existence of three files
19:51  al_admeld: assertTrue
19:51  dash: al_admeld: wait, you're checking if files exist? don't check if files exist.
19:51  al_admeld: if they dont exist, then im failing
19:51  al_admeld: theyre pickles
19:51  dash: also don't use pickle
19:51  bdesk: al_admeld: another thing you are supposed to avoid doing in python, besides vectorization, is checking for things before you do them.
19:51  dash: bdesk: this isn't a python issue
19:51  bdesk: al_admeld: you are supposed to just try to do a thing and then see if it fails.
19:51 --- ultimatebuster is now known as J3SUS
19:51  al_admeld: yeah, thats why im checking if the files exist before i try to unpickle them.
19:52  dash: bdesk: it's a not-having-race-conditions issue.
19:52  dash: al_admeld: don't! just do it
19:52  dash: al_admeld: and switch to something other than pickle as soon as possible.
19:52  bdesk: al_admeld: the issue is that they might exist when you check, but then be maliciously deleted before you get around to the unpickling
19:52  al_admeld: dash: what do you suggest. i thought cpickle was the recommended package for this kind of stuff.
19:52  dash: al_admeld: for storing structured data, i like sqlite.
19:53  dash: json is good for some things too
19:53  al_admeld: dash: json is a pita to read
19:53  dash: other things are appropriate depending on context
19:53  dash: al_admeld: what are you writing?
19:53  dash: al_admeld: No, it isn't.
19:53  TylerE: al_admeld: json module makes it pretty braindead simpel
19:53  TylerE: it's one call
19:53  varnie: when we work within single python module and have some vars instantiated in global scope we must declare them as global in the functions where they used. is it correct?
19:53  dash: varnie: no.
19:53  al_admeld: dash: im writing information i used when i created user accounts. email, name, phone number, etc
19:54  KirkMcDonald: varnie: Only when assigning to them inside of those functions.
19:54  dash: al_admeld: without further context, that sounds like a job for sqlite.
19:54  al_admeld: dash: agreed. ok thanks.
19:56  varnie: KirkMcDonald, interesting. then everyone should think firstly will he use these global vars for changing or not and, after that decision, it will became clear should he declare them as 'global' in this function. Is it correct?
19:57  dash: varnie: it's better to not have global variables at all.
19:57  arkanes_: varnie: the thing that actually becomes clear is that you shouldn't use globals
19:57  varnie: dash, i know that. just want to make things clear for me.
19:57  dash: i hope i wasn't unclear :)
19:57  varnie: ;) i can assure you i knew that many years ago yet ;)
19:58  varnie: i am just curious how global variables resolution works in Python
19:59  nosklo: varnie: python doesn't have real global scope -- it's only global to the module you're in
19:59  ssbr: python does so have real global scope.
19:59  ssbr: A) being module-global is just a type of being super-global, B) the builtins are super-global
19:59  kerio: => add stuff to __builtins__
20:00  kerio: it's perfect
20:00  ssbr: (A justification is that sys.modules is a sort of super-global state)
20:00  nosklo: but that's evil
20:00  ssbr: (er, (A) justification; i.e. a justification for A)
20:00  ssbr: nosklo: then defer to point A.
20:00  ssbr: python has something you could legitimately call global state, anyway
20:01  dash: global state is slightly different from global scope :)
20:01  papna: Module globals are perfectly global, they're just in a specific namespace.
20:01  ssbr: dash: yeah, I was slightly nuancing my argument
20:01  ssbr: post-hoc. :(
20:01  deepy: what's the worst thing you can do in python?
20:01  varnie: thanks
20:01  deepy: as in like, biggest mistake
20:01  dash: deepy: write programs
20:02  ssbr: varnie: variables have scope. If the variable is assigned to within a block, that scope is "local", otherwise, it's the earliest surrounding scope with an assignment, or else, finally global/builtin.
20:02  papna: varnie: The use of the `global` keyword is inadvisable.
20:02  ssbr: varnie: you can override what scope python decides a variable to be using a declaration like "global foo" or (in 3.x) "nonlocal foo"
20:02  naquad: how do i start interactive debugging session from script?
20:02  ssbr: python's scoping rules are overcomplicated and dumb. :(
20:03  dash: naquad: 'import pdb; pdb.set_trace()'
20:03  ssbr: naquad: import pdb; pdb.set_trace()
20:03  dash: ssbr: would you like to help fix that
20:03  naquad: dash, ssbr, thank you :)
20:03  ssbr: dash: I'm not sure anyone would approve of my ideas on variable scope
20:03  nosklo: I feel exocet is coming up
20:03  dash: ssbr: Nor mine!
20:03  ssbr: the way I figure it, there shouldn't *be* variable scope.
20:03  dash: nosklo: nah exocet doesn't affect scoping in the least
20:04  dash: ssbr: Um
20:04  ssbr: variable lookups don't assume a scope, they just look upwards through the lexical scopes until they find a value
20:04  KirkMcDonald: Python has the interesting property of being backwards compared to most other languages, with respect to variable scope.
20:04  ssbr: variables don't have scopes, blocks do
20:04  dash: ssbr: that's called "lexical scoping"
20:04  ssbr: or something
20:04  ssbr: dash: yeah, fine, but it isn't what python has.
20:04  dash: ssbr: and it was a crucial invention
20:04  ssbr: dash: because if it was what Python has, x += x would work where x wasn't defined locally until that point.
20:05  ssbr: in python, this raises an exception because the local x was unbound.
20:05  dash: ssbr: sure
20:05  nosklo: if that worked it would be confusing and error-prone, no?
20:05  dash: ssbr: it's a limitation left over fromt he days that python only had two and a half scopes
20:05  ssbr: it should make a local x = iadd(nonlocal x, nonlocal x)
20:05  nosklo: I though it was intended
20:05  mindrones: hello, in here http://docs.python.org/py3k/library/ast.html#module-ast  the title is wrong, should be "ast - Abstract Syntax Trees"
20:05  dash: ssbr: i agree with nosklo, that would be confusing and error prone
20:05  KirkMcDonald: D takes the interesting step of making it illegal to shadow a variable from an outer scope.
20:06  ssbr: (and because x shouldn't mutate itself, (also dumb) this should be x + x)
20:06  KirkMcDonald: (With some exceptions.)
20:06  ssbr: dash: if you like. The only time I've ever been confused by is that this *doesn't* work, and the only time I've gotten errors is from expecting this behavior.
20:06  papna: KirkMcDonald: D++
20:06  dash: ssbr: so how do you distinguish that from the case where you want to rebind the x in the outer scope
20:06  ssbr: dash: in any case, this is what I believe decent scoping rules to be. They are simple, and they make sense.
20:06  dash: instead of creating a fresh binding
20:07  ssbr: dash: don't ever do that.
20:07  dash: ssbr: why?
20:07  papna: KirkMcDonald: That would be better if it had a more sane import system.
20:07  ssbr: dash: because it doesn't make sense. :)
20:07  KirkMcDonald: papna: I agree.
20:07  ssbr: dash: you can't even do that in Python.
20:07  ssbr: dash: even in 3.x, you can't do it in full generality.
20:07  ssbr: I'd just remove the last vestiges of that possibility.
20:07  KirkMcDonald: papna: I advocated at one point that D should steal Python's namespace semantics whole-cloth.
20:07  dash: ssbr: of course it makes sense, why wouldn't it?
20:08  KirkMcDonald: papna: With respect to modules.
20:08  KirkMcDonald: papna: It didn't take.
20:08  ssbr: dash: because that's not how variables work anymore.
20:08  dash: ssbr: we're redefining how variables work
20:08  ssbr: dash: (in this modified system)
20:08  ssbr: dash: Yes, that's what I'm saying.
20:08  dash: ssbr: so that's a circular argument. :)
20:08  papna: KirkMcDonald: Awww.
20:08  dash: ssbr: i'm trying to find out why you want to disallow that.
20:08  KirkMcDonald: papna: But I did get "static import" added to D.
20:09  ssbr: dash: Well, it boils down to this: allowing it would ruin every good point of this system
20:09  KirkMcDonald: papna: And the same conversation got selective imports added, too.
20:09  ssbr: dash: and it's also totally unnecessary
20:09  KirkMcDonald: papna: But selective imports are buggy.
20:09  ssbr: dash: I have never used that feature of python in any form. If you really want it, mutate an object, not a scope.
20:09  dash: ssbr: well, i've never wanted "x += x"
20:09  ssbr: dash: x += x was a silly example because it doesn't make sense in the context I used it in.
20:09  dash: ssbr: so i guess I completely fail to understand your objections to python's current behaviour
20:10  ssbr: dash: but it was a good example because it's the simplest possible expression of the difference between what I have always expected, and what Python actually does.
20:10  dash: my objection to python's current behaviour is that it doesn't distinguish binding from assignment
20:10  KirkMcDonald: x += x isn't as troublesome as x += 1.
20:10  ssbr: dash: python's current behaviour has special cases for no reason, that make the scoping rules more difficult to understand.
20:10  ssbr: dash: that is my only objection.
20:10  dash: ssbr: shrug
20:11  ssbr: dash: if you want, you can keep the notion of variable scopes, and the keywords "global" and "nonlocal"
20:11  dash: ssbr: if you're going to renovate them why not make them actually good instead
20:11  ssbr: at least I would get rid of UnboundLocalError
20:11  ssbr: dash: I think my renovations are good.
20:11  ssbr: if I didn't, I wouldn't want them.
20:11  KirkMcDonald: ssbr: You would also, if I understand correctly, lose fast locals.
20:11  ssbr: I simply have different goals than you.
20:11  ssbr: KirkMcDonald: Yes, probably.
20:11  KirkMcDonald: ssbr: That is unacceptable.
20:11  dash: ssbr: my plan is to mimic ES-Harmony
20:12  ssbr: KirkMcDonald: it's actually pretty acceptable to me.
20:12  dash: dump global and nonlocal, add let and const.
20:12  ssbr: KirkMcDonald: I mean, I think my ideal language is actually pretty slow.
20:12  KirkMcDonald: Personally I think Python should just add "var" or some other equivalent.
20:12  KirkMcDonald: "let" works, too.
20:12  dash: KirkMcDonald: exactly.
20:12  ssbr: That's OK. I could write the fast bits in a different language, that was ideal in a different way.
20:13  ssbr: I hope by "let" you mean let-statements of the form let x=y, z=bar: ... :(!
20:13  KirkMcDonald: And I don't mean it should just add it, I mean that the current semantics are wacky and using explicit variable declarations would not be wacky.
20:13  dash: ssbr: well i wouldn't have it introduce a suite
20:13  ssbr: or do you mean, uh, like in BASIC?
20:13  dash: KirkMcDonald: exactly.
20:13  ssbr: explicit variable declarations also solve my objection, but in a way that make python uglier. :(
20:14  KirkMcDonald: But, c'est la vie.
20:14  dash: ssbr: "uglier"?
20:14  deepy: less free-flow
20:14  dash: deepy: what does that mean? and is it bad?
20:14  kerio: then we add static typing
20:14  KirkMcDonald: I've come to like Go's syntax for variable declarations.
20:14  ssbr: dash: more noise, less signal.
20:14  kerio: and bam, c++ all over again
20:14  deepy: as in like freehand typing
20:15  KirkMcDonald: x := 0 // a variable declaration
20:15  al_admeld: dash: im trying to use sqlite now, but its giving me a list back. i would like a dict. whats the right way to make the list in to a dict
20:15  KirkMcDonald: x = 2 // an assignment
20:15  ssbr: AHA
20:15  ssbr: KirkMcDonald: and an assignment is x = 0?
20:15  ssbr: I was actually about to suggest it as a way of making declarations less intrusive :D
20:15  ssbr: and Go already did it. nice.
20:15  dash: i don't like it
20:15  ssbr: I could live with that.
20:15  dash: because it's less obvious to read
20:15  KirkMcDonald: dash: It also supports "var x = 0".
20:16  ssbr: dash: it's only less obvious if you don't want it to be obvious.
20:16  ssbr: Which I don't.
20:16  dash: single character differences that make a major but subtle difference in behaviour strike me as poor UI
20:16  KirkMcDonald: dash: Having read and written a quantity of Go code, I have not found it to be an issue.
--- Log closed Fri Oct 22 23:11:39 2010
--- Log opened Fri Oct 22 23:12:09 2010
23:12 --- Users 764 nicks [0 ops, 0 halfops, 0 voices, 764 normal]
23:12  dash: 'cause of the L on the end.
23:12  magcius: oh
23:12  magcius: I would just do .strip("L")
23:12  magcius: in case there isn't one
23:12  bruse: >>> hex(4702111234474983745)
23:12  bruse: '0x4141414141414141'
23:12  dash: so this is less bad -
23:12  dash: ("%x" % i).decode('hex')
23:13  blueyed: papna-work: remember apparently fails to install in Python 2.5: http://pastebin.com/fefW0SHw - JFI ; yes I should upgrade python on that box.
23:13  magcius: dash, I would propose a proper numeric solution, but from all I've seen, it's just faster to do the dirty things
23:13  infobob: http://paste.pocoo.org/show/278994/ (repasted for blueyed)
23:13  kerio: markatto: i wouldn't use a generic decorator
23:13  bruse: ah, i see, on another machine i get '0x4141414141414141L'
23:13 --- Channel #python was synced in 96 seconds
23:13  bruse: does this depend on python version?
23:13  dash: bruse: probably native integer size
23:13  bruse: ok
23:15  mgedmin: could be a python version difference as well
23:15  Juhaz: it does depend on python version but only 2.x <-> 3.x
23:15  bruse: ah, in my case, it was indeed native integer size
23:15  arkanes_: yeah in 2.x you will get the L if the integer excedes the storage of the native int
23:15  mgedmin: oh, I must be misremembering something
23:15  arkanes_: in 3.x, theres no L regardless
23:16  tos9: blueyed: Try adding from __future__ import with_statement
23:17  tos9: blueyed: (Or using 2.6+)
23:17  kerio: that's because py3 makes sense
23:18  blueyed: tos9: thanks, is there an future import for "except () as e", too?
23:18  kerio: well, at least it makes more sense than py2
23:20  bruse: anyway, this channel is pretty great for people like me who have coded python for 3 hours
23:20  bruse: so thanks for that
23:21  dash: <3
23:21  mgedmin: u'\u2665'
23:21  tos9: blueyed: Oh you're using a module... I mean you could change the code I guess.. It's not that smart in general, but you could change that to except WhateverException, e
23:21  kerio: yeah, #python is great
23:22  blueyed: tos9: yes, that would work of course, but I'd like to avoid it.. besides, now I am setting up a new box with current Python. Thanks anyway.
23:23  mgedmin: blueyed, python2.7 supports except foo as e without any __future__ imports
23:23  mgedmin: and 2.6 too
23:27  meltingwax: i'm trying to write a generator that will iteration through all possible integer tuples (p, q), can anyone give me any hints as to how to approach this?
23:28  habnabit: itertools.izip(itertools.count(), itertools.repeat(0))
23:28  dash: meltingwax: why are you doing this>
23:28  dash: ?
23:29  habnabit: There you go.
23:29  mgedmin: heh
23:30  meltingwax: habnabit: that only returns (p, 0) for p >= 0
23:30  meltingwax: dash: trying to brute force something
23:30  habnabit: meltingwax: How do you know? Did you exhaust the iterator?
23:30  dash: meltingwax: and how can you distinguish that fromw at you asked for? :)
23:30  dash: meltingwax: anyway, what are you trying to brute force
23:31  Yhg1s: meltingwax: are there any upper bounds here?
23:31  meltingwax: basically something equivalent through iterating through all the positive and negative rational numbers as (p, q)
23:31  habnabit: Yes. Mine does that.
23:31  Yhg1s: meltingwax: and when would it get around to using something other than the initial value for one of them?
23:32  tos9: Yhg1s: You have to loop "diagonally".
23:32  blueyed: I virtualenv still recommened to setup a separate python (web) app?
23:32  Yhg1s: tos9: that wasn't in the requirements, but easily done. it wouldn't be any more useful.
23:32  dash: tos9: don't have to :)
23:33  meltingwax: dash: i'm trying to brute force something for an assignment
23:33  Yhg1s: meltingwax: without any upper bounds you wouldn't get around to doing anything useful.
23:33  habnabit: Oh, homework.
23:33  dash: meltingwax: my recommendation is not to.
23:33  habnabit: Come back when you have an actual problem.
23:34  tos9: Yhg1s: "Any more useful?"
23:34  tos9: Yhg1s: Yes it would, you'd cover every rational.
23:34  Yhg1s: tos9: yes.
23:34  Yhg1s: tos9: so would habnabit's, eventually.
23:34  Yhg1s: try it and see.
23:35  ssbr: habnabit: what was your generator?
23:35  ssbr: Oh, I see.
23:36  ssbr: tsk, not mathematically valid.
23:36  tos9: Yhg1s: No, it wouldn't
23:36  Yhg1s: tos9: prove it.
23:36  dash: well he didn't say "rational" at first
23:36  tos9: Yhg1s: Prove what?
23:36  dash: repeat(1) would be a better choice.
23:36  ssbr: Yhg1s: it's quite easy to prove. The second number will always be zero. Therefore, it cannot return, say, (1, 1)
23:36  tos9: Yhg1s: _habnabit covered p,q for a fixed q=0.
23:36  ssbr: (or, in the case of repeat(1), (1, 2))
23:36  habnabit: tos9: How do you know it won't eventually change q?
23:36  ssbr: there is a specific way to cover all the rationals. You need it to prove countability. Heck if I know it.
23:37 * mgedmin offers ((p, q) for p in itertools.count(0) for q in itertools.count(0))
23:37  ssbr: habnabit: because you constructed it not to.
23:37  mgedmin: let's see you get (1, 1) out of it
23:37  Yhg1s: ssbr: it can't return (1, 1) if the second item *could* produce 1.
23:37  tos9: Yhg1s: He wants to loop over all rationals in a way such that for a given rational (p,q) there is a finite number of steps to get to (p,q). That's quite easily provably false with habnabit's gen
23:37  habnabit: ssbr: Maybe python is magical and does what I mean.
23:37  tos9: habnabit: don't be dumb.
23:37  Yhg1s: tos9: no, it's quite provably false for everything, because there *is* no finite number of p.
23:37  habnabit: ssbr: Exhaust the generator and tell me if you get (1, 1) out if it.
23:37  ssbr: habnabit: then one may as well say it's magical and does what I mean, making me right.
23:38  tos9: Yhg1s: What? If you loop diagonally, for every (p,q) a finite number of steps is required.
23:38  ssbr: http://www.homeschoolmath.net/teaching/rational-numbers-countable.php
23:38  tos9: ^^ Yes
23:38  ssbr: ^ that's the correct way to do it.
23:38  tos9: I was assuming you knew this
23:38  tos9: Apparently not though.
23:38  ssbr: habnabit: I don't need to.
23:38  Yhg1s: tos9: you realize we were countering a ridiculous question with a ridiculous answer, yes?
23:39  ssbr: habnabit: the nature of your program is such that, if everything operates correctly, it will never produce (5, 5)
23:39  merijn: Countable is not finite...
23:39  tos9: Yhg1s: Ridiculous question yes. But not a ridiculous answer
23:39  tos9: merijn: To reach a *specific* (p,q) is not countable
23:39  merijn: Countable is still infinite, just a different order of magnitude of infinity >.>
23:39  tos9: merijn: It's finite
23:39  merijn: tos9: Ah, true
23:40  arkanes_: ssbr: surely you can't be making this argument while also remaining true to the earlier one you had with dash
23:40  Yhg1s: tos9: so now you *don't* think producing (p, 0) for an unbounded p is a silly answer? I'm confused.
23:40  tos9: Yhg1s: If you want to reach every (p,q) you must use diagonalization.
23:40  merijn: But a specific p and q is not the same as all (p, q)
23:40  tos9: Yhg1s: Of course it is. That's exactly what I've said.
23:40  ssbr: arkanes_: nothing about macros prevents you from reasoning formally about programs...?
23:40  Yhg1s: tos9: you can't reach every (p, q) in Python code.
23:40  tos9: Yhg1s: You don't want to unboundedly count p, you want to diagonally count every p,q
23:40  dash: arkanes_: http://wondermark.com/667/
23:41  tos9: Yhg1s: Sure you can.
23:41  Yhg1s: tos9: I don't want to do either of these silly things.
23:41  arkanes_: ssbr: you made your analysis if habnabit's program via local analysis
23:41  KirkMcDonald: This conversation is silly!
23:41  ssbr: arkanes_: No, I made it because I know what itertools.repeat() does and what itertools.izip() does
23:41  ssbr: arkanes_: there is no way to say what I did just with local analysis.
23:41  arkanes_: ssbr: do you?
23:41  ssbr: arkanes_: I know what they are specified to do.
23:41  dash: "do you think that's air you're breathing?"
23:41  ssbr: Whether that's actually what they do is another issue.
23:41  arkanes_: of course you did, you have no nonlocal information you could have used
23:42  ssbr: arkanes_: I have the entirety of the program.
23:42  ssbr: sans, presumably, an import.
23:42  arkanes_: ssbr: no, you have a whole set of implied globals
23:42  arkanes_: the import, for example
23:42  ssbr: If there was more to the program that fundamentally changed, habnabit would be trolling.
23:42  bruse: this discussion makes me dream of lazy lists
23:43  arkanes_: well, he *was* trolling
23:43  kerio: lazy lists?
23:43  ssbr: arkanes_: I mean really trolling. defeating his own point, in fact.
23:43  arkanes_: but in a way unrelated to this
23:43  habnabit: bruse: We have iterators. Close enough.
23:43  ssbr: arkanes_: Since I can assume he was not, I can assume this is not true. In real life, we have the full program, without implied globals.
23:43  bruse: kerio: like, lazy evaluation
23:43  bruse: like in haskell
23:43  ssbr: arkanes_: And this argument has nothing to do with macros.
23:43  kerio: oh, yeah
23:43  kerio: generators
23:43  ssbr: So.
23:43  kerio: we have those
23:43  habnabit: kerio: Iterators.
23:44  arkanes_: dash: yes precisely
23:44  kerio: er, yeah
23:44  bruse: all is well then
23:46  aluchko: I have an package I installed in my home directory using ./configure; make install; it installed a ~/lib/python2.6 but I don't know how to get sys.path to include that directory so I can use the modules
23:47  Yhg1s: aluchko: 'sys.path.append("/path/to/lib/python2.6")' is one way.
23:47  Yhg1s: although it's more likely you want to set PYTHONPATH in your shell.
23:48  aluchko: Yhg1s, PYTHONPATH sounds better, I don't want to alter any programs or system wide configuration files
23:48  Yhg1s: or you may want to make this package install its bits in ~/.local/lib/python2.6 instead.
23:48  exarkun: Don't alter it system-wide, then
23:49  aluchko: Yhg1s, it worked, thanks
23:51  raininja: ping?
23:51  Diverdude: is there a way to read a specific line in python?
23:51  Diverdude: ehh
23:51  ssbr: raininja: http://linux.die.net/man/8/ping
23:51  Diverdude: specific line in a file
23:52  ssbr: Diverdude: iterate over the file until you get that line
23:52  Diverdude: textfile
23:52  Zal: Diverdude, not without iterating through the preceding lines
23:52  raininja: ssbr funneh
23:52  raininja: hey if python  expects a -lutil what library is that?
23:52  lfaraone: I want to securely send a message between an embedded device and a Django webapp. The app should be able to verify the authenticity of the message from the device. Should I use SSL Client Certificates, RSA, or some sort of pre-shared key?
23:53  ssbr: raininja: probably libutil
23:53  raininja: ssbr: thanks i will have a look
23:54  raininja: or was that a joking response
23:54  exarkun: lfaraone: Using SSL should be fine.
23:54  dash: raininja: that's what it means.
23:54  raininja: i understand that but i have no libutil package
23:55  ssbr: raininja: I guess you should get one. :P
23:55  raininja: is there such a thing?
23:55  ssbr: (It was a serious response, but at the time I wasn't sure it was correct. I only knew that -lperl means libperl, and -lmagic means libmagic).
23:55  Yhg1s: raininja: it's usually not a separate package.
23:55  Yhg1s: raininja: you should already have it, since python is linked against it.
23:55  raininja: darn
23:55  raininja: trying to build conspire
23:56  Yhg1s: so either your python is non-functional, or the distutils information on how your python was compiled is incorrect for your python build.
23:56  Yhg1s: what makes you think it's an issue?
23:56  raininja: the build failed claiming i am missing -lutil, but configure script did not mention it
23:57  Yhg1s: does it claim you're missing the library for -lutil, or the -lutil flag?
23:57  raininja: it is even listed in "PYTHON LIBS"
23:57  raininja: sec i double check\
23:57  Yhg1s: perhaps pasting the exact output would be more useful.
23:58  raininja: ld: fatal: library -lutil: not found
23:58  Yhg1s: and which platform is this on?
23:58  ssbr: dash: do you know who maintains http://www.erights.org/data/irrelevance.html ?
23:58  Arsanerit: Through the use of 'from __future__ import ...' statements, is it possible to write code that will run in both python2 and python3?
23:58  Yhg1s: Arsanerit: no.
23:58  raininja: Yhg1s: openindiana
23:59  ssbr: dash: er, nevermind.
23:59  dash: ssbr: mark miller wrote it.
23:59  ssbr: I thought there was a dead link, but it seems that for some reason firefox stripped out a vital character. I'm actually really confused.
23:59  Yhg1s: raininja: any idea what libc it uses?
23:59  raininja: (opensolaris)
23:59  ssbr: the link to http://networkcomputing.com/documents/s=1235/urm0105l/0105l.htm became http://networkcomputing.comdocuments/s=1235/urm0105l/0105l.htm :S
23:59  ssbr: Oh, but it's dead anyway.
--- Log closed Sat Oct 23 00:00:01 2010
