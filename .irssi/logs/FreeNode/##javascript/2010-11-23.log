--- Log opened Tue Nov 23 11:17:23 2010
11:17 --- Users 452 nicks [0 ops, 0 halfops, 0 voices, 452 normal]
11:17 --- Channel ##javascript was synced in 1 seconds
11:18  iaj: hey there - when I want to found out about all that - kind of strange - javascript syntax with the opening {( brackets... any place to have a go?
11:18  Maxdamantus: js> {where: "here"}
11:18  gbot2: Maxdamantus: "here"
11:19  Cork: iaj: just google json
11:19  Maxdamantus: js> {("foo")}
11:19  gbot2: Maxdamantus: "foo"
11:30 --- RaNdY is now known as Guest40875
11:30 --- Guest40875 is now known as Guest85340
11:43  bostko: Hi, what means $(dom_element).name(function() {});
11:43  bostko: what is $()
11:43  cojack: it's jquery syntax
11:44  cojack: $() it's function that will parse your string like $('#id_html_elemt')...
11:44  Maxdamantus: $ is just a function.
11:44  cojack: so $() it's selector
11:44  Maxdamantus: $ can be used as a name just like other alphanumeric identifiers.
11:44  cojack: btw using $ as function is wrong
11:45  bostko: oh I understand :)
11:45  Maxdamantus: ^[a-zA-Z$][a-zA-Z0-9$]*$
11:45  Maxdamantus: What's wrong?
11:45  cojack: using $ as reference to function
11:45  Maxdamantus: Meh, ignore that regex, can't really represent the whole set.
11:45  Maxdamantus: What's wrong with it?
11:45  cojack: i don't know w3c say that ;x
11:46  cojack: wrong, I don't remember ;p
11:46  Maxdamantus: w3c doesn't define the ECMAScript language.
11:46  Maxdamantus: $ is a valid identifier.
11:46  maushu: What would be the best way to have a smooth moving grid background?
12:07  lifechamp: Right-clicking to view-source on google keyword tools doesn't produce source containing words that are on the page. Any ideas why? How can I scrape keyword tools output?
12:27  FernandoBasso: Do you guys recommend the sitepoint javascript reference?
12:28  FernandoBasso: It enables us to search (like in php.net) and it seems to work fine for me. (mdc search seems bad to me)
12:29  Derppy: I have a system that tracks window.location.hash for changes and parses it to separate keys and values {key:"value"}. It allows registering functions to be called when a specific property changes. I'd need to compare the last hash property object to the current one and find the properties that differ, but I'm not quite sure what's the best way to do it. Any recommendations?
12:38  yak[work]: FernandoBasso: google.com/?q=your+question+here++MDC works fine for me all the time
12:39  yak[work]: Derppy: I've seen people monitor the value of #hash with a setInterval. Five times per second seemed a reasonable enough value not to overload the browser
12:41  FernandoBasso: yak[work]: I meant, searching directly in mdc site.
12:42  Derppy: yak[work]: Yeah, that's exactly what I'm doing. Them I'm parsing all the key/value pairs (#foo=bar&asdf=foobar) to an object. But I have functions that want to "listen" to specific properties so I'd need to check if that exact propery has changed. So I'd need to compare the old data and new data, they both are objects with x amount of properties.
12:42  FernandoBasso: I said the the sitepoint one seems to have a good search engine.
12:42  Derppy: I'd need to know if there's a new property, a property is gone or some property has different value. So I can run the correct function.
12:42  yak[work]: FernandoBasso: Google is a better alternative to the build in search in MDC, since it takes in account relevance and popularity. ultimately works better
12:43  FernandoBasso: yak[work]: You are right.
12:44  Narcissus: /7/7
12:45  yak[work]: Derppy: Two separate procedures. One simply monitors the value of #hash, and fires your .onChange callback when it detects a change, any at all. Your onChange decides whether it is actually a change or not, and if it is - parses the #hash into an object and loops over the array of callbackFunctions, passing that parsed object into each of them. You can register as many of these callbackFunctions as you want.
12:53  Famic: anyone knows of a good way to create custom google maps infowindows ?
12:55  ablomen: Famic, http://code.google.com/apis/maps/documentation/javascript/overlays.html
12:56 --- h4x0r` is now known as perlNUB
13:21 --- voodootikigod_ is now known as voodootikigod
13:30 --- Putr is now known as Putr|Away
--- Log closed Tue Nov 23 13:42:59 2010
--- Log opened Tue Nov 23 13:43:23 2010
13:43 --- Users 463 nicks [0 ops, 0 halfops, 0 voices, 463 normal]
13:44  d_mitar: anyone have a snippet/idea about splitting an array in 3 parts where the first one or the second one are always greater than the last one (think newspaper layout of items where front columns are taller than tail ones)
13:44  d_mitar: eg, for 55 items it would go 19,18,18
13:44 --- Channel ##javascript was synced in 103 seconds
13:45  TheSheep: d_mitar: integer division?
13:46  d_mitar: yeah cept for it's never a clear/cut case. eg 55 /3 = 18.3333 so first column can be math.ceil(18.333) so 19 - i suppose it needs redoing for the remaining items
13:46 --- perlNUB is now known as h4x0r`
13:48  maushu: Anyone knows the license for that hand cursor from google maps?
13:51  d_mitar: hrm sorted.
14:28  pallet: Hi there can some people go to http://register.purchaseseal.com/ I need to see if the stats are working please ;)
--- Log closed Tue Nov 23 14:34:50 2010
--- Log opened Tue Nov 23 14:35:10 2010
14:35 --- Users 461 nicks [0 ops, 0 halfops, 0 voices, 461 normal]
14:36 --- Channel ##javascript was synced in 104 seconds
14:43 --- Putr|Away is now known as Putr
--- Log closed Tue Nov 23 14:59:13 2010
--- Log opened Tue Nov 23 14:59:37 2010
14:59 --- Users 465 nicks [0 ops, 0 halfops, 0 voices, 465 normal]
14:59  complete: Sorella: ok. so you suggenst to use for(i;i<a.length;i++) ?
14:59  Sorella: yes, that's the right way to iterate over arrays
14:59  Cork: Sorella: thats the hole argument, assosiative arrays
14:59  complete: ok
15:00  Sorella: v8> Array.prototype.ohnoes = ".-."; var a = [1,2,3], rv = []; for (var prop in a){ rv.push(prop) }; rv
15:00  v8bot: Sorella: ["0", "1", "2", "ohnoes"]
15:00  Sorella: that would also include properties libaries include in the prototype, like to fix indexOf or whatever.
15:01 --- Channel ##javascript was synced in 102 seconds
15:01  Sorella: yonk: I didn't understand your question. If you want to search a string with case insensitivity tho you'll need a regex
15:01  yonk: Sorella, thank you
15:01  Sorella: or convert both the substring and the string to lowercase, then use indexOf
15:01  Sorella: or uppercase, w/e
15:03  complete: Array.prototype.ohnoes = ".-."; var a = [1,2,3], rv = []; for (var prop=0;prop<a.length;prop++){ rv.push(prop) }; rv
15:03  complete: v8: Array.prototype.ohnoes = ".-."; var a = [1,2,3], rv = []; for (var prop=0;prop<a.length;prop++){ rv.push(prop) }; rv
15:04  v8bot: complete: [0, 1, 2]
15:04  complete: js: Array.prototype.ohnoes = ".-."; var a = [1,2,3], rv = []; for (var prop=0;prop<a.length;prop++){ rv.push(prop) }; rv
15:04  gbot2: complete: [0,1,2]
15:04  complete: interesting
15:06  TheEternalAbyss: hello
15:07  TheEternalAbyss: was wondering, is there a way to change the inner html of an object based on class, and not id, so I can change multiple elements at the same time?
15:10  Sorella: TheEternalAbyss: you have to get a list of the nodes you want to change, and change each one individually
15:10  Sorella: or you can use the LOLCats library
15:11  TheEternalAbyss: lolcats library?
15:12  Sorella: yeah, it lets you do things like: Hai('world').can_haz('.all_ur_bases').kthxbye(); which basically appends `world` to all objects with the class `all_ur_bases`
15:13  TheEternalAbyss: nice
15:13  TheEternalAbyss: where can i find it?
15:14  Sorella: it's on github, but it's extremely experimental and not even near finished :3 https://github.com/killdream/Hai.js
15:14  TheEternalAbyss: :)
15:14  Rickardo1: Hi, iam trying to debug javascript in chrome.. e.g in google documents I can see that the help command shall show me info but it give me an error instead.
15:15  Maxdamantus: js> var a = [1,2,3]; a[100] = 4; var rv = []; for (var prop in a){ rv.push(prop) }; rv
15:15  gbot2: Maxdamantus: ["0","1","2","100"]
15:15  hamcore: Is there a way to execute a command when someone closes my website?
15:15  Sorella: hamcore: window.onunload
15:16  hamcore: Sorella nice, thanks.
15:17  TheEternalAbyss: by the way, thanks Sorella. interesting stuff :D
15:18  Sorella: ehe, it's more of a joke dom library, tho :3
15:18  TheEternalAbyss: yea but it can serve my purpose :D
15:18  Sorella: :3
15:19  hamcore: Sorella Is it safe to use window.onunload to destroy sessions (logout)?
15:20  Squarism: how do i set a form field from javascript?
15:20  Maxdamantus: Usually .value
15:20  hamcore: document.formid.field.value
15:21  Sorella: hm, you should be destroying the sessions on the backend by checking if the user's connection is still alive. Also, I'm not sure how is the support of window.onunload crossbrowser. Most browsers don't allow async requests to be made from that point onwards either.
15:21  Maxdamantus: I don't think that's standard.
15:21  Maxdamantus: (Accessing elements by id from the document object)
15:21  Maxdamantus: window.onload is standard.
15:21  Sorella: onunload
15:21  Maxdamantus: Oh, nvm.
15:22  Sorella: also, being standard doesn't mean it's implemented consistently across browsers ;P
15:22  Sorella: ugh, wierd smiley .-.
15:22  hamcore: window.onunload is started when you run another url at the tab, so if your system use 2 tabs it will 'break'
15:22  hamcore: right?
15:22  hamcore: s/started/called/
15:22  Sorella: window.onunload is fired when the user is exiting the current page
15:23  Sorella: it can be either for refresh, closing the browser/tab or navigating to another url
15:26  TheEternalAbyss: :( the library has two errors
15:27  Sorella: those being?
15:27  TheEternalAbyss: Hai is not defined and this.get is not a function
15:28  TheEternalAbyss: first one in lulz.js and the other in hai.js
15:28  Sorella: have you build the library before including it?
15:28  Sorella: by running ./waf configure && ./waf on the lib dir
15:29  Sorella: or you can just include it in the order: hai.js, dom.js and lulz.js
15:31  AkiTendo: Anyone done loading of pdf's into an iframe?
15:31  AkiTendo: I have a pdf file I'm generating serverside that has an embedded javascript to start printing immediately onload.  That js works fine.
15:32  AkiTendo: I now need to pull it to an iframe.  That works fine - up and until I hide the iframe with css.
15:32  Maxdamantus: Eugh. Don't do it.
15:33  EvanR-work: someone save him!
15:33  EvanR-work: hes falling into insane custom web technology
15:33  Maxdamantus: Wait, the PDF file has embedded JS?
15:34  AkiTendo: Yes.
15:34  Maxdamantus: By printing, do you mean print()?
15:34  AkiTendo: Yes - to a printer.
15:35  AkiTendo: When it comes to printer behaviors browsers suck. All of them.
15:35  Maxdamantus: Then don't do it.
15:35  AkiTendo: Yeah, not an option.
15:35  Maxdamantus: Why not let the user use their browser software to print?
15:35  EvanR-work: s/printer behaviors/basically any non trivial task/
15:35  AkiTendo: Because browsers want to print the URL of the document to the header and footer.
15:35  Maxdamantus: Then you don't need to worry about "do my users even have a PDF viewer in their browser"
15:35  AkiTendo: Not good - on a government receipt.
15:36  Maxdamantus: Oh god, this is a government site, that has JS-embedded PDFs in iframes?
15:36  EvanR-work: lol
15:36  AkiTendo: I provide the users with their computers so that isn't an issue. This is an intranet - I control their environment.
15:37  AkiTendo: That includes the ability to tell them what browser they *will* use.
15:37  Maxdamantus: Hm, our studylink (government-owned? student loans/allowances) thing has crap like that.
15:37  Maxdamantus: When they send you something, it comes as PDF, and you need to look at it in an iframe on their site.
15:37  Maxdamantus: and the file is always called file.pdf
15:37  bradleymeck: is there a way to test if a browser is in privacy mode?
15:38  Maxdamantus: $ ls ~/Download/file
15:38  Maxdamantus: file (1).pdf  file (2).pdf  file(2).pdf   file (3).pdf  file(3).pdf   file (4).pdf  file(4).pdf   file(5).pdf   file(6).pdf   file(7).pdf   file.pdf
15:38  TheEternalAbyss: sorry boss bothering me
15:38  mentoc: Maxdamantus: very meaningful names
15:38  TheEternalAbyss: i have to compile it?
15:38  Sorella: bradleymeck: sure: if (confirm('Yer usin' da porn mode, matey?')) { /* privacy mode stuff ahoy */ }
15:39  EvanR-work: metasyntactic pirates
15:39  TheEternalAbyss: ok
15:40  Sorella: TheEternalAbyss: you can either compile it or include all the files in the right order. Compiling also minifies it by default, if I remember correctly. Otherwiser you have to provide --minify to the configure
15:40  bradleymeck: nice sorella lol
15:40  TheEternalAbyss: well changing the order of includes fised the Hai nto deign defined
15:40  Maxdamantus: js> if (confirm('Yer usin' da porn mode, matey?')) { /* privacy mode stuff ahoy */ }
15:40  gbot2: Maxdamantus: Error: SyntaxError: missing ) after argument list:  if (confirm('Yer usin' da porn mode, matey?')) { /* privacy mode stuff ahoy */ }  .......................^
15:40  TheEternalAbyss: i still get this.get is nto a function tho :(
15:40  TheEternalAbyss: not*
15:40  AkiTendo: Oh well, I found a solution. just make the Iframe 1px by 1px, position absolute and put it in front of an existing graphic that is already black.  Doesn't break the layout.
15:41  TheEternalAbyss: in hai.js
15:41  Sorella: oh, I didn't realize I used single quotes for the string /facepalms
15:41  AkiTendo: Anyway, Got go duck out and finish this out.
15:41  mentoc: js> if(confirm("Yer usin' da pr0n mode heh?!"){ /* Welcome to google's incognito */ }
15:41  gbot2: mentoc: Error: SyntaxError: missing ) after condition:  if(confirm("Yer usin' da pr0n mode heh?!"){ /* Welcome to google's incognito */ }  ..........................................^
15:42  mentoc: oh balls
15:42  Sorella: TheEternalAbyss: are you calling it as Hai.something or Hai().something. You have to instance it first either as Hai() or new Hai() :3
15:42  mentoc: js> if(confirm("Yer usin' da pr0n mode heh?!")){ /* Welcome to google's incognito */ }
15:42  gbot2: mentoc: Error: ReferenceError: confirm is not defined
15:42  Maxdamantus: What's "mentoc"?
15:42  Maxdamantus: That's a bad guy in some cartoon, right?
15:42  Maxdamantus: Hm. Dexter's Lab?
15:43  mentoc: Harvey Birdman iirc
15:43  Maxdamantus: Oh, meh.
15:43  mentoc: Adult swim
15:44  Maxdamantus: Oh, I'm thinking of Mandark.
15:48  Sorella: mentoc: REPLs usually don't have alert, confirm and stuff :3
15:48  Sorella: well, REP, in this case
15:49  mentoc: Sorella: Yeah, I wonder how that would be implemented in IRC :P
15:50  Sorella: <gbot2> "message". `ok to confirm, `cancel to cancel?
15:56  Fratyr: Is there any way to have function call if one of the inputs in forms where changed/selected/clicked or something? without putting inline OnEvent="function()" in every input?
15:57  Sorella: Fratyr: sure, bind the events the proper way
15:57  Sorella: `g quirksmode intro events
15:57  gbot2: Javascript - Introduction to Events - QuirksMode - http://www.quirksmode.org/js/introevents.html
15:58  Sorella: you can also delegate events using capture mode
15:58  davidthedrake: Can anyone help me with some multi-line regex? I've got some regex to remove any <script> tags and their contents from an incoming string. However, I can't get it to replace everything when there are multiple lines.
15:59  Sorella: davidthedrake: #regex will probably be able to help you better. But if you're using .+ to match anything: javascript has no multiline match-all
15:59  bradleymeck: . doesnt match \n in js, use  [\s\S]
15:59  davidthedrake: Well, I've got /<script[\s.]*<\/script>/gi to try and account for that fact
15:59  EvanR-work: or (\n|.)
16:00  Sorella: . inside [] doesn't have the match-all meaning, does it?
16:00  bradleymeck: \s\S has better perf actually, but thats a long story
16:00  EvanR-work: yes because javascript is plagued by spelling things causes different performance
16:00  EvanR-work: spelling things differently
16:00  EvanR-work: we need less black magic and more expressive / maintainable code
16:01  bradleymeck: agree
16:01  EvanR-work: regex itself is already an abomination
16:01  bradleymeck: i love regex!
16:01  bradleymeck: i hate flags though
16:01  EvanR-work: the culture is tending toward more and more esoteric practices, why? because its hipper?
16:01  davidthedrake: Right, sorry. I've got /<script\s*.*<\/script>/gi  -- this handles the single line <script></script> stuff, but doesn't do anything with the multiline stuff
16:02  bradleymeck: evanr-work regex writing is generally faster than the manual parsing counterpart
16:02  EvanR-work: if regex even could parse, that would matter
16:02  Sorella: why so much hate on delicious regex? ;-;
16:02  EvanR-work: because the vast majority of usecases have a better way
16:02  bradleymeck: evanr-work it can parse, just not recursively ;)
16:02  bradleymeck: it is also crazy nice if precompiled for performance
16:03  EvanR-work: anyway, the whole 'make things absolutely incomprehensible' mantra is justified by needing higher performance, like old assembly language tricks, but seriously
16:03  EvanR-work: this is the 21st century
16:04  Sorella: we obviously need more perl
16:04  bradleymeck: there is good reason regexp performance acts the way it does
16:04  EvanR-work: the real reason is that people like feeling like they know something significant that others dont
16:05  bradleymeck: im not sure i understand
16:05  EvanR-work: nevermind
16:06  EvanR-work: on the issue of regex, you could talk about the backreference problem and other implementation problems, but really, we would do better to have a more readable way to do basic string operations
16:06  Sorella: regex in python are somewhat readable
16:07  Sorella: the verbose ones, at least
16:07 --- blackwhite_ is now known as blackwhite
16:07  bradleymeck: unfortunately certain syntax make more sense for certain domain specific problems, like css selectors, regexp, math, etc. they abstract from programming languages. overly verbose on a domain limited problem is restricting and thus we use other languages
16:08  davidthedrake: Hrmm... well... can anyone tell me how I can specify any printable character AND newlines together? [\s.] doesn't do the trick.
16:08  EvanR-work: yeah but the actual language were disucssing is shit
16:08  bradleymeck: regexp?
16:08  EvanR-work: an equivalently powerful language could be implemented with just lazy evaluation and functional abstraction
16:08  EvanR-work: and it would be more readable
16:08  EvanR-work: thats one way
16:09  EvanR-work: notice how in regex you cant 'reuse patterns' or 'name patterns with a nice name' like in BNF
16:09  bradleymeck: and take way longer to write, be language specific, and be more prone to bad performance
16:09  EvanR-work: or make pattern functions
16:09  bradleymeck: evanr-work so you want perl regex rather than js?
16:09  EvanR-work: bradleymeck: more prone than normal regex? please
16:09  EvanR-work: perl is shit
16:10  bradleymeck: bad performance in regex is hard to do compared to manual
16:10  EvanR-work: thats bull
16:10  bradleymeck: lets bench it
16:10  EvanR-work: and anyway no one cares about performance
16:10  EvanR-work: or shouldnt
16:10  bradleymeck: when i write js on mobile i care, a lot
16:10  EvanR-work: we need higher level thinking, not 21st century assembly language
16:10  bradleymeck: we need compromise not ruby
16:11  EvanR-work: screw ruby
16:11  EvanR-work: they are so off the mark
16:11  bradleymeck: screw it all we need prolog by that thinking
16:11  Sorella: davidthedrake: . inside brackets means the `.` character. It's not a match all. For any characters use [\s\S] like it was said so many times before.
16:11  EvanR-work: regex is just not a good fit for most cases where people want to use it
16:11  EvanR-work: im done
16:12  EvanR-work: then again neither is js
16:12  EvanR-work: or web browsers
16:12  bradleymeck: or computers
16:12  EvanR-work: sometimes, thats less severe
16:12 * bradleymeck does think computers are overused
16:12  EvanR-work: PCs yeah they usually could use a better device
16:14  davidthedrake: Sorella: sorry, I thought \s\S was being being shown as two different options. Forgot about the \S being the negated version.
--- Log closed Tue Nov 23 16:20:33 2010
--- Log opened Tue Nov 23 16:20:52 2010
16:20 --- Users 482 nicks [0 ops, 0 halfops, 0 voices, 482 normal]
16:20 --- Server: [brown.freenode.net] [freenode-info] channel flooding and no channel staff around to help? Please check with freenode support: http://freenode.net/faq.shtml#gettinghelp
16:21  gregglind: I am talking about actual, number indexed thingies ('lists' in other langs)
16:21  EvanR-work: you can avoid ever using a for loop
16:21  EvanR-work: with higher order functions
16:22  gregglind: EvanR, so it's normal for people to add more power to their arrays?  Idiom?  I don't want to touch Array.prototype, right?  Is there a standard way to 'power-up' these things?
16:22  EvanR-work: the best thing about standard ways is...
16:22  Sorella: #forEach, #map, #reduce, #whatever. They are not implemented in all browsers, because some things like IE are slow as fuck. But MDC provides some compat methods for ya
16:22 --- Channel ##javascript was synced in 100 seconds
16:22  gregglind: Sorella, good pointer!  Chrome on mac seems to be 1.6ish in compatibility
16:22  Maxdamantus: Calling it a list usually implies lack of index.
16:23  Sorella: gregglind: there's no problem in extending the Array.prototype, as long as you know what other codes you're also including, so you avoid collisions.
16:23  EvanR-work: gregglind: there are libraries that do it, there are half implemented browser features, and theres your ability to make something that works for you and your team
16:23  Sorella: Otherwise, you can just sandbox it
16:23  Maxdamantus: EvanR-work: while loop?
16:23  EvanR-work: i would avoid prototype, but how you do it is a style thing
16:23  EvanR-work: Maxdamantus: while loop?
16:24  Maxdamantus: 04:21:23 < EvanR-work> you can avoid ever using a for loop
16:24  Maxdamantus: 04:21:32 < EvanR-work> with higher order functions
16:24  EvanR-work: a for loop is syntactic sugar for while loop, yes
16:24  Sorella: you can use functions to iterate over an array, without using while
16:24  Maxdamantus: ECMAScript doesn't specify any TCO optimisaton, and most implementations just have stack overflows.
16:24 --- primalmotion_ is now known as primalmotion
16:24 --- ctp_ is now known as ctp
16:24  Maxdamantus: Oh right, when the functions do a for/while loop.
16:24  EvanR-work: Maxdamantus: of course i would use a for loop to implement certain lowest level things
16:24  Sorella: function iter_array(a, i, cb){ cb.call(a[i]); iter_array(a, i++, cb); }
16:25  gregglind: Well, I am coming from a place where I can make strong assumpitons about these things, like they are dense, etc.
16:25  gregglind: so I can cheat a lot here :)
16:25  EvanR-work: general recursion is usually inappropriate in js
16:25 * Sorella almost always avoids recursion when she can use iterative methods
16:26  EvanR-work: or you have higher order functions which hide the possible recursive implementation
16:26  Sorella: tail.push(fn, args); chain_call(tail)?
16:26  Sorella: [fn, args]*
16:27  EvanR-work: eh?
16:27  EvanR-work: i just finished ranting about making things esoteric and incomprehensible for the sake of it ;)
16:27  Maxdamantus: Just write it in my language and convert it to JS using http://ntus.uni.cc/ll/
16:27  EvanR-work: even the implementation
16:27  Maxdamantus: Will be sufficient.
16:28  Maxdamantus: (Try typing calc)
16:28  EvanR-work: what are the characteristics of your language?
16:29  Maxdamantus: It's a simplistic purely functional language.
16:29  EvanR-work: eager semantics?
16:29  Maxdamantus: With a few basic types: numbers, tuples, and "data objects"
16:29  Maxdamantus: No, lazy.
16:29  bradleymeck: if we didn't need to make things functional or procedural we could make something that fits those bills pretty much always of being nice and clean/pure w/e you call it
16:29  EvanR-work: ah
16:30  Sorella: ugh, strictly typed?
16:30  Maxdamantus: No, dynamci.
16:30  Maxdamantus: map Char $ fromTo 97 122
16:37 --- Segaja_ is now known as Segaja
16:39  Qci: helo can i do this in javascript: if(foo=bar()){do somthing with foo in case its not false...}
16:39  gkatsev: yes
16:39  EvanR-work: Maxdamantus: compiling to js, possibly with a compiler implemented in js sounds sane, some people disagree
16:40  Qci: gkatsev - yes to my question?
16:40  Maxdamantus: EvanR-work: actually, that's just a prototype.
16:40  tomasm-: anyone know how to go about making an image draggable when it's not the top most layer? i have a non-rectangular 'viewport' (an image with a transparent center) that fits on top and I want the draggable image to move around underneath it...
16:40  gkatsev: Qci: yes
16:40  Qci: great thanks
16:40  Maxdamantus: I'll write an implementation in the language once it's more usable.
16:40  Maxdamantus: Mainly just need pattern matching for = definitions.
16:41  EvanR-work: Maxdamantus: js leaves a lot to be desired, despite it being lightyears ahead of its peers. if people want to use it like asm, well, well treat it like asm and build on it ;)
16:41  Maxdamantus: To make it easier for things like: (a, b) = span (< 42) c
16:42  Maxdamantus: t = span (< 42) c; a = fst t; b = snd t;
16:42  Maxdamantus: I think there are some things that it lacks for it to be efficiently used as a VM
16:43  Maxdamantus: eg, TCO
16:43  EvanR-work: well is tco relevant for lazy
16:43  Maxdamantus: Not too relevant for lazy
16:44  tomasm-: is there a way to capture a mouse click to see which coordinate i clicked down at and which coordinate I let go of the click?
16:44  Maxdamantus: I've implemented a function called tco which lets you implement tail-calling using laziness.
16:44  Maxdamantus: Because laziness avoids the tail-call issue.
16:45  Maxdamantus: Basically, you just give it a tuple, and if the first element is 0, it sets the input to the second element, otherwise it returns the second element.
16:45  Maxdamantus: tco (0,(0,(0,(0,(1,42)))))
16:46  khmer: to be fair, laziness avoids a lot of issues
16:46  inimino: Maxdamantus ⋱ are you going to add a type system?
16:46  Maxdamantus: Yay dynamic typing. None of that "infinite type" silliness.
16:46  Maxdamantus: inimino: probably not.
16:46  Maxdamantus: It's just meant to be a really simple language.
16:47  inimino: ah, ok
16:47  Maxdamantus: When I reimplement it I also want to make it so you can fully define the operators in the language.
16:47  Maxdamantus: atm you can only assign them functions, when the operator is already parsed as an operator.
16:47  inimino: ah
16:48  Maxdamantus: Might try and think of something like that for pattern matching too.
16:48  inimino: so you'll have a compilation phase?
16:48  inimino: hm...
16:48  Maxdamantus: Because there's no core list type.. The list is just implemented in that example library.
16:48  inimino: oh
16:48  Maxdamantus: and a list is defined as a tuple of an element, and a list, applied to the List constructor
16:49  Maxdamantus: (Any identifier starting with a capital is a pre-defined constructor, for use with pattern matching)
16:49  Sorella: tomasm-: you get the coordinates on the MouseEvent (it's not consistent across browsers tho, take a look at the MDC page on it). I'm not sure if the DOM api provides something like getElementsAt(x, y), in which case you'd have to get all the elements from the root object and delegate it to the proper `draggable` element that is its child.
16:49  Maxdamantus: atm the constructor just takes one argument.
16:50  inimino: Maxdamantus ⋱ so you have syntax for tuples, but lists are in a library?
16:50  Maxdamantus: map = a -> (List (b,c) -> (a b : map a c) | List () -> el);
16:50 --- Gregor is now known as Guest41430
16:50  Maxdamantus: Yes.
16:50  Maxdamantus: : = a -> b -> List (a, b);
16:50  inimino: ok
16:50  Maxdamantus: and the empty list is List ()
16:51 --- Guest41430 is now known as Gregor
16:54  pigdude: Maxdamantus: why are you showing haskell?
16:54  Maxdamantus: What Haskell?
16:54  pigdude: Maxdamantus: nvm that looks like haskell to me
16:54  Maxdamantus: It's not Haskell :p
16:54  inimino: close ;)
16:54  tomasm-: does onMouseDown trigger an event handler continuously while the mouse button is down and the mouse is moving around? or is there another event handler for while the mouse moves around?
16:55  Maxdamantus: (:) = \a -> \b -> List (a, b)
16:55  Maxdamantus: could be valid Haskell.
16:55  Maxdamantus: Wait, no it can't.
16:55  inimino: Maxdamantus ⋱ I have a Scheme implementation, but I might do a Haskell subset next.
16:55  Maxdamantus: : isn't a symbol
16:55  Maxdamantus: Well, it's not definable, I think.
16:55  inimino: it's built in List syntax
16:55  Maxdamantus: Yeah.
16:56  Sorella: inimino: have you finished the scheme implementation btw?
16:56  inimino: but if it wasn't built in you'd be crazy to define it for any other purpose anyway
16:56  inimino: Sorella ⋱ It's coming along, I've got more of it there than there was.
16:57  inimino: Sorella ⋱ I just added a compiler which produces JavaScript output, though it doesn't work yet.
16:57  Sorella: hm, it was interpreted then?
16:57  inimino: yes
16:57  inimino: the interpreter got more complete in order to run the compiler
16:57  Maxdamantus: This generates redundantly lazy code.
16:58  inimino: Sorella ⋱ http://boshi.inimino.org/3box/inimino/projects/SICP/chap_5/Ex51/src/test.html
16:58 --- confounds is now known as afk_confounds
16:58  Maxdamantus: eg, a constant 4 will turn into something like: value(function(){ return 4; })
16:58  amikrop: Is there a way I can get the user download a file (even with the help of ActionScript) without them knowing its (real) URL?
16:58  Maxdamantus: amikrop: yes.
16:59  amikrop: Maxdamantus: Could you tell me where could I read on this, please?
16:59 * inimino leans more towards "no"
17:00  inimino: is this some kind of stupid copy prevention scheme or what?
17:00  Maxdamantus: Just use HTTPS with a static private/public key on the server side.
17:00  amikrop: inimino: copy prevention?
17:00  Maxdamantus: and don't bother trying to encrypt the URL on the client side, just give the client the whole request already encrypted.
17:01  Maxdamantus: Might be slightly useless, but.. meh.
17:01  inimino: amikrop ⋱ Why do you want the user not to know the "real" URL?
17:02  amikrop: Maxdamantus: I don't have really a clue on how to technically to this. Could I find some more detailed/specific instructions somewhere?
17:02  Maxdamantus: amikrop: if the software runs on someone's computer, then that computer knows what it's doing with the data, and the user has the right to know what it's doing with what data.
17:02  Maxdamantus: Hmm.. or do they?
17:02  amikrop: * do this
17:02  tomasm-: Sorella, well now i have a onMouseDown, onMouseUp and onMouseMove events, which get Event.pointerX() and Event.pointerY() ... it's all relative to where it starts from (onMouseDown gets the initial coordinates), and it works real-time, but it oddly seems a big sluggish - like there's a half second delay, and once i stop moving the mouse, the image still moves for half a second more.
17:03  Maxdamantus: amikrop: you don't want to do this. It's almost completely useless, and probably is not related to what you want to do.
17:03  Maxdamantus: amikrop: answer inimino's question.
17:04  Sorella: tomasm-∵ if you're changing the position of the image at each DOM iteration, it'll probably be pretty sluggish. Reflows are slow as ruby.
17:04  amikrop: I want to do it, so I can give only some people the right to download these files (and not post the URL to everybody).
17:04  cornelinux: Hi, is it possible to call a C library from javascript on the browser? Or can I call the C-Lib from a firefox XPI and can javascript interact with the XPI?
17:04  Maxdamantus: amikrop: you can limit what clients are able to see the data using sessions or something similar.
17:05  tomasm-: Sorella, well i need it real-time (so it looks truly draggable), so im not sure what alternatives i have... is there a faster way to move the image than setting top/left positions?
17:05  inimino: tomasm- ⋱ Try HTML5 native dragging support, and otherwise don't drag the whole image but a thumnail or icon.
17:06  aftab: Hello, I have a javascript widget which works in utf-8 charset and i want to put it on my clients site which has windows-1256 charset is that possible to load javascript widget contents in utf-8 please ?
17:06  Sorella: cornelinux∵ I'm not sure what the permissions of Furryfox are, but I doubt you'd get arbitrary access to any C library from inside your browser.
17:06  amikrop: Maxdamantus, inimino: For example, I have a user that is registered and authenticated and has bought the right to download some file. I don't want though that user to be able to post the real URL of the file to a forum, so everybody unauthored could download it.
17:06  gregglind: potentially offtopic (metaquestion), but are there 'rules' what this space is for / what the rules of behaviour are?
17:06  gregglind: (this space == ##javascript)
17:06  inimino: tomasm- ⋱ Also, use a timer, don't redraw on every mousemove event.
17:06  Sorella: tomasm-∵ you can use a lazy updating function, perhaps with CSS3 transitions where they are available, so you let the moving part to the browser engine entirely, and avoid lots of reflows.
17:06  inimino: gregglind ⋱ No official rules, but you can ask about specific things if in doubt.
17:07  amikrop: Maxdamantus, inimino: isn't that a good reason? :/
17:07  Maxdamantus: amikrop: you won't allow direct access to the file through the server.
17:07  tomasm-: Sorella, examples?
17:07  Sorella: hm, there goes metacity screwing up again :<
17:07  Maxdamantus: It'll go through a script/program that checks the authenticity of the client first.
17:07  FireFly: amikrop, you could give them a temporary, time-limited token
17:07  inimino: amikrop ⋱ No, that's a good reason to use HTTP Auth or any other authentication mechanism before allowing a download.
17:07  FireFly: That could be bound to their account or something as well, perhaps
17:08  cornelinux: Soralla: I suspect so, too. WOuld sound like a security breach. I got a C-library that interacts with  a usb device. And I'd like to trigger this interaction from a webinterface aka. the browser. Do you got a good idea here?
17:08  amikrop: FireFly: what if I don't control the download link (it is on another site/domain I do not own)?
17:08  cornelinux: ...and the device is connected to the client, not the server.
17:08  inimino: ...just like you would do with *any other non-public resource*
17:09  inimino: amikrop ⋱ Then why are you trying to prevent access to it?
17:09  amikrop: FireFly: (and I just uploaded my file on that site)
17:09  Maxdamantus: amikrop: then why are you trying to sell it?
17:09  tomasm-: inimino, you mean calling clearTimeout() and setTimeout() ? or something else?
17:09  amikrop: inimino: I want to only give it to people that should have it
17:09  amikrop: and not to everybody
17:09  inimino: amikrop ⋱ You're running a service that tries to charge people for downloads, but you don't control the server where you host them?
17:09  Maxdamantus: amikrop: if you pay me $10 I can show you this cool youtube video.
17:09  inimino: $9
17:10  Maxdamantus: But you have to promise not to show anyone else the URL.
17:10  amikrop: inimino: I don't exactly charge them, it is a kind of a quiz / online adventure
17:10  amikrop: and they may only proceed if blah blah
17:10  inimino: so, you're trying to prevent people from cheating in a quiz?
17:11  amikrop: inimino: yes
17:11  inimino: couldn't they just share the file contents on a forum anyway if they wanted to cheat?
17:11  amikrop: inimino: the files are really big
17:12  inimino: so what?
17:12  Sorella: people share 8gb+ files without any problem on the interwebz these days...
17:13  amikrop: inimino: so, if anybody wants to download the file, upload it themselves and then share the new link on some forum, then fine, let it be so. I just want to take my (maybe futile) measures
17:13  inimino: You'll just change the step N in somebody's walkthrough guide from "download this file <link to the server you don't control>" to "download this file <link to their upload on some other server you don't control>"
17:13  amikrop: OK, my purpose might seem a bit pointless but I would like to do that. Is there a way?
17:14  Sorella: tomasm- ∷ I don't have any example specific for that. But it's not really difficult.
17:14  Sorella: amikrop ∷ I think you're just needlessly overengineering things. You could be using your time to do something more useful than trying to prevent people from cheating in a quiz.
17:14  inimino: amikrop ⋱ There's no way for the client to download a resource from URL X and not know what URL X is.
17:16  amikrop: Sorella: maybe, but I would appreciate it if you could tell me how. I mean, is is a secret? :P
17:16  inimino: Sorella ⋱ nice "∷"
17:16  Sorella: and if you're downloading it with javascript, people could intercept the connection by just wrapping the XMLHttpRequest object, for example.
17:16  amikrop: inimino: ok, I just don't want it to be as simple as to look at the browser's status bar
17:16  Sorella: inimino ∷ :3
17:16  amikrop: inimino: I know he could do it with netstat etc
17:17  Sorella: it looks weird with the font I have though
17:17  amikrop: inimino: I mean, he could see the actual URL
17:17  FireFly: ⚃ > ∷
17:17 * Maxdamantus wonders why it's not <compose> ::
17:17  FireFly: You could define it
17:17  amikrop: inimino: but I want to hide it from the obvious firefox spots
17:17  gregglind: another new_to_js question:  documentation on functions, args, etc.  Consensus on idiom?
17:17  amikrop: inimino: what about HTTPS and public/private key?
17:18  amikrop: inimino: that Maxdamantus was saying
17:18  inimino: amikrop ⋱ Well, if you're interested in making things hard without having any actual security benefit, there's thousands of ways, but they don't interest me.
17:18  JuJuBee: Im getting an error about division by zero on line 42 of a php page.  var term_start = new Date(".$sy.",".($sm-1).",".$sd.");  <= line 42
17:18  FireFly: gregglind, there are some JS documentation tools, don't know exactly, but from what I've seen some kind of javadoc-ish comments are pretty popular
17:18  Pilate: JuJuBee: #php
17:18  Sorella: hm... why is it that you're downloading the file to the client btw? Just keep it on the server and you won't have to care about any of this
17:19  Maxdamantus: amikrop: you could theoretically have a static key set on the server, and only a public key on the client, and the first chunk of the request, already encrypted delivered to the client.
17:19  amikrop: inimino: I don't say they should interest you, I am just asking for some tips/pointers from you, ir anyone who would know
17:19  JuJuBee: Pilate:  but the code is in a <script ... tag
17:19  JuJuBee: it is js not php
17:19  gregglind: FireFly, thanks.  I am trying to figure out the bits I am missing in moving over to JS :)
17:19  Pilate: JuJuBee: So paste the PHP output, not the php code
17:19  Maxdamantus: But you could just give all that info to someone else who wants to download the file.
17:19  Maxdamantus: er, only a private key on the client*
17:20  FireFly: gregglind, I'm pretty bad at documenting code anyway, so I'm probably not the right person to ask
17:20  Sorella: gregglind ∷ I use PDoc, it's pretty cool and stuff, despite some errors. There's also YUIDoc and JSDoc. I'm not sure any of them can be considered a `consensus`, but most people seems to go for the Java-like syntax (which I hate much so :3)
17:20  amikrop: Maxdamantus: you mean encrypt the actual HTTP request (i.e. HTTPS)?
17:20  inimino: amikrop ⋱ What I really mean is that I'd actively discourage you from doing it (for the same reason I don't recommend JavaScript obfuscation).
17:20  Maxdamantus: er, and the server's public key.
17:20  inimino: (It doesn't work and it's a waste of time.)
17:20  Maxdamantus: amikrop: no, the important bit will already be encrypted, which is why it's useless.
17:21  Maxdamantus: Encryption involves turning something not encrypted into something that's encrypted.
17:21  Maxdamantus: Which means you'll need to have the not-encrypted stuff first.
17:21  walt: why is this? http://pastie.org/1320414
17:21  amikrop: Maxdamantus: hmm, I see, thank you
17:21  inimino: walt ⋱ "prototype" is just a property like any other
17:22  Sorella: walt ∷ because that's not how the prototype chain works.
17:22  inimino: `ref mdc guide prototype
17:22  v8bot: inimino: Details of the object model - MDC Doc Center - https://developer.mozilla.org/en/JavaScript/Guide/Details_of_the_Object_Model
17:22  Sorella: Some browser implementations of the JS engine expose the [[Prototype]] property, IE's doesn't.
17:22  Sorella: and [[Prototype]] !== `prototype`
17:23  gkatsev: there is prototype as in the inheritence mechanism of js and there is Prototype which is a library akin to jquery.
17:23  walt: how would I best do what I tried to do there? Do I need to copy in the members?
17:23  Sorella: oh, that link is pretty cool :3
17:23 * inimino just guessed
17:24  inimino: haven't read most of the Guide, though I did rewrite some of the page on Functions a couple days ago
17:24  Sorella: walt ∷ did you read the link? It really seems to explain pretty much everything about the prototypal inheritance model used by JavaScript.
17:25  Sorella: v8> var a = {foo: "bar"}, b = {__proto__: a, "baz": null}; b.foo
17:25  v8bot: Sorella: "bar"
17:25  Maxdamantus: js> var a = {foo: "bar"}, b = {__prototype__: a, "baz": null}; b.foo
17:25  gbot2: Maxdamantus: undefined
17:25  Maxdamantus: Meh.
17:26  Sorella: __proto__ is usually how some engines expose the [[Prototype]] property. But the specs doesn't say anything about the exposure of this property. And I doubt MS is willing to implement it.
17:26  Maxdamantus: Oh, it's __proto__ in SM too.
17:26  Sorella: otherwise it would be pretty sweet :3
17:26  inimino: __proto__ is a pretty horrible idea actually.
17:27  Sorella: the performance is pretty bad, but it's still interesting
17:27  gkatsev: how would you generally do it then? .prototype = B.prototype?
17:27  inimino: it means that it's impossible to use an object as a generic hash table because you can never store the magical "__proto__" property without having unwanted side effects
17:27 * Maxdamantus started thinking about a project today he might start, and due to his dislike of prototype stuff, will probably make everything interface using a trait-like system.
17:28  Sorella: gkatsev ∷ Function.prototype = some_object; obj = new Function; (which sets the [[Prototype]] for obj)
17:28  inimino: v8> var a={foo:'bar'}; var b=Object.create(a); b.baz=null; b.foo
17:28  v8bot: inimino: "bar"
17:29  Maxdamantus: It'd be a terminal emulator, but with much of the functionality written in JS
17:29  inimino: probably the closest thing to what walt wanted, though it's hard to guess
17:29  Sorella: inimino ∷ eh, true.
17:29  Maxdamantus: so it'd probably eventually turn into something like emacs, with JS rather than emacs-lisp
17:29  inimino: Maxdamantus ⋱ A terminal emulator or a shell?
17:29  Maxdamantus: inimino: essentially both.
17:29  Maxdamantus: But terminal emulation would be a core function, and that wouldn't be written in C.
17:29  Maxdamantus: s/C/JS/
17:30  inimino: Maxdamantus ⋱ If you've got free time maybe you can help me write my browser-based shell ^_^
17:30  Maxdamantus: But you'd be able to interact with it using JS, tell the screen objects to resize, display here, etc
17:30 --- petercoo_ is now known as petercooper
17:30  Maxdamantus: inimino: it could be integrated in!
17:30  Maxdamantus: as well as a text editor and an IRC client.
17:30  inimino: ...and text editor
17:31  Sorella: Maxdamantus ∷ I'm writing a library to extend on the prototypal inheritance model of javascript. Although Object.create is usually acceptable if you don't have lots of object inheritance
17:31 * inimino generally has little or no inheritance
17:31  Sorella: inimino ∷ browser-based shell eh?
17:31  inimino: yep
17:31  Sorella: inheritance sucks, but I'm writing a widgeting system for a project, so I need some of it
17:31  Maxdamantus: Sorella: mmm.. One of the reasons I dislike prototypes is because the functions are not bound to the object in any way.
17:31  inimino: Sorella ⋱ along with a node.js-based versioning filesystem
17:32  Maxdamantus: With traits the object should be bound lexically to the function somewhere
17:32  Maxdamantus: and you can do things like setTimeout(foo.bar, 500);
17:32  inimino: Sorella ⋱ so you can do things like mv and rm through the shell
17:32  Sorella: interesting
17:33  Sorella: Maxdamantus ∷ you can use Function.bind on all methods.
17:33  Sorella: Function#bind, even
17:34  Maxdamantus: Well, yeah.
17:34  Sorella: >versioning filesystem?
17:34  Maxdamantus: That can be easily implemented as just a function.
17:34  Sorella: Function#bind is standard. You could just have a `addMethods` functions that auto-binds the methods to the object.
17:34  Maxdamantus: But it means still writing encapsulators when using callbacks.
17:34  Sorella: not sure if I like that though
17:34  inimino: Sorella ⋱ like a regular filesystem, but it saves every state of every file.
17:35  inimino: ...so you can always access the entire history of the tree
17:35  Maxdamantus: Yeah, then you might aswell just use traits.
17:35  inimino: like revision control, but without any extra work
17:36  Sorella: hm, wouldn't that get really big over the time?
17:36  inimino: depending on the data you're working with
17:37  inimino: if it's text, you could write all day long every day and never catch up with the falling costs of storage
17:37  Maxdamantus: inimino: oh, "browser based shell"
17:37  Maxdamantus: Like http://203.97.238.106/public/webcli/main.htm ?
17:37  inimino: Sorella ⋱ if you're doing video editing, sure ^_^
17:37  Maxdamantus: (I wrote it ages ago)
17:38  Maxdamantus: Hm, well a year ago.
17:38  Maxdamantus: (Works best in Firefox, because of the key press event mechanism used)
17:38  gregglind: help clear my understanding (reference pointer?) Array.max = <some code> vs Array.prototype.max = <some code> ;
17:38  Sorella: >unknow command `ls` ;-;
17:38  inimino: Maxdamantus ⋱ hm, maybe, but less terminal-emulator like
17:38  gkatsev: inimino: there is a vi clone implemented in js
17:39  Maxdamantus: Yeah, but it's an example of a readline implemented in the user-space of that OS thing.
17:39  l4rk: not vim :(
17:39  inimino: Maxdamantus ⋱ The interface will just be generic HTML, not a character grid.
17:39 --- MrDoublesite is now known as MrOpposite
17:39  Maxdamantus: Oh.
17:39  inimino: Maxdamantus ⋱ and no readline
17:39 --- temp02 is now known as temp01
17:39  Maxdamantus: So you mean like one with a file browser, etc?
17:39  Sorella: They made a vim in JS too?
17:39  inimino: Maxdamantus ⋱ More like a replacement for bash than a replacement for xterm.
17:39  Maxdamantus: It's hardly vim.
17:39  Maxdamantus: I think they've done most of vi, and a few vim features.
17:40  gkatsev: Sorella: vi not vim.
17:40  Maxdamantus: http://gpl.internetconnection.net/vi/
17:40  inimino: Maxdamantus ⋱ so, features would be running programs, redirecting to and from files, mv, cp, rm, and so on, but the UI doesn't need to be like a terminal
17:40  Maxdamantus: Yeah, right.
17:40  gkatsev: yes, that one
17:42  Maxdamantus: Hm. I think I might switch to Conkerer soon.
17:42  NathanWC: No :G in jsvi :(
17:42  Maxdamantus: That has the ability to run external processes for editing forms and stuff
17:42  gkatsev: I heard conkerer took a turn for the worth when they went with XULRunner
17:42  NathanWC: Oh. Just G
17:43  gkatsev: what's :G?
17:43  inimino: oh, when I say "process" I don't actually mean a process on the local machine
17:43  Maxdamantus: I've never heard of :G.. presumably goto
17:43  inimino: gkatsev ⋱ An alias for G apparently
17:43  Maxdamantus: E464: Ambiguous use of user-defined command                                                                                                                        3,0-1         All
17:43  gkatsev: nope, nothing.
17:43  Maxdamantus: Ugh.
17:44  gkatsev: vim ftw
17:44  Maxdamantus: They have :u which is the same as u..
17:44  Maxdamantus: Bleh, how do I escape in this thing?!
17:44  Maxdamantus: Oh ^[
17:44  gkatsev: yes, there is the :undo command
17:44 * NathanWC likes it
17:45 --- joo|sleep is now known as joo
17:45  gkatsev: C-r should be redo
17:45  Maxdamantus: Refresh.
17:45  gkatsev: I guess it doesn't grab it
17:46  Maxdamantus: I think Chrome's more limited with what can be grabbed.
17:46  Maxdamantus: Which is why my terminal thing works better in Firefox.
17:46  gkatsev: probably
17:46  inimino: ^R is a vim feature
17:47 * Maxdamantus doesn't recall ever using redo
17:47  inimino: in vi, you can redo by using u again, since you can't go back more than one action
17:47  gkatsev: no c-r in jsvi
17:47  gkatsev: ah, yeah, makes sense
17:48  inimino: I use the whole undo/redo tree in vim
17:48  chovy: when using throw err -- where does it go?
17:48  Sorella: Emacs has only undo .-.
17:48  chovy: i have a try/catch around the entire callback chain, but it doesn't appear there.
17:49  Maxdamantus: throw(banana in compost bin)
17:49  Maxdamantus: Will throw it into the compost bin.
17:50  inimino: that was valid JavaScript up until 'bin'
17:50  Maxdamantus: Really?
17:50  inimino: chovy ⋱ Callbacks don't work like that.
17:50  gkatsev: js> try{ throw 'foo'; } catch (e) { print(e); }
17:50  joo: lol
17:50  gbot2: gkatsev: foo
17:50  Sorella: chovy ∷ it keeps bubbling until a upper function caches and treats it, or it reaches the topmost context (where it can still be cached by the window.onerror function, otherwise the engine will treat the exception however it wants to)
17:50  joo: AN
17:50  inimino: js> var banana,compost; throw(banana in compost)
17:50  gbot2: inimino: Error: TypeError: invalid 'in' operand compost
17:50  Maxdamantus: js> throw(banana in compost)
17:50  gbot2: Maxdamantus: Error: ReferenceError: banana is not defined
17:50  inimino: js> var banana,compost={}; throw(banana in compost)
17:50  gbot2: inimino: Error: uncaught exception: false
17:51  inimino: that's the one
17:51  gkatsev: lol
17:51  Sorella: ehe
17:51  Maxdamantus: What does it do?
17:51  Sorella: returns true if the object contains the key
17:51  gkatsev: either throws true or false
17:51  Maxdamantus: Oh right.
17:51  inimino: js> 'foo' in {foo:0}
17:51  gbot2: inimino: true
17:51  Sorella: v8> 'foo' in {__proto__: {'foo': null}};
17:51  v8bot: Sorella: true
17:51  Sorella: oh, it searchs the prototype too?
17:51 * Maxdamantus didn't even know `in` was an operator O_o
17:51  chovy: Sorella: that's what i thought...so if i wrap the outter most call with try/catch, how come it doesn't show up there?
17:52  gkatsev: a pretty cool article about throw: https://javascriptweblog.wordpress.com/2010/03/17/meet-your-new-best-friend-throw/
17:52  gkatsev: Sorella: sure does.
17:52  Maxdamantus: js> ({__proto__: {'foo': null}}).hasOwnProperty("foo")
17:52  gbot2: Maxdamantus: false
17:52  inimino: chovy ⋱ Callbacks don't work like that.
17:52  Sorella: throw is usually expensive in web apps tho, because you don't want it on your production code.
17:52 * Sorella uses preprocessing to get rid of them
17:53 * Maxdamantus doesn't use them.
17:53  gkatsev: throw in itself isn't very expensive, the try catch is the expensive part
17:53  Sorella: why not?
17:53  inimino: <chovy> i have a try/catch around the entire callback chain, but it doesn't appear there.
17:53  Maxdamantus: Dunno what I'd use them for.
17:53  inimino: "callback chain" was the key phrase
17:53  Sorella: oh, I wasn't talking about the handling. I use throw to warn me of the times I'm being absent mindedly
17:54  Sorella: which is most of the time
17:54  gkatsev: Sorella: Maxdamantus: but as you can see from that post you can do some cool stuff with throw
17:54  Wes: How can an expensive throw matter in any kind of app?  Throw should not be used for general flow-control
17:54  gkatsev: Wes: you can still use it for that. :P
17:54 * inimino cough StopIteration
17:54  Sorella: Wes ∷ I was talking about the bytes you waste with the error messages, actually.
17:54  gkatsev: throw is basically a much more general and awesome break statement.
17:55  Wes: inimino: StopIteration, ugh. :/
17:55  Wes: Sorella: OH - now I understand what you meant
17:55  Sorella: Python only has those. You have to raise errors to break from loops
17:55  Maxdamantus: Oh, when I said terminal emulator before, I meant terminal multiplexor :\
17:55  Sorella: well, loops inside loops, at least
17:55  Wes: gkatsev: break statements do not normally unwind the stack
17:56  Maxdamantus: (Not a web application that emulates a terminal .. though a web frontend could be implemented)
17:56  Wes: break from nested loop is addressed best by labelled break IMO
17:56  inimino: Maxdamantus ⋱ ok
17:56 * Maxdamantus doesn't like the unscriptability of tmux/screen, and also the inability to remotely share windows.
17:57  Sorella: Wes ∷ you don't have labels in Python, because Guido says it looks fugly.
17:57  Maxdamantus: The multiplexor is basically a shell, and shells should be very customisable.
17:57  Wes: Maxdamantus: throw is a great way to handle unexpected, fatal (ish) conditions. Lots of nice bonuses attached, aside from a sort of OOB flow control, like stack traces
17:57 * Sorella likes dem lables
17:57  Maxdamantus: And scripting is a brilliant way to customise.
17:57  chovy: ok, i got it.
17:58  chovy: i need to try/catch each callback or add an error listener.
17:58  Wes: Maxdamantus: term muxer liker screen, or like sun cluster's cconsole?
17:58  Wes: chovy: window.onerror might make you happy
17:58  Maxdamantus: Dunno what cconsole is.
17:58  gkatsev: it's a console with a stutter?
17:58  Wes: Maxdamantus: lets you type in one input area to have telnet/rsh/ssh connections, each with it's own output window.  Very useful for configuring identical machines.
17:59  Wes: s/have/multiple/
17:59  Maxdamantus: Wes: I see. It could be both.
17:59  Maxdamantus: Because I want to have the ability to share windows between servers on different machines.
17:59  Wes: Maxdamantus: An updated cconsole would be a great trick in my arsenal, sun hasn't done anything with it in a decade
17:59  Maxdamantus: and since it'd be scriptable you could just type in some JS to send input to a group of windows.
18:00  Maxdamantus: It's just an idea though, haven't really thought about it much.
18:00  Wes: Maxdamantus: what JS engine are you playing with?  I have a trivial/simple curses class for spidermonkey
18:00  Maxdamantus: I'd probably use Spidermonkey.
18:01  Maxdamantus: Because of its portability.
18:01  gkatsev: isn't v8 just as portable?
18:01  Wes: Hit me up if/when the time comes, spidermonkey on the server side is my day job
18:01  gkatsev: plus you get node with it
18:01  Maxdamantus: No.
18:01  Wes: gkatsev: no
18:01  Maxdamantus: v8 only works on i686
18:01  Maxdamantus: iirc
18:01  Wes: Maxdamantus: and MIPS
18:01  Maxdamantus: Oh, didn't know about MIPS.
18:01  gkatsev: heh
18:01  gkatsev: ok
18:01  Maxdamantus: All I know is that it uses hacks to get it to work on my x86_64 build of Chromium.
--- Log closed Tue Nov 23 18:08:13 2010
--- Log opened Tue Nov 23 18:13:34 2010
18:13 --- Users 484 nicks [0 ops, 0 halfops, 0 voices, 484 normal]
18:13  EvanR-work: Sorella: is it webscale?
18:14  Sorella: EvanR-work ∷ of course. The servers are maintained by longcats
18:14  gkatsev: http://www.fordi.org/lulz/ a js lolcode implementation
18:14  ivan`_: pk4r: huh? what portable techniques?
18:15  ivan`_: ECMAScript 3 hasn't changed since JS: TGP was published
18:15 --- Channel ##javascript was synced in 106 seconds
18:15  ivan`_: and this book doesn't cover the DOM anyway
18:17  gkatsev: I recommend eloquent->JS:TGP->advanced stuff to beginners
18:18  pk4r: ivan`_, such as Array.indexOf.. ? The book doesn't mention anything about index/search operations in array.. Though I may be confusing it with Mozilla's version again.
18:18  gkatsev: Sorella: HAI; I HAS foo = 5; I SEZ foo; KTHXBYE;
18:19  ivan`_: pk4r: I think that's ES5, and there isn't much of that stuff; see http://kangax.github.com/es5-compat-table/
18:20  gkatsev: indexOf is ES5, but you can implement it yourself easily
18:20  ivan`_: or use Closure Library which uses ES3 implementations when the ES5 is not available
18:23  pk4r: I think I'll just go with jquery's .inArray().. Thanks.
18:24 * gkatsev only uses jquery for DOM
18:25  Sorella: what's inArray? Array#indexOf?
18:25  Sorella: gkatsev ∷ I'm working on a joke DOM library for teh lulz
18:26  pk4r: Sorella, similar functionality from jquery, yes.
18:27  Sorella: They could've just provided the method in the Array's prototype...
18:28  Teratogen: if I have a sparse array, how do I iterate over it?
18:28  Teratogen: like I have a[1]...a[5], then a[50]...a[55] etc
18:28  Teratogen: so a[6] is not defined
18:28  joo: Does it need to be in a certain order?
18:29  Sorella: Teratogen ∷ you could use for .. in checking for hasOwnProperty and checking if the property is numeric (Number(x) is not NaN)
18:29  Teratogen: yes
18:29  Teratogen: has to be in numeric order
18:29  joo: Well.. for..in would work
18:29  Sorella: or you could just iterate regularly and ignore undefined results. But that would be suboptimal
18:29  joo: Er no
18:29  joo: What Sorella saud
18:29  Sorella: for .. in doesn't preserves the order, I guess
18:30  joo: Sorella, is it an instanceof Array?
18:30  Sorella: but you could get the keys (Object.keys), sort, and iterate over the numeric ones
18:30  joo: Err
18:30  joo: s/Sorealla/Terratogen
18:30  joo: fuck this, I'm out
18:30 * joo shoots himself in the head
18:34  Sorella: v8> var a = [], rv = []; a[1] = 1; a[10] = 10; a[100] = 100; a['stuff'] = 'x'; var keys = Object.keys(a); keys.sort(function(a,b){ return a-b }); for (var i=0; i<keys.length;++i) { if (!isNaN(+keys[i])) rv.push(a[keys[i]]) }; rv // Teratogen
18:34  v8bot: Sorella: [1, 10, 100]
--- Log closed Tue Nov 23 18:44:46 2010
--- Log opened Tue Nov 23 18:45:11 2010
18:45 --- Users 484 nicks [0 ops, 0 halfops, 0 voices, 484 normal]
18:46 --- Channel ##javascript was synced in 105 seconds
18:47  pigdude: v8: var a = []; a[100] = 10; a.filter(Boolean)
18:47  v8bot: pigdude: [10]
18:48  pigdude: Teratogen: maybe that is what you want
18:50  gkatsev: assuming you have filter
18:50  Sorella: it's easy to implement anywyas
18:50  Sorella: anyways, even
18:53  coder7of9: what is the valu e if any of prefacing with javascript in a handler:  onChange="javascript:...."
18:54  coder7of9: !answerbot
18:54  Pilum: coder7of9: Remove the javascript: part. It doesn't belong there.
18:54  Pilum: http://www.quirksmode.org/js/introevents.html
18:54  coder7of9: why do people do it
18:54  coder7of9: ok thanks
18:55  NoiseEee: coder7of9: these days, that screams "old code"
18:55  Pilum: Because they've been reading guides written by people who have read guides by ignorant people.
18:55  coder7of9: ok thanks
18:56  gkatsev: or they are used to run js in the url bar
18:56  coder7of9: i just ran into it and was curious
18:58  inimino: `javascript:
18:58  jsBot: javascript:: a pseudo-protocol for generating webpages on the fly. Abused to simulate onclick in the href attribute, it now makes its way into inline event handlers where it serves no true purpose. Using "href=javascript:..." is both incorrect and often inaccessible. Read more at
18:58  jsBot: ..http://crisp.tweakblogs.net/blog/313/the-useless-javascript-pseudo-protocol.html
18:59  coder7of9: thanks
19:03  cojack: guys
19:03  cojack: why north panel have to has height set?
19:04  cojack: I can not create a toolbar without set a height to north panel in viewport
19:04  cojack: not this channel...
19:04  NoiseEee: o.O
19:05  cojack: NoiseEee: it was about extjs
19:13  fintler: just put up a new demo of my map that does event based rendering and not in a setInterval loop... http://github.bringhurst.org/lanyard-demo
19:13  fintler: I've only tested it in firefox 4b7
19:15 * inimino can't figure out the controls at all
19:16  fintler: hit tab until the focus is on the canvas
19:17  fintler: use the arrows or your scroll wheel
19:17  fintler: click-drag to rotate is broken until I work out the interpolation timer
19:17  inimino: ok
19:26  Soopaman: does anyone know a stable way to travel "up" an object (i would use .super in other languages, or .parentNode in the dom)
19:26  Soopaman: I think i'm starting to hit JS' glass ceiling
19:28  gkatsev: you can't, not really, as far as I know/understand.
19:29  fintler: you can kinda do it with .call
19:29  fintler: if you pass 'this' in
19:30  fintler: `js ref call @ Soopaman
19:30  jsBot: Soopaman: js ref call: Calls a function with a given this value and arguments provided individually.  https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Function/call
19:31  Soopaman: interesting.. lemme take a moment to wrap my head around it's implementation
19:31  fintler: https://github.com/fintler/lanyard/blob/master/src/layers/RenderableLayer.js
19:31  fintler: there's an example I did recently
19:31  fintler: so RenderableLayer extends AbstractLayer
19:31  gkatsev: fintler: ah, cool, I guess it makes sense now that I think about it.
19:32  gkatsev: and see the example from that page
19:32  gkatsev: though, I don't like creating objects like that Product :/
19:33  Soopaman: fintler: so this only works if I explicitly know what object to call
19:33  gkatsev: look's like it.
19:33  Soopaman: as opposed to finding a point of reference during runtime
19:33  fintler: it would appear so... I guess you could pass in an object as a constructor arg...then .call on it
19:34  fintler: that hurts my brain for some reason :)
19:34  inimino: I find JavaScript works much better if you forget everything you know about OOP and start over...
19:34  gkatsev: haha
19:35  gkatsev: if you forget classical OO
19:35  inimino: There is no "glass ceiling" but there are things that work well and things that don't.
19:35  gkatsev: just make sure to re-remember it when you go back to using a classical OO language.
19:35  inimino: Or don't go back.
19:35  fintler: you should wade through steve yegge's prototype pattern article at some point if you're stuck on OO concepts
19:35  gkatsev: Or that.
19:35  fintler: but that might take a few hours ;)
19:35  gkatsev: I would go with that.
19:36  gkatsev: The not going back part
19:38  Soopaman: so given
19:38  Soopaman:                         testObj = { 'ccTLD':    ['ca'],
19:38  Soopaman:                                     'rfc1591':  { toString: function(){ return this.super.ccTLD; },
19:38  Soopaman:                                   };
19:38  Soopaman:                           alert(testObj['rfc1591']);
19:38  gkatsev: `paste
19:38  jsBot: paste: Paste links, not code: http://erxz.com/pb/   http://pastebin.parentnode.org/   http://www.webdevout.net/test
19:38  Soopaman: the "call" method doesn't work because there is nothing to call
19:38  Soopaman: oops
19:38  Soopaman: my bad
19:39  inimino: That's not even an OOP problem
19:39  gkatsev: it's ok, next time.
--- Log closed Tue Nov 23 19:44:50 2010
--- Log opened Tue Nov 23 19:45:11 2010
19:45 --- Users 476 nicks [0 ops, 0 halfops, 0 voices, 476 normal]
19:45  fintler: http://steve-yegge.blogspot.com/2008/10/universal-design-pattern.html
19:45  fintler: that artile was my introduction to the prototype pattern
19:45  Sorella: gkatsev ≣ yeah, Lua's prototypal model is awesome
19:45  fintler: it's a great read...even if you don't agree with all of it
19:45  Sorella: __proto__ comes pretty close though
19:46 --- Channel ##javascript was synced in 98 seconds
19:47  antlong: im working on a site where gwt logs errors to javascript console. is there some javascript i can execute to poll for errors there? (im attempting to automate error checks)
19:47  ivan`_: if you're tired of ESC in firefox aborting XHRs, vote and list your affected software: https://bugzilla.mozilla.org/show_bug.cgi?id=614304
19:49  fintler: you might want to try ##gwt
19:50  Sorella: javascript should have grep...
19:50  gkatsev: you could do something like: console.Log = console.log; console.log = function(){/* catch stuff */ console.Log(arguments);}
19:50  fintler: it does have grep...
19:50  fintler: \js ref regex
19:51  fintler: `js ref regex
19:51  jsBot: js ref regex: http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:RegExp
19:51  fintler: ;P
19:51  Sorella: :3
19:51  Sorella: I mean a built-in shell where you could execute arbitrary commands in the current page.
19:51  fintler: firebug does that for the most part
19:51  gkatsev: you mean firebug or chrome dev tools?
19:51  Sorella: so you could $ cd table#main && grep urstuff
19:52  gkatsev: lol
19:52  Soopaman: goodness
19:52  fintler: hah
19:52  Sorella: then it would list only the rows you want
19:52  fintler: that would be nifty
19:52  Soopaman: so much reading, so few actionable answers
19:53  FireFly: JS should have y///
19:54  FireFly: Or, well, similar functionality
19:54  lysgaard: when i do JSON.stringify(object) i get type error. Can't turn circular structure to JSON, what does this mean?
19:54  mauke: FireFly: .replace
19:54  FireFly: Bleh, tiresome for ranges
19:55  Sorella: lysgaard ≣ what it said. JSON can't represent circular data, because... well, you don't usually like endless text representations :3
19:55  Sorella: circular structure = object that contains itself
19:55  FireFly: Yeah
19:55  mauke: js> var object = {}; object.loop = object;
19:55  gbot2: mauke: {loop:{loop:{loop:{loop:{loop:{loop:{loop:{loop:...}}}}}}}}
19:56  lysgaard: Sorella: Ah, so i in some way have to take a part of the object that's noe circular
19:56  Sorella: lysgaard ≣ if you want to save a DOM object, you'll have to strip it to a safe and serializable object.
19:56  mauke: js> var o = {}; o.developers = o
19:56  Wes: lysgaard: you can't serialize cycles
19:56  gbot2: mauke: {developers:{developers:{developers:{developers:{developers:{developers:{developers:{developers:...}}}}}}}}
19:56  sac: :D
19:56  Wes: lysgaard:   var a = {};  a.a = a;
19:56  Sorella: lysgaard ≣ sure, just copy the part that's not circular to another object.
19:56  Wes: lysgaard: how would you represent the resultant structure?
19:57  antlong: gkatsev, i need something that checks the error log
19:57  FireFly: mauke, ^_^
19:57  Wes: FWIW firefox has something called "sharp variables" which DO allow this in .toSource(), but that won't be available in any other browser
19:57  Sorella: a <- "{a: #{ref:a}}"
19:57  Wes: Is one of the JS engines here spidermonkey?
19:57  qFox: can anyone confirm or squash that data:text/html as navigational url can or cannot work in IE9 (and/or lower)?
19:57  Wes: js> version()
19:57  FireFly: Yep, I think js> is
19:57  gbot2: Wes: 185
19:58  mauke: jseval: version()
19:58  buubot: mauke: ERROR: Error: ReferenceError: version is not defined at line 1: (null)
19:58  Sorella: js> var a = {}; a.a = {}; a.toSource();
19:58  lysgaard: What i want to serialize is this object, I'm not that good in javascript so could you point me in what part of the object that's not circular?
19:58  gbot2: Sorella: "({a:{}})"
19:58  Wes: mauke: You just made gbot2 sound like a chair-throwing monkey!
19:58  Sorella: buh
19:58  Sorella: js> var a = {}; a.a = a; a.toSource();
19:58  gbot2: Sorella: "#1={a:#1#}"
19:58  lysgaard: http://dev.openlayers.org/docs/files/OpenLayers/Feature/Vector-js.html
19:58  Sorella: oh, that's how it does it
19:59  antlong: anyone know some JS that will read whats in the browsers js console
19:59  Wes: js> var a = {};  a.a = a;  a.toSource();
19:59  gbot2: Wes: "#1={a:#1#}"
19:59  inimino: v8> a=[]; a.a=a; a
19:59  v8bot: inimino: []
19:59  inimino: v8> a={}; a.a=a; a
19:59  v8bot: inimino:
19:59  Wes: Sorella: Wow, you took the words right out of my mouth!
19:59  inimino: !
19:59  inimino: v8> a=[]; a.push(a); a
19:59  v8bot: inimino:
20:00  Sorella: Wes ≣ ohoho~ <3
20:00  Wes: So why does gbot2 take so long answering my queries?
20:00  inimino: !!
20:00  inimino: Wes ⋱ hm?
20:00  Wes: js> var a = {};  a.a = a;  JSON.stringify(a);
20:00  inimino: 59:02 <Wes> js>
20:00  gbot2: Wes: Error: TypeError: cyclic object value
20:00  Sorella: inimino ≣ I guess it's how the toString works..?
20:00  inimino: 59:02 <gbot2> Wes:
20:00  Sorella: js> a = []; a.push(a); a.toString();
20:00  gbot2: Sorella: ""
20:01  Sorella: it calls Array.join(",") or something, right?
20:01  inimino: neither bot uses .toString() for output
20:01  Sorella: oh, wierd
20:01  inimino: but the v8bot seems to have a bug
20:01  Wes: inimino: gbot2 takes like a full minute to process my queries
20:02  inimino: Wes ⋱ I'm not seeing more than a second here
20:02  inimino: maybe you have some lag?
20:02  Sorella: but the representation of the object usually does use .toString(), or are you using a custom repr function with them?
20:02  mauke: CTCP PING reply from Wes: 12.647 seconds
20:02  Wes: js> new Date();  /* 14:02:20 */
20:02  gbot2: Wes: Tue Nov 23 2010 14:01:57 GMT-0500 (EST)
20:02  Sorella: {} shouldn't output an empty string at any rate
20:02  Wes: inimino: I suppose it's possible, but everybody seems to talk to me okay! :)
20:02  inimino: Sorella ⋱ It's a custom function.
20:02  inimino: 14:00:06 <Wes> js> va
20:02  inimino: 14:00:07 <gbot2> Wes:
20:03  inimino: Wes ⋱ I think you've got some lag :-)
20:03  Wes: Hm, look slike gbot's clock isn't NTP sync'd :)
20:03  inimino: hm
20:04  fintler: actually... gbot calculates the answer before you ask it
20:04  fintler: ;P
20:04  inimino: Wes ⋱ oh, indeed
20:05  Wes: Holy crap, my ping to some of you guys is over two minutes! Lemme try to bounce to a new server
20:06  qFox: can anyone confirm or squash that data:text/html as navigational url can or cannot work in IE9 (and/or lower)?
20:06  ExorcistToGo: Wes: I would expect that, I am  currently located on Mars.
20:06  mauke: CTCP PING reply from Wes: 128.870 seconds
20:07  inimino: ChatZilla 0.9.86 <snark/>
20:07 * Sorella is on a Linux so she has no access to IE9
20:08  inimino: qFox ⋱ http://en.wikipedia.org/wiki/Data_URI_scheme#Web_browser_support
20:08  Wes: Well, 0.53 seconds now
20:08  Wes: That's much better than 120+
20:08  themiddleman: Sorella: thats what vms are for
20:08  gkatsev: qFox: I can confirm or deny in about 6 hours
20:08  carlocci: testing one browser?
20:08  Sorella: themiddleman ≣ yep, but my 'puter is pretty old and has no memory to span a Ruindows VM :3
20:08  Wes: themiddleman: (s?)he'd also need a Windows Vista or Windows 7 license
20:09  qFox: inimino> does not mention ie9. i kind of gave up for ie8 :)
20:09  themiddleman: Wes: nah thats what the trial is for
20:09  qFox: i'd like to use it for the new js1k
20:09  qFox: but i dont want to rule out ie9
20:09  Wes: themiddleman: what trial? is there a version of ie9 that runs on XP?
20:09  qFox: since it supports canvas
20:09 * Wes does not want to buy another windows license
20:09  gkatsev: no, IE9 is only vista/7+
20:10  Wes: drat. Maybe I'll buy myself a new netbook then
20:10  inimino: qFox ⋱ time to do the js1k again?
20:10  Wes: since the licenses seem to cost about the same as a netbook
20:10  Sorella: I doubt MS will support XP, which is kinda lame .-.
20:10  qFox: yep. xmas edition
20:10  inimino: ah
20:10  Sorella: no eval this time though :<
20:10  qFox: but reworking to fix some of the mistakes made earlier
20:10  qFox: and would really want to make the demo page a single resource
20:10  qFox: http://qfox.nl/frameset.html would make that possible
20:11  qFox: but if it wont work on 9, i wont go for it
20:11  themiddleman: Wes: http://technet.microsoft.com/en-us/evalcenter/cc442495.aspx
20:11  qFox: gkatsev> what source do you have? :)
20:12  themiddleman: Wes: it shuts down every hour but thats plenty of time to try out a website in ie9
20:12  gkatsev: qFox: source for what? I have IE9 at home which will take around 4-6 hours to get there as I am currently at work and it is the middle of the day.
20:13  Wes: themiddleman: Looks like you already have to be a VLK, MSDN, etc, customer.  I let my MSDN subscription lapse in 1997. :)
20:13  qFox: ah, well it's tested in ie9 and doesnt work. i just want to rule out ie9 absolutely wont work with it, even if it's some kind of "hack"
20:13  gkatsev: you know, you can always install the full version and then you can re-arm it around 3 times
20:13  qFox: like maybe it's expecting a really specific syntax that's valid but whatever
20:13  gkatsev: so, 3 full months at least
20:13 --- srcerer_ is now known as srcerer
20:14  gkatsev: and of course, there are the loaders, but we don't condone that here, do we?
20:14  gkatsev: qFox: I say, just rule IE9 all together, you did say no betas and IE9 isn't officially out yet.
20:15  qFox: no no, i do, and i will
20:15  qFox: ie9 is not a required platform. i just want the demo's to be viewable in ie9.
20:15  Sorella: I don't think most people hacking things together for js1k will worry about ie9 at any rate
20:16  qFox: well, i do.
20:16  gkatsev: I could take a look at it when I get home probably
20:16  qFox: for the sake of it supporting canvas and people will be checking it out. i dont want them to have to jump through hoops if i can prevent it.
20:17  gkatsev: everyone who has IE9 at this time probably has at least one other browser installed.
20:17  qFox: but if ie8 has a strict policy on non-navigational datauris then i have a bad feeling for 9
20:18  SegFaultAX: If I have a simple 2d array of numbers, what's the simplest way to clone it?
20:18  qFox: gkatsev> no, the point is, people will check "and is it working in ie9?" or flavors thereof.
20:18  ExorcistToGo: Is IE9 equipped by the TSA to do full body scans?
20:18  Wes: qFox: chrome frame ftw? :)
20:18  qFox: hm. that's an interesting point.
20:18  gkatsev: ah
20:19  Sorella: SegFaultAX ≣ if you want a shallow clone, a simple slice will do (Array.slice(0)), otherwise you'll have to deep-clone all your objects
20:19  SegFaultAX: A
20:19  SegFaultAX: Sorella: Will that slice a 2d array?
20:19  Sorella: but of course
20:19  SegFaultAX: Sorella: Perfect.
20:19  Sorella: v8> var a = [[1,2,3], [4,5,6]]; x = a.slice(0); a.push([5,6,7]); x
20:19  v8bot: Sorella: [[1, 2, 3], [4, 5, 6]]
20:20  carlocci: js> a=[[1,2][3,4]]; b=a.slice(0); a[0][0]=9999; b
20:20  gbot2: carlocci: Error: TypeError: a[0] is undefined
20:21  carlocci: js> a=[[1,2],[3,4]]; b=a.slice(0); a[0][0]=9999; b
20:21  gbot2: carlocci: [[9999,2],[3,4]]
20:21  gkatsev: again, shallow copy.
20:22  Wes: SegFaultAX: Is your 2-D array rectangular?
20:22  chovy: is it possible to assign a string to a varaible that has more than one line?
20:22  Phrogz: With modern interpreters is it considered harmful or still a good idea to cache object dereferences, e.g.    var objs = foo.bar.jims; for (var i=objs.length-1;i>=0;--i){ var x = objs[i] }   // versus explicit foo.bar.jims
20:22  chovy: ie: var foo = "this\rbar";
20:22  inimino: `strings @ chovy
20:22  gbot2: chovy: https://developer.mozilla.org/en/JavaScript/Guide/Values%2c_Variables%2c_and_Literals#String_Literals https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String
20:23  mauke: chovy: that's only one line
20:23  Wes: Phrogz: that depends a lot on the object, but generally, yes
20:23  Sorella: Phrogz ≣ if you need the additional performance improvement (reducing lookups do improves performance), go for it. Otherwise it's just needless additional complexity
20:23  Wes: Phrogz: imagine the case where objs is a DOM element
20:23  chovy: var foo = "first line
20:23  chovy: second line";
20:23  themiddleman: no
20:23  Wes: that said, I really hate for-declared vars, because they look like the have lexical loop-scope, when in fact they are hoisted to function scope
20:23  Phrogz: Wes: This is with native JS object lookups. It used to be much faster (e.g. Jscript on IE4), but I thought perhaps modern interpreters might notice such cases and cache.
20:24  themiddleman: there is "foo\
20:24  themiddleman: bar";
20:24  themiddleman: but its not recommended
20:24  Wes: Phrogz: they do. All of them with JITs for sure.
20:24  Phrogz: Wes: OK, thanks.
20:25  Wes: Phrogz: But - if you have an object with getters they can't necessarily cache that. Luckily, setters aren't part of the language yet...
20:25  Phrogz: Wes: You pre-declare your i's at the top of the function?
20:25  Phrogz: Wes: Yeah, no getters in this particular code (hacking at flot).
20:25  Wes: Phrogz: Yeah - it's slightly ugly, but I believe it helps to reduce bug-count
20:26  Wes: at least in non-trivial functions
20:26  Sorella: Wes ≣ I don't really find it ugly. I declare all my variables at the top of the function, and I think it reduces the noise in the parts of the function that actually matters.
20:26  qFox: guess i'll go with no for now. can always change things later.
20:26  Wes: It definitely at least eliminates this bug --   for(var i=0; ....) { ...  for (var i=0; ... { .. } }
20:26  Phrogz: Yeah, that one sucks.
20:26  gkatsev: qFox: btw, if the c object just canvas element or the 2dcontext?
20:27  Wes: Sorella: I would prefer lexically-scope loop variables, but I certainly won't fake them if they hoist, so I too stick everything at the top
20:27  Sorella: let :3
20:27  emanu: I need some opinions: I have to build some charts in my web app and have been looking into the google visualization API.  It looks simple and ideal, is there any caveats I'm missing? Is there any reason for anybody to advise against it?
20:27  Wes: Sorella: Not part of the language yet, and changing from firefox-now to ES-next
20:27  qFox: gkatsev> i'm actually still pondering about that.
20:28  Wes: Sorella: There was actually a bit of traffic in that direction on es-discuss this week if you'r einterested
20:28  qFox: a bit? :p
20:28  gkatsev: qFox: can you do a c and c2? for c being th canvas el and c2 being the 2dcontext?
20:28  Wes: qFox: It was less than 20 messages!
20:29  qFox: hehe
20:29  Wes: When the CommonJS group gets busy, it spews out hundreds of messages on a topic in a week
20:29  qFox: gkatsev> i still dont know.
20:30  Sorella: that would certainly save some precious bytes. Unless you don't care about resizing the canvas.
20:30  mauke: jseval: var _ = {__noSuchMethod__: function (fn, args) { return function (obj) { return obj[fn].apply(obj, args.concat(Array.slice(arguments, 1))); }; }}; [[1,2,3],[4,5,6]].map(_.slice(0))
20:30  buubot: mauke: [[], [4]]
20:30  gkatsev: qFox: ok, just a suggestion.
20:31  mauke: jseval: var _ = {__noSuchMethod__: function (fn) { var args = Array.slice(arguments, 1); return function (obj) { return obj[fn].apply(obj, args.concat(Array.slice(arguments, 1))); }; }}; [[1,2,3],[4,5,6]].map(_.slice(0))
20:31  buubot: mauke: [[], [4]]
20:31  Phrogz:  Man, lexically-scoped variables in loops would be so nice.
20:32  ExorcistToGo: emau: Not all the APIs are written by google. I would think it depends if you want to refine them over time.
20:32  Wes: FWIW ES-Harmony is slated to have true lexical scopes
20:32  Wes: also, true lexical scope is IME a great way to catch thought errors
20:33  Wes: for example, if you have a block of code that deals with a specific context, and you can delay your variable decl and/or initialization until that block, you can get help from the compiler (in the C case) if you use your variable outside of your mental context
20:33  Wes: JS could do approximately the same thing with lexical scopes and a strict mode which does not allow the use of uninitialized variables
20:34  ExorcistToGo: emanu: jQuery and other frameworks have some good stuff in that area also.
20:34  emanu: ExorcistToGo: Yea, I've looked into a few and decided that google's is the most straightforward/simple. I'm just worried about loading everything off their domain, etc etc
20:35  ExorcistToGo: emanu: It really depends on what you need to visualize.
20:35  emanu: I was between google and protovis
20:37  pigdude: emanu: you may also look at ExtJS' ugly charts
20:37  pigdude: emanu: and the Raphael library, although I am not sure where  that project is these days
20:38  pigdude: emanu: that requiring SVG
20:38  emanu: pigdude: sounds awesome (ugly charts I mean)
20:38  pigdude: emanu: yea, I think you are well off with google's charts
20:38  emanu: pigdude: yea, I initially tried g.raphael, but it's a bit too young and badly documented for me
20:38  pigdude: emanu: you may want to see how much of this is provided by google closure
20:38  emanu: pigdude: google closure?
20:39  pigdude: emanu: http://closure-library.googlecode.com/svn/docs/index.html
20:39  Sorella: emanu ≣ what's the problem with using the scripts from a CDN? They'll be already cached for you, so it's blazing fast-desu .-.
20:39  emanu: pigdude: wow, I had no idea... this looks like it could be better than jquery-ui
20:39  pigdude: emanu: it is the best UI lib  I have used but some UI things are not well documented
20:40  emanu: Sorella: in my head, nothing. I just wanted to get a second opinion
20:40  pigdude: emanu: extjs is still best from the point of view of having some unified package
20:40  pigdude: emanu: I am not finding charts stuff however, so I imagine that what you have found is what you want
20:40  emanu: pigdude: cool. Thanks man, and here I was thinking jquery rules all and makes everything easiest
20:40  pigdude: emanu: there are a host of JS libs, all are flawed
20:41  pigdude: emanu: you should know about the major ones before you pick your favorite(s)
20:41  Sorella: the google closure lib is too much Java-like for me, so I went for Dojo instead (which is still too much Java like too, but not as much as Closure is)
20:41  emanu: pigdude: that being: google closure, extjs and jquery(-ui)?
20:41  pigdude: Sorella: it is verbose
20:41  pigdude: emanu: those are Mootools, Prototype, jQuery, Closure, Dojo, and a few others
20:41  ivan`_: the Closure tools are my god
20:42  ivan`_: I have found bugs in Python code with their JS compiler
20:42  Sorella: Not sure if Prototype has charts. You'd have to take a while to search around the web at any rate, as they're not distributed in a single and nice place.
20:42  pigdude: ivan`_: yea, I actually submitted a patch for that but nothing happened...not a bug, but an enhancement
20:42  ivan`_: pigdude: yeah, sadly they don't have people working on -library
20:42  pigdude: ivan`_: b/c the build deps script doesn't let you specify path to Java bin by default
20:42  ivan`_: did you submit the patch to their code review?
20:42  pigdude: nah, in a ticker
20:42  pigdude: *et
20:43  ivan`_: tickets are ignored, send a patch to their code review thing instead
20:43  ivan`_: make sure to have the e-signature thing done
20:45  pigdude: ivan`_: ah it was this random thing http://code.google.com/p/closure-library/issues/detail?id=147&can=1&start=100
20:45  pigdude: ivan`_: anywho pretty unrelated
20:45  ivan`_: I use plovr for building now
20:45  ivan`_: it does all the dep-finding
20:45  pigdude: I just write my build scripts by hand and pipe to jsmin
20:46  pigdude: I don't have any crazy dependency tracking
20:46  pigdude: *need
20:47  Sorella: I use GPP to tie everything together
20:47  Sorella: so I only have simple #include whatever_file on my scripts
20:48  pigdude: hm, I didn't know this was out http://www.amazon.com/gp/product/1449381871
20:48  pigdude: not sure how useful it really would be...
20:49  ivan`_: it's really useful
20:49 --- emanu_ is now known as emanu
20:49  pigdude: yea?
20:49  pigdude: just b/c I tend to learn from the API, so at this point I just read the API. I guess  it would be a good book if I were not already familiar w/ the API
20:49  pigdude: as some things are in funny places
20:49  ivan`_: there's a ton of stuff in there, 65% on Closure Library itself
20:49  ivan`_: including lots of things not apparent from the source code
20:49  pigdude: yea, I really only care about closure library
20:49  pigdude: what is one? (just curious)
20:50  ivan`_: the design ideas behind Component and Editor are covered
20:51  ivan`_: it's a good overview of everything important, I'm sure you'll find something new
20:51  ivan`_: and it will convince you to use Compiler eventually :)
20:53  ivan`_: amazon lets you sample it
20:57  pigdude: ivan`_: cool, i'll take a closer look
20:58  pigdude: ivan`_: usu. ideas like that are pretty apparent when working with the lib (like Ext.Component in Extjs)
20:58  pigdude: ivan`_: but still, very interesting
21:12  svm_invictvs: Heya
21:12  svm_invictvs: WHen iterating a dictionary of objects, how do I know if I'm on the last object?
21:13  mauke: iterating how?
21:13  svm_invictvs: I have something like for (var key in dict) {}
21:13  Sorella: svm_invictvs ≣ what's your definition of last object? Objects are sets, there's no guaranted order of the properties.
21:13  svm_invictvs: Sorella: The last iteration of the loop
21:13  svm_invictvs: I don't care about the order.
21:14  Sorella: just move it to after the loop.
21:14  Sorella: I don't know of any way you'd get the last object in the iteration otherwise
21:14  svm_invictvs: Sorella: uh?
21:14  Sorella: for (var key in obj) { } /* do whatever you want after the loop here */
21:15  Sorella: if you need a reference to the last object, save it each loop iteration
21:15  svm_invictvs: Sorella: It's for making a comma separated list...
21:15  Sorella: svm_invictvs ≣ put a comma after everything and remove the trailing comma after the loop
21:15  NoiseEee: svm_invictvs: just build the list and when you're done, remove the trailing comma?
21:16  svm_invictvs: var out; for (var obj in dict) { out = out + obj + ","; }
21:16  qFox: re: datauris for src. got an alternative workaround :D
21:16  mauke: put a comma before every item except the first
21:16  Sorella: yeah, that works too
21:16  svm_invictvs: Is there an iterator object in Javascript?
21:16  qFox: if you do <frame src="javascript:'htmlhere'"> the html will be ... well, html :D
21:16  Sorella: check if the out string is empty
21:16  qFox: in IE8 as well as the others
21:16 * qFox happy with that.
21:16  Sorella: :D
21:16  qFox: normally i'd probably bitch about it needing javascript, but i guess that point is pretty moot in this case :p
21:16  svm_invictvs: if (out.length) { out = out.substring(0, out.length - 1); } ?
21:17  Sorella: svm_invictvs ≣ for .. in is an iterator. Anything else (that was included in the new furryfoxes) is not implemented in most browsers yet
21:17  svm_invictvs: Sorella: I just need it in firefox.
21:17  NoiseEee: svm_invictvs: the deal is, you don't get a length property from an object
21:17  Sorella: svm_invictvs ≣ you're overengineering things. You don't need to know the length of the object. Just do what mauke said
21:18  svm_invictvs: Trim the last trailing comma?
21:18  mauke: svm_invictvs: that works
21:18  mauke: out = out.replace(/,$/, '')
21:18  Sorella: for (key in obj){ if (out) out += ","; out += obj[key] }
21:18  svm_invictvs: I didn't know += worked, d'oh
21:19  Sorella: remember to initialize your string before though
21:20  Sorella: v8> var out; for (key in [1,2,3,4]){ out && out += ","; out += key }; out; //bad thingies
21:20  v8bot: Sorella: ReferenceError: Invalid left-hand side in assignment
21:20  Sorella: buu, forgot to wrap the expression
21:20  Sorella: v8> var out; for (key in [1,2,3,4]){ out && (out += ","); out += key }; out; //bad thingies
21:20  v8bot: Sorella: "undefined0,1,2,3"
21:27  Raphomet: is there a way to get the calculated, natural height (what it would be if you set height: auto) of an element, even if its height is explicitly set to something else in CSS?
21:29  ProLoser|Work: 	i'm getting a js error on line 1 char 1 http://isvtest.com/ and i have no idea why in ie
21:30 --- Prot_ is now known as Prot
21:31  Sorella: Raphomet ≣ is height:auto → min( element.realHeight, parent.renderedHeight) ?
21:31  Wes: ProLoser|Work: there is a syntax error somewhere in your code on IE but not firefox
21:31  Wes: ProLoser|Work: start by examine calls to eval
21:31  nufan: hi everybody
21:31  Wes: ProLoser|Work: then any event handlers, exspecially ones that don't fire except for ie
21:32  Sorella: nufan ≣ y haro thar sweetie~ :3
21:32  nufan: could somebody help me with a small problem with onmouseover events ?
21:32  Sorella: `help @ nufan
21:32  jsBot: nufan: help: Paste the Javascript (only the portions relevant to your problem) in a pastebin (see `paste), and tell us what you expected, what else you tried and what actually happened. You might also consider reading: http://diveintomark.org/archives/2003/05/05/why_we_wont_help_you/
21:33  Wes: svm_invictvs: function(o) { var c=0,i; for (i in o); c++; return c);
21:33  Sorella: nufan ≣ don't ask to ask. Just ask straight away. If someone can help you, they will help you.
21:33  Wes: svm_invictvs: returns o ~ o.length, in a most pointless example of "how to write non-JS in JS"
21:33  nufan: cool, thx i a newbie here so..
21:34  Wes:  /whois sorella
21:34  Wes: Still have reasonable ping time. Wierd that it sucked so hard earlier.
21:35  TheEternalAbyss: hey Sorella
21:35  nufan: `paste
21:35  jsBot: paste: Paste links, not code: http://erxz.com/pb/   http://pastebin.parentnode.org/   http://www.webdevout.net/test
21:35  TheEternalAbyss: sorry to bring this up again, i got totally sidetrackied for most of the day
21:36  malev: hi there. is there any way to get te total height of a page?
21:36  TheEternalAbyss: but i'm looking at the javascript again and was wondering if you (or anyone) has suggestions about those lolcat libraries
21:36  TheEternalAbyss: i still get get.this not a function error and I reordered the includes
21:36  TheEternalAbyss: so i'm a bit confused
--- Log closed Tue Nov 23 21:44:41 2010
--- Log opened Tue Nov 23 21:45:02 2010
21:45 --- Users 486 nicks [0 ops, 0 halfops, 0 voices, 486 normal]
21:45  Pilate: carlocci: apparently its not enough to quell their narcissism
21:46  Sorella: TheEternalAbyss ≣ hm, you also have to include NWMatcher, which is the selector engine I'm using. It's included in the lib dir.
21:46  Wes: Nice work on Jello. I like the simple, but effective depedency resolution alogirthm
21:46 --- Channel ##javascript was synced in 106 seconds
21:46  Sorella: TheEternalAbyss ≣ Also, it's can_has :3
21:46  Wes: I haven't bothered with parallel module loading ATM, but that's a key feature if I ever decide I care about perf
21:46  Sorella: Wes ≣ ty :3
21:47  TheEternalAbyss: ohh
21:47  Sorella: gregglind ≣ Well, for loops are the easiest way of doing it. You could also write a range function of your own, it's like 4 lines of code (even less, I guess?)
21:48  Wes: Sorella: let me know if you ever have the urge to dig in to CommonJS modules
21:48  TheEternalAbyss: lol kk ty Sorella :>
21:49  gkatsev: qFox: can I submit this for js1k? javascript:a=0;void(setInterval(function(){document.body.innerHTML=(a=!a)?'/0//0//0/':'\\0\\\\0\\\\0\\'},250)) :P
21:49  gkatsev: of course it will be colored red and green. :D
21:50  TheEternalAbyss: Sorella: should I include that first?
21:50  TheEternalAbyss: before the others?
21:50  Sorella: TheEternalAbyss ≣ yes :3
21:50  TheEternalAbyss: k... hmm still getting the error :(
21:51  gregglind: Sorella, fair enough :)  Mostly checking that MDC isn't letting me down.
21:51  TheEternalAbyss: http://jsfiddle.net/TheEternalAbyss/KHAkW/3
21:51  Sorella: gregglind ≣ there's array comprehensions now, but they're only implemented in Firefox
21:51  TheEternalAbyss: :\
21:52  malev: thanks Sorella!!
21:52  Wes: They may also have negative performance impacts; measure if speed matters to you
21:53  Wes: This is because at least the tracing JIT does not (did not?) trace through generators/iterators
21:53  Wes: Not sure if the method JIT falls back to interpreter for these or not
21:54  TheEternalAbyss: brb
21:58  TheEternalAbyss: ok back
21:59  Wes: phew
22:02  Sorella: hm, weird, the prototype is not getting extended.
22:02 --- NathanWC_ is now known as NathanWC
22:02  Wes: function blah() { var a = calculation();  var b = function() { use(a); return b};  c=blah();  c();
22:02 --- friskd_ is now known as friskd
22:03  Wes: The invocation of c gets the calculation that was calculated when c was instanciated, correct?
22:03  Wes: Not the most recent calculation?
22:04  gkatsev: js> /!(\d*)/.test('foo');
22:04  gbot2: gkatsev: false
22:04  mauke: unmatched '{'
22:04  Sorella: b is just use(a); or use(a); return b;?
22:04  gkatsev: js> /!(\d*)/.test('5');
22:04  gbot2: gkatsev: false
22:05  Wes: argh, good catch, bad example
22:05  Wes: function blah() { var a = calculation();  var b = function() { use(a); } return b};  c=blah();  c();
22:05  mauke: a is never overwritten
22:05  Wes: Good, that's what I was hoping
22:05  Wes: closures still hurt my c-hacker brain
22:06  Wes: we're used to function pointers :)
22:06  mauke: wut?
22:06  mauke: this isn't about closures
22:06  mauke: your code only contains one instance of 'a = ...'
22:06  gkatsev: anyone know what this is talking about the !(pattern) thing? file:///H:/DATA/Downloads/javascript-cheat-sheet-v1.png
22:07  Wes: mauke: blah() can be invoked many times; I want each invocation to use the calculation that was performed when the lambda function was instanciated
22:07 --- friskd_ is now known as friskd
22:07  mauke: Wes: every invocation of blah() creates a new 'a'
22:07  themiddleman: gkatsev: let me just download that...
22:07  mauke: (just like C)
22:08  gkatsev: themiddleman: it says it is a NOT prefix, but it does not seem to work. Just want a sanity check.
22:08  Wes: mauke: Sort of - in C we could never write a function pointer that uses currently-on-the-stack values, so "var a" would either be memoized heap or static. But that's another story for another day. :)
22:08  mauke: "memoized heap"?
22:08  themiddleman: gkatsev: I was sayn you gave a link to your local computer
22:08  mauke: it would be automatic
22:08  gkatsev: oh, lol, hm...
22:08  Wes: mauke: No, you have to write your pointers down somewhere you so can reference 'em later and free 'em some day
22:09  mauke: Wes: no
22:09 * gkatsev usually notices those things, long day
22:09  gkatsev: this thing: http://www.addedbytes.com/cheat-sheets/javascript-cheat-sheet/
22:09  Wes: mauke:  void a() { char * a = malloc(123); }
22:09  mauke: Wes: local variables in C have storage class = automatic
22:09  Wes: mauke: how do you free a?
22:09  gkatsev: themiddleman: ^
22:09  mauke: you don't, since it's automatic
22:09  Wes: mauke: No, you have to free it, otherwise you leak 123 bytes of heap
22:10  mauke: there is no heap
22:10  mauke: also, why are we suddenly talking about malloc?
22:10  mauke: I thought this was about a
22:10  themiddleman: gkatsev: where is that, I cant find it
22:11  Wes: mauke: I was making the point that there is no direct way of making the analogy to C that you suggested
22:11  mauke: yes, there is
22:11  gkatsev: themiddleman: http://www.addedbytes.com/download/javascript-cheat-sheet-v1/png/
22:11  themiddleman: also this cheat sheet tells you to put html comments around your javascript
22:11  Wes: mauke: This is because invoking a function with defunct stack memory makes no sense
22:11  mauke: void blah(void) { int a = calculation(); printf("%d\n", a); }
22:11  themiddleman: gkatsev: where is the !() on the sheet
22:11  Wes: mauke: Now imagine the case where we're deailng with char pointers instead of ints
22:12  mauke: every time you invoke blah(), it creates a new local variable called 'a'
22:12  Sorella: TheEternalAbyss ≣ hm, it's probably because of the frame-y structure of JSFiddle, since the functions defined on dom.js and lulz.js won't be in the hai.js closure if you include them separately.
22:12  gkatsev: themiddleman: under regex
22:12  Wes: mauke: and the function is getting invoked *after* the outside function returns the funciton pointer
22:12  mauke: Wes: well, yes
22:12  gkatsev: themiddleman: last item under regex patterns
22:12  themiddleman: oh
22:12  Wes: mauke: here, lemme write a longer version of this
22:12  mauke: Wes: basically, call frames in javascript are stored in the heap and garbage collected
22:13  mauke: you still get a new frame per invocation, though
22:14  mauke: gkatsev: it's wrong
22:14  Wes: mauke: http://pastebin.mozilla.org/863338
22:14  gkatsev: mauke: it is? ok, good.
22:14  Wes: mauke: That's what I meant as being senseless in C - it is semantically different from a language with closures
22:14  mauke: gkatsev: there are more errors in that png
22:15  gkatsev: are there?
22:15  mauke: (a|b) should be a|b
22:15  mauke: "/s - single line mode" and "/m - multi line mode" are completely unhelpful
22:15  gkatsev: well, that isn't really wrong
22:16  mauke: so is "(...) - group section"
22:16  mauke: grouping is done with (?: ... )
22:16  mauke: the capitalization of the event handlers is wrong
22:16  gkatsev: no, grouping is done with (...) (?:...) is a non-caputring group
22:16  mauke: no, ( ... ) is capturing (and as a side-effect, grouping)
22:17  Wes: ...although, if I were writing a codegen like that in C, I would tweak the API to allow emitCodeFragment to duplicate the memory and preserve it for as long as the emitted code fragment was around
22:17  mauke: (I'm pretty sure it's foo.onclick, not foo.onClick)
22:17  Wes: so I guess there really IS a parallel, it's just not obvious to me without writing it out
22:17  themiddleman: mauke: be more sure
22:18  mauke: Wes: a closure is really just a pair of code + data
22:18  mauke: in C speak it would be a function pointer and a struct pointer or something
22:19  Wes: mauke: Yeah - I just wasn't sure before I worked the example out if the closure would cover 'var a' like it does -- You don't get magical upvar preservation in C when you emit new functions (or otherwise deduce function pointers)
22:20  gkatsev: a closure is really just scope
22:20  gkatsev: mauke: hm, ok, I guess that is valid. though, i've always known them as (...) caputring group and (?: ...) non capturing group.
22:21  mauke: gkatsev: 2 * (3 + 4)  // look, a non-function-calling group!
22:21  mauke: 2 * f(3 + 4)  // and now a function calling group
22:21  mauke: I mean, you can call them that, but I think it's a bit silly to think that way ...
22:22  coder7of9: hello
22:22  coder7of9: can func.apply return true or false
22:22  coder7of9: is there an alternative
22:22  coder7of9: if not
22:23  coder7of9: !answerbot
22:23  mauke: what
22:23  coder7of9: can function.apply return true or false ?
22:23  mauke: what kind of question is that?
22:24  mauke: coder7of9: can asdf() return 'pk'?
22:24  coder7of9: function.apply is a syntax  which allows a call to a function with arguments
22:24  themiddleman: coder7of9: what are you trying to get back?
22:25  coder7of9: true or false
22:25  themiddleman: of what?
22:25  coder7of9: from teh function
22:25  themiddleman: random true or false?
22:25  Wes: Your nick suits your outlook
22:25  coder7of9: myFunc.apply
22:25  coder7of9: myFunc returns true or false
22:25  themiddleman: then yes
22:25  coder7of9: but it appears not
22:26  Wes: not counts as false
22:26  Wes: so, your query is still true
22:26  Sorella: TheEternalAbyss ≣ http://jsbin.com/uguqa3/edit
22:26  coder7of9: func.apply(object, args);
22:26  coder7of9: for example
22:26  mauke: js> (function () { return true; }).apply(this, [])
22:26  gbot2: mauke: true
22:26  mauke: js> (function () { return 'am I kawaii uguu~'; }).apply(this, [])
22:26  gbot2: mauke: "am I kawaii uguu~"
22:27  coder7of9: this.f = function(object, func){func.apply(object, args);}
22:27  Sorella: ohmaigah-- kanon D:
22:27  coder7of9: ok i will try again
22:28  ProLoser|Work: For some reason I get a strange js error in IE: http://isvtest.com/catalog/destinations/Australia I tried disabling all the javascript on the entire page and STILL get the error, so i'm not sure what the cause is
22:29  Wes: ProLoser|Work: your attempt to disable all JS on the page failed
22:30  coder7of9: oh yes it does return a value. perfect. thanks!
22:32  ProLoser|Work: probably
22:33  gregglind: object literal methods calling each other... Suppose P = {a:function(){return b()+1}, b:function(){return 3}};   How do I get the first b() call right?  this.b isn't quite right?
22:33  mauke: uh, that depends on how you call a
22:35  pharkmillups: anyone have opinions on the best js documentation generator out there?
22:35  Sorella: gregglind ≣ the context of the function (value of `this`) depends on how you call it. If you call it as P.a(), the context in a will be P. If you call it as a() the context will be the global object. If you assign a to another object and call a from this object, the context will be that object.
22:35  Sorella: gregglind ≣ Function#bind and closures are your best friends here.
22:36  Sorella: pharkmillups ≣ I don't think you can label any of them as `best`. All of them have their advantages and disavantages, and you'll have to see which one sits better with you.
22:37  gregglind: Sorella, so do the self-calling function thing with a delegation table to get the closure?
22:37  pharkmillups: Sorella:  I was asking for that :) How about your favorite three?
22:37  Sorella: pharkmillups ≣ that said, YUIDoc and JSDoc seems pretty well developed. PDoc is pretty neat too, as in it doesn't have the Java-ish syntax
22:37  pharkmillups: Sorella:  perfect. thanks!
22:38  inimino: gregglind ⋱ Why not just "P={a:a,b:b}; function a(){...} function b(){...}
22:38  inimino: "
22:38  Sorella: (function(){ function a(){}; function b(){}; P = {a:a, b:b} })() is what I use. So you never have to worry about context
22:38  inimino: gregglind ⋱ presumably in the scope of some existing function
22:39  Sorella: well, unless you're writing instanceable objects, which in this case are a bit more complex to get right.
22:41  gregglind: inimino, trying to practice/explore different patterns for encapsulation in js.
22:41  gregglind: I want a namespace/closure for all of this stuff.
22:42  gregglind: Sorella, in yours, you have to return P right?
22:43  Sorella: gregglind ≣ if you want it to be accessible outside of the closure, yes. You can either return it or assign to a external variable (like the global object).
22:43  gregglind: In that one, the only icky bit is having to repeat all the function names again in the 'delegation' table.
22:43  inimino: gregglind ⋱ I'm assuming an enclosing function, and that you return (or do something with) P.
22:44  gregglind: I think we are all on the same page here.  'this' is somewhat confusing to me, and still learning it :)
22:44  gregglind: thanks inimino, Sorella
22:45  dario: guys
22:45  Sorella: gurls
22:45  mauke: 'this' is just another function parameter
22:45  dario: dance everybody!
22:45  dario: :p
22:46  mauke: every function call sets two variables, 'this' and 'arguments'
22:46  dario: question... jspix(i) = "lolcats"; that's how i would tell a variable what its content is, correct?
22:46  mauke: no
22:47  jgeerdes: 867
22:47  jgeerdes: r
22:47  jgeerdes: r
22:47  jgeerdes: rr
22:47  jgeerdes: t
22:47  dario: doh
22:47  todd: indeed
22:47  Sorella: dario ≣ javascript:a=0;void(setInterval(function(){document.body.innerHTML=(a=!a)?'/0//0//0/':'\\0\\\\0\\\\0\\'},250)) :3 ///stealing gkatsev's thingie
22:48  Fratyr: Help :-) On index page I'm declaring an object like var object = function() { this.somefunc.... }. then initializing object by var obj = new object(); then using obj.somefunc < - this function does ajax call, retrieves navigation from database and puts in into the page. the navigation elemens has onclick="obj.somefunc2();" event, but when I click on navigation It says "obj is undefined". Something is wrong with encapsulation or s
22:48  Fratyr: cope?
22:48  dario: mmmmm
22:48  Sorella: dario ≣ that's a function call. You can't assign any value to the returning value of a function call directly like that.
22:48  dario: sorella, HUH! :p
22:48  Wes: function rf() { var deps; for (label in blah) { (function (id) { deps[label] = function bld() { return someFunc(id) })(blah[label]) }; /* generate another closure using deps here */ }
22:48  inimino: jgeerdes ⋱ you're not in ed anymore ;)
22:49  Wes: Is there a better way to write this loop without pushing the extra closure, bld?
22:49  djmccormick: for development i'm needing to interact with a remote server with javascript, GETing and PUTing json. obviously firefox won't allow that -- anyone have a link to a good development solution?
22:49  Xenc: why wont it allow that
22:49  Wes: Omitting it doesn't work, as the wrong "blah" gets used
22:49  dario: Sorella: oh.. ok wait.. in the example says, mycars[0] = "Saab";
22:49  Wes: (I guess I should have showed that - blah is the result of another iteration)
22:50  dario: jspix[i] = "lolcats" works, right? given that there's a loop that increments i
22:50  Fratyr: http://paste.pocoo.org/show/295218/
22:50  djmccormick: remote XHR isn't allowed, no?
22:51  inimino: Wes ⋱ no, but I'd probably put the function outside so it reads better
22:51  powrsurg: has anyone here ever seen google analytics dramatically bump up load time?
22:51  inimino: powrsurg ⋱ it's extremely common (but not exactly a JavaScript question)
22:52  Sorella: dario ≣ yes, in this case you're setting a property in the object jspix, named with the value of `i`, to "lolcats"
22:52  Wes: inimino: *nod* - http://www.page.ca/~wes/BravoJS/bravo.js line 343 is the "full" version   (note - that's my active editor file, may change without warning! :) )
22:52  inimino: `g cross origin resource sharing whatwg @ djmccormick
22:52  gbot2: djmccormick: [whatwg] Canvas 2D Context Proposal: resetOriginClean - http://lists.whatwg.org/htdig.cgi/whatwg-whatwg.org/2010-July/027434.html
22:52  inimino: hm...
22:52  Sorella: lolwhat
22:52  inimino: `g cross origin resource sharing w3c @ djmccormick
22:52  gbot2: djmccormick: Cross-Origin Resource Sharing - http://www.w3.org/TR/cors/
22:52  inimino: `g cors w3c
22:52  gbot2: Cross-Origin Resource Sharing - http://www.w3.org/TR/cors/
22:52  gkatsev: mauke: yes, but referring specifically to regex. As that box is.
22:52  gkatsev: Sorella: how dare you steal my thingy?
22:52  Sorella: :<
22:53  Sorella: I-It was soooo tempting, I just couldn't help it
22:53  Wes: gkatsev ≣ What thingy?
22:53  dario: sorella, right... hmm.. i can't figure this out. Man, i'm a photographer at a newspaper.. not a programming wizard! lol
22:53  inimino: Wes ⋱ are you editing code directly online?
22:53  powrsurg: inim: well, I'm noticing my onload time going from < 2-3 seconds to go to 15-20 seconds and google analytics is the last thing to run
22:53  djmccormick: if i have no control over the headers being returned by the server, and this is a temporary situation for development, that's the only real option?
22:53  Wes: inimino: Yes, I'm a crazy man! LOL
22:54  inimino: Wes ⋱ You and me both :-)
22:54  Sorella: `eloquent @ dario
22:54  jsBot: dario: eloquent: Eloquent JavaScript is a comprehensive introductory Web-based book with examples and a built-in interpreter.  http://eloquentjavascript.net/index.html
22:54  gkatsev: Wes: this thingy: javascript:a=0;void(setInterval(function(){document.body.innerHTML=(a=!a)?'/0//0//0/':'\\0\\\\0\\\\0\\'},250))
22:54 * powrsurg wonders why his nick completion shopped working
22:54  Wes: inimino: keeps the "agile" dev cycle nice'n'tight
22:54  Sorella: hm, shopping...
22:54  inimino: Wes ⋱ vim and SSH?
22:54  mauke: djmccormick: netscape.security.PrivilegeManager.enablePrivilete('UniversalBrowserRead');
22:54  svm_invictvs: WHy the fuck doesn't setInterval take a function object?
22:54  mauke: er, enablePrivilege
22:54  Wes: inimino: xemacs and X11
22:55  inimino: oh, I see, Mr. Fancy Pants.
22:55  Wes: inimino: Not so fancy, this version of xemacs was compiled in 1998.    Funny how it still works, though, eh? :)
22:55  inimino: svm_invictvs ⋱ Um, 1) tone down the language please, and 2) why do you think it doesn't?
22:55  inimino: Wes ⋱ heh, yeah
22:56  Wes: I keep meaning to upgrade to something modern, thouhg, I would mind a javascript mode
22:56  Wes: er, *wouldn't* mind
22:56  powrsurg: or is there any other reason why my page would be completely done rendering and the onload event taking an extra 12 seconds to run?
22:56  svm_invictvs: inimino: I dunno.
22:56  Wes: powrsurg: ads?
22:56  Sorella: Wes ≣ js2-mode is pretty decent as a javascript mode. Indentation aside.
22:57  inimino: svm_invictvs ⋱ Maybe next time you could check out the docs first instead of swearing on IRC.
22:57  inimino: `ref mdc setInterval @ svm_invictvs
22:57  v8bot: svm_invictvs: window.setInterval - MDC Doc Center - https://developer.mozilla.org/en/window.setInterval
22:57  Wes: powrsurg: what happens if you eschew body/window .onload and kick off JS from script in </body><script>HERE</script></html>
22:57  Wes: Sorella: any idea if it inherits from the current c style? That would be oh-so-convenient
22:57  powrsurg: Wes: it's the Google Analytics and ShareThis scripts taht run onload
22:58  inimino: Wes ⋱ I'm pretty sure I've written something that was 90% that same function modulo variable names.
22:58  Sorella: Wes ≣ I guess so, but not sure.
22:58  Wes: inimino: This is an experiment to provide labeled dependencies as module-local require labels
22:59  inimino: Wes ⋱ Nowadays I'd suggest never nesting anything more than three deep, which means making some helper functions and moving most of that inner indented mess out.
22:59  dario: Sorella: right... the thing is that i'm mixing PHP with JS; i want to transfer a php array into js array. the array contains a list of filenames from a directory read by php. so, inside the <?php     ?> i'm putting in the script.. which means i have to go in and out of the ECHO that contains the JS script... but for some reason something doesn't work when i try to assign the JS variable jspix[] = "' . $phpvariable . '";
22:59  dario: which is why it looks like i'm asking the noobest question in the world.. how to print "hello world"
23:00  dario: :p
23:00  NoiseEee: dario: use php's json_encode($yourArray) to turn it into JSON that javascript can use
23:00  Wes: inimino: You're right that that's pretty messy, It's frustrating that I can't use moz extensions here which would clean some of that stuff up (the hasOwnProperty block, could use for-each, could use let to fix the loop closure problem)
23:00  inimino: Wes ⋱ true
23:00  dario: ok, let me see how json works. never heard of it until a lil while ago.
23:00  dario: thanks NoiseEee
23:00  NoiseEee: dario: np good luck
23:01  powrsurg: do data-URI's affect onload negatively?
23:01  inimino: Wes ⋱ But with some nice function that takes a modId and gives a function that loads it, you could probably clean it up just as nicely.
23:01  Wes: dario: Do you have a PHP module which can serialize arrays to JSON?
23:01  NoiseEee: powrsurg: the actual event, not sure.  seen it reported here before, but don't know if that was user error
23:01  NoiseEee: powrsurg: can certainly slow page-rendering time though
23:02  dario: Wes: hmm... dunno. lol
23:02  dario: honestly, i don't even know what json is so i have to look at that first.
23:02  inimino: Wes ⋱ In other words, move 360-363 out of requireFactory altogether and see if the other scoping issues don't just go away.
23:02  powrsurg: NoiseEee: I can already see the images rendered ...
23:02  inimino: `json
23:02  jsBot: json: JavaScript Object Notation, see http://www.json.org/
23:02  inimino: `json @ dario
23:02  jsBot: dario: json: JavaScript Object Notation, see http://www.json.org/
23:02  Wes: inimino: Good point, that would fix it
23:03  cheney: dario: http://www.ietf.org/rfc/rfc4627.txt
23:04  inimino: cheney ⋱ the RFC is actually somewhat obsolete now
23:04  NoiseEee: yeah, an RFC will help a newbie understand  :\
23:04  cheney: inimino: how?  ecmascript5 did not change JSON
23:04  inimino: cheney ⋱ Actually the standardization process did change JSON.
23:05  inimino: `"abc"` is valid JSON, but not according to the RFC.
23:05  cheney: NoiseEee: reading rfcs is how I learned about most web technologies
23:05  inimino: js> JSON.parse("\"abc\"")
23:05  gbot2: inimino: "abc"
23:05  cheney: NoiseEee: its not like there are a lot of good books explaining how http works
23:06  inimino: `es5
23:06  inimino: `ES5
23:06  gbot2: ES5 is edition 5 of ECMA-262, the ECMAScript (aka JavaScript) specification: http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf
23:06  inimino: gbot2: forget ES5
23:06  gbot2: inimino: forgot ES5
23:06  flashingpumpkin: hey. i'm wondering, is there anyone using node-amqp ?
23:07  inimino: flashingpumpkin ⋱ yes, but ask in #node.js
23:07  flashingpumpkin: on it :)
23:08  emanu: anybody ever made an annotated graph in js?
23:09  inimino: gbot2: learn ES5 = ES5 is edition 5 of ECMA-262, the ECMAScript specification: http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf http://sideshowbarker.github.com/es5-spec/
23:09  gbot2: inimino: added ES5
23:09  inimino: `ES5
23:09  gbot2: ES5 is edition 5 of ECMA-262, the ECMAScript specification: http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf http://sideshowbarker.github.com/es5-spec/
23:09  inimino: cheney ⋱ That's the most current specification of JSON.
23:10  inimino: emanu ⋱ what do you mean by an annotated graph?
23:10  emanu: inimino: basically I have a bunch of samples of varying value, and I want to point out a handful of them to the user.
23:11  inimino: `g javascript infovis toolkit
23:11  gbot2: JavaScript InfoVis Toolkit - http://thejit.org/
23:11  inimino: try that
23:11  emanu: inimino: http://code.google.com/apis/visualization/documentation/gallery/annotatedtimeline.html
23:12  inimino: hm, Flash, doesn't load here
23:12  inimino: now it loaded
23:12  emanu: inimino: already looked into it. I can't seem to find any that allows the user to click on a note and get info. (it's a js site, not flash)
23:12  inimino: anyway, try JIT or RaphaelJS
23:12  dario: i don't think json is what i want to do
23:12  dario: to use, i mean
23:13  inimino: It came up as Flash at first (which didn't work), then it seemed to replace it.
23:13  inimino: (after a long delay)
23:13  emanu: inimino: interesting. Well I've tried both to no avail... I think maybe I'll just find another way to show this data to the user.
23:14  inimino: emanu ⋱ Either way you'd need to implement the click-for-info functionality yourself...
23:15  emanu: inimino: that's the way it's looking, yea
23:15  inimino: those are just tools to save you some time building the visualization from scratch
23:17  dario: ok, how about this question... in variable[i], can i be a string?
23:18  dario: and if not... how can i see if i is a string or not?
23:18  inimino: `====
23:18  jsBot: ====: yourObject.foobar is just another way of saying yourObject['foobar']. So of course if varName = 'foobar', then it's also the same as yourObject[varName]
23:18  inimino: `objects
23:18  jsBot: objects: https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Working_with_Objects
23:22 --- Twyndyllyngs is now known as Hello71
23:22  cheney: dario: use typeof to see the type of a variable
23:23  cheney: dario: if (typeof(a) === "string") {return b;}
23:23  dario: cheney, this is weird. i was following examples and it didn't work. It finally worked by doing:       jspix[i] = ("' . $phpvariable  . '");
23:23  dario: which seems to me is the same as saying jspix[i] = ("foobar");
23:23  inimino: dario ⋱ You need to split the problem into two parts.
23:24  dario: but that's now how the example showed it
23:24  cheney: dario: that does not tell you if something is a string
23:24  inimino: dario ⋱ One part is figuring out what your JavaScript should look like, which we can gladly help you with.
23:24  powrsurg: so yeah ... I stopped using data-URIs in my pages and that resulted in a 12 second decrese in load time ...WTF
23:25  inimino: dario ⋱ The other part is figuring out how to get PHP to produce that, which would be better in #php.
23:25  NoiseEee: powrsurg: i have no idea, but I have heard it before.  ideally you're using data-URI's for tiny images, yes?
23:26  cheney: generally speaking data uris should not be used
23:26  cheney: data URIs are excellent when delivery is constricted
23:26  powrsurg: yes
23:26  powrsurg: images that are < 2 kb
23:26  cheney: otherwise there is no benefit to using data URIs
23:27  powrsurg: yeah, tiny little images like buttons for things like facebook, etc
23:27  dario: right...
23:27  powrsurg: that seems crazy to me that data URIs would *dramatically* increase load time ... especially since they had already rendered long before the page onload called
23:27  powrsurg: and it wasn't specific to one browser
23:28  dario: inimino: which is why i'm confused. I'm not very good at either, but i'm trying to mix them to build a nicer/better program
23:28  cheney: powrsurg: it makes perfect sense
23:28  cheney: the images are not being cached
23:28  dario: but just chatting and you guys suggesting this and that really helps
23:28  cheney: and you are dramatically increasing source code size
23:28  inimino: dario ⋱ So split the problem up and don't mix them.
23:28  powrsurg: chen: but the page was completely delivered and all images were rendered
23:29  inimino: dario ⋱ Once you know what your JavaScript needs to look like, it's just a problem of producing a string in PHP.
23:29  cheney: powrsurg: so?
23:29  cheney: that does not cache the images
23:29  powrsurg: so why would that affect load time if it had already downloaded the content and rendered all of the elements
23:30  cheney: powrsurg: because its going to download the images each and ever time regardless of how they are rendered
23:30  cheney: and rendering time is increased because the data is not supplied as binary
23:30  powrsurg: download what? it already downloaded the page
23:30  NoiseEee: cheney: still though... the DOM has been loaded by that point
23:30  cheney: NoiseEee: so?
23:31  NoiseEee: so the dom:loaded event (or similar) should fire
23:31  NoiseEee: before the images render.
23:31  cheney: loading time is a combination of downloading data, header data, rendering, and so forth
23:31  powrsurg: I look at the Net tab in Firebug and everything just sits there for like 12 seconds and then the onload event fires
23:32  cheney: NoiseEee: not in that case, because the images are supplied as a component of the document even if they are not part of the data structure
23:33  cheney: powrsurg: the only second benefit I could possibly imagine with data URIs is that you don't have to worry about the possibility of a page hang in IE
23:34  cheney: in IE the onload event only fires when the page has completely loading, but IE does not time out assets in the case of no HTTP response
23:36  cheney: unless you are providing a document for delivery with AND without HTTP don't use data URIs
23:36  cariaso_: http://snpedia.com/files/promethease/outputs/2010-js1/genome_dummy_ui2.html works great on firefox and even firebug shows no issues, but on chrome it fails to work. Can anyone tell me why or where else to look/check?
23:36  cheney: in the contrary, and only in the contrary, it would probably be better to use dataURIs, but even this is not absolute
23:37  cheney: cariaso_: I am not looking at that
23:37  cheney: paste your JS code to somewhere
23:37  inimino: cariaso_ ⋱ The Chrome error console?
23:37  cheney: you can even use http://prettydiff/?pastebin if that would help
23:38  powrsurg: cheney: I've got a script that uses data uris to resize images and puts them into a canva and then manipulates everything so that the resized images are uploaded to the server instead of the original huge image ... but that is for a different application, but it is a good use of data uris
23:39  inimino: `console
23:39  jsBot: console: http://developer.mozilla.org/en/docs/DOM:window.dump
23:39  gbot2: ##javascript is not your debugging console. For Firefox: Use Firebug <http://www.getfirebug.com/> and the error console; For Chrome: Use the built-in Chrome Developer Tools; For IE: Use Debug Bar <http://www.debugbar.com/>; For Safari: Use the Safari Dev Tools <http://developer.apple.com/technologies/safari/developer-tools.html>; Opera: Use DragonFly <http://www.opera.com/dragonfly/>
23:39  inimino: cariaso_ ⋱ Read that.
23:39  cheney: powrsurg: that does not sound like a good use
23:39  cheney: it sounds like a one-off work around
23:40  cariaso_: inimino suggestion of the chrome console is obvious in hindsight, but got me unstuck. thanks, much appreciated
23:40  inimino: no problem :-)
23:41  qFox: gkatsev> why would you waste 11 bytes on an unused label? ;)
23:41  inimino: hoho
23:41  qFox: almost finished on the js1k setup. just need to attach stats and reroute traffic to new url
23:42  qFox: *new urls structure, that is.
23:42  inimino: ah
23:42  Fratyr: Help :-) On index page I'm declaring an object like var object = function() { this.somefunc.... }. then initializing object by var obj = new object(); then using obj.somefunc < - this function does ajax call, retrieves navigation from database and puts in into the page. the navigation elemens has onclick="obj.somefunc2();" event, but when I click on navigation It says "obj is undefined". Something is wrong with encapsulation or s
23:42  Fratyr: cope?
23:42  Fratyr: http://paste.pocoo.org/show/295218/
23:42  qFox: since tehre are more compo's, i need to be able to host them. so new structure was required. so old links should not just break. so care is taken to prevent that :)
23:43  inimino: Fratyr ⋱ Don't use inline event handlers.
23:43  qFox: ahwell. will fix that tomorrow. i hope. sleep now.
23:43  inimino: later qFox
23:44  gkatsev: qFox: javascript:? oh, that's cuz it was written for use in the url bar of browsers.
23:50 --- Putr is now known as Putr|Away
23:55  dario: I just wanna say... i'm getting closer.
23:55  dario: :p
23:56  dario: now i have the pics (files) loaded into the js variable and can go through them by changing the source of a picture on the page and calling the array content
--- Log closed Wed Nov 24 00:00:02 2010
