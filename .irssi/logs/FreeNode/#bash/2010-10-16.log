--- Log opened Sat Oct 16 11:43:50 2010
--- Log closed Sat Oct 16 11:48:51 2010
--- Log opened Sat Oct 16 11:49:13 2010
11:49 --- Users 502 nicks [0 ops, 0 halfops, 0 voices, 502 normal]
11:50 --- Channel #bash was synced in 80 seconds
12:01  The_ManU_212: hi
12:02  The_ManU_212: how to test with if-statement if $VAR contains a number between 1 and 5
12:02  The_ManU_212: ?
12:02  twkm: you cannot.  but you can use test to test it.
12:03  geirha: if (( var >= 1 && var < 5 )); then
12:03  twkm: as an aside, don't use all upper-case variables for purely internal purposes.
12:03  The_ManU_212: twkm: ah k so only for global purposes?
12:04  twkm: i doubt there is such a thing.  use it only for things you export, which is normally only for controlling other commands.
12:05  The_ManU_212: geirha: what to do  if var is read input and it has to be integer not a letter as input?
12:05  twkm: use test to check for the presence of non-digits.
12:06  twkm: i happen to prefer [[, but [ (aka test) can do it too.
12:06  TheBonsai: y0
12:07  geirha: !faq valid > The_ManU_212
12:07  greybot: The_ManU_212: http://mywiki.wooledge.org/BashFAQ/054 -- How can I tell whether a variable contains a valid number?
12:07  geirha: Since it's just one digit you're looking for, I'd go with [[ $var = [1-5] ]] for that particular case
12:10  HollyRain: which is the maximum size of a line to save it into the history file?
12:10  geirha: twkm: s/\[ (aka test)/case/
12:10  twkm: test can do it too -- with help.  heck, expr can, without.
12:10  HollyRain: or better said: which is the maximum length that the history file is going to save?
12:10  HollyRain: for a line
12:11  twkm: ''man bash'', history section.
12:11  geirha: twkm: But you need a glob, test/[ doesn't support that
12:11  HollyRain: ok, thx
12:11  twkm: geirha: it surely needs help, i agree.
12:12  geirha: Well, you could redirect stderr to null and do arithmetic comparison I guess
12:12  twkm: i would stick with a pe.
12:13  geirha: Ah.
12:17  The_ManU_212: thx geirha that works
12:54 --- JmZ is now known as JmZ_
13:02  galumph: do I type "dd .. of=/dev/sdb1" or "dd .. of=/dev/sdb"
13:03  twkm: depends on what you want to do.  i suggest checking with your o/s channel before doing either.
13:03  erUSUL: depends on what are you doing and what the other parameters/options to dd are
13:04  hoodoos: hey guys, i have some bash script and part of it i need to execute from current user and another part with su rights. how would I do it? i would love the script ask to enter user password to become su during execution. i'm using ubuntu.
13:04  galumph: I'm writing an iso to my usb drive
13:04  galumph: trying to make it bootable
13:05  erUSUL: galumph: dd for itslef wont work; you need a tool like unetbootin. as twkm said ask in your OS channel
13:05  galumph: Aye, alright
13:06  twkm: dd might, the o/s channel may know, though the origin of the material you are writing may have clues too.
13:06  twkm: hoodoos: su bash -c '... ; ... ; ...'
13:07  hoodoos: let me try it, the sample of the script i want to have is here http://pastebin.com/DYwXW7jh
13:08 --- MuzerAway is now known as muzer
13:08  twkm: also a here document may provide a more natural "flow".
13:08  geirha: You forgot the username in the su command
13:08 --- JmZ_ is now known as JmZ
13:10  hoodoos: geirha, it doesn't grant me super user permissions even if I do su -l hoodoos bash -c '.....', can you please modify my sample to make it work? http://pastebin.com/DYwXW7jh
13:10  geirha: (cd somedir && git pull); (cd someotherdir && git pull); sudo bash -c 'service name stop; service name start; ...'
13:11  geirha: hoodoos: In ubuntu, you should use sudo to run things as root.
13:11  hoodoos: geirha, yeah, i used to it :))
13:12  hoodoos: but it didn't work for some reason..
13:13  geirha: As long as   service name stop  doesn't take more than 15 minutes, you could just do  sudo service name stop; sudo service name start; etc. Once sudo has asked for your password, it won't ask you for the password again for about 15 minutes.
13:14  hoodoos: geirha, thanks for help!
13:16  geirha: I'd rather run the whole script as root, and just run those git commands with lower privileges
13:17  geirha: (cd somedir && sudo -u hoodoos git pull); (cd someotherdir && sudo -u hoodoos git pull); ...
13:24  hoodoos: geirha, ah, it's an idea! :)
13:38  bekks: hello
13:38  bekks: Having a variable containing a string, how can i check wether a substring is included in this string and how can i cut out the parts left and right from this substring?
13:41  taylanub: !case > bekks
13:41  greybot: bekks: case word in pattern);; esac syntax is used to match a word against a particular pattern, and execute commands if that pattern matches. See 'case word in' in man bash | http://wiki.bash-hackers.org/syntax/ccmd/case
13:41  taylanub: !pe > bekks
13:41  greybot: bekks: Parameter Expansion is the expansion of a parameter: "$foo", "$1". You can use it to perform string operations: "${file%.mp3}", "${0##*/}". Remember to *always* quote them. See http://mywiki.wooledge.org/BashSheet#Parameter_Operations
13:42  taylanub: that's posix-compliant stuff. using bash-specific features there are more "logical" choices instead of case (which is actually meant to match for multiple cases, hence "case")
13:43  twkm: bekks.  [[ and parameter expansion
13:44  karthee: awk 'match(bigstring, /substring/);cut=substr(bigstring,RSTART+9,RLENGTH-9)'
13:48  geirha: If you cut away the parts left and right of the substring, you'll end up with substring ... which you already know, so the cutting will be redundant.
13:48  taylanub: awk is not exactly bash :P   builtins can handle the situation just fine, no need for an external program
13:48  bekks: geirha: ok, thats right.
13:49  taylanub: but is the substring exact text?
13:49  bekks: I still dont see the point on how to check wether "_<ten digit number>" is contained in a string or not.
13:49  geirha: [[ $var = *"some substring"* ]]
13:50  bekks: hmm.
13:50  geirha: Ah, now that's a different question
13:50  bekks: When knowing if it is contained, i do now on how to cut off / replace everything i need in that entire string.
13:51  geirha: Show sample strings and what you want the results to be
13:51  twkm: you might read about extglob's.
13:52  twkm: (they aren't required, but typing [[:digit:]] 10 times might be a bit tedious, and error prone)
13:52  bekks: sample string is: "afgfsjkh_1234567890.d.0987654321.x.abc".
13:53  geirha: And you only want 1234567890?
13:53  bekks: yes.
13:53  geirha: Can _ appear anywhere else in the string?
13:53  bekks: No.
13:55  geirha: # var=afgfsjkh_1234567890.d.0987654321.x.abc var=${var##*_} var=${var%%[![:digit:]]*}; if (( ${#var} == 10 )); then echo "Yay, $var"; fi
13:55  evalbot: geirha: Yay, 1234567890
13:56  bekks: Nice :) Thank you :)
13:56  geirha: Maybe ${var#*_} instead of ${var##*_}
13:56  bassliner: geirha: nice example
13:56  geirha: !faq 100 > bekks, for a thorough explanation
13:56  greybot: bekks, for a thorough explanation: http://mywiki.wooledge.org/BashFAQ/100 -- How do I do string manipulations in bash?
13:57  bekks: thanks!
14:00  wrksx: hi, i use the following line to execute a script
14:00  wrksx: nohup ./import_script catalogs 0</dev/null &
14:00  wrksx: can I do this in order to grab the output
14:00  wrksx: nohup ./import_script catalogs 0</dev/null & > import_log
14:01  taylanub:  > foo   before &
14:01  wrksx: or the '&' will cause issues ?
14:01  geirha: Yes, if you put the redirection before &
14:01  wrksx: ow ok
14:01  wrksx: what does the & mean ?
14:01  taylanub: background the process
14:01  taylanub: works in place of ;
14:01  wrksx: ok thx !
14:02  taylanub: and  0<  is same as  <
14:02  geirha: And < /dev/null is not really needed since the & closes stdin anyway
14:03  wrksx: geirha, i execute my script in throught ssh
14:03  taylanub: well, with mplayer, doesn't work without < /dev/null
14:04  taylanub: geirha: ^
14:04  taylanub: i don't know exactly why...
14:04  wrksx: mplayer ?
14:04  geirha: Also, be aware that nohup writes stdout and stderr to the files nohup.out and nohup.err if you don't redirect them.
14:04  taylanub: the media player, yes.  it normally takes keypresses from standard input
14:04  wrksx: geirha, the < /dev/null is not needed even throught ssh ?
14:05  wrksx: taylanub, I don't know what's media player, is this a command line player ?
14:06  geirha: taylanub: Ah, right. It depends on whether the shell is interactive or not.
14:06  taylanub: one of the two most famous media players for Linux, along with VLC.  there's smplayer, gmplayer etc. which are mplayer plus graphical interface.
14:06  wrksx: k
14:07  taylanub: geirha: ah, ok.  and do you know how it is with posix? does it specify closing stdin when using & in non-interactive shell?
14:07  rdz: sorry to chime in, but it often stumbled across the same problem and it seems that 'mplayer' really needs '< /dev/null'
14:08  geirha: «The standard input for an asynchronous list, before any explicit redirections are performed, shall be considered to be assigned to a file that has the same properties as /dev/null. If it is an interactive shell, this need not happen. In all cases, explicit redirection of standard input shall override this activity.»
14:08  geirha: http://www.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html
14:08  geirha: So I guess it's safer to add that </dev/null
14:08  wrksx: ok
14:09  taylanub: thanks for the info.  i should read those docs
14:09 --- Celelibi_ is now known as Celelibi
14:09  wrksx: I concider using a cron task to execute my import_script, will I need to use nohup etc... or since the script will be automatically executed by the server I won't needd this anymore ?
14:10  geirha: In an interactive shell, with job control, you can put a backgrounded job back into the foreground, and in that case, you'd want stdin to be reconnected to the terminal.
14:12  geirha: wrksx: What's the nature of the script? Is it supposed to run "forever"?
14:13  geirha: Or does it do some stuff, then exit?
14:15  geirha: If the latter is the case, don't use nohup and don't background it.
14:20  HollyRain: which is the maximum length that the history file is going to save for a line? (I didn't found in man bash)
14:22  taylanub: the maximum size for the history file maybe ??
14:23  HollyRain: well, it's the bash shell who limits the line size
14:25  TheBonsai: if you know about a limit, why do you ask?
14:27  HollyRain: why I don't know about the limit in bash
14:27  HollyRain: s/why/because
14:27  TheBonsai: you said you know there is a limit. which limit is it?
14:27  taylanub: i remember a similar question not long ago.  why would you care? whatever the limit is, it sure is so high that it won't ever bother you
14:30  HollyRain: because I'm developing a tool for the history handling and I wanted to use a limit to lines to save
14:31  TheBonsai: <HollyRain> well, it's the bash shell who limits the line size
14:31  TheBonsai: where did you see that it limits?
14:32  poisonbit: I think the ram size is that limit, because readline says it uses simply malloc()
14:32  TheBonsai: !faq once > TheBonsai
14:32  greybot: TheBonsai: http://mywiki.wooledge.org/BashFAQ/014 -- How can I redirect the output of multiple commands at once?
14:32  TheBonsai: !faq runs once > TheBonsai
14:32  greybot: TheBonsai: http://mywiki.wooledge.org/BashFAQ/089 -- I'm using a loop which runs once per line of input but it only seems to run once; everything after the first line is ignored?
14:41  TheBonsai: i just crossread the readline code, too
14:41  TheBonsai: there's no explicit limit
14:43 --- taylanub1 is now known as taylanub
14:43  poisonbit: so maybe you can't limit at history insertion time, but you can use a PROMPT_COMMAND that wraps the last N lines of the history
14:44  poisonbit: anyway... why do you need to limit "line" size in history ?
14:49  wrksx: geirha, I was afk, I'm in the latter case and I'll drop nohup and 'backgrounding' ! thanks a lot for your help.
14:49 --- Obadiah is now known as Vivek
14:54 --- taylanub1 is now known as taylanub
15:51  poisonbit: bash4 if I try  arr['string1']="$string1"   I get substitution on 'string1' (so a error about the token)
15:52  lhunath: declare your array with -A
15:52  lhunath: declare -A arr; arr['string1']="$string1"
15:52  poisonbit: aaahhhh,  thanks !  I forget to do it for that var
15:54  poisonbit: that was, you've solved 7 errors with one tip
17:00  teurastaja: bible basher from deicide is a great song
17:00  teurastaja: :P
17:09  monkey_d_luffy: I'm trying to get the filesystem for a given system using the output of mount.   But the dots and wildcards are eluding me.
17:09  monkey_d_luffy: mount | grep "on / " | sed 's/.*type \(\.*\) .*/\1/'
17:09  monkey_d_luffy: what's wrong with the .*    doesn't it mean "any character any number of times" ?
17:13  joeytwiddle: monkey_d_luffy: just use . instead of \.
17:13  joeytwiddle: \. means a real .
17:16  monkey_d_luffy: joeytwiddle: you're the man! thanks for the clarification, it worked :)         but why do I have to use \( \)   instead of ()  ?    I guess they're the exception to the rule?
--- Log closed Sat Oct 16 23:58:41 2010
--- Log opened Sat Oct 16 23:59:03 2010
23:59 --- Users 514 nicks [0 ops, 0 halfops, 0 voices, 514 normal]
23:59  hotwings: weird.. which bash version are you using?  im on 4.1.5(1)-release
23:59  hotwings: debian testing
--- Log closed Sun Oct 17 00:00:17 2010
