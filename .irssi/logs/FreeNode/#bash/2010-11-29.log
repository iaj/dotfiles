--- Log opened Mon Nov 29 08:19:23 2010
--- Log closed Mon Nov 29 08:24:24 2010
--- Log opened Mon Nov 29 08:24:47 2010
08:24 --- Users 499 nicks [0 ops, 0 halfops, 0 voices, 499 normal]
08:25  yitz_: You can use PIPESTATUS to get the status or exec for the redirecting
08:26  bhundven: thanks!
08:26 --- Channel #bash was synced in 106 seconds
08:29  bhundven: oh. PIPESTATUS is an array, so if I wanted the script to fail where the command fails should I use "set -o pipefail"?
08:30  bhundven: hmm. maybe I will mess with PIPESTATUS more. nm.
08:30  bhundven: thanks again!
08:43 --- nohk_ is now known as nohk
08:43  Meesh: Isn't after doing a 'touch a' on bash 'a' a zero length file?
08:44  koala_man: Meesh: no, only if it didn't exist
08:45  Meesh: Yes, it didn't exist before.
08:51 --- rapid_ is now known as rapid
08:52  pgas: then yes
08:52  pgas: # touch a;ls -l a
08:52  evalbot: pgas: -rw-r--r-- 1 root root 0 Nov 29 07:52 a
09:15  eboyjr: I know I can append stuff, but how can I prepend the contents of a file to all files in a directory?
09:16  koala_man: use ed or sed
09:18  eboyjr: I'm not familiar with sed, would: cat license.txt file.c > file.c; work?
09:19  eboyjr: Not sure if I can write to it if its being read
09:19  Josay: just try
09:19  Josay: (and it won't do what you want to do :P)
09:20  eboyjr: Then why would I try lol
09:20  koala_man: to find out
09:29  intangir: is this channel up?
09:29  intangir: can anyone see this
09:31  dioms: affirmative
09:35  pgas: !faq prepend > eboyjr
09:35  greybot: eboyjr: http://mywiki.wooledge.org/BashFAQ/090 -- How do I prepend a text to a file (the opposite of >>)?
09:39  eboyjr: thanks pgas
09:54 --- n1x0n_ is now known as n1x0n
10:20 --- Unknown[NF] is now known as Unknown[OFF]
10:24  Lufti: hi ;)
10:32  qfr: I have a directory structure like this: a/b.test a/c/d.test etc. What should I use to retrieve a string which contains all the files within the subirectories which have that .test extension, separated by spaces?
10:34  koala_man: qfr: shopt -s globstar; echo **/*.test
10:36  qfr: Fancy! Thanks
10:36  qfr: I was about to pipe find, grep and sed.
10:36  qfr: Or tr instead of sed
10:37  koala_man: why do you want them as one string?
10:37  qfr: Oh, just to run some source files through dmcs
10:38  qfr: This stuff is so small, it's not worth looking up how to make single objects yet haha
10:38 --- Weust`afk is now known as Weust`
10:38  qfr: I'm just trying to debug some C# on Linux
10:51 --- zinger is now known as bzinger
11:00 --- [1]The-Bat is now known as The-Bat
11:08 --- [1]The-Bat is now known as The-Bat
11:08  qfr: Hmm is there some way to run grep on your current history when HISTFILE is unset and nothing has been written yet anyways because the session is still active?
11:10  Fatal: history
11:11  qfr: Ahh fabulous, thanks
11:23 --- Rada_ is now known as Rada
11:25  krzie: http://pastebin.ca/2005581
11:26  krzie: can someone tell me why $no1 is empty and all vars get pushed back 1?
11:27  cthuluh: krzie: see what the -p switch does
11:28  krzie: ohhh i had meant -r
11:28  krzie: thank you
11:40  devendra:  Please check the script http://pastebin.com/iNTVhcMD and tell me why the output is not line by line. When I fire the command directly in shell, it gives line by line output but using it through script gives mess.
11:41  cthuluh: !` > devendra
11:41  greybot: devendra: The backquote (`) is used in the old-style command substitution, e.g. foo=`command`. This syntax is deprecated in favor of foo=$(command). Backslash handling inside $() is less surprising, and $() is easier to nest. See http://mywiki.wooledge.org/BashFAQ/082
11:41  cthuluh: !cat > devendra
11:41  greybot: devendra: cat(1) is used to concatenate multiple files together. It should NOT be used to feed file data to processes. There are far better ways to achieve this. The application might take a file as argument (eg. grep ^foo file); or you might want to use file redirection (eg. read line < file).
11:41  cthuluh: !quotes > devendra , too
11:41  greybot: devendra , too: "USE MORE QUOTES!" They are vital. Also, learn the difference between ' and " and `. See <http://mywiki.wooledge.org/Quotes> and <http://wiki.bash-hackers.org/syntax/words>.
11:42  cthuluh: and you use semicolons where you don't need them
11:43  lhunath: devendra: don't put stuff in `` if you don't need it to expand.  why do you have line 9 in ``?
11:43  lhunath: there's so much wrong with this code I don't know where to start.
11:45  lhunath: devendra: http://pastebin.com/c3JUy5FZ
11:45  lhunath: !echo`
11:45  greybot: echo `mycommand foo`: Run command, capture its output, feed it to the 'echo' command and tell it to output it again. A pointless operation (and broken by the lack of quotes). Instead, use just: mycommand foo
11:46  lhunath: ![
11:46  greybot: [ is NOT part of the `if' syntax. It's a normal, ordinary COMMAND. The `if' just checks its exit status. See `help test', http://mywiki.wooledge.org/BashGuide/TestsAndConditionals , and http://partmaps.org/era/unix/award-example-backticks.html
11:46  lhunath: !tests
11:46  greybot: In bash; consistently use [[ .. ]] to test strings or files and (( .. )) to test numbers or arithmetics. Do *NOT* use [ .. ] in bash, *only* in sh. See http://mywiki.wooledge.org/BashSheet#Tests
11:46  lhunath: !wordsplitting > devendra
11:46  greybot: devendra: echo $foo; rm $foo -- If you leave $foo unquoted, bash will *remove* all whitespace (newlines, spaces, tabs) while expanding it, take each *word* as a separate argument. `echo` prints these words separated by one space and `rm` deletes each word. So ALWAYS *quote* your parameter expansions: echo "$foo"
11:46  lhunath: !quotewhen > devendra
11:46  greybot: devendra: "Double quote" *EVERY* argument that contains whitespace or expansions ("$foo", "$(foo)", "`foo`"). 'Single Quotes' prevent expansions from happening at all. Also quote *, [, ], ? etc. if you don't want bash to expand them into filenames.
11:46  devendra: cthuluh, lhunath thanks
11:47  cthuluh: lhunath: the grep -q switch is not needed if he wants to print the results (that's what he does at the end of the script)
11:47  lhunath: oh yeah, he prints the output of the grep.
11:48  lhunath: devendra: http://pastebin.com/XgbxTTb8
11:48  devendra: I am overwhelmed to see such great helping buddies. Its a great place to learn.
11:48  lhunath: http://pastebin.com/biiD05RD -- you probably want errors on stderr.
11:49  lhunath: devendra: I recommend the guide: http://mywiki.wooledge.org/BashGuide
11:50  devendra: I will follow this guide. I like to learn from online tutorials :-)
11:51 --- maxim is now known as Guest98978
11:57  quotemstr_: Are there any plans to add ksh-style globbing? It's insanely powerful.
11:57  quotemstr_: http://www2.research.att.com/sw/download/man/man1/ksh-man.html#File%20Name%20Generation
11:58  lhunath: there are extglobs.
11:58  lhunath: !extglob
11:58  greybot: "Extended globs" (shopt -s extglob) allow you to say things like "all files that do not end in .jpg". See http://mywiki.wooledge.org/glob
11:58  quotemstr_: Yeah. This is a superset of extglob.
11:58  lhunath: indeed.
11:58  quotemstr_: It lets you, for example, switch to regular expression syntax.
11:58  quotemstr_: Or turn on nullglob for one match.
11:59  lhunath: well; why would you want them in bash?  just invoke ksh
11:59  quotemstr_: Sure, but that's heavy-handed.
12:00  lhunath: :-) you can't want all the goodies from ksh and not turn bash into it.
12:01  cthuluh: on the other hand, consider all zsh's pattern matching capabilities, it's impossible to know them all and using them a lot makes scripts unreadable
12:02  quotemstr_: Well, bash will always have readline, and ksh's license prohibits linking to it.
12:02  quotemstr_: cthuluh: Sure, but surely some extension beyond extglob is reasonable.
12:02  pgas: you can always ask on bug-bash, I find the "switch to regexp" syntax to be messt
12:03  quotemstr_: messt?
12:03  quotemstr_: Mainly, it's ~(N) that I'd find handy.
12:03  pgas: messy
12:04  lhunath: on-demand nullglob?
12:07  quotemstr_: lhunath: Yes, so you could write, say, "rm ~(N)./*.o"
12:14  adam-_-: sorry how would I set an alias such as: alias xtdc1='ssh ad.taylor@xtdc1-${1}.dave' so that it works - seems to be ignoring my attempt to pass in a variable - ive tried a bunch of similar variants but none have worked :(
12:15  lhunath: !lias > adam-_-
12:15  lhunath: !alias > adam-_-
12:15  greybot: adam-_-: If you have to ask, use a function instead: myfunc() { foo "$@" | bar; }
12:16  lhunath: aliases are not commands.  they do not take parameters.
12:16  adam-_-: ah.. i tried function as well but i guess i did it wrong, cheers will try that route
12:17  lhunath: xtdc1() { ssh ad.taylor@"xtdc1-$1.dave"; }
12:21  adam-_-: oh $%$$ - wasn't reloading my bashrc properly, thanks,
12:21  zxd_: cat >file >>EOF                 ; bunch of commands   EOF   and then tftp foo <file is there a better way to do this  , save into a variable maybe instead of file
12:25 --- Weust` is now known as Weust`afk
12:27  geirha: var="line 1
12:27  geirha: line 2"
12:28  pgas: why do you need it in a variable?
12:51  k1k0: hi all
12:51  k1k0: morning
12:51  k1k0: :D
13:02  tktiddle: How do i save the output of 'pwd' to a variable?
13:02  koala_man: lol=$(pwd)
13:03  tktiddle: koala_man: your good at these
13:03  koala_man: also, it's already a variable: echo $PWD
13:04  tktiddle: Im being lazy and want to copy the directory path im in before moving somewhere im going to make symbolic link
13:05  Fatal: there's one for that too, $OLDPWD
13:05  tktiddle: Nice shortcut!
13:11  lhunath: don't forget to quote it when expanding it in an argument.
13:40  Bartzy: if I have a file with du -h output (some sizes are bytes (no suffix), some are K/M/G)... how can I sort the lines from small to big ? :|
13:44  Bushmills: had you looked at sort man page, you could have found the -h option
13:46  geirha: !du-hs
13:46  geirha: !du-sh
13:46  greybot: "du -sh" gives you so-called "human-readable" output, but you can't SORT by that. Use "du -sk" to generate data you can sort by. If you need to convert that perfectly good machine-and-human-readable kilobyte data into "-h" format, use: awk '{if ($1>1024**2) $1=$1/1024**2 "G"; else if ($1>1024) $1=$1/1024 "M"; else $1=$1 "K"; print}'
13:58  massimo: Hi. Is there a shorter form for aa=$1;bb=$2;cc=$3;   like Perl has using a list (aa,bb,cc)=$@  for something like this?
14:03  ferret: massimo: no
14:03  geirha: massimo: No. Either three assignments like that or one array assignment.
14:03  geirha: arr=( "${@:1:3}" )
14:08  suigeneris: hey
14:09  suigeneris: is it possible to rename a-b.mkv and a-b.srt to a.mkv and b.srt at once?
14:10  geirha: Your system might have a rename(1) command, which could be able to do that.
14:10  suigeneris: do I need a regex?
14:11  geirha: suigeneris: Depends on what rename command you have.
14:11  geirha: You'll have to read its man-page.
14:12  suigeneris: rename(1), yes
14:12  suigeneris: by Larry Wall
14:15  geirha: That's the perl one I think.
14:16  geirha: Now, why should a-b be renamed to a for mkv files and b for srt files?
14:17  suigeneris: sorry, a.mkv and a.srt
14:18  Bartzy: I have a "5G     /whatever" line.. how can I get only the '5' with bash ?
14:18  lhunath: you're probably also gonna want to think twice about how you define a and b
14:18  lhunath: Bartzy: make it output only 5.
14:18  lhunath: man du
14:21  Bartzy: how can I do regex in bash ?
14:21  Bartzy: lhunath: du was not my question :p
14:21  Naib: ~=
14:21  Bartzy: and $1 is the first () ?
14:22  lhunath: Bartzy: then the answer is; before trying to "fix" broken output, try to make your command not give you broken output in the first place.
14:23  lhunath: Bartzy: no, $1 is the first positional parameter.
14:23  lhunath: !patterns
14:23  greybot: Globs, Braces and Regular Expressions: http://mywiki.wooledge.org/BashGuide/Patterns
14:23  Bartzy: lhunath: OK, lets say I have an imaginary command that creates that output. I just need the numbers...
14:23  Bartzy: thanks:p
14:23  lhunath: you seem eager to ignore good advice.
14:23  suigeneris: lhunath actually what I want to do is, rename 2 files at once, leaving their extensions intact
14:24  Bartzy: lhunath: I'm sorry, but I can't run du again.
14:25  Bartzy: It took forever, I need to get the results now.. to run du again I'll have to wait till night again... made a mistake - I know, but I have what I have now... :\
14:26  lhunath: while read number file; do [[ $number = *G ]] && echo "$((${number%G} * 1024**3)) $file"; [[ $number = *M ]] && echo ...
14:27  lhunath: now you can sort it.
14:31  geirha: suigeneris: rename -n 's/([^-]*)-*\./$1./' *-*.{mkv,srt}
14:31  Bartzy: thanks.
14:31  Bartzy: a lot...
14:31  geirha: suigeneris: err,  rename -n 's/([^-]*)-.*\./$1./' *-*.{mkv,srt}
14:31  Bartzy: lhunath: It's not while read line ....... done < file ?
14:32  lhunath: Bartzy: if you give read multiple variables it will split the input into fields and divide the fields over your variables.
14:32  lhunath: !faq 1
14:32  greybot: http://mywiki.wooledge.org/BashFAQ/001 -- How can I read a file (data stream, variable) line-by-line (and/or field-by-field)?
14:33  mr_daniel: I want to execute some mysql statements with:
14:33  mr_daniel: mysql -u user -pPASSWORD -e"use test; select name from tester"
14:33  Bartzy: lhunath: OK, thanks.... I can't do 4.0 * 2 in bash ? can't use floats ?
14:33  mr_daniel: The string after -e holds the sql-queries I want to execute.
14:34  lhunath: Bartzy: nope
14:34  lhunath: !faq float
14:34  greybot: http://mywiki.wooledge.org/BashFAQ/022 -- How can I calculate with floating point numbers instead of just integers?
14:34  Bartzy: thanks.
14:34  Bartzy: again.
14:34  mr_daniel: The problem is that the password of the user is very complex and includes some special characers, for example ')' or '[' or '.' or '='
14:34  lhunath: that's not a problem.
14:35  mr_daniel: How can I tell bash *not* to interpret those special characrers, but only to pass it so the 'mysql* command?
14:35  lhunath: I'm gonna guess you failed to quote.
14:35  lhunath: !quotewhen > mr_daniel
14:35  greybot: mr_daniel: "Double quote" *EVERY* argument that contains whitespace or expansions ("$foo", "$(foo)", "`foo`"). 'Single Quotes' prevent expansions from happening at all. Also quote *, [, ], ? etc. if you don't want bash to expand them into filenames.
14:39  lhunath: always, always, always quote your PEs.
14:39  massimo: For `typeset foo="foo"` I can always omit typeset? So typeset without attributes is equal to foo="foo" declaration?
14:39  lhunath: not just for "passwords", but always.  ALWAYS.
14:39  lhunath: typeset is obsolete.
14:39  lhunath: same thing as declare; really; but yeah, you normally don't need it at all.
14:39  suigeneris: geirha is it possible to do rename aS01E02.{mkv,srt} AS01E02.{mkv,srt} ?
14:39  nicofs: I want to make a loop that runs until I hit a specific key ("q") - how do I do that?
14:39  lhunath: suigeneris: depends on what your rename command expects as arguments, doesn't it.
14:39  geirha: suigeneris: Yes, but my perl regex knowledge is too limited to give you an answer.
14:39  lhunath: nicofs: depends on how you want to listen for that key.
14:39  nicofs: lhunath: meaning?
14:39  mr_daniel: thanks lhunath , quoting the password works
14:39  nicofs: lhunath: I want something to run continuously until I stop it with that key...
14:39  lhunath: nicofs: do you want to be listening constantly and abort instantly, even when the loop body is executing?  or is it fine to finish the loop body and not start a new one if q has been pressed?
14:39  lhunath: mr_daniel: now quote all your other PEs too.
14:39  nicofs: lhunath: the last one would be good
14:40  lhunath: nicofs: got bash4?
14:40  massimo: lhunath: What about declare? Isn't that the same as typeset?
14:40  lhunath: yes
14:40  massimo: declare is not obsolete?
14:40  nicofs: lhunath: yes
14:40  lhunath: # help typeset | tail -n1
14:40  evalbot: lhunath:     Obsolete.  See `declare'.
14:41  lhunath: nicofs: nevermind; doesn't need bash4.  until read -n1 -t1 char && [[ $char = q ]]; do ..; done
14:41  lhunath: it will wait 1 second though on each iteration
14:41  mr_daniel: lhunath: OK :)
14:42  superlinux: hi. how can I extract the words matching a regular expression in a file?
14:42  lhunath: sed?
14:42  geirha: [[ $char = [qQ] ]]  if you want to accept uppercase q as well
14:44  mr_daniel: There is still a little problem when I try to execute arbitrary sql-commands in bash through the 'mysql' program.
14:44  suigeneris: geirha I did rename Fringe.S02E09.720P.HDTV.x264-CTU.InDivX.ORG.{mkv,srt} Fringe-S02E09-Snakehead.{mkv,srt} and I got Bareword found where operator expected at (eval 1) line 1, near "720P"
14:44  mr_daniel: The following code works without any problems:
14:44  mr_daniel: mysql -u"root" -p"PASSWORD" -e"use test; select text from tester;"
14:45  mr_daniel: But when I try to define the sql-command-strig in a variable, it doesn't work. For example like here:
14:45 * geirha feels somewhat ignored
14:45  mr_daniel: HALLO="use test; select text from tester;"
14:45  mr_daniel: mysql -u"root" -p"PASSWORD" -e $HALLO
14:45 --- ryan1 is now known as consumerism
14:45  mr_daniel: In my opinion both ways, with and without the external HALLO variable, should have the same effect, but they don't
14:46  geirha: mr_daniel: QUOTES!
14:46  geirha: quotes quotes quotes quotes quotes ....
14:47  mr_daniel: geirha: wiat, you want to me to that I need to turn '...-e$HALLO...' into '...-e"$HALLO"...' ?
14:47  mr_daniel: s/wiat/wait
14:47  Azoff: hello
14:47  mr_daniel: s/to/to tell
14:48  geirha: mr_daniel: Try it and see
14:48  Azoff: I have a script that runs a binary and pipes stdout to another script that adds some color to the text.
14:48  mr_daniel: yes, its working :) thanks geirha
14:48  geirha: !arguments > mr_daniel
14:48  greybot: mr_daniel: Understanding Arguments and Word Splitting: http://mywiki.wooledge.org/Arguments
14:50  mr_daniel: OK, I really learned an important leason today: ALWAYS use qutes :)
14:50  Azoff: Now I want to add some checks if the binary crashes and produces an coredump. If that happens, I want to rename the corredump to binaryname.date.coredump
14:50  Azoff: I think I got the renameing part working, however, I can't seem to get the pid of the binary as needed as the coredump is named core.PID.
14:50 --- adam-_-__ is now known as adam-_-
14:50  Azoff: Any ideas on either make Linux write a coredump in the format I want or to find out the pid of the program?
14:51  Azoff: I'm running it like: /usr/local/bin/myprogram | /usr/local/bin/colorLog.sh
14:52  geirha: myprogram & pid=$!; wait $pid || echo "Failed"
14:52  geirha: If you add that pipe you won't get the right pid though, use process substitution instead.
14:52  Azoff: geirha: and how dould I get the stdout of myprogram into colorLog.sh?
14:52  geirha: !>(
14:52  greybot: Process Substitution -- <(cmd) and >(cmd) -- see http://mywiki.wooledge.org/ProcessSubstitution , or http://mywiki.wooledge.org/BashFAQ/024 for a common use
14:53  geirha: command > >(colorlog) &
14:53  geirha: !.sh
14:53  greybot: Don't use extensions for your scripts. Executables shouldn't have extensions. Just like you run 'ls' instead of 'ls.elf', you should run 'myscript' or './myscript', not 'myscript.sh'. In any case, putting 'sh' extensions on *bash* scripts (which are *not* sh scripts) is retarded.
14:53  suigeneris: geirha do you feel ignored by me or someone else?
14:53  Azoff: I'll read some about it, brb
14:54  geirha: suigeneris: Yes
14:55  suigeneris: I don't ignore you
14:55  geirha: suigeneris: I showed you an example on how to use rename, you apparently ignored that and did something completey different. Read the man-page, then learn perl regexes (#perl or #regex might help on that).
14:55  suigeneris: okay
14:56  Azoff: geirha: thanks, think it will work.
14:56  geirha: Or, create a shell function that runs two mv
14:56  geirha: Azoff: Also, don't use the absolute path to binaries, set PATH properly instead.
14:56  geirha: !path
14:56  greybot: The PATH variable defines where your commands are. Don't do stupid things like GREP=/usr/bin/grep; $GREP foo bar. Just use grep foo bar in the first place. If you aren't sure what your PATH contains, set it yourself.
14:59  Azoff: geirha: actually, I don't, just wanted to clarify :)
14:59  superlinux: i found it! it should be 'grep -o'
15:00  geirha: suigeneris: myrename() { mv "$1" "$2" && mv "${1%.*}.srt" "${2%.*}.srt"; };  myrename a-b.mkv a.mkv
15:00  lhunath: superlinux: no, it should be sed.
15:00  superlinux: no.. that's what I really want
15:00  lhunath: but enjoy your broken solution and ignoring of my answer 12 seconds after your question.
15:00  geirha: superlinux: Only GNU grep has -o, it's not portable.
15:01  superlinux: i am not programming anything
15:01  superlinux: I am just searching for wards
15:01  hatten: I guess this is unnecessary use of cat, what should it be replaced with? '$((date +%s - $(cat file)))
15:01  superlinux: words
15:05  hatten: nvm, figured it out, $(<file)
15:05  lhunath: grep -o is unportable and limited.  sed is the best solution for your question.  but if you like to be stuck to the limitations of grep -o rather than use a sed expression; go ahead.
15:05  geirha: hatten: assuming file contains one line with one number:  read -r number < file; ... $(( $(date +%s) - number ))
15:05  bash: anyone good with case statements ?
15:05  ss0: geirha:  in regards to extensions I only use the .sh extension to trigger my vim bash syntax highlighting and pre formatted header. Do you have an alternative means of doing that, since that is " retarded" for bash scripts?
15:05  lhunath: !ask > bash
15:05  greybot: bash: You need not ask permission to ask a question. Just ask and be patient. http://mywiki.wooledge.org/NetEtiquette
15:05  bash: i want to make a dynamic case statement
15:05  lhunath: use a for loop.
15:05  lhunath: and not a case.
15:05  bash: for loop inside case ?
15:05  lhunath: be more concrete for a concrete answer.
15:05  bash: i have items in an array
15:05  geirha: ss0: My vim reads the shebang and enables bash highlighting if it's bash.
15:05  bash: and i want to display delete options on them
15:05  ss0: geirha:  interesting I guess I assumed it was the extension.
15:05  c00kiemon5ter: does bash source /etc/bash.bashrc by default ?
15:05  c00kiemon5ter: or is it needed to be sourced by /etc/profile ?
15:05  suigeneris: geirha I got 'Syntax error near mv'
15:05  bash: so the case must display a certain number of options
15:05  bash: depending on the number of items in the array
15:05  c00kiemon5ter: meaning it's a file that bash doesnt look for when it starts
15:06  geirha: suigeneris: Oops, sorry, remove the space after { and type it again. I put a non-breaking space in there by mistake.
15:06  ss0: geirha:  ah I see, when I am creating the script and it doesn't have the shebang yet it needs the .sh to kick into bash mode automatically. if I am editing a script that already has it voila.
15:06  zplinux_: hi all
15:06  geirha: suigeneris: i.e. replace it with a regular space.
15:07  zplinux_: what is the RIGHT way to loop over the results of this:
15:07  zplinux_: find /var/www/html/admin/modules/ -maxdepth 1 -type d |sed -e 's#.*/##' -e '/_cache/d'
15:07  lhunath: bash: select option in "${options[@]}"; do for o in "${!options[@]}"; do [[ ${options[o]} = $option ]] && unset "options[o]"; done; done
15:07  zplinux_: I seek to run command %pkg on each line of answer I get
15:07  geirha: zplinux_: for dir in /var/www/html/admin/modules/*/; do ...
15:07  ss0: zplinux_:  I would  put that one liner inside of $() and then iterate over it.
15:07  zplinux_: only issue I dont want every directory in there
15:07  suigeneris: geirha ++
15:07  suigeneris: thanks man :)
15:11  zplinux_: ss0: using the for loop?
15:11  ss0: zplinux_:  yes
15:11  zplinux_: thanks
15:11  suigeneris: and I'm sorry I didn't think of this
15:11  bash: lhunath, select options ??? keywords ?
15:11  zplinux_: lhunath: was also thinking about using an array
15:11  geirha: !extglob > zplinux_
15:11  greybot: zplinux_: "Extended globs" (shopt -s extglob) allow you to say things like "all files that do not end in .jpg". See http://mywiki.wooledge.org/glob
15:11  lhunath: bash: I'm afraid I can't parse that question.
15:11  mar3k: hi, i have program written in c which takes user input and then display the output, now i want to read the input values from a bash script i.e. in script i define the values e.g. age=27 and when run the c program instead of writing the value 29 it directly pick from that script
15:12  ss0: zplinux_:  no problem,  you might want to check with geirha or lhunath they know far more than I do but I know that will work.
15:12  mar3k: typo 29 = 27
15:12  lhunath: !readfind > zplinux_
15:12  greybot: zplinux_: Run ... for every file find(1) matches: while IFS= read -r -d '' file; do ...; done < <(find /path -print0) ## See http://mywiki.wooledge.org/UsingFind
15:12  lhunath: don't send find output to sed.
15:12  bash: lhunath,  ill try thx
15:12  lhunath: !for` > ss0
15:12  greybot: ss0: Don't do this: for x in $(command) or `command`. for is used for iterating arguments, not output strings. Instead, use a while read loop: while read line; do ..; done < <(command)
15:12  geirha: zplinux_: for dir in /var/www/html/admin/modules/!(_cache)/; do base=${dir%/} base=${base##*/}; echo "$base"; done
15:12  lhunath: bash: feel free to replace the select loop by a while loop and output the options to select yourself.
15:12  geirha: zplinux_: That's with extglob enabled.
15:12  zplinux_: cool!
15:12  lhunath: bash: may make more sense, since the select loop doesn't update the options form the array after you unset one.
15:12  geirha: zplinux_: So as the glob page explains, you have to run ''shopt -s extglob'' before running that loop. Otherwise !(_cache) won't be treated as a glob.
15:12  misfotto`uni: hi to all
15:12  zplinux_: assume
15:13  misfotto`uni: a simple question, i want to launch a terminal window and int this window i want to run a command (ex. ls -la ), and after that the terminal should give me a shell, and not close
15:13  misfotto`uni: how can i make it
15:13  misfotto`uni: ?
15:13  misfotto`uni: in this way -> xfce4-terminal -x gksudo ls -la; bash;
15:13  geirha: xterm -e bash -c 'ls -la; exec bash'
15:13  zplinux_: geirha: what about that fancy string operation in : base=${dir%/} base=${base##*/}
15:14  misfotto`uni: the terminal runs but after all closes
15:14  geirha: !faq 100 > zplinux_
15:14  greybot: zplinux_: http://mywiki.wooledge.org/BashFAQ/100 -- How do I do string manipulations in bash?
15:14  zplinux_: geirha: could you just take the substring after the last / ?
15:16  zplinux_: what is base###?
15:16  geirha: zplinux_: That's what it does, but first it must remove the trailing /
15:16  geirha: !basename
15:16  greybot: basename(1) can strip the directory and extension from a path. (a/b/c.d -> c.d or c). Or you can use a parameter expansion: "${path##*/}" or "${path%.*}"
15:16  geirha: zplinux_: faq 100 covers those in detail
15:16  Azoff: geirha: Do I have to do something in colorLog.sh to read stdout for the other program or can I just read it from stdin?
15:17  misfotto`uni: geirha, how you will craft a command like this with your method ?
15:17  misfotto`uni: xfce4-terminal -x gksudo ls -la; exec bash
15:19  geirha: Azoff: with a > >(b) and a | b, in both cases a's stdout will go to b's stdin.
15:19  misfotto`uni: this command only open the term, exectue the command ( i think ) and after dies
15:19  Azoff: geirha: colorLog.sh basically contains this ATM:   cat | awk '$3 ~ /CRITICAL:/ { printf("\x1B[41;6m%s\x1B[0m\n", $0); next; } { print; }'
15:19  geirha: misfotto`uni: xfce4-terminal -x gksudo bash -c 'ls -la; exec bash'
15:19  bash: lhunath, how u do a thing like: while ("${A[@]}")  {    ??
15:19  misfotto`uni: geirha, the terminal dies after all
15:19  geirha: bash: for element in "${array[@]}"; do
15:19  Azoff: geirha: the strange thing is that the awk script dosn't get anything fed to it...
15:19  geirha: misfotto`uni: Well I was just guessing at what -x does on xfce4-terminal
15:20  misfotto`uni: -x executes everithing aftaer him
15:20  misfotto`uni: after
15:20  geirha: Azoff: Sure you got the syntax right?
15:20  Azoff: geirha: the script with the process substitution looks like this: myprogram -c /usr/local/share/myprogram/config $application_arguments >&1 > >(colorLog.sh) &
15:21  Azoff: oops, missed the 2
15:21  Azoff: geirha: the script with the process substitution looks like this: myprogram -c /usr/local/share/myprogram/config $application_arguments 2>&1 > >(colorLog.sh) &
15:21  Azoff: have to retype the command by hand as the script is on a net with no connection to the internet
15:22  Azoff: geirha: isn't that correct?
--- Log closed Mon Nov 29 15:27:31 2010
--- Log opened Mon Nov 29 15:27:55 2010
15:27 --- Users 531 nicks [0 ops, 0 halfops, 0 voices, 531 normal]
15:28  saml: using cut, can I display fields 2,3,4,5... and on?
15:29  Azoff: geirha: switching place works through..
15:29  saml: I want to split only once using M
15:30  saml: cut -d'M' --complement -f1
15:30 --- Channel #bash was synced in 150 seconds
15:31  twkm: /me chortles.
15:32  bash: how do u stop a select loop ?
15:32  twkm: provide eof.
15:38 --- zinger is now known as bzinger
15:41  winkey: is there a way to deal with numbers like this in bash? -1.3888888899999999e-04
15:41  erUSUL: no
15:41  lhunath: no
15:41  erUSUL: !float
15:41  greybot: for floating point numbers see !faq 22
15:41  twkm: invoke a utility.
15:41  voxio: !faq 22
15:41  greybot: http://mywiki.wooledge.org/BashFAQ/022 -- How can I calculate with floating point numbers instead of just integers?
15:44  winkey: bc don't like it
15:44  twkm: be hates the e-04, replace the e with *10^.
15:44  winkey: twkm THANKS
16:04 --- pyoor_ is now known as pyoor
16:04 --- pyoor is now known as pyoor_
16:04 --- pyoor_ is now known as pyoor
16:09  dassouki: so i'm trying to setup a crontab to delete contents in a folder that are older than 5 minutes
16:09  erUSUL: !find > dassouki
16:09  greybot: dassouki: http://mywiki.wooledge.org/UsingFind
16:11  drecute: hello
16:12  drecute: is it possible to see bash function reference somewhere within linux?
16:13  pgas: hmm.. what?
16:14  yitz_: Like ... to see what functions have been created/declared?
16:14  drecute: to see built in functions that i can make reference to
16:14  drecute: and see what it does
16:14 --- studyurnm3 is now known as misnix
16:14  drecute: something checking print_f function at php.net
16:15  drecute: something like checking print_f function at php.net
16:15  yitz_: You can run `set` to see all that stuff (and more)
16:15  pgas: drecute: try "help"
16:15  pgas: (and man bash of course)
16:16  yitz_: Erm. Yeah. man bash for builtins. set for user defined
--- Log closed Mon Nov 29 16:20:12 2010
--- Log opened Mon Nov 29 16:20:35 2010
16:20 --- Users 538 nicks [0 ops, 0 halfops, 0 voices, 538 normal]
16:20  mech: how can i paste a small code here in which i have some problems
16:21  mDuff: !paste > mech
16:21  greybot: mech: Please don't waste our time by making us go to a pastebin just for a five-line snippet. Paste it in the channel. If you have a larger script that's showing problems, trim it down to the bare minimum size that still shows the problem. You'll probably fix it yourself once you do that.
16:21  zxd_: what's the difference between /bin/sh and /bin/sh -i
16:21  zxd_: what does interactive do
16:21  mDuff: zxd_, "help set" and look for -i
16:22  mDuff: ...err, strike that
16:22 --- Channel #bash was synced in 110 seconds
16:22  mDuff: zxd_, the difference is as documented in the man page: "An  interactive shell is one started without non-option arguments and without the -c option whose standard input and error are both connected to terminals (as determined by isatty(3)), or one started with the -i option.  PS1 is set and $- includes i if bash is interactive, allowing a shell script or a startup file to test this state."
16:23  mDuff: zxd_, ...so, it sets the flag that this shell is interactive; other scripts can query for that state and decide whether they want to behave differently.
16:24  pgas: drecute: yest type "help read" in your bash session
16:24  mech: this is a simple c program that ask input from user void main() { int num; printf("Enter any number:\n"); scanf("%d", &num); printf("number %d\n", num); }, Now i write a bash script in which i have specified the value of num so when i run the bash script the user dont need to enter the value manually here is the script #!/bin/bash  num=2 ./test < $ch $num
16:24  mech: but this is not working
16:24  drecute: pgas: yeah thanks
16:25  drecute: pgas: does it mean that's how i can get bash functions
16:25  yitz_: mech: ./test <<< "2"
16:25  drecute: ah
16:25  drecute: yeah
16:25  drecute: i see
16:26  drecute: thanks very much
16:26  drecute: Type `help name' to find out more about the function `name'.
16:26  drecute: that does it for me
16:28  mech: yitz_: yes it work but in my c file i am asking user to enter the num and a character so in bash when i do this ./test <<< "2" "a" then c program show value 2 but the character a
16:29  yitz_: mech: ./test <<< "a 2"
16:29  rethus: how can i use a placeholder-var in this statement chmod 777 $home/asdf $home/test in one cmd-line?
16:29  drecute: ok guys, i am reading rute
16:29  yitz_: The C program you pasted only asks for a number
16:29  drecute: and i have a question
16:30  rethus: maybe with {$home="/home/"; chmod $home...} ?
16:30  drecute: is it possible for me to use c to write a shell script?
16:30  yitz_: rethus: home="$HOME" ; chmod 777 "$home/asdf" "$home/test"
16:30  lhunath: rethus: bash variables do not start with a $
16:30  yitz_: drecute: Anything is possible. The question is, why would you bother
16:30  rethus: ah, ok. thanks
16:30  drecute: yitz_: because i want to know
16:31  mech: yitz_: yes it works now, can you tell me what is this called '<<<'
16:31  yitz_: !<<< > mech
16:31  greybot: mech: Here strings. Similar to here documents: The word after <<< and a newline are passed to the standard input of a command. Syntax: ''command <<< "some sentence"'' (Like ''echo "some sentence" | command'', but without the overhead of the subshell)
16:31  drecute: since major commands on linux can be used for writing scripts, i will like to use that, than using c
16:32  yitz_: drecute: #include <stdio.h> \n int main () { FILE *fh = open("script", "w"); fprintf(fh, "write script here"); close(fh); return 0;}
16:32  drecute: oh
16:33  yitz_: You can invoke a shell with system() - but that discussion is more suitable to ##programming or ##c
16:33  drecute: that means i can write shell script inside c and run it right?
16:33  drecute: ok
16:33  mDuff: drecute, you _could_, but that would be silly.
16:33  l1x: huh
16:33  drecute: mDuff: so what is ur suggestion
16:34  yitz_: Write it using vim
16:34  drecute: use plain shell or write c completely
16:34  mDuff: drecute, ...for the same reason that you _could_ write a shell script inside Python, but it would make much more sense (and be less fragile) to set up the exact pipeline you want directly.
16:34  rethus: yitz_: seems not to work
16:35  mDuff: drecute, adding an extra stringification -> parse stage is just asking for fun corner cases (think: filenames with spaces, filenames with quotation marks, filenames with newlines, ...)
16:35  mech: yitz_; thank you yitz_
16:35  mDuff: rethus, could you be more specific about how it fails?
16:35  drecute: mDuff: i.e use shell scripting languages instead
16:35  drecute: ?
16:35  rethus: caus if i set conAdm="../../verwaltung/htdocs/contenido/"; echo "$conHome" nothing is be returned.
16:36  mDuff: rethus, ...why would you expect setting conAdm to set conHome?
16:36  rethus: mDuff: blame on me :( sorry for this mistake
16:36  mDuff: drecute, ...pick one tool or the other and use it correctly, rather than trying to mash up both.
16:36  rethus: will this var set, till the ssh connection is reset?
16:38  mDuff: rethus, it will remain set for the lifetime of the shell instance until/unless explicitly unset. It will not necessarily propagate to any other processes (including child processes, unless exported). Answering your question more directly would require information you haven't provided.
16:38  mDuff: !varcap > rethus (btw, funkyCase is not conventional in shell)
16:38  greybot: rethus (btw, funkyCase is not conventional in shell): By convention, we capitalize environment variables (PAGER, EDITOR, ..) and internal shell variables (SHELL, BASH_VERSION, ..). All other variable names should be lower case. Remember that variable names are case-sensitive; this convention avoids accidentally overriding environmental and internal variables.
16:38  rethus: k, thanks.
16:39  rethus: but to get this chmod to work, i need to quote the var or the strings, right?... now i try this... chmod 775 $conHomelogs which normaly is ./logs/ if $conHome is "./"
16:39  mDuff: !quotewhen > rethus
16:39  greybot: rethus: "Double quote" *EVERY* argument that contains whitespace or expansions ("$foo", "$(foo)", "`foo`"). 'Single Quotes' prevent expansions from happening at all. Also quote *, [, ], ? etc. if you don't want bash to expand them into filenames.
16:44  rethus: k, need a little help.. here is my pastebin:
16:45  rethus: http://pastebin.com/cr6JqWrh
16:45 * mDuff sighs.
16:46  mDuff: rethus, when you quote "foo bar", that tries to run a single command called "foo bar", not a command "foo" with "bar" as its argument.
16:46  rethus: if i execute this, i got error-message: http://pastebin.com/Va5yCrkw
16:46  rethus: the command looks right, but he say... file not found
16:47  mDuff: I already told you why the command is wrong
16:47  mDuff: rethus, ...also, that huge-long-line pattern is horribly unreadable. Line breaks are your friends... and options should be _before_ arguments on the command line; GNU tools are often tolerant of doing that backwards, but many others aren't.
16:49  rethus: k, but what with this error... if i execute chmod 747 -r ./logs directly, it works, but not within this comd-line
16:50  mDuff: rethus, did you not read what I told you?
16:50  mDuff: <mDuff> rethus, when you quote "foo bar", that tries to run a single command called "foo bar", not a command "foo" with "bar" as its argument.
16:51  rethus: i didn't understand what i should do now, cause echo "$conHomelogs" even didn't work... and i don't compare how to solve it.
16:53  mDuff: rethus, your script doesn't set a variable called conHomelogs
16:53  rethus: exactly
16:54  rethus: mhh, i'll try now with echo "${conHome}logs" maybe this will work
16:54  mDuff: http://pastebin.com/habYfwRt
16:54  mDuff: !${ > rethus
16:54  greybot: rethus: Curly-braces in parameter expansions are used when the parameter name is ambiguous: "${foo}bar", "${foo[1]}". They are not necessary for normal PEs (eg. "$foo"). They are no replacement for quoting. echo ${line} is BROKEN. (use echo "$line" or "${line}")
16:55  rethus: mDuff: ahh realy eyecandy your code.
16:55  mDuff: rethus, really ugly, yours.
16:55  rethus: great and thanks for supporting me
16:56  ss0: mDuff:  While I can see why you would get frustrated, "rethus, really ugly, yours." really?
16:59  mDuff: ss0, ...the point is that it's not that my code is above-average prettiness, but that rethus could stand to work on bringing his up to par. Granted, that was fair sight below my usual level of civility.
17:00  ss0: mDuff:  No worries It just surprised me, if someone had bitch slapped me that hard when I was starting out I might not have managed to become the mediocre scripter I am today! :D
17:02  mDuff: ss0, fair 'nuff; I'll try to be gentler on an ongoing basis.
17:10  gsearle: Can I get bash scripting advice here?
17:10  cthuluh: yes
17:11  gsearle: I want to convert configurations into csv.
17:11  gsearle: The data looks like this.
17:11  gsearle: define {
17:11  gsearle: veriable value
17:12  gsearle: }
17:12  lhunath: !faq 1 > gsearle
17:12  greybot: gsearle: http://mywiki.wooledge.org/BashFAQ/001 -- How can I read a file (data stream, variable) line-by-line (and/or field-by-field)?
17:13  gsearle: What's a good way of doing that. All I've come up with is to feed every word into a look and is a veritable name goes around then the next work is to be feed into CSV.
17:22  Chapoolin: In the command line recall mechanism (up/down arrow), is there a way of cycling the previously used arguments to a command?  Example: I do a few "cd /blah/x", "cd /meh/y" --- is there a way of entering "cd" and cycling previous args. to pick one?
17:23  go|dfish: Chapoolin: you could use ctrl-r
17:23  go|dfish: Chapoolin: ctrl-r, then type  "cd", then you can keep pressing ctrl-r to toggle through all previous cd commands
17:24  Chapoolin: go|dfish:: i see.  thanks a bunch  :)
17:24 --- Dyresen_ is now known as Dyresen
17:26  backtogee: could someone give me some help with sed? i am trying to read a line from a txt file then use the output to replace a word in another file. I am thinking (wrongly) along the lines of 'sed -n '2p' < account.txt | sed -i "s/var1/$output_of_sed -n '2p'/g"
17:26  backtogee: sorry if that command is crazy :p
17:27 --- Natch is now known as Natch|
17:32  ss0: backtogee:  Sorry this isn't the channel for sed. It's the channel for bash. You won't be able to find help with sed here however shell based regex matching is supported
17:33  greycat: ##sed is the channel for sed, although we sometimes know the basics
17:33  backtogee: thank you
17:33  ss0: hmm i wonder… !sed
17:34  greycat: !sed
17:34  greybot: sed is a Stream Editor, used to filter output. It's NOT primarily useful for editing files (use ed or perl instead). Ask sed questions in ##sed.
17:34  ss0: nice.
17:35  ss0: greybot:  Oddly enough I have know the lineage and history of ed but have never used it. I should look into that.
17:35  ss0: sigh owned by using tab completion without double checking. i meant greycat rather than greybot
17:39  jacksonbierfeldt: Can anyone help me with some grep issues?
17:39  greycat: !ask
17:39  greybot: You need not ask permission to ask a question. Just ask and be patient. http://mywiki.wooledge.org/NetEtiquette
17:39  jacksonbierfeldt: I'm outputting the results of a crontab -l to a file. cron.txt
17:40  jacksonbierfeldt: grep "59 23 * * *" cron.txt works, and outputs into standard output the lines that contain that.
17:40  greycat: Err, you possibly want grep -F for that one...
17:41  jacksonbierfeldt: But when I expand it to: grep "59 23 * * * sh" cron.txt , it breaks.
17:41  greycat: You *definitely* want grep -F.
17:41  jacksonbierfeldt: Okay. That works. Thank you very much.
17:41  greycat: (fgrep on older systems)
17:47  BCrookAtRA1: I want to test the equality of two strings, but i want unix filename wildcard matching to apply.  I am testing whether the alt-names field on an ssl certificate matches an expected domain name.  So I want to do if [[ lawls.subdomain.domain.com == *.subdomain.domain.com ]] and it come back true.  Any suggestions?
17:47  greycat: sounds like you already have the answer.
17:48  BCrookAtRA1: oh.  it didn't look like it was working
17:49  taylanub: it works in [[ but not [.
17:49  greycat: make sure you're in bash, make sure you're using [[, and make sure you are *not* quoting the glob on the right hand side
17:50  BCrookAtRA1: oh duh, the string i said was *.subdomain.domain.com, is actually a newline delimited list of alt-names and the commonname. so of course the single-line domain name won't be equal to the multiline list....
17:50  BCrookAtRA1: that list is often just one entry, which does match, but not always
17:50  greycat: yeah, you'll need a loop for that
17:50  BCrookAtRA1: np,  just needed to make an ass of myself in public to see taht
17:52  lhunath: I hope this check isn't exposed to arbitrary input; bash globs are not the same thing as wildcard certificates.
17:53  BCrookAtRA1: i know.  I should be changing * to [a-zA-Z0-9_]*
17:53  greycat: that would require regular expressions or extended globs
17:57 --- Unknown[OFF] is now known as Unknown[NF]
17:58  geirha: !$"
17:58  greybot: Bash supports $"..." quoting syntax for locale-specific translation. If the current locale is C or POSIX, the dollar sign is ignored. If the string is translated and replaced, the replacement is double-quoted. See http://www.faqs.org/docs/abs/HTML/localization.html for usage examples.
17:59  geirha: !forget $"
17:59  greybot: OK, geirha
17:59  geirha: !learn $" Bash supports $"..." quoting syntax for locale-specific translation. If the current locale is C or POSIX, the dollar sign is ignored. If the string is translated and replaced, the replacement is double-quoted. See http://mywiki.wooledge.org/BashFAQ/098
17:59  greybot: OK, geirha
17:59  ferret: double-quoted?  Seriously
18:00  geirha: Hm. Yeah, that goes without saying if you ask me.
18:00  geirha: I guess the point is that expansions will occur.
18:00  greycat: It probably means to say "additional substitutions are still performed, as with regular double-quoted strings", but that's a lot of words for a bot factoid
18:02  BCrookAtRA1: I seem to have it working with ' if grep -i $( sed 's/^*/[a-z0-9_]*/' <<<"${Name}" ) <<<"${Domain}" 2>&1 >/dev/null'
18:02  greycat: What... the hell?
18:02  geirha: *cough*
18:03  BCrookAtRA1: Name is the common name of one of the alt names (testing one at a time) and Domain is the domain name I connected to to get the certificate
18:04  geirha: !faq valid > BCrookAtRA1, use this instead
18:04  greybot: BCrookAtRA1, use this instead: http://mywiki.wooledge.org/BashFAQ/054 -- How can I tell whether a variable contains a valid number?
18:04  greycat: 1) you want grep -q
18:04  greycat: 2) your 2>&1 is in the wrong place
18:04  geirha: Of course, change the glob appropriately.
18:04  greycat: 3) you want to quote that $()
18:04  greycat: I'm sure there are more, but the thing's giving me a headache just to look at.
18:04  BCrookAtRA1: :-)
18:05  lhunath: !pe > BCrookAtRA1
18:05  greybot: BCrookAtRA1: Parameter Expansion is the expansion of a parameter: "$foo", "$1". You can use it to perform string operations: "${file%.mp3}", "${0##*/}". Remember to *always* quote them. See http://mywiki.wooledge.org/BashSheet#Parameter_Operations
18:05  lhunath: use a pe instead of sed
18:10  Bruce_Wayne: I'm not able to understand use of code after ">>" in calling a scripts in cron...  ie. $HOME/Experiments/2811/hist_backup.sh >> $HOME/tmp/out 2>&1
18:10  Bruce_Wayne: can anyone enlighten me or give some link to study?
18:11  greycat: !redir
18:11  greycat: !meta redir
18:11  greybot: lhunath 1290594507 forget
18:11  greycat: huh.
18:11  greycat: !redirection
18:11  greybot: Redirections: http://bash-hackers.org/wiki/doku.php/syntax/redirection http://mywiki.wooledge.org/BashGuide/InputAndOutput#Redirection http://bash-hackers.org/wiki/doku.php/howto/redirection_tutorial
18:12  lhunath: I'm not sure why I did that.
18:12  greycat: !learn redir #redirect redirection
18:12  greybot: OK, greycat
18:13  lhunath: oh; I failed at recreating it
18:13  lhunath: !forget Redirections:
18:13  greybot: OK, lhunath
18:13  lhunath: !learn redir #redirect redirection
18:13  greybot: redir is already defined: #redirect redirection
18:14  geirha: graycat beat you to it :P
18:14  geirha: s/a/e/
18:15  greycat: 12:15 Highlights:
18:15  greycat: 12:15    1 gr[ae]*ycat  -word -regexp -color %r
18:15  greycat: Did that one *long* ago.
18:15  greycat: (And yes, I also get "greaycat", hence the *.)
18:16  geirha: Are both grey and gray equal in the english language? or is it a UK english vs US english thing like colour vs color?
18:17  greycat: Both spellings are commonly used in the US.  "Grey" is more common in the UK, I think.
18:19  tsaavik: Morning all, Was wondering if there is a more eloquent way to do an infinite loop other then this: while [ 1 -eq 1 ] ;do
18:20  greycat: while true    or   while :
18:20  Bruce_Wayne: lhunath & greycat: I messed up with my hostid.. and I am unable to open wooledge still... Once you guys offered me " BashGuide.pdf "... I'm still not able to open up some sites including wooledge.. I was wondering if I could get BASHFAQ section's pdf too??
18:20  tsaavik: ah, forgot about our friend mr : :D
18:21  greycat: wtf is a "hostid"?
18:21  Bruce_Wayne: hostname... My bad
18:21  greycat: what's that got to do with your inability to reach web sites?
18:22  Bruce_Wayne: I installed ubuntu 10.10 & it came with some terrible hostname...
18:22  Bruce_Wayne: I surfed the internet and changed the hostname...
18:22  greycat: is that relevant?
18:22  Bruce_Wayne: But after that I was just unable to open sites..
18:23  greycat: What *error* do you get when you try to open http://mywiki.wooledge.org/BashFAQ/001 ?
18:23  l1x: :D
18:23  Bruce_Wayne: guys on ubuntuforums.org say so
18:23  Bruce_Wayne: greycat: Nothing.. it just keeps loading and nothing opens
18:23  lhunath: Bruce_Wayne: are all "sites" broken?
18:24  Bruce_Wayne: lhunath: no, not all... Here was my post asking for help in ubuntuforums.. http://ubuntuforums.org/showthread.php?t=1602832
18:26  lhunath: those suggestions are pricelessly stupid.
18:26  l1x: use ubuntu == accept the possibility of broken anything in your os :)
18:28  greycat: "try another browser" wasn't totally stupid
18:28  Bruce_Wayne: lhunath:  well, what do you suggest..?
18:28  lhunath: nay.  can you ping/traceroute wooledge.org?
18:29  greycat: and something like "use tcpdump" would have been met with "how do I do that" and then the person suggesting it would have to write out 16 pages of instructions...
18:29  Bruce_Wayne: greycat: That didn't work either.. :(
18:29  lhunath: if so, what does curl -v say?  if not, can you resolve it?  host wooledge.org
18:30  Bruce_Wayne: lhunath: my traceroute was on 2nd page on that link...
18:31  greycat: I like how you told him 3 or 4 things to try, and he didn't try any of them.
18:31  tsaavik: !/msg greybot !exec
18:31  tsaavik: !/msg greybot help
18:31  tsaavik: 3~!/msg greybot help
18:31  tsaavik: bah
18:31 * tsaavik kicks keyboard
18:32  Bruce_Wayne: greycat: I'm installing curl right now.. I've slow inernet.. 2-4 kbps
18:32  greycat: you're on a modem?
18:33  Bruce_Wayne: yeah, but my server is down.. this isn't usual
18:33  tsaavik: Is it a 2400baud modem, or do you have horrible phone line quality?
18:33  greycat: 2400 baud wouldn't give him 4kbps
18:34  tsaavik: okay, 9600baud, with v42bis :P
18:34  tsaavik: I recall downloading binary @ 7k with a 14.4k
18:34  Bruce_Wayne: curl has been installed... what command should I type..?
18:35  greycat: also, we have to wonder whether he meant 4 kiloBITS per sec, or 4 kiloBYTES per sec
18:35  lhunath: curl -v http://mywiki.wooledge.org
18:35  tsaavik: well, he DID use a small b :P not that anyone ever gets that right
18:35  lhunath: naturally he meant bits, otherwise he'd have capitalized his b.
18:36 * tsaavik and lhunath giggle in the corner.
18:36  greycat: I'm still wondering why he didn't just ping it.
18:37  lhunath: he did paste a traceroute of youtube.com in his forum post which he claims has the same issue.
18:38  tsaavik: heh, youtube @ 4Kb, that has to be great.
18:38  Bruce_Wayne: here is my result of curl - v command.. http://pastebin.ca/2005925
18:38  greycat: So curl works fine.
18:40  jsquared1: I have a hierarchy of files and folders rooted at /tmp/foo/xyz. I would like to remove all trailing whitespace from every line in the files that are in the folders 'def', 'ghi', and 'jkl'. How do I do that?
18:40  lhunath: Bruce_Wayne: fix your web browser.
18:40  twkm: jsquared1: a loop.
18:40  twkm: oh, and an editor.
18:40  greycat: jsquared1: perl -pi -e 's/ *$//' /tmp/foo/xyz/{def,ghi,jkl}/*
18:41  twkm: provided that doesn't puke because some fool put a billion files in those directories.
18:41  greycat: true
18:41  ss0: xargs
18:41  greycat: !faq replace > jsquared1
18:41  greybot: jsquared1: http://mywiki.wooledge.org/BashFAQ/021 -- How can I replace a string with another string in all files?
18:48 --- nohk_ is now known as nohk
19:05  greycat: tsaavik: try 'function'
19:06  tsaavik: Thanks, browser is unavalabile atm, abusing bot for my bad memory :D
--- Log closed Mon Nov 29 21:30:22 2010
