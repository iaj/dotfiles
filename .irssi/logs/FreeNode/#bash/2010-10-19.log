--- Log opened Tue Oct 19 00:00:59 2010
00:09 --- Nemphilis is now known as Guest22013
00:09  gwz: hey, in a condition, read -r a, what does the r and a represent?
00:10  go|dfish: gwz: 'a' is the name of the variable to store the input in
00:10  go|dfish: 'help read' will explain the -r
00:11  gwz: I did, so basically -r means you cant use \ to escape?
00:12  cthuluh: what do you want to escape?
00:12  go|dfish: well without -r, backslashes will be eaten
00:13  gwz: I dont want to escape, i am just trying to understand the concept of -r
00:14  cthuluh: -r means that backslashes will stay backslashes, that's all. it also means that you can't enter data over multiple lines using a backslash at the end of each line
00:42  iaindalton: I'm trying to use this script that adds preexec and precmd to bash: http://www.twistedmatrix.com/users/glyph/preexec.bash.txt
00:42  iaindalton: but I get an error on the line
00:42  iaindalton: PROMPT_COMMAND="${PROMPT_COMMAND};preexec_invoke_cmd"
00:42  iaindalton: at the semicolon
00:43  iaindalton: apparently it's and old script; supposedly works in bash 2 and 3, but why doesn't 4 like it?
00:47  Ward|: how do i start a program if it doesnt run yet?
00:47  Ward|: pff sorry that came out very wrong
00:47  Ward|: how to start a program, only when it doesnt run yet
00:48  Ward|: if it allready runs it sohuld be killed
00:48  rickest: Not sure if this will help or not but it seems related
00:48  rickest: !ps > ward
00:48  greybot: ward: Don't use ps(1) in scripts -- see http://mywiki.wooledge.org/ProcessManagement instead.
00:49  Ward|: rickest, yeah i planned to use killall which works just by name
00:51  Ward|: i just want to check with ps -A | grep 'foo' if its running
00:51  Ward|: if it is running i wanna kill it with killall
00:51  retrospectacus: Ward|: use pidof
00:51  Ward|: if its not running i wanna start it
00:51  Ward|: it will be to toggle this on and off
00:51  Ward|: retrospectacus, ok i will
00:51  Ward|: ut i have no clue where to start
00:52  Ward|: i cant find any examples whatsoever
00:52  Ward|: only of stuff i dont even remotely need
00:52  Ward|: its SOOOOO simple wehat i want yet its SOOOOO hard to find out how to do it
00:52  Ward|: i guess thats why i really hate bash
00:53  retrospectacus: something like: CPID=$(pidof whatever) ; if [ ! -n "$CPID" ]; then killall whatever; fi; whatever
00:54  retrospectacus: or else; whatever; fi
00:54  retrospectacus: for toggling
00:55  gwz: or you could just do ps -A | grep foo > foo.file and then use test to see if its empty or not :x
00:56 --- jzacsh_ is now known as jzacsh
00:58  cthuluh: Ward|: use pgrep and pkill if you really want to track processes by name.
00:58  cthuluh: don't forget to read http://mywiki.wooledge.org/ProcessManagement twice
00:59  Ward|: i dont wanna become professor
00:59  Ward|: i wanna write a tiny script
00:59  Ward|: but ok
00:59  cthuluh: "I don't want to understand, I just want this to work..."
00:59  gwz: lol
01:02  saac: Should I migrate to dash?
01:03  nDuff: saac, making sure your scripts work in dash is a good practice if you want them to be portable
01:03 --- The-Comp1ler is now known as The-Compiler
01:03  nDuff: saac, "migrate to" dash, on the other hand, is a whole different question
01:03  nDuff: saac, ...I certainly wouldn't recommend it as an interactive shell.
01:03  nDuff: saac, ...and the extent to which you want your scripts to be portable is based on decision criteria that you know but I don't.
01:03  saac: It's coming as default on Squeeze and Ubuntu.
01:04  nDuff: saac, as the default /bin/sh implementation, you mean
01:04  nDuff: saac, not as the default interactive shell.
01:08  nDuff: saac, ...and if you're writing your scripts to run with /bin/sh, you already shouldn't be using any bash-only functionality.
01:10  GeeXan: hey guys, need a little help.  I'm attempting to write a simple script which allows me to run a local script (with all my variables) remotely on another box using ssh.  but i think i'm stuck.  I came across this page: http://stackoverflow.com/questions/243750/how-can-i-automate-running-commands-remotely-over-ssh/247589#247589 but the suggestions there don't seem to want to work with ssh..
01:10  saac: I should try to make it work with whatever shell, bash, ksh, csh, tcsh, dash and so on.
01:10  saac: Thanks.
01:11  nDuff: saac, I didn't say that -- csh is very different
01:11  GeeXan: specifically trying this suggestions " cat your_script.sh | ssh your_host bash"
01:11  nDuff: saac, ...but you should try to make it work with anything that's POSIX compatible if that's your goal.
01:12  GeeXan: specifically trying this suggestions " cat your_script.sh | ssh your_host bas
01:12  GeeXan: sorrry, hit enter again by mistake
01:18  cthuluh: !uuoc > GeeXan
01:18  greybot: GeeXan: Useless Use of Cat (cat foo | grep bar). See http://partmaps.org/era/unix/award.html
01:25  Ward|: i wanna do foo; foo; foo; foo; .... , endlesly, how sohuld i do that?
01:25  nDuff: Ward|, while :; do foo; done
01:25  Ward|: nDuff, ok thanks
01:31 --- denysonique_ is now known as denysonique
01:37 --- JmZ is now known as JmZ_
01:47 --- thewoolleyman_ is now known as thewoolleyman
01:50  traph: which scripts does bash look for while it loads?
01:51  retrospectacus: !dotfiles
01:51  greybot: http://mywiki.wooledge.org/DotFiles or - for a technical explanation - the INVOCATION section of man bash.
01:52  traph: retrospectacus: thanks
02:02  retrospectacus: np
02:03  demifuror: hi gus, is it possibel to have a .awk script inside a bash script?
02:03  jure_: awk { <awk script> } ?
02:03  nDuff: demifuror, absolutely; it's very common to specify one with a heredoc or just on the awk command line
02:04  demifuror: so, how would i pass out from the bash script into the awk script if they are coded in the one file?
02:04  nDuff: !heredoc >demifuror
02:04  greybot: demifuror: Here documents. cat <<EOF followed by several lines of text, followed by the literal string EOF on a new line, NOT indented. The portion between the EOFs is passed to the command as standard input. If 'EOF' is 'quoted', substitutions WON'T be done; otherwise they are. See <<- for the indented variety.
02:05  jimisrvrox: hey guys I forget the command to list files inside of a directory as well as files within a parent directory...so I started by doing ls > test.txt but that only listed files in the parent directory I would like to list files in parent and subdirectories
02:07  jure_: ls -R ?
02:07  nDuff: demifuror, ...replace "cat" with "awk -f -" and there you are
02:07  traph: retrospectacus: I checked .bashrc and the other dotfiles as well as those in /etc
02:07  nDuff: !find >jure_
02:07  greybot: jure_: http://mywiki.wooledge.org/UsingFind
02:07  jure_: he just wants to list them all
02:07  traph: how can I find which script sets an env variable
02:07  nDuff: okay, if it's for interactive use
02:08  nDuff: traph, after-the-fact, you can't; that metadata isn't stored
02:08  traph: darn
02:08  retrospectacus: traph: what env.var?
02:09 * nDuff actually doesn't know many languages that _do_ mark up their variables with data on where they were set; the clojure reader does, but it's an oddity.
02:10  nDuff: (and environment variables are a different matter altogether)
02:10  traph: rvm_path rvm_version rvm_prefix and rvm_selfcontained
02:12 --- muzer is now known as MuzerAway
02:17  traph: nDuff: sorry
02:18  Hufspa: I am trying to check a string to see if it contains any characters besides letters using:  if [ echo $variable | grep -q [^[:alpha:]] ]; then   My problem is I keep getting the error I'm missing [ ]. I am not sure where I am missing this.
02:19  retrospectacus: we can easily see you have two [ and three ]
02:20  retrospectacus: sorry there is one [ hiding over there
02:20  Hufspa: if [ echo $variable | grep -q [^[:alpha:]] ]; then
02:20  Hufspa: They are equal
02:20  Hufspa: np
02:21  Hufspa: my error
02:21  Hufspa: line 19: [: missing `]'
02:21  go|dfish: if [[ $variable = [^[:alpha:]]* ]]; then ...; fi
02:21  go|dfish: in your example, you don't need to use '[' at all
02:23  Hufspa: excellent. thank you
02:26 --- nadir is now known as Guest94276
02:26 --- Guest94276 is now known as n1adir
02:33  Hufspa: I no longer receive the error however I am always passing the check
02:33  Hufspa: sample code:
02:33  Hufspa: 	if [[ $variable = [^[:alpha:]]* ]]; then
02:33  Hufspa: 		echo "bad"
02:33  Hufspa: 	else
02:33  Hufspa: 		echo "good"
02:33  Hufspa: 	fi
02:33  coachz: hi
02:34  nDuff: Hufspa, demonstrate what you're using that you expect to fail
02:34  Hufspa: I always recieve "good" even with test data such as  "cupboard's"
02:34  Hufspa: Zukor's
02:34  Hufspa: Henry13
02:35  go|dfish: oh
02:35  go|dfish: my mistake
02:35  go|dfish: Hufspa: it should be *[^[:alpha]]*
02:36  go|dfish: i read the grep -q [^[ as start of line
02:36  Hufspa: Ok, I'll look into the regular expression
02:36  Hufspa: thanks
02:36  nDuff: # variable=foobar123; [[ $variable =~ ([^[:alpha:]].*) ]] && printf "Matching text: %s\n" "${BASH_REMATCH[0]}"
02:36  evalbot: nDuff: Matching text: 123
02:37  nDuff: # variable=foobar; [[ $variable =~ ([^[:alpha:]].*) ]] && printf "Matching text: %s\n" "${BASH_REMATCH[0]}"
02:37  evalbot: nDuff: no output
02:37  nDuff: Hufspa, ^^^
02:37  go|dfish: eh
03:07  NOMADICUS: Hello, how do I querry for a harddrive's uuid?
03:08  jordanm: NOMADICUS: blkid
03:10 * k- kisses: \0
03:39  saac:  NOMADICUS vol_id /dev/sdxX
03:49  j2quinn: man o man. newb here. what is wrong with this if [ "$1" | grep -c "avi" ]; then ?
03:51  go|dfish: what's in $1 ?
03:54  j2quinn: filename
03:55  j2quinn:   if [ "$1 | grep -c "avi"" ]; then i bleieve is correct
03:57  falconindy: # filename=foobar.avi; [[ $filename =~ avi$ ]] && echo 'true'
03:57  evalbot: falconindy: true
03:57  falconindy: j2quinn: [ is not part of if's syntax
04:00  j2quinn: thanks works
04:03  iaindalton: Sometimes, when scrolling back through my history, some characters of text get ‘stuck’ at the beginning of the line. What causes this?
04:04  iaindalton: And it only happens when I have control characters in PS1, in my case to make my prompt bold
04:08  falconindy: iaindalton: you probably haven't properly escaped the characters in your prompt.. any escape sequences need to be escaped themselves... e.g.: PS1='\[\033[1;31m\] \$'
04:08  falconindy: note the \[ ... \]
04:11  bnguyen: what's the difference between {1..4} and [1-4] ? 'ls abc[1-4]' and 'ls abc{1..4}' give the same result, but I can only get the result I expect with 'touch abc{1..4}' but not with 'touch abc[1-4]'
04:12  falconindy: bnguyen: [1-4] is a regex, {1..4} is a brace expansion
04:15  bnguyen: okay, so is there a rule about kind of commands that can make use of regex ?
04:16  falconindy: Bash is making use of the regex to match filenames
04:17  iaindalton: I thought bash used globbing, not regexps?
04:17  falconindy: bash definitely supports BREs
04:17  go|dfish: [1-4] is a glob in that example
04:18  falconindy: is it? things like [:digit:] arent a glob
04:19  iaindalton: falconindy: I still get the problem, though instead of charactars getting stuck, my prompt shortens to just the first char
04:19  iaindalton: I'm using PS1='\[\033[1m${debian_chroot:+($debian_chroot)}\u@\h:\w\$\033[0m\] '
04:20  falconindy: iaindalton: each color code needs to be bracket individually
04:20  falconindy: bracketed, rather
04:20  go|dfish: falconindy: when used like bnguyen showed, yes, it's globbing
04:20  go|dfish: the only regex stuff in bash is with the =~ operator used inside [[
04:20  falconindy: fair enough
04:21  iaindalton: much better; thanks
04:37  j2quinn: falconindy, find ./ -name *avi -exec mv {} 'basename{}'.wmv \;  is what i have so far. i want to rename all the avi files (subdirectories included) to wmv.
04:38  jordanm: !faq rename
04:38  greybot: http://mywiki.wooledge.org/BashFAQ/030 -- How can I rename all my *.foo files to *.bar, or convert spaces to underscores, or convert upper-case file names to lower case?
04:44  j2quinn: thanks. works well.
04:51  braxton: Hey, I'm sort of a noob at making bash scripts. I am trying to make one that removes flash objects, and I can navigate to the folder, but rm * doesn't work for some reason.
04:52  yitz_: !exact
04:52  greybot: Please tell us EXACTLY what you typed, and EXACTLY what the error is.
04:52  braxton: It's telling me '*' isn't a file or directory, which I am aware of, but how is one supposed to use wildcards.
04:52  yitz_: That usually indicates the folder is empty
04:52  yitz_: !nullglob
04:52  greybot: nullglob: a shell option (shopt) which causes unmatched globs to expand to nothing, rather than themselves. Example: shopt -s nullglob; files=(*); echo "There are ${#files[*]} files."
04:53  braxton: So what are you saying?
04:53  braxton: It's fine that it does that, then?
04:54  braxton: What's the operator to redirect stderr output? &3> ?
04:54  yitz_: I would use the nullglob so it doesn't do that
04:54  yitz_: STDERR is #2
04:54  yitz_: 2>
04:55  braxton: Sorry.
04:55  braxton: Thanks! You're marvellous.
04:55  yitz_: np
04:56  braxton: Alright, I did both. Now it won't bother me at all. Just have to make sure that I keep those line rider tracks somewhere special, if I do decide to play that, haha.
04:56  yitz_: Don't do both...
04:56  yitz_: There's no reason for that
04:57  yitz_: Make it do what you want it to do. Don't add useless hacks
05:12  vot: hi guys...l you cant nest case statements can you
05:13  yitz_: You can
05:14  vot: oh
05:15  yitz_: You can put anything inside a case
05:15  vot: can case test against a string
05:15  yitz_: It does PATTERN matching
05:16  yitz_: ie the string match operator
05:49  kantxx: can someone help me.. perhaps im missing something simple... http://pastebin.com/etejJsUw
05:50  yitz_: !set-x > kermit
05:50  greybot: kermit: Setting the -x option on bash enables a debugging mode that makes bash output the command name and arguments that it will run (after all parsing and expansion has been applied). Set it by starting a script with ''bash -x ./myscript'' or putting ''set -x'' before the code you want to debug. ''set +x'' turns this behaviour off.
05:50  yitz_: !set-x > kantxx
05:50  greybot: kantxx: Setting the -x option on bash enables a debugging mode that makes bash output the command name and arguments that it will run (after all parsing and expansion has been applied). Set it by starting a script with ''bash -x ./myscript'' or putting ''set -x'' before the code you want to debug. ''set +x'' turns this behaviour off.
05:51  kantxx: yitz_: its more of a logical problem i think than a programming error.. but not sure
05:52  yitz_: Any hints about what goes wrong?
05:52  kantxx: anything within the condition doesnt appear to work.. not even a simple echo "blah boo" instead it says command not found for "blah boo"
05:53  kantxx: yitz_: ^
05:54  yitz_: set-x will let you see if/why the test always fails
05:54  yitz_: Or suceeds
05:54  kantxx: didnt seem to do anything
05:55  yitz_: It should generate a lot of output
05:58  kantxx: yitz_: hmm doesnt seem to tell me much
05:59  yitz_: You should be the test case and what is being tested
05:59  yitz_: Line 15
05:59  kantxx: the test seems okay
05:59  yitz_: !grepawk
05:59  greybot: Awk can do almost everything grep can do. Instead of doing grep 'foo' | awk '{ statement }', try awk '/foo/{ statement }'
06:00  kantxx: yitz_: that wouldnt fix it though would it?
06:00  yitz_: Nope. I'm nost sure what your issue is, though
06:01  kantxx: yitz_: if i replace line 17 with echo "foo" it will simply say command no found: foo
06:01  kantxx: like it ignores echo
06:01  yitz_: Oh? Try adding a shebang
06:02  yitz_: How are you running this script?
06:02  kantxx: yitz_: just pasting it in the cli
06:02  kantxx: shebang?
06:02  yitz_: !shebang
06:02  greybot: Jargon, from "hash bang", or "#!". The shebang line is read by the kernel when a script is executed. See http://www.in-ulm.de/~mascheck/various/shebang/
06:02  allan8904: hey, how do you do an AND in a bash script? for instance if( $S1 = "3" AND $2="5") ?
06:02  kantxx: oh hah
06:03  yitz_: allan8904: (( for arithmetic. && for ANDing commands. And the if is it's own command and must have a space after it
06:05  allan8904: yitz_: cool so is OR ||?
06:05  yitz_: !||
06:05  greybot: foo || bar runs bar when foo fails: [[ -d $foo ]] || { echo 'ohNoes!' >&2; exit 1; }
06:05  kantxx: yitz_: shebang works :) danke
06:06  allan8904: yitz_: so this is a vaild line?
06:06  allan8904: if [ "$1" = "localhost"  !|| "$1" = "127.0.0.1" ]
06:06  yitz_: No...
06:06  yitz_: The [ doesn't recognize ||
06:07  yitz_: if [ "$1" = "localhost" ] || ! [ "$1" = "127.0.0.1" ] ; the cmd ; fi
06:07  allan8904: yitz_: ah ok, thanks
06:07  MTecknology: !info libc6 lucid
06:07  MTecknology: sorry
06:07  allan8904: yitz_: whats the significance of the ! like why do we need it?
06:08  yitz_: You put it there
06:08  yitz_: It does a NOT
06:09  allan8904: yitz_: oh lol, i thought thats what you said earlier....my bad
06:10  jordanm: allan8904: "!" is commonly used in IRC to query a bot
06:10  yitz_: Oh...
06:20  TheBonsai: y0
06:48  TheBonsai: quiet this morning :)
06:48 * m4n echoes
06:49  TheBonsai: ah, life...!
06:49  Kharec: hi :)
06:49  TheBonsai: even more life
07:12 * TheBonsai just reading about RUID, EUID and SUID. this solves a problem
07:33  Cyber_Beast: If i=MyImage.jpg & I can remove .jpg by... i=${i%.jpg} .... from what I can remove "My" too? and have only "Image" ??
07:35  Cyber_Beast: Anyone?
07:36  selckin: with some more usage of % and / read the docs
07:39  Cyber_Beast: selckin: It would be great if you could give me link to read % and /... I'm bad at searching.. Please!
07:39  selckin: man bash
07:41  Cyber_Beast: selckin: Yes, It's under the section of Parameter Expansion. Thank you. Appreciated. :)
07:49  sikilpaake: moin, room
--- Log closed Tue Oct 19 08:37:19 2010
--- Log opened Tue Oct 19 08:42:42 2010
08:42 --- Users 489 nicks [0 ops, 0 halfops, 0 voices, 489 normal]
08:43  brick: Drop tops of the rail corridor to win a vibrator me and my child (oaktovn) and the actual value on my PC, will not stop until the child completes the idea of immersing ourselves in the garden, where you're all playing the game (Auckland) is a star, and I really do not want more?
08:44 --- Channel #bash was synced in 84 seconds
08:49  jure_: # echo $HOME
08:49  evalbot: jure_: /root
08:49  jure_: # test -n "$HOME" && echo "Your homedir is set!"
08:49  evalbot: jure_: Your homedir is set!
08:57  jure_: # which ls
08:57  evalbot: jure_: bash: which: command not found
08:58  pgas: jure_: you can play with the bot in #evalbot or in private message
08:59 * jure_ scuttles off
09:03  Kharec: hi
09:10  Kharec: So quiet, here! :)
09:35  jure_: if I don't know a program's location, how would I test it exists?
09:36  koala_man: jure_: you can use 'type'
09:42  pgas: !faq exist
09:42  greybot: http://mywiki.wooledge.org/BashFAQ/081 -- How can I determine whether a command exists anywhere in my PATH?
10:02 --- MortenTemp is now known as Morten_
10:03  ouah: hi
10:04  ouah: how can I convert an hex string to a *signed* decmal value?
10:04  ouah: something like: echo "FFFE" | cmd   should give me -2
10:05  ouah: printf and awk only print unisgned value to my knowledge
10:05  ouah: (echo -e actually)
10:06  mtv: Hello, will a tar.gz archive count as a regular file in ...if [ -f foo.tar.gz ]...?
10:07  koala_man: of course
10:07  mtv: Thanks. Give me a break it's late here.
10:07  koala_man: non-regular files are things like directories, fifos and devices
10:08  mtv: Yeah I read that... but I'm half asleep and the archive contains directories so I thought...
10:08  mtv: Thanks though.
10:18  Kharec: koala_man: devices are not regular file?
10:18  ouah: I wonder if it is possible to do it using only shell commands, personnaly I think I have to go to python
10:20 --- Uqbar_ is now known as Uqbar
10:20  iceroot: i have files called foobar2050, foobar2070 and foobar2090. i want to check if there is a file which is called foobar and a number which is less 2090, so i want to check if there is e.g. foobar2089. what is the common way to handle something like that so that?
10:22  koala_man: Kharec: no. non-regular files like fifos and devices can often be treated like regular files, but they're clearly special
10:23  Bushmills: # file=foobar2089; ((${file#foobar} < 2090)) && echo smaller
10:23  evalbot: Bushmills: smaller
10:23  Bushmills: # file=foobar2091; ((${file#foobar} < 2090)) && echo smaller
10:23  evalbot: Bushmills: no output
10:23  koala_man: iceroot: wrap that in a for loop ^
10:23  Kharec: koala_man: okay
10:24  iceroot: hm ok maybe my example was not good. mshotfix_2010071-2.opsi  everything smaller then *201009*
10:26  iceroot: so i guess i have to isolate the date and do "<" on it
10:26  Bushmills: similar idea. there's also % for truncating trailing strings
10:28  iceroot: Bushmills: thank you, i will have a look
10:28  Bushmills: # file="mshotfix_2010071-2.opsi"; echo "${file%-*}"
10:28  evalbot: Bushmills: mshotfix_2010071
10:30  iceroot: Bushmills: is there something like if [ -e mshotfix-2010[0-8]* ] on bash3? to that i can use a regexp
10:31  Bushmills: !=~
10:31  greybot: Binary operator, uses the expression on the right hand side as an extended regular expression and returns true if the expression on the left hand side matches the pattern. USE A VARIABLE to hold your regexes: if [[ $var =~ $r ]]; then echo Match; else echo 'No match'; fi
10:33  iceroot: Bushmills: thanks, i think i will use the regex-way
10:52 --- klem__ is now known as Klem
11:03  Piratero: Hello everyone.
11:03  Piratero: I have HISTCONTROL set to ignoredups, but is there a way to REALLY ignore dups?
11:03  Piratero: I have a large amount of 'cd ..' present sparsely
11:04  Piratero: HISTIGNORE isn't really what I'm looking for either as I want this to be very general.
11:06  merzo: guys plz help
11:07  trash: plz!
11:07  merzo: when I try to copy string from file to file all spaces are eliminates
11:07  merzo: while read curline; do
11:07  trash: "$curline"
11:07  merzo: echo $curline >> $TMPFILE    done < "./loc.txt"
11:07  trash: and
11:07  trash: !varcaps
11:07  greybot: By convention, we capitalize environment variables (PAGER, EDITOR, ..) and internal shell variables (SHELL, BASH_VERSION, ..). All other variable names should be lower case. Remember that variable names are case-sensitive; this convention avoids accidentally overriding environmental and internal variables.
11:07 --- Weust`afk is now known as Weust`
11:07  trash: so.. echo "$curline" >> "$tmpfile"
11:08  merzo: this eliminates spaces
11:08  trash: Are you just slow or not reading me?
11:08  merzo: yes I read u post thnx
11:10  merzo: I'v made changes and replaced TMPFILE on tmpfile
11:10  merzo: sorry for my mistake
11:11  merzo: but guys I can't understand why my script cut off all spaces
11:15  stetho: Hi. When I left the office last night I left a copy (cp -vr /shares /mnt/usbdisk/) running. When I came in this morning the machine it was running on was off (set to do an automatic shutdown which I wasn't aware of!). I want to complete the copy without redoing what's already been copied. I've been looking at man cp and there's an -u switch "copy only when the destination file is missing" but it keeps prompting me "file xyz exists. Overwrite?"
11:15  stetho: Is there a way to copy the difference between two directories?
11:17  lhunath: yeah, stop using cp.  learn the miracle that is rsync.
11:18  lhunath: rsync -avP /shares/ /mnt/usbdisk/
11:18  lhunath: unless you want /mnt/usbdisk/shares
11:18  lhunath: in that case it would be: rsync -avP /shares /mnt/usbdisk/
11:19  Piratero: rsync!!!
11:19  thewoolleyman: can I force or redirect flush of stdout from a pseudo-tty terminal?
11:20  Kharec: hi
11:21  thewoolleyman: hi
11:21  stetho: I though I could only rsync if I'd rysnc'd before. Thanks!
11:22  trash: That makes no sense.
11:22  trash: lhunath: v and P? :-)
11:23  lhunath: moar verbosity.
11:23  trash: Does it actually show more when using v combined with P?
11:24  cousteau`work: is there a way to "alias" /bin/sh to /bin/bash other than symlinking /bin/sh -> /bin/bash?
11:24  trash: cousteau`work: That makes no sense.
11:24  trash: !sh > cousteau`work
11:24  greybot: cousteau`work: sh is the POSIX or Bourne shell, not bash. Even if sh is a symlink to bash, running a script under 'sh' (either by typing 'sh myscript' or putting '#!/bin/sh' at the top) *disables* many bash features. See http://mywiki.wooledge.org/BashGuide/Practices#Choose_Your_Shell
11:24  trash: Just use bash and all will be fine.
11:24  Kharec: :)
11:25  cousteau`work: I have a commercial software which is intended for SuSE or RedHat or something, and uses a lot of #!/bin/sh files with bashisms on it
11:25  trash: Hahaha.
11:25  cousteau`work: bashisms like for ((...)) or arrays like $[list[0]}
11:26  trash: File a bug report.
11:27  cousteau`work: what I don't understand is that, if what greybot says is true and running bash as `sh` actually disables non-POSIX features, how is it possible that nobody has complained yet
11:28  trash: cousteau`work: They complain here all the time.
11:28  trash: cousteau`work: And it doesn't disable all features, but some.
11:28  trash: So that's another reason not to trust it.
11:28  cousteau`work: cool... I've just done `find -name '*.sh' -exec grep '#!/bin/sh' '{}' ';'
11:28  cousteau`work: it has returned a lot of lines containing   #!/bin/sh
11:28  cousteau`work: now let's see if adding -H...
11:29  trash: Of course they are "tested" on system that have /bin/bash as /bin/sh but they most probably poorly fail on other /bin/sh.
11:29  cousteau`work: ok, so in my "post-install script" I'm making I'm gonna add some sed magic
11:33  Piratero: cousteau`work: God how I hate that.
11:34  cousteau`work: Piratero: the sed magic, or the "There's An Only True Shell, And That Is Bash" religion?
11:34  Piratero: The religion part.
11:34  Piratero: I try to make my scripts as "portable" as possible.
11:35  trash: I prefer bash, POSIX is just PITA.
11:35  cousteau`work: well, the easy solution is to replace all #!/bin/sh with #!/bin/bash, I think it can be assumed that bash is installed, even if it's not the default shell
11:36  cousteau`work: damn, I'm doing   grep '/bin/bash' -R .   and I'm getting matches in binary files
11:37  lhunath: if it's not installed by default; it's not gonna be installed to /bin
11:37  lhunath: I would hope.
11:37  lhunath: people tend to use /usr/bin/env bash
11:38  cousteau`work: lhunath: it's installed by default, at least here... but it's just not THE default one
11:38  lhunath: and if POSIX sh didn't suck so much; perhaps we wouldn't have to turn to bash for being able to write semi-decent code.
11:38  cousteau`work: would it be a better idea to do the   #!/usr/bin/env bash   thing?
11:38  cousteau`work: maybe even just   #!bash
11:38  lhunath: no, that won't work.
11:39  lhunath: the kernel isn't going to search PATH for you.
11:39  cousteau`work: oh
11:39  brabo: the #!/usr/bin/env bash thing works on bsd as well
11:39  lhunath: but env will.
11:39  cousteau`work: sometimes it works...
11:39  brabo: as oposed to #!/bin/bash
11:39  lhunath: indeed.
11:39  cousteau`work: ok, I'll use env
11:39  brabo: so i tend to use env
11:40 * brabo bows to lhunath 
11:40  brabo: ;)
11:40  cousteau`work: since I have to replace _all_ #!/bin/sh, I don't mind replacing them with #!/bin/bash or #!/usr/bin/env bash
11:41  lhunath: uh.  that sounds wrong
11:41  cousteau`work: well, this was intended for linux, not *BSD, but anyway... better do things well
11:41  lhunath: if it's sh code; why are you changing it to bash?
11:41  trash: It's not sh code.
11:41  cousteau`work: lhunath: because it's bash code
11:41  lhunath: oh, fun
11:41  trash: It's SuSE they think it is sh but it is bash code code.
11:42  brabo: lol
11:42  cousteau`work: it's like the time I found a .exe which was actually a Linux ELF executable
11:42  brabo: oh my :p
11:43  cousteau`work: but since it was an "executable" and the guys who did it don't seem to understand how a file can lack a 1-3 char extension, they named it as .exe
11:43  lhunath: yeah; permissions aren't good enough.  give it an .exe extension so it's clear it's an executable.  sounds like those people that put .sh on bash script so it's clear it's a SHell script, even if it's totally NOT an sh script
11:44  brabo: true
11:46  brabo: tho i must admit, i sometimes do that too, sometimes users are confused about what is a script and what isnt, so i too sometimes put .sh at the end... i know it's bad practice, but at least those users dont come bugging me about what's a script and what isnt :p
11:47  cousteau`work: so should bash scripts have a .bash extension?
11:47  Kharec: bash script doesn't need extension
--- Log opened Tue Oct 19 11:58:09 2010
11:58 --- Users 512 nicks [0 ops, 0 halfops, 0 voices, 512 normal]
11:58  amidelalune: I think this is a bad attitude in this channel, when you don't know the answer you can just say: I DONT KNOW, instead of making fun of the question and the questioner
11:58  lhunath: my point was rather, I don't need to know, and neither should you.  though I can guess that if you run your bash script for 7 years in continuation that you may save 2 seconds using |&
11:59 --- Channel #bash was synced in 87 seconds
11:59  lhunath: the only relevancy is in the fact that the syntax is different, therefore, pick whichever you like the looks of, and consider the fact that one only works in bash4.  end of story.
11:59  amidelalune: lhunath, I don't know what you work for, but you can guess being and admin in an organisation and your script is going to work for some thousands of systems
12:00  lhunath: amidelalune: did you see the BUGS section I quoted?
12:00  lhunath: if you REALLY care about performance, then stop using bash!  if you don't, shut up about it.
12:01  amidelalune: lhunath, I couldn't understand your syntax about BUGS
12:01 * lhunath goes and does something productive.
12:01  jure_: he's saying one of bash's bugs is that it is too big and too slow
12:02  jure_: so if you really care that much about performance, stop using it. use dash or something.
12:03  amidelalune: jure_, ok I understand, but you can not conclude: while talking about bash don't talk about performance
12:03  brabo: perhaps in a way not, but his point still stands in a way
12:04  jure_: you don't talk about performance when the speed loss from such a small syntax change is too negligible for performance aspects to be discussed
12:04  brabo: if performance is an issue, bash is prolly not hte language you want
12:04  lhunath: there is a difference between the performance of doing foo+=("bar") vs foo=("${foo[@]}" "bar") and the performance of using 2 bytes of syntax over 6 when I already stated that they effectively do the exact same thing.
12:04  brabo: jure_++
12:04 * jure_ levels up
12:05  brabo: ;)
12:06  amidelalune: I think this is systematic aproach, and you don't care about it
12:08  amidelalune: maybe you don't care about your charger being plugged without charging anything, but I care, that is the only quesiton here
12:09  lhunath: do you care about the amount of steps you take because you'll generate more CO2 and affect the greenhouse effect negatively with every superfluous breath you exhale?
12:10  lhunath: I care plenty about syntax.  but for reasons that matter; not ones that are utterly irrelevant.
12:10  amidelalune: lhunath, yes I care, but those steps provide more benefit than their bad effect
12:12 * amidelalune prefers to be quiet because he doesn't want to be the bad guy in this channel :)
12:12  lhunath: then start panicing about the amount of time you've wasted in here discussing this topic when it could've been far more beneficially employed in a productive manner.
12:12  hmw: I am trying to replace all <em> tags in a directory tree with <strong> and I want to avoid having to upload the backup, if it goes wrong. I came up with this: find . -exec sed -e 's/<em>/<strong>/g' {} > {} \;  -- will this do what I want? (I am concerned about the > redirect)
12:12  lhunath: sed is not a file editor.
12:13  lhunath: use ed.
12:13  hmw: ugh.
12:13  hmw: Its a lot of files
12:13  geirha: It'll redirect find's output to a file named '{}'
12:13  lhunath: also; find is not bash.  you can't give it bash syntax and expect it to know what you're on about.
12:13  lhunath: use ed from find.
12:13  lhunath: or a for loop.
12:14  hmw: I did not really understand the {} part in find... it appears to be more than just a joker?
12:14  lhunath: the {} argument is replaced by the current filename.
12:14  lhunath: but -exec does not take bash syntax.  you seem to think it does.
12:14  lil_cain: Isn't there a sed switch to edit things in place?
12:14  hmw: that simple. alright. I was a little confused about the funny way how it lools
12:15  lil_cain: sed -i
12:15  geirha: The second {} is never seen by find.
12:15  lil_cain: edits in place.
12:15  hmw: lil_cain: ah thanks... going to read the man page
12:15  lhunath: lil_cain: sure; one that works differently on every platform, if it exists at all; and duplicates your data only to replace the original and destroy symlinks while it's at it.
12:15  lhunath: it doesn't edit anything.  it makes a new copy and deletes the old one by moving the copy over it.
12:16  lil_cain: Ah. I wasn't aware it was quite that much of a pain.
12:18  hmw: I wouldn't dare to run it over soft-linked files... I had weird issues with soft links, and don't know enough about the inner workings of the bash. I once moved a file to .. and it "disappeared" - until i noticed, that I had cd'ed into a soft-linked dir... :)
12:19  hmw: there is a lot that can go wrong, indeed.
12:20  lhunath: inner workings of your system, you mean.  not bash
12:20  lhunath: !bashis
12:20  geirha: If you use .. in the pathname, it will be realtive to the actual dir, not the symlink
12:20  greybot: Bash is a shell. That's a program which can do simple math, logic and run other programs. It's NOT a terminal, it's not a kernel, it doesn't manage the system's authentication or environment, it's not your OS and it's not X, KDE or Gnome.
12:21  hmw: yeah i know bash is not my OS. although one might think, it actually is an OS on it's own
12:21  lhunath: just like internet explorer is The Internet, uh huh.
12:21  hmw: lhunath: it's not the bash, who resolves a soft-link?
12:22  Kharec: .bashrc in ubuntu is... Huge!
12:22  Kharec: I'm rewriting it, totally !
12:22  hmw: lol @ that factoid. You apparently have a lot of people in here not really knowing, what a shell is
12:23 * Kharec is on mandriva, but i'm testing ubuntu... And tell his life on #bash ^^
12:27 * amidelalune really liked that internet explorer is internet lhunath++ ;) 
12:27  cga: hi all, in a function of a script of mine I'm making a simple grep for an IP in squid's acl files. now (if IP is not found) i'd like to strip the IP to the subnet and search thatt instead. (ie 10.63.0.66 not found => search 10.63.0 => if not found search 10.63) , how can i do the strip thingy ? please thanks
12:27  hmw: Customer: "I deleted the Internet. Can you help me?" Help Desk: "Oh, it was YOU!"
12:27  cga: lol
12:28  cousteau`work: aargh... seems that xilinx software is totally screwed up... the only way around will be to sh->bash
12:28  cga: if you google in google you can break the internet!
12:28  hmw: Fortunately it could be recovered. It was found in the recycle bin.
12:29  cousteau`work: now I _hate_ Xilinx
12:29  cga: hmw: http://www.youtube.com/watch?v=wrQUWUfmR_I
12:29  geirha: !faq 100 > cga
12:29  greybot: cga: http://mywiki.wooledge.org/BashFAQ/100 -- How do I do string manipulations in bash?
12:29  zxd: what does this do : 1>&3-,
12:29  cga: thanks geirha =)
12:31 * cga leaves for lunch
12:32  cousteau`work: if there's a way to make bash use bash for subprocesses even if /bin/sh is used instead...
12:32  brabo: that's to make sh use bash for subprocs then, no?
12:33  cousteau`work: I'm probably going to make /bin/sh a script that checks if the $DEFAULTSH variable is set. If it is, use "$DEFAULTSH" "$@". If it isn't, use /bin/dash "$@" (or whatever shell is the default one)
12:34  cousteau`work: brabo: ...and yes, I meant that
12:34  brabo: ;)
12:34  cousteau`work: no, no I didn't. I want to make bash and only bash to replace sh with bash
12:34  brabo: now i'm confused :p
12:35  brabo: but i'm easily confused hehe
12:35  brabo: ;)
12:35  cousteau`work: well, I'll think about it later, now I gotta go
12:35  brabo: laterz
12:35  cousteau`work: btw, ln -s bash /bin/sh will disappear on the next sh update, won't it?
12:36  trash: Depends on your OS.
12:36  cousteau`work: gotta go, will investigate that later
12:36  hmw: for all, who watched the movie "Pi" - Pressing Return.
12:37  cousteau`work: bye, and thanks
12:37  geirha: Sounds like /bin/sh is a symlink to dash on you system, so probably not.
12:42  hmw: it appears, that ed cannot be used similar to sed - from the command line - it seems to be more like vi - a) did I miss something in the man page? b) what would be the benefit of using ed for my tag replacement compared to sed?
12:43  lil_cain: It lets you edit things in place.
12:43  hmw: lil_cain: i can't translate that. I am trying to replace stuff in a big number of files
12:44  lil_cain: sed doesn't edit things in place. It creates a new file, and then copies that over the old file.
12:44  hmw: "things in place" - you mean just like with any editor?
12:44  lil_cain: yes.
12:45  lil_cain: but you can script ed
12:45  hmw: I see. I will keep that in mind and dive into it when I have my next research-attack.
12:45  hmw: Thank you!
12:48  ferret: I'm mystified under what circumstances it'd be useful to do DEFAULTSH=somesh sh stuff
12:48  ferret: when you could just do somesh stuff
12:49  ferret: or even sh() { somesh "$@"; }
12:59  Quanta: hi, i have a file with the following line: DistN0   =2.69227;      ErrDistN0=0.000363077; and i would to get: 2.69227     0.000363077. i tried this:awk -v size="$size" '/DistN0/ {printf "%d\t %f\t %f\n", size, $2, $3 }' $resultFile >> $meanDistance and i get $size 0.00000 0.0000.
13:01  Naib: use sed foe anything between = and l
13:01  Naib: ;
13:02  Quanta: sed is another bash command, right? it is not awk solution... if i understand correctly....?
13:03  Naib: then ask in #awk
13:03  Naib: if you want an awk solution
13:04  Felix00: hi, please help me learn BASH! check http://pastebin.org/309728
13:04  Felix00: please
13:04  trash: !guide > Felix00
13:04  greybot: Felix00: http://mywiki.wooledge.org/BashGuide
13:05  sdi: no .sed is *another* binary.but bash build-in
13:08  Felix00: please can you check my pastebin and tell me whats wrong? i asked and googled but everything seems fine
13:08  mattcen: Felix00: You need spaces before *and* after the square brackets
13:09  Felix00: ok
13:09  mattcen: [$edad should be [ $edad
13:09  brabo: also
13:09  brabo: propper quoting
13:09  brabo: [ "$edad" -eq "1" ]
13:12  mattcen: brabo: I can't see why the "1" needs quoting when you know exactly what it is; you should only need to quote unknown values, like the input $edad
13:12  Felix00: thanks
13:12  Felix00: now it alwais enter the first if block
13:12  Felix00: :S
13:12  Felix00: http://pastebin.org/309987
13:12  brabo: mattcen: thanks, i just quote everything as to not miss quoting something ;)
13:13  mattcen: That's fair enough too.
13:13  mattcen: Felix00: As brabo, you probably need '-eq' and friends instead of =, <, and >. Check 'man test'
13:13  mattcen: !test > Felix00
13:13  greybot: Felix00: help test <Enter> http://mywiki.wooledge.org/BashGuide/TestsAndConditionals | http://bash-hackers.org/wiki/doku.php/commands/classictest
13:13  mattcen: (or help test)
13:14  Felix00: mattcen, you sure? theyre not intended to be strings :S
13:15  Felix00: i read there are aritmetic operators
13:15  mattcen: Felix00: The less-than, greater-than, and equal to are for strings, the '-eq' '-gt' and '-lt' are for arithmetic
13:15  Felix00: i supposed for ints
13:16  Felix00: OK!! fine thanks a lot pals
13:17  mattcen: Also, if you're going to storea 18 in $mayoria, you should probably replace the 18s in the echos with that variable too, and again, as brabo, it is good practise to quote your variables during testing, just in acse
13:17  mattcen: case*
13:24  brabo: Felix00: no problem, glad to be able to help for once hehe :p
13:33  nicola_pav: hello. tryin to write a script that uses rsync
13:34  nicola_pav: i want to use rsync to copy files from source to dest
13:34  nicola_pav: i want rsync only to include file names with specific strings
13:36  lhunath: use rsync's include/exclude or pipe find to rsync and use its files-from
13:36  lhunath: alternatively; toss rsync and use cpio or pax or so.
13:37  nicola_pav: lhunath, can i pipe grep to rsync?
13:37  icqn: I have a file with two columns of float numbers; I need to modify the second column by 1./$2, where $2 are numbers of the second column and save it in a file, is it possible with bash and gawk, as one liner or something?
13:37  lhunath: you can pipe whatever you want to rsync
13:37  lhunath: whether it would make sense to do so is another matter entirely.
13:38  nicola_pav: and so rsync will only copy the files matched from grep?
13:38  lhunath: use find.
13:39  lhunath: I suppose you could pipe grep -l.
13:39  lhunath: read man rsync's information about files-from and have fun.
13:40  merzo: guys why    while read curline; do   done < "./loc.txt" reads line without first spaces at the beginning of the line
13:41  lhunath: merzo: because read trims them
13:41  lhunath: while IFS= read -r curline; do ..; done < loc.txt
13:41  nicola_pav: thanks
13:41  merzo: thnx!
13:44  taylanub: in a file-list, how can i remove all  foo/bar  IF  foo/  is in the list?
13:44  taylanub: (if there's no obvious way, i guess i could hack up something in with sed or so, and some tmp files)
13:45  lhunath: I'm not sure I understand what exactly you want to do
13:46  taylanub: there's a list of files (including directories, which BTW all end in /) stored in a file.  in this file, for each entry like 'foo/' i want to remove all of 'foo/...'
13:47  taylanub: well actually...
13:47  lhunath: define 'like' and '...'
13:47  taylanub: there's initially two file lists, and i want to diff them but exclude enties like  foo/...  if the whole directory foo/ is already in the diff
13:48  taylanub: like 'foo/' =  e.g.  '/usr/share'
13:48  taylanub: erm.. '/usr/share/'
13:49  lhunath: "if the whole directory foo/ is already in the diff" == "if every entry in the diff begins with foo/" ?
13:49  taylanub: no
13:50  taylanub: if the diff result has the line "/usr/share/" i want all of "/usr/share/..." to be excluded
13:50  zxd: what does this match: *[/]*)?
13:50  taylanub: e.g. "/usr/share/foo/bar"
13:50  zxd: what does this match: *[/]*)   ?
13:50  lhunath: zxd: any string that contains a slash.
13:50  taylanub: zxd: in 'case' you mean?  any string that includes '/'
13:50  zxd: case $foo in
13:51  lhunath: same thing as */*
13:51  zxd: why do I need []
13:51  zxd: ok
13:52  lhunath: you don't.
13:54  lhunath: taylanub: you have a list of filenames in a file.  each entry is a line.  if the list contains a directory, you want to remove all filenames that are contained in that directory from the list?
13:54  lhunath: for each directory in the list/
13:54  taylanub: yes
13:54  lhunath: ?
13:54  lhunath: is the list sorted?
13:54  taylanub: yes
13:55  taylanub: (it is the sorted diff of two such lists actually, if that helps)
13:55  taylanub: (i could use the two initial files if that's somehow easier)
13:56  lhunath: while IFS= read -r file; do [[ $file = */ ]] && dir=$file; [[ $dir && $file = $dir* ]] && continue; unset dir; echo "$file"; done
13:57  taylanub: cool, was just thinking of a while read loop as well.   thanks
13:57  taylanub: though is the IFS set really necessary there?
14:00  lhunath: probably not; but it will only matter in edge cases and in each of those it will do you good instead of bad.
14:00  lhunath: eg. filenames that end with spaces
14:01  SmokeyD: hey everyone. Is it ok to ask a sed question? I am trying to modify a csv file and keep only the first column with sed -e 's/^"\([a-zA-Z0-9-]\+\)",".*$/\1/g' $somefile. This works fine, unless there are special characters somewhere on that line, characters like é or à which are utf8 encoded for instance, or maybe latin1. Somehow sed doesn't include those characters in the .* wildcard, so those lines remain unchanged. Any ideas how to fix that?
14:01  taylanub: wow indeed, a line ending in a space is quite sneaky when using read
14:03  taylanub: SmokeyD: set a different locale
14:04  SmokeyD: taylanub: by setting LANG=en_US.LATIN1 for instance (it is now en_US.UTF-8)?
14:05  SmokeyD: taylanub: that indeed did the trick
14:05  SmokeyD: thanks
14:05  taylanub: whatever the file is encoded in.  doing 'file' on the file should show
14:06  SmokeyD: taylanub: cool. thanks
14:07  taylanub: lhunath: maybe i should have mentioned that if there's "foo/" in the list, i don't want dirs like "foo/bar/" either.  i think your code doesn't pay care to that, though i can think of how to fix it
14:18  taylanub: IFS=; <file while read -r line; do [[ $dir ]] && [[ $line == $dir* ]] && continue; [[ $line == */ ]] && dir=$line; echo "$line"; done
14:19  morpehth: anyone know how to redirect output to a gnome terminal?
14:19  lhunath: it does just fine in that case afaik.
14:20  bassliner: what's the maximum amount of characters a variable in bash could have?
14:20  lhunath: morpehth: redirect gnome terminal's fd to whatever fd you're writing output.
14:20  lhunath: probably stdout.
14:20  taylanub: bassliner: your RAM, probably
14:21  bassliner: taylanub: would that apply for $PATH too? or would there be other side effects when using bash with a giant $PATH variable?
14:21  taylanub: why would $PATH be giant?
14:21  bassliner: taylanub: because of insanity in front of the computer.
14:21  taylanub: i hope you don't want to put your whole FS into $PATH ...
14:22  bassliner: of course not.
14:22  morpehth: yeah, but what do I actually redirect to? gnome terminals have a name in /dev ?
14:22  taylanub: morpehth: usually it's /dev/pts/...
14:22  morpehth: cheers
14:22  taylanub: bassliner: you can put '.' in $PATH so executables in the current working directory can be called without ./
14:23  taylanub: (maybe you want that somehow)
14:23  bassliner: taylanub: i know that. the question was rather what limits the size of $PATH (or of other environment variables) in bash. and i was assuming the answer is "RAM" but i wasn't sure.
14:23  morpehth: is there a way of finding out which file in /dev refers to which xterm?
14:24  taylanub: morpehth: write to it :P  i don't know...
14:24  taylanub: bassliner: my guess is RAM. i'm not 100% sure either
14:24  Cyber_Beast: Is there any exit status of 'for loop'? Because I want to give condition if 'for loop' was not used for my given 'in' condition...
14:26  Cyber_Beast: Should I rephrase my question? Anyone?
14:26  bassliner: Cyber_Beast: a for loop iterates over elements of the list you give it to. it does not test conditions.
14:26  lhunath: bassliner: I don't think there is a limit on the size of environemnt variables.  if there is; POSIX should know.
14:26  lhunath: !posix
14:26  greybot: The POSIX standard defines what any modern unix should supply. Sticking to the commands and options in http://www.opengroup.org/onlinepubs/9699919799/utilities/contents.html will do wonders for the portability of your scripts.
14:26  bassliner: lhunath: thanks!
14:27  lhunath: Cyber_Beast: probably
14:27  taylanub: Cyber_Beast: yes, rephrase please :P
14:28  nicola_pav: hello. how can i use ssh tunnel on linux?
14:29  bassliner: nicola_pav: http://www.engadget.com/2006/03/21/how-to-ssh-tunnels-for-secure-network-access/
14:29  bassliner: nicola_pav: google, first hit.
14:29  nicola_pav: thanks
14:29  _pingu: cat a | xargs -ixx grep -c xx b returns grep: invalid option -- ' ' Here is an example line of a: - 0 0 1 0 0 - - - 0 0 - - - - - - - - - - - - - - - -
14:30  bassliner: _pingu: you probably have to end grep's options with "--"
14:30  Cyber_Beast: bassliner: Yes, I know that very well.. But I'm making a script in which user enters a path to find specific files.. then I have used for loop to delete those files interactively.... I want to give condition if my for loop was not entered, it means there are no matching files in to directory.. so I should display There are no matching files... This is my script... http://pastebin.ca/1966849
14:31  _pingu: bassliner: works, thanks. where can I rerad that in the manpages?
14:31  Cyber_Beast: taylanub: Yes, I had to! I'm new to bash scripts.. but damn they are most interesting thing i've ever come across. :)
14:33  taylanub: Cyber_Beast: TL;DR your code. :P   with "if my for loop was not entered", you mean e.g. if '*.C' matches no files?
14:35  Cyber_Beast: taylanub: Yes, if there are no .C or .c files into that directory
14:35  Cyber_Beast: then I want to display there are no such a files.
14:35  taylanub: except when you 'shopt -s nullglob',  *.C  will turn into a literal "*.C" if it matches no files
14:35  taylanub: what i would do:
14:36  taylanub: start the for loop with   test -f "$i"
14:36  taylanub: if it returns zero, you know that *.C turned into a literal '*.C' because it matched no files
14:37  bassliner: Cyber_Beast: well i would probably do a completely different attempt. you want to know if any files matching *.C exist in a specific directory, so that would be the first thing i would check for.
14:37  taylanub: (if there actually is a file that's named '*.C', that's no problem either)
14:37  jure_: hm ... taylanub ... was that **.C?
14:38  taylanub: jure_: sorry?
14:38  jure_: did you write "**.C will turn into ..."
14:38  taylanub: can't you see what i wrote? :P
14:38  jure_: I think my client interpreted your text as *bold*
14:39  Cyber_Beast: I tying to understand.. what are you saying
14:39  jure_: forget it, I cleared it up
14:39  Cyber_Beast: *I'm trying.. (sorry for typing mistake)
14:39  taylanub: jure_: whatever your client is, configure it so that even if it boldens text, make it not remove the *
14:40  jure_: taylanub: it doesn't, I thought it did
14:40  taylanub: that's a general advice...  (and no, there was a single *)
14:40  jure_: right
14:41  taylanub: jure_: ChatZilla is a plugin eh?
14:44  acidflash: hello
14:44  acidflash: if i have a job in crontabs
14:44  acidflash: and the file is per say /etc/myname.bash
14:44  acidflash: but i put it in the crontab as * * * * * /etc/myname.sh
14:44  acidflash: will it still execute ?
14:45  SmokeyD: acidflash: the contrab file will look for the file you specify (/etc/myname.sh). If it doesn't exist, then no, it will not execute
14:45  SmokeyD: so either use /etc/myname.bash in your crontab, or rename the file to myname.sh
14:46  acidflash: SmokeyD: ok thanks
14:47  SmokeyD: acidflash: np
14:47  taylanub: automatically looking for .bash when seeing .sh ???  that'd be lame. sounds like a windows feature :P
14:47  SmokeyD: :D
14:47  lhunath: SmokeyD: just get rid of the extension altogether
14:47  SmokeyD: lhunath: you're right, but tell that to acidflash :)
14:48  lhunath: extensions sound like a windows feature.
14:48  micols: is there a short compact way without while loops of displaying every 10 th file in a dir?
14:48  trash: a loop.
14:48  SmokeyD: well, they are usefull so you can see the file type directly from the filename. But that's it. Purely as a naming convention
14:48  taylanub: "10th file", sorted by what?
14:49  micols: sorted by name
14:49  cousteau`work: maybe you can use sed
14:49  SmokeyD: micols: but I would use a loop I think
14:49  lhunath: maybe you can use haskell.
14:49  acidflash: of this is somewhat of a dilemma
14:49  taylanub: a loop is short and compact enough for such a job...
14:49  acidflash: in my crontab i have this entry
14:49  acidflash: * * * * * /etc/squid/upxlcron.sh
14:49  acidflash: and it does stuff
14:49  acidflash: but hte file name in /etc/squid/
14:50  acidflash: is upxlcron.bash
14:50  acidflash: :S
14:50  trash: acidflash: Yeah, you just find a problem.
14:50  trash: found*
14:50  taylanub: absolutely sure there's no two files?
14:50  acidflash: trash: its working though, how is it working?
14:50  taylanub: cron version please?
14:51  trash: Check your cron log file.
14:51  cousteau`work: ls -1 | sed -n '10~10p'
14:51  acidflash: taylanub: how do i print it ?
14:51  taylanub: print what?
14:51  taylanub: ls /etc/squid
14:51  acidflash: taylanub: you lost me there, arent you asking for which version of cron I am using ?
14:52  taylanub: oh, that too
14:52  zplinux: say I got this simple loop
14:52  zplinux: for CTID in `ls /var/lib/vz/root/` ; do echo  ${CTID} ; done
14:52  acidflash: taylanub: or are you asking for a list of whats in /etc/squid ?
14:52  cousteau`work: micols: ls -1 | sed -n '10~10p'
14:52  cousteau`work: or   ls -1 | sort | sed -n '10~10p'
14:52  taylanub: acidflash: i also asked if there might be a second file there. which is named ...bash
14:52  zplinux: how to avoid echo if $CTID = 111 ?
14:52  acidflash: taylanub: here take a look
14:52  taylanub: !ls > cousteau`work
14:52  greybot: cousteau`work: Don't try to parse ls output. http://mywiki.wooledge.org/ParsingLs
14:52  zplinux: I mean what is the nop in bash
14:52  acidflash: root@103:/etc/squid# crontab -l
14:52  acidflash: # m h  dom mon dow   command
14:52  acidflash: * * * * * /etc/squid/upxlcron.sh
14:52  acidflash: 53 2 * * * /etc/webmin/cron/tempdelete.pl
14:52  evalbot: acidflash: bash: m: command not found
14:53  cousteau`work: taylanub: ok, ok...
14:53  acidflash: thats hte crontab
14:53  taylanub: acidflash: tell me this:  does /etc/squid/upxlcron.sh  exist?
14:53  acidflash: NOPE
14:53  acidflash: its .bash
14:53  taylanub: you sure there's not TWO of them? e.g. one a link to the other/
14:53  taylanub: ?*
14:53  acidflash: i can show you a ls -a of /etc/squid
14:53  zplinux: for CTID in `ls /var/lib/vz/root/` ; do  do [ ${CTID} -ne "111" ] &&echo  ${CTID} ; done
14:53  zplinux: ?
14:54  zplinux: or is there a nicer way
14:54  taylanub: !`
14:54  greybot: The backquote (`) is used in the old-style command substitution, e.g. foo=`command`. This syntax is deprecated in favor of foo=$(command). Backslash handling inside $() is less surprising, and $() is easier to nest. See http://mywiki.wooledge.org/BashFAQ/082
14:54  cousteau`work: taylanub: it's the only idea I had that didn't use loops
14:54  taylanub: cousteau`work: ok,  he should just use a loop though :P
14:54  acidflash: root@103:/etc/squid# ls -a
14:54  acidflash: .   cachemgr.conf  mime.conf.default  squid.conf.default  test.bash      upxl.sh
14:54  acidflash: ..  mime.conf      squid.conf         squid.conf.save     upxlcron.bash
14:55  erUSUL: !ls > zplinux
14:55  taylanub: acidflash: ok...   now something like  crond --version
14:55  greybot: zplinux: Don't try to parse ls output. http://mywiki.wooledge.org/ParsingLs
14:55  acidflash: no crond
14:55  acidflash: there is cron and crontab
14:55  zplinux: erUSUL: can I use find?
14:56  taylanub: acidflash: cron then
14:56  taylanub: or what's your distro?
14:56  cousteau`work: taylanub: i=1; for file in *; do [ $(($i%10)) = 0 ] && echo "$file"; i=$(($i+1)); done   <- like this, right?
14:56  taylanub: the package manager might be able to tell the cron version, acidflash...
14:56  erUSUL: zplinux: for CTID in /var/lib/vz/root/*; do ....; done
14:56  erUSUL: !caps
14:56  greybot: By convention, we capitalize environment variables (PAGER, EDITOR, ..) and internal shell variables (SHELL, BASH_VERSION, ..). All other variable names should be lower case. Remember that variable names are case-sensitive; this convention avoids accidentally overriding environmental and internal variables.
14:56  zplinux: erUSUL: oh right , now i remeber
14:56  cousteau`work: zplinux: for CTID in /var/lib/vz/root/*; do...
14:56  taylanub: cousteau`work: why not just [ $i -eq 10 ] ??
14:56  acidflash: v3
14:56  zplinux: but is my test condition right?
14:57  cousteau`work: cool, I've just repeated what erUSUL said
14:57  acidflash: it was in man crontab
14:57  taylanub: acidflash: there's a lot of crons from different people.  e.g. "dillon's cron"
14:57  cousteau`work: taylanub: the specs said it had to print one out of each 10
14:57  taylanub: cousteau`work: oh...
14:58  taylanub: he initially said '10th in each dir' though, didn't he?
14:58  amidelalune: what does this mean in the bash guide? :
14:58  cousteau`work: ("the specs" = "what micols said")
14:58  amidelalune: If you're appending a string that doesn't "look like" part of a variable name, you just smoosh it all together:
14:58  amidelalune:     var=$var1/.-
14:58  cousteau`work: taylanub: oh... well, I interpreted it like that
14:59  acidflash: taylanub: Im sorry im not quite sure how to pull up the cron version im googling
14:59  acidflash: its ubuntu 8.04
15:00  cousteau`work: "every 10th file" sounds like "every (10*n)th file"
15:00  amidelalune: I got it, bit the word smoosh is not in my dictionary :(
15:00  lhunath: funny
15:00  lhunath: amidelalune: try 'mash'
15:00  cousteau`work: or "put"
15:01  amidelalune: ;) lol
15:01  taylanub: cousteau`work: we should ask micols, but he seems to have vanished :P
15:01  cousteau`work: it's gonna be fun when we see a ping timeout of 10 minutes or so
15:05  amidelalune: i want to do a substitution like this ${var/tue/tuesday} and use a comman substitution for var like `date`
15:05  amidelalune: command*
15:06  koala_man: if that's the actual example, use date +%A
15:06  koala_man: otherwise no, you have to use a temporary variable
15:06  geirha: var=$(date)
15:06  amidelalune: no it's not,
15:06  amidelalune: i see, but can't it be done in one command?
15:07  zplinux: erUSUL: what is in /var/lib/vz/root I have dir which names are ,100,102,135,235 how can I set $CTID to get these values: {100,102,135,235} ?
15:07  koala_man: var=$(date) && echo ${var/tue/tuesday}
15:07  koala_man: that's one compound command
15:07  erUSUL: zplinux: only dirs?  /var/lib/vz/root/*/
15:07  koala_man: if you need it as one command for piping or whatever, use { .. }
--- Log closed Tue Oct 19 16:01:03 2010
--- Log opened Tue Oct 19 16:06:12 2010
16:06 --- Users 532 nicks [0 ops, 0 halfops, 0 voices, 532 normal]
16:07 --- Channel #bash was synced in 86 seconds
16:08  abou_7anash_009: yitz_: worked like a charm, thanks for the update, will research and study this more thoroughly
16:08  yitz_: np
16:09 --- Carmageddon1 is now known as Carmageddon2
16:09 --- Carmageddon2 is now known as Carmageddon
16:19  zplinux:  ls /mnt/net/*.tgz |grep -e "[0-9]" gives these:
16:19  zplinux: /mnt/net/vzdump-openvz-100-2010_10_19-17_54_36.tgz
16:19  zplinux: /mnt/net/vzdump-openvz-101-2010_10_19-18_00_37.tgz
16:20  zplinux: how can I parse the three digits like 100 and 101?
16:20  zplinux: I tried: ls /mnt/net/*.tgz |grep -e "[0-9]{3}"
16:20  zplinux: but its no good
16:21  yitz_: !ls
16:21  greybot: Don't try to parse ls output. http://mywiki.wooledge.org/ParsingLs
16:21  yitz_: !pe
16:21  greybot: Parameter Expansion is the expansion of a parameter: "$foo", "$1". You can use it to perform string operations: "${file%.mp3}", "${0##*/}". Remember to *always* quote them. See http://mywiki.wooledge.org/BashSheet#Parameter_Operations
16:22  JR_w: I have a file with list of about 400 items each preceded by consecutive number.  I have another file with the numbers of items I want to remove from the main list. How do I do it?
16:23  yitz_: !comm > JR_w
16:23  greybot: JR_w: compare two sorted files line by line: useful for finding lines in one/both/neither files. See faq 36
16:24  JR_w: Hmmmm... ok.  Thanks
16:34  lhunath: zplinux:
16:34  lhunath: # IFS=- read _ _ var _ <<< /mnt/net/vzdump-openvz-100-2010_10_19-17_54_36.tgz; echo "$var"
16:34  evalbot: lhunath: 100
16:36 --- Evixion` is now known as Evixion
16:37  cph: I've got a binary that wants its parameters like BLAH --file x --file y --file z .. is there any way i can use filename expansion but get it to prefix it with --file?
16:37  zplinux: lhunath: cool thanks, where should I read on this trick?
16:37  lhunath: !faq 1 > zplinux
16:37  greybot: zplinux: http://mywiki.wooledge.org/BashFAQ/001 -- How can I read a file (data stream, variable) line-by-line (and/or field-by-field)?
16:39  lhunath: cph: build the arguments with an array.
16:39  lhunath: for file in *; do args+=(--file "$file"); done; command "${args[@]}"
16:40  zplinux: IFS=- read _ _ var _ <<< /mnt/net/*.tgz ; echo "$var"
16:40  zplinux: fails
16:41  juk_: how to reverse line?
16:43  juk_: I have format: 'A B blala bla la' how to remove A?
16:43  juk_: helo?
16:45  piti: hi there
16:45  piti: on the very bottom of http://mywiki.wooledge.org/BashFAQ/005 , there's typos on the two last lines, isn't it ?
16:46  piti: echo "${@:(-1)}" → echo "${arr[@]:(-1)}" ?
16:47  lhunath: zplinux: ...
16:47  lhunath: zplinux: bash is not psychic.
16:47  lhunath: what effect could you possibly expect that to have?
16:48  lhunath: !loops > zplinux
16:48  greybot: zplinux: Loops repeatedly execute a block of code. See http://mywiki.wooledge.org/BashSheet#Loops
16:48  zplinux: right
16:48  zplinux: ok, I will finsh these two bugs, then get back to this fun parsing
16:48  nDuff: piti, ${@} is an array, too, just a special one
16:49  nDuff: piti, ...so no, it's not necessarily a typo; it's just indexing into the argument list.
--- Log closed Tue Oct 19 17:58:22 2010
--- Log opened Tue Oct 19 17:58:43 2010
17:58 --- Users 533 nicks [0 ops, 0 halfops, 0 voices, 533 normal]
17:59 --- Channel #bash was synced in 83 seconds
18:01  Josay: ~/win 3
18:01  Josay: oops
18:02  zplinux: almost forgot to ask about sed
18:02  zplinux: sed -i "/$127.0.0.1/d" file
18:02  zplinux: why is $ at the begining?
18:02  zplinux: I find no mention that I can use the tail sign at a start of a line
18:02  zplinux: so why does it work?
18:06  Bushmills: http://www.phpguru.org/downloads/PCRE%20Cheat%20Sheet/PHP%20PCRE%20Cheat%20Sheet.pdf
--- Log closed Tue Oct 19 18:15:37 2010
--- Log opened Tue Oct 19 18:16:02 2010
18:16 --- Users 525 nicks [0 ops, 0 halfops, 0 voices, 525 normal]
18:17 --- Channel #bash was synced in 88 seconds
18:34  Aniar: outside of normal recursion concerns (data / variable handling, etc.) any issues with recursively calling a bash script?
18:35  greycat: shouldn't be.
18:35  greycat: For performance reasons, you could try to do it as a recursive function instead of an entire recursive process invocation.
18:35  Aniar: one-time use script
18:35  greycat: Also bear in mind that on most OSes you'll have a per-user process limit.
18:36  Aniar: greycat: looking at going no more than depth of 4 or 5
18:36  Aniar: just trying to figure out best way to go that deep
18:36  hotwings: how do you build an array of filenames, including filenames containing spaces
18:36  hotwings: (hopefully using find)
18:37  Aniar: !find -exec
18:37  Aniar: !find
18:37  greybot: http://mywiki.wooledge.org/UsingFind
18:37 --- taylanub0 is now known as taylanub
18:37  Aniar: hotwings: see above.  find -exec {}; I think is what you need
18:40  ychaouche: [ls related] Why doesn't line 4 show zzz but line 6 does in http://paste.pocoo.org/show/277489/ ? I don't know if this is bash related or not...
18:40  greycat: You are running "ls zzz" which produces an empty output because there are no files in the directory you named.
18:41  greycat: On line 6 you are running "ls zofia zzz" and your version of ls chooses to handle the mix of file-and-directory in the way you see.
18:41  ychaouche: so the completion is done by bash before it is given to ls ?
18:42  greycat: yes
18:42  ychaouche: ah ok
18:51 --- Weust` is now known as Weust`afk
18:58 --- caemir_ is now known as caemir
18:58  hotwings: thanks aniar, will look into it
19:10 --- Uqbar_ is now known as Uqbar
--- Log closed Tue Oct 19 19:16:38 2010
--- Log opened Tue Oct 19 19:17:00 2010
19:17 --- Users 532 nicks [0 ops, 0 halfops, 0 voices, 532 normal]
19:18 --- Channel #bash was synced in 85 seconds
19:20  ProLoser: hello
19:20  ProLoser: i need to export a env variable apparently?
19:20  ProLoser: i thought i could just set it for use in the current script
19:20  greycat: We don't know what you need.
19:21  ProLoser: how would i do that?
19:21  greycat: Do what?  Use a variable?
19:21  geirha: You can set a variable in your script and use it later ... you don't need to export it for that.
19:21  ProLoser: if i want to change an env var, do i set it and then export it, or can i just set it?
19:21  geirha: s/later/later in the script/
19:22  greycat: In bash, any change to an environment variable is automatically re-inserted into the environment.  In Bourne shell, not so.
19:22  ProLoser: geirha: its an env var used only for the duration of the script
19:22  greycat: But I still don't know what you're ASKING.
19:22  ProLoser: hmmm
19:22  greycat: If it's only used IN the script, then it does not need to be exported at all.
19:22  ProLoser: okay nvm i'll have to try it out
19:31  Linex: what is pts ?
19:31  taylanub: pseudo terminal screen
19:32  Kharec: f/
19:32  taylanub: (that was quite improvised but probably true anyway :P)
19:32  greycat: !nabq
19:32  greybot: Not A Bash Question. Ask the channel that supports your software, hardware, or OS.
19:32  Linex: taylanub: ah yes. Like when I open a new tab on konsole.
19:33  greycat: It's your operating system's name for a pseudo terminal device.
19:33  greycat: Ask your OS channel if you care about it more than that.
19:33 --- Yvemath_ is now known as Yvemath
19:33  twkm: ''man pts''
19:34  twkm: though strictly speaking ... ''whatis pts''.
19:34  taylanub: (so it was 'slave' after all, not screen)
19:34  Linex: :0 is the first tty of the system ?
19:35  greycat: NOT A BASH QUESTION
19:35  taylanub: Linex: go to your os channel.   (:0 sounds like an X display)
19:35  greycat: :0 is either a smiley or an X window system display identifier
19:36  Linex: oh ok. ok guys I will ask somewhere else. Thanks.
19:36  twkm: and keep ignoring your man pages, they are useless!
19:37  greycat: If he's not even figured out the difference between a terminal and an X display, the man pages may be quite over his head.
19:37  Linex: twkm: no need for sarcasm.
19:37  twkm: sure there is.
19:37  cthuluh: twkm: no need for manpages.
19:42  tsolox: without using 'stat', what are the other ways to get a file's timestamp in numeric format, like 10202010 for Oct 20 2010.
19:43  tsolox: the modification time would be fine.
19:43  greycat: That is quite possibly the worst conceivable numeric format in which you could express that date.
19:43  twkm: abuse ls -l's output, and pray.
19:43  greycat: Well, 2-digit year would be worse.  So, almost-worst.
19:43  twkm: probably better to install finfo.
19:44  greycat: !faq parsing
19:44  greybot: http://mywiki.wooledge.org/BashFAQ/087 -- How can I get a file's permissions (or other metadata) without parsing ls -l output?
19:44  pgas: I guess dichotomy + touch and [ -nt ] could work
19:45  pgas: (just joking) gnu find -printf? why do you want to avoid stat?
19:46  greycat: find -printf is hardly the worst answer
19:46  greycat: Unless he uses it to write the date in that MMDDYYYY format.  Then it would be a very bad answer.
19:46  StrikerST: hi
19:48  tsolox: pgas: the system i'm on, does not have stat..
19:50  pgas: maybe it has perl?
19:50  Calligaris: Hi I was think if there are someway to get when a page on firefox is load, with shell script?
19:50  greycat: Only if you can find a way to make firefox tell you this.
19:50  greycat: So, find a firefox channel and ask them.
19:50  tsolox: pgas: it has perl, yes
19:52  pgas: tsolox: then you can probably use perl
19:52  greycat: just like the wiki page says
19:53  Calligaris: greycat: thanks ^-^
19:55  StrikerST:  question.. im still struggling on this http://pastebin.com/b1wg1rGZ I have a bunch of ip addresses 1 per line and each block of addresses is seperated by a blank line... I want to read each block of addresses and save it to a file that starts with begin and end each block of addresses gets a new file name.... my code only keeps reading the first block and saving it to a different file name... any advice?
19:56  greycat: block=""; while IFS= read -r line; do if [[ $line ]]; then block+="$line"$'\n'; else printf %s "$block" >> whateverfile; fi; done < input
19:57  greycat: Oops, forgot to empty the block.
19:57  greycat: block=""; while IFS= read -r line; do if [[ $line ]]; then block+="$line"$'\n'; else printf %s "$block" >> whateverfile; block=""; fi; done < input
20:00  StrikerST: k thanks
20:03  michas: hi is there a way to let foo|bar return false whenever foo returns false? (I use it in combination with "set -e" to kill the script if errors occur, but it does not see the error because of the pipe...)
20:03  greycat: use the PIPESTATUS array after the pipeline has finished to learn the exit statuses of the individual commands
20:05  pgas: you might want set -o pipefail
20:05  RenatoSilva: anyone knows if mingw's bash.exe is real? echo $SHELL == "/bin/sh"
20:06 --- Celelibi_ is now known as Celelibi
20:06  greycat: The SHELL variable is used by programs that are NOT your shell, in order to decide what shell to run when you hit ! or the like.
20:06  greycat: It has nothing to do with what shell you are currently in.
20:06  greycat: The most reliable way I've found to learn what shell you are in on a Unix-like system is ps -p $$
20:07  greycat: This has a reasonably high chance of working on SysV, BSD, csh, sh, the works.
20:10  RenatoSilva: ri is giving me weir output like http://pastie.org/pastes/1233239/text, a buddy told me the weird parts are colors for shell
20:10  greycat: shells don't have colors.  terminals do.
20:11  greycat: (some terminals)
20:12  taylanub: greycat: about your solution to StrikerST's question: am i right in that it doesn't print the last block if it doesn't end in a blank line?
20:12  greycat: yes
20:13  paxl: Question for you all: when I do cd in a function in bash.. when I quit taht function .. do the new working directory is brought with me ?
20:13  greycat: yes, as long as you did not execute the function in a subshell
20:13  trash: # cd /; f() { cd /tmp; }; f; pwd
20:13  evalbot: trash: /tmp
20:14  taylanub: generally, calling a function is like typing its contents manually. (correct me)
20:14  paxl: is there a way to protect or I need to use pushd / popd or subshell ?
20:14  greycat: "protect"?!
20:14  greycat: !wayttd
20:14  greybot: What Are You Trying To Do?
20:15  paxl: protect was not the right word .. sorry.. Is there a way to avoid that beside using pushd / popd and sub-shells ?
20:15  trash: Why do you want to avoid it?
20:15  greycat: there's always   cd -
20:15  Bushmills: why do you use cd at all?
20:15  greycat: Most people want the opposite of what you want -- they're trying to make a cd "stick" and it isn't.
20:15  greycat: Then we have to explain to them how subshells work.
20:16  paxl: I need to go to a directory to do and `hg tags` to get a tag list...
20:16  paxl: greycat, yup I know a bit about subshell and how to make it stick :)
20:16  paxl: cd - is a good idea
20:16  greycat: I'd go with (cd ... || exit; hg tags) myself.
20:17  greycat: Otherwise the error checking and deciding when you need to use cd - can get involved.
20:17  Bushmills: i'd try to pass directory as arg, instead of changing
20:17  paxl: Oki.. Thanks then !
20:17  greycat: The last thing I need is another version control monstrosity to learn, so I'm just assuming his hg command is like 'make'.
20:19  paxl: greycat, you just make me laught .. Thanks :)
20:19  paxl: yes it's like make..
20:21  paxl: Bushmills, yay.. no more cd !.. -R options :D
20:21  paxl: I should not be that lasy sometime
20:37  Rug: Does anybody have much experience with iptables that would mind helping me out?   I have asked in #iptables, but did not get a reply.
20:38  greycat: Your second attempt after #netfilter should've been your OS channel.
20:38  retrospectacus: that depends if your problem is related to bash
20:39  Rug: greycat: ok, sorry to have botherd you.  I just asked in here because I know the folks in here are smart, and have helped me with a tricky problem before.
20:39  timeout: is there anything that I should be aware of using sudo in a bash script?
20:39  twkm: not if you can think clearly.
20:40  timeout: I want to issue a standard set of commands to connect to a wlan and would like to automate it
20:40  timeout: twkm: I don't mind entering my passwd at the terminal...
20:41  twkm: then why use sudo?
20:42  twkm: however, that isn't quite what i meant.
20:42  twkm: given ''foo ; bar'' when does bar run?
20:42  timeout: hmmm... I have no idea
20:42  twkm: then you will probably have an issue using sudo.
20:43  timeout: right :/
20:43  greycat: It runs when `foo' has exited.
20:43  timeout: ah, ok...
20:43  twkm: now ... given ''sudo foo ; bar'' when does bar run, and would it run as root?
20:44  timeout: well, I need to log onto two networks, my home network and the university, so it'd be great if I could run a script which would take home|uni as an argument and start everything for me
20:45  twkm: *shrug*
20:45  timeout: well, I think my sudo command is set for 5mins or something-- whatever the default is...
20:45  twkm: /me wanders off
20:45  timeout: twkm: ok, 'bye.
20:45 * nDuff waits for timeout to ask the question twkm posed
20:45  nDuff: s/ask/answer/
20:56  Barnerd: Does shopt -s extglob also apply to Parameter expansion?
20:56  greycat: yes
20:57  davidPTgal: whats the command is bash to return only the "foo" in the /path/foo ?
20:57  greycat: !basename
20:57  greybot: basename(1) can strip the directory and extension from a path. (a/b/c.d -> c.d or c). Or you can use a parameter expansion: "${path##*/}" or "${path%.*}"
20:57  Barnerd: greycat: thanks
20:58  Barnerd: parameter expansion saves you a fork and tends to be faster :D
20:59  twkm: davidPTgal: no command, it would be parameter expansion.  though there is a utility too.
20:59  Barnerd: greycat: Should've used my google fu first :D http://mywiki.wooledge.org/glob
21:00  ket: !arrays
21:00  greybot: An array maps numbers to strings. Bash 4 also has associative arrays (maps strings to strings). See http://mywiki.wooledge.org/BashSheet#Arrays
21:00  Barnerd: Has exactly the thing I was looking for... x=${x##+([[:space:]])}; x=${x%%+([[:space:]])}
21:00  greycat: !faq trim
21:00  greybot: http://mywiki.wooledge.org/BashFAQ/067 -- How can I trim leading/trailing white space from one of my variables?
--- Log closed Tue Oct 19 21:14:35 2010
--- Log opened Tue Oct 19 21:14:55 2010
21:14 --- Users 538 nicks [0 ops, 0 halfops, 0 voices, 538 normal]
21:16 --- Channel #bash was synced in 84 seconds
21:25  quitr: hello
21:25  quitr: i have a very puzzling bash problem
21:25  quitr: for me at least
21:26  twkm: set -x is your friend.
21:26  quitr: who, me?
21:26  greycat: Everyone.  Yes, you.
21:26  quitr: eh
21:26  quitr: anyway
21:26  quitr: can i paste 3 lines in here?
21:27  greycat: You've already wasted 7.  You might as well.
21:27  quitr: ret=`ec2-describe-instances --filter tag:clustername\=$CLUSTER_NAME \ --filter tag:role\=centralmanager \ --filter instance-state-name\=running`
21:27  quitr: oh nice it came out as 1 xD
21:27  quitr: do you see anything wrong with that line?
21:27  greycat: Use of deprecated `, missing quotes around parameter expansion, extraneous \ all over it for no obvious reason.
21:27  quitr: because i know $CLUSTER_NAME is correct by echoing it right before that
21:28  quitr: well it was in 3 lines greycat
21:28  quitr: anything that would cause errors
21:28  quitr: or unexpected execution
21:28  greycat: Use of deprecated `, missing quotes around parameter expansion, extraneous \ all over it for no obvious reason.
21:28  greycat: All of those could cause errors.
21:28  quitr: well deprecated stuff shouldn't cause problems really
21:28  quitr: until it's fully phased out
21:28  quitr: and i explained the slashes
21:28  greycat: I won't even attempt to guess how the `...` interacts with those fucking backslashes.
21:28  greycat: No you didn't.
21:29  quitr: the command was on 3 lines in my script
21:29  quitr: like i said above...
21:29  greycat: How does that explain 5 backslashes?
21:29  quitr: oh those
21:29  quitr: those aren't supposed to be there
21:29  quitr: lol
21:30  quitr: greycat: so quotes only need to be around $CLUSTER_NAME correct?
21:31  nDuff: quitr, that is indeed the only place in that line you're doing parameter expansion, yes.
21:31  poisonbit: quitr, foo= to something that is not a single word or a integer, is better quoted ="foo bar",   try echoing the command without `` and you will see how bash expands it, or use set -x as greycat said. = does not need \,
21:32  greycat: If his *implication* was that he replaced two of the newlines with backslashes when he pasted the shitty thing, then that would explain 2 of them, but not 5.
21:32  quitr: i was trying stuff out
21:32  quitr: i thought i had to escape the = sign or sth
21:32  greycat: Of course he doesn't understand that he merely IMPLIED that the backslashes had ANYTHING to do with the number of lines.  He didn't actually STATE anything.
21:33  quitr: because it isn't meant to be assigning values in the command
21:33  greycat: OK, then we can add "making up random shit" to the list of errors.
21:33  quitr: :/
21:34  quitr: vim hilights it like clustername=$CLUSTER_NAME is doing an assignment
21:34  quitr: is that the case in bash?
21:34  quitr: or is vim just wrong
21:34  greycat: Then stop using highlighting.
21:34  davidPTgal: does anyone know a bash command that turns '/home/usr/myscript' into 'myscript' ?
21:34  poisonbit: I think the = mean a param for ec2-describe-instances who will parse it
21:35  greycat: !basename > davidPTgal
21:35  greybot: davidPTgal: basename(1) can strip the directory and extension from a path. (a/b/c.d -> c.d or c). Or you can use a parameter expansion: "${path##*/}" or "${path%.*}"
21:35  greycat: Didn't we already TELL YOU that?
21:35  quitr: right poisonbit, that's what i intend to happen
21:35  poisonbit: davidPTgal, put it into $PATH
21:35  quitr: i just don't want bash doing an assignment with it first
21:36  greycat: 14:57  davidPTgal> whats the command is bash to return only the "foo" in the
21:36  greycat:                    /path/foo ?
21:36  greycat: 14:57  greycat> !basename
21:36  greycat: 14:57  greybot> basename(1) can strip the directory and extension from a path.
21:36  greycat:                 (a/b/c.d -> c.d or c). Or you can use a parameter expansion:
21:36  greycat:                 "${path##*/}" or "${path%.*}"
21:36  greycat: Good, I wasn't imagining it.
21:36  Tramp: see, completely different problem.  /path/foo vs. /home/usr/myscript
21:36  poisonbit: I missundertood the question
21:37  davidPTgal: greybot, thanks =)
21:37  StrikerST: ugh
21:37  StrikerST: im still having problems =/
21:38  StrikerST: hey greycat
21:38  StrikerST: you there still?
21:38  yeah44: how do I add one sapce and one # at front of each line?
21:39  greycat: sed 's/^/ #/'
21:41  poisonbit: or if line is in a variable in a loop,   "${line/#/ }"
21:42  poisonbit: misunderstood again, i shut up now
21:43  StrikerST: greycat I cant seem to pull out them ip addresses! http://pastebin.com/q6VUWq29 the loop seems to exit without doing anything
21:43  StrikerST: the top part is the file im reading
21:44  TheBonsai: y0
21:45  StrikerST: yo
22:19  poisonbit: which trap is RETURN ? i do not see it in trap -l
22:19  greycat: what makes you think there is such a thing?  what are you trying to do?
22:19  poisonbit: I'm reading at man page, "Any command associated with the  RETURN  trap  is  executed before execution resumes."
22:20  twkm: bash has a few synthetic traps.
22:20  cthuluh: didn't know this one
22:20  greycat: It's not in ``help trap'' either.  Is it only in the man page?
22:20  twkm: debug, return, err, ...
22:21  greycat: I hate having to try to find things in the man page....
22:21  greycat: Ah, good, reverse-searching for 'trap' from the bottom actually takes me to the right section.
22:21  twkm: "trap" isn't so hard, or so numerous.
22:21  greycat:            builtin for details of its effect on the DEBUG trap.  If a
22:21  greycat:            sigspec is RETURN, the command arg is executed each time a shell
22:21  greycat:            function or a script executed with the
22:22  greycat: (Truncated.)
22:22  greycat: So, not in help, and broken in the man page.  Whee!
22:26 * greycat stares at that bit of bash.1 and tries to figure out why it's broken exactly
22:27  poisonbit: so... what is the best way to atach some code at the end of each function of my program... a global variable that stores the commands? other function? or can I use this synthetic trap ?
22:28  greycat: The RETURN trap has nothing to do with the 'return' command.
22:28  greycat: The best way is to PUT THE CODE THERE.
22:28 * helo *always* puts the code there
22:29  helo: BASH. Put the Code There.
22:30  greycat: People always think they need to do fancy shit.  I don't understand it.
22:30  greycat: Maybe it's C++ brain-damage.
22:30  greycat: Anyway, it appears that my nroff is broken.
22:30  greycat: A line that begins with \fB.\fP is omitted entirely.
22:31  greycat: If there's anything before the \fB.\fP then it's fine.
22:31  xelister: lol @ c++ brain-damage
22:31  greycat: Hmm... if I put whitespace before the \fB.\fP then it becomes a sort of bullet-point.
22:31  xelister: if you want brain-damage and possible 2d6 bad mutations, use php
22:32  poisonbit: I don't know c++, but i'm seriously brain damaged, using /bin/bash4 and reading man bash(3)
22:33  poisonbit: alias manbash4='man ~/src/bash/bash-4.1/doc/bash.1'  # fixed
22:34  greycat: "man filename.1" does not work on uix
22:34  greycat: unix*
22:34  greycat: must be another GNUism
22:35  cthuluh: HP-UX broken? :>
22:35  greycat: What, am I the only one here who worked with commercial unix flavors for years and years?
22:36  greycat: You read man pages in files by running "nroff -man filename.1 | less"
22:36  greycat: Doesn't everyone know that?
22:36  xelister: *crickets*
22:36  greycat: Just like everyone knows how to pipe tar through compress.  Right?
22:37  xelister: *crickets*
22:38  Marchitos: anyone expert about Reg xp?
22:38  greycat: there's a whole #regex channel full of them
22:39  jeffx: so I've got a bash success story if you want a distraction from all the questions you get asked?
22:42  poisonbit: jeffx, sure, talk, or I will make other question from the man page
22:43  jeffx: Sorry.  boss is calling....one sec.
22:43  poisonbit: What means "stoppable/restartable" in BUGS in "Shell builtin commands and functions are not stoppable/restartable."  ?
22:43  greycat: You can't do kill -STOP and kill -CONT
22:44  poisonbit: thanks
22:44 --- muzer is now known as MuzerAway
22:46  jaik: Hello bash users - I've written a small script, that helps me to change the name of file-endings, f.ex. if you have a lot of *.JPG files that should be moved to *.jpg files: http://pastebin.com/6qyHvaKD  -- the script works pretty well - but if there is no file which could be used by the for loop, i get the following error: "mv: target `test.jpg' is not a directory"  - any ideas what happens here?
22:47  yitz_: !nullglob > jaik
22:47  greybot: jaik: nullglob: a shell option (shopt) which causes unmatched globs to expand to nothing, rather than themselves. Example: shopt -s nullglob; files=(*); echo "There are ${#files[*]} files."
22:47 --- MuzerAway is now known as muzer
22:47  geirha: jaik: You're missing a shebang, and you should quote the parameter expansions
22:49  jaik: i thank you very much!
22:49  geirha: !faq rename
22:49  greybot: http://mywiki.wooledge.org/BashFAQ/030 -- How can I rename all my *.foo files to *.bar, or convert spaces to underscores, or convert upper-case file names to lower case?
22:49  jaik: i'm wondering if there isn't a unix program doing that job *duck
22:50  geirha: There are programs to do that, but no standard ones.
22:51  c00kiemon5ter: hi all, to source a file I know two ways. 1. use 'source 'path/to/file' 2. use '. /path/to/file' Is one of those prefered? is there some difference I should know? what's POSIX?
22:52  Barnerd: So I have shopt -s extglob but ${parameter/pattern/string}
22:52  Barnerd: does not work as I expect. MUst be me....
22:52  geirha: source works in bash. the dot command works in all POSIX compliant shells.
22:52  c00kiemon5ter: thanks geirha :)
22:52  Barnerd: line='[section1]' ; echo ${line/[+([[:alnum:]])]/}
22:53  geirha: !posix > c00kiemon5ter
22:53  greybot: c00kiemon5ter: The POSIX standard defines what any modern unix should supply. Sticking to the commands and options in http://www.opengroup.org/onlinepubs/9699919799/utilities/contents.html will do wonders for the portability of your scripts.
22:53  c00kiemon5ter: nice
22:53  Barnerd: I'm expecting an empty string from that echo....
22:54  geirha: Barnerd: escape the [ ] if you want to match literal [ and ]
22:54  Barnerd: Ah, it's the [ and ][
22:54  Barnerd: Thought I had tried that already
22:54  Barnerd: Yup, and failed......
22:55  Barnerd: Oops.... typo... thanks!
22:55  geirha: Don't forget quotes.
22:56  geirha: $var is not the same as "$var". You usually want the latter.
22:59  taylanub: (sometimes it is)
23:04  btiernay__: Silly question not related to bash, I suppose this should go to gnu... but is there a way to get du to sum a filtered set of files for getting a total from an ls subset?
23:04  btiernay__: if there is a better channel, please let me know :)
23:05  Uqbar: btiernay__: you can supply the file names to du and have the grand total with "-c"
23:05 --- jzacsh_ is now known as jzacsh
23:05  btiernay__: Uqbar, ah, I was using -c at one point, but it includes all the other files as well
23:05  geirha: So remove the useless ls and add the -c to du.
23:05  btiernay__: doh, sorry for wasting your time
23:06  btiernay__: just needed a | grep total at the end
23:07  btiernay__: Thanks again
23:07  btiernay__: For future reference, aside from the man pages, is there a channel suitable for such questions?
23:08  geirha: ... until there's a file with total in its name. Maybe you want tail or awk instead.
23:09  btiernay__: geirha, that was to remove the individual files from the output
23:09  btiernay__: of which there are many
23:09  btiernay__: I just wanted the grand total
23:09  geirha: btiernay__: Right, and what do you think happens if one of the files contain the string "total" somewhere in its name?
23:10  btiernay__: geirha, heh, well i'm sure based on context this isn't the case, but duly noted
23:10  helo: maybe safer, if you're going the hacky way, to do a tail -n 1 at the end?
23:11  geirha: The total will always be on the last line, so it would be more efficient.
23:11  helo: instead of the grep total
23:11  btiernay__: helo, good point
23:11  btiernay__: just didn't want to flood my buffer so the previous command's output is still visible
23:14  Barnerd: Great to be doing some bash scripting again :D
23:14  Barnerd: It's been a good while
23:17  RandIter: what is the correct way to copy a large file to /dev/null? is it "cp /my/file /dev/null" or "cat /my/file >/dev/null" or something else?
23:17  seanp2k: how can I take a file, 'foo.txt', and only display the lines that are longer than 5 chrs?
23:18  seanp2k: RandIter: why would you want to do that?
23:18  Barnerd: RandIter: What are you trying to accomplish
23:18  RandIter: seanp2k: to time it
23:18  Barnerd: RandIter: dd
23:18  RandIter: actually i just want to measure read speed
23:18  helo: you are trying to time how long it takes to copy the file?
23:18  RandIter: yes
23:19  RandIter: just to read the file, actually
23:19  seanp2k: dd if=/some/file of=/dev/null
23:19  Barnerd: RandIter: dd if=/my/file of=/dev/null bs=1M
23:19  helo: just read speed will be different than cp speed
23:19  seanp2k: RandIter: probably play with block size too, as Barnerd stated
23:19  geirha: RandIter: The cp would attempt to replace /dev/null with the file, which is most likely not what you want.
23:19  seanp2k: RandIter: it's not a really good disk benchmark tho
23:19  RandIter: helo: how do i accurately determine read speed then?
23:19  seanp2k: RandIter: you probably want something like bonnie++ http://www.cyberciti.biz/tips/linux-hard-drive-speed-benchmark-software-howto.html
23:19  helo: RandIter: a disk benchmarking program?
23:20  geirha: RandIter: pv < /some/file > /dev/null
23:21  jaik: Don't know, if it is the right channle to ask - but could someone recommend a command-line icq-client
23:22  helo: wrong chan yes, but irssi is good :)
23:22  geirha: The channel for your OS would be a better place to ask
23:22  RandIter: geirha: where would i find pv?
23:22  jaik: thank you :)
23:22  RandIter: or where would i get pv from?
23:23  geirha: RandIter: Ask your OS channel.
23:23  helo: geirha: was that a typo?   "pv < /some/file > /dev/null"
23:24  RandIter: geirha: ok got it. thanks.
23:24  geirha: helo: No.
23:25  geirha: pv reads from stdin, outputs it to stdout, and writes how fast it goes to stderr
23:28  seanp2k: so, print lines from a file that are longer than 5chrs ?
23:29  Barnerd: jaik: bitlbee!
23:29  geirha: grep '.\{6,\}'
23:29  Barnerd: jaik: bitlbee runs as a daemon and you can add all kinds of IM networks to it!
23:29  Barnerd: jaik: So you can use ICQ from irssi :D
23:30  jaik: Barnerd: sounds interesting - I'm just testing out finch, but I'll try tomorrow! Thank you
23:31  Barnerd: seanp2k: exec 7</that/file ; while read -u 7 line ; do ; if [ ${#line} -ge 5 ] ; then echo $line ; fi ; done
23:33  Barnerd: jaik: /me has irc (freenode et al), google talk, Facebook chat, M$ Messenger, Twitter updates all in irssi thanks to bitlbee
23:34  jaik: Barnerd: twitter... - cool, i think that was the program i searched for
23:35  jaik: Barnerd: is there a guide you can recommand or did you just use the guides from the homepages?
23:40  geirha: awk 'length($0) > 5'
23:41  Barnerd: geirha: There's more efficient ways of doing that indeed :D
23:41  dpecka: heya
23:41 * Barnerd was looking for a bash only method :D
23:41  dpecka: can i somehow from outside (as a owner or as a root<) get a `set -x` output from already running bash?
23:42  geirha: Actually, awk 'length > 5' will suffice ($0 is the default)
23:43  dpecka: what?
23:44  helo: dpecka: what problem are you trying to solve?
23:45  geirha: dpecka: Only by editing the script to allow it, then run it again.
23:46  dpecka: okay
23:46  dpecka: thanks .. i was afraid of that - heh. more likely pretty sure but i had to ask
23:46  geirha: You can trace it (e.g. with strace in linux) while it's running, but that doesn't give you set -x output.
23:46  dpecka: sure
23:46  dpecka: am doing it already ;<)
--- Log closed Tue Oct 19 23:55:12 2010
--- Log opened Tue Oct 19 23:55:35 2010
23:55 --- Users 539 nicks [0 ops, 0 halfops, 0 voices, 539 normal]
23:56 --- Channel #bash was synced in 82 seconds
--- Log closed Wed Oct 20 00:00:31 2010
