--- Log opened Mon Nov 15 00:00:05 2010
--- Day changed Mon Nov 15 2010
00:00  gniourf_gniourf: don't mix (( )) with -eq
00:00  geirha: -eq is an operand for the [ command. In (( you use ==
00:00  Rav3nSw0rd: ok, that makes it so much nicer and familiar for me XD
00:00  Rav3nSw0rd: the -eq -le etc were giving me headaches when I was reading the tutorial for bash XD
00:01  geirha: Rav3nSw0rd: Then you've read a crappy tutorial.
00:01  geirha: The guide in /topic is the one to read.
00:02  Rav3nSw0rd: I'll keep that in mind XD thanks, it's finally working now:: http://pastebin.com/rLQSHuZ7
00:03  gniourf_gniourf: Rav3nSw0rd, but it gives you the wrong result
00:03  Rav3nSw0rd: well, the only thing I didn't check yet -_-'
--- Log closed Mon Nov 15 00:09:23 2010
--- Log opened Mon Nov 15 00:09:49 2010
00:09 --- Users 552 nicks [0 ops, 0 halfops, 0 voices, 552 normal]
00:09  Rav3nSw0rd: ok, so, one thing I think I'm not understanding... what's the difference between $(( )) and (( ))?
00:09  gniourf_gniourf: try it
00:10  gniourf_gniourf: # echo ((2+3))
00:10  evalbot: gniourf_gniourf: bash: syntax error near unexpected token `('
00:10  gniourf_gniourf: ooops
00:10  gniourf_gniourf: # echo $((2+3))
00:10  evalbot: gniourf_gniourf: 5
00:10  gniourf_gniourf: ahhhh
00:10  Rav3nSw0rd: so... (( )) is void function call and $(( )) returns what's inside?
00:11 --- Channel #bash was synced in 84 seconds
00:11  gniourf_gniourf: $(( )) returns what's inside, definitely
00:11  lhunath: there is no such thing as void or returning.
00:11  geirha: Rav3nSw0rd: (( expr )) is a command that returns true if expr is non-zero
00:11  gniourf_gniourf: he needs some loose language to understand
00:11  lhunath: $(( )) expands to the value of the last expression.
00:11  Rav3nSw0rd: ok
00:11  geirha: Rav3nSw0rd: $(( expr )) gets replaced by the result of the expression
00:12  lhunath: good; feed him correct language.
00:12  lhunath: feeding wrong language just adds to his confusion
00:12  Rav3nSw0rd: wait, what's wrong what's right? .-.
00:13  Rav3nSw0rd: so (( )) returns true false, and $((  )) expands to what the inside evaluates to?
00:15  geirha: Yes
00:15  Rav3nSw0rd: k, thanks again for the help
00:15  gniourf_gniourf: ok this is the fastest:
00:15  gniourf_gniourf: # s=0; for((i=3;i<=1000;i+=3)); do ((s+=i)); done; for((i=5;i<=1000;i+=5)); do ((s+=i)); done; for((i=15;i<=1000;i+=15)); do ((s-=i)); done; echo $s
00:15  evalbot: gniourf_gniourf: 234168
00:16  geirha: It can be done alot faster than that
00:16  gniourf_gniourf: how? oO
00:16  geirha: By not iterating ~1000 times
00:16  Rav3nSw0rd: by incrementing by 3 and 5 and skipping dupes
00:16  ksk: is it possible to get the processid from a programm executed via bash? any bash-processid stuff is welcome.
00:17  gniourf_gniourf: I'm not iterating 1000 times
00:17  Rav3nSw0rd: but, easier this way XD
00:17  ksk: s/from/of/
00:17  gniourf_gniourf: iterating 333+199+66
00:17  gniourf_gniourf: #echo $((333+199+66))
00:17  gniourf_gniourf: # echo $((333+199+66))
00:17  evalbot: gniourf_gniourf: 598
00:18  ksk: like "screen -blafoo; $(tell me pid of this screen)"
00:19  geirha: gniourf_gniourf: Well, it can be done without iteration
00:19  gniourf_gniourf: oh of course
00:19  gniourf_gniourf: there's a closed formula for it
00:20  gniourf_gniourf: knowing that sum(k,k=1..n)=k(k+1)/2
00:20  gniourf_gniourf: ooops
00:20  gniourf_gniourf: knowing that sum(k,k=1..n)=n(n+1)/2
00:21  gniourf_gniourf: and to get to the result you'll basically do what I did: compute the sum of the 3k, of the 5k and subtract the sum of the 15k
00:21  Rav3nSw0rd: thanks again, night
00:22  gniourf_gniourf: so it should be something like 3*(333*334)/2+5*(200*201)/2-15*(66*67)/2
00:22  gniourf_gniourf: and I prove it
00:22  gniourf_gniourf: # echo $((3*(333*334)/2+5*(200*201)/2-15*(66*67)/2))
00:22  evalbot: gniourf_gniourf: 234168
00:22  gniourf_gniourf: \o/
00:24  geirha: :)
00:45  bombshell: Hello
00:45  bombshell: If someone could take a look at this script someone is attempting to help me with but I'm runing into issues
00:46  bombshell: http://pastebin.com/YYwr2Phd
00:50  thera: can somebody explain this to me  < /dev/urandom tr, the redirection.
00:51  barjac: bombshell: if [ $(pgrep gnome-panel) != "" ] ; then      ???
00:52  bombshell: barjac: What about it?
00:52  bombshell: barjac: I'm not very familiar with Bash and have spent 2 hours to get the script to work
00:53  barjac: bombshell: well to me your logic is inverse == >> !=
00:55  bombshell: barjac: I'm not sure what that means?
00:55  bombshell: wait wait
00:55  barjac: bombshell: you are checking if gnome-panel is up by looking for a pid that is not ""
00:56  bombshell: is the the paste with != or == that I gave you
00:56  bombshell: I have locally !=
00:56  barjac: bombshell: the paste has ==
00:56  bombshell: The issues I'm having now is line 35
00:56  bombshell: If you don't \(TM\), I get error on line 35, to many arguments
00:57  bombshell: but doesn't match the string Microsoft Microsoft 3-Button Mouse with IntelliEye(TM)
01:02 * hashashin nas
01:06  barjac: bombshell: try double quotes around the string
01:07  bombshell: brabo: You in here too, oO
01:07  bombshell: barjac: Tried, fail still
01:07  bombshell: :/
01:07  bombshell: http://pastebin.com/73bpNEbh
01:07  bombshell: ^^ here's what I have
01:10  barjac: bombshell: and what's the error now
01:11  bombshell: ./mouseSwitcher.sh: line 35: [: !=: unary operator expected
01:12  wart___: has anyone used a program called dmenu?  it takes as input a list and allows the user to narrow down that list by typing and then outputs the entry on enter.
01:12  wart___: Hence you can do joe $(ls *.tex | dmenu)
01:12  wart___: unfortunately, it only runs in X, so I was looking to emulate the behaviour in a non-X environment, either via bash or via dialogue/ncurses.
01:12  wart___: thought i'd ask if someone hhad tried to do this.
01:13  barjac: bombshell: what's the output of this in a terminal..
01:13  barjac: xinput list "Microsoft Microsoft 3-Button Mouse with IntelliEye(TM)"
01:15  bombshell: http://pastebin.com/8ueEHc0N
01:21  barjac: bombshell: http://pastebin.com/vbYLR0g3 try that (use RAW to copy back from pastebin)
01:27  bombshell: barjac: It works, thanks allot
01:27  barjac: bombshell: no problem - glad it worked :-)
01:28  bombshell: c ya later
01:34  Rui: hey guys
01:34  Rui: what is a bash?
01:35  Rui: is it when i hit you?
01:35  Rui: sir eaglescreen left cos he is a noob
01:35  Rui: thats what ping timeout means
01:37  yitz_: Rui: See the topic
01:46  grepper: best way to test if a file with a certain extension exists in a dir ?  if [[ $(find . -name *.wav) ]]; then ... ?  if ls *.wav 2>/dev/null; then ...? Using shopt -s nullglob and (*.wav) or somesuch ?
01:47  yitz_: shopt -s nullglob ; files=(/path/*.wav) ; if [[ $files ]] ; then
01:49  grepper: okay.  Just curious, why is that better than first two examples ... because it doesn't use external command ?
01:51  yitz_: find checks recursively so it's behaviour is different
01:52  grepper: could add a -maxdepth 1
01:52  yitz_: ls should give the same results if the specs say it's exit status is non-zero when the argument is an invalid filename
01:53  grepper: ls gives proper exit status, yes
02:38  crimeboy: qiot \qiot
02:40  lgc: Hi, I wonder why this code throws garbage after a little while: http://pastebin.com/RqFrGf0G . I'd appreciate your help.
02:46  Riviera: lgc: x and y become too big
02:46  rmacd: Not bash, as such, but say one of my binaries is sitting in a location other than that where it would usually be found. How'd I go ahead and pass that particular binary's path to ./configure?
02:46  rmacd: All of the others remain where they are.
02:48  Riviera: # ((a = 2 ** 63 - 1)); echo $a; echo $((a + 1))
02:48  evalbot: Riviera: 9223372036854775807
02:48  evalbot: Riviera: -9223372036854775808
02:48  Riviera: lgc: that's basically what happens.
02:49  cthuluh: adding the directory of this executable to you PATH, then exporting PATH and then running ./configure doesn't jelp?
02:49  Riviera: rmacd: maybe: PATH=/location/other/than/that/where/it/normally/would/be/found:$PATH
02:53  Riviera: rmacd: or even: PATH=/other/locataion:$PATH ./configure
02:53  Riviera: location*
02:53  Riviera: :)
02:54  rmacd: Ha, d'ya know what I went ahead and did?! Me and my excitement went and put PATH=/path/to/the/dir, and forgot the :$PATH!
02:55  Riviera: :)
02:56  lgc: Riviera: Thanks, I would think of an overflow issue too, but if I take any two numbers of the Fibonacci sequence, like 1734025211727978131596850372843719107168651819712326877926895128666735145224 and divide them manually in bc -l, I still get the correct answer.42044301 and
02:56  rmacd: As it turns out, the binary already exists in /bin, along with all the other stuff needed obvs, so I'm creating the local hierarchy with symlinks to the actual binaries, and I'll just go ahead and point my envvar to that path while I'm building. I wonder if this is the sensible way to go about things.
02:56  cthuluh: rmacd: feeling excited at compiling things? 8)
02:56 * rmacd hates shared hosts
02:56  Riviera: lgc: it's not an bc issue, but a bash one
02:57  Riviera: lgc: if you'd do the addition in bc and store the result in bash variables, it would work
02:57  Riviera: lgc: because then, bash only would treat them as strings
02:57  lgc: Riviera: so what would you change in the code?
02:57  cthuluh: lgc: implement this in bc/dc only
02:57  Riviera: lgc: but you do arithmetics in bash (the addition, not the division)
02:58  rmacd: cthuluh: Pissed off, more like! I don't mind it at all, it just gets messy though when I'm compiling on a system I can't update required binaries for. So I end up having to comp dependencies which are more up-to-date than those the hosting provider can be bother providing.
02:58  Riviera: lgc: either what cthuluh says or not using bash at all for this :)
02:58  cthuluh: rmacd: time to chnage your OS. have you considered SCO OpenServer ? ;)
02:59  lgc: Riviera, cthuluh, thanks. It's a Bash exercise, so I will have to stick with it.
02:59  Riviera: lgc: a lazy solution would be just to change
03:00  rmacd: cthuluh: Or just dump the provider. Thankfully, I'm doing this for someone else, so I'll be back to debian (my stomping ground ;-) ) when I'm done! Hooray!
03:00  Riviera: lgc: sum=$((x + y))
03:00  Riviera: lgc: to
03:00  Riviera: lgc: sum=$(bc <<< "$x + $y")
03:01  lgc: Riviera: that goes beyond my Bash knowledge. What is with "bc <<..."?
03:01  Riviera: lgc: also, you might want to either define a termination condition (like when the result of the division dos not change anymore, or reached a certain accuracy) or to raise the "exactness" of bc by using bc's internal variable "scale"
03:02  Riviera: lgc: "command <<< string" is similar to "echo string | command", so here it's just a shorthand for echo "$x + $y" | bc
03:02  Riviera: !<<< > lgc
03:02  greybot: lgc: Here strings. Similar to here documents: The word after <<< and a newline are passed to the standard input of a command. Syntax: ''command <<< "some sentence"'' (Like ''echo "some sentence" | command'', but without the overhead of the subshell)
03:02  Riviera: lgc: nothing directly related to your problem
03:03  lgc: Riviera: I see, thanks.
03:05  Riviera: lgc: bc <<< 'scale = 64; x = 0; y = 1; while (1) { sum = x + y; x = y; y = sum; y / x }'
03:05  rmacd: Fuuuuuuuck. One dep down and another 17 pop up! No kidding! It's like whack-a-mole.
03:05  Riviera: justfortherecord
03:05  Riviera: :)
03:05  cthuluh: lgc: though <<< is rather bash specific, so be careful if your exercise consists in writing it in standard sh
03:11  lgc: cthuluh: OK. By the way, if I do  ...sum=$(echo "$x + $y" | bc -l)... I run into trouble again:
03:11  lgc: (standard_in) 1: illegal character: \.
03:11  lgc: The thing does work, but the it throws the error after a while.
03:12  Riviera: lgc: ah, right.
03:12  Mikaze: Greetings...
03:12  Riviera: lgc: that's because bc by default wraps lines
03:12  Riviera: lgc: inserting \ and newlines into its output
03:13  Mikaze: Got a list of collected youtube  links and would like to remove any duplicates.  Any idea for what to use?
03:13  Riviera: lgc: if you do use GNU bc, you could set the environment variable BC_LINE_LENGTH to a sufficing high value, if not, you could just remove all backslashes and newline characters from the output :))
03:13  lgc: Mikaze: use sort | uniq .
03:14  Riviera: lgc: like  sum=$(echo "$x + $y" | bc | tr -d '\\\n')
03:14  Riviera: lgc: no worries, I also think this is very ugly. :)
03:15  lgc: Riviera. Indeed ;).
03:15  Mikaze: lgc: Thank you!  uniq's the thing I was lookin' fer.
03:16  lgc: Mikaze: It'd go something like "sort file | uniq".
03:16  Riviera: Mikaze: if you want to keep the order, you could use: awk '!a[$0]++' youtube-link-file > dupless-link-file
03:16  wenryd: 8-)
03:16  lgc: Riviera: now you have to explain that to me too!
03:17 * Mikaze figured as much from just the commands.  Thank you.
03:17  cthuluh: now Riviera you're all alone :P
03:17 * Mikaze jams to edit more scripts.
03:17 * Mikaze waves...
03:18  lgc: Riviera: what's "!a[0]++"?
03:18  Riviera: lgc: well
03:18  Riviera: lgc: it's $0, not only 0
03:18  lgc: Riviera: yes, sorry.
03:19  Riviera: lgc: awk's syntax generally consists of pairs of patterns and statements
03:19  Riviera: lgc: the patterns usually somehow match some current part of the input
03:20  lgc: Riviera, I know some AWK, but the program you used just puzzles me.
03:20  Riviera: lgc: the example awk-script: awk '/hehe/ { print }'
03:20  Riviera: lgc: has the condition /hehe/, which is true if the regular expression hehe matches the current input record, and the statement print, which prints if the condition is true
03:21  Riviera: lgc: if the condition is omitted, statements will be executed for all input records, if the statements are missing, the input is output when conditions match
03:22  Riviera: lgc: the awk script i used only consistied of a condition, so, if this condition is true, the default action (to print the current record) will be executed
03:22  Riviera: lgc: also, here, the records are lines
03:22  Riviera: lgc: for every input line, $0 is set to the current input line
03:22  Riviera: lgc: and then that condition is evaluated
03:23  Riviera: lgc: a[] is an array, a[$0] is the array with the content of the current line as index
03:23  Riviera: lgc: ++ is an postfix-operator increasing the variable it stands after by one
03:24  Riviera: lgc: so, the element "hehe" of the array a will be incremented by a[$0]++ if the current input line is "hehe"
03:24  Riviera: lgc: in awk, a numerical value of 0 is "false", everything else is true
03:25  Riviera: or wait
03:26  Riviera: lgc: ah, not, that's correct.
03:26  wenryd: say hello
03:26  cthuluh: an empty string also means false
03:27  Riviera: cthuluh: yes, that's what i meant to say with "numerical"
03:27  Riviera: lgc: so, the first time a line with the content "hehe" is processed,
03:27  Riviera: lgc: a["hehe"] is 0, because by default variables in awk are initialed to 0 or the empty string
03:28  Riviera: lgc: also there's an exclamation mark in the beginning of the condition, reversing its truth-value
03:28  Riviera: lgc: for the first "hehe" line, a["hehe"] is 0, which is false, but !false makes it true, hence executing the default action: Printing the line,
03:28  lgc: Riviera, the only thing I'm missing is the negation. I don't see how that can weed out repeated lines.
03:29  Riviera: lgc: afterwards the postfix-operator ++ is executed, incrementing the array element "hehe" by 1
03:29  Riviera: lgc: so, the next time a line "hehe" is processed,
03:30  Riviera: lgc: a["hehe"] will be 1, which is true, with !true being false, preventing the default action to be executed
03:30  Riviera: lgc: not ... printing the line.
03:31  Riviera: lgc: also, again incrementing the element, but without any effect later
03:31  Riviera: lgc: because !2 and !3 and !4 are all false
03:32  Riviera: lgc: no overflow will occur, because awk uses floating point numbers
03:32  Riviera: lgc: that's it, I believe.
03:33  lgc: Riviera: I'm grateful for your patience and dilligence.
03:33  Riviera: at least no one so far shouted "go to #awk for this crap!" ;-)
03:34  lgc: Riviera: For sure you're not in #ubuntu.
03:36  Riviera: :)
03:36  Riviera: off for today, nite :)
03:36  lgc: Riviera: the AWK program you came up with is so beautifully compact that I am still missing some parts.
03:37  lgc: Riviera: and that is AFTER your lengthy explanation.
03:51  cthuluh: lgc: consider this one, less cryptic and perhaps a bit more efficient:   awk '!($0 in seen_lines) { seen_lines[$0] = 1; print; }'
03:53  cthuluh: if the current line is not already an index of the seen_lines array, then make it an index and print it. next time you meet the same line, it will be present as an index in the array seen_lines, and it won't be printed
03:54 --- pyoor_ is now known as pyoor
--- Log closed Mon Nov 15 04:11:18 2010
--- Log opened Mon Nov 15 04:11:39 2010
04:11 --- Users 524 nicks [0 ops, 0 halfops, 0 voices, 524 normal]
04:12 --- Channel #bash was synced in 81 seconds
04:21  galaxywatcher: uggh. Am I the only one who struggles with scp syntax EVERY single time I use it?
04:25  galaxywatcher: Has anyone created an alternative to scp the way ncftp is an alternative to ftp?
04:27  cthuluh: sftp/lftp are fine too. what's wrong with scp?
04:27  cthuluh: there's an #openssh chan too
04:31  galaxywatcher: scp's error messages do not help to solve issues. The man page does not provide any examples. I would guess that most users use scp for simple secure put and secure get operations, yet scp will cp a file in your local directory if the syntax is off e.g. I would say an error message would be more appropriate in this case.
04:33  galaxywatcher: It is not the most intuitive syntax in the following case: scp -P 1022 user@1.1.1.1:/path/to/filename.txt .
04:33  galaxywatcher: I forgot about the trailing . and the error message was useless.
04:33  cthuluh: sorry but I find it very consistent
04:34  galaxywatcher: It is not so intuitive to use that trailing . to copy the file to the local directory. I didn't have that there and the error message did not help.
04:35  cthuluh: scp will show you usage(), as most unix tools do when you don't follow the syntax
04:35  mattcen: The trailing dot is required for standard 'cp' too...
04:36  galaxywatcher: mattcen: yes. I know about the standard cp trailing dot..The problem is less scp than me. And my usage of the tool as a secure file getter as opposed to a 'network cp' program.
04:38  galaxywatcher: With a little more practice with the tool it will probably appear more consistent.
04:38  mattcen: What about rsync? I'm not sure it handles a different ssh port in a straightforward manner though, and it does have a similar syntax, so you might have the same issues...
04:39  cthuluh: ever considered FNS / AFS / fooFS? even sshfs if your OS has fuse support
04:39  cthuluh: NFS*
04:39  galaxywatcher: cthuluh: No I have never even heard of these.
04:40  cthuluh: start with sshfs if you're on linux. it's easy to setup
04:40  galaxywatcher: cthuluh: I will look into it...Cheers.
--- Log closed Mon Nov 15 06:58:47 2010
--- Log opened Mon Nov 15 08:19:47 2010
08:19 --- Users 512 nicks [0 ops, 0 halfops, 0 voices, 512 normal]
08:21 --- Channel #bash was synced in 80 seconds
08:23  Rav3nSw0rd: ah, guess I missed it XD thanks again yitz_
--- Log closed Mon Nov 15 09:07:12 2010
--- Log opened Mon Nov 15 09:12:21 2010
09:12 --- Users 517 nicks [0 ops, 0 halfops, 0 voices, 517 normal]
09:13 --- Channel #bash was synced in 82 seconds
09:20  Rav3nSw0rd: um, huh, oops, factor is a built in function -_- good to know... now to rename it and make my own XD
09:22 --- peshalto_ is now known as peshalto
09:24  krzee: !factor
09:24  krzee: help factor and man factor didnt exist, i didnt know that was a builtin
09:27  Rav3nSw0rd: yea, still trying to program it though, just ... can't use that word
09:28  Rav3nSw0rd: is there a way to have a function return?
09:28  Rav3nSw0rd: as far as I've found out, return can only return 0 or !0 to indicate error...
09:32  koala_man: Rav3nSw0rd: you can only return 0-255 as the functions return code. to get strings out, echo them in the function and catch them via command substitution
09:33  Rav3nSw0rd: could you give an example of catching please?
09:37  lhunath: yitz_: it's linked from the sheet.  most people tend to see a wall of text and come back here to ask more stupid questions. :-/
09:38  krzee: http://mywiki.wooledge.org/BashFAQ/084
09:38  krzee: @ Rav3nSw0rd
09:39  lhunath: !faq 2 > Rav3nSw0rd
09:39  greybot: Rav3nSw0rd: http://mywiki.wooledge.org/BashFAQ/002 -- How can I store the return value/output of a command in a variable?
09:40  krzee: oh cool
09:40  krzee: !faq 84
09:40  greybot: http://mywiki.wooledge.org/BashFAQ/084 -- How do I return a string (or large number, or negative number) from a function?  "return" only lets me give a number from 0 to 255.
09:45  Rav3nSw0rd: got it, thanks!
09:54  deavid: i was taking a look to getopts, and i wonder if it can handle long name options like --log="file"
09:54  deavid: all the examples i've seen are about single letter options
09:55  lhunath: no.
09:56  lhunath: long options are silly anyway.
09:56  lhunath: on the prompt; you want to type as little as possible.
09:56  lhunath: if you want to document your options; write a man page.
09:56  lhunath: or add a -h option.
10:23 --- Rada_ is now known as Rada
10:27  Mike1: hi!
--- Log closed Mon Nov 15 10:27:45 2010
--- Log opened Mon Nov 15 10:34:16 2010
10:34 --- Users 524 nicks [0 ops, 0 halfops, 0 voices, 524 normal]
10:34  lhunath: sure, you can also do [[ $string = $string1 || $string = $string2 || ... ]]
10:35  lhunath: or [[ $string = @($string1|$string2|$string3) ]] with extglob on.
10:35 --- Channel #bash was synced in 85 seconds
10:46  Mike1: lhunath: works, thanks! =)
10:55  KamBo: hey
10:55  slava_dp: hi, what is the best method of storing formatted text block in a bash script? I'd like to sed it and print it out depending on the script options. And it works, but loses line endings.
10:56  KamBo: i have a wierd issue... i have a cron that runs a .sh file that runs specific PHP scropts but they each require user authentication.. is there a way to get around this in the .sh or will ihave to remove authentication from those files?
10:56  Bushmills: cat << EOF     ...    EOF
10:56  _Guest_: hi, how can i easily clean the path passed as argument in bash script? (remove / ../ ~/ )
10:57  koala_man: KamBo: what kind of authentication? a password for sudo or ssh or something?
10:57  KamBo: well actually user authentication to access the PHP script
10:58  koala_man: KamBo: so you want to run it as another user?
10:59  koala_man: _Guest_: see if you can install a tool like realpath
10:59  KamBo: well i'd need to be able to run it as a site user.. am i able to log a user in before running the script?
11:01  _Guest_: and how can i check if $var is int number ?
11:02  Naib: !test > _Guest_
11:02  greybot: _Guest_: help test <Enter> http://mywiki.wooledge.org/BashGuide/TestsAndConditionals | http://bash-hackers.org/wiki/doku.php/commands/classictest
--- Log closed Mon Nov 15 11:07:41 2010
--- Log opened Mon Nov 15 11:08:26 2010
11:08 --- Users 532 nicks [0 ops, 0 halfops, 0 voices, 532 normal]
11:08  lhunath: !faq valid > _Guest_
11:08  greybot: _Guest_: http://mywiki.wooledge.org/BashFAQ/054 -- How can I tell whether a variable contains a valid number?
11:08  slava_dp: Bushmills: I've completely forgotten that! Thanks!
11:09 --- Channel #bash was synced in 86 seconds
11:09  zxd: what's the command that prints the data that is the same between two files
11:10  koala_man: comm?
11:28  harpal: I want to grep process, if I do ps -ef | grep ssh then it returns two rows, which also include grep
11:29  harpal: I dont want grep to be included also
11:29  erUSUL: harpal: use pgrep
11:30  harpal: erUSUL: but does it available in all versions now?
11:31  erUSUL: harpal: dunno; if pgrep is not aviable you can try  "ps -ef | grep ssh | grep -v grep"
11:31  harpal: erUSUL: ohh okay
11:33  drake1: hello, did you know that nested quotes in m4 can allow bash to use the builtin eval?
11:34  drake1: just kidding. I have a completely different question
11:34  drake1: does bash for mac not use pipes?
11:35  Naib: erUSUL. harpal      ps -ef | grep [s]sh    # if you really want todo process management that way
11:35  Naib: drake1. it should do. bash for windows uses pipes so no reason why they would gimp the mac version
11:37  drake1: Naib: ok
11:37  bassliner: is there a good way to handle long command line parameters like "--option" options in bash scripts?
11:37  drake1: Naib: some of their character input devices don't have the |
11:37  erUSUL: !faq easily
11:37  greybot: http://mywiki.wooledge.org/BashFAQ/035 -- How can I handle command-line arguments (options) to my script easily?
11:59  drake1: (if they think a single process translation buffer is faster than a pipe, they better do their math)
12:03  Ejdesgaard: Hi, I need some input on how to do error-handling in bash... http://dpaste.com/275453/
12:04  drake1: Ejde: when a process exit has an error state, then it's an errror
12:06  drake1: if, until, elif etc. tokens, are used to check for errors and do the corresponding phase
12:08  drake1: they go under the class of "control structures" in some dialects
12:09  poisonbit: Ejdesgaard, also, programs use to print errors to STDERR  and you can "handle" (redirect) it :   program  2 >> /path/to/err.log   or  cmd 2>/dev/null
12:10  erUSUL: !trap
12:10  greybot: If you want processes to communicate, the easiest way (besides a pipe) is to use signals. See: help trap <Enter>, man kill and man bash /SPECIAL PARAMETERS | http://mywiki.wooledge.org/ProcessManagement
12:13  lhunath: Ejdesgaard: begin by writing correct code.
12:13  lhunath: Ejdesgaard: quote all your PEs.
12:14  lhunath: then you'll see PUBLIC_SERVERS will stop working.  this is a good thing: it shows that you're doing it wrong.
12:14  lhunath: !varcap
12:14  greybot: By convention, we capitalize environment variables (PAGER, EDITOR, ..) and internal shell variables (SHELL, BASH_VERSION, ..). All other variable names should be lower case. Remember that variable names are case-sensitive; this convention avoids accidentally overriding environmental and internal variables.
12:14  lhunath: !arrays > Ejdesgaard
12:14  greybot: Ejdesgaard: An array maps numbers to strings. Bash 4 also has associative arrays (maps strings to strings). See http://mywiki.wooledge.org/BashSheet#Arrays
12:15  lhunath: if you want to check every command for errors; then add conditionals to each command or use set -e.
12:15  lhunath: !set-e
12:15  greybot: "set -e" tells bash to abort the execution of the script when an unchecked command fails. A command is checked when it is in an if, while, until, &&, || or ! check.
12:15  lhunath: you can trap on ERR to do something before bash aborts the script when a command fails.
12:15  drake1: sometimes the `export' command can save the envrironment / export too
12:15  lhunath: uh.  what?
12:16  drake1: if you don't export a variable, then your changes won't propagate
12:16  lhunath: you have a knack for stating the obvious in a completely wrong way
12:18  drake1: ie. non exported variables, don't get forwarded
12:18  Naib: oO
12:19  drake1: no matter the (capital / lower) case
12:21  lhunath: oh; that's what you're referring to.
12:22  Kharec: hi
12:23  _Guest_: if i created script with SUID bit, owner root and group of user B.. and is flagged g+x .. why it tells 'operation not permitted' to user B on some actions in script?
12:23  n1x0n: suid on script is ignored
12:24  drake1: _Guest_: because your script is not allowed to change the file
12:24  lhunath: by most kernels.
12:24  lhunath: no, because the UID hasn't been changed.
12:24  _Guest_: so how to let user B do some limited actions with elevated rights?
12:25  lhunath: let user B elevate his rights and run your script.
12:25  lhunath: why should your script have the responsability to elevate its rights?
12:25  n1x0n: _Guest_: for example sudo with nopass , or be evil and write a C wrapper ;-)
12:25  lhunath: it's none of its business.
12:25  _Guest_: whatfor is suid bit then? why it cannot work with scirpt?
12:26  lhunath: I told you, and n1x0n did too.  The kernel ignores the SUID bit on interpreted executables.
12:26  lhunath: most do, anyway.
12:26  drake1: _Guest_: script run the interpreter which needs the suid bit
12:26  n1x0n: _Guest_: for security reasons kernel will drop SUID if this is a interpreter file (i.e. that starts with #!)
12:27  drake1: scripts themselves don't switch the uid
12:27  lhunath: tell B to run su or sudo.  then run your script.  how hard is that?
12:27  lhunath: sudo ./myscript
12:28 * n1x0n nods
12:28  _Guest_: someone must first setup sudo :P
12:36  lesshaste:  how would I search for duplicated phrases or words? I mean things like "that that" or "will use will use" ?
12:37  drake1: what about "I love you babe. I love you ..."
12:38  n1x0n: _Guest_: you can try to cheat and write a simple C wrapper that does setreuid() and execve("path/to/your/script") , that's very dirty though
12:39  lesshaste: drake1: no..I mean that follow directly
12:39  lesshaste: so "I love you I love you babe" would do
12:39  lesshaste: but the punctuation is wrong in any case :)
12:41  drake1: lesshaste: first you compile a phrase branch collector, then you offset by that and carry the sub branches in a similar manner
12:41  drake1: s,manner,fashion
--- Log opened Mon Nov 15 12:43:08 2010
12:43 --- Users 536 nicks [0 ops, 0 halfops, 0 voices, 536 normal]
12:44 --- Channel #bash was synced in 85 seconds
12:48  _Guest_: n1x0n: if there are many scripts.. do such wrapper for all of them? o_O or some another dirty hack for this already dirty 'elevated executor' ? .. i rather setup that sudoers file
12:49  n1x0n: _Guest_: well yes you can, but it's as secure as giving your root password to all these users or just having one root user ;-)
12:50  n1x0n: from security point of view - this idea sucks a lot , you'll feel dirty (guaranteed)
12:51  n1x0n: and you can't use bash as I'm pretty sure it dropps privileges (>= v3)
12:53  koala_man: bash only drops privileges if uid and euid are different
12:53  Bushmills: if there are many scripts, requiring root privileges for execution, while being executable by users, something is wrong is the setup
12:53  Uqbar: lesshaste: yes you can, but you'll have to change it so it doesn't match empty strings and if you want it to only catch repeated words (instead of, say, letters inside words or punctuations), you'll have to put in some word-boundary anchors.
12:54  drake1: if you need to run the script as root, it's better to file it under a specific runlevel for `init' to execute
12:55  n1x0n: koala_man: good point
12:55  drake1: since a user shell may be exploited to redirect the sudo commands
12:56  drake1: (by a few memory accesses)
12:57  lesshaste: Uqbar: would the spaces not to do that?
13:06  koala_man: drake1: how do you mean?
13:07  drake1: how to exploit a user shell or how to set up a runlevel`?
13:07  Uqbar: lesshaste: well, a word might be at the beginning or at the end of the line, or end with punctuation instead of whitespace.
13:08  lesshaste: Uqbar: true but I am only interested in literal duplication. So "love. love" is not a duplication
13:08  lesshaste: so we only have to deal with line breaks, I suppose
13:09  drake1: koala_man: first you switch to single use mode, then you cat the scripts, then back to the default or special runlevel
13:12  StaRetji: Hi there folks, I've just installed my ubuntu again and I've copied bash script I've used on old system. On new system I'm getting following error [: 78: -lt: unexpected operator and relevant line from the script is if [ $LAST_SYNC_TIME -lt $NEW_SYNC_TIME ]; then
13:12  StaRetji: Can someone give my a tip what it could be the problem
13:13  lhunath: !tests > StaRetji
13:13  greybot: StaRetji: In bash; consistently use [[ .. ]] to test strings or files and (( .. )) to test numbers or arithmetics. Do *NOT* use [ .. ] in bash, *only* in sh. See http://mywiki.wooledge.org/BashSheet#Tests
13:13  drake1: StaRetji: maybe your time variables aren't set
13:13  lhunath: StaRetji: also; whenever you use $foo's (Parameter Expansions) you need to quote them.  "$foo"
13:13  lhunath: StaRetji: (( lastSyncTime < newSyncTime ))
13:13  lhunath: !varcap > StaRetji
13:13  greybot: StaRetji: By convention, we capitalize environment variables (PAGER, EDITOR, ..) and internal shell variables (SHELL, BASH_VERSION, ..). All other variable names should be lower case. Remember that variable names are case-sensitive; this convention avoids accidentally overriding environmental and internal variables.
13:14  koala_man: drake1: how to exploit a shell run with sudo
13:14  drake1: koala_man: that's nothing to teach
13:15  koala_man: I don't see why you're saying that you should make init execute stuff as root rather than a user through sudo
13:15  koala_man: if that was what you were saying
13:15  drake1: koala_man: like to capture the credentials
13:16  koala_man: you mean if you own the user account, then you can find the user's password if he enters it for sudo?
13:16  drake1: koala_man: because the root stuff is to be run before the user change
13:16  drake1: koala_man: not after
13:16  koala_man: I didn't read the backlog
13:17  drake1: since it's probably an insecure system from the start, a few root scripts run from a user shell might not matter,
13:19  StaRetji: lhunath: thx for the info, but it's rocket science for me :/ the script was written by a cool guy from this channel (forgot the name) and was working, why it would stop operating on another system is far beyond my knowledge and understanding
13:19  StaRetji: I thought if someone can just have look, thx
13:23  drake1: well, I better quit. Bye
13:28  StaRetji: this is the script, if some can have a look http://paste.ubuntu.com/532307/ if not, no problem, wont hurt anybody ;)
13:31  lhunath: the script sucks.
13:31  Bushmills: StaRetji: probably a missing executable, or different directories.  you should see an error, something like, maybe, "foobar: command not found"
13:32  StaRetji: lhunath: yep, but it worked
13:32  Bushmills: also possible is that the output format of ifconfig is different
13:32  StaRetji: Bushmills: this is the error -lt: unexpected operator
13:32  StaRetji: it workes, downloads .tvcheck
13:33  StaRetji: and then fails
13:33  lhunath: rewrite it.
13:33  lhunath: there is no point in salvaging broken code.
13:33  Bushmills: stat  may use different options
13:34  lhunath: don't use stat.
13:34  Bushmills: stat -c '%X' .tvcheck    # check what that gives you
13:35  lhunath: touch -r .tvcheck .oldtvcheck; wget ..; if [[ .tvcheck -nt .oldtvcheck ]]; then ..; fi
13:35  StaRetji: stat -c '%X' .tvcheck gives me 1289824246
13:35  Bushmills: if you use (or have) bash, you can do with what stat is used for in this script
13:36  StaRetji: yes, I have bash, it's plain ubuntu maverick, like on old system where script worked well
13:36  StaRetji: thx lhunath, will try that
13:38  newbie999: hello. please tell me somebody why this #rsync -vrl --remove-source-files --include "*" /XXX/*/YYY/ "/ZZZ/YYY" command don`t working propertly ?  where is the mistake ?
13:39  geirha: newbie999: Try #rsync
13:40  newbie999: geirha: and ? rsync is present on the system
13:41  whiteflag: I have a bash script which is called by another program, I would like to trace this script, how do I do this?
13:42  whiteflag: when I add "bash -x" on top of the script, trace is displayed on console when running manually,  but nothing displayed when it is called by other program
13:42  Bushmills: newbie999: he means "wrong channel"
13:42  StaRetji: lhunath: /root/.fluxbox/startxbmc.sh: 16: [[: not found
13:42  Bushmills: StaRetji: you need bash for [[
13:42  newbie999: Bushmills: omg )
13:43  StaRetji: #!/bin/sh should be #!/bin/bash ?
13:43  Bushmills: right
13:44  StaRetji: Bushmills: same error
13:44  Bushmills: most unlikely
13:44  StaRetji: weird, heh
13:45  lhunath: StaRetji: run it properly.
13:45  lhunath: StaRetji: not with sh ./myscript
13:46  lhunath: just ./myscript or bash myscript
13:46  lhunath: the former is preferred.
13:46  StaRetji: yay
13:47  StaRetji: oh man, thank you so much guys
13:47  StaRetji:  touch -r .tvcheck .oldtvcheck; wget ..; if [[ .tvcheck -nt .oldtvcheck ]]; then ..; fi
13:47  StaRetji: and running with bash
13:47  StaRetji: such a clean code, respect lhunath and Bushmills for help
13:48  whiteflag: Bushmills any idea to get trace output on active tty when the script is called by other programs?
13:49  Bushmills: white -x option
13:50  whiteflag: Bushmills yeah, but the trace is not displayed on my console when the script was called a binary program
13:50  whiteflag: Bushmills but it displays when I call the program manually, any solution for this?
13:51  Bushmills: i don't understand
13:51  Bushmills: do you mean to say that you intend to trace the execution of the binary?
--- Log closed Mon Nov 15 13:56:52 2010
--- Log opened Mon Nov 15 13:57:01 2010
13:57 --- Users 537 nicks [0 ops, 0 halfops, 0 voices, 537 normal]
13:57  geirha: man chsh
13:57  DestinyAwaits: Well i dont want to chsh permanent
13:57  Bushmills: DestinyAwaits: chsh - change shell of user to bash
13:57  DestinyAwaits: on $ prompt i have to type bash every single time
13:58 --- Channel #bash was synced in 85 seconds
13:58  DestinyAwaits: I cant use chsh command restricted
13:59  DestinyAwaits: Or change .bashrc
13:59  DestinyAwaits: Any idea?
13:59  Bushmills: got a .profile?
13:59  DestinyAwaits: I cant edit any file or issue chsh command
14:00  DestinyAwaits: or even create a alias
14:00  Bushmills: without editing "any" file, there is probably no way
14:00  DestinyAwaits: Any pre-defined shortcut
14:00  DestinyAwaits: Ah ok
14:00  Bushmills: yes, there is one. ask your admin to change your shell for you
14:00  DestinyAwaits: Thank You
14:00  DestinyAwaits: Not allowed
14:00  geirha: DestinyAwaits: You're telling me you don't have write access to your own homedir?!
14:01  DestinyAwaits: Very much restricted
14:01  DestinyAwaits: Well i do have a access but company policy dont allow this
14:01  DestinyAwaits: And i cant change anything at all
14:01  Bushmills: did you ask them whether they allow executing "bash" interactively?
14:02  cthuluh: funny
14:02  DestinyAwaits: Well all of them there are using this bash to enter the shell so no problem there
14:02  cthuluh: thy give you a shell but don't want you to use it
14:03  DestinyAwaits: a website is running in there so not possible
14:03  Bushmills: so if all of them use bash - why isn't it allowed to set it default shell?
14:03  DestinyAwaits: Else there are few ways that i know already
14:03  cthuluh: that's completely stupid
14:03  DestinyAwaits: I think they are sick
14:04 * DestinyAwaits *nods*
14:04  cthuluh: they're not allowed to use a shell, but do use it. and then you ask us impossible things
14:04  DestinyAwaits: So i thought to ask from the pros anything else that can be done
14:05  geirha: We don't even know what the default shell is
14:05  cthuluh: but why the hell do you have a shell if you shouldn't use it???
14:05  Bushmills: maybe you can put "bash" on a key as keyboard macro
14:05  DestinyAwaits: They are not allowed to change the shell permanently
14:05  geirha: Bushmills: He'd have to edit a file, that's not allowed!
14:05  Bushmills: unless you're not allowed to, of course
14:06  cthuluh: DestinyAwaits: tell your sysadmin he's a retard if that's his way of thinking security
14:06  DestinyAwaits: Ok. So there is not a pre-defined shortcut and i use putty to login to the box
14:07  DestinyAwaits: Well this is what i think
14:08  DestinyAwaits: Well is there currently a good resource to learn bash
14:08  geirha: see /topic
14:08  DestinyAwaits: Some bash hacks, tips and tricks etc...
14:08  Bushmills: no. there isn't. the manual has been genetically encoded into its users
14:09  DestinyAwaits: Ok
14:10  DestinyAwaits:   /topic and what param i need
14:10  n1x0n: =]
--- Log closed Mon Nov 15 16:31:38 2010
--- Log opened Mon Nov 15 17:03:52 2010
17:03 --- Users 557 nicks [0 ops, 0 halfops, 0 voices, 557 normal]
17:05 --- Channel #bash was synced in 87 seconds
--- Log closed Mon Nov 15 17:13:40 2010
--- Log opened Mon Nov 15 17:14:03 2010
17:14 --- Users 558 nicks [0 ops, 0 halfops, 0 voices, 558 normal]
17:15 --- Channel #bash was synced in 86 seconds
17:16  taylanub: Mike1: echo $gpsoutput | IFS=, read _ _ climb _;  echo $climb | IFS=: read _ value    but only if "climb" always comes third
17:16  taylanub: (damn lag)
17:19  Mike1: taylanub: do you have any information for me about your magic command? It looks like your just assigning it as variable in a very strange way
17:19  Mike1: which I completly don’t understand
17:20  taylanub: ''help read''
17:20  StFS: Mike1: is this GPS output a string or is it a list?
17:20  taylanub: StFS: could you rephrase your question by the way?
17:21  go|dfish: StFS: if your list has an even number of elements, for ((i=0; i<${#list[@]}; i+=2)); do stuff with ${list[i]} ${list[i+1]} ...; done
17:22  Mike1: taylanub: what do all the _ and , and : mean?
17:22  StFS: go|dfish: ok... thanks... I think this is what I need... but I just thought I would be able to do something like "for k, v in ${list} ; do echo "${k}: ${v}"
17:23  go|dfish: StFS: ah ok, yeah, there's no shortcut for that
17:23  taylanub: Mike1: the '_' variable normally holds the last argument of the previous command. i.e. it is set automatically, so it doesn't matter if we try to change it. i.e. it's just a placeholder in 'read'
17:23  taylanub: !ifs > and this, Mike1
17:23  greybot: and this, Mike1: Internal Field Separator (or Input Field Separator), used to break things into words. See http://mywiki.wooledge.org/IFS and http://mywiki.wooledge.org/BashFAQ/001 and http://bash-hackers.org/wiki/doku.php/syntax/words
17:26  StFS: go|dfish: hmm... ok.. I have my list in a string variable (whitespace separated), I probably have to convert that to a list somehow right?
17:27  go|dfish: StFS: well, yes, instead of declaring it as a string, use an array. list=( foo bar baz )
17:27  Mike1: taylanub, greybot: Thanks, I’ll have a look ☺
17:27  taylanub: greybot is a bot
17:27  StFS: go|dfish: awesome... that did it... thanks
17:35  helo: !regex
17:35  greybot: Some people, when confronted with a problem, think ``I know, I'll use regular expressions.'' Now they have two problems. -- jwz
17:41 --- MuzerAway is now known as Muzer
17:43  blackthorne: hi
17:50  blackthorne: I want to list two file extensions like ls *.[mp4|flv]
17:50  blackthorne: I know this is not valid, just trying to expose what I'm trying to do
17:51  cthuluh: !extglob > blackthorne
17:51  greybot: blackthorne: "Extended globs" (shopt -s extglob) allow you to say things like "all files that do not end in .jpg". See http://mywiki.wooledge.org/glob
17:51  Knirch: blackthorne: *.{mp4,flv}
17:51  blackthorne: thank you
17:52  cthuluh: *.mp4 *.flv   should work too, but you may need to shopt -s nullglob
17:52  Knirch: (needs nullglob or you'll get *.flv if you have no flv files)
17:52  Knirch: yah
17:53  blackthorne: wow, howcome both ls *.{mp4,flv} and ls (*.flv|*.mp4) failed ?
17:54  Knirch: what do you mean failed?
17:54  blackthorne: ls: *.{mp4: No such file or directory , -bash: flv}: command not found
17:54  blackthorne:  
17:54  taylanub: the second will, the first shouldn't
17:55  Knirch: running bash 2?
17:55  Mike1: I understand taylanub’s command! =)
17:55  taylanub: if there are no *.mp4 OR if there are no *.flv, it will fail
17:55  Mike1: very clever thing =)
17:55  blackthorne: 3.2, that output is for ls *.{mp4,flv}
17:55  taylanub: Mike1: it's a common thing actually
17:56  Mike1: taylanub: it’s magic!
17:56  taylanub: shell code is always full of black magic
17:58  aborticide: cp is not a bash builtin, but how do you suggest i get cp and mv to check if the destination has space to accept new files that i pass to them?
17:58  blackthorne: the only way, I can is: ls *.mp4 *.flv
17:58  blackthorne:  
18:02  aborticide: blackthorne: are you talking to me?
18:03  blackthorne: no aborticide
18:06  Mike1: somehow my `read` does not work oO
18:07  Mike1: [mike@hal ~]$ echo "foobar" | read bla ; echo $bla
18:07  Mike1: [mike@hal ~]$
--- Log closed Mon Nov 15 18:13:42 2010
--- Log opened Mon Nov 15 18:14:10 2010
18:14 --- Users 555 nicks [0 ops, 0 halfops, 0 voices, 555 normal]
18:14  Mike1: things which need a workaround are usually called “bug”
18:15 --- Channel #bash was synced in 86 seconds
18:16  nDuff: Mike1, it's not called a bug in C that people "work around" leaving semicolons off their endlines by adding them
18:17  nDuff: Mike1, ...the shell is working as designed and specified; the behavior you describe falls out of the spec, and can't be changed without altering a behaviors that have decades behind them.
18:18  Mike1: nDuff: yeah, it just annoys me that it’s so complex ;-)
18:19  nDuff: fair 'nuff
18:20  nDuff: that said, I think it's like a lot of other things (git comes to mind) -- complex until you have your head wrapped around it, then it seems simple :)
18:25  Mike1: but why does `echo "foobar" | read bla ; echo $bla` not work?
18:25  Mike1: read bla ; echo $bla are in the same subshell so $bla should be the same for them
18:25  nDuff: Mike1, no, they aren't
18:26  nDuff: Mike1, ...if you wanted them to be, you'd write it a little differently...
18:26  nDuff: # echo "foobar" | { read bla; echo "$bla"; }
18:26  evalbot: nDuff: foobar
18:27  Mike1: what do the { } do?
18:28  nDuff: see the "compound commands" section of the bash reference; {...} generates a list of commands without specifying (as (...) does) that it be run in a subshell. (That said, it's run in a subshell no matter what in this case on account of being in a pipeline)
18:29  Mike1: so { echo "foobar" | read bla; echo "$bla" } does not prevent the whole subshell thingy?
18:29  lhunath: no
18:30  Mike1: too bad
18:30  nDuff: Mike1, how would you have a pipeline without spawning new processes?
18:30  lhunath: a pipe character makes a subshell
18:30  nDuff: Mike1, ...again, it kind of goes down to understanding-how-UNIX-works
18:30  lhunath: nDuff: read < <(echo) ;p
18:31  nDuff: lhunath, indeed that's the correct approach, and Mike1 already knows that because he read the FAQ
18:31  nDuff: lhunath, ...I was discussing why his proposed example didn't work.
18:31  mseidl: cat ${pubkey} | ssh ${sshuser}@${ipstart}$(expr $ipend + $i) if [ -f ${authkey} ] ; do cat >> ${authkey} elif do cat > ${authkey} done
18:31  lhunath: aye
18:31  lhunath: mseidl: quotes.
18:32  mseidl: around pubkey?
18:32  lhunath: mseidl: and don't do cat |
18:32  lhunath: mseidl: around ALL your expansions.
18:32  mseidl: it works like this.  or is it not proper bash?
18:32  nDuff: also around the constructs which shouldn't be interpreted by the host shell
18:32  bl^ckhOle: $ for f in /var/log/paco/*; do if ! out="$(sed '/\/usr\/share\/info\/dir/d' "$f" | diff -q - "$f" >/dev/null)"; then echo "${f##*/}" ; echo $out; else echo Error $f; fi;done
18:32  lhunath: mseidl: it's broken
18:32  nDuff: for instance, is the ; intended to be interpreted on the local or the remote machine?
18:32  lhunath: !quotewhen > mseidl
18:32  greybot: mseidl: "Double quote" *EVERY* argument that contains whitespace or expansions ("$foo", "$(foo)", "`foo`"). 'Single Quotes' prevent expansions from happening at all. Also quote *, [, ], ? etc. if you don't want bash to expand them into filenames.
18:33  lhunath: !quoting
18:33  greybot: Quoting 101: Always use "double quotes" around expansions: "$foo", "$(awk ..)". Use 'single quotes' to prevent even bash expansion: awk '$1 == foo'. You "can 'nest'" quotes but can't put literal single quotes in single quotes; so use: 'Don'\''t forget to quote!'.
18:33  lhunath: hmm no link
18:33  mseidl: all of this is remote
18:33  mseidl: but im being stupid
18:33  mseidl: i can just >> and not worry about if it exists or not
18:33  bl^ckhOle: ok, I tried always using double quotes around arguments and assignments. However, I never get any diff output
18:34  bl^ckhOle: the diff output is supposed to be in the varialbe $out
18:34  lhunath: the variable is out, not $out
18:34  bl^ckhOle: ok...
18:35  lhunath: bl^ckhOle: diff isn't making output.
18:35  bl^ckhOle: my problem is that when I expand out, it does not have anything in it
18:35  bl^ckhOle: duh...
18:35  lhunath: bl^ckhOle: what do you expect to capture into out?
18:35  mseidl: was there anything wrong about what i posted that wouldnt make sure the whole thing happened remotely?
18:36  lhunath: mseidl: ; separates commands.
18:36  lhunath: mseidl: foo; bar, foo and bar are separate commands.
18:36  lhunath: ssh; if
18:36  lhunath: same thing
18:37  mseidl: so ok, take out the ;
18:37  lhunath: no
18:37  lhunath: !ssh
18:37  greybot: Secure SHell (See #openssh, http://mywiki.wooledge.org/CategorySsh) - To run bash code remotely; adapt: ssh user@host bash <<< "$(printf 'echo %q' "$localVar")"
18:37  bl^ckhOle: lhunath: I removed the -q from diff, and still no output. I expect to capture the differences between stdin (the file f with /usr/share/info/dir [hopefully] removed) and the file f.
18:38  bl^ckhOle: I am sure that some of those files differ...
18:38  taylanub: mseidl: it's if;then not if;do   no one seems to have corrected that..?
18:38  lhunath: bl^ckhOle: let's see the code
18:39  mseidl: ?well, i simplified it, due to the fact that i dont need to checki that i just use cat >> for the same result
18:39  mseidl: cat ${pubkey} | ssh ${sshuser}@${ipstart}$(expr $ipend + $i) cat >> ${authkey}
18:40  mseidl: i will add quotes in a bit
18:40  lhunath: !cat
18:40  greybot: cat(1) is used to concatenate multiple files together. It should NOT be used to feed file data to processes. There are far better ways to achieve this. The application might take a file as argument (eg. grep ^foo file); or you might want to use file redirection (eg. read line < file).
18:41  lhunath: mseidl: ssh "$sshuser@$ipstart$((ipend+i))" bash <<< "$(printf 'cat >> %q', "$authkey")" < "$pubkey"
18:41  lhunath: err
18:41  lhunath: mseidl: ssh "$sshuser@$ipstart$((ipend+i))" "$(printf 'cat >> %q', "$authkey")" < "$pubkey"
18:42  mseidl: ok
18:42  mseidl: do i not need the {} around the vars?
18:43  nDuff: mseidl, none of the variables are ambiguous in this case, so the braces are optional
18:43  bl^ckhOle: lhunath: http://eugeneciurana.com/pastebin/pastebin.php?show=43560
18:43  lhunath: !{
18:43  greybot: range and choice notation: {a,b,c}1 and {a..c}1 both expand to a1 b1 c1, {a..c}{1..3} expands to a1 a2 a3 b1 b2 b3 c1 c2 c3
18:43  lhunath: !${
18:43  greybot: Curly-braces in parameter expansions are used when the parameter name is ambiguous: "${foo}bar", "${foo[1]}". They are not necessary for normal PEs (eg. "$foo"). They are no replacement for quoting. echo ${line} is BROKEN. (use echo "$line" or "${line}")
18:44  mseidl: ok, thanks
18:45  mseidl: its quitting time, i will talk to you guys tomorrow, haha
18:46  lhunath: bl^ckhOle:  uh.  you are still killing diff's output.
18:46  lhunath: bl^ckhOle: with your >/dev/null
18:46  bl^ckhOle: oh f***
18:47  Mike1: is there a complete, easy-to understand BASH-tutorial which also explains (or at least mentions) stuff like IFS?
18:47  bl^ckhOle: lhunath: how much sleep do you think I have had?
18:48  lhunath: now or 5 minutes ago?
18:48  bl^ckhOle: now
18:48  lhunath: sounds like you're still sleeping
18:48  lhunath: :-)
18:48  bl^ckhOle: ok, half-awake then...
18:49  bl^ckhOle: I haven't had a proper breakfast of potato and egg tacos, nor have I had anything to drink...
18:50  lhunath: I suggest you postpone this ;-)
18:50  bl^ckhOle: I'm usually not this bad at shell scripting nor schoolwork...
18:58 --- Guest38677 is now known as Ionic
18:58  skpx: does anybody know off hand what version bash implemented arrays
18:58  geirha: 2.0 I think
18:59  zumbi_: !atomic
18:59  zumbi_: uhm.. does someone know if there is some way to execute a set of atomic operations?
19:00  geirha: skpx: http://wiki.bash-hackers.org/scripting/bashchanges
19:00  nDuff: zumbi_, ...depends on what kind of operations you're talking about.
19:00  skpx: geirha, thanks
19:00  nDuff: zumbi_, ...using POSIX semantics to achieve app-level atomicity is something of an art.
19:01  zumbi_: nDuff: well.. not much strict, but checking a lock an set, something like test and set
19:01  geirha: !faq mutual
19:01  greybot: http://mywiki.wooledge.org/BashFAQ/045 -- How can I ensure that only one instance of a script is running at a time (mutual exclusion)?
19:01  nDuff: zumbi_, oh; see flock
19:03  zumbi_: nDuff: do you have an idea if i need to set traps as well with flock?
19:04  zumbi_: uhm.. that might not make much sense. Thanks, I'll try
19:16  Ddorda: ‎hey guys, how do i do a loop X times in bash? i tried for i in 10; and it didn't work
19:16  Ddorda: ‎it took 10 as a number
19:16  Ddorda: ‎as an item*
19:16  greycat: !for
19:16  greybot: The ''for var in ..'' statement iterates over arguments. for ((i=0; i < n; i++)) iterates over a numeric range. To iterate over filenames, use ''for file in [glob]''. Do *NOT* do ''for foo in `cat,ls,find,...`'': Here, for will iterate over resulting WORDS, NOT the "filenames", or "lines" that the command outputs.
19:16  greycat: !seq
19:16  greybot: seq(1) is a highly nonstandard external command used to count to 10 in silly Linux howtos. Use one of these instead: for x in {1..10} (bash3.x) or for ((x=1; x<=10; x++)) (bash 2.04+) or i=1; while [ $i -le 10 ]; do ...; i=$(($i+1)); done (ksh/POSIX)
19:18  Ddorda: ‎greycat: thanks
19:22  Ddorda: ‎greybot: and is it possible to make the output in on line?
19:23  Ddorda: ‎(not having separated lines between each time?
19:23  greycat: printf '%d ' {1..10}; echo
19:23  greycat: or a billion other ways
19:26  oliva: &/quit
19:28  Ddorda: ‎greycat: thanks
19:37  richardbronosky: so I have studied out http://wiki.bash-hackers.org/howto/getopts_tutorial and I can't figure out how to accept positional arguments before option flags
19:37  greycat: You mean you want to implement "myscript foo.txt -r" ?
19:38  richardbronosky: should I worry about making that happen? greycat: yes. curl, for example, works that way
19:38  greycat: Don't do that.  Unix doesn't work that way.  Only poorly-written GNU rubbish works that way.
19:38  richardbronosky: greycat: awesome! thanks.
19:39 * richardbronosky appreciates the irony of that statement in the context of http://www.gnu.org/software/bash/
19:41  rickest: richardbronosky: that example also cannot do option bundling (-vi vs -v -i) and args to options must be space-separated: -f thisfile.txt, not -fthisfile.txt.  These may or may not be important to you
19:41  greycat: !faq arg
19:41  greybot: http://mywiki.wooledge.org/BashFAQ/029 -- How can I display the target of a symbolic link?
19:41  greycat: !faq argument
19:41  greybot: http://mywiki.wooledge.org/BashFAQ/035 -- How can I handle command-line arguments (options) to my script easily?
19:42  rickest: richardbronosky: and if you're writing software for 1982, then required args at the end of the command (only) is a great idea.  otherwise, it's pretty fucking stupid
19:43  greycat: "If it was hard to write, it should be hard to use, too."
19:43  rickest: heh
19:48  kmiksi: hi all
19:49  kmiksi: how can I list partitions properties via bash?
19:49  greycat: You can't.  You have to use OS stuff.
19:49  kmiksi: I have no idea
19:49  greycat: !nabq
19:49  greybot: Not A Bash Question. Ask the channel that supports your software, hardware, or OS.
19:49  kmiksi: ?
19:50  greycat: Ask.  Your.  Operating.  System.  Support.  Channel.
19:51  basilgohar: Is there a way to call bash's built-in printf function as opposed to /usr/bin/printf?
19:52  greycat: ''builtin printf''
19:52  greycat: Unless you did something terribly wrong, just using ''printf'' should also suffice.
19:53  basilgohar: greycat: Maybe I am doing it wrong...
19:53  basilgohar: You just gave me an idea.
19:54  basilgohar: Well, I did it by necessity.
19:54  basilgohar: I want to store the value of printf in a variable.
19:54  greycat: x=$(printf whatever)
19:54  basilgohar: I did that by running printf within ``, which I think calls the binary instead of using the builtin...
19:54  skpx: !while
19:54  greybot: The while-loop structure: http://bash-hackers.org/wiki/doku.php/syntax/ccmd/while_loop
19:54  greycat: printf -v x whatever   # bash 3.1
19:54  greycat: basilgohar: that is an incorrect assumption
19:55  basilgohar: It's the slowest part of my whole script, the call to printf.  And `which printf` is /usr/bin/printf.
19:55  greycat: Because 'which' is an external program in the first place.
19:55  greycat: Use ''type printf'' instead.
19:55  basilgohar: I see, -v will put it in the variable I want.
19:56  paxl: where can I find a good stream tutorial / learning guide... about all those thing as exec 1> and so on ?
19:56  basilgohar: So, calling it externally just calls bash, which then runs printf...that's terrible!  I didn't know about -v, so I think that's all I need.
19:56  greycat: !which
19:56  greybot: which(1) is an external program used to search PATH for an executable. It behaves differently on different systems and you can't rely on a useful exit code; use ''type -P'' instead. See http://mywiki.wooledge.org/BashFAQ/081
19:57  greycat: imadev:~$ head -1 /usr/bin/which
19:57  greycat: #! /usr/bin/csh
19:57  basilgohar: greycat: Now my script is ridiculously fast.  Thank you for your explanation.  I thought which told me about bash built-ins as well.
19:58  TheBonsai: i don't think so
19:58  basilgohar: Right, I know better now. ;)
19:58  basilgohar: I must have done type instead of which when it behaved that way.
20:00  basilgohar: The lesson for me is, don't do `` inside of loops...there's probably a better way.
20:02  erUSUL: !redirection > paxl
20:02  greybot: paxl: Redirections: http://bash-hackers.org/wiki/doku.php/syntax/redirection http://mywiki.wooledge.org/BashGuide/InputAndOutput#Redirection http://bash-hackers.org/wiki/doku.php/howto/redirection_tutorial
20:05  pyoor: i'm sure this is in a faq or wiki page somewhere but why can't I do "mv test-{0..10}.txt blah-{0..10}.txt"
20:06  paxl: erUSUL, Thanks !
20:08  cthuluh: !faq rename > pyoor
20:08  greybot: pyoor: http://mywiki.wooledge.org/BashFAQ/030 -- How can I rename all my *.foo files to *.bar, or convert spaces to underscores, or convert upper-case file names to lower case?
--- Log closed Mon Nov 15 20:13:40 2010
--- Log opened Mon Nov 15 20:14:02 2010
20:14 --- Users 565 nicks [0 ops, 0 halfops, 0 voices, 565 normal]
20:15 --- Channel #bash was synced in 85 seconds
20:15  pyoor: Is this a bad way of doing it?          for f in *.xps; do mv "$f" "blah-${f#*-}"; done
20:16  Morg0th_: hello, is it possible for the cp command to check if there is enough space on the target device before copying?
20:17  pyoor: cp itself can't do that but you can easily script it.
20:18  pyoor: local=$(du /local-dir); remote=$(du /destdir); if ...
20:19  pyoor: oops wrong info.  depends on how you are controlling size limitations.  df would be better than du
20:20  nginr: pyoor: find -name '*xps' -exec mv {} /path ;
20:20  M1-: how do i add a directory to $PATH
20:20  M1-: (postgres commands)
20:21  Morg0th_: pyoor: ok thanks I'll do that
20:22  pyoor: nginr: I'm not just trying to move all .xps from 1 dir to another.  i want to rename foo-{0..100}.xps to bar-{0..100}.xps
20:22  Plouj: hi
20:22  pyoor: the example i posted works but it didn't look like "good practice"
20:23  Plouj: why is this saying command not found: http://fpaste.org/UzCv/ ?
20:23  M1-: nvm (export PATH=$PATH:/usr/pgsql-9.0/bin/)
20:23  Plouj: is it wrong to put redirects inside quotes like that?
20:24 --- snild_ is now known as SNiLD
20:24  pyoor: !quote
20:24  nmarvin: pyoor: no results.
20:24  cthuluh: pyoor: do you like this one better?  for f in *.txt; do echo mv -- "$f" "${f/test/blah}"; done
20:24  pyoor: i like whichever one you guys think is better :)
20:24  nginr: Plouj: what do you want to do ?
20:24  cthuluh: Plouj: what...
20:24  pyoor: i tend to find ways that work but look sloppy.
20:25  Plouj: nginr: compose a command, run it, and get the return status
20:25  cthuluh: command; return_status=$?
20:25  nginr: ls -a > /dev/null ; echo $?
20:25  Plouj: but if I want to call this command multiple ties
20:25  Plouj: times*
20:26  Plouj: I put it into a string: FOO=ls -la > /dev/null
20:26  cthuluh: then you write it multiple times. doesn't cost much
20:26  Plouj: and I want to be able to call it "$FOO"
20:26  cthuluh: no, that's not what you're doing
20:26  Plouj: cthuluh: copy paste is hard to update later on
20:26  nginr: for i in {1..100}; do ls -a > /dev/null; echo "$?"; done;
20:26  gniourf_gniourf: Plouj, you might want to use a function instead of a variable
20:26  cthuluh: use a function instead, then
20:26  Plouj: I mean, I want ot execute it like "$FOO"
20:26  cthuluh: Plouj: foo="some command --foo --bar"
20:26  cthuluh: this is how you build a string
20:27  gniourf_gniourf: use a function, not a variable
20:27  cthuluh: but you shouldn't put commands into strings
20:27  cthuluh: !faq complex > Plouj
20:27  greybot: Plouj: http://mywiki.wooledge.org/BashFAQ/050 -- I'm trying to put a command in a variable, but the complex cases always fail!
20:29  yitz_: Is there a way to determine if STDOUT was redirected to a file?
20:30  koala_man: you can tell if it's a terminal with [[ -t 1 ]]
20:30  Plouj: ok, thanks
20:30  koala_man: as for file vs pipe, dunno
20:31  Plouj: cthuluh: thanks
20:34  yitz_: koala_man: Thanks
20:38 --- skydrome is now known as skydrome`
20:48 --- skydrome` is now known as skydrome
20:53  Synthead: is there a way I can redirect to a variable?  echo things > $variable, somehow.  Say I can't variable="$(echo things)"
20:55  Bushmills: read variable <<< things
20:56  Bushmills: or even better,  variable=things
20:56  Synthead: right
20:56  Synthead: hmm
20:56  Synthead: here's what I'm trying to do exactly
20:56  Synthead:  attachment="$(pdftk "$pdf1" "$pdf2" output - 2>> "$LOGFILE" | base64 | tr -d '\n')"
20:57  Synthead: I want stdout to go to $attachment, but stderr to go to $log
20:57  Bushmills: read variable < <(command)
20:57  Synthead: scratch 2>> "$LOGFILE" in this statement
20:57  Synthead: that's an interesting one
20:58  Bushmills: worse than Perl, 10 ways for doing essentially the same
20:58  Synthead: hmm
20:59  test12341: whats the diffrence between bash and sh
20:59  erUSUL: !sh
20:59  greybot: sh is the POSIX or Bourne shell, not bash. Even if sh is a symlink to bash, running a script under 'sh' (either by typing 'sh myscript' or putting '#!/bin/sh' at the top) *disables* many bash features. See http://mywiki.wooledge.org/BashGuide/Practices#Choose_Your_Shell
21:00  Bushmills: all the things bash can do, and sh can't
21:00  test12341: ah and what about the other shells like dash and such
21:00  erUSUL: test12341: dash is ( or tries ) to be only posix sh
21:01  test12341: i see
21:13  djustice: i need to test if a string starts with '@'
21:14  erUSUL: djustice: if [[ $sting == @* ]]; then ....; fi
21:14  erUSUL: djustice: if [[ $string == @* ]]; then ....; fi
21:14  djustice: erUSUL: <3 thanks!
21:15  nDuff: ...well, = would be closer to good practice than ==
21:15  The-Compiler: nDuff: why?
21:16  nDuff: The-Compiler, because = is also compatible with standards-compliant test, so using it means you aren't getting into a habit of unnecessary bashisms
21:16  nDuff: granted, either works fine for [[ ]], but better to support good habits
21:16  The-Compiler: nDuff: standard test doesn't do globs anyway.
21:17  nDuff: fair 'nuff
21:17  nDuff: nonetheless, we occasionally get folks in here trying to use == with /bin/sh
21:20  erUSUL: sh# string=@hello ; case $string in @*) echo y;; esac
21:20  shbot: erUSUL: y
21:25  ggolan: Greetings, I suspect I am having some kind of string escaping problem but I am not sure where I am going wrong.  I have some wrapper functions used to print machine/timestamp info and to turn a command into both a message and a command but when I attempt to use these functions to execute something that requires quotes I run into issues: http://pastebin.com/yzpegPrR
21:26  qubit: is there a way to disable tab-complete and have it be a literal tab when inside a heredoc or quotes?
21:27  nDuff: qubit, I don't know -- but it's more readable to use $'\t'
21:28  qubit: I think $'field1\tfield2\tfield3' is very unreadable compared to actual whitespace
21:29  geirha: !faq complex > ggolan
21:29  greybot: ggolan: http://mywiki.wooledge.org/BashFAQ/050 -- I'm trying to put a command in a variable, but the complex cases always fail!
21:29  nDuff: qubit, "readable" in the sense of letting the reader know that it's tab characters rather than whitespace
21:30  geirha: !faq ssh eats > ggolan
21:30  greybot: ggolan: http://mywiki.wooledge.org/BashFAQ/096 -- ssh eats my word boundaries!  I can't do ssh remotehost make CFLAGS="-g -O"!
21:30  ggolan: geirha: thanks, reading!
21:31  qubit: nDuff: its mostly a convenience thing for me. when its in a script its fine, but when testing scripts i'll copy-paste a section to my console and then it just fails horribly. but its also sometimes useful when I want to echo something out to a file (or similar action)
21:32  nDuff: qubit, makes sense, then. See the "quoted insert" readline binding
21:33  nDuff: qubit, ...by default that's C-v, so you can do C-v<TAB>
21:33 * qubit looks
21:33  qubit: oh, that
21:33  qubit: that'd work for the echo thing
21:38  geirha: qubit: How about  printf '%s\t%s\t%s\n' "field1" "field2" "field3"
21:40  qubit: geirha: uhh, thats the complete opposite of making things simple :-)
21:40  geirha: Oh well, I'm used to printf from other languages, so I find it nice and readable. :)
21:41  qubit: sure, printf is nice, but its 1) not usable/practicle with heredocs, and 2) when i'm doing somthing like an echo "" >> file, i'm not thinking ahead of time to format it like that
21:44 * nDuff usually has expandtabs enabled in vim, and so doesn't run into that issue so often.
22:00  qubit: i'll just do the ctrl+v thing and then just deal with the copy/paste of script sections
22:00  qubit: was just hoping there might be some magical shopt I chould set
22:03  nDuff: qubit, I'd think you could change the readline bindings for tab
22:04  nDuff: qubit, ie. remap complete somewhere else, and make sure the tab key is mapped to insert-tab
22:04  qubit: my poor brain would end up hurting itself when i tried to actually tab-complete something then :-P
22:06  Knirch: qubit: I tend to do ":" and then fc  and then paste it in the editor :)
22:07  qubit: Knirch: right, editor! duh. wow I feel like an idiot
22:07  Knirch: I doubt too many people use fc
22:08  qubit: dont know what fc is, but just using the editor in vi-mode should work
22:08  Knirch: "fc is used to list or edit and re-execute commands from the history list."
22:09  qubit: ah, ya, i never use it. the only history stuff i do is with !
22:12  Momow: hello
22:13  Momow: I have a string of exactly 16 characters, I need to inject ":" after char 4, 8, 12. Any straightforward way ? :)
22:13  nDuff: !pe > Momow
22:13  greybot: Momow: Parameter Expansion is the expansion of a parameter: "$foo", "$1". You can use it to perform string operations: "${file%.mp3}", "${0##*/}". Remember to *always* quote them. See http://mywiki.wooledge.org/BashSheet#Parameter_Operations
22:14  Momow: hmm.
22:14  Momow: thx let's see what I can do with that
22:14  nDuff: # foo=1234567890123456; echo ${foo::4}:${foo:4:4}:${foo:8:4}:${foo:12}
22:15  evalbot: nDuff: 1234:5678:9012:3456
22:15  greycat: new=${old:0:4}:${old:4:4}:${old:8:4}:${old:12}
22:15  greycat: nDuff is faster apparently
22:15  Momow: ok
22:16  Momow: I'll note it, try to understand it and I'll implement thx :)
22:16  Momow: does not seem tough to understand though
22:16  olskolirc: is evalbot a bot too?
22:16  greycat: ya think?
22:17  likewhoa: lol
22:22  Nitecon: How can I add apachectl configtest to myvar.  Something like TESTVAR=`apachectl -t`  just echo's without adding it to th evar
22:23  nDuff: Nitecon, ...probably the output goes to stderr, then
22:23  qubit: Nitecon: you probably need to redirect stdout to stderr
22:23  nDuff: Nitecon, I'd suggest using the exit status rather than the stderr anyhow
22:23  nDuff: Nitecon, apachectl -t; apachectl_status=$?
22:23  nDuff: ...then later, if you need to care... if (( apachectl_status > 0 )); then echo "Houston, we have a problem"; fi
22:24  nDuff: Nitecon, or just do the conditional like so: if apachectl -t 2>/dev/null; then echo "config is good"; else echo "config is bad"; fi
22:24 --- y3llow_ is now known as y3llow
22:25  Nitecon: nDuff: ur my hero for the next 10 minutes!
22:25 --- cuba33ci_ is now known as cuba33ci
22:40  pr3d4t0r: Greetings.
22:41  pr3d4t0r: n=1; while ((n != 0)); do wget -t 1 -T 5 'http://some-site.com/file.ext'; n="$?"; done # is there a better way to perform this loop?  This is a subset of the whole command.  I need wget to exit every time, hence the options it uses.  Thanks in advance.
22:41  nDuff: until wget ...; done
22:41  nDuff: or while ! wget ...; do :; done
22:42  pr3d4t0r: nDuff: Ah!  Thank you.
22:42 * pr3d4t0r feels rusty.
22:42  greycat: while sleep 60; do wget foo && break; done
22:42  pr3d4t0r: nDuff: Too much Python lately (no repeat/until loops there).  Much appreciated.
22:42  greycat: Better yet, double the time you sleep after each failure....
22:42  pr3d4t0r: greycat: I thought of that, or randomizing it.
22:43  pr3d4t0r: greycat: Setting it at random between 15 and 300 seconds somewhere.
22:44  pr3d4t0r: nDuff: I like the while ! loop.  Its do: clause lets me do what I need more clearly.
22:44 * pr3d4t0r gets busy.
--- Log closed Mon Nov 15 22:57:23 2010
--- Log opened Mon Nov 15 23:02:45 2010
23:02 --- Users 557 nicks [0 ops, 0 halfops, 0 voices, 557 normal]
23:04 --- Channel #bash was synced in 88 seconds
23:16 --- h4x0r` is now known as Guest74398
--- Log closed Mon Nov 15 23:27:57 2010
--- Log opened Mon Nov 15 23:33:21 2010
23:33 --- Users 550 nicks [0 ops, 0 halfops, 0 voices, 550 normal]
23:34 --- Channel #bash was synced in 84 seconds
23:34 --- Muzer is now known as MuzerAway
23:40  larsreis: hey, does bash have a feature like zsh's automatic temporary files (e.g, diff =(sort file1) =(sort file2) )?
23:42  lhunath: !<() > larsreis
23:42  greybot: larsreis: Process Substitution -- <(cmd) and >(cmd) -- see http://mywiki.wooledge.org/ProcessSubstitution , or http://mywiki.wooledge.org/BashFAQ/024 for a common use
23:42  larsreis: perfect, thanks! google was not my friend this time. i appreciate the help!
23:42  lhunath: !google > larsreis
23:42  greybot: larsreis: Google is NOT a preferred source for learning bash, because 90% of the "tutorials" and scripts out there are JUNK. Refer to the Guide and FAQ (see topic) instead.
23:43  nDuff: though process substitution isn't necessarily implemented with temporary files -- it can be implemented with /dev/fd/ filenames if the platform supports it
23:43  larsreis: that's fine, i just care about cleaner syntax in a script i'm writing.
23:52  ksk: hello bash
23:54  ksk: i want to read a file line by line and work with the output
23:54  nDuff: !faq 1 > ksk
23:54  greybot: ksk: http://mywiki.wooledge.org/BashFAQ/001 -- How can I read a file (data stream, variable) line-by-line (and/or field-by-field)?
23:54  ksk: 001 implies, its the noobiest question avaliable? ;)
23:54  ksk: thanks.
23:55  Knirch: most frequently asked anyway
23:56  ksk: mhmkay. im using "read" atm. i was wondering, if thers anything else to use
23:58  ksk: http://debian.pastebin.com/WKXNK6WS
23:58  nDuff: ...well, there are a few things about that...
23:58  nDuff: !faq disappear > ksk (if you want to actually do anything that persists in that laap)
23:58  greybot: ksk (if you want to actually do anything that persists in that laap): http://mywiki.wooledge.org/BashFAQ/024 -- I set variables in a loop. Why do they suddenly disappear after the loop terminates? Or, why can't I pipe data to read?
23:59  nDuff: !faq 9 > ksk (also possibly of interest)
23:59  greybot: ksk (also possibly of interest): http://mywiki.wooledge.org/BashFAQ/009 -- What is buffering?  Or, why does my command line produce no output: tail -f logfile | grep 'foo bar' | awk ...
23:59  ksk: i dont need value from inside the loop at the outsite imho
--- Log closed Tue Nov 16 00:00:06 2010
