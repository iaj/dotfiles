--- Log opened Sun Dec 12 00:00:40 2010
--- Day changed Sun Dec 12 2010
00:00  Riviera: kingsley: then sente's solution suits your situation better
00:01  kingsley: sente: Thank you. Your suggestion is the most concise.
00:18  rustymyers: Hello all, I'm trying to backup home directories stored in /Users folder on Mac computers, while excluding some users. I am trying an array and if statement to check for users I don't want to back up. It seems that the order I put names into the array change the effect of the if statement
00:19  rustymyers: here is my array: NON_BACKUP=(etcadmin rzm102 etcadminold Shared)
00:19  rustymyers: and here is my for/if statement: for i in $(/bin/ls /Users | grep -v [.*]); do echo $i; if [[ "$i" =~ "${NON_BACKUP[@]}" ]]; then echo "skipping $i"; fi; done
00:20  rustymyers: right now I'm using ls on the users directory, then excluding any hidden files that show
00:20  rustymyers: then for each folder, I want to check it against the array and skip the names that are in the array
00:20  sente: first deal with the users
00:21  rustymyers: you mean shoot the users and I don't have to worry about backing them up? ;-)
00:23  ritztech: i got a tricky question with expect .... not sure if i ask here or there but i am using Bash ... i have a Loop in Expect but if a users like CTRL-Z or CTRL-C on the script can i send a  (send -- "exit\r") command to the current running expect script
00:24 --- gwz2 is now known as gwz
00:25  ritztech: what happens is im running a loop on 2 commands and if the user leaves the session i get the prompt  Now i get Too many people accessing the system. so i need to somehow properlly log out
00:29  rustymyers: ritztech: Sorry, i cant help answer that question, but could you make something else to monitor for sleeping processes or closed connections?
00:31  ritztech: im not sure if i can use the watch command with expect
00:32  ritztech: i have it on an infinite loop like monitoring ports in case something happens but when a user closes the connection im not sure if its maybe a hidden proccess that i have now or just improperly logging off
00:40  jetole: Hey guys. Just looking for some advice since I have a way that works but wondering if anyone can improve upon this. I am trying to do a continue inside a loop if the first char of a variable is a space or tab (or I guess anywhite space would qualify). I'm using: [[ "${line:0:1}" == ' ' || "${line:0:1}" == '    ' ]] && continue
00:40  jetole: the second check, '    ', thats a tab
00:41  sente: rustymyers: http://sente.pastebin.com/R2vTpPvx
00:42  jlebar: What's the right way to do something like  xargs -I{} -n1 ( tac foo | tail > {} )  ?  Apparently I can't just use parenthesis in the xargs target...
00:42  sente: jlebar: what are you really trying to do?
00:43  Riviera: jlebar: I have no idea if I can answer your question, so I potentially wasting your time, but I'd like to understand what you'd like to do explained in English, not by potentially broken code that might be impossible to understand (because it does not work) :)
00:43  jlebar: sente, Specifically, I want to use xargs to call a sequence of commands linked together by pipes.
00:43  jlebar: Generally, I want to truncate a bunch of files, using   tac foo | tail -n +42 | tac
00:44  jlebar: I guess I could use a bash loop, but maybe there's a right way to do this with xargs?
00:46  sente: jlebar: http://sente.pastebin.com/LqkucXve
00:48  jlebar: sente, sorry, I don't understand how that has to do with using xargs to call a sequence of commands linked by pipes.
00:48  sente: for x in *.log; do tail -n50 "$x" > "$x.copy" && mv "$x" "$x.old" && mv "$x.copy" "$x"; done;
00:50  jlebar: sente, right, that works.  Or I can pipe to a while read loop.  I was just curious if there's a right way to do it with xargs.  Maybe not.
00:51  sente: xargs -d'\n' -I{} sh -c 'tail -n50 {} | tralala | tralala'
00:51  jlebar: sente, aha.
00:51  jlebar: yes, that's great
00:51  jlebar: Thanks!
00:51  sente: no problemo
00:52  sente: you should quote {} too, inside the sh -c expression
00:52  jlebar: indeed.
00:56  rustymyers: thanks sente, I'm barely grasping what you've done, but I think I'll figure it out with a bit of research. appreciate the help
00:58  flaccid: is there a better way to do this? foo=$(echo `gem environment gemdir`/gems/rest_connection*)
00:58  geirha: foo=( "$(gem environment gemdir)/gems"/rest_connection* )
00:59  Riviera: flaccid: the result would be a string that contains space-delimited paths?
00:59  Riviera: kk, see geirha.
01:03  flaccid: thanks heaps guys
01:03  flaccid: i learn something every time!
01:30  sente: rustymyers: no problem. i'm simply looping through all the directories, comparing each directory to the elements in the EXCLUDE array, if any of them match then the dir should be filtered, etc
01:47  jetole: can a variable defined in a function be exported so it can be used outside the function? A method to apply scope to it or something like that or, do I have to define it outside the scope of the function?
01:49  Tramp: # foo(){ bar=baz; }; foo;  echo "$bar"
01:49  evalbot: Tramp: baz
01:50  jetole: Tramp: oh so they are already exported from the function eh? Cool. Thanks for the uh... let's say insight
01:51  Tramp: jetole: well - not "exported". Variables are global unless explicitely declared local.
01:53  geirha: Of course, that won't work if you run the function in a subshell, like with command subsitution ($() or ``)
01:53  geirha: or if you use it as part of a pipe
01:59 --- Unknown[NF] is now known as Unknown[OFF]
02:09  steve___: how does one sort a line of words?  I was trying   sort -t' ' "foo bar baz"
02:14  Riviera: # string="foo bar baz"; set -f; string=$(printf %s\\n $string | sort | tr '\n' ' '); echo "$string"
02:14  evalbot: Riviera: bar baz foo
02:14  Riviera: + set +f
02:15  Riviera: There might be far better ways, but I don't know at the moment; also consider to store that data in an array instead of in a string.
02:18  steve___: Riviera: how would I sort the array?
02:21  Riviera: steve___: sorry, i did not mean there was an advantage with sorting when using an array instead. (Of course you could implement the sort algorithm in bash, but well, that'd only be the second best decision;)  set -f; IFS=; array=( $(printf %s\\n "${array[@]}" | sort) )
02:21  Riviera: steve___: with GNU sort you'd have the advantage of not being restricted to any special characters in your elements. The string solution restricts you by default to whitespace-separated elements, or by newline separated ones with changing IFS,
02:22  Riviera: steve___: with GNU sort and arrays you could use GNU sorts -z option to have any characters (except \0) in your elements.
02:46  UnholyTerror: Does anyone know how to change gnome-terminal profiles from within .bashrc? Sorry if ot...
02:49  Riviera: UnholyTerror: no idea what gnome-terminal profiles are, but there also is ##gnome
02:55  kingsley: Does anyone here happen to know if the "join" command can add place-holding delimiters when there's no matching join field, without using the "-o" option?
02:57  UnholyTerror: Riviera, thank you. :)
02:57  kingsley: 4# which join
02:57  shbot: kingsley: no output
02:58  kingsley: 4# join -t , -a 1 -o 0,1.1,2.1 <(echo -e "1,2\n2,3") <(echo -e "2,4")
02:58  shbot: kingsley: bash4: join: command not found
02:58  kingsley: 4# join -t , -a 1 <(echo -e "1,2\n2,3") <(echo -e "2,4")
02:58  shbot: kingsley: bash4: join: command not found
02:58  kingsley: You can see my problem by copying and pasting the above two commands onto your command line.
02:59  kingsley: The second example is missing a place-holding comma.
03:07  kingsley: Or, if join can't do it, perhaps another tool can.
03:12  Milossh: hello. how can i ignore multiple instances with grep or egrep?
03:12  kingsley: Milossh: Yes, by piping their output into "uniq". egrep hello file | uniq
03:13  Milossh: kingsley: mind rephrasing that? i'm combining `file -path 'something'` with that to open the files with the same name under different folders
03:15  kingsley: Here's a simple example.
03:15 --- Mike1_ is now known as Mike1
03:15  kingsley: 4# echo -e "a\na\nb" | egrep a | uniq
03:15  shbot: kingsley: bash4: uniq: command not found
03:17  kingsley: Milossh: Try copying and pasting the following lines to your command line:
03:17  kingsley: echo -e "a\na\nb"
03:17  kingsley: echo -e "a\na\nb" | egrep a
03:17  kingsley: echo -e "a\na\nb" | egrep a | uniq
03:18  Milossh: kingsley: grep -v "1" | grep -v "2" seems to work
03:19  kingsley: That ignores any lines containing "1" or "2".
03:19  kingsley: Milossh: Maybe you want egrep -v "1|2".
03:19  punky: folks.
03:20  Milossh: kingsley: I have dir structure like: a/1/1.sh b/1/1.sh c/1/1.sh
03:20  Milossh: now, I want to gedit all files inside 1 and with name 1.sh
03:21  Milossh: I did that by find -path '1/1.sh' | grep -v "a_b_like_dirs_I_want_to_ignore"
03:21  Milossh: and gedit before that
03:22  Milossh: gedit `find -path '1/1.sh' | grep -v "a_b_like_dir_I_want_to_ignore"`
03:22  Milossh: now I need to ignore more than one dir
03:22  Milossh: kingsley: ^
03:24  kingsley: Milossh: Maybe this will work...
03:24  kingsley: gedit `find -path '1/1.sh' | grep -v "a_b_like_dir_I_want_to_ignore|another_directory_to_ignore|yet_another_directory_to_ignore"`
03:24  Milossh: kingsley: tried, not working
03:25  Milossh: grep - v "something" | grep -v "something else"
03:25  Milossh: isn't either
03:25  Milossh: nor grep "bla" "bla1"
03:25  kingsley: Please explain what you expected to happen, and what actually did happen.
03:26  Milossh: i think your line worked, but was not ignoring dirs
03:27  Milossh: as in, open all files, but not ignore dirs I sad
03:27  Milossh: *said
03:28  Milossh: it ignores the first one though
03:29  punky: why use ${arr[*]} when you can use ${arr[@]} ?
03:29  punky: ${arr[*]} arr sees elements with a space as 2 elements.  why would you want that ?
03:30  Milossh: punky: is that something for me?
03:31  Riviera: "${array[*]}" converts an array to a string, first-character-of-IFS-separated; "${array[@]}" is the array as single words. Sometimes you want the elements (or some elements) of an array to be a string, for example for output.
03:31  Riviera: # a=(one two three) IFS=,; echo "${a[*]}"
03:31  evalbot: Riviera: one,two,three
03:31  cthuluh: punky: though ${arr[@]} and ${arr[*]} (without quotes) are the same
03:32  kingsley: Milossh: I'm sorry, I do not understand you.
03:32  Riviera: Milossh: grep on find output does rarely make sense.
03:33  Milossh: Riviera: it makes sense for one ignored string
03:33  Milossh: I just want to add more
03:33  Riviera: Milossh: I cannot say that I understand you, but I think that ! -path or -prune might be what you should investigate in.
03:33  Riviera: Milossh: There is a decent introduction:
03:33  Riviera: !find > Milossh
03:33  greybot: Milossh: http://mywiki.wooledge.org/UsingFind
03:34  Riviera: Milossh: find has "or," "and," "not" and grouping ("(" and ")") operators
03:34  Milossh: I'm really not sure if I can explain it better then the way I just did
03:35  Milossh: let me investigate find
03:35  Riviera: Milossh: find . -type d '(' -name 'dir1' -o -name 'dir2' -o -name 'dir3' ')' -prune -o -type f -name '*.txt' -print
03:35  jetole: hey guys. I'm using "while read -r line" which is getting input via "done < file.txt" at the end but it seems like if a line starts with a tab, it's being removed from the line. Does anyone know how I can get around that?
03:35  Riviera: Milossh: But well, unsure what you actually want to do. But I am too wasted and tired, so that surely is rather my fault :)
03:35  Milossh: hehehe
03:36  Milossh: no probs, thanks for your help. kingsley, thank you too dude!
03:36  Riviera: jetole: change "while read -r" to "while IFS= read -r" and please try again.
03:36  jetole: 1 sec
03:37  cthuluh: or just do    while read -r; do stuff with "$REPLY"; done
03:37  jetole: Riviera: well I'll be damned. That worked but afaik IFS uses space by default and I haven't changed it afaik
03:39  jetole: ok... I just ran echo "'${IFS}'" in the script and got a new line so I'm gonna look over the source file thats getting included
03:39  cthuluh: 4# echo "[$IFS]"
03:39  shbot: cthuluh: [ 	
03:39  shbot: cthuluh: ]
03:40  Riviera: jetole: no, it uses "whitespace" by default; that is space, tab and newline
03:40  jetole: hmmm
03:40  jetole: Riviera: I see
03:40  Riviera: jetole: unsure if maybe even carriage return on machines where that is the default line ending
03:40  jetole: well thanks Riviera and cthuluh for the help and info. Appreciate it
03:40  Riviera: :)
03:45  jetole: Riviera: is there a grep to match whitespace in it's generic / ambigious form like what you just said IFS uses
03:45  Riviera: jetole: [[:space:]]
03:46  jetole: or...
03:46  jetole: hope that works on sed too
03:46  Riviera: yes, it does
03:46  Riviera: # printf 'space tab\tnewline\ncarriage return\r\n' | sed 's/[[:space:]]/<whitespace>/g'
03:46  evalbot: Riviera: space<whitespace>tab<whitespace>newline
03:46  evalbot: Riviera: carriage<whitespace>return<whitespace>
03:46  Riviera: ah, well.
03:47  Riviera: # printf 'space tab\tnewline\ncarriage return\r\n' | sed  -e :a -e '$bb' -e N -e ba -e :b -e 's/[[:space:]]/<whitespace>/g'
03:47  evalbot: Riviera: space<whitespace>tab<whitespace>newline<whitespace>carriage<whitespace>return<whitespace>
03:47  Riviera: :)
03:48  Riviera: (also matches \v)
03:50  jetole: Riviera: it works for me and cool
03:50  jetole: though I'm curious...
03:51  jetole: # printf 'space tab\tnewline\nnewline\nnewline\ncarriage return\r\n' | sed  -e :a -e '$bb' -e N -e ba -e :b -e 's/[[:space:]]/<whitespace>/g'
03:51  evalbot: jetole: space<whitespace>tab<whitespace>newline<whitespace>newline<whitespace>newline<whitespace>carriage<whitespace>return<whit
03:51  evalbot: jetole: espace>
03:51  jetole: ah nicely done
03:52  jetole: Riviera: I read a week ago about how to get sed to work with newlines going beyond the typical every other newline fix scenario but I forgot how. Appearently you didn't
03:54  Riviera: jetole: it depends
03:54  Riviera: jetole: always on the specific problem
03:55  Riviera: jetole: but, it's not worth the trouble, usually, when one needs it, sed is not the right tool.
03:55  jetole: Riviera: I know but it was still neat to see
03:55  Riviera: s/needs it/needs anything beyond the most basic editing commands/
03:55  Riviera: :)
03:55  jetole: though, and I know this may be a little off topic, this isn't working for me in sed: [^[[:space:]]]
03:56 --- emojelly is now known as endojelly
03:57  jetole: oh wait, I'm betting the first [] segment is the [^ ] segment I was looking for
03:57  openstandards: hi is it possible to call a subroutine when using whiptail?
03:58  Riviera: jetole: [^[:space:]]
03:58  Riviera: jetole: yes.
03:58  jetole: yes it was. this works: [^[:space:]]
03:58  jetole: yeah
03:58  jetole: cool
03:58  jetole: thanks
03:58  jetole: I'm RTFM tr at the moment which defines all those and I am wondering if [:print:] is the inverse of [:space:]
03:59  jetole: nope
03:59  Riviera: Those also depend on the locale in use
03:59  Riviera: anyway, am afk again :)
04:00  jetole: Riviera: [:graph:] is
04:00  jetole: Riviera: thanks again and ttyl
04:03  arnotixe: hi all Just for fun, is there a "well known" numerical error code for "syntax error"? I can use "exit 1" but what if there was a well known code?...
04:03  ferret: No.
04:04  arnotixe: ok. I'm free!
04:13  punky: whats the difference between PATH=bar; and export PATH=bar ;  ?  It's not like export made PATH persisent for all terminall sessions
04:13  punky: I don't have a man page for export
04:14  ASGR: using export makes the variable visible globally i think
04:14  cthuluh: punky: see ''help export''
04:15  punky: cthuluh: oh help.  thanks.
04:16  cthuluh: 4# PATH=/bla; /bin/bash -c 'ls'
04:16  shbot: cthuluh: no output
04:16  cthuluh: hmmm
04:16  ASGR: correction... it makes it an environmental variable
04:16  cthuluh: 4# touch foo; PATH=/bla; /bin/bash -c 'ls'
04:16  shbot: cthuluh: foo
04:17  punky: ASGR: oh, so with out export, it's just a local variable.
04:18  cthuluh: that's weird. here, the commands above yell an error about 'ls' being not found
04:19  cthuluh: so here export is not needed to change a child process's view of an environment variable, but it is required for shbot and evalbot
04:20  cthuluh: perhaps one of debian's patches
04:21  ASGR: i think you need to tell bash that a variable is a local. you can only use locals inside a function though.
05:27  Riviera: # PATH= /bin/bash -c 'ls'
05:27  evalbot: Riviera: /bin/bash: ls: No such file or directory
05:27  Riviera: cthuluh: You did not manipulate the environment variable.
05:33  cthuluh: $ PATH= ; /bin/bash -c 'ls'
05:33  cthuluh: /bin/bash: ls: No such file or directory
05:34  cthuluh: is what I get on debian
05:34  Riviera: cthuluh: Yes, because there PATH is exported to the environment.
05:34  Riviera: # env | grep PATH
05:34  evalbot: Riviera: no output
05:35  Riviera: # declare -p PATH
05:35  evalbot: Riviera: declare -- PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
05:35  Riviera: # export PATH; declare -p PATH
05:35  evalbot: Riviera: declare -x PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
05:37  cthuluh: I can hardly understand why PATH shouldn't be exported on those bots
05:38  Riviera: It probably was not a conscious decision. :)
05:40  cthuluh: anyway I have heard about problems about exported variables. things like: on some systems, modified exported variables are automatically available to child processes, whereas on some other systems, you have to export the variable again.
05:40  Riviera: cthuluh: in bash?
05:41  Riviera: cthuluh: there recently also was a security issue about the same variable exported twice.
05:41  cthuluh: not in any particular shell
05:41  Riviera: cthuluh: ah.
05:47 --- Gallo__ is now known as Gallomimia
06:08  italic: is it possible to remove the owner and group of a file?
06:34  cthuluh: italic: nope. and it's not bash related
06:55  Alan502: Hello everybody
06:56  Alan502: I'm writing an sh script: I found an app on synaptic that prints the X idle time, xprintidle. I'd like to use it in my script but idle = echo `xprintidle` says not found?
06:59  Riviera: !faq 2 > Alan502
06:59  greybot: Alan502: http://mywiki.wooledge.org/BashFAQ/002 -- How can I store the return value/output of a command in a variable?
07:00  Alan502: Riviera, thanks
07:00  Riviera: Alan502: If the command was as you just typed it: No spaces around the =, no echo, and $() instead of ``
07:01  Alan502: Riviera, oh, no spaces? no echo?
07:01  Alan502: That's what i'm doing wrong :P
07:01  Riviera: :)
07:02  Alan502: Riviera, it still says not found... do the variables in sh always need to have a dollar sign in front?
07:03  Riviera: Alan502: not at all, variable names don't have dollar signs, that rather is the syntax for expanding them to their value
07:03  Riviera: # touch file1 file2 file3; var=$(ls); echo "var contains: $var"
07:03  evalbot: Riviera: var contains: file1
07:03  evalbot: Riviera: file2
07:03  evalbot: Riviera: file3
07:04  Riviera: Alan502: so, you did: idle=$(xprintidle)
07:04  Riviera: Alan502: and that did not work?
07:04  Alan502: Riviera, let me see, it's cause i was putting a dollar sign in the variables...
07:05  Alan502: Riviera, I don't know why it still says not found... may i pastebin you my code?
07:06  Alan502: http://pastebin.com/w6EYu3Zt
07:08  Riviera: Alan502: you do use if incorrectly
07:08  Riviera: Alan502: the syntax of if is similar to that:
07:08  Riviera: Alan502: if commands; then commands; ...; fi
07:08  Riviera: with potential elses and elifs
07:08  Riviera: Alan502: so, after "if" normal commands follow,
07:09  Riviera: Alan502: like "ls" ;)
07:09  Riviera: Alan502: (10 > 12) however is no command
07:09  Alan502: Riviera, oh i seee
07:09  Alan502: Riviera, so what could i use?
07:10  Riviera: Alan502: first of all, does it have to be a sh script
07:10  Riviera: Alan502: or can it be a bash script?
07:10  Alan502: Riviera, it can be bash, why not :)
07:11  Riviera: Alan502: in that case, change the first line to #! /bin/bash
07:11  Riviera: Alan502: then, you can use (( .. )) for arithmetic comparisons,
07:11  Alan502: Riviera, the thing is that i get very often confused with sh and bash
07:11  Riviera: Alan502: like:
07:11  Riviera: Alan502: if ((idle > 5))
07:11  Riviera: Alan502: then
07:11  Riviera: Alan502:     ..
07:11  Riviera: Alan502: fi
07:11  Riviera: Alan502: and [[ for other tests, like
07:12  Riviera: Alan502: if [[ "$newmd5sum" = "$md5sum" ]]
07:12  Riviera: Alan502: then
07:12  Riviera: Alan502: ..
07:12  Alan502: oh i see...
07:12  Alan502: is that the only difference?
07:12  Riviera: Alan502: might be, yes, am not sure, am too tired to be sure :))
07:12  Alan502: lol
07:13  Alan502: thanks :D
07:13  Alan502: but you won't believe me if i tell you that it keeps saying not found :P
07:13  Riviera: to what exactly? what's the exact error message?
07:14  Riviera: xprintidle?
07:14  Alan502: + xprintidle
07:14  Alan502: + idle=3228
07:14  Alan502: + idle
07:14  Alan502: /etc/sleep_inactive.sh: 1: idle: not found
07:14  Riviera: Alan502: please put the script again in a pastebin :)
07:14  Alan502: oh i need to run it with bash right
07:14  Alan502: LOL
07:14  Riviera: since you surely used ((, then yes :)
07:16  Alan502: http://pastebin.com/N6mXUEJY
07:16  Alan502: Riviera, let me post you the out put of the script running on bash -x
07:16  Riviera: Alan502: you forgot to change the second if
07:17  Riviera: Alan502: change if (newmd5sum = md5sum)
07:17  Riviera: Alan502: to  if [[ "$newmd5sum" = "$md5sum" ]]
07:17  Alan502: Riviera, haha, man it's so hard to be a newbie
07:17  Alan502: Riviera, thanks, the script is running now
07:17  Riviera: cool :)
07:18  Alan502: Riviera, but it gives me a different error, value too great for base (error token is "5c77b37721a88f99399a9c2c5e9305a1")
07:18  Riviera: !guide > Alan502, maybe that's a good read for you
07:18  greybot: Alan502, maybe that's a good read for you: http://mywiki.wooledge.org/BashGuide
07:18  Alan502: too great?
07:19  Riviera: Alan502: odd.
07:19  Alan502: Riviera, yeah i'd rather google it
07:19  Alan502: Riviera, thanks a lot really
07:19  Riviera: no, wait wait :)
07:19  Riviera: Alan502: please paste both,
07:19  Riviera: Alan502: the current script and the output of a run with -x to a pastebin :)
07:20  Alan502: this is the script : http://pastebin.com/bkvQdt9W
07:21  Alan502: Riviera, and this is the output :) : http://pastebin.com/SGNBxry3
07:22  Riviera: Alan502: ;)
07:22  Riviera: Alan502: if [[ "$newmd5sum" = "$md5sum" ]]
07:22  Riviera: Alan502: not (( )) there
07:22  Riviera: Alan502: the md5sums are strings, not numbers
07:23  Alan502: Riviera, with a dollar sign?
07:23  Riviera: Alan502: exactly like that
07:24  Alan502: meh, it keeps giving me the same error
07:24  Riviera: Alan502: the only thing that could be changed from the line I gave you are teh double-quotes around the first pathname expansion
07:24  Riviera: Alan502: mh.
07:24  Riviera: Alan502: then please show the current script again
07:24  Alan502: oh without parethesis right?
07:24  Riviera: Alan502: exactly like I showed :)
07:24  Riviera: Alan502: character by character, no parenthesis, no nothing :)
07:26  Alan502: Riviera, script: http://pastebin.com/zhEJEn4r      output: http://pastebin.com/vK7dY801
07:27  Riviera: Alan502: you might need a different font for this chat ;-)
07:27  Riviera: Alan502: for the second if, use [[, not ((
07:27  Riviera: Alan502: also, the space is important there
07:27  Riviera: Alan502: wait
07:28  Alan502: {{
07:28  Alan502: ((
07:28  Riviera: Alan502: http://pastebin.com/R6QpBCRW
07:30  Alan502: Riviera, DUDE, it worked!!!!
07:30  Riviera: great :)
07:30  Alan502: Riviera, works just fine :D thanks a lot!!!
07:30  Riviera: welcome ;)
07:31  Riviera: I am not sure, because I haven't read it, but I believe all these things are explained here: http://mywiki.wooledge.org/BashGuide
07:31  Alan502: I see
07:31  Alan502: Thanks, i'll read it
07:31  Alan502: bash can be confusing! xD with no syntax check
07:32  Riviera: :)
07:32  cthuluh: Alan502: you can use syntax checking alone with bash -n ./yourscript
07:33  Alan502: cthuluh, seriously? nice to know, i'll use it the next time XD
07:34  cthuluh: Alan502: that's not so useful, in fact
07:34  cthuluh: !set-x > Alan502
07:34  greybot: Alan502: Setting the -x option on bash enables a debugging mode that makes bash output the command name and arguments that it will run (after all parsing and expansion has been applied). Set it by starting a script with ''bash -x ./myscript'' or putting ''set -x'' before the code you want to debug. ''set +x'' turns this behaviour off.
07:34  Alan502: cthuluh, yes, i was using -x while working on this script
07:35  cthuluh: cool. keep using it, then :)
07:35  Alan502: thanks anyway :)
07:37  Alan502: cthuluh, just one question, is it possible to execute a command when the user exits a bash script with ctrl+c?
07:37  cthuluh: !trap
07:37  greybot: If you want processes to communicate, the easiest way (besides a pipe) is to use signals. See: help trap <Enter>, man kill and man bash /SPECIAL PARAMETERS | http://mywiki.wooledge.org/ProcessManagement
07:38  Alan502: thanks
08:16  kingsley: At least for me, the "paste" command starts requiring virtual memory, and slowing, when one of the files being joined is about a third of the size of my RAM.
08:16  kingsley: Is there a more memory efficient way paste two files together?
08:16  kingsley: If so, what is it?
08:17  kingsley: I'm thinking of something with three file points: for the first and second input files, and one for the output file.
08:18  kingsley: The file pointers would point to the current locations being read or written, and thus most data would stay on disk, instead of RAM.
08:19  kingsley: s/three file points/three file pointers/
08:19  kingsley: Is there a more memory efficient way than "paste" to paste two files together?
08:24 --- stockhol1 is now known as stockholm
08:25  pgas: it seems strange that the paste command uses a lot of memory.
08:26  pgas: it's probably not difficult to write your own version in C that suits your need
08:29  kingsley: It seems to me that awk would probably be easier.
08:29 * kingsley goes to #awk
08:32  pgas: are you sure it's the paste command? not linux caching the small files and flushing them to disk at a later stage? do you notice the same slow down if you redirect to /dev/null? or if you read new small files (not previously cached)?
08:40 --- maxim is now known as Guest3968
10:24  Bzek_: Hello. How to create something like that: alias 's us2'='ssh -l root 8.8.8.8' ?
10:24  \malex\: Bzek_: why?
10:25  Bzek_: bash: alias: `s us2': invalid alias name
10:26  Bzek_: I want to type "s us1" and "s us2" to connect to different boxes.
10:26  \malex\: must you really have a space there?
10:27  \malex\: if you must, you must use a function, not an alias
10:27  Bzek_: Hm... may be. I have a big list of servers.
10:39  Bushmills: alias  s%20us2 :)    invoke it with    s%20us2
10:40  tm512: Hi, I need to test for the presence of the ^A (\u001 i guess) character in a string
10:40  Bushmills: but - why not define a script (or function) s, and handle us2 parametrically?
10:40  tm512: using grep
10:41  Bushmills: (like, look up ip address from a file, with format     label ip-address  per host)
10:42  \malex\: or one can put all those labels into /etc/hosts, and alias s='ssh -l root' :D
10:42  Bushmills: file is more flexible, in for example also allowing to add login name per host
10:42  \malex\: i don't think he does different logins
10:44  Bushmills: either case eliminates the need for spaces in alias/function names
10:53  tm512: any ideas?
11:26  tm512: anyone? I need to use regex to find ^AVERSION^A and then send back ^Actcp version response^A
11:32  Bzek_: Bushmills, \malex\: I gave up creating a function connect_to_server and a hash with name/ssh args and alias s="connect_to_server". And just created "usa1", "usa2"... ;))
11:44  geirha: tm512: ctrl+v ctrl+a  will give you a literal ^A
11:46  tm512: like, inside nano
11:46  tm512: it messes up with screen haha
11:49  tm512: geirha: thanks, that did it
11:50  geirha: printf '\001' is another option
11:51  tm512: like `printf \001`
11:51  tm512: ?
11:52  geirha: var=$(printf '\001%s\001' "VERSION")
12:32  mac-: hi
12:37  TheBonsai: y0
12:39  tm512: heh making an alarm clock with the atd :)
12:39  mac-: pls look at it: http://pastebin.com/WcEVsRUg
12:39  tm512: heh this should work
12:39  mac-: ubt
12:39  mac-: but
12:40  mac-: when I ivoking it with -x
12:40  mac-: got list of files
12:40  mac-: also inside if statement
12:40  mac-: w8 a second, I will paste execution with -x
12:41  mac-: you will see
12:43  mac-: http://pastebin.com/3yYUDEmM
12:43  mac-: here you are
12:43  trash: $(ls) is stupid.
12:43  mac-: ok, it is, but here is only for example
12:43  mac-: :>
12:43  trash: Stupid example.
12:43  mac-: heh
12:45  mac-: this script should enter 'directory' dir because it is dir, but as you can see from second paste it is treated as file
12:45  geirha: You need quotes, and you should always test cd's exit status.
12:46  geirha: mac-: No, it's neither a file, nor directory, it's a newline delimited list of filenames
12:47  geirha: And the -x output is not from the initial script you pasted.
12:47  geirha: the problem is ls
12:47  trash: But it's just an example!
12:47  mac-: trash: :D
12:48  geirha: Change "$(ls)" to *
12:48  mac-: geirha: I see through -x output that list was send to if
12:49  trash: I suggest an array.
12:49  geirha: mac-: Yes and I bet you don't have a file named $'directory\ntemporary1\ntemporary2'
12:49  mac-: not
12:49  mac-: i have dir 'directory'
12:49  mac-: and two files
12:49  mac-: :>
12:49  geirha: Yes, so stop using ls
12:49  mac-: ok
12:49  mac-: why ls acting like this ?
12:50  geirha: because it's not designed to be used in scripts
12:50  geirha: Its only purpose is to give a human readable view of files in your filesystem
12:50  geirha: besides, why use ls when the shell can do it?
12:52  mac-: geirha: it is not my script
12:52  geirha: Then why do you bother?
12:52  mac-: I don`t know why they used ls there
12:53  mac-: becaouse it doesn`t work
12:53  geirha: They used ls because they don't know any better, they're crappy scripters
12:53  geirha: !junk
12:53  jymere: I need some help here: http://ubuntuforums.org/showthread.php?t=1643568 --> I have to write a script to edit a file using vim. thanks
12:53  geirha: !crap
12:53  greybot: The overwhelming majority of bash scripts, code, tutorials, and guides on the Internet are crap. Sturgeon was an optimist.
12:53  mac-: heh
12:54  geirha: jymere: Use ex
12:54  jymere: ok i'll try
12:56  jymere: geirha: it doesn't work: #!/bin/sh
12:56  jymere: #shell
12:56  jymere: ex <<EOF
12:56  jymere: r annu
12:56  jymere: %s/^[^0-9]*//
12:56  jymere: %s+trans.*in+ / +
12:56  jymere: %s/ seconds//
12:56  jymere: w
12:56  jymere: q
12:56  jymere: EOF
12:57  ferret: Is %s a command in ex?
12:58  jymere: i believe
12:58  geirha: You haven't given ex any file to edit
12:58  geirha: ex annu << EOF
12:58  geirha: %s/^[^0-9]*//
12:58  geirha: w
12:58  geirha: EOF
12:59  jymere: but I have to open my file "annu" ?
12:59  geirha: jymere: You want to edit annu or some other file?
12:59  jymere: annu
12:59  jymere: and may be i can pass annu in argument with $1
13:00  geirha: Right, then tell ex that by providing that filename as the first argument.
13:00  jymere: ok
13:01  jymere: POWER it's working !!!!
13:01  jymere: thanks very much
13:14  rigved: jymere: cool...i got to learn this too
13:14 --- gnoob is now known as lapsusbrutus
13:23  geirha: If you know vi, you know ex.
13:23  geirha: (more or less)
13:25  jymere: rigved: so powerful @+
13:27  jymere: I have an other problem: I declare a variable T=`date` and I must wait some time and I need the former value of T (not the new one). Actually I need to declare T as a constant.
13:29  TheBonsai: RFC http://wiki.bash-hackers.org/commands/builtin/exec
13:30  aknagi: Has anyone been looking at Powershell? Do you feel it gives Windows the edge when it comes to the command line?
13:31  TheBonsai: i guess yes, but ask #windows
13:34  aknagi: It's annoying, because Unix like OS's had always kicked arse in that area. I think the "text streams are the universal interface" philosophy could be revised :/
13:36  TheBonsai: the text interface is NOT the universal interface on windows
13:36  TheBonsai: that's it
13:39  jymere: I have an other problem: I declare a variable T=`date` and I must wait some time and I need the former value of T (not the new one). Actually I need to declare T as a constant.
13:39  TheBonsai: well, it is constant
13:40  TheBonsai: T=$(date) executes "date" ***in this moment*** and sets T to the output of it
13:40  TheBonsai: end of story
13:40  TheBonsai: pretty constant
13:43  jymere: yeah ! excuse me yesterday it didn't work (i had forgotten the backquotes)
13:43  jymere: thanks @+
14:42  poisonbit: is there an easy way to strip escaped colors from input, or do i will need to use regexp. ?
14:50  trash: poisonbit: Why do you have them in the first place?
14:51  poisonbit: I don't have them, i'm trying to write an uncolor() func  :)
14:52  poisonbit: i'm beteween a regexp I've seen in a perl module, or know if there are other solutions/hacks
14:56  geirha: "${var//$'\e['*([!m])m}"
14:56  poisonbit: clever
14:56  geirha: But I second trash, don't put colors in there in the first place.
15:00  poisonbit: *([!m])  means "whatever to the m"  ? and then you add the m ? i'm trying to understand it
15:02  igli: stripping colours from a var? why do you have them in there in the first-place?
15:02  igli: !glob > poisonbit
15:02  greybot: poisonbit: "Glob", the common name for pattern matching, filename expansion, "wildcards", etc. http://mywiki.wooledge.org/glob
15:04  geirha: It's an extglob
15:04  geirha: zero or more not-m
15:13 --- emma is now known as em
15:16  poisonbit: igli, sorry you joined after I typed this:  <poisonbit> I don't have them, i'm trying to write an uncolor() func  :)
15:16  ferret: !uncolour
15:16  igli: is it output from another program, poisonbit?
15:16  ferret: Guess I didn't save it
15:17  poisonbit: igli, i'm not solving nothing I have currently, i'm just grouping generic functions
15:20  igli: ok. you might use: printf -v "$var" '%s/n' "${!var//$'\e['*([!m])m}" # where var is a variable-name passed to your function. tho those cntrl-codes are linux-specific iirc
15:21  igli: er '%s'
15:21  igli: slash was wrong, but \n it shouldn't be used in any case
15:23  ferret: igli: that's wrong, and bad
15:24  ferret: If there are any ecma48 sequences in it that are not colours that will break everything
15:24  ferret: e.g. the output of grep --color=yes
15:24  ferret: !learn uncolour uncolour() { sed -e $'s/\e[[][\\0-\\077]*m//g'; }
15:24  greybot: OK, ferret
15:24  igli: well i was building on geirha's expansion. i only uncolour streams or files
15:25  Alogeno: hi, i'm trying to make a startup script for wifi connection but i can't get association with router and i know the script is parsed because iptables rules contained are ok
15:25  igli: well delete all console codes rather
15:25  ferret: Luckily all the terminating characters of these codes have high bit set
15:25  Alogeno: how do you manage iwconfig key on a bash script?
15:25  ferret: Well, not luckily, that is the smart design that makes parsing them easy.
15:25  cthuluh: Alogeno: not a bash question
15:26  cthuluh: Alogeno: ask you distro channel
15:26  ferret: delete all console codes would be slightly different
15:26  Alogeno: i think the problem is in the quote of the key
15:26  Alogeno: so why i asked here
15:26  ferret: replace m in mine with... iirc it's [\\100-\\176]]
15:26  ferret: But I'd have to look it up
15:27  Alogeno: i use iwconfig key "s:my_key" is it correct?
15:27  igli: sed $'s/\033\[[^m]*m//g'" is what i've got atm
15:28  ferret: Yes... that is wrong.
15:28  ferret: It could end up deleting almost entire lines by mistake
15:29  ferret: here is an example line from a grep --color:
15:29  ferret:         ^[[Kreturn^[[K getdelim(lineptr, n, 0, stream);
15:29  Alogeno: ok quoting is not a bash question, thank you anyway
15:29  ferret: If you run it on that, it would delete '^[[K getdelim'
15:29  igli: ok
15:29  ferret: Erm, I missed off the actual colour code from that line, but whatever
15:29  ferret: It'd remove that bit correctly
15:31  spexi: Hello! This may be simple question, but I'm wondering how to calculate file sizes together that are found with find command? I have a project work, and I'm using find command to find e.g. all *.bak-files and calculate all file sizes together.
15:32  spexi: if i use > after find command and specify an output file, all found files are going to that file nicely. but how to calculate every files' size, do i need a loop or something?
15:40  igli: spexi: you have to be careful of newlines in files. you can use this to safely build an array of filenames: while read -rd ''; do arr+=("$REPLY"); done < <(find dir ... -print0)
15:42  igli: spexi: see http://mywiki.wooledge.org/BashGuide/Arrays and http://mywiki.wooledge.org/BashFAQ/005
15:43  igli: amd http://mywiki.wooledge.org/UsingFind ofc
15:44  igli: spexi: you'll need to use stat cmd to get the filesizes. man stat (see %s)
15:45  geirha: find . -type f -name \*.bak -exec wc -c {} +
15:46  igli: what happens if he gets two or more executions of wc?
15:46  geirha: If you have GNU find, you can use -printf to output filesize
15:46  igli: ooh that's nice
15:46  geirha: igli: Err, right. Multiple "total" lines.
15:46  igli: yeah
15:46  geirha: So maybe  find . -type f -name \*.bak -exec wc -c {} \;
15:47  geirha: or du -k
15:47  spexi: hmm okay
15:47  spexi: thanks for your answers
15:48  igli: yw. find .. -printf sounds dead useful
15:53  spexi: okay, i have line:
15:53  spexi: find . -type f \( -name "*.bak" -o -name "*.rej" \) -exec wc -c {} \;
15:53  spexi: it prints
15:53  spexi:      77 ./moi.bak
15:53  spexi:      29 ./juu.rej
15:53  spexi: i don't have clue how to take 77 and 29 out of that poutput
15:53  spexi: output*
15:54  geirha: What do you need it for?
15:55  geirha: The answer depends on what you're trying to do
15:55  spexi: i have a project work to create a program, which checks for unnecessary files. *.bak, *.rej, *.bup etc. and one command have to be summary, which calculates total file size for each unnecessary file type
15:56  geirha: Can you assume GNU or BSD find?
15:56  spexi: i have gnu find
15:58  geirha: baksum=0 rejsum=0; while IFS=/ read -r -d '' size file; do case $file in *.bak) ((baksum+=size));; *.rej) ((rejsum+=size));; esac; done < <(find . -type f \( -name "*.bak" -o -name "*.rej" \) -printf '%s/%p\0')
16:01  geirha: Or one find per extension:  find . -type f -name \*.bak -printf '%s\n' | awk '{sum+=$1}END{print sum'}'
16:02  spexi: okei, i'll try those
16:04  ben_q: why does this give me an error about "too many arguments":   if [ $lock -gt 0 ] || [ -n $logged_in ]; then
16:04  igli: !quotes
16:04  greybot: "USE MORE QUOTES!" They are vital. Also, learn the difference between ' and " and `. See <http://mywiki.wooledge.org/Quotes> and <http://wiki.bash-hackers.org/syntax/words>.
16:04  geirha: lock or logged_in contain whitespace
16:04 --- alphagod is now known as Unknown[NF]
16:05  igli: use [[ unless you're in sh
16:05  geirha: # [ -n a b c ]
16:05  evalbot: geirha: bash: [: too many arguments
16:05  geirha: # [ -n "a b c" ]; echo $?
16:05  evalbot: geirha: 0
16:05  geirha: !tests
16:05  greybot: In bash; consistently use [[ .. ]] to test strings or files and (( .. )) to test numbers or arithmetics. Do *NOT* use [ .. ] in bash, *only* in sh. See http://mywiki.wooledge.org/BashSheet#Tests
16:07  ben_q: ok, thanks
16:08  ben_q: what if it's a mixture of string and number?
16:08  ben_q: if ( $lock -gt 0 ) || [[ -n "logged_in" ]]; then   ?
16:08  geirha: Incidentally, if logged_in is empty, [ -n $logged_in ]  would return true
16:08  geirha: if (( lock > 0 )) || [[ $logged_in ]]; then
16:09  ben_q: i see
16:09  geirha: [[ is a keyword instead of a builtin, like [ is, so it's parsed differently. You don't need quotes around $logged_in with [[, but you do with [.
16:10  igli: ![[
16:10  greybot: [[ is a bash keyword similar to (but more powerful than) the [ command. See <http://mywiki.wooledge.org/BashFAQ/031> and <http://mywiki.wooledge.org/BashGuide/TestsAndConditionals>. Unless you're writing for POSIX sh, we recommend [[.
16:11  ben_q: thank you
16:11  geirha: And inside (( .. )), there's arithmetic context. Strings don't belong in arithmetic context, so any words containing alphabetic characters in there are treated as variable names. That's why I didn't put a $ in front of lock.
16:12  ben_q: uh ^^ omg..
16:13  ben_q: but this worked even with that $:  $(($attempts + 1))
16:13  igli: you can use $ in (( but you don't have to and it reads cleaner without
16:13  geirha: Yes, it expands $attempts first, e.g. if attempts is 2, it becomes $((2 + 1)), and then it calculates that and expand
16:14  geirha: # num=1; ((num++)); echo "$num"
16:14  evalbot: geirha: 2
16:14  geirha: # num=1; (($num++)); echo "$num"
16:14  evalbot: geirha: bash: ((: 1++: syntax error: operand expected (error token is "+")
16:14  evalbot: geirha: 1
16:14  igli: good point
16:15  geirha: In general, to avoid problems, don't prepend the $ inside (( )) and $(( ))
16:15  ben_q: ok
16:16  igli: thanks for uncolour ferret. it works well on this machine (BASH-4) but for some reason it fails on an older machine with: sed -e expression #1, char 20: invalid range end  cmd exactly the same.
16:17  igli: ah well nm ;)
16:17  ScriptFanix: geirha: what if one needs to use some parameter expansion inside (( )) ?
16:18  geirha: igli: Yeah, it probably only works with GNU sed.
16:18  ritzt3ch: is there a way to do an IF trap 20 or 2 is initated then exit ( im seeing multiple processes of my script in the ps -ef
16:18  geirha: ScriptFanix: In that case you have to use $, or save the expension to a different var first.
16:19  geirha: trap 'exit' 2 20
16:19  spexi: geirha: one more question. can i access with that awk to outside variable? i tried to remove that END and print sum, that i could increase local variable and write that to file
16:20  geirha: spexi: I don't understand
16:20  geirha: You can do   var=$(find ... | awk ...)
16:20  ritzt3ch: ha thats funny
16:20  spexi: ah okay
16:21  ritzt3ch: so what if my script is running a expect script will it pass the same trap to that script ? or do i have to somehow find the syntax to exit that
16:21  igli: it's linux so GNU, geirha. just hasn't been updated for over a year. *shrug*
16:23  TheBonsai: y0
16:24  igli: y0 TheBonsai :)
16:24  TheBonsai: !meta exec
16:24  greybot: lhunath 1287389690 learn exec [command] [redirections] replaces the script's process by a new one that runs the command. When no command is given, only the redirections are applied to the current shell.
16:24  TheBonsai: !forget exec
16:24  greybot: OK, TheBonsai
16:24  TheBonsai: !learn exec exec [command] [redirections] replaces the script's process by a new one that runs the command. When no command is given, only the redirections are applied to the current shell. http://wiki.bash-hackers.org/commands/builtin/exec
16:24  greybot: OK, TheBonsai
16:24  TheBonsai: !exec
16:24  greybot: exec [command] [redirections] replaces the script's process by a new one that runs the command. When no command is given, only the redirections are applied to the current shell. http://wiki.bash-hackers.org/commands/builtin/exec
16:28  spexi: geirha: the line gives syntax error, if I try to add var=(find .. )
16:28  spexi: without variable declaration that find command works
16:30  igli: var=$( not var=(
16:31  igli: arr=(); while read -rd ''; do arr+=("$REPLY"); done < <(find dir ... -print0) # is safer tho
16:31  ferret: igli: with non-gnu sed it'd work with [\1-\100] instead of [\\0-\\100]
16:32  ferret: I only put the extra \ in to prevent a NUL ending up in the string and thus terminating it... but i don't think you can have NULs in ecma48 sequences anyway
16:32  igli: ferret: ok. i'm on GNU; prob'y just a bug in my software
16:32  geirha: ritzt3ch: You'll need to add a trap in expect too
16:32  spexi: igli: thanks
16:32  spexi: great, now everything works
16:32  igli: yw spexi
17:23  CyberDomovoy: hi
17:41  poisonbit: !features
17:41  greybot: http://tiswww.case.edu/php/chet/bash/NEWS List of Bash features and when added
17:42  poisonbit: errr there was a shorter table than a changelog in some wiki... some one know the url or factoid ?
17:43  poisonbit: ah it was the faq 61
17:44  geirha: Yes, !faq features ;P
17:57  lieuwe[49ft]: so, i have this in my fluxbox startup script: fluxbox&chromium;wait;shutdown -h now; but it waits with shutting down until fluxbox is closed, but i want it to shut down after chromium is closed, any ideas?
17:58  Riviera: omit the wait
17:58  pgas: fluxbox & chromium & wait $! ; shutdown -h
17:59  pgas: oh yeah or just remove the wait
18:21 * k[t hails 2>/dev/null for ps -p and quotes: redirection is a life saver...
18:21 * k[t and now builds infomercial on how much it's saved me...
18:25  jetole: !here document
18:26  jetole: does someone have the query I need to get the here document?
18:26  jetole: the faq / link?
18:26  Riviera: !<< > jetole
18:26  greybot: jetole: Here documents. cat <<EOF followed by several lines of text, followed by the literal string EOF on a new line, NOT indented. The portion between the EOFs is passed to the command as standard input. If 'EOF' is 'quoted', substitutions WON'T be done; otherwise they are. See <<- for the indented variety.
18:26  jetole: Thanks Riviera
18:27  jetole: er, actually... well I wanted the link to send to someone else but I will look over greycats page
18:28  jetole: http://mywiki.wooledge.org/HereDocument
18:32  pgas: k[t: maybe you want kill -0 pid ?
18:43  lahwran: someone remind me, what is the variable that I can change to change what for uses to split?
18:43  lahwran: like if I want for i in 1:2:3 to iterate over 1 2 and 3, then what variable do I change?
18:44  lahwran: oor nevermind, I remembered, IFS :D
18:45  jymere: hi I need to write a function which verify if the parameter is an existing directory. I don't know how can I use a parameter. I would write: dir (p) { if test -d p; then echo ... else ...}
18:53  pgas: jymere: $1 $2 etc..just like a script
18:54  jymere: yes I 'm gonna do that
18:54  pgas: but you don't declare the argument. dir ()  { if test -d "$1";then.... ; }
18:55  michelem: hello folks
18:56  michelem: what is the best way to workaround expansion in a case like — sh -c "echo $$ > $pidfile && $command $flags"
18:56  michelem: where all but $$ needs to be expanded by the outer shell?
18:56  geirha: \$
18:56  geirha: or actually, pass $$ as an argument
18:57  geirha: sh -c 'echo "$1" > "$pidfile" && "$command" "$flags"' _ "$$"
18:57  geirha: Oh, and don't put commands in variables, that's just silly
18:57  michelem: no, $$ must be indeed the pid of the shell running that
18:57  geirha: Oh, the opposite
18:57  michelem: it may be silly but it's the way rc.subr works :)
18:58  geirha: No idea what that is. Pass all but $$ as arguments to the shell
18:58  jymere: Is there a command which veirfy if a variable correspond to a correct path ? ( For instance I want to know if I can create the directory "$1")
18:58  trash: jymere: mkdir "$1"
18:58  pgas: jymere: mkdir -p "$1"
18:58  geirha: sh -c 'echo "$$" > "$1"; shift; "$@"' _ "$pidfile" "$command" "$flags"
18:58  michelem: jymere: test -d
18:59  jymere: michelem : but the path doesn't exist necessairly
18:59  pgas: it looks a bit strange, the canonical thing is more something like: command & echo $! > pidfile
18:59  michelem: jymere: then mkdir -p
19:00  jymere: trash, pgas, michelem: ok I see
19:00  michelem: pgas: that's not bad, actually
19:00  michelem: how portable is $! ?
19:01  michelem: POSIX.1 , ok
19:02  Rinsmaster: What's the best way to sort a list by the most occuring lines, descending? I've messed with sort and uniq -c but couldn't get it right.
19:02  geirha: uniq -c | sort -rn
19:03  Rinsmaster: Ah, thanks
19:04  geirha: uniq expects the input to be sorted though
19:04  sente: Rinsmaster: sort | unic -c | sort -rn
19:04  geirha: Do you might need  sort | uniq -c | sort -rn
19:04  sente: if s/uniq/uniq
19:04  sente: err, s/unic/uniq
19:05  geirha: s/Do/So/
19:05  sente: s/inside and hungry/off to get food
19:06  pgas: or: awk '{a[$0]++}END{for (i in a) print i,a[i]}'  | sort -rn
19:07  geirha: damn, was just about to type taht one :P
19:07  pgas: ehe well, there is the bash4 version ;)_
19:08  ritzt3ch: im having issue doing this on 1 line am i missing the obvious # mysql -u root -e "use lainter_db; select * from data_list where [dns_name] like "NYC0047%";"
19:08  raikd: how can I upgrade the bash version ?
19:08  pgas: and maybe a gawk one and perl and :D
19:08  mikunos: hi guys
19:08  mikunos: Is this condition correct? if [$EMPTYDIR -eq 1]
19:09  mikunos: if $EMPTYDIR is 1 I get an error
19:09  geirha: pgas: The bash4 version is dangerous
19:09  pgas: ritzt3ch:  use ' ' instead of the outer " "
19:09  pgas: mikunos: no
19:09  mikunos: [1: command not found
19:09 --- ltratcliff is now known as ApHeX321
19:09  mikunos: why?!
19:09  geirha: # type [
19:09  evalbot: geirha: [ is a shell builtin
19:10  geirha: # type [1
19:10  evalbot: geirha: bash: type: [1: not found
19:10  pgas: [ is a command you need spaces to separate the arguements
19:10  raikd: I need to upgrade from bash 2.0X to 3 at least :) ... what's the easiest way to do it ? CentOS3
19:10  geirha: Same reason ls/tmp is not the same as ls /tmp
19:10  pgas: geirha: why is it dangerous?
19:10  mikunos: so the right way is : if[$EMPTYDIR -eq 1
19:10  mikunos: if $EMPTYDIR -eq 1
19:11  mikunos: if $EMPTYDIR == 1
19:11  pgas: raikd: find an updated package or compile it yourself
19:11  geirha: # s='$(mktemp)'; declare -A a; ((a[$s]++)); ls /tmp
19:11  evalbot: geirha: bash: declare: -A: invalid option
19:11  evalbot: geirha: declare: usage: declare [-afFirtx] [-p] [name[=value] ...]
19:11  evalbot: geirha: bash: /tmp/tmp.lfzRvMmzPi: syntax error: operand expected (error token is "/tmp/tmp.lfzRvMmzPi")
19:11  geirha: d'oh
19:11  geirha: 4# s='$(mktemp)'; declare -A a; ((a[$s]++)); ls /tmp
19:11  shbot: geirha: tmp.fowkb6CWw2	tmp.wylY7O1ySy
19:12  mikunos: any idea?
19:12  geirha: 4# s='$(mktemp)'; declare -A a; ((a["$s"]++)); ls /tmp
19:12  shbot: geirha: tmp.JSjg69mLKw	tmp.W3dCwvOVB1
19:12  pgas: mikunos: if [ "$emptydir" -eq 1 ]
19:12  geirha: mikunos: if (( emptydir == 1 )); then # bash
19:13  mikunos: pgas it is wrong
19:13  geirha: mikunos: it is not
19:13  pgas: mikunos: no it's not
19:14  geirha: well, apart from the !varcap change
19:14  geirha: !varcap
19:14  greybot: By convention, we capitalize environment variables (PAGER, EDITOR, ..) and internal shell variables (SHELL, BASH_VERSION, ..). All other variable names should be lower case. Remember that variable names are case-sensitive; this convention avoids accidentally overriding environmental and internal variables.
19:14  mikunos: http://www.pastie.org/1370625
19:14  pgas: geirha: hmmm looks like a bug in arrays, it may have been fixed, but yeah there were quite a number of bugs in the assoc
19:15  geirha: pgas: tramp reported it "ages ago". Don't know what the status is.
19:15  ritzt3ch: thanks pgas it worked
19:15  geirha: pgas: It does work safely with single quotes though
19:15  mikunos: please look at the pastie
19:16  geirha: mikunos: Yes, what part of SEPERATE COMMANDS AND ARGUMENTS WITH WHITESPACE do you not understand?
19:16  mikunos: SEPERATE COMMANDS AND ARGUMENTS WITH WHITESPACE
19:16  mikunos: what do u mean?!
19:16  pgas: so why don't you do it?
19:16  geirha: [ is a COMMAND
19:17  pgas: [ is a command "$EMPTYDIR" is an argument
19:17  pgas: -eq and 1 and ] are also arguments
19:17  mikunos: in this way?
19:17  geirha: "$EMPTYDIR", -eq, 1 and ] are the arguments.
19:17  mikunos: if [ "$EMPTYDIR" -eq 1 ]
19:17  geirha: Yes
19:17  pgas: mikunos: in the same way "echo1" and "echo 1" are different
19:18  pgas: [ is not part of the if syntax, if test the exit status of commands you can write: if grep -q foo file; then echo foo is in file;fi
19:18  mikunos: thanks
19:18  mikunos: done
19:18  pgas: you are welcome
19:26  ritzt3ch: sooo i was trying to get it into a Varaible now it wont spit out anything........ dbase=`mysql -u root -e'use lainter_db; select * from data_list where dns_name like "%$a%";'`
19:28  ritzt3ch: and $a is echo $1 | tr [:lower:] [:upper:]  being it needs to be BIG
19:28  trash: ritzt3ch: Single quotes prevent parameter expansion.
19:29  ritzt3ch: ohhh haha just got it with single quotes ;)
19:30  jymere: I have the following loop: for I in *.jpg; do convert $I ~; done but I have a problem when my picture's name have some "spaces" ? Where I have to put some quotes ?
19:30  trash: jymere: "$I"
19:32  jymere: trash : it doesn't work : echo 112135-Star Wars Linux.jpg  --> I shoul have some "\" in front of each space
--- Log closed Sun Dec 12 19:36:44 2010
--- Log opened Sun Dec 12 19:52:09 2010
19:52 --- Users 534 nicks [0 ops, 0 halfops, 0 voices, 534 normal]
19:53 --- Channel #bash was synced in 97 seconds
20:10  jymere: trash, yitz_ :
20:11  jymere: if I put quotes : convert  -resize 200x150 112135-Star Wars Linux.jpg /home/jeremy/TOPH and we may noticed that it can work ?
20:12  yitz_: Yes?
20:14  Guest53749: Hello?
--- Log closed Sun Dec 12 20:18:37 2010
--- Log opened Sun Dec 12 20:23:58 2010
20:23 --- Users 538 nicks [0 ops, 0 halfops, 0 voices, 538 normal]
20:24  yitz_: That command looks fine... Check the exit status?
20:25 --- Channel #bash was synced in 100 seconds
20:42  jymere: an example easier: I want to list every pdf file in a directory: so I run: ls | grep *.pdf or ls | grep `*.pdf` or ls | grep '*.pdf' or ls | grep "*.pdf" but nothing wotk
20:43  hegemoOn: right
20:44  hegemoOn: nobody talk about bombadil
20:44  hegemoOn: the best on midle earth
20:45  geirha: ls *.pdf
20:46  geirha: You don't even need ls.  printf '%s\n' *.pdf
20:46  jymere: bon ok bad example I return on my first problem :
20:46  jymere: here you are my loop: for I in *.jpg
20:47  jymere: do convert "$VERB" -resize 200x150 "$I" "$DEST/001.jpg"
20:47  jymere: done;
20:47  jymere: but when I run it is displayed : + convert  -resize 200x150 112135-Star Wars Linux.jpg /home/jeremy/TOPH/001.jpg and then the programm is stopped
20:47  yitz_: jymere: Try printing the exit code? Does it create /home/jeremy/TOPH/001.jpg ?
20:47  yitz_: You realize that writes all the inputs to the same output file?
20:47  geirha: If VERB may be empty, either use a PE or use an array
20:48  yitz_: Oh... Duh.
20:48  geirha: convert ${VERB+"$VERB"}
20:48  jymere: yes VERB may be empty
20:48  jymere: I'm gonna try
20:48  geirha: convert "${VERB[@]}" ...
20:49  geirha: If the array is empty, that'll expand to nothing instead of the empty string.
20:49  cantoma: guys, i would like to use a different version of gcc only for a specific user for instance gcc should point to /usr/bin/gcc-4.1. How do I set up this in the .bash_aliases ??
20:50  yitz_: cantoma: You can do: alias gcc=/usr/bin/gcc-4.1.
20:51  yitz_: I don't think .bash_aliases is part of the bash invocation procedure...
20:51  geirha: ln -s /usr/bin/gcc-4.1 ~/bin/gcc
20:52  geirha: And then, of course, put ~/bin first in PATH in ~/.profile
20:52  geirha: Then other programs, like make for instance, will also use gcc-4.1
20:53  geirha: Instead of just your interactive bash shells...
20:53  geirha: !varcap > jymere, btw
20:53  greybot: jymere, btw: By convention, we capitalize environment variables (PAGER, EDITOR, ..) and internal shell variables (SHELL, BASH_VERSION, ..). All other variable names should be lower case. Remember that variable names are case-sensitive; this convention avoids accidentally overriding environmental and internal variables.
20:56  mynyml: is there a better way to do [[ `which foo` ]] && ... ?
20:56  geirha: !faq path > mynyml
20:56  greybot: mynyml: http://mywiki.wooledge.org/BashFAQ/081 -- How can I determine whether a command exists anywhere in my PATH?
20:56  mynyml: thanks geirha
20:56  geirha: You should forget which exists, and at least never use it in a script.
20:57  mynyml: glad i asked
20:59 --- Mike1_ is now known as Mike1
21:08  JyZyXEL: did exit 0 mean success of failure?
21:08  yitz_: Success
21:09  jymere: geirba : I found an other way : for IMAG in `ls *.jpg 2>/dev/null`; do convert "${VERB[@]}" "$IMAG" -resize 200x150 "$DEST/$IMAG";done
21:10  trash: Ewww. Go away.
21:10  yitz_: !ls > jymere
21:10  greybot: jymere: ls shows you a representation of files. They are NOT file names (for simple names, they mostly happen to be equivalent). Do NOT try to parse it. http://mywiki.wooledge.org/ParsingLs
21:10  jymere: but in fact "${VERB[@]}" is not empty
21:13  jymere: yitz_: i don't understand why I can't use ls
21:14  Gallomimia: interesting question. the rest of us might like to hear about it
--- Log closed Sun Dec 12 21:18:55 2010
--- Log opened Sun Dec 12 21:24:17 2010
21:24 --- Users 542 nicks [0 ops, 0 halfops, 0 voices, 542 normal]
21:24  geirha: if command -v "$1" > /dev/null; then ...
21:24  Riviera: lapsusbrutus: It tries to change all strings "<some character><dash><some character>" to "1-2" in all lines that contain the string "ACTIVE_CONSOLES" in the file console-setup in /etc/default,
21:25  lapsusbrutus: ok thanks a lot :)
21:25  Riviera: lapsusbrutus: it tries to prepend all lines that begin with a lower-case letter with a #
21:25  mynyml: geirha: that won't tell me if it's executable though?
21:25  geirha: mynyml: Yes it will
21:25  Riviera: lapsusbrutus: in the files tty3, tty4, .., tty9 in /etc/init
21:25 --- Channel #bash was synced in 93 seconds
21:25  geirha: mynyml: Though keep in mind it also looks for aliases and functions
21:26  lapsusbrutus: Riviera, thanks! :D
21:26  sneakers: How do I parse a file and remove all instances of the word 'install' ?
21:26  Riviera: lapsusbrutus: remove the ";" after the "do"
21:26  Riviera: lapsusbrutus: and change ${i} to "$i"
21:26  geirha: mynyml: But you'll already know what functions are defined in your script anyway, and aliases need to be explicitly enabled and defined.
21:27  Riviera: sneakers: ed -s file <<< $'g/install/s///g\nw'
21:27  sneakers: ed or sed?
21:27  Riviera: ed
21:27  mynyml: geirha: i touched a file in my PATH, command -v returns true for it
21:27  geirha: # touch /bin/blah; chmod +x /bin/blah; command -v blah >/dev/null; echo $?
21:27  evalbot: geirha: 0
21:28  Riviera: sneakers: You do not want to change the file?
21:28  geirha: # touch /bin/blah; command -v blah >/dev/null; echo $?
21:28  evalbot: geirha: 0
21:28  sneakers: Riviera, I want to remove all instances of the word 'install' from the file.
21:28  geirha: # touch /bin/blah; type -P blah >/dev/null; echo $?
21:28  evalbot: geirha: 0
21:28  Riviera: sneakers: good
21:28  geirha: mynyml: Hm. You're right.
21:29  geirha: Though why would you have non-executable files in PATH?
21:29  Riviera: sneakers: so, does it work?
21:29  sneakers: Riviera, what about this?  sed -i 's/install//g' file
21:29  mynyml: # touch /bin/blah; [ -x "`command -v blah`" ] && echo "true"
21:29  Riviera: sneakers: I don't know.
21:29  evalbot: mynyml: no output
21:29  Riviera: sneakers: Sorry.
21:29  mynyml: # touch /bin/blah; chmod +x /bin/blah; [ -x "`command -v blah`" ] && echo "true"
21:29  evalbot: mynyml: true
21:30  mynyml: is this not portable though?
21:30  trash: mynyml: God no.
21:30  trash: !faq exist > mynyml
21:30  greybot: mynyml: http://mywiki.wooledge.org/BashFAQ/081 -- How can I determine whether a command exists anywhere in my PATH?
21:30  mynyml: trash: yea i just read that
21:31  trash: Apparently you didn't understand it then.
21:31  geirha: trash: He's got non-executable files in PATH
21:31  mynyml: trash: apperently not. geirha gave me the link in the context that "which" shouldnt be used
21:31  Dvorak: Hello all
21:31  mynyml: so i'm using "command" instead
21:34  mynyml: i imagine `` spawns a new process? wonder if i can avoid it
21:35  geirha: mynyml: Why bother testing if it's executable? If whoever runs the script has non-executable files in PATH, who cares? Fault is on them.
21:35  mynyml: geirha: true. probably shouldnt bother
21:35  mynyml: # exists() { [ -x "`command -v $1`" ] }; touch /bin/blah; chmod +x /bin/blah; exists blah && echo "true"
21:35  evalbot: mynyml: Missing terminating quote, bracket or keyword
21:38  geirha: mynyml: You need a ; after ]
21:38  geirha: !`
21:38  greybot: The backquote (`) is used in the old-style command substitution, e.g. foo=`command`. This syntax is deprecated in favor of foo=$(command). Backslash handling inside $() is less surprising, and $() is easier to nest. See http://mywiki.wooledge.org/BashFAQ/082
21:38  geirha: !tests
21:38  greybot: In bash; consistently use [[ .. ]] to test strings or files and (( .. )) to test numbers or arithmetics. Do *NOT* use [ .. ] in bash, *only* in sh. See http://mywiki.wooledge.org/BashSheet#Tests
21:40  geirha: mynyml: hash only returns true if it's executable
21:41  geirha: # touch /bin/blah; hash blah 2>/dev/null; echo $?
21:41  evalbot: geirha: 1
21:41  mynyml: oh, nice
21:41  geirha: # touch /bin/blah; chmod +x /bin/blah; hash blah 2>/dev/null; echo $?
21:41  evalbot: geirha: 0
21:44  JyZyXEL: while [ $i -lt 60 && -f testfile ]
21:44  JyZyXEL: is that valid?
21:45  Riviera: JyZyXEL: no, it is not valid, as a short test in your shell could show you
21:48  JyZyXEL: is there a check if file doesn't exist?
21:48  mynyml: # exists() { if command -v "$1" >/dev/null; then return 0; else return 1; fi }; touch /bin/foo; exists foo && echo "true"
21:48  yitz_: -f
21:48  evalbot: mynyml: true
21:48  JyZyXEL: -f checks if it does exist
21:49  yitz_: Well. ! -f  then
21:54  jsz`: it's  -e  to check if file exists.  -f  is to check if the file is an ordinary one
21:54  abstrakt: hey, how does this syntax work
21:54  abstrakt: http://pastebin.ca/2017654
21:55  abstrakt: like I'm familiar with doing e.g. echo "Hello World" > somefile.txt
21:55  abstrakt: but how does that syntax work
21:55  abstrakt: like... cat and EOF are somehow related?
21:55  abstrakt: can I use any token I want?
21:55  abstrakt: like FOOBAZ or must I always use EOF?
21:55  Dvorak: Can someone tell me why $(${var} | sed -e 's/ /\\ /g') gives newlines?
21:55  abstrakt: and or, where do I find the docs on this
21:55  abstrakt: what's it called, like what should I google for to learn about it
21:56  jsz`: abstrakt, here documents
21:57  yitz_: !<< > abstrakt
21:57  greybot: abstrakt: Here documents. cat <<EOF followed by several lines of text, followed by the literal string EOF on a new line, NOT indented. The portion between the EOFs is passed to the command as standard input. If 'EOF' is 'quoted', substitutions WON'T be done; otherwise they are. See <<- for the indented variety.
21:57  geirha: Dvorak: That looks like some crazy, broken attempt at escaping spaces ...
21:58  Dvorak: Geirha: It's problably wrong. I'm a bit new at BASH... :P
21:58  Dvorak: I'm attempting to replace a space with a slash and space
21:58  geirha: Dvorak: why?
21:59  Dvorak: I have some filenames which contains spaces and Linux doesn't like spaces in paths
21:59  jsz`: abstrakt, you can use whatever you want for the "EOF" thing. and I personnaly think that the right syntax is  cat <<EOF > file  not the one in your pastebin
21:59  Dvorak: Nevermind. :P
21:59  geirha: Dvorak: Bullshit
21:59  Dvorak: Why is it bullshit?
22:00  geirha: linux allows any characters in pathnames, all except \0.
22:00  geirha: And the shell can handle them just fine
22:00  Dvorak: I tried to used double qoutes, but that didn't work. But now it does...
22:00  abstrakt: jsz`, well the one in my pastebin works
22:00  abstrakt: jsz`, I already tried it
22:01  geirha: Dvorak: Maybe you're parsing ls? If so, that's wrong.
22:01  abstrakt: jsz`, actually, personally, I think the syntax should be cat <<EOF content goes here\nEOF > file
22:01  abstrakt: that makes the most visual sense to me, but whatever, if it works it works :)
22:01  Dvorak: No i'm not parsing ls. If taken lines from a file.
22:02  abstrakt: yitz_, ok do you know of a good/specific place that I should use to read about here documents? as opposed to some others?
22:02  geirha: !faq 1 > Dvorak
22:02  greybot: Dvorak: http://mywiki.wooledge.org/BashFAQ/001 -- How can I read a file (data stream, variable) line-by-line (and/or field-by-field)?
22:03  yitz_: abstrakt: The bash guide in the /topic here is pretty good
22:03  geirha: Dvorak: The bash guide in the /topic here is pretty good
22:04  geirha: </plagiarize>
22:05  abstrakt: yeah just wondering if you had the link to that specific section handy
22:05  abstrakt: I guess I'll search
22:06  jsz`: abstrakt, http://en.wikipedia.org/wiki/Here_document I think it says it all
22:06  geirha: http://mywiki.wooledge.org/HereDocument
22:06  abstrakt: jsz`, well I know what a heredoc is in e.g. perl or PHP
22:07  abstrakt: geirha, awesome, thanks a bunch :)
22:07  jsz`: abstrakt, the only think to understand is that you have to use tabs to indent while using <<- syntax
22:08  geirha: "seemed like a good idea at the time"
22:09  abstrakt: jsz`, ok thanks, I don't really care about the indented version at the moment, but it's nice to know that there is one :)
22:09  jsz`: abstrakt, and put quotes on EOF or whatever to not evaluate variables and commands in the heredoc
22:09 --- boaz_ is now known as boaz
22:11  JyZyXEL: how do i fork two commands instead one?
22:11  JyZyXEL: like "sleep 60s; rm -rf $pwdfile"
22:11  JyZyXEL: and fork that whole thing
22:12  ferret: ( cmd1; cmd2 ) &7
22:12  ferret: -7
22:12  JyZyXEL: neat!
22:13  abstrakt: jsz`, ahh yes, I will need to do that for one of my documents
22:14  jsz`: !<<- > abstrakt
22:14  greybot: abstrakt: Indented Here documents. Here documents with a dash before the EOF will ignore preceding tabs on each line, allowing you to indent your here documents nicely. Refer to << for general information on Here documents. Note that only TABs will work - spaces will not. Some editors can replace the TAB character with spaces, so be careful.
22:15  jsz`: huh no, wanted "EOF"
22:17  jsz`: abstrakt, just wanted to tell you that to not evaluate you have to put quotes on the first EOF, I mean not the last one at the end of your heredoc
22:19  abstrakt: jsz`, yup, thanks, got it
22:21  abstrakt: is there a decent way to insert exactly one single line, on say, line 12
22:21  abstrakt: in some file
22:22  abstrakt: like say I wanted to add the line "Hello World" to ~/foo.txt on line 12, so that line 12 would now read "Hello World" and all other lines below that would be pushed down by one line
22:22  JyZyXEL: i did: "sudo ln -s ~/myscript.sh /usr/bin/myscript" and now when i type "myscript" it says "-bash: myscript: command not found"
22:23  JyZyXEL: what am i forgetting
22:27 --- kloak is now known as stateknife
22:30  JyZyXEL: how do i sleep for $wait minutes?
22:30  JyZyXEL: i can't just sleep $waitm
22:30  JyZyXEL: it thinks the 'm' is part of the variable name
22:42  abstrakt: ok so I read http://mywiki.wooledge.org/HereDocument
22:42  abstrakt: but I still don't understand how this works with the cat syntax
22:42  abstrakt: why do I even need the cat > in the first place
22:42  abstrakt: how does cat > know to use the <<EOF at the end
22:42  abstrakt: isn't the <<EOF pointing to the file itself?
22:43  abstrakt: or is << pointing to the "overall" command, i.e. it's pointing to the full command as if it were in parens or something, including the output redirection
22:43  abstrakt: (cat > somefile) <<EOF ...
22:43  abstrakt: so the EOF is being piped in to cat, and cat is outputting to that file
22:43  abstrakt: I guess that must be how it works, :)
22:43  abstrakt: just wondering if anyone can confirm that for me
22:43  abstrakt: or, cofirm that I'm retarded, which is fine, I just want to know how it works
22:54  demute: if i do something like LIST=$@, i get problems with arguments containing whitespaces... how do I get around that?
22:58  Riviera: demute: list=("$@")
22:58  demute: Riviera: ok, thanks
22:59  demute: Riviera: it didn't help!
23:00  Riviera: demute: of course it did.
23:00  Riviera: # set -- "one two" "three four"; list=("$@"); echo "${list[0]}"
23:00  evalbot: Riviera: one two
23:01  varunthacker: ps -eo "%c %p" | grep firefox-bin |grep [0-9]*$ . This returns firefox-bin     10210. Now how to kill this process
23:01  JRummy16: question: what is the most simplified way to get everything but the last word in each line for a file with multiple lines and words?
23:01  bonsaikitten: varunthacker: pkill firefox-bin
23:01  Riviera: !pm > varunthacker, and pay particular attention to pgrep and pkill
23:01  greybot: varunthacker, and pay particular attention to pgrep and pkill: http://mywiki.wooledge.org/ProcessManagement
23:02  JRummy16: (writing for sh)
23:02  bookmark: sup
23:03  bookmark: can anyone tell me how to diff -s two directory structures please?
23:03  taylanub0: !faq1 > JRummy16
23:03  greybot: JRummy16: http://mywiki.wooledge.org/BashFAQ/001 -- How can I read a file (data stream, variable) line-by-line (and/or field-by-field)?
23:03  taylanub0: JRummy16: or use a text processor like sed or awk
23:03 --- taylanub0 is now known as taylanub
23:05  bookmark: could i use du or something like that?
23:05  bookmark: or ls somehow?
23:05  mr_daniel: I have a server and a local desktop machine. The vim on the server is nicely configured, e.g. with syntax highlighting. But the vim configuration of my local desktop machine is bad, e.g. no syntaxy highlighting. Also when I enter 'manipulation/edit mode' with 'i', the arrow keys are not working properly and I don't like this.
23:06  mr_daniel: I already checked the following configuration files, but there are the some on the server and on the desktop machine: /etc/vim/vimrc, /etc/vim/vimrc.tiny
23:07  mr_daniel: The ~/.vimrc file doesn't seem to be a configuration file, but some sort of history file
23:07  mr_daniel: s/some/same
23:07  taylanub: bookmark: diff -r maybe, if your diff supports it?
23:08  bookmark: find
23:08  mr_daniel: So my question: how is vim configured? There must be a configuration file somewhere which introduces the difference in the behavior between my server and desktop vim environment
23:08  bookmark: taylanub: yeah coudl be or find would work
23:09  bookmark: lol my bad
23:09  bookmark: yeah its right in there
23:09  taylanub: mr_daniel: that's not a bash question AT ALL. but just copy the ~/.vimrc your server to your desktop
23:09  taylanub: mr_daniel: he information file is .viminfo
23:09  Riviera: mr_daniel: but, this channel is not about vim? :)
23:09  Riviera: mr_daniel: consider asking in #vim
23:09  taylanub: s/he/the/
23:10  mr_daniel: sorry, didn't know that there is a vim channel
23:12  bookmark: are dvds iso9660?
23:12  bookmark: i mean if i made it with genisoimage
23:13  taylanub: does bash burn dvds?
23:13  bookmark: well no matter, no time to wait for an answer
23:13  Riviera: :D
23:13  bookmark: hehe
23:13  bookmark: ok ok
23:13  varunthacker: .
--- Log closed Sun Dec 12 23:19:05 2010
--- Log opened Sun Dec 12 23:24:27 2010
23:24 --- Users 544 nicks [0 ops, 0 halfops, 0 voices, 544 normal]
23:24  jymere: ferret: so how can I do to enable "this features" ?
23:24  trash: Did you read the URL?
23:25  jymere: fast
23:25  jymere: speedily
23:25 --- Channel #bash was synced in 94 seconds
23:26  jymere: If you're writing a Bash script, you need to put #!/usr/bin/env bash at the top of your script. Omitting this header or using the #!/bin/sh for header is wrong. In the latter case you will no longer be able to use any Bash features. You will be limited to the POSIX shell scripting standard (even if your /bin/sh links to Bash).
23:26  jymere: i don't understand : the fact that I put #!bi
23:27  jymere: i don't understand : the fact that I put #!/bin/sh instead of #!/usr/bin/env bash prevent me from having all bash features ?
23:27  trash: Not all, but a lot.
23:28  kingsley: Does anyone here happen to know of a command line filter that prefaces each line of stdin with how long it took to receive that line, and forwards the result to stdout? I'd like to profile how long it takes each part of a big script to run.
23:28  jymere: but it's my teacher who taught me that each time I write a script I have to put #!/bin/sh ? so what's the use of #!/bin/sh if it disables some features ?
23:29  ferret: /bin/sh is sh
23:29  ferret: /bin/bash is bash
23:29  ferret: You are effectively running a different program
23:29  ferret: That it turns out to be the same program in actuality is irrelevant
23:29  ferret: It literally explained this
23:29  trash: jymere: That's the ACTUAL path on your FILE SYSTEM to what INTERPRETER you want your file to be interpreted with.
23:29  ferret: "putting '#!/bin/sh' at the top) *disables* many bash features."
23:29  trash: It can be perl, awk, bash, whatever.
23:30  jymere: ok thanks i'm gonna read this page bye
23:31  kingsley: ferret: I expect that the underlying principle is that specifying exactly which interpreter runs the script leaves less to chance. Obviously you can choose whatever interpreter you want.
23:35 --- hunterm is now known as No
23:35 --- No is now known as hunterm
23:35  ferret: kingsley: | while read -r; do echo "$(date somethingorother)" - $REPLY"; done
23:35  ferret: oops, one extra "
23:35 --- hunterm is now known as I
23:35 --- I is now known as hunterm
23:36 --- hunterm is now known as No
23:36 --- No is now known as hunterm
23:39  peque: hi all :). How can I write an "if" condition evaluating the return of a function? I'm trying "if [ function_name ] {...} fi", but seems it doesn't work... :S
23:39  peque: thanks in advance for your help
23:40  peque: :)
23:40  geirha: lose [ and ]
23:40  geirha: if myfunc; then echo "it succeeded"; else echo "it failed"; fi
23:40  geirha: [ is NOT part of the if syntax, it's an ordinary command.
23:41  peque: geirha: thanks! :)
23:41  peque: works just perfect
23:42 --- Bercik_ is now known as Bercik
23:42 --- Bilge_ is now known as Bilge
23:44 --- gnoob is now known as lapsusbrutus
23:44  JyZyXEL: c=$(dd bs=6 count=1 2> /dev/null)
23:44  JyZyXEL: if [ -z "$(printf -- "$c" | tr -d "\r\n")" ]; then
23:44  JyZyXEL: thats how someone implemented a CR check
23:44  Riviera: What is a CR check?
23:45  JyZyXEL: carriage return?
23:45  Riviera: ... check?
23:45  Riviera: You mean, something like waiting for someone to press the enter key?
23:45  JyZyXEL: yeah
23:46  Riviera: ah, to press "any" key
23:46  Riviera: hehe
23:46  JyZyXEL: no idea what the whole dd is about
23:46  JyZyXEL: looks really weird
23:46  Riviera: if that's it, it needs a bit more terminal trickery---or read -n1
23:47  Riviera: JyZyXEL: in posix shell it's not possible to read only one character at a time; maybe that'S why dd was chosen.
23:47  JyZyXEL: its from a password input script that masks the entered password to ***
23:48  Riviera: 8)
23:48  Riviera: Well, whatever you are reading there, consider not reading it.
23:49 --- ron_oo is now known as ron_o
--- Log closed Mon Dec 13 00:45:14 2010
