--- Log opened Sat Nov 13 00:00:04 2010
00:00  geirha: I doubt anyone's ever bothered to try
00:00  retrospectacus: helloren: wow. I think you are on your own... bash is not very smart... what are you trying to do?
00:00  juanmabc: helloren: just learn bash scripting, and try to apply AI concepts, perhaps arrays and conditions are a must, and seems limited
00:00  HawkI: helloren: AI research is oten done in LISP
00:01  HawkI: helloren:  so there are likley a lot of already built lisp tools that you can look at
00:02  helloren: ok thanks, i have a college linux class, and i have to make a script in linux for the teacher, and i what to put a AI in it, right now i am working with "case""if else" and lots and lots of varables
00:03  juanmabc: HawkI, lisp, prolog both seems specialized to it, but for some unknowledge it seems like fortran for math, nowadays people do code c/python kind languages
00:03  Snowie: Helloren. I would have a look at AI wiki page. Can be kinda tough to define
00:04  juanmabc: helloren: something in the same line and with more power would be python
00:06  djustice: how do i ask logical or? || in c++.. if [ "${FOO}" = "x" -o "${FOO}" = "y"] ; ?
00:06  djustice: google is unfriendly today.. and i'm asleep..
00:07  retrospectacus: !||
00:07  greybot: foo || bar runs bar when foo fails: [[ -d $foo ]] || { echo 'ohNoes!' >&2; exit 1; }
00:07  retrospectacus: no good
00:07  djustice: nah, i know that one..
00:07  djustice: i mean for the if statement
00:08  retrospectacus: I think it is -o
00:08  djustice: ah. i was right. :)
00:08 * djustice does a little dance
00:08  djustice: thx :)
00:18  paissad: guys, i want to run a "mysql -uroot -p" using expect to send the password to mysql command so that other system users don't see the pass via ps command for example ( don't tell me to put the mysql pass in a my.cnf file :) ) .. may someone give help
00:18  paissad: http://dpaste.com/274600/
00:21  lhunath: !google > djustice
00:21  greybot: djustice: Google is NOT a preferred source for learning bash, because 90% of the "tutorials" and scripts out there are JUNK. Refer to the Guide and FAQ (see topic) instead.
00:21  lhunath: !tests > djustice
00:21  greybot: djustice: In bash; consistently use [[ .. ]] to test strings or files and (( .. )) to test numbers or arithmetics. Do *NOT* use [ .. ] in bash, *only* in sh. See http://mywiki.wooledge.org/BashSheet#Tests
00:22  lhunath: !varcap > djustice
00:22  greybot: djustice: By convention, we capitalize environment variables (PAGER, EDITOR, ..) and internal shell variables (SHELL, BASH_VERSION, ..). All other variable names should be lower case. Remember that variable names are case-sensitive; this convention avoids accidentally overriding environmental and internal variables.
00:22  lhunath: [[ $foo = x || $foo = y ]]
00:22  lhunath: case $foo in x|y) .. ;; esac
00:23  lhunath: note that inside [[ and case you don't need quotes; but those are EXCEPTIONS.  normally; you need to quote your $expansions Everywhere.
00:54  cobia: if I had a variable like: "val1=foo\nval2=bar", what would be the best way to derive val1 and val2 for script use?
00:55  nDuff: cobia, depends -- do you trust your input to not be malicious?
00:56  nDuff: cobia, ...you can eval the contents, but there are the obvious security concerns.
00:56  nDuff: cobia, ...if you don't trust the input to be non-malicious, you can feed it into a while read loop.
00:57  cobia: I think that would be safest, but the input will be generated by us not randomly or user generated
00:57  nDuff: !faq 1 > cobia (for the basics)
00:57  greybot: cobia (for the basics): http://mywiki.wooledge.org/BashFAQ/001 -- How can I read a file (data stream, variable) line-by-line (and/or field-by-field)?
00:57  nDuff: !faq disappear > cobia (one gotcha to look out for)
00:57  greybot: cobia (one gotcha to look out for): http://mywiki.wooledge.org/BashFAQ/024 -- I set variables in a loop. Why do they suddenly disappear after the loop terminates? Or, why can't I pipe data to read?
01:00  qorep: I had a binary in a dir towards the end of my PATH, I removed it and installed it in a directory earlier in PATH, now when I try to run the command again I get: bash: /home/qorep/bin/reindent: No such file or directory
01:00  qorep: 'which reindent' still gives proper answer
01:00  qorep: can I clear the cache somehow?
01:00  nDuff: qubit, hash -r
01:01  qorep: nDuff: awesome, thanks
01:01  nDuff: 4# declare -A variables; while IFS='=' read var value; do variables["$var"]="$value" ; done <<<$'val1=foo\nval2=bar'
01:01  shbot: nDuff: no output
01:01  nDuff: cobia, ^^^
01:01  nDuff: cobia, ...at least if you're targeting bash 4
01:02  nDuff: cobia, ...that'll set them all up so you can reference "${variables[var1]}"
01:02  cobia: it's ash under busybox
01:03  nDuff: oooh.
01:03  nDuff: that's... trickier.
01:03  cobia: and I'm having trouble reading from a variable line by line
01:03  cobia: not a file
01:04  cobia: so I'm taking output from wget with wget -O - (pipe to stdout) and assigning it to a variable
01:04  cobia: then I want to read that var line by line to derive the vars I need
01:05  cobia: done < $RETVAL doesn't work
01:05  TheBonsai: !<<<
01:05  greybot: Here strings. Similar to here documents: The word after <<< and a newline are passed to the standard input of a command. Syntax: ''command <<< "some sentence"'' (Like ''echo "some sentence" | command'', but without the overhead of the subshell)
01:05  TheBonsai: !<<
01:05  greybot: Here documents. cat <<EOF followed by several lines of text, followed by the literal string EOF on a new line, NOT indented. The portion between the EOFs is passed to the command as standard input. If 'EOF' is 'quoted', substitutions WON'T be done; otherwise they are. See <<- for the indented variety.
01:05  cobia: ahh
01:07  cobia: done <<< "$RETVAL" returns unexpected redirection
01:07  nDuff: indeed, ash doesn't support <<<
01:07  SilverFo1: any ideas what would cause a script that does 'shopt -s extglob' at the beginning would work find from my shell, but extglob appears off when called from cron?
01:07  nDuff: !varcap > cobia
01:07  greybot: cobia: By convention, we capitalize environment variables (PAGER, EDITOR, ..) and internal shell variables (SHELL, BASH_VERSION, ..). All other variable names should be lower case. Remember that variable names are case-sensitive; this convention avoids accidentally overriding environmental and internal variables.
01:07  cobia: ahh
01:08  nDuff: cobia, ...can you write to a temp file?
01:08  cobia: I could rebuild the image and include bash, I've been tempted to on other scripts in this firmware
01:08  cobia: I can, but it worries me with # of writes on flash memory
01:09  nDuff: you don't have any tmpfs space?
01:09  cobia: yes, I can write there
01:10  cobia: tmpfs on /tmp type tmpfs (rw,nosuid,nodev,relatime)
01:10  cobia: 6m, should never use that up
01:11  cobia: that worked
01:12  cobia: now to the IFS
01:17 --- jzacsh_ is now known as jzacsh
01:31  cobia: thanks nDuff, I got everything working as intended
01:32  SilverFo1: its got to be something unique to the cron environment, right?  I've googled my head off, and can't find others struggling with the same thing... meh
01:41  SilverFo1: it appears that extglob is set, however !(*.foo) matches files with .foo, but ONLY when run from cron.  Is there some other thing that extglob depends on that I may be missing?
01:44  falconindy: SilverFo1: i think you mean *.!(foo)
01:45  nDuff: SilverFo1, are you setting SHELL=/bin/bash at the top of your crontab?
01:45  SilverFo1: yes
01:46  falconindy: which may or may not do anything depending on the cron daemon
01:47  SilverFo1: falconindy: that seems to match files ending new as well, when the *. is inside the (), it gives me the desired results
01:49  falconindy: well, i did actually mean *!(.foo) but you can just quietly disregard me. my brain isn't working today
01:50  SilverFo1: oh, I see.  you are correct.
01:51  SilverFo1: I think I found the problem...
01:51  SilverFo1: appears I'm blind as well as dumb.  :)
01:52  juanmabc: haha, solved!
01:53  lakcaj: Hello.  Could someone please tell me what's wrong with the following?  I suspect it is because of the curly brackets:
01:54  lakcaj: find . -iname "*.flac" -execdir flac -cd {} | lame -h - "${{}%.flac}.mp3" \;
01:54 --- Muzer is now known as MuzerAway
01:54  falconindy: that's one of the problems, yes
01:55  lakcaj: I think the execdir part of the find command doesn't allow me to use the curly brackets to change the extension
01:55  falconindy: nor does that pipe work the way you think it does
01:56  lakcaj: should I use a for loop?
01:57  lakcaj: I tried something like this too, but I can't get it to work:
01:57  lakcaj: for i in `find . -iname "*.flac"`; do flac -cd $i | lame -h - "${$i%.flac}.mp3"; done
01:58  Tramp: !find > lakcaj
01:58  greybot: lakcaj: http://mywiki.wooledge.org/UsingFind
01:59  Tramp: lakcaj: you want e.g. the -exec bash -c '...' construct
01:59  lakcaj: Tramp, ok, thanks.  I'm reading the link now.
02:00  Tramp: or iterate over the files with while read -d'' ...... < <(find ... -print0) (for GNU find, which you seem to have, since you have execdir)
02:04  hacosta_: how can i add an element to an array if i have the unset option on
02:05  hacosta_: that causes a=( ${a[@]} "foo" ) to complain about ${a[@]} being unbound.. even if i do a=()
02:07  hacosta_: nvm got it
02:07  hacosta_: a[${#a}]="foo"
02:12  lakcaj: Does this look ok?
02:12  lakcaj: find . -iname "*.flac" -execdir sh -c 'FLAC=$1; MP3="${FLAC%.flac}.mp3"; flac -cd "$FLAC" | lame -h - "$MP3"' _ {} \;
02:15  anon33_: quick question - i'm trying to copy multiple file formats from a directory into another, but i'm getting an error with the following:
02:15  anon33_: cp <path/to/file>/{*.png, *.jpg} <path/to/destination>
02:15  anon33_: any reason why? the error i get is parse error near '}'
02:16  Tramp: lakcaj: looks ok, though I don't know why you want sh - but it doesn't matter here
02:17  anon33_: want sh? i don't understand
02:17  Tramp: did I talk to you?
02:17  anon33_: oh, no - i'm sorry
02:17  lakcaj: Tramp, oh - I though sh just used the default shell, bash in this case.  My mistake
02:18  ilab: I'm trying to delete a line that matches a variable like sed  /"$var"/d file . But $var=ABC "DEF" GHI  . And it doesn't actually  delete the line. I think when the "" are expanded in var are throwing off sed. How can I  get this to work?
02:18  Tramp: anon33_: /YOU/ want: cp /path/to/dir/*.{png,jpg} /target
02:19  ilab: clarify var is var='ABC "DEF" GHI'
02:23  Tramp: ilab: " is not special to sed, not is '
02:23  Tramp: s/not/nor/
02:24  lakcaj: sed '/ABC "DEF" GHI/d' test.txt
02:24  lakcaj: or
02:24  lakcaj: sed "/ABC \"DEF\" GHI/d" test.txt
02:27  damd: hey.  i'm currently using &> to redirect both stderr and stdout, but how do i redirect them both and *append* in the same manner as >>?
02:28  geirha: >> file 2>&1
02:28  Tramp: !&>
02:28  greybot: &> is a bash-specific feature, unportable to other shells. command &> file is equivalent to command > file 2>&1. There is no &>> until Bash4. Use command >> file 2>&1 instead.
02:28  damd: thanks
02:30  damd: Tramp: what was that then?
02:30  Tramp: what was what that then?
02:31  damd: was !&> an answer to my question?
02:31  Tramp: yes
02:31  geirha: It was a trigger for greybot
02:31  damd: oh, didn't realise it was a bot
02:34  lakcaj: ilab, newvar="ABC \"DEF\" GHI" ; sed "/${newvar}/d" test.txt should work
02:34  anon33_: Tramp: thanks :)
02:34  Tramp: yw
02:39  ilab: lakcaj: yeah it does. I had trailing whitespace in var was the problem.
02:42  dunpeal: Hi. In a script, I call program foo, and if it returns a non-zero exit code, I want to exit the script with that code.
02:42  dunpeal: How do I do that?
02:43  go|dfish: foo || exit
02:43  dunpeal: go|dfish: thanks, but what if I want to store the exit code in a variable?
02:44  Riviera: go|dfish: uhm.
02:44  Riviera: go|dfish: that's not what dunpeal meant, or is it?
02:44  dunpeal: specifically, I want to echo "foo exited with error code $CODE"
02:44  Riviera: !$? > dunpeal
02:44  greybot: dunpeal: The special parameter ? (you use $? to expand it) contains the exit status of the previous command, an integer from 0 to 255 inclusive. In general, an exit status of 0 implies success (or "true") and non-zero implies failure ("false").
02:44  dunpeal: funny, in bash 0 is true, and non-zero is false.
02:44  dunpeal: opposite of C and most other languages.
02:45  Riviera: dunpeal: if foo is the last command your script executes, what you want is the default already.
02:45  dunpeal: Riviera: is there a way to get the exit status of foo without using $?
02:45  dunpeal: Just curious, since it seems kind of unclean to rely on a global like that.
02:45  Riviera: dunpeal: sure, but probably no sane one.
02:46  Riviera: a what? :)
02:46  dunpeal: Riviera: "what you want is the default already" -> what do you mean?
02:46  Riviera: dunpeal: I mean that the script
02:46  Riviera: dunpeal: #! /bin/bash
02:47  Riviera: dunpeal: foo
02:47  Riviera: dunpeal: exits with exit code 3 if foo exits with exit code 3.
02:47  dunpeal: really?! how so
02:47  Riviera: dunpeal: by definition
02:47  dunpeal: a script always exits with the exit status of the last command it ran?
02:48  dunpeal: so that means that if line #3 was "echo 'I failed'", it would exit with 0.
02:48  Riviera: dunpeal: "Bash’s exit status is the exit status of the last command  executed in  the  script."
02:48  Riviera: dunpeal: from the manpage.
02:48  Riviera: dunpeal: yes, it would, if the echo did not fail, that is.
02:49  juanmabc: the point is that if a script does not fail last command is "no error", if it fails, last command is "the error"
02:50  dunpeal: Riviera: thanks. I did $RES=$?, but then `if [ $RES ]` seems to be always true, even when $RES is 1?!
02:51  Riviera: dunpeal: sure, [ 1 ] is true
02:51  cthuluh: $RES=$? is an error
02:51  Riviera: dunpeal: also, consider using lowercase shell variable names, also, the.. what cthuluh says.
02:51  Riviera: dunpeal: and read about test, [, [[ and ((
02:52  cthuluh: !pf 15 > dunpeal
02:52  greybot: dunpeal: http://mywiki.wooledge.org/BashPitfalls#pf15 -- Don't do this! -- $foo=bar
02:52  dunpeal: I have a love-hate relationship with bash. mostly hate.
02:53  Riviera: A typical cause for hate is using a shell for programming. :)
02:53  dunpeal: cthuluh: thanks, fixed
02:53  cthuluh: dunpeal: don't listen to him ;)
02:53  dunpeal: heh
02:54  cthuluh: (joking)
02:54  dunpeal: so the code is now `res=$?; if [ ! $res ];..`
02:54  dunpeal: But the if clause always evaluates to true it seems
02:54  cthuluh: why are you using backticks?
02:55  cthuluh: dunpeal: [ 1 ] and [ 0 ] are the same
02:55  Riviera: [ $res ] and [ ! $res ] are string operations
02:55  cthuluh: they are testing the length of the strings "1" and "0"
02:55  Riviera: I think you rather want arithmetical operations here.
02:56  dunpeal: Riviera: I guess -eq 0 is the appropriate one
02:56  Riviera: In test, [ and [[ (which you, when using bash, should consider using instead of [), you can do arithmetical comparisons with operators like -eq, -ge and some others.
02:57  Riviera: Yes.
02:57  Riviera: dunpeal: or you could use ((
02:57  Riviera: !((
02:57  greybot: ((...)) is an arithmetic command, which returns an exit status of 0 if the expression is nonzero, or 1 if the expression is zero. Also used as a synonoym for "let", if side effects (assignments) are needed. See <http://mywiki.wooledge.org/ArithmeticExpression>.
02:57  Riviera: if (($? == 0)); ...
02:58  Riviera: If it *only* is about checking whether or not a command successfully exited, prefer: "if foo; then ..; fi," which would not save the exit code.
02:59  dunpeal: wow, so "res=`foo`" would return the stdout of foo, but "if foo" compares against its exit status?!
02:59  Riviera: and if res=$(foo); .. would do both.
02:59  Riviera: Prefer $( over backticks:
02:59  Riviera: !`
02:59  greybot: The backquote (`) is used in the old-style command substitution, e.g. foo=`command`. This syntax is deprecated in favor of foo=$(command). Backslash handling inside $() is less surprising, and $() is easier to nest. See http://mywiki.wooledge.org/BashFAQ/082
03:00  dunpeal: Riviera: I don't understand how res=$(foo) does both
03:01  dunpeal: my programmer's logic tells me that if <assignment> tests either the success of the assignment operation, or its assigned value
--- Log closed Sat Nov 13 03:07:25 2010
--- Log opened Sat Nov 13 03:07:48 2010
03:07 --- Users 523 nicks [0 ops, 0 halfops, 0 voices, 523 normal]
03:08  dunpeal: Riviera: so the syntax would be `res=$(foo); if (($?))`
03:08  dunpeal: btw, why did you recommend: `if (($? == 0))`
03:08  cthuluh: if ! (($?));...
03:08  dunpeal: when one can simply do `if (($?))`
03:08  Riviera: dunpeal: I rather recommand: if res=$(foo); ..
03:09  Riviera: dunpeal: for educational purposes :)
03:09 --- Channel #bash was synced in 83 seconds
03:09  cthuluh: dunpeal: they are not the same.
03:09  Riviera: ah, and that :D
03:09  cthuluh: 4# ((0)):  echo $?
03:09  shbot: cthuluh: bash4: syntax error near unexpected token `:'
03:09  cthuluh: 4# ((0));  echo $?
03:09  shbot: cthuluh: 1
03:09  dunpeal: what?!
03:09  dunpeal: why
03:10  twkm: feh.  stupid regex match isn't.
03:10  dunpeal: please make the pain stop
03:10  cthuluh: :>
03:10  cthuluh: !arithmetic
03:10  greybot: http://mywiki.wooledge.org/ArithmeticExpression
03:11  dunpeal: My only problem with `if res=$(foo)` is that I need the return code of foo to echo "foo existed with error code $code"
03:11  twkm: and $? isn't working well enough?
03:12  Riviera: dunpeal: usually, that kind of verbosity rather annoying
03:12  dunpeal: twkm: after the if, won't $? get set to the return code of the if?
03:12  Riviera: dunpeal: if someone wants to know the xit code, he should ask for it, like from outside of your script
03:12  twkm: dunpeal: so save it.  sheesh.
03:12  twkm: if foo=$(foo) rc=$? ...
03:13  cthuluh: dunpeal: believe me, you can only hate bash if you don't read documentation
03:13  dunpeal: twkm: OK, my misunderstanding was that immediately after `if foo=$(bar)`, $? gets reset to whatever the if returns
03:14  dunpeal: cthuluh: yeah, I know :/
03:15  twkm: the rc=$? isn't "after" the if.  that would be after the fi.
03:17  cthuluh: 4# if false; then :; fi; echo $?
03:17  shbot: cthuluh: 0
03:20  dunpeal: twkm, cthuluh: ah, I see
03:22  avis: is there a website with prewritten bash scripts ?
03:30  cthuluh: avis: the only thing I know that looks like what you're looking for is dotfiles.org
03:30  avis: thank you
03:30  dunpeal: why doesn't this work:
03:30  dunpeal: http://dpaste.com/274635/
03:32  cthuluh: dunpeal: because you negated the exit code of ./simp
03:32  dunpeal: cthuluh: the problem is that it always echoes "code 0"
03:32  cthuluh: 4# ! false; echo $?
03:32  shbot: cthuluh: 0
03:32  dunpeal: what
03:32  dunpeal: ! changes it in place?!
03:33  dunpeal: cthuluh: what's the way to do the above then, and only the above?
03:33  cthuluh: it seems so :)
03:34  cthuluh: there are many ways, I guess
03:34  dunpeal: what's the most minimal
03:34  cthuluh: while true; do ./simp || echo "error: ./simp exited with rc $?"; sleep 1; done
03:35  go|dfish: avis: shelldorado.com has some too
03:35  dunpeal: cthuluh: thanks
03:35  avis: thank you go|dfish
03:37  dunpeal: cthuluh: one last question: what's a clean way to write `./simp || <multiple LF-separated statements`?
03:37  cthuluh: ./simp || { foo; bar; }
03:38  dunpeal: cthuluh: cool, thanks again.
03:38  dunpeal: 'v
03:40 --- kwame_zZzZzZzZ is now known as kwame_mac
03:54 --- nadir is now known as n1adir
03:55  MrEntropy: how do i definitively escape a dollar sign in a makefile such that when the command is launched, it comes out as a dollar literal? I know that this is a make question, but i'm pretty sure it's bash that's actually performing the substitution.
03:56  MrEntropy: actually, forget that... i think this is a different problem
03:57  cthuluh: foo:
03:57  cthuluh:     echo '$$(bar)'
03:57  cthuluh: ask #workingset
04:12 --- Natch is now known as Natch|
04:18  pr3d4t0r: Greetings.
04:19  pr3d4t0r: Q. Which command would you use for querying a file's permissions and get them in numerical form, so that they could become the input to chmod at a later time?  Thanks in advanc.e
04:19  pr3d4t0r: Er, in advance.
04:21  cthuluh: you have stat(1), but don't expect it to be portable
04:21  pr3d4t0r: cthuluh: Hej :)
04:21  pr3d4t0r: cthuluh: Ah!  Good idea.
04:21  cthuluh: you could also "parse" the output of ls -l
04:21  cthuluh: but cautiously
04:22  pr3d4t0r: cthuluh: I like stat better.  No need for parsing.
04:23  pr3d4t0r: cthuluh: stat plus arg list will do what I need.  Minor tweaks for OS X vs. Linux.  Close enough for what I need.
04:23  juanmabc: --reference=file ?
04:25  pr3d4t0r: Thanks - have a nice day.
04:27  twkm: avis-: or perhaps shelldorado.
04:29  juanmabc: what does shelldorado? twkm
04:30  twkm: "prewritten scripts".
04:33  juanmabc: i see something like commandlinefu, i like they design
04:36  manhunter: what's the process to print newline,?
04:36  manhunter: echo -e "\nhello\n"
04:37  manhunter: everytime for this i have to use -e, is there any shortcut method without -e?
04:37  cthuluh: printf '\n%s\n' hello
04:37  cthuluh: much shorter, right? :)
04:38  manhunter: printf '\nhello\n' is it correct?
04:38  cthuluh: it is correct, but you shouldn't use it, since you're mixing "code" and data
04:40  manhunter: cthuluh: how is it mixing code and data?
04:40  twkm: which is what you didn't want to do with echo -e.
04:42  juanmabc: i dont even get the point
04:42  manhunter: in C , printf("\n%sworld\n","hello"); , in bash why is there no '( )' no brace,
04:42  manhunter: why?
04:42  manhunter: cthuluh: why mixing code?
04:43  twkm: because bash isn't c.
04:43  cthuluh: manhunter: do you write C like this?:    printf(somevariable);
04:44  manhunter: twkm: is there any function in bash with brace?
04:44  manhunter: bracket
04:44  manhunter: cthuluh: printf("%d",var);
04:44  cthuluh: manhunter: then it's the same thing with bash
04:44  cthuluh: don't mix format specifiers and data
04:45  manhunter: cthuluh: ok, ok
04:45  manhunter: cthuluh: %d for integer, %s for string
04:45  cthuluh: yes, usually 8)
04:46  manhunter: is there any benifit of printf over echo or vice versa , i see all documentation of bash example are with echo , printf is not there , all online docs
04:46  manhunter: why?
04:46  cthuluh: manhunter: nearly all online docs are crap :)
04:46  juanmabc: bash is a command language not a functional language
04:47  juanmabc: the names gives some hints, in practice echo is more used
04:47  cthuluh: manhunter: echo has portability flaws, implementations differ. printf is specified and its behaviour doesn't change
04:47  juanmabc: someone has to do a name registration for the commands
04:48  juanmabc: so there is only one echo, the others are another name
04:49  twkm: that ship left the dock long ago.
04:49  juanmabc: hehe
04:51  homie: which is the best way to slice a thing in the middle of an echo thing ?
04:52  cthuluh: use a thing
04:52  Riviera: homie: please rephrase. :)
04:52  homie: like echo "(literal :<here the spliced thing> else part of literal)"
04:52  homie: sorry for the typo
04:53  homie: the to be spliced thing is actually another loop variable
04:53  Riviera: homie: try to explain it to an idiot who has no idea about technical terms like "splice" and "thing."
04:54  Riviera: (or just say what you have and what you want, like potential input and desired output)
04:56  homie: i wanted to generate something like (ql:quickload :packagename) from a list of directories with /bla/bla/packagename-digit-digit-or-else and i first got a variable with running through the dir names passing them to sed on the way to get rid of the suffixes and prefixes, after that i wanted to pass the variable to a construct with the aforementioned literal, which i would then pass into some file (my .sbclrc file actually after i rm'ed
04:56  homie: it by accident)
04:57  homie: to get all the packages loaded again when the init file is read
04:58  twkm: echo "this $and that"
04:58  Riviera: homie: so you have something like "for packagedir in /bla/*; do beautify "$packagedir"; done > .sbclrc" and you need the beautify part?
04:59  twkm: printf "this %s that\n" "$and"
05:00  Riviera: oh, that easy. Sorry for being so dense.
05:00  homie: yep something like for i in /bla/blah; do echo $i|sed -e 's/-[0-9].*//g'; done
05:01  homie: but i tried to enclose the echo part with the literals without success of course
05:02  Riviera: homie: for your particular task sed might not be necessary, parameter expansion features might suffice
05:02  Riviera: !pe > homie
05:02  greybot: homie: Parameter Expansion is the expansion of a parameter: "$foo", "$1". You can use it to perform string operations: "${file%.mp3}", "${0##*/}". Remember to *always* quote them. See http://mywiki.wooledge.org/BashSheet#Parameter_Operations
05:04  homie: i didn't know how to get rid of the suffixes and the directory parts, since i wanted only package names, no version suffixes nor directory prefixes, so i thought i use sed...
05:04  homie: hmmm
05:04  Riviera: nothing wrong with that
05:05  Riviera: you can use sed "in echo" by using command substitution too; echo "The output of the date command is $(date)"
05:07  homie: yes i tried even after the for loop part; do echo -e "(ql:quickload `'$i|sed -e 's/bla//g')"; done, that's the part which failed'
05:09  Riviera: echo "(ql:quickload $(sed 's/...//' <<< "$i"))"
05:10  Riviera: I usually prefer printf, though: printf '(ql:quickload %s)\n' "$(sed '...' <<< "$i")"
05:44  MrEntropy: anyone know a good tool for getting the offset of a string in a binary file?
05:46 --- denysonique is now known as Guest15415
05:46  Riviera: MrEntropy: GNU grep's -b maybe.
05:46  MrEntropy: Riviera: i'll take a look, thanks
05:50  xelister_: MrEntropy: ghexedit hexedit etc
05:51  MrEntropy: xelister_: not for robotic, script use.
05:52  juanmabc: hexdump!
05:52  MrEntropy: juanmabc: yeah, i'd use xxd, but i'd need to figure out the offset myself by parsing the output
06:04  Bushmills: strings -t
06:19  cookiemon5ter: i believe monkeys can fly
06:20  thechitowncubs: Can someone help me write a script to move folders?
06:20  thechitowncubs: I have CD Albums in /Torrents/CDRips/What_OGG, /Torrents/What_AAC, etc. How can I move the folders to /Torrents?
06:24  Bushmills: man mv
06:27  thechitowncubs: Bushmills: I'm not sure how to move files in different directories with mv
06:28  Bushmills: play a bit with it to become more sure about how mv works
06:30 --- kaeser is now known as kkkkaeser
06:31 --- h4x0r` is now known as zigggggy
06:32 --- zigggggy is now known as h4x0r`
06:36 --- h4x0r` is now known as zigggggy
06:38 --- zigggggy is now known as u
06:38 --- u is now known as h4x0r`
06:38 --- nadir is now known as Guest40980
06:39 --- Guest40980 is now known as n1adir
06:45 --- h4x0r` is now known as ziggggggy
06:46 --- ziggggggy is now known as zigggggy
06:53  noesc: list ipchains
06:56  samfisher: Hello. I have this website, https://sitename.com/admin/page.aspx .In this page, there are some input fields like Name, Address, Phone etc. How can I make a script that connects to this site (it uses user and pass) and take from a list of Addresses.txt each entry, run it in the webpage and save the page as, let's say StreetName.txt?
06:56  samfisher: So far we are doing it by hand but it's really really slow
--- Log closed Sat Nov 13 07:07:21 2010
--- Log opened Sat Nov 13 07:07:41 2010
07:07 --- Users 516 nicks [0 ops, 0 halfops, 0 voices, 516 normal]
07:09 --- Channel #bash was synced in 86 seconds
07:18 --- frobisher is now known as cassarole
07:22  ascheel: quick question.  I might not be doing it the best way.  I have results of a find command stored in a variable.  Each file found is on its separate line.  Is there a way to display the results of 'ls -l' on each line of the variable?
07:23  Bushmills: ls -l $variable   might do
07:23  ascheel: tried it.  It assumes the entire file is one filename
07:23  ascheel: oops, it assumes the entire variable is one filename
07:24  twkm: don't quote $variable, then pray.
07:24  twkm: i suggest you use find's -ls, though not to capture filenames, and especially not for taking action.
07:24  twkm: use -exec if you want to take action on the files.
07:25  ascheel: twkm, I can use -exec, but I'm using the $? of the find command.  Will $? give the result of the find command or the exec command?  Do you know?
07:27  ascheel: here's my script:  http://pastebin.com/UpyYRzdR
07:27  ascheel: It's only looking in new_pictures and seeing if any files exist in any other picture directories (IE: already sorted)
07:28  ascheel: I can echo ${results} but that won't tell me filesize or date.
07:39  twkm: ascheel: you might want to look at faq #1.
07:44  ascheel: twkm, thanks.  Doing that now
07:46  ascheel: Oh nice!  That should do it
07:47  ascheel: That did it exactly
07:47 --- cassarole is now known as frobisher
07:48  twkm: cool.
07:48 --- frobisher is now known as cassarole
08:02  Cyber_Beast: Hi everyone!
08:03  Cyber_Beast: I want to make script, in which only new/updated files from 1st directory are copied to another directory.... any idea? how to do it
08:04  Cyber_Beast: in 1st phase: All files from both directoies are same...
08:04  Cyber_Beast: in 2nd phase: Some files from 1st directory is updated or are new
08:04  Colloguy: rsync by default checks dates before deciding to copy or not
08:05  twkm: rsync has options.
08:08  Cyber_Beast: Colloguy & twkm: Thank you guys.. :)
08:13 --- denysonique_ is now known as denysonique
08:13 --- streuner__ is now known as streuner
08:14  Bushmills: cp -u
08:16 * Bushmills wonders why people write scripts just to avoid using existing options 
08:32  Ademan: hrm, I think echo is eating my null characters in my variable, if I run sourcefiles=$(find -name '*.c' -print0); echo "$sourcefiles"; the file names are printed one after the other with seemingly no separator, anyone know what's going on there?
08:34  twkm: Ademan: you can't have nul bytes in a variable.
08:37  Ademan: twkm: ah, weak, how should I approach caching that output then?
08:39  kaushal: Hi
08:58 --- kaushal1 is now known as kaushal
09:00  Eryn_1983_FL: what am i  doing wrong with this function ? http://pastebin.com/DDD6PZLR
09:03  pgas: your are running your script like: sh yourscript?
09:04  Eryn_1983_FL: yes
09:05  Eryn_1983_FL: bash  sctip.sh
09:05  Eryn_1983_FL: script.sh
09:06  pgas: bash yourscript? or "sh yourscript"?
09:06  pgas: because function is not standard, it's a bashism
09:07  pgas: alpah () { # is standard
09:07  Eryn_1983_FL: bash  sctip.sh bash
09:07  Eryn_1983_FL: lol
09:07  Eryn_1983_FL: keyboard too smalll
09:08  Eryn_1983_FL: i think there is  some format in my text files i copied them  from notepad ++
09:08  pgas: !cr
09:08  greybot: Carriage Return (ASCII 13). Often written as ^M or \r. CRs are found just before newlines in text files generated by DOS/Windows apps. You can see them with "cat -e". See http://mywiki.wooledge.org/BashFAQ/052 to get rid of them.
09:08  Eryn_1983_FL: i am deleting them and opening up in notepad
09:08  Eryn_1983_FL: ok
09:08  Eryn_1983_FL: thanks  pgas
09:12  Eryn_1983_FL: pgas:  how do i get  rid of them ?
09:13  Eryn_1983_FL: pgas:  how do i get  rid of them ?
09:13  Eryn_1983_FL: nm
09:21 --- cli is now known as Guest45793
09:21  twkm: Ademan: perhaps you should just act, with -exec.  or faq #1 may be useful.
09:23  Ademan: twkm: #1 is basically how it's currently written, hold on I'll throw it up on a paste site
09:24  Ademan: twkm: http://paste.pocoo.org/show/290770/ currently it's a disgusting one liner, but basically I wanted to cache the result from the find since I do it twice.
09:41  Piratero: Hm...
09:57  twkm: Ademan: faq #1 is probably your best bet.  if you feel you must have null bytes, use an encoding, though you'll have to decode every time you want to use it.
10:04  Eryn_1983_FL: pgas:  um i got  rid of  ^M but the $ signs  are  still on my lines in my shell how do i sed those out?
10:05  MrEntropy: Eryn_1983_FL: what dollar signs?
10:05  MrEntropy: literal dollar signs?
10:05  MrEntropy: tr -d '$'
10:05  Eryn_1983_FL: the ^M4 is now a   space space  space  etc  $
10:05  Eryn_1983_FL: ok
10:06  Eryn_1983_FL: i will try
10:06  Eryn_1983_FL: $==4
10:06  MrEntropy: $==4?
10:09  Eryn_1983_FL: sigh
10:09  Eryn_1983_FL:  i will  re write in  the terminal geeze this is   a freaking PAIN!
10:10  Piratero: :-)
10:13  Eryn_1983_FL: freaking windows formats i hate them!
10:13  Eryn_1983_FL: sigh
10:24  op_amp: FL afair, there was a tool for converting
10:31 --- wtfness is now known as foocraft
10:33  Eryn_1983_FL: hey peeps  i ot it working
10:33  Eryn_1983_FL: copy and paste  go wonders...
10:33  Eryn_1983_FL: got
10:34  Eryn_1983_FL: um is there a  way i can  ping  host1 and host2 on the  same ping command?
10:35  Eryn_1983_FL: if i do a  ping host1;ping host2  and then a  $?  afterwards will it show up if  wither  return a  non zero?
10:39  pcard: # foo=123; bar='foo'; print "[%s] " "${!bar}"
10:39  evalbot: pcard: bash: print: command not found
10:39  pcard: # foo=123; bar='foo'; printf "[%s] " "${!bar}"
10:39  evalbot: pcard: [123]
10:40  pcard: # foo=( 123 "4 5 6" ); bar='foo'; printf "[%s] " "${!bar}"
10:40  evalbot: pcard: [123]
10:40  pcard: # foo=( 123 "4 5 6" ); bar='foo'; printf "[%s] " "${!bar[@]}"
10:40  evalbot: pcard: [0]
10:40  pcard: ???
10:40  pcard: how to do with array?
10:40  pcard: # foo=( 123 "4 5 6" ); bar='foo'; printf "[%s] " "${foo[@]}"
10:40  evalbot: pcard: [123] [4 5 6]
10:41  pcard: what is array equiv of ${!bar} ?
10:41 --- Weust`afk is now known as Weust`
10:42  pcard: seem arrays already ${! for getting index, so what is proper syntax to use ref
10:43  gniourf_gniourf: # foo=( zero one two three four five ); echo ${foo[3]}
10:43  evalbot: gniourf_gniourf: three
10:43  pcard: # foo=( 123 "4 5 6" ); bar='foo[@]'; printf "[%s] " "${!bar}"
10:44  evalbot: pcard: [123] [4 5 6]
10:44  pcard: ah :)
10:44  pcard: I think I solved it :)
10:46  pcard: can entire array be referenced when just  bar='foo', not  bar='foo[@]'
10:47  pcard: that is, using just name of array, without [@] in string
10:55  Yahav: is this the place for help with .sh scripts?
10:56  twkm: sh scripts, yes.  foolish file naming conventions, no.
10:56  twkm: (this is actually #bash, but someone seems to think it is close enough)
--- Log closed Sat Nov 13 11:02:16 2010
--- Log opened Sat Nov 13 11:07:38 2010
11:07 --- Users 517 nicks [0 ops, 0 halfops, 0 voices, 517 normal]
11:08 --- Channel #bash was synced in 81 seconds
11:09  apropos: Can MAILPATH point to a Maildir?
11:10  twkm: no.
11:13  apropos: Fair dos.
11:20  crocket: Hi guys
11:21  crocket: Bash puts out the absolute path /usr/home/XXX instead of ~ in prompt.
11:21  crocket: I'm on FreeBSD
11:24  koala_man: echo $PS1
11:25  crocket: huh
11:25  crocket: wait
11:25  crocket: $
11:25  crocket: oops
11:25  crocket: koala_man, [\u@\h \w]\$
11:26  crocket: It's the default
11:26  koala_man: echo $HOME then
11:27  crocket: /usr/home/rabbit
11:27  crocket: It used to be /home/rabbit, but I changed it to /usr/home/rabbit
11:27  crocket: koala_man, Either /home/rabbit or /usr/home/rabbit for $HOME doesn't make a change.
11:27  koala_man: so HOME is /usr/home/rabbit and you're in /usr/home/rabbit , but it's not abbreviating?
11:28  crocket: It's not
11:28  crocket: wait, it does, but I don't know when it does
11:28  koala_man: eh?
11:29  crocket: Let me log in again
11:29  Peace-: my problem i have 2 arrays
11:29  Peace-: with 48 entry
11:30  Peace-: now i have to do ...
11:30  Peace-: kdialog  a[1] b[1]  a[2] b[2]
11:31  Peace-: ??
11:31  manhunter: koala_man: which linux distro do you use?
11:32  koala_man: manhunter: debian
11:32  Peace-: i mean something of fast
11:32  crocket: I'm now more familiar with the problem
11:33  Josay:  /win 2
11:33  Josay: oops
11:33  crocket: koala_man, When $HOME is /usr/home/rabbit, gnome-terminal starts on /usr/home/rabbit. And /usr/home/rabbit is abbreviated to ~, but /home/rabbit is displayed raw.
11:33  n3rV3: Peace-, 2 for loops would do...
11:34  crocket: koala_man, When $HOME is /home/rabbit, gnome-terminal starts in /usr/home/rabbit. /home/rabbit is displayed as ~, but /usr/home/rabbit is not abbreviated. So when gnome-terminal starts, I see /usr/home/rabbit.
11:34  manhunter: koala_man: good
11:34  koala_man: crocket: yes, \w will abbreviate $HOME to ~. it won't attempt to guess what your previous home dirs were
11:34  crocket: However, /bin/csh translated both /usr/home/rabbit and /home/rabbit to ~.
11:34  crocket: koala_man, /home is a symlink to /usr/home.
11:34  crocket: it is on FreeBSD
11:35  Peace-: n3rV3: mm i guess it's not the problem i mena i have to do ... kdialog   a[1] b[1]  a[2] b[2] ... a[48] b[48]
11:35  koala_man: Peace-: there's no clever way of doing it. do the manual loop
11:35  crocket: koala_man, I think bash doesn't detect a symlink when it comes to tilde abbreviation.
11:35  gniourf_gniourf: # a=(0 1 2 3 4 5); b=(A B C D E F); printf "$(printf "%%s %s " "${a[@]}")" "${b[@]}"
11:35  evalbot: gniourf_gniourf: A 0 B 1 C 2 D 3 E 4 F 5
11:35  gniourf_gniourf: \O/
11:35  gniourf_gniourf: # a=(0 1 2 3 4 5); b=(A B C D E F); printf "$(printf "%s %%s " "${a[@]}")" "${b[@]}"
11:35  evalbot: gniourf_gniourf: 0 A 1 B 2 C 3 D 4 E 5 F
11:36  Peace-: koala_man: why loop if it's not the problem  i mean   kdialog   a[1] b[1]  a[2] b[2] a[3] b[3] ... a[48] b[48]
11:36  Peace-: one line
11:37  Peace-: i guess i got it i could create another array :D
11:37  Peace-: xD
11:37  koala_man: you can use gniourf_gniourf's if you're sure your options won't contain spaces
11:37  crocket: koala_man, What's your guess?
11:38  koala_man: crocket: I would think you're right
11:38  crocket: koala_man, Are you a developer?
11:38  koala_man: bash developer? no
11:39  n3rV3: Peace-, echo -n "kdialog "; for i in {1..48}; do for j in {1..48};do echo -n " a[$i] ";done;done
11:39  n3rV3: is this easier or writing that 48^2 times
11:40  gniourf_gniourf: n3rV3, fail
11:40  n3rV3: ?
11:42  Peace-: n3rV3: man you have not got the problem
11:42  Peace-: ty anyway
11:43  gniourf_gniourf: Peace-, I gave you a solution if the elements of your array don't contain spaces
11:43  n3rV3: gniourf_gniourf, i got it
11:43  n3rV3: my bad didn't read through
11:43  n3rV3: :(
11:45  n3rV3: echo -n "kdialog "; for i in {1..48}; do echo -n " a[$i] b[$i] ";done
11:45  n3rV3: then pipe it to bash in the end
11:46  Peace-: gniourf_gniourf: you have got the problem
11:46  Peace-: xD
11:46  Peace-: nice
11:46  Peace-: :)
11:48  gniourf_gniourf: Peace-, be careful because it fails if you have spaces in your options ! in that regard, it's not really safe
11:49  Peace-: ya
11:49  Peace-: gniourf_gniourf: infact fails for this
11:49  Peace-: :D
11:49  gniourf_gniourf: xD
11:49  Peace-: http://pastebin.ca/1989981
11:49  Peace-: that's the code
11:49  Peace-: :D
11:50  Peace-: damn i am improving my kdenlive make automatic stuff for me service menu
11:50  Peace-: let's try  n3rV3 solution
11:52  n3rV3: http://pastebin.com/BeAmQP9D
11:54  Peace-: n3rV3: nope man doesn't work http://simplest-image-hosting.net/jpeg-0-videopreviw12
11:54  Peace-: i guess maybe i need to quote
11:55  suigeneris: hi
11:55 --- Weust` is now known as Weust`afk
11:56  suigeneris: I need to put an alias that has single quotes in .bashrc. what's the way to do it? escape them?
11:56  Knirch: use a function
11:57  suigeneris: Knirch, I don't know how to make a function in .bashrc. care to help me?
11:58  Knirch: # foo () { echo bar ; date ; } ; foo
11:58  evalbot: Knirch: bar
11:58  evalbot: Knirch: Sat Nov 13 10:58:16 UTC 2010
11:58  suigeneris: Knirch, let me show you my line?
11:59  suigeneris: 'ls -lt *.$1 | awk '{tot += $5} END {tot=tot/1024 ; printf(" TOTAL SIZE (kb): %4.2f\n",tot)}'
12:00  Knirch: foo () { ls -lt *.$1 | awk '{tot += $5} END {tot=tot/1024 ; printf(" TOTAL SIZE (kb): %4.2f\n",tot)}' ; }
12:00  suigeneris: oh, thanks
12:06  suigeneris: Knirch, I get unexpected ..... syntax error near '('
12:06  suigeneris: I can't translate what's in .....
12:06  gniourf_gniourf: Peace-, maybe use an "alternate" function
12:06  gniourf_gniourf: Peace-, e.g., alternate() { local a=( "$@" ); local d=$#/2; alt=(); for((i=0;i<d;++i)); do alt+=( "${a[i]}" "${a[i+d]}" ); done; }
12:09  gniourf_gniourf: Peace-, e.g., http://pastebin.ca/1989993
12:09  gniourf_gniourf: Peace-, note, I haven't tried it
12:10  pyml: hi there- i am trying to use the find command to locate and copy all files wtihin a given dir and subdirs within the last week.  can anyone help?
12:17  Knirch: suigeneris: how does your line look like?
12:18  suigeneris: Knirch, total () { ls -lt *.$1 | awk '{tot += $5} END {tot=tot/1024 ; printf(" TOTAL SIZE (kb): %4.2f\n",tot)}' ; }
12:21  gniourf_gniourf: suigeneris, why don't you use du?
12:21  Knirch: suigeneris: works here, how do you use it?
12:22  suigeneris: Knirch, I use total *.avi
12:22  trash: hahaha,.
12:23  suigeneris: gniourf_gniourf, I want to find the total size of some files in dir, not all of them
12:23  Knirch: you're supposed to use total avi
12:23  Knirch: you already have the *. part in the function
12:23  gniourf_gniourf: suigeneris, so? can't du do that?
12:23  suigeneris: but I get that error when I try to source it
12:23  Knirch: source what?
12:24  suigeneris: gniourf_gniourf, du gives the sizes individually, not total
12:24  Knirch: du has a total flag
12:24  trash: suigeneris: man du
12:24  suigeneris: Knirch, .bashrc
12:24  gniourf_gniourf: suigeneris, are you really sure? I use du daily for just that you know
12:25  Knirch: suigeneris: then you either didn't paste the correct line, the error is elsewhere, or you're using something other than bash
12:26  Knirch: suigeneris: if you want to, put your entire .bashrc in a pastebin and someone will hopefully be kind enough to point out the error
12:26  suigeneris: holy crap, it really has that function
12:26  gniourf_gniourf: sure
12:26  suigeneris: Knirch, http://pastebin.com/ae6MhiL1
12:27  suigeneris: err,, flag
12:27  Knirch: suigeneris: wow, the hidden fourth option, lying
12:27  gniourf_gniourf: suigeneris, don't do that, it's not the proper method anyways. Piping output from ls is a bad thing in general
12:27  Knirch: suigeneris: the line you gave me on irc is correct, the one with backslashes in your .bashrc is not
12:28  suigeneris: Knirch, env|grep -i shell
12:28  suigeneris: SHELL=/bin/bash
12:28  suigeneris: Knirch, I removed the backslashes
12:29  suigeneris: Knirch, and I still get the error
12:31  gniourf_gniourf: sometimes I wonder why people are so stubburn
12:31  Knirch: suigeneris: so how does your .bashrc look now?
12:32  Knirch: gniourf_gniourf: because it's so fun
12:33  gniourf_gniourf: it's a waste of time and it's not a proper method
12:33  gniourf_gniourf: instead of wasting time this way he'd probably learn proper methods
12:34  suigeneris: Knirch, actually, I don't need it now that I learned du had such a flag
12:34  Knirch: gniourf_gniourf: I'm waiting for my flight and have nothing better to do
12:34  Knirch: gniourf_gniourf: and it amazed me that he failed to, which in itself is worth figuring out if it prevents him to do the same mistakes later on
12:35  Knirch: suigeneris: yes
12:44  swipon: hi
12:56  hegemoOn: moin
12:58  Peace-: gniourf_gniourf: well works better but doens't work xD
13:09  gniourf_gniourf: Peace-, ? what's the problem?
13:11 * hashashin nas
13:18  Peace-: gniourf_gniourf: http://pastebin.ca/1990073
13:18  Peace-: so it' s not what i want
13:18  Peace-: the second array desn't is displayed
13:18  Bushmills: # a=1; b=2; c=3; ((a=b=c)); echo $a $b $c   # that's legal form of multiple assignment?
13:19  evalbot: Bushmills: 3 3 3
13:19  xxz: hi, what do this mean: echo ${varname#other_var}
13:19  gniourf_gniourf: Peace-, how did you use it?
13:20  Peace-: gniourf_gniourf: http://pastebin.ca/1990074
13:20  xxz: i've been googling but couldn't find another use for pound (#) other than a comment
13:21  Bushmills: xxz: at least two more meanings
13:21  Bushmills: element count, and stripping elements from variables
13:21  Bushmills: !pe
13:21  greybot: Parameter Expansion is the expansion of a parameter: "$foo", "$1". You can use it to perform string operations: "${file%.mp3}", "${0##*/}". Remember to *always* quote them. See http://mywiki.wooledge.org/BashSheet#Parameter_Operations
13:22  xxz: Bushmills, thank you!
13:22  gniourf_gniourf: Peace-, obviously it won't work
13:22  gniourf_gniourf: Peace-, your assignments kdenliveprofile[1]="<profileinfo width="1024" display_aspect_den="9" frame_rate_den="1" description="1024x576 16:9 PAL" height="576" frame_rate_num="25" display_aspect_num="16" progressive="1" sample_aspect_num="1" sample_aspect_den="1"/>" are wrong
13:23  gniourf_gniourf: Peace-, see the quotes? :D
13:23  Peace-: o shit
13:23  Peace-: ups
13:24  Peace-: what a pain
13:24  Peace-: xD
13:24  gniourf_gniourf: Peace-, use single quotes
13:24  Peace-: ''
13:24  Peace-: ?
13:24  gniourf_gniourf: yes
13:24  Peace-: ok
13:24  gniourf_gniourf: if you have vim it can be done very quickly
13:24  gniourf_gniourf: if not, good luck
13:25  Peace-: gniourf_gniourf: loving you  xD
13:25  Peace-: i have done!!!!
13:25  Peace-: :P
13:25  gniourf_gniourf: great
13:26  Peace-: gniourf_gniourf: xD i have already done my script to automatize kdenlive but with this ,.... i support every profile
13:27  gniourf_gniourf: wonderful
13:27  Peace-: should work in gnome kde and shell of course :D
13:29  xxz: Bushmills, found what i needed, thank you :)
13:31 --- MuzerAway is now known as Muzer
14:06  Huskypaw: bash doesn't seem to have a unicode compatible layer on it, perl gives me the wide character warning?
14:07  TheBonsai: in which context?
14:09 --- bewofthe is now known as cuznt
14:18  kaushal: Hi
14:36  kaushal: which language is used for developing bash interpreter ?
14:36  denysonique: C
14:37  denysonique: kaushal, GNU uses C for most of its projects
14:37  denysonique: s/its/it's
14:37  kaushal: ok
14:37  poisonbit: you can create bash modules in other languages
14:38  poisonbit: look at examples the in source code doc
14:39  salvin: poisonbit: bash modules aka commands?
14:39  poisonbit: "loadables"
14:40  poisonbit: more ~/src/bash/bash-4.1/examples/loadables/perl/README
14:40  poisonbit: but most "loadables" examples are .c
14:40  Huskypaw: If I changed my locales, do I have to reemerge bash?
14:41  Riviera: What exactly do "changed my locales" and "reemerge bash" mean?
14:41  Riviera: ah, emerge, like in Gentoo context?
--- Log closed Sat Nov 13 14:47:47 2010
--- Log opened Sat Nov 13 14:48:08 2010
14:48 --- Users 540 nicks [0 ops, 0 halfops, 0 voices, 540 normal]
14:48  geirha: manhunter: You should lose the .o extension, but that's not what's causing the issue.
14:48  manhunter: -rwxrwxrwx 1 user user  97490 2010-11-13 19:41 src.o
14:48  Huskypaw: Oh yes, that's what I said! xD
14:48  Riviera: Huskypaw: if äöü are not encoded in utf8, they would not be properly displayed
14:48  geirha: manhunter: Possibly the filesystem has noexec option set or something.
14:48  Riviera: Huskypaw: same with other "real unicode characters"
14:49  manhunter: geirha: yes,mount says , noexec
14:49  manhunter: geirha: so what to do?
14:49  Huskypaw: Riviera, well then, looks like they maybe are no Unicode characters, but still Unicode characters only are displayed as a question mark for sure.
14:49 --- Channel #bash was synced in 81 seconds
14:49  Riviera: Huskypaw: this then might not be related to bash
14:49  Riviera: Huskypaw: but to the terminal / terminal emulator you use
14:49  manhunter: geirha: this? mount -o remount,rw,exec /dev/sdaX /media/sdaX ?
14:49  geirha: manhunter: Well, that means you're not allowed to run binaries located on that filesystem. Change the mount-option or copy the file to a filesystem that doesn't have the noexec option.
--- Log closed Sat Nov 13 14:55:48 2010
--- Log opened Sat Nov 13 14:56:20 2010
14:56 --- Users 541 nicks [0 ops, 0 halfops, 0 voices, 541 normal]
14:57 --- Channel #bash was synced in 89 seconds
15:01  Huskypaw: I think I maybe really need to recompile bash.
15:03  poisonbit: Huskypaw, the same debian binary for bash, works on dozen of locales
15:03  poisonbit: and it does not have any compilation option for this
15:12  anon33_: weird - i'm getting the following error: rm -r <path/to/file>{-0.1,1.0} (the hyphen exists because thats how the folder is named)
15:12  anon33_: returns : comparguments:312: can only be called from completion function
15:13  anon33_: ah, i figured it out - never mind
15:13  Eiler: how do i make scripts and where do i put them?
15:14 --- kaushal1 is now known as kaushal
15:15  erUSUL: Eiler: with a text editor and somewhere in your PATH
15:18  Riviera: Eiler: maybe the guide can help (see the topic)
--- Log closed Sat Nov 13 15:24:14 2010
--- Log opened Sat Nov 13 15:24:42 2010
15:24 --- Users 541 nicks [0 ops, 0 halfops, 0 voices, 541 normal]
15:25  tuxtoti: i want to list all lines in a file other than the last  N lines .
15:25  tuxtoti: i'm sure this should be possible with combilnation of head and tail
15:25 --- Channel #bash was synced in 83 seconds
15:26  strull: tuxtoti: rather wc and head
15:26  Riviera: tuxtoti: head
15:26  erUSUL: tuxtoti: head -n+N file ?
15:27  Riviera: -N
15:27  Riviera: tuxtoti: head -n -10
15:27  erUSUL: Riviera is right; sorry
15:28  Riviera: tuxtoti: but check if your version of head supports that
15:28  tuxtoti: Riviera: thanks. that worked . I was trying with +N for a long time :)
15:28  geirha: ed -s file <<< "1,\$-${n}p"
15:28  Riviera: tuxtoti: cool :) (But note that this is not portable, so if you will use that on non-GNU systems, you might run into trouble)
15:33  TheBonsai: what about a simple sed -n '$!p' ?
15:34  Riviera: TheBonsai: you mean, to repeat this N times? :)
15:34  TheBonsai: ah, "last N lines"
15:34  TheBonsai: my bad
15:35  Riviera: it's possible doing this with sed, though; I think there's an example in the sed1liners
15:35  TheBonsai: yea, i vaguely remember something
15:38  Peace-: if i have an array.... a[1]=helloworld  i could get thenumber 1 knowing helloword?
15:38  Peace-: i mean
15:38  Peace-: a[2]=worldhi
15:38  TheBonsai: yes, walk through the array by index and make string comparisons
15:39  Peace-: ahh
15:39  Peace-: xD
15:39  Peace-: you right
15:39  Peace-: ty ty stupid question
15:39  TheBonsai: for index in "${!a[@]}"; do ....; done
16:07  Bushmills: Peace-: or use a hash, using "helloworld" as index to "1"
16:11  Peace-: Bushmills: i have already done
--- Log closed Sat Nov 13 16:24:12 2010
--- Log opened Sat Nov 13 16:24:33 2010
16:24 --- Users 536 nicks [0 ops, 0 halfops, 0 voices, 536 normal]
16:25 --- Channel #bash was synced in 80 seconds
16:25  Yahav: done
16:27  Yahav: so:
16:27  Yahav: var=stat -c%s myfile.ext
16:27  Bushmills: nope
16:27  Yahav: echo "Size: $var"
16:27  Yahav: so how do i assing the output of a proggram to a var?
16:28  Bushmills: var=$(command...)
16:28  Bushmills: !$(
16:28  greybot: Command Substitution: The $(foo bar) causes the command 'foo' to be executed with the argument 'bar' and $(..) will be replaced by the *output*. See http://mywiki.wooledge.org/BashFAQ/002 and http://mywiki.wooledge.org/CommandSubstitution
16:29  Bushmills: # dd if=/dev/zero of=filename bs=1 count=90 ; (( $(stat -c%s filename) < 100 )) && echo "smaller than 100 bytes"
16:29  evalbot: Bushmills: dd: opening `/dev/zero': No such file or directory
16:29  evalbot: Bushmills: bash: stat: command not found
16:29  evalbot: Bushmills: bash: ((: < 100 : syntax error: operand expected (error token is "< 100 ")
16:30  Bushmills: # echo "foobar" > filename; (( $(stat -c%s filename) < 100 )) && echo "smaller than 100 bytes"
16:30  evalbot: Bushmills: bash: stat: command not found
16:30  evalbot: Bushmills: bash: ((: < 100 : syntax error: operand expected (error token is "< 100 ")
16:30  Yahav: haha
16:30  Bushmills: as said, not available everywhere
16:31  Yahav: the bot dont have the stat package
16:31  Yahav: so:
16:31  Yahav: var=$(stat -c%s myfile.ext);
16:31  Yahav: echo "Size: $var";
16:32  Yahav: does bash scripting required ; at the end of every line?
16:32  Bushmills: no
16:33  lhunath: if you want file size; don't use stat.
16:34  lhunath: read size _ < <(wc -c file)
16:35  xt3mp0r: How can i print file which will actually print "\n" and such chracters without executing their work by making text move to next line.
16:36  lhunath: uh.  printing a "a" executes its work as much as printing a newline does with moving to the next line by putting an "a" on the screen.
16:36  lhunath: make more sense.
16:37  Bushmills: xt3mp0r: try  cat -A
16:37  hatten: yo, how do I get a command to execute every time a new line is output in a file, eg tail output | beep
16:37  lhunath: or just try random commands that do things without really knowing what you want.
16:38  Bushmills: hexdump -C  as alternative
16:38  lhunath: hatten: while true; do read && beep; done <file
16:38  hatten: oh, that's cool
16:39  hatten: never would've thought of something like that
16:40  xt3mp0r: Bushmills: It is showing back somethign like ^M$ where it is \n
16:41  xt3mp0r: lhunath: Actually, i have a file. I want to remove all those \n \r etc characters and make it a simple one line text file.
16:41  xt3mp0r: lhunath: any better way?
16:41  lhunath: remove or replace by a space?
16:42  xt3mp0r: lhunath: I tried getting text data to a php variable and tried to replace \n with "" but it didn't worked it. It is some other chracter maybe ? If yes, how can i know which chracter that is. so that i can replace.
16:43  lhunath: you have a carriage return and a newline at the end of your liens.
16:43  lhunath: lines*
16:43  lhunath: that's a \r character and a \n character.
16:43  lhunath: (windows line ending)
16:43  xt3mp0r: Let me try
16:44  lhunath: ''tr -d '\r' < file'' will output the file without carriage returns.
16:44  lhunath: ''tr -d '\n' < file'' will output the file without newlines.
16:45  lhunath: can't imagine why you'd want to destroy newlines, though.
16:45  xt3mp0r: lhunath: Worked. Thanks a lot. Oh, I was scraping data and it had various such carriagereturns in between messing up real data.
16:46  lhunath: !cr
16:46  greybot: Carriage Return (ASCII 13). Often written as ^M or \r. CRs are found just before newlines in text files generated by DOS/Windows apps. You can see them with "cat -e". See http://mywiki.wooledge.org/BashFAQ/052 to get rid of them.
16:46  xt3mp0r: cool, didn't knew that.
17:01 --- jjcli is now known as jjcli_
17:06  jdimatteo: does r have special meaning in a bash script?
17:07  poisonbit: multiple meanings, depend on context
17:08  poisonbit: maybe a string, a option for a command, you may alias r, maube a func, a var, etc etc etc
17:09  jdimatteo: poisonbit: svnadmin dump -r$rev --incremental -q ../src/$prjname > r; cp r dump_original/$prjname/$rev # is r just a variable here?
17:10  poisonbit: here is a file name
17:10  poisonbit: you're creating the "r" file (from revision) with  > r  and then you're cp that file
17:12  jdimatteo: poisonbit: because vim syntax highlighting is coloring r differently than it would b for example, and I thought maybe r might be a special variable... could this just have easily been: svnadmin dump -r$rev --incremental -q ../src/$prjname > file_from_revision; cp file_from_revision dump_original/$prjname/$rev
17:12  poisonbit: that is
17:12  poisonbit: it's not variable, it is a static file name, vim syntax Hi sometimes sucks
17:13  jdimatteo: poisonbit: ok, thanks for explaining, I'm trying to learn bash scripting and debug some monster SVN script at the same time
17:13  poisonbit: you may simply quote static strings, and will get always the same color for strings  'r' or 'b'
17:14  juanmabc: it is probably highlighting your last search, vim hl is pretty nice
17:14  poisonbit: good luck
17:16  poisonbit: juanmabc, agree, really my view point comes from old vim versions, last ones i've used doesn't break colorizing rules too often
17:20  juanmabc: poisonbit: ah, yes, vim is a very active project
17:28  hatten: yo, i earlier said that i want to track new lines to a file, and got "while true ; do read && beep -l 100 ; done < file", though that also reacts on old content
17:28  hatten: ie, when launching it it'll iterate through every single line before tracking new changes
17:28  hatten: which i don't want
17:29  hatten: so, how can i do it?
17:31 --- hackeron_ is now known as hackeron
17:34  jdimatteo: anybody have a couple minutes to help me understand a few lines of a bash script I am debugging?  lines 167-171... I'm trying to learn bash scripting and also debug a script for fixing my svn repository: http://pastebin.com/iiV9mJPi
17:37  jdimatteo: what is the effect of the following line?  I'd appreciate some help, bash scripting isn't my specialty: cat r | sed "s#Node\\(.*\\)-path: branches/\\([ 0-9A-Za-z_\\.\\-]*\\)\\(.*\\)#Node\\1-path: branches/\\2/$prjname\\3#" > 1
17:38  krzee: its a funny way to do a switch
17:39  krzee: reads the file r
17:39  krzee: changes first      Node\\(.*\\)-path: branches/\\([ 0-9A-Za-z_\\.\\-]*\\)\\(.*\\)    with    Node\\1-path: branches/\\2/$prjname\\3
17:40  krzee: and outputs to a file named 1
17:40  wuffi600: when replacing special characters to non-speciual ones, e.g. mv -v -- "$f" "${f//ä/a}", how can i replace all special chars by their base-char, e.g. like tr "äáàâ" "aaaa" would do?hi
17:40  krzee: all \\ is just \
17:41  jdimatteo: krzee: thanks!  I'm still scratching my head a little about what the numbers 1, 2, and 3 mean in "Node\\1-path: branches/\\2/$prjname\\3" though...
17:41  krzee: jdimatteo, i dont recommend learning bash on that script
17:41  krzee: i took a look at it and said screw that
17:42  jdimatteo: krzee: :) ok, unfortunately I sorta gotta get this script to work... I guess I'll try to take a little detour and learn sed first
17:43  krzee: its not especially sed you gotta learn, its just a simple replace regex going on there
17:43  krzee: maybe its more svn internals you gotta learn
17:44  krzee: or regex
17:44  jdimatteo: lol, basically I've got to learn everything.  I recently got swapped from Windows C++ development to now be a Unix System administrator, and I'm still adjusting
17:45  krzee: lol sounds fun
17:55  variable: How can I find duplicate words in a typical text file (no special format)
17:58  variable: I'm looking to find typical writing mistakes like "It is is a big thing"
18:11  nocturnal: is there an issue with LSCOLORS and the root user? I have LSCOLORS set and it works for any user in both tcsh and bash but root using the same configuration gets no color at all using tcsh and default colors using bash.
--- Log closed Sun Nov 14 19:50:10 2010
