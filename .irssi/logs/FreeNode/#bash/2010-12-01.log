--- Log opened Wed Dec 01 00:00:31 2010
00:00  Amivit: ps? That was easy ^
00:04  mDuff: krzee, what's the context?
00:05  mDuff: krzee, ...lots of ways to pass lists to subprocesses; which one makes most sense depends on what you're trying to accomplish.
00:07  krzee: hrm actually now that i look at it, i think its being eaten by a pipe and that exporting wouldnt have worked either way
00:08  krzee: im calling a function that gets info from a db, pipes it to while, and sets up the variables, then calling a function that uses them
00:10  krzee: the second query gets the data to process, needs data from first query in order to process them
00:17  abooz: i know it's a simple question but here it goes. How do I get the pid of a process i just spawned and daemonized? $! won't give back anything.(this is to do with ssh with -f argument.)
00:18  mDuff: abooz, when you say "daemonized" -- through which means, exactly?
00:19  abooz: well i'm lying really.ssh -f  just goes to the background automatically after it asks for passwords.
00:19  abooz: but still $! won't give the pid.
00:21  \malex\: abooz: that's because $! only works when the shell puts something in the background
00:22  abooz: hmmm.Any ideas how to get the pid?  without grepping the output of ps?
00:23  \malex\: hmm, not easily
00:23  guampa: pgrep's output might be a bit easier to parse
00:24  \malex\: abooz: you could do like ssh -f .... 10> /tmp/ssh.users  and then get the pid of that ssh with fuser or lsof on /tmp/ssh.users
00:25  \malex\: 10> so that you won't touch stdin/stderr/stdout
00:26  guampa: that's even better
00:26  \malex\: the added advantage of using that is you don't have to worry about multiple invocations, if you use a unique check file
00:26  \malex\: vs ps
00:26  abooz: Hmmm...I'll try that! Thanks guys!
00:28  ritzt3ch: can i set a Variable to multiple lines within bash or should i put it in a file and then Var = /filename
00:30 --- Unknown[OFF] is now known as Unknown[NF]
00:32  geirha: var="line 1
00:32  geirha: line 2"
00:33  geirha: !wordsplitting
00:33  greybot: echo $foo; rm $foo -- If you leave $foo unquoted, bash will *remove* all whitespace (newlines, spaces, tabs) while expanding it, take each *word* as a separate argument. `echo` prints these words separated by one space and `rm` deletes each word. So ALWAYS *quote* your parameter expansions: echo "$foo"
01:01  roxy: what do i need to type in the terminal to find out what compiler i have?
01:04  mDuff: roxy, "man cc" probably isn't a bad start
01:04  mDuff: roxy, ...the man page will hopefully identify what the program is / who makes it / how to ask it for its version number.
01:04  mDuff: (presuming it's the C compiler you want, of course)
01:09  roxy: mDuff: thankies... it worked. :)
01:11  Riviera: uhm.
--- Log closed Wed Dec 01 01:15:19 2010
--- Log opened Wed Dec 01 01:15:39 2010
01:15 --- Users 532 nicks [0 ops, 0 halfops, 0 voices, 532 normal]
01:16 --- bXi_ is now known as bXi
01:17 --- Channel #bash was synced in 115 seconds
01:22  jocrawfo: hey guys if i am in a bash script can i source another bash script?  I ask because i have a python script that is run from inside a bash script which changes some env stuff, then i need to source the bashrc to update env stuff, is that possible?
01:23  jocrawfo: or will i always have to manually source the file?
01:24  guampa: jocrawfo: use "source file" or ". file" in the script
01:25  toal193: how can I redirect both STDOUT and STDERR into the same file (append, not overwrite)
01:25  toal193: ?
01:26  jocrawfo: guampa, i did but when it returns to the bash prompt and i do export | grep _proxy it still shows the env vars as set
01:26  jocrawfo: if i open a new shell window they are no longer set, so in the active window session will i always have to source the file
01:26  go|dfish: toal193: >> file 2>&1
01:26  jocrawfo: or will apps run in Gnome see the new settings, or do i need to restart the apps, etc.
01:27  toal193: ok, thanks
01:27  guampa: jocrawfo: afaik thats because the script just sets the variable for itself and its childs only
01:28  jocrawfo: these are just scripts setting and unsetting my corporate proxy stuff so that when i connect to the vpn it sets the proxy stuff and when i disconnect it unsets the proxy stuff
01:28  infinitux: reset5
01:37  roxy: Does anyone know a good website that i can read up on about bash? *beginner here*
01:37  go|dfish: roxy: urls in the topic
01:38  roxy: go|dfish:  oh... didn't see that til you said something... thankies also :)
01:39  guampa: i found good info at bash hacker's wiki
01:39  guampa: nice site
01:39  roxy: guampa: k. ill check it out thanks :)
01:42  \malex\: bah, what's wrong with the bash manpage? :D
01:42  guampa: hahaha
01:44  \malex\: hey, that's where i learned scripting!
01:45  guampa: yeaaah, but i'm sure it doesn't contain all the ref!
01:45  guampa: maybe the info page does
01:47  \malex\: guampa: what doesn't the bash manpage have?
01:48  guampa: does it have all parameter substitutions?
01:48  \malex\: all the ones i know about
01:49  \malex\: yay circular references
01:49  guampa: hahah, indeed i really don't know, but i would be surprised
01:49  guampa: just because its a lot of info for a mp
01:50  \malex\: it's a big manpage
01:50  \malex\: 3723 lines here
01:53  guampa: 3360 here, then that's why i was so sure!
01:53  guampa: ;)
01:53  guampa: those damn 400 lines make all the difference
01:55  \malex\: bash 3.2. the manpage is dated sept 2006
01:57  Riviera: 18096 lines here
01:57  guampa: oddly this is newer. Dec 2009, for 4 i guess as that's what i have
01:57  guampa: 18000?
01:57  Riviera: yes
01:58  Riviera: for a terminal that's 32 characters wide.
01:58  \malex\: yay for tiny screens :D
01:58  \malex\: heh yes
01:58  guampa: lol
01:58  Riviera: (i. e., your numbers suck)
01:59 * guampa autokicks ass
01:59  sodapop_: im trying to kill -9 a pid and i get script.sh: line 61:  6722 Killed Xvfb  :$DISPLAYNO -screen 0 1000x800x24 > /dev/null 2>&1
01:59  roxy: lol :P
01:59  sodapop_: is this an error
02:02  mDuff: !kill-9 > sodapop_
02:02  greybot: sodapop_: Terminating Processes Correctly: http://stackoverflow.com/questions/690415/in-what-order-should-i-send-signals-to-gracefully-shutdown-processes/690631#690631
02:03  mDuff: sodapop_, ...but umm, no, a notice that a job was killed is not, in and of itself, an error. Especially if you were trying to kill it.
02:03  sodapop_: why does it show the line number of the script
02:04  mDuff: sodapop_, ...well, would that by any chance be the script which was running Xvfb?
02:05  mDuff: sodapop_, ...because if so, from _its_ perspective, having its subprocess die with a signal is an error. From _your_ perspective, it's (presumably) exactly what you wanted.
02:05  mDuff: "Error" is such a malleable idea.
02:05  sodapop_: ic
02:05  sodapop_: thanks
02:05  mDuff: (all that said, kill -9 is evil, and wrong, and will eat your babies)
02:05  sodapop_: untrappable
02:06  mDuff: right, so it can't clean up after itself
02:06  mDuff: no removal of temporary files unless they were unlinked ahead-of-time, and (sometimes) no cleanup of SysV SHM, IPC segments or the like
02:06  mDuff: no opportunity to flush and close open files, no opportunity to make sure logs made it out to disk...
02:07  mDuff: ...very occasionally necessary, but should be a last resort, not a first one.
02:43  myradlife: Would someone please help me with a SED question? I want to insert a line of code into a file through the command line.  How is that done, and how do I apply that to a batch of files?
02:44  Riviera: myradlife: where do you want to insert that line of code?
02:45  myradlife: I have HTML files
02:45  myradlife: and i want to insert a line of html in all these
02:45  Riviera: myradlife: yes, where in these files?
02:45  myradlife: for the most part, since they were generated by a script, I can possibly just count to the line I want.
02:45  myradlife: say line 12
02:46  Riviera: myradlife: sed $'12i\\\nyour new line' file > new-file
02:46  myradlife: what does the $ do?
02:47  Riviera: normally, the sed script would look like this:
02:47  Riviera: 12i\
02:47  Riviera: your new line
02:47  Riviera: But bash has a special syntactical feature for embedding newlines in quoted strings as \n
02:47  Riviera: !$'
02:47  greybot: Bash has a special form of quoting, $'string' in which backslash-character combinations are expanded. For example, echo $'this is a literal tab: \t'
02:47  Riviera: # echo $'one\ntwo'
02:47  evalbot: Riviera: one
02:47  evalbot: Riviera: two
02:47  Riviera: # echo 'one\ntwo'
02:47  evalbot: Riviera: one\ntwo
02:49  myradlife: I see
02:50  myradlife: Riviera, greybot , for "file" and "new-file" do I have to specify different files? or can i have this overwrite the original file?
02:51  Riviera: myradlife: sed is not an editor of files, so, yes, you would have to use a temporary file
02:51  Riviera: myradlife: some versions of sed GNU and BSD sed, have options for hiding that procedure for you, creating a temporary file in the background (the parameter there is -i)
02:51  guampa: Riviera: sed can edit the stream when -i is used
02:52  myradlife: Riviera, I'm wondering if this is even the correct approach
02:53  Riviera: myradlife: what about it? :)
02:53  myradlife: Riviera, say I want to perform the following  ........   sed $'12i\\\nInsert this new line' file > new-file
02:54  myradlife: that's not affective for performing this on *.html, is it?
02:54  Riviera: myradlife: i'd say that this is orthogonal to performing this on multiple files.
02:55  Riviera: myradlife: well, your initial sin was to assume you want sed to solve your problem
02:55  myradlife: yes :)
02:55  Riviera: myradlife: you thought too much, the root of all evil
02:55  Riviera: myradlife: for a in ./*.html; do printf %s\\n '12i' 'new line' . w | ed -s "$file"; done
02:55  Riviera: myradlife: untested, though, make backups, always make backups
02:58  myradlife: okay, i'll try, this is confusing... i understand bits of it ;)
02:58  Riviera: (if you want to insert a line *after* line 12, use "12a" instead of "12i")
02:59  myradlife: yes, i get that '12i' not sure about the "w | ed ....."
02:59  myradlife: "w" for write
02:59  Riviera: the | connects the output of the printf command with the input of the ed command
03:00  mar77i: the string and input is sent to ed... man ed on how it works
03:00  Riviera: ed is an editor
03:00  myradlife: oh, good to know
03:01  mar77i: Riviera: how about tty i/o with ed? that's not pico/nano, is it?
03:02  Riviera: mar77i: what do you mean?
03:03  mar77i: same with sed, I mean it's not cursing stuff :D
03:03  myradlife: Riviera, didn't work using your line from above
03:03  myradlife: had no effect
03:04  myradlife: let me see if i understood a few parts
03:04  Riviera: myradlife: horrors.
03:04  myradlife: "for a in ./*.html"
03:04  Riviera: myradlife: first let's make it right
03:04  myradlife: as i understand, "a" is like a placeholder, right? I could use anything there?
03:04  Riviera: myradlife: then try to understand. otherwise you waste time understanding bullshit :)
03:04  myradlife: okay
03:04  Riviera: myradlife: oh.
03:04  Riviera: myradlife: hehe
03:04  Riviera: myradlife: yes
03:04  Riviera: myradlife: for file in ..
03:04  Riviera: myradlife: ;)
03:04  Riviera: myradlife: you're a smartarse ;-)
03:05  myradlife: yes
03:05  Riviera: myradlife: or did you change that thing and it still had no effect?
03:05  myradlife: didn't i used ./*.html
03:05  mar77i: :D
03:05  myradlife: so ../*.html                   why couldn't i just use "for a in *.html" ?
03:06  mar77i: echo $PWD
03:06  myradlife: oh, i see. It should be "for file in ./*.html    .........."
03:07  mar77i: # touch a b c; for i in *; do echo $i; done
03:07  evalbot: mar77i: a
03:07  evalbot: mar77i: b
03:07  evalbot: mar77i: c
03:07  mar77i: works here :D
03:07  myradlife: Now that worked
03:08  greenmtnvm: Hi all.. I have a stupid (I think) question... If I issue the following command:  cat *.txt | grep somestring > out.txt     In what order does Bash do things? Does it create out.txt first or cat, then grep, then create out.txt?
03:08  myradlife: touch e f g; for z in *; do echo $z; done
03:08  mar77i: !uuoc > greenmtnvm
03:08  myradlife: # touch e f g; for z in *; do echo $z; done
03:08  greybot: greenmtnvm: Useless Use of Cat (cat foo | grep bar). See http://partmaps.org/era/unix/award.html
03:08  evalbot: myradlife: e
03:08  evalbot: myradlife: f
03:08  evalbot: myradlife: g
03:09  mar77i: # ls; echo see?
03:09  evalbot: mar77i: see?
03:09  Riviera: myradlife: so, problem solved? :)
03:09  Riviera: greybot: yes, first out.txt is created, use temporary files
03:10  myradlife: Riviera, Yes!  if *.html sits in subdirectories, can this run recursively(is that the right word?) into those dirs and on them?
03:10  mar77i: myradlife: use **
03:10  greenmtnvm: lol, its just an example... I am actually curious if bash creates the new file before, during or after the other commands
03:11  Riviera: myradlife: yes, then if you do have bash4, do what mar77i suggests or use find
03:11  mar77i: greenmtnvm: it creates them after evaluating the pipe... which is before any of the processes is launched
03:12 --- Unknown[NF] is now known as Unknown[OFF]
03:12  greenmtnvm: mar77i: Thanks, thats what I had assumed but I thought I'd ask just to be sure.
03:12  Riviera: myradlife: find directory/ -type f -name '*.html' -exec bash -c 'for file do printf %s\\n '12i' 'new line' . w | ed -s "$file"; done' _ {} +
03:12  mar77i: as soon as i/o redirects are up, bash is going to step back.
03:13  Riviera: myradlife: ah, no;
03:13  Riviera: myradlife: find directory/ -type f -name '*.html' -exec bash -c 'for file do printf %s\\n '\''12i'\'' '\''new line'\'' . w | ed -s "$file"; done' _ {} +
03:13  mar77i: Riviera: wtf is that for in -c doing :D
03:13  Riviera: myradlife: also, of course, untested. Make backups before you test
03:14  Riviera: mar77i: looping
03:14  mar77i: on {} :O
03:15  mar77i: oh with a + that is... so it's going to use two loops, one for caching and the other for de-caching .... LOL
03:15  mar77i: that is a crime!
03:17  MTecknology: # awk -v "o=--conf-path=" 'BEGIN { l = length(o) } match($0, o "[^[:blank:]]*") { print substr($0, RSTART + l, RLENGTH - l) }' <<<$(echo "configure arguments: --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-client-body-temp-path=/var/lib/nginx/body --http-fastcgi-temp-path=/var/lib/nginx/fastcgi")
03:17  evalbot: MTecknology: /etc/nginx/nginx.conf
03:17  mar77i: no -O is ever going to speed that up man :D
03:17  myradlife: Riviera, that did work. Thanks.
03:17  Riviera: myradlife: cool :)
03:20  myradlife: Riviera, one last thing and i'll be out of your way. what is a simple way to copy a directory (including subdirs) if I only want the folders and the *.html files?
03:21  myradlife: the structure is like : /folder/subdir1/subdir2/   and each dir has html and jpg           I want to copy every folder and every html to a new location
03:22  mar77i: I couldn't do that with a + :)
03:23  Riviera: myradlife: hehe, i don't know :) i'd probably go for some lazy approach like using rsync or first creating the directories, then the files, abusing tar, things like these
03:23  mar77i: lol
03:23  Riviera: myradlife: there certainly are better ways :)
03:24  myradlife: Riviera, okay, that's fine, I was only interested for making a backup I can fool around with and test
03:24  myradlife: not critical so i'll just do by hand for now
03:24  myradlife: but i didn't know why cp -R *.html targetfolder    didn't work
03:25  MTecknology: !pe
03:25  greybot: Parameter Expansion is the expansion of a parameter: "$foo", "$1". You can use it to perform string operations: "${file%.mp3}", "${0##*/}". Remember to *always* quote them. See http://mywiki.wooledge.org/BashSheet#Parameter_Operations
03:25  mar77i: myradlife: cd /dir; find . -type d -exec bash -c 'dir="{}"; mkdir -p "/dest/$dir/"; for file in "$dir"/*.html; do cp "$dir"/*.html "/dest/$dir"; done'
03:26  guampa: myradlife: mkdir othertopdir; cd topdir ; find -type d -exec mkdir othertopdir/{}\;
03:26  mar77i: myradlife: ** vs *... see man bash, if you're using b4 :)
03:28  StrikerST: im having problems concatening strings I Know you do string="s" string2="so" and then string1=$string$string2 but its not working
03:28  StrikerST: is there any reason why?
03:29  myradlife: mar77i, how do i know if i'm on bash4?
03:29  Riviera: # string=s string2=so string1=$string$string2; echo "$string1"
03:29  evalbot: Riviera: sso
03:31  mar77i: myradlife: if you're in bash4 and you're in a directory with subdirectories, echo **, and you'll know... in bash4, subdirs are displayed.
03:32  mar77i: myradlife: assuming, you use linux, you probably will... so, other question, what platform?
03:32  myradlife: linux ubuntu
03:32  StrikerST: its not working and im doing that
03:32  StrikerST: is there a max string length perhaps?
03:33  mar77i: !uumq
03:33  mar77i: !umq > StrikerST
03:33  greybot: StrikerST: "USE MORE QUOTES!" They are vital. Also, learn the difference between ' and " and `. See <http://mywiki.wooledge.org/Quotes> and <http://wiki.bash-hackers.org/syntax/words>.
03:34  mar77i: myradlife: my maverick has bash4 :)
03:35  darkferret9: err...what can I replace » with? I want a multibyte UTF-8 character
03:36  mar77i: darkferret9: that » is a multibyte UTF-8 char :)
03:36  Riviera: # sed -n l <<< '»'
03:36  evalbot: Riviera: \302\273$
03:36  darkferret9: damnit
03:36  Riviera: true.
03:36  darkferret9: well, it does not display properly under URxvt
03:37  darkferret9: or, rather, this irssi theme has a bit of a problem with it
03:37  mar77i: darkferret9: URxvt here, and it's working.
03:38  mar77i: darkferret9: use an utf-8 locale, like en_US.UTF-8 :)
03:39  darkferret9: mar77i: I do\
03:40  mar77i: darkferret9: what platform? os/distro?
03:40  darkferret9: LANG is en_US.UTF-8
03:40  mar77i: did you gen-locales and read the wikis?
03:40  darkferret9: mar77i: Linux from Scratch SVN-20100923
03:40  mar77i: haha
03:41  darkferret9: what?
03:41  darkferret9: it is stablew
03:41  darkferret9: http://img11.imageshack.us/img11/51/irssiprob.jpg
03:41  mar77i: did you do locale-gen ?
03:41  darkferret9: yes..
03:42  Riviera: darkferret9: is this a locally running irssi?
03:42  mar77i: how long does svn-20100923 take to install?
03:42  darkferret9: Riviera: yes
03:42  darkferret9: mar77i: a long while
03:42  darkferret9: couple days
03:42  mar77i: okay. NO.
03:42  darkferret9: it is fun though
03:42  Riviera: darkferret9: oh, sorry, did not see that these questions already were asked :)
03:43  mar77i: darkferret9: what about the font?
03:43  darkferret9: mar77i: I am using Inconsolata
03:43  Riviera: of course it's a font problem
03:43  mar77i: does it do öøőÿ?
03:43  darkferret9: yes
03:43  mar77i: then your locale is okay :D
03:43  Riviera: well, not of course, but these boxes make it quite likaly
03:44  Riviera: likely*
03:44  darkferret9: what font should I try first?
03:44  mar77i: darkferret9: you'll be told many now, bitstream vera sans mono being one of them :)
03:45  mar77i: btw, imho this looks just the same anyway
03:47  mar77i: if you can, bully that inconsolata dev to add that stuff, it's pretty urgent, apparently :D
03:50  darkferret9: 'll brb
03:52  sodapop_: im trying to exec through php a bash script php uses sh -c myscript.sh it seems that variables are empty this way
03:52  sodapop_: any ideas
03:52  mar77i: !sh
03:52  greybot: sh is the POSIX or Bourne shell, not bash. Even if sh is a symlink to bash, running a script under 'sh' (either by typing 'sh myscript' or putting '#!/bin/sh' at the top) *disables* many bash features. See http://mywiki.wooledge.org/BashGuide/Practices#Choose_Your_Shell
03:53  mar77i: what is -c doing there, anyway :D
03:54  bl^ckh0le^: ok...
03:54  bl^ckh0le^: ok, somebody please try aka theme for irssi
03:54  sodapop_: can i fix it with export SHELL="/bin/bash";
03:54  cipy_: if I have 2 file test and test.o; how can I erase both of them with a file  matching pattern, e.g., test{.o} ?!
03:55  Bushmills: any specific variable which is "empty", or all of them? php variables? bash variables?
03:55  mar77i: sodapop_: guessing that your myscript.sh has a shebang line which will launch a new subshell, you'll end up with two subprocesses from start, and then things get even more complicated. does myscript.sh have such a line?
03:55  Riviera: cipy_: there are two ways
03:55  mar77i: !#! > sodapop_
03:55  greybot: sodapop_: Jargon, from "hash bang", or "#!". The shebang line is read by the kernel when a script is executed. See http://www.in-ulm.de/~mascheck/various/shebang/
03:55  mar77i: cipy_: make clean :)
03:55  sodapop_: #!/bin/bash
03:56  Riviera: cipy_: one is the one you pointed out: test{,.o} but that is not filename matching but generation, "rm test{,.o}" will see both filenames, it expands to rm test test.o, even if they don't exist. (This will let rm throw an error if at least one of them does not exist, which you could prevent with -f)
03:56  cipy_: mar77i, :-) that should actually go into a Makefile (clean: target)
03:56  mar77i: sodapop_: that makes sure it's using the right shell. so, there's actually a bash process run from sh. now... what's the actual problem?
03:57  mar77i: cipy_: google it, then.
03:57  Riviera: cipy_: another way would be to use extended globbing: test?(.o)
03:58  Riviera: cipy_: which will still be expanded to "test?(.o)" if none exists and nullglob is not set, so it requires shopt -s nullglob and shopt -s extglob
03:58  cipy_: Riviera, thank you very much I actually missed the "," before the .o; and I was getting a different behaviour
03:58  mar77i: careful cipy_ that stuff needs to be activated for that purpose... I think {,.o} will work just fine
03:58  Riviera: cipy_: both, the brace expansion {..} and the extglob ?(..) things require bash
03:59  Riviera: cipy_: which might not be very smart a thing to rely on in a makefile, i'd rather suggest the command "rm -f test test.o"
03:59  mar77i: Riviera: while brace expansion can be used without using an exotic shopt setting
03:59  cipy_: thank you very much for your help
04:00  sodapop_: mar77i, in the script i assign some pids to variables and i echo them if i run it from php/browser i see not output e.g. echo "XVFB PID IS $XVFBPID" prints "XVFB PIS IS"
04:00  sodapop_: when executed from shell directly works
04:01  mar77i: umm, what are you executing? just that?
04:01  mar77i: sodapop_: could you share that script, roughly, at lest'
04:01  mar77i: least?
04:01  sodapop_: sure 1 mom, thanks
04:02 * mar77i is preparing for a cde rofl
04:03  MTecknology: # path="/some/base/path"; file="/some/base/path/file"; echo ${file#*path}
04:03  evalbot: MTecknology: /file
04:03  mar77i: MTecknology: fail
04:04  MTecknology: # path="/some/base/path"; file="/some/base/path/file"; echo ${file#*pat}
04:04  evalbot: MTecknology: h/file
04:04  mar77i: MTecknology: you're looking for ${file#*$path} if I'm getting you correctly :D
04:04  MTecknology: # path="/some/base/path"; file="/some/base/path/file"; echo ${file#*$path}
04:04  evalbot: MTecknology: /file
04:04  MTecknology: mar77i: thanks :D
04:05  mar77i: O_o wtf being so hard about that
04:05  MTecknology: alrighty - test time
04:05  MTecknology: I hate tests
04:06  mar77i: untested algorithms, accidentially working. is this #bash here?
04:06  mar77i: cynism ftw xD
04:09  mar77i: if you have used -print0, you know what I'm talking about...
04:10 --- bl^ckh0le^ is now known as bl^ckh0le
04:18  sodapop_: mar77i, nevermind i was reading ps wrongly
04:18  sodapop_: worked :)
04:20  mar77i: sodapop_: if php uses the kernel to run sh, it could as well use the kernel to find out what kind of file the one is you wanted to execute, which sh would use the kernel for anyway, so you could save some processor time ...
04:21  mar77i: btw php is more portable than sh iirc
04:32  roxy: >.> omg! there is a lot of things to know about the bash thing >.>
04:32  roxy: :p
04:32  yitz_: bash shell
04:33  roxy: yea...
04:33  asasfas: question
04:33  asasfas: will
04:33  asasfas: prefix="http://"
04:33  asasfas: host=$(echo $url | sed "s/${prefix}//")
04:33  asasfas: remove the prefix from the url?
04:33  yitz_: !tias
04:33  greybot: Try It And See
04:33  asasfas: cant  use greybot?
04:34  asasfas: how do I use greybot?
04:34  yitz_: # prefix="http://" ; host=$(echo $url | sed "s/${prefix}//") ; echo $host
04:34  evalbot: yitz_: sed: -e expression #1, char 10: unknown option to `s'
04:35  yitz_: # prefix="http://" ; host=$(echo $url | sed "s_${prefix}__") ; echo $host
04:35  evalbot: yitz_: no output
04:37  Bushmills: # host="http://foo.bar"; prefix="http://"; echo "${host#$prefix}"
04:37  evalbot: Bushmills: foo.bar
04:46  roxy: *is going to have a long night of reading* :P
05:04  roxy: rm tmp/ Public/ Templates/  -r    does this mean it remove a folder or whats in that folder? if so what was in that folder? is it important? asking cuz a know it all person did this *looked at history* :P
05:05  roxy: im a noob btw >.<
05:09  yitz_: Usually flags (-r) come before the other stuffs. But, yeah, -r is recursive. It deletes those 3 directories and everything inside them
--- Log closed Wed Dec 01 05:15:00 2010
--- Log opened Wed Dec 01 05:15:21 2010
05:15 --- Users 518 nicks [0 ops, 0 halfops, 0 voices, 518 normal]
05:17 --- Channel #bash was synced in 115 seconds
05:42  MTecknology: so here's in funky question.... or two...
05:42  MTecknology: is it possible to use the output of one function as input for another?
05:43  MTecknology: and.. I have a list of files, and another list of files; how can I make two lists from that; one where there are matches and one where there are no matches...
05:44  yitz_: !faq intersection > MTecknology
05:44  greybot: MTecknology: http://mywiki.wooledge.org/BashFAQ/036 -- How can I get all lines that are: in both of two files (set intersection) or in only one of two files (set subtraction).
05:44  yitz_: MTecknology: functionA $(functionB)
05:45  MTecknology: yitz_: thanks :D
05:48  MTecknology: yitz_: oh.. how much different is it for variables as opposed to files?
05:48  MTecknology: oh.. easy
05:49  yitz_: comm -blah <( echo $list ) <( echo $more )
05:54  Eiler: i just types a very long command in bash, can i somehow save that whole command to a file?
05:55  yitz_: Eiler: up (recall), HOME, type echo ' END ' > file   <ENTER>
05:55  yitz_: I usually do something like that. Will break if the command has 's
05:56  Eiler: i can even edit the command, do i just put a ' before it and a ' after it? and the add > file?
05:56  yitz_: And an echo
05:56  yitz_: # echo 'long command that you want to save' > file ; cat file
05:56  evalbot: yitz_: long command that you want to save
05:57  Eiler: ah works
06:01  MTecknology: !ls
06:01  greybot: Don't try to parse ls output. http://mywiki.wooledge.org/ParsingLs
06:03  MTecknology: So... I want to get a list of all file names in a directory without the base name.. I was using foo=$(ls /path/to/dir/*) and getting half way there - but I know that's a bad way to do even that much
06:04  asasfas: hi quick qustion
06:04  asasfas: does uniq tempfile > temp, remove all duplicate lines in tempfile and puts uniq lines in temp?
06:05  \malex\: asasfas: does it?
06:05  asasfas: no
06:06  yitz_: MTecknology: cd path ; files=(*)
06:07  yitz_: asasfas: uniq only works on sorted data
06:07  \malex\: asasfas: that's because uniq only works on sorted files (sort of)
06:07  \malex\: there are some nifty applications of uniq for unsorted files
06:07  yitz_: !uniq
06:07  greybot: uniq is a utility for removing or reporting repeated lines. uniq will only work effectively with sorted input (sort | uniq). awk '!s[$0]++' is an order-insensitive alternative.
06:08  Ganymede: Hello, I'm having a bit of difficulty looping through the words in a string variable: export LETTERS="a b c"; for i in $LETTERS; do echo "$i"; done. How should I ask bash to interpret this such that it enters the loop once with $i = a, once with $i = b, and once with $i = c?
06:09  yitz_: # letters=(a b c) ; for i in "${letters[@]}" ; do printf "[%c] " ; done ; echo
06:09  evalbot: yitz_: [] [] []
06:09  yitz_: # letters=(a b c) ; for i in "${letters[@]}" ; do printf "[%c] " "$i"; done ; echo
06:09  evalbot: yitz_: [a] [b] [c]
06:10  Ganymede: Hmm...that actually makes a lot more sense then passing them in as a string...unfortunately, the code I'm modifying already assuming that the list is given in a string format so I suppose I'll to do some re-writing...
06:10  Ganymede: Thanks, yitz_.
06:11  MTecknology: yitz_: is there any way to do that without cd?
06:11  TheBonsai: y0
06:12  yitz_: y1
06:12  yitz_: MTecknology: Get the full path and use !pe to remove the base
06:13  MTecknology: yitz_: I'd need a loop then?
06:14  yitz_: I think pe can be ran against an array?
06:14 --- masterhumper is now known as sejo
06:14  yitz_: ${parameter#word} -> If parameter is an array variable subscripted with @ or *, the pattern removal  operation  is applied to each member of the array in turn, and the expansion is the resultant list.
06:16  MTecknology: # foo=$(ls /var/*); echo $foo
06:16  evalbot: MTecknology: ls: cannot access /var/*: No such file or directory
06:16  MTecknology: # ls /
06:16  evalbot: MTecknology: bin  dev  etc  lib  proc  root	tmp
06:16  MTecknology: # foo=$(ls /etc/*); echo $foo
06:16  evalbot: MTecknology: /etc/fstab /etc/group /etc/inputrc /etc/inputrc~ /etc/mtab /etc/passwd /etc/profile
06:18  TheBonsai: # foo=(/etc/*); echo "${foo[@]##*/}"
06:18  evalbot: TheBonsai: fstab group inputrc inputrc~ mtab passwd profile
06:18  MTecknology: that's a lot nicer than what I was coming up with :P
06:24 --- emma is now known as em
06:29  MTecknology: # foo=(/etc/*); foo="${foo[@]##*/}"; echo "$foo"
06:29  evalbot: MTecknology: fstab group inputrc inputrc~ mtab passwd profile
06:29  MTecknology: # dir="/etc"; foo=($dir/*); foo="${foo[@]##*/}"; echo "$foo"
06:29  evalbot: MTecknology: fstab group inputrc inputrc~ mtab passwd profile
06:29  MTecknology: hm...
06:30  yitz_: # dir="/etc"; foo=($dir/*); foo="${foo[@]#$dir}"; echo "$foo"
06:30  evalbot: yitz_: /fstab /group /inputrc /inputrc~ /mtab /passwd /profile
06:30  yitz_: # dir="/etc/"; foo=($dir/*); foo="${foo[@]#$dir}"; echo "$foo"
06:30  evalbot: yitz_: /fstab /group /inputrc /inputrc~ /mtab /passwd /profile
06:30  yitz_: # dir="/etc/"; foo=($dir*); foo="${foo[@]#$dir}"; echo "$foo"
06:30  evalbot: yitz_: fstab group inputrc inputrc~ mtab passwd profile
06:33  asasfas: anyone have a moment to help me fix my infinite recursion problem? :0
06:34  yitz_: !ask > asasfas
06:34  greybot: asasfas: You need not ask permission to ask a question. Just ask and be patient. http://mywiki.wooledge.org/NetEtiquette
06:35  asasfas: god im embarassed to ask
06:37  guampa: i can't help you with your embarrasment, but i can try with your problem if you expose it
06:38  asasfas: im trying to generate a list of links with curl, i start off with an initial url find all of the links and save the to a file, then I read the file line by line, if the line has the same prefix of the initial arguement of the script i curl through that grabbing links and appending to the same file, the problem is its an infinite loop and im not sure what im doing wrong
06:38  asasfas: heres my script
06:38  asasfas: http://pastebin.com/6nACPf4p
06:39  MTecknology: yitz_: this comm thing is breaking my mind :P - I feel like it's simple and makes sense - yet I'm confused .. I think I get it, then I realize what in my head was intersection, was actually substraction
06:39  \malex\: asasfas: use wget. it has recursive downloading
06:39  asasfas: yes im aware of that, however im trying to learn recursion in bash
06:39  asasfas: :)
06:40  yitz_: Web crawling isn't a good shell-recursion problem to learn on
06:40  tsolox: i have MYSTUFF='stuff' inside my .bash_profile. This variable is not exported so why is each terminal that i open can see this variable?
06:40  yitz_: MTecknology: What are you doing?
06:40  asasfas: yes im aware
06:41  yitz_: tsolox: Is MYSTUFF defined/exported elsewhere?
06:41  tsolox: yitz_: no
06:41  MTecknology: yitz_: I have two file lists in a variable - Right now I'm trying to figure out what is the same between the two lists.. comm -12 <(echo $list_one) <(echo $list_two) is what I tried
06:42  yitz_: tsolox: The profile is executed in login shells, so it doesn't need to be executed to be visible in the login shell
06:43  tsolox: yitz_: this seems to be contrary to common sense..
06:43  yitz_: tsolox: run 'bash' and see if it's still there
06:43  yitz_: tsolox: "When  bash  is  invoked as an interactive login shell, or as a non-interactive shell with the --login option, it first reads and executes commands from the file /etc/profile, if that file exists.  After reading that file, it looks for ~/.bash_profile"...
06:44  tsolox: yitz_: it's no longer there..but still, why is it visible from the terminal?
06:44  yitz_: The first shell is a login shell. The profile gets sourced/executed in it
06:44  asasfas: sigh
06:44  yitz_: MTecknology: #evalbot ?
06:44  tsolox: yitz_: this is no longer the log-in shell..
06:45  tsolox: yitz_: its another shell that i just open
06:46  yitz_: I put "testvar=blah" in my profile. Logged in and it was defined. Ran bash to open a subshell and it wasn't there. Either you got an export somewhere or you're in a shell that sources the profile
06:47  yitz_: MTecknology: echo puts them all on one line. comm deals with lines. Try listA="a b c d" ; listB="c d e f" ; comm -12 <(printf "%s\n" $listA) <(printf "%s\n" $listB)
06:49  MTecknology: # f1=(/etc/*); f2=(/etc/p*); f1="${f1[@]##*/}"; f2="${f2[@]##*/}"; comm -12 <(printf "%s\n" $f1) <(printf "%s\n" $f2)
06:49  evalbot: MTecknology: bash: comm: command not found
06:50  MTecknology: yitz_: perfect :D
06:51  asasfas: hm ok
06:51  asasfas: i figured out my problem
06:54  MTecknology: AWESOME!!
06:54  tsolox: yitz_: open another terminal, not from the login shell. But, say, from the menu..
06:55  tsolox: yitz_: and you'll see the var is defined in that terminal
06:55  devendra: I want to set PATH in my solaris machine, I am using bash shell, where to go.
06:56  yitz_: Invoking a terminal emulator from this "menu" thing might count as a login shell. It might call bash -l
06:56  yitz_: Add an echo to your profile, tsolox
06:56  yitz_: devendra: export PATH="$PATH:/new/path"  in your ~/.bash_profile
06:57  devendra: yitz_, ok thanks
06:58  tsolox: yitz_: yeap..you're right..how do i not behave like this?
06:58  yitz_: Change the terminal behaviour
06:58  yitz_: gnome-terminal?
06:58  tsolox: yitz_: aterm
06:59  yitz_: You'll have to find the exec bash call somewhere and change the parameters
06:59  tsolox: yitz_: this is messing-up the logic i put inside .bash_profile
06:59  asasfas: ok i found the problem
06:59  asasfas: here
07:00  asasfas: the problem is im going to links ive already been too, so im saving them to a file called visited
07:00  asasfas: http://pastebin.com/GqTMzXk5
07:00  asasfas: too bad there arent sets in bash
07:00  yitz_: You can use a hash to store/check whether you visited a URL
07:01  yitz_: *associative array
07:01  asasfas: is there an example?
07:02  yitz_: 4# declare -A saw ; for i in gmail hotmail gmail yahoo ; do if ! [[ $saw[$i] ]] ; then echo "Visit $i
07:02  shbot: yitz_: Missing terminating quote, bracket or keyword
07:02  yitz_: 4# declare -A saw ; for i in gmail hotmail gmail yahoo ; do if ! [[ $saw[$i] ]] ; then echo "Visit $i" ; saw[$i]=1 ; done
07:02  shbot: yitz_: bash4: syntax error near unexpected token `done'
07:02  yitz_: 4# declare -A saw ; for i in gmail hotmail gmail yahoo ; do if ! [[ $saw[$i] ]] ; then echo "Visit $i" ; saw[$i]=1 ; fi ; done
07:02  shbot: yitz_: no output
07:02  yitz_: :(
07:03  yitz_: 4# declare -A saw ; for i in gmail hotmail gmail yahoo ; do if ! [[ ${saw[$i]} ]] ; then echo "Visit $i" ; saw[$i]=1 ; fi ; done
07:03  shbot: yitz_: Visit gmail
07:03  shbot: yitz_: Visit hotmail
07:03  shbot: yitz_: Visit yahoo
07:05  asasfas: how would I add to saw
07:05  asasfas: assuming i starts at 0
07:05  yitz_: saw[$i]=1
07:05  asasfas: $saw[$i]k
07:09  asasfas: like this
07:09  asasfas: http://pastebin.com/EeT9HdRe
07:11  yitz_: !ifgrep > asasfas
07:11  greybot: asasfas: if grep -q word "$file"; then blah blah; fi DO NOT use [[ or [ or ` or $() or any other crap. "if" expects a command. "grep" is a command. "[" is too. You don't need both, just the grep works because grep returns true (0) if a match is found, but not otherwise.
07:11  yitz_: !cfor > asasfas
07:11  greybot: asasfas: C-style for loop: for (( expr; expr; expr )); do COMMANDS; done # Each expr is done in a math context. Example: for ((i=1; i<=n; i++)); do echo "$i"; done
07:11  yitz_: !guide > asasfas
07:11  greybot: asasfas: http://mywiki.wooledge.org/BashGuide
07:11  yitz_: !array > asasfas
07:11  greybot: asasfas: An array maps numbers to strings. Bash 4 also has associative arrays (maps strings to strings). See http://mywiki.wooledge.org/BashSheet#Arrays
07:11  asasfas: sorry bad syntax
07:11  asasfas: here
07:11  asasfas: http://pastebin.com/uj8Rjma1
--- Log closed Wed Dec 01 08:03:39 2010
--- Log opened Wed Dec 01 08:03:58 2010
08:03 --- Users 508 nicks [0 ops, 0 halfops, 0 voices, 508 normal]
08:04 --- Weust`afk is now known as Weust`
08:04  \DSAFEW\: that's a good answer
08:05 --- Channel #bash was synced in 115 seconds
08:06  \DSAFEW\: well I'm sure jetole will demonstrate how the || and && operators work, and also some good style tips like $() and quoting variables
08:06  \DSAFEW\: !arrays
08:06  greybot: An array maps numbers to strings. Bash 4 also has associative arrays (maps strings to strings). See http://mywiki.wooledge.org/BashSheet#Arrays
08:07  asasfas: i hope so im kinda lost
08:07  asasfas: my original program kept going in circles
08:07  asasfas: it recurses but infinitely
08:11  dagni: blah
08:11  dagni: ;)
08:11  asasfas: hi
08:12  dagni: hello asasfas
08:13  dagni: what's the problem ,guys ?
08:13  dagni: the && and || ?
08:15  asasfas: i dunno appairently i dont know how to script and im a moron
08:15  asasfas: :P
08:15  dagni: you're not a moron, the only moron you can see on this chan is me, so, what is your real problem with scripting ? what's the issue ?
08:16  \DSAFEW\: http://pastebin.com/FezqeNxx supposed to be a function to check unique strings for a webcrawler
08:16  dagni: let me check
08:16  jetole: dagni: http://pastebin.com/FezqeNxx
08:17  jetole: ooh oops
08:18  asasfas: whats that :P
08:18  asasfas: thats what i wrote
08:18  jetole: asasfas: do you have bash 4 or higher?
08:18  jetole: asasfas: yeah dagni was asking wtf
08:19  asasfas: no bash 3.2.25
08:19  jetole: :(
08:19  jetole: associative variables would have been a nice way to check but oh well
08:19  jetole: er, associateive array names I mean
08:19  jetole: er associateive element names the array
08:20  jetole: I'm tired
08:20  jetole: for example you can do saw[cat]=1 then you can say if [[ "${saw[cat]}" ]]
08:21  asasfas: yea
08:22  asasfas: i dont understand why this has to be so hard its a relatively simple task which i cant code =/
08:25 --- Weust` is now known as Weust`afk
08:25  dagni: i don't understand why you have: if `echo $line | grep "${url}" 1>/dev/null 2>&1` instead of if [[ `echo $line | grep "${url}" 1>/dev/null 2>&1` ]], (double braces), don't know for what version of bash you made it but it doesn't work for me without braces, using bash 4.1 here...
08:25  dagni: do you have any syntax error or it's just the logic of that function that is problematic for you ?
08:25  jetole: asasfas: so you want $line added to $saw[] no matter what even if it exists in saw[] already?
08:26  Guest42825: hello
08:26  asasfas: oh yea thats a good point jetol
08:26  asasfas: e
08:26  asasfas: if it exists in saw already theres no point in adding it again
08:26  jetole: so only if it's not in there already then we add it
08:26  asasfas: yes
08:26  jetole: ok
08:27  dagni: mhrm
08:27  Guest42825: Im trying to figure out the best way to grab a bunch of images (.jpeg, .jpg .gif .bmp) from http forums
08:27  teamcoltra: is there anything wrong with this syntax wise? date=$((date +%N/10))
08:27  Guest42825: just one thread
08:27  dagni: Guest42825: curl and/or wget might come handy
08:27  dagni: ;)
08:28  Guest42825: yeah I was thinking wget
08:28  asasfas: wget
08:28  asasfas: now curl
08:29  teamcoltra: I keep getting the error: arithmetic expression: expecting primary
08:29  dagni: you will need to provide some options to wget, don't know exactly which ones, but if you're going to figure it out on your own then better to do it on other site, you might get banned for too many attempts, depend on the site and it's protection
08:30  dagni: teamcoltra: do you have `+` in your script ? or other arithmetic expression ?
08:30  teamcoltra: I hate to even suggest it asasfas but 4chan would be a good place to test it on -- since their pages are pretty basically formatted all their images are the same filetype (if I remember correctly) and they wont ban you for too many attempts
08:30  dagni: hehehe
08:30  teamcoltra: dagni, well there is the + before %N
08:31  Guest42825: like if I wanted to grab all .jpeg , .bmp , .gif files from the following urls http://www.foo.bar/page=$ (where $ is a number between 1-500) how would I do it?
08:31  asasfas: thanks jenole for trying man i appreciate it
08:31  asasfas: *jetole
08:31 --- Guest42825 is now known as JohnsonT
08:32  dagni: teamcoltra: can you show me the whole line ? :)
08:32  teamcoltra: I tried this to fix it: MATH1='date +%u%H%M%S%N%j%Y%U' (NEW LINE) UNIQUE=$(($MATH1/13))
08:32  jetole: asasfas: try this. I haven't tested it. http://pastebin.com/cE7M8fLQ
08:32  teamcoltra: neither work
08:33  teamcoltra: signature: 4: arithmetic expression: expecting primary: "date +%u%H%M%S%N%j%Y%U/13"
08:33  jetole: asasfas: pastebin some of your input file
08:33  jetole: oh I forgot to declare the array
08:33  jetole: declare -a saw
08:33  asasfas: jetole you want me to paste my entire script that may help
08:33  asasfas: :P
08:34  jetole: but yeah, asasfas, pastebin some of the file so I can try that
08:34  jetole: no
08:34  jetole: the quote3 file
08:34  jetole: and I guess the url I'm looking for
08:34  pgas: you don't really need to declare a simple array
08:34  asasfas: ok hold on jetole
08:34  jetole: pgas: no but I think ot
08:34  jetole: pgas: no but I think it's good coding practice
08:35  dagni: teamcoltra: why not MATH1=`date (..)` ?
08:35  jetole: pgas: but I may be wrong. I like it out of habbit with arrays unless I define the array initially with myarray=("item 1" "item 2" "item 3")
08:35  pgas: yes you need to put your date command inside $( ) (or ` `) so that it is executed
08:36  pgas: jetole: i'm just saying that it won't make the code work better. you might like to declare your variable
08:36  jetole: I hear ya
08:36  dagni: bash-4.1$ a=`date +%u%H%M%S%N%j%Y%U`;echo $a
08:36  dagni: 3083635280361688335201048
08:37  teamcoltra: yes that works... but when I try to put it into the math --- it doesn't work
08:37  asasfas: here
08:37  asasfas: jetole
08:37  asasfas: http://pastebin.com/t99qPUYc
08:37  dagni: teamcoltra: first switch '' to `` for MATH1
08:37  dagni: and see if it works
08:37  jetole: asasfas: k, I will give it a shot
08:38  teamcoltra: YAY I FOUND IT MATH1='date +%u%H%M%S%N%j%Y%U' UNIQUE=$(($($MATH1)/10))
08:38  jetole: asasfas: well I will edit that to work I guess. I mean they are all unique already then again thats easy enough to do with the file which I am going to add to the script and get rid of the check unique
08:39  pgas: teamcoltra: you don't need the intermediate variable
08:39  teamcoltra: ?
08:39  JohnsonT: wget -r -A jpg,jpeg,bmp,gif http://www.foo.bar/page=$ <---------where $ are pages 2-500
08:39  JohnsonT: im getting closer
08:39  JohnsonT: need some help tho
08:39  jetole: asasfas: let me ask you a question, do you just want a list of say, for example all URLs that contain robertkrule.com and you want it to be unique?
08:39  dagni: teamcoltra: another happy customer, that found the solution on its own, tho it's not perfect ;d
08:40  pgas: teamcoltra: unique=(( $(date +%u%H%M%S%N%j%Y%U) /10)) # also avoid all uppercase variables
08:40  asasfas: no
08:40  asasfas: heres what the program does
08:40  asasfas: one sec
08:40  jetole: asasfas: oh then I misunderstood what you want
08:40  jetole: asasfas: I think I only want to know what the function wants
08:40  jetole: well
08:40  teamcoltra: :P I find my solutions in scripting to be like my solutions with women... if its working... don't question it
08:40  teamcoltra: :P
08:40  jetole: nevermind, asasfas yeah, what does the program do?
08:41  asasfas: http://pastebin.com/c19YPPXR
08:43  asasfas: load a page on curl, get its links save to a file, go to everylink thats on the server and check to see if its file has links, etc... continue till theres no more links
08:43  asasfas: then list all of the links you found in a file and then check if they are valid, produce errors whatever, all im interested in is traversing the tree depth first for links
08:43  JohnsonT: I dont want that
08:43  teamcoltra: Okay new problem now: signature: 4: arithmetic expression: expecting EOF: "077511038/3" <= When the number doesn't divide evenly
08:44  JohnsonT: I want the 1 line bash command that will do just what I need it to do and nothing more =(
08:44  JohnsonT: wget -r -A jpg,jpeg,bmp,gif http://www.foo.bar/page=$ <---------where $ are pages 2-500
08:44  JohnsonT: I know im missing like maybe a total of 20 chars
08:44  JohnsonT: lol
08:44  jetole: asasfas: we can do this in bash but have you considered using mysql?
08:45  jetole: forget it. You can and I would but I would rather see this work
08:45  teamcoltra: Actually I am not sure, because I changed it to *3 (just for fun) and it still does it every once in a while
08:45  asasfas: yes you can do it in many other languages hehe
08:46  dagni: JohnsonT: i=2 ; while [ $i -lt 501 ]; do wget -r -A jpg,jpeg,bmp,gif http://www.foo.bar/page=$i ; sleep 0.2 ; let i+=1; done
08:46  jetole: asasfas: I have some ideas
08:46  jetole: give me a little bit
08:46  asasfas: sure man take your time
08:46  asasfas: thank you!
08:47  pgas: teamcoltra: number with a leadin 0 are interpreted as octal by bash
08:48  teamcoltra: Ah
08:48  teamcoltra: Well then I have a solution :D
08:49  pgas: 10#$(date ... ) or modify the date format
08:54  JohnsonT: dagni
08:54  JohnsonT: there is a & char in the url
08:54  JohnsonT: do I just put the entire url in quotes?
08:55 --- deavidsedice is now known as deavid
08:55  dagni: quote it or use \&
08:55  JohnsonT: awesome
09:10  asasfas: hm
09:25  asasfas: ...
09:28  toader: hi, could anybody help me here? http://dpaste.com/281827/
09:30  iaj: dagni: is there a good place to learn about that while construct... and the [ ] stuff?
09:32  asasfas: god im dying
09:32  asasfas: death
09:34  geirha: asasfas: You need that for a script?
09:36  geirha: !tests
09:36  greybot: In bash; consistently use [[ .. ]] to test strings or files and (( .. )) to test numbers or arithmetics. Do *NOT* use [ .. ] in bash, *only* in sh. See http://mywiki.wooledge.org/BashSheet#Tests
09:36  dagni: iaj: i bet it's all at http://mywiki.wooledge.org/ but i don't know the exact ! commands
09:36  dagni: o, you see, geirha is awake
09:36  dagni: ;D
09:36  asasfas: girha need what?
09:36  naquad: is there someway to make this sorter: for i in {1..10};do some command $i;done ? kind of {1..10}: some command $i ?
09:36  iaj: dagni: thank you :)
09:36  asasfas: jetole will come back soon :)
09:38  geirha: asasfas: Just asking, because you wouldn't use ps|grep in a script
09:38  geirha: !repeat > naquad
09:38  greybot: naquad: repeat() { local i n; n=$1; shift; for ((i=1; i<=n; i++)); do "$@"; done; }
09:38  naquad: geirha, hm, thats interesting. thank you
09:38  dagni: geirha: is there some list of !command that the bot recognize ?
09:39  geirha: naquad: with some minor modifications
09:39  Fatal: !help > dagni
09:39  greybot: dagni: I can do: !faq {number|string}, !pf {number|string}, !learn key value, !meta key, !forget key, !date. For help with Bash builtins, use "help command" in bash.
09:39  geirha: !factoids
09:39  greybot: You can see my factoid "database" on the web, at http://wooledge.org/~greybot/ (Actually, this is the metadata database, so you can see the deleted ones here as well as the active ones.)
09:39  dagni: ty ;)
09:40  toader: hi, could anybody help me http://dpaste.com/281829/
09:41  Fatal: toader: sure, what's the end goal here?
09:41  Fatal: toader: I can see you want to extract a argument, but why do you want to?
09:42  dagni: toader: ps -ef|grep python|awk '{print $3}'|head -1
09:42  dagni: ;d
09:43  dagni: if you want to assign it to variable then a=`(ps -ef|grep python|awk '{print $3}'|head -1)` still this is not accurate if you have more than one python process, etc, etc, so the Fatal's questions have sense
09:44  pgas: somehow I doubt he wants $3
09:44  geirha: !`
09:44  greybot: The backquote (`) is used in the old-style command substitution, e.g. foo=`command`. This syntax is deprecated in favor of foo=$(command). Backslash handling inside $() is less surprising, and $() is easier to nest. See http://mywiki.wooledge.org/BashFAQ/082
09:44  dagni: k :p
09:44  unfancy: how about pidof?
09:44  pgas: maybe if you had use ps -eoc command
09:44  naquad: geirha, in the end it resulted in something awful: repear 10 echo \$i <-- far from perfection. such thing should be shell construct
09:45  iaj: awk '{print $3}' is using what field delimiter?
09:45  unfancy:  
09:45  dagni: iaj: space, if no field delimiter is specified
09:45  pgas: transition from blank to non-blank
09:45  pgas: ie any number of space tabs
09:45  iaj: thanks guys:)
09:45  geirha: repeat() { local i n; n=$1; shift; for ((i=1; i<=n; i++)); do "$@" "$i"; done; }
09:46  dagni: invisible fields as delim ;D
09:46  Fatal: ps -C might be better to select commands, but I'd personally go with something like pgrep -fl datagenerator, but still don't know the real use case for that
09:53 --- studyurnm3 is now known as misnix
09:59  iaj: do "$@" "$i"  wouldn't that $@ contain the first argument $1 as well?
10:00  geirha: iaj: No, the shift removed the initial "$1"
10:00  iaj: geirha: weeehh... that's what its for =) thanks
10:01  geirha: iaj: Run this in an interactive shell:  help shift
10:01  geirha: Also try running help with no arguments.
10:10  huwenfeng: hi, i want to give variables a fix length,  i mean, like 3,  if i got a variable a=0, i want echo $a to show 000, and 1 to be 001,  how can i do this?
10:14  koala_man: !faq leading > huwenfeng
10:14  greybot: huwenfeng: http://mywiki.wooledge.org/BashFAQ/018 -- How can I use numbers with leading zeros in a loop, e.g. 01, 02?
10:20  SiegeX: !faq password
10:20  greybot: http://mywiki.wooledge.org/BashFAQ/069 -- I want to automate an ssh (or scp, or sftp) connection, but I don't know how to send the password....
10:41  luxman: hello
10:42  luxman: Any one can help me
10:42 --- zinger_ is now known as bzinger
10:45  bzinger: hello
10:46  bzinger: luxman: what problems you have?
10:48  danst__: cat file | grep smth -- newlines are present
10:48 --- Recon is now known as Guest92315
10:48  danst__: echo $(cat file) | grep smth -- newlines are not present
10:48  danst__: why?
10:50  go|dfish: danst__: wordsplitting occours
10:50  go|dfish: !ws
10:50  greybot: http://mywiki.wooledge.org/WordSplitting
10:50  poisonbit: grep is not involved
10:50  poisonbit: try   echo $(cat file)   Vs   echo "$(cat file)"
10:51  poisonbit: anyway why don't simply  "grep smth file"
10:51  danst__: poisonbit: I want to cat file once, and then grep the variable several times during the script execution process
10:51  danst__: it's faster
10:52  poisonbit: grep foo <<< "$file_content"
10:53  karthee: hi .. for i in {1..10}; do something; done;  .. how do I make this loop run not consider that 'something' is executed or not ?  every next loop waits for the something to complete the 'something' ..
10:53  danst__: thanks for quotation marks, that helped
10:53  poisonbit: danst__, also you don't need /bin/grep if content is in a variable:   [[ "$file_content" = *foo* ]] && echo hi
10:53  go|dfish: karthee: replace the ; (semi-colon) after something with &
10:53  krzie: do something & ; done
10:54  karthee: krzie:  aah ... i m a fool ..
10:54  krzie: then you can use wait later to be sure they finished
10:54  karthee: krzie: okay ..
10:54  karthee: thanks
10:54  krzie: yw
10:57  SiegeX: do something & done
10:57  SiegeX: # myfunc(){ echo "MYFUNC"; }; for i in {1..3}; do myfunc & done
10:57  evalbot: SiegeX: MYFUNC
10:57  evalbot: SiegeX: [1] 230
10:57  evalbot: SiegeX: etc... ( http://pastebin.com/jSFt5syG )
11:04 --- Unknown[OFF] is now known as Unknown[NF]
11:09 --- Damnshock2 is now known as Damnshock
11:11  jetole: asasfas: I'm not even a fraction of the way done with this script though I have to admit I am having fun writing it so far. Anyways. Since I'm doing this as a favor, I don't mind that it's not done but I have other stuff I need to work on for several hours tonight so here is what I have so far: http://pastebin.com/aXU67Z47. If you want to finish it up then by all means, go for it. If I were you I would read some docs about recursion and I have a couple ways ...
11:12  jetole: ... in my head of doing what you want but I'll maybe address that tomorrow night. Enjoy.
11:17  Fatal: anyone has a less insane variant of "does array foo contain the item bar?"; if ( for i in "${foo[@]}"; do [[ $i == $bar ]] && exit 0 ; done ); then echo foo contains $bar ; fi
11:19  geirha: !isin
11:19  greybot: Check whether a value is in an array: inarray() { local q=$1 e; shift; for e; do [[ $q = "$e" ]] && return; done; } # Usage: inarray "$value" "${array[@]}"
11:20  Fatal: thanks
11:20  Fatal: I wasn't too keen on my subshell abuse :)
11:20  pgas: you can use break instead of exit to get rid of the subshell
11:21 --- Weust`afk is now known as Weust`
11:22  Fatal: doh, yeah
11:24  SiegeX: # arr=( apple banana pear coconut strawberry orange mango ); [[ apple =~ ${arr[@]} ]] && echo IN
11:24  evalbot: SiegeX: no output
11:25  SiegeX: hmm, what did I do wrong there
11:26  SiegeX: oops, wrong order
11:26  SiegeX: # arr=( apple banana pear coconut strawberry orange mango ); [[ ${arr[@]} =~ apple ]] && echo IN
11:26  evalbot: SiegeX: IN
11:26  SiegeX: # arr=( apple banana pear coconut strawberry orange mango ); [[ ${arr[@]} =~ apples ]] && echo IN
11:26  evalbot: SiegeX: no output
11:26  pgas: also you should probably use * and it's not very robust
11:27  pgas: ie it will say in for "nut" which you might or might not want. you can make it a bit better adding spaces
11:28  SiegeX: ya, i was toying with that just now
11:28  SiegeX: was hoping \<apple\> would work
11:28  SiegeX: !@
11:28  SiegeX: !*
11:28  lhunath: you've changed the definition from "is element in set" to "is word in sentence"
11:29  lhunath: you cannot answer the former without a loop.
11:29  SiegeX: If the \< \> regex was there, I'm not so sure that would be true
11:30  lhunath: you've broken your array data by merging it all into a sentence.
11:30 --- Unknown[NF] is now known as Unknown[OFF]
11:30  lhunath: it is impossible for any operator, no matter how smart or powerful, to differentiate the elements.
11:31  SiegeX: ya, because the element could contain the word separator
11:31  lhunath: what makes you think \< \> should be able to tell the difference between "an apple" generated by an array ( "an" "apple" ) or one generated by an array ( "an apple" )
11:32  SiegeX: although I bet you could contrive something that uses NUL as the delimiter.
11:32  lhunath: don't worry; it's the mistake almost everybody makes.  just realize that the moment you put ${arr[@]} in a STRING context; you've already lost the ability to use its elements separately.
11:33  lhunath: [[ tests strings.  strings can't contain NULs.
11:33  lhunath: to test streams (which can contain NULs) you need either a while read loop or an external tool.
11:33  SiegeX: ya, was thinking the latter
11:34  avinashhm: hi, is there any way to list only hidden dirs .. ??
11:34  geirha: !dotglob
11:34  greybot: dotglob, if set, makes bash include filenames beginning with a '.' in the results of pathname expansion (shopt -s dotglob)
11:34  SiegeX: anyway, its an exercise if futility because it doesn't get you there any faster or more elegantly than a loop
11:34  lhunath: avinashhm: echo .*/
11:35  avinashhm: lhunath, thank you :-) .. .works great
11:36  geirha: ''shopt -s extglob dotglob''  and then  echo *(.*)/  will omit the . and ..
11:39  avinashhm: geirha, "shopt -s extglob" doesn't return anything ... its '0'
11:40  geirha: If you have bash4, you can use associative arrays. E.g.  declare -A assoc; for elem in "${array[@]}"; do assoc[$elem]=1; done.  if [[ ${assoc[$bar]} ]]; then ...
11:41  geirha: avinashhm: That means it enabled extglob
11:42  avinashhm: yep bash version is 4 ...  and  shopt -s returns its enabled .. more @ http://paste.ubuntu.com/538596/
11:42  geirha: avinashhm: The bash4/associative arrays was meant for SiegeX
11:43  lhunath: you don't need dotglob with .!(|.)/
11:43  geirha: # touch .file; mkdir .dir; echo .*
11:43  evalbot: geirha: . .. .dir .file
11:43  geirha: # touch .file; mkdir .dir; echo .*/
11:43  evalbot: geirha: ../ ./ .dir/
11:43  geirha: # touch .file; mkdir .dir; shopt -s dotglob; echo *(.*)/
11:43  evalbot: geirha: .dir/
11:44  geirha: (evalbot has extglob enabled by default)
11:44  Defi_: hi everyone, does anyone know of a syntax highlighter that can convert bash ascii console color codes to pretty html?
11:45  SiegeX: geirha: good call on the assoc array
11:47  geirha: Defi_: There's a perl module for it. Don't know about any commands.
11:47  Defi_: i just found a package called highlight that apparently supports ansi filtering and html output
11:48  suw: hello
11:48  AlexC_: morning
11:50  suw: I want to list processes with ps axu  but not the ones with cpu 0.0 or mem 0.0 - how can I do that?
11:50  AlexC_: I'm wanting to remove output from one command with values from another. Essentially I have 'ls -1 /etc/apache2/sites-available' and I want to remove those that exist in 'ls -1 /foo' from the output. Is this possible with Bash?
11:50  suw: cpu is column 3 and mem is column 4
11:50 --- Dad`_ is now known as Dad`
11:51  suw: AlexC_ - try using grep -v parameter - to remove whatever you want.
11:52  AlexC_: thanks, got it :)
11:53  erUSUL: !faq substraction
11:53  greybot: erUSUL: No matches found at http://mywiki.wooledge.org/BashFAQ
11:53  Bartzy: How can I read contents of a file into a variable, and then loop through the lines of the file ?
11:53  erUSUL: !faq 1
11:53  greybot: http://mywiki.wooledge.org/BashFAQ/001 -- How can I read a file (data stream, variable) line-by-line (and/or field-by-field)?
11:53  geirha: No no no no. Don't do ls | grep!
11:54  geirha: !extglob > AlexC_
11:54  greybot: AlexC_: "Extended globs" (shopt -s extglob) allow you to say things like "all files that do not end in .jpg". See http://mywiki.wooledge.org/glob
11:54  Bartzy: I have a file with lines like : "192.168.1.1 # My IP" I want to strip out all # and stay with the IP only, then iterate each IP (line)
11:54  AlexC_: geirha: how are globs going to work for this?
11:55  geirha: # touch {foo,bar,baz}{1,2}; echo *
11:55  evalbot: geirha: bar1 bar2 baz1 baz2 foo1 foo2
11:55  geirha: # touch {foo,bar,baz}{1,2}; echo !(*2)
11:55  evalbot: geirha: bar1 baz1 foo1
11:55  erUSUL: Bartzy: cut -d' ' -f1 < file | while read ip; do ... ; done
11:55  geirha: !ls
11:55  greybot: Don't try to parse ls output. http://mywiki.wooledge.org/ParsingLs
11:56  Defi_: sigh, the highlight package simply wraps the ansi color codes in html tags, but doesnt convert them to html colors :(
11:56  geirha: while read -r ip _; do ...; done < file
11:57  Bartzy: erUSUL: Thanks! That makes sense..  I can then do $my_ips = "$my_ips $ip" and then later: for $ip in "$my_ips" ?
11:57  AlexC_: geirha: I'm all up for learning a different way, though I can't see how I could do this in that way: ls -1 /etc/apache2/sites-available/ | grep "^[abc]" | grep -v mdproject | grep -vxF "$(sudo foobar list --cake)"
11:58  erUSUL: Bartzy: huh? have you read the faq 1 page?
11:58  Defi_: if anyone knows of any working syntax highligher that can convert ansi color codes to colored html tags, please lemme know :(
11:58  lhunath: write one.
11:59  Defi_: dont have time
11:59  Bartzy: erUSUL: Yes, I want to put all IPs in the file (lines) in a bash variable, so I can later iterate over that variable. Because I might iterate a few times, I don't want to read from the file each time.
11:59  lhunath: but you have time to nag us for one?
11:59  lhunath: get off your ass, it takes like 10 minutes.
11:59  Defi_: looking for a simple drop in solution, you cant tell me one doesnt exist
11:59  erUSUL: Bartzy: ok, then use mapfile on the cut output
11:59  geirha: AlexC_: What's foobar?
11:59  Defi_: no, but my boss would rather i leave it plain text, than waste time creating that
12:00  geirha: AlexC_: And what do you intend to do with the resulting filenames?
12:00  Bartzy: ErUSUL: THANKS! exactly what I was looking for...
12:00  AlexC_: geirha: just output them
12:00  Defi_: since everything i've found online so far does not work, asking if someone else knows of one here is my last option
12:01  lhunath: let's see if you're still asking/looking in 10 mins from now.
12:02  geirha: AlexC_: And what does foobar output?
12:02  erUSUL: Bartzy: maybe: my_ips=(); mapfile -t my_ips < <(cut -f1 -d' ' < file)
12:03  Bartzy: erUSUL : echo $my_ips gives me only the first line
12:04  erUSUL: !arrays
12:04  greybot: An array maps numbers to strings. Bash 4 also has associative arrays (maps strings to strings). See http://mywiki.wooledge.org/BashSheet#Arrays
12:04  AlexC_: geirha: same as `ls -1`
12:05  Bartzy: erUSUL: thanks. Is it possible to do what I need with simple lists ?
12:05  Bartzy: like $my_ips="first_ip second_ip third_ip"
12:06  erUSUL: Bartzy: why would you prefer the suboptimal solution ? what's wrong with working with the array you just got?
12:06  Bartzy: erUSUL: Because I'm running it in a firewall script that runs in if-pre-up.d and I don't know if it uses bash or not :|
12:08  erUSUL: Bartzy: then maybe it is better to red the ip's from the file each time?
12:09  geirha: AlexC_: I see, well a for-loop would be better, but if this is for interactive use only, I guess ls parsing is ok.
12:09  Bartzy: erUSUL: That was very stupid of me... the script shebang line is #!/bin/bash... so I think it's OK :) thanks for your help !
12:09  AlexC_: geirha: :) yep, purely to get a list of domains so I can copy/paste them
12:10  AlexC_: thanks for the help though
12:27 --- Weust` is now known as Weust`afk
--- Log closed Wed Dec 01 12:32:10 2010
--- Log opened Wed Dec 01 12:32:29 2010
12:32 --- Users 517 nicks [0 ops, 0 halfops, 0 voices, 517 normal]
12:34 --- Channel #bash was synced in 120 seconds
12:40 --- Damnshock2 is now known as Damnshock
12:44  hendry: http://debian.pastebin.com/L0yANbmH # i'm not sure how stdin works from a function
12:45 --- Unknown[OFF] is now known as Unknown[NF]
12:45  geirha: hendry: lose /dev/stdin
12:45  Fatal: # t () { cat ; echo bar ; } ; t <<<foo
12:45  evalbot: Fatal: foo
12:45  evalbot: Fatal: bar
12:50  snayder: what this command do? echo "User-Name=test,Password=mypass,Framed-Protocol=PPP " | /usr/local/bin/radclient localhost:1812 auth s3cr3t
12:52  pgas: it sends the string inside " " to the standard input of radclient
12:53  pgas: ie it tries to authenticate with the radius server running on the localhost
12:55  pgas: check with #freeradius if you need help with radclient
13:01  snayder: thanks very much
13:12 --- Damnshock2 is now known as damnshock
13:13 --- studyurnm3 is now known as misnix
13:33 --- mar77i_ is now known as mar77i
13:33  rhalff: how do I change a variable containing "some.ffpreset" to "some"
13:34  rhalff: I've tried cut, but that expects a file
13:34  pgas: var=${var%%.*}
13:34  pgas: !faq 100 > rhalff
13:34  greybot: rhalff: http://mywiki.wooledge.org/BashFAQ/100 -- How do I do string manipulations in bash?
13:34  rhalff: ok thanks a bunch pgas
13:42  Bartzy: why Process Substitution is needed ?
13:43  Bartzy: I don't quite understand the difference between that and normal piping ?
13:45  Riviera: Bartzy: echo "Today is $(date)."
13:45  Riviera: Bartzy: how would you do this with a pipe?
13:45  reuss: is it possible to set variables in a script, from another script which outputs a format simliar to what you could normally source with the source/. command?
13:45  pgas: <( ) not $( )
13:45  Riviera: ah
13:46  Riviera: Bartzy: sorry :)
13:47  pgas: Bartzy: 1) it can be used with commands that only use filenames and doesn't read from stdin 2) for things like comm or tee with 2 commands: tee >(sed ..) >(awk blah) comm <(sort file1) <(sort file2) 3) to avoid a subshell : while read ;.....done < <(command)
13:48  pgas: also maybe things like: exec > >(tee log) 2>&1
13:50  Bartzy: why Process Substitution is needed ?
13:50  Bartzy: I don't quite understand the difference between that and normal piping ?
13:50  pgas: Bartzy: 1) it can be used with commands that only use filenames and doesn't read from stdin 2) for things like comm or tee with 2 commands: tee >(sed ..) >(awk blah) comm <(sort file1) <(sort file2) 3) to avoid a subshell : while read ;.....done < <(command)
13:51  pgas: also maybe things like: exec > >(tee log) 2>&1
13:51  Bartzy: but I don't understand what it does ? It takes the output of the command and gives it to the command on the left as input ?
13:52  Bartzy: isn't that what's regular < & > do ?
13:52  pgas: it expands into a filename
13:52  pgas: # echo <(echo blah)
13:52  evalbot: pgas: /dev/fd/63
13:52  pgas: it's a lot like a named pipe
--- Log closed Wed Dec 01 13:56:45 2010
--- Log opened Wed Dec 01 13:57:34 2010
13:57 --- Users 528 nicks [0 ops, 0 halfops, 0 voices, 528 normal]
13:58  pgas: it's a lot like a pipe, but more flexible
13:58  geirha: Bartzy: Yes, bash runs ''echo blah'' in a subshell that has its stdout connected to /dev/fd/63 (or whichever's available at the time). It then replaces <(...) with /dev/fd/63, and then it runs ''cat /dev/fd/63''
13:58  pgas: you can do things that you cannot do with a pipe
13:59  pgas: instead of just connecting stdin and stdout, bash gives you a special file that you can use in various ways
13:59  geirha: cat can read from both stdin and one or more files, but that's not true for every command
14:01 --- Channel #bash was synced in 214 seconds
14:01  Bartzy: mapfile -t banned_ips < <(cut -f1 -d' ' < "$fw_dir/banned_ips.txt")
14:01  Bartzy: so why this is needed ? Why not just simple < (pipe) ?
14:01  Bartzy: because it's not a file ?
14:01  pgas: < (pipe) is not meaningful
14:01  Bartzy: meaning ?
14:02  pgas: meaning < (pipe) is not correct bash syntax
14:02  Bartzy: I can't do cut -f1 -d' ' "$fw_dir/banned_ips.txt" | mapfile -t banned_ips ? why do I need to pipe the file into cut ?
14:02  geirha: !faq disappear > Bartzy
14:02  greybot: Bartzy: http://mywiki.wooledge.org/BashFAQ/024 -- I set variables in a loop. Why do they suddenly disappear after the loop terminates? Or, why can't I pipe data to read?
14:02  Bartzy: pgas: So the line above is not valid ?
14:02  geirha: That FAQ explains why piping stuff to read or mapfile fails ^
14:02  pgas: Bartzy: you can do that with cut, but then mapfile runs in a subshell and the subshell cannot modify the parent shell
14:03  geirha: Bartzy: It's valid, it just won't do anything useful.
14:03  pgas: ie mapfile cannot set the variable in the parent shell
14:03  Bartzy: ohhh so banned_ips will be set in the subshell which immediately exists and I can't get the data ?
14:03  Bartzy: oh ok!
14:03  hendry: geirha: losing the /dev/stdin still makes the function get stuck if there is no stdin. that's my problemo
14:03  Bartzy: so bash somehow do this without the subshell when using process substitution ? It brings the data "back" to the regular shell ?
14:04  pgas: hendry: test if stdin is connected to a terminal
14:05  geirha: if [[ -t 0 ]]; then ...
14:05  pgas: hendry: if [ -t 0 ];then return;fi ...
14:05  Bartzy: it puts the 'cut' output into a temp magic 'fd' file, then feeding it into mapfile ?
14:05  pgas: Bartzy: correct
14:05  Bartzy: pgas: Cool, I understand now why it's needed. Thanks a lot!
14:05  pgas: Bartzy: it's also more flexible see my example with commm and tee above, you cannot do that with only a |
14:05  igustin: anybody with experience using Xdialog --editbox and it's UTF-8 output?
14:11  Bartzy: you can also do >() ??
14:11  Bartzy: write into the temp magic file ?
14:11  Fatal: hmm
14:12  Fatal: !inarray
14:12  greybot: Check whether a value is in an array: inarray() { local q=$1 e; shift; for e; do [[ $q = "$e" ]] && return; done; } # Usage: inarray "$value" "${array[@]}"
14:12  Fatal: that needs extending
14:12  pgas: Bartzy: yes
14:13  Fatal: inarray() { local q=$1 e; shift; (( $# )) && for e; do [[ $q = "$e" ]] && return; done; }, otherwise it'll return true on  inarray foo ""
14:13  Fatal: uhrm
14:15  Bartzy: pgas: So how that helps to using tee ?
14:16  Bartzy: also, I should do for ip in ${my_ips[@]}; do echo $file; done    or     file
14:16  Bartzy: sorry! meant to ask if I should quote ${my_ips[@]} or not...
14:16  geirha: Yes, always quote
14:16  Bartzy: because if not, if an element in the array will have space, it will get parsed ?
14:17  geirha: Fatal: Or just add  return 1  to the end of the function
14:18  Fatal: geirha: yah, didn't wrap my head around why my test didn't fail now when I was about to prove that that function was bad, :)
14:18  geirha: Bartzy: Indeed, if you omit the quotes, each element will be subject to wordsplitting
14:18  pgas: Bartzy: how do you send the output of cmd1 to cmd2 and to stdout?
14:18  Bartzy: geirha: This means that when doing something like - iptables -A INPUT -i $ext_if -j DROP, I need to quote $ext_if too ?
14:19  Bartzy: ofcourse $ext_if shouldn't have spaces, but just for safety ?
14:19  Fatal: # inarray() { local q=$1 e; shift; for e; do [[ $q = "$e" ]] && return; done; } ; inarray foo "" && echo yes1 ; inarray foo "${array[@]}" && echo yes2
14:19  evalbot: Fatal: yes2
14:20  geirha: Bartzy: Yes, for safety/consistency
14:20  Bartzy: thanks a lot.
14:20  Bartzy: geirha: but simple variable like foo=bar can just be used without quotes right ?
14:23  geirha: Bartzy: Yes, it doesn't do wordsplitting on assignments
14:24  Bartzy: geirha: So even foo=bar bar2 .. is fine ? Didn't know that...
14:26  simplechat: Hey guys, i'm just wondering what the s in srw-rw-rw- stands for?
14:27  geirha: Bartzy: No, there you need quotes
14:27  jsz`: simplechat, socket
14:27  geirha: Bartzy: But,  bar="string with spaces" foo=$bar  is fine
14:28  simplechat: thanks jsz`
14:28  Bartzy: geirha: thanks for the clarification...
14:30  jsz`: Bartzy, foo=bar\ bar2  or  foo='bar bar2'  or  foo="bar bar2"
14:37  Bartzy: Empty elements (lets say an empty line from mapfile) are not populated in an array ?
14:41 --- taylanub0 is now known as taylanub
14:43  geirha: Bartzy: right
14:43  geirha: mapfile "ignores" empty lines
14:43  Bartzy: so no need to do some grep -v '^$' before ?
14:44  Bartzy: ok, great thanks.
14:44  geirha: Bartzy: No wait, it does read empty lines
14:45  Bartzy: it doesn't ignore them ? That was I was experiencing..
14:45  Bartzy: was what*
14:45  geirha: 4# mapfile -t a <<< $'a\n\nb\n\n'; printf '[%s]' "${a[@]}"
14:45  shbot: geirha: [a][][b][][]
14:45  Bartzy: oh :|
14:46  Bartzy: so I'll just do mapfile -t my_ips < <(grep -v '^#' my_file.txt | grep -v '^$' | cut -f1 -d' ')
14:46  Bartzy: to ignore comments (starting with #) and empty lines...
14:47  geirha: array=(); while read -r var _; do [[ $var ]] && array+=("$var"); done < my_file.txt
14:48  geirha: array=(); while read -r var _; do [[ $var && $var != \#* ]] && array+=("$var"); done < my_file.txt
14:48  geirha: That should do what you want I think.
14:48  Bartzy: my line it working too I think
14:49  Bartzy: anyway to merge the two grep's into one ? :|
14:49  geirha: grep -v -e 'pattern1' -e 'pattern2' ...
14:49  Bartzy: oh cool
14:49  Bartzy: your solution is bash only, it's nicer
14:50  Bartzy: thanks.
14:50  Bartzy: what does the underscore means ? read the rest of the columns to something disposable ?
14:50  koala_man: Bartzy: it's used as a throwaway variable
14:50  Bartzy: ok
14:51  Bartzy: !faq 1
14:51  greybot: http://mywiki.wooledge.org/BashFAQ/001 -- How can I read a file (data stream, variable) line-by-line (and/or field-by-field)?
14:52  geirha: Bartzy: It should also be more efficient. Your grep|cut solution reads the file three times, the one I showed you reads it only once.
14:52  Bartzy: geirha: But I'm using pipes, it shouldn't read the actual file three times.
14:53  Bartzy: geirha: I'll use yours because it's nicer, doesn't require mapfile too... :)
14:53  geirha: No, but it iterates the content three times
14:53  Bartzy: yeah that's right.. :)
15:23  ribasushi: hi
15:24  ribasushi: is there a "negative wildcard" of sorts?
15:24  ribasushi: /foo*bar<not a number>
15:24  ribasushi: how would I do this?
15:24  lhunath: !extglob
15:24  greybot: "Extended globs" (shopt -s extglob) allow you to say things like "all files that do not end in .jpg". See http://mywiki.wooledge.org/glob
15:25  lhunath: "not a digit" is easy.  /foo*bar[^0-9]
15:25  lhunath: I suppose it also covers not a number.
15:26  Riviera: (only not the empty string)
15:26  lhunath: aye
15:39  ribasushi: hm
15:39  ribasushi: why does this fail: ls -l /dev/disk/by-id/ata*!(part[0-9])
15:41  geirha: Is extlgob enabled?
15:41  ribasushi: yes
15:41  geirha: What's the error?
15:41  ribasushi: geirha: no error, it doesn't exclude the partX results
15:42  ribasushi: geirha: if you have any linux - just run it
15:42  geirha: Ah, put the * inside
15:42  geirha: ata!(*part[0-9])
15:43  ribasushi: oooh neat
15:55  SuperG1134: Hi Guys
15:56  SuperG1134: A quick q - If I have a terminal open and run a bash script - If I close the terminal will the script continue running?
15:57 --- zinger_ is now known as bzinger
15:59  xxtjaxx:  /window 24
15:59  Bartzy: how can I unset an array ?
15:59  duper: any idea why CTRL-L shows ^L instead of redrawing my screen now?
16:00  duper: I'm connected to a Gentoo VM I have in Hyper-V with PuTTY
16:00  mDuff: SuperG1134, not if you don't do anything special (detach it, put it in a screen or tmux session, etc)
16:01  SuperG1134: thanks mDuff. Say I want to view that session when I come back after closing it. How would I do that
16:02  mDuff: SuperFlo, read the documentation for screen or tmux.
16:05  lhunath: Bartzy: tried 'unset'?
16:06 --- Unknown[NF] is now known as Unknown[OFF]
16:06  Bartzy: unset $arr
16:06  Bartzy: doesn't work
16:07  pgas: duper: maybe your shell is not bash. see what returns bind -p | grep clear
16:07  pgas: unset arr
16:07  lhunath: Bartzy: bash variables do not start with a dollar.
16:07  lhunath: duper: maybe your shell is in vi mode.
16:08  pgas: unset $arr <-$arr will be expaned to the first element of arr,ie if you have: "arr=(foo bar); unset $arr" bash will execute "unset foo"
16:09  lhunath: duper: what does ESC kkk do?
16:10  duper: hmm.. yah it is in vi mode
16:10  duper: set -o says so
16:10  duper: good call
16:15  doomgiver: hello
16:15  doomgiver: could someone help me out with some code?
16:16  SSL`: let's try
16:16  pgas: only if you ask a question
16:17  doomgiver: http://dpaste.com/281906/
16:17  doomgiver: how do i make it "richer", or more useful
16:17 --- Bersam1 is now known as Bersam
16:17  doomgiver: right now, it returns the details of a domain
16:18  doomgiver: any one got any ideas about expanding it further?
16:18  doomgiver: note:i'm quite new to linux
16:26  doomgiver: hello?
16:33 * mDuff tends to charge consulting fees for help with roadmap planning. "How can I do $foo", or "when I do $bar I expect $baz but I get $qux" are more along the lines of what he does for free.
16:34  mDuff: ...I mean, this is #bash, not #brainstorming
16:34  doomgiver: hmm, got a point there
16:35  doomgiver: well, i guess u ppl are more experienced than me in programming, so i thought u'd know more about this sort of thing
16:35  mDuff: doomgiver, ...that said, I would use "dig +short" rather than host | grep | head | awk
16:35  mDuff: (also, awk can do the work of both grep and head if you want it to)
16:36  doomgiver: dont know that much grep
16:36  mDuff: ...also, you're excluding domains like title9.com through your *[0-9]* test; is that really intentional?
16:36  mDuff: you mean "that much awk", I presume.
16:36  doomgiver: yes
16:36  doomgiver: sorry
16:36  doomgiver: *awk
16:36  doomgiver: mDuff, yes, im excluding numeric domains
16:37  doomgiver: just trying to keep it simple
16:37  mDuff: # host www.google.com | awk '/has add/ {print $4; exit}'
16:37  evalbot: mDuff: bash: host: command not found
16:37 * mDuff doesn't see the point of excluding any domain with a number in its name, but *shrug*.
16:37  doomgiver: host works.... shows 209.85.....
16:38  doomgiver: well, its supposed to be a simple program.... i dont know that much bash, so i took various bits of code from the net and put them together
16:39  doomgiver: this is just a small script, i dont need it to encompass everything.... i was just wondering if i cud add more functionality to it,
16:40  doomgiver: thank you, mDuff
16:42  Synthead: say I have an array, like this:
16:42  Synthead: # array=(things 1 2 3 neat awesome)
16:42  evalbot: Synthead: no output
16:43  Synthead: is there a way that I can "search" the array for its contents and get an index number, kind of like grep?  for example, "[commands] $array neat" would give me 4
16:45  ss0: !getopts
16:45  greybot: Tutorial: http://wiki.bash-hackers.org/howto/getopts_tutorial Examples: http://mywiki.wooledge.org/BashFAQ/035
16:46  Synthead: getopts?  how would that apply?
16:46  ss0: sorry wasn't in reference to you. was curious if they had a bot answer for it.
16:47  Synthead: oh,heheh
16:49  mDuff: # function get_index() { tgt=$1; shift; for ((n=0; n<$$; n++)); if [[ $tgt = "$1" ]]; then echo $n; fi; shift; done; }; array=( things 1 2 3 neat awesome ); get_index neat "${array[@]}"
16:49  evalbot: mDuff: bash: syntax error near unexpected token `if'
16:49  mDuff: ...bah
16:49  trifler: What does '$?' mean?
16:49  mDuff: # function get_index() { tgt=$1; shift; for ((n=0; n<$$; n++)); do if [[ $tgt = "$1" ]]; then echo $n; fi; shift; done; }; array=( things 1 2 3 neat awesome ); get_index neat "${array[@]}"
16:49  evalbot: mDuff: 4
16:49  mDuff: !$? > trifler
16:49  greybot: trifler: The special parameter ? (you use $? to expand it) contains the exit status of the previous command, an integer from 0 to 255 inclusive. In general, an exit status of 0 implies success (or "true") and non-zero implies failure ("false").
16:52  Synthead: mDuff: interesting, what is n<$$ for?
16:52  mDuff: oops
16:52  mDuff: that should have been $#
16:52  Synthead: mDuff: what's that for then? :)
16:52  mDuff: to stop iterating after going through the list
16:53  silkcom: i'm trying to write a bash script using the complete command to offer tab completion.  I have it working mostly, my question is it possible to pass a variable to the completion function from the complete call?  Because I want to use the same completion call for several similar functions
16:53  mDuff: !$#
16:53  greybot: the number of arguments, not counting $0
16:53  silkcom: (i can provide a pastie if it would help)
16:56  Synthead: mDuff: how does for ((n=0; n<$$; n++)); do work?  isn't for supposed to be more like "for a in 1 2 3; do true; done" ?
16:56  silkcom: http://pastie.org/1338611 <— there's a pastie to show my quesiton easier
16:57  Synthead: mDuff: or $#, rather :)
16:57  mDuff: Synthead, that style works like a C for loop
16:57  mDuff: !seq > Synthead
16:57  greybot: Synthead: seq(1) is a highly nonstandard external command used to count to 10 in silly Linux howtos. Use one of these instead: for x in {1..10} (bash3.x) or for ((x=1; x<=10; x++)) (bash 2.04+) or i=1; while [ $i -le 10 ]; do ...; i=$(($i+1)); done (ksh/POSIX)
16:59  Synthead: # echo ((x=1; x<=10; x++))
16:59  evalbot: Synthead: bash: syntax error near unexpected token `('
16:59  Synthead: # echo $((x=1; x<=10; x++))
16:59  evalbot: Synthead: bash: x=1; x<=10; x++: syntax error: invalid arithmetic operator (error token is "; x<=10; x++")
16:59  Bartzy: how can I make my script write something after every command ? there's some kind of set option that I remember ?
16:59  Bartzy: for debugging
17:01  Synthead: how does it work?
17:01  mDuff: Synthead, do you not know C or Java?
17:01 * mDuff tries to think of other languages using that same syntax for for loops
17:01  Synthead: mDuff: no, I'm very weak at both
17:01  mDuff: ...so, the first statement is the initializer, the second is the test (to determine whether to run through the loop again), the third is the increment
17:01  Synthead: wouldn't that make the aforementioned get stuck at 2 though?
17:02  mDuff: so the first piece gets run once, the second before each pass through the loop to decide whether to continue, the third after that pass.
17:02  mDuff: ...pardon?
17:02  mDuff: "get stuck at 2"?
17:02  Bushmills: Bartzy: PROMPT_COMMAND
17:03  mDuff: Synthead, run this at your local shell: set -x; for ((i=1;i<3;i++)); do :; done; set +x
17:03  mDuff: Synthead, ...that should make the flow control clear.
17:03  Bartzy: Bushmills: what ?
17:03  Bushmills: "(16:59:56) Bartzy: how can I make my script write something " ...
17:03  Bartzy: Bushmills: I want the script to give me the command that exited the script if using -e for example..
17:03 --- Unknown[OFF] is now known as Unknown[NF]
17:04  Bushmills: "the command that exited the script" means nothing to me
17:04  mDuff: Bartzy, use the ERR trap, not set -e
17:04  mDuff: Bartzy, ...and be sure you understand the associated pitfalls.
17:04  Fatal: Bushmills: PROMPT_COMMAND is for the interactive shell, not scripts
17:04  silkcom: anyone have experience with the complete command and can answer my question -> http://pastie.org/1338611
17:05  Bushmills: Fatal: i know. that's actually what i understood what he wanted first
17:05  Bartzy: mDuff: My problem is that I have some iptables ... commands in a script, and some of them returns errors.. I have no idea which returned errors :|
17:06  mDuff: Bartzy, ...you might find http://stackoverflow.com/questions/64786/error-handling-in-bash/185900#185900 interesting, btw
17:06  Bushmills: "write something after each command", ignored the "make my script" ...
17:06  mDuff: Bartzy, ...though in the immediate case, you _have_ used set -x to watch what's happening during execution, right?
17:06  Bartzy: mDuff: No. I will check what it does.
17:07  Bartzy: mDuff: Well. That was easy. Thanks a lot, exactly what I needed.
17:10  dotconf: How to find which all files are read by bash during startup, i mean is there a command version
17:10  erUSUL: !dotfiles
17:10  greybot: http://mywiki.wooledge.org/DotFiles or - for a technical explanation - the INVOCATION section of man bash.
17:13  dotconf: thnks
17:19 --- pyoor_ is now known as pyoor
17:52  naquad: is there any way to shift array? unset array[0] gives array with empty 0 element :(
17:52  duper: is there a way i can make CTRL-L still redraw my screen and still have vi mode enabled?
17:54  geirha: naquad: array=( "${array[@]:1}" )   assuming it's non-sparse
17:54  naquad: geirha, thank you
17:58  luxman: re
18:02  luxman: I'm trying to make an array is sent to a control variables one by one
18:03  geirha: You're going to have to explain that again.
18:05  geirha: !paste > luxman
18:05  greybot: luxman: Please don't waste our time by making us go to a pastebin just for a five-line snippet. Paste it in the channel. If you have a larger script that's showing problems, trim it down to the bare minimum size that still shows the problem. You'll probably fix it yourself once you do that.
18:06  geirha: luxman: *plonk*
18:06  luxman: hm
18:06  luxman: PV geirha
18:06  skered: In bash why do I get a permission denied if I '*****<return>' in a directory for all executable files?
18:07  skered: Keep in mind I'm not trying to really do this (execute all executable files but typing '*')
18:08  geirha: I'd expect to get a command not found
18:09  geirha: Unless the first file happens to be a builtin or command in PATH
18:14  skered: er lets assume PATH has "./" in it
18:14  geirha: Well, then it'll try to run the first file with all the other files as arguments
18:15  skered: er no that shouldn't matter
18:15  geirha: (Unless there's one that preceeds it in PATH)
18:15  skered: '*<return>' in a direcroty with an executable should try to run that execuable..
18:15  skered: PATH shouldn't matter
18:15  geirha: No, it shouldn't.
18:16  geirha: You're probably confusing globbing with tab-completion.
18:18  skered: er yeah I am... in ok PATH should matter
18:18  skered: because the shell will try to execute "file" not "./file"
18:18  skered: And bash looks at PATH for an executable called "file"
18:19  taylanub: # touch echo foo; *
18:19  evalbot: taylanub: foo
18:19  skered: # echo $PATH
18:19  evalbot: skered: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
18:20  skered: # echo pwd
18:20  evalbot: skered: pwd
18:42  cham: Hi all, i need help 'cause i'm going crazy to get pkts value from this output http://pastebin.com/a88cWDa3 .
18:42  cham: I'd like to have output parsed like inet_SSH-eth1_in.value $1 (where $1 is pkt value) (referred to line 6 for ex), but for every line. Can anyone help please?
18:44  geirha: !faq 1 > cham
18:44  greybot: cham: http://mywiki.wooledge.org/BashFAQ/001 -- How can I read a file (data stream, variable) line-by-line (and/or field-by-field)?
--- Log closed Thu Dec 02 15:16:28 2010
