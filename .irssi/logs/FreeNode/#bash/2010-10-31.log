--- Log opened Sun Oct 31 09:45:37 2010
--- Log closed Sun Oct 31 09:45:37 2010
--- Log opened Sun Oct 31 09:46:01 2010
09:46 --- Users 485 nicks [0 ops, 0 halfops, 0 voices, 485 normal]
09:47 --- Channel #bash was synced in 78 seconds
--- Log closed Sun Oct 31 09:59:46 2010
--- Log opened Sun Oct 31 12:10:14 2010
12:10 --- Users 506 nicks [0 ops, 0 halfops, 0 voices, 506 normal]
12:12 --- Channel #bash was synced in 170 seconds
--- Log closed Sun Oct 31 14:14:20 2010
--- Log opened Sun Oct 31 19:12:55 2010
19:12 --- Users 518 nicks [0 ops, 0 halfops, 0 voices, 518 normal]
19:14 --- Channel #bash was synced in 94 seconds
19:38  Jazbo: if i am trying to write a script to run a commandline program, is there a way to pass a variable to it? for example, normally if you run this program you enter the command, then it asks for user input, how do i pass a variable to it?
19:38  Jazbo: i'm not sure if that makes sense
--- Log closed Sun Oct 31 19:44:06 2010
--- Log opened Sun Oct 31 19:44:26 2010
19:44 --- Users 524 nicks [0 ops, 0 halfops, 0 voices, 524 normal]
19:44  grawity: Pick a different program? :D
19:44 * grawity installs bcrypt to take a look.
19:45  Jazbo: uhuh... would that syntax work for most programs though?
19:45  grawity: No, bcrypt uses stdin nicely
19:45 --- Channel #bash was synced in 86 seconds
19:45  grawity: So { echo "$pass"; echo "$pass"; } | bcrypt
19:45  grawity: or, hmm
19:46  grawity: no, that should work.
19:46  grawity: But <<<"text" can only be used once for a command, IIRC
19:47  Jazbo: ok
19:47 --- MuzerAway is now known as muzer
19:47  Jazbo: no luck with { echo "$pass"; echo "$pass"; } | bcrypt
19:47  grawity: "no luck" doesn't mean anything
19:47  Jazbo: sorry
19:48  grawity: Any specific error message or...?
19:48  Jazbo: it looks like the command isnt recognized by bcrypt
19:48  grawity: oh, and you were to supposed to fill the rest of the line. | bcrypt test.txt.bfe or whatever
19:48 * grawity usually prefers GPG.
19:49  Jazbo: grawity: duh... i should have known that
19:49  Jazbo: it works great now! lol
19:50  Jazbo: sorry about that, the things i miss sometimes...
19:51  Jazbo: grawity: do you know of a good basic bash tut?
19:51  Jazbo: i know some programming, but almost no bash
19:53  malorie: looks like I've found a work-around.
19:54  Jazbo: is there an elseif in bash?
19:54  grawity: Jazbo: elif
19:55  Jazbo: grawity: thanks, one more thing, is this valid syntax?
19:55  Jazbo: elif [ $action == "c" ]; then
19:55  grawity: Yes, but
19:56  grawity: either a) quote the variable: elif [ "$action" == "c" ]; then
19:56  grawity: or b) use elif [[ $action == "c" ]]; then
19:56  Jazbo: ok, thank you
19:56 * grawity wonders what are those "actions".
19:56  Jazbo: so basically variables should be quoted?
19:56  grawity: Jazbo: yes
19:56  Jazbo: o for open, c for close. just to make the file name right
19:57  grawity: Except in [[, case..in, right-hand side of assignments (var=$othervar), and ... I think those are all the exceptions in which quoting is not required
19:58  Jazbo: thanks, sometimes it helps to know other languages, but not always...
20:00  sn18: sometimes you may need to quote parameter expansions in [[
20:00  Jazbo: thanks a lot! the script works great now
20:01  malorie: so, does this still look "sane": http://ideone.com/UuC4r ?
20:13 --- Tekwon is now known as Tekwon23
20:13  Edong23: fuck it
20:13  Edong23: oops, sorry
20:16  Tekwon23: hi. i want my script do read a argument and detect if it is a mac address. does anyone know a way to check if an argument has the character ':' ? ;) thnk you
20:17  twkm: ''help test''
20:17  Tekwon23: ''help test''
20:18  grawity: ...
20:19  grawity: Tekwon23: [[ $arg =~ ^([0-9A-Fa-f]{2}:){5}[0-9A-Fa-f]{2}$ ]]
20:19  grawity: Tekwon23: (Which only accepts 6 byte Ethernet MAC addresses)
--- Log closed Sun Oct 31 20:24:39 2010
--- Log opened Sun Oct 31 20:25:01 2010
20:25 --- Users 528 nicks [0 ops, 0 halfops, 0 voices, 528 normal]
20:26 --- Channel #bash was synced in 85 seconds
20:27  Tekwon23: thank you grawity
20:27  Tekwon23: :D :D :D
20:28  Tekwon23: if works flawlessly
20:28  Tekwon23: :)))
20:31  barjac: Can anyone explain this please :- http://forum.mandriva.com/viewtopic.php?p=833335#833335
20:32  taylanub: barjac: you mean the [ "x$1" = "x" ] part?
20:32  taylanub: (let me tell you it might be considered rude to just give a link to a forum and type "explain please")
20:33  barjac: Yes but it's my post
20:33  grawity: Which isn't immediately obvious, nor is the specific question you are asking
20:34  taylanub: please tell us exactly what you want to know
20:34  grawity: ...if I recall correctly, the 'x' in [ "x$1" = "x" ] is to avoid issues in some (ba)sh versions in case $1 starts with a dash... might be wrong
20:34  barjac: No - but I will explain - slow typing here sorry
20:34  barjac: No it's not that bit - that's my script BTW
20:34  taylanub: rather some really ancient sh implementations, grawity. but basically yes
20:35  taylanub: barjac: you needn't that historic hack anymore. just [ "$foo" ]
20:35  barjac: It's the quoting of the "--urpmi-options
20:35  taylanub: though in bash, [[ ]] is encouraged...
20:36  taylanub: you also needn't "" in foo="$bar"
20:36  barjac: Ah - but greycat is always saying use quotes!
20:37  grawity: [[ and variable assignment are exceptions
20:37  barjac: Ah
20:37  taylanub: it's also useless in  case "$foo" in ..) ....
20:37  barjac: So what does the quoted version expand to that causes it to fail
20:38  sn18: barjac: what fails?
20:38  taylanub: that $1 might be something like '--foo --bar' which needs to be expanded
20:38  barjac: Sorry but you need to read it all - sorry
20:38  taylanub: it's a dirty thing to do though
20:38 * grawity thinks people should just start using arrays for $foo_options.
20:38  taylanub: (and i have to go right now...)
--- Log closed Sun Oct 31 20:45:00 2010
--- Log opened Sun Oct 31 20:45:24 2010
20:45 --- Users 528 nicks [0 ops, 0 halfops, 0 voices, 528 normal]
20:45  ManDay: thats easier than i thought, lol
20:45 --- bolt_ is now known as bolt
20:45  ManDay: ah wait, doesnt "cat" stand for concatenate?
20:45  ManDay: sorry for the dumb question then :>
20:46  sn18: barjac: use an array or at least set -f
20:46 --- Channel #bash was synced in 82 seconds
20:46  barjac: sn18:  but if I pass it an empty un-quoted parameter it's happy - I don't understand the difference
20:47  Tekwon23: i want to store one or more numbers in a variable. What is the best type of variable to use?
20:48  sn18: # unset a ; set -- "$a" ; echo $# ; set -- "${a[@]}" ; echo $#
20:48  evalbot: sn18: 1
20:48  evalbot: sn18: 0
20:48  Tekwon23: is it an array? how do i do it in bash?
20:49  sn18: barjac: ^^use an array
20:50  erUSUL: !faq 5
20:50  greybot: http://mywiki.wooledge.org/BashFAQ/005 -- How can I use array variables?
20:52  ManDay: is there something like a typical ending for bash scripts? is .sh common or is that shell only?
20:53  erUSUL: !.sh
20:53  greybot: Don't use extensions for your scripts. Executables shouldn't have extensions. Just like you run 'ls' instead of 'ls.elf', you should run 'myscript' or './myscript', not 'myscript.sh'. In any case, putting 'sh' extensions on *bash* scripts (which are *not* sh scripts) is retarded.
20:56  ManDay: thanks for the nice words
20:56  ManDay: ^^
20:56 * ManDay doesn't want to seem retarded
20:57  strull: don't feel offended. It was a bot's statement only
20:57  poisonbit: ManDay, it's a bot faq, not words refering to your person
20:57  barjac: sn18: I do use arrays - are you saying to use an array for parameters - if so how does this relate to the quotes question?
20:57  ManDay: I know, no offense taken - Hard to take offense in this channel anyway - I got used to being insulted and hurt here xD
20:58  strull: ok, then stop asking bloody foolish questions :)
20:58  erUSUL: ManDay: it is official channels stance on the question; i do not even fully agree with it ;P
20:58  ManDay: k :p
20:59  Tekwon23: noob question, what is the condition to check if an argument is a number...? :S thanks
21:00  Tekwon23: in a script
21:00  sn18: barjac: when you do set -- "$a" and $a is not set or is empty and the expansion is quoted you end up setting $1 but $1 is still empty
21:02  ManDay: maybe a not so stupid question:  i want to roff a document with includes, but i want to forgo the nasty includes in different stages of the process so i dont have to include different files for eqn tbl pic and roff itsself and so forth. so i wanted to just write the whole preamble in a separate file and always concatenate it to whatever document i wanted to roff. still with me? fine. now concatenating the
21:02  ManDay: "include" with the document is no problem -  a script would do it for me - with cat myinclude mydocument    -    the worry is, since groff turned roffing from pipes into CLI arguments i wouldnt know how to concatenate a file for groff (for a second, this being shell, assume there is no way to make groff read from stdin but only from a named file).  is it possible to make a temporary file which is not really
21:02  ManDay:  written to disk like a fifo, which can be filled up with a pipe and read out by a program like a normal file?
21:02  poisonbit: Tekwon23,
21:02  ManDay: maybe, however, its a just-as-stupid question - im prepared for whatever you will reply ^^
21:02  poisonbit: # set -- "a" "2"; for arg; do [[ $arg =~ ^[0-9]+ ]] && echo number || echo not; done
21:02  evalbot: poisonbit: not
21:02  evalbot: poisonbit: number
21:03  ManDay: did - you - follow - me?
21:04  Tekwon23: [[ $arg =~ ^[0-9]+ ]] is the condition ?
21:04  ManDay: s/filled up with a pipe/filled with redirectct
21:04  Tekwon23: to check if it is a number? ;)
21:04  poisonbit: Tekwon23, is one way to do it (there are more)
21:04  barjac: sn18: Thanks - having read your last  ten times - it has now sunk in! - Cheers :-)
21:08  ManDay: is it possible to *prepend* something to stdout? so a script gets abcdef as stdin by a pipe and pipes ghiabcdef on to another program?
21:09  grawity: #!/usr/bin/env bash
21:09  grawity: printf "ghi"; exec cat
21:10  grawity: echo "abc" | script == "ghiabc"
21:10  ManDay: ah! i see, thanks!
21:10  ManDay: wait...
21:11  Tekwon23: poisonbit, that was what i was lokking for. Thank you very much :)
21:11  ManDay: grawity: what that env for?
21:13  grawity: ManDay: I'm just used to it. The "env" command, when given one argument, treats it as a program name to look for in $PATH
21:13  grawity: ManDay: since normal #! requires an absolute location
21:13  ManDay: hm
21:14 * grawity now uses "#!/usr/bin/env python2" all the time, since it's /usr/bin/python2 on Arch, but $HOME/bin/python2 on other distros
21:14  ManDay: ah i remember having seen that trick
21:14  ManDay: i think its even documented somewhere that this is a usualy trick
21:16  twkm: hopefully it is also documented to avoid using it.
21:22  poisonbit: env is fine to low usage scripts, but if you launch say er... 1000 times a script with a direct sheebang and the same with other indirected using env...  the time sings..
21:22  ManDay: grawity: i think i found a simpler solution:
21:22  ManDay: # echo "abc" { echo "ghi"; cat }
21:22  evalbot: ManDay: abc { echo ghi
21:22  evalbot: ManDay: cat: }: No such file or directory
21:23  grawity: # echo "abc" | { echo "ghi"; cat; }
21:23  evalbot: grawity: ghi
21:23  evalbot: grawity: abc
21:23  ManDay: ah yeah thats what i meant
21:23  ManDay: :)
21:23 * grawity wonders if evalbot has /dev/tcp.
21:23  koala_man: I don't even know, but it doesn't have TCP support in the kernel
21:24  grawity: Nice, how does it use IRC then?
21:24  koala_man: it doesn't, the irc stuff is not virtualized. just the commands executed
21:25  grawity: And IRC<->interpreter? :o
21:26  koala_man: it executes qemu with a serial console on stdin/out. then it just echos the command and reads the returning values
21:27  poisonbit: # lsof -p "$$" | grep dev
21:27  evalbot: poisonbit: bash: lsof: command not found
21:27  poisonbit: eh
21:29  sarat: anyone know of a good command-line script to create digest emails from RSS feeds. I want to use such a script  in a cron job to create daily digests? Any help is appreciated.
21:32  poisonbit: sarat, I'm sorry I don't know of any, but that is the typicall task for perl/python/ruby etc instead of bash
21:32  krisfremen: sarat: rss2emal
21:33  krisfremen: rss2email*
21:33  sarat: understood, I was just wondering anyone had favorites
21:33  krisfremen: or was it rss2mail
21:33  sarat: I just found that: http://www.allthingsrss.com/rss2email/ , will give it a shot, thanks everyone
21:37  Kerrick: Is there some program that is like GNU merge, but can do directory trees?
21:40  ManDay: Does there happen to be a way to adress a file in the same directory as the script? I thought ${0##/} would return the directory the script is in but apparently $0 may contain a relative path
21:40  ManDay: *to address
21:40  Tramp_: !faq location > ManDay
21:40  greybot: ManDay: http://mywiki.wooledge.org/BashFAQ/028 -- How do I determine the location of my script?  I want to read some config files from the same place.
21:41 --- Tramp_ is now known as Tramp
21:42  ManDay: thanks, very helpful
21:43  Tramp: yw
21:47  ManDay: # test=abcde; echo ${test##c}
21:47  evalbot: ManDay: abcde
21:47  ManDay: im either getting stupider while trying to learn more or im too tired
21:48  ManDay: why does this not crop test?
21:49  ManDay: im sorry, i guess im too tired - i see my mistake
21:50  grawity: ManDay: # crops from beginning, % from end
21:51  ManDay: i just forgot that its requires a glob
21:52  ManDay: see thats what happens when every language uses its own kind of pattern matching... pcre, posix regex, php regex, vim regex, globs, eglobs
21:52  ManDay: you get confused :-/ (i do)
21:52  grawity: PHP uses PCRE
21:53  ManDay: grawity: it can
21:53  grawity: And POSIX extended through the deprecated ereg_*()
21:53  latenite: Hi folks, I try to change a directory the find finds: http://pastie.org/1262685 but it fails. Why??
21:53  grawity: vim uses POSIX standard, I think
21:53  ManDay: grawity: absolutly not
21:53  ManDay: (as for vim - you are right for php)
21:53  arg05-v01D3016: have a question
21:53  grawity: Ah well
21:53  arg05-v01D3016: is this correct? alias k="kill -s 9 `pidof $1`"
21:54  grawity: latenite: 'cd' is a built-in of every shell; it cannot be -exec'd since it would not affect your current shell process.
21:54  grawity: arg05-v01D3016: No, aliases don't take arguments
21:54  arg05-v01D3016: ok
21:54  grawity: arg05-v01D3016: k() { kill -9 $(pidof "$1"); }
21:54  grawity: arg05-v01D3016: or,
21:54  grawity: arg05-v01D3016: alias k="pkill -9"
21:54  arg05-v01D3016: ok
21:55  arg05-v01D3016: thanks
21:55  grawity: arg05-v01D3016: well, aliases _do_ take arguments in the sense that "k foo" would expand to "pkill -9 foo" above
21:55  grawity: arg05-v01D3016: but not $1/etc
21:55  latenite: grawity, oh ok.. so how would I change into that fouund path?
21:55  arg05-v01D3016: ok
21:56  grawity: latenite: cd "$(find . -type d -iname systemtree | sed 1q)"
21:56 * grawity added "|sed 1q" just in case 'find' outputs more than one result
21:57 * grawity remembers reading about how in early Unix "chdir" *was* a standalone executable
21:59  latenite: grawity, what does the sed q1 do?
21:59  grawity: q1 or 1q?
22:00  latenite: 1q
22:00  grawity: Prints the first line of the input and stops
22:00 * grawity couldn't find a "-maxresults" option in find
22:02  Tramp: GNU find has a -quit
22:03  latenite: grawity, thank you for your help :)
22:11 --- muzer is now known as Muzer
22:17  poisonbit: is there a way to emulate:  echo "$var" | od -t x1    using only bash builtins or arithmetic ?
22:21  twkm: /me chortles
22:22  poisonbit: twkm,  maybe I really don't understand what od does
22:22  grawity: What's important is *what do you want to do*
22:23  poisonbit: I've tried echo "$(( 0x${var} ))" but didn't worked
22:23  poisonbit: grawity, catch the ESC key
22:23  twkm: /me laughs harder
22:24 * zamabe can use the /me command correctly :3
22:24  zamabe: try /act?
22:25 * hunterm thought he was just being funny
22:26  twkm: perhaps he just wants to see me say i'm laughing even more.
22:27  zamabe: > insert ESC key :: ?
22:28  poisonbit: echo "$((0${var}))"  did it, thanks for the "help"
22:30  twkm: i find "catching" a character in a variable to be more clearly done with case or [[.
22:31  poisonbit: it's into a case, but ESC does not work as a, b, c, 1, 2, 3 etc
22:32  poisonbit: a case similar to the case in this code:  http://poisonbit.wordpress.com/2010/10/26/ttyshooter-did-you-ever-did-a-game-in-bash/
22:33 --- Muzer is now known as MuzerAway
22:34  twkm: no?  works for me.  oh well.
22:34  poisonbit: twkm, please, enlighten this poor duck
22:36  poisonbit: here is the case:  http://github.com/poisonbit/TTYshooter/blob/master/ttyshooter#L196   how do you catch ESC there like "z" or "q"... or adding another condition for $second (that is how it's working for me)
22:36  twkm: uh.  trick question?
22:36  twkm: read -n1 x && case $x in ^[) echo esacpe;; esac
22:36 --- MuzerAway is now known as Muzer
22:37  twkm: sorry, i don't visit shithub.
22:37  poisonbit: that has been the light... i was trying with a keycode table and not ^[
22:37  poisonbit: thank you very much
22:37  twkm: cool.
22:40  Oxy`: hi, im looking for command to cut a string and limit it to 10 chars if possible :)
22:41  yitz_: !cut > Oxy`
22:41  greybot: Oxy`: cut allows you to "[p]rint selected parts of lines from each FILE to standard output" based on a single char delimiter
22:41  yitz_: !pe > Oxy`
22:41  greybot: Oxy`: Parameter Expansion is the expansion of a parameter: "$foo", "$1". You can use it to perform string operations: "${file%.mp3}", "${0##*/}". Remember to *always* quote them. See http://mywiki.wooledge.org/BashSheet#Parameter_Operations
22:41  poisonbit: # var='0123456789abcd'; echo "${var:0:10}"
22:41  evalbot: poisonbit: 0123456789
22:43  Oxy`: nice guys, ty very much :D
22:55 --- netanel is now known as netsan
22:56  arg05-v01D3016: bb
22:59  kingsley: What's the name of that fun little command line utility that converts text into various big fake fonts, composed of ASCII line drawing characters?
22:59  likewhoa: figlet?
23:01  kingsley: likewhoa: Yes, that's it!
23:01  kingsley: likewhoa: Thank you.
23:17  Palace_Chan: how can i detect in an if statement whether two files are different? kinda like if [ diff file1 file2 ]; then bla; fi ?
23:18  yitz_: if cmp -s file1 file2 ; then
23:21  Palace_Chan: wow that works, i had never heard of cmp
23:21  Palace_Chan: thanks yitz_
23:23  yitz_: np
23:47  Oxy`: howt grep the special caracter ' in a string ? :o
23:51  poisonbit: echo "abc'def" | grep --color \'
23:51  poisonbit: or
23:51  poisonbit: echo "abc'def" | grep --color "'"
23:53  poisonbit: so... set -e exits 0 ... I could expect set -e to exit 1, but maybe i'm wrong
23:53  Oxy`: poisonbit: oops i was meaning sed and not grep >_<
23:54  poisonbit: Oxy`, echo "abc'def" | sed "s/'//"
23:54  BarkingFish: evening guys - i've never written a bash script before, and I need some advice.  I want to set a script up which I can touch whenever I need to strip out my ndiswrapper drivers, reinstall them from a specific place, reassign them, and start my network.  Any ideas?
23:54  BarkingFish: seriously, I am totally new.  Wouldn't even know where to start
23:54  Oxy`: poisonbit: ha thank you you know a lot :p
23:54  poisonbit: !guide
23:54  greybot: http://mywiki.wooledge.org/BashGuide
23:54  poisonbit: ^^^ BarkingFish
23:55  BarkingFish: thanks
23:55  poisonbit: to guide authors
23:55  poisonbit: :)
23:55  Oxy`: poisonbit: in the example you gave me, it delete the ', is that it ?
23:56  BarkingFish: I can immediately say, this looks complicated. Is there a simpler way of making the script without using bash notation?
23:56  poisonbit: Oxy`, yes
23:56  Oxy`: poisonbit: ok thanx
23:57  poisonbit: BarkingFish, paste the shell history lines, and add a "sheebang" (#!/bin/bash) as first line
23:58  BarkingFish: ok, cheers
23:58  poisonbit: if the commands are always the same, just paste them... if you don't plan to run the script in other hosts, there is no problem
23:58  BarkingFish: so can I do that as a text file, and just touch whenever I need to?
--- Log closed Mon Nov 01 00:00:11 2010
