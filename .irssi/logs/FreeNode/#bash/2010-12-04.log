--- Log opened Sat Dec 04 00:00:40 2010
00:10 --- KC is now known as Guest56472
00:11 --- Guest56472 is now known as Requia
00:11  Requia: Is there a way to get a command to run in all subfolders (it doesn't have a recursive option)
00:12  patrickw: requia: find
00:12  Guest62741: Hey, can anyone tell me how to have a bash script that calls another program, but if I kill the bash script, it will also stop the program it called
00:18  patrickw: Guest62741: you can use trap
00:19  patrickw: !trp
00:19  patrickw: !trap
00:19  greybot: If you want processes to communicate, the easiest way (besides a pipe) is to use signals. See: help trap <Enter>, man kill and man bash /SPECIAL PARAMETERS | http://mywiki.wooledge.org/ProcessManagement
00:19  Requia: Ok, I've got find to spit out a list of all the files I want, do i just pipe this into the command I'm using?
00:20  geirha: -exec command {} \;
00:20  geirha: !find
00:20  greybot: http://mywiki.wooledge.org/UsingFind
00:23  Requia: nifty
00:23  Requia: thanks
--- Log closed Sat Dec 04 12:46:32 2010
--- Log opened Sat Dec 04 12:46:42 2010
12:46 --- Users 521 nicks [0 ops, 0 halfops, 0 voices, 521 normal]
12:48 --- Channel #bash was synced in 126 seconds
12:54  mattcen: A bash script *does* have a current working directory, stored in the $PWD variable
12:55  mattcen: I think the working directory of a script executed via cron depends on the cron configuration.
12:55  mattcen: mr_daniel: ^
12:56  mattcen: Usually though, the home directory of the executing user is the most sane choice for a WD.
13:10  poisonbit: mr_daniel, if you need a working directory, valid the same for root than for users, I use to use mktemp  (with -d)
13:10  poisonbit: if you need a relative path to load external things to thje script, i use to use something relative to $0
13:10  poisonbit: evaluating if it starts by / or not
13:11  poisonbit: and as a note, cron use to use sh, not bash, unless you declare SHELL in /etc/crontab
13:47  mr_daniel: poisonbit: that would explain why the behavior of the bash script is *not* as I expected, thanks for pointing on that
14:02  slap_stick: hey does anyone know of a way to clear the contents of a file that a program has open without restarting the program, i just tried >stdout.log however it didn't do anything usually it would clear the contents also tried cat /dev/null > stdout.log which also did nothing so i'm out of ideas
14:03  Riviera: slap_stick: "didn't do anything"?
14:03  Riviera: slap_stick: the file was not "emptied"?
14:03  slap_stick: it's still 2g
14:03  slap_stick: nope
14:03  slap_stick: and still being appended to
14:04  slap_stick: i've never seen that behavior before
14:05  Riviera: slap_stick: try du on the file
14:05  Riviera: slap_stick: if du also shows 2g
14:05  Riviera: slap_stick: (assuming you checked with ls before)
14:06  slap_stick: yes i was ahh yeh
14:06  slap_stick: it's 1.6M
14:06  Riviera: slap_stick: restart the program :)
14:06  Riviera: or change its code :)
14:08  magyarlatin: Hello everyone
14:08  slap_stick: hm it's odd how it is reporting differently
14:10  slap_stick:  SIZE   NODE NAME
14:10  slap_stick: java    2503 jboss    1w   REG  253,1 2303912228 819725 stdout.log  for lsof
14:12  slap_stick: how is that possible? it's not a sparse file
14:13  Riviera: # dd of=file seek=$((2**30)) count=1 2> /dev/null <<< lala; printf 'output of ls: %s\n' "$(ls -lh | sed 1d)"; printf 'output of du: %s %s\n' $(du -h file)
14:13  evalbot: Riviera: output of ls: -rw-r--r-- 1 root root 513G Dec  4 13:13 file
14:13  evalbot: Riviera: output of du: 4.0K file
14:14  Riviera: slap_stick: why isn't it  a sparse file?
14:14  slap_stick: actually it appears it is
14:14  slap_stick: weird
14:14  slap_stick: i dont understand why it should just contain logs
14:15  Riviera: ls -lh file  instead of  ls -lh | sed 1d  ;-)
14:15  Riviera: (just btw, but nevermind that:)
14:15  Riviera: slap_stick: that's what i meant with "or change the program" :)
14:16  slap_stick: yeh
14:23  slap_stick: hm what is odd is that >stdout.log doesn't clear the sparse data?
14:26  Riviera: slap_stick: it does
14:27  Riviera: slap_stick: but the program probably seeks before writing, or something like that.
15:05  AlexC_: morning
15:06  AlexC_: I am dynamically generating arguments that I am going to pass to a command but I an wondering what the best way to do this is. When using arrays, is it possible to push an element onto the end of the array, without knowing the last index?
15:07  cthuluh: array+=("$arg")
15:07  cthuluh: !faq arrays > AlexC_
15:07  greybot: AlexC_: http://mywiki.wooledge.org/BashFAQ/006 -- How can I use variable variables (indirect variables, pointers, references) or associative arrays?
15:07  cthuluh: !faq complex > AlexC_
15:07  greybot: AlexC_: http://mywiki.wooledge.org/BashFAQ/050 -- I'm trying to put a command in a variable, but the complex cases always fail!
15:08  cthuluh: hmmm, the faq about "arrays" wasn't the one I expected
15:08  cthuluh: !arrays
15:08  greybot: An array maps numbers to strings. Bash 4 also has associative arrays (maps strings to strings). See http://mywiki.wooledge.org/BashSheet#Arrays
15:09  AlexC_: thanks cthuluh, some good info in here :)
15:35  hanibanaa: hi I want to grep for a patten like "aaa bbb ccc ddd" . But the spaces might be there or not. I mean something like "aaabbb cccddd" ; How should be the grep expression to include all states?
15:37  geirha: aaa.*bbb.*ccc.*ddd
15:52  hanibanaa: geirha: ok but how sepecify both existence and non-existence of a single character, I think such thing would be useful.
15:53 --- julian-toyfuera is now known as julian
15:53  geirha: huh?
16:03  erUSUL: aaa[:blank:]*bbb[:blank:]*ccc[:blank:]*ddd
16:09 --- Unknown[NF] is now known as Unknown[OFF]
16:11  cthuluh: erUSUL: [[:blank:]] rather ;)
16:11  erUSUL: cthuluh: correct ;P
16:11  cthuluh: hanibanaa: c*    where 'c' is your character. * means "zero or more"
16:11  cthuluh: !ere > hanibanaa
16:11  greybot: hanibanaa: Posix Extended Regular Expressions: http://www.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap09.html#tag_09_04
16:18  janis: hi guys!! in a pipeline progA | progB, how can I save progA 's exist status?
16:18  janis: and retrieve it in a variable/ does $? save progA's or progB's exist status?
16:18  janis: s/exist/exit/;s/\//;/
16:19  jmbcirc: !faq pipestatus
16:19  greybot: jmbcirc: No matches found at http://mywiki.wooledge.org/BashFAQ
16:19  jmbcirc: !pipestatus
16:19  greybot: bash: use the PIPESTATUS array, posix sh: see http://sdf.org/l/55 and http://pipestatus.sf.net
16:21  janis: many thanks jmbcirc !!! exactly what I needed!!
16:22  jmbcirc: nice!
16:31  duper: is that all pipestatus does?
16:31  duper: you'd think bash would provide that natively :/
16:32  erUSUL: duper: what is not native about a env variable automatically set for you ?
16:33  tmr: I guess he skipped text and went straight to urls.
16:33  erUSUL: i see
16:35  duper: erUSUL: yeah but that's just from the last process it wait()'d, you can't get that from any other process in the pipeline, no?
16:36  erUSUL: # ls | grep foo | cat ; printf "<%s> " ${PIPESTATUS[@]}
16:36  evalbot: erUSUL: <0> <1> <0>
16:37  erUSUL: # touch foo; ls | grep foo | cat > /dev/null ; printf "<%s> " ${PIPESTATUS[@]}
16:37  evalbot: erUSUL: <0> <0> <0>
16:37  duper: so what's the purpose of the code at pipestatus.sf.net then?
16:38  erUSUL: duper: posix sh does not have PIPESTATUS
16:38  duper: oic
16:40  duper: i was thinking strictly in terms of $?
16:50 --- slk` is now known as slick420
16:50 --- slick420 is now known as slkx
16:53 --- Unknown[OFF] is now known as Unknown[NF]
16:59  hacim: someone here came up with a brilliant bash/awk combo one-liner that tails a postfix log file and prints out the number of messages sent per second, when run under 'watch' was super useful
16:59  hacim: i managed to delete that accidentally
16:59  hacim: does anyone have that handy?
17:00  hacim: it basically tailed the postfix log, looked at the seconds field in the log entry and then counted the number of 'status=sent' lines that were reported in that particular second and then printed the messages/second rate
17:21  dman777: 6 find -iname "*.flac" -exec flac -t {} \;  how do i redirect the standard output to a text file?
17:23  erUSUL: dman777: add a >> file ?
17:26  dman777:  find -iname "*.flac" -exec flac -t {} \; >> /home/flac_test  doesn't work
17:26  dman777: for redirected standard output
17:28  erUSUL: dman777: find -iname "*.flac" -exec flac -t {} >> /home/flac_test \;
17:29  dman777: erUSUL: that does not work ether
17:31  erUSUL: dman777: i just tested. flac -t writtes to stderr not to stdout
17:45  dman777: ya, that is why it's back to my original question
17:49  afuentes: is there a way to know the numbers of the leds on my keyboard to use them with xset led? i tried from 1 to 32 and only one of them works
17:50  erUSUL: dman777: use 2>> instead of >>
17:50  erUSUL: !nabq > afuentes
17:50  greybot: afuentes: Not A Bash Question. Ask the channel that supports your software, hardware, or OS.
17:53  hanibanaa: cthuluh: yes I meant zero or one occurance; is this correct? c{0,1} as an extended regex.
17:55  tmr: hanibanaa, c?
17:56  hanibanaa: tmr: as an example.
17:57  tmr: hanibanaa, 'c?' as an answer.
17:59  hanibanaa: oh sorry! got that. perfect answer. thanks
18:08  ritztech: im trying .01518 to Equal -8.187282284   But i cant find out how to use LOG 10
18:10  taylanub: bash won't do that for you, certainly
18:10  ritztech: but if i try echo "l(0.1518)" | bc -l   I get   -1.88519141402060750039
18:11  ritztech: totally different number
18:11  taylanub: .01518 ( = 0.01518) or 0.1518 ?
18:16  ritztech: 0.1518
18:17  ritztech: and in Excel i have it set to LOG10(CELL) But im trying to throw it into bash
18:17  poisonbit: # perl -E 'say log(0.1518)/log(10)'
18:17  evalbot: poisonbit: bash: perl: command not found
18:18  poisonbit: -0.818728228440538
18:19  ritztech: is it possible to use perl in conjuction with a bash statment
18:20  poisonbit: log10 () { echo "$1" | perl -nE 'say log()/log(10)' ; }
18:20  ritztech: omg hardon ;) ive been on this for like 10 hrs
18:21  poisonbit: then use log10 "$number"
18:21  poisonbit: but maybe bc is more light than perl interpreter
18:22  taylanub: # log10 () { echo "l($1)/l(10)" | bc -l; };  log10 .1518
18:22  evalbot: taylanub: -.81872822844053844787
18:23  da3v: how does one suppress the output of kill?
18:23  da3v: kill 234 > /dev/null 2>&1 doesn't work
18:24  taylanub: that must work. it's probably the program being killed that says something
18:24  cthuluh: try { kill 234; } 2>/dev/null
18:25  da3v: nope
18:25  da3v: ./generate_table.sh: line 4:  6716 Terminated
18:25  da3v: one sec, I'll paste
18:26  cthuluh: ok. try disown, since it seems you have backgrounded the process you've killed
18:27  da3v: http://paste.pocoo.org/show/300291/
18:27  cthuluh: 4# sleep 4 & disown; kill $!
18:27  shbot: cthuluh: [1] 244
18:27  da3v: ah
18:28  da3v: ./generate_table.sh: line 19: disown: current: no such job
18:28  da3v: oh, my bad
18:28  da3v: have to disown immediately after backgrounding
18:28  da3v: works like a charm, thanks
18:33 --- jmbcirc is now known as Guest7188
18:33  b_jonas: hello, I'd like to ask if the following is a reasonable thing to do. I'd like to put a marker in my prompt to show when the locale is set to a utf-8 encoding one. Here's how I can test that in bash:
18:33  b_jonas: ENCODINGTEST_C=$'\xc3\xa9'; ENCODINGTEST_U=U; echo ${ENCODINGTEST_U:0:1==${#ENCODINGTEST_C}}
18:34  b_jonas: that prints "U" if it's a utf-8 encoding locale but nothing if it's a byte encoding locale. I can put that part after the echo in my prompt and then bash evaluates it each time.
18:34 --- Guest7188 is now known as juanmabc
18:34  b_jonas: (the two shell parameters required would be set permanently)
18:35 --- Yvemath is now known as Guest75580
18:36 --- Yvemath_ is now known as yvemath
18:37  b_jonas: though actually it's usually enough to compute this once in the bashrc
18:38  b_jonas: or maybe it isn't, I'm not sure
18:52  SiegeX: # echo "001,003" | awk -v RS=',' {print}; echo foo
18:52  evalbot: SiegeX: 001
18:52  evalbot: SiegeX: 003
18:52  evalbot: SiegeX: etc... ( http://pastebin.com/iYkPM2BV )
18:53  SiegeX: is there an easy way to get rid of the blank line that awk creates between 003 and foo?
18:53  SiegeX: i'm not even sure why its putting that newline there. It would make sense if '003' was '003,'
18:53  twkm: #awk?
18:54  geirha: Awk does not create the blank line, it just prints the one that's already in the file
18:55  Bushmills: # echo -n "001,003" | awk -v RS=',' {print}; echo foo
18:55  evalbot: Bushmills: 001
18:55  evalbot: Bushmills: 003
18:55  evalbot: Bushmills: foo
18:57  SiegeX: ahh, ewps
18:57  SiegeX: thanks
18:57  b_jonas: SiegeX: why don't you just  tr , \\n
18:58  geirha: That would be too easy! :P
18:59  SiegeX: ultimately I want \t$0\t
18:59  SiegeX: however going back to the newline.  data is actually comming from a file which will have a \n at the very end of it
19:00  geirha: tr ',\n' '\t'
19:00  b_jonas: SiegeX: alternately  awk -F, '{ for (i=1;i<=NF;i++) print $i }'
19:00  b_jonas: wait, what do you want ultimately?
19:01  b_jonas: SiegeX: awk normally strips the newline, but that's because that's what you use as the RS normally. if you set RS=, then it will treat newlines as an ordinary character
19:01  SiegeX: awk -v RS=, '{print "\t"$0"\t"}'  without the extra newline
19:02  rhalff: hi friends!
19:02  SiegeX: geirha: still need them to be in a list
19:02  b_jonas: if you have gnu sed, how about something like  sed 's/^/\t/;s/,/\t\n\t/g'
19:03  b_jonas: maybe not exactly that, but something similar
19:03  rhalff: why doesn't sed "s/\s+/:/g" do what I expect it to do ? \s+ being one or more spaces
19:03  b_jonas: but if you want to use awk, use the comma as a field separator instad of a record separator
19:03  geirha: SiegeX: awk -v 'RS=,|\n'
19:03  rhalff: here is my exact command: parted -s /dev/sda -- "unit Mb print" | grep "^ 1" | sed "s/\s+/:/g"
19:03  SiegeX: i went to awk because \n isn't POSIX in the replacment text of sed
19:03  b_jonas: like  awk -F, '{ for (i=1;i<=NF;i++) print "\t" $i "\t" }'
19:04  SiegeX: geirha: good call.
19:04  b_jonas: SiegeX: which awk are you using? BSD, mawk, gawk?
19:04  SiegeX: for-loop is a good option too
19:04  SiegeX: the latter
19:04  b_jonas: if you're using gawk then why do you worry about the gnu sed features?
19:04  b_jonas: just wondering
19:05 * rhalff hm odd this works "s/\s\+/:/g"
19:05  geirha: rhalff: basic regular expressions doesn't have \s or +, you can use [[:blank:]]\{1,\} instead.
19:05  b_jonas: anyway, there's also this which is quite simple and portable:  tr , \\n | sed $'s/^/\t/\ns/$/\t/'
19:06  SiegeX: b_jonas: because this script isn't meant to just run on my box
19:06  b_jonas: though you may want to change the $'' to literally writing the control characters in the apos
19:06  b_jonas: for older shells
19:14 --- juanmabc is now known as jmbcirc
19:20  rhalff: geirha, ok thanks, one of the options of grep could make it work (perl regexp etc..) ? "/\s\+/:/  does seem to work, although I don't know why :-)
19:21  geirha: non-standard extensions
19:37  da3v: I have a template file with placeholders like $(uname -a)
19:37  da3v: how do I ... "parse" it with bash and output to a file?
19:38  ritztech: log10 () { echo "$1" | perl -nE 'say log()/log(10)' ; }  it says Unrecognized switch: -E  (-h will show valid options).
19:39  erUSUL: !faq template
19:39  greybot: erUSUL: No matches found at http://mywiki.wooledge.org/BashFAQ
19:42  da3v: err
19:50 --- K3rmit is now known as k3rmit4
19:54  erUSUL: !template
19:54  greybot: http://mywiki.wooledge.org/TemplateFiles
20:04  ezzieyguywuf: http://fpaste.org/gyb2/ can anyone help me with this? I don't understand why, when I run this, the read command doesn't store the output of cat in the appropriate variables
20:06  erUSUL: !faq disappear
20:06  greybot: http://mywiki.wooledge.org/BashFAQ/024 -- I set variables in a loop. Why do they suddenly disappear after the loop terminates? Or, why can't I pipe data to read?
20:06  erUSUL: ezzieyguywuf: ^
20:07  ezzieyguywuf: erUSUL: I'll check it out. I don't have a loop though, and even the echo immedietley following the cat fails.
20:07  erUSUL: but you *do* pipe to read
20:07  ezzieyguywuf: ah I see.
20:08  ezzieyguywuf: maybe zsh has different behaviour, as running it straight in my zsh shell results in the expected results.
20:08  taylanub: zsh and bash are sure not very compatible in their default behaviour
20:08  ezzieyguywuf: I see.
20:08  ezzieyguywuf: good to know. I'll just use #!/bin/zsh for now :-P
20:09 * ezzieyguywuf = lazy.
20:09  taylanub: bash (and not only bash) executes all parts of a pipe in a subshell of its own
20:14 --- Recon is now known as r3c0n
20:15  TheBonsai: http://0xdeadbeef.info/stuff/vi.gif
20:16  ezzieyguywuf: in my bash script, I cd to a dir with a exec in it and then do ./executable_file I get an error that there is no such file or directory.
20:16  taylanub: you sure the cd doesn't happen in a subshell? you should probably show us the exact code
20:17  ezzieyguywuf: http://fpaste.org/ER1y/ exact code
20:19  taylanub: well, if ../runs/project1/xfoil_run30ms exists relative to the point where the script starts to execute, that must work
20:19  ezzieyguywuf: taylanub: thank you for your help. turns out I forgot the .py extension :-P
20:20  taylanub: heh
20:25  MyTallest: I'm working on a VT102 terminal emulator. I have noticed that it seems like other emulators are able to report their size in characters width/height. How is that done? I've tried sending ESC [ 9 ; h ; w t but that doesn't work.
20:44  tuborg: hi, do you know a command to print what is on a tty1 screen?
20:45  geirha: cat /dev/vcs1
20:49  tuborg: geirha: was that for me?
20:50  taylanub: tuborg: yes it was
20:50  tuborg: thank you, um, I don't have vcs1, but I know you're bang on
20:51  tuborg: I tried cat /dev/tty1 (as per 'my' knowledge bah")
20:54  tuborg: ok
20:55  tuborg: can i just ask what the /dev/vbi is?
20:56  tuborg: (gosh I wonder why I don't have a /dev/vcs1 - only 2,3,4,a0,a2,a3,a4)
20:57  tuborg: virtual console, video buffer???
20:59  tuborg: anyway I'm running puppylinux on usb and after a few session-saves my xorg.conf is getting fuffed
20:59  tuborg: geirha: thank you for pointing me to the /dev/vcs
21:10 --- emma is now known as em
21:24  arcsky: if i do "cat file " and the file got much text, i dont want it to go to new line i want it to go more left... hope you guys understand
21:29  trash: No.
21:32  ritztech: echo "$var1$var2"   I only see Var2  IS there a way to remove a Mystery line (i think it has a hidden newline in both and maybe thats why im only seeing Var2
21:34  pixie__: how am i able to navigate to my external harddrive? I know how to do it with my home folder......
21:36  jsz`: arcsky, what do you mean?
21:38  douggibb: exit
21:39  ritztech: is there a way to delete like a character that contains NEWLINE
21:39  ritztech: ?
21:40  ritztech: becasue i did a sed -2 so i took the last 2 characters from the line so im thinking when i put them in VARs it copied the new line character
21:41  Riviera: !pe > ritztech
21:41  greybot: ritztech: Parameter Expansion is the expansion of a parameter: "$foo", "$1". You can use it to perform string operations: "${file%.mp3}", "${0##*/}". Remember to *always* quote them. See http://mywiki.wooledge.org/BashSheet#Parameter_Operations
21:41  Riviera: ritztech: (Assuming you mean to remove newline characters from shell variables.)
21:41  ritztech: yea
21:41  ritztech: just not sure how the hek to do it
21:41  Riviera: ritztech: But, please tell me what a "sed -2" is.
21:42  ritztech: i need to combine them because there 2 hex characters  to convert to Dec which i already did
21:43  Riviera: ritztech: Okay, and what is the answer to my question?
21:43  ritztech: riviera I mean i did it with sed but it was confusing so i did it with awk
21:43  ritztech: | awk ' {print substr($0,9)}' )
21:43  Riviera: ritztech: aha, okay, thanks :)
21:43  Riviera: ritztech: "${var//$'\n'}"
21:43  ritztech: or awk '{ print substr( $0, length($0) - 2, length($0) ) } ')
21:43  ritztech:  but then that one was confusing
21:43  Riviera: ritztech: also, read the page given to you, the bot did not give you that link just out of boredom.
21:44  ritztech: im looking
21:44  Riviera: # var=$'one line\nanother line\na third line'; echo "You see, newlines removed: ${var//$'\n'}"
21:44  evalbot: Riviera: You see, newlines removed: one lineanother linea third line
21:44  Riviera: ritztech: yes, but *also don't ignore* the solution I gave you a few lines ago.
21:48  ritztech: unless can i do it in my awk above so its not there im trying to see how to pass var1=af var2=9f   to equal   af9f
21:48  ritztech: error token is "/$'\n'23//$'\n'"
21:48  Riviera: ritztech: Talking to you feels similar to how I imagine talking to a wall feels.
21:54  ritztech: var1=`echo "$rfhlvl" | sed -n 1p | ${var1//$'\n'}`
21:58  Riviera: ritztech: :)
21:59  Riviera: ritztech: parameter expansion is not a command
21:59  Riviera: ritztech: please, learn the basics first
22:04  ritztech: dam im getting fatter every day lol
22:04  rhalff: how can I force eval to return linefeeds ?
22:05  rhalff: want to make a function that executes a command line, so I will be able to dry-run my code
22:06  Riviera: commands exit with exit codes
22:06  Riviera: Which are integer numbers of a very limited range, and never line feeds.
22:07  rhalff: I want to make something like execute "ls -l" instead of just doing ls -l, the execute function should then just echo the line, if I want to dry run the code
22:08  Riviera: "echo the line"? Which line? "ls -l"?
22:09  rhalff: yeah or more obvious a command like "rm -rf", I want to put a wrapper function around that, so I can choose not to run that line for real.
22:09  Dereckson: Cd
22:09  Dereckson: Hi
22:10  Riviera: rhalff: this does not yet explain what you do mean with "make eval return linefeeds."
22:10  Dereckson: On tcsh, I use "source <file>" to read a configuration file which defines config, environment, etc. What's the syntax on bash?
22:10  rhalff: Riviera: when I run something like `eval ls -l` it will return one long line, instead of a list seperated by line feeds
22:10  Riviera: # touch file1; wr () { echo "$*"; }; we () { "$@"; }; wr ls -l; we ls -l
22:10  evalbot: Riviera: ls -l
22:10  evalbot: Riviera: total 0
22:10  evalbot: Riviera: -rw-r--r-- 1 root root 0 Dec  4 21:10 file1
22:11  Riviera: # eval 'echo line 1; echo line 2'
22:11  evalbot: Riviera: line 1
22:11  evalbot: Riviera: line 2
22:11  Riviera: # touch file1 file2; eval ls -l
22:11  evalbot: Riviera: total 0
22:11  evalbot: Riviera: -rw-r--r-- 1 root root 0 Dec  4 21:11 file1
22:11  evalbot: Riviera: -rw-r--r-- 1 root root 0 Dec  4 21:11 file2
22:11  Riviera: rhalff: no.
22:12  rhalff: # d=`eval "ls -l"`; echo $d
22:12  evalbot: rhalff: total 0
22:12  rhalff: hmz
22:12  Riviera: rhalff: echo "$d", not echo $d
22:12  rhalff: ah :) thanks
22:14  Dereckson: According http://www.unix.com/shell-programming-scripting/54347-bash-shell-exec-eval-source-looking-help-understand.html it's also source
22:14  Dereckson: Thank you.
22:32  arcsky: jsz`: there?
22:34  arcsky: http://pastebin.com/G1HzkfQU
22:34  arcsky: i want it in that way, it prints out the whole line and not in a new line
22:34  arcsky: maybe window to small
22:35  geirha: tr -d '\n' < file
22:37  arcsky: actually not that
22:43  arcsky: geirha: http://pastebin.com/iUBxbZZs i want when i do cat file i want 4 lines not 8
22:43  arcsky: full paths
22:46  itr8r: arcsky: thats strange
22:48  arcsky: itr8r: i cant get like that?
22:49  itr8r: arcsky: 'cat' should not be splitting up lines
22:50  itr8r: if a file has 4 lines, you will get 4 lines
22:50  itr8r: if the lines are long, they will wrap around in the terminal
22:52  arcsky: ok
22:52  rhalff: how to do calculations with floats ? $(( $start - $x )) fails if $x is a float
22:52  taylanub: !float
22:52  greybot: for floating point numbers see !faq 22
22:52  taylanub: !faq 22
22:52  greybot: http://mywiki.wooledge.org/BashFAQ/022 -- How can I calculate with floating point numbers instead of just integers?
22:52  rhalff: thanks bot
22:55  skered: find -ls output isn't standard is it?
22:58  geirha: it isn't. GNU extension.
22:59  skered: Is ls' -S portable?
23:01  twkm: unlikely.
23:01  taylanub: ''man 1p ls''
23:01  taylanub: !posix > or this
23:01  greybot: or this: The POSIX standard defines what any modern unix should supply. Sticking to the commands and options in http://www.opengroup.org/onlinepubs/9699919799/utilities/contents.html will do wonders for the portability of your scripts.
23:03  edgy: hi, I hve a list of IP's in a file and I want to check the country of each. I tried cat ip_addresses |xargs -t geoiplookup but tihs way all ip's would be passed as on parameter and it won't work
23:03  taylanub: well, my ls(1p) mentions no -S, but here: http://www.opengroup.org/onlinepubs/9699919799/utilities/ls.html
23:03  taylanub: !faq 1 > edgy
23:03  greybot: edgy: http://mywiki.wooledge.org/BashFAQ/001 -- How can I read a file (data stream, variable) line-by-line (and/or field-by-field)?
23:06  edgy: taylanub: thanks a lot man ;)
23:10  oskie: is there a command that does absolutely nothing - just sits there accepting no input, outputting nothing?
23:12  oskie: only thing I can come up with is 'sleep ...'
23:12  oskie: apparently gnu coreutils support 'sleep inf' :)
23:16  mar77i: # while true; do :; done
23:16  evalbot: mar77i: no output within the time limit
23:17  doki_pen: how can I say while [[ $i -lt 10 ]] && (not ping myhost) ?
23:17  mar77i: oskie: I can't imagine this could do any good :P
23:18  mar77i: !for > doki_pen
23:18  greybot: doki_pen: The ''for var in ..'' statement iterates over arguments. for ((i=0; i < n; i++)) iterates over a numeric range. To iterate over filenames, use ''for file in [glob]''. Do *NOT* do ''for foo in `cat,ls,find,...`'': Here, for will iterate over resulting WORDS, NOT the "filenames", or "lines" that the command outputs.
23:18  doki_pen: mar77i: thanks
23:19  doki_pen: mar77i: beautiful
23:20  mar77i: c-style forloops make sense for bash :)
23:20  doki_pen: how do I break out of the loop when my command returns 0?
23:21  mar77i: doki_pen: btw, look at ping -c :P
23:21  doki_pen: basically, I'm trying to ping a box,
23:21  doki_pen: doki_pen: haha
23:21  doki_pen: you got me
23:22  doki_pen: mar77i: oh, but I'm waiting for my DHCP, so that won't work
23:22  mar77i: j=0; for i in 0 0 0 0 1 0; do (( j++ )); (( $i )) && break; done; echo $j
23:22  mar77i: # j=0; for i in 0 0 0 0 1 0; do (( j++ )); (( $i )) && break; done; echo $j
23:22  evalbot: mar77i: 5
23:23  doki_pen: alright, so it is break, I must have some stupidity in my code
23:25  doki_pen: forgot -c1
23:25  mar77i: bash is one of the most misunderstood programming languages... many bash usages remind me of http://xkcd.com/763/
23:26  doki_pen: I ended up with this: for ((i=0;i<10;i++)); do ping -c1 jacos > /dev/null 2>&1 && break; printf "."; sleep 1; done
23:27  doki_pen: look ok?
23:29  mar77i: yeah. does it work? try &> /dev/null, then.
23:30  mar77i: oh, you have a 2>&1 there.
23:30  doki_pen: mar77i: yeah, works
23:30  doki_pen: mar77i: is &> /dev/null == > /dev/null 2>&1
23:30  mar77i: ack
23:31  doki_pen: haha
23:31  doki_pen: I've never seen &> /dev/null, is that all streams?
23:32  Riviera: no
23:32  Riviera: !&>
23:32  greybot: &> is a bash-specific feature, unportable to other shells. command &> file is equivalent to command > file 2>&1. There is no &>> until Bash4. Use command >> file 2>&1 instead.
23:33  doki_pen: thanks for the tip guys, but I guess my way is more portable :(
23:33  doki_pen: that saves some keystrokes on oneliners though
23:33  mar77i: saves you ...4 bytes. it's bash. http://mywiki.wooledge.org/BashFAQ/014 ... use #!/bin/bash on bash scripts, or stick to the posix way :)
23:36  power: hi, ive a file with hundreds of lines like    'text1' => 'text2'  (a language file actualy), and i want to change all lines to 'text1' => 'text1' (ie english to english)
23:37  power: i couldnt think of a script to do that, any ideas
23:38  geirha: printf '%s\n' 'g/\(.*\) =>.*/s//\1 => \1/' w | ed -s file
23:39  geirha: Should work as long as there is no more than one " =>"
23:39  geirha: per line
23:39  power: no there is not, letme try thnks
23:39  power: erm,since this is sed, it should work in vim, right ?
23:40  geirha: It's not sed, it's ed.
23:40  geirha: You can do it with vim too of course.
23:40  geirha: !ed
23:40  greybot: ed is a command-based file editor. See http://bash-hackers.org/wiki/doku.php?id=howto:edit-ed - http://sdf.lonestar.org/index.cgi?tutorials/ed - http://wolfram.schneider.org/bsd/7thEdManVol2/edtut/edtut.pdf
23:41  power: geirha~ im happy to say that it worked perfect
23:41  power: ty
23:41  geirha: In vim you'd do   :%s/\(.*\) =>.*/\1 => \1/
23:44  kaddi: Hi, I'm working on a bash script in ubuntu. I have a twoliner I would like to convert in a one liner, but can't find out how to do so, although I'm pretty sure it must be possible. Bascially the two lines are: v= $(ls -l  | wc -l) and v=$(($v +1)). Can I somehow convert it into a working line similir to this: v=$(($((ls -l antwort* | wc -l))+1))  (this is broken)
23:45  kaddi:  v=$(($((ls -l | wc -l))+1))
23:45  Riviera: kaddi: v=$(($(ls -l | wc -l) + 1))
23:45  geirha: Though that's not how you count files
23:46  kaddi: thanks! :) Could you give me a short explanation as to why that one works and mine doesn't?
23:46  kaddi: geirha: how do you count them then?
23:46  geirha: f=(*); echo "${#f[@]}"
23:46  Riviera: kaddi: This is semantically broken too, because the amount of lines ls -l outputs is not necessarily the amount of files.
23:46  geirha: # touch file1 file2; f=(*); echo "${#f[@]} files"
23:46  evalbot: geirha: 2 files
23:47  geirha: Should enable nullglob for that though.
23:47  kaddi: yes, I am aware of this. Riviera :)
23:47  geirha: # shopt -s nullglob; f=(*); echo "${#f[@]} files"
23:47  evalbot: geirha: 0 files
23:48  Riviera: kaddi: good
23:48  Riviera: using find for this has the advantage that it's faster
23:48  Riviera: well.
23:48  Riviera: not necessarily, just nevermind. :)
23:49  geirha: kaddi: You really never want ls in a script.
23:49  kaddi: it's just for a small directory and for private use. So I know that all entries in ls will be files.
23:49  kaddi: I willd efinitely look into your example geirha :) It looks fascinating
23:51  geirha: Look at the Guide and FAQ in /topic. The guide teaches good practice, and the FAQ will likely answer most of your questions :)
23:51  geirha: And stay away from the guides at tldp.org if you want to stay sane
23:52  kaddi: point taken
23:52  kaddi: I still need my sanity tomorrow :p
23:53  Riviera: kaddi: it's not about only being files, it's about filenames containing newline characters, by the way.
23:53  Riviera: oh.
23:53  Riviera: kaddi: sorry. :)
23:53 --- mattux_ is now known as mattux
23:53  Riviera: you wanted to keep your sanity, nevermind what i said ;)
23:53  kaddi: you can add newline caracters into filenames? o.o that's cool :D (and a little insane)
23:54 --- [Nies] is now known as Nies
23:54  geirha: Every character except / and the null byte (\0) are allowed in filenames
23:55  kaddi: what happens if such a file ever gets moved to a windows OS? Does it explode?
23:55  Riviera: # touch $'file\nwith\newline\ncharacters'; printf 'ls output: %s     real amount of files: %s\n' "$(ls -l | wc -l)" "$(a=(*); echo "${#a[@]}")"
23:55  evalbot: Riviera: ls output: 5     real amount of files: 1
23:55  geirha: kaddi: Ask #windows ;)
23:55  kaddi: haha
23:55  geirha: FAT and NTFS adds some more restrictions on what characters are allowed in filenames though.
23:56  geirha: newlines are still allowed though iirc
--- Log closed Sun Dec 05 00:00:32 2010
