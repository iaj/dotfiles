--- Log opened Tue Jan 04 09:45:51 2011
--- Log closed Tue Jan 04 09:48:53 2011
--- Log opened Tue Jan 04 09:54:16 2011
09:54 --- Users 540 nicks [0 ops, 0 halfops, 0 voices, 540 normal]
09:55 --- Channel #bash was synced in 85 seconds
09:58  Huskypaw: I wanna print out something like $ENV{$username} on bash, now how do I manage that?
09:59  twkm: feh.
10:01  pgas: Huskypaw: echo $username
10:02  pgas: or maybe echo ${!username}
10:02  lhunath: Anvil: dunno; read from /dev/zero instead of terminal?
10:03  lhunath: or a blocking pipe
10:03  a4r0n: pgas: he want's username to be a variable
10:03  a4r0n: pgas: just like perl
10:03  lhunath: Huskypaw: your question is broken.  try asking what you really want to do.
10:04  lhunath: # echo '$ENV{$username}'
10:04  evalbot: lhunath: $ENV{$username}
10:04  lhunath: there.  printed out something like $ENV{$username}.
10:04  root__^^: hi, Ã…i need to make a script that listens on port 80 - and when i type anything, it echoes me back
10:04  root__^^: any hints?
10:04  lhunath: root__^^: type anything where, echo back where?
10:04  twkm: have your inetd bind echo to port 80.
10:05  Huskypaw: And if I am giving my username, does it have to be echo $ENV{huskypaw} or $ENV{'huskypaw'}?
10:05  twkm: (building your own xss is so fun!)
10:05  root__^^: in the console
--- Log closed Tue Jan 04 10:09:12 2011
--- Log opened Tue Jan 04 10:09:35 2011
10:09 --- Users 538 nicks [0 ops, 0 halfops, 0 voices, 538 normal]
10:09  pgas: Huskypaw: what do you mean by "directly"?
10:09  pgas: to type it in your script? to read it from the keyboard?
10:09  Huskypaw: And no matter how I do it, if it's echo $ENV{"huskypaw"} or echo $ENV{'huskypaw'} or echo $ENV{huskypaw} it won't work!
10:10  pgas: Huskypaw: echo $huskypaw
10:10  Huskypaw: In any of those cases it gives {huskypaw}
10:10  a4r0n: Huskypaw: try A=B;B=C; echo ${!A} should response C
10:10 --- Channel #bash was synced in 87 seconds
10:11  Huskypaw: Does response C.
10:13  Huskypaw: Sooo? If my username is huskypaw, why does none of the methods work?
10:13  pgas: uhu
10:13  a4r0n: Huskypaw: Sorry ? what's your point ?
10:13  pgas: Huskypaw: explain in english what you are trying to do
10:14  pgas: echo '$ENV{huskypaw}'
10:14  pgas: is that what you want to have it print literaly?
10:14  Huskypaw: No, forget about it, you win.
10:14  pgas: idiot
10:15  elkng: but maybe new Einshtein =)
10:16  pgas: too bad the channel isn't logged
10:18  Fatal_: pgas: you need something?
10:18 --- Fatal_ is now known as Fatal
10:20  pgas: nope, it was just a joke about loosing some important text from the new Einstein ;)
10:20  Fatal: :)
10:26  WinstonSmith: hi ppl ! how was that with the redirection tutorial?
10:26  pgas: !redir
10:26  greybot: Redirections: http://wiki.bash-hackers.org/syntax/redirection http://mywiki.wooledge.org/BashGuide/InputAndOutput#Redirection http://wiki.bash-hackers.org/howto/redirection_tutorial http://wiki.bash-hackers.org/scripting/copydescriptor
10:27  rethus: how can i set ls always to --color=auto ?
10:27  pgas: alias ls='ls --color=auto'
10:30  WinstonSmith: pgas, thank you!
--- Log closed Tue Jan 04 10:36:41 2011
--- Log opened Tue Jan 04 10:37:03 2011
10:37 --- Users 535 nicks [0 ops, 0 halfops, 0 voices, 535 normal]
10:37 --- Server: [hubbard.freenode.net] [freenode-info] if you're at a conference and other people are having trouble connecting, please mention it to staff: http://freenode.net/faq.shtml#gettinghelp
10:38 --- Channel #bash was synced in 83 seconds
10:58  zplinux: hi all. what is the common way to check if a string appears in a file , then execute a command accordingly
10:58  zplinux: I mostly use grep -q "string" /path/to/file && comand
11:00  pgas: looks right
11:00  pgas: you might want -F and twkm says grep -l string > /dev/null is supported by more grep than grep -q
--- Log closed Tue Jan 04 11:04:06 2011
--- Log opened Tue Jan 04 11:04:28 2011
11:04 --- Users 546 nicks [0 ops, 0 halfops, 0 voices, 546 normal]
11:05 --- Channel #bash was synced in 88 seconds
11:22 --- hemanth is now known as text
11:25 --- text is now known as hemanth
--- Log closed Tue Jan 04 11:30:36 2011
--- Log opened Tue Jan 04 11:30:55 2011
11:30 --- Users 547 nicks [0 ops, 0 halfops, 0 voices, 547 normal]
11:30 --- Server: [brown.freenode.net] [freenode-info] channel flooding and no channel staff around to help? Please check with freenode support: http://freenode.net/faq.shtml#gettinghelp
11:31  dlirit: morning'
11:32 --- Channel #bash was synced in 87 seconds
11:36  Ammler: Hello, I have a part in my bash script, which freaks me off, I have no clue what happens, there, if you may take a look on that snippet: http://paste.openttdcoop.org/show/33/
11:36  Ammler: check row 10 from output
11:36  Ammler: how does that happen?
11:40  massimo: Hi. I found a recommendation to replace $@ with ${1+$@} . What does the latter actually do?
11:40  lhunath: Ammler: it's broken.
11:40  lhunath: whomever wrote it fails to understand what quotes are.
11:40  Ammler: lhunath: I wrote it
11:40  lhunath: massimo: who recommends that?
11:41  massimo: lhunath: Bruce Barnett
11:41  pgas: !faq ${1+"$@"}
11:41  greybot: pgas: No matches found at http://mywiki.wooledge.org/BashFAQ
11:41  pgas: hmm or mayb it's on wrapper
11:41  Ammler: ah, I see, that is a bad snippet,
11:42  lhunath: Ammler: you fail to understand quotes on ever line of your code.
11:42  pgas: there was some broken old shells that expanded "$@" to "" if there was no argument, thus creating one argument
11:42  pgas: ${1+"$@"}  is a workaround for that problem
11:42  lhunath: Ammler: (un)luckily for you, your variables are set to such values that it doesn't appear to break your script, too much.
11:43  Ammler: lhunath: I was out of idea and tried everything :-) http://paste.openttdcoop.org/show/34/
11:43  massimo: pgas: I think so. Since I have some old shells I would use that. But how does ${1+$@} solve that?
11:43  lhunath: massimo: quote "$@"
11:44  lhunath: massimo: it expands to nothing if $1 is unset.
11:44  pgas: is $1 is unset it expands to ${1} and since it's not quoted it expands to nothing
11:44  lhunath: Ammler: what *are* you trying to do?
11:45  pgas: if $1 is set it expands to "$@"
11:45  lhunath: if bruce recommended an unquoted $@ he's not just ancient but also wrong.
11:46  Ammler: lhunath: there is *.spec in one of those folders, which I try to write in the final spec for building
11:46  pgas: massimo: http://www.in-ulm.de/~mascheck/various/bourne_args/ list the shells that had this problem
11:46  lhunath: Ammler: explain the entire script's operation in pure english.
11:46  lhunath: or at least, what you pasted
11:46  massimo: pgas: Found the quote:  http://www.grymoire.com/Unix/Sh.html#uh-71
11:47  lhunath: looks good
11:47  Ammler: it checks if $REPO/.devzone/build/$BRANCH/*.spec is there, if so, copy to devzone.spec and continue else check the next folder
11:48  lhunath: so basically, you're looking for a .spec file in a series of directories?
11:48  Ammler: yes
11:48  Ammler: some detail hirarhcy
11:48  lhunath: are the directories arbitrary or what?
11:49  lhunath: just looking recursively down a hierarchy?
11:49  lhunath: never mind.
11:49  Ammler: no, they are the same always, the snippet is not manipulated, it is that way in the script
11:51  lhunath: is there always only 1 spec file?
11:51  lhunath: or can there be multiple in which case you only want the first and ignore the others?
11:52  Ammler: lhunath: there might be only one, but I do not know the name of it
11:53  Ammler: that is why I use *
11:53  Ammler: http://paste.openttdcoop.org/show/35/ <-- a bit more debug echo
11:53  lhunath: ( shopt -s nullglob; cat {"$REPO/.devzone/build",$SCRIPT_ROOT/.default/$TYPE}{,/"$BRANCH"}/*.spec ) > devzone.spec
--- Log closed Tue Jan 04 11:58:03 2011
--- Log opened Tue Jan 04 11:58:24 2011
11:58 --- Users 550 nicks [0 ops, 0 halfops, 0 voices, 550 normal]
11:58  lhunath: but yes, as Anvil pointed out it requires a /dev/null added to it
11:58  lhunath: and as I think of it, the echo | cat ... will be fine as the nullglob will remove all args.
11:59  lhunath: but still; that's kind of relying on a side-effect which I don't condone
11:59  lhunath: Ammler: ( shopt -s nullglob; cat {"$REPO/.devzone/build","$SCRIPT_ROOT/.default/$TYPE"}{,/"$BRANCH"}/*.spec /dev/null ) > devzone.spec
11:59 --- Channel #bash was synced in 86 seconds
12:00  lhunath: the /dev/null thing should only be necessary if it's possible that no spec file exists, in which case your devzone file will be empty.
12:00  lhunath: you can check that afterwards with [[ -s devzone.spec ]] if you like.
12:00  mmm4m5m: A little help please? Why this example does not work: xterm -e '(firefox&); disown -a; xterm -hold -e echo close-me-but-firefox-will-close-also'
12:01  pgas:  -e program [ arguments ... ]
12:01  pgas: '(firefox&); disown -a; xterm -hold -e echo' is not a program
12:02  lhunath: and xterm is not a shell.
12:02  lhunath: so don't give it shell code.
12:02  mmm4m5m: pgas: I mean, it works fine... it is like I start firefox but firefox close when I close the terminal window
12:03  mmm4m5m: so, first xterm stay until I close last xterm... When first xterm is closed, firefox is killed (or something)
12:03  mmm4m5m: How to disown that firefox and keep it running after terminal window is closed
12:03  lhunath: mmm4m5m: create the job in the right shell.
12:03  lhunath: disown has no jobs to disown since your shell owns no jobs.
12:03  twb: Remind me; given an array like xs=(a b c), how do you get back an array (a la "$@"), sans the first element?
12:03  twb: i.e. a non-destructive shift
12:03  lhunath: "${@:2}"
12:03  twb: Thanks
12:04  pgas: hmm indeed it works strange
12:04  twb: For some reason I always forget it
12:04  lhunath: mmm4m5m: command & disown
12:04  lhunath: undocumented xterm stuff; joy!
12:05  lhunath: this crap is not a program, let me just fire up an arbitrary shell and tell it to try to figure out what the fuck the user meant with this string.  and let's hope the user wrote it in this arbirtrary shell's language.
12:05  lhunath: I expect arbitrary will be "login shell"
12:06  lhunath: if it's nice.  otherwise it may be /bin/sh.
12:06  Ammler: lhunath: the hirarchy is wrong direction
12:06  twb: # xs=(a b c); printf ' `%s'\' "${xs[@:2]}"
12:06  evalbot: twb: bash: @:2: syntax error: operand expected (error token is "@:2")
12:06  lhunath: either way; the sane thing to do would seem to be xterm -e bash -c 'code'
12:06  lhunath: Ammler: I'm afraid I don't understand.
12:06  Ammler: it does load the default also if there is specific spec in the $REPO
12:07  Anvil: # xs=(a b c); printf ' `%s'\' "${xs[@]:2}"
12:07  evalbot: Anvil:  `c'
12:07  twb: Oh
12:07  lhunath: note that with $@, 2 is the second argument while with arrays 2 is the third element.
12:08  Ammler: I need to learn how this works, maybe I can fix it self from now, thanks :-)
12:08  lhunath: Ammler: you said there was only one.
12:09  lhunath: wrong givens give you wrong answers.
12:14  mmm4m5m: lhunath: Well, example was complicated. This also does not work: xterm -e 'firefox & disown; read -p pause'  ... Anyway, if I start xterm, type and run: 'firefox & disown' , then close xterm - it is working just fine. Whatever, my real case (script and things) is somehow similar - let me check it more. And thanks.
12:16  lhunath: mmm4m5m: try running bash.
12:18  Anvil: hm, surprisingly, it doesnt work this way : xterm -e bash -c 'xmessage asdf </dev/null >/dev/null 2>&1 & disown ; read'
12:19  pgas: what if you use bash -cm?
12:20  pgas: or -mc rather
12:21  Anvil: doesnt work either
12:21  lhunath: what does 'doesnt work' mean, exactly?
12:21  mmm4m5m: looks like firefox is NOT disown-ed
12:21  Anvil: for me, it means xmessage dies after i press enter to satisfy the read
12:21  mmm4m5m: and killed/closed when terminal is closed
12:22  lhunath: Anvil: what does jobs say before read?
12:22  pgas: I've seen this before...not sure what kills the app...
12:23  lhunath: it is odd, since the shell is not interactive it shouldn't even matter.
12:23  lhunath: disown or not.
12:23  Anvil: lhunath : before disown, it's showing [1]+  Running                 xmessage asdf < /dev/null > /dev/null 2>&1 &, and nothing after the disown
12:23  lhunath: just firefox & should be fine
12:25  Anvil: lhunath : i've modified disown to disown %1 "just to be sure"
12:25  lhunath: could try and see what's happening by attaching a debugger to the command or maybe with http://stuff.lhunath.com/showsig
12:25 --- heiner_ is now known as heiner
12:27  Anvil: i've straced the xmessage : --- SIGHUP (Hangup) @ 0 (0) ---
12:29  heiner: the shell sends SIGHUP to all controlling processes when it terminates
12:30  Anvil: heiner : hence the disown
12:32  Anvil: if you type in some 'xterm -e bash' window 'xmessage foo & \n disown %1' and press ctrl-d, or close the xterm, or exit the shell, then xmessage just doesnt die
12:34  pgas: it's probably xterm that sends it, but does running "nohup xmessage" solves the problem?
12:36  Anvil: pgas : yes it is
12:36  Anvil: i've just straced the xterm itself
12:40  Anvil: race condition somewhere ?
12:45 --- callumacrae is now known as Hexidecimal
12:45 --- Hexidecimal is now known as callumacrae
--- Log closed Tue Jan 04 12:49:55 2011
--- Log opened Tue Jan 04 12:55:18 2011
12:55 --- Users 545 nicks [0 ops, 0 halfops, 0 voices, 545 normal]
12:56 --- Channel #bash was synced in 82 seconds
--- Log opened Tue Jan 04 13:01:02 2011
13:01 --- Users 545 nicks [0 ops, 0 halfops, 0 voices, 545 normal]
13:01 --- Server: [anthony.freenode.net] [freenode-info] if you're at a conference and other people are having trouble connecting, please mention it to staff: http://freenode.net/faq.shtml#gettinghelp
13:02 --- Channel #bash was synced in 81 seconds
13:04  FernandoBasso: Hello all. Why echo 'aabc' | grep 'a{2}bc' does not return anything?
13:04  lhunath: heiner: only when it's interactiv
13:04  lhunath: e
13:04  FernandoBasso: What is the proper way of using {n,m} operators?
13:04  pgas: because grep use bre not ere
13:05  lhunath: !bre > FernandoBasso
13:05  greybot: FernandoBasso: Posix Basic Regular Expressions: http://www.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap09.html#tag_09_03
13:05  pgas: grep -E 'a{2}bc' or grep 'a\{2\}bc'
13:05  FernandoBasso: lhunath: Thanks. Reading.
13:05  FernandoBasso: pgas: Thanks.
13:07  massimo: echo ${foo:+foobar}  prints only foobar if foo is defined. Is there any parameter expansion that prints foobar if foo is NOT defined? Otherwise I would need a work around using [[ ]] or s.th. similar..
13:07  Anvil: massimo : ${foo:-foobar}
13:07  shaheen: Hi, why does "awk '{sum+=$1} END { printf ("%i\n", sum/100)}" prints "208303500", and "awk '{sum+=$1} END { print "",sum/100+1}'" prints "2.08304e+08" which is 208304000, where did this 500 go?
13:08  shaheen: sorry
13:08  shaheen: it is not +1
13:08  shaheen: only /100
13:08  Anvil: shaheen : i *think* people will tell you this is #bash, not #awk.
13:09  shaheen: Anvil: thank you, i thought that if you bash you awk. sorry
13:10  pgas: it's often true, but since there is a channel dedicated to awk, try to use it ;)
13:10  twb: I'm too lazy to awk
13:10  Anvil: same here :-X
13:11  twb: GNU sed does 90% of what I'd use awk for, and perl does the other 90%
13:12  massimo: Anvil: Not true. This prints $foo if defined and "foobar" if $foo not defined. What I need is print "foobar" if $foo not defined and nothing if $foo is defined.
13:14  koala_man: massimo: no, I don't think there is such a thing
13:15  Ammler: http://paste.openttdcoop.org/show/37/ <-- maybe easier to understand what I want
13:15  Anvil: massimo : fwiw : http://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html#tag_02_06_02
13:15  Ammler: row 12 from output is still a miracle
13:16  massimo: Something like Perl:   not defined $foo ? print "foobar" : print "" ;        I mean there is no opposite of ${foo:+foobar} in bash. ${foo:-foobar} is something else.
13:16  koala_man: man bash has a list of all parameter expansion operators
13:17  pgas: massimo: how so?
13:17  pgas: # print ${foo-foobar}
13:17  evalbot: pgas: bash: print: command not found
13:17  pgas: # echo ${foo-foobar}
13:17  evalbot: pgas: foobar
13:17  pgas: (sorry was in #awk mode)
13:17  pgas: :- means unset or null "" , - means unset
13:19  koala_man: # foo=42; echo ${foo-foobar}
13:19  evalbot: koala_man: 42
13:19  koala_man: he wants that to be blank
13:20  pgas: aah well, it's not possible with pe
13:20  pgas: not in bash anyway
13:22  massimo: pgas: Too bad, I had several uses for such a function.
13:22  pgas: well, it's not very difficult to implement
13:22  massimo: pgas: I see, I write a function for that...
13:23  Anvil: err
13:24  mmm4m5m: Ammler: I was thinking I know a little bash but your snippet is just... too much for me... What is in ï»¿$SCRIPT_ROOT? Maybe try with quotes: cat '$SCRIPT_ROOT/.default/$TYPE/$BRANCH/'*.spec
13:26  Anvil: hmm
13:26  Anvil: you cant use both % and # in a ${foo/.../.../} ?
13:27  Ammler: I have reduced the bash to the problematic snippet: http://paste.openttdcoop.org/show/38/ (this should be really easy to understand)
13:28  Ammler: why does it "mix" the echo "Branch: $BRANCH, Type: $TYPE, Script-root: $SCRIPT_ROOT"
13:28  pgas: Anvil: no
13:29  pgas: !cr > Ammler
13:29  greybot: Ammler: Carriage Return (ASCII 13). Often written as ^M or \r. CRs are found just before newlines in text files generated by DOS/Windows apps. You can see them with "cat -e". See http://mywiki.wooledge.org/BashFAQ/052 to get rid of them.
13:29  pgas: try printf "foobar\rbleh'  in your terminal
13:30  pgas: printf 'foobar\rbleh\n'
13:31  Fatal: Ammler: $TYPE is your culprit, notice how it says   + echo 'Type: something   <- and no closing '
13:33  mmm4m5m: Fatal: it is not +, line 4 starts with '
13:33  Fatal: ok then
13:34  Fatal: Ammler: notice how it doesn't say + echo, but rather ' echo :)
13:34  mmm4m5m: :)
13:34  Ammler: Fatal: yes, thanks, type is read from a file in the repo, where the problematic repo was made on windows
13:46  www: Hi. I want to start firefox after the thundrbird, but despite trying all the operators tb &&, tb &, tb; tb || firefox won't start or runs after the tb being closed. Help. Sorry for spelling - no time to config irssi.
13:46  Fatal: fb & tb
13:47  koala_man: tb & ff  will run tb in parallell with fb
13:48  www: Thank you. And what would the syntax look if I wanted to start ff AFTER tb?
13:51  koala_man: after tb closes?
13:51  www: After it starts.
13:52  koala_man: there's no good way of doing that. tb starts immediately when you run it, but it can take a few seconds to show a window, more seconds to load mail, and there's no particular line that's defined as "started"
13:53  koala_man: if opening a window counts, you can perhaps poll xwininfo or xdotool
13:53  www: Well so there isn't any way to pass the 'signal', 'ok guys, i am running! next please'?
13:53  koala_man: no
13:54  www: Thank you.
14:02  lhunath: as soon as fb & ends, fb is running.
14:02  lhunath: s/fb/ff/g
14:03  lhunath: or rather tb.  whatever.
14:06  pgas: hmm, now that I think about it doesn't set -x shows the \r as \r in the debug output?
14:18  m_fulder: hello
14:18  csabo: hi
14:18  m_fulder: Could someone help me with an really easy script? I can almost nothing about bash :P
14:19  koala_man: we're humbly at your service
14:19  csabo: dont ask to ask mate, just ask :)
14:19  m_fulder: yeah :P
14:19  m_fulder: well
14:20 * csabo offers m_fulder a blueberry poptart
14:20  csabo: i dont want both
14:20  m_fulder: I want to check my desktop directory for files with same extension ... if they got the extension I want to move them to another direcoty
14:20  csabo: alright, so the script is to move certain filetypes to another folder?
14:20  m_fulder: do I do something like:   if(File.extname(file) == ".myExt"   puts 'mv file myDir'
14:20  m_fulder: yeah exactly
14:20  csabo: you can do it easier than that mate
14:20  csabo: just use find :)
14:21  csabo: m_fulder:  "find $HOME -type f -name *.jpeg -exec mv NEWDIR"
14:21  m_fulder: ah cool :D
14:21  csabo: wait wait
14:21  csabo: " find $HOME -type f -name *.jpeg -exec mv NEWDIR {} \; "
14:21  csabo: there
14:21  Anvil: 'desktop directory' would be ~/Desktop
14:22  m_fulder: yeah
14:22  csabo: yeah, fix the path
14:22  csabo: it was just an example
14:22 * csabo sits in the corner with his poptart
14:23  pgas:  name \*.jpeg
14:23  m_fulder: so will this be correct:   " find ~/Desktop -type f -name *.jpeg -exec mv /home/myFolder {} \; "
14:23  m_fulder: why do I need {} \;  at the end ?
14:24  pgas: it's backward.
14:24  pgas: -exec mv {} /home/myFolder  \;
14:24  m_fulder: ah right
14:24  pgas: and you need to quote '*.jpeg'
14:24  m_fulder: oh ok
14:24  csabo: m_fulder:  lesson learned i hope
14:24  csabo: just ignore my bad advice lol
14:25  csabo: it takes me 3 tries to get my stuff working right :)
14:25  pgas: {} is replaced by the filename by find, \; tells find to stop conidering the arguement as arguement to the command you are executing
14:25  m_fulder: ah cool then I get it :D thank you
14:25  pgas: !find
14:25  greybot: http://mywiki.wooledge.org/UsingFind
14:25  csabo: thank you for the corrections pgas
14:25  pgas: of course if you have 2 filenames with the same name, one will be destroyed in the process
14:26  m_fulder: hm and what if I have several files with same extension?
14:26  m_fulder: will all be moved or only one?
14:26  lhunath: extension is irrelevant.
14:26  lhunath: filename is relevant.
14:27  lhunath: all files matching the find predicates before the -exec will be mv'ed.
14:27  m_fulder: ok :)
14:27  lhunath: meaning; all files that are regular files (type f) and whose name matches *.jpeg.
14:28  pgas: (and if you don't need something recursive solution descending in the subdirs, it's just: mv *.jpeg blah)
14:28  m_fulder: ah lol it is :O
14:28  lhunath: in bash4 you can recurse with mv ~/Desktop/**/*.jpeg destdir/
14:28  m_fulder: cool
14:28  Anvil: this needs shopt -s globastar
14:28  Anvil: globstar
14:29  lhunath: ah yes, I get so used to enabling that by default.
14:30  ragnar: hi all
14:32  ragnar: i'd like to use "install" in my makefile because it's able to call "strip". how can i invoke "strip" to strip all symbols? >>> install --strip-program="strip --strip-all" source dest?
14:33  gilesw: heya all
14:33  ragnar:  <<< does not work. :(
14:33  gilesw: i'm struggling a bit with bash regexes
14:34  gilesw: I'm trying to run this if [[ $(facter operatingsystem) =~ '/Ubuntu|Debian/' ]];then ..
14:34  m_fulder: ok I got it working just fine with my moving script thanks guys ... now another problem .. can I make this script to automaticly run every 10 seconds or something like that?
14:34  ragnar: m_fulder: add it to you crontab
14:35  lhunath: !make > ragnar
14:35  greybot: ragnar: make is not bash. It has its own syntax that looks a bit like bash, but it isn't. Ask in ##workingset or ##c and read http://www.gnu.org/software/make/manual/ or the help documents of your version of make
14:36  ragnar: lhunath: i'm not really using gnu make. i'm about to write a very similar to that. i have a bash shell but not gnu make
14:37  lhunath: then I don't understand your bash question.
14:38  m_fulder: ragnar,  do I just add it like this: * *     * * *   root    find ~/Skrivbord/ -type f -name '*.jpeg' -exec mv {} /home/ubuntu \;
14:39  maarek_: hello
14:39  maarek_: hello
14:40  lhunath: m_fulder: man 5 crontab
14:40  lhunath: !=~ > gilesw
14:40  greybot: gilesw: Binary operator, uses the expression on the right hand side as an extended regular expression and returns true if the expression on the left hand side matches the pattern. USE A VARIABLE to hold your regexes: if [[ $var =~ $r ]]; then echo Match; else echo 'No match'; fi
14:40  ragnar: m_fulder: please ask google for crontab, there are many good howtos. i did it the same way, i'm not that crontab pro to explain you from brain
14:41  maarek_: i need a quick help, i have a for loop which i wanna terminate after  say 5 iterations. And if i want the number of iterations as an argument? something line for i in {0..${1}} ?
14:41  m_fulder: right will do thanks :)
14:41  lhunath: regex='Ubuntu|Debian'; [[ $foo =~ $regex ]]
14:41  lhunath: don't ask google.
14:41  lhunath: read man 5 crontab
14:41  lhunath: !google
14:42  greybot: Google is NOT a preferred source for learning bash, because 90% of the "tutorials" and scripts out there are JUNK. Instead, ask a good question here or refer to the Guide and FAQ (see topic)
14:42  csabo: i read that too quicik, i saw headcrab instead of crontab
14:42  lhunath: I wouldn't trust google hits for a dime.
14:42  gilesw: tx chaps
14:42  gilesw: i did have a look on the fine faq sites
14:42  gilesw: site rather
14:42  lhunath: maarek_: C-style for.
14:42  maarek_: thank you
14:43  lhunath: maarek_: for (( i = 0; i < 5; ++i ))
14:43  gilesw: it normally answers most of my qu's
14:43  Anvil: do you recommend the abs guide btw ?
14:43  lhunath: concerning abs, I recommend this:
14:43  lhunath: !abs
14:43  greybot: The infamous "Advanced" Bash Scripting Guide should be avoided unless you know how to filter out the junk. It will teach you to write bugs, not scripts. In that light, the BashGuide was written: http://mywiki.wooledge.org/BashGuide
14:44  Anvil: huhu
14:44  lapsusbrutus: guys,  Id like to get the file contents of one file to another file, where "lineshifts" are replaced by ", "..  My suggestion is: cat foo |tr "\p" ", " > bar     On what am i failing?
14:44  lhunath: at the very least, the BashGuide is an editable wiki so people can fix the author's nonsense.
14:44  Anvil: i've noticed a few bugs myself
14:44  ragnar: lhunath: in my script, i'd like to use "install" but i went into trouble with it option "--strip-program". how can i tell install that it should call "strip" with this option "--strip-all"?
14:44  lhunath: not that the author ever talks nonsense.
14:45  lhunath: ragnar: if man install doesn't tell you (mine doesn't), then you can't.  call strip yourself.
14:46  lhunath: lapsusbrutus: what the fuck are line shifts?
14:46  lhunath: lapsusbrutus: also, tr replaces characters, not strings.
14:47  ragnar: ok
14:47  lhunath: lapsusbrutus: I suspect you're replacing \'s with ,'s and p's with spaces.
14:48  lhunath: or not since tr probably just maps \p to p.  maybe your GNU tr is different from my tr, though.
14:48  pgas: lapsusbrutus: \n is end of line, but tr doesn't replce one char by 2 chars, only one byte by another bye
14:49  lapsusbrutus: want text on one line without the fucking paragraph.. whatever the fuck its called  lol
14:49  lapsusbrutus: \n  Thanks! Thats what I was looking for!
14:49  pgas: sed 's/$/,/' file |  paste -s -d ' ' -
14:49  lhunath: or \r.  or \r\n.
14:52  pgas: he'll be back, lol
14:55  Anvil: hm, http://mywiki.wooledge.org/BashFAQ/063 <- should be ssh me@remotehost 'sleep 120 >/dev/null 2>&1 &'
14:55  Anvil: err i mean : ssh me@remotehost 'sleep 120 </dev/null  >/dev/null 2>&1 &'
14:56  Anvil: i've noticed some program maintaining an open stdin, and closing stdout/err wasnt enough
15:01 --- Unknown[OFF] is now known as Unknown[NF]
15:01  pgas: Anvil: yes, redirecting stdin might not be a bad idea.
15:02  Anvil: lhunath : considering that abs is mostly bugs. Would you approve the method to avoid a subshell described in http://www.linuxtopia.org/online_books/advanced_bash_scripting_guide/x13082.html ? Any alternative ?
15:03  Anvil: lhunath : i honestly dont get the logic involved.
15:05  pgas: Anvil: ehe, it's just a fancy way to write: while read ... done < file
15:06  Anvil: hm
15:06  pgas: he also opens the file for writing which is useless to say the least and probably adds the { } because he like the style
15:07  Anvil: so while ... do done < file just avoid the subshell ?
15:07  Fisix_AIX: Ok  I'm still learning bash so this is a really dumb question but, In my bash file I want to put an small perlscript inside the bash and the tell it to qrite the perl into a file . Now I know how to do all of that but I dont know how to tell bash to ignore all the perl and treat it all as text.... any odeas?
15:07  pgas: yes, the pipe is creating subshells
15:08  Anvil: ho
15:08  Anvil: i thought while would create a subshell. But it doesnt
15:08  Anvil: i mean the while loop
15:08  pgas: Fisix_AIX: check with #perl, IIRC one of the perl  manpage has some example for this kind of hack
15:08  pgas: Anvil: nope:
15:09  pgas: # echo foo | read a;echo $a
15:09  evalbot: pgas: no output
15:09  Anvil: # read a <<<foo ; echo $a
15:09  evalbot: Anvil: foo
15:09  Fisix_AIX: pgas, But I want to put the perl inside the shellscript ...?
15:09  Anvil: nasty
15:09  pgas: Fisix_AIX: oh well...
15:10  sas_: hi
15:10  Fisix_AIX: There is no tag to wrap it in?
15:11  sas_: can i expect the results of these two statements to be same always,
15:12  sas_: cmd > f 2>>f   and    cmd >f 2>&1
15:12  Anvil: pgas : so if i have to 'while read' something else than a basic file. Like some command output. What would i do if i cant use a pipe ?
15:12  Anvil: < <(cmd) ?
15:13  pgas: yes
15:13  pgas: !faq disappear < Anvil
15:13  greybot: pgas: No matches found at http://mywiki.wooledge.org/BashFAQ
15:14  pgas: !faq disappear > Anvil
15:14  greybot: Anvil: http://mywiki.wooledge.org/BashFAQ/024 -- I set variables in a loop. Why do they suddenly disappear after the loop terminates? Or, why can't I pipe data to read?
15:15  pgas: sas_: I expect you can run in problems of line mixed in with the former
15:15  Anvil: pgas : thanks a lot. Makes way more sense.
15:16  sas_: pgas: oh
15:16  sas_: thanks
15:30  pgas: Fisix_AIX: you might want to have a look at heredocs
15:30  Fisix_AIX: Its ok ive done it, stuck it in a var
15:33  pgas: (and #perl might have told you about perl -x)
15:35  Fisix_AIX: is there a way to put stuff into a var keeping newlines in tatc?
15:35  Fisix_AIX: tact*
15:35  Daskreech: Quotes?
15:37  Anvil: foo="asdf<press enter>asdf" ; echo "$foo"
15:37  sente: IFS= read -r -d '' var < file; echo "$var"
15:38  sas_: one more query, i want to do multiple file tests ... is this valid ... -frs fname
15:39  AlexC_: morning
15:40  sas_: morning
15:40  AlexC_: is there a similar convention to PHPDoc when writing Bash? For example to explain the arguments that a function accepts/will use
15:40  pgas: sas_: uh?
15:40  pgas: AlexC_: nope, there is a bashdoc project I think but nothing even semi official
15:41  sas_: pgas: instead of [ -f fname ] && [ -r fname ] can I write [ -fr fname ]
15:41  AlexC_: pgas: ok, well what do people tend to do?
15:41  sas_: or [[ -fr fname ]]
15:41  pgas: sas_: no there isn't
15:41  pgas: AlexC_: what they like
15:41  AlexC_: ok :)
15:43  pgas: sas_: I meant there isnt a way to do that
15:44  sas_: k, thanks
15:45  sas_: bbl
15:47  thag8keepr: Hi, I would like to echo a single byte to a file. Non-zero value work fine: echo -n $'\x01' > output.txt works great, however echo -n $'\x00' > output.txt will not write a 0 to the file.  Anyone knows how I can accomplish writing a 0?
15:47  pgas: printf "\0" > output.txt
15:48  Anvil: hmf. bashdoc seems quite unmaintained
15:49  thag8keepr: thanks - works like a charm. Any hints as to why echo does not work?
15:49  pgas:  $'\x00' is the same thing as '', you cannot pass a null byte as an argument to a command
15:50  thag8keepr: ok, thanks again
15:50  pgas: ehe "I'm writing a bashdoc in C++ because I don't know bash. And I just feel like it. I don't know if it'll replace the current bashdoc.sh script because that's not a compiled program, and as such takes a bit less to install. I'm going to write it anyway and humbly submit it to the rest of the sorcery team."
15:52  Anvil: looks like there's more than one bashdoc
15:54  Anvil: http://www.sourcemage.org/bashdoc (bashdoc.sh) is a 2004 thingy. https://launchpad.net/bashdoc last commit is 152 weeks old.
15:55  koala_man: haha
15:56  Anvil: it's a bit frustrating, since i wanted to find basdoc-like tool for my team.
15:57  Fatal: I'd mistrust that project: "'m writing a bashdoc in ++ because I don't know bash"
15:57  Fatal: oh, pgas already pasted that
15:57  Fatal: nm
16:00  Fisix_AIX: Me again :) , Ok so you can use hexdump to dump to hex, can you use hexdump to convert the hex back to asccii?
16:01  pgas: !faq ascii
16:01  greybot: http://mywiki.wooledge.org/BashFAQ/071 -- How do I convert an ASCII character to its decimal (or hexadecimal) value and back?
16:02  likewhoa: !xargs
16:02  greybot: xargs(1) is dangerous (broken) when processing filenames that are not NUL-terminated. If you're working with filenames, use find's -exec {} + instead (yes, it does multiple-filenames-per-invocation, too).
16:14  crankharder: I want to sort a a bunch of files and pipe that sorted output back into the original file... not sure how to do that w/ xargs:   ls x* | xargs -n 1 sort  how do I reference the piped in arg so that I can do this: sort filename > filename
16:16  Anvil: crankharder : look at 'moreutils' package. the sponge program. for i in x* ; do sort "$i" | sponge "$i" ; done
16:16  Anvil: you just cant sort files "in place".
16:18  crankharder: actually > isn't correct... sort takes an output arg, and that works fine... sort foo -o foo, results in a sorted foo
16:18  pgas: just use a temp file
16:18  pgas: !pf sed
16:18  greybot: http://mywiki.wooledge.org/BashPitfalls#pf13 -- Don't do this! -- cat file | sed s/foo/bar/ > file
16:18  Anvil: that's what sponge does.
16:19  pgas: it doesn't even store the whole thing in memory?
16:19  crankharder: even using -o ?
16:20  pgas: crankharder: I don't know how -o is implemented maybe it's enough
16:20  Anvil: crankharder : I dont think sort -o is using a temporary file. So if sort is interrupted while it's writing the final output, you'll lose both unsorted and sorted versions of the file.
16:21  crankharder: ok, let's pretend -o works -- how do I incorporate that into xargs?   ls x* | xargs -n 1 .... ?
16:21  Anvil: sort creates (lots of) temporary files - default are 32MB temp files iirc.
16:21  Anvil: crankharder : you dont need xargs.
16:21  erUSUL: !ls > crankharder
16:21  greybot: crankharder: ls shows you a representation of files. They are NOT file names (for simple names, they mostly happen to be equivalent). Do NOT try to parse it. http://mywiki.wooledge.org/ParsingLs
16:21  pgas: sort takes multiple filenames as input no?
16:22  DestinyAwaits: A Very Happy New Year 2011 to everyone.
16:22  crankharder: i guess, but i still think they need to be done individually since the output is different for each
16:22  Anvil: pgas : xargs -n 1 suggest he wants each file to be sorted on a separate process and that he doesnt want a single file representing the sorted version of all input files.
16:23  erUSUL: for f in x*; do sort "$f" > tmp && mv -- tmp "$f"; done
16:24  pgas: Anvil: ah ok...which is even more strange then
16:24  crankharder: think this works for i in x*; do sort $i -o $i ; done
16:25  crankharder: pgas: if not, i'll use that
16:25  crankharder: thanx guys!
16:25  Anvil: crankharder : as mentioned earlier, if sort dies while writing its output (the -o value), you'll lose both sorted and unsorted versions.
16:26  Anvil: but else, yes, it works.
16:26  crankharder: k, i'll just sort + tmp + mv just to be safe
16:27  Anvil: be sure to use tmp files on the same filesystem that the input.
16:28 --- Unknown[NF] is now known as Unknown[OFF]
16:31  reverebeer: what program should i use to find the text after a "-" in a filename?
16:32  koala_man: !pe > reverebeer
16:32  greybot: reverebeer: Parameter Expansion is the expansion of a parameter: "$foo", "$1". You can use it to perform string operations: "${file%.mp3}", "${0##*/}". Remember to *always* quote them. See http://mywiki.wooledge.org/BashSheet#Parameter_Operations
16:32  Fisix_AIX: I cant seem to be able to do a reverse hexdump in bash no matter what I try
16:32  koala_man: Fisix_AIX: if you have vim installed, there's xxd to do that
16:32  reverebeer: thanks koala_man
16:33  Fisix_AIX: koala_man, thanks, do you know any other way?
16:33  koala_man: I guess you can do a horribly slow bash loop
16:34  Fisix_AIX: koala_man, I have some code stored in HEX and I just want to write it to a file in ascii form
16:36  Fisix_AIX: koala_man, Or even if you know a way to do this in binary would be great help
16:36  koala_man: # echo "68 65 6c 6c 6f 20 77 6f 72 6c 64 0a" | while read  -d ' ' f; do printf "\x$f"; done
16:36  evalbot: koala_man: hello world
16:38  pgas: dc can probably do it too :D, maybe recode too
16:39  Fisix_AIX: dc?
16:39  Fisix_AIX: dc
16:40  Fisix_AIX: koala_man, thats a good way but my hex has % in it
16:41  e36freak: | sed 's/%//g' | while read...
16:41  pgas: why do you do that to yourself...can't you use things like base64 instead?
16:42  Fisix_AIX: pgas, Im just learning, for the sake or learning
16:43  Fisix_AIX: pgas, how would I decode in base64?
16:43  pgas: maybe you have a base64 command, or openssl or perl
16:44  Fisix_AIX: pgas, thanks Ill let you know how it goes
16:44  pgas: echo hello | recode ../x | tee /dev/fd/2 | recode /x..
16:44  pgas: 0x68, 0x65, 0x6C, 0x6C, 0x6F, 0x0A
16:44  pgas: hello
16:46  steve___: pgas: nice
16:47  koala_man: fancy
16:48  pgas: recode is cool it can do Base64 and quoted print and several hex format in fact
16:49  pgas: # echo hello | recode ../Base64 | tee /dev/fd/2 | recode /Base64..
16:49  pgas: aGVsbG8K
16:49  pgas: hello
16:49  evalbot: pgas: bash: recode: command not found
16:49  evalbot: pgas: bash: recode: command not found
16:49  evalbot: pgas: bash: echo: write error: Broken pipe
16:49  pgas: oups
16:50  pgas: ehe, at least it reminds me I should exit this su session
16:51  Fisix_AIX: Am I being thick>> http://linux.die.net/man/1/base64 How can I tell it to use the data in my var rather than a file?:
16:52  pgas: printf %s "$var" | base64
16:53  sente: or base64 <<<"$var"
16:53  Fisix_AIX: AHHHH thanks , now it works perfect
16:54  sente: i dont know which is preferable at an OCD level, but i know vim's syntax highlighting gets confused by <<<, so I rarely use them
16:54  pgas: sente: if you don't mind the extra \n
16:54  e36freak: sente: doesnt have issues here
16:54  Fisix_AIX: A whole perl script made in bash with all correct encoding and characters!
16:55  Fisix_AIX: Thanks to all who helped me
16:55  sente: pgas: it's like a bonus for, who wouldn't want it??
16:56  sente: e36freak: yeah, my problem is I use sh.vim for bash, as it was the default, and bash.vim doesn't exist on any of the servers i work/worked on
16:56  e36freak: sente: ahh
16:57  sente: and whenever i search i somehow fail at finding it
17:00  sente: mind sending it over? running curl -F 'bash.vim=@/path/to/your/bash.vim' http://curl.sente.cc #should do the trick
17:00  e36freak: i have no bash.vim in .vimrc
17:00  e36freak: or i would
17:01  sente: does your system have a bash.vim?
17:02  e36freak: http://pastie.org/1428576
17:03  f00bar80: find . -type f -exec grep -H 'TheWord' \; <= is this how i search a word in all file in sub directories in the CWD ?
17:03  homie: wtf, how do i get a log of fd 1 and 2 from a make process ?
17:03  erUSUL: f00bar80: {} missing before \;
17:03  homie: make 2>&1 > make-log not ?
17:04  e36freak: !faq 2>&1 > homie
17:04  greybot: homie: http://mywiki.wooledge.org/BashFAQ/055 -- Tell me all about 2>&1 -- what's the difference between 2>&1 >foo and >foo 2>&1, and when do I use which?
17:04  erUSUL: f00bar80: better use grep -R ; you do not need find grep can recurse
17:04  cthuluh: if your grep has -R
17:04  sente: e36freak: ah
17:04  sente: well thanks anyhow
17:04  e36freak: yep
17:04  erUSUL: cthuluh: right; i stand corrected
17:05  cthuluh: f00bar80: -exec grep -H foo {} + # will be more efficient
17:05  homie: ah thank you
17:05  sente: also, what's with the plugin creators and their idea that uppercase letters were necessary for the scripts
17:06  e36freak: no idea
17:06  cthuluh: sente: uppercase letters...  in variable names?
17:06  f00bar80: cthuluh, what {} is for ?
17:06  cthuluh: !find > f00bar80
17:06  greybot: f00bar80: http://mywiki.wooledge.org/UsingFind
17:07  cthuluh: with ; it's a file name, with + it's a list of file names
17:07  sente: heh yeah, not an answerable question, just a preferential thing, and i feel the vast majority of filenames on a unix system are all lowercase
17:07  e36freak: cthuluh: in script names, i.e. tarPlugin.vim
17:07  cthuluh: oh, cAmElCaSe...
17:07  e36freak: aye
17:08  f00bar80: tried find . -type f -exec grep -H 'Scritps' {} \; don't know if it worked or not, but got no reply
17:08  steve___: f00bar80: create a test file
17:09  cthuluh: try with grep ''
17:09  e36freak: f00bar80: you are looking for the word _in_ the file right? not the file names?
17:13  EvilSushi: Hi, when running a script with bash -x it shows some variables as \W\T\F\I\S\T\H
17:13  EvilSushi: not sure why?
17:13  e36freak: just escaping them
17:13  e36freak: no big deal
17:14  EvilSushi: does that mean the variables are broken?
17:15  cthuluh: variables shouldn't be printed. only the variables' content
17:29  zarzar: is there a way to create a symbolic link to a folder named by date?
17:29 --- wtfness is now known as foocraft
17:30  cthuluh: zarzar: possibly
17:32  e36freak: ln -s "/path/to/$(date +%d)" linkname
17:32  e36freak: possibly
17:32  zarzar: but will that work when the date changes?
17:33  e36freak: that will link to a folder with the current date
17:33  e36freak: you want the link to change?
17:33  e36freak: cron job
17:34  zarzar: hmm alright thanks
17:36  EvilSushi: awesome i figured out how to add randomness to my scripts
17:37  EvilSushi: RANGE=240
17:37  EvilSushi: rand=$RANDOM
17:37  EvilSushi: let "rand %=RANGE"
17:37  EvilSushi: sleep $rand
17:37  richardbronosky: I have a shell script that is intended to be sourced to add several functions to the global namespace. I have about 30 developers that use this. The script defines functions that automate many of our daily tasks. The script also includes numerous supporting functions that would be considered "internal" in most languages ( ie: _command_exists ). I don't like these things polluting the global space. Anyone have any clever patterns for better
17:38  unop: EvilSushi,  sleep $((RANDOM%240))
17:38  cthuluh: richardbronosky: the end of your message was truncated
17:38  cthuluh: richardbronosky: and... no
17:39  EvilSushi: unop: what does the double (( do?
17:39  unop: !$((
17:39  greybot: $((...)) is an arithmetic substitution. After doing the arithmetic, the whole thing is replaced by the value of the expression. See <http://mywiki.wooledge.org/ArithmeticExpression>.
17:43  EvilSushi: unop: how could i make it echo the random time it is sleeping?
17:44  sente: num=$((RANDOM%240)); echo $num; sleep $num; ?
17:45  TheBonsai: y0
17:51  richardbronosky: can a bash function contain local functions?
17:51  cthuluh: yes
17:52  richardbronosky: I see lots of examples of local variables, but no local functions.
17:53  ikla: whats &gt do?
17:54  richardbronosky: ikla: render > in a browser?
17:54  richardbronosky: (HTML entity)
17:54  cthuluh: richardbronosky: oh, no. sorry, I misread your question
17:54  richardbronosky: -gt is a > test for use in [[ ... ]]
17:55  TheBonsai: richardbronosky: i don't think function scope can be altered
17:55  e36freak: but better to use (( foo > bar ))
17:55  TheBonsai: (except export)
17:57  Mowee: Hello
17:57  TheBonsai: m00
18:13  crankharder: anyone know why after I split a file all the new filenames begin with 'x' ? -- i dont see anything about that in the man page, and wonder if that's always the case
18:14  Naib: exact command syntax you used
18:15  Naib: oh crankharder read the man page...
18:15  crankharder: split -l 1000 filename
18:15  Naib: 1st line in DESCRIPTION
18:15  Naib: Output  fixed-size pieces of INPUT to PREFIXaa, PREFIXab, ...; default size is 1000 lines, and default PREFIX is `x'.  With
18:15  unop: crankharder,  split [OPTION]... [INPUT [PREFIX]]
18:15  unop:    # hint is with PREFIX
18:15  unop: the irony with "crankharder" :)
18:15  crankharder: i dont have that :(
18:16  likewhoa: use a better distro then
18:16  Naib: ^
18:16  Naib: prob arch with their lack of man
18:17 --- retrospe1tacus is now known as retrospectacus
18:21  fas3r: hello
18:22  fas3r: can i redirect a command in a "while read line", like this : (i dont see my error) : while read line; do echo "result : " $line; done < echo "SELECT * FROM vmstatus ORDER BY vmid;" | mysql -A -uvmstat -hlocalhost -pdrs4ce69 -Dvm_manager
18:23  kojiro: echo doesn't work that way
18:23  fas3r: kojiro: ha ... :/
18:23  fas3r: any idea :/
18:23  erUSUL: !<(
18:23  greybot: Process Substitution -- <(cmd) and >(cmd) -- see http://mywiki.wooledge.org/ProcessSubstitution , or http://mywiki.wooledge.org/BashFAQ/024 for a common use
18:23  kojiro: mysql -A -uvmstat -hlocalhost -pdrs4ce69 -Dvm_manager <<< "SELECT * FROM vmstatus ORDER BY vmid;" | while read...
18:24  kojiro: if it's more comfortable, you can put the herestring (<<< "SELECT...") at the beginning of the line
18:24  kojiro: fas3r: ^
18:25  fas3r: hooooo many thanks kojiro  :D
18:25  kojiro: fas3r: no problemo
18:25  kojiro: or should I say, "until the next problemo!"
18:26  fas3r: :D
18:26  fas3r: i hope not :D
18:26  fas3r: but many thanks :D
18:37  linguini: log_it() { echo "$@" | read -e line ; echo $line >>/tmp/log; $line } # what's wrong with this?
18:38  nDuff: !faq disappear > linguini
18:38  greybot: linguini: http://mywiki.wooledge.org/BashFAQ/024 -- I set variables in a loop. Why do they suddenly disappear after the loop terminates? Or, why can't I pipe data to read?
18:38  nDuff: linguini, ...also, WHY?!
18:38  nDuff: linguini, what effect is that echo | read supposed to have?
18:38  nDuff: linguini, ...that you can't get by just doing the initial echo "$@" >>/tmp/log...
18:39  nDuff: linguini, ...also, you're re-opening the log file every time you want to log something to it
18:39  linguini: nDuff: Ha.  Good question.  I reduced this from something more complex.  Namely,
18:39  nDuff: linguini, ...which isn't exactly a picture of efficiency
18:39  e36freak: or printf "%s\n" "$@" >>/tmp/log
18:39  nDuff: well, that one's a bit different
18:39  linguini: nDuff: In the original case, the pipe doesn't go straight to read, it goes to a script that does "read".
18:39  nDuff: e36freak, ...there you're putting a newline between each parameter...
18:40 * nDuff would probably use something thus if he needed more explicit logging: printf '%q ' "$@"; printf '\n'
18:40  e36freak: nDuff: that isnt what he was doing?
18:40  nDuff: e36freak, ...his code was letting echo put the whitespace between the arguments
18:40  e36freak: right... *shrug*
18:41  nDuff: linguini, ...anyhow, the other issue is that you're re-opening your log file for every statement. If you don't want to do that, just open  it once up-front, ie. exec 99>/tmp/log, and then redirect >&99 on your log statements.
18:43  linguini: nDuff: Thanks.  I didn't think about that.  I've not seen '%q' before, but perhaps it will fix my problem.
18:43  nDuff: linguini, ...err, other than what we already pointed out, what *is* your problem?
18:43  linguini: nDuff: log_it prog "arg with space"
18:43  nDuff: linguini, (you read the linked FAQ entry, right?)
18:43  nDuff: ahh, yup, %q is just the thing, then, if you want to be able to distinguish the whitespace.
18:44 * linguini reading
18:44  pielgrzym: hi :) I di "set -o vi" to use vi style editing. How to bind ^P ^N the emac way? bind "\C-p": previous-history did not help
18:46  taylanub: pielgrzym: the  '"\C-p": foobar' stuff has to be passed as one argument
18:46  taylanub: pielgrzym: i.e. single-quote it, just like in my post
18:47  TheBonsai: just like bind -p displays it
18:47  TheBonsai: er
18:47  TheBonsai: nah
18:47  pielgrzym: taylanub: bind -m vi-insert 'Control-n: next-history' - this works :)
18:48  taylanub: pielgrzym: this should too:  bind '"\C-p": previous-history'
18:48  taylanub: and i just learned of the 'bind' command and how to use it in 20 seconds by reading ''help bind''.  good old RTFM
18:50  pielgrzym: taylanub: thanks :)
18:51  pielgrzym: ok, I'm forcefully converting from zsh - there is this feature in zsh of directory expansion, say you type: cd /v/l/au and hit tab it expands into cd /var/log/audit (or gives options to). Is it possible to mimic this behaviour in bash?
18:53  taylanub: i really don't think that's possible in bash, but i might be wrong
18:54  pielgrzym: this is the only feature of zsh I'll really miss then :)
18:54  fas3r: kojiro: well im back again :/ this is my script : http://pastebin.com/JARfBGGJ .. my problem is the script execute just one time the ssh command :/ if you have an idea :/
18:55  taylanub: is there a common environment variable for the preferred X terminal emulator? i think i've seen "VTERM" somewhere, no idea how standard that is
18:55  taylanub: !` > fas3r
18:55  greybot: fas3r: The backquote (`) is used in the old-style command substitution, e.g. foo=`command`. This syntax is deprecated in favor of foo=$(command). Backslash handling inside $() is less surprising, and $() is easier to nest. See http://mywiki.wooledge.org/BashFAQ/082
18:56  taylanub: !quotes
18:56  greybot: "USE MORE QUOTES!" They are vital. Also, learn the difference between ' and " and `. See <http://mywiki.wooledge.org/Quotes> and <http://wiki.bash-hackers.org/syntax/words>.
18:56  fas3r: taylanub: ha yes i need to change it too... but if i add a & at the end of the line with the ssh .... it work ...
18:57  taylanub: you need 'read -r' if you have lines that possibly end with '\'
18:58  fas3r: taylanub: it's the same ...
18:58  taylanub: the awk print $1 thing is useless. 'read' can do splitting itself.
18:58  taylanub: fas3r: when the input changes, it might not be the same
18:59  taylanub: in bash you should prefer [[ over [
18:59  Daskreech: pielgrzym: How does it handle having multiple options for each of v l and au ?
19:00  hotwings: does dash have any advantage over bash?
19:00  taylanub: http://pastebin.com/UtA0UZA1 fas3r
19:00  Daskreech: hotwings: It's fast?
19:00  pielgrzym: Daskreech: it shows suggestions like usual tab expand would, for each level of dir deph :) funny thing is that it's quite rare and this becomes a nice quick-search tool :)
19:01  hotwings: is it?
19:01  Daskreech: pielgrzym: ha you should see my file structure. Apparently I'm real limited when it comes to names
19:01  taylanub: hotwings: dash is minimal (POSIX plus very few "BSD extensions"), thus faster
19:01  pielgrzym: Daskreech: hehe, yeah - it works for me though ;)
19:02  Daskreech: gratz
19:02  hotwings: looks like you make arrays differently in dash .. just tried running my script in it and no worky
19:02  taylanub: hotwings: it also depends on fewer libraries, and is smaller in size, so is nice for a barebones rescue system
19:02  f00bar80: e36freak, yea  i'm looking for the word _in_ the file not the file names
19:02  taylanub: hotwings: dash has no arrays
19:03  hotwings: ahh, gotcha
19:03  hotwings: i wonder why debian testing tried to change my default to it in that case
19:04  taylanub: hotwings: because a script that specifies "#!/bin/sh" SHOULD work with a POSIX-compliant shell, e.g. dash
19:05  taylanub: hotwings: when you specify /bin/sh but then use bash-specific features, that's an evil "bashism" and makes your script unusable on systems where /bin/sh happens to be something that isn't compatible with bash (which it definitely doesn't have to be)
19:05 --- Unknown[OFF] is now known as Unknown[NF]
19:06  hotwings: im in the habit of using #! /bin/bash but never knew the difference between the two until just now.  still seems strange that they'd make the default shell one that is so limited but whatever
19:06  hotwings: nothing stops anyone from using #! /bin/bash like i do already
19:06  taylanub: hotwings: it's not "limited". it has everything (almost) that a standard system must have
19:07  taylanub: hotwings: exactly, just explicitly specify /bin/bash
19:07  e36freak: f00bar80: still no good? do you have GNU grep?
19:07  hotwings: i couldnt live without arrays.  really cool that newer bash has associative arrays
19:08 * taylanub AFK
19:08  f00bar80: e36freak, yea
19:08  linguini: nDuff: Thanks.  That indeed fixes the problem (along with using "read -a".
19:09  e36freak: grep -R string *, or shopt -s globstar and grep **/*
19:09  fas3r: it's the same taylanub
19:09  e36freak: f00bar80: grep -l will also only show you the names of the files with the pattern in it
19:09  linguini: Is there a bot in this channel that evaluates shell code?
19:09  grop: # echo yes
19:09  e36freak: # echo "yes"
19:10  evalbot: grop: yes
19:10  evalbot: e36freak: yes
19:10  Josay: :)
19:10  e36freak: sh# echo "also this"
19:10  shbot: e36freak: also this
19:10  crimeboy: # read this
19:10  sente: my first program was a tictactoe program in c, I remember opting to use varables nine variables: a b c d e g h i j, instead of having to "deal with" an array to hold the game state
19:10  evalbot: crimeboy: no output within the time limit
19:10  crimeboy: # read this
19:10  crimeboy: lala
19:10  evalbot: crimeboy: no output within the time limit
19:10  linguini: # { printf '%q ' 'one 1' two ; printf "\n" ; } | { read -a line; ruby -e 'puts ARGV' "${line[@]}" ; }
19:10  evalbot: linguini: bash: ruby: command not found
19:10  linguini: Doh
19:11  e36freak: only bash/sh
19:11  e36freak: !evalbot
19:11  greybot: evalbot runs each session in a new VM as root. Feel free to play with, or hack, the bot in #evalbot or look at it more closely on http://www.vidarholen.net/contents/evalbot/
19:11  linguini: Looks nifty.
19:13  linguini: # { printf '%q ' 'one 1' two ; printf "\n" ; } | { read -a line; printf '%s\n' "${line[@]}" ; }
19:13  evalbot: linguini: one 1
19:13  evalbot: linguini: two
19:13  linguini: Yay
19:20  f00bar80: e36freak, not working
19:21  pgas: f00bar80: what's not working? what's the problem?
19:27  f00bar80: how i search a word in all files in sub directories in the CWD ?
19:28  pgas: grep -r blah .
19:29  pgas: or grep -r blah ./*/ # if you want to exclude the files directly under .
19:30  xenyl: I have had yet another bash enlightenment day today
19:30  xenyl: it seems like i like this shell so much that when I started doing my own shell for kicks i reimplemented it in a few hours doh :P
19:38  e36freak: # mkdir foo; echo "foo" > foo/bar; echo "blah" > foo/baz; grep -R foo *
19:38  evalbot: e36freak: foo/bar:foo
19:39  e36freak: clearly works
19:40  pgas: (though i'd use . not or ./*/ not *)
19:40  e36freak: details, it still works :P
19:41  pgas: yeah, people often try grep -R foo *.jpg, which doesn't work
19:42  e36freak: looking for "foo.jpg" ?
19:42 * Daskreech just found out about {n..n++}
19:42  Daskreech: Nifty for touching
19:42  sente: Daskreech: what's that?
19:42  e36freak: example please, good sir
19:42  pgas: ehe, well maybe not jpg, but searching all the .php files
19:42  e36freak: gotcha
19:42  yitz__: sente: touch file.{1..5}
19:42  Daskreech: sente: braces expansion
19:43  e36freak: oh, yeah
19:43  sente: ah, yes
19:43  e36freak: Daskreech: printf "%s\n" {a-z}{a-z}
19:43  sente: i thought it was something magical with variables and the increment operator
19:43  sente: some shit which bash will clearly chock at
19:44  e36freak: erm
19:44  e36freak: s/-/../g
19:45  e36freak: too used to regex
19:46  pgas: ksh# n=5;echo {10..$n..2%02d}
19:46  Daskreech: e36freak: Aww thought that it might have pretty colours based on what letter it was :)
19:47  pgas: 4# ksh93 -c 'n=5;echo {10..$n..2%02d}'
19:47  shbot: pgas: bash4: ksh93: command not found
19:47  pgas: # ksh -c 'n=5;echo {10..$n..2%02d}'
19:47  evalbot: pgas: 10
19:47  pgas: # ksh -c 'n=5;echo {10..$n..-2%02d}'
19:47  evalbot: pgas: 10 08 06
19:47  pgas: ah!
19:47  e36freak: aHA!
19:48  crimeboy: # uname -a
19:48  evalbot: crimeboy: Linux bunnies 2.6.27.6 #9 Sat Nov 15 16:44:53 CET 2008 i686 Pentium II (Klamath) GenuineIntel GNU/Linux
19:51  e36freak: old kernel is old
19:53  _pingu: What does recode with invalid characters? for instance by a utf8 to latin1 conversion. I cannot see it in the info or man page. maybe I'am looking for the wrong keywords.
19:54  darkkrai: can someone help me with my proxy function in my bashrc?
19:54  darkkrai: http://pastesite.com/20992
19:54  darkkrai: Error parsing proxy URL http://host:port/: Bad port number.
19:55  taylanub: darkkrai: what's "@port" ??
19:55  darkkrai: I'm trying to make variables >.>
19:55  e36freak: yeah, i think that @ needs to be a $
19:55  darkkrai: I'm sort of new to this
19:55  e36freak: !guide > darkkrai (read this!)
19:55  greybot: darkkrai (read this!): http://mywiki.wooledge.org/BashGuide
20:00  darkkrai: e36freak, I changed it, but it's still not working ;w;
20:00  darkkrai: I want to ask myself the host and port
20:00  darkkrai: and insert it into export http_proxy
20:01  nDuff: !exact > darkkrai ("changed it" doesn't tell us what you changed it to, and "not working" isn't very helpful either)
20:01  greybot: darkkrai ("changed it" doesn't tell us what you changed it to, and "not working" isn't very helpful either): Please tell us EXACTLY what you typed, and EXACTLY what the error is.
20:01  e36freak: also, dont do "function foo() {", just "foo() {"
20:03  e36freak: darkkrai: what exactly do you type to export them manually?
20:04  darkkrai: http_proxy="http://10.252.128:8888"
20:04  darkkrai: export http_proxy
20:04  darkkrai: but, I want to be able to change it everytime
20:04  darkkrai: in case I'm somewhere else with a different proxy
20:05  e36freak: http://pastesite.com/20994 see what happens
20:06  e36freak: and if it doesnt work, i want the error verbatim
20:06  sente: try using the CaSe??
20:07  darkkrai: works
20:07  e36freak: sente: hmm?
20:07  darkkrai: thanks :)
20:08  e36freak: sente: is your name a Go reference?
20:08  sente: e36freak: yes
20:08  e36freak: good shiz
20:08  sente: yes, i have gote accounts, for screwing around with :)
20:08  e36freak: i havent played go in a while
20:08  sente: if you ever want a game
20:08  sente: i'd be happy to KGS it up
20:08  e36freak: probably kick my ass
20:09  e36freak: you can play my friend pat, he's what... 3 dan now?
20:09  sente: well we can handicap it as needed
20:09  sente: well pat would kick my ass
20:09  e36freak: mine too. with 9 stones
20:09  sente: i love losing with 9 stones
20:09  sente: because i'm good to know it shouldn't happen
20:10  sente: and it's enjoyable to watch my moyo unfold before my eyes
20:10  e36freak: i was like... 10-13 kyu
20:10  e36freak: its been a couple years since ive played though
20:10  sente: oh good
20:10  sente: maybe i could give you 9 stones too
20:10  sente: handicap games are fun
20:10  e36freak: haha
20:10  sente: i was 2kyu, but stopped 2 years
20:11  sente: did you play on KGS? i played a bunch of KGS, mostly blitz games
20:13  e36freak: little bit
20:14  e36freak: i enjoy playing in person a lot more
20:14  sente: yeah it's nicer for sure
20:14  sente: i live right near a decently sized go club with a handful of dan players
20:15  e36freak: gotcha, i played at college
20:15  sente: haven't been in a a few yars though
20:15  sente: yeah, same here
20:15  e36freak: s/at/in/
20:17  sente: two pictures can more or less sum up my college
20:17  sente: http://sente.cc/stu/tmpfiles/college.html
20:18  e36freak: ...are you me?
20:18  e36freak: i played pool though, not poker
20:18  sente: big difference
20:18  e36freak: nice bub
20:18  sente: yeah it broke the stupidest way
20:19  sente: my friend was pissed and he slammed his fists down on his desk
20:19  sente: he had a glass desk
20:19  e36freak: awwww
20:19  e36freak: that sounds awesome
20:19  sente: it created just the right resonance to break the bubbler right in two
20:19  sente: it was so fuckin random
20:19  e36freak: that is so cool
20:20  sente: bullshit, i say!
20:20  sente: where do you live now?
20:20  e36freak: MD
20:20  sente: boston here
20:20  e36freak: ahh, my friend went to emerson
20:22  sente: yeah boston is cram packed with colleges
20:22  sente: well, boston/cambridge
20:22  sente: makes for a good atmosphere
20:22  e36freak: indeed
20:23  sente: i'm debating getting back into poker
20:23  e36freak: tis a good game
20:23  e36freak: i played it a lot in high school
20:23  e36freak: i enjoy pool a lot more though
20:23  sente: because what the hell, i'm unemployed, but in a good way
20:24  sente: and still have a money on the sites
20:24  sente: that's funny you compare them
20:24  e36freak: eh
20:24  e36freak: i play both for money
20:24  sente: i mean, i enjoy volleyball a lot more
20:24  sente: and that's what i do most nights
20:24  sente: but i dont compare to poker
20:24  e36freak: i play both in tournaments
20:24  sente: ah, playing for money, solid
20:24  e36freak: or did
20:24  sente: i suck at pool
20:25  e36freak: physics
20:25  e36freak: all physics
20:25  sente: and couldn't bluff my way out of a shitty situation
20:25  sente: heh, no
20:25  e36freak: sure
20:25  sente: it's all patience
20:25  e36freak: eh
20:25  sente: and controlling the desire to hit the ball really hard
20:25  sente: <--- not a legit pool player
20:25  e36freak: technique, and physics
20:25  e36freak: english, throw, deflection
20:26  sente: LAG, Loose AGressive
20:26  sente: that's all online poker requires
20:26  e36freak: haha
20:26  sente: funny how things can be summed up so easily
20:26  sente: but pool is more a sport
20:26  e36freak: i suppose
20:26  sente: there isn't the psychology aspect
20:26  e36freak: sure there is
20:26  sente: or 'wits' i guess
20:27  e36freak: just not as much
20:27  sente: hm, yeah i take that back
20:27  sente: right
20:27  sente: it's not as much of a mind game
20:27  e36freak: plenty of thinking
20:27  sente: poker theory interested me for awhile
20:27  e36freak: i plan out the whole table before my first shot
20:27  sente: but then i got really into go
20:27  sente: go is what killed poker for me
20:28  sente: yeah you're like a 4dan pool player and i'm 17 kyu
20:28  e36freak: haha
20:28  sente: if i have to hit a wall i'm screwed
20:28  e36freak: heh
20:28  sente: it mostly is patience and apathy
20:28  sente: i never play with serious people
20:28  e36freak: yeah
20:28  sente: so its not competitive
20:28  e36freak: i suck when i just play with friends
20:29  e36freak: well, relatively
20:29  sente: i'm right handed and left eye dominant
20:29  sente: iono if that would screw with my potential
20:29  e36freak: use both eyes
20:29  sente: i know it does for shooting
20:29  ritzt3ch:  is there a way to connect to a sql server on another box to pull data needed on a one line statment
20:29  e36freak: !nabq
20:29  greybot: Not A Bash Question. Ask the channel that supports your software, hardware, or OS.
20:29  sente: hey hey, we're talking about POOL here
20:29  sente: i love irony and all things related
20:30  sente: ritzt3ch: ssh user@server 'mysql -output=csv blah blah blah blah' > dataset.csv
20:31  nDuff: ssh root@host sqlite3 myfile.sqlite 'select * from blah'
20:31  nDuff: (hey, he didn't specify _which_ SQL server)
20:31  greycat: Err....
20:31  greycat: You *probably* want \* or something there....
20:32  sente: nDuff: which is why i made sure my "mysql -output=csv blah blah blah blah" was not going to remotely close for any of them :)
20:32 * cthuluh smells Access / SQL server coming...
20:32  e36freak: haha
20:32  e36freak: access
20:32 --- Nemphilis is now known as Guest4403
20:33  nDuff: greycat, oh, right, SSH unquoting, right
20:36  ritzt3ch: haha thanks ;)
20:38  ritzt3ch: what if i dont have ssh access just sql user/pass
20:39  mahogany: Hello folks
20:39  greycat: Not seeing the bash question here.
20:39  ritzt3ch: im pulling my data from a gui query express program but want to go from bash
20:39  greycat: I very much doubt that bash can do this.  It will probably have to invoke some sort of DB client program.
20:40  ritzt3ch: hmmm okie
20:41  mahogany: On one of the machines at work my regular user has a few aliases, e.g. alias e='mcedit'. When I 'sudo bash' on this machine, the alias 'e' is still available. On this machine, when I 'sudo bash' all aliases are gone. I've googled like crazy without luck trying to find the reason for this behavior.
20:41  greycat: !dotfiles
20:41  greybot: http://mywiki.wooledge.org/DotFiles or - for a technical explanation - the INVOCATION section of man bash.
20:41  greycat: Make sure you put the aliases in .bashrc and NOT in something like .bash_profile
20:42  mahogany: They're in /home/user/.bashrc
20:42  greycat: "user" being the user you're sudoing *to*?
20:42  greycat: or does sudo not reset $HOME?
20:42  jordanm: mahogany: so put them in /root/.bashrc. also, it sounds like you are looking for "sudo -i"
20:43  jordanm: greycat: there was a recent change regarding that in debian. no telling, and could vary among OS's
20:43  e36freak: mahogany: alias sudo="sudo " # will allow aliases to be expanded
20:43  greycat: huh?
20:43  e36freak: "huh?" at me? the space at the end allows alias expansion, not exactly sure why
20:44  djoef: Hi, I made a variable $myVar which I can cd to, it is stored in .bashrc , now I would like to do cd $myVar/fo<TAB> to autocomplete. I have cdable_vars set to "on" and run version 4.1.5
20:44  greycat: e36freak: I believe you'll find that has no effect.
20:44  e36freak: greycat: seen it work plenty of times
20:44  djoef: anyone knows how to to that ?
20:44  greycat: e36freak: something else was responsible.
20:44  e36freak: greycat: that's all i did to make it work
20:46  e36freak: mahogany: try adding that to ~/.bashrc and tell me if it works
20:46  Kronuz: hey, is there a way I can get the full absolute path of a file in the current directory?
20:46  sente: Kronuz: if you readlink, readlink -m file
20:46  greycat: $PWD/filename is as close as you're likely to get, apart from $(pwd -P)/filename possibly.
20:47  e36freak: greycat: http://www.shellperson.net/using-sudo-with-an-alias/
20:47  e36freak: (yes, i know !crap)
20:48  Kronuz: sente: my readlink doesn't have an -m option :(
20:48  cthuluh: that's a nice thing to know. if only I were using aliases 8)
20:48  greycat: e36freak: oh, you're counting on the *unprivileged* shell to do the alias expansion...
20:48  cthuluh: Kronuz: try -f
20:49  greycat: that's... well, I didn't know about that "feature", but still...
20:49  gniourf_gniourf: wow that's a crazy feature for alias freaks
20:49  Kronuz: nopeâ€¦ -f is not thee either
20:49  djoef: is it possible to autocomplete with custom vars ?
20:49  sente: hmm, mine's dirty, Kronuz: GNU coreutils 6.9.92.4-f088d-dirtJanuary 2008
20:49  greycat: And it will not work at all if you're doing something like sudo -x -y -u someuser ll
20:49  cthuluh: Kronuz: realpath?
20:49  e36freak: greycat: perhaps not the best idea, but it works
20:49  Kronuz: I'm using Mac and FreeBSD
20:49  csabo: sup e36freak
20:49  greycat: It only "works" in limited situations.
20:50  sente: oh i have no idea
20:50  Kronuz: no realpath either
20:50  e36freak: fair enough
20:50  greycat: But thanks for showing me something I didn't know about even if it's crap. ;-)
20:50  sente: i hated the few times i had to use macs
20:50  sente: nothing i was used to worked
20:50  e36freak: dont mention it :)
20:50  sente: even file formats and encodings were a pain
20:50  sente: ugh
20:50  greycat: sente: I'm guessing you'd really hate commercial Unix systems, then...
20:51  sente: define 'commercial'? i dont know what that means
20:51  jordanm: solarus, hp-ux, etc
20:51  greycat: AIX, HP-UX, Solaris, SCO Unix, ...
20:51  sente: ah, heh ,yes
20:52  sente: i dealt with them a few times
20:52  sente: our snapshot server and some other random machine
20:52  sente: not enjoyablne
20:52  csabo: sente feel my pain, i'm AIX sys admin :)
20:53  sente: macs bring it to the next level though, because i hate their marketing/style and pretentiousness
20:53  csabo: macs _are_ better steve said so.
20:53  e36freak: haha
20:53  cthuluh: too bad I ain't got enough money to buy this kind of crap... 8)
20:54  sente: can you even close windows/minimize windows/dialogues on a mac without using the freakin mouse?
20:54  sente: on windows, the escape key, or alt+f4 pretty much closes eerything
20:54  sente: but on a mac i have no idea how to close random pop up boxes with stupid options without using the mouse
20:54  csabo: yes, you can on..
20:54  sente: how?
20:54  lazyliberal: maybe apple key + f4
20:54  csabo: so you say it sucks
20:55  csabo: because you dont know how to use it?
20:55  cthuluh: sente: I heard you can use "any" window manager on OSX
20:55  csabo: OSX's UI is hands down better than windows
20:55  greycat: Microsoft requires keyboard shortcuts for everything.  One of the few things they did right.
20:55  sente: csabo: oh, i could actaully talk for a long while, in seriousness, about my issues with the macs
20:55  csabo: even if it were uglier, at least its consistant
20:55  e36freak: greycat: well said
20:55  mahogany: Eureka! Defaults env_keep = * did the trick. :)
20:55  sente: but i do admit, i'm not a power user, i'm a noob user
20:56  sente: and was very disappointed by the difficulty i encountered when using the terminal
20:56  csabo: sente ive owned a macbook for 4 years now
20:56  csabo: got a good deal on it, couldnt pass it up
20:56  csabo: osx is quite nice
20:57  sente: yeah, i have some smart friends who also really like them, i know i'm in the minority here
20:57  sente: i tend to always try and do things as fast as i can
20:57  csabo: i'm nothing compared to the websphere and DB2 guys here @ work
20:57  sente: for no reason really, but i open/close shit and navigate and <whatever> super fast
20:57  csabo: they both have MBPs (work provided)
20:58  csabo: and they never use the mouse
20:58  sente: and i windows can be very accomodating for that, with cygwin of course
20:58  sente: i don't feel like macs could be as fast
20:58  csabo: they have a handful of term windows open, with like 5 tabs on each
20:58  csabo: back and forth they fly
20:58  sente: there's gotta be good ways to do all that stuff on a mac, yeah
20:58  sente: i just dont know them
20:58  cthuluh: sente: try any unix with ratpoison, xterm and screen/tmux
20:58  sente: like how to alt+tab through all the possible terms
20:59  sente: and being able to make a new term without spawning it 'from' an older one
20:59  sente: chilicui1: hmm, someday i will
20:59  cthuluh: fine :)
21:00  sente: right now i'm strictly windows XP, which runs firefox and  mp3s, and then everything else i do i do from putty
21:01  cthuluh: so you have no reason to keep using windows XP. anyway, enough OT for today 8)
21:01  djoef: anyone knows how to TAB complete cdable_vars deeper than the var itself ? (eg export myvar=/foo/bar ; cd $myvar/ba<tab>) to go to /foo/bar/bar/
21:02  djoef: and even without dollar sign if possible, so : cd myvar/ba<tab> results in cd /foo/bar/bar/
21:03  greycat: djoef: err, for me, x=/usr/lib <enter> cd $x/<tab>  expands the $x and then further tab completions operate from that
21:03  greycat: And  cd $x/X1<tab>  also expands it.
21:04  djoef: greycat here this doesn't work, I have version 4.1.5
21:04  greycat: Works for me in 4.1.7 which is the closest to 4.1.5 I have at the moment.
21:05  greycat: I pruned a lot of older-patch releases last month.
21:06  djoef: greycat, could it be I need to change a setting ? (i have cdable_vars = on in shopt)
21:06  greycat: I am not using any oddball settings, so I guess it's possible that one of them broke it.
21:08  djoef: hmmz :(
21:08  djoef: is it likely that it is because of 4.1.5 vs 4.1.7 ?
21:08  greycat: *shrug*
21:09  greycat: You could read the 4.1.6 and 4.1.7 patches and see what they do.
21:09  djoef: anyone else here has an idea ?
21:09  greycat: You could TRY IT.
21:09  djoef: greycat, ill have a look
21:09  djoef: greycat, ill do, thanks..
21:10  djoef: its just that i am not SO familiar with linux and don't want to mess up.. (need the time badly)
21:10  greycat: *sigh*
21:10  greycat: The *easiest* test would be to make a brand new user account with no .bash* files at all and see if it works there.
21:12  e36freak: works here on 4.1.9
21:14  djoef: I am doing "sudo apt-get upgrade bash"
21:14  djoef: its downloading
21:14  greycat: err...
21:14  djoef: ?
21:15  greycat: Is that some Ubuntu extension?
21:15  e36freak: greycat: thats the ubuntu package manager
21:15  e36freak: unless youre referreing to "upgrade", in which case i have no clue
21:15 --- venmx is now known as venmx_
21:15  greycat: No, I mean, the ability to put a package NAME after "apt-get upgrade" which upgrades ALL packages.
21:15  e36freak: ahh
21:16  greycat: Maybe it simply ignored the extra word on the end and is upgrading everything anyway.
21:16  sente: ssh bagel w
21:16  e36freak: djoef: i just made a new account. x=/etc/X11/; $x <tab> does not work but $x/ <tab> does
21:16  sente: heh and that would be a wrong window
21:17  greycat: Yes, you need the / on the end.
21:17 * erUSUL reports that does no works here in 4.1.5 ( ubuntu lucid )
21:18  djoef: well here even that doesn't work
21:18  e36freak: silly out of date ubuntu :P
21:18  djoef: i tried before, even with the first letter(s) :)
21:18  greycat: I think the word you're looking for there is "broken", not "out of date", since this also works in 3.2.39 on Debian 5.0.
21:18  e36freak: interesting
21:19  e36freak: unless its an issue specific to 4.1.5
21:19  greycat: Patch-ID:       bash41-006    Bash did not correctly print/reproduce here documents attached to commands inside compound commands such as for and while.  ...
21:19  djoef: after sudo apt-get upgrade bash, when running /bin/bash --version, i still get 4.1.5
21:19  greycat: Patch-ID:       bash41-007    A typo caused bash to not honor a precision specification in a printf format.
21:19  e36freak: djoef: yeah, ubuntu != rolling release
21:19  e36freak: djoef: ubuntu does not upgrade the repos as stuff comes out
21:20  greycat: I don't think either of those patches is likely to affect this.
21:20  djoef: ok so but still 4.1.5 is not "that old"
21:20  djoef: and apparently it works in earlier versions
21:20  e36freak: this is true. its either a 4.1.5 issue or an ubuntu isssue
21:20  djoef: so my installation is "broken" ?
21:20  greycat: Sounds like Ubuntu introduced a bug in their patching.
21:20  e36freak: im inclined to believe the latter
21:21  djoef: ok, so there is no obvious solution here ?
21:22  djoef: ill just live with it for now, .. to bad though
21:22  e36freak: either look for ubuntu patches, or compile a different version of bash
21:22  erUSUL: with echo the var is resolved with cd is not unless you quote it in which case it works ....
21:22  e36freak: that doesnt have silly ubuntu patches everywhere
21:22 * erUSUL o.0
21:23  erUSUL: Â« cd "$x"/<tab> Â» works i get Â« cd /etc/ Â» -- Â« cd $x/<tab> Â» no joy
21:23  djoef: hehe indeed
21:23  greycat: weird.
21:23  greycat: erUSUL: is that also on Ubuntu's 4.1.5?
21:23  djoef: but what's the point to make a shortcut :)
21:23  erUSUL: yes
21:23  greycat: seems we've isolated the problem
21:24  e36freak: i concur
21:24  djoef: erUSUL, this works indeed, but is there a solution avoiding the quotes (doesn't type easily)
21:24  mahogany: join ##xsl
21:24  mahogany: Silly stupid keyboard, Sorry. :)
21:24  erUSUL: on the other hand  Â« echo $x/<tab> Â» works i get Â« echo /etc/ Â»
21:25  erUSUL: djoef: well the "know it all" here think is a weird bug; so i do not think there is a solution
21:25  greycat: Have you filed a bug report with your distribution yet?
21:25  djoef: erUSUL, indeed, and actually the final result should be : cd myvar/mysubd<tab> (without $)
21:26  e36freak: i gave one... compile a newer non-ubuntu-patched version of bash
21:27  greycat: if you do that, please be sure to install it in /usr/local/bin, and don't replace the one in /bin
21:29  djoef: OK ill just live with it for now.. (asking it in #ubuntu for one last chance ;) )
21:29  djoef: anyway, thanks all !
21:30 --- y3llow_ is now known as y3llow
21:31 --- cuba33ci_ is now known as cuba33ci
21:37 --- ^silence^ is now known as snL20
21:46 --- e-DI0-t is now known as e-DIO-t
21:55  abrotman: Is there a method to make grep stop looking for a match when it reaches a certain other string/key?
21:55  falconindy: abrotman: -m
21:55  abrotman: no, i don't want the first one
21:55  falconindy: then use 2
21:55  falconindy: or 3
21:55  greycat: sounds like you need awk
21:56  falconindy: or sed
21:56 --- streuner__ is now known as streuner
21:56  greycat: awk '/bad/{exit} /good/{print}' or similar
21:56  abrotman: I'm saying, if line 315 has "asdf" and the file may or may not contain "qwerty" before line 315, i only want it to match if it appears before it finds "qwerty"
21:56  abrotman: the file will always have the key ..
21:56  abrotman: the stop key
21:56  falconindy: then follow greycat's suggestion
21:57  abrotman: I'm not sure how if it applies?
21:57  greycat: /bad/ and /good/ are the patterns...
21:57  abrotman: the file will always have the key "qwerty" somewhere in the file, and the "asdf" may or may not be before "qwerty" .. I only want matches where "asdf" appears before "qwerty"
21:58  greycat: awk '/qwerty/{exit} /asdf/{print}'
21:59  abrotman: isn't that going to search for "qwerty" on the file, and if it appears, exit?
21:59  abrotman: in the file
21:59  e36freak: just do it, it works
22:00  greycat: It searches each line for each pattern.
22:00 --- foocraft is now known as Zarniwoop
22:00  abrotman: ah, not the file as a whole
22:07  queso: How can I echo a message like "Doing something..."  then do another command and finish it with "done.(newline)"
22:07  nDuff: queso, printf "Doing something..."; ...whatever...; printf "done.\n"
22:08  greycat: printf "doing something... "; foo; echo "done."
22:08  queso: Thanks
22:08  nDuff: (there's also echo -n, but ewww)
22:08  greycat: or echo -n if you insist
22:08  queso: What's best practice?
22:08  greycat: printf
22:08  e36freak: !printf > queso
22:08  greybot: queso: The printf command: http://bash-hackers.org/wiki/doku.php/commands/builtin/printf
22:09  queso: I'll use that.
22:09  queso: Sweet, thanks guys.
22:12  queso: Is there a nice way to get a notice on progress of tar/bz2-ing a directory?
22:12  greycat: probably not
22:12  e36freak:  --checkpoint
22:12  greycat: ... which program has that option?
22:13  e36freak: tar
22:13  e36freak: ( just man'd it and /progress )
22:13  greycat: Interesting... especially since it doesn't match "progress" in Debian 5.0.
22:13  e36freak: hmm
22:14  greycat: Maybe yours does more stuff.  Or at least it's documented differently.
22:14  e36freak: possibly
22:14  queso: I'm on ubuntu and tar has --checkpoint.
22:14  e36freak: tar 1.25
22:14  greycat: deb 5 has 1.20
22:16  queso: So if I post a script could you give newbie script-writing tips?
22:16  f0ster: Probably
22:17  sente: you'll get some form feedback for sure
22:17  queso: It's rather simple: http://paste.pocoo.org/show/314887
22:17  sega011: hey
22:18  sente: it seems like it should work
22:18  sente: though not overly elegant and polished
22:18  sega011: how can i retrieve the contents of a variable based on the value of another variable with the same name as the content?
22:19  sente: stu@sente ~ $ town=PWD; echo ${!town};
22:19  sente: /home/stu
22:19  sega011: for example: 2=thisvariwant ; thisvariwant=contentiwant ; echo ${$2} to get thiscontentiwant
22:19  sente: sega011: that's for you
22:19  sega011: let me try that
22:19  sente: please do
22:19  e36freak: !varcaps > queso
22:19  greybot: queso: By convention, we capitalize environment variables (PAGER, EDITOR, SHELL, ...) and internal shell variables (BASH_VERSION, RANDOM, ...). All other variable names should contain at least one lowercase letter. Remember that variable names are case-sensitive; this convention avoids accidentally overriding environmental and internal variables.
22:20  e36freak: !umq > queso
22:20  greybot: queso: "USE MORE QUOTES!" They are vital. Also, learn the difference between ' and " and `. See <http://mywiki.wooledge.org/Quotes> and <http://wiki.bash-hackers.org/syntax/words>.
22:20  sega011: [sega01@blackmesa ~]$ lol=omg
22:20  sega011: [sega01@blackmesa ~]$ omg=epicwin
22:20  sega011: [sega01@blackmesa ~]$ echo ${!omg}
22:20  sega011: didn't work :-/
22:20  sega011: oh, my bad
22:20  e36freak: haha
22:20  sega011: :-O thank you!
22:21  sega011: did ${!omg} instead of ${!lol}
22:21  e36freak: yep
22:21  e36freak: very rerely do you need to do that
22:21  e36freak: and you shouldn't unless you have to
22:22  sega011: i'm trying to keep my code simple. it's like an SSH login shortcut manager
22:22  sega011: i'll paste it in a sec
22:23  queso: e36freak: thanks for the tips.  could I just use all lowercase variable names?
22:24  queso: e36freak: is it bad to use DATE?
22:24  greycat: Yes.
22:24  queso: greybot: well I can't use date, can I?
22:25  greycat: As a variable name?  Absolutely.
22:25  queso: greybot: That's okay when there's a date command?
22:25  greycat: yes
22:26  queso: And where was I not using quotes where I should have been?
22:26  e36freak: generally you should quote anywhere you use a variable
22:27  queso: So instead of mkdir ${temp_dir} I should have mkdir "${temp_dir}" ?
22:27  e36freak: i would
22:28  geirha: !wordsplitting
22:28  greybot: echo $foo; rm $foo -- If you leave $foo unquoted, bash will *remove* all whitespace (newlines, spaces, tabs) while expanding it, take each *word* as a separate argument. `echo` prints these words separated by one space and `rm` deletes each word. So ALWAYS *quote* your parameter expansions: echo "$foo"
22:28  queso: And backup_dest=${HOME}/backup/vbox/ as backup_dest="${HOME}/backup/vbox/" ?
22:28  e36freak: http://paste.pocoo.org/show/314889/ something like that. theres still a lot of useless { }, but i left them where there might be some question
22:29  geirha: queso: wordsplitting and globbing does not occur during assignment, so backup_dest=${HOME}/backup/vbox/ is fine, but quotes does not hurt.
22:29  greycat: Word splitting and filename expansions are not performed when you do x=$y so it's safe to omit them there.
22:29  queso: whoops, above message was meant for greycat, not greybot :)
22:29  queso: greycat: Okay
22:29  queso: thanks again guys. :)
22:30  e36freak: just dont name functions the same as commands accidentally. i made a "continue" function when i was starting and didn't realize it. it should override, but not a good idea
22:31  queso: e36freak: heh, thanks for the tip
22:31  greycat: The worst is that bash has an "enable" builtin command, which conflicts with the SysV printer control command "enable".
22:32  e36freak: haha
22:32  e36freak: how does that work out?
22:33  strull: so "enable -n enable" to get around it :)
22:33  greycat: Well, you can type "/usr/bin/enable" or whatever....
22:33  e36freak: enable -n enable
22:33  e36freak: yeah
22:38  queso: I would like to display the size of the backup file after it's done without using ls -l . . how could I strip out the size?
22:39  greycat: !faq parsing
22:39  greybot: http://mywiki.wooledge.org/BashFAQ/087 -- How can I get a file's permissions (or other metadata) without parsing ls -l output?
22:39  queso: greycat: thanks 
22:39  e36freak: what would the use for tsort be?
22:40  greycat: Well, uh, my manual says "tsort is generally used in conjunction with the lorder command to sort the objects to be installed in a library by ar (see lorder(1) and ar(1))."
22:41  greycat: lorder(1) says "The symbol table maintained by ar allows ld to randomly access symbols and files in the archive, making the use of lorder unnecessary when building archive libraries (see ar(1))."
22:41  e36freak: i have nothing for lorder, and the man page doesnt reference it
22:41  greycat: *shrug*
22:49  sega011: here's my finished code: http://pastebin.ca/2038398
22:50  sega011: i think it's the coolest thing i've ever written in bash
22:50  sega011: or at least, cleanest
22:50  igli: ![[ > sega011
22:50  greybot: sega011: [[ is a bash keyword similar to (but more powerful than) the [ command. See <http://mywiki.wooledge.org/BashFAQ/031> and <http://mywiki.wooledge.org/BashGuide/TestsAndConditionals>. Unless you're writing for POSIX sh, we recommend [[.
22:51  kojiro: sega011: so does that mean you're not here for constructive criticism?
22:51  kojiro: ;)
22:51  igli: yo kojiro :) long time, man
22:51  sega011: haha
22:51  TheBonsai: y0
22:51  seanp2k: what is the best way for me to take a large text file (~1GB) and copy the lines from line 500,000 to the end of the file into another file?
22:51  sega011: suggestions are good
22:51  kojiro: igli: 'sup!
22:52  igli: HOMIES=$HOME; [ $XDG_CONFIG_HOME != "" ]&&HOMIES=$XDG_CONFIG_HOME # can be done with one expansion
22:52  kojiro: seanp2k: sed
22:52  geirha: seanp2k: sed -n '500000,$p' file > newfile
22:52  kojiro: seanp2k: something like sed '500000,$p'
22:52  kojiro: heh
22:52  seanp2k: kojiro: would sed read it into a buffer first, tho?
22:52  igli: usual crap kojiro :) i'm good tho, ta. happy new year!
22:52  Buglouse: Trying to keep functions (defined in .local/init.d/functions, sourced from .bashrc) while using sudo. I have tried ( -E ) option.
22:52  sega011: true, but i like keeping the width at 80 chars
22:53  geirha: !varcap > sega011
22:53  greybot: sega011: By convention, we capitalize environment variables (PAGER, EDITOR, ..) and internal shell variables (SHELL, BASH_VERSION, ..). All other variable names should be lower case. Remember that variable names are case-sensitive; this convention avoids accidentally overriding environmental and internal variables.
22:53  sega011: meh, i still like it :-P
22:53  sega011: i do like using variables in all caps like that. it's a convention i've learned with bash
22:53  e36freak: its wrong
22:53  kojiro: lies!
22:53  geirha: echo|cut can be done better with PEs
22:53  kojiro: you learn conventions from PEOPLE
22:54  geirha: !faq 100 > sega011
22:54  greybot: sega011: http://mywiki.wooledge.org/BashFAQ/100 -- How do I do string manipulations in bash?
22:54  kojiro: not from shells
22:54  jeward: I want to compare the files and directories in to directory trees.  I'm using debian which doesn't have dircmp.  Is there another way to do this easily?
22:54  kojiro: and the people here have better conventions, mkay? ;)
22:54  jeward: two directory trees
22:54  geirha: jeward: compare how?
22:54  sega011: i'm used to reading scripts from arch linux, like makepkg and the init scripts
22:54  e36freak: sega011: and theyre all crap
22:55  e36freak: sega011: im in the process of rewriting a lot of them, actually
22:55  jeward: geirha: Well, it's a collection of crontabs from 200 servers in this form: hostname/user
22:55  sega011: and there are better languages to use than bash if you're going to be nit picky ;-)
22:55  sega011: yeah, they aren't that great
22:55  kojiro: most scripts you'll find out there are crap
22:55  igli: homies=${XDG_CONFIG_HOME:-$HOME} # sega011
22:55  jeward: geirha: So I need to know if anything is missing or added or new?
22:55  sega011: igli: that's a nice change
22:55  e36freak: sega011: the majority of arch's system scripts are half-bash half-sh retards that arent correct for either
22:56  sega011: heh, i think they tried to make makepkg all sh compatible
22:56  e36freak: but it isnt
22:56  sega011: it's a weird mix
22:56  Hunterm: e36freak, i thought they were all posix compliant...
22:56  Hunterm: i was told that at least
22:56  e36freak: Hunterm: nope.
22:56  jeward: geirha: Each night every server sends in all it's crontabs and I want to report changes from one day to the next.
22:56  kojiro: most scripts out there are a hybrid of sh and bash ;)
22:56  Hunterm: aw
22:56  e36freak: Hunterm: and they use /bin/bash anyway, so they might as well be bash
22:56  Hunterm: well, yeah
22:56  pawpro: Does anybody have a one-liner (or more-liner) handy for .bash_profile PATH update? I need to assure the file exists and append new path without screwing up the existing content (possibly path definition)? Whatever I think of there is always a case it will fail (using opscode chef).
22:56  igli: if [ "$EDITOR" == "" ] -> if [[ -z $EDITOR ]] # sega011 -- try   help test  in a terminal. all those can be done inside [[
22:56  jeward: geirha: So I'll have yesterday's directory and then today's to compare.
22:57  sega011: igli: i thought -z was for files, or i had some funny behavior with it
22:57  sega011: is that because [ -z ] is files, [[ -z ]] is strings?
22:57  kojiro: jeward: why not base it on mtime?
22:57  igli: read:  help test
22:57  e36freak: -z checks if a variable is empty
22:57  e36freak: the opposite of -n
22:57  geirha: jeward: Well, there's diff -r prev/ new/  but it probably doesn't give the output you want.
22:57  jeward: kojiro: The crontabs are sent in each day to the collection server.
22:57  seanp2k: geirha: kojiro: yup, sed only took 1.8 seconds to read a 1GB file and spit out 93MB of output, so if it is buffering the file, it's doing it very quickly
22:58  kojiro: jeward: how? rsync?
22:58  sega011: right, ok
22:58  igli: and -n is default so [[ $variable ]] tests same as [[ -n $variable ]]
22:58  jeward: geirhsa: Let me test it, I have a test setup.
22:58  jeward: kojiro: e-mail.
22:58  e36freak: aye
22:58  kojiro: jeward: yikes.
22:58  e36freak: -f, -d, -e, etc are for files
22:58  e36freak: ...and directories
22:58  jeward: kojiro: just shows who runs what when.
22:59  jeward: geirha: Gives me the changes, but not in which files.
22:59  kojiro: jeward: if you set it up with rsync you can leave the mtimes of files that haven't changed unmolested, thus you'll have an elegant way of determining what changed when
23:00  queso: How can I get a "Continue? [Y/n] " prompt, where Y continues, and n quits?
23:00  geirha: jeward: depending on what implementation of diff you have, it may have options to show just that.
23:00  kojiro: and you'll know *historically* when the last change happened
23:00  jeward: kojiro: Getting these 200+ servers able to rsync to one place would be non-trivial. :-)
23:00  kojiro: queso: read -p "Continue? [Y/n]" continue
23:01  kojiro: queso: followed by an expression to evaluate the value of $continue
23:01  jeward: geirha: diff (GNU diffutils) 2.8.1
23:01  kojiro: jeward: heh
23:01  queso: kojiro: thanks
23:01  geirha: jeward: Doesn't all servers update separate directories?
23:01  TheBonsai: queso: http://wiki.bash-hackers.org/commands/builtin/read#are_you_sure
23:01  jeward: geirha: Yes, one directory per server.
23:01  igli: m00 TheBonsai :)
23:01  TheBonsai: m00
23:02  geirha: jeward: Then I don't see any problem with the rsync approach
23:02  TheBonsai: happy new year - a bit late :)
23:02  igli: you too OM :)
23:02  jeward: geirha: I don't understand?  The files are e-mailed in each night and parsed by an awk script.
23:03  jeward: geirha: The awk script decides what directory and file to write.
23:03  igli: diff -ruN prev/ new/ # might be nicer op
23:03  geirha: jeward: The servers know their own hostname ...
23:03  zosky: hey yall
23:03  jeward: geirha: Right, and they give that info to the awk script.
23:04  zosky: would some one please enlighten me ... $((645+1)) = 646 ... $((0645+1)) = 422 ???
23:04  jeward: igli: Not bad...
23:04  geirha: !august > zosky
23:04  greybot: zosky: August is the month when all your scripts break because you placed $(date +%m) in a variable and tried to do arithmetic with it, without removing the leading zeros. 08 is considered octal. Use $((10#$month)) to force decimal, or strip the zero.
23:04  TheBonsai: zosky: octal
23:05  TheBonsai: oh, !august. lol
23:05  e36freak: best factoid yet
23:05  sente: hah, that's a good one, august
23:05  kojiro: halloween == christmas
23:05  igli: hehe
23:05  TheBonsai: zosky: http://wiki.bash-hackers.org/syntax/arith_expr
23:06  zosky: cool. im not working with a date, but thanks for clarifying octal VS digit
23:08  jeward: geirha: Basically what I want to do is report if a server failed to send in it's crontabs or if they have changed from one day to the next.
23:09  jeward: This isn't bad:
23:09  jeward: jeward@kve13:~$ sudo diff -qruN /usr/local/crontabs /tmp/crontabs Files /usr/local/crontabs/larry/root and /tmp/crontabs/larry/root differ
23:09  kojiro: 'course if one uses $(( $(date +%m%d) )) you'll get confused in January
23:09  jeward: There's one character different in those two files.
23:10  kojiro: # printf %d'\n' $(( $(date +%m%d) ))
23:10  evalbot: kojiro: 68
23:13  jeward: geirha: http://pastebin.com/eT93VhYc
23:13  geirha: jeward: You could maybe generate a list of all crontabs as: yesterday/hostname1/user1:crontab-line1\nyesterday/hostname1/user1:crontab-line2\n...  and then diff those.
23:14  geirha: err, without the yesterday/
23:14  jeward: geirha: That pastebin is my first draft.
23:14  jeward: geirha: I run that once a day after all the crontabs have been processed.
23:15  jeward: geriha: I THINK that might do the trick.
23:15  jeward: geirha: Maybe add a diff between the iles if they do differ.
23:15  jeward: files
23:16  kojiro: jeward: another approach would be fdupes
23:16  kojiro: it would tell you what files are the same, but the concept is easily inverted
23:17  jeward: kojiro: http://en.wikipedia.org/wiki/Fdupes
23:17  jeward: kojiro: All sorts of alternatives there.
23:18  kojiro: jeward: ok... thanks!
23:18  kojiro: jeward: so anyway, my point was that finding duplicate files instead of finding files that are different could be an interesting approach
23:18  jeward: kojiro: I may have to try a few if the diff doesn't do the trick. :-)
23:20  jeward: kojiro: So your idea would be to find all the duplicates and then report those that aren't? :-)
23:20  geirha: jeward: (cd old/ && for host in */; do (cd "$host" && awk -v host="${host%/}" -v OFS=: '{print host,FILENAME,$0}' *); done)
23:21  NCS_One: can some please explain http://mywiki.wooledge.org/BashGuide/Practices#Don.27t_Ever_Do_These the part of "cat file | grep pattern" more expecific the redirection.
23:21  igli: grep pattern file
23:21  geirha: jeward: Do that for old and new, then diff those is what I'm thinking.
23:21  igli: grep pattern file [..files]
23:22  jeward: geirha: Let me run that and see what it outputs to understand.
23:22  NCS_One: the redirection
23:22  NCS_One: part
23:22  kojiro: NCS_One: are you confused by the comma?
23:22  kojiro: NCS_One: what's confusing you?
23:23  igli: oh he means cmd < file
23:23  kojiro: !redirtut
23:23  greybot: Redirections: http://wiki.bash-hackers.org/syntax/redirection http://mywiki.wooledge.org/BashGuide/InputAndOutput#Redirection http://wiki.bash-hackers.org/howto/redirection_tutorial http://wiki.bash-hackers.org/scripting/copydescriptor
23:23  jeward: geirha: Oooooohhh.
23:23  igli: nice one koji :)
23:23  NCS_One: I don't understand this "read column1 column2 < /my/file, tr ' ' '\n' < /my/file, ..."
23:23  kojiro: NCS_One: that's because it's *two* different examples
23:24  kojiro: NCS_One: I thought that was it. it's read column1 column2 < /my/file
23:24  jeward: geirha: I THINK the diff -qruN may work.
23:24  kojiro: NCS_One: *and* tr ' ' '\n' < /my/file
23:24  jeward: geirha: I need to add some directories, remove some, etc to see all the possible outputs.
23:24  igli: check out the links above
23:25  Bauer: anyone remembers how to redirect both stderr and stdout into a log file in bash script? it was exec followed by 1 and 2 but not sure their order and which symbols between them :S cant seem to find it again on google :(
23:25  TheBonsai: >file 2>&1
23:25  TheBonsai: !redirtut
23:25  greybot: Redirections: http://wiki.bash-hackers.org/syntax/redirection http://mywiki.wooledge.org/BashGuide/InputAndOutput#Redirection http://wiki.bash-hackers.org/howto/redirection_tutorial http://wiki.bash-hackers.org/scripting/copydescriptor
23:26  Bauer: thanks TheBonsai, wasnt it exec 2>&1 not file?
23:26  queso: So a command I can run with virtualbox will list running virtual machines, each on their own like, like so:  "dev1" {9055bf5a-a39a-4c8d-8215-c7fdde1a9962}   I need to know if a given virtual machine is running.  How do you recommend I do this?
23:27  geirha: jeward: diff -u <(cd /usr/local/crontabs && for host in */; do (cd "$host" && awk -v host="${host%/}" -v OFS=: '{print host,FILENAME,$0}' *); done) <(cd /tmp/crontabs && for host in */; do (cd "$host" && awk -v host="${host%/}" -v OFS=: '{print host,FILENAME,$0}' *); done)
23:27  kojiro: queso: That's a virtualbox question: How *do* you know if a virtualbox vm is running?
23:27  drake1: if some background process runs in VM mode
23:27  NCS_One: kojiro: column1 and column2 are vars? reading from one file what does get column1 and column2?
23:27  nDuff: queso, parse the output of VBoxManage list runningvms
23:27  nDuff: ...that's the _supported_ way, anyhow
23:27  queso: kojiro: no, the command lists the running virtual machines. I don't know how to parse the output.
23:28  nDuff: !read 1 > queso
23:28  nDuff: err
23:28  nDuff: !faq 1 > queso
23:28  greybot: queso: http://mywiki.wooledge.org/BashFAQ/001 -- How can I read a file (data stream, variable) line-by-line (and/or field-by-field)?
23:28  igli: it might just be a grep/awk 1 liner
23:28 * nDuff nods; awk will work fine too
23:29  jeward: geirha: Thanks, I'll try that!
23:29  igli: ah cool
23:29  igli: can you paste the output to a pastebin queso?
23:29  kojiro: # printf '%s %s\n' hi mom we are having a great time > foil; while read column1 column2 < foil; printf '%s, ' column2 column1; echo
23:29  evalbot: kojiro: Missing terminating quote, bracket or keyword
23:29  kojiro: doh
23:29  kojiro: # printf '%s %s\n' hi mom we are having a great time > foil; read column1 column2 < foil; printf '%s, ' column2 column1; echo
23:29  evalbot: kojiro: column2, column1,
23:29  queso: igli: http://paste.pocoo.org/show/314918
23:29  igli: hehe
23:29  kojiro: ok I fail at 5pm after no lunch
23:30  kojiro: # printf '%s %s\n' hi mom we are having a great time > foil; read column1 column2 < foil; printf '%s, ' $column2 $column1; echo
23:30  evalbot: kojiro: mom, hi,
23:30  igli: and which column do you want to check for a match, queso?
23:30  Bauer: TheBonsai: would this be correct?  exec 2>&1 > filename
23:30  kojiro: and I think I'm going home now
23:31  TheBonsai: Bauer: no.
23:31  queso: igli: the one in quotes (dev1)
23:31  igli: Bauer: what he said already: exec >file 2>&1
23:34  igli: machine=dev1; vboxmanage --nologo list runningvms | grep -q "^\"$machine\"" && found=1
23:34  Bauer: ahh thanks.. thats not what he said originally though :)  but got it now.. thanks. very hard to remember, until next time I need it, I forget again :(
23:36  e36freak: !faq 2>&1 > Bauer
23:36  greybot: Bauer: http://mywiki.wooledge.org/BashFAQ/055 -- Tell me all about 2>&1 -- what's the difference between 2>&1 >foo and >foo 2>&1, and when do I use which?
23:37  queso: igli: That will work, thank you!
23:37  e36freak: Bauer: once you understand how it works, it wont be hard to remember
23:37  igli: yw queso :) #awk if it gets more complex
23:37  Bauer: e36freak are you sure about that? I think I understand it *now*, but in a month I will forget again
23:38 --- Cain` is now known as Cain
23:38  e36freak: Bauer: i never have an issue. you can also use command &>file in bash
23:41  Bauer: e36freak: it does the same thing? redirect everything to a logfile? (I use it with set -x for debugging)
23:42  TheBonsai: Bauer: "from left to right" is the keyword. that's all the magic (and the understanding that &N means "to where N goes" and not "to N")
23:42  FernandoBasso: I want to match everything, except lines which _do_ _not_ contain lower case alphabetic characters. So far I tried "grep '[^a-z]\+ file.txt" but doesn't work.
23:42  TheBonsai: FernandoBasso: try [[:lower:]]
23:44  e36freak: Bauer: yes
23:45  TheBonsai: FernandoBasso: [^[:lower:]] in your case, sorry
23:45  FernandoBasso: TheBonsai: I did that. It still matches lines containing lower case letters.
23:46  FernandoBasso: Of course, grep --invert-regexp [[:lower:]] workds.
23:46  TheBonsai: you may want ^[^[:lower:]]\{1,\}$
23:47  TheBonsai: in whichever dialect you convert it
23:47  e36freak: or... grep -v [[:lower:]]
23:47  TheBonsai: omg
23:47  TheBonsai: yes, of course
23:48  e36freak: that nice regex is nice though :)
23:48  e36freak: s/nice/last/
23:49  FernandoBasso: Thank you guys.
23:50  TheBonsai: you should quote [[:lower:]]
23:50  TheBonsai: to prevent the shell from using iot as a glob
23:50  e36freak: should quote any of them, but yeah
23:50  TheBonsai: <e36freak> or... grep -v [[:lower:]]
23:50  TheBonsai: i mean that one
23:51  e36freak: the problem with grep "[^[:lower:]]\+" is that its just checking that the line has at least one non-lowercase letter
23:51  TheBonsai: # touch a; echo [[:lower:]]
23:51  evalbot: TheBonsai: a
23:51  FernandoBasso: This one I had already used.
23:51  pielgrzym: can I enable more advanced globbing in bash? like: mv ^.png somedir - to move non *.png files etc
23:51  pielgrzym: ?
23:51  e36freak: !extglob > pielgrzym
23:51  greybot: pielgrzym: "Extended globs" (shopt -s extglob) allow you to say things like "all files that do not end in .jpg". See http://mywiki.wooledge.org/glob
23:51  pielgrzym: e36freak: thank ou
23:51  pielgrzym: you
23:51  pielgrzym: :)
23:53  pielgrzym: e36freak: no way to have extended dir suggestions? cd /v/l/ -> tab expand cd /var/log/ ?
23:53  e36freak: there's also dotglob, nullglob, globstar... but i think theyre all explained there
23:53  e36freak: no, thats a zsh thing
23:53  e36freak: you may be able to get something to do that, but bash does not support it natively
23:54  pielgrzym: e36freak: yeah, I guess I'll have to use this tiny python prog 4 this :)
23:59  pielgrzym: e36freak: can I make the second and next tabstrokes insert suggestions?
--- Log closed Wed Jan 05 00:00:03 2011
