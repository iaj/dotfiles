--- Log opened Mon Dec 13 00:45:14 2010
--- Log closed Mon Dec 13 00:45:14 2010
--- Log opened Mon Dec 13 08:43:16 2010
08:43 --- Users 504 nicks [0 ops, 0 halfops, 0 voices, 504 normal]
08:44 --- Bushmills1 is now known as Bushmills
08:44 --- Channel #bash was synced in 102 seconds
08:51  dagni: hello all ;)
--- Log closed Mon Dec 13 09:27:00 2010
--- Log opened Mon Dec 13 09:42:18 2010
09:42 --- Users 505 nicks [0 ops, 0 halfops, 0 voices, 505 normal]
09:43 --- Channel #bash was synced in 94 seconds
--- Log closed Mon Dec 13 09:49:19 2010
--- Log opened Mon Dec 13 09:54:42 2010
09:54 --- Users 508 nicks [0 ops, 0 halfops, 0 voices, 508 normal]
09:56 --- Channel #bash was synced in 95 seconds
09:56 --- zayka_ is now known as zayka
10:03  fahmad: when i this sed -i "s/iw&D^AJZ[)&_/qaXSad12/" block.php i get this sed: -e expression #1, char 24: unterminated `s' command
10:05  pgas: sed use basic regexp. [ is special in the basic regexp syntax
10:06  pgas: ^ is special too, but should not be a problem in your example
10:07  fahmad: pgas: how can i get it fixed ?
10:07  fahmad: because there alot of time ...
10:08  pgas: use [[] instead of just [
10:15  fahmad: ok
10:17  fahmad: thanks pgas
10:39  republican_devil: wigia wak!
10:39  republican_devil: hey
10:39  jymere: hi some questions: if I don't declare a variable VAR and then I call it, is its value is "" or I have to declare : VAR="" ?
10:39  republican_devil: If I have 40 tomcat web boxes
10:39  republican_devil: and wana shutdown app, release new code, start app with new code
10:39  republican_devil: using bash and ssh
10:40  republican_devil: how do I write it such that bash waits for each fo the 40 to finish shutting down, and makes sure tomcat is shut down, before rolling new code?
10:40 --- [1]The-Bat is now known as The-Bat
10:43  jymere: well it's done
10:43  jymere: wath's the real signification of ${VAR[@]} if VAR is a variable ?
10:44  republican_devil: array
10:45  alez{xmb{bottz}}: rep
10:45  alez{xmb{bottz}}: init/tomcat stop ; koud ; start again
10:45  alez{xmb{bottz}}: ?
10:45  alez{xmb{bottz}}: also theres pshell
10:45  alez{xmb{bottz}}: for multiple at ounce
10:46  unRuhe: is there an easy way to make a var like $path="/home/blah/myfolder/" to become "myfolder" ?
10:46  alez{xmb{bottz}}: yeah
10:46  alez{xmb{bottz}}: var=${var%/} var=${var##*/}
10:47  alez{xmb{bottz}}: i strongly suggest u leave the last slash
10:47  alez{xmb{bottz}}: for a marker as its a dir
10:47  unRuhe: thx alez{xmb{bottz}} i wil try that
10:48  alez{xmb{bottz}}: =)
10:48  unRuhe: im checking if its a dir before but afterwards i use the dir name to create a tarball in wd
10:48  alez{xmb{bottz}}: k
10:51  pgas: jymere: you don't need to declare the variable in any way unless you use "set -u" and it's value by default is ""
10:53  jymere: pgas: ok but if I don't declare VAR and I don't change its value,  if I run cd "$VAR" , is "$VAR"="" ?
10:55  jymere: I tested and we have indeed this equality bye
10:56  jymere: join #shell
11:22  unRuhe: alez{xmb{bottz}}: working fine, ty & bb
11:38  jymere: what is the negation of a condition with test ? For instance, I would check if a file does'nt exist: I did: [! -f my_file ] but it doesn't work
11:40  pgas: [ is a command, you need to give it arguments separated by spaces
11:41  jymere: thanks it works
11:43  pgas: also, you can do if ! command so if ! [ -f myfile ]  is also a possibility
11:48  alez{xmb{bottz}}: pg can u get mi pppd for amd64 from snapshot.debian.net
12:27 --- hackeron_ is now known as hackeron
12:36  zumbi: # export foo=bar; export fox=${1:-$foo}; echo $fox; echo $fox bax
12:36  evalbot: zumbi: bar
12:36  evalbot: zumbi: bar bax
12:37  zumbi: I would like fox to be $foo by default unless a parameter is given, how should i do that as the above fails
12:39  pgas: why do you say it fails?
12:39  zumbi: sorry my example is wrong
12:39  zumbi: # export foo=bar; export fox=${1:-$foo}; echo $fox; foo=bax echo $fox
12:39  evalbot: zumbi: bar
12:39  evalbot: zumbi: bar
12:39  pgas: you example is not meaningful
12:40  pgas:  # set -- one; export foo=bar; export fox=${1:-$foo}; echo $fox
12:40  pgas: # set -- one; export foo=bar; export fox=${1:-$foo}; echo $fox
12:40  evalbot: pgas: one
12:40  zumbi: from the later 'foo=bax echo $fox' I would expect to echo bax
12:40  pgas: this has nothing to do with $1
12:41  zumbi: I am a bit confused...
12:41  pgas: foo=bax echo $fox # sets foo in the environment of echo, but $foo is expanded by the shell before echo runs
12:42  zumbi: What i want to do is to call a function and _foo=$1 if there is $1 or $FOO is there is no $1
12:43  pgas: tha't what ${1:-$foo} does
12:43  zumbi: ok, so my test is the one that was wrong
12:44  pgas: (well it will expand to $foo if $1 is "", if you want just unset it's ${1-$foo} )
12:48  zumbi: i rather have the former, thanks :)
13:15  jymere: I have this loop :for IMAG in `ls *.jpg 2>/dev/null`; do  convert"$VERB" -resize 200x150 "$SRC/$IMAG" "$DEST/$IMAG";  echo "<img src="$IMAG">" >> "$IND"
13:15  jymere: <jymere> done
13:15  jymere: but if path's image contain some space the command convert can't work
13:16  geirha: !pf 1 > jymere
13:16  greybot: jymere: http://mywiki.wooledge.org/BashPitfalls#pf1 -- Don't do this! -- for i in $(ls *.mp3)
13:16  jymere: how can I solve this problem ? I try to put some quotes but nothing
13:16  trash: jymere: YOU WERE TOLD TEN TIMES NOW
13:16  trash: DO NOT USE FUCKING LS
13:16  jymere: but I don't know how can I do this
13:16  smw: jymere, read the link from greybot
13:16  smw: jymere, it is very informative
13:17  jymere: smw: but it's a
13:17  jymere: script sh
13:17  mrtnt: Between "779" and "pp_NORD" there are two spaces- how to delete on of those two spaces using sed? Something like this: echo "779  pp_NORD                          active    " | sed 's/[[:digit:]]{1,4}  .*/[[:digit:]]{1,4} .*/g' ?
13:17  trash: for i in *.jpg; do convert "$i" ....; done
13:17  smw: jymere, what do you mean by that?
13:18  jymere: the link is for bash
13:18  geirha: It still applies.
13:18  jymere: trash : i'm gonna try again
13:18  smw: jymere, you are in #bash...
13:18  jymere: yeah but #shell is empty
13:19  jymere: #sh
13:19  smw: jymere, as geirha said, it still applies
13:19  geirha: for image in *.jpg; do echo "$image"; done    # works in bash, POSIX sh and bourne
13:20  jymere: putain ca marche !!!!!  thank you
13:21  geirha: !varcap > jymere
13:21  greybot: jymere: By convention, we capitalize environment variables (PAGER, EDITOR, ..) and internal shell variables (SHELL, BASH_VERSION, ..). All other variable names should be lower case. Remember that variable names are case-sensitive; this convention avoids accidentally overriding environmental and internal variables.
13:23  jymere: so I must'nt use lower case when I use a variable ?
13:25  TheBonsai: y0+
13:26  geirha: o_O
--- Log closed Mon Dec 13 13:38:19 2010
--- Log opened Mon Dec 13 13:38:42 2010
13:38 --- Users 499 nicks [0 ops, 0 halfops, 0 voices, 499 normal]
13:40 --- Channel #bash was synced in 102 seconds
14:36  TheBonsai: heck
14:36  TheBonsai: lftp can do sftp
14:42  jeffroman: are there any alternatives to bash history, where commands are logged realtime?
14:43  trash: !faq history > jeffroman
14:43  greybot: jeffroman: http://mywiki.wooledge.org/BashFAQ/051 -- I want history-search just like in tcsh. How can I bind it to the up and down keys?
14:43  trash: Nah.
14:43  trash: !faq avoid
14:43  greybot: http://mywiki.wooledge.org/BashFAQ/088 -- How can I avoid losing any history lines?
14:43  trash: This one.
14:44  TheBonsai: if it's about logging, check syslogging
14:46  jeffroman: yeah im more concerned about logging
14:47  jeffroman: as a user can just kill his bash process
14:47  jeffroman: and none of the command history is save
14:47  trash: *shrug*
14:56  jeffroman: any ideas?
14:56  TheBonsai: check syslogging
15:07  Amnesia: if ! (( $# == 3 )) || (( $1 != czf )) || (( $1 != cjf )); then
15:08  Amnesia: that if $1 == czf or cjf does not work
15:08  Amnesia: what am I doing wrong?
15:08  TheBonsai: you know that ((...)) is arithmetic stuff?
15:08  Amnesia: hm no
15:09  TheBonsai: it will only work if "cjf" contains something that makes sense in arithmetic expressions
15:09  Amnesia: but I also tried if [ $1 != cjf ]
15:09  TheBonsai: and that failed HOW?
15:10  jeffroman: TheBonsai: you talking about my question?
15:10  TheBonsai: Amnesia.
15:10  Amnesia: TheBonsai: if ! (( $# == 3 )) || [ $1 != czf ] || [ $1 != cjf ]; then
15:11  Amnesia: would that pass everything except czf or  cjf?
15:11  ferret: !quoteswhen
15:11  ferret: !quotes
15:11  greybot: "USE MORE QUOTES!" They are vital. Also, learn the difference between ' and " and `. See <http://mywiki.wooledge.org/Quotes> and <http://wiki.bash-hackers.org/syntax/words>.
15:12  Amnesia: amnesia@Candycase:~/dir$ tar czf wikirebels.flv out
15:12  Amnesia: usage: tar option src dest
15:12  Amnesia: already tried quotes
15:13  Bushmills: # [[ czf == c[jz]f ]] && echo match
15:13  evalbot: Bushmills: match
15:14  Amnesia: double [[ ]]
15:14  Synthead: my apologies, my logs fail me.  I asked once how to store a new index into an array easily without knowing the contents or number of indexes in the array.  something like if a=(a b c 1 2 3), "${ something with $a}" would get me a=(a b c 1 2 3 newindex)
15:14  Amnesia: what's that for?
15:15  Bushmills: '[[
15:15  Synthead: ![
15:15  greybot: [ is NOT part of the `if' syntax. It's a normal, ordinary COMMAND. The `if' just checks its exit status. See `help test', http://mywiki.wooledge.org/BashGuide/TestsAndConditionals , and http://partmaps.org/era/unix/award-example-backticks.html
15:15  ferret: Amnesia: you're trying to make a retarded version of tar?
15:15  Bushmills: ![[
15:15  greybot: [[ is a bash keyword similar to (but more powerful than) the [ command. See <http://mywiki.wooledge.org/BashFAQ/031> and <http://mywiki.wooledge.org/BashGuide/TestsAndConditionals>. Unless you're writing for POSIX sh, we recommend [[.
15:15  Amnesia: nope
15:15  lhunath: Synthead: you mean "append a value to an array?"
15:15  Amnesia: ferret: I'm trying to combine pv with tar
15:15  Amnesia: in order to be able to get a progress bar with speed + eta with cp,mv,and tar
15:16  lhunath: Synthead: arr+=(newvalue)  # not an index, a value.
15:16  Synthead: lhunath: ahh, they're called values?
15:17  lhunath: Synthead: the keys are indexes, the things they map to are values.  arr[index]=value; echo "${array[index]}" # shows you the value stored at index
15:17  Synthead: lhunath: ahhhhhhh, cool
15:19  lhunath: Amnesia: what, something like this? tar cz "$@" | pv | tar xzf -
15:19  trash: Didn't we answer that days ago? Hmm.
15:19  Amnesia: lhunath: http://pastie.org/1372927
15:20  trash: Yeah, same guy.
15:20  lhunath: Amnesia: that looks like a lot of noise.
15:20  Amnesia: true:/
15:21  lhunath: write something in English and I may try reading it; provided the tar example I gave does not suffice.
15:22  Amnesia: well basically I had the idea of getting a progressbar with eta and speed per sec for cp,mv and tar
15:22  Amnesia: and this is how I partially implemented it
15:24  Fatal: http://www.ivarch.com/programs/pv.shtml might give you an idea (shame the example is a picture)
15:32  Amnesia: lhunath: what's so wrong about it:)?
15:32  lhunath: Amnesia: tarpv() { local dest=$1; shift; while read; do read size _ <<< "$REPLY"; done < <(wc -c "$@"); tar c "$@" | pv -s "$size" | tar xf - -C "$dest"; }
15:32  jeffroman: ok
15:33  lhunath: Amnesia: I'll say "The utter lack of quotes" because I can't be bothered to go into all the other crap.
15:33  ibqn: how to combile many characters in regexp for sed? was it like this for example \{as\}\? (for zero or one occurrence of as)
15:33  Amnesia: oh:/
15:35  lhunath: ibqn: zero or one times the characters 'as' such as in "fast" and "foo"?
15:36  lhunath: (as)? in ERE, not sure if ? works in BRE.  probably not.
15:37  ibqn: lhunath, whar does this mean? should I use sed with -e?
15:37  mac-: hi
15:37  lhunath: ibqn: -e?  I doubt it.  look at man sed.
15:37  lhunath: you probably mean -r.
15:38  lhunath: if your sed even supports that.
15:38  ibqn: yes -r
15:42  ibqn: lhunath, I am somehow stack, I want to replace all occurrences of for example: "pp. 1-2," with "1-2" or "p. 12," with 12
15:43  ibqn: but fail that is what I use: "s:pp\?. \([0-9]\+\( \?- \?[0-9]\+\)\?\),:\1:"
15:43  lhunath: sed 's/pp*\. //'
15:44  lhunath: it'll also remove stuff like ppp. 1-2 but at least it's portable.
15:44  Fatal: I'd say, instead of trying to solve all variants in one regex, do several, might be easier to do and read/understand
15:44  lhunath: mm; you want to match the 1-2 as well.
15:44  lhunath: is that important?
15:45  ibqn: lhunath, I do not care if its portable or not, and I want to match it exactly not to replace unneeded
15:46  lhunath: so you want to match this:  one or two times 'p', one dot, one space, one or more digits, optionally a dash followed by one or more digits.
15:46  lhunath: is that it?  or would that also match unneeded stuff?
15:47  lhunath: because "exactly" is a terribly vague term defined only by your data and what you want out of it.
15:47  ibqn: yes, because there are : p. 1213,  pp. 1212-12, pp. 1221 - 112 and so on :-(
15:47  lhunath: spaces around the dash?
15:48  lhunath: then the answer is NO, not yes.
15:48  ibqn: yes optionally
15:48  lhunath: ...
15:48  Fatal: hahaha
15:48  ibqn: I know, it's horrible
15:48  Fatal: exactly almost always perhaps maybe depends?
15:48  lhunath: if you can't even get the definition right; how do you expect good results?
15:49  lhunath: ok, so tell me in english what you want
15:49  lhunath: exactly.
15:50  ibqn:  one or two times 'p', one dot, one space, one or more digits, optionally a dash optionally surrounded by a space followed by one or more digits.
15:50  lhunath: surrounded only by one space, not more?
15:50  lhunath: and it doesn't matter if it occurs in the middle of a line, at the beginning or at the end?
15:51  lhunath: doesn't matter what other text appears around it?
15:51  ibqn: well meant that the dash character is optionally surrounded by one space character
15:51  Fatal: looking back at what you said, is it correct that you want to replace "pp. 122 - 121" with "122121" ?
15:52  ibqn: actually with 122-121
15:52  Fatal: sorry, misread
15:52  Fatal: yes
15:52  lhunath: so the space has to disappear?
15:52  Fatal: I accidently read; example: "pp. 1-2," with "1-2" or "p. 12," with 12  as  example: "pp. 1-2," or "p. 12," with 12
15:52  lhunath: spaces*, around the dash
15:52  ibqn: yes, correct
15:54  lhunath: that sucks.
15:54  ibqn: does this look correct? s:pp\?. \([0-9]\+\( \?- \?}([0-9]\)\+\)\?\),:\1-\3:
15:54  lhunath: avoid \ as much as possible.  it looks like a fucking mess.
15:55  lhunath: s/pp?\. ([1-9]+)( ?- ?[1-9]+)?/\1\2/   if padded spaces didn't have to be dropped
15:55  lhunath: but since they do; good luck!  /me wanders off
15:56  lhunath: s/pp?\. ([1-9]+)( ?- ?([1-9]+))?/\1\3/   if padded spaces didn't have to be dropped
15:56  ibqn: does this look correct? s:pp\?. ([0-9]+( ?- ?([0-9])+)?),/\1-\3/
15:56  ibqn: I'will try that one
15:57  lhunath: yeah, my correction was wrong; use the former
15:57  lhunath: anyhow; it doesn't trim spaces.
15:57  lhunath: you need to handle the cases separately if you want to do that.
15:58  lhunath: actually; here, this works: 's/pp?\. ([1-9]+)( ?(-) ?([1-9]+))?/\1\3\4/'
15:59  lhunath: sed -r, of course, since it's ERE.
15:59  lhunath: (gsed with me, because my normal sed doesn't support -r)
16:00  Riviera: sed 's/pp*\. *\([0-9][0-9]*\) *\(-\)* *\([0-9]*\),/\1\2\3/'
16:02  lhunath: that's not what he asked for, though ;-)
16:02  lhunath: though it probably works on all his examples
16:03  lhunath: ibqn: you said nothing about a trailing comma.  waddaya wanna do with that?
16:04  ibqn: it is not important, but I can not get rid of the spaces around -
16:04  lhunath: my last example does that.
16:05  lhunath: though it makes no assumptions about the symmetry of the spaces around the dash.  I take it you don't care.
16:06  ibqn: $ echo "p. 123, pp. 121 - 12" | sed -r  's/pp?\. ([1-9]+)( ?(-) ?([1-9]+))?/\1\3\4/'
16:06  ibqn: 123, pp. 121 - 12
16:07  ibqn: strange but it does not seem to work here
16:07  pigdude: any thoughts on the O'Reilly book "Classic Shell Scripting"?
16:09  lhunath: ibqn: it works fine.
16:09  lhunath: ibqn: you're using it badly.
16:09  lhunath: # echo "p. 123, pp. 121 - 12" | sed -r  's/pp?\. ([1-9]+)( ?(-) ?([1-9]+))?/\1\3\4/g'
16:09  evalbot: lhunath: 123, 121-12
16:10  lhunath: ibqn: if you don't put a g at the end as modifier, the s command is only applied once per line.
16:11  lhunath: ibqn: so only the first p. was trimmed; the second pp. was left untouched.  the /g modifier repeats the operation.
16:11  lhunath: ##sed to learn how to use sed.
16:11  ibqn: lhunath, thank you
16:14  jymere: hi I have the loop: for I in *jpg; do mv "$I" imagk; done and in fact I want k to be the number of the current loop. k must be incremented to each loop and first, k=0 ... ? Can I do that ?
16:15  bas: hey folks, why is it that i get a 'no such file or directory /home/bas/bla' if i run: ssh root@foobar 'echo $(cat $HOME/bla)' ?
16:15  bas: i would expect whatever is in the single quotes not to evaluate locally
16:17  bas: oh sorry. just noticed this only occurs under zsh, so disregard my question
16:17  pigdude: I guess nobody has looked at this book?
16:18  ferret: Good guess.
16:22  lhunath: !cfor > jymere
16:22  greybot: jymere: C-style for loop: for (( expr; expr; expr )); do COMMANDS; done # Each expr is done in a math context. Example: for ((i=1; i<=n; i++)); do echo "$i"; done
16:22  lhunath: jymere: alternatively; keep a counter.
16:22  jymere: yeah it's what i done
16:22  lhunath: jymere: and name your variables something useful instead of I
16:22  lhunath: jymere: eg. what I usually do is a letter for a counter variable that is the first letter of what it counts.
16:23  lhunath: for file in *.jpg; do mv "$file" "img$((f++))"; done
16:23  lhunath: !math
16:23  greybot: Add 7 to a variable: let a+=7; ((a+=7)); a=$((a+7)); See http://mywiki.wooledge.org/ArithmeticExpression
16:23  jymere: but I have a problem when I incerment: I put : COUNT= `echo "$COUNT+1" | bc`
16:23  lhunath: jesus
16:23  lhunath: !varcap
16:23  greybot: By convention, we capitalize environment variables (PAGER, EDITOR, ..) and internal shell variables (SHELL, BASH_VERSION, ..). All other variable names should be lower case. Remember that variable names are case-sensitive; this convention avoids accidentally overriding environmental and internal variables.
16:23  saml: how can I create a function so that it'll run the function that I pass?      run myFunction
16:24  lhunath: stop using uppercase crap too.  and stop using `` while you're at it.
16:24  lhunath: !`
16:24  greybot: The backquote (`) is used in the old-style command substitution, e.g. foo=`command`. This syntax is deprecated in favor of foo=$(command). Backslash handling inside $() is less surprising, and $() is easier to nest. See http://mywiki.wooledge.org/BashFAQ/082
16:24  lhunath: saml: run() { "$1"; }
16:24 --- [1]The-Bat is now known as The-Bat
16:25  lhunath: saml: is your nickname supposed to reference the security assertion markup language?
16:25  saml: idea is that I create myFunc1, myFunc2...     and run() { "$1" > /dev/null 2>&1 }   so that I won't repeat /dev/null redirect on each of myFunc1, myFunc2....etc
16:25  saml: lhunath, no
16:25  lhunath: sounds pretty daft.
16:25  saml: am I approaching this correctly?
16:25  saml: !google daft
16:26  lhunath: saml: http://en.wiktionary.org/wiki/daft
16:26  saml: oh it's stupid
16:26  saml: then what's proper way?
16:26  lhunath: myFunc1 >/dev/null 2>&1
16:27  saml: i'm doing like this...   echo -n "doing something...";  ... > /dev/null 2>&1  || exit 1;  echo "DONE"
16:27  saml: so, I'll have to repeat /dev/null stuff
16:28 --- jzacsh is now known as jzacsh_
16:28 --- zach is now known as Guest13453
16:30  lhunath: use braces
16:31  tvm: can i create a directory using ONLY pure bash ?
16:31  lhunath: assuming I understand you well
16:31  pigdude: how can I send myself a message on the hour? @hourly write username <<<Message?
16:31  lhunath: tvm: no.
16:31  tvm: hmm.
16:34  lhunath: pigdude: see 'at'?
16:34  lhunath: pigdude: or 'every hour'?
16:35  pigdude: lhunath: I'm not sure what you mean, but there is a manpage for 'at' on my system
16:35  jymere: lhunath: for file in *.jpg; do mv "$file" "img$((f++))"; done ---> this work only for bash not for sh ? It is returned: for file in *.jpg; do mv "$file" "img$((f++))"; done
16:35  jymere: no it is returned: arithmetic expression: expecting primary: ""f++""
16:36  ferret: tvm: the bash source comes with an example loadable module which is a builtin version of mkdir
16:36  ferret: I suppose you could compile and use it
16:37  tvm: yes, but i'm in kind of different situation
16:37  tvm: i need to create a directory on a server, where i cannot fork any processes at all
16:37  lhunath: write some C.
16:38  lhunath: or whatever else
16:38  twkm: contact the admins.
16:38  tvm: lol, this is kind of complicated issue ;]
16:38  TheBonsai: if you want to hack the server, learn it without #bash
16:38  tvm: they don't let us use ssh keys for passwordless logins
16:38  tvm: and i want that ;]
16:39  twkm: too bad.
16:39  jymere: lhunath: ok it's good thanks
16:39  ferret: tvm: there isn't a single mkdir call in the entire bash source which ends up being in the binary
16:40  ferret: So no; it's not even possible through some kind of mucking about
16:40  tvm: hmm.
16:41  poisonbit: you just discovered that HISTFILE doesn't uses mkdir
16:42  poisonbit: # ( export HISTFILE='dir/file'; true; history -s; ); echo *
16:42  evalbot: poisonbit: *
16:42  poisonbit: errr whatever
16:42  ferret: that's right.  Because it doesn't.
16:43 --- [1]The-Bat is now known as The-Bat
--- Log closed Tue Dec 14 11:47:24 2010
