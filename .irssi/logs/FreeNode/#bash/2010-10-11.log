--- Log opened Mon Oct 11 07:24:35 2010
--- Log closed Mon Oct 11 07:24:35 2010
--- Log opened Mon Oct 11 09:22:11 2010
09:22 --- Users 506 nicks [0 ops, 0 halfops, 0 voices, 506 normal]
09:23 --- Channel #bash was synced in 64 seconds
09:28 --- MuzerAway is now known as muzer
09:40  ayi: likewhoa: i wasn't intending it for general parsing, just a one off retrieving of a tag value.. however i followed your advice and used python+beautifulsoup. thanks for your advice :)
09:44 --- muzer is now known as MuzerAway
09:49  bolt: so i found this random tip on the internet to set HISTIGNORE="[ \t]*" to avoid saving commands starting with a space in my history. now i have a problem:
09:49  bolt: if I do tail -F /var/log/messages, interrupt that with ctrl+c, i can use up-arrow to find it again
09:49  bolt: if I then do HISTIGNORE="[ \t]*" and then do tail -F /var/log/kern.log, and interrupt that, it's not in the history
09:51  bolt: why is that? i didn't start the command with a space. is the histignore tip wrong? other commands, that i don't interrupt, seem to be saved
09:51  bolt: using bash 4.1.5
09:54  bolt: nobody here? :(
09:58  lhunath: bolt: tail -F /var/log/kern.log starts with a t
09:59  lhunath: bolt: you've asked it to not put any commands in history that start with a space, a backslash or a t.
09:59  bolt: oh. i thought it was tab
09:59  lhunath: bolt: if you find bash "tips" or anything bash on the internet, 98.7% chance they're bad.
09:59  bolt: apparently :)
10:00  bolt: so i should just have a space in there, then?
10:00  bolt: no extra escape stuff?
10:00  lhunath: either way; bash's DEFAULT behaviour is to not record any commands starting with space.
10:00  bolt: oh
10:00 * bolt kicks google
10:01  lhunath: !google
10:01  greybot: Google is NOT a preferred source for learning bash, because 90% of the "tutorials" and scripts out there are JUNK. Refer to the Guide and FAQ (see topic) instead.
10:06  mrtnt: I have a current output as described here: http://pastebin.com/7AhhtPLL I would like to have only those sections in my final output, which have output or input errors on it. Any ideas, how to achieve this?
10:11  lhunath: mrtnt: sounds like you want grep.
10:14  mrtnt: lhunath: but is it possible to say in grep, that if you find a matching line, print out 3 previous lines as well?
10:20  lhunath: mrtnt: yes, man grep
10:44  pyQ: http://pastie.org/1212520
10:44  jim: yay! pasties!
10:44  pyQ: hello, how can I store 3 value (different name)
10:44 --- robinatw is now known as robinguo
10:44  jim: in 3 vars?
10:44 --- robinguo is now known as robinatw
10:44  pyQ: in different name: size1, size2, size3 according to the value of loop j
10:45  taylanub: pyQ: no dots in var names
10:45  twkm: consider read or set or assignment.
10:46  pyQ: taylanub: size.${j}=`pstatus`  --> should be size${j}=`pstatus`
10:46  taylanub: yes
10:46  pyQ: ok
10:46  taylanub: what's parray though?
10:46  pyQ: thanks
10:46  pyQ: parray is a +x command
10:47  pyQ: invoke in bash
10:47  taylanub: btw the {} aren't necessary in any of those, since var names can't continue with . or =
10:47  lhunath: pyQ: learn what arrays are.
10:47  taylanub: i don't have 'parray'
10:48  lhunath: !arrays > pyQ
10:48  greybot: pyQ: An array maps numbers to strings. Bash 4 also has associative arrays (maps strings to strings). See http://mywiki.wooledge.org/BashSheet#Arrays
10:48  lhunath: size[j]=$(pstatus)
10:48  lhunath: echo "${size[j]}"
10:49  pyQ: oh thanks all, but parray is a c++ file, compiled,  a function to convert image to pixel array.
10:50  taylanub: ah ok
10:51  taylanub: and out of curiousity, what's pstatus?
10:51  mitnk: Hi all, Can someone give me a url introducing the meaning of "f%" in the command: for f in *.mp3; do echo "${f%.mp3}"; done
10:51  koala_man: !pe > mitnk
10:51  greybot: mitnk: Parameter Expansion is the expansion of a parameter: "$foo", "$1". You can use it to perform string operations: "${file%.mp3}", "${0##*/}". Remember to *always* quote them. See http://mywiki.wooledge.org/BashSheet#Parameter_Operations
10:51  mitnk: Or some key word I can google it..
10:52  pyQ: taylanub: it prints out the value returned by the last command
10:52  twkm: mitnk: ''man bash'', parameter expansion section.
10:53  taylanub: basically an 'echo $?' alias then...
10:53  twkm: hopefully not an alias, in a script.
10:53  taylanub: koalaman gave his answer actually
10:54  pyQ: no, it return the result of last command, not alias like echo $?
10:54  twkm: "result" being sufficiently vague that it might mean anything.
10:54  pyQ: oops, not me you answer mitnk i think
10:56 --- mitnk_ is now known as mitnk
10:56  mitnk: Thank you, bGreyot. Are you a robot? :)
10:57  erUSUL: !bot
10:57  greybot: I know I am, but what are you?
10:57  erUSUL: more human than human ;P
10:57  mitnk: Cool!
11:08  Rada: Hi...
11:08  tarik: Hi all
11:08  Rada: ^foo^bar^ replaces first occurence... how do I replace all?
11:10  T-Co:  s/foo/bar/g
11:10  Rada: Ah, thank you
11:10  Rada: Just like that, in the command line?
11:10  koala_man: !!:gs/foo/bar/
11:11  twkm: no.
11:11  T-Co: Well, with sed
11:11  twkm: !!:gs/foo/bar/
11:11  Rada: Thanks twkm and koala_man
11:11  T-Co: oh
11:11  T-Co: That's nice. I just found bash <3 :)
11:11  T-Co: "found"
11:11  Rada: I dont know how many times Ive pressed [uparrow][left][left][left][backspace] etc
11:12  T-Co: So this after : means it's a bash extension?
11:13  twkm: no.
11:13  T-Co: Maybe I need to do some reading, before asking stupid questions
11:14  T-Co: Any good literature peaces, you'd recommend?
11:14  twkm: actually all of the ! stuff comes from csh and tcsh.
11:14  twkm: ''man bash''
11:14  T-Co: duh :)
11:14  twkm: though some people read things mentioned in channel topics.
11:29 --- vindex_ is now known as titus
11:31 --- titus is now known as gladius
11:33  mrtnt: I would like to send a log file to my e-mail address. However, this does not work: "mailx -s "new mail" mymail@gmail.com < logfile" Probably because I I should specify SMTP server and other information as well? Is it possible to set up my computer as a SMTP relay in order to send mail to any mail address like this: "mailx -s "new mail" mymail@gmail.com < logfile" ?
11:35 --- vindex_ is now known as galba
11:36  jim: mrtnt: "this does not work" -> why?
11:36  mrtnt: jim: there is no mail message sent
11:37  jim: why?
11:37  lhunath: I think that's the question he came to ask #bash
11:38  erUSUL: mrtnt: what version/implementation of mailx is this?
11:38  jim: how can we know if, for example, he doesn't say what happens when he tries?
11:40  mrtnt: erUSUL: I'm not quite sure. It's most likely rather new version.
11:42  ferret: you can either check for or install a version that has that feature (e.g. nail) or install a local mta like sendmail or postfix or whatever
11:42  erUSUL: mrtnt: i ask becouse heirloom-mailx can sen mail without an mta installed.. if your version can't you will have to use a nullmailer like ssmtp
11:43  erUSUL: or a full mta ...
11:51  davve_: hey gang. im out of ideas: how do i go about addressing every argument except $0 and $1 ?
11:51  twkm: a loop?
11:51  davve_: ive written an application which $1 is a flag and the following arguments are supposed to execute a move command
11:51  erUSUL: davve_: shift twice use "$@" ?
11:51  davve_: i've made one.
11:51  twkm: shift + @, index @, ...
11:52  twkm: erUSUL: because $0 will shift?
11:52  erUSUL: twkm: i stand corrected; thnaks
11:52  davve_: hmm i'll look into that
11:52  davve_: stupid question, would that involve pushing the shift button
11:52  davve_: ?
11:53  twkm: ''help shift''
11:53  lhunath: funny.
11:54  davve_: ah no it doesnt
11:54  davve_: hey im learning cut me some slack d:)
11:55  lhunath: by they way; $0 is not a positional parameter.
11:55  lhunath: you probably don't want it.  they start at $1.
11:56  davve_: one shift did it for me. thanks guys
11:59  zai: not directly a bash question (maybe someone can point me to the right channel or provide an answer?): in case I got more than one rsa key in my .ssh folder, how can I specify which key cvs should use to connect?
11:59  twkm: #openssh
11:59  zai: ah, good idea. thx twkm
11:59  twkm: though ''man cvs'' is the more likely helper.
12:00  zai: tried but... not really ~.~
12:05  twkm: consider: how does cvs know to use ssh.
12:10  Naib: zai. well for git I use .ssh/config and name my rsa keys. I then use a hostname like:  serverGit
12:10  Naib: git clone git@serverGit:some_repo.git
12:12  zai: Naib, I'm not sure if I understand the procedure... i'd love to have something like a parameter that I can pass on to cvs when i call it from a bash script.
12:13  twkm: there is both a parameter like thing and a purely ssh thing.  ''man cvs ssh''.
12:15  zai: hm... I know that it works in ssh with -i option. i'm just clueless how to adapt it for cvs. tho will dive deeper into the man page(s)
12:16  twkm: CVS_SSH=..., host whatever\nidentity ...,
12:18  zai: oh, that's what I put in .ssh/config? *tries*
12:19  mrtnt: erUSUL: thanks! Now I have nail installed and I'm able to send mail. However, this log is in ASCII text format with CRLF, LF line terminators. When I send this file, it appears as a binary file attachement in my inbox, not the body of the mail. Is this due to the log file format?
12:23  erUSUL: mrtnt: dunno; check nail docs ... or change line endings before sending
12:28  Velmont: Am I correct in assuming that Bash regex doesn't support    (?:thing|otherthing)?
12:28  Velmont: I don't want () to make a new match. I only want it to say "thing or otherthing". Any other way to do that then ?: ?
12:29  pLr: Velmont: check man regex
12:29  drizztbsd: HI
12:29  pLr: Velmont: but you can use the regex of your choice w/ a little setup
12:29  drizztbsd: do you know if gnu sed supports NULL characters?
12:29  drizztbsd: \x0 does not work
12:34  Velmont: pLr: OK, from what I gather from man regex, using a branch without matching is not supported?
12:36  twkm: you learned a regex that is not what bash uses.
12:38  Velmont: twkm: Yes. Python :-) -- I can program aronud it, make an extra if-test.
12:44  twkm: bleh.
12:44  twkm: drizztbsd: ##sed may.  ''man sed'' might too.
12:44  twkm: bash certainly doesn't.
12:51  silasdavis: can I stop bash from interpretting special characters that appear within some special delimiter
12:51  silasdavis: e.g. I have a string with loads of " that I would like to not escape
12:51  silasdavis: something like 'other stuff ignored " " until outer special quotation mark'
12:52  trash: silasdavis: here doc.
12:52  eboyjr: What do the numbers on `man` mean? 1-6 i think.
12:52  trash: eboyjr: man man
12:52  erUSUL: eboyjr: the section the man page is in
12:53  eboyjr: Hrm I couldn't find it there :/
12:53  trash:        man [-acdfFhkKtwW] [--path] [-m system] [-p string] [-C config_file] [-M pathlist] [-P pager] [-B browser] [-H
12:53  trash:        htmlpager] [-S section_list] [section] name ...
12:53  trash: [section]
12:53  trash: There.
12:53  eboyjr: Oh i see it.. it's 1-9
12:53  eboyjr: thanks erUSUL and trash
12:59  ManDay: Why does wim highlight the word "awk" ?
12:59  ManDay: Is awk a bash builtin, too?
12:59  erUSUL: ManDay: no is a command ( an interpreter of a script language )
13:00  twkm: ''type awk''
13:00  juk_: how to write script which supports autocompleation from file.db
13:01  juk_: specificly Im whant for composing email using sendmail
13:01  ManDay: erUSUL: I know awk, twkm
13:01  ManDay: but why does VIM deem a special bash command?
13:02  juk_: alright Ill check in #programming
13:03 --- LXCC-Vincenzo_ is now known as LXCC-Vincenzo
13:04  ManDay: so?
13:07  erUSUL: looks like a vim question; i do not use vi
13:07  ManDay: ok
13:08  ManDay: what is the correct order to get no errors and pipe the output of cmd1 to cmd2?    cmd1 2>/dev/null | cmd2    or   cmd1 | cmd2 2>/dev/null ?
13:09  trash: ManDay: { cmd1 | cmd2; } 2>/dev/null if you want no stderr.
13:10  ManDay: what is the difference to my commands?
13:10  trash: It would be equal to cmd1 2>/dev/null | cmd2 2>/dev/null
13:10  ManDay: ah!
13:11  ManDay: what if I want to pipe the stderr of cmd1 to cmd2?
13:11  ManDay: cmd1 2>&1 | cmd2 ?
13:11  ManDay: i mean:
13:11  ManDay: cmd1 1>/dev/null 2>&1 | cmd2 ?
13:21  cthuluh: !faq 2>&1 > ManDay
13:21  greybot: ManDay: http://mywiki.wooledge.org/BashFAQ/055 -- Tell me all about 2>&1 -- what's the difference between 2>&1 >foo and >foo 2>&1, and when do I use which?
13:30 --- WinstonSmith_ is now known as WinstonSmith
13:35  lhunath: !2>&1
13:35  greybot: Making sense of the copy descriptor operator: http://wiki.bash-hackers.org/scripting/copydescriptor
13:38  ManDay: cthuluh: was I wrong?
13:38  ManDay: lhunath was I ?
13:39  keystr0k: is this default: shopt -u dotglob
13:39  pgas: ManDay: your last command sends stderr through the pipe and discard stdout
13:39  keystr0k: I see I can use shopt -s dotglob to expand hidden files...
13:39  twkm: ManDay: vim sucks?
13:39  pgas: keystr0k: yes dotglob is not set by default
13:40  keystr0k: pgas:  is it a common thing for people to set?
13:40  keystr0k: pgas:  I'm sick of not catching .xyz files when doing mv's
13:40  pgas: not that I know
13:40  keystr0k: mmkay
13:40  lhunath: keystr0k: stop using * as though it means "everything"
13:40  pgas: keystr0k: well, then set it ;)
13:40  twkm: move the directory.
13:41  keystr0k: twkm:  well, I need to move the entire contents of the directory up one level
13:41  twkm: don't fuck-up as often.
13:42  ManDay: pgas: thats what i wanted to do
13:42  keystr0k: lhunath:  I don't understand...
13:42  lhunath: doesn't seem like a common occurance.
13:42  ManDay: thanks.
13:43  keystr0k: twkm:  Yeah... I'll try to keep a closer eye on things.
13:44  lhunath: there is a convention around dotfiles to treat them slightly differently than non-dotfiles.  shopt -s dotglob by default would ignore that convention.  it's up to you, just don't be annoyed when you ls in your homedir and see tmp1.conf tmp2.conf, do an rm *.conf and find you've lost a lot of application settings.
13:45  twkm: keystr0k: pax -rs -^toodeep/-- ...
13:45  keystr0k: lhunath:  Ahhh! That's what you meant... Thank you for explaining.
13:55  slap_stick: hey is there another way other than using IFS='' to stop it expanding a string into a list i.e. a="1 2 3" for i in $a; do echo $i; if i wanted it to be 1 2 3, i knwo i can use IFS='' but i wondered if there's a better way?
13:57  twkm: quote it.
13:59  koala_man: slap_stick: use an array
14:00  slap_stick: cool thanks
14:01  paissad: guys, i get an error when i do this
14:01  paissad: echo "--foo bar' | grep -o -E '--foo'
14:01  paissad: grep: invalid option --
14:01  paissad: how should i proceed (something like escaping the --'
14:01  lhunath: grep -o -E '--foo' is the same as grep -o -E --foo
14:01  lhunath: --foo is not an option to grep.
14:01  lhunath: use grep's -e or --.
14:02  lhunath: (or make your pattern not start with a - character)
14:02  paissad: lhunath, my pattern starts absolutely with --
14:02  lhunath: '[-]-foo', now it doesn't.
14:03  lhunath: anyhow; you have all the options; have fun.
14:15  slap_stick: hm it's adding '' to each element i.e. i have ${CURL} ${CURL_OPTS} -d ${DATA_STRING} ${SERVICE_URL} which ends up + /usr/bin/curl '-H "Content-Type: application/json" -X POST' -d ''\''{   it's adding ' '   around it
14:17  twkm: because you wanted it that way.  use an array instead.
14:17  slap_stick: fair enough
14:23  lhunath: !varcap > slap_stick
14:23  greybot: slap_stick: By convention, we capitalize environment variables (PAGER, EDITOR, ..) and internal shell variables (SHELL, BASH_VERSION, ..). All other variable names should be lower case. Remember that variable names are case-sensitive; this convention avoids accidentally overriding environmental and internal variables.
14:23  lhunath: !$GREP
14:23  greybot: ''$GREP $args $file'' -- Do NOT put command names or options in variables. You don't gain ANYTHING from making 'GREP' configurable, when replacing it with something else you'll need to change the whole command line ANYWAY. Commands like that belong in a *function*. See http://mywiki.wooledge.org/BashFAQ/050
14:24  lhunath: slap_stick: start quoting your variables.  at least you'd SEE that doing it this way is badly bugged.
14:24 --- jzacsh is now known as jzacsh_]
14:24 --- jzacsh__ is now known as jzacsh
14:24 --- jzacsh_] is now known as jzacsh_
14:49  wabash: What is the best way to replace a pattern in a text file?
14:50  geirha: !template
14:50  greybot: http://mywiki.wooledge.org/TemplateFiles
14:50  wabash: geirha: For me?
14:52  geirha: Yes, it *might* be what you're looking for. Hard to say.
14:54  erUSUL: !faq replace
14:54  greybot: http://mywiki.wooledge.org/BashFAQ/021 -- How can I replace a string with another string in all files?
15:00  lhunath: ignoring the utter ambiguity; let's just say ed.
15:02  wabash: sed. I should use sed. How can I get sed to replace a pattern in a file?
15:02  wabash: sed s/// < file > file
15:02  wabash: ?
15:03  loomsen: sed -i
15:04  wabash: loomsen: Thank you.
15:09  sysdef: why is this working on commandline but not in a script? x="foobar";echo ${x/${x/*o}}
15:09  sysdef: test.sh: 5: Bad substitution    at: echo ${x/${x/*o}}
15:10  geirha: It works in bash, not in sh
15:11  geirha: !sh
15:11  greybot: sh is the POSIX or Bourne shell, not bash. Even if sh is a symlink to bash, running a script under 'sh' (either by typing 'sh myscript' or putting '#!/bin/sh' at the top) *disables* many bash features. See http://mywiki.wooledge.org/BashGuide/Practices#Choose_Your_Shell
15:17  go|dfish: it doesn't even work in bash
15:22  lhunath: # x="foobar";echo "${x/${x/*o}}"
15:22  evalbot: lhunath: bash: ${x: bad substitution
15:22  lhunath: 4# x="foobar";echo "${x/${x/*o}}"
15:22  shbot: lhunath: foo
15:23  lhunath: guess it's time to upgrade.
15:25  kojiro: that's what SHE said
15:25  kojiro: ...
15:25  kojiro: then she left :(
15:26 * erUSUL pats kojiro shoulder
15:28  sysdef: 4# x=$0'$*';echo ${x/${x/*\/}}
15:28  shbot: sysdef: /bin/
15:28  sysdef: :o
15:28  lhunath: single-quoted $*?  odd.}
15:29  lhunath: just do ${x%/*}
15:29  sysdef: yeah, you'll never find a folder called .../foobar$*/...
15:29  lhunath: who cares about the trailing slash.
15:31  sysdef: hmmm...
15:31  sysdef: # x="/usr/local/bin/local";echo ${x%/*}/
15:31  evalbot: sysdef: /usr/local/bin/
15:31  sysdef: 4# x="/usr/local/bin/local";echo ${x%/*}/
15:31  shbot: sysdef: /usr/local/bin/
15:32  lhunath: if you really want to do it in bash3, there's always extglobs.
15:32  lhunath: # x=foobar; echo "${x%%*([^o])}"
15:32  evalbot: lhunath: foo
15:32  sysdef: 4# echo ${0%/*}/
15:32  shbot: sysdef: /bin/
15:35  giany: hello, I have 2 files : english.php and french.php. Each of these files contain variables like : var_name='translatation'; How can I search in these 2 files and if var_name exists in both files then the value from the english.php should be moved into the value from french.php. I hope it makes sense.
15:36  lhunath: grep and ed or something.
15:39  cannonball: Good morning all.  I am currently populating a bash variable with command substitution consisting of a command piped through sed to get a specific part of the output.  The actual line is:
15:39  cannonball: THESUBVER=`openssl version | sed -e 's/.*[[:digit:]]\.[[:digit:]]\.\([[:digit:]]\).*/\1/'`
15:40  lhunath: pretty ugly
15:41  cannonball: I know that I can do ${PARAMETER/pattern/replace} but in my tests, I am unable to get an equivalent output (using /'s at all causes an error in my brief testing, but I've used % in the past without problems)
15:42  cannonball: This is on CentOS 4.x and 5.x boxen, so it's a current version of bash.  Magic is #!/bin/bash, no sh issues to consider.
15:42  lhunath: IFS=' .' read _ major minor patch _ < <(openssl version)
15:43  cannonball: WHOA, I'll have to dig to figure out what everything after the separator does, thanks for the pointer.
15:45  lhunath: !faq 1 > cannonball
15:45  greybot: cannonball: http://mywiki.wooledge.org/BashFAQ/001 -- How can I read a file (data stream, variable) line-by-line (and/or field-by-field)?
15:45  lhunath: it's really the same thing as:
15:45  lhunath: IFS=' .' read appname major minor patch alltherest < <(openssl version)
15:46  cannonball: So sweet, thanks!
15:46  ritzt3ch: is there a way to unClear my Bash history ? someone got into my box and cleared it thinking it was a Timespamp option to view the bash history
15:47  likewhoa: ritzt3ch: restore from a backup :D
15:50  loomsen: lol
15:51  likewhoa: loomsen: yea i know, who keeps backups these days :D
15:54  zplinux: hi all
15:55  zplinux: how can I ask sed to replace every string 192.168.0.0/24 with ${NETWORK} in /path/file ?
15:55  zplinux: sed -i 's/.*192.168.0.1\/24.*/.*'${NETWORK}'.*/' /path/file
15:55  zplinux: fails
15:56  twkm: set -x is your friend.
15:58  taylanub: double quote the variable
15:59  taylanub: and you can use any character instead of / in sed substitution. e.g. 's_foo/bar/baz_foo/bar_'
16:00  zplinux: o ok
16:00  twkm: sed is entirely unaware of the variable.  set -x shows you that.
16:00  zplinux: didnt know that
16:00  PaulPaul: xargs
16:00  twkm: set -x does.  don't be afraid of it.
16:00  twkm: xargs sucks, be afraid of it.
16:02  unop: !xargs > PaulPaul
16:02  greybot: PaulPaul: xargs(1) is dangerous (broken) when processing filenames that are not null-terminated. If you are using find, then use find's '-exec(dir) <command> {} +' instead.
16:21  Aniar: unop: can't you "find -print0 | xargs -0"  as well to avoid the danger?
16:21  go|dfish: yes
16:22  mh__: hi.. if i want to loop a file and grep for all lines starting with just "^1" which will say not "^10", how can i do that.? the output is from a mysql -e output
16:22  lhunath: find has -exec {}, xargs is pointless.
16:23  Aniar: lhunath: doesn't "-exec {}" run 1 fork per hit, but xargs doesn't have to?
16:23  lhunath: -exec {} + does the same thing as xargs.
16:23  unop: Aniar, -exec can be called in two ways
16:24  lhunath: !forget xargs
16:24  greybot: OK, lhunath
16:24  Aniar: that is: `find ./ -name "*.rpm" -print0 | xargs -0 rpm -e` works for me, because there's dependancies in the RPMs, but I couldn't get "-exec" to work, cause it kicked off an "rpm -e $file" for each file, but xargs called "rpm -e $file1 $file2 xxx"
16:25  Aniar: of course, that was 2 years ago, and I haven't revisited it
16:26  lhunath: !learn xargs xargs(1) is dangerous (broken) when processing filenames that are not NUL-terminated.  If you're working with filenames, use find's -exec {} + instead (yes, it does multiple-filenames-per-invocation, too).
16:26  greybot: OK, lhunath
16:26  mh__: okay i found out with this manual http://www.orafaq.com/forum/t/37005/0/, weird stuff.. but yet quite simple if you know :)
16:27  lhunath: Aniar: -exec rpm -e {} \;    vs    -exec rpm -e {} +
16:27  lhunath: the latter is what you wanted.
16:36  Aniar: lhunath: ahh, cool.  thanks
16:55 --- rduplain_ is now known as rduplain
17:06  phsoftnet: hello guys/girls
17:07  phsoftnet: suppose i run a command and it outputs two lines. i would like to put each line in a separate variable. i tried doing:     cmd | {read var1; read var2; }
17:07  phsoftnet: and then printing the values $var1 and $var2 shows nothing. what am i doing wrong here?
17:08  erUSUL: phsoftnet: read var1 var2 < <(command)
17:08  phsoftnet: ooh ... first time i've seen this syntax ...
17:10  phsoftnet: well, i get a syntax error on this one... test.sh: line 3: syntax error near unexpected token `<' test.sh: line 3: `read s e < <(ls)'
17:11  leshak: hi, i'm creating an method to make backup with cryptography, truecrypt + rsync - script here: http://pastebin.com/KQFwgQRV but if cause some error when the backup will sync the vault of truecrypt will be open, how can i make an method if cause any error the vault will close..
17:11  drizztbsd: phsoftnet: bash or dash?
17:11  taylanub: erUSUL: mustn't the IFS be set to \n first?
17:12  phsoftnet: hmm. i suppose bash but you never know wait a minute.
17:12  erUSUL: phsoftnet: sorry is --> IFS=$'\n' read  -d "" var1 var2 < <(command)
17:12  phsoftnet: it's bash 3.x
17:13  phsoftnet: still doesn't like the syntax ... does it work for you?
17:13  phsoftnet: can't believe i've wasted one hour already on this ..
17:14  robgn: i just installed Django can someone help me setup a project its not working for me
17:15  jk4: hi
17:15  leshak: please! someone? hi, i'm creating an method to make backup with cryptography, truecrypt + rsync - script here: http://pastebin.com/KQFwgQRV but if cause some error when the backup will sync the vault of truecrypt will be open, how can i make an method if cause any error the vault will close..
17:16  jk4: my question isn't for a script it's just to help me merge some text files.
17:16  taylanub: !ask
17:16  greybot: You need not ask permission to ask a question. Just ask and be patient. http://mywiki.wooledge.org/NetEtiquette
17:16  erUSUL: phsoftnet: an array ? --> mapfile var < <(command)
17:17  phsoftnet: this < <(command) thing doesn't get parsed
17:17  jk4: I have some huge amount of text that's too big to copy and paste and I want to insert it into the middle of a file at byte 4820.
17:18  taylanub: jk4: man head, man cat, man tail ...
17:18  erUSUL: phsoftnet: command | mapfile array
17:18  robgn: how can i join the django channel?
17:18  loomsen: leshak: something like this?   cd /root 2>/dev/null || echo "you're not allowed"
17:18  phsoftnet: ok
17:18  erUSUL: 3# printf "%s\n" a b | mapfile var ; echo "${var[0]}"
17:18  shbot: erUSUL: bash3: mapfile: command not found
17:18  shbot: erUSUL: bash3: printf: write error: Broken pipe
17:18  phsoftnet: {read var1; read var2; } < <(command)
17:18  phsoftnet: this one works
17:19  taylanub: robgn: /join #django
17:19  robgn: i did that but it says identify my name with the server
17:19  Synthead: # omg=( "guys," I am so hella bored ); echo ${omg[$@]}
17:19  evalbot: Synthead: guys,
17:19  robgn: i did the nickserv registrarion
17:19  phsoftnet: wait! haha it works when i write it on the terminal, but not in a script file!
17:19  taylanub: !sh
17:19  greybot: sh is the POSIX or Bourne shell, not bash. Even if sh is a symlink to bash, running a script under 'sh' (either by typing 'sh myscript' or putting '#!/bin/sh' at the top) *disables* many bash features. See http://mywiki.wooledge.org/BashGuide/Practices#Choose_Your_Shell
17:19  j0shua: how can i test if a variable is an integer so i don't get errors saying " [: : integer expression expected"
17:20  yitz_: !faq digit
17:20  greybot: yitz_: No matches found at http://mywiki.wooledge.org/BashFAQ
17:20  phsoftnet: yes but when i type     bash  myscript.sh
17:20  phsoftnet: it still doesnt work
17:21  tmr: !faq valid
17:21  greybot: http://mywiki.wooledge.org/BashFAQ/054 -- How can I tell whether a variable contains a valid number?
17:21  j0shua: thanks
17:22  leshak: loomsen: i think so no, try understand, maybe i speak wrong, lets go... i have an container of TRUECRYPT on my backup server, my cliente server send files using rsync to backup server, but before to backup the script open this container and send the files to, /media/truecrypt1, when the backup get 100% the close the container.. but for example.. if rsync fail the container will be continue open.. i need from some method to .. if get some error on rsync the c
17:22  leshak: ontainer will close for anyone can't see that's have here...
17:22  phsoftnet: ok my fault. works.
17:25  loomsen: leshak: ok i dont use truecrypt, but it'll be something like: rsync foo || command to close the container
17:25  loomsen: leshak: || is a logical or, it will execute the command right of it if the command left of it exits with a non zero status
17:29  robgn: i keep getting this message but i registered and identified ,   This channel requires that you have registered and identified yourself with the network's nickname registration services (e.g. NickServ). Please see the documentation of this network's nickname registration services that should be found in the MOTD (/motd to display it).
17:29  robgn: for django and python channel
17:30  robgn: help?
17:30  loomsen: robgn: so register yourself... type: /msg nickserv help register
17:31  twkm: robgn: why ask us -- try #help.
17:31  robgn: k
17:32  loomsen: twkm++ i dont see any django/python relation for this channel
17:42  leshak: loomsen: can you show me an example? because i don't understand.. ;/
17:47  kotique: how do I split a word by column/
17:47  kotique: other than invoking cut -d:
17:48  ferret: cut -d :
17:48  ferret: look it's different it has a space in it
17:48  unop: :)
17:50  Bushmills: doesn't matter :)
17:51  kotique: how do I do that in bash?
17:54  Bushmills: try splitting input into array, using : as delimiter (used as IFS), then output the while array with newline as delimiter between array items
17:54  Bushmills: whole...
--- Log closed Mon Oct 11 21:08:51 2010
--- Log opened Mon Oct 11 21:08:59 2010
21:08 --- Users 542 nicks [0 ops, 0 halfops, 0 voices, 542 normal]
21:09  ferret: TheBonsai: perl -pe 's/foo/bar/'
21:09  ManDay: geirha: of course :-/
21:09  ManDay: geirha: oh i see
21:09  taylanub: the dirtiest way would be  sed 's/\\/\\/g; s/$/\/'
21:09  ManDay: what is the difference between [[ ]] and (( )) and [ ] ?
21:09  taylanub: well, not THAT dirty now that i write it down...
21:09  ferret: ![[
21:09  greybot: [[ is a bash keyword similar to (but more powerful than) the [ command. See <http://mywiki.wooledge.org/BashFAQ/031> and <http://mywiki.wooledge.org/BashGuide/TestsAndConditionals>. Unless you're writing for POSIX sh, we recommend [[.
21:09  yitz_: ![[ > ManDay
21:09  greybot: ManDay: [[ is a bash keyword similar to (but more powerful than) the [ command. See <http://mywiki.wooledge.org/BashFAQ/031> and <http://mywiki.wooledge.org/BashGuide/TestsAndConditionals>. Unless you're writing for POSIX sh, we recommend [[.
21:09 --- Channel #bash was synced in 64 seconds
21:10  ManDay: and why does [[ "1"=="2" ]] return true?
21:10  TheBonsai: ferret: aaah, -p
21:10  go|dfish: sybariten: it's not bash, it's expect
21:10  geirha: ManDay: Because "1==2" is a non-empty string
21:11  ferret: ManDay: surely that's explained in one of those two links the bot just gave
21:11  poisonbit: I'm trying "exact match" with  [[ "$@" =~ "searched_string" ]] &&   but It matches also search_string_foo   If i try "^string$" does not work...
21:11  omani: go|dfish, got it. the line should be: var1="hallo"; cat test.csv | awk '$1 == "'"$var1"'" { print $3 }'
21:11  omani: thx for the tip
21:11  ManDay: thanks geirha sorry ferret
21:11  taylanub: poisonbit: =~ is not for exact matching = is
21:12  poisonbit: ouch, thanks :)
21:12  lhunath: poisonbit: don't treat multiple arguments as a single string.
21:12  lhunath: poisonbit: use a loop.
21:12  sybariten: go|dfish: oh! its someting of its own thing right?
21:13  sybariten: i just realized that all the expect examples i've found, use separate scripts.... so maybe i cant just blend "expect commands" into one single bash script?
21:13  taylanub: poisonbit: it can also do non-exact matching if you use [[ though.  escape * and ?
21:14  poisonbit: oh lhunath is right, I need a loop
21:16  taylanub: oh, didn't even pay attention to the "$@" ... that'll turn into multiple strings
21:16  poisonbit: for thing; do [[ "$thing" = "searched_string" ]] && echo 'match0; done
21:16  Varazir: Hello I lik eto echo a array to a file, how can I make it create new line for every entry ?
21:16  Varazir: do I need to loop it ?
21:17  go|dfish: Varazir: you can use printf, like, printf %s\\n "${array[@]}"
21:17  lhunath: taylanub: it'll behave as "$*", there, I believe.
21:18  erUSUL: Varazir: printf ?
21:18  Varazir: okay thanks
21:18  taylanub: lhunath: i just felt a creepy AI doing things behind my back
21:19  Varazir: printf %s\\n "${arrar[@]} >> foo.txt ?
21:19  lhunath: actually, as $*
21:19  taylanub: it's not as smart as i thought then
21:19  taylanub: but why would it?
21:19  ManDay: how can I say MYVAR=[[ ... ]]    (making MYVAR 1 or 0 depending on the result)? or can i only do that in two lines using $? ?
21:19  lhunath: there is no concept of arguments inside [[.  since [[ is a keyword.
21:20  lhunath: ManDay: [[ is a command.  you RUN it.
21:20  lhunath: ManDay: you are assigning a string to a var.  not running anything.
21:20  loomsen: ManDay: [[ ... ]] && MYVAR=0 || MYVAR=1 ?
21:20  taylanub: ManDay: ...; myvar=$?
21:20  Varazir: go|dfish: was I right ?
21:21  ManDay: loomsen: ok ill prefer using $? then
21:21  lhunath: if the test is numeric, (( would be shorter & prefered
21:21  taylanub: Varazir: looks right, except you forgot to close the "
21:21  taylanub: you can also just try it with a temporary file
21:22  Varazir: taylanub: missed the last " yes,  thanks
21:31  pickard: join kernel
21:32  ritzt3ch: i have like 10 log servers is there a way not to dupe or dump in 1 location BUT Pull from 1 location and like a tail -f ALLSERVERS | grep BLAH
21:36  manhunter: hi, if(c>0 || c<10){........} , how can i do this with bash?
21:37  go|dfish: manhunter: if (( ... )); then ...; fi
21:37  manhunter: go|dfish: i don't want to use (( ..... )) , i use if [ ....... ] ;then ........ fi
21:38  go|dfish: ok
21:38  manhunter: if(str=="N"||str=="n"){break} ..........
21:38  TheBonsai: for what reason, when you want to do it "with bash" (the arithmetics)?
21:39  manhunter: it's a string comparison
21:39  manhunter: bast string
21:40  manhunter: if [ ${str} == "N" or ${str} == "n" ]; then break; fi , how can i do this?
21:40  TheBonsai: !test
21:40  greybot: help test <Enter> http://mywiki.wooledge.org/BashGuide/TestsAndConditionals | http://bash-hackers.org/wiki/doku.php/commands/classictest
21:40  TheBonsai: but you should use [[ ]]
21:40  erUSUL: if [[ "$str" == [Nn] ]]; then ... ; fi ?
21:41  TheBonsai: yup
21:43  MTecknology: bash scripts are kinda fun
21:43  MTecknology: This one will probably suck though
21:43  manhunter: TheBonsai: why [[ ]] ?
21:43  MTecknology: ![[]
21:43  MTecknology: ![[
21:43  greybot: [[ is a bash keyword similar to (but more powerful than) the [ command. See <http://mywiki.wooledge.org/BashFAQ/031> and <http://mywiki.wooledge.org/BashGuide/TestsAndConditionals>. Unless you're writing for POSIX sh, we recommend [[.
21:45  manhunter: ok, what's the equivalent of this , ? if [ "${str}" == "N" || "${str}" == "M" ]; then ......... , is it ok?
21:45  nacitar: If I edit /etc/security/limits.conf, and set the hard limit for the number of processes per user (equivalent of ulimit -u)... does this limit the user, across the entire system, to that number of processes?  Or, as ulimit is a bash function, does that just set the initial hard limit for each bash process?  Or reworded, does setting the hard limit there to 10 make it so each bash shell can have 10 processes from your user at most, or does setting it the
21:48  nacitar: ...is this the right place to ask that question (ulimit is a bash command)?  I'm unsure if this is a bash shell channel, or a bash scripting channel.. or both.   Because my question has little to do with bash _scripting_.
21:48  TheBonsai: i guess you'll find the answer in setrlimit(2) or equivalents
21:49  nacitar: TheBonsai: ulimit invokes those internally?
21:49  TheBonsai: limits are enforced by the OS, not by a shell
21:50  nacitar: TheBonsai: but on that same note, not in the limits.conf file, but with the ulimit command I opened a shell and set the max processes for my current user to 10 more than I had (setting the hard limit), and then I started 10 processes in that shell, and it wouldn't work anymore... then I go to another shell I had open, and i could open as many things as I wanted
21:51  nacitar: which means either the hard limit is enforced by the shell, or ulimit -H is different than setting the hard limit in limits.conf
21:52  TheBonsai: limits.conf is the configuration file of a PAM module that hooks into your session creation procedure
21:53  MTecknology: !pe
21:53  greybot: Parameter Expansion is the expansion of a parameter: "$foo", "$1". You can use it to perform string operations: "${file%.mp3}", "${0##*/}". Remember to *always* quote them. See http://mywiki.wooledge.org/BashSheet#Parameter_Operations
21:54  TheBonsai: i can't even set -H -u here
21:54  TheBonsai: *scratches head*
21:54  nacitar: you can only set it lower than the value specified in limits.conf hard limit
21:55  TheBonsai: limits.conf doesn't matter directly, the current limit matters (which initially MAY come from pam_limits, yes)
21:55  TheBonsai: max user processes              (-u) 69632 <--- i get that by -Ha
21:56  TheBonsai: $ ulimit -Hu 1000
21:56  TheBonsai: bash: ulimit: max user processes: cannot modify limit: Invalid argument
21:58  nacitar: ah, because ulimit -Su is > 1000
21:58  nacitar: =P
21:58  nacitar: hard limit must be >= soft limit.
21:58  manhunter: it's not working , if [[ "$str" == "[Nn]" ]];then break ; fi  , it's not breaking the while true ; do ...... done loop
21:58  nacitar: those errors could definitely use a bit more verbosity.
21:59  erUSUL: manhunter: why you added "" around [Nn] ?
21:59  erUSUL: # str=N ; if [[ "$str" == [Nn] ]] ; then echo yay ; fi
21:59  evalbot: erUSUL: yay
22:00  erUSUL: # str=y ; if [[ "$str" == [Nn] ]] ; then echo yay ; fi
22:00  evalbot: erUSUL: no output
22:00  TheBonsai: nacitar: can you explain? hard limit is at 60k, i can't decrease it..... AAAH ok, got it. the errors can't be more verbose, because it's a system error. bash can't tell you why it fails, because it just calls a syscall
22:00  manhunter: erUSUL: why "[Nn]" doesn't work
22:00  manhunter: erUSUL: "" for string
22:01  manhunter: [Nn] works
22:01  erUSUL: becouse [Nn] is a glob not a string ?
22:01  manhunter: http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_09_02.html
22:01  manhunter: it used ,while [ $HOUR -ne "00" ]; do
22:01  geirha: !tldp
22:01  greybot: the tldp bash guide is outdated, and in some cases just plain wrong. There's a reason it isn't in the topic.
22:03  TheBonsai: nacitar: ah i know what you trapped into. the limits of your new shell are inherited from its parent. it's a bit weird, yes, yes..
22:03  geirha: manhunter: [ $HOUR -ne "00" ]   that's laughably silly. Forget everything you've read in that guide.
22:04  geirha: That snippet alone is a clear indication that whoever wrote it has no clue.
22:04  poisonbit: will that function declaration work as I expect?  and also... does it look hugly to be a "bash framework" to write bash libs?   http://paste.debian.net/plain/95713
22:05  manhunter: is this correct ? if [ "${str}" == [Nn][oO] ] ; then
22:05  manhunter: i got syntax error
22:06  geirha: poisonbit: [[ "$-" = "*i*" ]]  You quoted the glob. It'll test if "$-" is the exact string "*i*" there... not whether it contains "i"
22:06  poisonbit: ops
22:06  TheBonsai: manhunter: use [[ ]]
22:06  geirha: case "$@" in  That won't do what you expect.
22:07  erUSUL: manhunter: use [[ not just [ ... why again you changed it from what we say here?
22:07  manhunter: TheBonsai: i used [[ ]] , but error
22:07  manhunter: 			break;
22:07  erUSUL: # str=No ; if [[ "$str" == [Nn][oO] ]] ; then echo yay ; fi
22:07  evalbot: erUSUL: yay
22:07  manhunter: 		fiif [ [ "${str}" == [Nn][Oo] ] ];then
22:07  manhunter: 			break;
22:07  manhunter: 		fi
22:07  nacitar: TheBonsai: everything I'm reading seems to imply these are only setting process limits; and that if I have multiple bash processes even if my hard limit is set to the same, low value everywhere, that each of the bash processes get that entire chunk... so I'm _thinking_ neither limits.conf or ulimit (or setrlimit) can truly limit the number of processes for a user.. but only the number of processes for a user spawned by a particular other process..
22:07  erUSUL: manhunter: [[ is not the sanme as [ [
22:08  erUSUL: same*
22:08  nacitar: TheBonsai: so I'm thinking with a sufficient number of bash shells, the only limit my user would have is the pid_max of the kernel
22:08  geirha: poisonbit: Either you want   ''case $1 in ...''  or  ''for arg; do case $arg in ...''
22:08  TheBonsai: nacitar: it's for a specific subset of processes in the tree. that's why you usually enforce it on session creation (pam_limits)
22:08  poisonbit: geirha, for sourced files what ot the two ?
22:08  poisonbit: the file is source like:  . file arg1 arg2
22:09  geirha: manhunter: As I said. FORGET EVERYTHING YOU READ IN THAT GUIDE... read the guide in /topic
22:09  nacitar: TheBonsai: Oh, I see what you're saying
22:09  MTecknology: 'mysqli://someuser:somepassword@localhost/somedatabase'; <-- is there any way to split this into variables like db_user, db_pass, and db_name ?
22:09  TheBonsai: nacitar: which is the weirdness i said above, for the "number of processes for a specific user"
22:09  nacitar: TheBonsai: so what I'm saying is right... except they are all enforced by PAM similarly to how bash enforces limits on its own children, thus making it more-or-less a system-wide limit
22:10  manhunter: geirha: ok
22:10  nacitar: TheBonsai: makes sense now... just had to dillute the mud a bit. :)
22:10  geirha: poisonbit: Then you probably want the latter. Testing each argument in turn
22:10  TheBonsai: nacitar: yes. weird :) other OS may work differently, by the way. we're talking about linux
22:10  manhunter: bye
22:10  manhunter: it's done
22:11  TheBonsai: MTecknology: not in one step, but multiple PEs should do it (reminds me of some URL parser i did some day)
22:11  geirha: poisonbit: You also forgot to declare loaded as an associative array
22:11  geirha: poisonbit: Oh, right, it's sourced. Nevermind.
22:12  MTecknology: TheBonsai: maybe even sed for this?
22:12  poisonbit: ah yes, it's delared before
22:12  erUSUL: !regex
22:12  greybot: Some people, when confronted with a problem, think ``I know, I'll use regular expressions.'' Now they have two problems. -- jwz
22:13  poisonbit: Finally I've replaced by:    for method; case "$method" in,   lot of thanks geirha
22:13  poisonbit: I stay unknowing what is wrong with case "$@" in
22:14  MTecknology: erUSUL: so stick with a bunch of pe's?
22:14  TheBonsai: MTecknology: i'd guess it's more complex in sed
22:15  erUSUL: MTecknology: looks easier with pe ; but maybe that's because i do not know how to use re ;P
22:15  geirha: # set -- a b; case "$@" in a) echo "a is an argument";; "a b") echo "Wait, all the arguments mangled into one string?";; esac
22:15  evalbot: geirha: Wait, all the arguments mangled into one string?
22:16  TheBonsai: natural behaviour of case...esac
22:16  poisonbit: now it's pretty clear, thanks again geirha
22:17  helo: # url='mysqli://someuser:somepassword@localhost/somedatabase'; host=${url#*@} host=${host%%/*}; echo $host
22:17  evalbot: helo: localhost
22:17  helo: but if they leave out the @, it will break
22:18  geirha: helo: Yes
22:18 --- muzer is now known as MuzerAway
22:19  geirha: helo: You want it to also work for  url='mysqli://localhost/somedatabase' ?
22:20  geirha: host=${url#*://} host=${host#*@} host=${host%%/*}
22:20  trifler: Hello, how can I make this in a fancier manner? ROOT=`id | cut -d = -f 2 | cut -d "(" -f 1`, I want ROOT to be assigned the value from uid=0 (for root) something else for a user.
22:21  geirha: echo "$EUID"
22:21  loomsen: $UID
22:21  trifler: :D
22:21  TheBonsai: lol
22:21  trifler: that is fancy, and not that hard :D
22:21  geirha: id -u
22:22  loomsen: lol
22:22 --- MuzerAway is now known as muzer
22:22  geirha: (If you're not scripting for bash)
22:22  trifler: *facepalm*
22:22  TheBonsai: id -u is definitely the best approach
22:22  TheBonsai: that's what you get when you google for shell know how :D
22:22  trifler: I was thinking some cool regexp.
22:23  trifler: Overthinking you may call it :D
22:23  geirha: !regex
22:23  greybot: Some people, when confronted with a problem, think ``I know, I'll use regular expressions.'' Now they have two problems. -- jwz
22:25  trifler: Well I solved it, ty guys. :)
22:26  TheBonsai: hm
22:26  TheBonsai: wrong
22:26  TheBonsai: WE solved it
22:26  TheBonsai: thank you guys
22:26  TheBonsai: :D
22:26  loomsen: :D
22:28  loomsen: where could i run into trouble if i use $UID instead of $EUID?
22:29  nacitar: TheBonsai: Would the session limits apply to init as well?  Wondering if fork + setsid + fork (daemonizing; making a child of init) would bypass the limits
--- Log closed Mon Oct 11 22:40:35 2010
--- Log opened Mon Oct 11 22:45:45 2010
22:45 --- Users 553 nicks [0 ops, 0 halfops, 0 voices, 553 normal]
22:46 --- Channel #bash was synced in 66 seconds
22:48  Aniar: is there an easy way to test, inside a shell, if "set -o xtrace" is, well, set?  (if shell was started with -x, then do y)?  I can't find anything about testing for it,
22:50  geirha: [[ $- = *x* ]]
22:52  geirha: # if [[ $- = *x* ]]; then echo "the -x is on"; fi; set -x; if [[ $- = *x* ]]; then echo "now it's on"; fi
22:52  evalbot: geirha: + [[ himxB = *x* ]]
22:52  evalbot: geirha: + echo 'now it'\''s on'
22:52  evalbot: geirha: etc... ( http://pastebin.com/6PNUpGYB )
22:52  geirha: Ok, I didn't think that one through :)
22:55  Aniar: geirha: great, now to translate that to "sh".  *whee*
22:57  geirha: Aniar: case $- in *x*) ...
22:58  Aniar: geirha: I was just getting there, thanks. :)
22:58  geirha: Assuming POSIX sh. I don't know if bourne has the special - parameter ... or -x for that matter
--- Log closed Mon Oct 11 22:59:44 2010
--- Log opened Mon Oct 11 22:59:57 2010
22:59 --- Users 548 nicks [0 ops, 0 halfops, 0 voices, 548 normal]
23:00  geirha: solaris should have a posix shell under /usr/xpg4/bin/sh
23:00  geirha: don't know about aix
23:00  Aniar: geirha: not minimal installs of Sol 8
23:00 --- Channel #bash was synced in 70 seconds
23:00  Aniar: geirha: I'm 90% sure the normally path'd sh is posix-compliant though
23:01  Aniar: it's more a matter of the pain of losing all the nice bash-isms and any other modern scripting tools
23:03  geirha: Well, /bin/sh is bourne on solaris 8 at least
--- Log closed Mon Oct 11 23:10:18 2010
