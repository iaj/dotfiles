--- Log opened Thu Dec 02 15:16:28 2010
--- Log closed Thu Dec 02 15:16:28 2010
--- Log opened Thu Dec 02 16:28:51 2010
16:28 --- Users 537 nicks [0 ops, 0 halfops, 0 voices, 537 normal]
16:29  lhunath: mokay; that one is significantly broke
16:29  twkm: heh.
16:30  lhunath: maybe something like: xor() { local a=$? b; "$@"; b=$?; echo $a ^ $b; return $(( !( (! a) ^ (! b) ) )); }  I can't be bothered to simplify this
16:30  lhunath: if foo; xor bar
16:30 --- Channel #bash was synced in 199 seconds
16:33  lhunath: not sure why I inversed a or b.
16:35  toader: hi, is "let " same with $(( )) ?
16:36  lhunath: they both put you in arithmetic context
16:36  toader: lhunath: are they same effect?
16:37  toader: lhunath: what does $@  represent? and $?
16:37  mDuff: !$@ > toader
16:37  greybot: toader: The difference between $@ and $*: Unquoted, none at all: both equal $1 $2 .... With double quotes, "$@" is "$1" "$2" ..., while "$*" is expanded as the single argument "$1c$2c..." (where c is the first character of IFS). You almost always want "$@". The same goes for arrays: "${myarray[@]}"
16:37  mDuff: !$? > toader
16:37  greybot: toader: The special parameter ? (you use $? to expand it) contains the exit status of the previous command, an integer from 0 to 255 inclusive. In general, an exit status of 0 implies success (or "true") and non-zero implies failure ("false").
16:39  twkm: ''man bash'', special parameters.
16:40  toader: !awk > toader
16:40  greybot: toader: Check the topic of #awk and also http://www.grymoire.com/Unix/Awk.html -- awk questions belong to #awk. Note: If you are piping through more than one (grep|sed|awk), you're likely doing it wrong.
16:41  toader: !$(( > toader
16:41  greybot: toader: $((...)) is an arithmetic substitution. After doing the arithmetic, the whole thing is replaced by the value of the expression. See <http://mywiki.wooledge.org/ArithmeticExpression>.
16:41  toader: !(( > toader
16:41  greybot: toader: ((...)) is an arithmetic command, which returns an exit status of 0 if the expression is nonzero, or 1 if the expression is zero. Also used as a synonoym for "let", if side effects (assignments) are needed. See <http://mywiki.wooledge.org/ArithmeticExpression>.
--- Log closed Thu Dec 02 16:45:47 2010
--- Log opened Thu Dec 02 16:51:12 2010
16:51 --- Users 545 nicks [0 ops, 0 halfops, 0 voices, 545 normal]
16:51  jww: roger mDuff , I look that now.
16:51  poisonbit: toader, how doesn't work? do you have  shopt -s checkwinsize  in your bash rc files ?
16:52  pmorris: It seems that every time I run a command, $COLUMNS gets reset to 80
16:53 --- Channel #bash was synced in 126 seconds
16:53  Fatal: something in your PROMPT_COMMAND that changes COLUMNS?
16:54  Twelve-60: simpliest way to append multiple items onto an array?
16:54  Twelve-60: (non-sparse)
16:54  Fatal: Twelve-60: arr+=("more" "items")
16:54  mDuff: Twelve-60, your_array+=( "item one" "item two" )
16:54  Twelve-60: ok
16:54  Twelve-60: still having this very strange quoting problem but only for 1 item in the array lol
16:55  Twelve-60: i start it like this
16:55  Twelve-60: REMOTE_CMD_OPTIONS=("-s" "--ftp-port gotgames.com.au:50000-50999")
16:55  Twelve-60: look fine?
16:56  Fatal: yes
16:57  Twelve-60: some how that 2nd item gets quoted
16:57  taylanub: well, it _is_ quoted
16:57  Fatal: Twelve-60: what do you mean?
16:58  Fatal: Twelve-60: how do you use the array?
16:58  Fatal: Twelve-60: example code of where it get's "quoted"
16:58  mDuff: !varcap > Twelve-60 (FYI)
16:58  greybot: Twelve-60 (FYI): By convention, we capitalize environment variables (PAGER, EDITOR, ..) and internal shell variables (SHELL, BASH_VERSION, ..). All other variable names should be lower case. Remember that variable names are case-sensitive; this convention avoids accidentally overriding environmental and internal variables.
16:59  mDuff: Twelve-60, it gets quoted because you're quoting it. If you want --ftp-port and gotgames to be two separate arguments, write them that way
16:59  pmorris: Apparently it is because `shopt checkwinsize` is turned on. It reads the window size and automatically sets the columns. But in that case how do I change the window size?
16:59  mDuff: pmorris, if your terminal is setting the size wrong on getting a WINCH signal, that's a problem with your terminal program
17:00  mDuff: (ie. not really in bash's control)
17:00  pmorris: I'm using a virtual machine
17:00  pmorris: It doesn't have any options for defining the size, though, it reads the size from the guest application, e.g. Linux. So apparently they're both reading the screen size from each other and somehow that leaves me with the smallest possible size
17:00  mDuff: pmorris, by "terminal program" I mean gnome-terminal, or xterm, or putty, or whatever else you're using.
17:01  Twelve-60: this is the command it runs (using set -x): curl -s '--ftp-port gotgames.com.au:50000-50999' --ftp-ssl -k --ftp-ssl -k -T haha --user gotgames:bigpassword --ftp-create-dirs -# ftp://x.x.x.x/27017/server2/haha
17:01  mDuff: pmorris, ...somewhere you're running one of those, and it's a problem with that.
17:01  mDuff: Twelve-60, yes, that's the behavior you're asking it for.
17:01  Twelve-60: using ${REMOTE_CMD_OPTIONS[@]}
17:01  mDuff: Twelve-60, ...so it's expected that that's what it would do.
17:01  pmorris: I'm not running any of those, I'm effectively logged into the machine directly using a virtual server
17:01  mDuff: !$@ > Twelve-60 (read the part about quoting)
17:01  greybot: Twelve-60 (read the part about quoting): The difference between $@ and $*: Unquoted, none at all: both equal $1 $2 .... With double quotes, "$@" is "$1" "$2" ..., while "$*" is expanded as the single argument "$1c$2c..." (where c is the first character of IFS). You almost always want "$@". The same goes for arrays: "${myarray[@]}"
17:02  mDuff: Twelve-60, if you set arr=( "foo bar" ), why would you expect "foo" and "bar" to be separate items when you EXPLICITLY asked for them to be together?
17:02  Twelve-60: i didnt
17:02  Twelve-60: REMOTE_CMD_OPTIONS=("-s" "--ftp-port gotgames.com.au:50000-50999")
17:02  mDuff: yes, you did, by writing "--ftp-port gotgames yadda yadda"
17:02  Twelve-60: is that not two items
17:02  mDuff: it's two items, but your followup question implies you want THREE items
17:03  Twelve-60: oh i see what you mean, well curl hates the single quotes
17:03  Twelve-60: haha
17:03  mDuff: curl doesn't ever see the quotes
17:03  Twelve-60: it errors
17:03  mDuff: they're removed by the shell
17:03  Twelve-60: apparently not :(
17:03  Twelve-60: curl: option --ftp-port gotgames.com.au:50000-50999: is unknown
17:03  mDuff: Twelve-60, yes, they're removed during argv creation
17:03  mDuff: Twelve-60, but argv is being created differently BECAUSE YOU'RE SPECIFYING THAT IT BE SO.
17:04  Twelve-60: lol
17:04  Twelve-60: still confused, and not sure how to fix
17:04  taylanub: curl receives "--ftp-port foobar" without the quotes as one argument; one string
17:04  Twelve-60: then why does it error?
17:04  taylanub: so it thinks that "--ftp-port foobar" is the name of the option, and not an option/value pair
17:04  mDuff: because that's wrong!
17:04  mDuff: it's not SUPPOSED to be one string
17:05  mDuff: you're using curl wrong!
17:05  mDuff: "--ftp-port" is one string, "foobar" is one string
17:05  Twelve-60: so you mean i should do
17:05  Twelve-60: REMOTE_CMD_OPTIONS=("-s" "--ftp-port" "gotgames.com.au:50000-50999")
17:05  Twelve-60: :P
17:05  mDuff: so as I told you already, you want to pass THREE strings, not TWO
17:05  mDuff: yes.
17:05  mDuff: except not using upper case
17:05  Twelve-60: right.
17:05  Twelve-60: lol
17:05  mDuff: !varcap > Twelve-60
17:05  greybot: Twelve-60: By convention, we capitalize environment variables (PAGER, EDITOR, ..) and internal shell variables (SHELL, BASH_VERSION, ..). All other variable names should be lower case. Remember that variable names are case-sensitive; this convention avoids accidentally overriding environmental and internal variables.
17:05  Twelve-60: ok
17:05  Twelve-60: :)
17:06  Twelve-60: i understand now, lol
17:07  Twelve-60: tyvm
17:07  poisonbit: mmm i'm about more than 10 years using LANG=C when I want to avoid locales. OK. Now I'm reading  "LANG Provide a default value for the internationalization variables that are unset or null."  and "LC_ALL If set to a non-empty string value, override the values of all the other internationalization variables."  why LANG=C makes my es-ES.UTF-8 turn C ?
17:08  taylanub: what is es-ES.UTF-8 ?
17:08  taylanub: i mean, which one of LC_* is it
17:08  taylanub: if it's not set explicitly, it'll be set by LANG
17:08  poisonbit: set | grep gives LANG and GDM_LANG
17:09  poisonbit: that is, all other are taking default
17:09  poisonbit: thanks taylanub
17:10  poisonbit: but... I should change my code practices, to LC_ALL=C, if i want to be sure
17:10  poisonbit: doesn't ?
17:11  taylanub: i would also think so, but people seem to usually use LANG...
17:13  poisonbit: LC_ALL=$LANG LANG=C  cmd     # spanish output
17:14  poisonbit: maybe people use not to set LC_* nowdays
17:15  taylanub: because $LANG is evaluated by the shell instantly
17:15  taylanub: if LANG if 'foo', that line is 'LC_ALL=foo LANG=C cmd'
17:16  taylanub: and as it is, LC_ALL overrides everything, making the LANG=C ineffective
17:16  taylanub: i.e. that line simply doesn't make sense
17:16  poisonbit: i see
17:17  poisonbit: export LC_ALL="$LANG"; export LANG=C; df   # makes sense? spanish output
17:18  jww: mDuff: I tried to correct looking the doc you gave me, but I get the same problem(I prolly misunderstood something ). can you help me please ? here is the updated code http://pastebin.ca/2008684.
17:18  taylanub: it's the exact same thing (except that they'll be exported for other programs that are later being run too), poisonbit
17:21  poisonbit: http://paste.debian.net/plain/101324
17:22  mDuff: jww, should the -o and the username=... actually be the same arguments?
17:22  mDuff: jww, err, actually be in the same argv entry, that is?
17:22  poisonbit: it seems that setting LANG=C does not give a 100% solid behavior, it ignores users setting LC_*
17:22  mDuff: jww, and you want @ not *=
17:22  taylanub: poisonbit: as long as LC_ALL is set to anything, it overrides everything else.
17:22  jww: mDuff: yes I think so.
17:22  mDuff: !$@ > jww
17:22  greybot: jww: The difference between $@ and $*: Unquoted, none at all: both equal $1 $2 .... With double quotes, "$@" is "$1" "$2" ..., while "$*" is expanded as the single argument "$1c$2c..." (where c is the first character of IFS). You almost always want "$@". The same goes for arrays: "${myarray[@]}"
17:22  poisonbit: ah
17:22  mDuff: jww, ...I'm actually very sure that's wrong.
17:23  jww: what it would be wrong ? username=foo sound like to be argument for -o, or I'm getting it wrong.
17:24  mDuff: jww, it is an argument, but any standard-ish command-line parser expects them to be either (1) in subsequent argv entries, or (2) not separated by any space
17:24  mDuff: jww, otherwise you would have to write it quoted on the command line manually: mount "-o foo" bar baz
17:24  poisonbit: taylanub, the same works equal using other LC_ variables (like LC_MESSAGES) instead of LC_ALL
17:24  taylanub: LC_FOO is determined like  ${LC_ALL:-${LC_FOO:-$LANG}}  talking in sh :P
17:24  jww: mDuff: I think I understand.
17:24  mDuff: jww, ...and unless your OS is very unusual, its mount command doesn't work that way.
17:25  jww: the command is ok, if hand written into the shell.
17:25  mDuff: jww, ...you don't necessarily need to be splitting things over so many lines either, btw: nfs_args=( "smb://1.1.1.1/foo" "/mnt/backup" "-o" "username=jmm,password=secret" ); smbmount "${nfs_args[@]}"
17:25  mDuff: jww, if it works by hand but not in your script, are you quite sure your script is using the correct shebang line?
17:25  taylanub: poisonbit: only the individual LC_FOO have actual effect on programs. LC_ALL and LANG merely change their default values
17:25  mDuff: jww, #!/bin/sh means you don't get bash-only features, arrays among them.
17:26  jww: mDuff: it use #!/bin/bash, should be allright.
17:26  poisonbit: taylanub, thanks for the help, the shell translation makes it clear  :)
17:26  taylanub: poisonbit: and each LC_FOO is always set to ${LC_ALL:-${LC_FOO:-$LANG}}
17:26  taylanub: sh > English :D
17:26  mDuff: jww, you've switched from using [*] to [@], right?
17:26  jww: I'm doing it right now.
17:27  LjL: is there a smarter way to read a file line by line than head -n $n | tail -n 1? and if not, how would you go about looping the former until end of file?
17:27  taylanub: !faq 1 > LjL
17:27  greybot: LjL: http://mywiki.wooledge.org/BashFAQ/001 -- How can I read a file (data stream, variable) line-by-line (and/or field-by-field)?
17:27 * LjL hides in shame
17:27  taylanub: indeed, i never saw head -n $n | tail -n 1 before :P
17:28  LjL: it works -_-
17:28  taylanub: use sed -n "$n p" anyway
17:29  jww: mDuff: it works fine now ! thanks a lot.
17:29  jww: so my error was to think that '-o username=foo' was only one argument ?
17:29  mDuff: jww, and to use [*]
17:29  jww: ( that * instead of @ too maybe ).
17:29  mDuff: yes.
17:29  jww: mDuff: I gotta read a bit more about it, to understand.
17:30  jww: ahah ! got it.
17:35 --- yitz__ is now known as yitz_
17:42  saml: hey, is there keyboard shortcut for deleting the parameter before the cursor?   or move around the parameters?
17:43  yitz_: Try alt-t
17:43  yitz_: Or man readline
17:45  saml: Ctrl+W
17:53 --- zinger_ is now known as bzinger
17:57  tharkun: !concat
18:06  tharkun: !c style for loop
18:06  tharkun: !csfl
18:07  tharkun: !hi
18:07  mDuff: !seq > tharkun
18:07  greybot: tharkun: seq(1) is a highly nonstandard external command used to count to 10 in silly Linux howtos. Use one of these instead: for x in {1..10} (bash3.x) or for ((x=1; x<=10; x++)) (bash 2.04+) or i=1; while [ $i -le 10 ]; do ...; i=$(($i+1)); done (ksh/POSIX)
18:07  tharkun: mDuff: thx
18:08  mDuff: (yar, it's funny how the easiest way to get a factoid discussing the right way to do something is by bringing up the wrong way)
18:16  Twelve-60: /is new - can i simplify this? protocol=`echo $server | cut -f1 -d\|`
18:16  Twelve-60: or do i need the echo
18:16  mDuff: no, you don't need the echo
18:16  Riviera: !pe > Twelve-60
18:16  greybot: Twelve-60: Parameter Expansion is the expansion of a parameter: "$foo", "$1". You can use it to perform string operations: "${file%.mp3}", "${0##*/}". Remember to *always* quote them. See http://mywiki.wooledge.org/BashSheet#Parameter_Operations
18:17  mDuff: ...if you really did need to use cut rather than PE (which you don't), by the way, it would be better written as protocol=$(cut -f1 -d'|' <<<"$server")
18:18  Twelve-60: i see
18:19  Twelve-60: what should i use instead of cut?
18:19  Twelve-60: sorry
18:19  Twelve-60: read that wrong
18:21  tharkun: !`
18:21  greybot: The backquote (`) is used in the old-style command substitution, e.g. foo=`command`. This syntax is deprecated in favor of foo=$(command). Backslash handling inside $() is less surprising, and $() is easier to nest. See http://mywiki.wooledge.org/BashFAQ/082
18:22  ferz: Hi
18:23  ferz: from bash script how to get pid of last cmd sent in background?
18:24  guampa: $!
18:26  f00bar80: I've got LSAT installed and want to know if there's a way to send out the LSAT output by email instead of writing it to Last.out file ? as it didn't work this way, ==cron==> 15 18 * * * /usr/bin/lsat -o /dev/stdout | mail -s "Security Check" myemail@address.com, at the time man says -o <filename> Output filename, default is last.out, i think that there's a way to pipe the output and send it out,
18:26  f00bar80: any comment ?
18:27  geirha: Many commands treats - in place of a filename as read from stdin or output to stdout
18:29  f00bar80: geirha, some more details ??
18:30  geirha: Well the man-page would know
18:38  mg_evolute: hello there
18:38  mg_evolute: does anyone knows how can i "tail -f somelog" with some color highlighting (grep some word)
18:39  geirha: If you have GNU grep;  grep --color -e '' -e 'some word'
18:40  mg_evolute: but with a "tail -f " works?
18:40  geirha: tail -f file | grep ...
18:41  poisonbit: I use this alias for more than one match/color : http://paste.debian.net/plain/101334
18:42  mg_evolute: when I do "tail -f | grep <something>" only outputs if it suceeds in the grep... I want the normal tail -f, but with color grep =)
18:42  geirha: mg_evolute: That's why you also tell grep to match the empty string
18:43  mg_evolute: geirha: how?
18:43  geirha: grep -e '' -e 'some word'
--- Log closed Thu Dec 02 18:46:49 2010
--- Log opened Thu Dec 02 18:47:08 2010
18:47 --- Users 551 nicks [0 ops, 0 halfops, 0 voices, 551 normal]
18:47  f00bar80: geirha, the man page doesn't have more than the options with "-o <filename> Output filename, default is last.out" and other for help/advanced help, silent mood and rpm integrity
18:48  geirha: mg_evolute: How is it not working?
18:48  geirha: f00bar80: Well then. A process substitution might work, but then you need to execute the cron job with bash instead of sh
18:48  geirha: that_command -o >(mail ...)
18:48  geirha: !>(
18:48  greybot: Process Substitution -- <(cmd) and >(cmd) -- see http://mywiki.wooledge.org/ProcessSubstitution , or http://mywiki.wooledge.org/BashFAQ/024 for a common use
18:49 --- Channel #bash was synced in 125 seconds
18:49  geirha: f00bar80: Which means you either have to set SHELL in your crontab, or create a wrapper script
18:49  mg_evolute: tail -f maillog | grep --color -e '' -e 'domain.com'
18:49  mg_evolute: not highlighting the "domain.com"
18:50  geirha: mg_evolute: That's the whole command, nothing after that grep, so grep's output is going to a terminal, right?
18:51  mg_evolute: yep
18:51  mg_evolute: after I do this, I can see the "tail -f" normally
18:51  geirha: printf 'some text\nsome text with match\n' | grep --color -e '' -e match
18:51  geirha: Does that show match highlighted? ^
18:51  mg_evolute: nope
18:52  geirha: Then you probably don't have GNU grep.
18:52  mg_evolute: but
18:52  mg_evolute: when I do the example
18:52  mg_evolute: http://www.mutaku.com/geeklog/article.php?story=2008082000200283
18:52  mg_evolute: I can see color!
18:53  geirha: *shrug* try with --color=auto  then
18:53  geirha: Maybe you have an alias messing it up
18:55  geirha: If you know a little perl, you could modify poisonbit's function to your needs.
18:56  mg_evolute: geirha: I know nothing
18:56  mg_evolute: perl wise
18:56  mg_evolute: =)
18:58  mg_evolute: still having issues
18:58  mg_evolute: but I will try to solve then
18:59  f00bar80: geirha, sorry what's the difference between running it in bash or sh and how this may lead to my purpose
19:00  geirha: f00bar80: sh doesn't have process substitution, bash does.
19:01  geirha: !>( > f00bar80
19:01  greybot: f00bar80: Process Substitution -- <(cmd) and >(cmd) -- see http://mywiki.wooledge.org/ProcessSubstitution , or http://mywiki.wooledge.org/BashFAQ/024 for a common use
19:01  f00bar80: geirha, based on this ==cron==> 15 18 * * * /usr/bin/lsat -o /dev/stdout | mail -s "Security Check" myemail@address.com, can you show me an example ?
19:02  geirha: #!/usr/bin/env bash
19:02  geirha: lsat -o >(mail -s "Security Check" myemail@address.com)
19:03  geirha: Put that in a file, make it executable, then execute that from cron
19:03  geirha: And as I said, it may or may not work. It depends on how lsat works
19:04  geirha: Another option is to have it write to a tempfile, then attach that to your mail once lsat is done.
19:04  poisonbit: tail -f file | while read -r line; do [[ "$line" = *word* ]] && { printf '%s\n' "$(tput setaf 1)${line}$(tput setaf 9)"; continue ; } ; printf '%s\n' "$line" ; done
19:04  poisonbit: oh, mg_evolute is out
19:10  tharkun: geirha: doing the hash line you posted is the easy way of setting a normal user environment?
19:10 --- julian-ZzZzZ is now known as julian
19:11  mDuff: tharkun, using a shebang line that uses env to locate the interpreter to use for the rest of the file is the easy/normal way of using the PATH to search for interpreters... is that what you're asking?
19:12  tharkun: mDuff: I've been using #!/bin/bash for a lot of time now
19:14  mDuff: tharkun, right, but there are cases where that doesn't work so well
19:14  geirha: You are more likely to find env in /usr/bin/ than bash in /bin/
19:14  tharkun: And when Environment variables are needed then i set them with the export command within the executed bash file
19:14  mDuff: tharkun, ...for instance, the build system for the software my day job writes needs to run on a Mac where bash 4 isn't bundled with the OS but provided by macports, and isn't in /usr/bin
19:15  tharkun: ok, got the idea
19:38 --- Operator33 is now known as Operator23
19:42  f00bar80: geirha, 5969 Segmentation fault      lsat -o >(mail -s "Security Check" myemail@address.com
19:42  mDuff: f00bar80, if your lsat program is prone to crashing, that's hardly bash's problem.
19:43  f00bar80: mDuff, when i run lsat , it works with no issue
19:43 * mDuff wonders if perhaps lsat wants an output file it can seek() on
19:44  mDuff: f00bar80, ...but when you run lsat with a pipe as its output, it doesn't.
19:44  mDuff: f00bar80, ...that's still an lsat bug.
19:46  f00bar80: mDuff, the man says -o <filename>   Output filename, default is last.out, shouldn't i use it this way ?, => lsat -o outfile.out >(mail -s "Security Check" myemail@address.com)
19:46 * mDuff sighs.
19:46  mDuff: echo >(foo)
19:46  mDuff: erm
19:46  mDuff: # echo >(foo)
19:46  evalbot: mDuff: bash: foo: command not found
19:46  evalbot: mDuff: /dev/fd/63
19:46  mDuff: f00bar80, as you can see from the bot's response, >(foo) is substituted with /dev/fd/##, which is a FILENAME
19:47  mDuff: f00bar80, so, if it's -o filename, then -o >(foo) is correct.
19:47  mDuff: f00bar80, ...if your program can't deal with a filename that points to an object it can't seek on (such as /dev/fd/##), your program is buggy.
19:48  mDuff: f00bar80, ...anyhow, the command you gave would be calling something like this: "lsat -o outfile.out /dev/fd/63", which doesn't make sense at all.
19:48  mDuff: f00bar80, (where /dev/fd/63 would be connected to the instance of mail)
19:49  geirha: f00bar80: Use a temporary file instead then
19:49  geirha: lsat -o /tmp/foo; mail -s subject address < /tmp/foo
19:51  geirha: Oh, didn't notice he added a new argument
19:53  geirha: f00bar80: I gave you the exact command to use, why did you mess it up?
19:53  f00bar80: geirha,  5969 Segmentation fault      lsat -o >(mail -s "Security Check" myemail@address.com
19:57  _Neytiri_: i  have a syntax error in one of my scripts and i havent been able to figure out waht it is, can i get a second openion on it please
19:58  f00bar80: mDuff does echo > (foo)  =equals=> /dev/fd/63"
19:58  taylanub: !ask > _Neytiri_
19:58  greybot: _Neytiri_: You need not ask permission to ask a question. Just ask and be patient. http://mywiki.wooledge.org/NetEtiquette
19:58  mDuff: f00bar80, >(foo) is different from > (foo)
19:58  mDuff: f00bar80, and /dev/fd/63 assumes that 63 is the file descriptor chosen when the pipeline is being set up
19:58 --- abstract4d is now known as abstract3d
19:59  mDuff: f00bar80, ...and as just referencing /dev/fd/63 doesn't set up any such child process, the strict answer as to whether they're "equal" is "no".
19:59  _Neytiri_: http://pastebin.com/6x0ea2h2
20:00  mDuff: !questions > _Neytiri_
20:00  greybot: _Neytiri_: Ask questions. Don't just paste 200 lines of code on a web page and say "HERE MY KODE <URL> WHATZ RONG". Describe the problem, clearly and concisely. If necessary, give the SMALLEST sample code that demonstrates the problem.
20:01  _Neytiri_: ugh
20:01  trash: Smallest sample code is the point there.
20:01  _Neytiri_: i havbe a syntax error with the code on line 48 and i cant figure out what it is http://pastebin.com/6x0ea2h2
20:01  tharkun: aka reduced case
20:01  greycat: "Don't make us go to a web page to see your question" is another important point.
20:02  mDuff: _Neytiri_, you notice  you have no "fi" for the inner "if"?
20:02  _Neytiri_: i didnt notice that thankyou
20:02  mDuff: _Neytiri_, (fyi, it was the line number that got your question answered; until you provided it, I wasn't much inclined to play hide-and-seek)
20:03  mDuff: _Neytiri_, by the way, your code fails pretty badly when the user provides no input to the read
20:03  mDuff: _Neytiri_, you should consider using [[ ]] instead of [ ], or quoting correctly.
20:03  _Neytiri_: well i have never asked a question on cod before so forgive me if i make a mistake in asking
20:04  _Neytiri_: what do you mean by that?
20:04  mDuff: np -- that's why we have the bot's factoids, to help guide people to ask better next time
20:04  mDuff: so, let me demonstrate the problem
20:04  mDuff: # foo=""; if [ $foo = 1 ]; then echo "true"; else echo "false"; fi
20:04  evalbot: mDuff: bash: [: =: unary operator expected
20:04  evalbot: mDuff: false
20:04  mDuff: ![[ > _Neytiri_
20:04  greybot: _Neytiri_: [[ is a bash keyword similar to (but more powerful than) the [ command. See <http://mywiki.wooledge.org/BashFAQ/031> and <http://mywiki.wooledge.org/BashGuide/TestsAndConditionals>. Unless you're writing for POSIX sh, we recommend [[.
20:05  mDuff: !umq > _Neytiri_
20:05  greybot: _Neytiri_: "USE MORE QUOTES!" They are vital. Also, learn the difference between ' and " and `. See <http://mywiki.wooledge.org/Quotes> and <http://wiki.bash-hackers.org/syntax/words>.
20:05  _Neytiri_: thanks for the info
20:06  mDuff: _Neytiri_, ...so, to clarify, it's running [ = 1 ] if $foo is empty, which isn't a valid expression
20:06  mDuff: _Neytiri_, ...the two factoids above should describe ways to avoid that class of bug.
20:07  _Neytiri_: ok thanks
20:07  lhunath: !quotewhen
20:07  greybot: "Double quote" *EVERY* argument that contains whitespace or expansions ("$foo", "$(foo)", "`foo`"). 'Single Quotes' prevent expansions from happening at all. Also quote *, [, ], ? etc. if you don't want bash to expand them into filenames.
20:16  shwouchk: hello
20:16  shwouchk: in what file do I set the EDITOR var?
20:17  taylanub: !dotfiles > shwouchk
20:17  greybot: shwouchk: http://mywiki.wooledge.org/DotFiles or - for a technical explanation - the INVOCATION section of man bash.
20:17  shwouchk: taylanub: no dot file
20:17  shwouchk: taylanub: there is a system wide file for that
20:17  greycat: shwouchk: yes dot file
20:17  jetole: Hey guys. I read about a variable expansion a long time ago where I can say if my variable does not contain X then expand it else expand Y so I can say if var==5 then display
20:17  greycat: no, there is not, you idiot.
20:18  shwouchk: fuck off
20:18  jetole: Hey guys. I read about a variable expansion a long time ago where I can say if my variable does not contain X then expand it else expand Y so I can say if var==5 then display 10 else display $var. Can someone remind me of what that is please?
20:18  shwouchk: don't swear at me
20:18  greycat: Um, you were the one who "swore".
20:18  ss0:  *gets popcorn*
20:18  greycat: jetole: ${EDITOR:-vi} for default values, etc.  See FAQ 100.
20:18  jetole: whoa... what did I miss
20:19  jetole: !faq 100
20:19  greybot: http://mywiki.wooledge.org/BashFAQ/100 -- How do I do string manipulations in bash?
20:19  jetole: ah cool that worked. Thanks cat.
20:19  shwouchk: taylanub: do you remember where the systemwide setting for that is?
20:19  greycat: shwouchk: *plonk*
20:20  greycat: If there *is* such a "system-wide" place, it would be OS specific, or at least login-method-plus-shell-specific.
20:20  greycat: Too bad nobody wrote a wiki page describing all these things.  Oh wait.
20:20  taylanub: shwouchk: OS/etc.-dependant. you probably are looking for /etc/profile though
20:21  taylanub: shwouchk: which IS mentioned in the link i gave
20:21  greycat: I'm pretty sure /etc/profile is one of the files described in DotFiles... too bad he can't read.
20:22  ss0: !kill
20:22  greybot: Unsafe Use of Kill: kill -9 sends SIGKILL to a process which is the exact same thing as normal kill (SIGTERM), except that it prevents the process from cleaning up after itself. You do NOT want to use it. See http://partmaps.org/era/unix/award.html#uuk9letter
20:22  jetole: greycat: Someone named Greg wrote a complete and excellent set of instructions describing everything you can ask at mywiki.wooledge.org. Everyone should thank this person for taking the time to help others
20:22  taylanub: obviously the term "dotfiles" makes people think it's only about ~/.*
20:23  greycat: Well, ~/.* is all you should be using anyway.  So, that's actually correct once you get past the recently-started-using-Linux mind-poisoned-by-Windows people's prejudices.
20:23  shwouchk: taylanub: thanks, though it is not what I was looking for
20:24  shwouchk: greycat: of course the way you think you should do stuff is the right one
20:24  taylanub: ask your OS channel or whatever. there is no clear answer to your question
20:25  jetole: shwouchk: glad you agree. Once you realize that the way greycat says you should do stuff is the right one, it makes learning a lot easier
20:25  shwouchk: taylanub: yeah, will
20:34  jetole: greycat: I have just read FAQ 100 and I knew a lot of it (much I learned earlier this morning but I could have sworn (not in the shwouchk sense) that I read something from Dave Taylor once showing how to do a substituition only if var equals a known value. Can't remember if it changed the var or displayed the sustitute but either way, does something like that exist?
20:35  greycat: jetole: perhaps you're thinking of C-style ternary conditional operators in a math context.
20:35  greycat: x=$(( foo==7 ? 13 : 24 ))
20:35  greycat: not sure of the order of ops there... maybe put parens around (foo==7)
20:36  jetole: could be but I do remember it was Dave Taylor who wrote it who's a well known bash columnist but it was long ago that I just not remember it properly. if statements have worked and will continue to but thought their was a way to shorten it
20:37  jetole: oh well. Thanks for the help
20:38  ss0: jetole:  you mihgt hit up http://www.askdavetaylor.com/test_for_valid_numbers_in_a_bash_shell_script.html
20:38 * jetole looks - thanks ss0 
20:38  ss0: jetole:  probably not the exact page, but since he has a website and is easily contacted you could ask him.
20:39  ss0: I wish I knew more about bash so I could help more than just googling.
20:39  ss0: *goes back to reading the faq
20:39  biberao: hi
20:39  jetole: ss0: well, I could but since I am naive, I'm thinking if greycat says their isn't a way then I think their isn't a way
20:39  pyoor: is there anyway to do a sort -u in place?  I was going to sort -u file > 1 but I've got limited space to work with.
20:40  \malex\: jetole: you're not talking about ${parameter:-word} syntax, right?
20:40  greycat: pyoor: man sort, look at -o file or -f file, I forget which it is.
20:40  poisonbit: for backend in "${logging_backends[@]}"; do log_$backend "$1" "$2"; done  # howto avoid indirection with a design like this (multiple loggin backends, same msgs and priorities), or... is indirection a problem in this example?
20:40  \malex\: pyoor: note that sort may still use temporary files
20:41  pyoor: using sort -o will still output to a second file
20:41  jetole: pyoor: if you are really limited for space, try /dev/shm. it's a rwx dir for everyone like /tmp exept it only exists in ram so after a reboot, it is gone
20:41  greycat: imadev:~$ x1() { echo x1; }; y=1; x$y
20:41  greycat: x1
20:41  greycat: poisonbit: it appears to work
20:41  pyoor: jetole: so sort -u file > /dedv/shm/1 ; mv /dev/shm/1 file
20:42  ss0: jetole:  I concur, the man seems to know everything about bash, and it's a deep subject. I would love to see his vimrc as well. :D
20:42  pyoor: is that what you'd recommend
20:42  poisonbit: greycat, i've read in /topic wikis that indirection is like evil... I'm not sure when it can be a problem
20:42  pyoor: ahh nvm, not enough space
20:42  jetole: pyoor: yeah but backup the original to the dir too just in case. You normally don't have to but seems like you are really really really limited in space
20:42  greycat: !embed > pyoor
20:42  greybot: pyoor: You don't have sed, awk, OR grep? Bend over, take your Linux On A Raggedy 5.25" Floppy With Bad Sectors "distribution", and embed it.
20:42  pyoor: the file i'm working with is 6.6GB
20:43  pyoor: greycat: it's a remote server.  I should just make the changes i need to locally then upload it again
20:43  pyoor: I was just trying to avoid uploading 6GB
20:43  pyoor: "again"
20:43  greycat: does it compress well?
20:43  \malex\: pyoor: to sort that file you either need 6.6GB of memory (likely more), or that much disk space
20:43  ss0: pyoor:  are you sure you need all 6 gigs? could you extract the parts you need to modify then diff them back in?
20:43  jetole: pyoor: there is a way. Let me think about this for a moment
20:44  pyoor: I always forget that bash is limited to using tmp files
20:44  pyoor: well using sort to is a limitation since it needs to see the entire file
20:44  poisonbit: ssh remote cat file | sort -o local_sorted  ?
20:44  ss0: also if it's a text file i concur with greycat can't you pipe it through compression?
20:44  \malex\: pyoor: actually, how many unique values are there?
20:44  greycat: If you can store the file AND a compressed version of the file, AND if you have enough memory/temp space to sort it as \malex\ points out, then you can do it by compressing it, then bzip2 -dc < foo.bz2 | sort -u > foo
20:45  pyoor: greycat and \malex\: that's a great idea
20:45  pyoor: thank you all
20:45  jetole: pyoor: Do all words start with letters?
20:45  jetole: or numbers
20:45  \malex\: pyoor: if you expect the number of unique values to be fairly small, you can make your own uniq that doesn't care about order, and sort afterwards
20:46  jetole: pyoor: do you need it to be sorted and uniq or just one of the two?
20:46  pyoor: \malex\: it's a combination of wordlists so the uniq'd list should still be very large
20:46  pyoor: just uniqd
20:46  pyoor: well i take that back.  i'd like it sorted as well
20:46  jetole: thats easy
20:46  \malex\: pyoor: do you have the original word lists?
20:46  jetole: ok, well unique is easy
20:46  pyoor: \malex\: yes
20:46  \malex\: pyoor: are they sorted?
20:47  pyoor: \malex\: no, not all of them
20:47  \malex\: pyoor: can they be sorted? uniqing a set of sorted files is easy
20:47  pyoor: \malex\: yes.  wouldn't sorting them individually be more time consuming that sorting them once combined?
20:47  jetole: I'd right a loop that read every line of the file, then delete re occurances of that loop throughout, I'm thinking using sed //d with starting at the first line after the first occurance as the starting address in sed
20:47  \malex\: pyoor: i THINK sort -m files* | uniq  would do it
20:48  jetole: *I'd write
20:48  \malex\: pyoor: no, because sort sort can merge sorted files, which i believe doesn't require it to make temp files. believe
20:48  greycat: !uniq > jetole
20:48  greybot: jetole: uniq is a utility for removing or reporting repeated lines. uniq will only work effectively with sorted input (sort | uniq). awk '!s[$0]++' is an order-insensitive alternative.
20:48  jetole: greycat: I know but he keeps mentioning the limited space he has and why it won't work with X programs etc
20:49  \malex\: pyoor: sorting individually requires less space
20:49  pyoor: welp, tbh i'm actually going to sort it locally and upload it again
20:49  pyoor: but the options everyone's giving me is definitely helpful
20:49  jetole: well if it works then cool. Have fun
20:49  \malex\: pyoor: look into sort -m first, and uniq
20:49  pyoor: provided me with options i had never thought of so thank you all
20:50  pyoor: \malex\: will do
20:50  jetole: \malex\: with the -m option to sort, if I ... nevermind, I'm gonna test this before I ask
20:51  \malex\: jetole: no idea, didn't try it
20:51  \malex\: but merging sorted files is a trivial operation
20:57  jetole: \malex\: ah cool. I just didn't know that was an option. Sure I saw it before when I was RTFM for something else but I just tested it now using the flowing and it worked: for ((i=1; i<=100; i++)); do if [[ $(($i%2)) == 0 ]]; then echo $i >> even; else echo $i >> odd; fi; done; sort -mn odd even; rm odd even
21:02  malkomalko: hi guys, I'm piping a cut into a uniq to show me a list of unique values in a certain column... it appears that uniq is not fully doing it's job and there are some duplicates left
21:02  malkomalko: do you think this could be due to whitespace in some lines of text... and if so is there a good way to sanitize?
21:02  greycat: !uniq > malkomalko
21:02  greybot: malkomalko: uniq is a utility for removing or reporting repeated lines. uniq will only work effectively with sorted input (sort | uniq). awk '!s[$0]++' is an order-insensitive alternative.
21:02  TheBonsai: y0
21:03  greycat: If you can grok that awk magic, you can easily adapt it to store something other than $0 (whole lines)
21:03  ss0: malkomalko:  in my experience using awk instead of cut eliminates a lot of these weird problems but that is outside the purview of this channel.
21:03  malkomalko: ahh, I had the sort after
21:03  malkomalko: *head smash*
21:03  jetole: greycat: how come you didn't mention sort -u?
21:04  greycat: For the same reason I didn't mention unicorns?  Because they're unrelated?
21:04  jetole: malkomalko: anyways, sort has a unique option. You can do sort -u and it will be unique
21:04  malkomalko: yah sort -u looks to give me back the same results
21:04  malkomalko: thanks gents
21:05  greycat: sort -u won't fix "cut gave me extra white space"
21:05  jetole: ok
21:06  jetole: malkomalko: try using sed -e 's/\([\t ]\+/\1/g' to get consistant white space for space and tabs.
21:06  jetole: You can pipe that in on the proper space in your command or use the -i file option to do it inline on your file
21:06  greycat: jetole: try not using GNUisms in your sed commands
21:07  jetole: greycat: I don't actually know what a GNUism is referring to in that command since I only use Linux
21:07  greycat: \+ is a GNUism there
21:07  greycat: not sure about \t
21:07  jetole: I forget sometimes that other people don't
21:07 --- Wordpad is now known as Guest10141
21:08  TheBonsai: jetole: and imagine your linux with XPG4 installed ;)
21:08  jetole: ok...
21:09  \malex\: tr -s "\t " "  " would compress the white spaces too, portably, no? you might have to run it through that twice though
21:09  greycat: Or he could use awk '!s[$2]++' or whatever
21:10  jetole: greycat. Not sure how to not use the GNUism for \+ but I know can replace the \t with a literal tab using ctrl-v + i. how do you replace the \+ on that command?
21:10  \malex\: yes, but who remember awk? :D
21:10  greycat: The BRE version of + is \{1,\}
21:10  \malex\: greycat: BRE?
21:10  jetole: remember awk? I want to learn awk.
21:10  greycat: !bre
21:10  greybot: Posix Basic Regular Expressions: http://www.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap09.html#tag_09_03
21:10  greycat: sed uses BREs
21:10  \malex\: ah thanks
21:11  jetole: greycat: ah yeah, forgot about that, or in his case, \{2,\}
21:11  jetole: yeah I know it does. I use them occasionally enough
21:12  jetole: \malex\: to correct my earlier line, sed -e 's/\([         ]\{2,\}\)/\1/g'  <== the big space is a space and a tab which you can create a tab in bash with ^v+i (ctrl v and then i)
21:13  jetole: well correct myself isn't the right term but to give a command that works on non GNU systems
21:13  greycat: You could check /topic ##sed to see whether the \t is portable or not.  I really don't know.
21:13  \malex\: jetole: i'd just use tr :)
21:13  jetole: \malex\: I don't see why not
21:14  jetole: oh, I said \malex\ when I meant malkomalko @ alternate sed
21:14  jetole: greycat: if I ever find myself on a non GNU system I will check it out
21:14  malkomalko: thanks jetole
21:15  greycat: cyclops:~$ printf 'tab\ttab\n' | sed 's/[\t ]/_/'
21:15  greycat: _ab     tab
21:15  greycat: You can use bash's $'...' quoting instead.
21:16  dogmeat: how can i echo message with an initial new line? e.g. echo "\n Message"
21:16  greycat: printf '\nMessage\n'
21:16  jetole: greycat: you mean place it in the s/// ?
21:16  greycat: jetole: sed $'s/[\t ]/_/'
21:16  jetole: oh
21:16  jetole: missed that
21:16  jetole: cool
21:17  jetole: greycat: does $'' apply to \+ too?
21:18  greycat: No.  Of course not.  Don't be daft.
21:18  jetole: ha
21:18  jetole: sorry
21:18  greycat: !$'
21:18  greybot: Bash has a special form of quoting, $'string' in which backslash-character combinations are expanded. For example, echo $'this is a literal tab: \t'
21:19  jetole: greycat: while I know that, I thought maybe somehow \+ may be expanded or something or... now that I think about it, I don't want to talk anymore
21:20  jetole: actually I'm gonna work on something else for a bit. ttyl
21:28  Niek_: Hi. I'm trying to find documentation on a bit of bash, but I don't know how to define it. I know I can do cp file{,.old} to copy file to file.old, but what's the curly brackets bit called?
21:28  ss0: Niek_:  that is brace expansion
21:29  Niek_: Thanks. I'll look it up. :)
21:29  ss0: !brace
21:29  greybot: Brace expansion: http://bash-hackers.org/wiki/doku.php?id=syntax:expansion:brace
21:29  Niek_: excellent :)
21:29  ss0: woah… is that what it feels like to be greycat?
21:29 * Niek_ doesn't know who that is. 0:)
21:29  ss0: !greycat
21:29  greybot: greycat is neither grey, nor gray, nor a cat.
21:43  AlexC_: morning
21:44  AlexC_: could someone please look over these scripts: https://github.com/openzula/ozsrvutils (max is around 270 lines long) and pretty much rip them apart so I can learn what to improve on?
21:46  unop: Sure, we just charge $72 an hour for the service.
21:47  Niek_: :D
21:48  Niek_: This is like live bash.org
21:49  dwxreaper: how do I add a windows end of line at the end of each line with sed
21:50  unop: sed 's/$/\r/' file
21:50  erUSUL: dwxreaper: sed 's/$/\r/'
21:50  gniourf_gniourf: sed question goes to #sed
21:51  dwxreaper: I think it's working now, I did dos2unix, but I didn't have txt at the end, maybe that messed it up
21:53  gniourf_gniourf: maybe you meant unix2dos ?
21:59  publiccerts: Anyone running windows at the moment? I am writing an application for a client to post updates to a CMS but I need someone to test it. I'd be willing to pay.
22:01  gniourf_gniourf: /join #windows
22:01  publiccerts: harsh, but fair! :P
22:02  trash: Why would people even ask that here?
22:02  publiccerts: desperation?
22:02  publiccerts: Some of us have multi-platform work spaces
22:03  trash: What does that have to with anything?
22:03  greycat: I program in more than one language, but I don't ask Tcl questions here.
--- Log closed Fri Dec 03 13:04:41 2010
