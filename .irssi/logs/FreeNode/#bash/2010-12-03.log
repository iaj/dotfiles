--- Log opened Fri Dec 03 13:04:41 2010
--- Log closed Fri Dec 03 13:07:43 2010
--- Log opened Fri Dec 03 13:07:53 2010
13:07 --- Users 529 nicks [0 ops, 0 halfops, 0 voices, 529 normal]
13:07  erUSUL: # date -d '29 days from now'
13:07  evalbot: erUSUL: date: invalid date `29 days from now'
13:07  pgas: # date -d'5th of November + 29 days'
13:07  evalbot: pgas: date: invalid date `5th of November + 29 days'
13:08 * erUSUL ^_^
13:08  erUSUL: # date -d 'now + 29 days'
13:08  evalbot: erUSUL: Sat Jan  1 12:08:56 UTC 2011
13:09  JyZyXEL: # date -d 'Nov 5 + 29 days'
13:09  evalbot: JyZyXEL: Sat Dec  4 00:00:00 UTC 2010
13:09  JyZyXEL: cool!
13:09 --- Channel #bash was synced in 126 seconds
13:16 --- julian-ZzZzZz is now known as julian
13:37  nicetry_: oh my god python code. sucks. thank god i found bash.
13:40  iceroot: do you see any reason why is is doing nothing in a cron-job? (no action on the file, no stdout/stderr) but working on the normal bash? /bin/sed -i 's/^root.*/root:$1$lbFaojUf$rVFGZlgVxANYSp8OekgIY\/:14946:0:99999:7:::/' /etc/shadow;
13:40  iceroot: if i am correct the line is escaped correctly with ''
13:41  iceroot: and of course dont run that command as root on your machine .)
13:44  nicetry_: here's my root password: root.*/root:$1$lbFaojUf$rVFGZlgVxANYSp8OekgIY\/:14946:0:99999:7:::/' /etc/shadow;
13:44  nicetry_: thanks
13:45  pgas: iceroot: you probably need \\/
13:45  pgas: or use another separator than /
13:45  iceroot: pgas: but i dont get what is the difference between the bash and a cron-job, the line is working fine on the bash
13:45  bashman: practical way to implement an array of arrays ?
13:46  pgas: cron parse the command to find the %
13:46  pgas: bashman: use ksh93
13:46  bashman: bash dont support multi-dimesional arrays ?
13:46  pgas: not really
13:47  bashman: pgas, ksh = korn shell ?
13:47  pgas: yes
13:47  pgas: you can use inderection, but it's a bit painful
13:47  iceroot: pgas: ah ok, good to know, i will check that. thank you
13:47  pgas: !faq indirect
13:47  greybot: http://mywiki.wooledge.org/BashFAQ/006 -- How can I use variable variables (indirect variables, pointers, references) or associative arrays?
13:49  bashman: pgas, maybe an array of array refs ?
13:50  poisonbit: an array of functions names, each function returns its array
13:51  poisonbit: or maybe using different IFS for each array... i don't know
13:51  pgas: bashman: sure, it's just painful
13:52  pgas: # arr=(1); b=( arr);t=${b[0]}[0];echo "${!t}"
13:52  evalbot: pgas: 1
13:55 --- Unknown[OFF] is now known as Unknown[NF]
13:57  Fatal: Riviera: heh, no worries (late reply ftw)
13:59  Kambo2: hey all
14:04  sente: content=$(<file) #is this the correct, always?
14:04  lhunath: sure
14:05  pgas: if you use bash
14:06  sente: i seemed to have forgotten the basics this morning.. quite sleep deprived
14:06  sente: what's the similar command to write the $content back to disk?
14:07  pgas: printf "%s\n" "$content" > file
14:09  pgas: (nitpicking: $( ) will remove the trailing newlines, the above printf will always add a trailing \n)
14:09  sente: pgas: hmm. http://sente.pastebin.com/Tc17UP1e
14:10 --- sin__tax is now known as sin_tax
14:11  pgas: well, see my ( ). also if you have nullbytes in the file it will be a problem
14:11 --- KamBo3 is now known as KamBo
14:11  sente: yeah, it's a binary full of them i'm sure
14:11  sente: is there a simple command that will /always/ work?
14:12  pgas: there is no way to store null bytes in a variable, you have to encode it with base64 or somethign
14:13  bashman: pgas, i will do my own array of array by injecting a key word as a marker
14:14  sente: okay null bytes aside, what about an elegant method which'll handle whitespace/trailing lines/etc?
14:14 --- adamcasto is now known as acasto
14:14  bashman: like (a b c d next A B C next 1 2 3 4 5)
14:16  pgas: sente: whitespace are not a problem
14:16  pgas: var=$(cat file;printf a);var=${var%a);print %s "$var" > file
14:17  pgas: !matrix > bashman
14:17  greybot: bashman: You can simulate simple 2-dimensional matrices in bash (which only has 1-dimensional arrays) using tricks, like ${array[i*100+j]} (where "100" can be any suitably large constant).
14:17  pgas: there is this also
14:19  bashman: woking with arrays in bash is so painful
14:19  lhunath: lies
14:19  bashman: compare this with perl
14:19  lhunath: simplify your logic.
14:19  bashman: is not
14:20  lhunath: sorry?
14:20  poisonbit: bashman, lists works fine in bash, what is pain is to need a hash struct
14:20  bashman: not talking to you lhunath
14:21  bashman: in fact dont speak to me
14:21 * lhunath hands bashman a cookie.
14:21 * sente hands out chill pills
14:21  pgas: bashman: yeah. bash is not good with complex data structures
14:22  bashman: poisonbit,  you good link to implement multi-dimesional arrays  ?
14:22  bashman: pgas, agree
14:23  poisonbit: bashman, maybe at bot, but I don't know every faqs
14:23  pgas: hence my initial answer
14:23  lhunath: if you want multi-dimensional arrays; you'd do well using a language that provides constructs for them.
14:23  poisonbit: bashman, http://poisonbit.wordpress.com/2010/10/26/ttyshooter-did-you-ever-did-a-game-in-bash/
14:23  poisonbit: not a good link tough  :P
14:25  poisonbit: instead of use a multidimensional array, change the logic
14:27  poisonbit: bashman, of course sh as development language, is very limited if you look at any other lang. but the same you use cut, awk, ssh, cat or other external programs, you can insert a external .pl where needed
14:28  tcr: I'm trying to parse the output of grep -Z (filename and match separated by \0), I was fiddling with IFS=`echo -e '\0'` read file match  — but that did not work (file is set to the filename, but match is empty)  — is that possible at all?
14:28  pgas: | while IFS= read -d ''
14:29  sente: pgas: thanks for your printf/var/ solutions
14:30  lhunath: tcr: 'read' only reads one line.  which means it stops at a newline.  -d tells it to change that newline to another char.  leaving the argument to -d empty tells it to read until a NUL byte.
14:30  lhunath: IFS is irrelevant.
14:30  lhunath: IFS is only used for splitting read data into fields (and whitespace in it actually trims your data so unsetting IFS like pgas does is helpful)
14:31  tcr: I'm not following, I do want to split the input line into two fields: the filename and the match
14:31  djszapi: How can I redirect large binary files with one command to a command that can read from stdin ? I mean gpg ... | or < or something like that way.
14:32  lhunath: tcr: what separates the fields?
14:32  tcr: \0 the fields, and \n the lines
14:32  lhunath: uck.
14:32  pgas: djszapi:  <file
14:32  lhunath: well; you can't use \0 as a field delimitor
14:32  lhunath: because you can't read past \0 with read.
14:32  lhunath: you need to read twice.
14:32  djszapi: pgas: can I use <file1 file2 file3.. ?
14:33  tcr: Thanks that's what I wanted to know :-)
14:33  djszapi: so essentially for more files ?
14:33  lhunath: while IFS= read -r -d '' file; IFS= read -r line; do ..; done < <(grep -Z  ...)
14:33  cthuluh: you could use gawk or a recent mawk to split it
14:33  lhunath: maybe use && instead of ;
14:33  pgas: djszapi: no. cat file1 file2 file3 | gpg
14:34  Yahav: hey guys
14:34  djszapi: pgas: ty
14:35  Yahav: is there any way to write a bash sh script which will save to a text file all the args given to it?
14:36  pgas: sure.
14:36  pgas: Yahav: you mean the arguements right? like script arg1 arg2 arg3 etc?
14:36  Yahav: yes..
14:37  Yahav: $1 $2 $3
14:37  pgas: printf "%s\n" "$@" >file
14:37  Yahav: $@ is this some kind of a wildcard right?
14:38  pgas: !$@
14:38  greybot: The difference between $@ and $*: Unquoted, none at all: both equal $1 $2 .... With double quotes, "$@" is "$1" "$2" ..., while "$*" is expanded as the single argument "$1c$2c..." (where c is the first character of IFS). You almost always want "$@". The same goes for arrays: "${myarray[@]}"
14:38  pgas: yes, it's a special parameter
14:40  Yahav: so this would print args1 *new-line* args2 *new-line* args3 *new-line* OR args1 args2 args3 *new-line* ?
14:40  Yahav: also, on the second time this script will execute,  would it rewrite the file? or just add to the file?
14:41  pgas: the former
14:41  pgas: it will overwrite the file, if you want to append use  >>file
14:52  b4283: hi
14:53  b4283: i wonder why the "-o" or "-a" which stand for OR, AND isn't documented in bash's shell
14:53  b4283:  /bash's manual/
14:53  lhunath: they're of the 'test' command.
14:53  lhunath: run ''help test''
14:54  lhunath: you shouldn't use them anyway.
14:54  lhunath: use [[ instead.
14:54  naquad: can i somehow make bash scripts understand suid bit?
14:54  lhunath: it uses && and || for AND and OR, respectively.
14:54  b4283: i know, just some old cross-platform script
14:54  pgas: naquad: you have to use a wrapper arounf you script
14:54  b4283: [[ is much better
14:55  naquad: pgas, thought so. thank you
14:55  b4283: as it is always a shell builtin
14:55  pgas: b4283: then it's better to use several test commands
14:55  lhunath: it's actually a keyword.  [ is a builtin
14:55  b4283: so when bash in invocated as "sh", it uses the /usr/bin/[
14:56  pgas: no
14:56  b4283: lost me there a bit
14:56  erUSUL: b4283: the bash man page has it in the SHELL BUILTIN COMMANDS
14:56  pgas: ( [ ] && [ ] || [ ]  )
14:56  lhunath: bash always uses the builtin [
14:56  lhunath: (unless you explicitly tell it not to)
14:56  b4283: huh
14:57  b4283: my /bin/sh is linked to bash
14:57  lhunath: # type -a [
14:57  evalbot: lhunath: [ is a shell builtin
14:57  b4283: but it uses /use/bin/[
14:57  lhunath: what's your point?
14:57  lhunath: what makes you think it uses /usr/bin/[?
14:57  b4283: which [
14:57  lhunath: which?!
14:57  lhunath: who cares what which says
14:57  koala_man: which isn't a builtin, so it can't detect builtins
14:57  koala_man: type is
14:57  b4283: oh
14:57  lhunath: !which
14:57  greybot: which(1) is an external program used to search PATH for an executable. It behaves differently on different systems and you can't rely on a useful exit code; use ''type -P'' instead. See http://mywiki.wooledge.org/BashFAQ/081
14:57  b4283: thanks for that info
15:01  b4283: so if bash accepts -o and -a why isn't it in manual ..?
15:01  pgas: it is in the manual
15:01  erUSUL: b4283: i told you it is...
15:01  pgas:    expr1 -a expr2
15:01  pgas:                      True if both expr1 and expr2 are true.
15:02  b4283: great scott
15:02  b4283: different section
15:02  b4283: pgas: thanks so much
15:02  pgas: it's because it's not common to [ and [[,
15:03  b4283: i was looking around the pile of -z and -f
15:06  Yahav: pgas: i noticed that it wont print the script_filename itself, which is $0 if i'm not wrong, why is that?
15:07  pgas: probably because you often don't care about $0, while you often need to loop over or to pass to another command the rest of the arguments
15:14  dagni: you all do it wrong ;D
15:23  frikinz: Hi. I can't remember what to change to have dotfiles listed for * expansing (when doing for example du -hs *)
15:24  erUSUL: frikinz: shopt -s dotglob ?
15:25  frikinz: erUSUL: Ah that was it. Thanks!
15:25  b4283: c/lose
15:26  dagni: is this shortcut for cheater/looser? :)
15:26  dagni: i saw it somewhere ;p
15:31  cantoma: guys, rm -r directory gives error in case the directory doesn't exists. Is there a way of not having the message?
15:31  dagni: cantoma: rm -rf
15:32  dagni: or rm 2>/dev/null -r [dir]
15:32  dagni: ;d
15:32  cantoma: dagni, thanks
15:34  dagni: if using second example, you somehow miss the special file /dev/null, use "mknod -m 666 /dev/null c 1 3" to make one :p
15:34  duper: /dev/MAKEDEV or /bin/MAKEDEV might do it too
15:35  dagni: true, but it will also create other devices
15:35  dagni: ;)
15:37  duper: i thought you could give it an argument to specify a single device
15:38  duper: at the very least you can get the minor/major numbers from there if you need them
15:38  dagni: MAKEDEV std null would do it, so yes
15:42  consumerism: what's the difference between && and ; ?
15:42  koala_man: !&&
15:42  greybot: cmd1 && cmd2 ## cmd1 is executed, and then if its exit status was 0 (true), cmd2 is executed. See http://mywiki.wooledge.org/BashGuide/TestsAndConditionals
15:42  consumerism: ah so ; doesn't care about the output of the last cmd
15:42  koala_man: right
15:43  consumerism: thanks
15:43  pgas: about the exit status, the output is someting else
15:43  consumerism: right
15:52  coachz: how can i clear the screen before echo in bash please ?
15:53  Fatal: clear ; echo
15:53  erUSUL: coachz: clear; echo foo
15:53  coachz: thanks guys
15:53  nimred: hello all
15:53  coachz: worked great !
15:53  nimred: what's wrong in this script :
15:53  nimred: http://sprunge.us/PIJS
15:53  nimred: ?
15:55  pgas: nimred: you tell us
15:55  nimred: pgas no it is a question
15:55  koala_man: it's valid bash
15:55  pgas: sure, but you think it's wrong, why do you says that?
15:55  nimred: i ask because it doesn't work
15:56  paxl: Out of curiosity, can I ask ASH question here ( or in fact busybox ash ? )
15:56  pgas: nimred: what doesn't work?
15:56  Fatal: we answer a lot of posix sh questions here yes
15:56  paxl: Fatal, Thanks .. I'll ask them soon then :)
15:57  nimred: pgas if emms is playing script stops it
15:57  nimred: but it doesn't work for other players (vlc + mpd)
15:57 * taylanub will gladly answer posix sh (and some bash) questions
15:57  pgas: nimred: run your script with: bash -x yourscript
15:57  taylanub: nimred: using `` is generally bad. use $()
15:57  pgas: and see what's really executed
15:58  pgas: echo 'shutdown\n' should probably be echo -e 'shutdown\n' or just echo shutdown, but that's not your problem
15:58  taylanub: nimred: bash's echo won't interpret \n by default. use printf (universal solution) or echo -e (bash only)
15:59  nimred: taylanub what is printf syntax ?
15:59  mrtnt: I have a ~1000 line file with ping results. Every line contains "icmp_seq=0". "icmp_seq=1", "icmp_seq=2", "icmp_seq=3" etc. However, if some packets were lost, there are gaps in seq numbers. Is it possible to list those seq numbers which are missing using the bash script? If yes, any suggestions what to do?
15:59  taylanub: posix _allows_ interpreting \n, \t etc., but it's "implementation defined", i.e. not properly standardized. for anything else than plain echoing of _known_ content (no user supplied variables), use printf. (e.g. printf %s "$var" to print unknown var)
15:59  Fatal: !printf > nimred
15:59  greybot: nimred: The printf command: http://bash-hackers.org/wiki/doku.php/commands/builtin/printf
15:59  nimred: pgas looks like script always executes emacsclient --eval '(emms-stop)'
15:59  pgas: (and busybox ash was not posix at old in older version, I don't know what is the status now)
16:00 * taylanub now realizes that this channel is #bash
16:00  nimred: when mpd is playing :
16:00  nimred: [~D]->> bash -x ~/scripts/player_stop.sh
16:00  nimred: ++ emacsclient --eval '(emms-show)'
16:00  nimred: + [[ "Nothing playing right now" = \N\o\t\h\i\n\g\p\l\a\y\i\n\g\r\i\g\h\t\ \n\o\w ]]
16:00  nimred: + emacsclient --eval '(emms-stop)'
16:01  pgas: see how you string miss a space before right?
16:01  nimred: oops
16:01  nimred: lol
16:01  pgas: and one before playing
16:02  pgas: !ifgrep > nimred also have a look at:
16:02  greybot: nimred also have a look at:: if grep -q word "$file"; then blah blah; fi DO NOT use [[ or [ or ` or $() or any other crap. "if" expects a command. "grep" is a command. "[" is too. You don't need both, just the grep works because grep returns true (0) if a match is found, but not otherwise.
16:04  nimred: pgas i do not work on file but on standard output
16:04  pgas: same thing
16:05  pgas: if cmd | grep -q blah;then
16:06  mr_daniel: Lets start simple. I want to write a bash script which logins into a remote server with ssh and creates a directory on this server. But instead remotely the directory is creted locally on my machine. This is the bash script: http://pastebin.com/PEcCKV93
16:06  Fatal: ssh host mkdir dir
16:07  dagni: mr_daniel: in one line, and best is to quote the remote command
16:07  dagni: ssh ramrod@dolphin-emulator.com "mkdir hi"
16:07  mr_daniel: ok, thanks dagni
16:08  nimred: pgas isn't :
16:08  nimred: echo "shutdown\n" | nc 127.1 4212
16:08  nimred: ok ?
16:08  pgas: only if you want to sed a \ and a n
16:08  pgas: # echo "shutdown\n"
16:08  evalbot: pgas: shutdown\n
16:09  nimred: ok got it working
16:11  nimred: thanks
16:11  dagni: shit im out of beer again
16:11  dagni: and it's -15C
16:12  ferret: eeek
16:12  dagni: it's horror to go outside now
16:12  dagni: ;D
16:13  dagni: but it must be done
16:13  dagni: oh well, brb
16:13  pgas: we will miss you...or not
16:14  dagni: yea
16:14  dagni: you wouldn't care if i die right now
16:14  dagni: ;D
16:15  dagni: but hey, these times i can chat only on irc, it's my only window on real peoples
16:15  tvm: :D
16:16  tvm: two hours left before i'll have beer
16:17  mr_daniel: A mysqldump is usually executed with:
16:17  mr_daniel: mysqldump --user="name" --password="secret" dbname > dump.sql
16:17  mr_daniel: But I have a problem with the " double-quotes, because I already use them to set ssh which command I want to execute on the remote machine.
16:17  greycat: Do you actually need to quote name and secret?
16:18  greycat: Do they contain whitespace or glob characters or other shell metacharacters?
16:18  mr_daniel: greycat: yes, because the password also includes some 'special characters' which bash would interpret
16:18  greycat: OK, and I assume secret is really a variable.  So then use double quotes in the outermost layer, and single quotes in the inner layer.
16:20  Braber01: um I want to make a lotto number gen and I want to figure out escape codes to echo out something in color.
16:20  greycat: !faq color
16:20  greybot: http://mywiki.wooledge.org/BashFAQ/037 -- How can I print text in various colors?
16:20  mr_daniel: Seems to work, thanks greycat
16:22 --- ldhanson2 is now known as ldh
16:24  nimred: pgas which way to make my script quit is no player is active ?
16:25  greycat: Figure out which command is doing the thing you don't want.  Then stop running that command.
16:26  nimred: greycat you didn't understand me
16:27  pgas: your question is too vague
16:27  ss0: nimred:  did you mean if instead of is?
16:27  pgas: what "player" are you talking about? what script? why is your script not quitting?
16:27  nimred: ss0 pgas i i run my script when no player is running, script is waiting
16:28  nimred: i wnat it to quit
16:28  greycat: What's a player?
16:28  nimred: pgas: http://sprunge.us/OHhD
16:28  ss0: nimred:  what is the name of the player, vlc, amarok, mplayer?
16:28  pigdude: how do I test that an arg ($1) is set in a script?
16:29  pigdude: what does that if look like?
16:29  nimred: ss0: http://sprunge.us/OHhD
16:29  greycat: Detecting whether foo is running is a foo-specific task unless you're falling back to 1989 stupid-fucker noobie techniques like parsing the output of ps and praying that nobody's lying to you about their name.
16:29  mDuff: pigdude, do you want to check if there's at least one argument passed, or if the first argument is non-null? What do you want to happen if the user runs your_prog "" second_arg?
16:29 --- nadir is now known as Guest64540
16:29  greycat: So, you AT LEAST have to tell us WHAT FUCKING APP you are dealing with.
16:29  greycat: pigdude: if (($# > 0))
16:29  taylanub: nimred: grep -c foo | grep -q 1  # true if grep -c foo puts out 10-19,100-199,...
16:30  mDuff: pigdude, use (( $# > 0 )) to determine if the number of arguments is at least zero, or [[ $1 ]] if you want to check that the first argument is non-null
16:30  nimred: taylanub what do you mean ?
16:30 --- Guest64540 is now known as n1adir
16:30  pigdude: greycat: neat
16:30  pigdude: greycat: so $# contains argc
16:30  greycat: yes
16:30  nimred: taylanub ah grep -q foo
16:31  ss0: !process
16:31  nimred: taylanub isn't it ?
16:31  taylanub: nimred: you do  mpc | grep -c playing | grep -q 1
16:31  greycat: taylanub: I take it from your response that nimrod is using stupid-fucking-n00b ps parsing techniques
16:31  ss0: greycat:  he is pgreping for vlc
16:31  greycat: OK, so there is some sort of application called "mpc"?
16:31  pigdude: so if an arg is required and not provided, I will echo an error, what number do I return?
16:31  taylanub: music player client probably
16:32  pigdude: I assume I can just return in the script?
16:32  greycat: pigdude: exit
16:32  pigdude: ah right
16:32  pigdude: thanks again greycat
16:32  nimred: ss0 pgas ay idea ?
16:32  pigdude: greycat: what number would you pass to exit?
16:32  greycat: me?  usually 1.
16:33  pigdude: ok
16:33  nimred: i would need another else
16:34  nimred: another loop
16:34  greycat: nimred: is "mpc" the name of some part of your music playing application?  If so, what does it do?
16:34  pigdude: is it not possible to have a script change my directory?
16:34  greycat: !faq change dir
16:34  greybot: http://mywiki.wooledge.org/BashFAQ/060 -- I'm trying to write a script that will change directory (or set a variable), but after the script finishes, I'm back where I started (or my variable isn't set)!
16:34  pigdude: does that need to be some bash_profile function?
16:34  taylanub: greycat: mpc is probably a client to the famous "music player daemon"
16:34  bzinger: how can i tell program to properly "close" itself,  e.g every time i quite vim, its content will be still visible from terminal's output, i want it to clear its content once vim is close
16:35  nimred: greycat mpc = Minimalist command line interface to MPD
16:35  pigdude: thanks greycat
16:35  nimred: taylanub any idea ?
16:35  greycat: Sounds promising.  And it writes the word "playing" to stdout if it is playing something?
16:35  taylanub: nimred: what exactly are you trying to do again?
16:36  nimred: eh guy i already explained you
16:36  greycat: bzinger: that's between vim and your terminal.  Talk to #vim.
16:36  taylanub: nimred: not me
16:36  nimred: my script is intended to stop any media player if one is running
16:36  greycat: You CANNOT STOP "any media player"!
16:36  bzinger: greycat: its pretty much all the apps in within bash
16:36  nimred: but in case none is running...
16:36  greycat: You can stop ONE specific application if you KNOW how that application works.
16:36  bzinger: e.g alpine, mutt etc
16:37  greycat: bzinger: Then talk to each one's support group.  Or write function wrappers.
16:37  nimred: taylanub do you understand ?
16:37  bzinger: so i think it could be a bash behaviour
16:37  greycat: bzinger: It is not.
16:37  taylanub: nimred: in case none is running, what?
16:37  nimred: i wnat script to quit
16:37  nimred: that's all
16:38  nimred: at the moment if no player is running script is waiting
16:38  greycat: nimred: Does the presence or absence of the word "playing" in the stdout of the "mpc" command give you enough information to make all your decisions?
16:38  nimred: lol
16:38  greycat: It's not a fucking joke.
16:39  Braber01: strange I want to play some numbers now...
16:40 --- julian__ is now known as julian-toyfuera
16:40  taylanub: nimred: is such a script _really_ necessary?
16:41  taylanub: it doesn't make much sense to me
16:41  Braber01: 94-17-4-18-46-power ball: 98. don't ask me why I made this script I thought it would be fun to write.
16:41  greycat: I can't believe it's this bloody hard to get a fucking DESCRIPTION of what he wants....
16:43  nimred: my questions are not related to the sense of why i am doing but to the way to do it
16:43  nimred: ...
16:43  Fatal: nimred: pkill vlc\|mpd\|mplayer
16:43  Fatal: done
16:44  greycat: Fine.  So, what do you want to do?  Look for the word "playing" and if it's present, issue some sort of "stop" command, and otherwise, do nothing?
16:44  nimred: lol
16:44  greycat: Fatal: *sigh* you might be right... give him the wrong answer that works 95% of the time and make him go away...
16:44  Fatal: greycat: I don't know what else to do, you ask him questions and he replies with lol
16:45  taylanub: nimred: i (probably we) just don't want to waste time solving an issue coming from a nonsensical problem
16:45  nimred: ok
16:45  nimred: bye
16:45  taylanub: best for the all of us
16:46  Fatal: I guess the only thing left to say now is;
16:46  Fatal: lol
16:46  Fatal: :/
16:54  dagni: *burp*
16:58  dagni: another unhappy customer
16:59  dagni: well he could kill any pid that access /dev/dsp ;d
16:59  dagni: or it's really about 'playing' word ;p
17:00  greycat: Apparently he uses multiple player applications but he couldn't be bothered to tell us that.  Or which ones they are.
17:01  greycat: Never mind being bothered to figure out the correct way to shut down every single one of them.
17:02  recorcholisss: How I can have a negative variable? The code closed when the variable is zero... http://pastebin.com/nrnDqNzx
17:02  recorcholisss: Please ^^
17:03  mDuff: !questions > recorcholisss
17:03  greybot: recorcholisss: Ask questions. Don't just paste 200 lines of code on a web page and say "HERE MY KODE <URL> WHATZ RONG". Describe the problem, clearly and concisely. If necessary, give the SMALLEST sample code that demonstrates the problem.
17:03  ss0: that is interesting dagni I wonder if he could use whats using the sound card | then grep his known list of apps to find their pids.
17:03  mDuff: recorcholisss, if you can construct a one-liner that demonstrates the bug, that would be helpful.
17:03  greycat: recorcholisss: are you using set -e?
17:03  mDuff: waitamoment, trying to put "i--" in a variable, and then expand it in a math context?!
17:04  mDuff: recorcholisss, what's the use case for that?
17:04  recorcholisss: Pfff, nadie habla spanish? S:, wait me, i go to traduce with a traductor..xd
17:05  mDuff: ...so, to show what recorcholisss is trying to do here...
17:06  recorcholisss: http://pastebin.com/ifnBPSv0
17:06  recorcholisss: -i != unsigned variable?
17:06  mDuff: recorcholisss, if you make a short enough example, you can paste it in the channel
17:06  mDuff: recorcholisss, as the "questions" factoid said
17:06  mDuff: !paste > recorcholisss
17:06  greybot: recorcholisss: Please don't waste our time by making us go to a pastebin just for a five-line snippet. Paste it in the channel. If you have a larger script that's showing problems, trim it down to the bare minimum size that still shows the problem. You'll probably fix it yourself once you do that.
17:07  barjac: Am I correct in assuming that there is no multi-line comment system in bash?
17:08  greycat: yes
17:08  mDuff: recorcholisss, that said, even looking at the pastebin, it looks like it's doing exactly what you wrote the script to do.
17:08  mDuff: recorcholisss, you tell it to stop at 0, it stops at zero; that has nothing to do with whether negative numbers are allowed.
17:08  Damnshock: recorcholisss: I do speak spanish
17:08  dagni: but that's all about spanish ;p
17:09  dagni: keep it english so i can enjoy as well ;)
17:09  recorcholisss: mm, so..
17:09  Damnshock: dagni: it can't talk clearly, it might be better to talk in private in spanish
17:09  dagni: you can even make cybersex on private, not my business there ;DDD
17:10  dagni: but it's good idea if you have time and good will to explain him in spanish
17:10  dagni: on priv
17:10  dagni: ;P
17:10  barjac: greycat: thanks - any other way to ignore a chunk of code (or is it just easier to make it a function) :-)
17:11  recorcholisss: how i can make this? echo "message" 14 times. return to loop for with the loop while and execute an infinite loop remaining one to the variable i
17:11  greycat: Oh, I'm sure someone will come up with some atrocious hack for you.
17:11  greycat: recorcholisss: for i in {1..14}; do echo "message"; done; while true; do something I cannot understand; done
17:17  taylanub: barjac: true << \#EOF
17:17  greycat: There we go.  Hacks for all.
17:18  greycat: Nothing like performing file systems operations to execute comments!
17:18  n1adir: : <<EOF
17:18  n1adir: same problem?
17:18  greycat: Same.
17:18  n1adir: thanks
17:19  taylanub: mine will ignore the '#EOF' when you comment out the 'true << \#EOF' itself you know
17:19  greycat: Bash creates a temp file for here documents.
17:20  recorcholisss: Now!  The end source:  http://pastebin.com/urR333Fz
17:20  recorcholisss: ty all ;-)
17:20  astx: Is it possible to specify an option with an optional argument using the getopts built-in (like "::" in c getopt)?
17:20  greycat: !faq easily
17:20  greybot: http://mywiki.wooledge.org/BashFAQ/035 -- How can I handle command-line arguments (options) to my script easily?
17:24  lupinstein1: I got a question about variables, I have script that goes gets the total off the box, then adds them together. my first variable is n=0 then it runs a script that get the count r=$(myscript) , I have and I am adding them together, do r=$(myscript) ((n+=r) , my question is how cant I get that ((n+=r) as another variable?
17:24  greycat: x=$((n+r))
17:26  lupinstein1: greycat: as always thank, you sorry for being a dumbass, from each answer you give me, I learn more and more.
17:28  mDuff: s/thank, you/thank you;/
17:28  taylanub: greycat: sure about the temp file for here-docs? what if the filesystem is read-only?
17:30  mDuff: lupinstein1, (the original comma placement binds "you" to "sorry" rather than to "thank", thus implying something different from "I'm sorry")
17:45 --- hagebake is now known as hagabaka
17:48 --- Wordpad2 is now known as Amivit
17:49 --- Amivit is now known as Deathray
17:58  poisonbit: can I search if there is a dir in any of the $@ items, without iterate using for ?
17:59  mDuff: sure -- you can iterate using while :P
18:11 --- roxy is now known as pixie__
18:12  metalfan_: hi
18:12  metalfan_: while true; do for b in Tala* Step*Brother* Elf* Anchor* do rsync -av --partial --progress dmk:/home/sabnzbd/usenet/downloads/complete/"$n" . ; sleep 10; done; done   whats wrong with this?
18:12  mDuff: metalfan_, well, for one, it's evaluating those glob expressions _locally_
18:13  mDuff: metalfan_, ...rather than sending them to the remote machine to be expanded there
18:13  mDuff: ...well, potentially doing that; you could be getting lucky if you have no local files which match
18:13  mDuff: and if nullglob is unset
18:13  mDuff: but it's a dangerous thing to rely on
18:14  mDuff: !quotewhen > metalfan_
18:14  greybot: metalfan_: "Double quote" *EVERY* argument that contains whitespace or expansions ("$foo", "$(foo)", "`foo`"). 'Single Quotes' prevent expansions from happening at all. Also quote *, [, ], ? etc. if you don't want bash to expand them into filenames.
18:14  metalfan_: mduff: locally is what i want
18:14  metalfan_: oh no...
18:14  mDuff: but the files exist remotely!
18:15  mDuff: you _can't_ figure out what they are by expanding globs for them locally
18:15  metalfan_: the construct works somehow without the for loop
18:15  metalfan_: mDuff, youre right
18:15  metalfan_: still, without the for loop it works somehow
18:15  mDuff: it works because the asterisks are part of a rsync URL which will never match any local file
18:16  mDuff: unless you have local files named hostname:/remote/path/yadda/yadda around
18:16  mDuff: but even then that's assuming nullglob is unset
18:16  mDuff: if you have nullglob it won't work even without the loop.
18:16  mDuff: so -- the safe thing is to use more quotes
18:16  metalfan_: as you said, remote
18:17  metalfan_: ok
18:17  codin: I have a list of files, e.g., file_0.txt, file_1.txt, file_2.txt ... file_6.txt, and would like to process the content of all files from 1 to 6. I can do cat file_{1,2,3,4,5,6}.txt | process
18:18  mDuff: codin, or file_[0-6].txt, or you can use a loop, or... what's your question, exactly?
18:18  metalfan_: mDuff, but considering what i have now...why does it give me a syntax error?
18:18  codin: how can I construct the list {1,2,3,4,5,6} in a script and select the files to be processed ? if I set a variable say a="1,2,3,4,5", then do cat file_${a}.txt | process does not work
18:19  codin: the list of file may exclude some number in the sequence
18:19  greycat: codin: I hesitate to give the answer to this because it's fucking DANGEROUS when you change the question slightly, and I KNOW you fucking will, because EVERYONE always changes the fucking question....
18:19  mDuff: codin, files=( file_[1-6].txt ); cat "${files[@]}"
18:20  greycat: mDuff: Only works if the files exist in $PWD of course.
18:20  mDuff: eh, the array can be populated however he likes
18:20  greycat: mDuff: and doesn't directly answer his question because he's going to want some stupid shit like mylist='1,17,42'
18:20  codin: greycat, did not want to upset you, but just did not finish my example
18:21  greycat: I've decided to skip the causality thing and go straight to the getting-upset part.  It saves a lot of time.
18:21  poisonbit: or   cat file_{1,2,3...}.txt
18:21  greycat: Nobody's reading his question....
18:22  greycat: He wants DYNAMIC FUCKING BRACE EXPANSION.
18:22  greycat: The only way to do that is evil.
18:22  mDuff: I know his question, and I'm answering less harmful ones instead
18:22  greycat: heh
18:22  dagni: greycat: relax... ;)
18:23  dagni: i just readed the uppercase tbh ;p
18:23  greycat: codin: What is the actual goal here?  Where is this list of numbers coming from?
18:23  mr_daniel: I use a bash script to execute commands on a remote machine. My goal is to create dumps of 15 databases. The script basically looks like this: http://pastebin.com/yBE0iShR
18:24  ss01: greycat:  have you ever considered writing a bash book? I would buy it.
18:24  codin: greycat, I know the file names have this format: file_<num>.txt, however I do not know the sequence, so I have to construct a list of them
18:24  mr_daniel: It works, but it is not very efficient, because it makes more sense to make all dumps in a *single* ssh connection. But instead the script uses a ssh connection for *each* command issued on the server.
18:24  greycat: Where do the numbers COME FROM?
18:25  recorcholisss: Hello. I want decimals but the script don't .. give me...             #!/bin/bash while true; do tamanio="$(du -s ~/ | cut -f 1)";    echo $(($tamanio/2048)); done; Help pls :p
18:25  greycat: !faq float > recorcholisss
18:25  greybot: recorcholisss: http://mywiki.wooledge.org/BashFAQ/022 -- How can I calculate with floating point numbers instead of just integers?
18:25  recorcholisss: ty
18:25  mr_daniel: How can I execute a lot of bach commands in a single ssh connection on a bash script?
18:25  greycat: mr_daniel: ssh user@host bash <<'script'
18:25  codin: greycat, from an application I do not  have control on; all I know it is producing these files
18:26  greycat: codin: Then you have two choices: sanitize the input and use evil, or use a loop.
18:27  codin: greycat, ok thank you, evil it is
18:27  mDuff: codin, now, what exactly is the format? Is it only comma-separate numbers? Does it have dashed ranges in it? What else?
18:27 * mDuff is not actually certain such evil is strictly necessary.
18:27  greycat: I assume it's exactly what he said: the app produces a comma-separated list of positive integers.
18:27  mDuff: well, right, then
18:27  mDuff: no evil needed
18:27  greycat: huh??
18:27  mDuff: if we don't support dashed ranges, it's just a simple read loop
18:28  mDuff: no brace expansion needed
18:28  mDuff: !faq 1 > codin
18:28  greybot: codin: http://mywiki.wooledge.org/BashFAQ/001 -- How can I read a file (data stream, variable) line-by-line (and/or field-by-field)?
18:28  greycat: I already said a loop was the other option.
18:28  mDuff: ahh; I missed that.
18:28  mDuff: codin, ...why  would you choose evil over a loop?
18:29  greycat: !b6
18:29  greybot: When given a choice of solutions, the newbie will always choose the wrong one.
18:30  codin: mDuff, greybot, the list I have to construct; for example one use case could be: file_1.txt, file_3.txt, file_4.txt, file_6.txt
18:30  codin: so the list would be a=1,3,4,6
18:30  greycat: I've already answered this question.
18:30  codin: but again, I have to "stat" the files and construct the list
18:31  greycat: ...
18:31  codin: greycat, ok thank you
18:31  willdye: codin: dynamic brace expansion is possible with things like 'eval', but the sad experience of many is that such an approach is extremely prone to errors ("eval is evil").  you're probably better off backing up and looking at the bigger picture, and finding a way to accomplish that larger goal using safer techniques.
18:31  codin: ok, will reconsider thank you very much for your answers and hints
18:33  mDuff: # files=(); a="1,3,4,6"; while read -d, num; do files+=( "file_${num}.txt" ); done <<<"$a,"; echo "${files[@]}"
18:33  evalbot: mDuff: file_1.txt file_3.txt file_4.txt file_6.txt
18:33  mDuff: codin, ^^^
18:34  codin: mDuff, beautiful. thank you very much
18:34  mDuff: codin, ...if you read FAQ 1, you should have arrived at that on your own.
18:35 * codin feels ashamed and tired ...
18:37  recorcholisss: amm, help of new please :(   , the source:    #!/bin/bash while true; do    tamanio="$(du -s ~/ | cut -f 1)";    awk 'BEGIN {printf "%.3f GB\n", $tamanio/2048}'; done;             give: 0.000 /enter/ 0.000 /enter/   whyy?
18:37  willdye: #echo {1,2};x="3,4";echo {$x};eval echo {$x} # <-- technically works, but DON'T use this form
18:38  willdye: # echo {1,2};x="3,4";echo {$x};eval echo {$x} # <-- technically works, but DON'T use this form
18:38  evalbot: willdye: 1 2
18:38  evalbot: willdye: {3,4}
18:38  evalbot: willdye: 3 4
18:38  trash: recorcholisss: Single quotes prevent parameter expansion.
18:38  greycat: recorcholisss: use 2048.0 maybe
18:38  greycat: recorcholisss: also, use du -sk and 1024.0
18:38  greycat: du -s without -k can either decide to use 1024 byte units or 512 byte units, depending on the OS
18:41  recorcholisss: #!/bin/bash
18:41  recorcholisss: while :
18:41  recorcholisss: do
18:41  recorcholisss:     tamanio="$(du -sk ~/ | cut -f 1)"
18:41  recorcholisss:     awk 'BEGIN {printf "%.3f GB\n", $tamanio/1024.0}'
18:41  recorcholisss: done
18:41  recorcholisss: give:  0.000 GB /enter/ 0.000 GB etc.
18:42  trash: recorcholisss: Single quotes prevent parameter expansion.
18:42  greycat: recorcholisss: awk -v tamanio="$tamanio"
18:44  recorcholisss: trash: http://pastebin.com/JtFKVL8t   ??
18:44  recorcholisss: greycat: how? :S I understand
18:44  trash: recorcholisss: What does that URL tell me?
18:44  greycat: recorcholisss: /topic #awk
18:45  Damnshock: trash: you can submit a correction there if you feel up to
18:45  Damnshock: it
18:45  Damnshock: ;)
18:45  recorcholisss: trash: while :
18:45  recorcholisss: do
18:45  recorcholisss:     tamanio="$(du -sk ~/ | cut -f 1)"
18:45  recorcholisss:     awk 'BEGIN {printf "%.3f" GB\n", "$tamanio"/"1024.0"}'
18:45  recorcholisss: done
18:45  greycat: recorcholisss: echo '$PATH'
18:45  greycat: You have $tamanio inside '...'
18:46  trash: You still have single quotes around $tamanio
18:46  greycat: 12:42  greycat> recorcholisss: awk -v tamanio="$tamanio"
18:46  greycat: And then  'BEGIN {printf whatever, tamanio/1024.0}'
18:47  recorcholisss: while :
18:47  recorcholisss: do
18:47  recorcholisss:     tamanio="$(du -sk ~/ | cut -f 1)"
18:47  recorcholisss:     awk 'BEGIN {printf %.3" GB\n", '$tamanio'/1024.0}'
18:47  recorcholisss: done
18:47  recorcholisss: ??
18:47  greycat: 12:46  greycat> 12:42  greycat> recorcholisss: awk -v tamanio="$tamanio"
18:47  greycat: Third fucking repetition....
18:48  greycat: Go to #awk if you need to learn awk.  And you obviously do.
18:48  recorcholisss: while :
18:48  recorcholisss: do
18:48  recorcholisss:     awk -v tamanio="$tamanio"
18:48  recorcholisss:     tamanio="$(du -sk ~/ | cut -f 1)"
18:48  recorcholisss:     awk 'BEGIN {printf %.3" GB\n", '$tamanio'/1024.0}'
18:48  recorcholisss: done
18:48  recorcholisss: ?? T_T
18:48  greycat: *PLONK*
18:48  greycat: I WROTE THE FUCKING THING FOR YOU AND YOU STILL DIDN'T GET IT.  SO FUCK OFF.
18:49  recorcholisss: I understand, ok? And i'm trying traduce to spanish ¬¬'     Don't offense me u.u
18:50  mDuff: recorcholisss, it doesn't matter, he can't hear you
18:50  mDuff: !plonk > recorcholisss
18:50  greybot: recorcholisss: The sound a name makes when it hits a kill file (or /ignore list).
18:50  greycat: All he has to do is cut and paste the things I wrote, and replace whatever with the "%@$%^%@" thing.
18:50  greycat: I LITERALLY wrote the entire command for him, apart from copying his printf format.
18:50  recorcholisss: Pff, si tenéis que insultar, bah, que os follen chao
18:51  metalfan_: ah, i found my problem. o used for b in ....      and later used "$n"   which of course doesnt work
18:52 * poisonbit avoid one letter variables. b?  n?
18:53  poisonbit: also i've had the same fail many times when refactoring metalfan_ it's easy to happen
19:01  dagni: lol
19:02  poisonbit: it's usual to get a segmentation fault in GNU file, using file --mime-encoding path/*  if there are directories in the *  ?
19:02  poisonbit: 0x00007ffea623e0b0 in strlen () from /lib/libc.so.6
19:03  poisonbit: # mkdir -p d1/d2; file --mime-encoding d1/*
19:04 * mDuff notes that this is support for bash, not for the GNU tools
19:04  evalbot: poisonbit: bash: file: command not found
19:11  argos-void: why gnu screen prints me the PS1 with no colors? and in tty?(prints the escape chars)
19:12  mDuff: argos-void, probably the terminal isn't recognized
19:12  argos-void: ??
19:12  mDuff: argos-void, ...try using a different, compatible TERM.
19:12  mDuff: !nabq > argos-void
19:12  greybot: argos-void: Not A Bash Question. Ask the channel that supports your software, hardware, or OS.
19:13  argos-void: ok
19:24 --- mmnicola1 is now known as mmnicoilas
19:24 --- mmnicoilas is now known as mmnicolas
19:27  barjac: taylanub: Thanks for the here doc idea - works well - ideal for quick temporary tests. I had to leave earlier.
19:27  taylanub: barjac: and please for quick temporary tests only
19:30  barjac: taylanub: Yes - that was the idea ;-) I hate typng columns of #.
19:31  barjac: s/typng/typing/
19:36  dknight: I have to set a few environment variables each time, so I kept them in a script file. however, when I run the script it does not work though invoking individual lines of the script from cmd works fine
19:36  greycat: dknight: ''help source''
19:36  greycat: Or, depending on what you're actually asking...
19:37  greycat: !faq change dir
19:37  greybot: http://mywiki.wooledge.org/BashFAQ/060 -- I'm trying to write a script that will change directory (or set a variable), but after the script finishes, I'm back where I started (or my variable isn't set)!
19:37  dknight: greycat: thank you
19:38  taylanub: dknight: FYI: a child process _cannot_ change the environment of its parent
19:38  rustymyers: all, I'm trying to figure out how to print with awk the third result and every result afterwards. is that possible with awk?
19:38  taylanub: (in a sensible way)
19:38  taylanub: #awk
19:39  dknight: taylanub: I understand that. I just didnt know how to do it correct
19:51  sprung: hi. what does $? do ?
19:51  tuxdev_: !$?
19:51  greybot: The special parameter ? (you use $? to expand it) contains the exit status of the previous command, an integer from 0 to 255 inclusive. In general, an exit status of 0 implies success (or "true") and non-zero implies failure ("false").
19:52  rustymyers: My Question: http://pastie.org/1345220
19:52  tuxdev_: !nopaste
19:52  greybot: Please don't waste our time by making us go to a pastebin just for a five-line snippet. Paste it in the channel. If you have a larger script that's showing problems, trim it down to the bare minimum size that still shows the problem. You'll probably fix it yourself once you do that.
19:52  mDuff: !questions > rustymyers
19:52  greybot: rustymyers: Ask questions. Don't just paste 200 lines of code on a web page and say "HERE MY KODE <URL> WHATZ RONG". Describe the problem, clearly and concisely. If necessary, give the SMALLEST sample code that demonstrates the problem.
19:52  rustymyers: I'd like to take this command:
19:52  rustymyers: system_profiler SPSerialATADataType | grep -A 20 Volumes\:| grep Mount\ Point
19:52  rustymyers: which output is:
19:53  rustymyers: on a booted system:
19:53  rustymyers:               Mount Point: /
19:53  rustymyers: on a netboot system:
19:53  rustymyers:               Mount Point: /Volumes/Macintosh HD
19:53  rustymyers: or with a different name:
19:53  rustymyers:               Mount Point: /Volumes/My Fancy Spancy Hard Drive
19:53  rustymyers: and I'd like to set a variable to the path of the hard drive.
19:53  rustymyers: I created this:
19:53  rustymyers: DS_INTERNAL_DRIVE=`system_profiler SPSerialATADataType | grep -A 20 Volumes\:| grep Mount\ Point| awk '{print $3}'`
19:53  rustymyers: Which works for the mounted system, but not so well when there are spaces in the Mount Point. So I tried this:
19:53  rustymyers: DS_INTERNAL_DRIVE=`system_profiler SPSerialATADataType | grep -A 20 Volumes\:| grep Mount\ Point| awk '{print $3" "$4" "$5" "$6" "}'`
19:53  rustymyers: but thats not very slick and could pose issues. Is there another way to have awk print the $3 result and every result afterwards?
19:53  rustymyers: Beter =)
19:53  rustymyers: *better?
19:53  mDuff: rustymyers, I'd go to ##awk and ask for help there -- with a fancier awk expression, you should be able to get rid of both grep expressions.
19:53  sprung: rustymyers, you may want to use cut rather than awk
19:54  tuxdev_: use a while-read loop on the output of grep, then PE what you don't need
19:54  mDuff: ...well, yes, that too
19:54  rustymyers: thanks mDuff and sprung I'll check them out
19:54  mDuff: either less awk or more :)
19:54  sprung: cut would be the easy way imho
19:55  tuxdev_: shove the result into an array or actually do what you want to do with the info
19:55  tuxdev_: rustymyers, it's a bit aesthetic, but I prefer using "" or '' instead of backslash-escaping
19:56  tuxdev_: easier to see what's happening
19:57  sprung: rustymyers, rather than awk do a cut -d' ' -f2-
19:58  rustymyers: sprung: that cut gives me:              Mount Point: /
19:58  greycat: Is he parsing df?
19:59  sprung: greybot, he is doing this: http://pastie.org/1345220
19:59  sprung: greycat http://pastie.org/1345220
19:59 * greycat does a lastlog and sees "disk stuff that ain't df".  Oh, ok.
19:59  rustymyers: cut -d' ' -f17- might work
19:59  geirha: No, some command I've never heard of
19:59  rustymyers: =D system_profiler
19:59  tuxdev_: it seems to be even less parsable than df, though
20:00  rustymyers: ok, cut works fine. Perhaps i'll ask in #awk to make it super fancy
20:00  rustymyers: thanks again all!
20:07  jsz`: foo+=$bar or foo+="$bar" ?
20:08  greycat: doesn't matter.
20:08  greycat: word splitting isn't performed in a variable assignment
20:08  jsz`: thanks
20:09 --- SeySayux_ is now known as SeySayux
20:09  geirha: So pick one and use it consistenty
--- Log closed Fri Dec 03 20:13:33 2010
--- Log opened Fri Dec 03 20:13:45 2010
20:13 --- Users 546 nicks [0 ops, 0 halfops, 0 voices, 546 normal]
20:15 --- Channel #bash was synced in 131 seconds
20:26  ezzieyguywuf: how can I use the read (or similar) command to only read in the first character of input?
20:26  ezzieyguywuf: that way I can easily check if the user said y Y yes Yes yES or any combination thereof
20:26  ezzieyguywuf: or is there a better way to perform this check?
20:26  greycat: read -n 1
20:26  geirha: ezzieyguywuf: ''help read''
20:26  ezzieyguywuf: greycat: thing about -n 1 is that the user has no chance to correct the input if they mis-type
20:27  greycat: Actually based on your SECOND question you probably want ''read'' and then an 'if [[' or 'case'.
20:27  geirha: read; if [[ $REPLY = [Yy]* ]]; then echo "it starts with Y"; fi
20:27  ezzieyguywuf: greycat: yea, so I'm using an if [ $USERINPUT == 'y' -o $USERINPUT == 'Y' ], so I just need to assure that my $USERINPUT is just the first char
20:28  ezzieyguywuf: ah, regexps work as test-conditions. wonderful
20:28  geirha: Not regex, globs.
20:28  greycat: !pitfalls > ezzieyguywuf
20:28  greybot: ezzieyguywuf: http://mywiki.wooledge.org/BashPitfalls
20:28  greycat: So many errors....
20:28  geirha: !faq [[
20:28  greybot: http://mywiki.wooledge.org/BashFAQ/031 -- What is the difference between test, [ and [[ ?
20:33  ignitedcoding: hey everyone.... having a really tough time with grep, one that I would think should be simple.  It's not interpreting my regular expression. I'm trying to just list files ending with a .js extension in a directory (recursively of course).
20:33  ignitedcoding: "find . -type f | grep -E /\.js$/s --exclude=*svn*"  is failing miserably
20:33  \malex\: ignitedcoding: why can't you use -name '*.js'?
20:33  geirha: find . -name .svn -prune -o -type f -name "*.js" -print
20:33  ignitedcoding: \malex\, didn't know  I could do that
20:33  geirha: !find
20:33  greybot: http://mywiki.wooledge.org/UsingFind
20:34  greycat: ignitedcoding: for starters, quote the regex.
20:34  ignitedcoding: geirha, thanks
20:34  ignitedcoding: greycat, thank you also
20:34  ignitedcoding: wow... this may have been the most helpful experience I've ever had on IRC
20:34  greycat: ignitedcoding: second, you have a $ in the middle of the regex.  This is nonsensical.  $ means end of pattern and must be at the END or not appear at all.
20:35  sprung: ignitedcoding, yes this channel rocks
20:35  ignitedcoding: greycat, I'm coming from php, where regular expressions are surrounded by slashes and the s at the end just means multi-line
20:35  ignitedcoding: I don't pretend to know anything about regexp
20:35  ignitedcoding: *regex
20:35  ignitedcoding: sprung, yes it does :)
20:36  greycat: !re
20:36  greybot: Regular Expressions. These come in several flavors (BRE, ERE, PCRE, and more). See http://mywiki.wooledge.org/RegularExpression and http://www.grymoire.com/Unix/Regular.html and http://www.regular-expressions.info/
20:37  ignitedcoding: geirha, that worked like a champ... thanks
20:38  ezzieyguywuf: greycat: thanks for the link.
21:10  gokoon: hello
21:10  gokoon: I'm on mac, doing g++ *.cpp > textfile
21:10  gokoon: but it doesn't forward
21:10  gokoon: whats wong ?
21:10  greycat: You proabably want 2>&1
21:10  greycat: !faq 2>&1
21:10  greybot: http://mywiki.wooledge.org/BashFAQ/055 -- Tell me all about 2>&1 -- what's the difference between 2>&1 >foo and >foo 2>&1, and when do I use which?
21:12  gokoon: thanks !
21:16 --- y3llow_ is now known as y3llow
21:16 --- cuba33ci_ is now known as cuba33ci
21:18  pigdude: to be sure, there is no way to automate cd?
21:18  taylanub: automate?
21:18  \malex\: pigdude: automate cd?
21:19  greycat: look at CDPATH in the manual
21:19  pigdude: to be able to say "some_cmd x" (be this an alias or something else) and move to some_prefix_x
21:19  lhunath: or autocd
21:19  lhunath: uh, what?
21:19  greycat: or just search it for [Cc][Dd]
21:19  pigdude: greycat: I read the link you sent earlier, and it makes perfect sense
21:19  pigdude: greycat: but I was really hoping that there was some alternative to `source` for this
21:20  pigdude: lhunath: basically, I am always doing cd /some_prefix/dir_x
21:20  pigdude: lhunath: I would like to not have to type that out each time
21:20  \malex\: pigdude: mycd() { cd some_prefix_"$1"; }
21:20  pigdude: \malex\: that won't work, will it?
21:20  lhunath: !CDPATH
21:20  greybot: CDPATH lets you specify a location where bash will search for directories when 'cd'ing. Can be handy to build shortcuts or "portals" to deep places in your filesystem. See http://stackoverflow.com/questions/670488/#676753
21:20  pigdude: \malex\: won't the function be run in a subshell?
21:20  greycat: wants a / instead of the second _
21:20  pigdude: I see
21:20  greycat: pigdude: no.
21:21  pigdude: ok, got it, so then earlier when I asked if this could be a bash_profile function, the answer should be 'yes'?
21:21  lhunath: pigdude: read the link
21:21  \malex\: pigdude: sure it will
21:21  \malex\: pigdude: sure it will work
21:21  pigdude: can CDPATH have a prefix?
21:21  pigdude: or does it have to be a directory?
21:21  lhunath: your prefix IS A directory.
21:22  taylanub: pigdude: you really want 'foo' to turn into 'prefix_foo' and not 'prefix/foo' ?
21:22  pigdude: taylanub: idiots named files on this particular system
21:22  pigdude: taylanub: I agree with you 100%
21:22  taylanub: function will do then i guess
21:22  pigdude: so if I do CDPATH=/u, that will not work
21:22  pigdude: if I do `cd sr`
21:23  pigdude: I will not go to /usr
21:23  \malex\: greycat: CDPATH would only search for directories named exactly as the argument passed to cd, not actually add a prefix
21:23  pigdude: ok, that's what I was thinking
21:23  pigdude: just thinking how *PATHs generally work
21:25  pigdude: yep, bash function is the way to do this, excellent
21:41  max_: is there a way I can add an entry to a new index in an array automatically?  Say you have a=(0 1 2 3 4 5).  Can you do something like this (just an uneducated example) a[@]=6 to make a[6]=6?
21:42  greycat: a+=(element)
21:42  geirha: a+=(6)
21:42  greycat: bash 3.1 or higher
21:42  geirha: n=${#a[@]} a[n]=6  for older
21:43  geirha: (assuming non-sparse array
21:43  geirha: )
21:47  taylanub: where can i edit keybinds for vi input mode?
21:48  gniourf_gniourf: you can always ask in #vim
21:48  taylanub: she shell has vi input mode you know
21:48  taylanub: it's usually emacs on default
21:48  mDuff: taylanub, tried the readline manual?
21:48  gniourf_gniourf: oh sorry I didn't read properly
21:49  taylanub: inputrc i guess...
21:49  mDuff: taylanub, (pretty much everything that _can_ be configured is configurable via inputrc)
21:49  mDuff: indeed
21:49  taylanub: ok thanks
22:01  ezzieyguywuf: still don't get what -h -s is. but anyways, how can I initialize a variable that I am using in a read command, such that if the user doesn't provide a value I have a pre-set value to use?
22:01  ezzieyguywuf: sorry, ignore that first sentence.
22:07  poisonbit: ezzieyguywuf, you have it in bash4
22:07  poisonbit: see -i
22:08  poisonbit: in bash3 fou can make ${var:-'default value'} after read
22:08  ezzieyguywuf: poisonbit: is that part of the read command?
22:08  poisonbit: yup, help read on bash4
22:08  Bushmills: # foo="";     : ${foo:=bar};    echo "$foo"
22:08  evalbot: Bushmills: bar
22:09  poisonbit: s/fou/you/
22:09  ezzieyguywuf: cool, thanks.
22:09  Bushmills: # foo="xyz";   : ${foo:=bar};  echo "$foo"
22:09  evalbot: Bushmills: xyz
22:09  ezzieyguywuf: so really you meant ${var:='default value'}?
22:09  Bushmills: the bot seems to understand that, thus i might have meant that
22:13  poisonbit: ezzieyguywuf, you can use :- or :=, one "uses a default", the other "asign a default"
22:13  poisonbit: depends on code
22:14  poisonbit: # for value in a ''; do var=$value; echo "r: ${var:-default value}"; done
22:14  evalbot: poisonbit: r: a
22:14  evalbot: poisonbit: r: default value
22:15  afancy_: hi, how to display the content of a specified line no of a file? thanks
22:15  Bushmills: sed may be more suited than bash
22:16  poisonbit: using bash, read the file into an array of lines and use "${arr[$line]}"
22:16  Bushmills: sed -n ${linenr}p file
22:20  mattymo: if you want to play around with the file at that line, you can do vim $file :$linenum
22:20  Bushmills: or awk.    awk 'NR==<linenumber> {print}' file
22:21  mattymo: oops +$linenum
22:21  \malex\: no one does head | tail anymore?
22:21  Bushmills: one pipe too many
22:21  \malex\: but portable! :D
22:22  Bushmills: why should sed or awk solution be less portable?
22:22  Elebertus: hmm, so it seems like the following only works for interger values, and not string values, is this true? if [[ "$STRINGVAR1" != "something" || "something else" ]]
22:22  \malex\: no reason, really
22:22  Elebertus: or is my syntax just off?
22:23  mattymo: "something-else" is not a conditional expression
22:23  mattymo: if [[ "$STRINGVAR1" != "something" ||  "$STRINGVAR1" != "something else" ]]
22:23  geirha: Elebertus: No, it works for strings, not numerical values
22:23  mattymo: that's better
22:24  Elebertus: mattymo: so that would be proper?
22:24  Bushmills: # f [[ "a" != "b" ]]; then echo "different"; fi
22:24  Elebertus: ahh
22:24  evalbot: Bushmills: bash: syntax error near unexpected token `then'
22:24  mDuff: !varcap > Elebertus (regarding naming)
22:24  greybot: Elebertus (regarding naming): By convention, we capitalize environment variables (PAGER, EDITOR, ..) and internal shell variables (SHELL, BASH_VERSION, ..). All other variable names should be lower case. Remember that variable names are case-sensitive; this convention avoids accidentally overriding environmental and internal variables.
22:24  mattymo: but that would always return true
22:24  Bushmills: # if [[ "a" != "b" ]]; then echo "different"; fi
22:24  evalbot: Bushmills: different
22:24  afancy_: hi, could anyboy help me here? http://dpaste.com/282821/
22:24  Bushmills: # if [[ "a" != "a" ]]; then echo "different"; fi
22:24  evalbot: Bushmills: no output
22:25  mattymo: whoa your bot does eval
22:25  mDuff: !evalbot > mattymo
22:25  greybot: mattymo: evalbot runs each session in a new VM as root. Feel free to play with, or hack, the bot in #evalbot or look at it more closely on http://www.vidarholen.net/contents/evalbot/
22:25  mattymo: # if [[ "a" == "a" ]];then echo "I'm a little teapot, short and stout!"; fi
22:25  evalbot: mattymo: I'm a little teapot, short and stout!
22:25  geirha: !html > afancy_
22:25  greybot: afancy_: You can't realistically parse tag-based markup languages like HTML and XML using Bash or utilities such as grep, sed or cut. If you just want to dump/render HTML, see (links|links2|lynx|w3m) -dump, html2text, vilistextum. For parsing out pieces of data, see tidy+(xmlstarlet|xmlgawk|xpath|xml2), or learn xslt. Ask #xml and #html for more help. See http://www.codinghorror.com/blog/archives/001311.html
22:44  pyml: i am having problems including some header files in bsd/osx.  i have the files in either /usr/local/include or /usr/include (tried both because local dir doesn't work by default).  neither seem to be working.  what can i do to make sure that the compiler sees them?
22:48  geirha: pyml: Try ##workingset or ##c
22:49  sPiN: i am trying to create a csv list of several servers local users with the groups they belong to...
22:49  pyml: geirha: thnanks
22:51  sPiN: nm.. think i found the issue
22:52  rhalff: hi, I need to make a bash script to detect size info for an ntfs partition and resize it automatically
22:52  rhalff: one way of finding out is using parted
22:52  rhalff: with something like parted /dev/sda print
22:53  rhalff: anyone know a better option ?
22:53  rhalff: somehow I don't reallly trust parsing output that's meant to be read for humans :-)
22:53  mDuff: rhalff, sfdisk
22:55  rhalff: mDuff: thanks, will have a look at that
23:00  Braber01: !colors
23:00  greybot: /msg greybot !faq 37
23:11  afancy_: hi, how to grep with OR? for example grep 'a'||'b' file
23:12  mDuff: afancy_, read up on regular expressions
23:15  rhalff: hm anyone understand what the /dev/dm-* partitions are ? http://pastebin.com/Vf26s5L8
23:15  rhalff: or is that what lvm uses
23:15  mDuff: dm is for "device mapper"
23:15  mDuff: it's very much a Linux-specific thing, which makes it not a bash question
23:16  mDuff: rhalff, ...by the way, you might find the dmsetup command interesting for getting more data about them
23:16  mDuff: (and that's all I have to say about that)
23:16  rhalff: ok :-)
23:20  rhalff: mDuff: ah, forgot I ever had found it necessary to have a crypted disk
23:21  rhalff: hm ok, that's not what it's about
23:21  mDuff: it's _also_ used for dmcrypt
23:21  mDuff: but that's just a subset
23:22  mDuff: and still not a bash question :)
23:28  sigmonsays: Anyone familiar with a job queueing program? I remember writing many reincarnations in bash, then stumnling upon the one i'm looking for that was simple and let me control the level of concurrency. It was written in C.
23:29  snappy: sigmonsays: xargs?
23:29  queso: In "${files[@]}", what does the { represent?
23:29  sigmonsays: queso, just means variable. like ${variable}
23:30  sigmonsays: snappy, well I want to control the job queue concurrency rate after I dispatch them. I had written this in bash a billion times
23:30  geirha: It tells bash what characters are part of the parameter expansion
23:30  sigmonsays: but it was always easier to use the program I can't recall!
23:30  snappy: sigmonsays: perhaps, xargs? see -P
23:30  sigmonsays: lol, Nah
23:30  sigmonsays: that is not concurrent
23:31  queso: sigmonsays, geirha: ty
23:31  sigmonsays: snappy, perhaps it is if I tweak it just right. maybe i'll rtfm more
23:31  snappy: that's what i use for parallel execution
23:35  queso: The @ means 'all array elements'?
23:36  geirha: Yes, though keep in mind you need quoting.
23:36  geirha: !$@
23:36  greybot: The difference between $@ and $*: Unquoted, none at all: both equal $1 $2 .... With double quotes, "$@" is "$1" "$2" ..., while "$*" is expanded as the single argument "$1c$2c..." (where c is the first character of IFS). You almost always want "$@". The same goes for arrays: "${myarray[@]}"
23:39  queso: geirha: thanks
23:40 --- winkey is now known as all
23:41 --- all is now known as winkey
23:41  geirha: # array=( "here are" "two  elements" ); printf "[%q]" "${array[@]}"
23:41  evalbot: geirha: [here\ are][two\ \ elements]
23:42  geirha: # array=( "here are" "two  elements" ); printf "[%q]" ${array[@]}
23:42  evalbot: geirha: [here][are][two][elements]
23:42  Segaja: hi, is there a way to strip color codes from output of a program?
23:42  geirha: Yes, fix the program :P
23:43  mDuff: Segaja, what's the context? Most programs which generate color output can simply be told not to do that.
23:43  geirha: It's not easy to strip off color codes. The best is to tell the program not to out put them.
23:43  Segaja: mDuff: i don't think this one can. i haven't found an option yet
23:43  geirha: s/out put/output/
23:44  mDuff: Segaja, what does it do if the current terminal (as indicated by the TERM variable) doesn't _support_ color?
23:44  Segaja: print the color codes? i don't know
23:44  mDuff: Segaja, (if the answer isn't "not use color", it's a bug, and you can/should report it to the author)
23:46  mDuff: ...I mean, yes, there are things you can do (heck, you can tell screen to run your program, evaluate the escape sequences, and log the scrollback to disk), but that's pretty far into hackery. (If you're _really sure_ it's just color codes and not any other kind of cursor movement, that actually makes this feasible without a full-fledged terminal emulator such as screen, but still... meh)
23:48  Segaja: i'm working on disabling the colors of the program
23:48  Segaja: problem is, it is a wrapper
23:50  Segaja: solved...
23:50  Segaja: thanks for the help :)
23:51  mDuff: Not a problem -- glad you found a solution. I realize that our hesitance to provide "cheap hacks" that only work in a subset of all possible cases makes the channel less useful in some cases than it might otherwise be.
23:52  Segaja: i think it is a good policy
23:53  Segaja: the problem was i didn't found the solution directly in the arch wiki
--- Log closed Sat Dec 04 00:00:40 2010
