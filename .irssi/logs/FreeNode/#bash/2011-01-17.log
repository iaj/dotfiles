--- Log opened Mon Jan 17 00:00:47 2011
00:02  marvin2: twkm: I was looking for a dry-run-like -n; it is mentioned in the man page under -D, but no separate explanation exists. Will try it anyway, thanks.
00:06  marvin2: ...yet again a victim of Vim's restricted scope lexing.
00:07  hagabaka: there's a program (msgfilter) that lets you specify a command which it will run, and some text is sent to the command's output, but not printed to stdout. can I get this piped text without using a temp file?
00:09  hagabaka: also the command is run multiple times when msgfilter is run once, so I currently use "msgfilter tee -a file" to store the piped text, but I want to find a way to get it directly to stdout, without using temp file...
00:12  cthuluh: I'm not sure I understand, wouldn't ''msgfilter cat'' be sufficient?
00:13 --- elik_ is now known as elik
00:13  hagabaka: msgfilter outputs its own thing, which is different from what it pipes to the specified program
00:14  cthuluh: would it be difficult to show us a testcase?
00:14  hagabaka: let me try, hold on
00:18  latenite: How do I put my "ok" at a fixed position? the tabs I use vary http://pastebin.com/ah199D2N
00:19  twkm: marvin2: you won't like it.
00:19  geirha: latenite: printf '%-40s is OK\n' "$item"
00:20  latenite: geirha, nice :) is there a list of all these functions?
00:20  geirha: !printf > latenite
00:20  greybot: latenite: The printf command: http://bash-hackers.org/wiki/doku.php/commands/builtin/printf
00:23  geirha: TheBonsai: %b and %q is listed twice in !printf
00:23  latenite: site doesnt load here :(
00:24  cthuluh: strange, it does here
00:24  latenite: the url looks like it just about printf? I wonder if there is something like a list of all functions build in
00:24  latenite: http://wiki.bash-hackers.org/commands/builtin/start neither
00:25  geirha: latenite: Type ''help''
00:25  cthuluh: help \* | less
00:25  cthuluh: or man bash, of course
00:27  hagabaka: cthuluh: here's a script that behaves like msgfilter http://pastebin.com/Di05EKu6
00:27  latenite: geirha, cthuluh ahh cool thanks :)
00:28  pcard: am I missing something?   if [[ $bin_found == 0 ]]; then    works, but    if [[ ! $bin_found ]]; then     does not
00:28  geirha: thta means, if bin_found is an empty string, then
00:28  hagabaka: actually, more like http://pastebin.com/MG0arz7H
00:28  geirha: if (( ! bin_found )); then # if bin_found is 0
00:29  pcard: cthuluh: ph'nglui mglw'nafh Cthulhu R'lyeh wgah'nagl fhtagn
00:29  feydrm: He comes!
00:30  kingsley: Is there a way to list all symlinks that point *to* a file?
00:30  pcard: geirha: oh right, bah yes, difference between (( and [[   (sometimes that lapses after having spent a couple days neck deep in another language)
00:30  geirha: kingsley: No
00:30  geirha: kingsley: You have to search for all symlinks in the filesystems and see if they point to your file.
00:34  geirha: A symlink is just a string with a filename. It has no connection to whatever file it may point to, and it may also point to non-existant files.
01:07  pyther: Hi
01:08  pyther: Should I explictly issue a return statement in my function or can I use sommething like [[ "$var" ]] at the end of my function?
--- Log opened Mon Jan 17 01:10:13 2011
01:10 --- Users 540 nicks [0 ops, 0 halfops, 0 voices, 540 normal]
01:10  pyther: so [[ "$var" ]] is better than if [[ "var" ]]; then return 0; else return 1; fi
01:10  e36freak: pyther: depends on what you want to do, having that at the end is fine
01:11  e36freak: and yes
01:11 --- Channel #bash was synced in 86 seconds
01:13  falconindy: pyther: seems redundant to say return when the behavior is already there to implicitly return the value of the last command unless otherwise specified
01:13  falconindy: damn that was a mouthful
01:14  pyther: falconindy: thanks for the patch!
01:14  pyther: I'm working on cleaning up the code, that one function should make things cleaner
01:15  falconindy: no prob
01:16  falconindy: maybe i should subscribe to arch-releng >.>
01:16  e36freak: i get so much mail already
01:16  falconindy: pro tip: arch-general is for the clowns
01:16  falconindy: (and this is OT)
01:17  pyther: falconindy: pretty much
01:27  pyther: device_is_gpt "$bootpart" && local ptb="GPT" || local ptb="MBR" ... well that set ptb="GPT" if device_is_gpt returns 0, and otherwise set ptb="MBR" ?
01:30  falconindy: well ptb is a global var
01:30  falconindy: redeclaring it local creates a new instance that's only scoped to the function its declared in
01:30  pyther: falconindy: I'm trying to make it local only
01:31  falconindy: oh. good =P
01:31  pyther: I don't think I need it to be global anymore
01:31  pyther: falconindy: but that will work as I expect it?
01:31  falconindy: yes
01:31  pyther: now how about this, just curious
01:31  falconindy: alternatively you could just have the function echo GPT or MBR
01:32  pyther: [[ device_is_gpt "$bootpart" && local ptb="GPT" ]] || local ptb="MBR"
01:32  falconindy: call it get_device_part_table
01:32  falconindy: no
01:32  pyther: what does that do, how is it different?
01:32  falconindy: use { } instead of the [[ ]]
01:32  falconindy: and you'll need a ; before the closing }
01:33  falconindy: it's a syntax error is what it is
01:33  falconindy: !if
01:33  greybot: if <COMMANDS>; then <COMMANDS>; fi # http://bash-hackers.org/wiki/doku.php/syntax/ccmd/if_clause # http://mywiki.wooledge.org/BashGuide/TestsAndConditionals
01:33  e36freak: -_-
01:34  hotwings: [16:32] <falconindy> use { } instead of the [[ ]]  <-- i was told the opposite
01:34  falconindy: you were told the opposite for a different situation
01:34  hotwings: [[ whatever test ]] && { do; this; stuff; }
01:34  falconindy: and it was most likely correct in that case
01:34  e36freak: hotwings: very different situation
01:34  falconindy: device_is_gpt is a function pyther wrote. it's not a valid test flag
01:35  pyther: falconindy: is doing {device_is_gpt "$slave"; local ptb="GPT"} || local ptb="MBR" better than not using {}
01:35  hotwings: gotcha
01:35  falconindy: actually, you don't need the grouping at all
01:35  falconindy: and that ^ above doesn't do what you want
01:35  falconindy: device_is_gpt && ptb=GPT || ptb=MBR
01:36  e36freak: !pf 22 > :)
01:36  greybot: :): http://mywiki.wooledge.org/BashPitfalls#pf22 -- Don't do this! -- cmd1 && cmd2 || cmd3
01:36  hagabaka: is there a way to make sh pipe its stdin to the command in -c?
01:36  e36freak: in this case, doesn't matter, but bad form
01:36  falconindy: its fine form
01:36  e36freak: hagabaka: sh or bash?
01:36  falconindy: im not using i++
01:36  hagabaka: can sh do it?
01:37  hagabaka: hmm weird
01:37  falconindy: e36freak: find me an example of a variable declaration failing and i'll go rewrite myself a few dozen scripts ;P
01:38  e36freak: falconindy: is why i said that in this case, it doesn't matter
01:38 * falconindy shakes a fist
01:38 * e36freak returns fist shaking
01:41  hagabaka: so when I do echo 'foo' | sh 'cat > test', cat does receive 'foo', but when another program is running sh and piping to it, it doesn't work: http://pastebin.com/s8a3CW14
01:42  e36freak: !faq complex
01:42  greybot: http://mywiki.wooledge.org/BashFAQ/050 -- I'm trying to put a command in a variable, but the complex cases always fail!
01:43  hagabaka: but I'm not getting any errors either...
01:48  vkues: If computers were smart enough to always give proper error messages, they would not have to.
01:49  vkues: $@ needs to be double-quoted. (which does not mean that this would fix it)
01:50  hagabaka: ah, I'll just put the command in its own script then. that script is actually a 'mock' of another program not written by me which accepts a command line to run
01:51  vkues: that's maybe more complicated (and potentially more silly) than you assume
01:52  vkues: all kinds of evaluations might interfere
01:53  hagabaka: it does work with commands without ' ' (I assume that's the problem), like my mock program
01:54  vkues: Come on, you did not test it with all other possible characters? :)
02:00  MrEntropy: yo
02:01  MrEntropy: if i execute "bash -c "while [ 1 ]; do sleep 1; done"" (just as an example), how do I kill it nicely? kill -2 (SIGINT) has no effect
02:06  dark: MrEntropy, can't you kill it by storing the pid of the bash proccess, and giving it kill -9?
02:06  e36freak: !uuok
02:06  greybot: Unsafe Use of Kill: kill -9 sends SIGKILL to a process which is the exact same thing as normal kill (SIGTERM), except that it prevents the process from cleaning up after itself. You do NOT want to use it. See http://partmaps.org/era/unix/award.html#uuk9letter
02:06  dark: i don't know what happens with the sleep process
02:06  MrEntropy: dark, you can, but that's not nice =)
02:06  e36freak: MrEntropy: try kill -1 (SIGHUP)
02:06  jordanm: 2 of the 3 referrences for that on the wiki were dead
02:06  e36freak: also, just use "while true; do"
02:07  MrEntropy: e36freak, yep, HUP works
02:07  dark: i think while true will run /bin/true. i suppose while [ 1 ]; will not run /usr/bin/\[ but the [ builtin
02:08  vkues: dark: don't think.
02:08  vkues: dark: also, use :
02:08  jordanm: I just had a discussion on another channel about it as well. I would like to see/read a real scenerio of a SIGKILL actually causing some kind of data loss or etc
02:08  e36freak: heh
02:09  vkues: jordanm: do you know these tools that create pidfiles?
02:09  dark: ok, true is a shell builtin
02:09  vkues: jordanm: like what dark earlier suggested?
02:10  jordanm: vkues: like in any situation where you have a proc not responding to a SIGTERM
02:10  dark: jordanm, i think you can't kill -9 postgresql
02:10  jordanm: vkues: an no, I would never know the code of the applications giving the procs
02:10 --- Bryanstein_ is now known as Bryanstein
02:10  falconindy: jordanm: create a file in an editor. write a line. save the file. write another line. kill -9 the editor
02:10  falconindy: your file isn't saved.
02:10  jordanm: dark: I have seen it done with mysql lots of times. I have seen killed queries corrupt tables, but never a SIGKILL
02:10  vkues: jordanm: I am confused since I don't understand how what you said related to what I said :)
02:11  falconindy: vim will save a file on -15
02:11  vkues: jordanm: I just wanted to give you a trivial example of a program that removes its pidfile when it's gracefully ended, leaving a useless and misleading pidfile when -9-killed.
02:11  jordanm: vkues: then I suppose I didn't understand your questions
02:11  vkues: jordanm: no worries, i'll find the answers online
02:12  jordanm: vkues: I understand now, that is good
02:12  vkues: :)
02:12  dark: oh, i used to have scripts for removing firefox pidfiles (or something like that. like locks..)
02:13  vkues: haha, i read "locks" as "rocks" and though dark compares himself to Sisyphus :)
02:13  vkues: thought*
02:13  dark: like, if it crashes, it won't remove pidfiles either
02:15  dark: vkues, oh, read about him. for some time i removed it manually, walking the filesystem until there.. yeah, looks like sisyphus..
02:15  dark: computer are supposed to do those things
02:17  vkues: removing [rl]ocks over and over :)
--- Log closed Mon Jan 17 02:52:47 2011
--- Log opened Mon Jan 17 02:58:06 2011
02:58 --- Users 531 nicks [0 ops, 0 halfops, 0 voices, 531 normal]
02:59 --- Channel #bash was synced in 86 seconds
03:47  latenite: Hi, If I wanted to create a file with echo and this content http://pastebin.com/yT8Y25vF. How would I get around escaping all the quotes? thanks
03:49  gnomon: latenite, are you familiar with HERE documents?
03:49  gnomon: latenite, you might want to read over http://www.gnu.org/software/bash/manual/html_node/Redirections.html
03:49  e36freak: !<< >latenight
03:49  greybot: latenight: Here documents. cat <<EOF followed by several lines of text, followed by the literal string EOF on a new line, NOT indented. The portion between the EOFs is passed to the command as standard input. If 'EOF' is 'quoted', substitutions WON'T be done; otherwise they are. See <<- for the indented variety.
03:49  latenite: gnomon, a little ... cat < EOF text EOF
03:50  e36freak: cat <<EOF
03:50  latenite: I realy dont use them taht much...
03:51  e36freak: obviously... this is the perfect case for one
03:51  gnomon: latenite, HERE documents are well suited to including large blocks of literal text in scripts.  If you end up using lots of them, though, it might be worth reconsidering your program design such that the static resources are split out into their own component files.
03:52  e36freak: latenite: also, """ is used for multi-line quoting. but a heredoc would be the best thing for this
03:53  e36freak: or maybe i'm mixing up languages
03:53  e36freak: yeah, i am. still, a heredoc
03:55  latenite: gnomon, e36freak perfect thanks a lot  http://pastebin.com/0XLGK2Hc
03:56  latenite: I should realy get inti using this more often :) Thanks again :D
03:56  gnomon: latenite, with the cat<<-HERE construction, you could even indent your literal block with tabs, if you cared to do so.
03:56  gnomon: latenite, you're welcome!
03:56  gnomon: Glad you found a solution you like.
03:58  latenite: :D yes, especialy because its so easy in the end.
04:13  enthdegree: I have to append the output of a command to the contents of a file and then pipe all that into a command. How do I do that?
04:13  gnomon: { command1 ; cat file } | command2
04:14  gnomon: Or rather, if you mean that you have to mutate the file in place: command1 >> file && command2 < file
04:14  enthdegree: wow amazing!
04:14  enthdegree: Ok, I do not want to edit the file, I will use the first
04:14  enthdegree: thank you
04:15  gnomon: enthdegree, quite welcome!
04:15  e36freak: (the latter is preferred)
04:16  gnomon: e36freak, not if you don't want to munge up your file it's not.
04:16  e36freak: eh
04:16  e36freak: munge?
04:17  enthdegree: I don't want to screw up the file.
04:17  e36freak: neither should. and you should never have to use cat on one file
04:18  e36freak: ohh
04:18  e36freak: enthdegree: you don't want the stuff to be appended to the file permanently?
04:20  humpty: cat <(command1) file | command2
04:20  e36freak: yeah
04:22  tEtra: are process substitutions parallel execution safe?
04:22  enthdegree: well, I am making a script for a launcher using dmenu: { cat ~/.dm_hist ; dmenu_path ; } |  ~/.bin/dmenu -b -hist ~/.dm_hist
04:23  e36freak: cat ~/.dm_hist <(dmenu_path) | ~/.bin/dmenu...
04:24  gnomon: tEtra, I would expect that depends on what those processes are doing.
04:24 --- emma is now known as em
04:25  tEtra: it's the fifo's I'm worries about
04:25  tEtra: will bash auto-increment the /dev/fd/N to not have a collision?
04:27  gnomon: tEtra, can you be a bit more concrete about your question?
04:27  tEtra: sure
04:28  tEtra: say script (A) is running, and is using a procsub that may last a while.
04:29  tEtra: another instance of script (A) is launched, will their data colloide in the fifo?
04:30  tEtra: typically bash uses /dev/fd/{62,63} for the fifo
04:30  e36freak: !faq instance > tEtra (if that's what you're worried about)
04:30  greybot: tEtra (if that's what you're worried about): http://mywiki.wooledge.org/BashFAQ/045 -- How can I ensure that only one instance of a script is running at a time (mutual exclusion)?
04:30  tEtra: wondering if two scripts will step on each other
04:30  tEtra: no, I NEED it to run multiple times
04:32  tEtra: bash must have some way to make sure that only one process can have it open at a time, just wondering if anyone here knew the exact behavior. I can make up a test easy enough...
04:33  humpty: weirder, but full bash : printf '%s\n' "$(<file)" "$(command1)" | command2
04:34  e36freak: tEtra: not sure
04:34  tEtra: I'll concoct a test and report back...
04:35  tEtra: humpty: what's that?
04:36  humpty: the same, without cat, and without fifo
04:39  tEtra: here's my usecase: http://pastebin.com/WjRnCEJz
04:41  humpty: oh, I was still about a previous discussion, sorry.
04:44  e36freak: !ls > tEtra
04:44  greybot: tEtra: ls shows you a representation of files. They are NOT file names (for simple names, they mostly happen to be equivalent). Do NOT try to parse it. http://mywiki.wooledge.org/ParsingLs
04:44  e36freak: tEtra: ls _never_ belongs in a script
04:44  e36freak: in fact, "for foo in $(..)" is always bad form as well
04:45  tEtra: feel free to edit the pastebin entry :)
04:45  e36freak: tEtra: what exactly is it supposed to do?
04:45  tEtra: ssh's to ${box}, and gets a list of uuids and corresponding /dev/blah entries
04:46  humpty: for u in /dev/disk/by-uuid/*; do echo "$(readlink -f "$u"):${u##*/}"; done
04:46  tEtra: it works fine, just concerned about fifo corruption
04:48  falconindy: fifos are named pipes. i don't see any fifos here. why are you worried about this supposed "corruption"
04:48  tEtra: humpty: well, apparently 'for' is considered bad form...
04:48  falconindy: tEtra: no, 'for x in $()' can be bad form
04:48  Kerrick: Is there a more elegant way to do "if ls $fbase* > /dev/null 2>&1?
04:49  falconindy: the key being the command substituion, which is prone to word splitting
04:49  e36freak: !ls > Kerrick
04:49  greybot: Kerrick: ls shows you a representation of files. They are NOT file names (for simple names, they mostly happen to be equivalent). Do NOT try to parse it. http://mywiki.wooledge.org/ParsingLs
04:49  tEtra: a process substitution uses /dev/fd/63. if multiple scripts ran simultaneously, I was asking if the fifo may have data from multiple instances in it.
04:50  e36freak: -_-
04:50  e36freak: no
04:50  falconindy: no, it uses the next available
04:50  tEtra: sweet - that answers my question
04:50  e36freak: a fifo is a named pipe, in which case it could be an issue
04:50  tEtra: thanks
04:50  Kerrick: e36freak, I am not parsing the output of ls
04:50  e36freak: Kerrick: you want to check if a directory has a file beginning with "$fbase" ?
04:50  Kerrick: Yes
04:51  e36freak: !faq empty > Kerrick
04:51  greybot: Kerrick: http://mywiki.wooledge.org/BashFAQ/004 -- How can I check whether a directory is empty or not?  How do I check for any *.mpg files?
04:51  Kerrick: I am using the return status of ls for this purpose, however, I suspect there is an easier method
04:51  Kerrick: ok
04:51  Kerrick: thanks
04:54  Kerrick: e36freak, when I assign a value to fbase, will that value be seen by a subshell?
04:54  e36freak: sure
04:55  Kerrick: so export only affects whether child processes see the environment variables, and does not affect whether subshells see them?
04:56  Kerrick: (I am just asking for clarification on this point since I don't entirely understand the export statement's purpose)
04:56  tEtra: Kerrick: an exported var is in the global env. another script entirely can see it.
04:56  tEtra: subshells inherit from the parent
04:57  Kerrick: ok, thanks tEtra
04:57  e36freak: # touch foobar; fbase=foo; if ( shopt -s nullglob; f=( $fbase* ); ((! ${#f[@]}))); then echo "exists"; fi
04:57  evalbot: e36freak: no output
04:57  e36freak: # touch foobar; fbase=bar; if ( shopt -s nullglob; f=( $fbase* ); ((! ${#f[@]}))); then echo "exists"; fi
04:57  evalbot: e36freak: no output within the time limit
04:57  e36freak: bah
04:57  e36freak: but yes
04:59  e36freak: also that should echo "doesn't exist", but you get the point
05:03  Kerrick: So does f=( $fbase* ) assign the name of the first file matching $fbase* that is found to f?
05:03  e36freak: it makes an array of all of the files matching it
05:03  e36freak: f is an array
05:04  Kerrick: I am not familiar with those in the context of bash, but OK
05:04  Kerrick: I thought that bash represented nearly all data as strings
05:05  e36freak: !array
05:05  greybot: An array maps numbers to strings. Bash 4 also has associative arrays (maps strings to strings). See http://mywiki.wooledge.org/BashSheet#Arrays
05:05  e36freak: # arr=( foo bar baz ); echo "${arr[@]}"; echo "${arr[0]}"
05:05  evalbot: e36freak: foo bar baz
05:05  evalbot: e36freak: foo
05:07  e36freak: you could also use if ( set -- $fbase*; (( ! $# ))); then
05:07  e36freak: (with shopt -s nullglob)
05:07  Kerrick: e36freak, OK, but I am still trying to understand  the operation of the first suggestion :)
05:08  Kerrick: # arr = ( ); echo "${arr[@]}"
05:08  evalbot: Kerrick: bash: syntax error near unexpected token `('
05:08  Kerrick: # arr=( ); echo "${arr[@]}"
05:08  evalbot: Kerrick: no output
05:08  Kerrick: # arr=( ); echo "${#arr[@]}"
05:08  evalbot: Kerrick: 0
05:09  Kerrick: # arr=( a b c 1 2 3 that\'s how easy ); echo "${#arr[@]}"
05:09  evalbot: Kerrick: 9
05:09  e36freak: !((
05:09  greybot: ((...)) is an arithmetic command, which returns an exit status of 0 if the expression is nonzero, or 1 if the expression is zero. Also used as a synonym for "let", if side effects (assignments) are needed. See <http://mywiki.wooledge.org/ArithmeticExpression>.
05:10  Kerrick: I was familiar with ((...)) but only to do C-like operations. I assume that ((!...)) inverts the behavior?
05:10  e36freak: ofc
05:11  e36freak: # if ((1)); then echo "foo"; fi
05:11  evalbot: e36freak: foo
05:11  e36freak: # if ((0)); then echo "foo"; fi
05:11  evalbot: e36freak: no output
05:11  e36freak: # if ((! 1)); then echo "foo"; fi
05:11  evalbot: e36freak: no output
05:11  e36freak: # if ((! 0)); then echo "foo"; fi
05:11  evalbot: e36freak: foo
05:12  Kerrick: e36freak, OK, I understand how the command works; thanks!
05:12  e36freak: heh
05:13  jt_exist: hi, I this might be OT but I'm stuck
05:13  Kerrick: I started my Linear Algebra homework 2 hours ago and I still haven't gotten the script to compile my LaTeX+Asymptote files working
05:14  e36freak: jt_exist: ...go on
05:14  jt_exist: my user login shell is ksh, and whenever he log in it spawned and extra session
05:14  jt_exist: anyway I can track which script/apps causes it?
05:15  Kerrick: jt_exist, look inside whatever rc file ksh uses
05:16  Kerrick: jt_exist, so you mean that before he logs in the users command does not list his name and after he logs in the users command lists his name twice?
05:17  jt_exist: Kerrick: if I su - username, and the ps -ef | grep username
05:17  jt_exist: it has two ksh and -ksh
05:18  jt_exist: perhaps I need to fpase
05:18  Kerrick: By the way e36freak, does the above solution to my problem have any advantages over just doing the "if ls..."?
05:18  jt_exist: http://fpaste.org/OdE3/
05:18  Kerrick: Aside from possibly being more efficient?
05:18  e36freak: Kerrick: ls doesn't belong in scripts. ever.
05:19  e36freak: Kerrick: it handles special characters oddly, and different implementations do things differently
05:19  al_nz1: i guess slightly OT but any one here good with sed?
05:19  e36freak: you can never count on it to be consistent
05:19  e36freak: jt_exist: well, is he also logged in?
05:19  Kerrick: e36freak, it has a return code though, and return codes are generally only useful for scripting as I understand it
05:20  jt_exist: e36freak: nope
05:20  e36freak: hm
05:20  jt_exist: it appear whenever I try to su - his_username or he login directly
05:20  e36freak: Kerrick: everything has a return code
05:20  e36freak: doesn't mean anything
05:21  Kerrick: e36freak, I mean that ls has a meaningful return code
05:21  e36freak: ok?
05:21  e36freak: can it be used? sure
05:21  e36freak: should it? no
05:21  Kerrick: ok
05:21  tmr: al_nz1, /join ##sed
05:21  Kerrick: jt_exist, You're not counting the one from the grep command, right?
05:22  Kerrick: wait I should've checked your fpaste nvm
05:22  al_nz1: tmr: trying there too but a bit dead there atm
05:22  jt_exist: Kerrick: nope, my concern is why the -ksh comes out it a child of ksh
05:22  e36freak: ohh
05:22  e36freak: probably because of the pipe
05:24  jt_exist: e36freak: it caused by some ksh -c or something whenever he login but to track it down is the hell for me
05:25  Kerrick: jt_exist, you could kill it and see what happens, IDK otherwise
05:25  Kerrick: and that may be a bad idea
05:26  jt_exist: Kerrick: we'll if I execute exit it goes to parent shell(ksh) though it solved the issue temporarily, i need to know the root cause
05:27  e36freak: ohh, odd
05:27  e36freak: check the rc files
05:27  e36freak: s/rc/dot/
05:28  darkkrai: can someone help me with a small problem with my dynamic motd bash script? http://pastesite.com/21203
05:28  e36freak: !uuoc
05:28  darkkrai: I want it to display the current user, which was poorly attempted by my if/else statements
05:28  greybot: Useless Use of Cat (cat foo | grep bar). See http://partmaps.org/era/unix/award.html
05:28  jt_exist: I did, but the usual .kshrc/profile/login is calling many more .sh so going through one by one is hell
05:28  darkkrai: it ony displays the root user
05:29  e36freak: darkkrai: 2 greps and an awk? ew
05:29  e36freak: !`
05:29  greybot: The backquote (`) is used in the old-style command substitution, e.g. foo=`command`. This syntax is deprecated in favor of foo=$(command). Backslash handling inside $() is less surprising, and $() is easier to nest. See http://mywiki.wooledge.org/BashFAQ/082
05:29  e36freak: darkkrai: and use a heredoc at the end
05:30  darkkrai: i'll fix those things when I get the first part fixed :P
05:30  e36freak: !varcaps
05:30  greybot: By convention, we capitalize environment variables (PAGER, EDITOR, SHELL, ...) and internal shell variables (BASH_VERSION, RANDOM, ...). All other variable names should contain at least one lowercase letter. Remember that variable names are case-sensitive; this convention avoids accidentally overriding environmental and internal variables.
05:30  darkkrai: i see
05:31  quotemstr: Is there a way to get completion for cdable_vars?
05:31  tmr: !expr
05:31  greybot: 'expr' is a program used in ancient shell code to do math. In Posix shells like bash, use $(( expression )). In bash and ksh93, you can also use '(( expression ))' or 'let expression' if you don't need to use the result in an expansion.
05:31  quotemstr: Hey, expr can come in handy.
05:31  quotemstr: You don't need a shift key to type it.
05:33  tmr: quotemstr, I'm probably lazier than you then because I avoid stuff that seemingly can break by itself and needs fixing later.
05:34  quotemstr: tmr: Well, I'm a crazy man and use Cygwin. Don't listen to me. :-)
05:34  quotemstr: By the way: whoever decided to add COMP_POINT and friends in bash 4, thanks!
05:37  e36freak: darkkrai: my awk-fu is weak, but this is much improved
05:38  e36freak: http://pastesite.com/21206
05:38  darkkrai: thank you
05:38  darkkrai: I'll study the changes
05:39  darkkrai: and use those links
05:39  darkkrai: :)
05:39  darkkrai: i really want to learn bash
05:39  darkkrai: its very versatile and useful
05:39  e36freak: also
05:40  e36freak: http://pastesite.com/21207 forgot to escape the *
05:40  darkkrai: ah
05:40  darkkrai: thanks
05:40  e36freak: what wasn't working before? i think you just were missing whitespace inside [[..]]
05:40  darkkrai: btw, my dynamic motd works now
05:40  darkkrai: [[darkkrai: command not found
05:40  darkkrai: yeah
05:40  darkkrai: probably that
05:41  e36freak: but, for example, line 34
05:41  e36freak: that could be done entirely with awk
05:49  Kerrick: darkkrai, bash will eat your soul
05:49  Kerrick: but if you're fine with that, it can be very useful
05:49  darkkrai: :P
05:49  e36freak: it has eaten mine, that's fo sho
05:51  darkkrai: e36freak: I didnt know you used arch either :P
05:51  darkkrai: hehe
05:52  darkkrai: *too
05:54  e36freak: darkkrai: for years
05:54  darkkrai: hehe, i love it
05:55  darkkrai: iv'e used about every known distro
05:55  darkkrai: havent switched from arch since :)
05:55  Kerrick: Arch is another one of those things that will eat your soul but is very useful
05:56  Kerrick: Many things in the Linux universe are that way.
06:01  darkkrai: yeah
06:01  darkkrai: Iv'e spent a lot of time customizing this :)
06:01  MTecknology: Kerrick: no they're not
06:01 * MTecknology reads more than one line now
06:02  MTecknology: oh- ya, now i agree
06:08  Kerrick: How can I invert the behavior of the if statement when used with a command (i.e. execute a block only if the command fails)
06:09  MTecknology: Kerrick: if ! grep; then
06:10  Kerrick: MTecknology, thanks
06:23  Kerrick: Huzzah, my script to compile LaTeX files works. Thanks everyone.
06:23  e36freak: woo
06:23  Kerrick: Now I can start my Linear Algebra homework. Woo.
06:26 --- Guest67489 is now known as hemanth
06:26  e36freak: oh boy
06:27  MTecknology: Kerrick: I don't miss school- and i haven't even started to pay it off yet
06:28  Kerrick: I know. It's made all the more fun by the fact that I'm starting it 2 hours later than I wanted to because I had the tenacity to not want to type 3 commands when I compile the LaTeX files, then I had the tenacity to not accept a cheap hack
06:28  Kerrick: Although, overall I'd say there are no hard feelings
06:28  Kerrick: I learned something
06:28  Kerrick: So it's all good
06:28  Kerrick: MTecknology, I'm loving every minute of it, actually
06:30  Kerrick: I think it was Linux that did it to me, actually
06:30  Kerrick: Linux taught me patience
06:31  Kerrick: Now loads of homework are a breeze
06:31  Kerrick: Compared to e.g. getting Xorg running on a Arch compy that absolutely refuses to work for some unknown reason
06:32  e36freak: meh, pebkac :P
06:33  SiegeX: !$*
06:33  greybot: The difference between $@ and $*: Unquoted, none at all: both equal $1 $2 .... With double quotes, "$@" is "$1" "$2" ..., while "$*" is expanded as the single argument "$1c$2c..." (where c is the first character of IFS). You almost always want "$@". The same goes for arrays: "${myarray[@]}"
06:34  MTecknology: I remember once wanting $* but i can't remember why..
06:34  e36freak: i've used it, probably for intentional wordsplitting
06:37  e36freak: # arr=( foo "bar baz" ); IFS=,; echo "${arr[*]}"
06:37  evalbot: e36freak: foo,bar baz
06:37  e36freak: turn an array into CSV
06:38  e36freak: or a more common case, ``case "$*" in *u* ) update;; *v* verbosity=1;; esac'' or something
06:39  e36freak: that only works for certain things though
06:50  neoh-: ® Ia Sa Vedem Cade plm Sau Nu ®
06:50  neoh-: run plm
07:21  xinming_: Is there a easy way to get a 9:23:33 string to a epoch for today please?
07:24  e36freak: man date
07:25  xinming_: hmm, Ok, thanks
07:58  DND: hi. im trying to run this command: time wget --load-cookies=cookies.txt http://192.168.5.100:8003/en/myaccount-e/ > 123.txt but it not writing the 'time' result into the txt file
07:58  e36freak: !faq time
07:58  greybot: http://mywiki.wooledge.org/BashFAQ/032 -- How can I redirect the output of 'time' to a variable or file?
08:00  DND: !faq milliseconds
08:00  greybot: DND: No matches found at http://mywiki.wooledge.org/BashFAQ
08:00  e36freak: DND: man time to get different formats
08:01  DND: there's no milliseconds on man time. probably need to do math?
08:01  pgas: IIRC the command time tends to be different from the built in time
08:01  e36freak: pgas: ahh, good point
08:02  DND: no i just need to time the wget command
08:02  DND: im not doing 'date'
08:02  twkm: why do you feel time would output to stdout?
08:02  DND: time elapsed to be specific
08:03  pgas: there is still a "time" keyword built in bash and a time command. the faq tells how to capture the output of the builtin
08:03  e36freak: # TIMEFORMAT=%E time echo "foo"
08:03  e36freak: # TIMEFORMAT=%E; time echo "foo"
08:03  evalbot: e36freak: bash: time: command not found
08:03  evalbot: e36freak: no output within the time limit
08:03  e36freak: -_-
08:03  e36freak: # TIMEFORMAT="%E"; time echo "foo"
08:03  evalbot: e36freak: foo
08:03  evalbot: e36freak: 0.004
08:03  e36freak: there is also $SECONDS
08:04  DND: now for normal time, it showing real 0m13.002s
08:04  e36freak: depending on how specific you need to be
08:04  DND: i just wanted it to just 13002 milliseconds
08:04  twkm: with the intertubes involved it would be hilarious to even care about ms.
08:04  e36freak: sed it, or PE it, after capturing the output
--- Log closed Mon Jan 17 08:39:29 2011
--- Log opened Mon Jan 17 08:44:39 2011
08:44 --- Users 521 nicks [0 ops, 0 halfops, 0 voices, 521 normal]
08:45 --- Channel #bash was synced in 85 seconds
--- Log opened Mon Jan 17 08:52:00 2011
08:52 --- Users 522 nicks [0 ops, 0 halfops, 0 voices, 522 normal]
08:53 --- Channel #bash was synced in 98 seconds
09:22 --- schafha is now known as flobian
09:22  nesusvet: hello everyone, i have one quick question, could you help me please. I have some directory with binary files within, and i have second directory with same changes. Which program to use in order to make patch, xdelta(3) or diff. Please help me to choose.
09:23  nesusvet: Sorry for my poor english.
09:24  geirha: Diff for binary files? Just check if files differ and copy the whole files
09:24  e36freak: you can't patch a binary file...
09:25  nesusvet: e36freak,  you can't patch a binary file... do mean using diff?
09:25  e36freak: you patch source code
09:25  e36freak: not the binary
09:27  e36freak: if you just wanna see if they differ, use cmp to be exact or a shasum to be a little faster and copy the whole file
09:27  nesusvet: e36freak,  xdelta don't help me in this case?
09:28  e36freak: haven't used, but i doubt it
09:28  e36freak: not really a bash question anyway
09:28  nesusvet: e36freak, thanks anyway.
09:29  e36freak: ask the channel for your OS
09:42  Spabby: good morning, I have a script that I want to run from cron that takes the number of apache processes and writes to a textfile regularly, I want to prepend the date and time to the file (timestamp), can someone help me out please? I am very new to this! my current command is simply ps -C httpd | wc >> data/httpdproc
09:46  e36freak: !pm > Spabby
09:46  greybot: Spabby: http://mywiki.wooledge.org/ProcessManagement
09:47  Spabby: sorry, maybe I didn't ask a great question, I can create the file, I can run as a bash script, I can setup the cron job all fine, however I am struggling to simply prepend the date to my output when running the following "ps -C httpd | wc >> data/httpdproc"
09:48  yitz_: ps -C httpd | wc >> data/httpdproc"$(date)"
09:48  e36freak: printf "%s " "$(date +"%D %T")" >> data/httpdproc; ps -C httpd | wc >> data/httpdproc
09:48  e36freak: depending on if you want the date to be in the filename or in the file
09:49  Spabby: inline in the file, current output is "12      48     358" or similar, but I want "<timestamp>     12      48     358" if possible please
09:50  yitz_: { printf "%s " "$(date +"%D %T")" ; ps -C httpd | wc ; } >> data/httpdproc
09:50  e36freak: yitz_: yeah, that too
09:50  e36freak: also, need full path in crontab
09:51  Spabby: brilliant thanks
10:14  miltio: hi
10:14  miltio: short question
10:15  miltio: df -h > output
10:15  miltio: inside a script gives a blank file
10:16  Kerrick: miltio, works for me
10:16  miltio: hmm
10:16  miltio: just discovered it's a csh....
10:16  miltio: off topic?
10:17  Kerrick: Perhaps that's your issue; IDK
10:17  tmr: Very.
10:17  miltio: tmr:  very ot?
10:17  Kerrick: Try creating a script with just a shebang and that command and see if it works
10:17  Kerrick: Otherwise IDK
10:17  tmr: Very very off topic.
10:17  tmr: !csh
10:17  greybot: http://www.faqs.org/faqs/unix-faq/shell/csh-whynot/
10:18  lhunath: miltio: chsh and fix your login shell.
10:18  miltio: it's an old script using csh
10:19  miltio: I can convert it to sh
10:19  lhunath: don't bother.
10:19  lhunath: rewrite it in bash.
10:19  miltio: yeah
10:19  lhunath: kindly note that sh is NOT bash.
10:20  miltio: sure, I mean bash, just a typo
10:22  lhunath: well, don't typo when you write hashbangs.
10:32 --- mattisfreenode is now known as ma10s
10:45  groundnuty: heym, I have a file where are listed paths to files - with wierd utf chars - how do I iterate over each like containing the path for exampel copy that file somewhere?
10:46  pgas: !faq 1 > groundnuty
10:46  greybot: groundnuty: http://mywiki.wooledge.org/BashFAQ/001 -- How can I read a file (data stream, variable) line-by-line (and/or field-by-field)?
10:50  groundnuty: pgas: thx, now I have all my musci from the playlsit copied to my phone :)
11:09  lexoplex: How do you sensibly test if there's not any file that matches *.xml?  if [[ ! -e ./*.xml ]]  doesn't seem to do the right thing.
11:10  lexoplex: Do you have to use find or even ls for that?
11:10  pgas: !faq empty
11:10  greybot: http://mywiki.wooledge.org/BashFAQ/004 -- How can I check whether a directory is empty or not?  How do I check for any *.mpg files?
11:11  lexoplex: pgas: Ah, I missed that one. Thanks.
11:13  igi: How about this:  if [ -n "`ls *.xxxx 2>/dev/null`" ]
11:14  lexoplex: The last paragraph of that FAQ is what I actually want.
11:17  FranciscoD: hi, I have a file : text ... PATTERN1SENTENCE.... text1 .. PATTERN2SENTENCE ... text2 ... PATTERN3SENTENCE..text
11:17  FranciscoD: how can I extract text1 and text2 into two separate files from this?
11:17  igi: if ls *.xml 2>&/dev/null; then
11:17  igi: I think this one is more better
11:21  kerozene: hey..um. starting with shell scripting and wondered if someone could look over a first attempt. I want to know if there's anything wrongheaded about it before I test
11:21  kerozene: http://bash.pastebin.com/HepvDuR0
11:23  Naib: kerozene. don't use uppercase for variables
11:24  kerozene: why's that
11:24  Naib: !upper
11:24  Naib: mmm
11:24  koala_man: it interfers with existing variables. USER is a shell variable for example
11:24  kerozene: woops :)
11:24  kerozene: ok thanks
11:26  kerozene: anything else there?
11:27  igi: add double-quota between variables  is more safer.
11:28  FranciscoD: anyone have any ideas on my problem statement :) ?
11:28  lhunath: !ls
11:28  greybot: ls shows you a representation of files. They are NOT file names (for simple names, they mostly happen to be equivalent). Do NOT try to parse it. http://mywiki.wooledge.org/ParsingLs
11:28  kerozene: igi: I don't understand. can you give an example?
11:29  pgas: kerozene: he means put " " around all your "$var"
11:29  kerozene: ok
11:29  koala_man: kerozene: you don't quote filenames, and you repeat things like "/j/home/$USER/web/$VHOSTGROUP/$DOMAIN/" many times. passwords passed as parameters can be picked up by other users from ps. you don't have much in terms of error checking, and you don't validate input. you read passwords in cleartext rather than hidden
11:29  kerozene: oh man
11:29  koala_man: still, it's really not that bad
11:30  kerozene: I avoided using arguments to try to keep passwords out of the history. is using 'read' not safe?
11:31  koala_man: read -s won't echo it on the terminal
11:31  pgas: FranciscoD: #awk or ##sed can probably help you better, though I suggest you pastebin a real example of want you want (input and output) because working on fake data will get you the wrong solutions and willl bore the people who try to help you.
11:31  kerozene: thanks
11:31  koala_man: and you should have some error checking so that the user can write the wrong password without breaking things
11:32  igi: if [ -f $DOMAIN ]  : will  get error when DOMAIN content space
11:33  kerozene: I'll edit some and come back..
11:40  lhunath: !varcap
11:40  greybot: By convention, we capitalize environment variables (PAGER, EDITOR, ..) and internal shell variables (SHELL, BASH_VERSION, ..). All other variable names should be lower case. Remember that variable names are case-sensitive; this convention avoids accidentally overriding environmental and internal variables.
11:42  kerozene: thanks lhunath
11:43  FranciscoD: pgas: http://fpaste.org/PyIt/
11:44  kerozene: so with double quoting vars, is this correct: mysql -uroot -p"$mypass"
11:44  FranciscoD: pgas: linesIneed1 and linesIneed2 are patterns too, and can be grepped. But I need them in two separate files
11:45  kerozene: and: useradd -d /home/"$user" ?
11:46  pgas: FranciscoD: http://awk.freeshell.org/AwkTips#toc4
11:46  FranciscoD: pgas: reading
11:46  kerozene: that would be useradd -d "/home/$user" i guess
11:46  FranciscoD: pgas: I didn't know that much awk , heh
11:47  lhunath: what's wrong with mysql -uroot -p ?
11:47  kerozene: lhunath: will it prompt?
11:47  lhunath: is that a problem?
11:47  lhunath: yes, it will
11:47  kerozene: ok, great
11:48  lhunath: passing the password as an argument is a bad idea.
11:48  kerozene: yeah, I thought it all had to be encapsulated in the script
11:48  kerozene: if it prompts then that's perfect
11:49  igi: "/home/$user" and /home/"$user" both right. First one look more nicely..
11:52  kerozene: good to know
11:52  FranciscoD: pgas: would you give me a nice awk tut link please? maybe its time i learnt it
11:54  tmr: FranciscoD, see topic in #awk
11:54  kerozene: ok, I've tried to address the issues mentioned so far: http://bash.pastebin.com/1sjb5HDX
11:54  pgas: http://www.gnu.org/manual/gawk/html_node/Getting-Started.html#Getting-Started
11:54  kerozene: apart from validation and error checking
11:54  FranciscoD: alright. thanks tmr pgas and everyone else.
11:55  kerozene: this is only meant for use by myself as root. do I need validation?
11:57  prince_jammys: the egrep line is a problem
11:57  prince_jammys: oh, -w.
11:59  kerozene: should probably add a2ensite in there somewhere
12:00  kerozene: but I'm interested in the error checking idea
12:02  kerozene: like if CREATE DATABASE fails....how would I trap that?
12:03  igi: $? was good for checking error
12:04  kerozene: guess I need to check the mysql manual to see what it would return
12:04  erUSUL: !ifgrep
12:04  greybot: if grep -q word "$file"; then blah blah; fi DO NOT use [[ or [ or ` or $() or any other crap. "if" expects a command. "grep" is a command. "[" is too. You don't need both, just the grep works because grep returns true (0) if a match is found, but not otherwise.
12:05  kerozene: aha
12:05  erUSUL: command ; if [[ $? = 0 ]];   is also redundant ...
12:07  lhunath: ![$?
12:07  greybot: Don't do this: mycommand; if [ $? -eq 0 ] -- You're running the [ command and checking its exit code to test whether "mycommand"'s exit code is 0. That's a pointless operation, test mycommand directly: if mycommand
12:17  rubikcube_work: Hi, I know that this is not bash, but what's wrong with "find . -mtime -2h" if I want to find files changed within the last two hours?
12:18  igi: -mtime n : File's data was last modified n*24 hours ago
12:18  erUSUL: rubikcube_work: according to find man page mtime works on 24h periods ... you need -newer
12:18  lhunath: just -2
12:18  pgas: does your manual page says something about passing -2h as an argument?
12:19  lhunath: ah right, 24h periods, not hour periods
12:19  pgas: your find might have -mmin
12:19  rubikcube_work: my man page says: "-mtime n[smhdw] ..." (on OS X)
12:20  pgas: the maybe it works
12:20  erUSUL: rubikcube_work: then drop the minus sign?
12:21  rubikcube_work: erUSUL: wouldn't that only match the exact time?
12:22  pgas: so what's wrong with your command?
12:23  pgas: (Except that it's not  portable)
12:25  rubikcube_work: it gives me a lot of files that were not changed in the given period
12:27  pgas: are you sure? didn you check the timestamp of these files?
12:29  rubikcube_work: tested: http://dpaste.org/OHDM/
12:30  pgas: looks ok to me
12:31  igi: me too
12:31  rubikcube_work: why? obviously the test files are older than 2 minutes
12:32  Fatal: I thought mtime was n*hours
12:33  erUSUL: not in OSX it seems
12:33  Fatal: aha
12:33  igi:  older than 2 minutes, Yes, but what you used is "-2h"
12:34  rubikcube_work: it is n*24hours if no time unit is given, according to: http://dpaste.org/gcyM/
12:34  pgas: rubikcube_work: not obvious to me, find rounds the things down  IIRC
12:35  rubikcube_work: igi: ouch
12:35  rubikcube_work: igi: no, I used minutes
12:36  igi: Emm, My mistake.
12:36  rubikcube_work: pgas: yes, but rounding shouldn't matter, the numbers are too far apart
12:36  pgas: well manpage says up, but still fields are rounded
12:36  pgas: well it's 2 minutes in what you have pasted
12:37  pgas: ah no sorry 5 minutes, well then maybe there's a bug
12:37  rubikcube_work: I'm installing GNU find now, to see if that makes a difference...
12:37  rubikcube_work: it may well be an OS X bug
12:37  rubikcube_work: although it would be very strange
12:37  rubikcube_work: in such a basic tool
12:37  pgas: gnu find doesn't have -mtime -2m, only -mmin
12:38  rubikcube_work: does gnu find allow units for mmin?
12:38  rubikcube_work: or only hours or 24h?
12:39  igi: -mmin for mmin
12:39  igi: -mtime for 24h
12:40  Fatal: on the osx box I have -mmin -2 seems to work fine, whereas -mtime -2m does not
12:41  Fatal: wait a second here, what makes you think -mtime 2m is minutes and not months?
12:42  Fatal: ah, -atime outlines that, nm me :D
12:42  igi: aha
12:44  rubikcube_work: hmm, gnu find can use -newerXt for more flexibility :)
--- Log opened Mon Jan 17 13:25:08 2011
13:25 --- Users 546 nicks [0 ops, 0 halfops, 0 voices, 546 normal]
13:25  Fatal: what a perfect "I'm Spartacus!" moment, good thing I ruin it here and now by saying this.
13:26 --- Channel #bash was synced in 84 seconds
13:29  kerozene: I'm hoping this is the version with the most brainless stuff taken out: http://bash.pastebin.com/fEcNL8gJ
13:29  kerozene: any opinions?
13:35  igi: Why not using read -p instead of echo
13:36  kerozene: ah read -p, much neater. thanks
13:38  kerozene: so like: read -s -p 'Enter domain vhostgroup user pass salt:' domain vhostgroup user pass salt
13:38  igi: Yes
13:40  igi: egrep -w '^$user' /etc/passwd >/dev/null  , I prefer 'id "$user"
13:40  kerozene: 'id ?
13:40  igi: if id "$user" ; then
13:41  kerozene: ok
13:42  kerozene: that was a snippet I borrowed. seemed kinda kludgy
13:42  kerozene: had to add the -w
13:43  kerozene: ok, time to start testing. thanks everyone for help. I learned a lot
13:43  lhunath: igi: $user won't expand when single-quoted.
13:44  igi: lhunath, i use double-quoted.
13:45  lhunath: I was referring to your egrep
13:45  igi: O, a typo
13:46  geirha: You might want to match the first : too
13:46  kerozene: geirha?
13:47  geirha: Oh, nvm. GNU's -w
13:47  kerozene: happy to purge regexes..
14:16 --- Zir0h_ is now known as Zir0h
14:17  Error404NotFound: any comments on why this isn't working: http://pastebin.com/dGfrpgv8
14:19  falconindy: Error404NotFound: does what it advertises
14:20  falconindy: breaks immediately on an arg not starting with a dash
14:20  geirha: Error404NotFound: arg1 will match the *) in your case ...
14:20  Error404NotFound: ya, changed that break;; to shift;;
14:21  Error404NotFound: my bad
14:43  jeeger: Greetings! My problem is that ssh refuses to use a graphical password program if it can access a tty. When disallowing access to /dev/tty, ssh correctly executes the askpass program. Running as ssh <host> < /dev/null doesn't seem to work. Is there any easy (and clean) way to not allow ssh access to that tty?
14:44  pgas: sounds like a question for #openssh
14:45  jeeger: The answer so far was "*tumbleweed rolling by*". I thought maybe there was a program for that. Yeah, I'll keep waiting...
14:50  lhunath: sounds like something you'd be able to configure
14:51  jeeger: lhunath: Na, the only mention of ssh-askpass is related to that procedure (set DISPLAY and SSH_ASKPASS, run without terminal).
14:57 --- Naib__ is now known as Naib
14:58 --- Naib is now known as Guest22235
14:59  Kooothor: hi, can someone remind me what is the wildcard in bash but only for ONE carachter ?
14:59  lhunath: ?
14:59  Kooothor: nvmd
14:59  Kooothor: thx
14:59  Kooothor: lhunath:
14:59  jeeger: ouch
15:00  lhunath: jeeger: I guess redirecting from stdin should work, do you have DISPLAY set at all?
15:01  Mmike: How do I check if certain process (know by its name) is running, from oneliner. Will this do:  if [ `pidof -s procesname` ] then echo 'yes'; else echo 'no'; fi
15:02  lhunath: process names are not unique.  therefore, you cannot possibly expect a "is process [name] alive" to give you a single yes or no answer.
15:02  lhunath: use PIDs.
15:02  lhunath: kill -0 processPID
15:03  lhunath: whomever created your process is responsible for talking to it.
15:04  lhunath: it should store the pid somewhere or give you a way of doing what you want directly
15:05  Mmike: lhunath, I need to check, for instance, if memcached is running
15:05  pgas: he probably has only one minecraft server on his machine
15:05  lhunath: Mmike: how do you start memcached?
15:05  pgas: we tend to recommand if pgrep ....;then
15:05  Mmike: and I have 300 servers, so I was thinking into sshing to each of them, do that 'if' I posted, and store that into a file
15:05  Mmike: lhunath, it's debian box, memcache is installed from the package
15:06  lhunath: that was not the question.
15:06  lhunath: I'm going to assume it's started from an init.d script.
15:06  lhunath: look in that script and find out where it stores the pid.
15:07  lhunath: then kill -0 the pid to see if it's running.
15:07  lhunath: or better yet: try to talk to it.  then you also know whether it's WORKING.
15:09  Mmike: lhunath, I actually needed a quick'n'dirty soluton... what is wrong with 'pidof -s memcached' ?
15:10  erUSUL: Mmike: checking if /etc/init.d/memcached or whatever writes a file in /var/run/ with the pid is quick afaics and is cleaner solution
15:11  Mmike: erUSUL, but the pid could be there and memcached could not be running. so you recommend using 'pidof /var/run/memcached.pid'?
15:12  nicofs: how can i set a variable within a function so that it is set globally in the whole script?
15:12  speakman: how do i set a ENV with an arbitrary name within a script?
15:12  speakman: env var even
15:12  erUSUL: Mmike: 15:02 < lhunath> kill -0 processPID << that will check if the process recieves signals ...
15:12  speakman: nicofs: export VARIABLENAME
15:12  nicofs: speakman, ah... thought so... thanks
15:13  superlinux: hi. is there one command that can type as the following  table : line_of_file1 ; line_of_file2? or must i write a script?
15:13  Mmike: erUSUL, i need to be root to do something like that. For instance, I have memcached running on my desktop box:
15:13  Mmike: mario@buntor ~$ kill -0 `pidof memcached`
15:13  Mmike: bash: kill: (1174) - Operation not permitted
15:13  jeeger: lhunath: Yeah, I ran SSH like this: SSH_ASKPASS=/usr/lib/ssh/x11-ssh-askpass DISPLAY=:0.0 strace ssh thenybble.de < /dev/null
15:13  jeeger: without the strace, of course.
15:14  speakman: How can I set an environment variable in a function, where the name of the env variable is part of the function parameters?
15:16 --- Laynef_ is now known as Laynef
15:19  pgas: # foo () { export $1=bleh; };foo bar;declare -p bar
15:19  evalbot: pgas: declare -x bar="bleh"
15:25  nicofs: I want to write a script that converts the output of ffmpeg into a progress bar... therefore i'd have to run ffmpeg in the background, and send the output into a variable which i will then search for the patterns i need... is that possible?
15:26  pgas: no. but you perhaps can parse ffmpeg's output though you'll have buffereing problems.
15:27  nicofs: how would parsing work? roughly? (or where can i read up on that)
15:27  pgas: !faq 1
15:27  greybot: http://mywiki.wooledge.org/BashFAQ/001 -- How can I read a file (data stream, variable) line-by-line (and/or field-by-field)?
15:27  pgas: command | parser
15:28  Kartagis: hey
15:29  Kartagis: rename -vn 's/[0..1][1..12]\.//' * renames only 4 out of 12 files. what is the correct way?
15:32  kojiro: that syntax looks odd
15:32  kojiro: I've seen expressions like [1..12], but never in combination with regex
15:33  Kartagis: kojiro I did that because I have filenames with leading zeros
15:33  rmccue: Hi there, when executing `if [[ $1 == "refs/tags/"* ]]
15:33  rmccue: `, I get "[[: not found"
15:33  rmccue: Whoops, sorry for the newline.
15:33  kojiro: rmccue: what's the very first line of the file?
15:34  pgas: Kartagis: [ ] is a range of character [1..12] it means the range between 1 and 1 plus 2 ie it matches 1 or 2
15:34  rmccue: kojiro: Standard shebang, #!/bin/sh
15:34  kojiro: rmccue: right. /bin/sh is not /bin/bash
15:34  pgas: [[ is not standard
15:34  rmccue: kojiro: Ah, thanks!
15:34  hemanth: is there a easy way to read each line from two files line by line ? Trying to make a query string
15:34  Kartagis: pgas I thought [1..12] matched between 1 and 12
15:35  rmccue: I did /join #sh, and didn't notice this was #bash ;)
15:35  pgas: hemanth: why do you start asking here instead of continuing in #awk?
15:35  kojiro: rmccue: you can do if [ $1 = "refs/tags/"* ];...
15:35  rmccue: kojiro: Switching to bash is easier anyway :)
15:35  kojiro: rmccue: or, more standard yet, case $1 in refs/tags/*...
15:35  hemanth: pgas, felt its much a bash question, sorry :(
15:35  pgas: kojiro: but it will not work, the [ that is
15:36  kojiro: pgas: besides the fact I forgot to quote the "$1"?
15:36  hemanth: pgas, that awk solution worked, but need to add more to it
15:36  pgas: kojiro: yes,  [ doesn't do pattern matching
15:36  kojiro: pgas: oh, right. I knew there was a reason I preferred case ;)
15:37  pgas: hemanth: oh ok, well continue here then
15:38  pgas: hemanth: cat file1 file2 | while read ...
15:39  Kartagis: pgas how can I achieve what I want?
15:39  hemanth: pgas, two files, reading line by line to create a query: i have used two files as : for l in $(cat file1) ; do for l2 in $(cat file2); do echo "my query...$l and $l2";done;done ; is that fine?
15:39  pgas: or perhaps you want: while read linef1;read -u3 linef2;do ... done<file1 3<file2
15:40  hemanth: wow! ok
15:41  pgas: Kartagis: [0..1][1..9]|11[1..2] or something like that but not sure what you are trying to match exactly
15:42  Kartagis: pgas all numbers between 1 and 12, except 1 to 9 have leading zeros
15:49  pgas: (0[1-9]|1[0-2])
15:49  pgas: (In fact I was wrong .. doesn't mean anything inside [ ] besides a dot or a dot)
15:49  b0ot: Is there a way to assign a process ID to a bash script?
15:50  b0ot: or at least get the process ID of a bash script so that you could kill it later?
15:50  erUSUL: !$$
15:50  greybot: $$ expands to the PID of the shell. In a () subshell, it expands to the process ID of the current shell, not the subshell.
15:51  Mmike: how do I put process in background, but also in oneliner? I have around 50 shell scritps in a directory, and I'd like to do something like : for file in `ls`; do ls &; done
15:51  erUSUL: !ls
15:51  greybot: ls shows you a representation of files. They are NOT file names (for simple names, they mostly happen to be equivalent). Do NOT try to parse it. http://mywiki.wooledge.org/ParsingLs
15:51  pgas: !pf > Mmike
15:52  greybot: pgas: No matches found at http://mywiki.wooledge.org/BashPitfalls
15:52  pgas: !pf 1 > Mmike
15:52  greybot: Mmike: http://mywiki.wooledge.org/BashPitfalls#pf1 -- Don't do this! -- for i in $(ls *.mp3)
15:52  erUSUL: Mmike:  maybe? --> for f in *; do "$f" & done
15:52  erUSUL: !&;
15:52  greybot: &; is always wrong. If you want to run things in the background in a compact one-liner just use & between commands, and omit the ; entirely. See http://mywiki.wooledge.org/BashPitfalls
15:52  pgas: !pf &; > Mmike
15:52  greybot: Mmike: http://mywiki.wooledge.org/BashPitfalls#pf21 -- Don't do this! -- for i in {1..10}; do ./something &; done
15:52  pgas: :D
15:52  Mmike: thnx :)
16:04 --- Naib_ is now known as Naib
16:22 --- Cain` is now known as Cain
16:22 --- lixinfish is now known as lxyu
16:23 --- lxyu is now known as lixinfish
16:23 --- lixinfish is now known as lxyu
16:26 --- abstract3d is now known as tzorvas
16:41  IRConan: if I do "var=$(grep pattern /path/to/file | awk '{ print $18 }')" can I then get the exit status of grep? I would have expected it to be PIPESTATUS[0] but it doesn't appear to be
16:42  erUSUL: !awk
16:42  greybot: Check the topic of #awk and also http://www.grymoire.com/Unix/Awk.html -- awk questions belong to #awk. Note: If you are piping through more than one (grep|sed|awk), you're likely doing it wrong.
16:42  e36freak: first of all, just use "var=$(awk '/pattern/{print $18}')"
16:42  IRConan: erUSUL: I didn't ask an awk question...
16:42  e36freak: "var=$(awk '/pattern/{print $18}' /path/to/file)" that is
16:43  IRConan: thanks e36freak, that doesn't solve the problem I was having though... I can't seem to get exit statuses from processes spawned within $()
16:44  e36freak: !subshell
16:44  greybot: http://mywiki.wooledge.org/SubShell
16:46  e36freak: # echo 'foo' > file; var=$(grep 'foo' file) || echo "not found"
16:46  evalbot: e36freak: no output
16:46  e36freak: # echo 'foo' > file; var=$(grep 'bar' file) || echo "not found"
16:46  evalbot: e36freak: not found
16:48  IRConan: e36freak: very informative... am I to assume, then that it's impossible to determine the exit status? $? will presumably contain the exit status of the subshell
16:49  e36freak: IRConan: see above, the exit status of grep is used
16:49  e36freak: it's just when you try to store it in a variable
16:49  e36freak: the issue is the pipe, in your case
16:50  e36freak: what do you need it for? if it doesn't find anything, the var will be empty
16:51  e36freak: if [[ $var ]]; then
16:51  e36freak: or if [[ -z $var ]]; then
16:51  IRConan: e36freak: I guess that works
16:51  IRConan: using your awk version it doesn't seem to terminate
16:52  e36freak: #awk
16:52  e36freak: but you should never need more than one of grep, sed, and awk in one line
16:52  e36freak: and i have no issues with using awk like that here
16:52  pgas: (in the general case you can do: var=$(command | command;exit ${PIPESTATUS[0]}))
16:53  e36freak: pgas: oh nice
16:53  IRConan: pgas: I had just thought of that# :D
16:53  pgas: (also on big files grep | awk might be a lot faster depending on the implementation, it's probably the opposite for small files)
17:01  vkues: for `find` also is faster than while < <(find)
17:01  vkues: s/find/command/
17:03  e36freak: for `find` is, however, subject to wordsplitting
17:03  e36freak: so go for it as long as you're 100% sure you have filenames with no spaces
17:04  pgas: is it really? ie have you tried for a long list of results?
17:04  e36freak: also, backticks still suck
17:04  vkues: e36freak: IFS=$'\n'; set -f; for line-separated input
17:05  vkues: pgas: i did not test it thoroughly, but always when i tried it, it was faster, even with large results; not large enough to cause swapping, though.
17:06  e36freak: vkues: i am aware. but while IFS= read -rd '' < <(find -print0) is as safe as it gets
17:06  sybariten: i need to make a tar ball but its just a limited part of the files in a dir that i want ... i am able to find those files with a find lnie
17:06  sybariten: line
17:07  vkues: e36freak: well, it's not that i want to propagate using for instead of while
17:07  sybariten: with options like this...   -name "*CLCL*" -o -name "*CLCM*" -o -name "*CLCH*"     how can i collect the same files in a tarball?
17:08  sybariten: uh, damn, wrong channel... sorry
17:09  taylanub: sybariten: {} + instead of {} \;
17:09  taylanub: ''man find''
17:09  sybariten: taylanub: hm, i didnt quite get that
17:10  e36freak: !find > sybariten
17:10  greybot: sybariten: http://mywiki.wooledge.org/UsingFind
17:10  taylanub: find dir foobar -exec tar caf foo.tar.xz -- {} +
17:12  sybariten: what happens there,
17:12  sybariten: with double dashes?
17:12  taylanub: that's just to tell tar that options ended and the rest of the arguments are definitely filenames
17:12  sybariten: ok
17:13  taylanub: will save you when a file is named e.g. "--foobar"
17:13  sybariten: thanks
17:13  e36freak: also, you know you can use -iregex, right?
17:13  e36freak: or -regex
17:13  taylanub: GNU
17:13  e36freak: point.
17:13  sybariten: hm, no...    i thought tar could do this thing directly somehow, without looping with find
17:13  e36freak: -regex ".*GLC[LMH].*" ... would work with GNU find
17:14  taylanub: GNU tar has --exclude and such, but surely find is the tool of choice. *cough*unixphilosophy*cough*
17:17  kusanagi: today i had a question in a exam... what would grep ^^$$ testfile would match. I would test it my self, but i dont know how. Anybody can share a clue?
17:17  kusanagi: i failed the question as you can guest
17:17  kusanagi: guess*
17:19  taylanub: you type that command in a shell ?
17:20  kusanagi: sorry, now i think about it... the question was, what would sed '/^^$$/d' test1 match
17:20 --- qubit_ is now known as qubit
17:20  taylanub: how would you mix those up :P
17:20  e36freak: it would be ``sed '/^$/d' file''
17:20  ritzt3ch: anyone know if you can lower the timeout for snmpget  it seems to take the default 5 seconds Even when i do a -t 1
17:20  e36freak: most likely
17:21  e36freak: and that would delete all empty lines
17:21  kusanagi: nope e36freak ... it was a tricky question
17:21  kusanagi: i just test it... now that i remembered the exact question
17:21  kusanagi: it matchs lines with ^$
17:22  e36freak: ...yes
17:22  taylanub: it comes down to what posix bre does when there's multiple ^/$
17:22  kusanagi: its like it only takes the first ^ and the last $ into account
17:22  taylanub: unless the exam specified a sed version
17:22  e36freak: kusanagi: that is correct
17:22 * taylanub reads regex(7)
17:22  e36freak: kinda like [^ab] vs [a^b]
17:22  kusanagi: nop taylanub
17:22  kusanagi: but that would had an awesome answer, had I know it
17:22  kusanagi: been*
17:23  e36freak: in the first one, it's everything that isn't a or b, second is literal "a, ^, or b"
17:23  kusanagi: grrr
17:24  kusanagi: now that you put it that way, i think i knew that
17:24  kusanagi: damn me
17:24  kusanagi: xD
17:24  taylanub: "'^' is an ordinary character except at the beginning of the RE or(!) the  beginning of a parenthesized subexpression, '$' is an ordinary character except at the end of the RE or(!) the end of a paren thesized subexpression,"
17:24  taylanub: the exclamation marks means it's not absolute
17:24  taylanub: (might be changed in the future; should not be relied upon ...)
17:25  taylanub: (just read the posix(7) manpage, if you have it)
17:25  kusanagi: taylanub, it was a multi option anwser, but that would had been an awesome add in the border of the paper
17:25  kusanagi: ^^
17:26  taylanub: this means that the shortest answer would be that it matches lines that contain '^$' literally, and nothing else
17:26  kusanagi: making me tricky borderline questions... HA
17:26  taylanub: kusanagi: what school is that?
17:26  kusanagi: its not an school, it was a job interview exam actually
17:26  taylanub: i see
17:27  kusanagi: I dont think i got the job
17:27  kusanagi: god damned
17:27  kusanagi: grrr
17:27  kusanagi: I have to hang out more in #bash
17:27  taylanub: i wish they taught us unix stuff at school. but no, we get office suits and visual basic x(
17:27  kusanagi: yeah... same
17:29  e36freak: don't need school to learn unix stuff :)
17:29  e36freak: also, vim <3
17:29  kusanagi: well, i would had been nice
17:30  kusanagi: Ive only doing unix stuff for 3 years now
17:30  kusanagi: borderline cases are not my specialty
17:31  kusanagi: had they taught that in school, I would had not failed the job interview
17:31  kusanagi: ¬¬
17:35  speakman: " echo "some text" | read var1 var2 ; echo $var1 $var2 " does not work since var[12] won't be exported. Is there some way (other than a 'while read ...' on a single-line) to make it reachable?
17:36  e36freak: process substitution
17:36  e36freak: actually
17:36  e36freak: herestring
17:36  e36freak: sorry
17:36  e36freak: !<<<
17:36  greybot: Here strings. Similar to here documents: The word after <<< and a newline are passed to the standard input of a command. Syntax: ''command <<< "some sentence"'' (Like ''echo "some sentence" | command'', but without the overhead of the subshell)
17:36  e36freak: read var1 var2 <<<"some text"
17:37  tmr: !faq disappear > speakman
17:37  greybot: speakman: http://mywiki.wooledge.org/BashFAQ/024 -- I set variables in a loop. Why do they suddenly disappear after the loop terminates? Or, why can't I pipe data to read?
17:37  speakman: thanks for that optimziation. But how do I make var1 and var2 available to next statement?
17:38  e36freak: speakman: ...with a herestring
17:38  speakman: tmr: thanks, but I was hoping not to need a loop
17:38  e36freak: # read var1 var2 <<<"foo bar"; printf "<%s>" "$var1" "$var2"
17:38  evalbot: e36freak: <foo><bar>
17:38  ritzt3ch: i wonder if you can run multiple commands at once  meaning running 1 command takes 8 seconds vs the other takes 10 seconds and instead of running it twice can you just run both at once where its trying to retrieve the data do i need to somehow do some sort of virtual console
17:38  tmr: You don't need a loop.
17:39  evil_core: hi all
17:39  evil_core: find "$imgdir/orig" -exec file={}\; dst=$ composite -dissolve 15 -tile watermark.png "{}" "$imgdir/a_norm/$(basename {})" \;
17:39  evil_core: I dunno how to force "basename" to work in find case
17:39  e36freak: basename sucks -_- just use a loop for that
17:40  metalfan__: hi
17:40  evil_core: e36freak: whats better alternative?
17:41  metalfan__: why does this loop:   while true; do rsync source target; rsync source2 target2; sleep 10; done       stop when rsync is pause with "ctrl+z" and resumed with "fg" ?
17:41  speakman: e36freak: great! thanks!
17:41  e36freak: evil_core: what exactly do you want it to do?
17:41  e36freak: metalfan__: huh? it's an infinite loop...
17:41  speakman: e36freak: and by the way; e36 is a wonderful model. Although I'm currently owning one, I'm still just a bit more into the 5-series ;)
17:42  tmr: No he will not bother reading that faq and learn _why_ his variables were unset.
17:42  e36freak: speakman: mines a beat up peice of crap, but it hauls ass on track
17:42  metalfan__: e36freak, i know....but i also know that my second rsync broke
17:42  evil_core: find find images in $imgdir/orig and later watermark it using "$imgdir/a_norm/$basename {}) \; as a name
17:42  e36freak: evil_core: what is the command you want to run on each file, ignoring find? like example command for one file
17:44  evil_core: composite -dissolve 15 -tile watermark.png orig.jpg watermarked.jpg
17:44  e36freak: with the filename being...?
17:44  e36freak: what is "dst=$" for?
17:44  evil_core: identical
17:45  Vide: hi, i'd like to add a "new line" to a variable in bash 4.1
17:45  Fatal: $'\n'
17:45  Vide: i'd like to use the var+="newcontent" format
17:45  evil_core: hmmm..it doesnt make sense, its a bug, because I am currently playing with echo command before
17:45  Fatal: var+=$'\n'
17:45  Vide: Fatal: i tried but it doesn't work
17:45  Fatal: it does
17:45  evil_core: the problem is I need to get basenames for it
17:45  Vide: because i put it in ""
17:45  Fatal: Vide: I didn't say "", I said $'\n'
17:45  Vide: cause i want to ad more text in the same line
17:45  evil_core: I cannot run for i in `ls $imgdir/orig`, because filenames contains spaces, etc
17:46  Vide: mmh ok i simply try to move the first double quote
17:46  Fatal: Vide: var+=$'\n'"more text"
17:46  e36freak: while read -rd '' file; do composite -dissolve 15 -title watermark.png "$file" "$imgdir/a_norm/${file##*/}"; done < <(find "$imgdir/orig" -maxdepth 1 -print0) ?
17:46  Vide: Fatal: indeed
17:46  Vide: it works
17:46  Vide: thx
17:47  e36freak: !ls > evil_core
17:47  greybot: evil_core: ls shows you a representation of files. They are NOT file names (for simple names, they mostly happen to be equivalent). Do NOT try to parse it. http://mywiki.wooledge.org/ParsingLs
17:47  e36freak: evil_core: ls does not belong in a script. just use "for file in *; do"
17:49  e36freak: evil_core: ahh, i forgot an IFS= in there
17:49  e36freak: but if you just want that
17:50  e36freak: for file in "$imgdir"/orig/*; do composite -dissolve 15 -title watermark.png "$file" "$imgdir/a_norm/${file##*/}"; done
17:50  evil_core: e36freak: but for file in *, will not work with spaces in names, am I right?
17:50  e36freak: sure it will
17:50  e36freak: bash is smarter than that
17:51  speakman: e36freak: forgot I was using Busybox which doesn't handle <<< sort of pipes :(
17:51  tmr: !umq > evil_core
17:51  greybot: evil_core: "USE MORE QUOTES!" They are vital. Also, learn the difference between ' and " and `. See <http://mywiki.wooledge.org/Quotes> and <http://wiki.bash-hackers.org/syntax/words>.
17:51  e36freak: # touch "foo bar"; touch "baz"; for file in *; do printf "<%s>" "$file"; done
17:51  evalbot: e36freak: <baz><foo bar>
17:51  Bartzy|work: How do I kill a job from jobs ?
17:51  e36freak: speakman: bash should handle that
17:52  e36freak: !job > Bartzy|work
17:52  greybot: Bartzy|work: Job control can be used to interact with background and suspended jobs. See http://mywiki.wooledge.org/BashGuide/JobControl
17:52  e36freak: !pm > Bartzy|work
17:52  greybot: Bartzy|work: http://mywiki.wooledge.org/ProcessManagement
17:52  e36freak: speakman: unless it's not actually bash, in which case you have to specify. read the FAQ linked earlier
17:52  Bartzy|work: thanks.
17:52  heiner: Bartzy|work: kill %1
17:52  tmr: speakman, read the faq you were linked to.
17:53  speakman: e36freak: I will, thanks
17:53  heiner: Bartzy|work: replace "%1" with the number of the job you want to terminate. "jobs" lists them
17:55  speakman: tmr: e36freak: according the faq, there's no way (unless <<< is supported) to workaround the subprocess except using a i.e. while loop (which will only iterate once). But if that's the case, it's pretty okay to me.
17:55  e36freak: speakman: that is correct
17:56  evil_core: e36freak: it works, thanks
17:56  speakman: another go; is there a way to "trim()" the results from "read"? (i'm using IFS=":" currently)?
17:57  tmr: speakman, named pipe and heredoc are not solutions?
17:57  speakman: hmm.. IFS=": " might do it...
17:57  e36freak: assuming there's no other whitespace that you don't want used as a seperator
17:57  speakman: tmr: it's okay, a tiny little loop doesn't kill anyone. :)
17:57  e36freak: you can use another read command
17:58  tmr: *sigh*
17:58  speakman: e36freak: I'm reading two variabels where the first one doesn't ever contain whitespaces, and the next variable will contain "the rest" of the string (which does include some ws).
17:59  e36freak: then it will be fine, as long as input is sanitized (ie you don't get anything unexpected), but i don't like to count on that
18:01  speakman: e36freak: I think I'm clear. I'm actually splitting MIME headers :)
18:14 --- Skaag_ is now known as Skaag
18:19 --- emma_ is now known as em
18:32  thomaschaaf: am trying to write a bash script which works with the outputs of mysql http://pastie.org/1470512 is the best I got to
18:32  thomaschaaf: now I just need all of them in different variables :D
18:32  thomaschaaf: is cut good for the job?
18:32  stevie-bash: i have problems with substrint extraction
18:33  e36freak: thomaschaaf: i would use awk
18:33  kojiro: read would probably be fine
18:33  stevie-bash: dir="/usr/pc/lb01-us/468"; echo ` expr match "$dir" '.*\([0-9]*\)'`; echo "."; echo $dir
18:33  e36freak: or that
18:33  e36freak: !expr
18:33  greybot: 'expr' is a program used in ancient shell code to do math. In Posix shells like bash, use $(( expression )). In bash and ksh93, you can also use '(( expression ))' or 'let expression' if you don't need to use the result in an expansion.
18:33  stevie-bash: how can i get the numbers
18:33  e36freak: stevie-bash: ...parameter expansion
18:34  e36freak: # dir="/usr/pc/lb01
18:34  e36freak: ahh
18:34  evalbot: e36freak: Missing terminating quote, bracket or keyword
18:34  e36freak: # dir="/usr/pc/lb01-us/468"; echo "${dir##*/}"
18:34  evalbot: e36freak: 468
18:34  kojiro: ++
18:34  stevie-bash: i want to match against regex
18:35  kojiro: stevie-bash: why?
18:35  stevie-bash: trialing slash, if it occurs
18:35  e36freak: stevie-bash: then use sed. bash can't do much with regex on its own, very basic ones only
18:36  kojiro: no, bash can do fully extended regex
18:36  kojiro:  but this is a silly problem to solve with it
18:36  stevie-bash: http://tldp.org/LDP/abs/html/string-manipulation.html , i followed this guide
18:36  kojiro: just make sure there aren't any trailing slashes.
18:36  stevie-bash: there are examples
18:36  kojiro: !tldp
18:36  greybot: the tldp bash guide is outdated, and in some cases just plain wrong. There's a reason it isn't in the topic.
18:36  stevie-bash: ok _D
18:37  thomaschaaf: !awk
18:37  greybot: Check the topic of #awk and also http://www.grymoire.com/Unix/Awk.html -- awk questions belong to #awk. Note: If you are piping through more than one (grep|sed|awk), you're likely doing it wrong.
18:37  stevie-bash: ok, then i'll use your sokution, thanks
18:37  kojiro: # dir="/usr/pc/lb01-us/468/"; dir="${dir#/}"; dir="${##*/}"; printf '%d\n' "$dir"
18:37  evalbot: kojiro: 0
18:37  kojiro: lul
18:38  stevie-bash: :)
18:38  kojiro: # dir="/usr/pc/lb01-us/468/"; dir="${dir%/}"; dir="${##*/}"; printf '%d\n' "$dir"
18:38  evalbot: kojiro: 0
18:38  kojiro: <-- fail
18:39  stevie-bash: printf fails? :D
18:39  kojiro: no, my second pe is wrong
18:39  kojiro: no variable...
18:39  stevie-bash: ahh
18:39  kojiro: stevie-bash: see it?
18:39  stevie-bash: yes
18:39  stevie-bash: ${##
18:39  stevie-bash: <--
18:39  kojiro: yep
18:40  kojiro: but that's just reiterating e36freak's fine solution
18:40  e36freak: you could use basename
18:40  kojiro: I was just trying to demonstrate how to strip off a trailing slash
18:40  e36freak: but basename is slowww
18:40  kojiro: !basename
18:40  greybot: basename(1) can strip the directory and extension from a path. (a/b/c.d -> c.d or c). Or you can use a parameter expansion: "${path##*/}" or "${path%.*}"
18:41  e36freak: falconindy timed 10,000 iterations of basename vs PE, basename was about 8s, PE was .095 or something
18:41  stevie-bash: but doesn't ${dir%/} works always? with or without trailing slash?
18:41  e36freak: no, that's the opposite of what you want
18:41  stevie-bash: if no slash, it doenst change a thing. right?
18:41  e36freak: oh, true
18:41 * e36freak is not thinking
18:41  stevie-bash: ok, that i just add it in front
18:42  falconindy: # dir=/foo/bar/; echo ${dir##*/}; dir=/foo/bar; echo ${dir##*/}
18:42  evalbot: falconindy:
18:42  evalbot: falconindy: bar
18:42  e36freak: # dir=/foo/bar/; dir=${dir%/}; echo "${dir##*/}"
18:42  evalbot: e36freak: bar
18:42  falconindy: # dir=/foo/bar/; echo ${dir%/*}; dir=/foo/bar; echo ${dir%/*}
18:42  evalbot: falconindy: /foo/bar
18:42  evalbot: falconindy: /foo
18:42  e36freak: # dir=/foo/bar; dir=${dir%/}; echo "${dir##*/}"
18:42  evalbot: e36freak: bar
18:43  falconindy: generally what i do is, if you're taking user input, you want to use basename/dirname. otherwise, use the PE
18:53  Elebertus: !array
18:53  greybot: An array maps numbers to strings. Bash 4 also has associative arrays (maps strings to strings). See http://mywiki.wooledge.org/BashSheet#Arrays
18:53  Elebertus: ohh
18:54  Elebertus: you have to use 'declare -a' for associative arrays
18:54  e36freak: declare -A
18:55  e36freak: also have to have bash4
19:15  Elebertus: !case
19:15  greybot: case word in pattern);; esac syntax is used to match a word against a particular pattern, and execute commands if that pattern matches. See 'case word in' in man bash | http://wiki.bash-hackers.org/syntax/ccmd/case
19:17  taylanub: Elebertus: you can query/PM the bot
19:18  stevie-bash: bye
19:20  Elebertus: taylanub: thanks
19:31  Buglouse: How to have (select) timeout,
19:32  pgas: TMOUT=10;select ...
19:32  e36freak: !faq timeout
19:32  greybot: http://mywiki.wooledge.org/BashFAQ/068 -- How do I run a command, and have it abort (timeout) after N seconds?
19:32  Buglouse: duh...
19:32  pgas: duh?
19:33  Buglouse: ( how could i forget )...
19:37  Skaag: I need a good dual 12 core machine, probably AMD based, but so many models... this is crazy...
19:39  wald0: when i kill a backgrounded process in a script i receive a message that a process has stopped in the line foo of my script... how i can do it no-verbose ?
19:39  Buglouse: i think TMOUT fit my needs for select timeout?
19:39  greycat: wald0: don't turn on job control
19:39  Buglouse: pgas: Thats what I meant to say 'duh' to.
19:39  wald0: greycat: what you mean ?
19:40  pgas: { kill pid;wait pid; } 2>/dev/null
19:40  greycat: imadev:~$ cat foo
19:40  greycat: #!/bin/bash
19:40  greycat: sleep 255 &
19:40  greycat: kill $!
19:40  greycat: echo done
19:40  greycat: imadev:~$ ./foo
19:40  greycat: done
19:40  evil_core: bye all
19:40  greycat: wald0: As I said.  Don't turn on job control, and you won't get the message.
19:42  greycat: pgas: Assuming he *did* have job control enabled, I don't think yours would work.  I believe you need exec 3>&2 2>/dev/null; kill; wait; exec 2>&3 3>&-
19:42  wald0: 6t++
19:42 * wald0 confused
19:43  wald0: what is job control exactly ?
19:43  greycat: It's on by default in *interactive* shells.  You enabled it in your script with 'set -m' or similar.
19:43  greycat: imadev:~$ cat foo
19:43  greycat: #!/bin/bash
19:43  greycat: set -m; sleep 255 & kill $!; echo done
19:43  greycat: imadev:~$ ./foo
19:43  greycat: done
19:43  greycat: ./foo: line 3:  1926 Terminated              sleep 255
19:44  greycat: THAT is with job control enabled.
19:44  wald0: i have a trap, no set's
19:44  greycat: wald0: I have demonstrated that there IS no message for killing a background job in a bash script unless monitor mode is on.  It's now your job to show the code that demonstrates the problem.
19:44  wald0: so how i can disable it for this "step" ? just set +m and then set -m ?
19:45  wald0: i tried to reproduce my code in a separated script and there's no message, so there's something that enables job control as you say in my big script
19:45  pgas: greycat: hmm yeah, you need to redirect stderr of bash
19:46  wald0: by any reason i don't found the cause
19:47  pgas: # bash -c 'sleep 10 & kill $!;sleep 1'
19:47  evalbot: pgas: bash: line 1:   231 Terminated              sleep 10
19:48  pgas: # bash -c 'sleep 10 & exec 3>&2 2>/dev/nulll;kill $!;wait $!;exec 2>&3-;sleep 1'
19:48  evalbot: pgas: no output
19:48  wald0: hum
19:50  wald0: nice, what is 3 btw ?
19:50  pgas: another fd
19:50  greycat: a number bigger than 2
19:50  wald0: lol
19:50  greycat: you could use 37 if you prefer
19:50  wald0: 1 = stout, 2 = sterr, 3 = ?
19:50  greycat: or 19.  19's fun.
19:50  pgas: 3 = a non standard file descriptor  used to save stderr
19:51  greycat: I'm still trying to figure out why bash -c '...' printed the message.
19:51  wald0: greycat: aparently only happens when adding a sleep before to end the script
19:51  skered: So at this place I work their whole shell source base is littered with 'if [ $? -eq 0 ]; ... else .. fi' blocks... ~25%
19:52  e36freak: yeah, i see that a lot
19:52  skered: Is it such a bad thing to recommend 'trap checkFunction DEBUG' ?
19:54  Buglouse: well TMOUT does not work for select..
19:54  pgas: Buglouse: works for me
19:55  pgas: # TMOUT=1;time select f in foo;do echo ;done;echo timeout
19:55  evalbot: pgas: 1) foo
19:55  evalbot: pgas: #?
19:55  evalbot: pgas: etc... ( http://pastebin.com/1pzJMpvp )
19:55  Buglouse: pgas: that is , after time the select list is re drawn.
19:55  pgas: not here
19:56  Buglouse: oh .. lol, the condition was never met, was in loop.
19:56  greycat: imadev:~$ bash -c 'echo $-; sleep 10 & jobs; kill $!; sleep 1'
19:56  greycat: hBc
19:56  greycat: [1]+  Running                 sleep 10 &
19:56  greycat: bash: line 1:  1963 Terminated              sleep 10
19:56  greycat: I still don't get it!
19:57  greycat: It's not an interactive shell, and it's not showing monitor mode being on.
20:00  wald0: it has not worked for me playing with set +/-m
20:00  wald0: btw, there's my script problem:  http://debian.pastebin.com/aGdXYK1c
20:01  wald0: there's the annoying message, and if i enable lines 9 and 17, i don't get the login of the line 13
20:02  Buglouse: pgas: hmm... i get a loop
20:02  pgas: Buglouse: paste your code
20:02  Buglouse: same as yours
20:02  pgas: wald0: put line 9 before kill
20:03  Buglouse: TMOUT=1; select f in foo foo2; do echo '..'; done
20:03  Buglouse: # TMOUT=1; select f in foo foo2; do echo '..'; done
20:03  evalbot: Buglouse: 1) foo
20:03  pgas: Buglouse: well, as you have seen my doesn't loop
20:03  evalbot: Buglouse: 2) foo2
20:03  evalbot: Buglouse: #?
20:03  Buglouse: hmm
20:03  wald0: ah, nice
20:03  pgas: # TMOUT=1;select f in foo;do echo ;done 2>/dev/null ;echo timeout
20:03  evalbot: pgas:
20:03  evalbot: pgas: timeout
20:05  Buglouse: mine loops, must be related to some option.
20:05  csabo: !find
20:05  greybot: http://mywiki.wooledge.org/UsingFind
20:05  pgas: !exact > Buglouse
20:05  greybot: Buglouse: Please tell us EXACTLY what you typed, and EXACTLY what the error is.
20:06  Buglouse: pgas: same as yours. ill do it again... still prompts PS3, never echos timeout
20:07  pgas: are you using bash, do you really type TMOUT? not TIMEOUT? do you redirect stdin?
20:08  Buglouse: no redirection, "TMOUT=1
20:08  csabo: I'm trying to archive folders into gzips that are older than x days, that part is easy, my question would be, once thats been done, since the gzips are staying in the folder(s) their mtime will be newer than X days...
20:08  Buglouse: ", bash v4.0.33GNU.
20:08  csabo: so i was going to use -type d, however i wasnt sure how that owuld work out for passing to tar
20:09  ujjain: hi,
20:09  pgas: 4# TMOUT=1;select f in foo bar;do :;done 2>/dev/null;echo $BASH_VERSION
20:09  ujjain: what is wrong with this line? -> function donotmv() ( echo -e "file: $1\nwould be moved to: $2\n\n" )
20:09  shbot: pgas: no output within the time limit
20:10  pgas: 4# TMOUT=1;select f in foo bar;do :;done 2>/dev/null;echo $BASH_VERSION
20:10  shbot: pgas: no output within the time limit
20:11  pgas: Buglouse: hmm ok so something has changed in bash4
20:12  twkm: TMOUT is described as being for interactive shells only, so non-interactive submission to the bot may be misleading.
20:13  ujjain: can somebody help me debug this bash code? http://www.codepad.eu/view/36165783
20:13  twkm: hmm, s/interactive shell/tty input/;s/interactive/tty/
20:13  Geralt: hi, does $(a_bash_function) fork a new process?
20:13  twkm: tias.
20:13  taylanub: Geralt: yes
20:13  e36freak: !seq > ujjain
20:13  greybot: ujjain: seq(1) is a highly nonstandard external command used to count to 10 in silly Linux howtos. Use one of these instead: for x in {1..10} (bash3.x) or for ((x=1; x<=10; x++)) (bash 2.04+) or i=1; while [ $i -le 10 ]; do ...; i=$(($i+1)); done (ksh/POSIX)
20:14  pgas: twkm: hmmm still it redraw the menu for me in bash4, exit select in bash3
20:14  e36freak: !printf > ujjain
20:14  greybot: ujjain: The printf command: http://bash-hackers.org/wiki/doku.php/commands/builtin/printf
20:14  twkm: (how bash would guess when it could get away with not doing so would be the trick)
20:14  e36freak: ujjain: can't just put \n in echo
20:15  alesan: hi! to get the size of a directory I can use du; but inside a directory, how can I get the aggregate size of "C*" files?
20:15  e36freak: but the real issue is
20:15  e36freak: !cr > ujjain
20:15  greybot: ujjain: Carriage Return (ASCII 13). Often written as ^M or \r. CRs are found just before newlines in text files generated by DOS/Windows apps. You can see them with "cat -e". See http://mywiki.wooledge.org/BashFAQ/052 to get rid of them.
20:15  e36freak: alesan: ...du
20:16  ujjain: thanks e36freak very much :
20:16  alesan: e36freak, how, I can only get the size of each file
20:16  e36freak: du -c
20:16  pgas: Buglouse: hmm, or it doesn't seem to work ...well, make a menu by hand and use read -t
20:16  e36freak: man pages are great :)
20:16  alesan: e36freak, that still gives me a list of all files
20:17  e36freak: du -c C* | tail -n 1
20:17  alesan: thank's!
20:17  Buglouse: so TMOUT for select is 'broken' in bashv4?
20:19  Buglouse: what about this .. i have a condition test: http://dpaste.com/326756/
20:19  pgas: Buglouse: well i'd say it is
20:21  csabo: is there an AND operator for find?
20:21  Buglouse: i think AND.. ?
20:21  Buglouse: or there is for path
20:22  pgas: csabo: you get it for free if you don't put anything
20:22  Buglouse: csabo: find --help
20:22  Buglouse: pgas: yeah
20:22  csabo: pgas:  you're the man
20:22  csabo: Buglouse: you're not
20:22  Buglouse: hmm.
20:23 * Buglouse confused .. :..(
20:23  csabo: :(
20:23  pgas: Buglouse: hmm, nothing seems to be executed, it just redisplays the menu
20:23  pgas: so you can't even break out of the select
20:24  e36freak: csabo: you can also use -exec {} \; as a conditional
20:25  e36freak: find . -iname "foo" -exec grep 'foobar' {} \; -exec mv {} newpath \;
20:25  e36freak: will only mv things that grep matches
20:25  csabo: e36freak:  ah :)
20:26  ujjain: what is wrong with pushd "Season $folder */";  ?
20:26  csabo: e36freak: my concern was as im using mtime for this, the gzipped files will remain in that dir, so they will match the search again
20:26  csabo: and the gzips will get gziped again
20:26  e36freak: csabo: didn't see exactly what you wanted to do
20:26  Buglouse: ujjain: the space
20:26  e36freak: only half paying attention
20:27  Buglouse: ujjain: pushd "${folder}*/" ?
20:27  e36freak: dunno if * will be expanded inside " "
20:27  e36freak: pushd "$folder"*/
20:27  Buglouse: oh yeah, that is also right^
20:27  Buglouse: i mean, right*
20:28  csabo: e36freak:  directory with dirs for each day of th emonth , (eg: /DIR/2010/12/25 = XMAS)
20:28  csabo: e36freak:  i am going to gzip each day into is own file, so 25.tar.gz then remove the 25dir
20:28  pgas: Buglouse: I'm reporting this as a bug, unless you want to do it yourself
20:28  csabo: 36 my issue is, i dont want to have the gzips getting gziped after 45 days again
20:28  csabo: e36freak:  i was thinking a -type d would solve it
20:28  e36freak: csabo: -type d -mtime ...
20:29  csabo: but the search runs on the entire dir..
20:29  e36freak: also, i would loop for that
20:29  e36freak: -maxdepth
20:29  csabo: so it will gzip that dir with a gzip in it again
20:29  e36freak: -path
20:29  e36freak: lots of things
20:29  e36freak: -depth
20:29  csabo: e36freak:  i was thinking of having it find dirs, and NOT ".extension"
20:29  e36freak: -depth is probably what you're looking for
20:29  csabo: hmm
20:29  e36freak: also, you can use -not and ! with find
20:29  csabo: its just a terrible design, bad devs
20:30  csabo: so if i have /2010/12/25.tar.gz
20:30  csabo: the search must  be run against the DIR/ so all YEAR/MONTH/DAY will be searched
--- Log closed Mon Jan 17 21:26:37 2011
--- Log opened Mon Jan 17 21:32:04 2011
21:32 --- Users 582 nicks [0 ops, 0 halfops, 0 voices, 582 normal]
21:32  csabo: greycat: new folder everyday.. then never touched again.. /DIR/Year/Month/Day
21:32  greycat: Why not just archive the daily directory from 3 days ago, every day, and then archive last month's monthly directory on the 5th of every month?
21:32  csabo: its retarded
21:32  csabo: i cannot archive the entire month
21:32  greycat: Why not?
21:32  csabo: the people who will be extracting are morons
21:33  csabo: and i dont want them tearing up the IO by extracting 1million+ files for the entir emonth
21:33  csabo: theres already a few thousand files in todays folder
21:33  greycat: Then I don't even know what the question is.
21:33 --- Channel #bash was synced in 94 seconds
21:33  csabo: the question was said in great detail above less than 5min ago
21:34  csabo: they are chewing up space, its all text, 10/1 compression so im done giving them more space
21:34  greycat: All in one line, or scattered across 27 lines and 3 people?
21:34  csabo: 2 lines, ill paste
21:34  Buglouse: greycat: its up there, all nice and neat
21:34  csabo: Theres an app generating alot of data, creates a new folder for each year/month/day so, (DIR/2010/12/25)  I need to compress each day to its own archive, but keep WITHIN the month (eg: /DIR/2010/12/25.gz) once the dir is x days old (90 in this case, i was using -mtime) i want it compressed..   But i want individual files within dirs (eg: /DIR/2010/12/25.gz) to be ignored.)
21:35  greycat: Right, and that's what I attemped to answer.
21:35  greycat: Create the daily tarballs/paxballs/cpioballs, and then ignore those when you create the monthlies.
21:35  csabo: I'm not sure how to do that
21:35  csabo: i know i dont want the monthlies compressed
21:36  csabo: that dir needs to remain intact, with a gzip for each day o fthe month
21:36  csabo: so, the search needs to be set to x dirs deep
21:36  greycat: find "$month" ! -name '*.pax.gz' | pax -w | gzip -9 > "$archive"
21:36  greycat: Oh, you don't want it compressed?  Leave out the gzip.
21:36  csabo: it needs to end up being /dir/year/month/file.gz
21:37  csabo: or thats what i wnated
21:37  csabo: however
21:37  csabo: as this is becomming more compilcated, i should just compress by the month
21:37  csabo: and if they want somthing out of them, they can deal with the extraction
21:38  csabo: so ignore all of that
21:38  csabo: is there a switch i can use to do it by month? not by sec/min/hour
21:38  greycat: You specify the starting directory.
21:38  greycat: The directory names are months.
21:39  csabo: they are numerical values
21:39  greycat: Yes.
21:39  csabo: 01 -12
21:39  greycat: Yes.
21:39  greycat: Months.
21:40  csabo: right, and that doenst help me
21:40  greycat: Dude.,
21:40  csabo: sup man
21:40  greycat: How does it NOT help you?  You know what month you want to archive, right?
21:40  csabo: uh no
21:40  greycat: WHY THE FUCK NOT?
21:40  csabo: .. the months change greg
21:40  csabo: its going to be a script
21:40  greycat: Can you subtract 3 from a number?
21:40  greycat: JESUS
21:41  csabo: and the value to subtract 3 comes from where
21:41  csabo: thats what im asking
21:41  csabo: not can i do basic math
21:41  greycat: Get current month from date(1), remove leading zero, subtract 3, add 12 if it's negative, zero-pad to 2 digits.
21:41  greycat: Ta da.
21:41  trash: Magic.
21:41  csabo: !date
21:41  greybot: Mon Jan 17 20:41:28 2011
21:41  csabo: gg bot
21:41  greycat: # date +%m
21:41  evalbot: greycat: 01
21:42  pgas: # date +%-m
21:42  evalbot: pgas: 1
21:42  csabo: !padding
21:42  pgas: though not sure if the - is portable
21:42  csabo: !pad
21:42  pgas: !faq leading
21:42  greybot: http://mywiki.wooledge.org/BashFAQ/018 -- How can I use numbers with leading zeros in a loop, e.g. 01, 02?
21:43  greycat: # year=$(date +%Y) month=$(date +%m) month=$((10#$month - 3)); if ((month < 0)); then ((month+=12, year--)); fi; echo "I need to back up $year/$month today"
21:43  evalbot: greycat: I need to back up 2010/10 today
21:43  greycat: imadev:~$ date +%-m
21:43  greycat: 01
21:43  pgas: ok the - is not portable
21:43  PiousMinion: How do I detect and capture stdin?  e.g. echo test | myscript
21:43  greycat: !faq 2 > PiousMinion
21:43  greybot: PiousMinion: http://mywiki.wooledge.org/BashFAQ/002 -- How can I store the return value/output of a command in a variable?
21:43  greycat: or...
21:43  pgas: prints "-m" on netbsd
21:44  greycat: PiousMinion: your script inherits stdin as stdin.  All commands INSIDE your script inherit stdin as stdin.
21:44  dualbus: # echo $((($(date +%m) + 9)%13))
21:44  evalbot: dualbus: 10
21:44  csabo: dualbus:  nice, much shorter :)
21:44  pgas: you can test if stdin is a terminal or redirected from something using: if [ -t 0 ];then echo I'm  a terminal
21:45  greycat: mod 13 gives you a number from 0 to 12, not 1 to 12
21:45  greycat: pgas: quoting failure.
21:45  greycat: also, you didn't subtract 1 from the year...
21:46  greycat: also, you didn't strip the leading 0 or force base 10 evaluation of the month
21:46  Buglouse: pgas: i have (case $- in), thanks for your shorter solution.
21:46  PiousMinion: So "test" would get piped to every command inside my bash script?
21:47  greycat: also, if the current month is 12, the answer SHOULD be 9, but (12+9)%13 is not 9.
21:47  pgas: Buglouse: ?
21:48  dualbus: greycat, sorry
21:48  Buglouse: case $- in; do *i*) echo tty ;; esac
21:48  pgas: PiousMinion: no. stdin works automagically in the script. if you want to process it with sed, then you just use sed without filenames, if you want to read it line, by line, you can use "while read .." (see faq 1)
21:48  Buglouse: # case $- in; do *i*) echo tty ;; esac
21:48  evalbot: Buglouse: bash: syntax error near unexpected token `;'
21:48  csabo: as impressive as that was greycat, i'm still in the same boat of how to utilize that output to compress what needs compressed
21:48  greycat: csabo: ASHDKJFHKJASHDJASHKJD
21:48  e36freak: pgas: or put it in a variable with var=$(cat)
21:48  e36freak: erm
21:48  csabo: i guess you missed most of the previous conversation of why i asked in the first place
21:48  e36freak: PiousMinion: ^
21:48  greycat: csabo: WHY the FUCK is the question not "How do I archive the directory for 3-months-ago"?
21:49  csabo: because ass, i have 3 years worth of data
21:49  csabo: so doing 3 months ago is useless
21:49  PiousMinion: e36freak: hmm, thanks
21:49  greycat: On april 1, you should be archiving $year/01
21:49  csabo: right, that works on current
21:49  pgas: PiousMinion: [ -t 0 ] helps to distinguish between the case where the script is redirect or not
21:49  csabo: but as they move more old data over
21:49  csabo: that wont work
21:49  Buglouse: # case $- in *i*) echo tty ;; esac;
21:49  greycat: On May 1, you should be archiving $year/02
21:49  evalbot: Buglouse: tty
21:49  greycat: Buglouse: Use test -t.
21:49  pgas: Buglouse: this test doesn't help much, it will be true in all the script
21:49  csabo: i didnt want to do it by hand
21:49  csabo: looks like i'll have to
21:49  greycat: csabo: Have you not heard of crontab?
21:50  csabo: yeah
21:50  Buglouse: greycat: yeah, forgot that option from manual..
21:50  csabo: can you not read
21:50  csabo: me just doing 3 months ago's dir
21:50  csabo: does not solve anything
21:50  greycat: Then why the fuck can't you just set up a crontab job that runs on the 1st of every month and archives 3 months ago?
21:50  greycat: I give up.
21:50 * csabo sighs
21:50  greycat: *plonk*
21:50  csabo: theres this thing greg called the past
21:50  csabo: you know ,where this big 80's glasses you wear came from
21:51  csabo: ugly bastard
21:51  e36freak: -_-
21:51  csabo: cant stand him, wish he had just kept out of it
21:51  greycat: If he really needs to iterate through every single month directory every single day and extract the mtime, then he can just go write a fucking loop that does that.
21:52  csabo: owell, by hand for the 3 years worth of old data i suppose
21:52  e36freak: csabo: he is by far the most knowledgable person in here
21:52  csabo: e36freak:  and the biggest prick too
21:52  greycat: I don't know about that.  twkm may know more than I do.
21:52  csabo: i'm not going to praise someone for treating everyone like a dick because he knows bash
21:52 * Buglouse takes the caffeine pills out of greycat's hand.
21:52  csabo: its fucking bash, not the cure for cancer
21:52  e36freak: well, moreso than me
21:52  csabo: thats fine
21:52  csabo: i'd rather worth with someone like you  :)
21:52  e36freak: but seriously, it's the internet. chill out
21:53  csabo: i'm chill
21:53  csabo: i really am
21:53  Buglouse: csabo: Huh, BASH is ... not, wait.. WHAT?!?
21:53  csabo: lol Buglouse
21:53  rumpe1: interesting channel :)    ...popcorn anyone?
21:53  e36freak: it cured my cancer
--- Log closed Mon Jan 17 21:57:19 2011
--- Log opened Mon Jan 17 22:07:45 2011
22:07 --- Users 582 nicks [0 ops, 0 halfops, 0 voices, 582 normal]
22:09 --- Channel #bash was synced in 92 seconds
22:15 --- taylanuc is now known as taylanub
--- Log closed Mon Jan 17 22:19:44 2011
--- Log opened Mon Jan 17 22:20:04 2011
22:20 --- Users 586 nicks [0 ops, 0 halfops, 0 voices, 586 normal]
22:21 --- Channel #bash was synced in 88 seconds
22:22  dualbus: # echo $((a=($(date +%m)-3),(a<0)?a+=12:a)) # no % ¬¬
22:22  evalbot: dualbus: 10
22:22  greycat: dualbus: and what year are you backing up?
22:24  greycat: find: 2011/10: no such file or directory
22:24  dualbus: greycat, ok, I give up, I just wanted to fix my previous mistake
22:24  greycat: imadev:~$ echo $((a=$(echo 01)-3))
22:24  greycat: -2
22:24  greycat: imadev:~$ echo $((a=$(echo 09)-3))
22:24  greycat: bash: a=09: value too great for base (error token is "09")
22:25  greycat: !september
22:25  greybot: August is the month when all your scripts break because you placed $(date +%m) in a variable and tried to do arithmetic with it, without removing the leading zeros. 08 is considered octal. Use $((10#$month)) to force decimal, or strip the zero.
22:25  sloof3: I'm piping some output into sort and the uniq.  Supposedly two lines are different but they appear the same.  Is there a way to hilight non-printable characters or can sort tell me my something is different byte per byte?
22:25  greycat: sloof3: probably whitespace.  try piping through cat -vte
22:25  dualbus: greycat, hate octal, don't know why it's there
22:26  Buglouse: really the only relevant code is the select
22:26  sloof3: I see now I only sort on printable
22:26  greycat: I've managed to break Tcl scripts the exact same way -- doing arithmetic on months.
22:30 * tharkun welcomes greycat to the club
22:40 --- bonsaikitten is now known as AmazingPudding
22:40  pcard: does anyone know of a good alternative to Google Groups for a Usenet archive? One that isn't censored or anything (posts are as they originally were) ? I'm sick of of al lthe bugs, pages not opening, the stupid right hand sidebar that sometimes overlaps message bodies, etc.
22:40  jseakle: why would someone use $"foo" instead of "foo" in a script?
22:41  jseakle: i can't tell what it does
22:41  greycat: !$"
22:41  greybot: Bash supports $"..." quoting syntax for locale-specific translation. If the current locale is C or POSIX, the dollar sign is ignored. If the string is translated and replaced, the replacement is double-quoted. See http://mywiki.wooledge.org/BashFAQ/098
22:41  nDuff: !nabq > pcard
22:41  greybot: pcard: Not A Bash Question. Ask the channel that supports your software, hardware, or OS.
22:41  greycat: I doubt there's any IRC channel that would directly support Usenet.
22:41  jseakle: thanks!
22:42  greycat: Probably some general OS channel like ##linux would be your best bet.
22:42  pcard: nDuff: I realize that. It wouldn't be the first off topic question asked in here. I don't see any harm in a question like this, as it is general so it doesn't really fit in any specific channel
22:43 * nDuff wonders why so many people choose #bash for questions that no other channel fits.
22:43  nDuff: ...why not choose one of those other channels that also doesn't fit?
22:53  dojo: clear
22:53  dojo: oops
23:04  teurastaja: this is a call for all of you who have a fancy || rare || cool bash prompt; please: export PS1
23:04  teurastaja: you can also throw random ideas for a nice prompt
23:06  teurastaja: this is a seance of creativity
23:07  pcard: nDuff: I didn't merely choose here, I chose a small handful of tech channels with topics most likely to have people searching such archives, at least I guessed as much.
23:07  nDuff: pcard, ...so you're cross-posting; even better.
23:07  pcard: nDuff: I wasn't meaning to be disrespectful or anything like that, just wanted to know if anyone knew something I didn't, like maybe some good archive out there that isn't well known
23:08  pcard: nDuff: honestly, cross-posting isn't always a bad thing
23:08  alesan: pcard, I agree with you, this channel is a good catch-all
23:08  alesan: pcard, done with moderation of course
23:08  pcard: I hardly ever do it if at all, but this seemed like a rare time when it seemed like a good idea
23:08  pcard: alesan: ?
23:09  alesan: I understand back in time when the internet was different
23:09  pcard: alesan: I wasn't using this channel as any sort of "catch all", so I'm not sure what you mean
23:09  alesan: but now complaining about cross-posting on IRC when a single youtube video equals to moths of intense IRC :)
23:09  pcard: agreed
23:10  nDuff: *plonk* *plonk*
23:10  nDuff: (re: YouTube -- netiquette has nothing to do with bandwidth budget, and everything to do with attention budget; guess which one is the scarce resource)
23:11  pcard: I mean a simple 2-3 line question (depending on your window width) posted in 3-4 channels hardly seems like a big dea lto me, yet some people act like I just went on a shooting rampage with a porn-spam gun
23:11  alesan: if he has ignored use why he asks questions to us? I call the bluff :)
23:11  pcard: it really shows me how out of touch some people are
23:11  pcard: heh
23:12  teurastaja: no one has a cool bash prompt?
23:12  go|dfish: people should be limited to 1 IRC channel at a time, to prevent cross-posting!
23:12  pcard: go|dfish: lol
23:12  teurastaja: goldfish: limitations would soon be circumvented by hackers
23:13  go|dfish: Damn!
23:13  nDuff: go|dfish, ...as long as social measures are adequate, I see little need for attempting technical ones.
23:14  pcard: nDuff: social messure are one thing, but there is such as thing as taking it a little too far
23:15  pcard: I mean if I were to go on some rant and do it in several channels, I could understand some people getting irrated, but not over a single simple straightforward one liner posted to about 4 channels
23:20  Buglouse: what is wrong with: printf "%.0s${string}" {1..${length}}
23:21  vkues: Buglouse: brace expansions is performed before parameter expansion
23:21  cthuluh: !pf ..$
23:21  greybot: http://mywiki.wooledge.org/BashPitfalls#pf32 -- Don't do this! -- for i in {1..$n}
23:21  cthuluh: the bash pitfalls page is an interesting thing to read
23:23  pcard: ouch
23:32  sloof3: greybot: It was a stray space at the end of the line
--- Log closed Mon Jan 17 23:46:14 2011
--- Log opened Mon Jan 17 23:46:33 2011
23:46 --- Users 574 nicks [0 ops, 0 halfops, 0 voices, 574 normal]
23:47 --- Channel #bash was synced in 88 seconds
23:52  kingsley: Can code in a function refer to a passed parameter by name, instead of position?
23:52  kingsley: If so, how could the following example be fixed?
23:53  nDuff: kingsley, if you write code to parse them out, yes, but that's something you'll need to do.
23:53  kingsley: 4#  f(a,b){ echo $a and $b ; }
23:53  shbot: kingsley: bash4: syntax error near unexpected token `a,b'
23:53  nDuff: ...err.
23:53  nDuff: oh, _that's_ what you mean
23:54  nDuff: no, there isn't support for named parameters
23:54  vkues: that's usually done by "-a value"
23:55  cthuluh: 4# a=foo b=bar; f(){ echo "${!1} ${!2}"; }; f a b
23:55  shbot: cthuluh: foo bar
23:55  cthuluh: that's the "best" you can get
23:55  vkues: I think the best is what I just said ;P
23:55  vkues: Alternatively you could use associative arrays
23:55  kingsley: vkues: Please show us an example.
23:55 * nDuff presumes vkues is referring to FAQ 35-style parsing
23:56  vkues: kingsley: -a is the name
23:56  aleray: hi, how can i dump the ouput of this command in mysql? ssh user@site.org 'mysqldump  -u user --password="secret" mybd'
23:56  nDuff: !faq 35
23:56  greybot: http://mywiki.wooledge.org/BashFAQ/035 -- How can I handle command-line arguments (options) to my script easily?
23:56  vkues: kingsley: the order then does not matter.
23:56  vkues: kingsley: that's how what you want to do usually is done in shells
23:56  vkues: or, shell scripting.
23:59  kingsley: cthuluh & vkues : Thanks for the reality check.
--- Log closed Tue Jan 18 00:00:37 2011
