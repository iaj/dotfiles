--- Log opened Wed Nov 17 11:21:13 2010
--- Log closed Wed Nov 17 11:21:13 2010
--- Log opened Wed Nov 17 11:53:50 2010
11:53 --- Users 521 nicks [0 ops, 0 halfops, 0 voices, 521 normal]
11:54  sly007: ------------------- wp-config.php
11:54  sly007: I am lost
11:54  sly007: i don't understand how this is possible
11:55 --- Channel #bash was synced in 87 seconds
11:55  sly007: can the file be locked by PHP for instance?
11:55  geirha: It must be the fs
11:55  sly007: geirha: it's in /home and I can touch a file in the directory
11:56  sly007: actually /home/myuser/........../wordpress
11:56  geirha: sly007: And can you edit the touched file?
11:56  sly007: geirha: yes
11:56  sly007: geirha: and save it
11:57  sly007: although the file belong to me, and not www-data this time
11:57  sly007: but still in team team
11:57  sly007: in team grou
11:57  sly007: p
12:01  sly007: geirha: I did a chmod u-s wp-config.php
12:01  sly007: geirha: now it works
12:02  geirha: Oh, so setuid has some other meaning on your system then
12:02  sly007: geirha: debian linux
12:03  lhunath: does chmod u+s wp-config.php break it again?  and does touch foo && chmod u+s foo break foo?
12:03  lhunath: seems unlikely.
12:04  lhunath: OTOH; maybe some kind of kernel-level protection is in place that prohibits modification of setuid files unless you own them.
12:05  lhunath: setuid files that aren't binary executables are pretty dumb, though
12:08 --- Weust`afk is now known as Weust`
12:10  geirha: Using those same permissions, the file turn from -rwSrwsr-- to -rw-rwxr-- when I edit it. (on Ubuntu)
12:43 --- Weust` is now known as Weust`afk
12:44 --- Weust`afk is now known as Weust`
12:46  Agiofws: hello
12:46  Agiofws: does this do anything harmful in  bash   :(){ :|:& };: ?
12:47 --- Weust` is now known as Weust`afk
12:48  lhunath: !faq :()
12:48  greybot: http://mywiki.wooledge.org/BashFAQ/059 -- I saw this command somewhere: :(){ :|:& } (fork bomb).  How does it work?
12:48  geirha: !faq fork
12:48  greybot: http://mywiki.wooledge.org/BashFAQ/059 -- I saw this command somewhere: :(){ :|:& } (fork bomb).  How does it work?
12:48  lhunath: depends on your system's configuration and definition of 'harm'
13:01  kaja: hi. what does this do? ls -l . | egrep -c '^-' ?
13:02  Riviera: kaja: it looks like an attempt to count normal files (no directories and other special files) in the current directory in a slightly broken way
13:03  kaja: how is it broken?
13:03  kaja: also, how does '^-' stop it from counting files that aren't directories? and what are special files?
13:04  Riviera: kaja: egrep processes lines, filenames themselves might be multiple lines long.
13:05  Riviera: kaja: files that are directories are displayed by "ls -l" by lines starting with a "d", normal files with a "-", special files could be named pipes, block special files, character special files, etc.
13:06  kaja: ahh
13:06  kaja: nifty
13:07  kaja: next question. i'm using something like this:
13:07  kaja: shopt -s autocd
13:07  kaja: PROMPT_COMMAND='if [[ $PWD != $OLDPWD ]]; then ls; fi
13:08  kaja: the trouble with PROMPT_COMMAND, although it works, is not it runs ls after any command I run :(
13:08  kaja: how can i do something instead of PROMPT_COMMAND that'll only run then i cd
13:09  koala_man: kaja: make a function called cd to override it
13:09  kaja: koala_man: ?
13:10  kaja: there's only one solution i can think of but it's not very elegant
13:10  Riviera: kaja: OLDPWD does not change after the prompt_command ran once
13:10  kaja: Riviera: huh?
13:10  Riviera: kaja: that's why it will execute ls also a second and third time
13:10  kaja: yes it's not very good
13:11  Riviera: kaja: of course not, it does not work the way you want to
13:11  kaja: hm ok
13:11  kaja: ok solution
13:11  Riviera: kaja: i told you why, maybe it helps fixing it.
13:11  Riviera: :)
13:11  Riviera: anyway, lunch ~
13:11  kaja: Riviera: ah it's you
13:11  koala_man: cd()  { builtin cd "$@"; ls; }
13:11  kaja: now i understand why what you said is better!
13:11  kaja: koala_man: shopt won't follow that. it'll use 'normal' cd
13:13  koala_man: oh right, autocd
13:14  mseidl: koala_man: thanks
13:14  mseidl: for the question i asked 10 hours ago :)
13:15  koala_man: less than 4 hours ago
13:15  kaja: Riviera: sorry that i kind of ignored your solution before when you were cthuluh. i just didn't understand it and my project to use bash instead of a file manager is all about learning bash
13:16  kaja: i still don't really get it. i don't get what := means
13:32  twkm: even after reading the man page section for it?
13:36  kaja: ahh! there's a section
13:38  kaja: twkm: nope, still don't get it
13:38  kaja: shopt -s autocd # cd to a dir just by typing its name
13:38  kaja: PROMPT_COMMAND='[[ ${__new_wd:=$PWD} != $PWD ]] && list; __new_wd=$PWD'
13:38  kaja: so __new_wd, if it is unassigned, becomes $PWD
13:39  kaja: sorry, list should be ls
13:39  kaja: but then.. how does __new_wd ever change from $PWD?
13:44  lhunath: by changing directory.
13:48  kaja: lhunath: is this really as confusing as it seems to me?
13:49  lhunath: only a little
13:49  kaja: when i cd $@, PROMPT_COMMAND runs
13:49  lhunath: PWD changes.
13:49  kaja: when i cd, PWD changes
13:49  kaja: .. PWD changes BEFORE PROMPT_COMMAND runs?
13:50  lhunath: when you start your shell; your prompt shows.  this causes __new_wd to become $PWD = ~
13:50  lhunath: when you cd to /etc, your PWD changes.  your prompt shows, __new_wd is still ~, so the test sees that ~ is not $PWD (=/etc).  it runs the list.  then __new_wd becomes PWD (/etc)
13:51  kaja: lhunath: why does PROMPT_COMMAND run when i start my shell? it should only run when i issue a command
13:51  lhunath: uh.  no.  that's not what PROMPT_COMMAND is for.
13:51  kaja: ok i get it now
13:51  lhunath: it's a command that shows before outputting the prompt.
13:51  lhunath: err, s/shows/runs/
13:51  kaja: oh ok
13:53  kaja: lhunath: btw, list = ls
13:54  kaja: I understand! God, that was confusing
13:54  phrearch: hello\
13:54  kaja:  i guess i need to practice := some more to get my head around it
13:57  phrearch: sigh, someone put a space in this mysql pw. how can i escape it for a command like mysqldump?
13:58  kaja: lhunath: can you think of any cool programs written in bash? I saw an irc client written in bash... obviously very simple, bet easily extensible
13:58  lhunath: kaja: doubt you'll use it any more than once in a blue moon.
13:58  kaja: lhunath: don't use it though because i'm comfortable with irssi
13:58  lhunath: kaja: I wouldn't want to use any "cool programs" written in bash.
13:59  lhunath: phrearch: quotes?
13:59  kaja: lhunath: := ? Probably. In itself it isn't confusing, but using := followed by && and then updating the variable.. that sort of multilayer recursion in one line is a real mindfuck. now that i get it i'll store that little idiom in my brain on the off chance i'll need it again
13:59  lhunath: phrearch: also; why are you passing the password as an argument?
13:59  phrearch: lhunath: single or double?
14:00  phrearch: its a simple mysqldump script
14:00  phrearch: mysqldump "-u${user} -p${pw} grid > /opt/opensim/backup/sql/grid-${date}.sql"
14:00  kaja: lhunath: .. why wouldn't you want to use cool programs written in bash?
14:01  lhunath: kaja: because they'll suck.
14:01  lhunath: phrearch: do you know what quotes do?
14:01  lhunath: !args > phrearch
14:01  greybot: phrearch: Understanding Arguments and Word Splitting: http://mywiki.wooledge.org/Arguments
14:01  phrearch: ok thanks, ill read up on that
14:01  lhunath: !quotewhen
14:01  greybot: "Double quote" *EVERY* argument that contains whitespace or expansions ("$foo", "$(foo)", "`foo`"). 'Single Quotes' prevent expansions from happening at all. Also quote *, [, ], ? etc. if you don't want bash to expand them into filenames.
14:01  kaja: lhunath: so, it isn't exactly what bash is for... but some people are creative. i don't see how you could write anything off so quickly
14:01  lhunath: notice that says every *argument*
14:02  lhunath: not *all arguments into a single bunch*
14:02  kaja: people do interesting stuff with lua, javascript, etc
14:02  massimo: Hello. Is there a shorter form to check for $? return values, like   'tty -s; if [ $? -eq 0 ]...'  something like 'if [ $(tty -s) ]...'
14:03  lhunath: kaja: if people want to write a good program; they should pick a language that fits the type of program they want.  not out of an academic sense of self-accomplishment and/or massochism
14:03  phrearch: cool that worked. thanks
14:03  lhunath: ![$? > massimo
14:03  greybot: massimo: Don't do this: mycommand; if [ $? -eq 0 ] -- You're running the [ command and checking its exit code to test whether "mycommand"'s exit code is 0. That's a pointless operation, test mycommand directly: if mycommand
14:03  kaja: lhunath: why do you use semi-colons where there should be commars?
14:03  lhunath: massimo: 'if' is a keyword that runs a command and checks its exit code.  you're doing double work.
14:03  lhunath: massimo: give 'if' your command.
14:04  lhunath: massimo: if tty -s; then
14:04  lhunath: ![
14:04  greybot: [ is NOT part of the `if' syntax. It's a normal, ordinary COMMAND. The `if' just checks its exit status. See `help test', http://mywiki.wooledge.org/BashGuide/TestsAndConditionals , and http://partmaps.org/era/unix/award-example-backticks.html
14:04  kaja: lhunath: well, the irc client i saw written in bash was actually pretty clever. it was only 100 lines or so long but still usable
14:04  lhunath: kaja: I asked myself that question yesterday after reading my own sentences.
14:04  massimo: lhunath: Thanks :) You see that construction "mycommand; if [ $?..." very often around...
14:05  kaja: lhunath: haha
14:05  kaja: commas*
14:05  lhunath: massimo: you see crap bash a lot more often than good bash.
14:06 --- maxim is now known as Guest72963
14:07  lhunath: kaja: I'm sure you could write something that works well in bash and is more than just a script for a task.  but it makes little sense to *pick* bash out of all the alternatives for the job.
14:07  lhunath: you need to resort to external tools for too many tasks and bash code does not maintain well.
14:08  lhunath: also, bash is slow.
14:08  kaja: if you program is only going to be a couple of hundred lines, and speed is of little consequence, and there's not much arithmetic involved.. well.. bash would offer quick development and it would be easy to modify
14:08  kaja: your.. sorry, i'm sleepy
14:10  lhunath: sounds like a pretty small program.
14:18  stuckey: How can I get a terminal to open on login? Is this something for bashrc?
14:18  stuckey: (or other commands, such as setting the keyboard to US "setxkbmap us")
--- Log closed Wed Nov 17 20:28:19 2010
--- Log opened Wed Nov 17 20:28:40 2010
20:28 --- Users 570 nicks [0 ops, 0 halfops, 0 voices, 570 normal]
20:29 --- Channel #bash was synced in 85 seconds
20:34  taylanub: oh ok, thanks.  (i freaked out because a script of mine seems to expand * anyway. must have done something wrong somewhere, the variable is passed through like 3 functions that wrap eachother ...)
20:38 --- arvind_k is now known as arvind_khadri
20:40  taylanub: ah, "set -- $line". super smart.
20:41  greycat: if you need to retain that bit of code, then use set -f before it
20:41  greycat: otherwise, rewriting that bit would probably be better
20:44 --- Natch is now known as Natch|
20:58  arvind_khadri: !cp
20:59  greycat: http://www.opengroup.org/onlinepubs/9699919799/utilities/cp.html
21:00  c0nsumer_: hello! i need from help with this "http://pastebin.com/pfyHmUzP" all pages *.php on my website are infected with this.. how can i remove using sed, i don't know how use scape to remove this, some one can help me?
21:01  trash: hahaha.
21:01  greycat: Sounds like a question for ##php to me.
21:01  nDuff: c0nsumer_, have you fixed the security hole that got you infected in the first place?
21:02  nDuff: c0nsumer_, ...and is it always on its own line?
21:02  c0nsumer_: nDuff: yeah!
21:02  nDuff: c0nsumer_, "yeah" to which question?
21:02  c0nsumer_: nDuff: fixed
21:02  c0nsumer_: nDuff: hole fixed
21:02  arvind_khadri: greycat, I want to use the bot :)
21:02  greycat: Nobody's stopping you.
21:03  c0nsumer_: nDuff: now i need how to use sed for replace this
21:03  arvind_khadri: How do I use it ?
21:03  greycat: !faq replace > c0nsumer_
21:03  greybot: c0nsumer_: http://mywiki.wooledge.org/BashFAQ/021 -- How can I replace a string with another string in all files?
21:03  nDuff: c0nsumer_, sed -e '/uy7gdr5332rkmn/ d'
21:03  greycat: There's a bit in there about deleting lines, too.  Read the whole thing.
21:04 * nDuff defers to the FAQ
21:04  greycat: nDuff's command would write the modified data stream to stdout, not back into the file
21:04  nDuff: right
21:04  greycat: Probably a safe bet that c0nsumer_ doesn't know how to do the   ... && mv temp "$file"   bit.
21:04  c0nsumer_: nDuff: but i dont want to delete the whole line, just the expression
21:05  nDuff: c0nsumer_, that's why I asked you if the expression was already on its own line
21:05  nDuff: c0nsumer_, (which you didn't ever answer)
21:05  nDuff: s/already/always/
21:05  c0nsumer_: nDuff, sry... its mixed with another strings that i dont want to delete
21:06  greycat: c0nsumer_: and NOBODY in ##php has a fix for this ready-made?
21:06  greycat: You're the only person in the entire 525-person channel who's been infected?
21:10  spliffy_: is there a shortcut for $(!!)  ?
21:10  Riviera: A shortcut for a shortcut.
21:10  Riviera: :)
21:11  spliffy_: yes :) that'd be nice
21:11  greycat: You can't be serious.
21:12  spliffy_: i am. $(!!) are two shortcuts
21:12  trash: What the fuck do you want?
21:12  spliffy_: i want it shorter :>
21:12  greycat: !want
21:12  greybot: And I want a pink unicorn lollipop magic wand!
21:12  spliffy_: maybe you'll get it if you look for it
21:13  poisonbit: a(){ "$(!!)"; }         # one char shorcut   ?
21:14  greycat: Do you seriously run around typing complex commands and then saying, "Hey, I sure do wish I had that command's output in a variable right now!" and then typing x=$(!!) and then saying "God damn, those 7 characters sure took it out of me!  I wish I could only have to type 4 instead of 7!"
21:15  greycat: Like, more than once every 5 years?
21:15  spliffy_: no i often do: which foo
21:16  spliffy_: then ls -ld $(!!)
21:17  poisonbit: ls -ld "$(which foo)"
21:17  greycat: You could use `!!` instead -- that's one whole character shorters!
21:17  greycat: shorter*
21:17  spliffy_: po$ ls -ld !!
21:17  spliffy_: ls -ld which shell
21:17  spliffy_: ls: Zugriff auf which nicht möglich: No such file or directory
21:17  spliffy_: ls: Zugriff auf shell nicht möglich: No such file or directory
21:17  Riviera: spliffy_: ``
21:18  greycat: `!!` and !! are two different things.
21:18  spliffy_: ok, that's one char less
21:18  greycat: Not to mention the fact that !! vs $(!!) would have been THREE characters shorter.
21:32  solstice: hi. I am writing a function that will be used at the right of a pipe. how can i get the output of the pipe from within the fnunction.  need to get the input
21:33  greycat: Just read stdin, e.g. with ''read''.
21:33  solstice: ko
--- Log closed Wed Nov 17 21:41:41 2010
--- Log opened Wed Nov 17 21:41:57 2010
21:41 --- Users 575 nicks [0 ops, 0 halfops, 0 voices, 575 normal]
21:43 --- Channel #bash was synced in 98 seconds
21:43  lhunath: !io
21:43  greybot: Data and File Processing: http://mywiki.wooledge.org/BashGuide/InputAndOutput
21:55  divineant: any trap/signal wizards around? im trying to initiate a function in a script run by root, by sending SIGINT to the process from an unprivileged user, but i keep getting an kill: operation not permitted .
21:56  greycat: Only root can send that signao.
21:56  greycat: signal, too.
21:56  divineant: ok, is it just sigint? i can just change it to sigwhatever?
21:56  greycat: All signals.
21:57 * nDuff tries to imagine the level of security nightmare anything else would entail
21:57  nDuff: !wayttd > divineant
21:57  greycat: If you need an unprivileged process to send information to a more-privileged one, you might consider using a named pipe.
21:57  greybot: divineant: What Are You Trying To Do?
21:58  greycat: (There's an exception for keyboard-generated signals in foreground processes.)
21:58  Mac101: hmm can find be used with 2 arguments?
21:58  greycat: Usually find is given many arguments.
21:59  divineant: im trying to kill a process from my webserver, using normal kill -9, which also works most of the time, but sometimes it dont, for some reason. so instead i thought ill let root kill the process
21:59  greycat: there's nothing normal about SIGKILL
21:59  Mac101: i cant seem to work out how to word it from the man; find find -name *abc* -name *xyz*
21:59  Mac101: dont work
21:59  greycat: Mac101: -name '*abc* -o -name '*xyz'
22:00  greycat: Mac101: and if there are other things, you'll want \( ... \) as well.
22:00  Mac101: ah thx
22:00  greycat: !find > Mac101
22:00  greybot: Mac101: http://mywiki.wooledge.org/UsingFind
22:00  greycat: Gah, I missed a quote AND a star.
22:00  divineant: normal/brutal whatever, theres no sideeffects on the process "ices2" so nothing breaks if i -9 it
22:01  greycat: Root can deliver a signal to any process.  SIGKILL cannot be ignored.  If SIGKILL appears to do nothing, that means the process is either dead already, or is stuck in a kernel driver.
22:03  divineant: it works fine if root says SIGKILL, but not allways when  www-data does it
22:03  greycat: www-data can only deliver signals to processes running as www-data
22:03  divineant: it is running as www-data
22:04  divineant: and most of the time it works as it should, but not allways
22:05  lhunath: nonesense
22:05  lhunath: signal the right process and check the exit code of kill.
22:05  lhunath: (and don't send KILL signals)
22:05  greycat: !kill
22:05  greybot: Unsafe Use of Kill: kill -9 sends SIGKILL to a process which is the exact same thing as normal kill (SIGTERM), except that it prevents the process from cleaning up after itself. You do NOT want to use it. See http://partmaps.org/era/unix/award.html#uuk9letter
22:08  lhunath: divineant: if there's no "sideeffects" then why are you -9'ing it?
22:08  lhunath: -9 is something one does because there ARE sideeffects that one wants to AVOID.
22:09  lhunath: otherwise, you should just send SIGTERM (kill $pid)
22:09  greycat: Usually, -9 is something that one does because (a) one doesn't know what the fuck one is doing, or (b) the program in question is broken.
22:09  divineant: I guess the reason is that in my mind, -15 is go to sleep please, and -9 is DIE bastard.
22:10  divineant: so that'l be option a, hehe
22:10  lhunath: ok, so you're just being an idiot.  at least we've got that cleared up.
22:11  lhunath: if the process you're trying to terminate is gone already kill will fail and its exit status will tell you
22:11  lhunath: if it's dead already but the pid is still zombie'ing around, then what you describe may happen but is of no consequence
22:11  divineant: I know, the problem is that from my webfrontend, it wont allways kill it, and i havnt figured out why
22:12  divineant: it allways works from shell
22:12 * greycat wonders if it would be spelled "zombieing" or "zombying".
22:12  divineant: zombying, is purchase of zombies... i think
22:12  lhunath: probably neither as it isn't a verb?
22:12  greycat: divineant: the most likely reason is that you have a bug somewhere.  The signal either isn't being sent, or is being sent to the wrong PID.
22:13  lhunath: otoh; I guess you can verbify anything you like in English.
22:13 * greycat tries to think of another English verb that ends with -ie which is pronounced "ee" instead of "eye".
22:14  qfr: <greycat> So, WHAT kind of terminal are you on, and WHAT is your $TERM variable set to, etc.
22:14  qfr: PuTTy, for OpenSSH
22:14  qfr: $TERM is set to xterm
22:14  qfr: For some bizarre reason
22:14  lhunath: I'm not sure how SIGKILL affects processes that are doing IO; seem to recall NFS being exceptionally stubburn at refusing to die when the share has gone.
22:14  greycat: TERM=xterm should work OK for putty.
22:14  qfr: Ok
22:15  greycat: depending, of course, on which of the 50-or-so xterm variants your terminfo database is actually implementing
22:15  qfr: The same thing happened in the gnome-terminal too though
22:15  greycat: Can you reproduce this reliably?
22:15  qfr: Not at all
22:15  strull_: greycat: movie ?
22:16  qfr: It always seemed totally random to me
22:16  greycat: lhunath: All signals are deferred until the process is out of 'D' state, even KILL.
22:16  greycat: With an NFS hard mount, if the server doesn't respond, the process remains in 'D' state until the server DOES respond.
22:17  lhunath: what is D?  ps(1) doesn't mention it
22:18  greycat:        D    Uninterruptible sleep (usually IO)
22:18  lhunath: ah.  U       Marks a process in uninterruptible wait.
22:24  retrospectacus: how to prevent Ctrl-C from printing "^C" on the terminal?
--- Log closed Wed Nov 17 22:35:34 2010
--- Log opened Wed Nov 17 22:35:43 2010
22:35 --- Users 565 nicks [0 ops, 0 halfops, 0 voices, 565 normal]
22:36  retrospectacus: the stty command does work
22:36  greycat: Don't know what to tell you, then.  Editing ~/.inputrc and doing 'exec bash' does precisely what I said (re-enabled or disables the ^C echoing).
22:36  bolt: how can I check, from a script, if an nfs server is responding? like, query it for a version string or something. i dunno
22:36  greycat: I don't have a clue why you would be touching /etc/inputrc.  Ever.
22:37 --- Channel #bash was synced in 85 seconds
22:37  retrospectacus: I want to disable it for all users
22:37  greycat: bolt: You really can't, other than by performing a potentially-infinitely-blocking operation.  You could ping the box.
22:37  lhunath: retrospectacus: sounds silly.
22:37  greycat: retrospectacus: did it work when you used ~/.inputrc instead?
22:37  bolt: greycat: oh. damn.
22:38  retrospectacus: greycat: no it doesn't work there either
22:38  lhunath: maybe send it an UDP packet and wait a while for a CTCP response or nothing.
22:38  greycat: I suppose you could launch a child process and have it do the potentially-infinitely-blocking read, and then give up after 10 seconds or whatever.  That would leave the child process running in state 'D' until the NFS server comes back up or you reboot the client machine.
22:39  greycat: retrospectacus: what version of bash?
22:39  retrospectacus: 4.0.28(1)-release
22:39  greycat: Maybe you need bash 4.1 for the .inputrc option.  Haven't tried in 4.0.x.
22:40  greycat: let's see...
22:40  greycat: Yeah, bash 4.0.35 is ignoring my echo-control-characters setting.
22:40  greycat: So there's your answer -- upgrade! :)
22:41  greycat: !forget ^c
22:41  greybot: OK, greycat
22:41  lhunath: or use stty.
22:41  greycat: !learn ^c Bash 4.0 started echoing ^C when you press SIGINT in editing mode, which is very annoying.  To revert to previous behavior in bash 4.1: echo 'set echo-control-characters off' >> ~/.inputrc  # (No known way to fix it in bash 4.0.)
22:41  greybot: OK, greycat
22:42  lhunath: "stty -echoctl" is a known way.  Am I on ignore?
22:42  greycat: I'm not sure what the ramifications of that are.
22:43  greycat: What other programs would that affect?
22:44  lhunath: what does echo-control-characters off do when you run 'cat' and hit ^C?
22:45  greycat: The ^C is not shown.  But ~/.inputrc should not affect cat.
22:45  chalcedony: i have a file which got copied as:  $ ls ./2010-11-12pwhatever.py  - trying to copy it to a better file name i get: cp: cannot stat `.\\/2010-11-12pythonprog.py': No such file or directory
22:45  Kumul: hello, how is it possible to make du show all of the file hierarchy and not omit hard links?
22:45  chalcedony: actual command ~$ cp ".\/2010-11-12pythonprog.py" 2010-11-17pythonprog.py
22:45  greycat: Kumul: hard links do not take up any additional space.
22:45  Kumul: chalcedony, why the escape char?
22:46  chalcedony: Kumul, how do i get it to see the ./ ?
22:46  greycat: chalcedony: by typing ./
22:46  greycat: not by typing .\/
22:46  Kumul: greycat, sry for asking but! what do you mean?
22:46  chalcedony: ~$ cp ./2010-11-12pythonprog.py 2010-11-12pythonprog.py
22:46  chalcedony: cp: `./2010-11-12pythonprog.py' and `2010-11-12pythonprog.py' are the same file
22:46  greycat: Kumul: Two hard links to the same file take up the same amount of space as one hard link to that file.
22:46  greycat: chalcedony: which part of this do you not understand?
22:46  Kumul: chalcedony, you are trying to copy the same file? to the same file?
22:47  chalcedony: no
22:47  chalcedony: i was trying to copy the ./2010 to a filename with no ./
22:47  greycat: chalcedony: the ./ is not part of the filename.  It is a directory path.
22:47  lhunath: greycat: when I open a new terminal with echo-control-characters off in ~/.inputrc I get ^C in cat but nothing on the bash prompt.
22:47  chalcedony: wrong
22:47  lhunath: greycat: with stty -echoctl, I get no ^C anywhere.
22:47  chalcedony: ~$ ls 2010-11-12pythonprog.py
22:47  chalcedony: ls: cannot access 2010-11-12pythonprog.py: No such file or directory
22:48  seanjohn: how do I grab, field/line 3 with : as the separator in a /etc/usernames file?
22:48  seanjohn: using awk
22:48  lhunath: which makes sense.
22:48  chalcedony: :~$ ls ./2010-11-12pythonprog.py newpy
22:48  chalcedony: ./2010-11-12pythonprog.py  newpy
22:48  greycat: lhunath: that isn't what I get on HP-UX.  I get no ^C from either one, with 'set echo-control-characters off' in .inputrc and stty -a reporting 'echoctl'.
22:49  chalcedony: somehow it's seeing that entire line with the ./ and newpy as ONE name
22:49  k[a: lhunath: is that teaching?
22:49  greycat: chalcedony: ls 2010-11-12*
22:49  Kumul: greycat, oh... crap that breaks my whole script! oh well thank a lot :)
22:49  cthuluh: seanjohn: awk 'NR == 3 { print $3 }' # if you have more questions, ask #awk
22:49  lhunath: well; I haven't seen any terminal output ^C on me before until I started using this OS X one.
22:49  lhunath: which is when I started using stty -echoctl
22:49  chalcedony: ~$ ls 2010-11-12*
22:49  chalcedony: 2010-11-12classnotes.txt
22:49  chalcedony: 2010-11-12psychologyyahoogroupdescription.txt
22:49  chalcedony: 2010-11-12pythonprog.py
22:50  seanjohn: thank you, cthuluh. I just needed an example. Im revising a script I made.
22:50  lhunath: k[a: sorry?
22:50  greycat: chalcedony: Does that help?  Do you see now?
22:50  chalcedony: greycat, hmmmm
22:50  k[a: lhunath: ok i got it
22:51  greycat: lhunath: for whatever it's worth, opening a urxvt on Debian and repeating the 'cat' experiment, I see the ^C there.
22:51  chalcedony: ~$ vi 2010-11-12pythonprog.py  is an empty (new) file
22:51  greycat: chalcedony: ls -b 2010-11-12*
22:51  greycat: The -b may show you any weird garbage in the filename.
22:52  chalcedony: ~$ ls -b 2010-11-12*
22:52  chalcedony: 2010-11-12classnotes.txt
22:52  chalcedony: 2010-11-12psychologyyahoogroupdescription.txt
22:52  chalcedony: 2010-11-12pythonprog.py
22:52  seanjohn: cthuluh, it automatically uses : as the separator of the name and data fields?
22:52  greycat: ls -l 2010-11-12pythonprog.py
22:53  cthuluh: seanjohn: nope
22:53  chalcedony: ~$ ls ./2010-11-12pythonprog.py newpy
22:53  chalcedony: ./2010-11-12pythonprog.py  newpy
22:53  greycat: *sigh*
22:53  greycat: You are telling ls to show you TWO FILES and that is precisely what it is doing.
22:53  seanjohn: cthuluh: s, I cant use the example you gave me then, right?
22:55  seanjohn:  awk 'NR == 3 { print $3 }'    where do you specify the separator?
--- Log closed Wed Nov 17 22:55:49 2010
--- Log opened Wed Nov 17 22:56:15 2010
22:56 --- Users 563 nicks [0 ops, 0 halfops, 0 voices, 563 normal]
22:56  k[a: i thought you guys were teaching the bots...
22:56  chalcedony: bots learn faster
22:57 --- Channel #bash was synced in 91 seconds
23:05 --- Muzer is now known as MuzerAway
23:11  seanjohn: how do you concatenate a variable and a text string? like echo 'username: ' . ${user} >> /etc/usernames?
23:13  cthuluh: echo "username: $user"
23:13  cthuluh: !guide > seanjohn
23:13  greybot: seanjohn: http://mywiki.wooledge.org/BashGuide
--- Log closed Thu Nov 18 08:46:38 2010
