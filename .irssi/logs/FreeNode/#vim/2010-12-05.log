--- Log opened Sun Dec 05 00:00:32 2010
00:06 --- airborn_ is now known as airborn
00:20 --- __ls is now known as scattante
00:21 --- scattante is now known as __ls
00:58 --- eoc is now known as eoc|callback
01:17  MagusOTB: Is there a way to categorically replace one color with another in vim?
01:17  spiiph: Hmm?
01:17  MagusOTB: The color it uses to display comments shows up in my term as a dark blue, which is pretty difficult to read on a black background
01:18  MagusOTB: I could change it in the terminal settincs, but a bunch of other programs use the same color and realize that it's dark and display it assuming it will contrast with light colors
01:18  spiiph: :h :highlight
01:18  spiiph: Or just change the colour scheme
01:20  MagusOTB: cool, thanks
01:26 --- drbean_ is now known as drbean
--- Log closed Sun Dec 05 12:03:07 2010
--- Log opened Sun Dec 05 12:03:16 2010
12:03 --- Users 559 nicks [0 ops, 0 halfops, 0 voices, 559 normal]
12:05 --- Channel #vim was synced in 113 seconds
12:06  pinkisntwell: DHulme: indeed, however i'm unable to find the encoding. curiously, if i open it in firefox it displays correctly and firefox claims it is iso-8859-1, which does not include the euro symbol as far as i'm aware
12:27  kwuxalot: i have a problem: How do I insert escape codes in to a document that are printed by a shell command?
12:28  kwuxalot: Esentially I want insert_mode, ctrl_v, colon_r_space_bang_shell_command
12:28  kwuxalot: (where ctrl_v == insert literal character, like ^H)
12:29  kwuxalot: seems like a pretty straight-forward problem, but I can't figure out how to do it, or where to search in the help documents
12:30  kwuxalot: Am I kwuxing sense?
12:31  kwuxalot: or am I kwuxing in to /dev/null?
12:44  DHulme: kwuxalot: doesn't :r !cmd do what you want?
12:48  DHulme: kwuxalot: In fact, I've just tried it, and it does.
13:00  ManDay: How do I yank-append a line to the [default] register?
13:01  mhi^: ManDay: ehm, 'dd'?
13:01  DHulme: I don't think you can
13:01  ManDay: mhi^: ?!
13:01  DHulme: you can only append to registers whose names are letters
13:02  mhi^: Oh, I meant unnamed register. Nevermind.
13:02  ManDay: DHulme: can you give an example?
13:02  DHulme: "ayy followed by "Ayy
13:03  ManDay: so a capital register name appends?!
13:03  ManDay: thats... weird
13:04  ManDay: thanks
13:22  alelos: hi guys, Im getting an error when trying to use supertab plugin. First time I hit TAB I get a message <E431: Format Error in tags file "tags" > and then if I hit TAB one more time, the plugin works...Any idea how to get rid of the error message?
13:34  Somelauw: Hi, does vim support breakpoints?
13:34  Somelauw: Like you put a breakpoint somewhere and then you execute it and then it stops at that breakpoint?
13:34  spiiph: :h :breakadd
13:35  borisrorsvort: does some one know how to set your default working directory ?
13:36  spiiph: :cd
--- Log closed Sun Dec 05 13:39:40 2010
--- Log opened Sun Dec 05 13:39:51 2010
13:39 --- Users 574 nicks [0 ops, 0 halfops, 0 voices, 574 normal]
13:40  borisrorsvort: for example, right now it opens vim set in you ~/ directory thought the app is in /Application
13:41 --- Channel #vim was synced in 117 seconds
13:42  spiiph: OK, someone who knows MacOS better should answer this.
13:43  borisrorsvort: ^^
13:43  elik: spiiph: can't he just put the cd in his vimrc?
13:44  elik: spiiph: also, I don't think any OS will ask for a what working directory you want on startup
13:44  elik: gvim startup, that is
13:44  borisrorsvort: thks i'll have a look
13:48  alelos: anyone familiar with the supertab plugin around ?
13:49  jerojasro: alelos: only to complain about it....
13:49  jerojasro: vimgor: ask
13:49  vimgor: You shouldn't ask for permission before asking a question. Just ask your question, and if some one can answer, they will.
13:51  alelos: well I get an E431 error first time i hit tha TAB key. The error goes <format error in tags file "tags">. If i hit the tab key once more the error goes away and everything works
13:51  alelos: any idea how to get rid of the error ?
13:52  alelos: is tab key bound to tags or ctags or something by default?
14:02  elik: alelos: by default, no. What supertab does though, I don't know
14:03  spiiph: elik, sure, but what if he wants to open macvim from the terminal, in the current directory?
14:06  elik: spiiph: gvimrc?
14:06  spiiph: Uh, same thing?
14:07  elik: spiiph: I'm not sure I get you
14:07  nate-: anyone know how to get "require 'rubygems'" working in vimscript using the vim ruby interface
14:08  nate-: I should mention using gvim
14:20  nate-: even :rubydo require 'rubygems' isn't working
--- Log closed Sun Dec 05 15:35:24 2010
--- Log opened Sun Dec 05 17:19:27 2010
17:19 --- Users 586 nicks [0 ops, 0 halfops, 0 voices, 586 normal]
17:21 --- Channel #vim was synced in 114 seconds
17:27  ionic_: Hey. I've got multiple files in a directory and would like to open them all at once in vim, each in a new tab. I tried vim -p *.h, but only a fraction is opened and when I try to close the last tab, vim tells me there are 19 (total number of files) more to edit
17:27  ionic_: Am I missing something? :)
17:31  jamessan: that that's not the way tabs are intended to be used
17:31  jamessan: vimgor: tabs
17:31  vimgor: Tab pages are not buffers, don't try to force them to act like buffers. Consider tab pages like viewports, layouts, or workspaces. Trying to setup 1 tab page == 1 buffer is an exercise in futility. Do ':set hidden' and get started. Get FuzzyFinder, LustyExplorer or BufExplorer to make getting around your buffers easier. See http://vim.wikia.com/wiki/Category:Tabs for more info.
17:31  DHulme: ionic_: also :help -p explains why
17:32  ionic_: Hm
17:33  ionic_: tabpagemax, I see
17:34  DHulme: but as jamessan says, why would you want to open them in tabs when you can use :n ?
17:34  ionic_: So I should rather use one buffer per file and switch between them with :bn etc?
17:35  ionic_: Because I can easily see which file is currently being edited, the ordered list and which buffer has been saved and which not :)
17:35  DHulme: until you have more than a handful of files
17:36  DHulme: then all you can see is a mess
17:36  DHulme: tabs are a great feature if you only have two or three files; they just don't scale well
17:37  ionic_: Nah I'm pretty good on guessing with a few letters only, and there still is the + sign :p
17:40  ionic_: Other than that...
17:40  ionic_: How do you work with vim and git (if using git)?
17:45 --- pi-rho|away is now known as pi-rho
17:58  newbi: hello any help for me plz
17:58  newbi: http://ompldr.org/vNmZyag how do i disable highlighting
17:58  fow: hi, just ask
17:59  bosie: how does one delete every line of a selection that begins with a certain string?
18:00  fow: newbi, you mean the highlighting of "colorscheme" and "linduxed"?
18:01  fow: bosie, :g takes a range, so :'<,'>g/^foo/d  should do it (untested)
18:02  bosie: fow: works
18:02  fow: sweet
18:09 --- lumaix is now known as donisto
18:17 --- fedesilva_ is now known as fedesilva
18:17 --- madduck_ is now known as madduck
18:19  newbi: fow plz help me
18:20  fow: you didn't answer my question: <fow> newbi, you mean the highlighting of "colorscheme" and "linduxed"?
18:20  newbi: yes
18:20  newbi: i mean that
18:20 --- axiom is now known as majoh
18:21  fow: newbi, the only reason I can see for those being highlighted is because of Vim's spell support. Does :se nospell stop that highlighting?
18:21  newbi: why would it highlisht something which i didnt search
18:21  newbi: ok let me see
18:22  newbi: well yes
18:22  newbi: but does that eddect anything
18:23  newbi: effect
18:27  homekevin: newbi: Well, it effects the highlighting. Isn't that what you asked for?
18:29  newbi: thanks for the help
18:29  homekevin: newbi: I think you will also not be able to search for mispelled words or get suggestions.
18:29  newbi: :o
18:30 --- isaacs_ is now known as isaacs
18:30  newbi: is there any way to be able to get suggestions on mispelled words
18:30  homekevin: If you want 'spell', but don't want highlighting of mispellings, you're only option is to change the highlighting.
18:31  homekevin: See :h hl-SpellBad
18:32  homekevin: At least I *think* that's the only option. I haven't looked for other options.
18:32  homekevin: newbi: Or you could add words to you "good" word list.
18:32  newbi: :set nohl-spellbad??
18:33  fow: Alternatively, you can toggle 'spell' when you need spell support
18:33  homekevin: newbi: No, :help hl-SpellBad
18:34  homekevin: You'll also need :help :highlight to learn how to affect the highlighting for SpellBad etc., and you'll need :help :autocmd to learn how to make it apply to all colorschemes.
18:35  newbi: so how do i turn off highlighting for mispelled words
18:35  fow: Why would you need an autocmd? Couldn't you just set the hilight group after loading your colorscheme of choice?
18:36  fow: newbi, quick way: :set nospell
18:36  homekevin: fow: Exactly, that's what the autocmd would do.
18:37  homekevin: That way it'd take effect when you change colorschemes as well.
18:37  fow: (Sometimes I wish IRC had rudimentary formatting so that one could do a better job of saying what is meant to be typed on Vim. Fortunately I realize what a horrid idea that is soon after)
18:37  fow: homekevin, ohh, gotcha
18:37  homekevin: newbi: But really, you shouldn't be doing what I'm describing.
18:37  newbi: then what should i be doing
18:37  homekevin: newbi: Forget about :highlight and :autocmd for now, read up on spell checking.
18:38  homekevin: newbi: Read :help spell
18:38  homekevin: Learn how to add words to the good word list.
18:38  homekevin: Learn how to toggle spell checking on and off for when you do or do not need it.
18:38  homekevin: That's all you should really need.
18:39  homekevin: If you are intent on disabling spelling highlighting, people here can help you, but it's a more extreme step and requires at least low-intermediate Vim skills.
18:40  homekevin: s/at least/about
18:41  newbi: homekevin: i cant just make a good wordlist
18:41  newbi: since i often work with codes and they have comments and stuff
18:42  homekevin: That doesn't prevent making a word list
18:43  homekevin: newbi: In any case, I think you've heard your options. I have to go now.
18:43  homekevin: bbl and all that.
18:43  newbi: ok
18:43  newbi: thanks
18:47  Fatih`: It is possible that undo characters instead of actions in vim ?
18:47  Fatih`: with characters I mean those entered in instert mode
18:51  KeeperOfTheSoul: Fatih`: nope, not individual characters, you can only undo the whole edit
18:52  walt: that seems really ineffective
18:52  walt: don't know why you would want that
18:52  KeeperOfTheSoul: because you start editing and don't return to command mode resulting in one really big edit?
18:52  Fatih`: walt, I dont want that, one of my friends needed that
18:53  Fatih`: I don't have any problems with vim :)
18:53  KeeperOfTheSoul: and half way through that edit you enter something, delete it then enter something else, and then want to undo to get what you deleted?
18:53  walt: KeeperOfTheSoul: yeah, ok, I have actually had that happen a few times
18:54  jamessan: KeeperOfTheSoul: actually, you can break up undo chunks in insert mode (:help i_ctrl-g_u) so if someone really wanted, they could map every character to also create a new undo point.
18:54  walt: couldn't you somehow make a mapping for space, that would insert undo-points?
18:54  KeeperOfTheSoul: ah, didn't know about c-g u
18:54  KeeperOfTheSoul: I normally just return to command mode when I want to delete anything sizable
18:54  walt: KeeperOfTheSoul: yeah that is what I do too
18:55  walt: still, I have had that second situation you described happen maybe 10 times
18:55  jamessan: walt: :inoremap <Space> <Space><C-g>u
18:55  walt: jamessan: yeah, I didn't know about c-g u
18:55  walt: but that was exactly what I was thinkinh
19:02  Fatih`: jamessan, great tip!
19:11  anon33_: What would be a valid search&replace for blank lines? :s/<??>//g ...
19:11  WakiMiko: :s/^$//g
19:12  anon33_: WakiMiko: Pattern not found for ^$ (within a visual selection)
19:13  WakiMiko: your line probably contains whitespace
19:14  anon33_: Yeah, how might I go about finding that in a regex?
19:14  WakiMiko: try :s/^\s*$//g
19:15  anon33_: WakiMiko: Nope =(
19:15  WakiMiko: works fine for me
19:15  WakiMiko: what are you trying to do with the lines? insert a replacement or deleted them?
19:15  anon33_: For blank lines with no whitespace, they still remain
19:15  anon33_: Delete
19:15  WakiMiko: oh you never said that
19:15  anon33_: Sorry, I assumed // was a delete
19:15  WakiMiko: :g/^$/d
19:15  WakiMiko: this will delete all REALLY empty lines
19:16  anon33_: What's the prefix of g do?
19:16  WakiMiko: execute ex commands
19:16  anon33_: Ah, that did it.
19:16  anon33_: WakiMiko: Thanks a lot :)
19:16  WakiMiko: you are welcome
19:19  fow: :g/pattern/ foo says "for all lines that match /pattern/, run the command foo"
19:19  fow: (the space is optional)
19:40  veg^: is it possible to replace `text` with `some text` saving original register?
19:53 --- pi-rho is now known as pi-rho|away
19:54  dpickett: hey kind of stuck - how can I get the filetype of an open buffer?
19:55  DHulme: :set filetype
19:55  dpickett: ah thanks
19:56  dpickett: if I set a filetype on a different file why doesn't the syntax look the same? have *.mobile.erb and *.html.erb files - I want mobile.erb files to look like html.erb files
20:00  zulax: to switch between tabs using nerdtree, it says press gt and gT
20:01  zulax: whats those? doesnt look like g + t
20:01  Friesia: it's probably "press g, then t"
20:02  zulax: nop, didnt move between tabs
20:03  WakiMiko: i dont have nerdtree installed, but gt and gT switch between tabs for me
20:05  zulax: WakiMiko, like literally pressing g and t together?
20:05  zulax: or g t and shift
20:05  WakiMiko: after another
20:05  WakiMiko: g and then t
20:06  WakiMiko: or g and then shift+t
20:06  KeeperOfTheSoul: unless you have caps-lock on, then everything goes to hell :)
20:06  KeeperOfTheSoul: actually, can you set vim to ignore caps-lock in command mode?
20:06  WakiMiko: or to the bottom of the document :3
20:07  WakiMiko: (my caps lock key is disabled anyway)
20:08  KeeperOfTheSoul: I like it, since I use SQL and stick to the upper case convention, so it is useful
20:09  peth: gU + motion is too :)
20:10  KeeperOfTheSoul: peth: but annoying after entering every keyword
20:10  peth: i guess so
20:10  peth: doing *anything* special with caps lock will not work because on most systems vim will never know caps lock was even involved
20:35  elik: peth: ??
--- Log closed Sun Dec 05 20:39:27 2010
--- Log opened Sun Dec 05 20:39:52 2010
20:39 --- Users 593 nicks [0 ops, 0 halfops, 0 voices, 593 normal]
--- Log closed Sun Dec 05 20:43:48 2010
--- Log opened Sun Dec 05 20:59:59 2010
20:59 --- Users 591 nicks [0 ops, 0 halfops, 0 voices, 591 normal]
21:01 --- Channel #vim was synced in 113 seconds
21:02  Somelauw: When I use tabs gvim becomes unresponsive.
21:05  Somelauw: For example :tab split will make gvim become unresponsive completely.
21:09  Somelauw: Anyways, are tabs as buggy for everyone or is there some known bug or some trick I should use when using them?
21:10  dindinx: vimgor: tabs
21:10  vimgor: Tab pages are not buffers, don't try to force them to act like buffers. Consider tab pages like viewports, layouts, or workspaces. Trying to setup 1 tab page == 1 buffer is an exercise in futility. Do ':set hidden' and get started. Get FuzzyFinder, LustyExplorer or BufExplorer to make getting around your buffers easier. See http://vim.wikia.com/wiki/Category:Tabs for more info.
21:10  DHulme: Somelauw: I've never seen a problem like you're describing.
21:11  DHulme: Somelauw: If you have set the option that uses an expression to generate tab names, and the expression is slow to evaluate, that would explain it.
21:12  Somelauw: It happened again
21:12  Somelauw: I switched to my chat windows and now it is sort of frozen again.
21:12  Somelauw: I haven't set an option to generate a tab name myself.
21:13  Somelauw: It managed to open a tab name, but as soon as I started Alt-tabbing, it became unresponsive suddenly.
21:13  Somelauw: Are there any tests I can do with the frozen window since I haven't closed it yet?
21:14  Somelauw: I don't know how gdb works.
21:14  Somelauw: Unfortunately.
21:14  elik: peth: ah, I see :)
21:15  Somelauw: Also my gvim menus are stil working.
21:15  Somelauw: Only the buffer is frozen.
21:16  nroc: kongo: thanks a lot man, totally sorted me out :)
21:16  Somelauw: Shall I report it as a bug?
--- Log closed Sun Dec 05 21:22:59 2010
--- Log opened Sun Dec 05 21:28:37 2010
21:28 --- Users 592 nicks [0 ops, 0 halfops, 0 voices, 592 normal]
21:30 --- Channel #vim was synced in 120 seconds
21:31  singlecore: dudes
21:35  singlecore: how can i use FileType event to set custom options ?
21:38  jamessan: singlecore: why not just put them in ~/.vim/after/ftplugin/$filetype.vim (e.g., php.vim)?
21:39  singlecore: jamessan, there's no reason why not :) your answer was what i looked for
21:39  singlecore: thx
21:49  Somelauw: Also gvim isn't visible in top.
21:50  Somelauw: Is that because I ran it from gnome-terminal?
21:52  Somelauw: Also the buffer becomes responsive again when selecting the buffer from the buffer menu.
22:02 * spiiph works too seldom with text, and keeps hitting f. instead of ) to move between sentences. :(
22:05  bairui: spiiph: map f. )   for text files   :)
22:07  spiiph: Hah, no, I prefer the way ) works
22:08  singlecore: dudes i messed up somewhere when playing around with text substitutions
22:08  spiiph: I'm just not used to using it
22:08  singlecore: inoremap <C-i> \begin{itemize}<CR><CR>\end{itemize}<Up><Tab>\item
22:08  singlecore: does work fine when doing ctrl+i in insert mode
22:08  singlecore: but it also "works" when just tabbing ...
22:09  singlecore: how can i track that motherfucker down?
22:09  DHulme: singlecore: in the terminal, ctrl-i and tab are the same
22:09  singlecore: ah see
22:09  singlecore: but it also does it in gvim
22:10  DHulme: gvim reflects Vim's terminal legacy in that respect, I believe
22:10  singlecore: kk
22:10  jamessan: that's due to how Vim was written.  it specifically reads the input (which does distinguish) and munges them to look the same
22:11  singlecore: so is there any workaround for this?
22:11  jamessan: so, in the terminal it's due to lack of a good way to communicate the difference.  in gvim, it's due to discarding information that does show the difference
22:11  jamessan: sure, change Vim's input layer
22:11  jamessan: :)
22:11  singlecore: lol
22:12  singlecore: didnt want to dig THAT deep
22:12  singlecore: k so ill just remap the "i" to say, "t" in my brains
22:13  singlecore: ill edit my ~/.brainrc
22:13  DHulme: don't map ctrl-t in insert mode
22:13  jamessan: <C-t> is useful
22:14  DHulme: it's too useful
22:14  peth: singlecore: trying to find ctrl key mnemonics is generally hopeless. use <Leader> mappings for that
22:14  jamessan: singlecore: what didn't you like about surround?
22:14  singlecore: nah
22:15  singlecore: i didnt go into surround
22:15  singlecore: sry my son uk8 ne epb keeps me from typing
22:16  singlecore: i just wanted to have two three simple text substitutions
22:16  singlecore: and i didnt want to dig nto surround cuz i havent the time to figure out how to get surround to do what i need
22:16  jamessan: *shrug* surround handles \begin{...}/\end{...} quite easily and makes a lot of other things very easy
22:17  jamessan: Vs\itemize<CR>
22:18  singlecore: jamessan, i believe that
22:18  singlecore: but i just didnt want to RTFM of surround
22:19  singlecore: peth, why is that?
22:19  DHulme: because they're all taken
22:19  singlecore: by whom?
22:19  jamessan: Vim
22:19  DHulme: by useful built-in commands
22:19  peth: singlecore: by functions mor useful than you will want to map there :)
22:19  DHulme: F keys are a productive source of unused keys
--- Log closed Sun Dec 05 22:23:40 2010
--- Log opened Sun Dec 05 22:29:05 2010
22:29 --- Users 598 nicks [0 ops, 0 halfops, 0 voices, 598 normal]
22:30 --- Channel #vim was synced in 115 seconds
22:36  c3l: ive mapped jj to <esc> in insert mode. it works great in gvim, but not at all when running vim through the terminal. why is this?
22:37  jamessan: c3l: what does ":imap jj" say in terminal vim?
22:38  singlecore: DHulme or jamessan, i dont get why <C-t> is too useful to remap it ... does it do some other magic than just insert some indent?
22:39  c3l: jamessan: i guess thats what im asking :$. i dont get why it should be any different, imap - when in insert mode map.. jj - key combination..
22:40  jamessan: singlecore: that's exactly why it's useful.  it and <C-d> let you change the indent level of the current line regardless of where your cursor is on the line.  it's what should be used instead of trying to get <Tab>/<BS> to work properly (which also requires your cursor to be at the start of the line)
22:40  jamessan: c3l: no, I wanted you to run that command and tell me what it says
22:40  jamessan: I understand your request, I'm just trying to debug :)
22:41  singlecore: jamessan, i see your point ...
22:41  c3l: jamessan: I get "i  jj            <Esc>" back
22:42  singlecore: though i dont think i couldnt live with just <POS1> <Tab> <End>
22:42  jamessan: c3l: ok. so how doesn't it work in terminal vim?
22:43  jamessan: singlecore: that assumes you're editing the end of the line and not somewhere in the middle of the line :)
22:43  c3l: jamessan: well, pressing jj in insert mode in gvim takes me to normal mode. that does not happen when running vim via the terminal
22:43  bairui: :) knowing the purist that you are, spiiph, I was just kidding. :p So... how to train the fingers to ) instead of f. when texting...?
22:43  jamessan: c3l: so after pressing jj, anything you type is inserted?
22:44  singlecore: jamessan, thats right :)
22:44  singlecore: u got me!
22:45  c3l: jamessan: well yeah, the 2 j's are inserted as normal, and im still in insert mode
22:46  jamessan: odd
22:50  jamessan: c3l: could you try ":inoremap jj <Esc>"
22:51  c3l: jamessan: still nothing :o well thanks for your help anyways, this seems to be too strange for me to bother right now :)
22:58  singlecore: jamessan, after 5 mins of playing around with <C-t> and <C-d> i must say that i now feel your point :)
22:58  singlecore: especially when tabs are set to spaces it can be quite annoying removing them ..
23:15  ezzieyguywuf: how can I do 'replace word' such that if I replace it with less characters, the remaining space is filled as whitspace?
23:21  spiiph: ezzieyguywuf, with difficulty. Try gR
23:22  spiiph: And then <Tab> or <Space> over the remaining characters
23:23  homekevin: Maybe with a mapping that replaces the word with an equal number of spaces and drops you into Replace mode.
23:23  homekevin: But no direct way that I know of.
23:23  ezzieyguywuf: hrm, ok thanks guys. I ended up doing {Visual}r then r againg
23:23  ezzieyguywuf: s/againg/again/
23:27  Somelauw: Is the following line correct?
23:27  Somelauw: map <F-6> exec("!python " . expand("\"%:p\"") . input(expand("%:t ")))
23:27  strull_: Somelauw: obviously not
23:28  homekevin: I think not
23:28  Somelauw: Why not?
23:28  homekevin: Well, <F-6> doesn't mean anything, I think
23:28  Somelauw: Is it because it contains spaces?
23:28  homekevin: And you need to read the description of expand() again.
23:29  strull_: and you need a : before exec
23:29  homekevin: exec isn't a function
23:29  Somelauw: Oh, it's <F6>
23:29  homekevin: And if it were a function you'd need to :call it.
23:31  aleray: ls
23:32  strull_: homekevin: not sure what you mean with "isn't a function". :exec("ls") would work
23:32  singlecore: ey dudes
23:32  singlecore: doin inoremap <Leader> \blah
23:33  singlecore: inserts me a tab before inserting the text
23:33  singlecore: my leader char is \
23:33  singlecore: do i need to escape the \ in the mapping somehow?
23:33  strull_: singlecore: that is not how <Leader> works
23:34  singlecore: oops strull_
23:34  singlecore: forgot the i
23:34  singlecore: inoremap <Leader>i \blah
23:34  singlecore: that was what i meant ..
23:35  homekevin: strull_: Well, that's fine that it works. :exec is still not a function.
23:35  homekevin: :exec(((("l" . "" . "s")))) would also work.
23:35  strull_: still not sure what your point is
23:36  homekevin: I happen to not prefer unnecessarily complex expressions.
23:36  singlecore: strull_, the mapping is expected to insert the string "\blah"
23:36  singlecore: but it inserts the string "<Tab>\blah" instead
23:37  singlecore: without the \ i dont have the prooblem
23:38 --- sjl_ is now known as sjl
23:38  c3l: the plugin 'taglist' seems great, but it also looks dead since 3 years ago, is there some continuation of it that is being used instead, or whats the situation?
23:38  homekevin: singlecore: Works for me.
23:39  singlecore: hmm
23:39  singlecore: inoremap <Leader>i \blah
23:39  singlecore: works?
23:39  homekevin: singlecore: I replaced <Leader> with \  ...but other than that, yes.
23:40  singlecore: without any unwanted tabs?
23:40  homekevin: OK, I tried it with <Leader> and it still works.
23:40  homekevin: My leader is comma, though.
23:40  singlecore: tried it with comma too
23:40  singlecore: its the same
23:41  Somelauw: Okay, I think I fixed my mapping.
23:42  Somelauw: I couldn't find an error in the way I used expand, but it works correctly.
23:43  homekevin: singlecore: Start with vim -u NONE -U NONE -N so you can try it without interference from plugins an initializations.
23:43  singlecore: homekevin, ok just tried it with an empty .vimrc and it works
23:43  singlecore: prolly there is some conflict
23:44  homekevin: singlecore: Were you the one with 70 mappings? I don't recall.
23:44  singlecore: no .. :)
23:44  homekevin: OK.
23:44  singlecore: i only have 10
23:44  singlecore: or so ..
23:44  homekevin: Well, you might try pastebining :verbose map
23:46  Somelauw: I got map <F5> :exec "!python " . expand("\"%:p\" ") . input("python " . expand("%:t") . " ")
23:46  homekevin: singlecore: Or, if :inoremap <Leader>i \blah wasn't literally what you were testing with, maybe tell us what it actually was.
23:46  singlecore: homekevin, can i pipe the output to a file somehow?
23:46  homekevin: singlecore: You can redirect to a register. It's slightly tricky
23:46  homekevin: That's code for "I'll show you in a minute"
23:47  homekevin: singlecore: :redir @+|silent verbose map|redir END
23:47  homekevin: That puts it in register + so you can paste directly from the cl
23:47  homekevin: ...clipboard
23:47  homekevin: Somelauw: I think that expand()
23:47  homekevin: is still wrong.
23:48  homekevin: Somelauw: I don't know, it might work.
23:48  singlecore: homekevin, http://pastebin.com/6tX4KKer
23:48  homekevin: But normally expand()'s argument should start with %, #, or <
23:49  singlecore: nice thing btw that redirection cmd
23:49  homekevin: Yeah, I need to tell vimgor about it.
23:49  homekevin: vimgor: redir
23:49  vimgor: Dunno!
23:49  homekevin: vimgor: redirect
23:49  vimgor: No idea, homekevin.
23:49  singlecore: lol
23:49  singlecore: stupid binary motherfucker
23:50  Somelauw: So the quotes should be outside of the expand? (It seems to work like this, but maybe there is some subtle bug)
23:50  homekevin: So singlecore, is one of those the non-working one?
23:50  singlecore: wait i think there was more
23:50  singlecore: its only 20 lines
23:50  homekevin: singlecore: What language is that?
23:51  singlecore: german
23:51  homekevin: Ah.
23:51  singlecore: a very nasty language
23:51  homekevin: I watched a German film last night. I couldn't keep up.
23:51  singlecore: yea its nasty
23:51  homekevin: Reading the subtitles, I mean.
23:51  singlecore: im not a german so whatever
23:51  homekevin: They talk too fast, I guess. :)
23:51  singlecore: gotta live with it
23:52  homekevin: The film was Downfall. Spoiler: The Nazis lose.
23:52  lucs: (Bruno Ganz)++
23:52  singlecore: yea they lost ..;)
23:53  lucs: I really liked that movie -- very dark though.
23:53  Somelauw: It doesn't work anymore when I try to append . "<CR>"
23:53  singlecore: homekevin, i cant see any of my mappings there
23:54  homekevin: Somelauw: I *think* you want the <CR> to be literal, not as part of the string.
23:54  singlecore: is it a logfile?
23:54  homekevin: singlecore: I'm not following. You meant the paste isn't actually your mappings?
23:54  singlecore: wut
23:54  singlecore: wait
23:55  singlecore: now it works
23:55  singlecore: wtf
23:56  singlecore: homekevin, it's weird but now i got the cause
23:56  singlecore: i was trying the mappings in my .vimrc file
23:57  singlecore: tryin around in some other file did not fuck the mapping up
23:57  singlecore: wtf is that?!?
23:58  homekevin: singlecore: Some plugin could define conflicting mappings for certain file types.
23:58  singlecore: i see
23:58  glyph: Hi there
23:58  glyph: I'm trying to write a plugin which adds color to the statusline for displaying something
23:58  homekevin: That's why you always need to gather info from the window and buffer where the problem is observed.
23:58  glyph: (specifically, if it matters, I am trying to add the name of the enclosing syntactic element, such as class/function/method)
23:59  singlecore: ok ic
23:59  glyph: statusline's %{} feature doesn't let me include color codes
23:59  homekevin: glyph: It doesn't look like it should.
23:59  glyph: but if I use the %! feature instead, winnr() is wrong; the documentation says it's supposed to be the window whose status line is being rendered, but it is always just the active window
--- Log closed Mon Dec 06 00:00:07 2010
