--- Log opened Tue Nov 16 00:00:30 2010
00:16 --- jhaddad_ is now known as jhaddad
00:24 --- rivoot_away is now known as rivoot
--- Log closed Tue Nov 16 00:34:56 2010
--- Log opened Tue Nov 16 00:35:14 2010
00:35 --- Users 587 nicks [0 ops, 0 halfops, 0 voices, 587 normal]
00:36 --- Channel #vim was synced in 73 seconds
00:46  BadHorsie: Is there a good php plugin that shows function expected parameters like those IDEs?
00:49  spiiph: ctags and taglist.vim, I think
00:52  BadHorsie: Thanks
00:54  lumgwada: BadHorsie: :he ft-php-omni
00:55  BadHorsie: Aaaaaaaawesome
00:56  BadHorsie: I was thinking of maybe learning to do a plugin and connect to php.net with the function name, but maybe later
00:57  lumgwada: BadHorsie: theres a couple that do that already.
00:57  lumgwada: this one can be configured to do that http://www.vim.org/scripts/script.php?script_id=2227
00:57  lumgwada: although I think the built in omni gives a decent enough description
00:58  BadHorsie: Indeed, I wasn't aware omni completition worked that nice
00:59  BadHorsie: Thanks again
01:02  UserX7: how do i add python3 syntax highlighting to my .vimrc?
01:19  BadHorsie: lumgwada: I wonder if there's some notification of missing parameters like some color change or something for functions...
01:20  lumgwada: BadHorsie: not sure for php. it's been a while since I've used the language heavily.
01:22  BadHorsie: Ok, I see something like "preg_replace_callback(mixed pattern, callback callback, mixed subject [, int limit [, int &#38;count]] | mixed" but maybe I'm just being too lazy to generate a regexp out of it and check for the current omni-completing string
01:43  e0\m2x: what is the best way to move through/replace arguments in something like: BLAH blah BLAH ('this one', 'and this', 'and change this one')
01:44  e0\m2x: i just started using vim today
01:46  Accolade: e0\m2x, idk if it's the best one, but one way is f'l then repeatedly ; for movement, ci' for replacing there
01:47  Accolade: e0\m2x, or do you want to search/replace automatically (via regex that would be)?
01:47  e0\m2x: nope not search/replace
01:48  e0\m2x: just the most effective way to navigate through/change arguments
01:48 --- TK is now known as Guest8348
01:48  e0\m2x: learning the basics, trying to not over-convolute the keystroke commands im doing
01:48  e0\m2x: ill try what you suggested
01:49  e0\m2x: f' is nice, didn't know about that
01:49  Accolade: :)
01:51  e0\m2x: what does ci do?
01:51  fow: e0\m2x, :h text-objects
01:51  Accolade: e0\m2x, it stands for "change inner"
01:52  e0\m2x: ah okay, with your examble above ciw seems to do what i wanted
01:52  e0\m2x: and im not sure what ci does haha
01:52  Accolade: e0\m2x, ci' = change inner '-string
01:53  e0\m2x: or ce
01:53  fow: e0\m2x, ci itself does nothing, it waits for another character to complete the text-object
01:53  fow: *Vim waits
01:53  e0\m2x: oh okay thats why i was confused
01:53  Accolade: e.g. in "(ab cd yz)", if your cursor is on the d character and you type ci( then a to z is cut and you are in insert mode between the brackets
01:54  e0\m2x: oh thats sweet
01:54  Accolade: indeed
01:55  Accolade: btw, small correction on my first answer: you can drop the l in f'l because ci' will also work on the '
01:55  Accolade: so f';;;ci' is fine
01:56  e0\m2x: oh very nice, thanks
01:56  Accolade: or 4f'ci'
02:02  e0\m2x: would any of you happen to know where i put the vimrc using Cream on windows?
02:02  e0\m2x: i dropped it into $vimruntime\_vimrc and just told it to "colorscheme wombat"
02:02  e0\m2x: but im not getting my colorscheme when it loads up
02:06  e0\m2x: humm theres one preinstalled in in $vim\_vimrc but it doesnt seem to heed my colorscheme request
02:08 * e0\m2x scratches head
02:08  e0\m2x: there is a gvim_example.vim in $vimruntime telling me to put a _gvimrc in $vim but that still doesn't have it load up my colorscheme =/
02:09  anon33_: for some reason, :map 0 ^ isn't applying from my .vimrc although :verbose map 0? returns that line. What 0 does instead is jump to a character in that line
02:09  anon33_: how might i go about diagnosing this problem?
02:12  Accolade: e0\m2x, try if/which of these are loaded by appending an :echo expand("%:p")
02:13  Accolade: e0\m2x, does :colorscheme wombat work when you do it manually?
02:14  e0\m2x: Accolade: yep to the second question
02:14  e0\m2x: and as for that first command it seems to just tell me the name of the file im working on
02:15  e0\m2x: mighty odd
02:16  e0\m2x: i wonder if its because the _gvimrc saying "colorscheme wombat" is in $vim while the colorscheme is in $vinruntime\colors\
02:16  Accolade: e0\m2x, sorry, idk why, but that expand thing doesn't work for me either from vimrc, strangely indeed
02:18  e0\m2x: does vim open multiple files at once btw?
02:18  e0\m2x: i only see one file at a time but i get some kind of impression that its holding others open
02:21  Accolade: e0\m2x, yes it can. I think :buffers lists them
02:22  Raimondi: :ls
02:23  Accolade: e0\m2x, you can queue several files for opening via e.g. "vim *.txt", then go through them via :cn[ext]
02:23  Accolade: (I think)
02:24  Raimondi: Nope, see  :h :cnext
02:24  e0\m2x: k so i looked at my buffers and i have like 5 files .. open? how do i close all of them but the one im working on
02:25  Raimondi: e0\m2x:  :h usr_07.txt
02:25  e0\m2x: are they actually open like... a separate process? (like how chrome has tabs but they're all open processes)
02:25  Accolade: ah, it's just :n[ext]
02:25  Raimondi: e0\m2x: Why do you want to close them?
02:25  e0\m2x: memory
02:26  e0\m2x: i mean i have 4gb ram but... if i was using EditPlus and i had like 6 files open and i only was working on 1 i'd close the rest
02:26  Raimondi: :h :bdelete
02:26 * Accolade thinks it's funny you'd close text files to save a portion of your 4 gb of RAM ;)
02:27  Accolade: I think they are not seperate processes, no
--- Log closed Tue Nov 16 02:32:51 2010
--- Log opened Tue Nov 16 02:33:10 2010
02:33 --- Users 571 nicks [0 ops, 0 halfops, 0 voices, 571 normal]
02:34 --- Channel #vim was synced in 74 seconds
02:34  e0\m2x: okay now i feel like the big newb i am
02:34  e0\m2x: i did :h :bdelete and now i dont know how to get out of that =P
02:34  gkatsev: :q
02:34  e0\m2x: ah there we go
02:34  gkatsev: :)
02:34  e0\m2x: did that like split the screen in half? o.O
02:35  gkatsev: yes
02:35  gkatsev: vimgor: windows
02:35  vimgor: For a quick intro to vim's windows, buffers, and tabs, see http://img200.imageshack.us/img200/9031/windowsv.png and http://vim.pastey.net/115548
02:36  e0\m2x: so much to learrrn
02:36  e0\m2x: haha
02:36  e0\m2x: i try one thing i get wrapped up in like 5 more
02:37  gkatsev: lol, that's how it always is
02:37  Accolade: yeah :)
02:37  gkatsev: hang out in here and you'll learn a lot
02:37  e0\m2x: try to use help and now im trying to figure out the complexities of windows =P
02:39  e0\m2x: how is the bulit-in bracket hilighting supposed to work? i did :set showmatch as something i found on a site but it isn't doing anything
02:40  e0\m2x: perhaps it isnt built in and the site is referring to some script? idk
02:40  gkatsev: e0\m2x: :h 'sm'
02:47  ezzieyguywuf: how do I prevent vim from soft-wrapping, such that I have to scroll horizontally?
02:48  e0\m2x: Accolade: how do you do the ; but going backwards?
02:49  gkatsev: ezzieyguywuf: you want a hardwrap? see :h 'tw'
02:49  Accolade: e0\m2x: ,
02:49  ezzieyguywuf: gkatsev: no no, I don't want any wrap
02:50  Accolade: e0\m2x, as per :h ;
02:50  gkatsev: oh
02:50  gkatsev: ezzieyguywuf: it's a setting somewhere
02:50  gkatsev: let me see
02:50  ezzieyguywuf: I have a tw set, but i've forced some lines to be > tw, and I want to just scroll to see these
02:51  ezzieyguywuf: gotit! set nowrap
02:58 --- peth_ is now known as peth
03:03  e0\m2x: is there a way to like, cancel visual mode without having to hit 'y' and copy the text
03:03  Accolade: e0\m2x, <Esc>
03:05  e0\m2x: if i hit like vi) to select everything inside my paren, i cant get back to 'command mode' by hitting Esc
03:05  e0\m2x: only y
03:06  Accolade: e0\m2x, that's strange, works for me
03:06  e0\m2x: like if i hit vi) .. and then Esc.. and then navigate around, it continues to hilight text
03:06  e0\m2x: but when i hit y it goes to insert mode and stops the hilighting
03:07  fow: e0\m2x, I'm going to blame that on Cream
03:07  Accolade: :h visual-start says: If you use <Esc>, click the left mouse button or use any command that does a jump to another buffer while in Visual mode, the highlighting stops and no text is affected.  Also when you hit "v" in characterwise Visual mode, "CTRL-V" in blockwise Visual mode or "V" in linewise Visual mode.  If you hit CTRL-Z the highlighting stops and the editor is suspended or a new shell is started |CTRL-Z|.
03:07  fow: y in visual mode should not take you to insert mode
03:07  Accolade: cream is strange
03:08  gkatsev: I use the cream without the cream builds of vim for windows
03:08 --- badone_ is now known as badone
03:09  Accolade: gkatsev, why
03:09  gkatsev: Accolade: they are up-to-date
03:09  Accolade: gkatsev, then don't you mean that you use the cream builds of vim for windows without the cream?
03:10  Accolade: oh, I guess that was "I use the <cream without the cream> builds of vim for windows"
03:10  gkatsev: yeah
03:10  Accolade: not "I use the cream without the <cream builds of vim for windows>"
03:11  Accolade: natural language is a bitch ;)
03:11  walt: where can I find what values correspond to which colours in a 256-color scheme_
03:11  walt: ?
03:11  gkatsev: Accolade: you need to update your parser
03:11  gkatsev: vimgor: csapprox
03:11  vimgor: CSApprox is a plugin written by godlygeek to make GUI-only colorschemes Just Work in 88-/256-color terminals. It can be downloaded at http://www.vim.org/scripts/script.php?script_id=2390
03:12  walt: gkatsev: that's not what I want. I want to actually enter colours into a 256-theme
03:13  gkatsev: godlygeek has something for that, I think as well
03:13  gkatsev: don't remember the name.
03:13  Accolade: gkatsev, heh I guess
03:14  gkatsev: :P
03:15 * Accolade Time flies like a banana
03:17  Eiler: i try to call a script from inside vim, so i do: map <F9> :!dmakex.sh :file<CR>
03:18  fow: Eiler, are you expecting :file to print the name of the current file?
03:18  Eiler: but when i call the script by pressing f9, it says: :!dmakex.sh :file, :file: Not a c++ source file
03:18  Eiler: even though it is
03:18  Eiler: yes i am
03:18  spiiph: What do you expect :file to actually do?
03:18  spiiph: Because your script is using :file verbatim
03:18  fow: It doesn't here, as it's not interpreted as a Vim command. ":file" is passed literally. Instead use "%" without quotes
03:18  Eiler: to be replaced with the filename of the opened file
03:18  spiiph: That's not the way to do it
03:19  Eiler: map <F9> :!dmakex.sh %?
03:19  spiiph: :h :_%
03:19  spiiph: And I suggest looking into :h :make
03:19  Eiler: what does make have to do with it?
03:20  Eiler: this script creates a makefile
03:21  Eiler: i dont really get it, map <F9> :!dmakex.sh :h :_%?
03:21  spiiph: Okay. It sounded like you were compiling, and could benefit from quickfix.
03:21  spiiph: :h is :help
03:21  Eiler: how would :h do anything for me here
03:22  Eiler: im just looking for a way to fix this command
03:22  Eiler: is it impossible?
03:22  spiiph: And I gave you the answer.
03:22  Accolade: :h is the path to enlightenment!
03:22  fow: Eiler, yes, (without the question mark and with <CR> of course) <Eiler> map <F9> :!dmakex.sh %?
03:22  Accolade: and to the holy grail, on a side note
03:24  Eiler: ah % works, why would i need to read through the whole help, when only 1 character was needed
03:24  Accolade: Eiler, spiiph suggested that you type ":help :_%" like you would type ":map ..." in normal mode vim
03:24  Accolade: for the enlightenment! :)
03:25  spiiph: Eiler, it's a common way of giving advice to give references to help sections, so that you may find the answer yourself.
03:25  Accolade: Eiler, that is a legitimate question, though ;)
03:26  spiiph: I gave an explicit reference. There was one paragraph to read.
03:33  frogonwheels: Eiler: it also means that you can see there are other similar shortcuts  (and a link to filename-modifiers)  which is useful
03:36  walt: I don't get this. How do people make 256-color themes?
03:56  homekevin: walt: Same way they make n-color terminal themes for any n.
03:57  homekevin: They just use a bigger n.
03:57  homekevin: The colors in a terminal are just numbers from 0 up to some limit.
03:58  homekevin: walt: As for what color a number corresponds to, that actually depends on the terminal.
03:59  homekevin: Usually the first 16 are user-definable, then there's a range of values that make up a 6*6*6 color cube, then the rest are shades of gray.
04:01  homekevin: walt: If by chance you are using a terminal that uses the xterm color-mapping scheme, you can use my script to output all the colors (along with the rgb values of each): https://github.com/KevinGoodsell/vim-xterm-colors/blob/master/scripts/termcolors
04:01  homekevin: You can use the same script on terminals with the rxvt scheme, but the RGB values always correspond to the xterm scheme.
04:02  homekevin: And if there are other schemes, I know nothing about them. I only recently found out about the difference between rxvt and xterm.
04:06  homekevin: Also, technically the user can remap any color in xterm, so the values are only correct up to a point. This is a general issue for terminal color schemes.
04:07  homekevin: It's probably pretty rare for users to remap colors over 16, though. I just avoid colors 0 to 15, since they are often remappable in the UI.
04:08  homekevin: The rest require editing the Xresources.
04:16  e0\m2x: lets say i have a line "if ($result" and my cursor is on the t (or the l), and I want to delete $result (everthing after the paren)... what is an effective way of accomplishing that?
04:16  e0\m2x: actually lets say the line is "if ($result->" and we're on the last character, the >
04:16  jamessan: dT(
04:19  e0\m2x: that's pretty nifty, have to do dT(xa because it leaves the char you were on though
04:20  e0\m2x: i was wondering because daw doesn't work, it only delets the -> if you're on the >
04:20  Accolade: then T(C
04:20  e0\m2x: oh wow nice=)
04:20  jamessan: or dT(s
04:22  Accolade: e0\m2x, as for daw, caW would be closer, but eat the bracket along
04:23  e0\m2x: ah right, nice
04:23  e0\m2x: thank you sir
04:24  Accolade: no sweat
04:24  e0\m2x: i'll be in here for the next week asking random questions =P
04:24  Accolade: :)
04:25  Accolade: who knows, maybe you'll be answering random questions by then... ;)
04:28  gkatsev: I started with asking random questions 3 years ago
04:28  gkatsev: now I am answering random questions
04:28  gkatsev: :)
04:30  e0\m2x: i'm definitely looking forward to being in that position, haha
04:30  e0\m2x: i just started coding with vim today
04:30  e0\m2x: not getting much actual code done, lol
04:33  gkatsev: yeah, that happens
04:34  gkatsev: e0\m2x: if you haven't seen it yet: http://www.terminally-incoherent.com/blog/wp-content/uploads/2006/08/curves.jpg
04:35  sir_lewk: aww, that's hardly true
04:35  gkatsev: lol
04:37  sir_lewk: actually, I'm not sure I really get it, what represents difficulty?  the y axis or the slope?
04:37  gkatsev: y axis is the difficulty
04:37  sir_lewk: not really sure why pico would get harder the longer you use it
04:37  gkatsev: well, not really difficutly.
04:38  jamessan: x is time, y is learning needed to be useful
04:40  gkatsev: yeah, that
04:40  Accolade: I'd say y is cumulated typically acquired knowledge
04:40  Accolade: learning would be the differential dy/dx
04:41  gkatsev: it's usefulness over time
04:41  lumgwada: productivity needs to be plotted on the x axis
04:42  lumgwada: z axis rather
04:43  sir_lewk: emacs' needs more dimensions for an accurate representation
04:43  Accolade: *g*
04:43  sir_lewk: one for each modifier key at least
04:43  Accolade: some 8-dimensional version of the moebius strip
04:44  sir_lewk: indeed
04:44  gkatsev: sir_lewk: like 9 more
04:45  e0\m2x: is emacs complicated?
04:46  e0\m2x: i definitely seem to relate to that graph though learning vim
04:46  e0\m2x: im learning like a billion things at once, i mean i couldnt even figure out how to get out of the help =P
04:47  e0\m2x: suddenly i was reading about windows and buffers
04:47  gkatsev: I would suggest to just learn as much as you need to get what you want done at that exact time
04:48 --- Natch is now known as Natch|
04:48  gkatsev: rather than chasing down all leads
04:49  e0\m2x: yah
04:49  e0\m2x: just every 10 minutes im like
04:49  e0\m2x: "i need to make this certain motion, im sure there is a way more efficient method"
04:50  e0\m2x: i also desperately feel like i need to get that NERD_tree thing but i'm a little afraid of what i'll get myself into
04:50  gkatsev: e0\m2x: yeah, just find the first way of doing it, not more efficient unless you feel like not getting ANYTHING done
04:54  e0\m2x: do you guys think i'll have to learn a bunch about scripts and windows and buffers before i can use the file manager? (NERD_tree)
04:55  gkatsev: no, not a lot.
04:55  Rakko: a little about windows and buffers
04:56  gkatsev: <c-w><c-w> switched between windows. :q closes a window.
04:56  gkatsev: there
04:57  Rakko: <C-w> plus cursor key (either hjkl or arrow key) is also useful
04:58  gkatsev: but unneeded for just beginning
04:59  Accolade: <c-tab> switches windows, too
04:59  gkatsev: it does?
04:59  Accolade: at least for me
04:59  Accolade: gvim, Windows
04:59  tmr: Maybe on gvim.
04:59  gkatsev: are you sure it isn't a mapping?
04:59  Accolade: no, not sure
05:00  gkatsev: Accolade: :map <c-Tab>
05:00  Rakko: it doesn't work in macvim
05:00  Accolade: yes, it is a mapping
05:00  gkatsev: to? c-w c-w?
05:00  Accolade: c-w w I think
05:00  gkatsev: yeah, that
05:00  Rakko: I get irritated trying to remember the window switching commands in vim vs. screen
05:01  gkatsev: ha
05:01  Accolade: it says c-c c-w w to be precise
05:01  Accolade: I don't get the c-c though
05:02  gkatsev: c-c is stop
05:02  Accolade: ah, that was for operator pending mode, c-c interrupting it
05:03  e0\m2x: what is all this c-w you guys are talking about
05:03  e0\m2x: what does the dash imply
05:03  e0\m2x: and the < >
05:03  gkatsev: e0\m2x: CTRL and W
05:03  gkatsev: e0\m2x: <c-w> is just a way to represent that.
05:03  e0\m2x: oh ok
05:04  deryni: :help key-notation
05:15  comex: I have noremap <silent> k gk (and same for j), but every so often (I can't tell what action is causing this to happen), this stops working.
05:16  comex: When this happens, j and k start using physical lines again.  I have to re-read .vimrc to get it back to the desired behavior.
05:16  Raimondi: comex: Next time that happens use  :verbose nmap k  to see what is changing it.
05:17  comex: oh, neat
05:18  comex: although that just says "No mapping found"
05:18  comex: but I just noticed it seems to be caused by LustyJuggler
05:19  Raimondi: Something is unmaping it.
05:20  deryni: Sounds likely.
05:20  comex: yeah, LustyJuggler is unmapping it, to "undo" a temporary mapping of those keys that it does
05:20  Raimondi: There you go, go and kill the bastard
05:20  comex: out of curiousity, is there a better way to do that? like "pop" the last mapping
05:20  frogonwheels: comex: generally that's a bad idea for a mapping -   mapping  <UP> to gk   is better idea
05:20  comex: frogonwheels: I've gotten used to it. :p
05:20  comex: also I don't like reaching for the arrow keys.
05:20  frogonwheels: comex: (bad 'cause it screws up plugins)
05:21  frogonwheels: comex: I'm actually used to pressing gj  when I need it.
05:21  comex: heh
05:21  frogonwheels: comex: g is quite convenient and is with the other hand..
05:22  comex: but pressing gj repeatedly is a lot harder than pressing j repeatedly :p
05:22  comex: anyway, that fixed it
05:23  frogonwheels: comex: depends on how many lines it's wrapped I guess.. I deal with 2 or 3 only
05:25  frogonwheels: comex: If you want to know how to pop a last mapping have a look at  bufoptions.vim : http://vim.sourceforge.net/scripts/script.php?script_id=9
05:25  frogonwheels: comex: note this is an OLD script, and was done before  <buffer> mappings existed.
05:27  jamessan: well, plugin authors should know to use normal! so they aren't affected by such mappings
05:28  Rakko: did vi have a scripting language?
05:34  Spidey01: Rakko: no.
05:35  Rakko: oh, ok. I was wondering how it differed from vimscript, but never mind :)
05:35  Spidey01: Rakko: you could do limited scripting by way of ex commands (at the :) or just script ex similar to ed, but things like vimscript -> not on your life.
05:37  Rakko: ok
05:37  Spidey01: Really, it's more like scripting in the sense that your keyboard could be replaced with standard in
05:37  Spidey01: On the upside, I believe nvi added perl support at some point
05:39 --- jtoy is now known as sudoer
--- Log closed Tue Nov 16 06:25:37 2010
--- Log opened Tue Nov 16 06:25:57 2010
06:25 --- Users 564 nicks [0 ops, 0 halfops, 0 voices, 564 normal]
06:27 --- Channel #vim was synced in 74 seconds
--- Log closed Tue Nov 16 06:33:45 2010
--- Log opened Tue Nov 16 06:34:08 2010
06:34 --- Users 565 nicks [0 ops, 0 halfops, 0 voices, 565 normal]
06:35 --- Channel #vim was synced in 73 seconds
06:35  xtagon: I don't think so
06:35  xtagon: Why would you want to?
06:36  Rakko: sharat87: you mean it would display something instead of : ? or you would type something else instead?
06:36  Rakko: I have a mapping of ' to : because I don't like having to press shift
06:36  sharat87: yes, display something other than :
06:36  sharat87: you see, I have swapped my : and ;
06:36  Rakko: oh, don't think that's possible then
06:37  sharat87: so to avoid confusion, I want it to display ;
06:37  sharat87: damn
06:40  sir_lewk: how do I configure vim with +clientserver?
06:45  sir_lewk: using  --with-+clientserver with ./configure didn't work
06:45  sir_lewk: wait,  --with-features=huge should get it, right?
06:48  sharat87: yeah, clientserver is included in normal, according to docs, so huge should get it
06:49  sharat87: sir_lewk: I compiled mine with huge and I have it
06:49  sharat87: I didn't give any --with for it though
06:51  sir_lewk: http://vim.pastey.net/142931 my version output
06:51  sir_lewk: "Huge version without GUI." and "-clientserver -clipboard"
06:52  sir_lewk: do I need to build with the gui for both of those?
06:52  sir_lewk: I did --with-x
06:54  sharat87: here what I compiled mine with http://vim.pastey.net/142932 (placed in a file `dovim` as a sibling to the vim-repo directory)
06:55  sir_lewk: ah, I think I've got it
06:55  sir_lewk: missing some deps and ./configure didn't make that clear I think
06:56  sharat87: :)
07:12  eueu: !smartindent
07:12  eueu: vimgor, smartindent
07:12  vimgor: Don't you mean stupidindent? In all seriousness, 'smartindent' is an obsolete option for C-like syntax. It has been replaced with 'cindent', and setting 'cindent' also overrides 'smartindent'. Vim has indentation support for many languages out-of-the-box, and setting 'smartindent' (or 'cindent', for that matter) in your .vimrc might interfere with this. Use 'filetype indent on' and be happy.
07:41 --- Unode is now known as _Unode
--- Log closed Tue Nov 16 08:42:24 2010
--- Log opened Tue Nov 16 08:44:12 2010
08:44 --- Users 562 nicks [0 ops, 0 halfops, 0 voices, 562 normal]
08:48 --- Channel #vim was synced in 267 seconds
08:48 --- quaestor is now known as Guest84777
09:13  dfrank: ls
09:14  dfrank: aah! sorry :(
09:14  daniel: unforgivable!
09:14  daniel: vimgor: punish dfrank
09:14  vimgor: I don't know.
09:14  iaj: ;-)
09:17  dfrank: daniel: I have to set up my client to not to send message if it is "ls", "cd *" or something like that
09:19  daniel: well, that happens to people quite frequently. i personally don't take any offense from it
09:19 * the_isz is looking forward to the moment dfrank tries to say something to a user called 'cdax' or similar^^
09:19  Raimondi: vimgor does
09:19  vimgor: Dunno!
09:19  Raimondi: :)
10:14  sharat87: I am looking to get vim bindings in my chrome, any suggestions? vrome or vimium or something else?
10:20 --- zorzar_away is now known as zorzar
10:22  e0\m2x: how on earth can i make it so if i copy a file :w newname or start a new one :e blah it uses the relative path of the file i'm currently working on
10:23  e0\m2x: i really dont want everyone dropped in my vim directory
10:24  kongo: e0\m2x: you can change your current directory with :cd
10:24  kongo: e0\m2x: use :cd %:p:h to change into the directory of the file you are currently editing
10:25  sharat87: I think you have autochdir on
10:25  sharat87: check with :set autochdir?
10:25  e0\m2x: okay
10:25  e0\m2x: thanks
10:25  sharat87: was that the problem?
10:38  e0\m2x: shachaf: i honestly have no idea, today is my first day using vim but ill try sticking that into my vimrc and see if that changes things tomorrow
10:38  e0\m2x: sharat87: oops response was to you
10:39  sharat87: e0\m2x: welcome to vim :) setting autochdir will change your working directory to whatever file you are editing, hence all relative paths work from there
10:40  sharat87: if you set it to to off (using :set noautochdir) then you'll have to change the working directory to whatever you want manually with the :cd command
10:45  e0\m2x: sharat87: is that a command i type once and it turns it on indefinitely, or am i correct that i have to put that command into my vimrc?
10:46  sharat87: yes, you have to put it in your vimrc to have it every time you open vim
10:46  sqz: SPAM: DirDiff is a great vim plugin, if you want to diff different versions of a large codebase
10:51  e0\m2x: are the files ending in ~ some kind of vim auto-backup of the file saved before last recent save?
10:57  sqz: did anyone read the book 'vim hacking' ?
11:00  pen: autocomplete is awesome
11:00  caulagi: does anybody have some suggestions on how to get autocomplete working with Django?  I have already tried http://blog.fluther.com/django-vim/
11:05 * mgedmin generally builds a tags file of his project plus all dependencies, then uses vim's keyword completion
11:06  daniel: mgedmin: are you programming C?
11:06  mgedmin: Python
11:06  daniel: ah
11:07  dfrank: mgedmin: how especially do you build a tags file of your project?
11:07  mgedmin: just for my project, :!ctags -R .
11:07  dfrank: mgedmin: by hand?
11:07  mgedmin: for project + all dependencies, I use zc.buildout and z3c.recipe.tag
11:08  dfrank: mgedmin: do you use plugin project.tar.gz?
11:08  mgedmin: although if the deps are monolithic and not numerous, ctags -R . /path/to/django might work as well
11:08  mgedmin: I don't use project.vim, or whatever it's called, no
11:08  dfrank: mgedmin: but this is useful, no?..
11:09  mgedmin: "this" being ... ?
11:09  dfrank: mgedmin: using project
11:09  dfrank: mgedmin: project plugin, i mean
11:09  mgedmin: dunno, never tried it, never felt a lack of "project management" capabilities
11:09  mgedmin: in fact every ide I tried annoyed me to no end requiring me to define "projects" or something
11:09  dfrank: mgedmin: well
11:09  mgedmin: when I have it right here, in this source tree, where I want to dive and edit
11:20  heeen: I only get an indentet line
11:20  heeen: oops
11:48  heeen: can you do a nmap that is only valid in regular file buffer windows
11:48  heeen: but not in, say, quickfix
11:48  heeen: or file explorer
11:51 --- TK is now known as Guest55110
11:58  mgedmin: heeen, you'd have to have an autocmd that checks the buffer type and does a :nmap <buffer>
11:58  mgedmin: how many and which map commands do I have to do to completely change the meaning of a key?
11:59  mgedmin: I don't need POUND SIGN, *ever*, and this phone has no < on its keyboard
11:59  mgedmin: :map and :map! are insufficient for things like operator pending mode, apparently
11:59  mgedmin: :h map-overview is confusing
12:00  mgedmin: maybe it's not operator pending that I'm missing
12:01  mgedmin: anyway, surround.vim won't accept that £ is < for purposes of surrounding some text with <p>
12:03  chandru_in: I have a key mapping.  Is it possible to repeat this action N times while editing.  Like 10<key_sequence> to repeat it 10 times
12:04  mgedmin: chandru_in, you may have to record a macro and then use 10@q, assuming q is the register you used for recording
12:05  chandru_in: mgedmin, I don't want to record the macro everytime.  Is there a simpler way of repeating a mapped key sequence?
12:06  mgedmin: no
12:06  mgedmin: unless you want to press that key 10 times
12:08  chandru_in: ok thanks mgedmin
12:13  chandru_in: mgedmin, ok some more googling shows there is a way mapping must be done with @= thanks anyway
12:13  mhi^: chandru_in: you could save the macro in a register
12:14  mhi^: ":let @q = '<your macro>'
12:14  chandru_in: mhi^, Yup that's what I found too.  But a register name is not needed.
12:15 * mgedmin had forgotten about @=
12:15  mhi^: Well, @= is the expression register.
12:15  mgedmin: not sure that's easier than recording a macro -- you'd be typing the expression blind
12:15  chandru_in: mhi^, Can you explain.  I'm no vim ninja.
12:17  chandru_in: mgedmin, I don't understand.
12:17  mhi^: Me neither ;) But personally I would just put ":let @x = '<my macro>'" in my vimrc. Then you just use, as said before, 23@x to repeat it several times.
12:18  chandru_in: ok
12:18  mhi^: You may want to read ":h registers"
12:19  mhi^: You use registers all the time, you just don't know it ;) Check ":reg"
12:20  chandru_in: mhi^, That helped me understand thanks a ton
12:28  heeen: mgedmin: maybe you're better of with xkeymap or inputrc
12:28  heeen: *off
12:28  mgedmin: hm
12:28  mgedmin: inputrc is for readline
12:28  mgedmin: I wonder if xmodmap is available for maemo 5 ...
12:30  chandru_in: is it possible to have 2 <CR> in a single macro?
12:31  the_isz: chandru_in: why not?
12:31  chandru_in: the_isz, :let @x='y/[^0-9. ]/<CR>j^P^<C-a>' doesn't work
12:32  chandru_in: I want a <CR>in the middle of the macro rather
12:33  the_isz: chandru_in: and you tested these commands separately?
12:34  chandru_in: the_isz, yes
12:34  the_isz: chandru_in: ah, i see. sorry, my fault
12:34  the_isz: chandru_in: in macros, you don't use <cr>
12:34  the_isz: chandru_in: you need to place a literal <cr> there
12:34  the_isz: chandru_in: you get one by doing  <c-v><cr>
12:35  chandru_in: oh thanks
12:35  the_isz: chandru_in: it should look like this then: ^M
12:35  the_isz: chandru_in: the same accounts for escape and the like
12:35  the_isz: chandru_in: i think you _can_ use <cr> somehow, but i don't remember atm
--- Log closed Tue Nov 16 12:42:13 2010
--- Log opened Tue Nov 16 12:42:44 2010
12:42 --- Users 589 nicks [0 ops, 0 halfops, 0 voices, 589 normal]
12:43 --- Channel #vim was synced in 71 seconds
12:44  zenzike: does anybody have any experience with insenvim for C# intellisense support in vim?
12:45  mgedmin: wha...?
12:45  mgedmin: I did a :VCSVimDiff
12:45  mgedmin: then switched to a different buffer on one of the windows
12:46  mgedmin: and now the two windows scroll together
12:46  mgedmin: and my attempts to turn that off with :diffoff or :set noscrollbind fail
12:46  mgedmin: what am I missing?
12:46  rson: did you set noscrollbind on both windows?
12:48  chandru_in: the_isz, typing Ctrl-V Ctrl-M generates ^M
12:49 * mgedmin did
12:51  strull: mgedmin: thid diff-thing sometimes is a mess. I have com! DO let restcmd = winrestcmd()|let bufnr=bufnr("%")|windo set nodiff noscrollbind nowrap foldmethod=indent fdc=0 |exe "sb ".bufnr|exe restcmd    execute this, then try :DO
12:52  mgedmin: heh
12:52  mgedmin: what did work was switching back to the original file I diffed with, and closing it
13:03  the_isz: chalcedony: right
13:03  the_isz: chalcedony: sorry, was for chandru_in... who is gone :(
13:03 --- silex is now known as Silex
13:03  chalcedony: ah
13:03  chalcedony: the_isz, no prolblems :)
13:09 --- _mathrick is now known as mathrick
13:16  Silex: for those interested, I managed to make clang-complete work on windows
13:24 --- zorzar_ is now known as zorzar__away
13:25  paradigm: Is there a way to get vim to recognize ANSI escape sequences, like ``less -R''?  I'd
13:25  paradigm: like to use vim as a pager
13:28  the_isz: paradigm: i can do 'ls -R | vim -' which is - to me - using vim as a pager. maybe elaborate a little on what you want to do?
13:29 --- zorzar__away is now known as zorzar_
13:29  paradigm: several programs, such as ``git log --graph --color'' through out ansi escape sequences to specifically color things.  If I pipe it into ``less -R'' I get colored output, which is very useful for following branch/merge paths.  However, if I pipe it into ``vim -'' I don't get the colors so much as escape sequence jibberish.
13:30  heeen: vim is an editor, not a viewer
13:30  paradigm: true, but I'd like to see if I can squeeze it intot he viewer role
13:30  heeen: what if you wanted to edit ansi sequences o_O
13:31  mgedmin: hmm
13:31  heeen: maybe you could hack a syntax file for ansi escape sequences
13:31  paradigm: presumably you'd do a :set showansisequences or something and then you could edit them
13:31  mgedmin: with elaborate syntax rules and the new conceal feature of vim 7.3, maaaaybe
13:31  mgedmin: but it'd be a lot of work
13:31  paradigm: hmm
13:31  heeen: mgedmin: whats the conceal feature?
13:31  paradigm: ooh, conceal is really neat!
13:32  paradigm: great for LaTeX people
13:32  rson: mgedmin: i think there is already a plugin for that, i remember reading about it.  let me see ifi can find it
13:32  paradigm: rson: I'd appreciate it if you did
13:32  the_isz: paradigm: i think you'd be better off leaving out git's color feature if you really want to use vim as a pager
13:32  mhi^: http://www.vim.org/scripts/script.php?script_id=302
13:32  rson: ansiesc.vim
13:32  mgedmin: I want to see a screenshot of that!
13:33  paradigm: thanks guys!
13:33  mhi^: But you know, it's made by Dr. Chip.
13:33  paradigm: Should I know who Dr. Chip is?
13:33  rson: that means it's an effing vimball...
13:33  paradigm: I've seen that name around
13:33  paradigm: aww
13:33  mhi^: vimgor: drchip
13:33  vimgor: Dr Charles E Campbell is a pretty nice guy who gives a lot to the vim community, but whose prolific scripts are a 50-50 split between good idea horribly implemented and bad idea even more horribly implemented
13:33  paradigm: haha
13:34  mhi^: But report back, if it's working good ;]
13:34  paradigm: will do
13:34  rson: paradigm: just know that if you :w that file somewhere, it's going to have the escape sequences in it
13:35  paradigm: rson: I'll pipe it through col to get rid of those
13:35  heeen: mmhm
13:35  paradigm: not an issue :D
13:35  heeen: that conceal looks tasty
13:35  heeen: does vim support underlining?
13:37  LoRe: how can i make ^M visible? set ff=unix doesn't help
13:37  the_isz: LoRe: try  :set list
13:38  avinashhm: hi, is there any command to see if the environment variables are set or unset .. ex:  iwan't to know if my ignorecase [ic] is set or not ??? anything like :show ic
13:38  LoRe: the_isz: don't work either
13:39  LoRe: all i see is '$' i expect ^M$
13:39  mrc2: hi! i have two files that are complitelly different except for a function (a copy/paste), can i make a diff of those lines only?
13:39  mgedmin: avinashhm, :set ic? or :echo &ic
13:40  the_isz: LoRe: well, if you  set ff=unix  and write this file out, it shouldn't contain \r anymore.
13:40  mgedmin: mrc2, use temp files with just that function
13:40  rson: heeen: yes.
13:41  avinashhm: mgedmin, echo .. this was the thing i was looking for .. thanks buddy ..
13:41  the_isz: LoRe: you might be interested in  :he 'encoding'  and  :he 'fileencoding'
13:41  mhi^: heeen: yup, see :h group-name
13:41  LoRe: ah, i have to reopen the file, then it get's visible
13:42  the_isz: LoRe: yeah, or change the settings i referred to
13:44  paradigm: not sure how to get dr. chip's vimball stuff to work >.<
13:45  mhi^: paradigm: :h vba
13:45  paradigm: thanks
13:52  paradigm: everyone who helped: thanks! got it working exactly how I wanted it
13:56  mhi^: heeen: Although I knew that it's supported, I never thought about using it myself. Thanks for reminding me. ;) - http://d.imagehost.org/0033/underline.png
13:56  paradigm: mhi^: what's the block in the to-right of your screenshot?
13:56  mgedmin: ugh, (fprintf(), exit(1))
13:57  mgedmin: training for an obfuscated C code contest?
13:57  mgedmin: in what world *(*(world + y) + x) is preferable to world[y][x]???
13:58  mhi^: mgedmin: No, but it spares me using curly brackets for 2 lines of code without using a function to do that. And again no, it's intended to teach pointer arithmetic.
13:59  mhi^: paradigm: Just a little X window that I used to take the screenshot (urxvt).
13:59  paradigm: xahh
13:59  paradigm: okay
14:00  paradigm: I was hoping it was some advanced vim feature I could learn about
14:00  paradigm: haha
14:00  mhi^: ;p
14:00 --- zorzar_ is now known as zorzar__away
14:01  iaj: what would be the quickest way to execute :w :bd ?
14:01 * mgedmin does not think bad examples are appropriate for teaching anyone about anything
14:02  mgedmin: what's wrong with the traditional while (*dest++ = *src++); ?
14:10  mhi^: mgedmin: And where do you think should I apply that to the code you see? I don't copy anything there.
14:10  mgedmin: well, if your goal is to implement Game of Life, don't use *(array + index), use array[index] like all sane people
14:10  mgedmin: if your goal is to demonstrate pointer arithmetic, pick a task where it's appropriate, instead of what you're doing
14:11  mgedmin: actually, you could do array iteration with pointers
14:11  mgedmin: but checking of the end condition would be inconvenient ...
14:12  mhi^: Sorry, but I think this way is very appropriate.
14:12  mgedmin: we'll have to disagree then
14:13  mhi^: I noticed that already.
14:13  mgedmin: no, I was trying to end the conversation amicably ;)
14:14  mhi^: Don't use strange words that I have to look up first. :-P
14:15  sqz: hehe, google conversations!
14:16  sqz: "ok I hear you..but I can't get back to you on that one..since I don't have internet here"
14:16  KeeperOfTheSoul_: do most people redefine the sentence/paragraph/section commands with something that uses a regex?
14:18  KeeperOfTheSoul_: and is there a handy script for that for use with standard C style programming (mostly javascript & C#)
14:19  mhi^: Ehm. Sentence/paragraph/section commands? In C-like programming languages?
14:20  mhi^: I guess you'll have to give an example as I don't understand you :>
14:20  KeeperOfTheSoul_: mhi^: right, just mapped to a logical equivilent, so a sentence would be a statement
14:21  mhi^: So, like using a shortcut to jump from function to function etc.?
14:21  KeeperOfTheSoul_: right
14:23  mgedmin: there are some predefined movements for C functions
14:23  mgedmin: not for statements, I think
14:23  KeeperOfTheSoul_: hmm, maybe I just want to map ) and } to ]) ]}
14:23 --- zorzar__away is now known as zorzar_
14:23  mhi^: Yea. Personally I just use a little mapping to remove a whole function and otherwise use taglist.
14:24  KeeperOfTheSoul_: and ]] to ]m only ]m doesn't seem to like modern javascript with nested methods
14:24 * mgedmin uses folding
14:24  mhi^: mgedmin: syntax/regex or manually?
14:24  KeeperOfTheSoul_: that is an idea, hadn't thought of jumping by folds
14:24  mgedmin: for python I've a custom indentexpr
14:25  KeeperOfTheSoul_: meh, what I really want is a command to go where I'm looking :)
14:26  mhi^: Oh, then just install mindcontrol.vim ;p
14:28  KeeperOfTheSoul_: was just wondering, since I never use ) ]] or } their definitions just seem a bit pointless to me
14:29  mgedmin: of those, I find } useful
14:30  mgedmin: I tend to leave blank lines between functions/methods and no blank lines inside
14:30  mgedmin: (if the method wants a blank line inside, it's too big and should be split into smaller ones)
14:31  KeeperOfTheSoul_: ah, I like to have blank lines inside even for 3 line functions
14:35  iaj: mgedmin: couldn't u use ]m to go from method to method?
14:36  iaj: (as well) that is :)
14:39  KeeperOfTheSoul_: iaj: doesn't seem to work well with javascript and nested functions
14:40  KeeperOfTheSoul_: or functions assigned using; this.something = function () { ... }
14:40  mhi^: iaj: I guess it depends on what the language looks like. I believe ]] works different in Java (due to classes) as it works in C.
14:41  iaj: mhi^: oh.. yeah :\ that might be true... too bad.. so once focusing on more different languages.. one has to remember different shortcuts to switch functions
14:42  mhi^: Yea, or just use folding/taglist :>
14:42  iaj: which folding method do you guys use for code editing?
14:43 * mhi^ looks at mgedmin 
14:43  KeeperOfTheSoul_: taglist?
14:43  KeeperOfTheSoul_: iaj: indent
14:43  KeeperOfTheSoul_: or syntax, depending on the file
14:44  mhi^: KeeperOfTheSoul_: http://www.vim.org/scripts/script.php?script_id=273
14:46  mhi^: mgedmin: do you use any funky Vim plugins for your C programming?
14:46  iaj: indent.. hmm that wasn't working for me quite as I wanted it to :(
14:48  KeeperOfTheSoul_: iaj: yeah, but syntax doesn't work that well with javascript
14:49  iaj: KeeperOfTheSoul_: oh.. so your doing primarly javascript - I see.
14:50  KeeperOfTheSoul_: iaj: naw, javascript/html/C# but I tend to only use vim for javascript/html
14:50 * mgedmin returns
14:50  mgedmin: iaj, I never remember about ]m
14:51  mgedmin: mhi^, I rarely program in C; I use some funky plugins for my Python programming
14:51  KeeperOfTheSoul_: mgedmin: yeah, hence I was just pondering mapping } to ]m
14:52  KeeperOfTheSoul_: unfortunately ]m doesn't work all that well with javascript
14:52  mhi^: mgedmin: Hmm. Due to work I do more Perl than Python. But out of interest.. could you nam them? Or mostly self-developed?
14:53  mgedmin: sure, http://mg.pov.lt/blog/unix-is-an-ide.html
14:54  mhi^: mgedmin: Ah, very informative blog entry. Thanks!
14:54  anon33_: so for some reason, map 0 ^ doesn't really take effect in my vimrc
14:55  anon33_: yet when i do verbose map 0?, it returns that line in my vimrc
14:55  anon33_: what 0 actually does is jump to some character towards the beginning of the line - i can't really tell what it's looking for
14:55  anon33_: but repeating map 0 ^ after the vimrc loads works fine
14:55  anon33_: how might i go about fixing this problem?
14:56  iaj: map 0 ^ is indeed a good thinking... does one ever need 0 actually.?
14:56  anon33_: no idea
14:57  KeeperOfTheSoul_: also, is there an equivilent to ]) ]} ]' etc, except matched rather than unmatched?
14:57  KeeperOfTheSoul_: as a shortcut so I don't have to use; /(<CR>])
14:58  dotCOMmie: For some reason my vim has stopped honnering the "# vim: ts=4 et" comment at beginning of file
14:58  mhi^: dotCOMmie: :set modeline
14:59  iaj: what does has('eval') do?
14:59  KeeperOfTheSoul_: iaj: has tests if a feature exists, eg does vim have the eval feature compiled in
14:59  mhi^: iaj: :h feature-list
14:59  jink: :he has()
14:59  dotCOMmie: mhi^: thanks!
15:00  iaj: thanks :)
15:01  mhi^: anon33_: Not sure if that's helpful, but could you put "nnoremap 0 ^" in your vimrc for testing?
15:02  witquicked: so, is there something I can do to ensure that matching braces are highlighted for code that is off-screen (above or below)?
15:02  the_isz: iaj: 0 and ^ are indeed different. ^ goes to the first non-blank char, 0 really goes to the start of the line
15:02  iaj: the_isz: i know.. but does one really need 0 ? i rarely do :/
15:03  iaj: and ^ is so hard to hit imo: P
15:03  dotCOMmie: Is there a way to enable a higlight rule depending wheter expandtab is enabled or not?
15:03  the_isz: iaj: rarely - maybe, never - no
15:04  iaj: the_isz: yeah but think of the time you save when you use 0 instead of ^ :)
15:04  KeeperOfTheSoul_: witquicked: if you can't see it, why does highlighting matter?
15:04  witquicked: I must not have been clear...
15:05  anon33_: mhi^: it's worth a shot :) thanks
15:05  mhi^: dotCOMmie: you could do a bit of Vim scripting. There are 2 ways of querying an option: ":set et?" and also "echo &et". So I'd use the latter and just check for 1 or 0.
15:05  witquicked: I'm looking at a code block that scrolls below the screen... and sitting at a curly brace. I want to know definitively where the closing brace is (I'm missing a brace somewhere)
15:05  anon33_: mhi^: I'll get back to you in a sec
15:05  witquicked: that's the scenario
15:06  mhi^: witquicked: Hmm, I normally just do % do jump to the opening/closing bracket. If it doesn't jump, it's missing ;p
15:06  anon33_: mhi^: nope - didn't work =\
15:07  mgedmin: witquicked, do a %% when on a bracket, that'll make sure both brackets are visible, if possible
15:07  witquicked: mhi^, thanks! I didn't know about that... it's a good option.
15:07  mhi^: anon33_: So it doesn't jump to the start of the linee nor to the first character, right?
15:07  witquicked: mgedmin, excellent, thanks.
15:07  anon33_: mhi^: right
15:08  mgedmin: there's also 'showmatch' which jumps the cursor temporarily and automatically, but I don't know if it scrolls
15:08  anon33_: in the line "vimrc file ... - it jumps to the i in file
15:08  mgedmin: jumping cursor irritates me, so I don't use showmatch
15:08  mgedmin: I find the matchparen plugin sufficient for my needs
15:09  witquicked: mgedmin, I had installed matchit, but didn't really understand it's use yet - now I do
15:09  witquicked: mgedmin, and it works perfectly
15:09  witquicked: thanks folks
15:11  mhi^: anon33_: comment out your entry in the vimrc, start vim, do ":verb map 0"
15:11  dotCOMmie: mhi^: hmm that doesn't handle the case of modeline though
15:11  mhi^: dotCOMmie: what?
15:11  anon33_: mhi^: weird weird weird... no mapping found
15:12  dotCOMmie: if I do a if &et = 1 ... in vimrc. it works if I set et in vimrc but not if its set as a modeline in a file
15:12  mhi^: anon33_: so.. how does 0 act now?
15:12  anon33_: mhi^: i figured it out - i had a comment after it looking like this:
15:13  anon33_: nnoremap 0 ^ " remap 0 to first character on line, and i'm guessing it included the commend in the mapping or something
15:13  dotCOMmie: .. For somewhat obvious reasons. I guess I need to run the script on fileload
15:15  anon33_: mhi^: thanks :)
15:16  mhi^: uh, np
15:18  mhi^: dotCOMmie: Hmm, I see your dilemma there.
15:19  rson: dotCOMmie: au BufReadPost * :hi foo
15:19  rson: er, adding your if in there
15:20  mhi^: Ah, indeed.
15:20  dotCOMmie: rson: cool I'll give that a shot
15:23  mhi^: I wonder why exactly the modeline is evaluated. I can't see it in the help page.
15:27  chsigi: Hi! I just wondered if there is a way to jump back to the start of a word, even if the cursor is already on the start. "b" jumps only to the start of the current word if the cursor is not already there.
15:27  dotCOMmie: rson / mhi^ : hmm that didn't help
15:28  rson: dotCOMmie: :/, was my best guess
15:28  rson: mhi^: my quick browsing of help doesn't show when it's evaulated either
15:29  mgedmin: chsigi, lb, perhaps
15:29  mgedmin: although that would fail at the end of the line, if the line ends with " a"
15:30  dotCOMmie: I guess what I'm really looking for is a way to hook on a set of et
15:30  dotCOMmie: oh
15:31  dotCOMmie: another work around would be to use au BufReadPost and just read the file to see if et is set
15:31  rson: use bufwinenter
15:31  rson: dotCOMmie: ^
15:32  rson: dotCOMmie: see :help BufReadPost
15:32  strull: chsigi: try viwo<esc>
15:32  mhi^: rson: ah, cool.
15:32  rson: mhi^: kind of a round about way of finding out that info :)
15:33  dotCOMmie: it works!
15:33  rhlee: hi guys, I do I indent several times without reselecting the text?
15:34  mhi^: rson: (To be honest, I always used autocmd-events and didn't know that there are more detailed explanations below :)
15:35  kurkale6ka: rhlee: use a number or use dot a few times
15:35  rson: mhi^: that's exactly what i did, :help autocmd-events, then /modeline
15:35  rson: :D
--- Log opened Tue Nov 16 15:52:48 2010
15:52 --- Users 611 nicks [0 ops, 0 halfops, 0 voices, 611 normal]
15:52  dotCOMmie: mhi^: yes, but the idea is to catch tabs when they don't belong there. IE someone else inserts a tab.
15:53  chsigi: rson: I wanted to record a makro that adds something to the beginning and the end of a word. And I wanted that macro to also work if the cursor was placed an the first character of the word.
15:53 --- Kirok is now known as RecQuery
15:53  chsigi: s/makro/macro/
15:53  mhi^: dotCOMmie: Ah.. okay.
15:53 --- Channel #vim was synced in 72 seconds
15:55  kurkale6ka: Silex: use the arrows, then enter
15:55  Silex: kurkale6ka: that sucks
15:56  Silex: maybe I can do some automagic mode where when the menu popups it automatically selects teh first entry I guess
15:56  dotCOMmie: mhi^: I've been using a hilight rule ( http://pastebin.ca/1993444 ) for seeing bogus spaces
15:56 --- TK is now known as Guest45496
15:57  kurkale6ka: Silex: maybe
15:58  kurkale6ka: :h popupmenu-keys
15:58  rson: chsigi: i see
16:03  Silex: is the author of clang_complete here?
16:05  rson: chsigi: define a word in your context? is it just space delimited?
16:08  rson: anyone here have any tips to force me to stop using hhhhhhhh and lllllll to move back and forth and instead force me to use b, w and e?  i'm thinking of nnoremap'ing hhh <Nop> for instance so I can not more more than 2 characters without either using 3h or using the better motion commands
16:09  sacho: is there any major body of vim scripts in languages other than vimscript?
16:09  mhi^: rson: sounds good to me ;) Do the same for j/k.
16:10  rson: mhi^: i don't feel like j/k is as big of a problem for me.  another problem i have is doing xxx instead of 3x or whatever, so i'll probbaly map that too
16:11  rson: however the timeout lagi s going to kill me on these
16:12  mgedmin: rson, edit some files in ssh over dialup, you'll drop the hhhhhhhhhhabit soon enough ;)
16:13  mhi^: :]
16:13  rson: mgedmin: that's actually why i want to fix that bad habbit.  the free wifi at a few local places blows chunks and causes me delay more often than not
16:13  _rane: you could use / as well
16:14  rson: _rane: yeah, i use t/T and f/F quite religously, just sometimes when i'm browsing i tend to just hold in h and l
16:14  rson: the x problem is more a problem with my undo history being spammed by a shit ton of one character edits
16:16  rson: i may just frustrate myself completely and nnoremap h <nop> instead of the previous map i stated, just to really get it in my head.  then i don't have to wait for a timeout either
16:18  mhi^: rson: to the "undo hist problem": I got used to either use text-ojects like diw or simply use vllll... ;p
16:18  amcsi: this doesn't work. why?: autocmd FileType javascript filetype indent off
16:18  amcsi: in .vimrc
16:19  amcsi: I don't want the indent plugin for js files, because the indent plugin sucks for js
16:19  mgedmin: amcsi, that's a global setting
16:20  mgedmin: better drop an override in ~/.vim/indent/javascript.vim
16:20  mgedmin: e.g. an empty file
16:20  mhi^: amcsi: read ":h javascript-cinoptions"?
16:20  mgedmin: or just your favourite :setlocal sw=...
16:20  mgedmin: quick poll: sw=2 or 4 for html files?
16:21 * mhi^ checks his website
16:21 --- zorzar_ is now known as zorzar__away
16:21  amcsi: no such entry, mhi^
16:22  mhi^: amcsi: what Vim version?
16:22  mhi^: mgedmin: I use 4, but my site don't get too nested.
16:22  amcsi: newest
16:22  mhi^: typo? :>
16:24  mhi^: amcsi: http://code.google.com/p/vim/source/browse/runtime/doc/indent.txt
16:24  mhi^: grep for "javascript-cinoptions" there
16:24 * mgedmin is trying to decide once and for all how to indent html with embedded css and js
16:25  mgedmin: maybe sw=4 for all of that would be best
16:25  mgedmin: although my css-fu is likely insufficient to avoid deep html nesting
16:25  mhi^: amcsi: but if you really don't have it, your distro's vim package is either broken or missing a certain compile-time feature (but I guess the former)
16:25  mhi^: or you're not really using the latest version
16:26  amcsi: I'm using vim 7.2.330
16:26  amcsi: maybe vim-doc wasn't the newest
16:26  mhi^: that's what I meant, Vim 7.3.60 is the latest
16:28  rson: mgedmin: i use 4 everywhere.  if stuff gets too nested, i usually rethink how i'm doing whatever it is i'm doing
16:28  amcsi: damn, ubuntu is slow
16:28  amcsi: anyway, how do I do this? in .vimrc: javascript-cinoptions JN?
16:29  amcsi: and that automatically fixed this for all javascript files being edited?
16:30  spiiph: amcsi, what do you mean?  The javascript filetype plugin automaticaly sets 'cinoptions' for all javascript files (provided you use filetype plugins)
16:31  amcsi: oh... so vim incorrectly indents my js because I don't have 7.3, but 7.2?
--- Log closed Wed Nov 17 11:21:13 2010
