--- Log opened Fri Nov 12 00:50:48 2010
--- Log closed Fri Nov 12 00:57:32 2010
--- Log opened Fri Nov 12 01:10:34 2010
01:10 --- Users 573 nicks [0 ops, 0 halfops, 0 voices, 573 normal]
--- Log closed Fri Nov 12 01:10:42 2010
--- Log opened Fri Nov 12 01:12:30 2010
01:12 --- Users 576 nicks [0 ops, 0 halfops, 0 voices, 576 normal]
01:13 --- sjl_ is now known as sjl
01:13 --- Channel #vim was synced in 70 seconds
01:18  MTecknology: }^M <- I have a bunch of these.... is there any easy way to change them to }\r ?
01:18  industrial: :%s/<c-r><c-m>/\r/g
01:19  industrial: that is, press control-r and control-m to get the character.
01:19  spiiph: You mean <C-v><C-m>
01:20  spiiph: But :%s/\r/\r/g is better
01:20  MTecknology: could I do that with sed?
01:20  industrial: er, c-v yea
01:20  spiiph: MTecknology, tried dos2unix?
01:21  MTecknology: never heard of it
01:21  MTecknology: actually - it was me screwing up in sed
01:21  MTecknology: sed -i 's/}/}\r/g' $i
01:21  MTecknology: that's what screwed up the file
01:24  MTecknology: heh... something I tried just royallys screwed up the files.. time to roll back -_-
01:24  MTecknology: darn that blindly copy/paste from the net
01:24  spiiph: I never get into such trouble
01:25  drizzd_: I am trying to copy to the x11 cut-buffer using "*y or "+y, but it doesn't do anything.
01:33  somian[0]: That works nearly always for nearly everyone drizzd_
01:33  somian[0]: What could stop it from working is not having authorization to connect to X
01:34  strull: or the coding not compiled in
01:34  strull: drizzd_: check :ver and look for  +clipboard
02:10  spiiph: OT: Can anyone tell me how to substitute all the spaces in a variable in zsh using ${} substitution? I.e., something like ${$file/\ /.}, but which substitutes all spaces?
02:11  spiiph: I can't decode the zsh man page. :P
02:14  peth: spiiph: ${var// /repl}
02:15  spiiph: That only replaces one occurrence
02:15  spiiph: Or wait
02:15  spiiph: I didn't try that one
02:15  spiiph: peth, you're right, thanks!
02:15  peth: very welcome :)
02:23  MTecknology: Does this look right to you guys? it seems to break the syntax hilighting in vim.. href="<?php print $front_page; ?>"
02:24  MTecknology: http://dpaste.com/274214/
02:46 --- riot_dd_ is now known as riot_dd
02:53  eikenberry: What do you set to change what characters count as words. Ie. change what 'dw' would wipe?
02:54  eikenberry: Looked like iskeyword from the docs... but that doesn't seem to be it.
02:54  peth: no, that's right
02:55 * eikenberry slaps head. Forget it, I was reading the docs backwards.
02:55  eikenberry: I was thinking like with terminals where you specified the non-word chars.
02:56 --- peth_ is now known as peth
04:08  |dgs|: is there anyway to move to something aligned with the previous line? eg, if the line above the current line in the file had a : character at column x, could i get vim to insert spaces enough to make the current cursor postion aligned with the : on the previous line?
04:10  strull: |dgs|: other than pressing <space> and holding it for a while?
04:10  |dgs|: yeah :p
04:11  |dgs|: i guess a better way of describing it might be something like f/F but searching the previous line whilst moving the cursor along the current line
04:12  strull: hardly. You could just not care about alignemt for a while and realign when finished
04:12  |dgs|: holding down space is the way i do it now, but seems to be something i'm doing fairly regularly so thought there might be a better way to do it
04:19  peth: |dgs|: you could temporarily set ve+=insert, then kf:j
04:19  peth: uh, ve+=all
04:20  strull: peth: good idea
04:20  sjl: ok, "inoremap <cr> <esc> ; nnoremap <cr> a<cr>" may very well be the coolest thing I've seen in Vim so far.
04:21  strull: sjl: looks like nonesense to me :)
04:21  sjl: strull: It maps enter to exit insert mode, and the second mapping makes enter while in normal mode add a new line
04:21  sjl: so while typing you press enter to go back to normal mode, but can press it twice to get a newline
04:22  strull: I see what it does.
04:22  sjl: not sure how practical it will be when writing emails, but it's definitely an eye-opening experience when writing code
04:23  strull: not sure why pressing enter twice should be more convenient than pressing it once
04:24  sjl: because I don't need to press enter all that ofter while editing code.  Most of the time I'm changing one thing and want to get back to insert mode
04:24  sjl: especially with snipmate
04:24  sjl: "if<tab>a==b<tab>print 'x'<enter>"
04:25  strull: maybe I don't like the idea, since esc is easy enough to reach for me
04:25  sjl: I'm not sure if it's that much faster than jj though, since j is already under my fingers
04:25  sjl: yeah, esc is a stretch on apple keyboards
04:27  sjl: is there a keylogging plugin for Vim that could tell me how often (in insert mode) I hit 'jj' and how often I hit '<cr>'? That would settle it once and for all.
04:31  morelli: hi
04:31  morelli: what can i delete on win xp for vim to still work?
04:31  morelli: minimum setup ;)
04:32  Maahes: is there a way to see what's happening when you press a certain keystroke in vim? I have a plugin that's not behaving correctly
04:33  sjl: Maahes: Run ":nmap YOURKEY" to see what YOURKEY is mapped to in normal mode
04:33  sjl: imap for insert mode, etc
04:37  Maahes: sjl: danke
04:57  Maahes: additional question: "*y is supposed to yank a line to the system buffer right? well for some reason it is not doing that. I can reference it back "*p, but not by ctrl+(shift)+v in another application.
04:57  Maahes: system clipboard even
04:57  Maahes: same with "+y
04:59  Maahes: +xterm_clipboard is in my --version too
04:59  strull: Maahes: tryed Middle-Click in the other app?
05:02  Maahes: strull: nothing in the mouse clipboard either
05:03  strull: Maahes: start a second vim (in another shell) and try "*p rsp. "+p there.
05:06  Maahes: strull: opened a new vim and tried it, tried vim in a new term, and tried it without tmux, same behavior
05:17  homekevin: Maahes: "*y isn't a complete command.
05:17  homekevin: You need a movement command, or another y or something.
05:18  Maahes: homekevin: oh, >_< Thanks ^_^
05:18  homekevin: Assuming you have 'showcmd' set, you should see the characters you've typed, and in my experience whet the clipboard/selection stuff isn't working it cancels the command immediately on pressing * or +.
05:19  Maahes: I have showcmd set I think, I see the letters, it would be nice if I could see every letter I had typed in a series, instead I see 1 letter at a time
05:20  homekevin: You don't see the whole sequence? If I type "*y I see those three characters until I type something else.
05:20  homekevin: Once I type, say, a second y, it goes away.
05:21  homekevin: Maahes: You might want to make sure you understand how X selections work, also. There's not really a "clipboard" concept in X.
05:22  homekevin: Some desktop environments provide a clipboard, I guess. I'm not totally clear on that.
05:22  Maahes: I was wrong about the whole sequence thing. but yeah, this time with motions or y it also doesn't work
05:22  homekevin: But in general, there's no external holding location. A selection is something that can be copied from one app to another.
05:22  homekevin: It's lost when the application is closed.
05:23  peth: (... unless there's a clipboard daemon running)
05:25  homekevin: Maahes: You can check in :reg whether it's actually getting to + or *. I don't know how that would then fail to make it to another application, though.
05:37  R00sterJuice: is there a way to reload my snippets automatically?
05:39  R00sterJuice: is there a way to see what filetype the current file i'm looking at is?
05:41  tecnico: something like !file <filename>
05:41  tecnico: or if you are asking what file type vim is using for it,  :set ft?
05:43  dman777: how do i replace every intance of ~amd64 with ~x86?
05:44  R00sterJuice: tecnico,  i'm trying to find out what the ft is
05:44  tecnico: dman777: s:/~amd/~x86/g
05:44  tecnico: may need to escape the ~?  prob. not
05:46  tecnico: dman777:      :s/\~amd64/\~x86/g
05:46  fritzophrenic: R00sterJuice, you were told how
05:46  fritzophrenic: use :set ft?
05:46  tecnico: or %s for everywhere in the file
05:46  tecnico: dman777: ^
05:49  dman777: thanks
05:53  bairui: hola
05:54  tecnico: hola
05:55  bairui: :) how is everybody this fine afternoon...? Oops... geolocation assumption. :-/
05:56  armence: How can I force a filetype?
05:56  Axioplase_: afternoon, check. fine, check.
05:56  bairui: sweet :)
05:56  Axioplase_: armence: :set ft=foobar ?
05:57  bairui: armence: you can make that more permanent by doing it in an autocmd in your ~/.vimrc or in a modeline. :help autocmd   :help modeline
05:58  xtagon: Is there an insert-mode command to "ditto" the above line?
05:58  Axioplase_: xtagon: <C-O>:set ft=foobar<CR>
05:59  bairui: xtagon: :help i_ctrl-y
05:59  Axioplase_: For a single use of normal mode, <C-O> is better than <Esc>...i
05:59  Axioplase_: Ah, I completely misunderstood the question, sorry.
06:00  xtagon: That's okay
06:00  Axioplase_: xtagon: <C-X><C-L>
06:00  xtagon: Those work great
06:01  xtagon: Is there one to do just a word, instead of a character or whole line?
06:01  bairui: xtagon: http://vim.wikia.com/wiki/Wordwise_Ctrl-Y_in_insert_mode
06:01  xtagon: Thanks
06:01  bairui: np
06:06  xtagon: I used to have a vim plugin/script installed where in Ruby files I could insert ;h to mean => and ;e to mean end, etc. But I can't remember which script it was, anybody know?
06:07  xtagon: I tried rails.vim, it didn't work.
06:07  bairui: xtagon: ok, so, if not rails.vim, perhaps something more generic, like snipmate?
06:08  xtagon: bairui, hmm, I don't think so
06:08  bairui: testing my snipmate setup, I agree :)
06:09  xtagon: I would just map it myself, but whatever script it was had other useful things I want
06:10  bairui: um, at the risk of upsetting the apple-cart, how is   ;h   any shorter than   =>   ?   I guess it's all about positioning...
06:10  Maahes: xtagon: tried searching the vim wiki for ruby or rails?
06:10  Maahes: bairui: one less key to hold down, stay on the home row
06:10  xtagon: Yeah
06:11  bairui: hmm... I see... I'm a lazy coder... and a bit promiscuous - I visit all the rows... :)
06:11  Maahes: xtagon: so it it do something like <insert> => <normal> ?
06:11  xtagon: Huh?
06:12  xtagon: Sorry, don't understand what you're asking
06:12  Maahes: xtagon: the script, did it put you into insert mode insert => and then drop you back into normal mode?
06:12  xtagon: No, while you're already in insert mode you type ;h and it replaces it with =>
06:13  Maahes: ah. I guess you should never need to typed ;h.
06:13  bairui: instantly or after pressing space/tab? if instantly, it was an imap otherwise an iabbr
06:13  xtagon: instantly
06:19  xtagon: The script also did things like auto-closing parenths and brackets
06:24  fritzophrenic: check the list at http://vim.wikia.com/wiki/Category:Automated_Text_Insertion
06:25  xtagon: Okay, thanks
06:32  xtagon: Ah, found it! ruby-macros.vim
06:32  xtagon: Thanks guys
06:53  ice799: Is there a way to ask vim to highlight trailing whitespace and leading whitespace that is not tabs?
06:54  ice799: I'm not sure if that question made sense. I'd like to know if a line is indented with spaces instead of tabs. Maybe vim can turn those leading spaces red or something?
06:55  xtagon: You can make tabs visible, and trailing spaces visible. I don't think you can make leading spaces visible, but seeing tabs tells you it's not spaces, y'know?
06:55  ice799: haha
06:55  xtagon: set list listchars=tab:▶\ ,trail:▂     " Here's what I use.
06:55  ice799: sure
06:55  ice799: that works
06:56  strull: xtagon: why should leading be harder?
06:56  ice799: xtagon: so if i just drop that in my vimrc i should be good to go?
06:56  xtagon: Should be. You might want to change it if you don't have UTF-8 support
06:57  strull: ice799: you must also :set list
06:57  xtagon: I do that on the same line
06:57  strull: aah, i see
06:58  ice799: strull: if the is a way to show leading spaces i'd love to know
07:01  tecnico: ice799: :set hlseach    and  /^ \+
07:01  tecnico: ?
07:02  tecnico: not the same as list but it shows them
07:02  frogonwheels: ice799: or matchadd()
07:02  xtagon: Also, I just found this: http://objectmix.com/editors/761588-how-display-leading-spaces-vim.html
07:17  Zolrath: Hmm
07:18  Zolrath: whenever I open a ruby file indentruby gives me errors about ^M
07:18  Zolrath: and how its not an editor command
07:18  Zolrath: but if I try to find and replace all the instances of ^M doing the whole Ctrl+V Ctrl+M to put it in thing
07:18  Zolrath: it finds no instances of ^M to replace
07:20  Zolrath: oookay but doing cat ruby.rb  | col -b > ruby2.rb
07:20  Zolrath: worked soooo. Uh. Thanks!
07:26  agib|home: does anyone know how I can get css's color highlighting to also work in my scss files?
07:28  tecnico: set ft the same as your css file?
07:30  tecnico: and /win7
07:30  tecnico: ops
07:31  agib|home: tecnico: hmm I have a scss.vim syntax file though
07:32  tecnico: :help syntax
07:32  agib|home: which has syntax highlighting for scss that I want
07:41  bball__: I'm trying to use highlight/match to show me lines that exceed 80 characters
07:41  bball__: http://stackoverflow.com/questions/235439/vim-80-column-layout-concerns
--- Log closed Fri Nov 12 08:40:36 2010
--- Log opened Fri Nov 12 08:40:59 2010
08:40 --- Users 555 nicks [0 ops, 0 halfops, 0 voices, 555 normal]
08:42 --- Channel #vim was synced in 71 seconds
08:45  Pawka: fow, I think you are right. Set filetype by path looks like the best solution.
08:47 --- daniel__ is now known as daniel
09:01  Maahes: what's the <key> for shift?
09:01  the_isz: Maahes: shift is a modifier, there's no key for that ;)
09:02  Maahes: the_isz: alt is a modifier, as is Meta. There's keys for those <M-Up> etc
09:02  the_isz: Maahes: instead of <s-a> you'd say A for instance
09:02  the_isz: Maahes: that's s- for you then
09:03  Maahes: okay, thankyou ^_^
09:03  the_isz: Maahes: you're welcome
09:07  drizzd_: strull_: thanks, that was it
09:11  Maahes: nnoremap cs :<C-U>exec "normal s".RepeatChar(nr2char(getchar()), v:count1)<CR>
09:11  RusAlex: hi all. how i can clear current buffer ?
09:11  Maahes: can anyone tell me why that doesn't work?
09:11  Maahes: "normal a" and "normal i" work just fine
09:13  iaj: RusAlex: do you mean delete the contents of the current buffer?   ggdG
09:13  DHulme: Maahes: is it because you have surround.vim installed?
09:13  iaj: is there any way to repeat nerdcommenter actions?
09:13  RusAlex: iaj: yes im using this now, but its very long =)
09:13  RusAlex: ggdG
09:13  iaj: RusAlex: :%d
09:14  RusAlex: iaj: this slower
09:14  RusAlex: will map it
09:15  Maahes: DHulme: ....that's exactly it, damn, I was hoping to keep that....., hrrm, ce then, for edit
09:15  DHulme: what?
09:15  strull_: Maahes: or normal!
09:15  DHulme: it just means you need to use normal c instead of s
09:16  DHulme: or what strull_ said
09:17  Maahes: cc is already mapped, and cl. I'm still fairly new to vim, what is normal!
09:17  iaj: RusAlex: i got a dad mapping for deleting a document ;)
09:18  RusAlex: what is dad mapping ?
09:18  Maahes: is dad any better than dG?
09:21  jvv: hi, can anyone tell me how can i tell my VimExplorer to open files in vertical window and not it horizontal ?
09:23  iaj: Maahes: well it focuses the first line first :)
09:23  iaj: Nnoremap dad ggdG
09:23  iaj: s/N//
09:24  RusAlex: iaj: thanx
09:24  Maahes: doing cs "normal! s" didn't do anything, ce works though
09:26  Maahes: also, when I do "+yy vim somehow inserts a carriage return or something at the end, is there a way to escape this?
09:29  Maahes: nevermind, I found it :)
10:06  buddhabrot: ever sinc egvim 7.3 my TABs (used for, f.i., makefiles) appear as ^I
10:06  buddhabrot: what setting am I looking at?
10:08  fow: buddhabrot, :se nolist perhaps
10:09  buddhabrot: hmm, not mentioned in my vimrc
10:09  fow: I mean, execute that and see if that does it
10:10  buddhabrot: ah, yes, that does it
10:10  buddhabrot: :)
10:10  buddhabrot: I'll add it to the growing mess that is my .vimrc
10:13  RusAlex: is there any plugins for gnome like vimium for chrome ?
10:13  buddhabrot: ah this is the culprit probably: set listchars=trail:.
10:17  iaj: can anyone tell me whether theres a way to repeat the nerdcommenter nerdtoggle command somehow?
10:27  _rane: i think it's more intuitive to always use <leader>c<space>
10:27  _rane: i'd love to be able to do this, though: https://github.com/scrooloose/nerdcommenter/issues/issue/13
10:42  snow_usa: hi
10:43  snow_usa: is there any command like bdelete but update the numerical ID for the files
10:43  Raimondi: snow_usa: No
10:43  snow_usa: for instance, 1 , 2, 3 ; bd file 2 will result in 1 , 3
10:43  snow_usa: I want 1, 2 instead
10:44  Raimondi: Buffer numbers are persistant through the session.
10:50  darkredandyellow: guys, I've got a file here that looks like this in vi:  ^Icheck_interval^I^I^I5
10:50  darkredandyellow: does anybody how anybody could have done the ^I massacre?
10:50  KeeperOfTheSoul_: the ^I are tabs
10:50  fow: darkredandyellow, :se nolist
10:50  darkredandyellow: KeeperOfTheSoul, ah, hard tabs
10:50  darkredandyellow: alright, thanks
10:51  KeeperOfTheSoul_: you can change the character used by hard tabs when list is set as well, which is quite nice
10:51  iaj: when I got a javascript part commented out - why is vim still counting the { } brackets for indenting and stuff?
10:52  darkredandyellow: KeeperOfTheSoul, thanks
10:52  iaj: anyone occuring the same issue? that's pretty annoying since I love =} so much :/
10:52  KeeperOfTheSoul_: I've never got on with javascript auto-indent, I just indent by hand
10:52  KeeperOfTheSoul_: though I do use smart-indent
10:53  malfy: how do i obtain the number of lines pasted into vim?
10:53  iaj: KeeperOfTheSoul_: really?? that's odd :(
10:55  KeeperOfTheSoul_: iaj: dunno, I'm particular about my indentation, so maybe vim's just doesn't match what I want
10:55  nettezzaumana: hi there
10:55  iaj: KeeperOfTheSoul_: ahhh I really thought that should be fixable
10:57  nettezzaumana: how can i explicitely print out from the docum,ent which encodings it uses actually ?? i have opened it okay but i'm in big doubts if it is utf8 and i smell that vim is so smart that can open it okay even if it's not in utf8
10:57  KeeperOfTheSoul_: iaj: maybe, but if it is I don't really know how at the moment
10:59  iaj: KeeperOfTheSoul_: heh thakns: )
11:00  nettezzaumana: :)
11:00  KeeperOfTheSoul_: nettezzaumana: :set fileencoding?
11:00  nettezzaumana: KeeperOfTheSoul_: no need to set, i just need to ask vim, which encoding he's using actually
11:00  KeeperOfTheSoul_: right, add a ? to the end and it just prints the setting
11:00  nettezzaumana: aah .. thanks KeeperOfTheSoul_ .. excellent
11:00  nettezzaumana: i'm using vim since 1933 and if i know a 3% of his features it's a lot :D
11:00  KeeperOfTheSoul_: ah, I've been using it about a month
11:09 --- nik0 is now known as niko
11:11  malfy: KeeperOfTheSoul_: can you help me with what  i asked?
11:16  _rane: is is possible to see diff for what's changed between save?
11:16  MarcWeber: Any PHP programmer here who has xdebug installed?
11:21  sitaktif: malfy: you can do a u then <c-r>
11:21  sitaktif: but that's kindof a hack :)
11:22  sitaktif: s/kindof//
11:23  fow: malfy, alternatively, you can use "*p or "+p
11:27  malfy: i wanted to find a way to store it in a variable though
11:34  pocket_: Hello
11:34  pocket_: How can I port Emacs-like indent <Tab> to vim?
11:34  malfy: fow,sitaktif
11:35  fow: malfy, you could count the lines in the . register. What the best way of doing this is, I'm not sure
11:36  the_isz: pocket_: == already does this
11:37  fow: malfy, perhaps len(split(@., '\n', 1)) " but I imagine there's a better way
11:38  fow: malfy, and, of course, this can be used with the * and + registers so that you don't actually have to insert anything (it's also more accurate in that one can insert more than just what one pasted)
11:38  pocket_: the_isz: Thanks. But I want to indent blank line when I'm on insert mode.
11:38  the_isz: pocket_: use S to go into insert mode in the first place
11:38  the_isz: pocket_: in this situation
11:39  the_isz: pocket_: or o or O
11:39  pocket_: Hmm....
11:40  pocket_: If I'm on blank line => then I want to indent. And If on filled line => then I want to reindent.
11:41  pocket_: Without leaving insertmode.
11:41  the_isz: pocket_: if you're on a blank line, you shouldn't have to indent unless you intend to put some text, too.
11:42  the_isz: pocket_: if you're already in insert mode, you can only reach a new line (properly) by pressing enter, which will honor your indentation
11:42  the_isz: pocket_: you're not using the cursor keys to move in insert mode, are you?
11:42  pocket_: yes
11:42  pocket_: I don't use cursor key.
11:43  the_isz: pocket_: then i fail to see the problem.
11:43  pocket_: Hmm....
11:43  the_isz: pocket_: what file type are you editing?
11:43  pocket_: C or Lisp
11:44  the_isz: pocket_: those shouldn't be any problem
11:45  pocket_: Hmmm..... I don't obey to program specification. But I love vim.
11:45  pocket_: So I want to import Emacs-like indent <Tab> to Vim
11:47  kaze`: silly question: is there any pref in gVim to force the Meta key to send Escape instead of setting the 8th bit?
11:47  the_isz: pocket_: what do you mean by "I don't obey to program specification"
11:48  pocket_: I want to change <Tab> keys to Emacs-like-reindent-key.
11:49  the_isz: pocket_: free your mind, _pocket. you don't need that in vim.
11:50  the_isz: pocket_: give me a concrete example of what you want to do.
11:51  sitaktif: pocket_: what do you mean by "reindent"
11:51  sitaktif: pocket_: not everybody knows Emacs-like-reindent...
11:52  pocket_: Sorry.
11:53  the_isz: sikatif: he wants to re-indent a line automatically. it's like == in vim.
11:53  the_isz: sitaktif: but he wants to do it while in insert mode
11:53  sitaktif: should be quite easy by creating a function..
11:53  the_isz: sitaktif: by pressing tab...
11:54  the_isz: sitaktif: yes, but it's stupid doing that while in insert mode
11:54  the_isz: sitaktif: what should it do? it indents the line automatically anyway
11:55  pocket_: When I make new-line in vim, then vim auto-indent correctry.
11:56  pocket_: But if I break indent by miss-pressing <Backspace>,
11:56  the_isz: pocket_: how would you do that?
11:56  pocket_: then I must back to above line and make new-line again to get correct indent.
11:56  the_isz: pocket_: yep. leave insert mode, go up, correct error, reindent with =
11:57  the_isz: pocket_: you re-indent in normal mode, not in insert mode
11:58  pocket_: But in emacs I just put <Tab>, this is very easy for me. So I want to port it.
11:59  the_isz: pocket_: you can't tell me == is any more difficult than <Tab>. if you really need it,  nnoremap <Tab> ==  should do the trick, but you shouldn't get used to it. you can do so many cool things with =, it would be a shame to reduce it to just ==.
12:00  pocket_: Hmm...
12:00  the_isz: pocket_: and don't reindent in insert mode, there's no situation in which that is useful.
12:01  pocket_: When in Vim do as the Vimmer do.. :(
12:01  the_isz: pocket_: finally :)
12:01  pocket_: Ok. I will try to change my mind.
12:01  pocket_: Thank you all :)
12:02  the_isz: pocket_: i used to program in emacs, too. there's just some things that work totally different in vim. if you try forcing vim to behave like emacs, you'll get yourself a headache.
12:03  the_isz: pocket_: just for starters: if you want to re-indent everything inside a {} block, you'll do  =iB  which stands for = (re-indent) inner Block.
12:04  the_isz: pocket_: if you want to re-indent the {} as well, it becomes  =aB  (re-indent a Block)
12:04  pocket_: Wow.
12:04  the_isz: pocket_: if it's a () pair, it becomes  =ab  and so on
12:04  the_isz: pocket_: maybe you now see why == (re-indent this line) is just the tip of the iceberg
12:04  pocket_: :)
12:04  pocket_: Thanks.
12:05  the_isz: pocket_: you're welcome
12:05  the_isz: pocket_: try vimtutor if you haven't already
12:06  pocket_: Ok.
12:09  sitaktif: pocket_: http://pastebin.com/fnn5vpdb  (but it is very ugly) (but it does what u want)
12:10  KeeperOfTheSoul_: I prefer to think of the i as inside rather than inner, ie indent inside the block
12:13  sitaktif: btw someone good in vim script can tell me how I could make the script better ? Used a hack for the non-unlimited-tab-repetition, but I wish there wsa better...
12:15  pocket_: Thanks sitaktif!! Your script works well.
12:16  _rane: =ab =aB, I don't get the differene
12:16  _rane: +c
12:16  sitaktif: but you cannot use any tab-completion script with that, be careful
12:16  sitaktif: this is really ugly
12:16  pocket_: Ok. Thank you for your advice.
12:16  sitaktif: np
12:17  mgedmin: aren't there existing scripts to emulate emacs tab behaviour?
12:17  the_isz: _rane: b is for () blocks, B for {}
12:17  mgedmin: you could perhaps simplify yours a bit by using inoremap <tab> <c-r>=EmacsTab()<cr>
12:17  _rane: what if it's language without braces
12:17  mgedmin: hm
12:17  the_isz: _rane: don't know...
12:18  mgedmin: sitaktif, yeah, go with <c-r>=, and in EmacsTab either do the == and return "" or just return "\t"
12:19  mgedmin: no need for the inner inoremaps
12:20  sitaktif: mgedmin: mmh cheers :!
12:21  sitaktif: I always forget about the nice <c-r>= feature
12:42  mgedmin: it's the 21st century, and yet when I press <PageUp> I can see how gvim redraws the screen from top to bottom
12:43 * mgedmin mumbles something about "double buffering, ever heard of it?"
12:46 * strull_ mumbels something about mgedmin's bad setup
12:46  mgedmin: strull_, louder, please, I can't hear you
12:49  strull_: mgedmin: FIX your setup !
12:49  mgedmin: strull_, I'd be happy to oblige
12:49  mgedmin: can you tell me what's wrong with it and how I can fix it?
12:50  strull_: no, could be anything.
12:50  strull_: mine is lightning fast
12:51  strull_: check "top". check your fonts. check if your system swaps
12:51  bosie: mgedmin: what system you got?
12:52  mgedmin: t61 laptop: core 2 duo, 1.8 ghz, 2 gigs of ram, intel x25-m ssd, intel 965GM video, ubuntu 10.10
12:52  mgedmin: strull_, hold down ctrl-l
12:52  mgedmin: now tell me you don't see flickering
12:52  mgedmin: lack of double buffering cannot be fixed by tuning your system
12:52  bosie: what is ctrl-l supposed to do
12:52  mgedmin: redraw the screen
12:53  bosie: doesnt do anything here
12:53  mgedmin: now gnome-terminal, for instance, does double-buffering, so there's no flicker for vim in a terminal
12:54  bosie: mgedmin: yea, i tried it in macvim and it has no flickering iether
12:54  mgedmin: kudos to macvim, then!
12:55  bosie: i didn't know there was a difference between the userinterface of gvim and macvim
12:57  mgedmin: I don't even know what macvim is, other than "a version of vim for macs"
12:57  jvv: hi, can someone help me with netrwPlugin and tell me what should i specify in my _vimrc so netrw would be loaded at vim startup ?
12:59  spiiph: jvv, the netrw plugin is loaded at startup by default. What are you after?
12:59  mgedmin: something like autocmd VimEnter * :Explore, maybe?
13:00 * mgedmin finds the UserGettingBored event and rofls
13:00  jvv: spiiph: when i go to View -> Open File Manager then it opens in sidebar... i would like to open it by defaule when my vim starts
13:01  spiiph: jvv, try what mgedmin suggested
13:02  jvv: ok, trying ;] generally i am after certain functionality but i think i would have to do PhD from vim to achieve it ;]
13:02  mgedmin: for "sidebar", use :Sexplore
13:05  jvv: mgedmin: ok, but it will be horizontal, can you please tell me how to make it vertical ?
13:05  spiiph: For the best possible experience, don't use netrw. ;)
13:05  mgedmin: try :vert Sexplore
13:05  spiiph: jvv, :VExplore
13:05  spiiph: I think :O
13:05  mgedmin: there's a setting that makes :Sexplore open vertical splits, iirc, but I don't remember what it is
13:05  mgedmin: :help netrw might mention it
13:06  jvv: yes, there is let g:netrw_browse_split = 2
13:06  jvv: but when opening doesnt seem to work
13:06  spiiph: :Vexplore
13:06  spiiph: That's it.
13:07  jvv: spiiph: perfect, that seems perfect. and you know maybe how can i set that during initialization it would have certain width ?
13:08  spiiph: Dunno, :Vexplore might take a count. I.e., :40Vexplore
13:09  jvv: spiiph: in matter of fact it does :]
13:09  mgedmin: :Vexplore 50 works too
13:09 * mgedmin didn't even know about :Vexplore
13:12  mgedmin: dear xml.vim, What The Heck? 3-space indents?
13:12  mgedmin: my 'sw' is 2
13:12  iaj: spiiph: what to use instead of netrw?
13:14  jvv: spiiph: and you know maybe how i can tell in :Vexplore that it would open preview window on the right and not edit window ? huh
13:14  mgedmin: iaj, some like NERDTree
13:15  spiiph: jvv, no clue.
13:16  jvv: what i am trying to do is file manager on left side and currently modified file on the right... it would be super
13:16  mgedmin: how can I trigger command-line completion from a mapping?  :map ,PE :e ~/.vim/plugin/<tab> inserts a literal ^I at the end
13:16  mgedmin: jvv, do try NERDTree
13:16  spiiph: mgedmin, tried \<Tab>?
13:16  jvv: mgedmin: better than netrw ?
13:17  mgedmin: \^I ...
13:17  iaj: mgedmin: can I use nerdtree for browsing remotely?
13:17  mgedmin: maybe I can map <expr> "...\<tab>" ...
13:17  spiiph: mgedmin, mmm, maybe
13:17  mgedmin: jvv, I don't like it, personally, but it's designed to support this kind of "always-visible sidebar" mode, iirc
13:18  mgedmin: nope, ^I still :(
13:18  kurkale6ka: mgedmin: try :h'wcm
13:18  DestinyAwaits: spiiph : Hello, Sir :-)
13:18 --- cli is now known as Guest37399
13:18  spiiph: hi
13:18  mgedmin: thanks, kurkale6ka!
13:18  jvv: i know how to use vi as vi but those all configuration options and tweaks are just endless
13:21  mgedmin: hm :/
13:22  mgedmin: ah, I need to <tab> twice because of my 'wildmode'
13:24  mgedmin: oh xml.vim, now you think that line needs 1 space of indent instead of 3
13:24  mgedmin: the correct answer is 2
13:27  _rane: hmm, why doesn't my vim know how to fold tags in .xml files?
13:27  _rane: I do 'za' on a tag, and it says no fold found
13:29  kurkale6ka: _rane: zfat
13:30 --- silex is now known as Silex
13:30  _rane: uhm
13:32  the_isz: mgedmin: see  :he :command-complete  . you can define how to complete the arguments of self-defined commands
13:53  anon33_: weird - typing :E returns the following error:
13:53  anon33_: E464: Ambiguous use of user-defined command
13:53  anon33_: any help diagnosing this problem would be great
13:54  mgedmin: anon33_, you have more than one user-defined command that starts with :E
13:55  mgedmin: type :com E to see them all
13:56  anon33_: mgedmin: thanks - it's eclim =\
13:56  mgedmin: you have options
13:56  mgedmin: you could start using :e . instead of :E
13:56  mgedmin: you could define a command E Explore
13:57  anon33_: that's not local to the current buffer, just the current directory
13:59  mgedmin: ah, good point
13:59  mgedmin: :e %:h then
14:00  anon33_: i have a keybinding set for %:h/* (leader - e) which i find very handy for autocompletion
14:00  anon33_: actually, i usually forget about it =\
14:13  sitaktif: anon33_: so classic.
14:22  _rane: how do I delete/change without changing the unnamed registry?
14:23  strull_: _rane: try "_dd
14:26 --- kek is now known as Guest55355
14:27  jvv: mgedmin: and can i somehow specify that this Vexplore would be opened on right side instead of left side ?
14:27  mgedmin: jvv, yes
14:28  jvv: mgedmin: can you tell the secret ?;]
14:28  mgedmin: something about 'splitright' or :botright, lemmecheck
14:28  mgedmin: yes, :set splitright should help
14:29  mgedmin: but doesn't
14:29  mgedmin: then it's netrw-specific
14:29  mgedmin: there may be an option
14:29  mgedmin: :h netrw_options
14:29  spiiph: :Vexplore!
14:30  jvv: mgedmin: in netrw i have it set but as previously it doesnt work during this special case of initialization
14:30  mgedmin: spiiph, gave you the correct answer
14:30  _rane: strull_: thanks
14:30  mgedmin: personally I tend to do <C-W>v:E<cr>
14:31  mgedmin: which pays attention to 'splitright'
14:31  _rane: is there a better way to add an empty line below than o<esc>?
14:31  mgedmin: _rane, not really
14:31  spiiph: It's amazing what you can find out if you do :h :Explore
14:31  mgedmin: p, if you've got an empty line yanked into your unnamed register
14:31  mgedmin: or :h netrw and /right
14:34  jvv: ok, thanks for help guys ;]
14:55  _rane: how do I wrap continuous block of text into "'s or similar character from any cursor position?
14:55  spiiph: vimgor, surround
14:55  vimgor: surround.vim is a plugin written by tpope for dealing with pairs of surroundings. It can be downloaded at http://www.vim.org/scripts/script.php?script_id=1697 or http://github.com/tpope/vim-surround
14:55  MarcWeber: _rane: There is surround.vim or such on www.vim.org
14:56  _rane: ah!
14:56  MarcWeber: _rane: Try vim-addon-manager to get it fast :)
15:00  _rane: pretty powerful plugin
15:02  _rane: now if that stuff was easier to remember
15:03  MarcWeber: _rane: Don't even try to. Create a mapping openeing a file where you can write down memos and look them up fast.
15:03  MarcWeber: Its impossible to recall everything. But finding the important information again is easy :)
15:03  MarcWeber: At least this works very well for me.
15:03  _rane: can't remember all, but most often used stuff has to become a habit or it's not actually that effective
15:06  _rane: and intuitive mnemonics help
15:07  alex_XD: hello
15:15  Silex: I don't know who I spoke to the other day, I recall him being named pyhro, but here it is: I managed to build gccsense on windows \o/
15:15  Silex: so now I have decent c++ autocompletion EVERYWHERE
15:18  tlonim: Silex: there seems to be a new plugin available based on clang as well
15:19  tlonim: which doesnt require a patched gcc
15:19  alex_XD: People how to make set comments work in c++ files?
15:19  Silex: tlonim: url?
15:19  tlonim: Silex: it is called clang_complete .. it is on github
15:20  Silex: damnit, this maybe made all my efforts useless
15:20  Silex: but thanks!
15:20  Silex: I'll check it out
15:28  rindolf: Hi all.
15:31  agib|home: does anyone know how I can get css's color highlighting to also work in my scss files? I have a scss.vim syntax, but I'd like the color highlighting from Colored CSS Color Preview (.vim/after/syntax/css.vim)
15:36  consumerism: i'm running vim in gnome-terminal, and i want to be able to copy from vim. ctrl-shift-c (normal gnome-term copy) doesn't work, visual select then middle click to paste doesn't work - what vim option can i set to be able to copy?
15:36  consumerism: i currently have set mouse=a
15:37  ormaaj: consumerism: compiled vim with X11 support?
15:37  ormaaj: If yes, things that get yanked go into the X copy buffer
15:38  graywh: ormaaj, not be default
15:38  graywh: s/e/y/
15:38  Silex: tlonim: the script doesn't look windows ready
15:39  Silex: but it looks like just a matter of fixing some system() calls there and there
15:39  consumerism: ormaaj: how can i check how it was compiled? i installed from arch repos
15:39  ormaaj: and with mouse=a and ttymouse=xterm or xterm2
15:39  graywh: agib|home, your after/syntax/css.vim should be getting sourced when using ft=sass or ft=scss
15:39  ormaaj: consumerism: vim --version I believe
15:40  agib|home: graywh: so I can add some sort of line in the scss.vim file?
15:40  graywh: ormaaj, i think you're thinking of vim's visual selection taking over the primary selection
15:41  graywh: agib|home, you should need to
15:41  agib|home: you mean shouldn't need to?
15:41  graywh: agib|home, in a new vim, open a scss file, look at :scriptnames
15:41  graywh: agib|home, right, should *not* need to
15:42  graywh: sometimes, my fingers can't keep up
15:42  ormaaj: graywh: hm you're right it doesn't look like it has to do with yanking... anything selected in visual mode.
15:43  agib|home: graywh: heh :)
15:43  agib|home: graywh: ok yeah it's there on line 63 of 68 of scripts
15:43  graywh: kinda like bad connection...some packets get lost
15:44  frobnitz: Is there a way to always show the absolute path in the status line?
15:44  agib|home: but I don't see any highlighting in scss files but I do in css files...
15:44  graywh: frobnitz, customize your 'statusline'
15:44  ormaaj: IIRC I've had vim copy/paste working in putty over ssh on windows though.
15:52  frobnitz: graywh: Ah, yes, thanks.  Looks like I have to go find what the default is - annoying that the default setting is blank.
15:54  graywh: frobnitz, the default setting is given as an example in the docs
15:54  graywh: frobnitz, you probably want to replace %f with %F
15:56  frobnitz: graywh: Ah, found it burried in there.  Thanks again.
16:14  drio:  Hi, I was wondering what you guys do when have to edit code from someone else and this person uses other conventions (mainly real tabs instead of spaces)...
16:15  graywh: tell them tabs aren't for indenting code
16:15  drio: :)
16:15  graywh: and send them a re-indented file
16:23  Silex: drio: if the ending file really has to use tabs, I'd just edit it my way and before sending it back do something like :%s/^  /\t/g
16:23  hendry: drio: try `indent`
16:24  hendry: drio: http://indent.isidore-it.eu/beautify.html
16:30  drio: Thanks, well, the thing is you don't want to impose your identing policy, so you want to work with whatever they use .... As Silex mentions..
16:30  drio: indent first  and then , at the end, :%s/^  /\t/g
16:31  Silex: try it first
16:31  spiiph: :h :retab
16:31  Silex: and yeah, check what spiiph said
16:31  djmccormick: i'm reading the oreilly mastering regular expressions book -- i notice some of the introductory examples aren't working in vim so far. should i acclimate myself to the differences, is there a script i should get? any advice?
16:33  MarcWeber: djmccormick: There is a script which claims to help doing so. But reading :h pattern.txt and trying to find examples yourself running them using the search is the fastest way IMHO.
16:34  MarcWeber: djmccormick: Vim has special syntax & features such as match column or row ..
16:34  spiiph: djmccormick, you should learn Vim's version.
16:35  spiiph: More generally, you should learn each variant you need to use.
16:36  MarcWeber: djmccormick: What are your use cases?
16:37  djmccormick: MarcWeber, spiiph thanks for the advice. i'll probably be using it in vim most so i'll heed your advice. i'll use this book to prop my monitor up one inch closer to eye level ;)
16:38  MarcWeber: djmccormick: Learn abotu ctrl-f in / command line and q/ Maybe it helps you ;)
16:39  kongo: djmccormick: see :h pattern for vim's regex
16:55 --- Silex is now known as silex
17:05 --- Natch is now known as Natch|
17:05  unkanon: doesnt vim have an omnicompletion command built in?
17:05  unkanon: wasn't it C-/ or something? i know i've used it before...
17:06  jmcantrell: unkanon: <c-x><c-o>?
17:07  unkanon: jmcantrell: do i :set omnifunc=what?
17:07  unkanon: Complete?
17:08  hydester: hi.  i've had my vimrc configured with wrapmargin=79 for quite some time with no issues.  now it appears to wrap in like 30.  any ideas how this may happen?
17:08  mgedmin: unkanon, no, you :filetype plugin on
17:08  mgedmin: hydester, read :h 'wrapmargin' please
17:09  hydester: mgedmin: so then what should i use for 79 column wrapping?
17:10  mgedmin: 'tw'
17:10  unkanon: jmcantrell: mgedmin: thanks!
17:11  hydester: mgedmin: thank you.  not sure why it appeared to work previously.
17:11  Nazcafan: hello
17:11  Nazcafan: how do I remove the last \n from a file in vi ?
17:11  mgedmin: hydester, your window was wider ;)
--- Log closed Fri Nov 12 20:31:58 2010
--- Log opened Fri Nov 12 22:39:26 2010
22:39 --- Users 619 nicks [0 ops, 0 halfops, 0 voices, 619 normal]
22:39  graywh: homekevin, he meant shell
22:39  homekevin: Er, whichever one you execute, to phase it more clearly.
22:39  graywh: "(e.g. ..."
22:40  homekevin: Yeah, maybe.
22:40  homekevin: I think zsh would make a rather bad terminal.
22:40  DHulme: why shouldn't it be a terminal? it does everything else
22:40 --- Channel #vim was synced in 73 seconds
22:40  homekevin: I mean, it's bad enough as a shell, am I right?
22:41  Maahes: gnome-terminal allows me to launch a terminal with a default command, which happens to be zsh. Since I can't change my shell.
22:41  graywh: for xterm, you can specify it as a parameter
22:42  homekevin: Anyway, Maahes, your shell is not generally determined by your terminal, but by your user settings. It's one of the fields in /etc/passwd
22:42  DHulme: you can't use chsh?
22:42  graywh: i.e. xterm zsh
22:43  homekevin: So you would typically change your shell with chsh, but bear in mind that you'll be limited to the options in /etc/shells.
22:43  Maahes: DHulme: I tried, it says zsh is not a valid shell. I'm assuming that's because this user is using rsh. (I'm on a liveusb)
22:44  homekevin: Maahes: Check /etc/shells.
22:47  Maahes: homekevin: I had an empty /etc/shells, so I created a hardlink to zsh in it, and then tried chsh, it says PAM authentication failed.
22:48  homekevin: Maahes: That's... not how /etc/shells works.
22:48  graywh: it's a list of valid login shells
22:48  graywh: full path
22:48  Eiler: i made an alias or a function called "tmake", that i try to call from inside vim with: :! tmake :file, but it says /bin/bash: tmake: command not found shell returned 127
22:48  Eiler: why?
22:48  Maahes: ah, well. its empty then.
22:49  homekevin: Eiler: Because aliases and functions apply to interactive shells.
22:49  jmcantrell: Eiler: :! is not run in a login shell
22:49  homekevin: You'd get seriously messed up script execution if aliases and functions were expanded.
22:49  Eiler: oh?
22:50  Eiler: so how do i then do it?
22:50  homekevin: Eiler: One way would be to use a separate script instead of an alias or function.
22:50  homekevin: Another would be to force the shell Vim uses to be interactive. I think you can do that.
22:51  homekevin: But, it seems like that might be a bad idea.
22:51  Eiler: separate? i put the alias or function in .bashrc
22:51  jmcantrell: yeah, i've tried that before. it was insanity
22:51  graywh: Eiler, using :! doesn't load .bashrc b/c it's not an interactive shell
22:51  homekevin: Eiler: Right, but that won't be sourced by a non-interactive shell.
22:51  jmcantrell: Eiler: basically what you want to do is make a script out of the function in your .bashrc
22:51  jmcantrell: and put it in your PATH
22:51  Eiler: aha
22:52  homekevin: You don't *need* to put it in your PATH.
22:52  homekevin: It might be easier that way, though.
22:52  Eiler: so i can just make a script of it
22:52  Eiler: and then call it?
22:52  jmcantrell: homekevin: technically, no, but i'm not sure why you wouldn't
22:52  homekevin: I mean, I wouldn't drop my own script in /bin.
22:52  jmcantrell: homekevin: of course not. do you not have a bin directory in ~ that you put scripts into?
22:53  homekevin: I put my scripts in $HOME/bin, which I add to my path.
22:53  jmcantrell: yes, exactly
22:53  jmcantrell: i never suggested putting it in /bin :P
22:54  homekevin: My point is just that "put it in you PATH" kind of sounds like "put it in one of the directories currently in your PATH", which would be system directories by default.
22:54  homekevin: Noobs tend to d
22:54  homekevin: oops
22:54  homekevin: tend to do things like that.
22:54  homekevin: I know I did.
22:54  mailskinner: hello vimmers
22:55  homekevin: (Not implying anyone here is a noob)
22:55  homekevin: Except for mailskinner, who is clearly a noob.
22:55  homekevin: ;)
22:55  mailskinner: eh?
22:55  mailskinner: thats true
22:59  mailskinner: anybody cares helping with using javac ?
--- Log closed Fri Nov 12 23:06:34 2010
--- Log opened Fri Nov 12 23:11:55 2010
23:11 --- Users 618 nicks [0 ops, 0 halfops, 0 voices, 618 normal]
23:12  chromakode: hey #vim, noob here -- I often end up wanting to paste something I yanked into :s/foo/bar -- is there a way to do that?
23:12  mailskinner: yes, by reading documentation and the wiki it should work (theoretically)
23:12  fow: mailskinner, what does :se efm? (with the question mark) say?
23:13 --- Channel #vim was synced in 73 seconds
23:13  fow: chromakode, :h c_CTRL-R
23:13  chromakode: got it!
23:13  chromakode: thanks fow
23:13  chromakode: CTRL-R 0 works
23:15  mailskinner: am i supposed to paste it here in public?
23:16  fow: mailskinner, it should be just one line
23:16  mailskinner: well here it is:%f(%l)\ :\ %t%*\\D%n:\ %m,%*[^\"]\"%f\"%*\\D%l:\ %m,%f(%l)\ :\ %m,%*[^\ ]\ %f\ %l:\ %m,%f:%l:%c:%m,%f(%l):%m,%f:%l:%m,%f\|%l\|\ %m
23:18  fow: That's definitely different from what's in my compiler/javac.vim. Try :set efm=%E%f:%l:\ %m,%-Z%p^,%-C%.%#,%-G%.%#
23:19  mailskinner: thanks fow i am trying this
23:23  mailskinner: fow how can i paste the result?
23:23  fow: What do you mean?
23:23  fow: I mean, the result of what?
23:24  mailskinner: i get  :!javac  > Temp_file_path>&1
23:24  mailskinner: press enter... etc
23:25  mailskinner: how can i paste the exact result?
23:25  fow: you don't need to paste that anywhere to get Vim to parse it for quickfix stuff
23:26  mailskinner: i know i wanted to paste it here so you understand better
23:27  fow: oh I wouldn't be able to help with that at all. 'efm' confuses the hell out of me. I just took that from the compiler/javac.vim on my system
23:28  mailskinner: you are not the only one to be confused from errorformat parsing string
23:30 --- wtfness is now known as foocraft
23:31  ckoehler: what exactly is the difference between the b and B text objects?
23:31  ckoehler: different delimiters?
23:31  sjl_: ckoehler: b == () B == {}
23:31  sjl_: I wish there was one for square brackets
23:32  ckoehler: ah k
23:32 --- isaacs is now known as isaacs[away]
23:32  fow: sjl_, there is, i[ and a[ (and i] and a])
23:32  ckoehler: so cib = ci)
23:32  sjl_: fow: I mean an alias like b/B that's easier to type
23:32  fow: (or did you mean a letter associated with the brackets?)
23:32  fow: ah
23:32  sjl_: ckoehler: yes
23:33  ckoehler: k cool
23:33  ckoehler: that makes sense
23:33  sjl_: I guess I could use a bunch of nnoremap staments like "nnoremap cix ci["
23:34  fow: sjl_, or one onoremap
23:35  sjl_: what the heck is onoremap?
23:36  fow: :h mapmode-o
23:36  fow: basically, onoremap ix i[ and onoremap ax a[
23:36  sjl_: dear god
23:37  sjl_: brb, cutting about 200 lines of remaps out of my vimrc
23:37  fow: hahaha
23:37  Raimondi: lol
23:38  ckoehler: i love reading or watching anything about vim, because i always learn something new
23:39  sjl_: hmm
23:39  sjl_: :omap d [
23:39  sjl_: but cid doesn't seem to work :\
23:39  fow: id i[
23:40  KeeperOfTheSoul: hmm, is it possible to use omap to create custom text-objects then?
23:40  fow: KeeperOfTheSoul, should be, yes
23:40  KeeperOfTheSoul: fow: how do you do a motion command as a non-motion though?
23:40  sjl_: fow: Ahh, I see
23:41  KeeperOfTheSoul: otherwise the initial motion to move to the start of the "text-object" wouldn't work correctly
23:42  fow: oh hm
23:45  sjl_: sweet
23:45  sjl_: onoremap <silent> inb :<C-U>normal! f(vib<cr>
23:45  sjl_: "* in next ()"
23:45  KeeperOfTheSoul: yeah, at the moment I just have them as vmaps and have to remember to hit v<custom> before running the command
23:45  KeeperOfTheSoul: rather than say, d<custom>
23:49  ckoehler: sjl_: what does the :<C-U>normal! do ?
23:49  sjl_: ckoehler: Not 100% sure, but it's in the example given in :h omap-info
23:49  sjl_: The general idea is that it lets you choose your own starting point for the range
23:49  ckoehler: sjl_: oh i get it
23:50  ckoehler: huh, cool
23:50 * ckoehler yp
23:50  KeeperOfTheSoul: so no help prefix for operator pending commands? or are they lumped in with visual?
23:51  ckoehler: sjl_: except it only works on the current line
23:52  sjl_: correct
23:52  sjl_: you could probably make it work by using / instead of F
23:52  sjl_: but wouldn't that wipe out the user's current search (if they have one)?
23:52  ckoehler: probably
23:55  KeeperOfTheSoul: ah interesting, wonder if executing a motion command as if it were normal mode could be made to work like a text object
23:57  KeeperOfTheSoul: nope, at least not how I tried anyway :)
23:59  sanmarcos: is there a way to find the next NON-ASCII Character?
23:59 --- TK is now known as Guest84808
--- Log closed Sat Nov 13 00:00:04 2010
