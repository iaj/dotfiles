--- Log opened Thu Jan 13 00:00:11 2011
00:01  bloger: Why changes in text file appers after :q command only?
00:02  Araxia: Silex: :message history looks like it's fixed at 200 and can't be changed. or did you mean clear in some other sense?
00:02  spiiph: bloger, start vim with: vim -u NONE -N
00:02  spiiph: And try again
00:05  bloger: spiiph: yes, this solve the problem. But I loss syntax highlight now.
00:05  spiiph: Yes.
00:06  spiiph: There's something in your .vimrc or one of your plugins that does this
00:07  bloger: spiiph: in vimrc.
00:07  spiiph: You can single out the source by further doing vim -u NORC -N
00:08  spiiph: and vim --noplugin
00:16  bloger: spiiph: u point me out on right way. thank u very much
00:28  jayne: Is there a way to save my vim session -- all the open tabs and line numbers they're on?
00:30  kuhrt: I keep seeing a lot of codes in vim command coumentation like <CR> and <SNR> and <C-U>, can someone point me toward a legend listing all their meanings?
00:31  Araxia: jayne: :help :mksession
00:31  Araxia: also see the sessionman.vim plugin.
00:31  jayne: Araxia: chers
00:31  jayne: s/e/ee/
00:32  Araxia: kuhrt: see :help key-notation
00:33  kuhrt: Araxia: thanks
00:34  jayne: mksession seems to hang up on paths with spaces
00:35  jayne: when restoring a session with open files that have spaces, I mean
00:35  Araxia: kuhrt: also, if you type <C-d> (Control-d) with a partial word after :help on the commandline, it will show you possible help topics containing that key. for example, i found that help topic by typing :he <C-<C-d>
00:36  Araxia: jayne: what platform? what do you mean by "hang up"?
00:37  jayne: Windows... it says "Undefined variable: My" Invalid expression My\ Documents
00:39  Araxia: jayne: can't remember having that problem on windows, myself, but haven't been using it in a while. dig in to the session file and find that line.
00:40  Araxia: i had to write a function to clean up my session files after writing them out (obscure bug with fold preservation when there are multiple splits).
00:45  kuhrt: Araxia: sounds great but I don't quite follow, i literally type <C- or press the equivilant key strokes
00:46  Araxia: kuhrt: sorry, i should have been more careful. literally type (without quotation marks), ":help <C-", then type control-d
00:49  kuhrt: Araxia: ok I thnk I got it =), btw, does :h always only search the main vim help file or is there a way to access plugin help files? For instance say I'm interested in accessing Fuzzy Finder's long help file, is there a best-way of doing that?
00:50  Araxia: kuhrt: you'll need to index plugin help after installing it. see :help :helptags
00:50  Araxia: after you do that, they'll show up with the rest of the topics.
00:50  kuhrt: Araxia: ok great, I'll take a look, thanks
00:50  Araxia: many plugins will mention this in their documentation.
00:50  kuhrt: right
00:54  tek0: is there a function that returns the indentation level of a line?
00:54  Araxia: tek0: indent()
00:54  tek0: oh
00:54  tek0: :)
00:54  Araxia: :-)
00:56  Araxia: and this happens to be a great example of where cmdline <C-d> is great. e.g. ":help indent<C-d>"
00:57  jeffszusz: huh
00:57  jeffszusz: ctrl d eh
00:57  jeffszusz: why not just 'tab' ?
00:57  jeffszusz: shows the same list...
00:57  Araxia: tab doesn't show you all at once.
00:58  jeffszusz: hm. one of my plugins must alter that behavior for me.
00:58  bairui: that depends on your wildmode
00:58  jeffszusz: orthat
00:58  jeffszusz: ah yes
00:58  jeffszusz: my wildmode = list:longest,full
00:59  jeffszusz: it's fun finding out what things in my vimrc are doing O_o
00:59  Araxia: heh
01:00  Araxia: meanwhile, i agonize over every new bit i add, trying to make sure it's *just right*.
01:00  jeffszusz: hahahaha
01:00  jeffszusz: yeah
01:00  jeffszusz: well
01:00  jeffszusz: i know what a surprising amount of my .vimrc is doing
01:00  jeffszusz: and theoretically i knew what that was doing...
01:00  jeffszusz: i had the comment "show possible matches with tab completion"
01:01  jeffszusz: i didn't know it was changing it from a mini-tab-completion thing to a MEGA_LIST OF ALL POSSIBILITIES
01:01 * jeffszusz updates his comments
01:01  Araxia: i think my worst bit is my statusline, which still looks essentially like line noise to me, with the helpful comment above it: TODO: annotate this status line.
01:02  jeffszusz: lol
01:02  bairui: Araxia: go hard, man! cut the bits you don't know/use and see how you go for a while.
01:04  Araxia: bairui: heh. i actually use them all. and it's easy enough to translate when i've got it right there as an example. but i think i'd struggle to parse it without help.
01:04  bairui: i couldn't read a statusline without the docs either. I thought you meant there were things in your visible status line you didn't use. :)
01:05  Araxia: ah, no. just the setting.
01:05 * jeffszusz marvels at possibility of customizing his vim statusline...
01:05  bairui: note: I wouldn't try to commit the status line stuff to memory either - that's *why* the docs are there.
01:05  kuhrt: I've been using macvim version of vim and I'm starting to think or realize that when i make a command, i.e. ":cd ~" it's just as if i was in bash
01:05  kuhrt: is that correct?
01:05 * jeffszusz resolves that he's not allowed until the rest of his vimrc is relatively well understood
01:05  Araxia: kuhrt: not exactly. but quite similar.
01:06  bairui: and you're teaching the good stuff with c_ctrl-d
01:06  kuhrt: Araxia: ok, any details or is it something that becomes clear with time/experience
01:06  Araxia: scrooloose has a great writeup of statusline customization: http://got-ravings.blogspot.com/2008_08_01_archive.html
01:07  jeffszusz: NO Araxia! I cannot be tempted
01:07 * jeffszusz hides
01:07  bairui: there goes that resolution...
01:07  Araxia: kuhrt: be aware that :cd will change the cwd for all windows (you can use :lcd for a single window).
01:08  kuhrt: Araxia: ok thanks for the heads up
--- Log closed Thu Jan 13 01:28:20 2011
--- Log opened Thu Jan 13 01:33:41 2011
01:33 --- Users 573 nicks [0 ops, 0 halfops, 0 voices, 573 normal]
01:34  jeffszusz: bairui, yes and no
01:34  jeffszusz: both "work'
01:34  jeffszusz: but they simply repeat the entire end tag
01:34  jeffszusz: not a new end tag each time
01:34  jeffszusz: so
01:34 --- Channel #vim was synced in 76 seconds
01:34  kuhrt: there's something that's been causing a bit of trouble in vim movement, when I use ^$ command to go to end of line, and then switch to insert mode, the cursor is to the left of the last character, not the right, i find this annoying
01:35  jeffszusz: <html><body><div><div> followed by 4i</<esc> will put four </div> tags
01:35  bairui: kuhrt: you want append, not insert  a
01:35  jeffszusz: kuhrt: just use the letter a
01:35  bairui: jeffszusz: urgh. ok.
01:35  nate-: kuhrt, or even better A
01:35  bairui: indeed. how are ya, nate-? Keeping those toes dry, mate? :)
01:35  nate-: bairui, yea dude, all dry here
01:36  nate-: we got pretty lucky
01:36  nate-: my work is under water though
01:36  bairui: good to hear
01:36  kuhrt: oh that's great, little detail makes me much happier
01:36  kuhrt: thanks
01:36  bairui: for both ;)
01:36  jeffszusz: kuhrt: a will go into insert mode after the current character, A will go into insert mode at the end of the line
01:36  jeffszusz: so you don't have to $ first
01:37  kuhrt: jeffszusz: yay, yes much better
01:37  jeffszusz: hm. pastetoggle seems useless
01:37  bairui: kuhrt: and  I  is the same for ^i   <--- all details you should have gotten from doing   vimtutor   ;)
01:37  bairui: jeffszusz: unless you want to paste something...
01:38  jeffszusz: bairui: :set paste
01:38  jeffszusz: it'll just always be avail
01:38  bairui: sure, or hit a single key - your fingers
01:38  jeffszusz: no
01:38  jeffszusz: in my vimrc
01:38  jeffszusz: :set paste
01:38  jeffszusz: done
01:38  jeffszusz: it never needs to be off
01:38  bairui: you don't always want paste on - you lose indent
01:38  jeffszusz: OH you do?
01:38  jeffszusz: that i did not catch
01:39  bairui: hence the need for a toggle :)
01:39  jeffszusz: hm the help for paste does not mention losing indent
01:40  bairui: try it
01:40  jeffszusz: i believe you, i'm just commenting that it wasn't mentioned in there.
01:42  bairui: jeffszusz: read *all* of :help 'paste     <-- look at the list of what's turned off / disabled in paste mode.
01:42  kuhrt: bairui: ah yes vimtutor, I will be getting on that
01:43  bairui: kuhrt: you could also have a look at https://github.com/dahu/LearnVim if you're just starting out with Vim or you need to level-up. It mentions vimtutor and some other ways to learn vim.
01:47  kuhrt: :bairui thanks, will check it out
01:48  kuhrt: strange, using FufCoverageFil seems to hang MacVim
01:48  kuhrt: FufCoverageFile*
01:49  kuhrt: FuzzyFinder's recurssive file lookup
01:49  bairui: wrong version of Ruby?
01:49  bairui: or do the other parts of FF work fine?
01:49  jeffszusz: wow
01:49  kuhrt: not sure, all other aspects of Fuf work so far, like FufFile
01:49  jeffszusz: I now know what everything in my vimrc is for
01:49  bairui: ok, probably not that then...
01:50  jeffszusz: crazy
01:50  kuhrt: jeffszusz: is that a sort of rite of passage moment?
01:50  jeffszusz: haha
01:50  jeffszusz: well, theoretically you shouldn't put anything in your vimrc you don't know
01:50  jeffszusz: but i had a big one
01:50  jeffszusz: so yeah i guess it is
01:53  jeffszusz: I should probably reorganize it...put better commenting
01:57  jeffszusz: I have to say, :diffthis is one of my fav features.
01:58  guns: Would :mksession + grep 'map' be tantamount to dumping all active mappings to a file
01:58  guns: ? or is there someting mksession would miss?
02:00  bairui: guns: that'd probably do it... but it would be a mess... What are you trying to do?
02:01  guns: bairui: trying to create a consistent mapping convention for myself, and trying to remap all plugin mappings that don't comply
02:01  guns: I'm most of the way there, just trying to weed out some last annoyances
02:02  bairui: interesting
02:02  bairui: plugin map clashes suck
02:02  guns: Once I realized that I could have my terminal send an an arbitrary escape sequence that vim could recognize as a <Super> key, I was on fire
02:03  bairui: do go on :)
02:04  guns: haha. rxvt-unicode + Xdefaults + Vimscript + pathogen == unicorns and candy
02:06  bairui: guns: you'll have to put a blog post together on what you're doing. I'd be interested in learning more.
02:07  Raimondi: guns: By any chance are you the guy that posted to the vim list with mappings problems related to delimitMate?
02:07  bairui: g'day, Raimondi :)
02:08  Raimondi: Good morning, bairui :)
02:08  guns: bairui: Well, that's an interesting thought. I always shy away from these things because I know there exists a guy just like me, only 20 years older
02:08  guns: Raimondi: I think it was! but I sdon't remmber about what
02:08  bairui: guns: no reason not to share. You might learn something from him; you might teach him something. :)
02:10  guns: Raimondi: on second thought, I'm not sure I would be complaining to vim-use about delimitMate. looking through my mail...
02:10  kuhrt: anyone using macvim? just tried to remap command-t to the plugin command-t but it's still opening tabs on command-t, I wrote "noremap <D-t> in .vimrc, but no joy
02:10  Raimondi: guns: I'm just replying, so you'll know if it was you :)
02:11  guns: Raimondi: :) no, I don't think it's me then. I think delimitMate is AWESOME
02:12  Raimondi: kuhrt: <D-T> is used by one of the menus, see the last of the one before of :h macvim-hints
02:12  Raimondi: s/of/or/
02:16  lewis1711: syn match   schemeError ![^ \t()\[\]";]*!  ... I am trying to parse this. mainly I want to add # and -> to the list of things that are not schemError
02:17  bairui: i'm using (recently switched to) rxvt-unicode and I notice that my <A-Up> and <C-Up> etc maps don't work any more. I have to map terminal escape codes, and that's, well, gross. Is there something I'm missing in an X / terminal config file somewhere?
02:17  nate-: kuhrt, http://pastie.org/1454751
02:17  nate-: similar thing, just change the last line to the Command-T mapping
02:17  jeffszusz: can you comment on the same line as a command?
02:18  jeffszusz: vim highligting doesn't seem to think so
02:18  chovy: how do i do this:
02:18  chovy: :%s:(\d+)::g
02:18  bairui: \+
02:18  bairui: and \( \)
02:19  bairui: but... they're not needed there.
02:19  chovy: dang, i always forget that one.
02:19  bairui: :%s/\d\+//g
02:19  nate-: jeffszusz, of course, just use a bar, eg: :w |" hi jeffszusz
02:19  chovy: the text actually has (142) for example.
02:19  bairui: oh. hehe... my bad :)
02:20  bairui: that's the problem when you think in magic :)
02:20  guns: bairui: do you mean <A- and <C- arrows don't work in Vim, or across all programs?
02:20  jeffszusz: awesome nate, thanks
02:21  bairui: guns: hmm... i don't use other programs. :)  So, I dunno. Gimme one I could try it in.
02:21  bairui: well, weechat's Alt arrows works just fine
02:22  guns: bairui: I'm afraid that mapping escape codes is the only sane way to get things the way you want them.
02:22  bairui: *shudder*
02:22  bairui: that makes for totally non-portable plugins... with ugly   if rxvt   blocks.   yuck.
02:23  guns: I think the onus is on the user to make things work
02:23  guns: here is mine for reference:
02:23  guns: https://github.com/guns/nerv-guns/blob/guns/etc/user.Xdefaults
02:23  bairui: cheers, mate
02:24  guns: rxvt-unicode has a nice compact way of expressing a range of maps in a single line
02:25  guns: I don't have Ctrl and Alt arrows setup because I'm used to Emacs/Readline style movement bindings (and have them setup in vim as well)
02:25  bairui: ok - so lines 29-36 are alien to me. I'll search for some docs on that. Thanks again, guns. :)
02:26  guns: bairui: yeah, it sucked to learn how to write that :(  but do it once, and you gain a friend for life.
02:26  bairui: sweet
02:27  xamox: anyone here use xdebug w/vim?
02:27  xamox: I have it working. I know how to set a break point. My problem is I open the file, set the break point, hit f5, reload the page, it finds it, then jumps right back to the first line in the index.php. I want it to just go to the breakpoint in the file I had opened.
02:28  yogione: b
02:29  kuhrt: what does <Leader> mean in key mappings?
02:29  jeffszusz: by default, it means \
02:29  jeffszusz: but you can change it
02:29  kuhrt: ah ok
02:29  kuhrt: thanks
02:30  jeffszusz: i like the \ just fine
02:30  jeffszusz: doesn't conflict with anything
02:30  xamox: yogione, you saying 'b'? that will go to my breakpoint?
02:30  kuhrt: \ seems fine to me too
02:30  Araxia: xamox: no, not :b. just back a word.
02:31  Araxia: nm
02:33  yogione: sorry, my 9 year old trying to get my attention
02:36  xamox: Araxia, is it possible to do what I'm asking?
02:36  xamox: Araxia, or do I have to step through manually"
02:39  Araxia: xamox: sorry, i had completely misread the context when i spoke up. i've never used xdebug. is it a vim plugin?
02:40  xamox: Araxia, yeah it is.  Basically it lets you set break points and walk through code like an IDE. The issue I'm having is I want to set a breakpoint on a particular section of code and when I run it vim automatically closes the file I have open and opens index.php
02:41  Araxia: do you know if it uses the native vim debug functionality? or is it all custom?
02:43  kuhrt: :nate- thanks
02:46  jeffszusz: vim has native debugging?
02:46 * jeffszusz dies
02:47  Araxia: jeffszusz: well, for vimscript.
02:47  jeffszusz: ahh
02:51  Neurotiquette: When using vim if I press my arrow keys it's outputting D, C, A, and B to the buffer. What could be causing that annoying quirk?
02:54  Araxia: Neurotiquette: most likely your terminal isn't set up correctly.
02:55  Neurotiquette: Araxia: oh? how do I figure that one out?
02:56  Araxia: that's quite a rabbit hole, there. what os? what terminal?
02:56  Neurotiquette: ubuntu... bash, i think
02:56  jeffszusz: bash would be it
02:56  tek0: bash's not a terminal.
02:56  jeffszusz: oh
02:57  jeffszusz: terminal, shell. i suppose they aren't as interchangeable as they seem
02:57  Araxia: jeffszusz: heh. not once you want to start troubleshooting. :-)
02:57  Araxia: Neurotiquette: what is your $TERM set to ?
02:58  Neurotiquette: xterm
02:59  Neurotiquette: Kinda strange... this issue spontanously popped up
02:59  Neurotiquette: was working fine before
03:01  tek0: when I'm using vim inside tmux, I've got the same problem
03:02  tek0: while I don't use the arrows, I still get that behaviour with F keys and s-tab in insert
03:03  homekevin: Neurotiquette: Is there an "About" option? It's hard to say if xterm is right without knowing what the terminal is.
03:03  homekevin: ...but it's probably not.
03:03  Neurotiquette: homekevin: gnome terminal 2.32.0
03:03  RoboTeddy: is it considered a bad habit to use ctrl+o and then a movement to move the cursor around while in insert mode?
03:03  tek0: I'd say so ;)
03:04  RoboTeddy: (just learning vim; wondering if I'd be better off long term to always exit insert mode to move the cursor)
03:04  Araxia: RoboTeddy: do you really save yourself keystrokes with that?
03:04  RoboTeddy: araxia: hmm I guess not, it's exactly the same number, come to think of it
03:04  Araxia: ah, yeah, in that case, form good habits. you can develop that habit later as an eccentricity. :-)
03:04  RoboTeddy: good way of looking at it, thanks
03:04  walt: RoboTeddy: yes, since you almost always want to move with searches
03:05  walt: moving characterwise is usually not what you want
03:05  Axioplase_: I think using c-o is a very good thing.
03:05  walt: but I use the cursor keys for that
03:05  walt: when I do it
03:05  homekevin: Neurotiquette: I wrote an article about configuring GNOME Terminal and Vim: https://gist.github.com/744284
03:05  walt: RoboTeddy: look into F, f, T, t, 0, $, I, A
03:06  RoboTeddy: walt: I use those; those are movements, right?
03:06  walt: RoboTeddy: yes
03:06  Araxia: i cheat and use kr4mb simultaneous vi mode to be able to use my hjkl as arrow keys even in insert mode.
03:06  walt: RoboTeddy: especially f, F, t, T is very helpful
03:06  RoboTeddy: that's what I asked then, I'm not just using hjkl
03:06  RoboTeddy: walt: yep, already using those :) thanks
03:06  walt: cool
03:06  homekevin: Neurotiquette: Was that in screen or tmux? Or just plain GNOME Terminal?
03:06  walt: RoboTeddy: for one-character movements I use the arrows. Like if you pressed a, but meant i
03:07  walt: or vice versa
03:07  RoboTeddy: cool
03:08  walt: RoboTeddy: also look into gi
03:08  walt: if you dont know it
03:08  Neurotiquette: homekevin: plain jane I think
03:08  RoboTeddy: if I've just entered, in insert mode, "function hello(param){\CR}" and now I want to start typing inside the function body, should I exit insert mode and then use shift-O to enter a new line above?
03:08  walt: "go to where you last made a change"
03:08  walt: Obfuscate: yes
03:08  RoboTeddy: walt: looking it up now, thanks
03:08  walt: errr
03:08  walt: RoboTeddy: ~
03:09 --- peth_ is now known as peth
03:09  walt: I started using tabs yesterday
03:09  walt: I can see them having their uses
03:09  homekevin: Neurotiquette: If you are using GNOME Terminal with $TERM set to xterm, there's no obvious reason Vim would get the key codes wrong. Did you change 'term' in Vim?
03:09  walt: but it's hard forcing myself to take advantage of it
03:10  Neurotiquette: Pretty weird stuff, man. I might have hit a wrong button in command mode, maybe, I guess. I also notice that vim no longer shows me the convenient number for the line I'm on.
03:11  homekevin: Neurotiquette: The output or :verbose set term? would be nice.
03:11  Neurotiquette: homekevin: As far as I know I didn't... I did do a :set that was suggested on google, but that was after the fact
03:11  homekevin: Neurotiquette: Maybe you set paste mode?
03:11  Araxia: Neurotiquette: it sounds like you may not be using your usual dotfiles.
03:11  homekevin: :set nopate
03:11  homekevin: Sorry, :set nopaste
03:12  Araxia: no pâté.
03:12  Neurotiquette: Still not seeing my line numbers
03:12  Neurotiquette: arrow keys are working though.
03:12  Neurotiquette: oh wait
03:12  Neurotiquette: no, no they're not.
03:12  Neurotiquette: I did a :read blah.txt earlier.
03:12  Araxia: Neurotiquette: :scriptnames
03:12  homekevin: No, :verbose set term?
03:12  homekevin: I asked first
03:13  Neurotiquette: homekevin: When I type :verbose nothing happens
03:13  homekevin: Neurotiquette: OK, try the whole thing: :verbose set term?<Enter>
03:13  lewis1711: right, I am tired of buffer plugins, I am going to have an instance of vim for each file I am working on like a heretic and use the tabs in my terminal emulator
03:13  homekevin: Typing 'set term?' after :verbose isn't just a tic that I have
03:14  Neurotiquette: homekevin: term=xterm
03:15  homekevin: Neurotiquette: OK, well, those were my best guesses. If you pastebin your ":set" output I could look over it for anything unusual
03:16 * jeffszusz is pleased with his vimrc's re-write
03:16  RoboTeddy: jeffszusz: link us ;)
03:17  homekevin: vimgor: paste
03:17  Neurotiquette: homekevin: pastebin.com/bMQefMEj
03:17  vimgor: See http://vim.wikia.com/wiki/Toggle_auto-indenting_for_code_paste for how to avoid automatic indentation while pasting.
03:17  homekevin: vimgor redir
03:17  vimgor: See :h :redir for full details. If you want to copy the output from a command, use :redir @+|silent <command>|redir END. For some commands you'll need to replace <command> with exec '<command>' (See :h :bar). This will put the command output on your system clipboard, ready for pasting.
03:18  jeffszusz: http://paste.pocoo.org/show/319833
03:18  homekevin: Neurotiquette: Well, you don't have 'ruler' set, so it's not surprising you have no line numbers.
03:18  homekevin: Neurotiquette: Actually, can you clarify what kind of line numbers you are referring to?
03:19  homekevin: The current line number in the corner, or numbers all down the screen?
03:19  Neurotiquette: Ruler, sounds about right
03:19  Neurotiquette: current line number in the corner
03:19  Neurotiquette: but I'd love to have numbers all down the screen
03:20  homekevin: Neurotiquette: That's the 'number' option
03:20  Neurotiquette: THe line number in the corner is what I'm used to though. Dont know why it disappeared.
03:21  homekevin: Neurotiquette: Sounds like you lost some configuration. Judging by how minimal that :set output is, I wouldn't be surprised.
03:21  Araxia: jeffszusz: i like DiffOrig.
03:21  homekevin: Neurotiquette: Have you restarted Vim? Are you using any unusual options?
03:21  homekevin: Neurotiquette: Have you deleted your .vimrc?
03:22  Neurotiquette: homekevin: I do not currently have a .vimrc
03:22  homekevin: Neurotiquette: The :scriptnames output might help
03:22  homekevin: Neurotiquette: Oh.
03:22  Neurotiquette: I'm a complete novice, btw... Just started using vim, but I've been using it long enough to get used to a few things and it's strange to suddenly have things missing
03:22  homekevin: But you had 'ruler' before?
03:22  Araxia: have you updated any packages on your ubuntu recently?
03:22  Neurotiquette: Not sure if it was ruler or not, just had the line number my cursor was currently on on the bottom of the screen
03:22  Neurotiquette: Araxia: That's it.
03:23  Neurotiquette: Araxia: I let update manager run.
03:23  Neurotiquette: Those fascist packages
03:23  homekevin: Neurotiquette: And you say you are on Ubuntu? 'ruler' is usually set by the system vimrc
03:23  Neurotiquette: Thanks for providing some meaning. lol.
03:23  Neurotiquette: Yeah, package update had to have removed it... Only explanation. I wouldn't have
03:23  Araxia: ubuntu is notorious for changing packages willy-nilly with little regard for backwards expectation compatibility.
03:24  homekevin: Ubuntu is becoming notorious for ignoring all kinds of expectations.
03:24  Neurotiquette: I can grab my .vimrc file from my other ubuntu machine that's not had the update though.
03:24  Araxia: Neurotiquette: better to not rely on your distro's default .vimrc anyway.
03:24  homekevin: They want to be the Un-Linux.
03:24  Araxia: keeping your ~/.vim in dvcs is the way to go.
03:25  homekevin: Neurotiquette: The usual configuration is /etc/vim/vimrc includes "runtime! debian.vim" near the top.
03:25  homekevin: Neurotiquette: Then /usr/share/vim/vimcurrent/debian.vim includes 'set ruler'
03:26  homekevin: So maybe one of those is no longer true for some reason.
03:27  Neurotiquette: Is there a way I can quickly set ruler so I can see what it looks like?
03:27  homekevin: Neurotiquette: Yes. :set ruler<Return>
03:27  homekevin: It's just a few numbers and the percentage of the file.
03:28  Neurotiquette: homekevin: Still not on the screen. Is that telling in some way?
03:28  homekevin: E.g., 50% if you are halfway through, "All" if all is displayei.
03:28  homekevin: Neurotiquette: Can you pastebin your :version output?
03:29  homekevin: The only thing I know of that removes 'ruler' when it is set is 'paste'
03:29  homekevin: Or the ruler format option.
03:29  Neurotiquette: homekevin: http://pastebin.com/gk6M8A1i
03:30  Neurotiquette: Ruler must've been what I had before... it wasn't number... though, I rather like number (which did work, unlike ruler)
03:30  homekevin: Hm, it's the small version.
03:31  Araxia: *shudders*
03:31  homekevin: I'm not sure how crippled the small version is, but probably pretty crippled.
03:32  Araxia: Neurotiquette: i'm guessing there was a bit in the statusline.
03:32  Neurotiquette: Araxia: Not sure what that means
03:32  homekevin: Neurotiquette: Your version doesn't support 'ruler'.
03:32  homekevin: Neurotiquette: You are using a stripped-down Vim.
03:32  Araxia: you can customize the information displayed at the bottom of a window.
03:33  homekevin: Araxia: But bear in mind, if Neurotiquette hasn't started splitting yet then there's probably no status line.
03:33  Neurotiquette: homekevin: Installing the latest version, that explains a lot. Must've been wrong about ruler. I have two ubuntu machines, which explains the confusion, I guess. (Though, I'm rather surprised I'd get that mixed up!)
03:33  Araxia: yeah, i'm thinking it was set in the system .vimrc from the old package.
03:34  homekevin: Neurotiquette: Well, you might have removed the more complete version, or accidentally modified the alternatives so that "vim" points to the small one.
03:34  Neurotiquette: ahhhhhhhhhh yes theres my ruler
03:34  Neurotiquette: the world is right again
03:34  Neurotiquette: and whadyaknow... my arrow keys are working correctly
03:34  homekevin: Neurotiquette: You could try running update-alternatives --display vim
03:34  homekevin: (From the shell)
03:35  Neurotiquette: Thanks a lot guys. I have warm fuzzy feelings towards the abstract concept of the linux community once again;.
03:35  homekevin: Neurotiquette: Which would show which Vims are installed and what the default one is.
03:35  Neurotiquette: Whats some other neat stuff I might enjoy setting on vim?
03:36  homekevin: Well, when you are just starting vimtutorial is pretty neat.
03:36  homekevin: vimtutor, sorry
03:36  Araxia: Neurotiquette: what are you going to be editing primarily?
03:36  homekevin: vimgor: vimtutor
03:36  vimgor: Vim's built-in tutorial is highly recommended for beginners. Just run vimtutor (from your shell or your application menu) to begin.
03:37  Araxia: vimgor, vim-tiny
03:37  vimgor: vim-tiny is the default Vim package for Debian/Ubuntu. It is built with a small subset of features and is not intended to be used full-time. You most likely want to install a more capable package of the Vim editor. If you want gvim install the vim-gtk package, otherwise install the vim package.
03:37  Neurotiquette: Oooh ahh, I even have colors now since I added the line into my .bashrc from your article, homekevin
03:37  belak: How can I copy from one instance of vim to another
03:37  belak: ?
03:37  homekevin: "filetype plugin indent on" is one that most people should use if they don't know any better.
03:37  homekevin: Neurotiquette: Which line?
03:37  Araxia: i just added vcs information to my bash prompt. branch and # of dirty files.
03:37  homekevin: belak: Usually using the system clipboard
03:38  Neurotiquette: the one that sets the colors if I'm using gnome terminal, kevin
03:38  homekevin: You mean sets TERM to gnome-256colors?
03:38  jeffszusz: araxia, i do too. i didn't test it to make sure it worked when i rearranged things though
03:38  belak: homekevin: how can I do that?
03:39  homekevin: belak: If your terminal supports copying you do it like any other application. If Vim and your terminal support it, you can also use the + and/or * register.
03:39  Araxia: i just use :set clipboard=unnamed
03:39  Neurotiquette: homekevin: yup
03:40  homekevin: Neurotiquette: I take it you installed ncurses-term?
03:40  Neurotiquette: whats the point of using h,j,k,l to navigate your cursor instead of arrow keys?
03:40  homekevin: Neurotiquette: Home row
03:40  Araxia: Neurotiquette: efficiency. you don't have to move your hands.
03:40  homekevin: Neurotiquette: Also has something to do with not all keyboards historically having cursor keys.
03:41  Araxia: i've gotten to the point of modding my system so that i *never* have to use the arrow keys. anywhere.
03:41  homekevin: Just pry those puppies right off of there, Araxia
03:41  Araxia: homekevin: heh
03:41  belak: homekevin: how do I refer to a register
03:41  Neurotiquette: homekevin: Actually, I didn't. I just grabbed the line and added it to my .bashrc. Kind of strange that it's working I suppose, then? Maybe ncurses-term was already installed for some reason.
03:41  homekevin: :help registers
03:42  homekevin: Neurotiquette: Double check. Type "infocmp" on the command-line
03:42  homekevin: (The bash command line)
03:42  homekevin: infocmp will fail if it doesn't have the terminal description file.
03:43  Neurotiquette: nope, no fail
03:43  homekevin: OK.
03:43  homekevin: It could be that the gnome-256color description has been moved.
03:43  homekevin: ...or that you already had the ncurses-term package.
03:44  homekevin: vimgor: copy
03:44  vimgor: I don't have a clue, homekevin.
03:46  Araxia: time to catch my bus. l8r, folks.
03:47  homekevin: vimgor: copy is <reply> To copy text to the system clipboard you may be able to use your terminal's 'copy' feature. You can also use the special registers + and *. See :h clipboard.
03:47  vimgor: Okay, homekevin.
03:47  homekevin: vimgor: clipboard
03:47  vimgor: The * register corresponds to the X selection buffer (pasted with <MiddleClick>), and the + register corresponds to the system clipboard (pasted with <C-v> or Edit->Paste). On windows, both registers are for the system clipboard. To use the clipboard in terminal vim, vim must be built with +xterm_clipboard
03:47  homekevin: copy
03:47  homekevin: vimgor: copy
03:47  vimgor: To copy text to the system clipboard you may be able to use your terminal's 'copy' feature. You can also use the special registers + and *. See :h clipboard.
03:48  homekevin: Yuck.
03:48  homekevin: vimgor: No, copy is <reply> Ask me about 'clipboard' instead.
03:48  vimgor: Got it.
03:54  Axioplase_: vimgor: slimv
03:54  vimgor: I don't have a clue.
03:54  Axioplase_: vimgor: lisp
03:54  vimgor: Bugger all, I dunno!
03:56  belak: I guess I don't get it... whenever I do "+yy it doesn't copy
03:56  belak: Same with +*yy
03:56  belak: Sorry, "*yy
03:57  Axioplase_: vimgor: slimv is Slimv tries to mimic a subset of SLIME's (Superior Lisp Interaction Mode for Emacs) functionality inside Vim on Linux, Windows and Mac OS X. The script defines functions and keybindings to send s-expressions to a console mode Lisp or Clojure REPL (Read-Eval-Print Loop).
03:57  vimgor: 10-4, Axioplase_.
03:59  Axioplase_: vimgor: lisp is Efficient editing of Common Lisp and Clojure in vim is currently possible with the use of plugin "slimv", to run a REPL within the editor (and then some).
03:59  vimgor: Okay!
03:59  belak: Anyone?
03:59  belak: What am I doing wrong?
04:00  homekevin: belak: What OS? Terminal?
04:00  fow: Are you using terminal Vim? Does your terminal Vim have support for that? Is your terminal Vim connecting to X properly?
04:01  belak: archlinux in terminal vim using rxvt-unicode
04:01  belak: And I can use my mouse in terminal vim so I assume it's connecting right
04:01  fow: does the following echo 1 or 0? :echo has('xterm_clipboard')
04:01  homekevin: belak: Can you check :version for xterm_clipboard?
04:01  homekevin: Nevermind.
04:02  homekevin: Listen to fow instead.
04:02  belak: Ah... 0
04:02  homekevin: More evidence for Arch's inferiority.
04:02  belak: So, what does that mean?
04:03  fow: It means you need to either find a package for Arch that includes support for that Vim feature or compile Vim yourself
04:03  homekevin: belak: Well, if it's similar to Debian there may be a more complete Vim package available.
04:04  belak: Like vim-plugins?
04:04  homekevin: pastebin.com/bMQefMEj
04:04  fow: try asking #archlinux or whatever their channel is. I'm not familiar with Arch and it sounds like homekevin isn't either
04:04  homekevin: belak: I can't tell you what the package is, not being familiar with Arch
04:04  belak: Ok, thanks
04:04  homekevin: I only know it well enough to make fun of it.
04:05  homekevin: Like most things
04:06  belak: Heh
04:06  belak: How about gentoo?
04:06  homekevin: I never got to try it. Still waiting for it to compile.
04:06  belak: What distro do you even use?
04:07  homekevin: I don't have to answer that. ;)
04:07  belak: Oh?
04:07  homekevin: I'm on Ubuntu at the moment, but I have pretty harsh words for it as well.
04:07  sleepynate: atta boy
04:09  homekevin: As long as I'm not happy with anything, I can criticize everything with impunity!
04:14  jeffszusz: lol
04:15  bairui: nice, Axioplase_
04:18  jeffszusz: w00t
04:18  jeffszusz: difforig works well
04:29  LaoLang_cool: hi, how to specify a buffer var for a non-current buffer in vim scrip
04:29  LaoLang_cool: Say I'm in buffer 1, I want to specify a var, say, b:var for buffer 2
04:29  bairui: homekevin: any sufficiently advanced technology is indistinguishable from inferiority :p
04:30  LaoLang_cool: Must I need to switch to that buffer then specify b:var?
04:30  bairui: LaoLang_cool: :help getbufvar()
04:30  LaoLang_cool: bairui: great, thanks!
04:30  bairui: np
04:31  LaoLang_cool: lunch time, will see it after that :)
04:31  bairui: LaoLang_cool: where are you? China?
04:59 --- EselTheo_ is now known as EselTheo
05:49  Oleg_: what do you think is the best syntax colorscheme for vim if you wanna do c++ programming?
05:50  bairui: the one that works best in your surroundings and is the easiest on your eyes.
05:51  saikobee: Oleg_: shameless self plug: http://www.vim.org/scripts/script.php?script_id=2215
06:03  nate-: saikobee, nice theme... I've used it from time to time
06:08  saikobee: nate-: ty
06:08  saikobee: i'm just surprised it ever became so highly rated
06:13  bairui: walt: how are your tab experiments going? I've been playing with them myself lately. It's hard to switch my thinking over, but I don't hate it yet. I have some behaviour maps to make life easier - like switching between current and alternate tab, and jumping to a numbered tab.
06:14  walt: bairui: used them at work today. I think it has uses
06:14  walt: hard changing though
06:14  walt: but yeah
06:14  walt: I think I'll continue
06:15  bairui: cool...
06:15  bairui: walt: https://github.com/dahu/tabby   <--  not everyone's cup of tea, and suggestions welcome
06:18  saikobee: bairui: doesn't vim do this by default?
06:18  Araxia: bairui: heh. i have a similar function to open help pages in the leftmost tab.
06:18  bairui: saikobee: some, but it's mapping it to a key that's new, i guess
06:18  bairui: Araxia: :)
06:18  bairui: just seemed to make sense
06:18  Araxia: i mapped mine to <F1>.
06:19  Araxia: and it prompts for a topic. :-)
06:19  bairui: fair enough - I have an <F1> help map too... hadn't thought about joining them yet :s
06:19  bairui: yeah - mine expands <cword> and waits
06:20  bairui: saikobee, Araxia: I'm looking for excuses, er I mean best-practices for using Tabs in Vim. I'm planning to put together a tute/cookbook/something about this.
06:21  Araxia: bairui: that would be cool. definitely a topic in need of it.
06:21  Araxia: i use tabs to group buffers more or less by task.
06:21  bairui: So far, I have these uses: 1)help; 2)diffing; 3)temporary edits; 4)multiple-projects
06:21  bairui: right - #4
06:22  Araxia: but my use of os windows, vim tabs, vim windows, and vim splits is probably pretty unusual.
06:22  Araxia: i use multiple instances of macvim.
06:22  bairui: yeah - we get the bad-use-of-tabs scenario here so often and all we do is break out the pitchforks and tell people how not to use tabs. We don't have any really good uses to present them.
06:23  bairui: Araxia: you'd probably be surprised - I think a lot of people do something very similar.
06:23  Araxia: https://bitbucket.org/araxia/araxia-mac-os-x-tools/wiki/MultipleMacVimInstances
06:23  scp1: everybody knows they are doing it wrong, but they keep on doing it until shit breaks down (me included)
06:24  Axioplase_: bairui: I use tabs to have several views of the same thing.
06:24  bairui: well, I wanna be able to throw my pitchfork with conviction. When challenged with "so, what *are* they good for?!" I don't wanna mumble and shrug and spread FUD.
06:25  Axioplase_: For example "just code", "code+headers", "code+REPL", and so on.
06:25  Araxia: i guess this one fits into "temporary edits": http://at.araxia.net/blog/seth/tech/?permalink=vimperator_form_field_editing.html
06:25  scp1: The only thing I use it for is so I can do gt and gT and still seeing where the files I want to look at (which direction...)
06:25  bairui: Axioplase_: yeah... I've been working on a train of thought in that area - but it's all play-space at the moment - nothing concrete. Thanks for examples.
06:26  bairui: scp1: I mapped those to <C-PageUp> and <C-PageDown> resp
06:26  scp1: those are not on the homerow for me
06:26  bairui: i hear that a lot :)
06:26  Axioplase_: It would be very nice if one could have several vim servers, and have each tab be a client for a given server…
06:26  bairui: in the finished product, I'll make the <Plug>s so they're remappable
06:27  Araxia: anyone on a mac should check out keyremap4macbook. i can hold down s+d+f and then use hjkl for home, pgdn, pgup, and end.
06:27  bairui: Axioplase_: I can't even begin to imagine how that would be useful...
06:27  bairui: only six fingers, Araxia. That's cool... :-/
06:27  Araxia: s+d to turn hjkl into arrow keys.
06:27  bairui: :p
06:28  Araxia: heh. all on home row. effortless.
06:28  bairui: like playing the piano ;)
06:28  Araxia: yeah. quite similar.
06:28  bairui: OS in vim major
06:28  Axioplase_: bairui: well, first, I wish I could have a vim server running at work. Then, I ssh from home, an access the session that runs over there. I "store this session" in a tab, and I can have in one local vim instances, two different sessions running separately.
06:29  Araxia: but vim is rather like that. though vim itself is more like playing solos.
06:29  scp1: Should try the piano some day... as much as I use my poor fingers I should be pretty good at it
06:29  Axioplase_: solos, and no chords
06:29  bairui: emacs is chords
06:29  Araxia: but emacs chords are painful.
06:29  Araxia: being able to use *any* keys for chords really makes a big difference.
06:29  scp1: axioplase_, you just decribed gnu screen
06:30  scp1: I use that for playing multiplayer Vim
06:30  bairui: Axioplase_: sounds cute... and the thought of sharing info between the servers would be cool.
06:30  bairui: scp1: i was told tmux is ready as a screen replacement
06:30  Axioplase_: scp1: Yeah. Well, I wish vim could allow me to hijack/share a session, because I don't run all my vims in a screen.
06:30  scp1: bairui, they are lying!!!
06:30  Araxia: also described sessionman.vim plus dvcs controlled ~/.vim. :-)
06:30  bairui: fair enough :)
06:31  Araxia: tmux isn't quite there yet.
06:31  bairui: sadly, lads, I gotta run. Thanks for the   tab   love. I am going to continue to collect ideas / examples / etc and slowly put together my tab writeup. Later, guys.
06:31  scp1: have fun
06:31  Araxia: bairui: good luck with that. look forward to seeing your progress.
06:32  scp1: axioplase_, is there a reason why you are not running all vims in screen?
06:32  Axioplase_: scp1: I did not alias vi='screen vim'
06:33  scp1: well, it's actually a bit harder than that
06:33  Axioplase_: And as it hijacks some controls, it sucks.
06:33  scp1: urxvtc -e screen -x; screen -X screen zsh -e vim "$@"
06:33  Araxia: i don't know about Axioplase_, but i much prefer macvim most of the time.
06:34  Axioplase_: Araxia: I don't have a mac, so, unless I don't know what you're talking about, I don't know how this could be helpful to me.
06:34  scp1: Right, I find it awesome though. Espescially for TDD
06:34  Axioplase_: scp1: and why this complex command?
06:34  Araxia: Axioplase_: sorry, i was just answering a question originally directed at you.
06:35  scp1: axioplase_, it starts vim in a new shell in an already running screen session in a new terminal, instead of spawning more and more screen processes.
06:36  Axioplase_: scp1: But, hum… Then all my vims are in the same session?
06:36  Araxia: screen will just create a new window if invoked within a screen session.
06:36  scp1: axioplase_, exactly.
06:36  scp1: axioplase_, which also means you can do screen -x
06:36  Axioplase_: I'm not sure I want that.
06:36  scp1: Well, I do :)
06:37  scp1: araxia, no, it'll start another screen session.
06:37  scp1: So you'll have nested screens
06:37  Araxia: scp1: uh. no. i do it all the time.
06:38  scp1: You're not using GNU screen?
06:38  Axioplase_: However, I'd rather have a screen session that has no controls from inside (ie, you can only detach it from another command line).
06:38  Araxia: 4.00.03
06:38  scp1: axioplase_, dtach, atach?
06:38  Axioplase_: Then, I could just detach/reattach from outside, yes.
06:38  scp1: araxia, hm... strange
06:39  Araxia: scp1: what version do you have?
06:39  Axioplase_: I just don't want screen to interfere with my vimming (such as ^A, or anyother binding)
06:39  scp1: how the hell do I start a new screen session in my screen? I'm pretty certain this have worked before
06:39  Araxia: if you give it a name, it will.
06:39  scp1: oh.
06:39  scp1: sorry.
06:40  Araxia: but just, e.g. screen vim, will start a new window.
06:41  scp1: hmm... oh well
06:41  Araxia: ^A is really the only binding you have to worry about with screen.
06:43  Araxia: and the occasional ^aa isn't too much of a price to pay, imho.
06:50  Axioplase_: I use ^A a lot…
06:51  Axioplase_: So I guess I'll have to change it to some other control sequence I don't use.
06:51  Araxia: you could remap screen.
06:51  Araxia: right
06:52  Araxia: how about <C-e>?
06:52  Axioplase_: I use C-e and C-d
06:52  acx0: does anyone know what the value for cterm definitions in colourschemes means? I know for gvim, the gui definitions are the rgb hex codes for the colours as in #xxyyzz
06:53  Axioplase_: to move the buffer up/down without moving the cursor…
06:53  Axioplase_: I thought ^Q would be good, but my term does not see it…
06:53  Araxia: i never found a use for that.
06:53  acx0: I'm trying to convert a terminal only colourscheme to gvim (I've done it before), but I can't remember how I did it...
06:53  Araxia: ^q is visual block mode, too.
06:54  Araxia: you could probably unmap ^q and ^s in your terminal.
06:54  saikobee: um, ^q doesn't do visual block here
06:54  Axioplase_: I'll go for ^b
06:55  saikobee: agh, ^b and ^f are critical for going through the file
06:55  Araxia: heh. yeah i use those all the time. to each his own.
06:55  Axioplase_: saikobee: I use pageup/down for this
06:56  Axioplase_: Oh, C-j will be perfect!
06:56  saikobee: does anything use C-j?
06:56  saikobee: besides it seeming to do <Enter>
06:56  Axioplase_: j=^j=<NL>=^N
06:56  Araxia: as long as your terminal doesn't take it for a linefeed.
06:57  strull: Axioplase_: ^J = ^N ???
06:57  strull: I really doubt this
06:57  Axioplase_: strull: according to the help, yes.
06:58  Araxia: acx0: you might be looking for csapprox.vim
06:58  Axioplase_: (well "=" may not be the right relation)
06:58  strull: to which help
06:58  Axioplase_: strull: :he ^j
06:58  strull: aah, you mean the effect of them.
06:59  strull: sure
06:59  Axioplase_: yes, not the escape itself!
07:00  Araxia: acx0: oh, wait, you're going the other way. you can just use the same signifiers for both the gui and console definitions.
07:00  acx0: Araxia, I'm looking at the source of that right now, but I remember when I first ported a colourscheme I used some table or something I found online which had the 256-colour code for cterm and the corresponding hex value
07:01  acx0: Araxia, do you mean the 0-255 number can also be used for gui colour defs?
07:02  Araxia: acx0: does that not work?
07:02  acx0: Araxia, pretty sure it doesn't, but I'll try it
07:03  RoboTeddy: how can I make my cursor red?
07:03  Araxia: usually the problems are going the other way.
07:03  acx0: I think the chart I used looked something like this: http://raebear.net/comp/emacscolors.html
07:03  acx0: just can't remember if it had the 256-colour codes or if I manually looked up each colour...
07:04  Araxia: acx0: pickacolor.vim does something vaguely like this.
07:04  Araxia: and hexhighlight.vim is a nice complement to it.
07:04  acx0: Araxia, okay, I'll take a look at it
07:05  Araxia: (shows all color codes in their color)
07:08  Araxia: RoboTeddy: :help :highlight and look at existing colorschemes.
07:08  Araxia: you'll be interested in the "hi Cursor" lines.
07:09  RoboTeddy: Araxia: thanks
07:57  ybit: anyone recall a comic that was showing the progress of a vim user through a few years?
07:58  saikobee: ybit: sounds familiar
07:58  ybit: Found it, but it wasn't a comic
07:58  ybit: http://kevinw.github.com/2010/12/15/this-is-your-brain-on-vim/
08:02  Araxia: ybit: awesome. thx for sharing that.
--- Log closed Thu Jan 13 09:25:48 2011
--- Log opened Thu Jan 13 09:31:30 2011
09:31 --- Users 559 nicks [0 ops, 0 halfops, 0 voices, 559 normal]
09:31  lewis1711: right
09:31  lewis1711: :)
09:31  Axioplase_: It's physically impossible for a computer, because control is a mask.
09:31  lewis1711: so what's vim for back-slash
09:31  lewis1711: the back-slash key
09:32  Axioplase_: <backslash> I guess
09:32 --- Channel #vim was synced in 79 seconds
09:34  lewis1711: humm, that's not it
09:35  lewis1711: or praps it is but it's not being highlighted and my command is still wrong. mysteries
09:37  the_isz: lewis1711: suggestion: try solving one problem at the time. use a <leader> mapping first and see that the mapped command works.
09:41  Axioplase_: scp1: your screen/vim hack, does it work with "diff foo bar | vim -" ?
09:41  scp1: axioplase_, I cant see why... but... uh... vimdiff?
09:41  scp1: I cant see why it shouldn't*
09:42  Axioplase_: Because input is from "outside" screen?
09:43  Axioplase_: (and well, "hg diff -r foo.txt | vim -" then. there's no vimdiff trick here)
09:48  scp1: axioplase_, now it does
09:48  scp1: axioplase_, http://p.japh.se/fuckingscreenbugshit-513.html
09:50  adulteratedjedi: win 5
09:51  fbits: I'm using MacVim and the NERDTree plugin. Somehow my NERDtree opens files with a single click instead of a double click recently. Can I read the NERDTree configuration currently activated inside of Vim?
09:52  fbits: Or does anybody know a possible solution for reactivating the double click..
09:55  fgro: if i have several split windows, i want to maximize one and the go back to the same window layout. how to?
10:02  the_isz: fgro: that might be one of the few situations tabs are designed for. you could keep your window layout in one tab and see the file's buffer in a single window in another.
10:03 * Axioplase_ agrees
10:10  Chib: @_@
10:12  fgro: the_isz: so then the command i'm looking for is open the current window in a new tab>
10:12  the_isz: fgro: try  :tabe %
10:12  fgro: the_isz: cheers
10:12  the_isz: fgro: you're welcome
10:16  thrope: hi - I have the standard vim download gvim73_46.exe.... which versions of python and ruby do I have to install to get support?
10:26  complete: Hello! Is there something like * (search for the word under the cursor) that searches backwards?
10:26  strull: #
10:27 --- bloger is now known as Guest49714
10:28  complete: thanks!
10:28  thrope: I have installed ruby 1.9.1 but I still get "E370 Could not load library msvcrt-ruby191.dll" - as far as I can tell the standard build is made to link dynamically with this version
10:50  sgronblo: Is there anyone else who doesn't like ruby.vim's nested hash formatting?
10:51 --- evilNiko is now known as niko
11:10  the_isz: how do i paste the value of a setting?
11:11  the_isz: got it...
11:11  the_isz: fyi:  :pu =&setting
11:40  oliver1804: how can I replace
11:41  oliver1804: word01, word02, word03
11:41  oliver1804: with
11:41  oliver1804: a.word01, a.word02, a.word03
11:41  oliver1804: ?
11:41  the_isz: oliver1804:  :s/\zeword/a./g
11:45  oliver1804: the_isz: sry word is only a variable that can change so what could I use as regexp? I tried :.s/\<.\+\>/a\.&/g before
11:46  the_isz: oliver1804: define "variable".
11:47  the_isz: oliver1804: also, is "word" the variable or "word01"
11:47  the_isz: ?
11:47 --- cascalheira is now known as cascalheira|away
11:47  oliver1804: what I mean are different strings like:
11:47  oliver1804: TNR, BASNR, ANR, EVT, GESLFG, .....
11:48  the_isz: ah, i see
11:48 --- cascalheira|away is now known as cascalheira
11:48  julienXX: Hello! Is there a way in vim to mathematically evaluate a line? Imagine I have a line like (800*6) + 2456 and I'd like to have the result of this operation.
11:49  the_isz: try:  s/\ze\w\+,/a./g  though that might omit the last variable
11:49  Dynetrekk: julienXX: you can run it through an external program. I'm not sure which program that would be, however
11:50  frogonwheels: julienXX:  exe 'echo '.getline('.')
11:50  frogonwheels: julienXX: :echo eval(getline('.'))   <-- that's nicer
11:51  frogonwheels: julienXX: I didn't 'know' about eval() but assumed it'd be there somewhere
11:51  julienXX: frogonwheels: thanks works perfectly!
11:52  oliver1804: the_isz: result is
11:52  oliver1804: a.Ta.Na.R, a.Ba.Aa.Sa.Na.R, a.Aa.Na.R, a.Ea.Va.T, a.Ga.Ea.Sa.La.Fa.G
11:53  the_isz: hmm...
11:53  frogonwheels: oliver1804:  s/\</a./g
11:53  Chib: yeah you can't do a .ze at the start of a search for some reason
11:53  Chib: \ze that is
11:53  fgro: i have an external commands that I use repeatedly (i.e. execute testscript, the current file). right now i'm going up in the command history to reissue the command. what is a better way? make a key mapping or record a macro?
11:53  oliver1804: frogonwheels: perfect
11:53  frogonwheels: fgro: if it's 'many times in a row' .. then record a macro.
11:54  oliver1804: thx
11:54  frogonwheels: fgro: if it's  "I use it all the time" .. then make a keymapping
11:54  fgro: frogonwheels: ok thanks
11:55  frogonwheels: fgro: but there's nothing wrong with map  \e  :!testscript<cr>
11:55  Chib: oliver1804, unless your whole line is only comma separated words, that won't work
11:55  frogonwheels: fgro: as a temporary mapping..
11:56  frogonwheels: fgro: if you want to act on the errors in the result, then make it a 'makeprg'   :help 'makeprg'  :help 'errorformat'
11:57  iaj: when Im editing a certain file (filetype typoscript where I only got a syntax file for) and hit = on a comment line (starting with #) its always getting aligend to the very left (not to the indentian of the line before as I want it to be) how could I fix that?
11:57  oliver1804: Chib: is only comma separated cause it's part of a SELECT clause
11:58  oliver1804: Chib: and it even works when I delete a comma and only leave a space
11:58  oliver1804: s/when/if/
11:59  Chib: yeah that's why i mentioned it, it's only searching for the start of words
11:59  oliver1804: and that is what I wanted :-)
11:59  Chib: (:
12:00  iaj: how can I make # not always appear at character position 0 and be able to indent them to the right?
12:01  julienXX: frogonwheels: any idea on how to get the result and append it to the current line?
12:01  kurkale6ka: iaj: are you looking for :se ai ?
12:02  fgro: frogonwheels: sorry, what does \e represent, "execute?"
12:02  fgro: frogonwheels: i did something like this. :map <F8> :!external command
12:02  fgro: frogonwheels: now on <F8> the command line displays the command, but i still have to confirm with <return>
12:03  fgro: frogonwheels: would be nice if the external command was executed immediately
12:03  iaj: kurkale6ka: I tried set ai... but it still.. just when I type # its getting aligned to the first space :/
12:05  kurkale6ka: iaj: I guess you could play with the indent file for this filetype...
12:06  iaj: kurkale6ka: hmmm well.. theres no specific indent file I suppose :\
12:07  kurkale6ka: you could create one
12:07  frogonwheels: fgro: \e means pressing \ then e   <f8> is fine
12:07  iaj: kurkale6ka: oh theres indention settings in the file as well
12:07  frogonwheels: fgro: add <CR> to thend of yor mapping
12:08  frogonwheels: :map <F8> :!ext cmd<cr>
12:08  iaj: kurkale6ka: its using that one http://paste.pocoo.org/show/319937
12:08  the_isz: fgro: for an explanation as to why frogonwheels suggested \e, see  :he <Leader>
12:09  iaj: kurkale6ka: nevermind, theres nothing about indention.. but where is it getting the indention setting for # from then?
12:09  kurkale6ka: iaj: good luck with that :)... you could also set ft to a different value...
12:09  fgro: frogonwheels & the_isz: thanks!
12:11  iaj: kurkale6ka: you ever created indent scripts?
12:12  kurkale6ka: iaj: no, but what is the ft (t3x?)
12:12  iaj: yeh... 
12:12  kurkale6ka: it works here with ai, # is correctly positionned
12:13  iaj: kurkale6ka: hmmmmm...
12:13  spiiph: vimgor, smartindent
12:13  vimgor: Don't you mean stupidindent? In all seriousness, 'smartindent' is an obsolete option for C-like syntax. It has been replaced with 'cindent', and setting 'cindent' also overrides 'smartindent'. Vim has indentation support for many languages out-of-the-box, and setting 'smartindent' (or 'cindent', for that matter) in your .vimrc might interfere with this. Use 'filetype indent on' and be happy.
12:13  spiiph: iaj, ^
12:15  iaj: kurkale6ka: # is aligned on the same line when ='ing it?
12:15  iaj: spiiph: hmmmm im using cindent and autoindent
12:15  iaj: is that wrong?
12:16  spiiph: Depends. Are you editing C files?
12:16  kurkale6ka: iaj: oh, I see, no. just when typing it
12:16  iaj: spiiph: no c files, just java...
12:17  iaj: kurkale6ka: yeah that's the problem I wanted gg=G to get to work.
12:17  kurkale6ka: iaj: you could use Tabular...
12:17  spiiph: Tabular?!
12:17  spiiph: How would that help?
12:17  kurkale6ka: :Ta/#
12:17  spiiph: iaj, have a look at :h cino
12:17  spiiph: kurkale6ka, wrong tool for the job.
12:18  kurkale6ka: yeah but if it is the only way
12:18  iaj: hmmm that would only indent it one line.. no?
12:18  spiiph: It's not.
12:18  iaj: one indention level...
12:18  iaj: cino.. ohyea.. I was riding through those a while back
12:20  spiiph: iaj, in any case, I suggest you use 'filetype plugin indent on' rather than setting cindent manually.
12:22  iaj: spiiph: hmmm ok :| i couldn't find an option for my problem in 'cino-values' anyhow :(
12:23  spiiph: Sorry, you want :h cinkeys
12:25 --- cascalheira is now known as cascalheira|away
12:25  kurkale6ka: Why cinkeys? Isn't he editing java files?
12:25  iaj: typo Files.. !
12:27  kurkale6ka: yes, but then you talked about java files... I am lost :)
12:27  spiiph: kurkale6ka, He's using 'cindent'
12:27  iaj: spiiph: however that only affects the stuff inserted...
12:27  spiiph: ?
12:27  iaj: i need gg=G to get to work.. and just don't treat # to go to lineposition 0
12:27  kurkale6ka: ok, so if it is not a c file, maybe he shouldn't use cindent
12:28  spiiph: Correct, he should use 'filetype plugin indent on'
12:28  iaj: I set that now... but still theres no way to fix my problem?
12:28  spiiph: Which will actually use cindent, but it does other stuff too
12:28  kurkale6ka: ok
12:28  iaj: Besides writing a own indent file for .vim/indent/typoscript.vim
12:28  iaj: s/a/an
12:29  spiiph: I thought you were editing java?
12:29  iaj: Nahhh.. First off I was starting with filetype=typoscript where I got a syntax file for.
12:30 --- cascalheira|away is now known as cascalheira
12:30  iaj: however an indentian (==) on a line starting with # always gets indented to pos 0
12:30  spiiph: OK, it would've helped if you had mentioned that.
12:30  iaj: 11:57:14   iaj: when Im editing a certain file (filetype typoscript where I only got a syntax file for) and hit = on a comment line (starting with #) its always getting aligend to  the very left (not to the indentian of the line before as I want it to be) how could I fix that?
12:30  iaj: tried my best <.>
12:30  spiiph: Yes, that was before I entered the discussion. When I asked what type of files you were editing, you said java.
12:31  iaj: Oh... I've got join/part messages hidden.
12:31  iaj: Anyway.. there's the problem.
12:31  elm_: iaj: :set autoindent
12:31  spiiph: What does :set si? cin? inde? say for typoscript files?
12:32  iaj: sec.
12:33  iaj: nosmartindent nocindent indentexpr=
12:33  iaj: elm_: kurkale6ka already suggested that - didn't help (
12:33  spiiph: OK. And can you pastebin an example of how it currently looks, and how you'd like it?
12:34  elm_: pastie.org
12:35  iaj: http://paste.pocoo.org/show/319943
12:35  iaj: after I did a = on that phraes
12:35  iaj: s/phraes/phrase - and I want to be the # indented the same way the line before.
12:37  spiiph: And hitting == reindented them to column 1?
12:37  iaj: yup
12:37  iaj: Thats the weirdness ;-)
12:39  elm_: btw. does anyone know whether it is possible to detect changes of variables like f.i. b:ext ?
12:39  spiiph: iaj, :set cink-=0#
12:41  iaj: spiiph: still the same problem :(
12:41  spiiph: Also note that == will use C-indenting
12:41  spiiph: Which is not really applicable for this filetype
12:41  spiiph: And you should really write your own indent script
12:41  iaj: everything is working fine besides that # thingie... gna ok... any good lecture on that?
12:42  spiiph: iaj, solved the problem for me, the # comment lines are now lined up to the statement below
12:42  spiiph: iaj, just don't use ==, and you should be fine.
12:42  spiiph: == doesn't work very well in this case.
12:42  iaj: got...   cinkeys=0{,0},0),:,!^F,o,O,e
12:42  iaj: now.. however... even gg=G is not working: (
12:43  spiiph: Well, it's not supposed to work, since you don't have an indent file for this filetype
12:43  spiiph: And since you're not using C-indenting
12:43  spiiph: Or, rather, since the file format isn't compatible to C-indenting
12:44  iaj: Hmm I thought you talked about that it solved the problem for you
12:44  spiiph: It solved one problem, that of not putting #-lines in the first column
12:45  iaj: #-lines are still on first column here, that's why I'm curious:)
12:59  iaj: how can I specify what the commentsymbol (one line based) for the current filetype is?
12:59  bairui: :help 'comments'  :help 'commentstring'
13:00  elm_: can I detect direct changes to variable or will I need to call a wrapper function all the time?
13:00  bairui: tip:   :options   and then search for what you want
13:01  bairui: i don't think so, iaj... what are you trying to do. G'day, btw. :)
13:01  bairui: bleck. sorry iaj. that was for elm_.
13:02  bairui: the answer, not the g'day. the g'day was all yours. :p
13:02  elm_: I mean a self defined variable b:ext not one that is set with set.
13:02  bairui: elm_: I don't think so. What are you trying to do>
13:02  bairui: ?
13:03  elm_: doesn`t  matter; was just a question
13:03  elm_: you can not define own set-variables/options.
13:03  elm_: ?
13:03  kurkale6ka: iaj: :h'com
13:03  bairui: not your own triggers, no
13:04  elm_: and own options/set-variables?
13:04  bairui: either i'm not answering you correctly or not understanding you correctly.
13:04  elm_: doesn`t mind; I would presume also not.
13:04  elm_: other question:
13:05  elm_: how to  set the regexp used by [w] and [b] ?
13:05  kurkale6ka: :h'isk
13:10  elm_: or how to fin help on configuring [w] [b] in normal mode?
13:14  sitaktif_: elm_: you do not want to configure such basic things
13:15  elm_: well, I remember that this was possible ... but maybe I am wrong.
13:15  sitaktif_: except isk :)
13:15  elm_: ?
13:16  sitaktif_: elm_: kurkale6ka gave you an answer:     :help 'isk
13:16  elm_: thxx.
13:19  iaj: bairui, kurkale6ka thanks!  gday bairui! back to more freetime? :d
13:19  bairui: yes, iaj... thank the stars. :D
13:20  iaj: haha :-)
13:20  iaj: how can I put the expression of &filetype for example to my current vim editing buffer the most quickly?
13:20  iaj: s/can/could
13:21  kurkale6ka: ^r=...
13:22  bairui: kurkale6ka: I admire your speed and accuracy - now all we need to do is tidy up your delivery. :) We tend to use the long form when presenting answers here so that newcomers don't get lost in the response.
13:23  the_isz: :pu =&filetype
13:23  kurkale6ka: sorry guys but vim is all about speed :)
13:24  bairui: hehe
13:25  iaj: haha :-D
13:27  bairui: kurkale6ka: slow down, dude. Use the speed in Vim. Show the true and righteous path in #vim.
13:28  kurkale6ka: in fact I think that it helps newcommers to know that they can save typing by using :h'isk (no space) instead of :help 'iskeyword
13:28  bairui: i disagree - it looks like line-noise - evidenced by elm_'s missing it as an answer for him.
13:29  bairui: don't get me wrong - love that you're helping. :)
13:29  elm_: ??
13:29  elm_: bairui: line-noise - evidenced - what shall that mean
13:29  bairui: sorry, elm_. Was talking about you, not to you. My bad. It was all good though, honestly. :)
13:30  elm_: wanna know it nonetheless?
13:30  rson: elm_: he was saying you missed that kurkale6ka was answering your question, and saying that kurkale6ka just looked like line noise since he didn't explain himself.
13:31  bairui: elm_: I was just saying that when talking here we (me) should use more complete sentences so that everyone can understand what is said.
13:31  elm_: ah. understood. thx.
13:31  bairui: thanks, rson :)
13:34  elm_: ":he isk" would have been more goal-directed to me,
13:34  elm_: or except "isk" quoted.
13:34  bairui: indeed. Or the preferred   :help 'iskeyword
13:34  elm_: what does the ' do?
13:35  elm_: same as Ctrl-D ?
13:35  bairui: no - we single-quote options.  :help help-context
13:36  _cheerios: Is developing on vim faster with a laptop (mouse nearby when needed)?
13:36  elm_: :he 'set
13:36  elm_: does not work
13:36  elm_: only ":he set" works
13:36  bairui: set is not an option
13:36  kurkale6ka: elm_:h :)
13:36  bairui: elm_: the word   option   has a specific meaning in Vim.   Try   :options
13:36  elm_: uh; in deed; having just learned sth. ;)
13:37  bairui: _cheerios: lose the mouse and you'll develop even faster. :)
13:37  bairui: gosh, am I ever opinionated tonight... :-/
13:47  bairui: well, that's enough for me, lads. Later. :)
13:52 --- lysek_ is now known as lysek
13:53  Epeli: How could I run a external command (ex. make) from Vim so that it would show me the output only if the command fails (exit status != 0)?
13:55  the_isz: Epeli: not exactly the answer to your question but maybe  :he 'makeprg'  could help you?
13:57  Epeli: the_isz:  not really. :make always prints the output
13:57  the_isz: Epeli: hmm... then maybe  :he :redir  ?
13:58  the_isz: Epeli: no, that won't work probably... could you try prepending  :make  with  :silent  ?
13:59  Epeli: hmm, silent clears my screen completely :O
14:00  the_isz: Epeli: hmm... thinking about it, you'd probably have to invest more time into this. make only realizes it fails when it fails, that is after it already has produced output. thus you would have to redirect its output to a file using a shell redirect and check the return value, then open that file if necessary.
14:01  the_isz: Epeli: oh, but i see  :he :silent  has an example to do roughly what you want.
14:01  Epeli: yep, some small script using redir could work
14:04 --- cascalheira is now known as cascalheira|away
14:14  quantumelixir: Why does my cursor go one character beyond the last character in the line? I want to remove this behavior!
14:15  PelleTut: how do I both write/save and compile with one command? now I have to first save with :w then run :g++ %
14:15  iPoLL: :x
14:15  iPoLL: oh write and save
14:15  Kuukunen: quantumelixir: in insert mode?
14:16  quantumelixir: Kuukunen: Command mode
14:16  PelleTut: or maybe i can make it into like some sort of shortcut?
14:16  quantumelixir: If I press $ in command mode it goes to the last character alright. But if I press "l" then it goes one beyond!!
14:16  Kuukunen: quantumelixir: your vim goes to eleven!
14:16  iPoLL: PelleTut: do u want to write to a file? i don't understand the question
14:16  quantumelixir: ?
14:17  quantumelixir: Hair-splitting!!
14:17  Kuukunen: quantumelixir: I don't think it's default... search for something in vimrc? :P
14:17  PelleTut: iPoLL: when I'm programming I want to save the work and compile it with one command
14:17  sitaktif_: quantumelixir: probably in cpoptions or insertopts
14:17  the_isz: quantumelixir: what does  :set virtualedit?  say?
14:17  Kuukunen: PelleTut: :h :make
14:17  Kuukunen: or something?
14:18  quantumelixir: the_isz: Yay!
14:18  quantumelixir: Bingo!
14:18  the_isz: woo!
14:19  quantumelixir: Ah, sanity.
14:21  the_isz: quantumelixir: if you didn't set it yourself, you can use  :verbose :set virtualedit?  to find out what bad script set it for you
14:23  quantumelixir: the_isz: I had copied someone's .vimrc and this came along. Removing it solved the issue. Thanks!
14:24  the_isz: quantumelixir: you're welcome
14:40 --- Tricia_ is now known as Tricia
14:41  dimm: how i can copy one symbol more time
14:41  dimm: ?
14:41  dimm: example i need copy 'a' 10 times
14:42  spiiph: yank the character, then 10p
14:47  iaj: when I got a line like 'autocmd FileType css set omnifunc=csscomplete#CompleteCSS' how could I add another set option behind it?
14:47  iaj: on the same line \ next line without having to type the autocmd FileType css over.
14:48  mgedmin: same line
14:48  mgedmin: set omnifunc=foo otheroption=bar etc
14:48  iaj: ahwww... and if its a map command?
14:48  mgedmin: although I would not set omnifunc myself
14:48  iaj: mgedmin: how would you do it?
14:48  mgedmin: I would use "filetype plugin on" and let vim set it for me for all the file types it supports
14:49  iaj: hmm I see:)
14:50  spiiph: Yes, manually setting omnifunc is generally unnecessary
14:50  iaj: yeh... that's the better choice I think.... how can I aucmd set ... map   on the same line?
14:50  iaj: set AND another map command ... \| ?
14:51 --- cascalheira|away is now known as cascalheira
14:51  iaj: Oh and what I wanted to ask... when I got a line in css like #foo { foo1: 12px; foo2: 13px; foo3: 3px }   and want to split it into newlines after the ; ... eg. #foo { \r foo1: 12px;\r foo2:... \r }  what would be the most efficient way?
14:52  peth: probably an :s/
14:55  lucasoman: iaj: something like :s/\([{;]\)/$1\r/g
14:55  slavka`: hey guys... when im in vim... is there a way to delete all lines in a file that dont have a certain string of text... e.g. del all lines which dont have text "filter.class"... ? help is much appreciated
14:56  iaj: slavka`: try :v/filter.class/d 
14:56  iaj: lucasoman: thanks man im gonna try...
14:57  slavka`: iaj: you da man! man :)
15:00  iaj: slavka`: yw.. actually better do :v/filter\.class/d
15:05  kwijibo: hi, I'm trying to put  a line break after each comma in a visual line selection
15:05  kwijibo: i do s/,/,\n/
15:06  the_isz: kwijibo: use \r instead of \n
15:07  mgedmin: this is quirky, but that's the way it is for historical reasons: you use \n to match a newline in a search pattern, but \r to insert a newline in the replacement
15:09  kwijibo: bah, thanks guys
15:10  zenzike: mgedmin, is that a vim specific quirk, or is it for any text?
15:10  mgedmin: it's a vim thing
15:10  zenzike: ah, ok
15:10  mgedmin: see :h pattern and :h sub-replace-special
15:10  zenzike: thanks
15:11  slavka`: iaj: the first one worked
15:13  iaj: slavka`: i know but something like filterXclass would be matched as well
15:24  slavka`: ok thanks
15:24  slavka`: much appreciated man
15:24  slavka`: ive actually just download the vim book... so hopefully will be able to work those things out myself
15:28  iaj: is there any way to delete to the end of the line in insert mode (besides c-o D) ?
15:28  mgedmin: <enter><esc>dd :)
15:31  iaj: ;-D
15:41  kurkale6ka: :im ^k ^oD iaj if you don't use digraphs too much
15:50  esparkman: what is the command to set a default font in gvimrc?
15:51  mgedmin: set guifont=...
16:38  tek0: what could be the reason that :make executes what g:makeprg was before the last change of that variable?
16:39  mgedmin: g:?
16:39  mgedmin: maybe there's a buffer-local setting?
16:40  the_isz: i think makeprg is always local
16:43  tek0: hmm
16:43  tek0: nope
16:44  tek0: oh, it's an option
16:44  tek0: weird, why'd I use a variable in one place
16:52  lucs: Meh.
16:53  lucs: Given three lines like this inside a file, http://scsys.co.uk:8002/82236, how can I "compile" them? I tried visually selecting them, yanking and doing  @" , but then when I do  :Foo , I get "E492: Not an editor command: Foo".
16:53  lucs: (Edit:  echo "Foo")
16:53  lucs: (same result)
16:55  kurkale6ka: you need bars (|) lucs
16:55 --- _Unode is now known as Unode
16:55  lucs: Ah, I think I see. Let me try...
16:56  the_isz: what kurkale6ka meant to say is:  use the bars, lu{ke,cs}  ;P
16:56 * mgedmin usually "compiles" stuff on a file level, with :source %
16:56 * the_isz stops being stupid now...
16:56  bairui: no - you need to save and then source the file with   :source %   then you can run with   :call Foo()
16:56  b147: the_isz: use the :source, not bars
16:56  lucs: the_isz: :)
16:57  lucs: But the bars (I added " |" at the end of the first two lines, is that what was meant) give me other errors.
16:57  Raimondi: lucs: You can't define functions that way
16:58  lucs: bairui: This is only 3 lines in a bigger file, don't want to compile the whole thing.
16:58  mgedmin: maybe :w tempfile | source tempfile | !rm tempfile
16:58  bairui: urgh... Day changed...
16:58  lucs: mgedmin: Meh, kinda ugly.
16:58  mgedmin: yes, it is
16:59  mgedmin: hmm
16:59  lucs: Raimondi: Any suggestions?
16:59  mgedmin: maybe something like :exec "source << END\n" . @" . "\nEND" would work?
16:59  the_isz: just a guess: would eval() help?
17:00  lucs: the_isz: Not sure how I would call it...
17:00  Raimondi: lucs: Put the code on other file.
17:00  lucs: Raimondi: :(
17:01  mgedmin: or is << special syntax supported by just a few commands, like :python?
17:01  lucs: mgedmin: Oh, you mean a here-document type thing.
17:01  lucs: Hmm...
17:02  mgedmin: no, looks like here-documents are for plugin languages (perl, python, ruby), not for arbitrary commands that take filenames
17:02  lucs: Maybe I can write a function that evals the selected text...
17:03  lucs: (or execs)
17:03  bairui: what about visual yank, then   :exe @"
17:03  lucs: Oh, let me try...
17:06  mgedmin: didn't you try that initially and found it not to work?
17:06  mgedmin: I assumed :exec accepts only a single command
17:06  mgedmin: although :function is a single command
17:06  lucs: bairui: That, and variations on it appear to fail.
17:06  bairui: really? my simple test worked...
17:06  mgedmin: oh -- you did a :function Foo and then :Foo -- but to call a function you need :call Foo()
17:06  lucs: mgedmin: I hadn't tried that exactly. I may be a bit confused :/
17:06  mgedmin: :Foo is used to invoke user-defined commands that you define with :command
17:07  lucs: bairui: I must be doing something differently...
17:07  bairui: well, as mgedmin said (and me earlier), you need to   :call Foo()
17:07  lucs: mgedmin: Gah! That could be quite significant :)
17:08  mgedmin: yep -- :@" works for me perfectly
17:08  lucs: Cleaning up, retrying...
17:08  mgedmin: with multiple commands too
17:08  mgedmin: I should've actually tried this instead of assuming
17:08 * mgedmin was trying to save time
17:08  mgedmin: (never a good idea)
17:09  bairui: i was doing that last friday and cut my finger - 2 stitches and no anaesthetic! :(
17:10  bairui: wow... what a test cycle. Too long for me, in the witching hour. Night, lads. :)
17:11  lucs: Good. In conclusion: only the first line needs the ':' prefix; no "|" necessary; once yanked,  @"  gets it evaluated; it needs to be invoked with  :call Foo() .
17:11  mgedmin: no lines need the ':' prefix
17:12  lucs: Thanks bairui, mgedmin, the_isz, Raimondi!
17:13  lucs: mgedmin: If I don't prefix the first line, it does weird things.
17:13  mgedmin: oh? what sort of things?
17:14  lucs: The cursor is displaced in the file (not sure what exactly is going on) and it doesn't compile.
17:15  lucs: Oh, it's doing  f u n  (that last one does 'next' and that moves it).
17:15  mgedmin: http://vim.pastey.net/144812
17:16  mgedmin: when I try that, I get two lines echoed -- hello and world -- and no weird things
17:16  heoa: When you  ":e a file" and you forget the file, how can you see which file you are reading without ":w!"?
17:16  mgedmin: err, correction -- not @", :@"
17:16  mgedmin: @ would try to run that as a macro in normal mode, which would explain what you're seeing
17:17  kurkale6ka: heoa: ^g or :file
17:17  lucs: Ah! Right.
17:17  lucs: mgedmin: Thanks again.
17:17  lucs: A lot cleaner like that.
17:17  lucs: Yay!
17:17  lucs: vim++
17:19  lucs: Another nicely trimmed yak!
17:19 * mgedmin looks at the pasture and sighs
17:50  heoa: kurkale6ka: Thank you.
18:02  lucs: mgedmin: This is strange, no?: http://scsys.co.uk:8002/82245  As I understand it, 'C' not appearing in cpoptions, command-line continuation should be enabled...
18:04  mgedmin: you're right -- it works when I :source the file, but not with :@"
18:04  lucs: (Er, it's not the ompilation that gives those errors, it's  call Foo() .)
18:04  lucs: c
18:05  mgedmin: yes, I tried with a simpler example -- echo "foo". (newline) \ "bar"
18:05  lucs: mgedmin: Darn, I missed that simplification :)
18:10  jordotech: Hi. I am using the visual VIM text editor. I am trying to create a visual block to delete a line of comments, but when i go into visual mode and go up or down, everything to the right of my cursor is included in the block and id just like to isolate the left area
18:10  Raimondi: jordotech: USe Ctrl-V
18:10  homekevin: Ah, the visual Vi
18:11  homekevin: Oops
18:11  homekevin: Stupid enter key.
18:11  homekevin: As I was saying, Ah, the visual Vim text editor. My favorite.
18:11  WakiMiko: i wonder what visual mode on visual vim looks like
18:11  Raimondi: lol
18:11  jordotech: i am using control-v
18:12  homekevin: jordotech: Maybe a screen shot would make your issue more clear? http://imgur.com
18:15  kurkale6ka: jordotech: https://github.com/scrooloose/nerdcommenter
18:16  lucs: mgedmin: Turns out this is documented behaviour :(  See  :h restore-cursor
18:16  jordotech: thank you guys :)
18:18  fx: hi guys, Im trying to edit my color scheme a bit (I got it from a guy). In HTML, i have everything between two <a> tags underlined and it doesnt seem to be anything in the color file. Is there a way i can check what color is applied under cursor or something?
18:19  mgedmin: lucs, you could use a mapping, say :vmap <f9> y:let @"=replace(@", '\n\s*\\', ' ', 'g')|@"<cr>
18:19  mgedmin: (untested)
18:19  mgedmin: and it should be substitute(), not replace()
18:19  homekevin: fx: :echo synIDattr(synID(line("."), col("."), 1), "name")
18:19  homekevin: fx: That will give you the syntax group name
18:20  fx: homekevin, one day, one day i will understand just how that works :|
18:20  lucs: mgedmin: Ok, I'll store that for later use -- I can do without the line-continuation for now, and my yak shaving budget is getting pretty stretched :)
18:21  lucs: mgedmin: Thanks very much for all your help.
18:23  fx: This is awesome, thanks
18:23  fx: homekevin, ^^
18:24  fx: homekevin, what does the "name" mean? can i get a list of all 'attributes' ?
18:24  homekevin: fx: Yes, check :h synIDattr()
18:25  homekevin: You can also do :hi <group-name> to see the highlighting attributes
18:25  iaj: can someone recommen me a good mapping for changing the sizes of splitwindows?
18:25  homekevin: ...and :verbose hi <group-name> to see where it came from.
18:25  mgedmin: iaj, horizontal or vertical?
18:26  zomg: What was that command for making backspace work in a more sensible fashion?
18:26  homekevin: iaj: I like using the mouse for that.
18:26  zomg: Having some issues with vim on windows defaulting to backspace not deleting characters you didn't just write..
18:26  mgedmin: I usually make do with <C-w>= to equalize, <C-w>| and <C-w>_ to maximize, and :set wiw=80 to make sure my current window is always wide enough
18:26  mgedmin: zomg, :set bs=2?
18:26  homekevin: zomg: :h 'backspace'
18:26  mgedmin: there's a more modern spelling, but I don't remember it
18:27  zomg: homekevin: heh, tried without ' 's and it produced nothing useful :)
18:27  zomg: mgedmin: yep looks like that's pretty much it, also mentioned on that help page
18:27  zomg: thanks guys
18:27  fx: homekevin, and these syntax group names, where are they defined?
18:29  mgedmin: fx, in the syntax file
18:29  mgedmin: plus there are some builtins
18:30  fx: and the syntax files are quite detailed, so i shouldnt really need to add anything?
18:30  fx: (im a new to vim, but converted almost completely =))
18:30  mgedmin: adding would be a bit pointless, unless you also add syntax rules
18:31  mgedmin: fx, see :h ft-html-syntax
18:31  mgedmin: about those underlines etc.
18:31  mgedmin: generally, use :hi to see all the defined highlight groups and how they look
18:31  fx: yea i wanted to remove that underline, abit annoying as it spans couple of lines
18:32  fx: wow  this is brilliant
18:32  mgedmin: yeah, I hate those italics
18:32  mgedmin: my .vimrc has highlight htmlItalic gui=NONE guifg=orange and highlight htmlUnderlineItalic   gui=underline guifg=orange
18:32  mgedmin: (which is not necessarily the correct place for them, but whatever, works well enough ;)
18:33  iaj: mgedmin: homekevin so no custommappings?
18:33  mgedmin: iaj, exactly
18:33  mgedmin: where's also <C-w>+ and <C-w>-
18:33  mgedmin: and <C-w>< and <C-w>>
18:33  iaj: yeah..bit hard to hit, imho
18:33  mgedmin: so the builtins are short enough
18:34  mgedmin: and I find that I need them rarely enough
18:34  mgedmin: and my keyboard doesn't have enough spare keys ...
18:34  iaj: and then you do <C-w>+ and you notice it wasn't wide enuff.
18:34  iaj: mgedmin: ^^
18:34  mgedmin: I have some custom mappings for jumping between windows, while in insert mode
18:34  iaj: mgedmin: like which?
18:34  mgedmin: or used to have them
18:34  fx: shame you cant hold < to make it move more
18:34  mgedmin: I now find that I don't remember :)
18:35  mgedmin: or maybe it was something like ctrl+shift+arrow-key and thus only works in gvim
18:35  mgedmin: yep, ctrl+shift+arrows
18:35  iaj: fx: that would be nice yeah :)
18:35  mgedmin: so, what's "wide enuff"?
18:35  iaj: yikes, ARROWS :)
18:35  mgedmin: to me "wide enuff" is 80 columns
18:35  mgedmin: because that's The Standard
18:35  iaj: well that you one needs to make its wider
18:36  mgedmin: so I use 80<C-w>| or :set wiw=80
18:36  mgedmin: or I grab my mouse and drag
18:36  mgedmin: or I do <C-w>| to maximize or <C-w>o to "uber-maximize"
18:36  graywh: hehe
18:37  lucs: mgedmin: Couldn't resist :)  A slight change, and this works:  :vmap <f9> y:let @"=substitute(@", '\n\s*\\', ' ', 'g')<bar>@"<cr>
18:37  mgedmin: ah, <bar>
18:37  mgedmin: I knew I was getting _something_ wrong there
18:37  lucs: :)
18:38  mgedmin: I also wonder if it would be possible to do this without changing @"
18:38  mgedmin: is there a @=<expr>?
18:39 * mgedmin tries :vmap <f9> y:@=substitute(@", '\n\s*\\', ' ', 'g')<cr>
18:39  fx: dear lord, vim really does have help for everything, just wanted to know what <bar> is
18:39  mgedmin: doesn't work...
18:40  mgedmin: hm, :@= uses "the last used expression" rather than accepting it on the command line
18:41  graywh: mgedmin, what are you trying to do?
18:41  mgedmin: lucs wants to use vim like emacs -- select a bunch of vimscript in a buffer and execute it in place
18:41  mgedmin: vy:@"<cr> almost works, but chokes on line continuations
18:41  graywh: ah
18:42  mgedmin: we found a solution that modifies @" with substitute()
18:42  lucs: "Like emacs" I don't know if I should feel insulted :)
18:42  mgedmin: and now I'm playing around looking if there's something shorter/simpler
18:42  mgedmin: lucs, I respect emacs, even if I don't use it (because it somehow doesn't fit my brain)
18:42  mgedmin: no insult implied
18:43  lucs: Just kidding anyway :)  I switched from emacs to Vim about ten years ago.
18:44  graywh: what about :exec @"
18:46  graywh: or :exec substitute(@", '\n\s*\\', ' ', 'g')
18:46  iaj: is there a command for focusing the previous window?
18:46  iaj: i thought C_W C_W would do that :/
18:46  lucs: graywh: Trying...
18:47  mgedmin: :exec @" fails badly
18:47  graywh: yeah, it seems to be no different from :@"
18:47  mgedmin: :exec substitute(@", '\n\s*\\', ' ', 'g') works nicely
18:48 * mgedmin wonders what he did wrong last time, and why he assumed :exec @" didn't support multiple commands -- something about error messages containing ^@ in them
18:49  lucs: Yep.
18:49  lucs: Thanks graywh!
19:01  steff2: how to make a list out of a string?
19:02  steff2: i.e. to use expand with for
19:02  steff2: how to make a list out of a string?
19:04 --- lysek is now known as Guest13801
19:04 --- lysek_ is now known as lysek
19:08  mgedmin: a list out of a string?
19:08  mgedmin: either use split(), or use [a_string]
19:08  mgedmin: depending on what you actually need
19:09  steff2: thx.
19:10  fx: How would one use ctags with vim?
19:11  mgedmin: :!ctags -R .<cr> to generate a tags file
19:11  mgedmin: :tag TagName to jump to a tag
19:11  mgedmin: or Ctrl-] to jump to a tag under the cursor
19:11  mgedmin: or :tsel to select one of several tags with the same name
19:11  mgedmin: :help tags has more
19:11  fx: but where does the ctags file should be stored? and if i have a couple of project directories, which one would vim use?
19:12  mgedmin: simplest answer: store the tags file in the root directory of your project
19:12  mgedmin: (and keep your current working directory in vim to the root)
19:12  mgedmin: you can tell vim where to find your tags file with the 'tags' option
19:12  fx: i have a couple of projects (one includes libraries from the other), the only common folder to them both is /
19:13  mgedmin: e.g. to tell it to look for a tags file in any of the parent directories, :set tags+=tags;$HOME
19:13  fx: hmmm
19:14  fx: and the tags wont regenerate when i edit files?
19:15  fx: oh, brb, gotta go home
19:16  mgedmin: no, you've got to regenerate tags files manually
19:26  iaj: what's the common key to switch windows like C-^ does with buffers
19:30  elif: iaj: C-W (k|j) maybe
19:30  jerojasro: iaj: ctrl-w p
19:30  jerojasro: iaj: :help CTRL-W
19:39 --- mah01 is now known as mah01_
19:44  madmac2501: hi, i want that vim puts automatically beginning braces in the same line and with one space of separation when writing a group of statements in c
19:44  madmac2501: is is possible?
19:44  madmac2501: is it possible?
19:46  mgedmin: I dunno, maybe, check 'cinoptions' or something ...
19:48  madmac2501: also will be helpful if there is some equivalent between "indent" program options and vim options
19:54  dennda: In gvim, how do you switch to the next/previous tab? (opened with :tabe)
19:55  mgedmin: gT maybe?  I don't remember ...
19:55  mgedmin: :help tabs ought to give something useful
19:55  dennda: ah yeah, right, thanks
19:55  mgedmin: more or less -- it's gt/gT
19:56  dennda: how would you map that to super+shift+{
19:56  mgedmin: oh, neat -- with tabs I can have multiple independent vimdiffs between several sets of files
19:56  mgedmin: didn't know that
19:57  LeoNerd: I don't think vim can see the Super modifier.. :/
19:57  LeoNerd: Personally I use ctrl-pageup / pagedown for buffer switching; it seems to be the same as GTK, firefox, chrome, ...
19:57  dennda: then just shift+{
19:57  LeoNerd: { is already shifted :)
19:57  mgedmin: (:
19:58  mgedmin: yeah, ctrl-pgup/pgdn work great (modulo the usual terminal issues that can be worked around)
19:58  dennda: right, thanks, got it
19:59  h4rd-c0d3d: hi everybody
20:00  h4rd-c0d3d: need some help : i want to prepend a line at the top of a file with  and im trying  --> vim -c 1 -c O filename
20:00  h4rd-c0d3d: but -O- is not recognized as a command
20:00  dennda: I have a 'set novb' in my vimrc, but vim happily ignores it. I have to enter it manually when vim is already open. What's wrong?
20:01  h4rd-c0d3d: how can i accomplish this ?
20:01  h4rd-c0d3d: thx
20:06  strull: dennda: try :verbose set vb?  (with the ?)
20:09  h4rd-c0d3d: anyone ? need some help : i want to prepend a line at the top of a file with  and im trying  --> vim -c 1 -c O filename
20:09  LeoNerd: vim is an interractive editor, it's not for automated scripted changes
20:09  h4rd-c0d3d: ????
20:09  h4rd-c0d3d: yes it is
20:10  h4rd-c0d3d: :help -c
20:10  h4rd-c0d3d: type it
20:10  LeoNerd: I'd still suggest sed rather than vim in your case
20:10  LeoNerd: sed -i '1I/Here is a new line of text' file.txt
20:11  LeoNerd: Otherwise it's quite a long and awkward sequence of -c 's
20:11  graywh: h4rd-c0d3d, tip: O is a normal/command mode command, but -c uses Ex/cmdline mode commands
20:12  strull: something -c 1put='filename' should work
20:12  h4rd-c0d3d: graywh, yes , right , but i still have not found the instructions i can use in Ex mode ? can you ?
20:12  h4rd-c0d3d: point me to some information ? i've already been googling for awhile
20:12  h4rd-c0d3d: thx
20:12  h4rd-c0d3d: LeoNerd, yes....i know ....anyway ....in this particular case i would like to learn how to do it this way with vim
20:12  h4rd-c0d3d: thx
20:25  gf3: howdy
20:25  gf3: how can I see WHERE a mapping is set from?
20:25  gf3: my <C-x> seems to be overwritten somewhere
20:25  gf3: which is messing with my omni-completion
20:25  malesca: gf3: :verbose map <C-x>
20:25  malesca: Mine is set from snipMate.vim
20:26  gf3: malesca: perfect, thank you!
20:26  gf3: malesca: same
20:27  walt: we should make... vim2. With an extra meta-normal mode
20:27  walt: imagine the possibilities
20:27  chilversc: finally, a use for that super key
20:33  sir_lewk: is there something I can use to insert the name of the file in the current buffer to an ex command?
20:33  rson: what is the help tag prefix for visual-block mode?  for instance v_A just goes to v_a for visual mode
20:33  sir_lewk: I want be able to map something to the effect of :!p4 edit [filename]
20:33  graywh: rson, v_b_
20:33  iaj: is there any way to have expandtab set, but only tab to the next shiftwidth*tabsize.. eg. when I enter a space and hit <tab> it should only go to the next indent level NOT the next indent level + space?
20:34  rson: graywh: thanks
20:35  bloger: I'm trying to replace new line with an space in selected block. Got unexpected result - replacement occur from cursor position to end of file. Where is my mistake? %s:\%V\n: :g
--- Log closed Fri Jan 14 08:48:30 2011
