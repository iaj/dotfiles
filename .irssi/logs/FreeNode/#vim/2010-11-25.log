--- Log opened Thu Nov 25 08:25:10 2010
--- Log closed Thu Nov 25 08:25:10 2010
--- Log opened Thu Nov 25 08:30:31 2010
08:30 --- Users 563 nicks [1 ops, 0 halfops, 0 voices, 562 normal]
08:31 --- Channel #vim was synced in 82 seconds
08:32  fastvimhead: does any one use Vim C++ plugin on windows vista?
08:35  fastvimhead: The plugin is in the toolbar but i get a msg when I run the program that stats: file "" does not exist or is not executable or object/source older then executable
08:35  fastvimhead: has any one had this problem, it work really good on my linux but not on window
08:39  akosch: how would I select something from the current cursor position up to the next ; (semicolon)?
08:40  DHulme: akosch: :help f
08:40  DHulme: (assuming the ; is on the same line; use / otherwise)
08:42  akosch: DHulme: thx, but ; isn't on the same line
08:43  akosch: my problem is about editing mysql statements embedded into multiline php strings
08:43  akosch: i can't really do stuff like ci"
08:43  akosch: because the string has several interruptions to append php variables
08:44  akosch: so I guess i could just delete up to the end of the statement
08:45  fastvimhead: hi all, does any one use Vim C++ plugin on windows vista?
08:46  DHulme: fastvimhead: if you're not even going to tell us which C++ plugin you're talking about, there's no point repeating the question
08:46  DHulme: I suggest you write to the author and ask him.
08:46  DHulme: You'll find his email address at the top of the plugin file.
08:47  fastvimhead: It's the c.vim plugin, sry, I gues I will try the author
08:51 --- [[vanity]] is now known as vanity
08:58  madmac2501: is there some default command like next page and previous page near 'hjkl' row?
09:02 --- daniel__ is now known as daniel
09:04  the_isz: madmac2501: define 'page' please.
09:05  madmac2501: the_isz, i mean the keys 'next page' and 'prev page'
09:05  the_isz: madmac2501: then try <c-f> and <c-b>
09:06  madmac2501: the_isz, thanks, that was what i were looking for
09:06  the_isz: madmac2501: glad to help
09:06 --- silex is now known as Silex
09:06  fow: uuuuuuuUUUUuuuUUuuuUuuuuUUuuuuUUuuuuuuuuu
09:06  fow: ...
09:06  fow: ignore that
09:06  Raimondi: Why? sounds like fun :)
09:08  myg: hi everybody, does someone know about a plugin that works like gdb-many-windows in emacs ?
09:08  fow: myg, what is gdb-many-windows?
09:09  myg: gdb with 5 frames: one for code one for stack one for buffer and one for watchpoints and another one with something
09:11  fow: myg, that sounds like it would involve Vim creating an asynchronous process and sticking it in a Vim window. This isn't (currently) possible. (it may never be possible)
09:13  myg: Oh ok. So I'll keep using emacs for that. Thanks fow.
09:13  fow: you're welcome
10:17  cemysce: is there any switch/case statement in vim?
10:18  Raimondi: No, cemysce.
10:20  cemysce: thans, Raimondi
10:20  cemysce: *thanks
10:21 --- Silex is now known as silex
10:22  duikboot: Raimondi: cemysce: What about the ~
10:24  Raimondi: I think cemysce was referring to http://en.wikipedia.org/wiki/Switch_statement
10:24  Raimondi: duikboot: ^
10:25  duikboot: Raimondi: hmm, now I do think so too. Sorry
10:31 --- silex is now known as Silex
10:50  raccoon_: anyone here using the kinesis advantage keyboard?
11:21 --- Silex is now known as silex
11:45  cirwin: I really like vimdiff, but I find that it makes the file illegible when combined with syntax highlighting â€” does anyone have a nice colourscheme for vimdiff (I'm happy with the default normally)
12:40  malesca: I'd like for "ciw" (change in word) to consider _ a word separator. So with "foo_bar", ciw would change just "foo" or just "bar", and ciW would change the full "foo_bar". I tried iskeyword, but that messes up highlighting. Is there another way?
12:48  frogonwheels_: malesca: you might hav eto make your own text object then
12:53  kaushal: hi
12:54  kaushal: is there a way to retain only the last 2 GB of a catalina.out of size 44 GB ?
12:54  kaushal: I mean total size is 44GB
12:56  mgedmin: dd?
12:56  mgedmin: I mean the unix tool., not the vim command
12:56  kaushal: mgedmin: ok
12:56  kaushal: any example ?
12:57  mgedmin: it has a manual page ... which has no examples, yay gnu info idiots
12:57  kaushal: mgedmin: yeah
12:57  kaushal: very odd
12:57  mgedmin: tail is an option too
12:57  mgedmin: I've a feeling it might be slower than dd
12:57  mgedmin: or it might not
12:58  mgedmin: tail -c 2G catalina.out > catalina.new
12:59  mgedmin: (that's with G being 1024*1024*1024 bytes)
12:59  mgedmin: (if you want 1000*1000*1000, use -c 2GB)
13:06  akshayrawat: Hello, I'm having a problem with the latest versions of macvim and rails.vim. The problem is detailed here - http://stackoverflow.com/questions/4276784/macvim-rails-vim-hangs-while-running-spec
13:18  malesca: frogonwheels_: Thank you. Will look up text objects.
13:20  sander_m: Hi. I'm having a problem with Vim on Windows. On Linux, when I hit :make and there's an error, the quickfix window opens. I can scroll through it and hit enter to jump to the place of the error in the source file. No such luck in the Windows version. :make tells me it found errors in the source code, but the quickfix window doesn't open after hitting Return. When I open it manually (:copen) and hit Return on an error, it does not jump to the correct place 
13:20  mgedmin: sander_m, it looks like vim is unable to parse the error messages
13:20  sander_m: I have tried disabling all my customistaions (moving _vimrc and vimfiles out of the way) but it still occured.
13:21  mgedmin: you may need to tell vim which compiler you use with :compiler
13:22  sander_m: mgedmin: Is there a difference between the formats on Windows and Linux?
13:22  mgedmin: or specify how to parse the error messages by changing 'errorformat', but that is *hard*
13:22  mgedmin: sander_m, do you use gcc on both?
13:25  sander_m: mgedmin: No, this is for PHP code. makeprg=php\ -l %, errorformat=%m\ in\ %f\ on\ line\ %l, sample error line = "Parse error: syntax error, unexpected T_PUBLIC, expecting ',' or ';' in DomainLinkFrontend.class.php on line 41"
13:26  sander_m: Perhaps thje backslashes that Windows uses is throwing Vim off?
13:27  mgedmin: hm
13:28  Geralt: hi, where can I find some documentation about the vim: lines found in some files (to set things like tabwidth, expandtab, etc)?
13:28  mgedmin: sander_m, actually, I was wrong
13:29  mgedmin: if you see errors in the quickfix window, then 'efm' is right
13:29  mgedmin: it's in :clist that you see all the output
13:29  mgedmin: including lines that didn't match
13:29  mgedmin: I never use :copen, I use its :cw alias, so I got confused a bit here
13:29  mgedmin: now if pressing <enter> doesn't work, then vim can't find the file
13:30  mgedmin: check the setting of 'path' perhaps?
13:30  mgedmin: is the file in the current directory?
13:31 --- silex is now known as Silex
13:34  sander_m: mgedmin: Yes. It seems to be working now BTW, but still working differently from the Linux version somehow.
13:38  sander_m: mgedmin: I think I spotted the problem. <CR> has been remapped somewhere. I just have no idea where. Is there anyway I can ask Vim in which file/line a map was set?
13:41  mgedmin: yes
13:41  mgedmin: :verbose map <CR>
13:45  sander_m: mgedmin: Found it, but no idea how to solve it. I wanted to map Ctrl+M to something, but apparently Vim sees <C-M> as <CR> instead of Ctrl+M?
13:45  mgedmin: there's no difference between <CR> and <C-M>
13:45  mgedmin: in vim's eyes
13:46  mgedmin: just like there's no difference between <Esc> and <C-[>
13:46  sander_m: mgedmin: Okay, so how do I map Ctrl+M to something?
13:46  mgedmin: without mapping <CR> as well?  you can't do that with vim
13:46  sander_m: mgedmin: Okay, too bad
13:49  mgedmin: you could perhaps convince your terminal emulator to send something other than ASCII 13 when you hit Ctrl-M ...
13:49  mgedmin: but it would be highly nonstandard
13:49  sander_m: Is there a list somewhere of combinations like C-M and C-[ that map to other keys?
13:49  mgedmin: :help keycodes
13:49  mgedmin: ctrl-space = ctrl-@ = <Nul>
13:49  mgedmin: backspace is a complicated topic
13:50  sitaktif: usually <c-h> no?
13:50  sitaktif: (or this fraggin <c-?>... never understood why there is an issue with vim for the latter)
13:58  zxd: hi
13:58  zxd: in a script
13:58  zxd: is there a command to jump to matching }
13:58  zxd: if my cursor is on top of a {
13:58  mgedmin: http://www.debian.org/doc/debian-policy/ch-opersys.html#s9.8 is a good summary
13:58  mgedmin: of the backspace-delete issue
13:58  mgedmin: zxd, %
13:59  zxd: thanks
14:01  tlonim: sander_m: which is why you find <leader> to be used more than other mode keys .. usually Ctrl, alt, super are assigned to window functions or window manager
14:28  sander_m: mgedmin: I think I found another problem, again not sure how to solve. My makeprg returns full paths to filenames with cases. E.g: "C:\MyFolder\SubFolder\MyFile.php". The statusline in Vim for that file says "C:\myfolder\subfolder\MyFile.php". The path is lowercases, but the filename is cased normally. Could this be the reason that Quickfix cannot jump to the correct place in the file?
14:30  mgedmin: I don't know
14:30  strull_: sander_m: makeprg should be empty or contain the name of the make-program, not the filename to be edited
14:35  Silex: is % always resolved to the current buffer filename for all : commands?
14:36  mgedmin: no, irc
14:36  mgedmin: it's resolved for all commands that take a file name
14:36  mgedmin: e.g. :echo % wouldn't work
14:37  Silex: okay, interesting
14:38  Silex: do you often use the alternate file name thing? I have trouble understanding if it's worth it or not
14:38  Silex: or what it is exactly for that matter
14:38  mgedmin: it lets you switch between two files quickly
14:38  mgedmin: <c-^>
14:38  mgedmin: is the same as :b #
14:39  Silex: hum, so it's only worth if if you open two files?
14:40  spiiph: Um, well, it only works if you have more than one file open, so yes, you could say that.
14:42  mgedmin: I should've said "the last two files you've opened in a window"
14:42  dsdeiz: i usually have many files opened in split windows :D any suggestions to improve it?
14:42  mgedmin: is there anything to improve?
14:43  dsdeiz: oh... is that how it usually is?
14:43  mgedmin: I usually have between two and four splits, not counting things like quickfix windows
14:43  mgedmin: and that's because my laptop screen isn't very big
14:43  lucasoman: dsdeiz: i prefer tabs
14:44  mgedmin: ~tabs
14:44  mgedmin: vimgor, tabs
14:44  vimgor: Tab pages are not buffers, don't try to force them to act like buffers. Consider tab pages like viewports, layouts, or workspaces. Trying to setup 1 tab page == 1 buffer is an exercise in futility. Do ':set hidden' and get started. Get FuzzyFinder, LustyExplorer or BufExplorer to make getting around your buffers easier. See http://vim.wikia.com/wiki/Category:Tabs for more info.
14:44  dsdeiz: so what happens if you want to switch between 5 buffers? do you use the '# <C-^>" mentioned earlier?
14:44  mgedmin: dsdeiz, depends
14:44  mgedmin: I rarely think "I want to switch to buffer 3"
14:44  mgedmin: I usually think things like "now I want function foo"
14:45  mgedmin: which means Ctrl-] when the cursor is on top of foo(...)
14:45  mgedmin: or :tag foo
14:45  dsdeiz: oooh, i get it
14:45  mgedmin: or I think "now I want this template being trendered"
14:45  mgedmin: which means gf when the cursor is on top of render("path/to/template.mako")
14:45  mgedmin: things like that
14:45  mgedmin: or I think "now I want README.txt"
14:45  mgedmin: which means :buf READ<tab>
14:45  mgedmin: if I've got it open already
14:46  mgedmin: or :e READM<tab>, if I'm not sure
14:46  dsdeiz: hm, will try that approach. thanks
14:46  mgedmin: and for deep directory structures, plugins like command-t are priceless
14:46  mgedmin: check out the screencast at https://wincent.com/products/command-t
14:46  dsdeiz: i was thinking earlier to use plugins like mini buf explorer
14:46  dsdeiz: will do
14:47  mgedmin: I also use bufexplorer sometimes
14:47  mgedmin: the <c-^> thing is convenient when you have two related files
14:47  mgedmin: e.g. code + unit tests
14:47  mgedmin: or, e.g. when you want to go back after visiting the template with gf
14:49  dsdeiz: any resources to where to get those "stuffs"? like how to use vim efficiently?
14:50  mgedmin: :help
14:50  mgedmin: that's where I got it all
14:50  lucasoman: dsdeiz: everyone uses vim differently, has a different workflow, processes, and preferences
14:50  mgedmin: well, not all, but most of it
14:51  dsdeiz: trudat
14:51  lucasoman: use vim for a while, keep reading about its features, and you'll settle into the routine that works best for you
14:51  the_isz: dsdeiz: go through vimtutor if you haven't already and pay attention to what you do most often and if you can speed it up
14:51  mgedmin: hearsay on the internet, especially on this channel, is where I learned about plugins like command-t
14:51  mgedmin: vimtutor is good at putting the basic foundations in place -- how to think the vim way
14:51  mgedmin: I remember the epiphany I had when I tried d/search pattern and it deleted everything from my cursor to the match
14:52  mgedmin: I hadn't read about that in the docs, I came up with it myself -- and it worked
14:52  mgedmin: it was a wow moment
14:52  mgedmin: ah, good old times
14:52  mgedmin: the :help is big and impossible to digest all at once
14:53  lucasoman: yes
14:53  mgedmin: but if you look through it at the possibilities vim offers, chances are you'll remember about them when you need to do text editing
14:53  lucasoman: basically, you say to yourself, "Hmm, it would be really nice if...."
14:53  mgedmin: and you'll be able to find the specifics in the help
14:53  lucasoman: and then figure out if vim has that feature already or if you can script something for it
15:01  Keba: hi there
15:02  dsdeiz: crap, i forgot again how to make vimgor display the motion commands
15:02  et: vimgor, movement
15:02  vimgor: In normal mode, all of these keys can move the cursor: ` # $ % ^ * ( ) 0 _ - + w W e E t T I o O { } [[ [] ][ ]] [m [M ]m ]M [( ]) [{ ]} | A f F ge gE gg G g0 g^ g$ g, g; gj gk gI h H j k l L ; ' z. z<CR> z- zz zt zb b B n N M , / ? <C-b> <C-d> <C-e> <C-f> <C-h> <C-i> <C-o> <C-t> <C-u> <C-y> - learn to use all of them
15:02  Keba: how to compile vim with python support?
15:02  dsdeiz: heh, tnx
15:04  Silex: do you guys _really_ use all of these keys? Oo
15:05  viric: Hep
15:05  viric: the modeline does not work for me in xml
15:05  viric: <!-- vim:tw=0 -->
15:05  viric: it says 'unknown command -->'
15:06  viric: What am I doing wrong?
15:06  lucasoman: Silex: a quick count, i use 36 of them
15:06  bosie: how do i append text before the cursor?
15:06  viric: bosie: i
15:06  lucasoman: viric: put the end comment string on the next line
15:07  bosie: cirwin: ok i was rather looking for a key doing 'hi'
15:07  cirwin: hm?
15:07  viric: lucasoman: right. Thank you!
15:08  bosie: cirwin: sorry, wrong user
15:08  cirwin: oh ok
15:08  bosie: viric: ok i was rather looking for a key doing 'hi'
15:08  lucasoman: viric: np :)
15:09  mgedmin: Keba, install the necessary dev packages, then ./configure --with-python ... && make
15:09  lucasoman: bosie: i think "hi" is your best solution, unless you map something shorter
15:09  d0m: map | :echo '|'     -> Why isn't that working?!
15:09  Silex: is K like ctrl-]?
15:09  mgedmin: first step is greatly simplified in debian/ubuntu with sudo apt-get build-dep vim-gnome
15:09  bosie: lucasoman: hmm ok
15:09  Silex: I mean ctrl-] doesn't always work to jump to help topic
15:09  Silex: K could be a good alternative
15:10  lucasoman: bosie: e.g.: nmap I hi
15:11  bosie: lucasoman: thanks
15:12  lucasoman: np
15:12  d0m: (\| seems to work)
15:14  Keba: mgedmin: necessary dev pkgs?
15:14  Keba: mgedmin: python2.6 or more?
15:14  mgedmin: sure, you need things like Python.h etc.
15:15 --- raorn_ is now known as raorn
15:15  Keba: thx :)
15:16  the_isz: d0m: | usually "concatenates" commands, so that might have been the confusion for vim
15:16  d0m: ok
15:18  mgedmin: d0m, :h map_bar
15:18  LeoNerd: Perhaps you want   :map <|> :whatever
15:18  Keba: mgedmin: "configure: WARNING: unrecognized options: --with-python
15:19  mgedmin: Keba, sorry, it's actually called --with-pythoninterp or something like that
15:19  mgedmin: check the spelling with ./configure --help
15:20  mgedmin: Keba, if you're on Ubuntu, check http://askubuntu.com/questions/7283/where-can-i-find-vim-7-3/7344#7344
15:20  mgedmin: for full instructions
15:20  the_isz: so i was right.  map | :echo '|'  should have called map without arguments, then the echo
15:20  mgedmin: that should also work in Debian
15:32  Keba: mgedmin: thx
15:41  bosie: why is my map <C-j> <C-w>j not going from a window to a quick list?
15:41  bosie: it doesn't jump there
15:42  LeoNerd: You probably don't want to map Ctrl-JK
15:42  LeoNerd: Ctrl-J   even
15:42  bosie: LeoNerd: how so
15:42  strull_: <c-w>j is not supposed to the quick list
15:43  bosie: strull_: didn't say that
15:43  bosie: it works fine between regular windows
15:43  LeoNerd: How? How doesn't matter, you don't want to map it :)
15:43  bosie: i am wondering why it doesn't work
15:43  lucasoman: why not? :P
15:44  bosie: it works from one window to another
15:44  LeoNerd: Because it's Enter
15:44  bosie: but from the window to the quicklist it wont'
15:44  bosie: so i am wondering why that is
15:44  bosie: if i use <c-w>j regularly it jumps from the window to the quicklist
15:45  lucasoman: LeoNerd: i've mapped c-j to something else and have had no issues
15:45  LeoNerd: Curious...
15:45  mgedmin: LeoNerd, ^M is enter, ^J is ... <Nul>
15:45  lucasoman: mapped it to c-e
15:45  strull_: LeoNerd: why should there be an issue?
15:45  dsdeiz: what's a quicklist anyway? :/
15:45  strull_: except that you loose the default behaviour
15:45  mgedmin: at least ^V^J inserts <Nul>
15:45  LeoNerd: mgedmin: Cuuuuuurious...
15:45  mgedmin: oh, duh!
15:46  LeoNerd: ^M and ^J ought to behave similarly...
15:46  mgedmin: I can map <C-@> and <C-J> to different commands
15:47  LeoNerd: Yes.. that's fine
15:47  mgedmin: :h CTRL-J
15:47  mgedmin: it's same as regular j, by default
15:47  mgedmin: while ^M is <CR>
15:48  LeoNerd: Oh OK... Perhaps just ^M then,,,
15:48  LeoNerd: Maybe vim termios'ed it away..
15:48  the_isz: dsdeiz: i suppose they mean quickfix window.  :he quickfix-window
15:48  bosie: ah yes, quickfix list
15:49  dsdeiz: ah ok. thanks
15:51  bosie: well thanks guys
15:51  bosie: ;)
15:52  wald0: how to do a replacement of var_foo that will not consider var_foo_bar ? so exact match
15:52  the_isz: wald0: try  var_foo\>
16:08  qz: anyone uses LustyJuggler? it works, but feels really slow.. minibuffers appear after like 2 seconds i press keybind
16:08  qz: yet if i quickly press anything after that keybind they appear right away =p
16:13  strull_: qz: what is your keybind?
16:13  qz: mapleader + b
16:13  qz: so its ,b
16:14  strull_: you probably have another (longer) map, starting with ,b
16:14  strull_: check with :map ,b
16:14  strull_: so vim waits for a keypress (or a timeout) to disambiguate it
16:15  mgedmin: e.g. bufexplorer uses <leader>be
16:15  qz: indeed, there's ,bug
16:17  locsmif: In Cygwin, in vim, backspace doesn't always work and I can't 'pull in' a subsequent line into the current one as I can in vim on Linux... what is misconfigured?
16:17  LeoNerd: :he 'backsp
16:18  qz: strull_, after removing that bind its really fast now ;) thanks alot
16:20  locsmif: LeoNerd, thanks!
16:20  locsmif: LeoNerd, I presume this setting will remain active for this session.. how do I apply it permanently?
16:20  LeoNerd: Stick it in your .vimrc
16:21  locsmif: ty
16:21  strull_: qz: np, have fun!
16:21  deitarion: Is there any way to run a script hook on cursor movement due to scrolling?
16:22  deitarion: Since it's impossible to kill off the "cursor stays in viewport" mis-feature without hacking Vim's source (and I don't feel like maintaining a custom Vim build in my git-based "roaming homedir") and I can't seem to break my "scroll, wait... I should have set a mark! Dammit!" habit, I'd like to set the mark for `` automatically when the cursor is moved by the viewport.
16:23  the_isz: deitarion: just curious: how are you scrolling?
16:23  spiiph: <C-o> doesn't cut it?
16:24  deitarion: the_isz: Various ways, depending on what I'm doing. Scrollbar in gvim is one way that drives me nuts quite a lot.
16:24  the_isz: spiiph: <c-o> doesn't do the right thing for <c-f> and similar movements, so i could unterstand deitarion in that way
16:25  the_isz: deitarion: i'd suggest getting used to not using the mouse when using vim
16:25  deitarion: the_isz: Actually, I'm about 50/50 on the idea of trying to unlearn the vim muscle memory so I can just pick something that, aside from keybindings, is closer to my preferences.
16:26  mgedmin: perhaps '. would help, assuming you've edited something before scrolling elsewhere
16:26  the_isz: deitarion: every movement such as <c-f> has its undoing counterpart (<c-b> here)
16:26  the_isz: deitarion: also  g;  is quite useful to me
16:26  mgedmin: otherwise I'd use search/tags/folding to go back to the area of interest
16:27  deitarion: mgedmin: Not reliable enough. Ever since I started learning QBasic at age 8, I've been building a habit of using the cursor as an ad hoc mark so I can just hit Left or Right to jump back... and, aside from Vim's editing commands, I'm not overly fond of building one muscle memory set for my editor and another for the rest of my desktop. Took me far too long to stop accidentally typing :w in other apps and Ctrl+S in Vim.
16:28  deitarion: (I'd consider using Vim muscle memory for everything, but I've never found anything with a fake Vi mode flexible enough to match my Vim setup suitably)
16:28  spiiph: Hrm, <C-o> and `` seems to be doing something wrong when using <C-[udfb]>
16:29  deitarion: spiiph: I know that, on mine, one of the scripts (no clue which) seems to be resetting ``.
16:29  spiiph: Yes, but I have no such script.
16:29  deitarion: ...but since it only seems to kick in on editing, I have no problem trying to make `` into "Undo scroll-related relocation of cursor"
16:30  deitarion: I usually use scrolling just to glance at some other piece of code.
16:32  mgedmin: and I don't suppose you'd consider <C-w>s before you start to scroll?
16:32  mgedmin: then you could go back with <C-w>q
16:32  deitarion: mgedmin: If I remembered to do something before I scrolled, I'd just type m` or ma. That's the whole point.
16:32  the_isz: deitarion: well, i can understand your problem. when i'm looking at other code i usually open another window or really set a mark to got there. or i use the opposite movement...
16:33  mgedmin: long-time habits can be hard to shake, I suppose
16:33  deitarion: The proper solution would be some kind of toggle to unlock the cursor from the viewport, but who knows how many scripts that could potentially break.
16:33  the_isz: deitarion: but leaving your hand away from the mouse would be a good start to get used to the vim way.
16:33  spiiph: Ah, right, now I see how it works.
16:33  mgedmin: deitarion, that would make users (e.g. me) very angry, unless you made it an option ...
16:34  mgedmin: and I suspect it may be difficult to implement
16:34  deitarion: the_isz: Much of the time, I do. Then it's habitual use of <PgUp><PgUp> or G/gg or whatever that's the problem. (Any time I remember the position but not enough of the content to think to use a search)
16:34  spiiph: deitarion, that's not the proper solution, since that's one of Vim's philosophies.
16:34  deitarion: mgedmin: Of course it'd be an option. Otherwise I'd be no worse than the people who expect me to drop everything and spend who knows how long retraining myself.
16:35  mgedmin: we don't expect that!
16:35  deitarion: mgedmin: Where were you the last few times I've been in #vim asking about things?
16:36  spiiph: mgedmin, of course we expect that.
16:36  mgedmin: we expect you to meet vim halfway _OR_ go use a different editor ;-)
16:36  spiiph: It's the proper way to do it.
16:36  spiiph: But it would be nice if Vim would set the ` and ' marks upon issuing the first scroll command after a jump.
16:36  mgedmin: maybe
16:37  mgedmin: for a sufficiently large scroll
16:37  mgedmin: if a small mouse wheel destroyed my ``, I'd be unhappy
16:37  deitarion: I've already met Vim half-way. Why do you think I've built up a Vim muscle memory and dropped my quest to try for a somewhat Cream-like "Insert mode is default, Esc is a synonym for Ctrl+O, etc." setup and learned enough Vimscript to make my own tweaks and such?
16:37  deitarion: I'm just not willing to go beyond half-way.
16:38  spiiph: Anyway, if you need to scroll to view some other part of the code, and then go back and edit, I suggest using :sb
16:38  deitarion: I suppose the real problem is that I'm the worst kind of programmer... the kind who knows what he wants and is willing to reinvent as many wheels as necessary if possible if he's pushed too far.
16:38  spiiph: deitarion, pity. It'd probably help if you did.
16:39  deitarion: spiiph: Really? You think I should write a whole new text editor in Python because the only thing with acceptably non-EMACS keybindings and suitably TextMate-like snippets other than SnipMate IS in Python but is so heavily dependent on GNOME and so buggy that I'd get more efficiency out of starting from scratch?
16:40  spiiph: I responded to your earlier statement.
16:40  LeoNerd: deitarion: /join #vim-mutiny
16:40  deitarion: spiiph: Oh, the one about the Cream-like behaviours?
16:40  LeoNerd: We go through a "lets rewrite vim" about once a month, these days...
16:40 * mgedmin thinks it was the " I'm just not willing to go beyond half-way." one
16:40  deitarion: Ahh, yeah.
16:41  deitarion: Another thing about Vim I've never seen elsewhere... :gui
16:42  deitarion: So refreshing to be able to launch an editor in Yakuake (LXDE has no decent Quake-style term so I borrowed KDE's) and then flip it out into its own window when I realize I really don't want to have to Ctrl+a c and navigate all the way back to my project folder.
16:42  deitarion: Which reminds me...
16:43 * deitarion goes to add some `if arguments, vim = vim -p "$@" and gvim = gvim -p "$@"` aliasing to .zshrc.
16:44 * mgedmin loves :gui
16:45  deitarion: Ugh. And I also have to find time to rewrite ciaranm's indent autodetector so Javadoc-style comments (JSDoc and PHPDocumentor, in this case) don't confuse it into thinking the indent level is 1.
16:46  deitarion: s/level/size/
16:46  ciaranm: that should be fairly easy to do
16:47  deitarion: *nod* I just have to get around to it. I haven't slept well recently, so I've been mostly spending my time reading and writing the fun parts of programs and tidying up my hard drive. (Things that require little motivation and/or are relatively brain-free)
16:48  deitarion: Basically, I have to figure out how to tell it that it shouldn't take indents within doc blocks into account when detecting indentation.
16:48 * ciaranm seems to recall there already being code in there to do something similar for other things
16:48  ciaranm: although i've not really looked at the code since i wrote it... i just use it...
16:49  deitarion: I'll keep my eyes out for it then.
16:49  deitarion: I've been procrastinating working on it and I'm starting to develop a habit of sticking a modeline in every non-Python file I edit because of that... for better or worse.
16:50  ciaranm: modelines are better. but sometimes you have to work with filthy emacs users.
16:50  spiiph: But they sprinkle their files generously with --*-c++-*-- or whatever, so why not add modelines too?
16:51  LeoNerd: It's just a matter of finding the majority, surely?
16:51  ciaranm: because they're filthy emacs users
16:51  mgedmin: I've decided not to use modelines eventually -- instead I change the settings as I go, or put project-specific autocommands in my .vimrc
16:51  mgedmin: ot
16:51  LeoNerd: I have an idea for detecting indent that I've almost got aroudn to actually writing. It's about 3 lines of Perl :)
16:51  ciaranm: discussing things with them may mean being in the same room as them for more than two minutes
16:51  DestinyAwaits: spiiph : Hello, Sir.
16:51  mgedmin: it's easier for Python, which has a universal coding style
16:51  ciaranm: which is clearly not worth it
16:51  spiiph: hi
16:51  spiiph: ciaranm, why discuss? Why not just add them? :)
16:51  ciaranm: spiiph: because commit wars get boring
16:53  spiiph: They are fighting commit wars over modelines?
16:53  spiiph: Why, does it sting their eyes that people use vim?
16:53  ciaranm: the last lot of emacs users i had to deal with were deliberately sticking their ten line emacs modeline blocks *before* the vim modelines, just so vim's default settings wouldn't see them
16:53  spiiph: Wow. Why don't you get them fired? They sound like retards.
16:54  ciaranm: that was on an open source project
16:54  mgedmin: you can put the vim modeline at the _end_ of a file
16:54  mgedmin: then sticking stuff above won't break them ;)
16:54  spiiph: But sticking them below will
16:55  ciaranm: not that anyone should be using vim's modeline implementation anyway since it's a gaping security hole
16:55  ciaranm: but the plugin has the same 'n lines' thing
16:55  mgedmin: would someone really purposefully move an emacs setting block from the top of the file to the bottom just to break vim support?
16:55  mgedmin: that's a social problem
16:55 * mgedmin prefers to assume ignorance instead of malice
16:55  ciaranm: ooh yes
16:56 * ciaranm invites mgedmin to try working with some gentoo developers sometime...
16:56 * mgedmin is somehow not surprised to hear they use emacs
17:04  lucasoman: in a vim script, how can i find the total number of lines in a buffer?
17:05  mgedmin: line('$'), iirc
17:05  lucasoman: ty
17:08 --- Silex is now known as silex
--- Log closed Thu Nov 25 17:22:01 2010
--- Log opened Thu Nov 25 17:22:22 2010
17:22 --- Users 579 nicks [1 ops, 0 halfops, 0 voices, 578 normal]
--- Log closed Thu Nov 25 23:41:49 2010
--- Log opened Thu Nov 25 23:47:19 2010
23:47 --- Users 581 nicks [1 ops, 0 halfops, 0 voices, 580 normal]
23:48 --- Channel #vim was synced in 87 seconds
--- Log closed Fri Nov 26 00:00:49 2010
