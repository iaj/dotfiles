--- Log opened Sun Jan 09 17:48:11 2011
17:48 --- Users 575 nicks [0 ops, 0 halfops, 0 voices, 575 normal]
17:49 --- Channel #vim was synced in 73 seconds
17:51 --- newbiz_ is now known as newbiz
18:16  homekevin: I could totally help with that if you were more patient, fredrike.
18:17  homekevin: Granted, I wouldn't really be expecting a response after 2 hours either.
18:18  strull: someone should write a perl->vim (regexp) translator. And of course vice versa
18:27  saba: the bccalc plugin (http://www.vim.org/scripts/script.php?script_id=219) tells me I should hit ;bc to invoke it with a selection..
18:27  saba: but I believe I've misunderstood that part, because ; is not possible to write
18:27  saba: how do I invoke it?
18:31  strull: saba: what do you mean "not possible to write" ?
18:33  saba: strull: typing ; makes the screen blink and nothing more, thus continuing with b and c will erase some text instead.
18:34  FernandoBasso: Perhaps the plugin assumes ; is <LocalLeader> ?
18:34  strull: then either the plugin is not loaded or you misread the docs
18:35  FernandoBasso: Nonsense (me). No plugin writer would expect localleader to be ;
18:35  saba: strull, are plugins in ~/.vim/plugin/ automatically loaded?
18:35  Raimondi: FernandoBasso: Don't underestimate the power of the dark side
18:35  FernandoBasso: haha
18:35  strull: saba: yes, they should. check with :scriptnames
18:36  FernandoBasso: I can feel the dark side around here sometimes.
18:36  Raimondi: FernandoBasso: Yes, the dark side everywhere is
18:37  FernandoBasso: Yoda's speaking style is better than the 'default' style.
18:37  saba: strull: sorry for taking your time, I discovered that I restarted one vim but tested in another so it was my bad. ;bc works
18:38  strull: np, have fun!
18:38  saba: thanks
18:40  peth: when i set path+=dir from my vimrc, it doesn't make it through, but the line is definitely successfully called. i suspect it has something to do with global/local but haven't dabbled with that yet. can someone give me a pointer?
18:41  strull: peth: try :set path+=,dir
18:42 --- ml|_ is now known as ml|
18:43  peth: hrm. obviously i just need to take a break. i actually literally wrote set path+="dir" o_O
18:43  peth: yes, with the quotation marks
18:44  strull: take a break
18:44  peth: thanks, strull :)
18:46  dnlcorrea: hi all
18:47  dnlcorrea: any1 knows how to change text color in 'rulerformat'?
18:48  joeytwiddle: it's probably a highlight rule
18:48  Axius: I get this msg: No mapping found when I open vim.
18:48  joeytwiddle: you might find it in the list produced by :high
18:49  joeytwiddle: Axius: could it be your .vimrc or one of .vim/plugins or one of .vim/after/syntax ?
18:51  Axius: joeytwiddle: this is my .vimrc file: http://paste.pocoo.org/show/317749/
18:51  peth: dnlcorrea: see the help for 'statusline'. it explains how to define User1..9 custom highlight groups in these strings.
18:51  joeytwiddle: "no mapping found" sounds like something is trying to "unmap" a mapping
18:52  dnlcorrea: im reading 'statusline'
18:52  joeytwiddle: Axius: try moving .vimrc to .vimrc_disabled and see if the error disappears
18:52  joeytwiddle: i don't see any unmapping in your vimrc
18:52  dnlcorrea: peth:  thanks, that's waht I want
18:53  Axius: ok
18:53  joeytwiddle: gotta go, good luck!
19:04  Ahtenus: Hi, guys. How do i copy to system clipboard i gvim and vice versa?
19:05  _rane: "+y
19:06  _rane: vice versa? ctrl-c?
19:07  Ahtenus: Thanks!
19:08  Ahtenus: No, how i paste into vim... But i got it.
19:08  _rane: + registry is the thing
19:31  sliang6: hello all -- where would i go to submit a bug report for VIM?
19:31  malesca: sliang6: :help bugs :)
19:32  sliang6: hah been looking everywhere on vim.org for a link or something thanks
19:38 * strull always assumes that someone who does not know how to submit a bug report does most likely not have found one
19:48  sliang6: well i certainly can't find a reason why vim would not respond to SIGHUP indefinetly so that it doesn't die when a terminal closes causing it to use a lot of CPU
20:14  strull: yes, I've noticed this too
20:15  strull: and ... this indeed sounds like a bug to me
20:17  peth: not here anymore. vim responds to a manual sighup here just fine.
20:17  peth: s/^/he's/
20:28  Ahtenus: is there a shorthand way to replace the current line with content in clipboard? Now I just paste and then remove the line...
20:29  FernandoBasso: V"+p
20:31  Ahtenus: okey, but if i want to paste from the yank buffer or whatever it's called?
20:32  FernandoBasso: Vp
20:33  Ahtenus: Well, that was easy, thanks
20:34  FernandoBasso: Also, supose you copied something, and now you want to insert it inside quotes, but there already is text inside quotes, do: vi"p
20:34  FernandoBasso: where " are the quotes.
20:34  FernandoBasso: I mean, 'i"p with the cursor anywhere inside the quotes
20:34  FernandoBasso: vi"p <-- This is the correct.
20:36  Ahtenus: Thats really handy
20:36  FernandoBasso: Yeah.
20:36  Ahtenus: thanks
20:36  FernandoBasso: I suffered a lot before I learned that.
20:36  FernandoBasso: Specially to change colors in .css files.
20:37  jeffszusz: hey fellas
20:38  jeffszusz: how's the day going for those present?
20:38  Ahtenus: But, their not quoted?
20:38  FernandoBasso: jeffszusz: To much, unbearable hot what weather.
20:39  jeffszusz: really? mine's super cold and snowy
20:39  Ahtenus: Yep, really snowy over here too
20:39  FernandoBasso: Ahtenus: No. They are not. But the the vp thing helps, be it with or without quotes. ;P
20:39  jeffszusz: :( i'm both really excited and really sad about my vim
20:41  jeffszusz: i just migrated my plugins and vimrc from my mac to my linux box
20:41  jeffszusz: i'm excited because PIDA + my plugins / vimrc is the most amazing piece of software ever.
20:42  jeffszusz: and i'm sad because at random the gundo plugin doesn't work and my 'set undofile' and 'set undodir' lines in my vimrc are broken.
20:42  jeffszusz: supposedly gundo only works in 7.3 but it works fine on my mac with 7.2
20:42  jeffszusz: so confused.
20:50  Random832: is there a way to make vim recognize file types that it recognizes by filename extension when using sudoedit?
20:51  peth: jeffszusz: how about using 7.3? i don't know about gundo, but you can't have persistent undo with 7.2
20:53  jeffszusz: peth: i attempted installing 7.3 and failed
20:53  peth: what distro?
20:53  jeffszusz: Mint, so Ubuntu
20:54  peth: should compile fine, did for me at least.
20:54  jeffszusz: lol
20:54  peth: need help with the compilation?
20:54  jeffszusz: that'd be great actually, I don't compile code much. I'm a python developer so all my code just works
20:54  peth: nice feature that
20:55  jeffszusz: handicapping at the same time
20:55  jeffszusz: but yes it's nice
20:56  jeffszusz: i'm assuming i should grab the "all files" tarball from the source archives?
20:57  peth: i got the source from version control, you'll need mercurial for that
20:57  jeffszusz: that works too
20:57  peth: don't know about the source packages, but should work fine
20:57  peth: hg is the pkg name
20:58  peth: after you cloned the vim repo as per here: http://vim.wikia.com/wiki/Getting_the_Vim_source_with_Mercurial
20:58  jeffszusz: anywhere in particular i should clone it to?
20:58  peth: get wild :)
20:58  peth: i used ~/dev/build/vim.hg
20:59  jeffszusz: wherever i put it, it's not staying there right?
20:59  peth: i left it there for patches etc
20:59  jeffszusz: ah ok
21:00  peth: so, after cloning, you can follow these few instructions: http://vim.wikia.com/wiki/Building_Vim#Building_GUI_Vim_on_Ubuntu
21:00  peth: you'll probably want to add a few ./configure options though, seeing you use python
21:01  jeffszusz: hrm
21:01  peth: eg.: ./configure --with-features=huge --enable-gui=gnome2 --enable-cscope --enable-pythoninterp=dynamic --enable-python3interp=dynamic
21:02  peth: "hrm"?
21:04  jeffszusz: wondering which options would be enabled already in ubuntu's default vim package
21:04  jeffszusz: i think some of my plugins depend on ruby as well
21:04  FernandoBasso: jeffszusz: Probably all of them.
21:04  peth: try "./configure --help | grep interp" to get a list
21:04  jeffszusz: is there a "just turn it all on" config option? lol
21:05  FernandoBasso: But, ubuntu 10.10 default package is still vim 7.2.
21:05  peth: they wanted to do that, but puma has a trademark on that one
21:05  rson: jeffszusz: i believe there is a "huge" option
21:05  rson: jeffszusz: ignore me, peth already showed that
21:06  jeffszusz: lol
21:35 --- silex is now known as Silex
21:35  Silex: omg, I just discovered the i" or i( or i[ etc textobjects
21:35  rindolf: Silex: :-)
21:35  Silex: why aren't they documented under :h text-objects? it's a shame
21:35  rindolf: Silex: there's also a" a(
21:36  Silex: damnit htey are
21:36 * Silex curses
21:36  Raimondi: Silex: They are in the help :)
21:36  Silex: rindolf: yeah I know 'a' and 'i' :)
21:37  Silex: anyway, awesome!
21:48  bosie: "foo baCr me" ... cursor is at C. how can i delete foo bar?
21:50  peter_w: press backspace 6 times and then delete
21:50  bosie: peter_w: no seriously
21:51  bosie: is there a way i can do like daw backwards twice?
21:51  Raimondi: bosie: 2db
21:51  bosie: Raimondi: i want the word to be deleted though
21:51  peter_w: bosie: your cursor can't be there in normal mode
21:52  bosie: peter_w: why not?
21:52  bosie: peter_w: looks like it ;)
21:52  strull: peter_w: ???
21:52  peter_w: ok, where is it?
21:52  bosie: Raimondi: hence i said 'daw'
21:52  bosie: peter_w: at the C
21:53  Raimondi: bosie: What should the final text be?
21:53  peter_w: are you saying you have the text "foo baCr" and want to delete everything but C?
21:53  bosie: Raimondi: if i have a text like "my foo bar me" the final text should be "my me"
21:54  bosie: peter_w: C is the cursor position
21:54  strull: then peter_w's objection is valid
21:54  bosie: peter_w: the text is "my foo bar me"
21:54  strull: good eye, peter_w
21:55  peter_w: bosie: your cursor is either on a or on r, if it's on r then Raimondi's answer is what you want
21:55  bosie: it is on the a
21:56  bosie: even if it where on the r, Raimondi's answer is wrong...? at least "2db" doesn't delete the r
21:58  strull: yes, you need w2db
21:58  bosie: right
21:58  peter_w: hmm, right, b is exclusive, and using w also makes it work if you're on "a"
21:59  bosie: thanks strull
--- Log closed Sun Jan 09 22:02:02 2011
--- Log opened Sun Jan 09 22:02:25 2011
22:02 --- Users 573 nicks [0 ops, 0 halfops, 0 voices, 573 normal]
22:03 --- Channel #vim was synced in 73 seconds
22:06  yitz_: How would I delete all lines *not* containing a certain pattern?
22:06  pattern: :v/pattern/d
22:06  pattern: err...
22:06  pattern: :%v/pattern/d
22:07  peth: :v/ is ok
22:07  strull: both should work
22:07  yitz_: Cool. Thanks. And sorry for hilighting you
22:07  pattern: i forgive you
22:07  yitz_: :help v  doesn't show any invert thingy?
22:07  pattern: :help :v
22:07  peth: but :help :v does
22:08  strull: in fact, I find it a bit ironic if pattern tries to delete every non-pattern :)
22:08  pattern: there can be only one
22:11  rindolf: Hi yitz_
22:11  yitz_: Hey rindolf
22:11  rindolf: yitz_: how's your weekend so far?
22:14  yitz_: rindolf: Well enough, considering I had two teeth pulled Fri. Yourself?
22:14  rindolf: yitz_: fine.
22:14  rindolf: yitz_: I worked on Catable, the ABC Path solver, and fc-sovle.
22:14  rindolf: fc-solve.
22:15  rindolf: We had two fancy meals during the weekend.
22:16  rindolf: With fried beans on Friday. :-D
22:17  rindolf: yitz_: how's the weather there?
22:17  yitz_: We got about 4 inches snow
22:17  rindolf: Ah.
22:17  yitz_: You're above freezing there?
22:18  rindolf: yitz_: yes.
22:18  rindolf: Though it's been raining.
22:18  rindolf: Well, not today.
22:18  rindolf: But I heard rain in the night.
22:18  yitz_: That's good
22:18  rindolf: And it's kinda cold.
--- Log opened Sun Jan 09 22:34:10 2011
22:34 --- Users 568 nicks [0 ops, 0 halfops, 0 voices, 568 normal]
22:35 --- Channel #vim was synced in 72 seconds
23:14  clarkfischer: How do I end a search. For example, if I type /hi in a document, all 'hi's are highlighted. How do I unhighlight them?
23:14  notjon13: :nohl
23:14  clarkfischer: That's the shortest way of doing it?
23:15  _rane: nmap <silent> <leader>n :silent :nohlsearch<CR>
23:15  _rane: took this from the internets
23:15  _rane: some time ago
23:15  notjon13: You can do a mapping or turn it off altogether.
23:15  strull: vimgor: nohl
23:15  vimgor: :nohl will disable current search highlighting until the next search is performed. A common map to avoid typing :nohl is ':nnoremap <silent> <C-l> :nohl<CR><C-l>'. See also, :help 'incsearch' and :help 'hlsearch'
23:16  clarkfischer: _rane: I believe <leader>n is bound to nerdtree. Also what is <silent>?
23:16  _rane: i have no idea
23:16  _rane: supresses errors, maybe
23:18  notjon13: That disables echoing.
23:18  bairui: clarkfischer, _rane: of course, you can  :help <silent>
23:18  notjon13: I didn't know that, thanks.
23:19  LaoLang_cool: hello, I want to write a script that supports local defined options, don't know which is the best way, any advice?
23:20  bairui: LaoLang_cool: local to what? The window? A Buffer?
23:21  clarkfischer: LaoLang_cool: $.extend
23:21  LaoLang_cool: some options is the dic format, and can cross serveral lines, say: opt={ | \1:"foo", | \2:"bar", | } , | is represent EOL
23:21  clarkfischer: Er, whoops
23:21  LaoLang_cool: bairui: local to a buffer
23:21  notjon13: strull won't that last <C-l> from vimgor make it run forever, though?
23:22  LaoLang_cool: I want my script can get it then do other things
23:22  strull: notjon13: no
23:22  LaoLang_cool: Don't know the best way to achieve it
23:22  bairui: notjon13: map's are non-recursive when the first element is the same as the mapped one. That's poorly explained, but I hope you get it. :)
23:22  LaoLang_cool: clarkfischer: what does you mean?
23:23  LaoLang_cool: *do* ...
23:23  peth: uh, no. maps are recursive. that's why this one's a nNOREmap
23:23  clarkfischer: LaoLang_cool: I thought I was looking at the jQuery channel.... heh.... Sorry.
23:23  strull: in this case, the nNOREmap does supress recursion
23:23  LaoLang_cool: clarkfischer: :)
23:23  bairui: oh, yeah, and the nNO part :) wasn't looking at that :p
23:24  LaoLang_cool: opt={ | \1:"foo", | \2:"bar", | \}, I want that when a type of file is loading, my script can get these lines
23:25  bairui: LaoLang_cool: so, you have some options that the user would like to set as defaults for each buffer they enter? Would these defaults be consistent across all buffers, or would they change based on the type of file (or other) in the buffer?
23:25  LaoLang_cool: bairui: it's like a local-modeline, but it's for the usage of my script
23:26  LaoLang_cool: bairui: local to the buffer, not all buffers, it's like local modeline in vim
23:26  bairui: well, implementing it as a local modeline is certainly an option if you want your script to parse the file on load
23:27  bairui: or you could put that logic in an autocmd
23:27  LaoLang_cool: bairui: yes, what's the best way to do it?
23:27  LaoLang_cool: no autocmd..
23:27  bairui: well, one way or another, I think you'll have autocmds involved here...
23:28  bairui: autocmd BufRead *.foo call MyLocalOptions({1:"foo", 2:"bar"})
23:28  LaoLang_cool: bairui: I think I didn't describe my situation clearly, let me think another way to express, plz wait a second..
23:28  bairui: sure
23:32  LaoLang_cool: bairui: I'm writing a script that can outline the file heading struction[http://www.vim.org/scripts/script.php?script_id=2993], I let user can define the heading pattern for every files, so local modeline senses here, but vim local modeline can allow limited built-in option, no usr options at all, so I'm finding a way to let user define the option in file then let the script get and use it.
23:32  LaoLang_cool: *structure*...
23:32  LaoLang_cool: don't know if more clearly than before...
23:33  denkr: I guess you could make up some format and then parse it after getline()ing stuff?
23:34  bairui: well, there are plugins that read the file to determine what file type it is (like the ftplugin detector for asciidoc). Have a look at these for an example or parsing your file for your local modeline.
23:34  LaoLang_cool: denkr: yes, it's a way, don't know if there is a better way?
23:34  LaoLang_cool: bairui: I will take a look at them, thanks for advice, and denkr !
23:34  bairui: well, LaoLang_cool, that depends on how local this data is. If it changes for each and every file, perhaps the local modeline is the go. If it's consistent across file types (or another identifier) then there are other approaches.
23:35  bairui: you're welcome, LaoLang_cool :)
23:35  LaoLang_cool: bairui: yes, it's for each and every file, so that's why I can't use autocmd
23:35  bairui: righto
23:35  LaoLang_cool: it's like local-modeline
23:36  bairui: get coding, son! I'd like to see your implementation. :)
23:37  LaoLang_cool: bairui: any advice for this type of script? search 'asciidoc' returns nothing...
23:38  denkr: i have one snippet from a project of mine to get the line number of the modeline
23:38  bairui: something along the lines of:   while n < 50  |  let line = getline(n)   |   if line =~ /yadda/    <--- get the idea?
23:38  denkr: then it's simply calling getline() and parsing your stuff
23:39  denkr: http://paste.pocoo.org/show/317915/
23:39  bairui: there you go. Love sharing. :)
23:39  denkr: this way you won't have to iterate over all lines
23:39  bairui: sure - the   while()   stuff there allows the modeline to be anywhere in the first 50 lines. Salt to taste.
23:40  LaoLang_cool: denkr, bairui: the real problem is I don't know how to get options that can cross the lines, like opt={ | \1:"foo", | \2:"bar", | \}
23:41  LaoLang_cool: It can go one line or serveral lines, as vim does
23:41  bairui: LaoLang_cool: don't write it in Vim. Make it a simple dictionary and parse it.
23:42  bairui: accepting Vim code and arbitrarily executing it is dangerous
23:43 * bairui wonders if there are dictionary parsers out there in VimL land...
23:43  LaoLang_cool: bairui: you say that I can let guys define the option like: opt1=[1,"foo"], opt2=[2,"bar"] instead of opt={ | \1:"foo", | \2:"bar", | } ?
23:44  denkr: or whatever format fits
23:44  denkr: it's just a matter of parsing then, so don't make it too complicated
23:44  LaoLang_cool: ok, got it, but I still like in vim way...
23:44  bairui: let's say the comment leader for your file is  #  ok? Then you can do:   # 1:foo, 2:bar      or   # 1:foo     <newline>    # 2:bar
23:44  bairui: i'm just saying - keep it simple
23:45  bairui: and, don't arbitrarily accept a line of vim to execute
23:45  denkr: and avoid calling eval() as bairui says
23:45  LaoLang_cool: bairui: ok, before finding  solid way, will keep it simple
23:45  Raimondi: eval() == evil()
23:45  LaoLang_cool: :)
23:46  bairui: hehe... g'day, Raimondi :)
23:46  Raimondi: Good morning, bairui :)
23:46  homekevin: No, eval() == E119
23:46  LaoLang_cool: but I don't try to eval the options, I just try to collect the options
23:47  LaoLang_cool: %%script | opt={ | \1:"foo", | \2:"bar", | } | %%end
23:47  LaoLang_cool: then I get these line, and assign opt into s:opt
23:47  LaoLang_cool: then use it
23:47  LaoLang_cool: no eval at all...
23:49  bairui: LaoLang_cool: Two things. 1) How do you assign it? 2) would b:opt be better?
23:49  LaoLang_cool: bairui: yes, b:opt, my mistake
23:49  bairui: cool
23:49  LaoLang_cool: bairui: get opt; let b:opt = opt
23:50 --- Silex is now known as silex
23:50  shurane: How come scrolling up and down text with j/k is choppy?
23:50  LaoLang_cool: getline(opt lines); parse it; get opt; let b:opt=opt
23:51  bairui: it must be because I don't have nearly enough coffee in me yet, but won't that assign the string containing "{1:\"foo\"}" instead of the dict representation?
23:51  bairui: ok - in a loop, i see
23:51  bairui: as long as you have a    parse it   step where you're sanitising the input, all's cool.
23:51  LaoLang_cool: bairui: yes, so I have to parse and determine if I should remove the '\'s and blanks...
23:53  bairui: dagnammit... it's time for work again. :( Last day today, though! Yay! :D (LOVE holidays :D). Later, lads.
23:53  LaoLang_cool: that sounds complicated than I want, so don't know if there is already way to do it(parsing script-local-user-options) then I want to borrow it for my use :)
23:53  LaoLang_cool: bairui: good day!
23:54  Raimondi: bairui: Enjoy your last day! :)
23:54  LaoLang_cool: your last day?...
23:54  homekevin: man, 'ttimeoutlen' seems like it could save me some frustration.
23:55  Raimondi: LaoLang_cool: Last day at work :)
23:55  LaoLang_cool: Raimondi: ;p
23:58  homekevin: Does anyone know why gvim seems to respond to ESC instantly while terminal vim has to wait for 'timeout'?
23:58  homekevin: E.g., when you are in the command line and hit Esc
--- Log closed Mon Jan 10 00:00:50 2011
