--- Log opened Fri Oct 29 00:00:50 2010
--- Log closed Fri Oct 29 00:18:35 2010
--- Log opened Fri Oct 29 00:18:59 2010
00:18 --- Users 550 nicks [0 ops, 0 halfops, 0 voices, 550 normal]
00:20 --- Channel #vim was synced in 90 seconds
00:23  rson: ericindc: are you looking for argdo?
00:24  ericindc: rson: I just found that.
00:24  ericindc: so :args */* should get me all the files, right?
00:24  ericindc: and then from there I do the :argdo search/replace?
00:25  rson: ericindc: i've never tried it, but you might need a ** in there somewhere for recursion
00:26  rson: :args **/*
00:30  ericindc: rson: yeah, that looks right.
00:31  ericindc: I'm getting modifiable errors.
00:31  ericindc: Is that something I can set globally?
00:32  ericindc: Really trying to avoid going back to Textmate, but vim is really frustrating at first! :)
00:33  frogonwheels: ericindc: There are some plugins for doing that
00:33  frogonwheels: ericindc: http://vim.sourceforge.net/scripts/script.php?script_id=1776
00:36  ericindc: frogonwheels: ok, thanks
00:37  ericindc: frogonwheels: How do I find documentation on how to use it when it's just *.vim file?
00:37  ericindc: look at the code? :)
00:43  pigdude: ericindc: :helptags ~/.vim/doc typically
00:43  pigdude: ericindc: will create the :help tags
00:43  pigdude: ericindc: from one washingtonian to another :^)
00:44  frogonwheels: ericindc: look at the code - there's some help in there anyway
00:45  frogonwheels: pigdude: unfortunately the author wasn't considerate enough to include help ;)
00:52  ericindc: frogonwheels: yup, see it after looking at the code.  thanks.
00:52  ericindc: pigdude: former washingtonian turned new yorker.  lesson learned about including location in username. :)
00:53  chrismsnz: hey guys, I added a plugin to my vim dir and I was wondering if there was a way to get vim to load it without restarting it
00:54  strull: chrismsnz: you can try :ru plugin/yourscript.vim
00:55  chrismsnz: bingo, thank you sir
00:56 * chrismsnz adds to handy command list
00:56  ericindc: frogonwheels: Have you used the gsub before?  Still figuring it out...
01:00  frogonwheels: ericindc: in case you hadn't worked it out - I wrote it
01:02  frogonwheels: ericindc: oh. no doc. sorry.    Gsub  /re/p/
01:02 --- MikhX_ is now known as MikhX
01:03  frogonwheels: ericindc: ahh.. di you try typing  :Gsub
01:03  frogonwheels: ?
01:05  ericindc: frogonwheels: oops, didn't realize you wrote it.  and yes, i was doing :Gsub
01:05  ericindc: frogonwheels: do i still need to do % or g if i want the swap on the entire file?
01:06  frogonwheels: ericindc: not %.. but  g  for the whole line
01:07  ericindc: frogonwheels: so wait, am i suppose to not do :Gsub?  vim starts doing crazy things w/o the :
01:07  frogonwheels: you need the :
01:08  frogonwheels: :Gsub  /regexp/replace/g
01:08  frogonwheels: ericindc: I think somebody wrote a more comprehensive plugin - this was a quick hack 'cause somebody put the challenge out there.
01:10  ericindc: know what it's called by chance?
01:10  frogonwheels: nah.. still this one will do the job
01:11  frogonwheels: ericindc:   you having problems??    Gsub /^hi/hello/g  *.txt
01:11  frogonwheels: something like that (with  :  of course)
01:21 --- k23z__ is now known as spetrea-home
01:22  ericindc: frogonwheels: I'm toying around with it now
01:28  ericindc: frogonwheels: must be doing something wrong; doesn't appear to get getting everything.  can i do :Gsub /x/y/g * to get every file?
01:35  ericindc: frogonwheels: Error detected while processing function <SNR>20_CallGlobReplace..GlobSearchReplace: line   12: Vim(cnext):E37: No write since last change (add ! to override)
01:35  sjl: rson: ping
01:36  rson: sjl: pong
01:36  sjl: rson: Still want me to hold off on that pull request?>
01:36 --- MOAR-f00li5h is now known as f00li5h
01:36  rson: sjl: no, i added a comment saying the change worked.. maybe it didnt -.-
01:36  sjl: rson: Ah, I haven't checked
01:37  strull: ericindc: just a guess. try :set hidden
01:37  rson: sjl: you should only see one commit in the pull req
01:37  sjl: rson: Yep, looks good
01:37  sjl: rson: I'll pull it after I finish squishing this last 1.0-blocking bug
01:38  sjl: thanks!
01:38  rson: sjl: np, no offence if you don't want it, it's a lot of code for a simple feature :)
01:38  sjl: No, I can see how it would be useful -- that tiny diff window has already been a pain for me
01:39  rson: lol
01:39  rson: first thing i noticed (after the awesome graph) tbh
01:39  ericindc: strull: seems to have helped; will have to look up what exactly that does.  thanks.
01:39  sjl: Heh, the graphing code is all from Mercurial
01:40  rson: still awesome.
01:40  sjl: Yeah, I'm happy with how it's shaping up
01:43 --- fenr1r is now known as pi-rho
01:45  rson: sjl: curious, what blocker are you still working on?
01:46  sjl: rson: Open undo graph for a buffer, then go back and :bdelete that buffer, then go back to the graph and try to revert -- errors appear
01:46  frogonwheels: ericindc: :set autowrite  would also help
01:47  rson: sjl: i'll check it out in the morning, cooking dinner atm then heading out.
01:47  sjl: hopefully it should be fixed by then :)
01:53  rson: we shall see :)
01:54  strull: looks like bram is fed up with pizza :)
02:14  sjl: I think I finally figured out a bug-free way to undo back to state 0 -- use :earlier N where N == &undolevels.  Anyone know of a better way, or problems with this one?
02:15  sjl: (I'm ignoring masochistic users that change undolevels in mid-session for now...)
02:15  jamessan: sounds reasonable
02:16  [MAD]: Hey man
02:16  spiiph: Can't prevent people from shooting themselves in the foot. :)
02:27  strull: I now updated my vim-sources via hg to 7.3. But no patches seem to be applied. How do I get them? (I'm no hg expert)
02:28  jamessan: did you just do an "hg pull"?
02:28  strull: yes
02:28  strull: pulling from https://vim.googlecode.com/hg/
02:28  strull: searching for changes
02:28  strull: no changes found
02:28  sjl: strull: Sounds like your pull didn't bring in any new changesets (aka patches)
02:28  jamessan: pull just retrieves the remote changes into your local store.
02:28  jamessan: it doesn't update your working directory
02:29  jamessan: "hg update" will update the working directory
02:29  jamessan: (assuming you're still on the main branch)
02:29  strull: 0 files updated, 0 files merged, 0 files removed, 0 files unresolved
02:29  sjl: strull: It said "no changes found".  Did you expect there to be new changes?
02:30  strull: yes, about 35 patches
02:30  strull: at least according to /topic
02:30  strull: my compiled vim doesn't mention them
02:31  strull: I do :ver and it doesn't mention any applied patches
02:32  sjl: I don't know how Vim's version numbering works, but the reason you got no changes when you pulled is that there weren't any new changesets in the remote repository that you didn't already have
02:32 * sjl contributes to Mercurial, but not Vim
02:33  strull: yes, I get this. But where from do I get the 35 patches?
02:33  jamessan: strull: what's the summary from "hg parent"?
02:33  strull: summary:     Last changes for the 7.3 release!
02:34  jamessan: and the branch?
02:34  sjl: better yet: hg summary
02:34  strull: branch:      vim73
02:34  strull: user:        Bram Moolenaar <bram@vim.org>
02:34  strull: date:        Sun Aug 15 15:24:20 2010 +0200
02:34  strull: summary:     Last changes for the 7.3 release!
02:34  jamessan: strull: hg update default
02:34  sjl: Ahh
02:35  jamessan: strull: the vim73 branch stopped being used when 7.3 was released. development continues on the main branch (which is named default for hg)
02:36  strull: thanx jamessan, this seems to do what I want.
02:36  strull: summary:     updated for version 7.3.047
02:36  jamessan: strull: that will switch you to the default branch, and when more patches are released you can do "hg pull -u" to pull the remote changes and update the branch (assuming you aren't making local commits).  if you are, then you'll want to "hg pull" and then "hg merge"
02:37  strull: again ... thanx. Note taken
02:44 --- ChanServ sets modes [#vim +o jamessan]
02:44 --- jamessan has changed the topic to: Can't Talk? Get Registered on FreeNode (HOWTO: http://tinyurl.com/27a4cnw) | Vim 7.3.047 http://vim.sf.net | Don't ask to ask! | Before you ask :help, and :helpgrep, and google | SITE: http://vi-improved.org | WIKI: http://vim.wikia.com | FACEBOOK: http://tinyurl.com/vim-facebook | PASTE: http://vim.pastey.net | DONATE: http://www.vim.org/sponsor
02:44 --- jamessan sets modes [#vim -o jamessan]
03:02  strull: oh, I see the topic is updated:) Got everything running. Thnx again jamessan
03:03  strull: and also sjl
03:27  thepro4ever: when I have syntax highlighting on in vim how does it know what keywords to turn to the gold color when i'm typing a cmake file, i'm amazed
03:27  Raimondi: vimagic
03:32  Patric3: Is there an equivalent to "r" (from command mode) that will insert (rather than replace) one character (and also return to command mode) ?
03:33  strull: Patric3: no, but you can make a mapping for this. But most likely you simply want to use . (dot)
03:34  Patric3: Thx
03:35  Patric3: Also, is there the opposite of "join" (i.e. a line break) that you can insert whilst in command mode at the cursor ?
03:35  strull: i<cr><esc>     (dot also repeats this)
03:36  Patric3: lol - yes, that's how I'm doing it currently
03:37  Patric3: strull: actually o<esc> is slightly quicker
03:38  strull: but totally different
03:38  Patric3: oops - ignore that
03:38  Patric3: yeah - it's not at the cursor
03:38  strull: yes, in no but one case
03:38  Patric3: :-)
03:38  Patric3: The trival case
03:49  wapcaplet: how do I delete a buffer without closing the tab or split that it's in? :bd always closes my tabs/splits, and I want it to just show the next buffer instead of closing
03:52  strull: wapcaplet: just type :n
03:54  wapcaplet: strull: hmm, that doesn't seem to work... it just says "There is only one file to edit", even though I have several buffers open. I have hidden buffers enabled, maybe that's why?
03:55  strull: no, :set hidden is a good setting.
03:55  strull: What do you want to do?
03:56  wapcaplet: let's say I have 4 buffers for different files I'm working on, in 2 splits. I'm done with one of the files, and don't want it in my buffer list anymore, so I do :bd - but I want to keep the split open, to work on the next file
03:57  strull: try :e nextfile|bd #
03:58  wapcaplet: well, nextfile is already in my buffers.. I can get to it with :bn
03:58  strull: then :bn|bd#
04:00  wapcaplet: hey that's more like it. little cumbersome to type, but that's what key mappings are for ;-) thanks!
04:01  strull: I wonder why you care to bd the buffers
04:03  wapcaplet: a side-effect of the way I usually edit... buffers instead of tabs, :bn/:bp to cycle through them, so I :bd the ones that I'm tired of looking at
04:04  strull: mmm ... fair enough
04:04  wapcaplet: may be more efficient ways, but it works for me
--- Log closed Fri Oct 29 04:18:55 2010
--- Log opened Fri Oct 29 04:19:17 2010
04:19 --- Users 524 nicks [0 ops, 0 halfops, 0 voices, 524 normal]
04:19  strull: mmm ... one thing seems to have changed with 7.3 - the connection between $VIM and $VIMRUNTIME is lost
04:20 --- Channel #vim was synced in 86 seconds
04:20  strull: that is. If I have "export VIM=whatever" in my shell, then $VIMRUNTIME is no longer built up correctly
04:21  frogonwheels: strull: presumably it's not being overridden by something else..
04:22  strull: what do you mean?
04:22  frogonwheels: strull: I mean this is with vim -u NONE --noscripts  or whatever it is..
04:23  frogonwheels: ?
04:23  frogonwheels: erm --noplugin
04:23  godlygeek: -u NONE implies --noplugin
04:23  frogonwheels: thanks
04:24  strull: no, I mean this: I used to test my new compilations before installing with VIM=. vim in the build-directory
04:24  strull: And this worked up to 7.3e
04:24  strull: Now I need VIMRUNTIME=runtime VIM=. vim
04:25  strull: oops ... Now I need VIMRUNTIME=runtime VIM=. src/vim
04:25  strull: forgot the src/ in the first example also (but only here in irc)
04:25  godlygeek: strull: does the directory $VIM/vim73 exist?
04:26  godlygeek: er, wait... nevermind - it really doesn't matter.
04:26  strull: godlygeek: it exists only after I have done make install
04:27  godlygeek: strull: hm.  works fine for me, with 7.3.35
04:27  strull: 7.3.47 here
04:28  strull: godlygeek: the error is not easy to see, once you have installed vim
04:28  godlygeek: i haven't.
04:28  strull: you have to :echo $VIMRUNTIME
04:28  godlygeek: vim-debian>pwd; VIM=`pwd` ./src/vim -u NONE -N --cmd 'echo $VIMRUNTIME' -c q
04:28  godlygeek: /home/matt/vim-debian
04:28  godlygeek: /home/matt/vim-debian/runtime
04:28  strull: aah, ok
04:29  godlygeek: that example does something different for you?
04:30  strull: godlygeek: yes,
04:30  strull: I get:
04:31  strull: /big/vim7
04:31  strull: runtime
04:40  godlygeek: and ./runtime does exist?
04:40  strull: yes
04:40  godlygeek: hm.  does hg have a bisect command like git does?
04:41  strull: don't know
04:42  jamessan: godlygeek: yes
04:43  jamessan: strull: do you have VIMRUNTIME exported in your environment or part of the command to start Vim?
04:44  strull: oops, yes probably. I'm starting vim from within vim. Foolish me
04:45  jamessan: :)
04:46  strull: ooh my. I feel so stupid right now. Everything is ok from a shell
04:57  ericindc: If I want to create a new file and save it into a directory that does not yet exist, is there a way to tell vim to first create the directory?
05:02  MarcWeber: Does anybody feel like testing an async implementation for Vim?
05:02  MarcWeber: It allows running interpreters or gdb inside Vim easily.
05:03  MarcWeber: http://github.com/MarcWeber/vim-addon-async
05:09  strull: MarcWeber: is it comparable to ConqueTerm ?
05:14  MarcWeber: strull: Does ConqTerm add lines in realtime? I can't see it calling back into Vim using the client-server feature which would be the only way to implement it.
05:15  strull: yes, it nearly works like a terminal
05:15  MarcWeber: so does Vim hang while running a command in ConqueTerm ?
05:16  strull: do you mean : can I work in another buffer while the ConqueTerm buffer is "running" ?
05:17  MarcWeber: strull: You can. But the display will only be updated while typing or such.
05:20  MarcWeber: strull: Give it a try :) All you need is gcc and X.
05:21  strull: MarcWeber: ok, how do I retrieve the files needed?
05:24  MarcWeber: strull: I recommend using git. You can also use the download link. Going to add the source to VAM now
05:25  strull: never used git. Just installed it. What now?
05:25  MarcWeber: Have a look at the README filee.
05:26  strull: which, the one in your link?
05:27  MarcWeber: y
05:27  strull: which part in there :) I don't see a git command
05:28  MarcWeber: You already have the files.
05:28  MarcWeber: compile the C/*.c file
05:29  strull: That is the point. I don't have them. I see the README in my browser
05:31  MarcWeber: strull: sorry. I added the wrong file. I've uploaded the .c file now
05:34  strull: so the idea is to copy/paste the file?
05:36  MarcWeber: strull: No. The idea is to install git and do git clone GIT_URL.
05:36  MarcWeber: If you're too lazy you can click on the dowload link to fetch all files.
05:36  strull: I've done the second. But in the archives are strange paths :)
05:37  strull: ok, did the git clone now
05:37  strull: going to compile
05:37  strull: 3 warnings (I ignore them)
05:40  strull: sorry MarcWeber: you should really put somewhere the needed steps to get it running. I don't want to guess
05:41  MarcWeber: http://github.com/MarcWeber/vim-addon-async -> README step 2)
05:42  strull: MarcWeber: this is not precise enough.
05:43  strull: How to compile? You want an a.out?
05:43  strull: where to put the result?
05:43  MarcWeber: same dir. same name (without .c)
05:43  strull: same dir? in my temp-folder?
05:43  strull: MarcWeber: please take the time to paste the 4 or 5 lines needed
05:44  strull: or better, put them in your README
05:44  strull: noone will ever get it running
05:44  MarcWeber:       cd C; gcc -o vim-addon-async-helper vim-addon-async-helper.c
05:46  glyph: Is there a way to get ^N/^P (or something like them) to work in the context of a command line?  Specifically, a search and replace?  I find myself frequently wanting to replace a long identifier in my current buffer with some other long word.
05:46  MarcWeber: glyph: c-f ?
05:47  Jerub: glyph: i'm trying to remember this
05:47  glyph: MarcWeber: Hmm... not ideal, but good enough!
05:47  glyph: MarcWeber: btw, very nice vim extensions, I've learned a lot from perusing your code
05:48  MarcWeber: glyph: Sometimes I feel like a noob myself :)
05:48  glyph: (Please browbeat someone into making your async background task stuff a standard vim feature instead of a half-supported hack that only works if you compile in certain stuff)
05:49  MarcWeber: glyph: Read the documentation point 1) native
05:49  Jerub: i was sure there was a thing
05:49  Jerub: but i can't find it now
05:50  strull: Jerub: what are you talking about?
05:50  jamessan: Jerub: :help c_ctrl-r  ?
05:50  Jerub: strull: ins-completion for the commandline.
05:51  Jerub: jamessan: nah, that's for pulling registers
05:51  strull: Jerub: you should really read the help :)
05:52  glyph: MarcWeber: http://github.com/MarcWeber/vim-addon-background-cmd/tree/master/doc/ ?
05:52  jamessan: Jerub: or doing word completion
05:52  jamessan: well, word under cursor
05:53  MarcWeber: glyph: Yes. But its blocking. You only get results when the task has finished.
05:53  jamessan: otherwise you'd have to use C-f to bring up the cmdline window and use it like a normal buffer
05:53  MarcWeber: glyph: If a task wants some user input you're in the dark..
05:53  Jerub: jamessan: um, tell me what sequence of keys to press.
05:53  Jerub: i can't find docs for this or a behaviour that makes sense from whats been said in channel.
05:53  MarcWeber: Jerub: I told you c-f (command line) or q:
05:53  MarcWeber: It also works for / ?
05:53  glyph: MarcWeber: oh.  yeah, you should close stdin and not give the subprocess a controlling terminal.
05:54  jamessan: Jerub: <C-r><C-w> completes word under cursor (hence why I pointed at :help c_ctrl-r)
05:54  Jerub: oooh, right. control-f gives you an environment you can use normal mode commands in
05:54  Jerub: but control-r control-w doesn't do anything sane for me
05:55  Jerub: it puts a | character in
05:55  strull: Jerub: it all depends on where your cursor is
05:55  Jerub: oooh, right, okay
06:03  MarcWeber: strull: Have you had some success now?
06:04  strull: MarcWeber: I gave up. I can't spend too much time to get a plugin installed.
06:07  strull: If you put the needed steps in your README, I'll probably try again
06:10  MarcWeber: strull: Still trying to fix some small issues..
06:43  andy753421: anyone know of a way to match a number, followed by a space, followed by the next number? e.g. `123 124' ?
06:46  strull: try /\d\+ \d
06:48  andy753421: strull: i'm trying to only match the next number, `2 3' but not `2 4', i'm kind of thinking this isn't possible, but maybe there's some vim-foo that i don't know about
06:52  strull: not sure what you mean
06:54  andy753421: hm, if (atoi(argv[1]) == atoi(argv[2])+1) { /* match */ }
06:54  andy753421: wait, other way around.. atoi(argv[1])+1 == atoi(argv[2])
07:33  Patric3: My arrow keys work in command mode, but in insert mode, Left Arrow generates "A", ...etc.  What is the fix ?
07:38  strull: Patric3: what gives :imap <left>  ?
07:40  Patric3: strull: Is "<left>" in your command to be entered as a literal string or a keypress of the left arrow ?
07:40  strull: a a 6-character string
07:40  Patric3: No mapping found
07:40  Patric3: Issues with the terminal maybe ?
07:41  strull: did you check? try :set term
07:41  Raimondi: What about :imap <esc>
07:42  Patric3: Hmmm... term=xterm
07:42  Patric3: :imap <esc> gives No mapping found
07:42  Patric3: It affects both SSH and local (console) sessions
--- Log closed Fri Oct 29 08:17:13 2010
--- Log opened Fri Oct 29 08:17:34 2010
08:17 --- Users 529 nicks [0 ops, 0 halfops, 0 voices, 529 normal]
08:18 --- Channel #vim was synced in 90 seconds
08:20  heeen: I want a command to accept parameters like this: -r somerevision
08:21  heeen: how would I do that
08:21  jorrit: Hi
08:21  DHulme: heeen: :help :command explains how to make it work using the -nargs option
08:21  heeen: the arguments should be optional
08:22  DHulme: that's up to you to decide when the command processes the arguments
08:25  heeen: command! -nargs=* DiffReview call s:DiffReview(<f-args>)
08:25  heeen: whats wrong with this
08:25  heeen: it doesn#
08:26  heeen: ok scratch that
08:47  heeen: I'd like to loop for number of arguments to append them to a string
08:48  heeen: for(let i=0; i<a:0; i++) string .= ' '.a:i
08:48  heeen: something like this
08:56  Rakko: and what happens?
08:59  heeen: that doesn't look like vim code :P
09:25  Raimondi: heeen: If you define your function as  function s:DiffReview(...)   You can to  for arg in a:000 | echo arg | endfor
09:33  heeen: how do I get debug output from a script
09:33  heeen: If I do echo its too fast to read
09:33  Raimondi: Use echom then :messages  to read the output
09:43  Rakko: oh, cool tip
09:54  Altreus: When I use auto complete, by means of omnifunc, it always pauses while it searches for matches, and sometimes opens up a scratch window that I have to manually get rid of. Can I improve its performance somehow?
09:55 --- EselTheo_ is now known as EselTheo
09:58 --- daniel_ is now known as daniel
10:03  Rakko: I'd like to know too, Altreus
10:03  Altreus: ._.
10:04  Altreus: Maybe one day
10:04  Rakko: Mine searches all my Rubygems
10:07  Altreus: I suspect the majority of the problem is that it doesn't parse the file for symbols until you ask it to
10:07  Altreus: "problem"
10:11  Altreus: Can I set the default buffer for d to "_, while keeping the y, x and p buffers as they are?
10:12  Altreus: I think I mean register
10:13  strull_: Altreus: sure. :nnoremap d "_d   and yes, it are registers
10:13  Altreus: that simple huh
10:14  Altreus: strull_: now dd doesn't work :<
10:14 --- silex is now known as Silex
10:17  strull_: really? what did you do?
10:17  Rakko: "_d is a weird smiley
10:17  Altreus: what you said.  :nnoremap d "_d
10:18  Altreus: Let me close it in case it refused
10:18  Hates_: ☉⏝⚆
10:18  strull_: and now dd does not work?
10:19  Altreus: ah
10:19  Altreus: I restarted vim and it worked
10:19  heeen: how do you get the path of the current file in a script
10:19  heeen: without the filename if possible
10:20  Rakko: heeen: expand('%:p:h')
10:21  heeen: can I make messages stay open
10:21  heeen: from the script
10:21  heeen: indicating an error
10:21  Rakko: hmm, dunno
10:22  strull_: heeen: you can use input() with your message in the prompt
10:23  Rakko: whoa, ctrl-h deletes messages in os x mail
10:25  heeen: what do you use to find a string in another string
10:28  Rakko: you can use match() with a regex
10:28  flip214: Is there a way to remove a single "syntax match ..." definition?
10:30  bkw: What can causing vim lagging a lot when pressing and holding up/down buttons? I don't have any significant load on the workstation, and this is nothing I have experienced before.
10:30  flip214: bkw: syntax coloring?
10:30  flip214: try :syntax off
10:31  flip214: or maybe you've got "syntax sync fromstart", and it's a big file?
10:31  Rakko: bkw: what sort of system is it running on?
10:33  Rakko: anyone happen to know how to make alt/meta work in athena gvim?
10:37  pk4r: Hello, I have ctags installed and 'tags' variable set up properly. How do I jump to a function definition which is in other file ? I believe ctags created multiple entries for me and when I do "CTRL+]" it jumps to a declaration in the same file (not definition)..
10:41  pk4r: Ah, found it "g]"
10:42  Rakko: oh, cool
10:44  bkw: flip214: yes, but I have not seen this before, I have syntax coloring, using vim for c and php files.
10:44  bkw: Rakko: linux debian x86_64
10:48  bkw: flip214: maybe 3 files are open, 1-2k each using tags.
10:49  Rakko: night
10:49  flip214: Is the vim local, or via ssh?
10:50  flip214: Are ctrl-d and/or j/k fast?
10:51  flip214: any load average, ie. whole machine loaded?
10:55  Silex: MarcWeber: ping
10:56  Silex: I found a bug (and a fix) on windows, and I'd like your direction about the best fix
10:57  bkw: flip214: local, ^d is fast, but holding j/k are sluggig hanging sometimes. the overall load on the host is low, but when holding up/down I can see the cpu consumption for the vim process goes sky high
10:58  flip214: which terminal? linux console, konsole, xterm, gnome terminal, ...?
11:00  bkw: flip214: xterm
11:01  flip214: hmmm
11:01  bkw: maybe a reboot would resolve this, havent tried yet :-)
11:02  bkw: I can see ~200M swap is used on the host
11:12  flip214: by which program?
11:14  bkw: I don't know, but I can see the top memory demanding processes in top are firefox, qemu, and vlc
--- Log closed Fri Oct 29 13:09:38 2010
--- Log opened Fri Oct 29 14:02:00 2010
14:02 --- Users 555 nicks [0 ops, 0 halfops, 0 voices, 555 normal]
14:03 --- Channel #vim was synced in 88 seconds
14:11  iaj: lo there
14:12  iaj: can someone guide me into a good direction on howto enable a good folding for java coding- i tried foldmethod=syntax but i can't simply close the functions
14:13  bosie: http://vim.pastey.net/142219 ... when i select line 4 and 5 with V and type ":". after that i write s/4/3/g
14:14  bosie: unfortunately it doesnt replace F4
14:14  bosie: just the first occurrence per line
14:14  mgedmin: bosie, you must have set the option that reverses the meaning of s///g
14:15  bosie: mgedmin: excuse me?
14:15  mgedmin: :h gdefault
14:15  iaj: nother thing is the following http://paste.pocoo.org/show/283068   when I go to the very bottom of that line and press o its indented to space 0.. why is that :(?!
14:21  bosie: mgedmin: as usual you are right
14:23  iaj: a } in a comment is matched by the indenation which I just found out
14:23  iaj: gna
14:24  iaj: is anyone using eclim on java here?
14:57  Veejay: Hi guys
14:57  Veejay: Does vim have support for negative regex lookaheads?
14:58  Veejay: I want to look for the string "rescue" NOT followed by the string " Exception => e"
14:58  Veejay: Negative lookahead would normally be in that form: rescue(!? Exception => e
14:58  Veejay: +)
14:58  Veejay: But it doesn't seem to be working
14:59  Veejay: Any help appreciated
14:59  graywh: Veejay, normally?
14:59  Veejay: Well sorry
14:59  graywh: there's more than one regex flavor
14:59  graywh: and vim is not perl
14:59  Veejay: According to the sites I checked for a certain kind of regex
14:59  Veejay: You're right
14:59  graywh: everything you need is in pattern.txt
15:00  graywh: it even gives perl equivalents for several things
15:00  graywh: (that's a blatant hint)
15:01  Veejay: foo\(bar\)\@!   any "foo" not followed by "bar"
15:02  Veejay: I'll try that
15:02  Veejay: Thanks
15:02  yac: hi, i am trying to vmap some keys to shell command which would use the contents of selection. How do i reference the selection?
15:02  graywh: using :
15:02  graywh: you don't need to
15:02  graywh: it's automatic
15:02  graywh: :h v_:
15:02  mgedmin: how do you want to use it? pipe as stdin to a shell command -- use :w !
15:02  the_isz: yac: see  :he w_c  it'll help you i guess
15:03  mgedmin: filter through a shell command and replace the old contents?  -- use :!
15:03  the_isz: damn, mgedmin was faster...
15:03  mgedmin: pass it as an argument?  -- use something like "zy<esc>:!command <c-r>z<cr>
15:05  yac: so far, i have vmap gx :silent !echo ""\|xclip -selection clipboard
15:06  graywh: why not install a vim that can connect directly to the x11 selections?
15:08  yac: graywh: what do you mean?
15:08  genjix: is there a way to scroll the buffer and not move my cursor? :p
15:08  graywh: genjix, your cursor has to remain visible
15:08  genjix: :o
15:08  genjix: ok
15:08  yac: i can do "+gx
15:08  yac: which kinda works. just as long as the editor is open
15:09  mgedmin: genjix, but as long as the cursor is visible, you can use ^E/^Y or 1^U/^D, depending on what you mean by "not move my cursor"
15:09  mgedmin: the cursor can stay on the same _file_ line, or it can stay on the same _screen_ line
15:09  yac: genjix: you can create a mark, then move around and then use the mark to get back on the place where you started.
15:09  genjix: i meant what graywh said
15:09  yac: genjix: thats what i do.
15:10  genjix: yeah, it's what i do too
15:10  genjix: but sometimes you just want to scroll down, look at something, then move back up :)
15:10  mgedmin: is there a useful mnemonic for distinguishing "+ and +*?
15:10  mgedmin: s/+*/"*/
15:11  graywh: i just remember that the menus use "+ (clipboard)
15:11  yac: graywh: but its lost when you close the vim :/
15:12  yac: my use case is, wget something; vim something; xclip -o | do_something
15:13  graywh: the clipboard selection isn't cleared when you quit vim
15:13  mgedmin: yac, you either need a clipboard manager, or figure out the solution with xclip
15:13  yac: i have read it's a pseudoclipboard, though i dont really know what does it mean
15:13  mgedmin: I assume graywh has a clipboard manager
15:14  yac: mgedmin: yeah, i wanted to use the xclip
15:14  graywh: mgedmin, huh?
15:14  mgedmin: in X the clipboard works like this: app wanting to paste asks the app currently owning the clipboard what its contents are
15:14  mgedmin: if the app holding the clipboard exits, clipboard's contents disappear
15:14  mgedmin: this is why most desktop environments (e.g. gnome) ship clipboard managers
15:15  graywh: yes, using gnome
15:15  mgedmin: these notice when an app claims clipboard ownership, ask for the contents, and take over
15:15  yac: oh
15:15  heeen: why am I getting "not an editor command" for rename(l:foo, l:foo."TEMP")
15:15  mgedmin: so that when the original app exists, the clipboard manager can still answer paste requests from other apps
15:15  yac: mgedmin: then i want the manager i guess
15:15  mgedmin: heeen, you need to :call it
15:15  yac: mgedmin: thank you :)
15:16  mgedmin: xclip/xsel fork into the background and don't exit while they have clipboard ownership, so an xclip-based solution would work too
15:16  yac: mgedmin: the manager is more general
15:16  yac: i like that
15:17 * mgedmin is actually not 100% sure gnome ships a clipboard manager by default 
15:18  mgedmin: when I open console vim, yank something into "+ and "*, then exit vim, my clipboard contents disappear
15:19  mgedmin: and I am running gnome
15:19  graywh: hmmm
15:19  heeen: mgedmin: I'm using it in a script
15:21  mgedmin: ok, workaround: in vim, yank something into "*, then :!xsel|xsel
15:21  graywh: nice
15:21  mgedmin: exit vim, and what I yanked is still in the selection register
15:21  mgedmin: for xclip it would probably be something like :!xclip -o|xclip -i
15:21  mgedmin: I don't use xclip; I found xsel first
15:24  gaveen: mgedmin, xsel feels a bit more natural to use than xclip, imho
15:25 * mgedmin agrees
15:25  yac: xsel also has more convenient options
15:29  yac: but when i call xsel from vim it hangs for some reason
15:33  yac: but looks like we cant use the xsel for that
15:33  yac: man xsel; /-k
15:33  yac: the CLIPBOARD selection is persisted by a  separate  special
15:33  yac:               purpose  program  such  as  xclipboard(1)).
15:37  genjix: sometimes when im editing, i accidentally might hit page-down or something :p
15:37  genjix: is there a way to move back to the last cursor position?
15:38  LaoLang_cool: genjix: C-o ?
15:38  genjix: doesn't seem to do anything
15:38  genjix: what does it do?
15:39  LaoLang_cool: genjix: :help ctrl-o
15:39  LaoLang_cool: CTRL-O                  Go to [count] Older cursor position in jump list
15:39  LaoLang_cool:                         (not a motion command).  {not in Vi}
15:39  LaoLang_cool:                         {not available without the +jumplist feature}
15:39  genjix: oh thanks :)
15:40  mgedmin: genjix, '' or `` as well
15:40  mgedmin: and there's '., which jumps to the last place you've modified
15:42  genjix: '' and ctrl-o just go the start of the file for me :/
15:43  genjix: '., is nice :)
15:43  genjix: how does it work?
15:43  heeen: I want to find all occurences of a pattern in a string
15:43  heeen: like the regexp g modifier
15:48  malfy: is there a way to make the command 'gd' not highlight tex?
15:48  malfy: text*
15:48  yac: ok, fuck clipboard
15:48  yac: i'll just use primary selection
15:49  mgedmin: being able to paste with <MiddleMouse> is nice, especially on a ThinkPad
15:50  mgedmin: malfy, set nohls or :noh
15:51  yac: mgedmin: yup, but my primary issue now was the persistency, i can solve it easily with xsel if the selection is primary or secondary, but not clipboard
15:51  mgedmin: xsel -b doesn't work?
15:52  mgedmin: it doesn't
15:52  mgedmin: weird/interesting
15:52  yac: mgedmin: it only outputs
15:52  yac: mgedmin: you can use xsel -k to make primary/secondary persistent
15:52  yac: but for clipboard they refer to xclipboard
15:52  mgedmin: ooh
15:52  yac: which i tried, but then the clipboard did not work at all :)
15:53  mgedmin: weird: in xterm 1, yank something into selection; in xterm2, run xsel|xsel -b; later run xsel -b --> you see the yanked text
15:54  mgedmin: but in xterm 1, yank something into selection, then :!xsel|xsel -b -> now both selection and clipboard are empty
15:54  yac: mgedmin: but you have to close the xterm
15:54  yac: i guess
15:54  malfy: mgedmin: but i want my highlight
15:54  malfy: mgedmin: just not when i use gd
15:55  mgedmin: malfy, create a mapping, like noremap gd gd:noh<cr>
15:55  yac: mgedmin: right
15:56  yac: xterm 1,vim: yank into primary selection. xterm 2: xsel|xsel -b ... refers clipboard to the same source as primary, xsel -b outputs the referenced contents from clipboard
15:57  yac: oic
15:58  yac: mgedmin: when i do xsel|xsel -b it doesnt work for me too, it exits vim and hang
15:59  yac: i think there is some issue with the passing of pipe into the shell
16:13  genjix: is there a way to tab a split view as opposed to the whole workspace?
16:13  mgedmin: no
16:13  genjix: :(
16:14  genjix: so I've done vimtutor and a bunch of tutorials on the net. Is there somewhere with a bunch of vim exercises?
16:14  mgedmin: vimgor, tabs
16:14  vimgor: Tab pages are not buffers, don't try to force them to act like buffers. Consider tab pages like viewports, layouts, or workspaces. Trying to setup 1 tab page == 1 buffer is an exercise in futility. Do ':set hidden' and get started. Get FuzzyFinder, LustyExplorer or BufExplorer to make getting around your buffers easier. See http://vim.wikia.com/wiki/Category:Tabs for more info.
16:14  genjix: or tips?
16:14  mgedmin: tip: :help is the best thing ever
16:15  genjix: vimgor: i
16:15  vimgor: Bugger all, I dunno!
16:18  genjix: is there a way when i select a block and yank, that my cursor will stay on the last line?
16:18  genjix: as opposed to moving back to the top?
16:19  heeen: how do I force matching capitalization
16:19  graywh: \C
16:20  LaoLang_cool: genjix: I want the feature too...
16:20  graywh: genjix, `]
16:20  genjix: cool :)
16:21  LaoLang_cool: graywh: how to go to that positoin automatically after yank the selection
16:21  graywh: :map y `]
16:21  LaoLang_cool: vmap y y`]
16:21  graywh: yeah
16:21  LaoLang_cool: graywh: thank you
16:26  the_isz: though  vmap y'>  would be more concise imho
16:26  the_isz: vmap y y'>  even
16:27  graywh: it depends on what exactly you want
16:27  the_isz: graywh: true
16:27  genjix: how does cw and ce differ? shouldn't cw also snip the space? why doesn't it?
16:28  graywh: w is exclusive and e is inclusive?
16:28  spiiph: They differ if you're not on the first character of the word, and no, cw differs from dw in that respect.
16:28  genjix: ok, is there any reason why though?
16:28  genjix: seems a bit arbitrary :p
16:29  sjl: I think I've fixed all the bugs in my little undo tree visualizer plugin... anyone want to try to prove me wrong? http://bitbucket.org/sjl/gundo.vim/ or http://github.com/sjl/gundo.vim
16:30  LaoLang_cool: is there any difference between `] and '] ?
16:30  graywh: :h '
16:31  graywh: yes, there is
16:31  genjix: LaoLang_cool: i dont know but i do know that 'a goes to first character of a line
16:31  genjix: whereas `a goes to just the beginning
16:32  graywh: using ' is like using ` then ^
16:32  LaoLang_cool: genjix: hmm, got it, maybe `] will go to the first char of the line
16:32  graywh: ` doesn't always go to column 0
16:32  LaoLang_cool: graywh: got it, thanks
16:32  genjix: funnily enough the help doesn't mention that difference :p
16:32  the_isz: genjix: it does
16:32  graywh: oh, not there
16:32  graywh: :h mark-motions
16:32  graywh: it's farthur up
16:33  genjix: ok thanks
16:33  KeeperOfTheSoul_: is there a shortcut for "/{" then "]}" ?
16:34  KeeperOfTheSoul_: sorry, then "%" even
16:34  KeeperOfTheSoul_: ie, go to the next matched }
16:34  the_isz: genjix: oh, i just see, the docs for  ']  and  '>  differ.
16:34  the_isz: genjix: the one for  '>  is pretty clear i think
16:35  genjix: the_isz: yeah I had to scroll up 5 lines, but i missed it :)
16:36  genjix: you know what would be cool?
16:36  genjix: if there was a bot that would output 2 lines and everyone has to type the shortest command to get from A -> B
16:36  genjix: "editing exercises"
--- Log closed Fri Oct 29 20:02:18 2010
--- Log opened Fri Oct 29 20:02:40 2010
20:02 --- Users 587 nicks [0 ops, 0 halfops, 0 voices, 587 normal]
20:04 --- Channel #vim was synced in 102 seconds
20:05  sontek: hmm, inkpot gives me blank color on gnome-terminal as well
20:12  jamessan: sontek: try "env TERM=gnome-256color vim"
20:14  strull_: jamessan: do you mean "env -i" ? Else why env at all?
20:14  sontek: jamessan: that worked
20:14  jamessan: strull_: because ENVVAR=... at the start of the line isn't portable
20:14  jamessan: vimgor: gnome-terminal
20:14  vimgor: A terminal that falsely claims to be xterm and gives users no way to change that without recompiling. If you're trying to get Vim to display more colors in gnome-terminal, make sure you have a gnome-256color terminfo entry ('tput -Tgnome-256color colors' says 256) and use the following snippet in your shell init file: http://vim.pastey.net/116135
20:15  strull_: aah, ok
20:17  mgedmin: whoa
20:17  jamessan: ?
20:18  mgedmin: the ldd /proc/$PPID/exe hackery
20:24 --- BBonifieldd is now known as BBonifield
--- Log opened Fri Oct 29 20:27:32 2010
20:27 --- Users 587 nicks [0 ops, 0 halfops, 0 voices, 587 normal]
20:28 --- Channel #vim was synced in 72 seconds
20:32 --- calmar_ is now known as calmar
20:36 --- WebDragon|laptop is now known as WebDragon
20:54  srk9: I have a bunch of tabbed lines and I want to remove a level of indenting in vim from them. How can I do that?
20:54  srk9: Well, is there an easy way to remove a level of tab-indentation? I know I can manually do it, but that is tedious
20:55  joe: srk9, %s/    //g or whatever you have set as a tab
20:55  mgedmin: :h <
20:55  zomg: srk9: A simple way to do that would be to select them in visual mode and use < to un-indent
20:55  srk9: joe: For a specific set of lines?
20:55  srk9: zomg: I do not know how to use visual mode. How can I read about it?
20:55  joe: srk9, what zomg said
20:56  sjl: srk9: Select lines, unindent with <.  Repeat with . until it's right
20:56  sjl: srk9: :help V
20:56  srk9: sjl: Thanks.
20:56  zomg: srk9: simply press v to begin selecting lines, go up/down until you reach the end of the area you want to unindent
20:56  sjl: srk9: Also: :help visual-mode
20:56  zomg: There are several visual modes that do things slightly differently so it's a good idea to read those help pages mentioned =)
20:58  srk9: I am still learning the ins and outs of vim. I stated using it a month ago because I wanted to move beyond using GNU Nano. Thanks for your help. :)
--- Log closed Sat Oct 30 00:29:52 2010
