--- Log opened Tue Dec 07 00:00:08 2010
--- Log closed Tue Dec 07 00:05:02 2010
--- Log opened Tue Dec 07 00:10:25 2010
00:10 --- Users 594 nicks [0 ops, 0 halfops, 0 voices, 594 normal]
--- Log closed Tue Dec 07 00:13:37 2010
--- Log opened Tue Dec 07 00:15:24 2010
00:15 --- Users 591 nicks [0 ops, 0 halfops, 0 voices, 591 normal]
00:17 --- Channel #vim was synced in 116 seconds
00:32  datapimp: if i am working in a file with no extension ( an executable file with a #!/usr/bin/ruby at the top ) how can I manually turn on ruby syntax ?
00:33  elik: datapimp: :h 'syntax
00:33  elik: datapimp: set it to whatever it would be set if the extension was right
00:33  strull_: better set filetype ?
00:34  elik: datapimp: alternatively, add code so it detects this filename as being ruby filetype, so all the rest follows along
00:35  elik: datapimp: :h new-filetype
00:35  datapimp: elik: thanks, looking into it
00:35  homekevin: datapimp: Actually, files with shebang lines should be detected.
00:36  homekevin: datapimp: what does :filetye sap?
00:36  homekevin: say?
00:36  datapimp: homekevin: if i do :filetype it says detection:ON plugin:ON indent:ON
00:37  homekevin: datapimp: Is this a file you just created, by any chance?
00:37  datapimp: it is a file called reload, and it has #!/usr/bin/env node at the top. I want to manually set it to javascript
00:38  elik: homekevin: what in filetype.vim would have it set to ruby? All I can find that sets to ruby relates to extensions
00:38  homekevin: datapimp: Usually the !# line should be detected when the file loads, but if you add it to a new file you have to reload it first (or :set ft=...)
00:38  homekevin: elik: Check $VIMRUNTIME/scripts.vim
00:38  jamessan: elik: scripts.vim is what checks the #! line
00:38  jamessan: and other contents-based checks
00:39  elik: jamessan: and that is called from filetype.vim?
00:39  homekevin: elik: It is.
00:39  jamessan: elik: yup.
00:39  elik: Yeah, just got to it
00:40  homekevin: You can also create your own ~/.vim/scripts.vim which will get called.
00:41  elik: yeah, just saw that under new-filetype
00:41  toks: I just discovered vim and i love it! I will need some time to un-geany-fy myself though...
00:41  homekevin: It took me a while to figure out how it all works. There's a deprecated way also.
00:41  datapimp: so if i put a ~/.vim/ftdetect/node.vim
00:42  homekevin: datapimp: First you should establish why it's not already working.
00:42  datapimp: :setfiletype javascript turns it on manually
00:43  datapimp: would a standard macvim installation recocgnize #!/usr/bin/env node as javascript anywa?
00:43  jamessan: no
00:43  homekevin: No, I don't think vim understands javascript shebangs out-of-the-box
00:44  datapimp: thanks for pointing me in this direction, i was having this problem with other languages so now i know how to fix =)
00:44  homekevin: datapimp: But, the files in ftdetect are intended to be extension-based detections. If you want content-based detection you should create ~/.vim/scripts.vim
00:45  homekevin: I'm not sure if that really makes a difference, though.
00:45  homekevin: It might affect the order that tests are done.
00:45  datapimp: homekevin: i'd rather follow best practice
00:46  homekevin: Yeah, looks like it's described under :h new-filetype-scripts
00:49  datapimp: homekevin: elik: thanks a lot for your help, have a working ~/.vim/scripts.vim which handles a lot of my scripts
--- Log closed Tue Dec 07 11:09:52 2010
--- Log opened Tue Dec 07 11:10:14 2010
11:10 --- Users 579 nicks [0 ops, 0 halfops, 0 voices, 579 normal]
--- Log closed Tue Dec 07 11:59:49 2010
--- Log opened Tue Dec 07 12:00:11 2010
12:00 --- Users 582 nicks [0 ops, 0 halfops, 0 voices, 582 normal]
12:01 --- Channel #vim was synced in 113 seconds
12:02  nate-: is there anyway to capture a highlight's details in a string, eg. :hi normal <- will echo 'Normal         xxx guifg=#323232 guibg=#ffffff font=DejaVu Sans Mono 9' ... how can I capture this into a variable?
--- Log closed Tue Dec 07 12:20:52 2010
--- Log opened Tue Dec 07 12:21:12 2010
12:21 --- Users 581 nicks [0 ops, 0 halfops, 0 voices, 581 normal]
12:22 --- Channel #vim was synced in 111 seconds
--- Log closed Tue Dec 07 12:46:39 2010
--- Log opened Tue Dec 07 12:47:03 2010
12:47 --- Users 588 nicks [0 ops, 0 halfops, 0 voices, 588 normal]
12:47  Fossilet: 	'fileformats'	+ ""		no automatic file format detection,
12:47  Fossilet: 			  "dos,unix"	except for DOS, Windows and OS/2
12:48 --- Channel #vim was synced in 115 seconds
12:50  Fossilet: I think I now understand it. Thank you mgedmin.
12:51  mgedmin: np
12:55  hdanak: hi, does anyone know how I can change modes from the perl interface to vim?
13:04  hdanak: or rather, how can I emulate keystrokes inside a vim function? like changing to insert mode, etc
13:06  mgedmin: :h :normal
13:07  mgedmin: but it's restricted somewhat -- you can't leave vim in insert mode with :normal
13:08  hdanak: mgedmin: thanks
14:06  MarcWeber: Any Mac users here knowing C?
14:07  MarcWeber: All Mac users of vim-addon-async have issues. I'd like to solve them.
14:07  MarcWeber: I'm getting this error: 'bash: no job control in this shell'.
14:10  danielsh: E520: Not allowed in a modeline: encoding=utf8
14:10  danielsh: should the modeline set fileencoding instead?
14:11  mgedmin: no, vim should autodetect utf-8 files by itself
14:11  mgedmin: if it doesn't, check the 'fileencodings' setting
14:34  paleywiener: in vim, is it possible for me to move without hitting escape and jumping to cmd mode.. can i use ctrl alt and navigate?
14:35  LeoNerd: Mmm?
14:35  deryni: You can move in insert mode but as a general rule you don't want or need to.
14:35  LeoNerd: I use arrow or ctrl+arrow all the time in insert mode. Highly useful
14:35  LeoNerd: Also alt+arrow for moving between windows
14:37  paleywiener: ctrl up/down arrow works but ctrl left/right arrow doesn't.. also.. i guess i can't jump to the 10th line and stuff without switching to cmd mode
14:37  avinashhm: hi
14:37  paleywiener: hello
14:38  sitaktif: paleywiener: 10G
14:38  sitaktif: aah
14:38  deryni: :he i_ctrl-o
14:38  sitaktif: it is "normal" mode no command mode
14:38  paleywiener: you mean esc 10G
14:39  deryni: No, the command is 10G you just need to be in normal mode to use it. Normal mode is the default mode.
14:39  sitaktif: deryni: I was talking to paleywiener
14:39  paleywiener: oh..
14:39  deryni: And I was responding to his comment.
14:39  sitaktif: deryni: ok :)
14:39 * paleywiener noddles
14:39  paleywiener: thanks guys
14:40  sitaktif: paleywiener: anyway you have indeed CTRL-o but this is not really relevant. You are supposed to be in normal mode most of the time.
14:41  deryni: There are certainly times that using the arrows in insert mode make sense, but in general fighting to stay in insert mode seems to be a losing battle to me.
14:41 * LeoNerd does lots in insert mode...
14:42  sitaktif: LeoNerd: you probably do not make the best out of a "modal" editor like Vim then..
14:43  LeoNerd: I believe I do...
14:43  deryni: I fully believe he does, I also fully believe he has things set up to make that make more sense than it does by default.
14:44  paleywiener: i'm kind of trying to figure out which editor to go with.. emacs i like because it has no modes :p but i like gvim/vim because it's small and looks nice once configured and no eLisp.. then there is textmate and Kate which i also like (but vim seems to be easiest to setup) nothing is intutive in emacs! for eg.. i have some kind of an error in .emacs but the error just flashes past and i get the default screen
14:44  LeoNerd: My entire .vimrc tree including all my maps, plugins, etc.. comes to over 2k lines. :)
14:44  sitaktif: LeoNerd: okies then.. But that is probably not a good behavior to advise to "usual" user :)
14:45  mgedmin: paleywiener, try vimtutor, see if you like vim's high-level way of expressing your editing intent (change two words to, skip to next paragraph, ...)
14:45  mgedmin: I tried vim and emacs a long time ago, discovered that vim fits my brain better
14:48  seku: my theory is, after people have tried finding a good editor, they get to know it and become accustomed to it's features and interface. When trying another editor, you try to do your thing as you're used to do, which may not be possible because another editor doesn't have same features.
14:48  seku: jedit has this cool thing. You can move lines up and down, and they're being indented nicely where-ever you put them
14:54  paleywiener: is there any substantial difference in terms of UI between gvim and vim.. or is gvim just a silly frontend.. i'm wondering what to install.. vim-gtk vim-gnome; normal vim is there.. also where's vimtutor - debian lenny
14:54  LeoNerd: gvim is just a GTK frontend to the vim engine...
14:54  mgedmin: go with vim-gnome
14:54  paleywiener: okay.. but i wanted fuzzyfinder and nerdtree..
14:55  paleywiener: will that work with plain vim?
14:55  mgedmin: not packaged in debian, afaik
14:55  mgedmin: yes
14:55  paleywiener: ah! great!
14:55  mgedmin: vim-gnome has terminal vim compiled with goodies like X clipboard support
14:56  mgedmin: (as well as gui support, obviously)
14:56  LeoNerd: vim-gtk is the GTK / X11-aware version
14:56  LeoNerd: vim-gnome adds useless crap like the Gnome print dialog and othersuch..
14:57  paleywiener: right, gnome it is.. i tried kde but the 4.xx thing was scary
15:04  seku: addon-manager seems cool
15:37  seku: I have mapped nerdtree to f12, but when opening it first time, it shows messages about caching a large dir and i have to press ret before getting to the ntree. Can i make it silent?
15:40  Zathrus: try :silent! NERDTree
15:41  seku: works, thanks
15:49  din_os: Hello, is there a simple way to edit remote ftp files from within vim?
15:50  nils_r: How do i use tabs instead of spaces for indentiation?
15:50  mgedmin: :set expandtab
15:50  nils_r: if possible i'd like to have cmd to toggle between spaces and tabs. (one project uses tabs allover and i prefer spaces myself)
15:51  mgedmin: :set invexpandtab
15:51  mgedmin: but then you'd need a way to see the current setting, I suppose
15:51  mgedmin: why not set up autocommands to enable/disable it depending on the project directory?
15:52  nils_r: mgedmin that would even be more awesome. Any hints?
15:52  seku: nils_r: people bashed me here, but you could use autocommands to convert between spaces and tabs on buffer load and write
15:52  seku: over that
15:52  graywh: :set expandtab! expandtab?
15:52  graywh: mgedmin, nils_r, ^^
15:53  mgedmin: e.g. autocmd BufRead,BufNewFile *  if expand('%:p') =~ '/projectname/' | setlocal foo bar baz | endif
15:53  mgedmin: although maybe autocmd BufRead,BufNewFile **/projectname/**/* would work better?
15:53  mgedmin: I'm unclear on the exact semantics of **
15:53  mgedmin: hmm
15:53  mgedmin: I've   autocmd BufRead,BufNewFile ~/src/bookserv/*.py        call FT_BookServ_Py()
15:54  mgedmin: so * matches slashes, apparently, for autocommands
15:54  mgedmin: nils_r, check out the example in :h :augroup
15:54  mgedmin: how to define autocommands in your .vimrc
15:54  mgedmin: you don't want them to accumulate when you reload them with :source ~/.vimrc
15:55  mgedmin: you want to clear them and redefine, which is why augroups are useful
15:56  nils_r: Awesome! Thanks m8s :)
16:05 --- EselTheo_ is now known as EselTheo
16:13  iaj: mgedmin: since you like garybernhardt a lot too.. theres a new screencast from him... take a look at http://blog.extracheese.org/2010/11/screencast-custom-vim-refactorings.html  :-)
16:13  mgedmin: saw that; it was a 5-minute lightning talk
16:14  mgedmin: I was a bit disappointed all the editing operations ended up being :normal, giving the impression vim's macros are cryptic
16:14  iaj: mgedmin: oh.. damn :)  yeah actually - well I like the cast anyway
16:17  Number5: hello guys
16:19  Number5: I want to perform a search pattern by looking at a word in the beginning of the line. Is something like this ok? g/^WORD/d
16:19  Number5: (In case I want to delete that line).
16:19  mgedmin: yes
16:19  mgedmin: it would delete all lines that start with WORD
16:19  Number5: mgedmin: thank you my dear friend :P
16:19  mgedmin: in general, if you want to be sure you got the pattern syntax right, you can check :help pattern
16:20  Number5: yes I know, but to use help well it's an art also :)
16:24  din_os: I've found that vim ftp://<server> will connect and edit remotely, thx, but is there a way to use encrypted connection? (ftpes)
16:26  gkatsev: check :h netrw
16:31  w0m: din_os: would e scp://<server> give you what you want?
16:36  iaj: when I see an autocommand what is the '|' standing for.. is this an equal to a new line?
16:36  iaj: eg. new command?
16:37  iaj: hm that's not concerning autocommands but commandsequences in general I suppose
16:37  gkatsev: it's a pipe
16:37  iaj: meaning its piping the output? like in shell... hmm that can't be :)
16:37  gkatsev: yeah, something like that
16:37  iaj: i got an if command followed by an | 
16:37  gkatsev: :h :bar
16:38  iaj: seperate commands ok :(
16:39  pk4r: Hi, can I use vim to undo change(-s) in current line ?
16:40  gkatsev: u does general undo
16:40  gkatsev: U can undo all changes on the current line
16:42  pk4r: Is it possible to go back and forth through changes only in current line ? Any plugins.. ?
16:45  peth: pk4r: there's ^U, but that will only work as a complete insert undo and only if your 'backspace' is at default setting. i usually go back to the undo state i want, yy the line, redo, and paste
16:48  tlonim: when i switch from one tab to next, the bufhidden variable set in my rc file gets reset. why is that ?
16:54  mgedmin: tlonim, 'bufhidden' is a buffer-local variable, why are you setting it in your vimrc?
16:55  gkatsev: maybe you want:
16:55  gkatsev: vimgor: hidden
16:55  vimgor: An option that allows you to switch the buffer being displayed in the current window without requiring that you save it first. This also allows you to keep undo/redo history on multiple files. If you don't know whether or not you want this option, you want it; it makes working with multiple files much more reasonable. See also, :help 'hidden'
16:55  macrobat: how do i unbind <Tab> for supertab and let it be a regular tab?
16:55  din_os: w0m, Tries to, but fails to give me directory listing after -successful!- login... I'll look around this command though, thanks
16:55  tlonim: mgedmin: ok. but how can i ensure that behavior globally yhen ?
16:55  mgedmin: tlonim, 'hidden', like gkatsev suggested
16:56  elik: macrobat: remove the supertab plugin?
16:56  tlonim: checking 'hidden'
16:56  macrobat: ;(
16:56  macrobat: worst. plugin. ever.
16:57  elik: I mean, I don't know, I don't use it. But being called supertab and all, if you want tab to behave normally, removing it sounds like a sensible option
16:58  tlonim: mgedmin: 'hidden' seems to be something different. what i wanted was behavior of bufhidden=unload .. i.e . when i unload a window containing the buffer with :q, i wanted the buffer to be unloaded.. it works but when setting doesnt get set across windows
16:59  macrobat: i'd like to complete words i write
16:59  gkatsev: macrobat: i_CTRL-N
17:00  macrobat: i sourced a supertab.vba . How do i get rid of it. i see nothing in ~/.vim/
17:00  macrobat: gkatsev: ty
17:01  gkatsev: np
17:02  mgedmin: gkatsev, sourcing a .vba creates a bunch of files under ~/.vim
17:02  mgedmin: and a log, iirc
17:03  gkatsev: mgedmin: not me, macrobat
17:03  mgedmin: check ~/.vim/.VimballRecord
17:03  mgedmin: gkatsev, sorry!
17:03  gkatsev: mgedmin: :)
17:04  elik: mgedmin: those vimballs are hairy! :S
17:05  macrobat: crap, i had a .vim/ in my ~/.vim !
17:05  kurkale6ka: not only Vim ones
17:08  telemachus: ouch
17:17  Number5: hello guys, how to search for all lines which begins with a number, like: g/^[0-9]/d is that correct?
17:17  Number5: it's more the expression statement I'm worried about.
17:17  elik: Number5: well, you are going to delete all such lines
17:18  elik: Number5: did you give it a try, it looks good to me
17:18  Number5: elik: that's the purpose, but only if they begin with a number.
17:18  elik: Number5: u is your friend
17:18  Number5: elik: thnx
17:19  Number5: elik: what is 'u'?
17:20  jink: Number5: undo
17:20  elik: or what saves your ass when you experiment with regexp and all the rest
17:20  Number5: jink: oooh ofcourse, I thought he meant something that has to do with help or man.
17:21  Number5: elik: hahahaha
17:21  Number5: thnx man
17:33  iaj: guys I want to install the most recent NETRW plugin - however -  its only achievable over those vimballs... but Im using pathogen...
17:33  iaj: any easy solution to that
17:33  iaj: ?
17:33  gkatsev: iaj: godlygeek has a vba->zip util
17:34  gkatsev: https://github.com/godlygeek/vim-plugin-bundling
17:34  gkatsev: https://github.com/godlygeek/vim-plugin-bundling/blob/master/vba2zip.py specifically
17:34  mgedmin: I think vim-addon-manager supports vimballs ... ?
17:36  rames: hi all ... weird question ... is there a way to yank all regex matches into a buffer?
17:37  spiiph: You can use :lvim or :vim
17:40  iaj: gkatsev: yay that's helping me a lot thanks :)
17:41  gkatsev: godlygeek is the man, though, he isn't here as often now with his job and girlfriend and all, which is understandable.
17:42  rames: supposing i have a search highlighted (ie: /foo[abc]+) and i want to copy all those matches into a register, is there a way to do that?
17:43  mgedmin: you could probably do something with a loop and matchlist() ...
17:44  rames: mgedmin: it's like i want an "absorb" command that would slurp up all the matches
17:44  rames: mgedmin: i'd even be willing to bust to sed but that's kindof rough too... a bit more complicated than i'd like
17:44  iaj: gkatsev: yeh i remember the times when he more or less answered like.. uh.. every question here
17:45 * mgedmin thinks about something :g/foo[abc]\+/let @r += matchlist(getline('.'), '\(foo[abc]\+\)')[1] <-- limited to one match per line
17:45  gkatsev: lol, yeah
17:45  elik: iaj: are you crying?
17:46  rames: mgedmin: that's not gonna hack my box is it?  :^P ... lemme give it a try
17:46  mgedmin: rames, :help is your friend
17:47  rames: mgedmin: i know ... looked in help yank, help search-command and looking for that match stuff you're talking about
17:48  rames: mgedmin: @r += means register "r" right?
17:49  mgedmin: yes
17:49  rames: mgedmin: and matchlist is likely 7.x?
17:49  mgedmin: it's actually :let @r .= ...
17:49  mgedmin: yes
17:49  mgedmin: hey, matchlist is silly actually
17:50  rames: mgedmin: argh. 6.3 on the box where i really want it but at least it's worth trying
17:50  seku: is there :command to start Ex mode?
17:50  mgedmin: let @r .= substitute(getline('.'), 'foo\([abc]\+\)', '\1', 'g')
17:50  mgedmin: this handles more than one match per line, too
17:50  mgedmin: wait
17:50  iaj: elik: sure am :( ;)
17:50  rames: mgedmin: and doesn't dupe the regex
17:50  mgedmin: to use substitute you'd need to make sure the regexp matches everything
17:50  mgedmin: otherwise it'll append parts of the line that do not match, as well as the group
17:50  mgedmin: rames, what exactly are you trying to do here?
17:51  rames: mgedmin: be lazy ;^) ... basically anything highlighted with set hls i want to yank into a register
17:51  mgedmin: and what's the point of that?
17:51  mgedmin: and how do you want to combine multiple matches into a single register? simple concatenation with no separators?
17:52  rames: mgedmin: specifically: i have a list of tables "database.table, database.table" scattered in SQL ... i want to match /database\.[^ ]* ... then "yank / absorb" all those matches (w/ newline between) then pass to sort | uniq
17:52  mgedmin: so you want newlines
17:52  rames: (of course- database.table1, database.table2, etc..)
17:52 * mgedmin thinks
17:53  mgedmin: this is a shell one-liner, basically
17:53  rames: mgedmin: yeah ... and you could see how you could use it for function.*[^(] to match functions ... @param.[^ ]+ to match javadoc parameters
17:53  mgedmin: :w !grep -o "database[.][^ ]*" | sort -u
17:54  elik: mgedmin: at that rate, might as well exit vim...
17:54  rames: mgedmin: probably could be ... ahhh... didn't know about -o to grep
17:54  mgedmin: or :let @r = system("grep -o 'database[.][^ ]' '" . expand("%") . "' | sort -u"
17:54  mgedmin: grep -o is a GNU extension, I think
17:54  mgedmin: using vim's builtin python/perl/ruby might be worth a try, too
17:54  rames: mgedmin: i'm willing to shell-exec if need be, but i have been amazed by vim and #vim enough that i thought it was worth asking :)
17:54  mgedmin: I can't come up with an elegant solution in pure vimscript
17:57  rames: mgedmin: there might be a way to do it... if not, i could see that there ~should~ be a way to do it... like    "Ay^r/    or something
17:59  mgedmin: "A/pattern/v/pattern/ey might work
17:59  mgedmin: you'd have to repeat it manually until you get no more matches
17:59  mgedmin: and figure out a way to add newlines in the right place
18:00  rames: mgedmin: that's not ~too~ bad ... at least that's something to learn as well
18:01  mgedmin: :py import vim, re; print sorted(set(re.findall('database.[^ ]*', ''.join(vim.current.buffer))))
18:01  iaj: mgedmin: that let @r pattern is storing its stuff in the basic "r register?
18:01  mgedmin: and it even works -- I tested it on :help, by searching for CTRL-[^ ]*
18:01  mgedmin: storing into a register is left as an excercise etc.
18:02  mgedmin: yes, see :h :let-@
18:04  rames: mgedmin: py import vim, re; print re.findall('(\dhr)',''.join(vim.current.buffer))
18:05  rames: ['1hr', '4hr', '4hr', '4hr', '2hr', '2hr', '2hr', '1hr', '2hr', '1hr', '1hr', '4hr', '1hr', '2hr', '2hr', '1hr', '1hr', '1hr', '0hr', '2hr', '1hr'
18:06  rames: cool... i'm assuming that pyvim has access to current ^r/ register somehow?  so i could macro it to operate on the current search?
18:07 --- altamic_ is now known as altamic
18:26 --- altamic_ is now known as altamic
18:35  rames: mgedmin: if you're still listening... py import vim, re, string; vim.current.buffer[ vim.current.window.cursor[0] : vim.current.window.cursor[0] ] = re.findall( vim.eval('@/'), ' '.join(vim.current.buffer))
18:36  mgedmin: hm, neat
18:36  mgedmin: of course it'll break as soon as you provide a non-trivial regexp ...
18:36  mgedmin: and import string is unnecessary
18:37  rames: mgedmin: i did ' '.join(...) instead of ''.join b/c i think findall is weird on multiline matches
18:37  rames: mgedmin: yeah accidentally left that in when i went down .eval / string.atoi path
18:38  mgedmin: omg, string.atoi!  what a fossil!
18:38  mgedmin: int() does the same thing
18:38  rames: (in the docs :help python ;^)
18:39  mgedmin: someone should submit a patch
18:41  rames: mgedmin: maybe? i'll see if i can find it somewhere
18:47  _maniac_: Hello. My vim segfaults when trying omnicomplete ruby code
18:47  _maniac_: How can I debug this?
18:50  _maniac_: looking at core under gdb shows virtually nothing:
18:50  _maniac_: #0  0x00007f6c4db7c447 in ?? ()
18:52  jerojasro: _maniac_: do this: :verbose set omnifunc
18:52  jerojasro: that sould point to to the script where is defined the omnicompletion
18:53  _maniac_: rubycomplete#Complete
18:53  jerojasro: and from there, start reading...
18:53  _maniac_: :D
18:53  _maniac_: thx
18:53  _maniac_: I just realized, that it doesn't segfaults on empty files.
18:53  _maniac_: and my vim is linked to ruby-enterprise.
18:54  _maniac_: but I'm tl to replace it with default ruby
18:55  jerojasro: dunno, I don't really use ruby...
18:56  _maniac_: thank you anyways
19:21  mgedmin: my vim used to segfault when executing ruby code until I rebuilt it without perl support
19:38  x1337807x: Any mvim users able to lend a hand? I've been using Bleything's .vimrc from git://github.com/bleything/dotvim.git. I've only changed the various tab lines to 2 spaces instead of 4, and the color scheme. In any case, whenever I open a file I have to ':so $MYVIMRC' in order to get my two space tabs. Quite annoying, any advice?
19:39  x1337807x: Wouldn't the vimrc load properly in the first place if ':so $MYVIMRC' worked at all?
19:39  deryni: Open a new file then see what ':verbose set ts?' and sw and sts say set it laste.
19:39  deryni: Probably a filetype setting.
19:42  xybre: How can I collapse only comment folds by default, rather than all folds? Or even better, only collapse comment folds greater than 2 lines, and only collapse functions in files greater than 1000 lines?
19:44  deryni: You can control the level of fold nesting that is folded but I'm not sure you can control folding based on the amount of lines that would get folded (though it is possible a fold function can do it I don't know).
19:47  x1337807x: It says tabstop=4, Last set from ~./vim/editing - but in that file I'm looking at tabstop=2 right now.
19:47  x1337807x: Is there some sort of caching going on?
19:47  x1337807x: If I create a new file from scratch I get the correct tab setting
19:49  xybre: deryni: well if I had an api for getting the information I'd write my own .vim script to do it for me, I guess I can dig around in the docs more to see
19:50  deryni: xybre: Look at :he fold-expr it might be possible to write a function to do count of lines based folding but it probably wouldn't perform too well.
19:50  deryni: Hm... actually :help 'fml might be sort of what you want there.
19:50  xybre: I can use foldminlines
19:50  xybre: for part of that
19:51  deryni: Yeah. Hadn't noticed that setting before.
19:51  deryni: As to only collapsing some folds you'd need to use different markers I think.
19:52  iaj: Im trying to find a good way to complete in command mode
19:53  iaj: like a :NE would autocomplete to :NERD and list the rest of the options...
19:53  deryni: Tab or <c-d>?
19:53  deryni: Also 'wildmode and 'wildmenu .
19:54  xybre: Yeah I might be able to recreate basic syntax folding using markers
19:55  iaj: deryni: I got set wildmode=longest,list   however that's not actually the right thing :(
19:55  iaj: I thought this one should complete to the longest possible and then list the rest
19:56  Morg0th: Hello, I'm trying to bind keys to <F1> etc on Vim 7.2. On Vim 7.3 on my computer I do this: "map <F1> <Esc>:call HelpMemory()<CR>" but on Vim 7.2 at work it doesn't work. I also can't do things like "noremap <C-l> :nohl<CR>". do you know why?
19:56  deryni: iaj: I believe it should, are you hitting tab more than once?
19:57  iaj: deryni: nah just once.. set it to list:longest now :(
19:57  iaj: same problem
19:57  deryni: iaj: Try longest:list,list ?
19:58  xybre: I do kinda like that the short form fo the command is fml..
19:59  iaj: deryni: its not completing at all :(
20:00  deryni: iaj: I think I mean longest:full
20:00  iaj: deryni: any clue why :he NER<tab> is listing stuff like compl-generic as well?
20:01  Raimondi: ...geNERic
20:01  iaj: Raimondi: but shouldn't it only complete the one that start with the string I entered ?
20:02  iaj: Raimondi: what's your wildmode setting
20:02  xybre: foldopen might do what I want, with some work
20:02  Raimondi: list:longest,full
20:04  Raimondi: iaj: ^
20:07  iaj: Raimondi: tahnks a lot that seems to do the job :)
20:07  Raimondi: Good :)
20:08  iaj: I just overlooked a lot of NERD* possibilites :(
20:15  iaj: which foldmethods do you guys use for coding?  I tried indenting with java code but its somehow well... a bit 'getting used to'
20:16  LeoNerd: syntax, for perl
20:18  iaj: what would you advice for .java?
20:18  mgedmin: I've a custom foldexpr for python
20:18  dp_: I've got 2 versions of a file open in a vertical split. is there a way to have vim move *both* files when I move up/down within the file?
20:19  iaj: dp_: i guess you take a look at :he 'scrollbind'
20:20  dp_: iaj: *awesome*. thanks
20:20  iaj: wy
20:20  iaj: ... xp
--- Log closed Tue Dec 07 21:50:41 2010
--- Log opened Tue Dec 07 21:51:03 2010
21:51 --- Users 618 nicks [0 ops, 0 halfops, 0 voices, 618 normal]
21:52 --- Channel #vim was synced in 119 seconds
22:20  joe-generic: quick question: does %.%# convert to .* by definition, or does .# have an underlying vim regex interpretation?
22:20  joe-generic: (context: errorformat)
22:23  mgedmin: joe-generic, :help errorformat, then /Pattern matching
22:23  mgedmin: %. is converted to ., %# is converted to *, and then the result is interpreted as a regex
22:24  joe-generic: mgedmin: thanks. Somehow I missed that.
22:32  ezzieyguywuf: any idea how to get syntax highligthing on a generic config file, short of writing the syntax file myself?
22:32  graywh: generic unix config?  you can try ft=conf
22:33  ezzieyguywuf: well, its a config file for use by python's ConfigParser
22:33  ezzieyguywuf: graywh: that captures comments at least :-P
22:35  graywh: try ft=dosini for those
22:35  ezzieyguywuf: graywh: ft=dosini worked great.
22:35  graywh: it doesn't get the comments, though
22:35  ezzieyguywuf: now, how can I have my custom .inp file ending always have this highlighting?
22:36  ezzieyguywuf: graywh: ack, you're right.
22:36  homekevin: ezzieyguywuf: :h new-filetype
22:36  homekevin: ...which is pretty hard to understand so skip to part...
22:37  graywh: well, dosini is *very* basic, so copy 67% of it and merge in the comments from conf
22:37  x1337807x: exit
22:37  x1337807x: exit
22:37  homekevin: I'm not sure what part to skip to.
22:37  x1337807x: uhhh
22:37  x1337807x: sry
22:37  homekevin: x1337807x: command not found
22:37  ezzieyguywuf: graywh: that sounds like a good idea.
22:38  homekevin: ezzieyguywuf: Skip to part C, I think.
22:42  ezzieyguywuf: hrm
22:53  p_jonas: Hi - if I have windows created via :new and :vnew, etc., is it possible to hide such a window and then unhide it later on?
22:53  graywh: you cannot hide windows
22:53  glyph: p_jonas: not as such
22:53  graywh: you can close them and open new ones
22:54  glyph: p_jonas: but you can hide buffers and then show them again
22:54  glyph: :set hidden
22:54  p_jonas: Ah, I see.  I understand a window is a view on to a buffer, so I guess that makes sense.
22:57  glyph: p_jonas: Yeah.  Sounds like you've basically got it.
22:58  p_jonas: :)
22:58  p_jonas: So I will go look for vim scripts which manage buffers -- I am not a fan of using tabs.
23:03  datapimp: question re: code folding. is there a way to start with all folds open by default?
23:03  graywh: datapimp, :set foldlevel=999
23:04  deryni: :help 'fdls
23:04  datapimp: booya
23:04  graywh: yeah, foldlevelstart
23:05  graywh: of course, if fdl gets set to 99, zm probably won't do anything
23:12 --- Fraxtil` is now known as Fraxtil
23:15  p_jonas: Charles Campbell uses split windows for a rolodeck quite successfully.  :)
23:55  sjohnson: scrooloose: hi, i was wondering if it's possible to disable the feature in Vim where it keeps the editing mode in "comment mode" if you hit enter after you're done your comment... with your commentor plugin
23:55  sjohnson: i remember you saying that you need to enable certain vim features for the plugin to work
23:58  sjohnson: scrooloose: if you are in a different time zone, please pm me.  many thanks in advance.  keep up the good work on the plugin
--- Log closed Wed Dec 08 00:00:50 2010
