--- Log opened Mon Nov 08 00:00:15 2010
00:00 --- Channel #vim was synced in 88 seconds
00:16  kenneth_reitz: imap <F2> <Esc>:set et <bar> retab<CR>i
00:16  kenneth_reitz: imap <F3> <Esc>:set noet <bar> retab!<CR>i
00:16  kenneth_reitz: whoot
00:16  kenneth_reitz: life is good. very good.
00:17  kenneth_reitz: now if only i could get them to cycle w/ the same key
00:17  estragib: use set et!
00:18  mgedmin: or :set invet, which I find easier to remember
00:18  agib: in visual mode, why doesn't G go to the end of the last line... it just seems to go to the beginning of the last line
00:19  estragib: agib: that depends on what visual mode. use shift-v for linewise
00:19  mgedmin: because that's what G does ... see :h 'startofline'
00:19  mgedmin: if you use shift-V, then it doesn't matter
00:19  agib: ahh
00:19  agib: thank you
00:19  agib: what's the best way to select a whole file?
00:20  estragib: not to do it :)
00:20  mgedmin: ggVG
00:20  miguel000: how can I repeat the last replayed macro easilt
00:20  miguel000: easily?
00:20  Raimondi: @@
00:20  miguel000: aah ok thx
00:21  Raimondi: agib: What are you trying to do?
00:22  bosie: Raimondi: isn't '.' doing the same?
00:22  Raimondi: bosie: Nope
00:23  mgedmin: bosie, try this: qqddpq@q and then try @@ and .
00:23  agib: ggVG was fine
00:23  agib: Raimondi: I just wanted to paste something over the contents of a file
00:24  kenneth_reitz: meizaps: what' set invet?
00:25  bosie: i think @ is overwritten
00:25  bosie: cos it says: "YR: Enter character:"
00:26  Raimondi: agib:  :h :put
00:26  spiiph: agib, the best way to select a whole file is not doing it at all.
00:26  agib: :)
00:27  fow: kenneth_reitz, it inverts the et option, see :help :se :set-inv
00:27  agib: so if I want to paste from one file into another...
00:27  agib: :put?
00:27  spiiph: :%y
00:27  spiiph: If you want to copy the hole file
00:27  mgedmin: or ggyG
00:28  agib: heh
00:28  agib: ahhright
00:28  agib: thank you
00:30  unkanon: i have both vim and macvim installed and I have used both but none of them cared to create a .vimrc file (which I suppose is in ~/.vimrc), should I go ahead and create one?
00:30  kenneth_reitz: estragib: thanks! that worked great
00:30  mgedmin: unkanon, sure
00:30  Raimondi: unkanon: Yes
00:30  mgedmin: .vimrc is something you maintain by yourself, it's not something that vim maintains for you
00:30  spiiph: vimgor`, vimrc
00:30  bosie: unkanon: don't expect vim to do anything for you ;)
00:30  unkanon: ok :)
00:30 * spiiph pokes vimgor` 
00:30  kenneth_reitz: macvim symlinks .vimrc to .gvimrc for you
00:30  kenneth_reitz: and that's about it
00:30  kenneth_reitz: :P
00:30  spiiph: Uh, why would you symlink .vimrc to .gvimrc?
00:30  Raimondi: kenneth_reitz: MacVIm doesn't do that.
00:30  mgedmin: what's the point of that? execute every .vimrc command twice when you launch gvim?
00:30  spiiph: That would be stupid.
00:30  kenneth_reitz: mine does..
00:31  unkanon: btw I'm following vimcasts and they say "type ctrl-vu followed by the 4 digit hex code to type a unicode character" but it doesnt work for me
00:31  unkanon: how do i type ctrl-vu?
00:31  mgedmin: unkanon, are you in insert mode?
00:31  unkanon: no
00:31  mgedmin: ctrl-v followed by the letter u
00:31  unkanon: i'm in normal mode
00:31  unkanon: always
00:31  kenneth_reitz: maybe homebrew made it..
00:31  mgedmin: well, ctrl-v is an insert-mode command
00:32  mgedmin: (there's also a normal mode ctrl-v which does something unrelated to inserting unicode characters)
00:32  Raimondi: kenneth_reitz: It might be, but that's not good. vimrc and gvimrc have different uses.
00:32  kenneth_reitz: Raimondi: if has("gui_macvim")
00:32  unkanon: mgedmin: thanks, it worked now!
00:34  unkanon: can i ask a macvim question here?
00:35  Raimondi: unkanon: Yes
00:35  unkanon: ok, if I start using Pathogen to manage my packages then will macvim also see those?
00:35  unkanon: or will it only work for vim?
00:35  Raimondi: It will work
00:36 --- vimgor is now known as vimgor`
00:36  spiiph: vimgor`, vimrc
00:36  vimgor`: Try typing :help vimrc-intro and check out <http://vim.wikia.com/wiki/Open_vimrc_file>. Also try the #vim approved example vimrc at <http://vim.wikia.com/wiki/Example_vimrc>.
00:36  spiiph: unkanon, ^
00:36 --- vimgor` is now known as vimgor
00:36 --- altamic_ is now known as altamic
00:38  bosie: anyone in here using vim-latex
00:38  unkanon: vimgor? lol
00:38  vimgor: I don't know.
00:38  bosie: and yes to all non-users...  it is buggy as hell ;)
00:38  unkanon: spiiph: i'll check that out right now
00:40  spiiph: vimgor, latex-suite
00:40  vimgor: An slightly-maintained, buggy, over-complicated plugin intended to make it easier to author (La)Tex files. Often, this is better served by using a standalone snippets plugin (like snipMate) to define the snippets you actually find useful as well as using the command ':compiler tex' to allow using Vim's quickfix feature when compiling TeX to an output format.
00:41  bosie: yea although the compilation actually works ;)
00:41  spiiph: Should work just as well using :compiler tex
00:42 * mgedmin was happy enough with map  <buffer> <F9>    :!latex --src-specials % && killall -USR1 xdvi.bin 2>/dev/null<CR>
00:42  bosie: dunno, :compiler tex doesn't seem to do anything
00:42  mgedmin: and map  <buffer> <F8>    :!xdvi %:r.dvi&<CR><C-L>
00:43  bosie: whats <C-L> ?
00:43  mgedmin: ctrl-l, redraw screen
00:43  unkanon: ctrl+shift+ the letter L ?
00:43  mgedmin: ah, and the other side of --src-specials was in ~/.Xresources: XDvi.editor: gvim --remote +%l %f
00:44  mgedmin: unkanon, shift is not necessary; vim sees no diff between ctrl-l and ctrl-shift-l
00:44  unkanon: oh ok sorry :)
00:44  bosie: lets see
00:44  unkanon: is there a good free video tutorial on vim or should I just go straight to peepcode?
00:45  bosie: mgedmin: what did you do on multi-files?
00:45  mgedmin: what are multi-files?
00:45  bosie: unkanon: the peepcode one is awesome i gotta say
00:45  bosie: mgedmin: one main file that inputs several others. and when you are in the other one
00:45  mgedmin: ah
00:46  bosie: you still want to compile the main file
00:46  mgedmin: dunno, I'd probably write a Makefile
00:46  unkanon: bosie: I got the peepcode cast on emacs and didn't like it, didn't think it was thorough enough
00:46  mgedmin: my BSc thesis was a single .tex file, iirc (plus a custom .sty)
00:46  unkanon: bosie: but I'm switching to vim anyway so who cares
00:46  bosie: unkanon: as in?
00:46  unkanon: bosie: as in they didn't teach enough for me to go out and learn on my own
00:47  bosie: unkanon: hm honestly, there isn't much i am missing from peepcode that wouldn't be categorized specialized knowledge (i.e. latex handling)
00:47  bosie: mgedmin: single tex file... gee... how many pages is your bsc thesis?
00:47  mgedmin: 20?  I don't remember
00:48  bosie: k
00:48  unkanon: bosie: as you said, the one on vim might be a lot better than the one on emacs
00:48  bosie: unkanon: but i am talking about both
00:48  unkanon: bosie: which do you think covered more ground?
00:49  bosie: unkanon: the second has some more in depth one but i didn't know anything about vim, so i would have been lost with just the second one
01:03  bosie: what's the trigger for vim to change pwd?
01:03  mgedmin: some script does :cd
01:03  mgedmin: or you set 'autochdir'
01:04  bosie: let me try the autochdir theory
01:04  bosie: ok it has to be command-t, as soon as i execute it, its gone
01:05  frogonwheels: bosie: or you can use  :lcd  to have local directory for a buffer.
01:07  mgedmin: netrw-explorer likes to call :lcd whether I want it or not
01:07  bosie: mgedmin: its CommandT that seems to call it, considering pwd changes automatically after issuing it
01:08  mgedmin: I just recently started using CommandT; haven't noticed anything like it yet
01:08 * mgedmin greps through plugin sources
01:09 --- altamic_ is now known as altamic
01:09  mgedmin: what's the ruby speling of chdir? chdir?
01:09  bosie: mgedmin: well, weird because it does herer
01:09  bosie: it sets it to the current dir
01:09  mgedmin: "current" being ... ?
01:10  bosie: mgedmin: the dir to the file of the current buffer file
01:10  mgedmin: ok
01:10  dsirijus: MarcWeber: you live?
01:10  mgedmin: can you check if you have 'autochdir' set?
01:11  bosie: i tried, am i not checking it by saying ":set autochdir" ?
01:11  mgedmin: no, you're turning it on
01:11  MarcWeber: dsirijus: Y. How can I help you?
01:11  Raimondi: bosie: :set autochdir?
01:11  bosie: then its turned on for the last 5 minutes for sure
01:11  mgedmin: :set autochdir? with the question mark will show the current setting
01:11  dsirijus: MarcWeber: Error detected while processing function ActivateAddons:  line    5:  Vim(echoerr):Invalid JSON in C:\Users\Ded Sirijus\vim-addons/vim-addon- fcsh/vim-addon-fcsh-addon-info.txt!
01:11  mgedmin: :verbose autochdir? will also tell you which script last changed it
01:12  bosie: noautochdir
01:12  MarcWeber: 49e38ab1f9ec40269391a6cd1605c393  vim-addon-fcsh-addon-info.txt @ dsirijus ? which is your md5sum?
01:13  MarcWeber: dsirijus: How did you install the plugin?
01:13  bosie: mgedmin: you are right, opening a new macvim changes the behaviour
01:14  dsirijus: MarcWeber: by call scriptmanager
01:14  dsirijus: activateaddon
01:14  dsirijus: or something like that
01:14  dsirijus: everything's from github, don't have md5sums and stuff
01:14  MarcWeber: dsirijus: Don't you have md5 in PATH ?
01:15  MarcWeber: dsirijus: which OS? Do you have this git hash: 701de45e4 ?
01:15  dsirijus: hm, you should probably slowdown with me :)
01:15  dsirijus: windows 7 64 bit
01:16  dsirijus: i've only installed git for the first time today, dunno how to check the hash or whatever
01:16  MarcWeber: dsirijus: git log -1. I guess its related to windows.
01:17  dsirijus: 701de45e4f0d603af357190ae463481404e661a9
01:18  MarcWeber: dsirijus: That's perfect.
01:18  MarcWeber: dsirijus: do you know some VimL ?
01:18  dsirijus: don't even know what it is
01:19  MarcWeber: dsirijus: open vim-addon-manager/autoload/scriptmanager.vim (line VerifyIsJSON(s) )
01:19  unkanon: hey guys, do most people use pathogen here? reading about it makes it seem like it's essential
01:19  MarcWeber: that's line 62. Make "return 1' be the first line in that function.
01:20  MarcWeber: unkanon: Don't know. I'm using VAM.
01:20  unkanon: I don't know what VAM is
01:20  MarcWeber: And I think it offers more features than pathogen because its based on a maintained set of package sources.
01:21  MarcWeber: unkanon: vim-addon-manager. See my github page. It'll fetch plugins for you and add them to your runtimepath.
01:21  dsirijus: MarcWeber: http://pastie.org/1280356
01:21  MarcWeber: unkanon: Where did you read about pathogen?
01:21  unkanon: MarcWeber: everywhere where they talk about vim :)  and here =>  http://tammersaleh.com/posts/the-modern-vim-config-with-pathogen
01:21  MarcWeber: dsirijus: Well done.
01:22 --- Guest10739 is now known as gdoteof_home
01:24 --- altamic_ is now known as altamic
01:24  gdoteof_home: anyone use NERDTree?  I am trying to either a)have the tabs always display the file name instead of 'NERDTree' when the focus is left in the nerdtree window, or, have the nerdtree maintain state so that I can have it automatically close when a file is selected but keep the same folders open
01:24  gdoteof_home: s/or,/or, b)/
01:24  bosie: gdoteof_home: toggle it
01:25  gdoteof_home: bosie: sorry, toggle what?
01:25  bosie: gdoteof_home: Nerdtree
01:25  MarcWeber: unkanon: :) Just added a comment.
01:25  bosie: gdoteof_home: when you toggle nerdtree (with :NERDTreeToggle)
01:25  bosie: gdoteof_home: the selection and layout stays the same
01:25  MarcWeber: dsirijus: line 76 has a "b". remove your return and remove that , "b". Then retry
01:25  MarcWeber: The issue is the "\r\n" on windows.
01:25  bosie: gdoteof_home: "maintain state"
01:26  spiiph: dsirijus, that's a DOS type script being used on mac/unix
01:26  MarcWeber: dsirijus: The interesting point is: The format is unix and should work on Windows as well.
01:26  gdoteof_home: bosie: ahh.. instead of closing it
01:26  gdoteof_home: i didn't realize the difference, thanks
01:26  bosie: gdoteof_home: yea i have it mapped to <Leader>n, comes in handy ;)
01:27  MarcWeber: dsirijus: If you open that info file what does :echo &ff say?
01:27  MarcWeber: If its dos than your git version has changed \n to \r\n
01:27  dsirijus: MarcWeber: just a sec... put "" instead of "b" or remove ', "b"' ?
01:27  MarcWeber:   let body = join(readfile(a:path),"")
01:27  MarcWeber: THe line should look like that then.
01:28  unkanon: MarcWeber: just read it. you created that addon then?
01:28  unkanon: MarcWeber: and what's vimL?
01:28  gdoteof_home: bosie: do you just open it the first time with :NERDTree proper?
01:28  bosie: gdoteof_home: actually i open it with :NERDTreeFromBookmark
01:28  gdoteof_home: that works for me.. i have it mapped to N.. but only after it's been opened with NERDTree
01:28  MarcWeber: unkanon: VimL is the Vim language (the scripting language built into Vim)
01:28  dsirijus: MarcWeber: http://pastie.org/1280371
01:29  bosie: gdoteof_home: yes, :NERDTree works too
01:29  unkanon: MarcWeber: oh ok
01:29  gdoteof_home: bosie, can I make the N behave differently whether or not NERDTree as been invoked
01:29  MarcWeber: dsirijus: Can you still tell me what the :echo &ff echoes when placing the cursor into that file?
01:29  bosie: gdoteof_home: no idea, that's above my paygrade
01:30  MarcWeber: dsirijus: The error you're getting now is a different one
01:30  gdoteof_home: gotcha.. thanks
01:30  dsirijus: dos
01:30  gdoteof_home: i'll just do a hack and have it open and close itself everytime vim opens
01:30  bosie: gdoteof_home: but there are some vim-pro's in here ;)
01:31  unkanon: MarcWeber: what shortcomings did you see in pathogen that made you write vam?
01:31  dsirijus: MarcWeber: what, msysgit messed it up?
01:31  MarcWeber: dsirijus: The info file should have told your vim to also fetch vim-addon-mw-utils which contains autoload/funcref.vim which contains the func it was missing.
01:31  MarcWeber: unkanon: dependency management.
01:32  MarcWeber: dsirijus: Tell me about the echo result, please. it should be "unix" but after all what you told me I expect it to be "dos"
01:32  gdoteof_home: hey vim pros, how should I deal with my :NERDTree mapping.  I want N to run :NERDTreeToggle if NERDTree is already open, other wise I want it to run :NERDTree
01:32  naquad: how do i find out what was original file encoding after vi decoded it?
01:32  dsirijus: MarcWeber: dos, wrote it up there
01:32  mgedmin: naquad, echo &fenc
01:32  gdoteof_home: either that, or if I could have NERDTree be loaded by default
01:32  naquad: mgedmin, thank you
01:33  gdoteof_home: I tried puting :NERDTree at the end of my .vimrc but it says it's not an editor command
01:33  MarcWeber: dsirijus: There are some git settings which say "checkout files as \r\n even though the repo contains \n only".
01:33  mgedmin: gdoteof_home, that's because vim sources .vimrc first, and only then all the plugins
01:33  gdoteof_home: mgedmin: i figured it was something like that
01:33  dsirijus: MarcWeber: can i just delete these now?
01:33  mgedmin: gdoteof_home, you can ask vim to load nerdtree early by putting :runtime plugin/nerdtree.vim in your .vimrc
01:33  mgedmin: (check the filename, I'm not sure what it's actually called)
01:34  jamessan: or use an autocmd to run NERDTree when Vim finishes starting -- au VimEnter * NERDTreeToggle
01:34  MarcWeber: dsirijus: Delete what?
01:35  dsirijus: well, if i need to install them again, should i uninstall all the plugins now, including addon manager?
01:35  MarcWeber: dsirijus: No need to reinstall anything. I'll drop the "b' argument which will make Vim parse the file even thought its \r\n.
01:36  dsirijus: MarcWeber: isn't there still an issue of missing dependencies?
01:37  MarcWeber: dsirijus: Did vim install the vim-addon-mw-utils path ?
01:37  dsirijus: no
01:37  dsirijus: i mean, no, if it's supposed to be in vim-addons dir
01:37  MarcWeber: dsirijus: Can you try :echo scriptmanager#AddonInfo('vim-addon-fcsh') ?
01:37  gdoteof_home: mgedmin: :runtime /etc/vim/plugin/NERD_tree.vim
01:38  mgedmin: no, not a full path
01:38  mgedmin: just the part starting with plugin
01:38  gdoteof_home: k
01:38  mgedmin: :runtime means "look for this in all configured runtime paths"
01:38  gdoteof_home: ah. thanks that worked beautifully
01:39  mgedmin: although jamessan's suggestion was cleaner/nicer
01:39  MarcWeber: dsirijus: Do you have a python enabled Vim? Try :echo has('python')
01:39  dsirijus: MarcWeber: 0
01:40  dsirijus: and i don't know how to copy the text of the other echo you requested
01:41  gdoteof_home: jamessan: thanks, sorry i didn't see yours
01:47  gdoteof_home: :let NERDTreeQuitOpen=1
01:48  gdoteof_home: that should make opening a new file close the nerdtree right?
01:48  gdoteof_home: my main problem i sthis, when i open a file in a new tab with nerdtree, the existing tab is labeled 'NERDTree'
01:48  gdoteof_home: which isn't helpful
01:51  Rakko: hmm, dunno, gdoteof
--- Log closed Mon Nov 08 01:53:02 2010
--- Log opened Mon Nov 08 02:03:27 2010
02:03 --- Users 564 nicks [0 ops, 0 halfops, 0 voices, 564 normal]
02:04 --- Channel #vim was synced in 89 seconds
02:16  spiiph: gdoteof_home, stop using tabs to keep track of your files.
02:17  gdoteof_home: spiiph: ok there's a thought.  what do you recommend?
02:17  nate-: I agree with spiiph, buffers are where it's at
02:17  gdoteof_home: how do you manipulate buffers
02:17  gdoteof_home: personally i mean, not :bNext
02:17  nate-: gdoteof_home: bufexplorer plugin does a good job
02:18  spiiph: :b and <C-6>, mainly.
02:18  spiiph: Use a buffer plugin if you need.
02:19  nate-: gdoteof_home: http://www.vim.org/scripts/script.php?script_id=42 or http://www.vim.org/scripts/script.php?script_id=159 are the most common plugins
02:19  gdoteof_home: nate-: thanks
02:19  unkanon: what's the equivalent of C-l in vim?
02:19  unkanon: it centers the screen on the line i'm in
02:19  spiiph: zz
02:20  kwtm: unkanon: I think it's jjjjjjjjjjjjjjkkkkkkk
02:20  kwtm: Just kidding.
02:20  unkanon: spiiph: beautiful :)
02:20  kwtm: Okay, I'll leave now. :)
02:20  unkanon: kwtm: LOL
02:20  nate-: haha
02:20  unkanon: it was so funny the way he said it
02:21  unkanon: *soothing voice* "to center the screen on the selected line, simply type jjjjjjjjjjjjjjjkkkkkkkkkkkkkkk"
02:23  gdoteof_home: yeah bufexplorer is perfect
02:23  gdoteof_home: any recommendations on a mapping for \be
02:24  nate-: gdoteof_home: I use that mapping but with , as the <leader> instead of \
02:24  spiiph: Before you use , as your leader, you should realise that , is useful.
02:24 --- second is now known as sec^nd
02:25  Rakko: why not use \be, gdoteof_home ?
02:35  nate-: spiiph: what am I missing using , as <leader> ?
02:36  spiiph: :h ,
02:38  nate-: hm, what do others use as their <leader> instead of the hard to reach \ ?
02:40  fow: I use -; I never found the default use very useful
02:40 * mgedmin uses "\" as leader, as a garbage dump for random plugins to fight over, and "," for his own custom day-to-day shortcuts
02:46  strull_: on a german keyboard \ is hard to type. Here ä, ö, ü or ß are good choices.
02:58 --- estragib_ is now known as estragib
03:38 --- squiggy_ is now known as squiggy
04:12  homekevin: Is there an autocmd for each time the buffer in a window changes?
04:12  homekevin: BufWinEnter doesn't trigger for :split
04:49  nate-: homekevin: BufEnter ?
04:51  nate-: or BufLeave - before leaving to another buffer
04:51  nate-: not sure if that's what you're after
04:52  nate-: :help autocommand-events
05:09 --- squiggy_ is now known as squiggy
05:25 --- _Unode is now known as Unode
05:48 --- frogonwheels is now known as frogonwheels_
--- Log closed Mon Nov 08 05:59:24 2010
--- Log opened Mon Nov 08 05:59:47 2010
05:59 --- Users 559 nicks [0 ops, 0 halfops, 0 voices, 559 normal]
06:01  ice799: Hi there. I am using 7.2 on ubuntu 10.10. I have a very large C function so large that parts of it are not viewable due to my small screen size.
06:01  ice799: When I move the cursor over a brace, vim will highlight the matching brace.
06:02  ice799: Is there a way to get vim to jump to the matching brace if the matching brace is off the screen?
06:02  gkatsev: %
06:02  ice799: thanks
06:02 --- Channel #vim was synced in 166 seconds
06:02  gkatsev: np
06:04  ice799: interesting, looks like this code is confusing vim.
06:55 --- Unode is now known as _Unode
07:01  LaoLang_cool: hello, does vim have ported to any phone? I'm searching for such a phone
07:06  Jerub: it'll run on android, but why you would, i don't know
07:06  Jerub: my onscreen keyboard doesn't even have an escape key
07:10  LaoLang_cool: Jerub: yes, that's the key problem, why haven't such a phone with  esc/ctrl/alt keys existed...
07:11  LaoLang_cool: I heavily use plain text, so I want to use somehow powerful text editor on phone
08:14 --- MikhX_ is now known as MikhX
08:17  jorrit: Hi
08:26  mavrc: Hello.
08:42 * ekontsevoy goes to bed
09:21 --- Friesia_ is now known as Friesia
09:54  _rane: how come doesn't yt$ yank till end of line?
09:57  muffinmad: _rane: y$
09:57  _rane: oh
09:59 --- silex is now known as Silex
10:04  the_isz: _rane: yt$ would only work like y$ if a literal $ would be the last char on the line and even then you'd miss exactly that char ;)
10:07  _rane: oh right
10:07  _rane: t wants literal character
10:12 --- frogonwheels_ is now known as frogonwheels
10:21  pyrho: blist
10:22  pyrho: :x, sorry.
10:23  the_isz: pyrho: ignorance is blist?
10:28  chalcedony: gak! how do i undo 'u' undo?
10:28  chalcedony: i just undid the file with my notes in it /
10:28  Raimondi_: <C-R>
10:28 --- Raimondi_ is now known as Raimondi
10:30  chalcedony: THANK YOU!
10:30  Raimondi: No proble, :)
10:37 --- noneo_ is now known as noneo
10:39  pyrho: the_isz: (:
10:44  Silex: what was the name of the plugin taht acted like textmate "go to file" ?
10:44  Silex: I had  a discussion with someone the other day about it
10:44  Raimondi: What does it do?
10:45  Silex: I'm using FuzzyFinder but he said this plugin's is faster
10:45  Raimondi: Command-t
10:45  Silex: that one
10:45  Silex: thanks
10:45  pyrho: better than fuzzyFinder.. interesting :)
10:45  Silex: faster
10:45  Silex: not better
10:45  Silex: :)
10:46  pyrho: :) i'll check it out.
10:46  pyrho: actually, I mostly use FuzzyFinder for ctags searches more than opening files
10:46  LoRe: does command-t work with vim 7.3 by now?
10:48  Raimondi: It has a problem with MacVim, but I don't know anything else.
10:49  pyrho: btw, does anyone know of a method to have C++ completion working properly ? I can't get omnicppcomplete to work as expected, it only complete inline functions and data members.
10:51 --- Silex is now known as silex
10:52  LoRe: they've workarounded it: https://wincent.com/issues/1617 nice :)
10:55  saimon_: Hi...Is there a quick way of doing the following in vim: https://gist.github.com/667532
10:55  _rane: what's the reverse of C-O?
10:57  Raimondi: Read under  :h Ctrl-O
10:58  Raimondi: saimon_: Do you want to put text from other file?
10:59  saimon_: Raimondi: no..I just want to remove the new line and bring the braces onto the same line...
11:00  Raimondi: 3J
11:01  saimon_: Raimondi: 3J?
11:02  Raimondi: Yes, in normal mode type  3J
11:02 --- silex is now known as Silex
11:02  Silex: woa, CommandT *is* fast
11:02  Silex: pyrho: use gccsense
11:02  pyrho: Silex: by the name i'm guessing it won't work under windows ? :X
11:03  Silex: pyrho: I'll be able to answer in 1-2 hours
11:03  Silex: I'm building on windows :)
11:03  pyrho: :) i'll look into it. Thanks for the tip.
11:03  Silex: I think it'd just work with cygwin
11:03  Silex: atm the pages says it's not supported
11:03  Silex: but so far it builds fine
11:03  pyrho: that's what i thought
11:04  Silex: *not supported for mingw on windows, but cygwin should just work
11:04  Raimondi: saimon_: Go to the first line and press  3J
11:04  saimon_: Raimondi: wow...that's great...thanks
11:04  Raimondi: J is uppercase
11:04  saimon_: reading up on J
11:04  Raimondi: np
11:06  saimon_: Raimondi: it's things like that that get me hooked on vim. I just knew there had to be a shortcut
11:08  Raimondi: Pretty powerful tool :)
11:18  kwtm: Hi! Need help with regex.  How do I say, "change all occurrences of A into B, but only in the second half of the line where it occurs after C"?  For example, I want to change "AA C AA" into "AA C BB", and "AAAA C AAAA" into "AAAA C BBBB".
11:20  the_isz: kwtm: for vim: s/C \zsAA/BB/
11:20  Silex: it's something like /C/s/A/B/g
11:20  Silex: oh or that yeah, simpler
11:20  _rane: is it possible to fold if-blocks etc. without specifying amount of lines?
11:20  Silex: the_isz: why the \zs ?
11:21  kwtm: the_isz: Thanks.  I'll need some time to comprehend that ... so the "\zs" means start applying after this?  Anyway, let me give it a try...
11:21  Silex: seems it'd work without no?
11:21  the_isz: _rane: go to the opening { and say zf%
11:21  Silex: ooh, got it, to ignore the C part
11:21  kwtm: Silex: I think yours will change any occurrence of A on any line that contains C?
11:21  the_isz: _rane: or use syntax folding, i assume that should wor, too
11:21  Silex: kwtm: yeah you're right. I'm new to ranges
11:22  _rane: the_isz: no :h for syntax folding
11:22  Silex: kwtm: how would that look with ranges? hard to do?
11:22  the_isz: _rane: try  :he fold-method
11:23  kwtm: Silex: Well, I already know that every line needs to be changed.  But only PART of every line needs to be changed.
11:23  _rane: the_isz: so I should :set foldmethod=syntax and then do what?
11:23  Silex: kwtm: you have a solution with the_isz's code, I'm just curious about how to write it the range way
11:23  the_isz: kwtm: try my suggestion. if it doesn't do what you want, you've kept information from us ;)
11:23  the_isz: _rane: read on there, everything about folding is in the help :)
11:24  the_isz: Silex: ranges are line-based, like line 3 to 5, it's difficult (if not impossible) to apply to columns
11:25  Silex: the_isz: I see. Thanks
11:25  _rane: 2. Fold commands *fold-commands* *E490* has nothing on how to apply syntax folding
11:25  the_isz: Silex: you're welcome.
11:25  kwtm: the_isz: It doesn't work, but I'm not sure why since I don't know what it's supposed to do yet.  Here are more details: The text is a list of filenames with spaces.  I want create a script to rename all the files with spaces replaced with underscore "_".
11:26  schweizer: how can i see and change a file's encoding in vim?
11:26  Silex: pyrho: ../libtool: line 997:   512 Segmentation fault      (core dumped)
11:26  Silex: that doens't look good
11:26  kwtm: the_isz: So, first I so %s/^\(.*\)$/mv "\1" "\1"/, which changes (say)   This Filename Has Spaces.txt  to  mv "This Filename Has Spaces.txt" "This Filename Has Spaces.txt"
11:26  the_isz: _rane: try  zf  and  zd
11:27  kwtm: But then I have to change the second "This Filename Has Spaces.txt" to "This_Filename_Has_Spaces.txt"
11:27  kwtm: So in my example, A = space, B = _ , and C = " " or some other delimiter which I can choose to put between the two quoted strings.
11:28  kwtm: Let me try it with actual AA BB and C as given above, and then try to figure out what \z does.
11:28  the_isz: kwtm: wait, it won't work in this case
11:28  the_isz: kwtm: like i assumed, you were keeping info ;)
11:29  kwtm: What should I have said?  C is not a single character?  Not all occurrences are equal length?>
11:29  the_isz: kwtm: in this case, i'd probably insert some sort of marker during the first replacement, like  %s/^\(.*\)$/mv "\1" MY_MARK "\1"/
11:29  kwtm: And where can I find info about \z?  I can't seem to Google it --the backslash seems to escape more than I want.
11:30  pyrho: Silex: :/ anyway I realized that we're windows only atm... so no one has tested gcc compilation.
11:30  kwtm: the_isz: Right, C can be a marker.  Is it just that I used '" "' as a marker that it doesn't work?  I can try something else.
11:30  muffinmad: schweizer: :e ++enc=utf-8
11:30  schweizer: thx muffinmad
11:30  Silex: pyrho: it'd just be for the autocompletion, you compile with whatever you want. I'm using vc++ with scons
11:30  Silex: pyrho: I'll keep you posted with my results
11:31  the_isz: kwtm: you don't distinguish between the first and second file names' " delimiters
11:31  kwtm: the_isz: Maybe I got it wrong; it says "Pattern not found: MY_MARK \zs".  Is that a literal "\zs" that I put in, or is that a quoted control Z?
11:32  kwtm: the_isz: But the string " "  (that is, quote space quote) only occurs in between the two strings, and I thought it would be a valid delimiter, no?
11:32  the_isz: kwtm: see  :he \zs
11:32  the_isz: kwtm: give me a sec man, i can't think as fast as you're typing :D
11:32  kwtm: the_isz: I tried it with a marker, and it still thinks \zs is a literal string.  Will check :h \zs.  (I hope ":h" is the same as ":he")
11:32  the_isz: kwtm: it is
11:33  kwtm: Ok, I see it: there should not be a space before "\zs"
11:33  the_isz: kwtm: i still don't think this will help you
11:34  the_isz: kwtm: because i see no way of saying "replace every space after the marker and keep the rest as it is"
11:34  kwtm: the_isz: You're right... I tried it and it replaced only a single string... maybe I should just iterate the replacement, then...
11:35  the_isz: kwtm: yeah, i think in this special case a little script would be more useful than a regex replace
11:35  the_isz: kwtm: like read line into variable - put var - replace space in var - put var
11:36  kwtm: the_isz: either that, or place the replacement string onto a separate line (now I have to figure out how to say "change every line ^\(.*\)$ into two lines mv "\1" \n MY_MARK "\1"  ) and then replace lines containing MY_MARK and then join.
11:36  the_isz: kwtm: that's easy
11:36  kwtm: So... *is* there a way to replace a string with one containing newline that splits the string into two?
11:36  the_isz: kwtm: newline is  \r  in the replacement string
11:36  the_isz: kwtm: match lines with the marker using :g
11:37  the_isz: kwtm: like  :g/MY_MARK/s/...
11:37  kwtm: the_isz: Yeah, I think I'll do that.  g/MY_MARK/s/ /_/
11:37  the_isz: kwtm: like  :g/MY_MARK/%s/... that is
11:37  kwtm: You beat me to it.... :)
11:37  the_isz: yay :D
11:38  kwtm: And then how do I join every other line?  Do I just hold down shift-J until the computer starts beeping in annoyance? :)  Or is there something like gJ?
11:38  kwtm: I mean :gJ
11:38  the_isz: kwtm: use macros! that's even better i guess
11:39  the_isz: kwtm: qqyyps/.../kJjq
11:39  the_isz: kwtm: qqyyp:s/.../kJjq
11:39  the_isz: kwtm: qqyyp:s/.../<cr>kJjq
11:39  the_isz: kwtm: then you can make the macro auto-execute
11:40  the_isz: kwtm: it think the syntax was something like  :let @Q=@q  . then do @q and watch vim do all your work for you
11:40  kwtm: the_isz: Actually, I'm trying to script this actual change.  I'll have to do this weekly with new files coming in, so I was hoping to do this from shell: "vim -c 's/line/line with split \r/
11:40  kwtm: etc.
11:40  the_isz: kwtm: and remember to hum Queen: It's a kind of magic while its doing so :)
11:41  kwtm: So the macro would preclude script use...
11:41  kwtm: Oh... autoexecute means it CAN be used in a script?
11:41  the_isz: kwtm: after the script works just put it into a function and map that to a key!
11:41  the_isz: kwtm: no, auto-execute means the macro calls itself recursively
11:43  the_isz: kwtm: oh and if someone's watching you say something like "BEHOLD!" in a dark-wizardry way please
11:43  kwtm: Hmm... okay, will try out these ideas.  Thanks!
11:43  the_isz: kwtm: (you can do that just for yourself, too)
11:43  the_isz: kwtm: you're welcome
11:44  the_isz: kwtm: you can see your recorded macro with  :reg q
11:44  _rane: me again, sigh :] what's the fastest way to wrap some text inside " etc. ?
11:44  the_isz: (if you named it q, that is)
11:45  Vapour: hello there. I want to write an array: array{1} = x; array{2} = y; etc., so I yankpasted "array{1} = " into like 20 lines
11:45  Vapour: now the clue: how can I increase the index automatically?
11:46  kwtm: the_isz: You said ":g/MY_MARK/%s/..." but is the % necessary?  Wouldn't the g/MY_MARK/ already run the s command on all the needed lines?
11:47  the_isz: kwtm: of course, you're right
11:47  kurkale6ka: Vapour: http://www.vim.org/scripts/script.php?script_id=3255
11:47  the_isz: kwtm: actually, the % is plain wrong
11:48  the_isz: kwtm: but scripting this in vimscript would be a nice way, too. have a look at  :he escape()
11:49  Vapour: kurkale6ka: looks good, thx :)
11:49  kurkale6ka: Vapour: np
11:53  errordeveloper: hey ..
11:53  errordeveloper: I am trying to figure how to use :tags
11:53  errordeveloper: I think I'm missing something
11:53  errordeveloper: i ran ctars -R *
11:54  errordeveloper: and then opening one file and doing :tags
11:54  errordeveloper: it shows me a couple of things
11:54  errordeveloper: not sure why just these few things
11:54  errordeveloper: it's a C code of farily reasonable size
11:55  pyrho: errordeveloper: that's because :tags only shows the "tag stack"
11:55  pyrho: :h :tags
11:55  kurkale6ka: errordeveloper: now that you've created your file, use :ta functionname for instance
11:56 --- Silex is now known as silex
11:56  kurkale6ka: errordeveloper: :ta<tab> or ^d will give you a choice list
11:56  kwtm: the_isz: Aaarrgh!!  It *almost* worked!  Not vim's fault.  Unfortunately, I renamed "dirname with spaces" to "dirname_with_spaces" before I tried to rename "dirname with spaces/filename with spaces" so of course "dirname with spaces" no longer exists... aaargh, I think I'll just have to walk the frigg'n directory tree.
11:57  kwtm: I *hate* people who put spaces into file/directory names.
11:57  kwtm: YES, the 30,000,000 Windows users out there staring at me --I'm talking to YOU!!
11:58 --- silex is now known as Silex
11:59  the_isz: kwtm: hmm... yeah, you'll have to iterate them bottom-up. not nice...
12:00  kwtm: >sigh<  I guess I have to put more faith in myself.  I just used the walk-directory script and super-rename script I wrote years ago (couldn't even remember the proper syntax) and it did it in 10 seconds.
12:00  kwtm: But, man, even that was not too elegant (had to iterate twice).  This concept of walking a directory structure as you rename it is ... pretty nasty.
12:01  the_isz: kwtm: indeed
12:01  errordeveloper: okay .. I can see Ctrl-] works, wow! :)))
12:01  errordeveloper: :)
12:01  kwtm: Or maybe there's a way to specify "mv --dont-choke-on-spaces-in-filenames-you-antediluvian-piece-of-unix-command"
12:03  kwtm: the_isz: I thought of a way to do it within vim as we discussed, but I was sort of leading up to my question to you: how do I reverse the order of lines in a text file, in vim?  Is this vimscript material, or is there some command like "10,20reverselines" or something?
12:05  the_isz: kwtm: there's a solution on that on the vim wiki
12:05  kwtm: I feel a vimscript coming on... :P
12:06  kwtm: Is it wiki.vim.org?
12:08  the_isz: kwtm: yeah
12:08  kwtm: I found it.  Very elegant to use "g/^/m0", but they have another solution: ":%! tac".  What's the % for?  Does that feed the entire file to the "tac" command?
12:08  the_isz: kwtm: yes
12:09  kwtm: Very nice.  I can envision doing something like ":%! sed -e 's/A/B/' "
12:09  kwtm: just kidding.
12:09  kwtm: Or maybe even ":%! vim -c '%s/A/B/' "
12:09  the_isz: kwtm: and if you want to write a more sophisticated solution, i'd suggest you have a look at python 3's os.walk (in 2 it's os.path.walk)
12:10  the_isz: kwtm: (if you're into python programming)
12:10  kwtm: the_isz: Actually, I did do that --that's the dir-walk solution I ended up using.  I just couldn't remember the exact syntax I used for my command-line script and was hoping to do everything internally through vim, but -- yeah, object oriented module and all that using os.walk, and even the renaming script is one from Python.
12:11  kwtm: Hacker Ethic #2 says "no problem should ever have to be solved twice", but the corollary Murphy's Law says, "but it takes forever to find out how the problem was solved the first time"
12:12  kwtm: So ... now with the spaces gone from the filename, I can actually get STARTED on doing what I wanted to do in the first place.  Aaarrgh!
12:20  the_isz: kwtm: oh man, i only now realize what you're trying to do. why the heck don't you just handle the spaces properly? it's not like they're forbidden in a unix file name...
12:20  the_isz: kwtm: you'll have to escape some chars anyway, won't you?
12:21  kwtm: the_isz: I guess that's the proper way, but there are a number of reasons why it won't, including probably due to my own poor shell programming.
12:22  the_isz: kwtm: wouldn't it then have been wiser to join #bash?
12:22  kwtm: For example, how do I iterate on a shell variable containing filenames with spaces?  I want to say:  for FILENAME in "filename A" "filename B" "filename C", but then the three filenames are contained in a variable $FILENAME_LIST.
12:23  kwtm: the_isz: Yes, I should join #bash, but you see, those scripts have already been written a long time ago.  So I don't want to go back and change them all.  I *should have* joined #bash when I wrote those scripts, but at the time I didn't realize I needed to.
12:23  the_isz: kwtm: you're making the same mistake again (sorry). you're telling what the problem is instead of telling what you want to achieve. i assume you're building up FILENAME, aren't you?
12:23  kwtm: And in fact, right now it's more #dash that I need to join, to make sure I can run on a box that's not using bash.  Like my smartphone. :(
12:24  the_isz: kwtm: argh... ok, that makes matters more complicated
12:24  kwtm: the_isz: Well, there are a number of scripts in general which need to iterate on a bunch of filenames, but when those filenames contain spaces, then my scripts will choke because in general they are not built for that.  I am giving you examples of why I can't just escape the spaces.
12:25  the_isz: kwtm: just to show you a nice way of looping in bash:  while read f; do cmd "$f"; done< <(cmd1_spitting_out_filenames)
12:26  the_isz: kwtm: but we're going too far off-topic here. good luck getting your stuff going!
12:26  ManDay: I'd like to start vim so that it does the following: Open a file for and save the file to disk every n seconds.
12:26  ManDay: How would I do that?
12:26  kwtm: the_isz: Interesting.  "read" will read from variable, not from user input?  I realize that this is not the #bash channel, but here's a metaquestion: is there a channel for shell programming that is not tied to #bash or #ksh or any particular shell?  Just Posix-compliant scripting in general?
12:27  ManDay:  /j #posix ?
12:27  kwtm: Ahh, you have other people to help with more relevant problems.  Never mind, I'll figure it out someday.  Right now things are okay.
12:27  ManDay: #bash is quite helpful with any sorts of things kwtm
12:27  kwtm: ManDay: Wow.  I learned something new!  "/j" is the same as "/join"?  I didn't know that!
12:27  ManDay: It is for some IRC clients only
12:28  kwtm: ManDay: Thanks for the tips.
12:28  ManDay: For most, though. Yw.
12:39  kwtm: Okay, my next question is back on topic for vim.  I want to pass (part of the) line contents to an external command.  In my case, it's a phone number which I would phone by invoking an external script.  If the line says "202-456-1414", for example, I want to run the command ":! phone 202-456-1414".
12:40  kwtm: Actually, it would be nice to put in the contents of text that is yanked, but I don't know if those contents are called the "buffer" or "register" or "clipboard" or what, and I don't want to look excessively stupid on the #vim channel.  Not that I'm succeeding with that...
12:40  spiiph: :!phone <C-r>"
12:41  kwtm: Oh, I see, <C-r> will put the text line onto the ":" command line, then.  Thanks.
12:44  kwtm: spiiph: I tried it, and I see that (if I say "yyy to yank the line into register y, then) <C-r>y will put the contents of register y.  What is the name of the default register if none is specified?  (E.g. if I just type yy instead of "yyy)
12:48  ManDay: I'd like to start vim so that it does the following: Open a file for and save the file to disk every n seconds. How would I do that?
12:49  jink: Open a file for ...?
12:49  FernandoBasso: http://vim.wikia.com/wiki/Auto-save_current_buffer_periodically
12:49  ManDay: editing, dammit
12:49  ManDay: I'd like to start vim so that it does the following: Open a file for editing and save the file to disk every n seconds. How would I do that?
12:50  ManDay: Thanks FernandoBasso sorry - didnt notice you replied
12:50 --- second is now known as sec^nd
12:52  ManDay: How would I disable the swapfile?
12:54  ThiefMaster: is there a shortcut to repeast the last search-replace operation?
12:54  spiiph: kwtm, the name I gave you, "
12:54  ThiefMaster: i.e. like 'n' but not only for searching but for search/replace
12:55  FernandoBasso: ManDay: I'd rather use :set directory=~/some_dir for storing temporary swap files.
12:56  ManDay: I'd like to know whether I go about this the right way: I want to bash-script a "live"-groff notepad. for that, I need to EITHER pipe the data into a program every n seconds OR make the program read from a file every n seconds. Would I use a vim timer to do that?
12:56  ManDay: FernandoBasso: unless i can use the swapfile for my autosave thingy i want to disable it
12:56  ManDay: because it would be redundant and unneeded for anyway
12:56  spiiph: ManDay, Vim has no timers.
12:56  FernandoBasso: ManDay: You don't use swapfile for backup.
12:56  FernandoBasso: For that you :set backup.
12:57  ManDay: FernandoBasso: what is the swapfile good for them?
12:57  FernandoBasso: and then :set backupdir=~/some_dir
12:57  spiiph: Vim crashes, terminal disconnects, power outages
12:57  ManDay: right, thats what i meant. i wrongly called that a backup then
12:57  ManDay: i dont want to account for that
12:58  ManDay: if vim crashes im fine with everything being lost
12:58  spiiph: :set noswap
12:58  ManDay: i d rather prefer if that "live version" of the current file could be a one-to-one copy of the file so i could actually use it
12:58  ManDay: (with another program)
12:58  ManDay: thanks spiiph
12:59  ManDay: so in order to save a file / execute a command every n-seconds.... what would I do? that au CursorHold thing you just gave me?
13:02  FernandoBasso: ManDay: If that is what you are looking for, yes.
13:03  ManDay: there doesnt happen to be a CLI switch which executes a command?
13:03  ManDay: (id like to source a file upon startup but dont want to have to make sure that my normal config is loaded)
13:03  dsirijus: can i somehow put contents of a file to be ran as external command in vim?
13:03  dsirijus: (windows, gvim)
13:05  ManDay: dsirijus: :!bash -c ...
13:05  ManDay: or what?
13:05  ManDay: erm :!bash <file>
13:05  joeytwiddle: or perhaps :source <file> to execute that file's commands in vim
13:06  dsirijus: yup, bash is the solution... thanks
13:06  joeytwiddle: ManDay: every file in ~/.vim/plugins/ gets sourced at startup
13:07  joeytwiddle: alternatively, you can add :source <file> to your .vimrc
13:07  joeytwiddle: but maybe i misunderstood your question
13:07  ManDay: joeytwiddle: the answer to my qeustion is the + or -c switch
13:07  ManDay: yes you did. thanks tho
13:07  ManDay: i should have read man vim more thoroughly
13:07  joeytwiddle: ah yeah, -c rocks.  works for less as well as vim :)
13:08  ManDay: and for bash too
13:10  _rane: how do I set hard tabs temporarily?
13:15  _rane: ah, :set noexpandtab
13:57  Kaspi: hello
13:58  amcsi: hello
13:58  Kaspi: how to exit vim?
13:59  zomg: :q if you don't want to save, :wq if you do want to save
13:59  the_isz: Kaspi: have a look at vimtutor if you'd like to get in touch with vim.
14:00  amcsi: how do I tell vim to never show the void below the last line? meaning whenever I scroll all the way down with pagedowns, I want the last line to be on the bottom, and I don't want any scrolling down further
14:00  Kaspi: zomg: oh, thank you
14:01  the_isz: amcsi: i don't think that's possible. what should vim do when you open a file that only contains 1 line but you're on a 40 line terminal/shell?
14:01  the_isz: amcsi: i could imagine you might be able to change those fill chars vim uses...
14:01  amcsi: except then. It should show the void if I don't have enough text to fill the screen
14:02  amcsi: the important thing is I don't want to waste any screen view
14:03  amcsi: there's scrolloff, but that keeps my cursor on the center mos tof the time
14:07  sitaktif: amcsi: zt and zb may help you]
14:07  sitaktif: (and zz to center)
14:08  amcsi: I know that
14:09  amcsi: that is fine, I just never want to see void if I have enough text for scrolling
14:29 --- altamic_ is now known as altamic
14:33  _rane: what did I do to make vim open files so that code is automatically folded?
14:35  _rane: must be this, set foldmethod=syntax
15:18  pif: hi, is still necessary to use a BufReadPost hack to find the cursor to its former position when re-editing a file?
15:18  pif: or is there now a setting?
15:20  sh_sh: hi
15:23  s1m0ne: hi I use the gnome-terminal in Ubuntu 10.10. I currently work on a LaTeX file with the vim latex plugin, and with \lv the plugin opens evince (the pdf viewer in GNOME) and the problem is, I can see the output of the process (evince) merged with my sourcecode in vim. how can I avoid this?
--- Log closed Mon Nov 08 18:38:51 2010
--- Log opened Mon Nov 08 18:38:59 2010
18:38 --- Users 613 nicks [0 ops, 0 halfops, 0 voices, 613 normal]
18:40 --- Channel #vim was synced in 88 seconds
18:45  agib: I have set relativenumber in my vimrc but somehow it always turns off during my editing... anyone know what might be causing this?
18:46  rson: Raimondi: ping
18:46  strull: agib: try :verbose set rnu?  whith the ?
18:47  agib: strull: hmm it changed it to relative number but didn't see anything else happen
18:47  Pendrag0n: I hope you screen users find this as useful as I do: http://pastebin.com/0BfRVS12
18:47  agib: hmm do I need it in an autocommand?
18:48  Pendrag0n: I just put it in the top of my file
18:48  agib: when I open a new buffer with PeepOpen it doesn't have the relativenumber set...
18:55  strull: agib: the command I gave you shouldn't have set it. Did you read carefully what I wrote?
18:55  agib: I put in ":verbose set rnu?"
18:55  agib: and it changed it.. let me try again
18:56  agib: strull: ok it just says "relativenumber"
18:56  agib: but it's not showing relative numbers
19:04  agib: strull: what should I be looking for when I do ":verbose set rnu?"
19:06  strull: it should tell you, where it was last set
19:06  strull: or reset (for that matter)
19:09  minh: Hi! Is there a way to surpress the implicit newline after 'echo' ?
19:10  iaj: agib: peepopen doesn't toggle rnu for me..
19:10  agib: iaj: hmm really weird
19:10  agib: I usually have set relativenumber... but when I open a doc with peepopen it sets it back to not relativenumber
19:13  rson: Raimondi: i think you may have missed a few files on that merge
19:13  strull: minh: try :echon
19:13  strull: what is peepopen?
19:14  minh: strull: PERFECT
19:15  minh: strull: can you also specify formating? (i.e. printf-like)
--- Log closed Mon Nov 08 19:21:43 2010
--- Log opened Mon Nov 08 19:26:56 2010
19:26 --- Users 615 nicks [0 ops, 0 halfops, 0 voices, 615 normal]
19:26  unkanon: how do I map :bd to execute :Bclose? right now I either have to type :Bclose or \bd (apparently my "leader" key is \, I don't know what that means)
19:27  unkanon: oh sorry
19:27  unkanon: bryanl: hold on
19:28 --- Channel #vim was synced in 81 seconds
19:28  spiiph: The only thing you can do is :cnoremap bd
19:29 * mgedmin wonders if mentioning :cabbrev bd would be a good thing or a bad thing
19:29  spiiph: Or cabbrev bd, of course.
19:32  unkanon: bryanl, spiiph : somehow now :bd is working as :Bclose
19:32  unkanon: the line I have is:
19:33  unkanon: nnoremap <silent> <Leader>bd :Bclose<CR>
19:33  unkanon: but that is what makes \bd call :Bclose
19:34  unkanon: bryanl: so if I made a function called bd that calls Bclose then that would overwrite :bd ?
19:35  Silex: how do you :bd current buffer without closing the window? do you have to somewhat map it to a longer sequence that does :bn then :bd# ?
19:36  unkanon: Silex: I'm afraid it's more complex then that, I'm using a script that defines a Bclose function:  http://vim.wikia.com/wiki/Deleting_a_buffer_without_closing_the_window
19:36  Silex: unkanon: ah perfect. Thanks
19:39  Silex: unkanon: hum, just saw about http://www.vim.org/scripts/script.php?script_id=1147
19:39  Silex: might be simpler
19:40  unkanon: Silex: i'll check it out
19:41  dp: is there a single-keystroke that will let me paste at the end of the line?
19:43  estragib: not unless you map it
19:43  gkatsev: :map m $p<CR>m
19:43  mgedmin: m is a very useful key, I'd hate to sacrifice it by mapping
19:43  DHulme: that's no good: I use m more often than $p
19:44  DHulme: we all need space cadet keyboards
19:44  gkatsev: I rarely use m, which is why I chose it.
19:44  mgedmin: with pedals
19:44  gkatsev: there are those
19:44  dp: I don't know that I've ever created a mark
19:44  gkatsev: there you go
19:46  Silex: bufkill works fine by me
19:47  gkatsev: does vimscript has the ternary if operator?
19:47  Silex: yes it has
19:49  gkatsev: actually, never mind, I dont need it, lol
20:00 --- Silex is now known as silex
20:17  ezzieyguywuf: is there a way in vim to flip all lines that are highlighted?
20:17  ezzieyguywuf: i.e. if I do shift-v and select three lines that contain, respectively, a b c, they would get 'flipped' to c b a
20:18  gkatsev: you can create a macro that would flip 3 lines easily.
20:18  gkatsev: anything more complicated you'd want a plugin or something
20:18  ezzieyguywuf: I want to flip an arbitrary number of lines
20:18  estragib: or !tac
20:19  creidiki: hhhhmmm
20:19  creidiki: how do I map C-; to ;? because I have ; mapped to :
20:19  ezzieyguywuf: could I do !tac on just  part of the file though
20:19  gkatsev: :map ; <c-;>
20:19  estragib: yes
20:19  ezzieyguywuf: how?
20:20  estragib: visual select, !tac
20:20  gkatsev: :'<,'> !tac
20:20  creidiki: gkatsev: other way around :D
20:20  estragib: or !<motion>tac
20:20  ezzieyguywuf: that works wonderfully
20:20  gkatsev: creidiki: oh, then do it the otherway arround
20:20  teratorn: is there any way to have "safe" modelines?
20:20  creidiki: gkatsev: but that doesnt work for some reason
20:20  gkatsev: weird
20:20  gkatsev: oh, noremap
20:20  estragib: creidiki: it doesn't in the terminal anyway
20:21  estragib: there is no C-; in terms
20:21  teratorn: i hear it's supposed to be a good idea to :set nomodeline, but is there any way to make it safe?
20:21  creidiki: im on windows
20:21  gkatsev: that too, lol
20:21  creidiki: so terminal is not an issue
20:21  creidiki: cause it aint happening
20:21  gkatsev: creidiki: try :noremap <c-;> ;
20:22  creidiki: i have nnoremap <C-;> ;
20:22  gkatsev: and it doesn't work?
20:22  creidiki: nope
20:22  mgedmin: there's no <C-;> in gvim either
20:22  estragib: ah. there you go :)
20:22  creidiki: goddamnit :|
20:22  gkatsev: yeah, not seeing it.
20:22  creidiki: i dont want to have to push shift every time i want to pull up commandline, it feels like emacs
20:22  mgedmin: for better or for worse, gvim emulates a terminal
20:23  gkatsev: creidiki: you can test for a key by going into insert mode and doing <c-v>{key}
20:23  gkatsev: mgedmin: but gvim has <c-space> doesnt it?
20:23  mgedmin: terminals do too
20:23  mgedmin: it's same as <c-@>
20:23  mgedmin: or <Nul>
20:23  gkatsev: oh, i mean <s-space>
20:23  telemachus: teratorn: maybe this? http://www.vim.org/scripts/script.php?script_id=1876
20:24  mgedmin: hm, okay
20:24  creidiki: damnit
20:24  creidiki: hmm
20:24  creidiki: what to bind in that area thats free-ish that i can co-opt for ;
20:24  ice799: is there a way i can ask vim to automatically wrap at 80 characters per line?
20:24  gkatsev: :h 'tw'
20:25  teratorn: thx
20:25  gkatsev: ice799: ^
20:25  ice799: gkatsev: thank you.
20:26  estragib: creidiki: you *could* map <Leader> to _ instead of \ and use \ as :
20:26  estragib: i'm not sure that's a good idea
20:26  creidiki: i have leader mapped to ,
20:26  estragib: well, then \ is free?
20:26  creidiki: but its far away. amusingly, C-; doesnt exist, but Alt-; exists
20:27 * creidiki bemused
20:27  unkanon: Ctrl- ?
20:27  creidiki: whats the way for alt, is it <M-something>?
20:27  gkatsev: <A-;>
20:27  creidiki: thanks :)
20:28  gkatsev: though, I think <M-;> would also work
20:28  creidiki: that one works, excellent tthanks chaps :D
20:40  estragib: creidiki: wait, why don't you noremap : ; | noremap ; : again?
20:41  creidiki: estragib: tried that, all sorts of stuff stops working :)
20:42  unkanon: creidiki: http://vim.wikia.com/wiki/Mapping_to_enter_colon_commands  ?
20:43  creidiki: oooo
20:43  creidiki: vim channel best channel :D
20:44  unkanon: that helped?
20:46  TheBase: hello
20:47  creidiki: unkanon: it has some ideas
20:47  creidiki: like ; to :, ;; to ;
20:47  unkanon: cool
20:47  TheBase: I'm trying to run :%s/></>\n</g to add a new line between >< but I'm getting ^@ between them. Does anyone knows why?
20:49  knat: I have ctrl-p set up to call php documentor, the problem im having is sometimes it doesn't work, right now i have two tabs open, both with the same instance of vim, one tab if i hit ctrl-p it generates the code, in the other it just goes up one line, this is the config in my vimrc http://pastebin.com/raw.php?i=CusTijK0
20:50  knat: also if i close the file and re open it, it works like its supposed to sometimes
20:50  TheBase: never mind I did it with \r
20:52  unkanon: are we all using vim 7.3 here? if I download and install that for ubuntu, will I also have gvim 7.3 ?
20:52 --- altamic_ is now known as altamic
20:52  mgedmin: unkanon, yes, if you install the vim-gnome package of 7.3
20:57  unkanon: mgedmin: ok so just put vim-gnome in my list of things to apt get
20:58  mgedmin: note: ubuntu doesn't have 7.3 in the main repositories, but there's a PPA
20:58  gkatsev: is there a ppa?
20:58  gkatsev: what is the ppa?
20:58  gkatsev: launchpad search is terrible
20:59  unkanon: http://askubuntu.com/questions/7283/where-can-i-find-vim-7-3
21:04  dark3lf: Hello there, I have a question. I dont know Vi but for exemple I need to replace all "{terminator --geometry 900x600}" entries by "{xterm}" only, in the hole script. Is it possible ?
21:05  gkatsev: :%s/{terminator...}/{xterm}/g
21:05  gkatsev: you may need to escape the { for the regex
21:05  gkatsev: see :h :s and :h regex
21:05  gkatsev: dark3lf: ^
21:05  dark3lf: ok, perfect thanx^^
21:12 --- altamic_ is now known as altamic
21:17  unkanon: ok I have the latest vim and gvim now :)
21:18  gkatsev: :set rnu
21:19  fow: I love rnu.
21:20  elik: rnu??
21:21  etcetera_: anyone know of a way to get vim to autoformat xml?
21:21  strull: etcetera_: vim7.3 only
21:21  etcetera_: fine...
21:21  strull: ooops, soory
21:21  strull: etcetera_: this was not meant for you
21:21  kongo: elik: relative line numbers, new in 7.3
21:21  strull: elik: a vim7.3 feature
21:22  elik: ah, yarrr
21:22  estragib: etcetera_: tidy and :h 'formatprg ?
21:22  elik: darn release freeze
21:22  gkatsev: rnu changed my life. like text-objects did before it
21:23  strull: really? I' mean it's good. But livechanging ???
21:23  estragib: you and your fancy rnus. i'm not envious one bit. :'(
21:23  abstrakt: ok so I just read through :he :diff
21:23  abstrakt: but
21:23  abstrakt: how do I do this:...
21:23  abstrakt: I have two files open, which means two buffers
21:23  abstrakt: I want to diff both of those files in vim, I already have vim open
21:23  elik: strull, anywhere I can find :h 'rnu even though I don't have 7.3
21:23  elik: it feels exciting
21:23  abstrakt: I thought it was something like :diff this
21:23  abstrakt: or :vsplit that
21:24  estragib: abstrakt: it *is* :diffthis
21:24  strull: elik: basically the current line is number 0, all other lines are relative to this
21:24  elik: strull, ?!
21:24  gkatsev: strull: well, I am exegerating, but it makes [count] so much more useful
21:24  elik: gkatsev, life changing
21:25  elik: ah, I see
21:25  elik: so you can know easily how many lines you want to delete
21:25  gkatsev: or select or yank or w/e other command takes a count
21:25  elik: well, yeah
21:25  gkatsev: also, since I have my statusbar with line numbers, I know what line I am on
21:25  elik: and is that always on, or you can easily toggle
21:25  gkatsev: also, there is c-g
21:25  etcetera_: gg=G??
21:26  gkatsev: I have my statusline always there
21:26  elik: rnb
21:26  gkatsev: I have some stuff that are interesting
21:26  strull: elik: that's exactly what :set rnu does, just like :se nu
21:27  etcetera_: wtf?
21:27  strull: etcetera_: pardon?
21:27  etcetera_: how do I execute gg=G?
21:28  gkatsev: type `g', then `g', then `=' then `G' (shift-`g') in normal mode
21:28  etcetera_: nope. does not do the trick.
21:29  gkatsev: is filetype indent on?
21:29  etcetera_: yes.
21:29  gkatsev: what does :set ft? say?
21:29  etcetera_: xml
21:29  gkatsev: and it is not indenting or what?
21:29  etcetera_: no.
21:30  etcetera_: hmm, might not be valid xml then?
21:30  gkatsev: possibly not valid xml, or possibly the xml is already indented correctly, at least, as far as vim knows. Or it could be formatted correctly just with line breaks that prevent vim from indenting
21:31  elik: strull, gkatsev, it's cool, but I think the most convenient way to use it will be to have a key to toggle between 'nu and 'rnu
21:31  gkatsev: yeah, possibly
21:31  etcetera_: gkatsev: it's funny, the syntax highlighting ends at approx char 3000.
21:31  strull: I usually have none of them
21:31  elik: that way you can have line numbers most of the time, and switch to rnu whenever you want to know where to stop
21:31  gkatsev: I have rnu and a statusbar with the line numbers
21:31  elik: strull, you rely solely on status bar to know where you are in the file
21:31  strull: elik: yes, and I nearly never need to know
21:31  elik: strull, and can guestimate jumps
21:31  gkatsev: elik: also, :h text-objects which are even more importnat than rnu
21:32  elik: gkatsev, yeah, I know about those :) Were they modified in 7.3?
21:32  gkatsev: nope.
21:32  strull: elik: rnu is mearly a brother of nu
21:32  etcetera_: gkatsev: I doubt it's line breaks.
21:32  etcetera_: notepad++ does nto render correctly either.
21:32  strull: *merely
21:32  etcetera_: and there are no characters in between the xml elements.
21:33  abstrakt: fuck notepad++
21:33  abstrakt: and emacs, and chickens
21:33  elik: gkatsev, yeah, when I learned about text-objects, I put it in the topic :P
21:33  abstrakt: fuck you chickeeehhn! I eet youw!
21:33  elik: abstrakt, sounds like south park, almost
21:33  gkatsev: elik: then we learned it at around the same time :)
21:33  gkatsev: actually, yeah, we did learn it at the same time. I remember now.
21:34  abstrakt: fucka ehyeeeuww chickhehhhen!
21:34  abstrakt: fucka ehyeeeuww dawfin!! fuck ehyeeeuww waaale!
21:34  elik: :D
21:34  elik: gkatsev, life changing indeed
21:35  gkatsev: :)
21:35  abstrakt: what are text-objects?
21:35  abstrakt: what do they do for you that's so life changing?
21:35  abstrakt: yeah rnu mode is fucking leet
21:35  gkatsev: abstrakt: :h text-objects
21:36  abstrakt: gkatsev: yeah yeah, I don't have time right now, busy with other stuff
21:36  etcetera_: hmm, it looks like it validates the xml spec.
21:36  etcetera_: why si vim not giving me any feedback at all?
21:36  abstrakt: gkatsev: if you care to just give me an outline, that's all I'm after
21:37  elik: abstrakt, basically act on an object in the middle of it
21:37  gkatsev: abstrakt: it is a away to group text into various objects. Such as lines, words, paragraphs, inside (), inside {} etc
21:37  elik: abstrakt, so instead of dw from word beginning, you daw (delete a word), or diw (delete inner word) do delete it, and leave or take its boundary
21:37  domidimi: etcetera_: how do you check if it validates
21:37  etcetera_: hmm, visual studio seems to pick it up correctly.
21:37  etcetera_: domidimi: 3rd party tool.
21:38  domidimi: xmllint?
21:38  domidimi: avolta
21:38  etcetera_: domidimi: .net xml serialization.
21:38  elik: abstrakt, but the concept scales... for instance, you can chop a whole html block
21:38  elik: taking or leaving the tags
21:38  gkatsev: abstrakt: but seriously, when you get a chance, read through :h text-objects
21:38  abstrakt: oh, ok I knew about that
21:38  abstrakt: just didn't know that's what it was called
21:38  abstrakt: i know about inner word etc
21:38  abstrakt: gkatsev: so what's the life changing thing about this?
21:39  domidimi: avolta -> altova
21:39  elik: :h text-objects list the variants
21:39  etcetera_: domidimi: what does it matter.
21:39  abstrakt: I mostly just use it for wrapping things
21:39  etcetera_: for some reason vim's xml indentation is broken.
21:39  elik: abstrakt, no need to move to boundaries
21:39  abstrakt: like changing $var into var_dump($var)
21:39  gkatsev: abstrakt: not knowing about text-objects compared to know about text-objects. Makes you so much more fucking efficient in vim.
21:39  domidimi: etcetera_: nothing if it validates
21:39  abstrakt: gkatsev: ehh, I dunno... I guess that's possible... I never really use them day to day
21:39  etcetera_: domidimi: seems to validate just fine.
21:40  abstrakt: gkatsev: I only have one mapping for inner word in a custom keyboard macro that I put in my .vimrc for var_dump()
21:40  abstrakt: that's all I seem to need for the most part
21:40  elik: abstrakt, it's the other way around
21:40  abstrakt: I think that f t F T , and ; are actually wicked efficient
21:40  abstrakt: that an rnu
21:40  gkatsev: I use ab and ib all the time.
21:40  etcetera_: domidimi: also, why won't vim tell me it doesn't validate...
21:40  etcetera_: if it doesnt?
21:40  etcetera_: seems like a proper thing for an editor to do.
21:40  gkatsev: ab and ib select stuff between parens
21:40  elik: abstrakt, say you want to change the arg: di(, then type the new arg
21:40  gkatsev: elik: dib :P
21:41  elik: abstrakt, text-objects are also context aware like ( blah() )
21:41  abstrakt: elik: I don't quite follow, what do you mean?
21:41  abstrakt: gkatsev: oh, for parens eh? hmm, yeah that could be quite useful I suppose
21:41  gkatsev: you get parens, {}, [], '', "" etc
21:41  elik: gkatsev, well, yeah, I guess b is easier to get
21:42  gkatsev: {} is B
21:42  gkatsev: elik: sure is :P
21:43  elik: gkatsev, you need a plugin for doing that with HTML right?
21:43  gkatsev: nope.
21:43  gkatsev: at and it
21:43  gkatsev: for doing more complicated stuff, like % on tags you need a plugin
21:44  kongo: gkatsev: that's matchit.vim, isn't it?
21:44  domidimi: etcetera_: vim does not validate xml document by itself
21:44  etcetera_: domidimi: that seems like a proper thing to do though, no?
21:44  gkatsev: kongo: yes
21:45  elik: gkatsev, nice
21:45  kongo: sadly it's not activated by default, since it's bundled with vim anyway
21:45  gkatsev: is it?
21:46  kongo: yes, :h matchit-activate
21:46  estragib: vatatat in html docs not only looks impressive, it sounds cool, too
21:47  domidimi: etcetera_: from the IDE point of view, not from text editing point of view
21:47  gkatsev: kongo: matchit-install for 7.3 at least :)
21:47 --- hamid_ is now known as Guest56041
21:47  etcetera_: domidimi: I expected a response like that.
21:48  kongo: gkatsev: ah yes, matchit-activate you get after you installed it :)
21:50  gkatsev: vim
21:50  gkatsev: oops
21:50  gkatsev: hm...
21:50  gkatsev: it isn't working for me for some reason
21:50  domidimi: etcetera_: take a look here http://vim.wikia.com/wiki/Format_your_xml_document_using_xmllint
21:51  domidimi: oops, gone is he
21:51  gkatsev: ah, I think i got it
21:52  domidimi: impatient
21:54  flavius: Hi. "Gi" jumps to my the previous insert place in insert mode. But often I need to go in one place, go into insert mode, do a small change, and then jump back to the insert place before the last one. How can that be achieved?
--- Log closed Mon Nov 08 22:08:36 2010
