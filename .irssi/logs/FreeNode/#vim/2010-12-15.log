--- Log opened Wed Dec 15 00:00:31 2010
--- Log closed Wed Dec 15 00:02:36 2010
--- Log opened Wed Dec 15 00:07:58 2010
00:07 --- Users 574 nicks [0 ops, 0 halfops, 0 voices, 574 normal]
00:08  xybre: Holy hell. :earlier is one of the most killer functions I've ever seen. Why have I never seen this feature before... and why does no other app have it??
00:09 --- Channel #vim was synced in 89 seconds
00:11  nate-: xybre: you should check out the gundo plugin, your mind will be blown ;)
00:15  xybre: nate-: ffffff.. I... do want.
00:16  xybre: I was just saying how I wanted to be able to traverse the timeline.
00:16  xybre: Also, author's sense of humor is win.
00:51  gkatsev: well, if you use conque, you can really have gmail in vim with google's commandline tools.
00:53  sir_lewk: unfortunatly the gundo plugin really starts to break down once you're files history gets moderately long
00:59  Araxia: so what are some of the best resources these days for setting up for ruby development in vim?
01:00  xybre: Well, I do most of my research on the internet
01:01  Araxia: xybre: i've done my research and now i'm surveying a group of people i generally respect for opinions.
01:04  guns: Araxia: Do you mean other than using Tim Pope's rake.vim and rails.vim? What other integration would you like?
01:05  xybre: Araxia: Well, I have some links, that I found, hold on :)
01:05  Araxia: guns: i've seen this topic come up from time to time with people suggesting a different handful of links each time; ruby customizations for vim seem like a pretty active area right now.
01:07  guns: Araxia: I guess I don't understand what a rubyist needs from vim other than the usual killer core features. You're not compiling anything, and it's hard to mess up the syntax
01:07  xybre: You've never written a large ruby program?
01:07  xybre: @guns
01:08  guns: xybre: of course. but I've been pretty happy with my vim setup, which isn't especially tailored to ruby
01:08  Araxia: guns: i'm just starting in ruby dev, myself, so i don't really know. i do know that trying to do java in vim was quite a pain for a large codebase without a lot of customization.
01:09  agenteo: hi, is anybody using deplate?
01:10  xybre: Araxia: rails.vim is a good place to start, if you're doing rails
01:12  Araxia: got rails.vim, rake.vim, command-t.vim; looking into project.vim and rubycomplete.vim now.
01:13  xybre: Araxia: mostly beyond that you need to foxus on what works well in yoru workflow and what features/tools you need/find yourself using a lot.
01:13  guns: Araxia: How about http://vimcasts.org/episodes/running-vim-within-irb/
01:13  guns: and for a SLIME like REPL: http://www.ktaylor.name/2009/11/vim-screen-lisp-programming-environment.html
01:14  guns: Nice for exploratory programming
01:14  Araxia: guns: huh. that looks pretty cool. thx.
01:14  xybre: Araxia: also, if you're using git, try fugitive.vim
01:14  Araxia: xybre: yeah. fugtive.vim is already part of my toolkit. :-)
01:15  devians[w]: man, i want to love command-t, but i find it so buggy :(
01:15  nate-: Araxia, some I use: NERDTree for project draw, syntastic to check ruby (and other language) syntax, snipMate, NERDCommenter
01:15  xybre: Araxia: tpope is the man ;)
01:15  nate-: devians[w]: really? I've never had an issue with it
01:15  nate-: I've been using since the early days too
01:16  devians[w]: i get weird behaviour with it. sometimes it opens in my current buffer, sometimes it makes a new one. sometimes new files appear in it, sometimes they dont.
01:16  nate-: wth
01:16  nate-: log a bug if you can replicate the behaviour devians[w]
01:16  devians[w]: the key commands to open in a split dont do anything for me either
01:16  nate-: I'm sure that wincent guy will apprecaite it :)
01:17  nate-: appreciate*
01:17  devians[w]: yeah i should. *adds it to the list*
01:17  devians[w]: but its not reproducable enough to make a proper bug report
01:17  nate-: yea I hate those bugs
01:17  devians[w]: it'd be one of those stupid arse reports of 'er, its kinda buggy in a general and nonspecific way' 'works for me. *closed*'
01:17  Araxia: nate-: haven't heard of syntastic. i'll check that out. thx.
01:17  nate-: also Araxia, make sure you get the best plugin of all... Indent Guides
01:18  Araxia: making a note of it now.
01:18  nate-: they say the developer of Indent Guides is a sex god...
01:18  devians[w]: i need to turn my vimrc/vim into a git repo
01:18  xybre: Araxia: does rubycomplete.vim work with 1.9?
01:19  Araxia: xybre: don't know. i'm currently using 1.8.
01:19  nate-: Araxia: ack.vim is also insanely handy... like 'find in project'
01:19  devians[w]: nate-: random question re indent guides, is vim able to draw 1px lines between cols at all?
01:20  nate-: devians[w]: nah
01:20  nate-: or if it can, I'm not aware of how
01:20  devians[w]: yeah i thought as much
01:20  devians[w]: it would be a nice feature, sometimes you just dont want an entire col highlighted
01:20  nate-: I wish it could though
01:20  Araxia: devians[w]: nope. the best it can do is what you get with 'colorcolumn'
01:20  nate-: devians[w]: agreed
01:23  Araxia: has anyone posted their ruby snipMate snippets? how about test running scripts? someone in here was developing a pretty nice looking one earlier this year.
01:25  xybre: Araxia: use ZenTest for most testing purposes
01:27  Araxia: xybre: ah, nice. thx.
01:28  nate-: Araxia: https://github.com/scrooloose/snipmate-snippets has a bunch of ruby snippets
01:28  xybre: Araxia: its awesome, makes most testing scripts obsolete :)
01:28  agenteo: I am having some problem converting my viki files via deplate, some formatting (= Header =) never gets interpreted, anybody using those tools?
01:41  Araxia: agenteo: what are you converting them to?
01:42  agenteo: html, I am probably missing something, I am just doing $ deplate MyVikiPage.wiki
01:42  Araxia: agenteo: does that interpretation failure exhibit in all conversion modes?
01:42  Araxia: agenteo: isn't there a deplate vim plugin?
01:42  agenteo: it does generate an html file, no errors, but it seems like the markup isn't interpreted correctly, I get html markup, with mainly paragraphs
01:43  Araxia: i settled on vimwiki over viki, myself, and that was a long time ago now, so my memory of viki is probably a bit rusty.
01:43  xybre: Blarh, I just tried to :q out of a screencast
01:43  Araxia: heh
01:44  xybre: It worked because I hit escape first
01:45  agenteo: Araxia: I just only started using http://www.vim.org/scripts/script.php?script_id=861 (which is the viki plugin) as far as I can see there is no deplate plugin
01:46  agenteo: omg
01:46  Araxia: ooc, did you look at vimwiki, too? if so, what features sold you on preferring viki?
01:46  agenteo: I am using vimwiki!
01:46  Araxia: lol
01:46  agenteo: what a retard... it just works so well I always assumed it was viki
01:47  Araxia: from vimwiki, you can just do :Vimwiki2Html or :VimwikiAll2Html
01:48  Araxia: i've been super happy with vimwiki.
01:56  agenteo: Araxia: I love it, thanks!
01:56  agenteo: and it creates an _html dir on its own
--- Log closed Wed Dec 15 02:02:13 2010
--- Log opened Wed Dec 15 02:07:36 2010
02:07 --- Users 553 nicks [0 ops, 0 halfops, 0 voices, 553 normal]
02:08 --- Channel #vim was synced in 86 seconds
02:10  nate-: Araxia: vimwiki is a good choice
02:14  agenteo: Araxia: do you use any syntax highlighter when you bake the wiki to html?
02:15  Araxia: agenteo: for sourcecode highlighting? yeah...let me check.
02:16 --- peth_ is now known as peth
03:20 --- pi-rho is now known as pi-rho|away
03:34 --- fedesilva_ is now known as fedesilva
03:59  _daniel_: Hello, question I want to now if is possible to define in a colorscheme the background based on the current sytax of a file
04:00  _daniel_: like if syntax == halm set background black else set background gray
04:02  tangledhelix: _daniel_: not sure if that works in a color file since it's not re-read for each new buffer necessarily... but you can easily do it with an autocommand if nothing else
04:03  tangledhelix: autocommand FileType haml highlight guibg=...
04:04  tangledhelix: er, i missed a term in there. but you see the idea.
04:05  _daniel_: yeah, thanks
04:06  tangledhelix: you can *try* it in the color file. that is read for each new window even in mvim or gvim afaik
04:06  tangledhelix: if b:current_syntax == "haml"
04:06  tangledhelix: but then you might get weird colors in vim-windows in the same window, vim-tabs, etc. not sure.
04:34  Tau: hi. is there some feature for vim like that one for emacs which permits you to select a python code and make it run on the fly ?
04:54  strull: Tau: try :w !python
04:55  Tau: hm
04:55  Tau: k
04:56  Tau: Starfire, lol
04:56  Tau: strull,
04:56  Tau: why
04:57  strull: are you also writing your code one word a line?
04:57  Tau: strull, hm ?
05:46 --- pi-rho|away is now known as pi-rho
--- Log closed Wed Dec 15 06:02:27 2010
--- Log opened Wed Dec 15 06:07:51 2010
06:07 --- Users 530 nicks [0 ops, 0 halfops, 0 voices, 530 normal]
06:09 --- Channel #vim was synced in 85 seconds
06:15 --- Hunner_ is now known as Hunner
06:32 --- whitedragon is now known as Guest51646
06:38  cpg: hello, i would like to know a trick to comment out a section of code
06:38  cpg: i can select the lines
06:38  cpg: is there a command to comment out the selection?
06:38  nate-: cpg: NERDCommenter plugin
06:39  nate-: I'd visually select a range of lines then press <Leader>ci
06:39  cpg: or can i just somehow type i#  (an i, a # and a space)
06:39  nate-: of course, no way near as nice though
06:39  cpg: nate-: thanks. is there a simple way without pluginx?
06:39  cpg: i tried what i said above, but does not work
06:40  sente: cpg: yes
06:41  cpg: hi sente ... "yes"  ... there is? or ...?
06:41  sente: stu@sente ~ $ grep map .vim/ftplugin/python.vim
06:41  sente: map <buffer> <Leader>0 :s/#//<Return>
06:41  sente: map <buffer> <Leader>9 :s/^/#/<Return>
06:42  sente: for for python files, i can comment out a selected block by typing ,9 and uncomment with ,0
06:43  sente: you can change the comment char to //'s or "'s or whatever for other languages, and put them in .vim/ftplugin/<lang>.vim
06:43  sente: or do it all from your .vimrc, whic is the easiest and what i did for a long time
06:47  nate-: sounds like a lot of bother, that plugin does that all for you and supports many languages
06:48  nate-: and it starts the comment at the correct spot and not the start of the line which is ugly
06:48  nate-: but that's just an opinion :)
06:49  sente: NERDCommenter is very popular, I dont know much about except that it's like 2-3k lines of code, and that everyone likes it.  i just find my two mappings sufficient enough I guess
06:50  nate-: fair enough
06:54  sente: i think I tried to use NERDCommenter a few years ago when I was just learning vim.  I forget if it didn't "just work" for me, or if there were other obscure problems, but I remember being turned off from it, and so here I am 3 years later and I don't like it, but I don't know why
07:00  nate-: sente: there's a few other commenter plugins out there, might be worth trying
07:01  sente: i'm sure they all blow my system out of the water :p
07:01  nate-: I'd like one that can handle embedded ruby properly
07:02  Raimondi: I found one that does support embedded languages...
07:02  Raimondi: Haven't tried, though:  https://github.com/tomtom/tcomment_vim
07:06 --- daniel_ is now known as daniel
--- Log closed Wed Dec 15 11:04:11 2010
--- Log opened Wed Dec 15 11:09:31 2010
11:09 --- Users 548 nicks [0 ops, 0 halfops, 0 voices, 548 normal]
11:10 --- Channel #vim was synced in 87 seconds
11:18  xxthink: how to remove the characters before ) in this line
11:19  xxthink: http://vim.pastey.net/143927
11:20  xxthink: there are many lines in my file like this line
11:21  xxthink: ?
11:23  spiiph: :%s/[^)]*)//
12:06  rsv: how do i convert all the letters capital to small in a file
12:07  strull: rsv: try ggguG
12:15  rsv: strull: where should i try that?
12:15  rsv: ggguG does nothing if i do <esc> : ggguG
12:15  strull: no <esc> :
12:15  strull: just ggguG
12:20 --- MinceR_ is now known as MinceR
12:24 --- tallica is now known as tal
12:24 --- tal is now known as tallica
--- Log closed Wed Dec 15 12:46:51 2010
--- Log opened Wed Dec 15 13:24:19 2010
13:24 --- Users 552 nicks [0 ops, 0 halfops, 0 voices, 552 normal]
13:25 --- Channel #vim was synced in 88 seconds
13:25  patrick85: seku: yeah that works, thx
13:45 --- altamic_ is now known as altamic
13:47  jeltsch: Hi, I want Vim to change the buffer-local directory to the directory of the file I edit. I want this to automatically happen when I open a new or existing file.
13:47  jeltsch: As a first try, I entered this into my ~/.gvimrc: autocmd BufNewFile,BufReadPre * lcd /
13:48  jeltsch: However, GVim complains that “autocommands are not allowed to change the current buffer”.
13:48  jeltsch: Why does Vim think I want to change the buffer?
13:48  jeltsch: change → switch
13:53  kurkale6ka: jeltsch: autocmd BufEnter * if &filetype != 'help' | silent! cd %:p:h | endif
13:54  seku: or autochdir setting
13:54  kurkale6ka: whcih doesn't work properly...
14:02  jeltsch: kurkale6ka: Hmm, does this change the global current directory at every buffer switch. I wanted to use lcd once at buffer creation so that switching buffers doesn’t magically change a global state.
14:03  kurkale6ka: well yeah, use lcd in the above
14:04  kurkale6ka: for me the cd works as well
14:07  jeltsch: kurkale6ka: What does BufEnter mean. The docs say that this event occurs when Vim “enters” a buffer. But what do they mean with “enter”? Is it executed at every buffer switch? Or at buffer creation?
14:08  kurkale6ka: swith
14:09  jeltsch: Hmm, so if I want to overwrite the lcd setting, it is reset everytime I switch to the buffer.
14:10  jeltsch: Is there a way to execute an lcd only when a buffer is created?
14:11  kurkale6ka: I don't see why this is a problem...
14:12  jeltsch: If I don’t want the current directory to be the directory where the file is, I can do a :lcd PATH. However the above solution will overwrite the PATH when switching buffers, so I have to do the :lcd PATH everytime I have switched back to the buffer.
14:13  kurkale6ka: ok, check the events then...
14:16  jeltsch: I already tried BufNewFile and BufReadPre, Vim complained that I try to switch buffers during an autocommand (which I didn’t seem to do). My question was why this happens?
14:17  Silex: is there a way to get guibg/guifg color in order to create an invisible highlight that'd adapt to different colorscheme?
14:18  kurkale6ka: jeltsch: not sure, check the ...Post events
14:23  fow: Silex, you can set any highlight group to fg or bg, which Vim will replace with Normal's fg/bg, but if you want to hide something, perhaps look into 7.3's conceal feature
14:25  Silex: fow: NERDTree uses | to show the hierarchy for directories listing, I want to hide those |
14:25  Silex: I found that hi treePart guibg=#3f3f3f guifg=#3f3f3f gui=none cterm=none
14:25  Silex:  hides it
14:25  fow: ah
14:25  Silex: (I cannot simply replace the | char in nerdtree because it counts them to know the indent)
14:26  Silex: NERDTree defines syntax groups for the tree parts
14:26  Silex: so it's just a mattter of highlighting those syntax groups to be invisible
14:40  Silex: fow: any idea?
14:41  Silex: atm I have to set the #3f3f3f manually
14:41  Silex: the group is defined by NERDTree like this:     syn match treePartFile #[|`]-#hs=s+1 contains=treePart
14:41  fow: Silex, #3f3f3f is your Normal guibg?
14:41  Silex: yes
14:42  fow: hi treePart guifg=bg guibg=bg
14:43  Silex: ah! thanks let's try
14:46  Silex: yes it works! lovely
14:46  Silex: thanks
14:46  fow: you're welcome :)
14:53  Silex: hum, any idea why a loaded buffer wouldn't appear in :ls ?
14:53 --- sacho_ is now known as sacho
14:59  Silex: ah, "unlisted buffers", :ls!
15:00  Silex: wow wow wow from 2 buffers to 25
15:01 * Silex wonders how he creates unlisted buffers
15:01  Silex: ah, it's probably when I :e foo.txt from within an unlisted buffer already, like buffers from :h
15:03  Silex: wait no, "When a buffer is deleted, the buffer becomes an unlisted-buffer and is no longer included in the buffer list."
15:03  Silex: holy shit, I thought doing :bd was safe
15:06  Silex: soooooooooooo, if I want to simply "close a file", I should use :bwipeout?
15:07  ozzilee: Silex: :bdelete I think
15:08  Silex: ozzilee: no
15:08  bairui: Silex, just use :bdelete, if you even really need to do that.
15:08  Silex: bdelete makes the buffer become an unlisted buffer
15:09  ozzilee: I've never even heard of bwipeout, I've been using vim for... a while.
15:09  Silex: ""Actually, the buffer isn't completely deleted, it is removed from the buffer list |unlisted-buffer| and option values, variables and mappings/abbreviations for the buffer are cleared."
15:09  bairui: So, Silex, why do you need to delete the buffer?
15:09  Silex: from :h :bdelete
15:10  Silex: bairui: I mean when I'm done with a file, I want to close it and edit the next one. I don't want vim to keep memory around for a buffer that won't be edited again
15:10  bairui: Silex: unless you're editing Very Big Files, this really isn't a problem...
15:11  Silex: ok so the common practice is to not care about it
15:11  bairui: yep
15:11  Silex: but if I wanted to make a Cleanup() function that'd clear all those unlisted buffers, bwipeout is what I'd use?
15:11  bairui: common to have 50+ buffers just sitting there waiting to one day perhaps be reactivated, and not caring one sausage if that never happens within this session.
15:12  bairui: I wouldn't even contemplate that, unless you're looking for something to kill a few hours on a lazy Sunday afternoon to sharpen your knowledge of Vim internals. There is no other benefit to that exercise.
15:12  Silex: alright
15:18  Silex: bairui: so, when I do :bd
15:19  Silex: then repoen the file again, it actually reuses the unlisted buffer?
15:19  marowit: #irssi
15:20  bairui: Silex: yep
15:21  Silex: bairui: interesting. thanks
15:21  bairui: No probs. And, unlike :bwipeout, it remembers your marks and buffer-local options. Use :bdelete and not :bwipeout for this reason.
15:28  bsod1: how can I reload gvim with same buffers?
15:29  bairui: bsod1: :help viminfo
15:29  dnlcorrea: bsod1: sessions
15:29  bsod1: ok, thanks
15:30  bairui: np
15:35  zmbmartin: man I can not find a colorscheme that I love. I really like railscasts in gvim but it looks dull and washed out in vim
15:36  FernandoBasso: I like desert.
15:36  FernandoBasso: For me, it does the job both in gvim and vim, be it in xterm, urxvt, or gnome-terminal.
15:37  FernandoBasso: Also, darkZ is one of my favorites.
15:42  zmbmartin: FernandoBasso: Thanks I dont love desert. I will check out darkZ.
15:42 --- chrischambers_ is now known as chrischambers
15:42  temoto: Hello. Is it possible to make :e completion case-insensitive?
15:43  FernandoBasso: zmbmartin: Did you download that colorscheme pack?
15:43  FernandoBasso: Also, colorschemes are very personal.
15:48  dnlcorrea: temoto: In MacVim, it is. I don't know how, but it's a start.
15:49  temoto: dnlcorrea, in Mac, the filesystem is case-insensitive by default.
15:50  FernandoBasso: It is OS dependant.
15:50  FernandoBasso: In windows, :edit is also insensitive.
15:50  FernandoBasso: I GNU/linux it is not.
15:50  dnlcorrea: temoto: oh yeah. THen, i don't know.
15:50  FernandoBasso: And the help doesn't mention anything about making :edit case insensitive.
15:51  temoto: Because, again, on Windows, filesystem is case-insensitive by default.
15:51  FernandoBasso: yeah.
15:51  dnlcorrea: yeah, i just tested in the Ubuntu box...it is case-sensitive
15:51  dnlcorrea: did you search for any plugin in vim.org?
15:51  FernandoBasso: Since :edit reads files on the file system. If the file system is case sensitive or not, so will behave :edit.
15:53  FernandoBasso: You can make search as substitutions case insensitive, though.
15:53  FernandoBasso: searchs and* substitutions
16:03  complete: Hey People! I want to get rid of empty lines and tried :%s/\n\n/\n/g but that resulted in some strange metachars.
16:03  complete: Any ideas?
16:04  fow: complete, :g/^$/d
16:04  complete: oh. whats :g?
16:04  spiiph: :h :g
16:04  dnlcorrea: :help :global
16:04  complete: aha
16:05  complete: apply a command to every line that matches a pattern
16:05  complete: interesting
16:05  complete: grep so to say
16:05  complete: i think i heard that this is where grep got its name from
16:05  complete: thanks!
16:05  complete: and why did my replace line not work?
16:06 --- fedesilva_ is now known as fedesilva
16:06  tangledhelix: complete: yep, ex implemented :g/re/p - where re was a regex and p prints the matching lines
16:07  tangledhelix: still works in vi/vim today
16:07  jerojasro: complete: the newline char is represented in different ways in: 1) the regexp definition 2) the replacement definition
16:08  jerojasro: complete: :%s/\n\n/^M/ should work
16:08  complete: aha! ok, thanks.
16:08  jerojasro: (that ^M is a literal enter, you get it with ctrl-v<Enter>)
16:08  fow: complete, Vim stores NULs (0x00) internally as \n (0x0A) and new lines as \r (0x0D)
16:09  fow: \r instead of ^M should work as well
16:10  jerojasro: fow: do you know where is this documented? I've seen it referred here many times, but haven't taken any notes...
16:12  fow: jerojasro, :h s/\r and s/\n
16:14  fow: jerojasro, oh, and :h key-notation makes some allusions to it
16:22  roxlu: hi!
16:23  roxlu: I just installed ubuntu which has vi-m 7.2 and I'm trying to enable syntax highlighting. When I do: :syn on, I get command not found error. Do I need to enable something first?
16:24  deryni: vimgor: vim-tiny
16:24  vimgor: vim-tiny is the default Vim package for Debian/Ubuntu. It is built with a small subset of features and is not intended to be used full-time. You most likely want to install a more capable package of the Vim editor. If you want gvim install the vim-gtk package, otherwise install the vim package.
16:26  roxlu: okay
16:32  bobbytek2: What is the easiest way to import a syntax file into vim?
16:32  bobbytek2: I'm trying to install http://www.vim.org/scripts/script.php?script_id=2268
16:33  bobbytek2: Not sure what "Copy to the syntax directory in the root vim installation" means
16:33  bobbytek2: does that mean ~/.vim ?
16:33  graywh: i hate incomplete instructions
16:33  graywh: it says it's a syntax script, so ~/.vim/syntax/
16:33  bobbytek2: ah, nice
16:34  bobbytek2: thanks
16:34  bobbytek2: that was actually difficult to google for some reason
16:34  graywh: you're not the first to notice
16:41  spiiph: Hmm, is it not possible to discriminate the ColorScheme autocmd based on colorscheme or colorscheme file name?
16:41  spiiph: <amatch> and <afile> don't seem to be set
16:43 --- threeve is now known as NSThreeve
16:44 --- NSThreeve is now known as NSZombie
16:45 --- NSZombie is now known as threeve
17:01  rson: spiiph: is testing against colors_name not enough?  it's not automatic but most colorschemes define it
17:01  spiiph: Yeah, that's what I ended up doing, but it just seems strange that it wouldn't match either against the file name or the g:colors_name variable
17:02  AopicieR: hi; how can I jump to the n-th line without moving the cursor horizontally? nG will position the cursor at the beginning of the line
17:02  spiiph: Since now I have to add an if-statement to my ColorScheme :aus, rather than just use several :aus with different parameters
17:03  strull: AopicieR: try :set nosol
17:04 * spiiph headdesks
17:05  AopicieR: strull: nice, thank you
17:10  amaurea: Hi! I'm trying to filter my buffer through awk, but the dollard in the command keep getting interpreted by vim, even though they are inside single quotes. How should I escape them?
17:10  amaurea: *dollars
17:11  strull: amaurea: what exactly are you trying?
17:11  graywh: :h :!
17:11  amaurea: strull: I am trying to generate a table by using a simple for-loop in awk
17:13  jerojasro: amaurea: maybe it is easier to achieve through vimscript. what kind of table, whit what kind of data? can you give examples?
17:14  amaurea: jerojasro: This time it is a simple table corresponding to thsi command: awk "'BEGIN{for(i=82;i<91;i++)for(j=0;j<4;j++)printf("%d 4 %d\n", i, j)}'"
17:15  amaurea: actually, hm, I don't even have any dollars here
17:15  amaurea: I think I might have gotten the command mixed up after all
17:15 * amaurea tries again
17:16  jerojasro: that doesn't run here...
17:16  strull: it's the % that causes trouble
17:16  amaurea: Yes, remove the extra quotation marks
17:16  amaurea: strull: Yes, you are right
17:16  amaurea: They could be escaped with \
17:17  amaurea: so nevermind, sorry for asking a misleding question
17:18  amaurea: By the way, how would I do that using vimscript? I have never used that
17:23  jerojasro: amaurea: that awk thing is printing a listing: 8240 8241 .. 8243 8340 ...
17:24  jerojasro: to mimic that, something like the following should do:
17:24  jerojasro: 1
17:24  jerojasro: 2
17:24  jerojasro: :for i in range(82,90)| for j in range(0,3) |call append('$', i ."4". j) |endfor| endfor
17:26 * amaurea tries it out
17:26  gkatsev: thank god it isn't rofdne
17:27  amaurea: Neat!
17:28  amaurea: The syntax seems pretty straightforward, the most surprising thing was append instead of "print"
17:31  amaurea: Thanks for the help and instructions!
17:31  maxagaz: what is the keystroke for :next to switch from file to file ?
17:32  amaurea: maxagaz: I'm not aware of one (but I'm far from an expert) so I mapped it to a key myself
17:32  fow: If there was, it should be listed with :next
17:32  fow: *would be
17:33  maxagaz: fow, listed where ?
17:33  fow: in the help, :h :next
17:34  amaurea: But :next and <C-^> are two of my most often used commands. But they really need "set hidden" to be useful, otherwise you can't do it without saving, and lose your undo history.
17:35  amaurea: I had a few extra keys available on my keyboard (national ones), and mapped them like this: map å <C-^> and map Å :bnext<CR>
17:37  maxagaz: amaurea, <C-^> doesn't work for me, why ?
17:37  maxagaz: it's not by default ?
17:37  amaurea: Isn't it?
17:38  strull: maxagaz: try <c-6> instead
17:38  amaurea: If you have several files open, it should switch between the most recent ones
17:38  maxagaz: strull, thanks
17:39  maxagaz: strull, to which command is it equivalent to ?
17:40  gkatsev: <c-6> is equivalent to <c-^>
17:40  gkatsev: at least, it should be
17:40  maxagaz: gkatsev, i mean :something
17:41  consumerism: is there a way to join the next line with the current one like J but without putting a space at the end of the current line first?
17:41  strull: consumerism: Jx
17:41  Scala: consumerism: I believe gJ
17:41  Scala: oh actually gJ might preserve whitespace not delete
17:42  consumerism: interesting, thanks
17:44  Silex: I believe gJ is what he wants tho
17:45  Silex: I mean it's what I use to join lines without vim inserting a space
17:50  sitaktif_: Silex: does not work when line is indented
17:52  Silex: ah you'd want it to trim the line below? yeah then of course that doens't do that
17:52  Silex: it just joins without inserting a space
17:52  sitaktif_: thanks for your enlightment Silex :)
17:53  sitaktif_: Silex: if you read consumerism's question, you see that it was very clear that you did not give a solution to his problem
--- Log closed Fri Dec 17 18:23:32 2010
