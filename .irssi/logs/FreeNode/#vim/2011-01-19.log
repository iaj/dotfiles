--- Log opened Wed Jan 19 00:00:10 2011
--- Log closed Wed Jan 19 00:03:04 2011
--- Log opened Wed Jan 19 00:08:26 2011
00:08 --- Users 615 nicks [0 ops, 0 halfops, 0 voices, 615 normal]
00:08  Somelauw: barui, okay
00:09 --- Channel #vim was synced in 78 seconds
00:10  helix84: ok, i kind of see now what went wrong. i don't know what the * register is, but i tried with the 'a' register. then ctrl-r a works as bairui described.
00:10  helix84: the thing is i need something else. i'll try to explain.
00:10  helix84: i have a file with timestamps as a number, one per line
00:11  bairui: helix84: to learn about the * register, :help "*   and   :help clipboard    <--- this time without '
00:11  helix84: i want to run "date -d @01234567" on each of them, which will turn them into readable date
00:11  helix84: bairui: i'm going to
00:14  Zone: rudi_s: wrap is on, textwidth=0
00:15 --- GrowLinux is now known as Julian_Shorter_B
00:15  bairui: helix84: something like...   g/./exe ":.!date ".getline('.')      <--- where I have NFI what your actual date command looks like. Salt to taste, and backup first. :)
00:15  bairui: bah...    put a   :   before that  g   of course.
00:17  helix84: bairui: thanks, that works nice
00:17  bairui: np
00:17  helix84: bairui: i'm going to dissect it now :)
00:17  helix84: bairui: and that * register is a strange beast
--- Log closed Wed Jan 19 00:21:25 2011
--- Log opened Wed Jan 19 00:21:47 2011
00:21 --- Users 612 nicks [0 ops, 0 halfops, 0 voices, 612 normal]
00:21  peth: the first one will call xarg once per line, so it should work too
00:21  helix84: peth: in practice, it doesn't. in theory, i'm going to study a little more what it exactly means.
00:22  helix84: brb after i read the above mentioned help
00:23 --- Channel #vim was synced in 81 seconds
00:23  bairui: Zone: it's the 'wrap' option that's messing with you. Try   :set nowrap
00:25  peth: helix84: it works here and i see no reason why it shouldn't for you, but whatever you prefer is fine with me. :)
00:26  Zone: bairui: nope, same result.  When I copy from the small terminal and paste into anywhere else (e.g. gedit), it also pastes incorrectly.  It seems like the copy mechanism of the terminal considers the virtual line breaks to be real line breaks.
00:26  bairui: Zone: you're copying with your mouse?
00:26  Zone: bairui: yep
00:26  bairui: that'd be the problem...
00:26  bairui: this is from a Vim session?
00:27  bairui: what does  :set mouse?   say?
00:27  Zone: vim inside of rxvt-unicode
00:27  Zone: mouse=
00:27  Somelauw: Would :set pastemode help?
00:27  bairui: so, Zone,   :set mouse=a
00:27  bairui: and, Zone, :help clipboard
00:28  Zone: bairui: ok, now I need your address so I know where to send my first born child
00:28  bairui: :p
00:28  Zone: bairui: that has only bugged me for, oh, 7 years or so
00:28  bairui: you're welcome :)
--- Log closed Wed Jan 19 00:32:48 2011
--- Log opened Wed Jan 19 00:38:14 2011
00:38 --- Users 606 nicks [0 ops, 0 halfops, 0 voices, 606 normal]
00:38  Somelauw: I often use the routine: V, Alt-Tab, Middle-Mouse to copy a single line of text.
00:39 --- Channel #vim was synced in 76 seconds
00:39  bairui: well, try replacing middle-mouse with "*p   <---  if that doesn't immediately work, check that   autoselect   is in your   'clipboard'   option.
00:40  bairui: and if you're sharing a lot between vim instances, it might be better to pull them together as separate sessions in one instance
00:41  bairui: s/sessions/workspaces/
00:41  peth: i think it's implied that the paste target isn't vim
00:41  bairui: oh
00:41  peth: anyway shift+insert should work there
00:41  bairui: well, then ... yeah
00:42  Somelauw: First it would "(space)*p (Because my keyboard is mapped to US-international).
00:42  peth: and i agree with you :)
00:42  Somelauw: Secondly, I also copy text outside of vim (which have a different way of pasting)
00:42  bairui: Somelauw: for that direction, (unless you're using your mouse again), you would paste into vim with   "+p
00:42  Araxia_: that's when you start modifying your os to use vim bindings throughout. :-)
00:42  bairui: indeed :)
00:46  peth: mouse pasting annoys me to no end, especially since thanks to the mousewheel i sometimes randomly start scrolling text and paste into the firefox main window instead of a textarea
00:46  helix84: peth: so you wrote 1) :g/./.w !xargs date 2) :w !xargs -L1 date
00:47  peth: i totally did
00:47  peth: i like the second one better though
00:47  helix84: peth: why is the :w there?
00:47  peth: you :write to a shell command
00:48  peth: in the first case you write the g/./ line with .w
00:48  peth: in the second you write the entire doc with :w
00:48  peth: which is why you need -L1
00:48  helix84: peth: 2) will pipe the selection to the input of xargs
00:49  peth: yes
00:49  helix84: peth: ok, i understand that one
00:49  bairui: not the selection, but the whole file
00:49  peth: well, no.
00:49  peth: right.
00:49  helix84: bairui: yes, of course, thanks
00:49  bairui: np
00:50  helix84: where do i find help on commands i put after g/something/command ?
00:50  bairui: :help :global
00:51  helix84: bairui: let me rephrase: help on ex commands
00:51  Araxia_: you can put pretty much any command there, so it depends on what you want to do.
00:51  peth: helix84: for bonus visual effect, try :0,$!xargs date -d
00:52  peth: that will translate the stamps inplace
00:53  bairui: peth: :% is cleaner than :0,$
00:53  peth: true
00:53  bairui: helix84: :help ex-cmd-index
00:54  helix84: bairui: thanks, that's what i was looking for
00:54  bairui: np
00:55  jkyle: bairui: thanks! :make!
00:55  bairui: np
00:56 --- Saraphim is now known as srh
00:59  helix84: peth: though i understand now what all of the commands you wrote do, i still have a problem with getting them all to really work because of how date is called,
00:59  helix84: take this example:
00:59  helix84: i should call it this way:
01:00  helix84: date -d @1290555029
01:00  helix84: if i call it this way:
01:00  helix84: date -d @ 1290555029
01:00  helix84: i get
01:00  helix84: date: the argument `1290555029' lacks a leading `+';
01:00  helix84: this is what happens when i use
01:00  peth: your lines are ^@1290555029$ ?
01:01  helix84: 1269421229
01:01  helix84: 1269421318
01:01  helix84: 1269421499
01:01  helix84: just the numbers, without the @
01:01  peth: that explains our confusion
01:06  helix84: :.!date does what i need for 1 line. but i'm wondering why it works.
01:06  peth: that just replaces the line with the current date
01:07  helix84: what does it do with the current line? feed it to date input? put it as an argument of date?
01:07  helix84: oh, i see
01:07  peth: it feeds it to date (which ignores it) and replaces it with date's output (the current date)
01:07  helix84: stupid :)
01:07  helix84: me
01:07  peth: try %!xargs -I '{}' date -d @'{}'
01:08  helix84: peth: nice
01:10  helix84: peth: what is '{}'?
01:11  helix84: is it interpreted by shell or by vim?
01:11  peth: with -I '{}' you tell xargs you want it to replace {} in the xargs string with its input
01:11  peth: -I implies linewise, that's why we don't give -L1 this time
01:12  helix84: but my man xargs says: -l[max-lines]
01:12  helix84: oh ok
01:12  peth: uppercase i
01:12  peth: fix your font ;)
01:12  helix84: fix my eyes at 2 am :)
01:12  helix84: 1
01:12  peth: l?
01:13  helix84: just kidding
01:13  peth: it's between l and Zam here too
01:13  Araxia_: heh
01:14  peth: anyway, does it work, helix84?
01:15  helix84: peth: yes, i'm just experimenting
01:15  helix84: learning
01:17  helix84: so in ex mode, i can operate only on whole lines or can i take parts of them, too?
01:17  helix84: the real-world log file i'm processing looks actually like this:
01:17  helix84: 1234567890 log message
01:18  peth: via vim's text editing and the !external tools, you can basically do *everything*
01:18  peth: in this case, pipe through cut
01:18  peth: or edit in vim before
01:19  peth: with an :%s/ or one of the other hundred thousand ways
01:19  Araxia_: here's what i'd do: %s/^[0-9]\+/\=system("date -d " . submatch(0))/g
01:19  helix84: peth: neither seems viable if what i want to do is replace just the 1234567890 portion of each line with human-readable date
01:19  Araxia_: s/g//
01:20  peth: then Araxia_ just made your life a lot easier :)
01:21  peth: it's more vimmish too. but of course you could do it with the tool chain
01:21  Araxia_: well, it still uses system()
01:22  helix84: :%g/^[0-9]\+/\=system("date -d " . submatch(0))/g
01:22  helix84: E10: \ should be followed by /, ? or &
01:22  Raimondi_: There is strftime() for a Vim only solution
01:22  bairui: g'day, Raimondi_ :)
01:22  Araxia_: helix84: this is a :s not a :g
01:23  helix84: Araxia_: ok, got it now, you confused me with s/g// :)
01:24  Araxia_: helix84: sorry. just that trailing g is unnecessary in this case.
01:24  Araxia_: bad habit of ending all of my s// with g.
01:25  helix84: Araxia_: one minor flaw: there's a newline after what i get from system()
01:25  Araxia_: ah, right. hrm.
01:26  Araxia_: mb echo -n date
01:27  Raimondi_: Good morning, bairui :)
01:27 --- Raimondi_ is now known as Raimondi
01:27  helix84: :%s/^[0-9]\+/\=system("echo -n `date -d @" . submatch(0)"`")/
01:28  helix84: E116: Invalid arguments for function system("echo -n `date -d @" . submatch(0)"`")
01:28  helix84: E15: Invalid expression: system("echo -n `date -d @" . submatch(0)"`")
01:28  helix84: oh, forgot a dot
01:28  helix84: :%s/^[0-9]\+/\=system("echo -n `date -d @" . submatch(0) . "`")/
01:28  helix84: this is perfect
01:29  helix84: thanks guys, I learned a lot today
01:29  Raimondi: helix84: See :h strftime()
01:30  helix84: Raimondi: even perfect-er ;)
01:31  helix84: :%s/^[0-9]\+/\=strftime("%c", submatch(0))/
01:31  bairui: learnt :)
01:31  helix84: bairui: time to go to bed :)
01:31  bairui: g'night, sir :)
01:31  helix84: good night all and thanks a bunch
01:35 --- Kick__ is now known as kh_gone
01:40  Araxia_: i love when i reach for a vim binding in pentadactyl without even thinking about it and it just works. I didnt know <C-6> worked there.
01:41  bairui: :) - I wish there was an equivalent in awesome   -   anyone?
01:45  Araxia_: bairui: awesome?
01:45  bairui: Hey, Araxia_, what tools/etc do you use to write VimL? I mean, everything, from debuggers/tracers/profilers to code completion/tags/etc
01:46  bairui: awesome is a window manager
01:46  Araxia_: ah
01:47  Araxia_: bairui: i just put this up recently. should give you a good idea: https://bitbucket.org/araxia/vim/src/7df05d7ab200/bundle/refresh_bundles.sh
01:47  Araxia_: i don't use vim's built-in debug enough, i think.
01:48  bairui: i never have... nor the profiler
01:48  bairui: I've never (almost) set verbose to trace either
01:48  Araxia_: yeah, definitely not that. haven't really made anything that i'd need to.
01:49  bairui: ditto...
01:49  Araxia_: i've used verbose a bit. it can be pretty handy.
01:49  dwarder: if i have my file updated somewhere else, what command in vim should i issue to update my file
01:49  bairui: :e
01:49  dwarder: thanks
01:49  bairui: np
--- Log opened Wed Jan 19 02:03:52 2011
02:03 --- Users 580 nicks [0 ops, 0 halfops, 0 voices, 580 normal]
02:05 --- Channel #vim was synced in 78 seconds
02:07  nchase: using NERDTree, but just heard about VTreeExplorer. am i missing anything?
02:15  scrooloose: nchase: nope, nerdtree is far superior
02:17  fow: you might be biased :P
02:18  nchase: :)
02:19  scrooloose: yep :D although i did start writing it after spending a few months hacking on vtree and getting frustrated by the implementation
02:19  scrooloose: mostly due to the fact that it stores its data in a vim buffer rather than in any sort of data structure :-/
02:26 --- tlp` is now known as tlp
02:44  rudi_s: fg
02:44  rudi_s: Sorry.
03:01  peth: rudi_s: %
03:01  Araxia_: jobs
03:02  rudi_s: [1]  + suspended  vim
03:02  bairui: hehe
03:02  peth: :)
03:02  rudi_s: ;-)
03:08 --- peth_ is now known as peth
03:31  gkatsev: :Ni!<CR>
03:34  iaj: someone using fuzzyFinder in here?
03:37  thaw: hi all
03:38  lucs: hallo
03:41  thaw: I use vim everyday for several years in order to develop some small scripts, but now I've to manage a large project with ~ 100 files. I know vim is powerful so what is the best way to develop with a lot of files ? for example, what could be a good solution to browse all the files of my project in vim ?
03:43  scp1: thaw, use sessions, perhaps use something like nerdtree ( I do not like it though )
03:43  rson: thaw: when you say browse, what do you mean?
03:43  scp1: other then that, I use a simple alias like so; /home/scp1/devel/time-spent-in-vim/vim $(find . |grep -Pi '.+(?:pl|pm)$'|grep -v 'blib'|perl -pe 's/\n/ /')
03:44  scp1: than*
03:45  thaw: thx scp1 I will look this stuff ; rson: when I compile, if I seed an error in the file X.cpp, open a vim window with this file, or, if a vim window with the code of this file is already opened, open it
03:45  rson: thaw: are you not using a makefile and :make ?
03:46  thaw: sure I'm using make
03:46  rson: thaw: not make, the vim command :make
03:46  iaj: scp1:  what's that alias doing?
03:46  thaw: ha
03:46  rson: it will give you a list of errors and allow you to jump to the error
03:46  thaw: wow, perfect
03:46  scp1: iaj, opens all my project files in vim
03:46  scp1: iaj, all .p{l,m} files
03:46  rson: thaw: you may have to run :cw to open the list after running :make, I don't remember as I don't use this very often
03:47  thaw: thx a lot rson , I will look these commands
03:47  scp1: iaj, oh, perhaps you mean the time thing. https://github.com/trapd00r/time-spent-in-vim
03:47  rson: thaw: np.  see :help make for more info
04:00  iaj: scp1: ahhww.... thanks=) that's neat.. but.. can be frustrating at times I guess.
--- Log closed Wed Jan 19 04:02:50 2011
--- Log opened Wed Jan 19 04:03:10 2011
04:03 --- Users 561 nicks [0 ops, 0 halfops, 0 voices, 561 normal]
04:04 --- Channel #vim was synced in 76 seconds
04:13  scp1: Too many "+command", "-c command" or "--cmd command" arguments
04:13  scp1: Why cant I use more then 10 -c ?
04:14  strull_: one is enough anyway
04:14  scp1: -c 'source commands' ?
04:14  strull_: :he :bar
04:15  scp1: oh
04:15  scp1: strull_++ # thank you
04:16  strull_: np, have fun!
04:16  tmr: Maybe using custom .vimrc would be cleaner solution anyway.
04:16  scp1: I do not think so; This is for 'vimpager'
04:16  scp1: It just needs a couple of sane defaults
04:16  tmr: Couple > 10?
04:17  scp1: 11, actually :D
04:20  iaj: What could I do in order to fix fuzzyfinder from breaking foldopen=search's functionality
04:20  scp1: -c 'set tw=80|set nonumber' doesn't work though...
04:21  scp1: '-c: command not found'
04:22  Araxia: -c ':set tw=80 nonu'
04:25  Araxia: scp1: what shell? that looks like it should work.
04:29  scp1: araxia, uhm, for some reason my comments ( # ) was interpreted in the less_vim() function :s
04:29  scp1: araxia, it works fine now, thank you
04:29  Ned_: I want to bind <S-Insert> to paste from the primary buffer. So far I have imap <S-Insert> <Esc>"*p
04:29  Ned_: I'm wondering if (a) is there a better way and (b) if this is it, how do I get the cursor to the end of the paste so I can put the user back in insert mode in a sensible place ?
04:31  Ned_: Hmmmm,
04:31  Ned_: <S-Insert> => <MiddleMouse>
04:31  Ned_: that might work better
04:31  Ned_: mint, that works nicely
04:33  Hoyt: hi , my GVim got no top toolbar shown , how can i recover it ?
04:34  strull_: Ned_: try :imap <S-Insert> <c-r><c-r>*
04:34 --- remedy is now known as remedy|drankin
04:34  Ned_: strull_: the middlemouse thing is working nicely
04:34  strull_: ok, lost connection, so I missed some answers
04:35  Ned_: Hoyt: :help guioptions
04:35  Ned_: :set guioptions+=m
04:35  Ned_: I think
04:35  Araxia: Ned_: if you're still interested in tweaking positioning after the paste, have a look at :help '[
04:36  Ned_: Araxia: Ahhh, that sounds like something useful to know regardless ;-)
04:36  Ned_: thanks
04:36  Ned_: Araxia: inface, ']
04:36  Ned_: :p
04:36  Ned_: err, infact
04:37  Araxia: on a similar topic, o and O in a visual selection are nice.
04:38  scp1: Is there a git mirror of vim somewhere?
04:40  Hoyt: Ned_: got it , it's called guioptions , and a "guioptions -=T in my vimrc caused that problem
04:40  Hoyt: Ned_: thanks
04:40  Ned_: :-)
04:41  Ned_: Araxia: yes, I use o and O
04:41  Ned_: but must remember '[ and ']
04:41  Ned_: :p
04:45 --- remedy|drankin is now known as remedy
04:48  mr_mustard: is there a better plugin than snipmate for snippets? I think it's fine, but it breaks my productivity as it doesn't support recursive snippets
04:48  bairui: mr_mustard: I believe it's the best... but you're right, it has warts and is getting crufty.
04:49  bairui: but there are others. I think there's one called SnippetsEMU or something... go fish: www.vim.org
04:51  mr_mustard: it only needs recursive snippets to be perfect… it has been some time since the last update
04:52  mr_mustard: snippetsemu is even older..
04:52  bairui: that's the problem - i don't think it's actively maintained... and although I haven't looked at the code base... I hear there be dragons... :-/
04:59  x-kent: how do I make vim preserve tabs ? I mean if I have line <TAB> "something" then after I do "enter" it starts with <TAB> automatically ?
05:00  tprow: Hello
05:00  tprow: When I do :set wildmenu , wildmenu does not work
05:00  tprow: when I press <Tab>, I get ^I
05:00  tprow: also, how do I do visual mode, then copy to system clipboard under Windows?
05:01  tonymec: x-kent: maybe see :help 'autoindent'       and note: some filetypes have their own indent settings
05:02  tonymec: tprow: see :help 'list' and :help 'listchars'       also :help quoteplus
05:03  tonymec: tprow: does :echo has('wildmenu')   return 0? If it does, your Vim version lacks wildmenu capabilities
05:05  tprow: hell
05:05  tprow: hello
05:05  tonymec: tprow: see :help 'list' and :help 'listchars'       also :help quoteplus
05:05  tonymec: tprow: does :echo has('wildmenu')   return 0? If it does, your Vim version lacks wildmenu capabilities
05:06  tprow: 1
05:06  tprow: I get 1
05:06  x-kent: thanks, problem solved
05:07  tonymec: tprow: what is your 'compatible' setting? If on, wildmode autocomplete key is Ctrl-E, if off (the recommended setting) it's the Tab key
05:08  tonymec: tprow: also see :help 'wildmode'
05:09  tprow: ahh...
05:09  tprow: thank you tonymec: compatible was on
05:09  bairui: tprow: sounds like you don't have a ~/.vimrc   get one
05:09  tonymec: tprow: my pleasure (been therre done that).
05:09  tprow: I don't know how make a good one
05:09  bairui: tprow: there is a good one in here: https://github.com/dahu/LearnVim
05:10  tonymec: tprow: I recommend to start with just the line       runtime vimrc_example.vim     then add lines after (or, rarely, before) that if you want to change some settings
05:12  tprow: tonymec: thanks again
05:12  tonymec: :-)
05:13  bairui: my vimrc_example.vim is quite crufty...
05:13  aborticide: is there a faster way of pasting into vim?
05:13  aborticide: i'm using :Set paste mode
05:13  bairui: aborticide: :help pastetoggle
05:14  aborticide: ?
05:14  aborticide: will that speed things up?
05:15  bairui: in that it's a single keypress to toggle between paste mode and nopaste mode
05:15  aborticide: im not talking about making it easier than typing it out, i mean the huge waits i have to do wait on 10000 line pastes in insert mode
05:15  bairui: but what are you really trying to do? perhaps there is a faster way... ah. Turn off your syntax stuff first then.
05:16  bairui: you could try    :syntax off    paste    :syntax enable
05:17  tonymec: aborticide: if you can afford to use gvim (rather than Console Vim), it will usually know whether you're copying or pasting, so no need to bother about the 'paste' option.
05:17  bairui: and, um... why are you pasting 10000 lines? could you perhaps  :read   them in instead?
05:17  tonymec: er, I mean *typing* or pasting
05:18  bairui: mmm... lunch.
05:18  tonymec: bairui: /Bon appétit/.
05:20  aborticide: the problem is not selecting modes
05:20  aborticide: the problem is when it's in the rigth mode it will act very slowly
05:20  aborticide: sometimes i don't knoew if its still processing or even if it has frozen
05:25  tonymec: aborticide: well, rather than using the clipboard, you could either write to a file and use the :read command; or else (from one place to another in a single Vim instance) use linewise yank (or delete) and put without bothering with the clipboard
05:31  aborticide: tonymec: why don't i just take some cyanide pills instead
05:35  jamessan: being sarcastic in the face of useful advice doesn't change the fact that copy/pasting a large amount of data via the X selections is slow
05:35  tmr: I don't see how you eating any pills would make vim work differently, some might make it look like it's working differently..
05:47  RoboTeddy: is there a way to save the marks for a particular file?
05:49  bairui: RoboTeddy: :help viminfo
05:51  RoboTeddy: bairui: thanks
05:51  bairui: np
06:00  scp1: How can I :help topic and switch from that help thingy back to the editing area and still having the help open?
06:00  jamessan: scp1: :help window-move-cursor
06:01  scp1: ah, awesome
06:12  bairui: thanks, tonymec :) yummy dumplings
06:12  strull_: jamessan: depends on your definition of large
06:12  strull_: for me it's lightning fast up to several kb
06:13  bairui: the stated number was ~10k lines
06:13  strull_: ok, that's a figure
06:14 * strull_ wasn't following the whole conversation
06:17  bairui: not really a conversation, but some people shouting at a wall
06:19  strull_: I think the pasting speed largely depends on the app from where you paste
06:19  scp1: I wasnt aware you could use templates without a plugin. Very nice.
06:20  strull_: so for some apps it may be slow for some hundrets of bytes, others are fast even for some thousands
06:27  bairui: strull_: I could be talking out of turn, so I'll keep this short and sweet. I assume you mean the app you paste into, not the app you copied from. Having said that, I *think* in Vim's case, it's the extra stuff Vim does to text, like syntax highlighting etc. that slow pasting down.
06:28  strull_: no, I was talking of the source-app
06:28  strull_: the clipboard gets filled on request (by vim in this case)
06:28  Araxia: can be copied from, too. often paste requests aren't actually dispatched until you actually do the paste, at which point the os asks the app to serve up the contents.
06:29  strull_: right
06:29  bairui: ok - well I don't know anything about how all that works, but I would have assumed that at the time the copy was done, it (the data) moved to the clipboard... so, I fail to see how the source app can have any further interaction with that.
06:29  jamessan: this was in the context of an X environment, so that's the case
06:29  bairui: ok - so I didn't know the mechanics there
06:30  jamessan: and I've definitely seen my CPU get pegged for a minute or so trying to paste 9MB from Vim to Firefox
06:30  bairui: jamessan: 9MB!
06:30  jamessan: bairui: yeah. I was trying to reproduce a bug filed against the Debian package :)
06:30  jamessan: firefox doesn't like having 9MB of text in a textfield
06:30  bairui: hehe... figures. nothing genuine could come of pasting 9MB :)
06:31  jamessan: no, that was the actual number in the bug report
06:31  strull_: bairui: no, as Araxia stated, the filling of the clipboard does not even happen, if you never paste it
06:31  bairui: no. i mean, if you're pasting 9MB, you're doing it wrong. :)
06:31  jamessan: well, there is no real "filling" of the clipboard under X :)
06:31  bairui: strull_: yeah - I got that - that was why I said I could be talking out of turn. :)
06:31  jamessan: unless you have a 3rd party clipboard manager
06:31  strull_: jamessan: agreed
06:32  mohi666: is there any special software needed for omnicompletion to work?
06:32  strull_: hence, the sending app can slow things down
06:32  bairui: mohi666: usually, yes - get a plugin for your language
06:32  jamessan: or the receiving app
06:32  Araxia: "yeah, i like to type up my tar.gz files by hand, character by character, and then post them manually by pasting them into a raw http socket."
06:32  mohi666: I can use omni completion for css, but can't get anything for python
06:32  strull_: sure
06:32  strull_: both are involved
06:33  strull_: but my experience with vim is, that it doesn't matter much, whether it's "* or "1
06:33  jamessan: mohi666: Python's is notoriously picky but it does have an omnicompletion script and does work in certain circumstances
06:33  mohi666: I just found this one: http://www.vim.org/scripts/script.php?script_id=1542
06:33  jamessan: I don't use omnicompletion much, so I don't recall much other than that
06:33  mohi666: I'm gonna see if it works
06:33  jamessan: *shrug* Vim comes with a script already
06:34  scp1: Doesnt ^n, ^p do what you want?
06:34  Araxia: pythoncompletion.vim works pretty well.
06:34  jamessan: scp1: that's just keyword completion
06:34  scp1: What's 'omni'? Google didnt reveal much
06:34  Araxia: even gives you nice little api previews.
06:34  jamessan: omnicompletion uses the context of the type being completed
06:34  jamessan: scp1: :help new-omni-completion
06:35  Araxia: :help tends to be a much more reliable, accurate, and thorough source of information than google when it comes to things vim.
06:36  scp1: hmm... I'm not supported by vim
06:36  mohi666: I placed pythoncompletion.vim in my ~/.vim/autoload/ but it still gives me unknown function error
06:37  mohi666: I think my vim on arch linux has no support for Python :(
06:37  scp1: that's correct
06:37  scp1: you need the gvim package
06:37  jamessan: mohi666: :echo has('python')
06:38  mohi666: jamessan: Gives 0
06:39  scp1: uh, this omnicomplete stuff seems a bit to advanced
06:39  jamessan: then I'd suggest install the gvim package as scp1 suggests
06:39  mohi666: alright
06:40  scp1: haha. my $foo = 'foo'; my $bar = ' ... when I press ^n it completes to bar.
06:41  jamessan: <C-n> isn't omnicompletion
06:41  scp1: I know... I just find it funny
06:41  jamessan: so, that's expected behavior.  it's just completely the closest previous keyword
06:41  mohi666: installed gvim, it doesn't give me any error
06:42  mohi666: but when I type raw then press ctrl+x+o , it says pattern not found
06:42  mohi666: isn't it supposed to show raw_input and other methods?
06:43  jamessan: try something more substantive.  maybe "import sys\nsys.<C-x><C-o>"
06:44  mohi666: it's still not showing anything
06:44  mohi666: the thing about arch linux is that it uses python 3 as the main python
06:44  mohi666: maybe all these scripts are written for python 2x
06:46  jamessan: the python filetype uses python 2.  the python3 filetype uses python3.  also, Vim can be built with support for either the python 2 or python 3 runtimes
06:46  jamessan: :echo has('python3')
06:47  mohi666: it gives 0
06:47  mohi666: it gives 0 for css, but css is definitely working
06:48  jamessan: that's because css isn't something that has language bindings built into vim
06:49  jamessan: so has('css') doesn't make sense
06:49  mohi666: even php gives 0
06:49  jamessan: for the same reason
06:50  jamessan: the only language bindings that Vim can have *compiled* in are python, ruby, perl, tcl, and mzscheme
06:50  mohi666: perl gives me 1
06:50  jamessan: that's what the has('...') statements are checking
06:51  mohi666: so does ruby
06:51  jamessan: those has() checks have nothing to do with whether omnicompletion works, except that python's omnicompletion script requires that the python language bindings are compiled in
06:51  mohi666: I guess I have to compile vim by myself with python support
06:51  jamessan: I thought you already said that :echo has('python')  said 1
06:52  mohi666: no, it still gives 0
06:52  jamessan: try gvim
06:52  mohi666: but it doesn't give me the unknown command anymore
06:52  mohi666: I only need vim :(
06:53  mohi666: gvim doesn't work well on ssh :(
06:53  strull_: it does, given your setup is correct
06:53  jamessan: sure it does.  gvim -v  will start run it in the console.  it'll also automatically run in the console if it can't connect to an X server
06:54  jamessan: unless they built it the brain-dead way of gvim being gui only
06:55  mohi666: using -v option, echo has("python") gives me 1 now
06:57  jamessan: which is expected since only the gvim binary has the language bindings.  now the "import sys\nsys.<C-x><C-o>" bit should work
06:58  mohi666: yes sir.
06:58  mohi666: it's working. Thanks for the help
07:01  Araxia: mohi666: you might want to look at pydiction.vim, too.
07:02  mohi666: Araxia: Actually I was trying to install that one as well. but since I was having hard time installing the regular omni completion feature, that plugin didn't work for me
07:03  Araxia: yeah, it's definitely more work to get going. but quite nice once you do. maybe a project for later.
07:55  iaj: I fixed the foldopen fuzzyfinder thingie! :)
08:12 --- WebDragon is now known as WebDragon|away
08:34  iaj: Hmmm... when command-t or some buffernavigation thing closes.. what's the even I could use when returning back to the editing file?
08:34  iaj: eg. which au {event} ?
08:47  the_isz: iaj: you might want to have a look at  :he autocmd-events-abc  and try out :)
08:47  the_isz: granted, that was quite a lazy answer :)
08:48  iaj: Ohh, I didn't know something like that exists... ;)  you happen to have some bufer plugins installed?
08:49  iaj: Omg how many events there are.
08:54  Evanlec: heh
08:54  the_isz: iaj: not that i'd know of. the buffer plugins i mean
08:56  iaj: Gnaaa... I'm using FuzzyFinder, and I got WinEnter:  and WinLeave set up... however WinEnter ain't get called when I just cancel the fuzzyfindersearch- "box"
09:21  Evanlec: iaj: what are you trying to accomplish with fuzzyfinder?
09:29 --- pov is now known as Guest27655
09:30  iaj: Evanlec: well when I cancel a search query.. I need to update my statusline
09:30  Evanlec: iaj: why I wonder?
09:30  iaj: got colors in it.. for active / inactive one.
09:30  Evanlec: Araxia: did you get pydiction working? Im having a bit of trouble with it...
09:37  Evanlec: does it make any sense to have a script in ~/.vim/plugin and also in ~/.vim/autoload ?? what does the autload dir do that the plugin dir does not?
09:38  iaj: Evanlec: I wondered about that one as well :)
09:38  Evanlec: i see certain .vim files in both dirs
09:38  Evanlec: and it kind of irks me
09:49  bairui: Evanlec: well, without having seen the particular files in question, I can only offer generalities. What has probably happened is that the /plugin/ file simply calls functions in the /autoload/ script. This allows for delayed loading to speed up Vim startup.
09:50  Evanlec: bairui: eh..in this case its the same file, i think i made a booboo some time ago
09:50  the_isz: ah! there he is. morning bairui :)
09:50  bairui: g'day, the_isz :)
09:50  bairui: Evanlec: ah. operator error then, eh? ;)
09:50  Evanlec: bairui: yes i believe so
09:50  bairui: hehe
09:52  the_isz: not necessarily, though. i have a snipMate.vim both in autoload and plugins and they seem to be totally different files.
09:52  bairui: the_isz: they *should* be completely different
09:53  the_isz: indeed. just wanted to say that there being two same-named files in the two directories doesn't mean there's something wrong.
09:53  bairui: oh, not at all. same content was the problem.
09:54  the_isz: must have over-read that... time for my morning coffee, i guess...
09:55  Dynetrekk: in fortran syntax highlighting, there is no coloring for the % operator. how can you get this?
09:59  Evanlec: the_isz: yea...i believe it was same exact file ;p
10:00  the_isz: Evanlec: then i'd also assume the problem source to be in front of the monitor :)
10:02  bairui: Dynetrekk: have a look at your syntax file and see what group it uses for operators. Have a look for a   syntax match    statement containing existing operators and add your   %   in there. May work, may cause your eyes to bleed. Good luck.
10:02  Dynetrekk: where can I find the syntax file?
10:03  bairui: it will be in the standard vim files - /usr/share/vim/blah/syntax/fortran.vim
10:03  bairui: you can do a locate or find for it
10:03  bairui: unless, of course, you have already customised it and it's sitting in your ~/.vim/syntax/ dir, but I doubt that.
10:04  strull_: the standart way is to follow $VIMRUNTIME (from within vim)
10:04  bairui: that'd do it nicely :)
10:05  Dynetrekk: I found the syntax file using $VIMRUNTIME, that's more reliable it seems (it was not in /usr/anything). now, I don't really understand the syntax, but the % character only appears in 1 place and it's in a regular expression and seems to be related to comments
10:05  Dynetrekk: I am guessing this hasn't been added to any groups yet
10:05  darkredandyellow: how can I convert existing hard tabs to soft tabs?
10:06  darkredandyellow: :s/^I/  /g
10:06  guns: darkredandyellow: retab!
10:06  darkredandyellow: gives me "pattern not found"
10:06  strull_: there is no such thing as a softtab
10:06  guns: darkredandyellow: make sure you have set expandtab
10:06  Dynetrekk: can I simply copy a syntax file to my $HOME/.vim/ and modify it there?
10:07  darkredandyellow: guns, great, worked like a charm, thanks
10:07  darkredandyellow: strull_, uhm, what?
10:07  strull_: no, it's not that easy, Dynetrekk
10:07  Dynetrekk: strull_: I should modify it in-place?
10:07  strull_: also not the best way
10:08  Dynetrekk: what is the best way then? :)
10:08  strull_: but probably in this case a lot easier. (Though be aware that your changes are lost when updating vim)
10:09  Dynetrekk: easier to modify in-place?
10:09  Dynetrekk: what if I move the file somewhere safe and drop a symlink in my 'vim folder' ?
10:09  the_isz: Dynetrekk: i don't know what strull_ is about to say and he's usually right, but you can add changes to your syntax files by adding an equally named file to the after/syntax folder
10:10 --- silex is now known as Silex
10:10  the_isz: Dynetrekk: that script will be loaded after the one from /usr/share/whatever and you can put your modifications there
10:10  strull_: the_isz: the problem is, that this does not avoid the original file to be sourced
10:10  Dynetrekk: I don't _need_ to avoid the original file being sourced. I think.
10:10  the_isz: strull_: indeed. it actually relies on it
10:11  strull_: and you cannot undo everything done there
10:11  strull_: at least not easily
10:11  the_isz: does Dynetrekk want that?
10:11  strull_: don't know.
10:11  strull_: never looked at fortran.vim
10:11  the_isz: it seems to me he just wants to add another syntax rule
10:12  strull_: yes, but the order of the rules is sometimes important
10:12  Dynetrekk: I don't really know what I want, because I don't know vimscript. but I was thinking something simple, like adding % at the end of this line:   syn keyword fortranKeyword	allocate deallocate nullify cycle exit
10:13  the_isz: Dynetrekk: try adding a after/syntax/fortran.vim file and put your changes in there. if it works: hooray :)
10:13  strull_: yes, try this first
10:14  the_isz: Dynetrekk: i can see why strull_ is cautious about this approach but it probably is the easiest one though it's not guaranteed to work
10:14  Dynetrekk: right. now I just need to understand where to add it...
10:15  the_isz: Dynetrekk: i told you the file
10:16  Dynetrekk: the_isz: oh, I know where to add the file. but what to put in it :)
10:16  Altreus: ahoy. There's a movement that means 'up to the next instance of <character>'. Can someone remind me what it is?
10:16  Dynetrekk: maybe this line: syn match fortranOperator	"\(+\|-\|/\|\*\)"
10:16  bairui: Dynetrekk: in my copy of fortran.txt, it looks like you should be modifying (or making a local /after/ copy) line 143: syn match fortranOperator"\(+\|-\|/\|\*\)"
10:16  bairui: yep! :)
10:17  bairui: Altreus: f
10:17  Altreus: aha thanks :)
10:17  Dynetrekk: I'll try adding a similar line with a % and see what happens
10:17  Altreus: bairui: I am stupid and bound that to something else ._.
10:17  bairui: Altreus: np - there's also t - compare to see the difference
10:17  Altreus: that is probably why I couldn't find it :)
10:17  bairui: hehe
10:18  Altreus: bairui: do you know what the name is in the help text?
10:18  Dynetrekk: this line made it work: syn match fortranOperator   "%" in my $HOME/.vim/after/syntax/fortran.vim
10:18  Dynetrekk: but I did discover that zenburn doesn't highlight fortran operators, so now I need to find a different color scheme... sigh.
10:19  Altreus: oh :help f was enough
10:19  the_isz: Dynetrekk: you can also create after/colorscheme/zenburn.vim :D
10:19  Dynetrekk: the_isz: aha...
10:19  bairui: the_isz: now you're just being funny :)
10:19  the_isz: i am!?
10:19  bairui: :p
10:20  the_isz: this is supposed to work, isn't it?
10:20  bairui: yes. I'm being an idiot.
10:20  iaj: i saw a screencast once, about textmate.. that it was possible to inspect elements in firebug and then just ⌘-click on the stylesheet-ref it was opened in textmate, is there some way to achieve that behaviour with vim?
10:20  the_isz: bairui: you're trying, but you're not very successful, are you ;)
10:20  bairui: i think Araxia had some plugins for that
10:20  bairui: iaj: ^^
10:20  bairui: the_isz: oi!
10:21  the_isz: bairui: and i thought Araxia had some plugins for you being successful as an idiot^^
10:21  bairui: i can be a right idiot when I want to, I'll have you know. Fully capable.
10:21  bairui: he probably does :-/
10:22  bairui: ok - pizza dough is made. All B this time. Pinky finger still out of action.
10:24  schweizer: how can i map <alt>-n to :bn and <alt>-p to :bp ?
10:24  bairui: schweizer: no!
10:25  schweizer: no?
10:25  bairui: cycling buffers is slow
10:25  Dynetrekk: I'm thinking that this is the line I need to modify to highlihgt operators: hi Operator        guifg=#f0efd0
10:25  bairui: use :b instead
10:25  strull_: schweizer: the syntax is <a-n>
10:25  schweizer: bairui: you mean :bX where is the buffer's number?
10:25  bairui: you can use   :b #   for a buffer number   or  :b partial<Tab>   for a partial filename. Try it.
10:25  bairui: schweizer: Ls
10:25  bairui: bah
10:25  bairui: :ls
10:26  schweizer: bairui: i do that all the time but i think shortcuts would be faster
10:26  bairui: if you have two or three files open, maybe. But cycling more than that is slower than flying right there.
10:27  bairui: but, if you really insist:    nnoremap <a-n> :bn<CR>    and    nnoremap <a-p> :bp<CR>
10:27  schweizer: bairui: atm i have 5 files open and :bn is quite fast
10:27  schweizer: thx bairui
10:27  bairui: np
10:27  guns: Could someone who uses SuperTab tell me what advantages it has over normal <C-n> completion with the popup menu? It piqued my interest, but I can't tell what it really brings to the table from the docs
10:28  bairui: none
10:28  bairui: vimgor supertab
10:28  vimgor: A plugin that tries to make tab do all kinds of things, including insert-mode completion. It tends to create more problems than it's worth though. http://www.vim.org/scripts/script.php?script_id=1643
10:28  schweizer: how can i reload .vimrc without closing vim ?
10:28  bairui: you can't
10:28  guns: bairui: that's what I suspected.
10:28  guns: thx
10:28  strull_: bairui: in bad mood today?
10:28  bairui: schweizer: you could use   :mksession   if you're really worried about losing stuff
10:28  bairui: strull_: not at all.
10:28  bairui: guns: np
10:28  the_isz: schweizer: you can :source it, but it's not recommended
10:29  bairui: totally not recommended
10:29  bairui: hence the:  you can't   :)
10:29  bairui: strull_: just buzzing from my first glass of red in like a week. bairui had to be a good boy for ages there. naughty is the new me. :)
10:30  bairui: but now... it's time to chill. Later, lads. :)
10:31  strull_: "glass of red" ?
10:32  schweizer: somehow the mapping to alt-n /alt-p does not work. but ctrl-p/ctrl-n works....
10:32  accel: anyone here use ocaml?
10:32  accel: the indenting in ocaml is ugly
10:34  the_isz: schweizer: mappings to alt are known to be error-prone iirc.
10:34  the_isz: strull_: wine, he meant :)
10:41  avinashhm: hi, i am using cscope with vim .. when i grep using "cscope f e abc" , it gets partial matced also .. .like abcd is returned .. how to restrict to abc ??any help .. tired abc$ .. but i think this is wrong
10:52  jeromz: Heh, I've enabled russian+english spell checking in perl comments and pod. fun.
11:40 --- jhaddad_ is now known as jhaddad
11:49  ViRUS: Does anyone know how to use the output codes from builin_vt320 but the key codes from xterm. I know this might sound stupid, but the platform is horribly broken and I'd like a VIM where color codes and all the keys (including Home/End) work. With vt320 I get a colorful VIM that works - great - but Home/End is broken. With xterm the colors don't work, but I can use all keys. There must be a way to get the best of both worlds, no?
11:50  LeoNerd: You can  :set t_... values to tell vim what the key codes are
11:51  LeoNerd: Or the colour sequences
11:51  ViRUS: I tried using term=xterm and copying all the color codes from vt320, but this didn't work.
11:51  LeoNerd: It ought to
11:52  LeoNerd: All that TERM really does is tell vim which database of strings to load; its behaviour is then driven by those strings
11:52  LeoNerd: If you completely copy every terminal string, it should work fine. If it didn't work, then probably you missed some
11:53  ViRUS: I copied them manually by looking into the help and extracting string by string using :set and replacing ^[ by <Esc> maybe I really missed some. I'm looking into the sources now
11:53  ViRUS: hrm. isnt' there a way to dump all those t_ strings into a file?
11:54  LeoNerd: Have you considered the not-entirely-unreasonable thought of: upgrade your termcap/terminfo? ;)
11:54  LeoNerd: infocmp -L   on a proper machine
11:54  ViRUS: LeoNerd: ain't possible. I'd love to though.
11:54  ViRUS: If it was me I'd just ditch that whole platform. It's highly obsolete and not even good for the gob.
11:56  LeoNerd: ?
11:56  LeoNerd: Ofcourse it's possible
11:56  LeoNerd: Shell into any Linux, BSD, Solaris, OS X box..
11:56  LeoNerd: Here. have mine
11:56  LeoNerd: http://paste.leonerd.org.uk/?show=1243
11:56  LeoNerd: There. xterm's terminfo
11:57  ViRUS: so how would I use this file with vim?
11:57  ViRUS: I mean without fiddeling with /etc or anything else from the system
11:58  LeoNerd: Personally I'd look at updating the termcap/terminfo db on the box
11:58  LeoNerd: Can't say more without knowing more detail about -your- box
12:11  oxman: Hello
12:11  oxman: What do you use to open easily and quickly a file in a project ? (I mean in a fixed directory)
12:12  spiiph: tags, buffers
12:13  avinashhm: hi, how to grep special characters like '(
12:13  avinashhm: using cscope f e "pattern("
12:14  oxman: could you give me more information spiiph ?
12:14  spiiph: That depends on if it's using vim patterns or some builtin patterns
12:15  oxman: i don't understand
12:16  spiiph: oxman, :h 'tags, :h ctags, :h buffer-list
12:16  oxman: thanks
12:16  spiiph: oxman, lots of people find that FuzzyFinder.vim helps though
12:16  spiiph: vimgor, fuzzyfinder
12:16  vimgor: It has been said that fuzzyfinder is http://www.vim.org/scripts/script.php?script_id=1984, spiiph
12:17 --- RichiH is now known as rICHIh
12:17 --- rICHIh is now known as RichiH
12:22  ViRUS: LeoNerd: it's an HP NonStop OSS with broken userland. The box I'm connecting from is an Ubuntu GNU/Linux with gnome-terminal as terminal emulator. TERM=xterm but VIM shows no colors. ":set term=vt320" helps with the colors, but breaks Home/End/Backspace. I found a way to fix the backspace key, but Home/End is still broken. t_kh=<Esc>[1;*H is set for term=xterm, but doesn't work for vt320. I'm puzzled.
12:22  LeoNerd: Naming products wno't help me :P
12:23  LeoNerd: Is your vim looking for a termcap or a terminfo file..?
12:23  LeoNerd: Do you have +w on any directory it might look, so you can provide a fixed file?
12:44  _rane: i'm trying to make a bind that appends ; to end of line and turns hlsearch off because :s seems to highlight the replace
12:44  _rane: so, :s/;\?$/;/
12:46  _rane: how do I use :nohl after that?
12:47  _rane: :s/;\?$/;/<CR>:nohl<CR> I guess
12:50  ViRUS: LeoNerd: I think I've figured out what the problem is. When specifying the codes I was replacing the ^[ by <Esc>, but for some reason it prints <Esc> litteraly instead of inserting an escape character
12:50  LeoNerd: Heh..
12:50  LeoNerd: Enter them as the real escape key
12:50 --- jhaddad_ is now known as jhaddad
12:50  LeoNerd: Ctrl-V Ctrl-[
12:50  _rane: one more issue, how do I make :s not move the cursor?
12:53  spiiph: You can't
12:53  spiiph: Hit '' instead
12:54 * LeoNerd ponders :nomove  much like  :slient
12:54  LeoNerd: Oh.. heh. You can already do that with   :newcommand Nomove <command> ...
12:54  LeoNerd: Save position, run command, put cursor back
12:57  edgimar: On occasion, when running a vim command, the text in the window disappears -- how can I 'refresh' the screen?  I have tried :syn sync fromstart, to no avail.
12:57  _rane: can I use marks?
12:58  spiiph: Yes
12:58  spiiph: Or you could just hit '' as I suggested
12:58  spiiph: or `` if you prefer
13:01  _rane: I noticed your suggestion and tried to figure out what it does
13:01  _rane: `` seems to do something though
13:03  spiiph: :h '
13:03  _rane: thanks
13:12  ViRUS: LeoNerd: finally got it working.
13:12  LeoNerd: :)
13:13  ViRUS: I hat do get the escape key into my vimrc using "echo -e \\e" though, but in the end it worked out. yay! :)
13:14  ViRUS: that's so incredible stupid. I got to wash my brain with some serious amounts of soap - Got to get rid of that stupid knowhow ...
13:15  spiiph: ViRUS, didn't <C-v><C-[> work?
13:15  ViRUS: spiiph: on my local machine VIM would output "ü" (the u-umlaut) and on the remote machine just a plain "["
13:16  spiiph: ?_?
13:16  tonymec|away: yeah, or <Esc> in a mapping, or "\e" in a double-quoted string, or...
13:17  ViRUS: I just copied that raw ASCII character into my .vimrc and it works now. ;)
13:17  ViRUS: I hate my life. Anyone wanna swap?
13:17  spiiph: Not really. :D
13:18  ViRUS: <C-v><C-[> not working might be caused by my keyboard layout which is Colemak
13:19  tonymec: Happiness is a state of mind: «Carpe diem», enjoy the little things of life.
13:20  ViRUS: I'm enjoying a working colorful VIM. :)
13:20  tonymec: ViRUS: even içf Ctrl-V Ctrl-[ doesn't work, what about Ctrl-V followed by Esc ?
13:21  ViRUS: ah, that does the trick
13:21 --- MinceR_ is now known as MinceR
13:21  ViRUS: Already solved it, but good to know for the future. Thanks :)
13:38  AMDmi3: hi; vimrc question: how do I set an option (e.g. expandtab) only for files in specific directories?
13:42  spiiph: AMDmi3, :h BufRead
13:43  iaj: AMDmi3: i got that problem solved with an autocommand au BufRead if expand('%:p') =~ expand('path/to/dir')|set expandtab
13:43  spiiph: No need to use expand
13:43  iaj: but I doubt that's the best solution :)
13:43  spiiph: :h :au
13:43  iaj: ah if theres a slash it takes it as a directory..
13:47  iaj: I could need some help what would be the statusline element inserting the current edited file + path (truncated if too huge)?
13:47  AMDmi3: oh, seems like it's working; thanks a lot!
13:50  peth: why does vim show the : before the line numbers in the cmdwin?
13:51  peth: not really expecting an answer here. i don't think it makes much sense though.
13:53  the_isz: peth: never realized that :)
13:53  iaj: Someone managed to set the title to the PWD?
13:54  peth: the_isz: i only noticed now myself, after using it for quite some, so it can't be that important. :)
13:54  peth: iaj: shouldn't be that difficult. you did look at 'titlestring' ?
13:57  iaj: I tried to set it up once - but.. without success....=(
14:00  peth: iaj: au BufEnter * let &titlestring = Title() and the same for BufWritePost. then a function Title() return expand("%:p:h")
14:00  peth: ... if there isn't a var for that
14:02  iaj: Hmm thanks:S  I thought I had serious trouble with that one
14:03  peth: you'll have to beef that up a little of course for eg. when you're in gnu screen
14:04  peth: s/have to/may want/
14:04  iaj: Heh, yeah, Im MacVim only anyhow :)
14:04  iaj: :-)
14:04  fow: Can't you just do :set titlestring=%f  " ?
14:04  fow: er %F
14:05  iaj: Hmm that's not the path that's the file as well.. no?
14:06  fow: oh, I guess it is
14:14  Silex: anyone uses visual_studio.vim? seems to be not working (cannot find the visual studio instance)
14:15  spiiph: What version of VS?
14:15  Silex: 2008
14:15  Silex: express edition tho
14:15  spiiph: Shouldn't matter
14:15  spiiph: IIRC
14:15  spiiph: Did you do :DTESelectSolution ?
14:16  perlsyntax: hi i got a few question i try to put my cvim.zip plugin in fedora in ~/.vim but it tell me there a file made.
14:16  perlsyntax: Not sure where to put the file.
14:17  perlsyntax: any ideas?
14:17  Silex: spiiph: I hate no DTESelectSolution... lemme try to get the script again, maybe I did something wrong
14:18  spiiph: Hmm, that should be implemented. You got it from vim.org, right?
14:19  Silex: yes
14:19  Silex: I only have a function DTEGetSolutions()
14:19  Silex: no :command anywhere in the .vim file
14:20  spiiph: Lemme check
14:20  Silex: the plugin seems to be working and all, it just says it cannot find the visual studio solution
14:20  spiiph: Was a long time since I used that version. I did my own fork instead.
14:21  Silex: hum, maybe you could share your fork?
14:21  spiiph: Sure, it's on github
14:22  spiiph: Bit buggy, tho, and I don't really support it.
14:23  spiiph: Silex, how about \vs ?
14:23  spiiph: Does anything happen then?
14:24  Silex: yes sure stuffs happens, but always "Searching for visual studio instances... No visual studio instances found"
14:24  Silex: apparently the python _get_dte() function fails
14:24  peth: 0v$ => paste in other app pastes with newline. then h and paste again => still with newline. then hl => pastes without newline. bug y/n?
14:25  spiiph: Alright. Did you install the pywin32 modules?
14:25  Silex: yes
14:25  spiiph: https://github.com/spiiph/visual_studio
14:25  Silex: let's try your version
14:25  spiiph: But I doubt that'll work any better, unless you have a working _get_dte() function. Hmm.
14:27  Dynetrekk: can vim show a ruler after column 80?
14:27  spiiph: Silex, you can turn on logging in visual_studio.py
14:27  peth: Dynetrekk: :help 'cc
14:27  spiiph: Dynetrekk, ...if you have vim 7.3
14:27  Dynetrekk: I do, I do!
14:28  fow: Dynetrekk, with Vim 7.3, you can use the colorcolumn option. With previous versions, you'd need to create a syntax group for something like /\%80v/ or something
14:28  fow: what peth siad.
14:28  fow: said
14:28  Dynetrekk: wow, ghastly color :P but ok
14:28  peth: customizable. see :help 'cc
14:28  spiiph: You can change that
14:30  Silex: spiiph: http://ideone.com/KZKLz
14:30  peth: any opinions on the v$h thing?
14:30  Silex: wtf, I found a bug with ideone apparently
14:30  spiiph: indeed :D
14:30  spiiph: peth, what are you trying to do?
14:31  Silex: spiiph: http://codepad.org/n5TcuqLJ
14:31  peth: spiiph: nothing really, i just randomly noticed and am curious why it would be so.
14:31  peth: it doesn't make any sense to me that hl would change if there's a newline included in the selection.
14:33  peth: at least not at that point. i'd kind of understand if it changed anything while the cursor is *on* $, but not if it's before.
14:33  Silex: I don't see how 0v$ would paste anything for a starter
14:33  peth: ...
14:34  Silex: how are you pasting?
14:34  peth: it obviously doesn't. i said "0v$ => paste in other app". i meant "0v$, then paste".
14:34  Silex: how are you pasting?
14:34  peth: shift+insert, middle mouse, any way
14:35  Silex: then you paste it wrong
14:35  Silex: you're just lucky what you paste contains an i/a/A/o/I or whatever char enters insert mode
14:36  Silex: then what you say about h makes no sense
14:36  peth: would someone who read what i wrote continue this chat with me?
14:36  peth: Silex: i'm pasting in another app, say, a term
14:37  peth: after 0v$ in vim
14:37  Silex: so, the entire line is visually selected in visual mode, but not select mode
14:37  Silex: so pasting anything here won't replace the selection or anything
14:38  peth: i'm not expecting it to
14:38  Silex: peth: until you explain really what you're doing we can't help you
14:39  Silex: pasting with p, or with middle click are two completely different things
14:39  Silex: I suggest you explain in terms of keystrokes/mouse clicks what youre doing
14:40  Silex: spiiph: maybe there's some vc++ option I ticked off? like DDE server or smth?
14:40  peth: 1) visually select something in vim with v$. 2) go to term, paste with shift+ins. 3) observe newline. 4) go back to vim. 5) h 6) go back to term, and shift+ins. 7) still newline 8) go back to vim 9) hl 10) go back to term and shift+ins 11) no newline.
14:41  Silex: so 1) & 2) are two completely different window?
14:41  peth: yes
14:41  peth: this is what i meant with "other app"
14:42  Silex: ok so basically you never use vim to copy the text
14:42  Silex: you rely on the magic middle mouse copy thing
14:43  Silex: I think I see your "bug" now, but I don't know if it's due to vim or not
14:43  Silex: does this happen with gedit?
14:45  peth: gedit doesn't do it like that at all because gedit has no visual mode and handles including the newline in the selection differently.
14:46  peth: if you want gedit to include the newline you have to select to the next line. not until $
14:47  spiiph: Silex, it shouldn't need DTE, it uses COM
14:48  Silex: spiiph: http://codepad.org/MFzDiRga
14:48  Silex: I printed the display_name, so basically it finds it but it doens't match its expected name
14:49  spiiph: peth, v$ includes the newline when pasting over it, v$h doesn't. I'm not sure how this works when pasting the selected region though.
14:50  Silex: peth: I wasn't aware X11 selection was also triggered by visual mode. Anyway looks like a minor issue
14:50  spiiph: peth, you can use V when you want the newline, and v$h when you don't.
14:50  peth: spiiph: it works 100% inside vim afaict, the problem arises using the autofilling of the x selection when switching back and forth between vim and term
14:50  spiiph: peth, yeah, I can understand that.
14:51  thrope: is there a way to have word wrap in a printout from vim (so far internet says no)
14:51  spiiph: Silex, is the GUID wrong?
14:51  Silex: spiiph: http://codepad.org/QQmVp2gd
14:52  Silex: it expects something like "!VisualStudio DTE"
14:52  peth: and concerning the v$h, that's exactly what i expected and it works. it doesn't work when you first $v then switch to term and paste, then come back to vim and h.
14:52  Silex: and it actually receives the name of my solution
14:52  spiiph: Silex, yes, hmm.
14:52  ludan: hi guys
14:52  peth: uh, s/\$v/v$/
14:52  ludan: is there anyone who managed to integrate vim with chrome?
14:52  Silex: spiiph: does it matter in which order I loaded stuffs?
14:53  ludan: I'd like to edit text area with vim… in chrome (this is doable in ffox)
14:53  Silex: spiiph: I'll try with an empty visual studio instance
14:53  spiiph: Silex, there is something in PyWin32 that you can use to build some sort of databases over the different COM DLLs
14:54  spiiph: But it's been a long time since I did any debugging on this, so I'm not sure if that's the problem
14:54  Silex: I think maybe vs2k8 changed the way it reports stuffs with SP1
14:54  spiiph: Silex, in any case, you should be able to modify the function to parse the string differently, in order to get the solution
14:54  Silex: spiiph: yeah
14:55  Silex: I'm just trying to see wether playing with instances/ticking some options fixes it tho
14:55  spiiph: Silex, that sounds contra-productive, and I use 2008SP1
14:55  spiiph: Although the full version
14:56  Silex: spiiph: counter productive would be to start "fixing" a script that doens't need to be fixed to me
14:56  spiiph: Silex, you can load the _get_dte() snippet into the Python interpreter, to see if you can find the source of the problem.
14:56  Silex: yeah
14:56  Silex: anyway, thanks
14:56  spiiph: Silex, sure, but if Microsoft really did change something. :)
14:57  spiiph: And just to see if it works.
14:57  spiiph: ludan, that would be a firefox plugin that we might not know anything about.
14:58  the_isz: ludan: maybe you should try asking on #chrome if that channel exist, maybe those guys know a plugin for their browser that can do this.
14:58  Silex: spiiph: the original _get_dte() is very different than your fork
14:58  ludan: yes I know that this is not the best place to ask but since we're all vim users… I thought that maybe someone was also using it in his browser
14:58  ludan: ok sorry if I went OT
14:59  spiiph: Silex, yes, I refactored quite a lot.
--- Log closed Wed Jan 19 14:59:34 2011
--- Log opened Wed Jan 19 15:02:25 2011
15:02 --- Users 607 nicks [0 ops, 0 halfops, 0 voices, 607 normal]
15:03 --- Channel #vim was synced in 89 seconds
15:06 --- keystr0k_ is now known as keystr0k
--- Log closed Wed Jan 19 15:09:12 2011
--- Log opened Wed Jan 19 15:48:22 2011
15:48 --- Users 615 nicks [0 ops, 0 halfops, 0 voices, 615 normal]
15:49 --- Channel #vim was synced in 74 seconds
15:49  Silex: ok. I'll test when I do the switch
15:50  spiiph: I can't recall how much I had to change to get VS2008 to work, but I don't think it was too much.
15:51  Silex: the original plugin claims to support 2k8
15:55  spiiph: Yes
15:56  spiiph: But I had a hand in doing some modifications for that version, and I think some of them involved 2008.
16:00  fgro: so when i mark the content of my file (for example php) and press "==" everything gets formatted. How does that actually work? in the help "==" is expressed as filter?
16:00  rson: fgro: it passes the marked region through 'equalprg'
16:01  rson: fgro: and :help equalprg will explain what happens when this option is not set
16:01  fgro: rson: cheers!
16:03  fgro: another question, if i wanted to format all open files, i could do: :bufdo <1,*><==> ?
16:03  fgro: sorry, well i how do i invoke ==?
16:05  peth: you could :bufdo norm gg0=G
16:05  peth: gg=G should suffice
16:06  fgro: great!
16:06  fgro: thanks
16:28  chairabanta: sometimes I would know what does a combinaison of key is it possible to know like emacs does?
16:29  paradigm: chairabanta: if I understood your question correctly, you could try :help key-combination
16:29  paradigm: which will tell you what the key combination does
16:29  paradigm: for example, :help ctrl-o
16:29  chairabanta: paradigm, how do you know this was this key I would know!!?
16:29  chairabanta: lol
16:30  paradigm: :D
16:30  chairabanta: i was really searching for ctrl-o :D
16:32  paradigm: well I'm happy I could help
16:32  chairabanta: paradigm, yes thx
16:34  kurkale6ka: chairabanta: fyi: :h^o also works
16:35  paradigm: it should also be noted that you can prepend the key combination with the mode, eg: :help i_ctrl-o
16:35  paradigm: for ctrl-o in insert mode
16:36  Silex: I was asked the list of all commands the other day
16:36  Silex: and I couldn't answer
16:36  chairabanta: paradigm, oh yes I understand better the key combinaison I was reading it in modal mode
16:36  Silex: I was like... "but you never need to know that!" and well, it didn't go well
16:36  Raimondi: :h holy-grail
16:37  kurkale6ka: Silex: :h index^d
16:37  Silex: ooooh
16:37  Silex: <3
16:37  Silex: thanks
16:39  kurkale6ka: I once tried to count the max commands one needs to remember (without plugins)... it went to something like 1500
16:39  kurkale6ka: not needs but can
16:42  Silex: :)
16:42  Silex: I find it funny how some commands completely switch meaning between the modes and that it doesn't bother me at all.
16:46  massimo: Hi. How do I make /<foo>.*</foo>  to search parts with line breaks inside?
16:47  Silex: massimo: see {-}
16:47  Silex: (I think you just add {-} after the .)
16:47  kurkale6ka: or \_. :)
16:47  Silex: wait, it's _
16:47  Silex: what kurkale6ka said
16:48  kurkale6ka: and it is \{-}
16:52  edgimar: I've been trying to make vim work with synctex by calling a pdf viewer (okular) with a certain keybinding.  This works fine, except that for vim (not gvim), the text in the vim window 'vanishes' (it returns if you page-up/down).  Has anyone encountered this?
16:53  edgimar: (the text vanishes after launching okular with the keybinding)
16:53  skizzhg: this thing that i can't change my nick while i lose connection with the server is crap
16:53  disgrntld: I have a bunch of tabs and crap open already but I just changed my .vimrc... is there an easy way to reload it for all the current windows/buffers?
16:54  spiiph: :source ~/.vimrc
16:54  disgrntld: ohh, duh
16:54  disgrntld: thanks
16:56  mgedmin: disgrntld, alternative is to :mksession, :qa, and then restart vim with vim -S Session.vim
16:56  mgedmin: that will restore all your tabs, windows and buffers
16:56  mgedmin: :source is simpler, but doesn't always work
16:56  mgedmin: (e.g. you used :command or :function without a ! so they can't be redefined, etc.)
16:58  edgimar: ok I finally solved my problem: redraw!
17:02  disgrntld: nice mgedmin, I'll keep that in mind for next time, thanks!
17:26  Silex: anyone managed to get vim run inside the MDI window of visual studio?
17:29  kurkale6ka: the vimemu team :)
17:31  Silex: :)
17:32  Silex: I thought vimemu was not vim?
17:34  Silex: I'm trying the MDI section of http://vim.wikia.com/wiki/Calling_gvim_from_MS_Visual_Studio
17:34  Silex: but I guess it only works with vc6
17:34  kurkale6ka: never tried
17:34  kurkale6ka: http://www.viemu.com/
17:35  Scala_: viemu is pretty neat
17:36  Scala_: Makes using VS bearable
17:36  dgfitch: there's also jaredpar's free VsVim for VS2010: http://visualstudiogallery.msdn.microsoft.com/en-us/59ca71b3-a4a3-46ca-8fe1-0e90e3f79329
17:36  Scala_: ...though last time I used it, it was missing some crucial features (such as switching between open files with :bn or :bp
17:36  Scala_: )
17:37  iratik: Anyone here use vim-ruby-debugger just by chance?
--- Log closed Thu Jan 20 08:34:25 2011
