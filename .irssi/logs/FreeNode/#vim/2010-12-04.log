--- Log opened Sat Dec 04 00:00:40 2010
00:08  kedarm: How do I jump between a beginning-end of a ruby block (do .. end)? Which plugin do I need?
00:08  spiiph: matchit ought to do it
00:08  spiiph: :h matchit-install
00:08  kedarm: spiiph: thanks! it works for both do..end and def..end?
00:09  spiiph: Yeah
00:11  accipter: you looked
00:13  homekevin: You can't prove I looked.
00:17  singlecore: is there a built in way in vim to convert the charset of the current buffer from xy to utf8 ?
00:17  singlecore: or do i need to use external tools
00:18  rudi_s: singlecore: You can do it in vim. But iconv is the normal solution.
00:18  rudi_s: vimgor: enc
00:18  vimgor: Vim has multiple settings for encodings: 'encoding' sets Vim's internal encoding (should be utf-8), 'fileencoding' sets the encoding of a file, 'fileencodings' (s) are encodings tried when opening a file. If Vim doesn't detect the encoding correctly, use :e ++enc=encoding filename to force the given encoding. If possible try it in GVim or terminal encoding problems might interfere.
00:19  rudi_s: singlecore: :e ++enc=xy to open it with encoding xy, then set fenc=utf-8 and :wq
00:20  singlecore: rudi_s, thx iconv needs to know the original charset as far as i know
00:21  singlecore: ill try the second one
00:21  rudi_s: singlecore: :e also needs the file encoding!
00:21  singlecore: can't i do :e ++enc=utf8 ?
00:21  rudi_s: Guessing the encoding/charset is really difficult because a file may be valid in multiple.
00:22  rudi_s: singlecore: No, that opens the file as if it is a utf-8 file.
00:22  singlecore: the ugly way would be creating a new file and then c&p into it
00:22  singlecore: k thx anyway
00:23  rudi_s: singlecore: There's also the iconv-test all encodings way ..
00:23  kedarm: With pathogen, my understanding is that I need pathogen.vim in ~/.vim/autoload and then I should put all my plugins (in their respective directory structures) in ~/.vim/bundle, right?
00:23  rudi_s: singlecore: Like looping over `iconv -l` and trying to convert it to utf-8, and then checking the output.
00:23  rudi_s: And there's always file.
00:23  rudi_s: `file`
00:23  singlecore: yea but thatll make no fun
00:24  rudi_s: singlecore: Why not?
00:24  singlecore: if u know how nasty the latex compiler acts when encountering errors
00:25  rudi_s: singlecore: ? I wouldn't check it with latex, but with my own eyes ;-)
00:25  singlecore: or did u mean just look into the files and check if its bullshit in there
00:25  rudi_s: singlecore: Yep.
00:25  singlecore: lol yea makes sense^^
00:25  rudi_s: singlecore: Something like this to test it quickly: http://paste.debian.net/101465/ unknown is part of the file you want to test.
00:26  rudi_s: *unknown is a file containing parts of the file you want to test
--- Log closed Sat Dec 04 12:46:32 2010
--- Log opened Sat Dec 04 12:46:41 2010
12:46 --- Users 575 nicks [0 ops, 0 halfops, 0 voices, 575 normal]
12:48 --- Channel #vim was synced in 113 seconds
12:53  stuckey: I figured it out.
15:47  inknoir: hi, i'd like to use vim for coding and novellwriting, so i need different formating-environments. version:http://pastebin.com/znhf6QPJ .vimrc:http://pastebin.com/CQC232GX the <F7>-mapping doesnt work at all. Why?
15:49  DHulme: have you tried putting all those options into one :set command instead of separate ones
15:50  DHulme: all those spaces between <CR> and : are going to trigger your mapping of space to PgDn
15:55  inknoir: sorry, got kicked. your answer helped, thanks a lot
16:07  frosch: Hi, I've mapped Ctrl-h to execute a function but nothing happend. I guess something else is mapped to C-h already because everything works if I use "map <F2> :py EvaluateCurrentRange()" instead. Is there a way to find out what else might be mapped or what is going wrong here?
16:11  StanAngeloff: frosch: call :map with no arguments, should give a full list
16:12  frosch: StanAngeloff: Okay, there is something:  <C-H>       * <C-W>h
16:12  frosch: Do you know what this does?
16:14  StanAngeloff: frosch: think it was something to do with tabs, but i've not used it myself
16:15  frosch: thanks
16:15  StanAngeloff: <C-W>h that is, C-H should be safe to override if you haven't used it
16:18  StanAngeloff: Hi guys, can anyone help disable numeric keypads in Vim? pretty inconvenient having <Esc>Om for example mapped to '-', etc.
16:19  tmr: ^H is backspace.
17:19  jerojasro: dear all: how do you test (unit testing) the scripts you write?
17:19  jerojasro: vimL scripts
17:21  walt: jerojasro: I write most things in python, which is easy to test, and glue it into vim with some VimL
17:21  walt: jerojasro: for pure VimL stuff it's usually small enough to just write it
17:21  walt: the testing is in my usage
17:48  fragione: how do I set/get the current state of a vim option, inside a function?
17:48  homekevin: I can't say I've done that, jerojasro.
17:48  homekevin: fragione: Options can be referred to by name, with & prepended.
17:49  homekevin: fragione: :h expr9
17:50  homekevin: Wait, that was wrong
17:50  homekevin: fragione: :h expr-option
17:50  abstrakt: can I map the windows key?
17:50  abstrakt: I want to keep the windows key as the windows key
17:50  abstrakt: and simply use it
17:51  strull: homekevin meant :he expr-option
17:51  abstrakt: I don't want to reassign my windows key to ALT
17:51  abstrakt: don't want to reassign my windows key to ESC either
17:51  homekevin: abstrakt: I'm not sure, but if it does work we'll need to know what OS and terminal most likely
17:51  abstrakt: Ubuntu
17:51  abstrakt: and gvim
17:51  abstrakt: you can't map ALT in terminal vim
17:51  strull: because Alt is a modifier
17:51  abstrakt: so I doubt you can map the windows key in terminal vim either
17:51  homekevin: abstrakt: Since Ubuntu doesn't have a Windows key, we'll need to know what it's mapped to.
17:52  homekevin: abstrakt: If you're not sure, you might try running xev to find out
17:52  abstrakt: homekevin, um, well ubuntu definitely recognizes it as the "windows" key, because it shows up a Win+A for example in the keyboard control pannel for hotkeys, but I know what you're talking about
17:52  abstrakt: ok, should I pipe xev through something?
17:52  abstrakt: what's xev exactly?
17:52  abstrakt: like xev | grep windows?
17:53  homekevin: abstrakt: man xev
17:53  fragione: homekevin, how do I set an option? &option = value?
17:53  homekevin: abstrakt: Alternatively, I guess you could try the CTRL-V trick to see what ends up in Vim
17:53  strull: fragione: :he :set
17:53  abstrakt: oh nm
17:53  abstrakt: i've used this
17:54  homekevin: fragione: You can just use set, unless you need to expand some expression, in which case you can use :let
17:54 --- eoc is now known as eoc|afk
17:54  abstrakt: http://pastebin.ca/2010532 <- is what xev gives me when I press the "windows" key on my laptop
17:54  abstrakt: lemme see what CTRL-v in vim gives me
17:54  fragione: ok... thanks
17:54  abstrakt: hmm, nothing actually
17:54  homekevin: abstrakt: So it's mapped to Super.
17:55  homekevin: I'm not sure that'll work.
17:55  abstrakt: k
17:55  homekevin: Super is a modifier like Alt.
17:55  abstrakt: oh well, no worries I'll just stick with Alt
17:55  abstrakt: for now
17:55  homekevin: You could possibly map <Super-something>
17:55  abstrakt: unless you know what to use in vim to get that to work, <M-a> for example is "ALT-a" for me, because Meta = Alt in gvim
17:56  abstrakt: homekevin, any idea where to find the docs on mapping super-something?
17:56  homekevin: abstrakt: I tried :h super<CTRL-D> and nothing came up.
17:56  homekevin: So I don't think it's directly supported.
17:56  abstrakt: yeah, I'll probably have to map it to ALT or something using xmodmap
17:57  abstrakt: and I'd rather keep it around cuz I can use ALT for stuff like that anyway
17:57  homekevin: abstrakt: xmodmap seems a little overkill. There are a bunch of options for the Windows key in the keyboard configuration.
17:57  abstrakt: basically, right now, I would love to map Win-x Win-c and Win-v, globally throughout my system
17:57  abstrakt: to be copy and paste
17:57  abstrakt: regardless of app
17:58  abstrakt: homekevin, ok well point is windows won't really be "windows" anymore
17:58  abstrakt: not sure if I want that
17:58  abstrakt: mostly I want to do this cuz I use a mac at work, and despite everything I hate about Mac OS X
17:58  homekevin: abstrakt: That seems a little weird. CTRL would be the "standard" modifier for that.
17:58  abstrakt: one of the things I love is the consistency
17:58  abstrakt: homekevin, except that CTRL is not the same in terminal or in vim or in gvim
17:58  abstrakt: homekevin, CTRL-c in terminal being SIGINT usually
17:59  abstrakt: homekevin, and CTRL-v in vim being "-- VISUAL BLOCK --" mode
17:59  abstrakt: which I use *all* the time
17:59  homekevin: abstrakt: Right, but I don't expect you'll have much luck changing every application out there.
17:59  abstrakt: i guess
17:59  abstrakt: just curious if there's a system type command that will try to "paste" in to any app
17:59  abstrakt: I guess copy paste are always app centric
17:59  homekevin: You could minimize what you need to change by using the already-common convention.
18:00  abstrakt: almost, but I mean, like apps that are based on GNOME, if you use a text box, isn't copy paste automatically available to you even if you don't put it e.g. in your edit menu?
18:00  abstrakt: homekevin, the thing is, the convention(s) between the apps I use on a regular basis are not at all common
18:00  abstrakt: homekevin, vim is "+p for paste, terminal is SHIFT-CTL-v for pase, and most other apps are CTRL-v for paste
18:01  abstrakt: it seriously gets in the way for me, having to remember where I'm at
18:01  abstrakt: on mac, every app I've used, copy and paste are still CMD-c and CMD-v
18:01  homekevin: abstrakt: CTRL-SHIFT-v is in Vim also, since it's a terminal app.
18:01  abstrakt: homekevin, but I use gvim
18:01  abstrakt: it's not that in gvim
18:02  abstrakt: homekevin, I don't even think you're right though
18:02  abstrakt: I think you're confusing the terminal ctrl sequence with a vim ctrl sequence
18:02  homekevin: The point is that usually if an app doesn't support the convention it's for somewhat good or historical reasons.
18:02  homekevin: Terminal needs CTRL-C for something else, for example.
18:02  abstrakt: no that's your point
18:02  abstrakt: my point is that I want it to be consistent
18:02  abstrakt: it is a reasonable request because I know for a fact from using a mac for the past year
18:03  abstrakt: that it slows me down when I get back to my ubuntu box at home
18:03  homekevin: But if it helps, I'm pretty sure you *can* make gvim use CTRL-c/v/x
18:03  abstrakt: homekevin, whatever, I've already made gvim use ALT-c and ALT-v
18:03  abstrakt: and that's good enough for me, I also just like not having to type "+p
18:03  ktm5124: Man Zhivago is a terrorist
18:03  abstrakt: honestly that's a pita
18:04  abstrakt: so I've got that, I guess I should ask in #ubuntu or something
18:05  homekevin: abstrakt: Well, do what you want, but I'll tell you what I've told other people: You are more flexible than all the apps in the world. You should give yourself a chance to adjust before trying to adjust all of them.
18:22  elbeardmorez: hi. how do i yank to a ssh terminal session's clipboard in linux please?
18:23  elbeardmorez: am i correct in thinking that the +xterm_clipboard support only effects x-window sessions?
18:25  rudi_s: elbeardmorez: A ssh terminal session doesn't have a clipboard.
18:25  alelos: hi guys, I guess u here this alot but I cant find anything helpfull, is there a command to make gvim transparent? any link to provide?
18:25  rudi_s: You could use screen's copy buffer or depending what you want to do, vim's global registers.
18:26  walt: alelos: first of all, why the hell would you want that. Secondly, that is up to your window manager.
18:27  elbeardmorez: rudi_s: thanks. any idea what clipboard IS used when i initially ssh into a remote box ..because at the ssh session shell prompt i CAN use a clipboard to pull text back to the local session..
18:27  walt: alelos: you can run vim in terminal, and use a terminal that supports transparency
18:28  alelos: walt: well i do that with vim I was wandering if there's anything for gvim... I think there was a command for macvim like "set transparency=XX"
18:29  alelos: walt: I want to check the looks to see if i like it
18:29  abstrakt: homekevin, a year is not enough time to "give myself a chance"?
18:29  abstrakt: lol, ok man, whatever
18:29  rudi_s: elbeardmorez: How do you use the clipboard? Because I've never heard that this is possible.
18:29  abstrakt: I adjusted to vim in a couple weeks
18:29  abstrakt: if something even simpler is still tripping me up
18:29  abstrakt: then I think there might just be something wrong with the usage paradigm
18:30  elbeardmorez: rudi_s: it must be some 'Xfce Terminal Emulator' magic then.. ..i'm just looking into the 'screen' command thanks
18:30  walt: alelos: I don't know much of gvim on linux. It uses GTK+ I think? So I am guessing something in GTK themes could maybe do it
18:30  walt: alelos: it's not really up to vim I think
18:31  walt: gvim on windows can not be transparent
18:31  walt: afaik
18:31  rudi_s: elbeardmorez: Still I'm curious, how do you use the clipboard? (Maybe I'm overlooking something.)
18:31  alelos: walt: ok, thx i'll look to that direction
18:32  paradigm: abstrakt: leave me out of it >.>
18:33  abstrakt: lol
18:33  abstrakt: rudi_s, in terminal vim?
18:33  elbeardmorez: i ssh into the box, vim the file, save it, now at the prompt i grep -A the file to get the bit i want topy back to the local box .....then i use the mouse to create the selection ..and then, only then can i pull it back to the local box ..i paste with a middle-click
18:33  abstrakt: rudi_s, it depends on your terminal, you just go in to insert mode, and then you use the paste that your terminal uses
18:34  abstrakt: rudi_s, often times SHIFT+INSERT or CTRL-SHIFT-v
18:34  elbeardmorez: *topy=to copy
18:34  abstrakt: rudi_s, or middle mouse or whatever
18:34  abstrakt: rudi_s, you probably want to :set paste first though however
18:34  rudi_s: elbeardmorez: Ah, okay, you use the mouse. That uses the clipboard of your local X and has nothing to do with SSH!
18:35  rudi_s: abstrakt: Yeah, I know. I thought he uses "* or "+ with SSH.
18:35  rudi_s: That got me confused.
18:36  rudi_s: elbeardmorez: Also have a look at :h'clipboard'
18:36  elbeardmorez: rudi_s: ah, so vim's mouse support gets in the way of that then..
18:37  rudi_s: elbeardmorez: Possibly. I'm not sure, I don't use the mouse often ...
18:37  rudi_s: Screen's copy mode works very well for me.
18:38  abstrakt: elbeardmorez, :help paste
18:38  abstrakt: elbeardmorez, mouse doesn't get in the way if you use :set paste
18:46  elbeardmorez: rudi_s: thanks for the screen idea ..but it's going on the 'too learn how to use' list..
18:47  elbeardmorez: abstrakt: could you humour me please? ..how is the cb command useful in my ssh terminal predicament, it looks like it is only for gui sessions
18:48  rudi_s: elbeardmorez: Put it on top of that list, screen is very useful ;-)
18:49  rudi_s: I pointed you to 'cb', just as a general idea how vim can interface with the system clipboard (won't work with ssh, but on your local system).
18:49  abstrakt: elbeardmorez, are you using literally like the CONSOLE or are you using gnome-terminal
18:49  abstrakt: doesn't matter if you're in ssh or not
18:49  abstrakt: elbeardmorez, ?
18:50  elbeardmorez: xfce-terminal emulator
18:50  abstrakt: elbeardmorez, ok, so look in the edit menu
18:50  abstrakt: elbeardmorez, what is the command to paste stuff, on the command line, not talkingi about when you're running vim, just on the command line
18:51  elbeardmorez: yep, i'd expect that to work ..but using it whilst in Vim doesn't seem to fill the right buffer ..using it on the ssh term prompt DOES copy to the correct (read: one that works) buffer..
18:54  elbeardmorez: ..scrap that ..i was using the SHIFT-CTRL-C short-cut ..which on entering vIM actually becomes disabled / greyed-out ..even when i've highlighted test
19:02  abstrakt: elbeardmorez, dude, did you read :help paste
19:04  elbeardmorez: abstrakt: it's not the pasting that's the problem, it's the copy to clipboard / buffer in the remote ssh shell that doesn't seem to work when using vim in that session ..i think i might be missing your point though sorry
19:08  elbeardmorez: abstrakt: in the ssh term, at the prompt, using the mouse to select and then the terminal-emulator's Edit->Copy works (rudi_s says this goes to the local X11 session's clipboard) ..and then i can paste that anywhere i please ..even in the LOCAL vim session that i ultimately want it in. ....now back on the remote box ..vim filename ..and then, Edit->Copy doesn;t work anymore..
19:08  abstrakt: elbeardmorez, did you read :help paste
19:09  elbeardmorez: sorry, reading that now..
19:16 --- altamic_ is now known as altamic
19:23  elbeardmorez: abstrakt: still don't see that as relevant. setting paste mode has no effect to where yanked or SHIFT-CTRL-C copied text is going.
19:23  peth: elbeardmorez: you're right, it isn't.
19:24  abstrakt: elbeardmorez, yanked and SHIFT-CTRL-c text are different
19:24  abstrakt: elbeardmorez, you'll possibly also need to
19:24  abstrakt: elbeardmorez, :set mouse=
19:27  elbeardmorez: ffs.. ..so like i mentioned at the start ..it's possible vIM's control of the mouse that's interfering with that normal mouse selection -> clipboard mechanism ..set mouse=   ..works thanks.
19:28  elbeardmorez: abstrakt: knowledge of paste mode was useful in fixing another of my irritations of vIM use ..so thanks for that too.
19:29  abstrakt: elbeardmorez, I have a little macro for that, one sec
19:30  abstrakt: elbeardmorez, http://pastey.net/143601-4cv5
19:30  abstrakt: elbeardmorez, then you should be able to hit \m to toggle it on or off
19:31  abstrakt: elbeardmorez, put that in your ~/.vimrc
19:33  elbeardmorez: abstrakt: grand, i'll give that a whirl, thank you.
19:39 --- izibi_ is now known as izibi
19:45  singlecore: hey what was this yellow highlighted area like .. <+blah+> cmon gimme a hint
19:45  jamessan: sounds like you're using latexsuite
19:46  singlecore: no just defining two or three mappings for itemize and figure
19:46  singlecore: dont need the whole package
19:46  jamessan: well, the <+blah+> is what latexsuite uses as a trigger for it's completion mappings
19:47  jamessan: er, not a trigger, but template
19:47  jamessan: so if you aren't using it, I'm not sure
19:47  singlecore: k i cee thought it was a vim thing
19:48  singlecore: i saw this in the cvim package and wanted to do a similar thing in my mapping
19:48  singlecore: but that wont work then ..
19:51  singlecore: when doing mappings for text substitution, is there another way to place the cursor somewhere without using <Left>,<Right> and brothers?
19:52  singlecore: :q!
19:52  singlecore: ups, wrong window
19:54  singlecore: but the question remains dudes
19:54  singlecore: ;)
19:54  peth: i for one don't understand it
19:55  singlecore: nvm peth my qiestion was badly spelled
19:55  peth: and be honest, you wanted to see if you could close us :'(
19:55  singlecore: ^^
19:55  singlecore: wait ill try it with an example
19:55  FernandoBasso: Without saving! :(
19:56  singlecore: dont make me cry here
19:56  singlecore: ill give an exampe
19:56  jamessan: singlecore: it's better to describe your big picture goal than to ask how to do one aspect of it.  if we know the bigger picture, we may be able to point you in a better direction than what you're currently trying
19:57  singlecore: jamessan, the big picture i described to you when u asked me bout the latex suite
19:57  singlecore: so here comes my example
19:58  singlecore: inoremap <C-i> \begin{itemize}<CR><CR>\end{itemize}<Up><Tab>
19:59  singlecore: and i just wanna know if theres a replacement for <Up><Tab>
19:59  singlecore: like some mark where to put the cursor
19:59  singlecore: like
19:59  singlecore: inoremap <C-i> \begin{itemize}<CR><CR>\end{itemize}<CURSOR>
19:59  singlecore: no
20:00  singlecore: inoremap <C-i> \begin{itemize}<CR><(Tab)CURSOR><CR>\end{itemize}
20:00  singlecore: this way
20:00  jamessan: singlecore: I'd recommend taking a look at surround.vim instead of reinventing stuff :)
20:00  singlecore: ah ok :)
20:00  singlecore: thx ill try it
20:00  singlecore: right now
20:01  jamessan: vimgor: surround
20:01  vimgor: surround.vim is a plugin written by tpope for dealing with pairs of surroundings. It can be downloaded at http://www.vim.org/scripts/script.php?script_id=1697 or http://github.com/tpope/vim-surround
20:15  FernandoBasso: Me too recommend surround.vim!
20:27  abstrakt: I tried surround, don't like it as much as just using leader
21:02 --- eoc|afk is now known as eoc
21:38  Geralt: hi, I've got a problem with my shift-function keys in vim, is there a way to show/dump the incoming characters? If I press for example Shift+F2 I'm suddenly in insert mode and there stands 1;2Q
21:42  homekevin: Geralt: You might get more info by using the CTRL-V trick: In insert mode, press CTRL-V followed by Shift-F2 to see the raw terminal codes.
21:42  Geralt: homekevin: thanks. that works just fine :)
21:43  jamessan: Geralt: do you have a ~/.vimrc file?
21:44  homekevin: Geralt: Then to fix it you might have to either update the terminal description (terminfo file) or set some of Vim's terminal options.
21:44  homekevin: Geralt: For the record, I'm seeing the same thing you are, I think.
21:45  homekevin: ^[O1;2Q is the terminal code, and Vim must be interpreting the O as a command and inserting the rest.
21:47  Geralt: homekevin: I've dumped all of them: http://pastebin.com/K238bQU9 and as far as I know it's nothing unexpected that the first for function keys have different codes
21:47  Geralt: I'll try to set the termcap settings
21:47  Geralt: jamessan: yes, I do
21:55  homekevin: Geralt: It looks to me like Vim's t_k2 is wrong, maybe because it's wrong in the terminfo entry.
22:00  Geralt: homekevin: http://pastebin.com/JCEs8eVk is this of any help to you? What is t_k2?
22:03  homekevin: Geralt: I don't know exactly how to fix the problem. It seems that my terminal sends ^[OQ for an unmodified F2 and ^[O1;2Q for a Shifted F2. The ;2 is supposed to indicate the Shift modifier, but the extra 1 is weird.
22:04  Knat:  im using git mergetool with vimdiff, does anyone know a good tutorial for this, I cant find one on google
22:04  homekevin: :h xtem-modifier-keys explains how to handle modifiers, but I don't see how to do it without breaking the unmodified version.
22:05  homekevin: Geralt: And t_k2 is the terminal code sent to the application for F2 press.
22:05  homekevin: In theory t_k2 (etc.) could use a ";*" to indicate where a modifier may appear.
22:05  Geralt: homekevin: it seems that http://pastebin.com/ctLYRq3K is fixing the keys for me
22:06  homekevin: I guess that's one way to do it.
22:08  Geralt: homekevin: I've read (parts) of :h termcap previously and I think they're doing this for some weird function key escape sequences too
22:08  Geralt: :h xterm-function-keys is it
22:13  Geralt: homekevin: thanks for your help
22:16  homekevin: I can't figure out what xterm (or Gnome Terminal, which mimics it) is up to with the first 4 function keys.
22:17  homekevin: The addition of ;2 for shift, ;5 for CTRL, etc. makes sense, but the number before it is strange.
22:23  homekevin: Also, Vim's help suggests that Vim (and perhaps all termcap apps) can deal with the ;2 etc. codes quite easily, but it doesn't look like it can ignore the extra 1.
22:48  pinkisntwell: i have a version of vim for the console, a gui version and cygwin
22:49  pinkisntwell: three versions, all on the same system, all using the same vimrc, however i want the cygwin version to have some additional commands in its vimrc. how can i do that?
22:50  DHulme: pinkisntwell: put an alias in your .bashrc in Cygwin
22:51  pinkisntwell: so the alias would :source the additional vimrc?
22:51  pinkisntwell: using source on the command line? is this the way to do it?
22:54  StanAngeloff: pinkisntwell: same setup, I use has('unix') and has('
22:54  StanAngeloff: ...whoops... has('gui_running')
23:00  pinkisntwell: thanks!
23:02  homekevin: Isn't there something more specific than has("unix") for cygwin?
23:06  peth: check for expand("$CYGWIN") or some such?
23:09  ironhead: homekevin: has("win32unix")
23:09  ironhead: works for Cygwin (and MSYS)
23:10 --- isaacs_ is now known as isaacs
23:10  homekevin: Huh, I think ideally you could
23:10  homekevin: oops.
23:10  homekevin: Huh, I think ideally you could detect Cygwin only, not MSYS.
23:11  homekevin: The env variable method might work.
23:12  ironhead: check uname perhaps?
23:17  pinkisntwell: is there an option that controls whether things i type are shown on the right side of the command line? for example, if i type 'y', i see it on the bottom right of my window, until i press 'y' again, which yanks the line. on cygwin, i can't see anything
23:17 --- MikhX_ is now known as MikhX
23:18  walt: pinkisntwell:   :set showcmd
23:20  pinkisntwell: thanks
23:24  homekevin: I couldn't function without showcmd
23:24  homekevin: It's only slightly less crucial than laststatus=2
23:36  merijn: When I open a file a bunch of warnings about plugins fly by but I don't have time to read them. Is there anyway I can redisplay them?
23:36  frogonwheels: merijn: :mesg
23:36  frogonwheels: merijn: :message
23:37  frogonwheels: merijn:  (  :mes     for short)
23:37  merijn: frogonwheels: Thanks :)
23:40  zeltak: hya. i need some help with the NERDcommenter plugin..for the life of me i cant understand how to get it to work
23:44  lucs: Let's say I have an arbitrary file that holds something like. "Foo →this is red← bar", with UTF-8 arrows in there.
23:44  lucs: I can transmogrify the file as necessary before opening it with Vim, but I want Vim to render it as "Foo this is red bar" with the middle part in red, and without the arrows.
23:44  lucs: Any ideas how I can achieve this?
23:45  bairui: lucs: with a syntax file and Vim 7.3's new hidden text feature, I would think. Never used it myself, though. Hunt the :help! :)
23:45  lucs: Oh, hidden text. I'll look that up.
23:45  lucs: Dang I'm still on 7.2 :)
23:46  bairui: getting 7.3 is pretty easy
23:46  lucs: Yeah, not a big deal :)
23:48  bairui: lucs: It wasn't called 'hidden text'.   :help new-conceal     and on from there :)
23:48  lucs: bairui: Thanks!
23:48  bairui: np
23:56 --- sjl_ is now known as sjl
--- Log closed Sun Dec 05 00:00:32 2010
