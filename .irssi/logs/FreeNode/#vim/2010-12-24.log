--- Log opened Fri Dec 24 00:02:48 2010
00:02 --- Users 558 nicks [0 ops, 0 halfops, 0 voices, 558 normal]
00:03  solars: shouldn't au FileType java,jsp let b:loaded_delimitMate = 1 execute this on a filetype of jsp? somehow it works with let b:loaded_delimitMate = 1 but not with au FileType
00:04 --- Channel #vim was synced in 84 seconds
00:04  homekevin: solars: That won't work.
00:04  solars: why that?
00:04  homekevin: You can't not load a plugin after startup.
00:04  homekevin: It's already loaded.
00:05  solars: its an example here: https://github.com/Raimondi/delimitMate
00:05  homekevin: Also, the plugin would look for the global, not the buffer var.
00:05  homekevin: Oh, maybe that particular plugin has special stuff.
00:05  solars: it disables the mappings I guess
00:05  solars: but somehow it wont work
00:05  solars: with the second line
00:06  kongo: solars: you probably need something like this for delimitmate: au FileType mail let b:delimitMate_autoclose=0
00:06  homekevin: solars: I'm not quite sure that syntax is correct, though. Maybe it should be *.java,*.jsp
00:06  homekevin: Sorry, disregard that.
00:06  Raimondi: solars: b:loaded_delimitMate should work with autocmds too, I'll look into that later, I got to go. Sorry
00:06  homekevin: FileType, not BufRead*
00:07  solars: alright, thanks
00:07  Raimondi: kongo's suggetion should work, though
00:07  kongo: that's what the scripts description suggests
00:08  kwijibo: I'm using MacVim, uncustomised. When I press return in insert mode, I go to the start of the next line - I want the new line to have the same indentation as the last line - how do I do that?
00:08  solars: ah right that works
00:09  solars: kongo, thanks, I thought about disabling the whole thing, because thats also suggested in the description, but somehow doesnt work
00:11  fow: kwijibo, you can :set autoindent    but you should probably put "filetype plugin indent on" for even better indentation support
00:12 --- dcurtis is now known as milkpost_
00:12  deco: what are the advantages in using the gui version of vim ?
00:13  kwijibo: thanks fow :)
00:14  fow: you're welcome
00:14  fow: err, put "filetype plugin indent on" in your vimrc
00:17  Araxia: is there an established idiom for checking if a function has been defined? try/catch? some feature i've overlooked?
00:19  fow: Araxia, exists()
00:20  Araxia: *headpalm* thx, fow.
00:20 --- dcurtis_ is now known as milkpost
00:20  Araxia: the line just above the line i need this uses exists() to check for a variable. *sigh*
00:21  fow: :P you're welcome
00:22  homekevin: deco: Better colors, fewer terminal problems (most keys work).
00:23  deco: homekevin: ah okay thanks , yeah i love gvim's desert scheme
00:24  homekevin: I like nice colorschemes, but I'm not willing to give up the terminal for them.
00:24  jerojasro: vimgor: csapprox
00:24  vimgor: CSApprox is a plugin written by godlygeek to make GUI-only colorschemes Just Work in 88-/256-color terminals. It can be downloaded at http://www.vim.org/scripts/script.php?script_id=2390
00:24  ws: deco:  look up zenburn aswell :-)
00:24  jerojasro: homekevin: maybe you already know about ^^, but anyway...
00:25  homekevin: I know, jerojasro. I have something I like better.
00:25  deco: ws: okay will do ^_^
00:26  milkpost: damn emoticons
00:26  fow: jerojasro, even with that, gvim has better colors :P
00:26  fow: haha
00:28  ws: on my computer I use gvim, I use vim on a server when I connect via putty.
00:28  ws: afaik you can tweak putty's colors.
00:29  deco: what linux distro do you guys use ?
00:29  ws: had a problem with terminfo till I got myself putty-256color (that's an old Solaris system)
00:29  ws: terminfo, that is
00:30  ws: couldn't get it working properly with screen, though.  got to yet figure this out.
00:30  ws: deco:  cygwin, if that counts as a linux distribution...
00:33  frogonwheels: ws: nope, it's the gnu part of gnu/linux
00:41  ws: frogonwheels:  whatever, I wouldn't be surprised if I were the last windows user on freenode
00:45  jerojasro: fow: I use gvim most of the time
00:46  kwijibo: when i drop into :shell, is there a quick way to drop into the directory of the current file?
00:48  fow: kwijibo, :cd before :sh
00:48  kwijibo: there isn't, like a keyword or variable for current directory ?
00:50  ws: kwijibo:  :pwd
00:50  kwijibo: ta
00:50  fow: kwijibo, no, but you can create a mapping or command to make it easy
00:51  Araxia: getcwd() if you need to use it in a function or for output.
00:51  strull: or :cd %:p:h
00:53  kwijibo: ah :cd %:h
00:53  fow: kwijibo, what's the appropriate response to "ta"? Does "you're welcome" work?
00:56  iaj: is there any good plugin that can be loaded on demand that's able to show #123123  color codes directly???
--- Log closed Fri Dec 24 00:57:37 2010
--- Log opened Fri Dec 24 01:02:57 2010
01:02 --- Users 550 nicks [0 ops, 0 halfops, 0 voices, 550 normal]
01:03  iaj: is there any good plugin that can be loaded on demand that's able to show #123123  color codes directly???
01:04  strull: homekevin: did you try it with another zip-file ?
01:04  frogonwheels: ws: I use windows for work - so most of my vim work is on windoze. (also git on msysgit) .. but not much of a cygwin user
01:04 --- Channel #vim was synced in 99 seconds
01:04  FernandoBasso: ColorSel
01:05  FernandoBasso: iaj: For Gvim only, and you have to put a line in .vimrc to load it.
01:06  FernandoBasso: iaj: source ~/.vim/plugin/colorsel.vim
01:07  homekevin: strull: Actually, with the example zip file in the unzip source I don't get the hash. It's weird.
01:07  iaj: FernandoBasso: huh?? ain't it getting sourced automatically when I drop it in the plugin folder?
01:07  FernandoBasso: iaj: It seems that this plugin is an exception. But try without that line.
01:08  iaj: FernandoBasso: huh i don't want to create colors - i just want to view them directly?
01:08  kongo: homekevin: it's probably your distribution that modifies that unzip output
01:08  FernandoBasso: iaj: Can't you use it to see the colors? iaj Also, colorchart.vim
01:08  kongo: homekevin: but it shouldn't be too hard to modify that script to work anyway
01:09  homekevin: kongo: both may be true, but I still want to know what's happening
01:09  FernandoBasso: vimgor: goodlygeek
01:09  vimgor: No idea!
01:09  FernandoBasso: :/
01:10  FernandoBasso: vimgor: godlygeek
01:10  vimgor: Bow to The Godly Geek! He also created colorchort and csapprox. See vimgor's entries for more info.
01:10  FernandoBasso: iaj:             â†‘
01:10  iaj: hmmmm FernandoBasso thanks but I was originally just looking for a plugin that shows all the #123123 colorcodes in its representing color directly
01:10  iaj: I had once installed such a plugin - but it was css only
01:10  FernandoBasso: Oh.
01:11  FernandoBasso: iaj: I would be interested as well.
01:11  MetaCosm: css only?
01:11  iaj: MetaCosm: yeah was just working on css files. :)
01:11  iaj: so I :setf css but ... well... I thought there could be something more generally
01:14  FernandoBasso: Can I get the color of text someway?
01:15  homekevin: Oh, I found it!
01:15  FernandoBasso: I am on a word, and make vim show me the color value?
01:15  homekevin: kongo, strull: the hash is the zip file comment.
01:16  homekevin: So I bet everyone would have the same problem with this particular file, or any commented zip file.
01:17  homekevin: If anyone else is willing to test this, please get the zip from here: http://www.vim.org/scripts/script.php?script_id=3307
01:17  homekevin: Try to open it in Vim.
01:17  kongo: homekevin: yep, same problem here
01:18  kongo: so I guess that script should be fixed then
01:18  homekevin: Well then, now I know which bug to complain about. ;)
01:18  homekevin: Yeah.
01:18  homekevin: Can't assume the file has no comments.
01:19  strull: good to know
01:21  homekevin: I'm starting to notice a pattern in the vim scripts I find bugs in.
01:22  jerojasro: they have an emacs modeline?
01:23  homekevin: No, but good guess.
01:24  spiiph: Hahaha
01:25  homekevin: vimgor: drchip
01:25  vimgor: Dr Charles E Campbell is a pretty nice guy who gives a lot to the vim community, but whose prolific scripts are a 50-50 split between good idea horribly implemented and bad idea even more horribly implemented
01:26  spiiph: Haha
01:36  fengshaun: does anyone know why I'm getting this output when I run gvim? http://pastebin.com/i8rdBEfB
01:37  fengshaun: I don't know what I did exactly that this started to happen
01:38  fengshaun: oh I get it, I just "set hl" in my .vimrc
01:39  fengshaun: removed it now
01:40  homekevin: Replace it with echo "This is going to be the most awesome day ever!" to help motivate you.
01:48  homekevin: Does the text in :h search()-sub-match make sense to anyone?
01:48  homekevin: I think maybe I get it... but I'm not sure.
01:49  strull: the example given there makes it pretty clear for me
01:51  homekevin: OK, I don't get it.
01:52  strull: it returns the number of the item that matched
02:01  homekevin: Yeah, I sort of see that.
02:02  homekevin: But I'm not sure I see the point.
02:10  strull: you find a usage in $VIMRUNTIME/filetype.vim  (look for kwline)
02:28 --- peth_ is now known as peth
02:32 --- cuba33ci_ is now known as cuba33ci
02:32 --- MikhX_ is now known as MikhX
02:33  homekevin: Let me try that again.
02:33  homekevin: Here's my patch to zip.vim if anyone wants to try it: http://paste.pocoo.org/show/309191/
02:35  homekevin: I added a line to position the cursor at the first file, which seems nicer.
02:35  homekevin: (It was at the last file before)
02:36  homekevin: I'm not sure why I did call cursor(1, 1) when I could have done gg or 1
02:37  homekevin: It was mostly because search() mentions cursor() I guess.
--- Log closed Fri Dec 24 02:58:07 2010
--- Log opened Fri Dec 24 03:03:26 2010
03:03 --- Users 533 nicks [0 ops, 0 halfops, 0 voices, 533 normal]
03:04 --- Channel #vim was synced in 80 seconds
03:57  plut0: can someone explain the procedure for indenting a html file?
04:07  tonymec: plut0: for any file: (1) make sure (with :filetype) that filetype indenting is on. (2) To reindent the whole file: gggqG (see :help gq).
04:17 --- ajpiano is now known as chrome
04:18 --- chrome is now known as ajpiano
04:18 --- ajpiano is now known as dicks
04:19 * somian[0] peeks in
04:21 --- dicks is now known as ajpiano
04:30 --- Araxia_ is now known as Araxia
04:54 --- peth_ is now known as peth
04:56  anon33_: so i'm looking to compile gvim myself, but i have no idea what i'm doing. i'd like to do -huge (or -big, whatever that option is) so it has support for ruby, python, all that good stuff
04:56  anon33_: also - i talked to the creator of macvim and he mentioned that it was compiled with an option for case-insensitive completion - could someone help me out?
05:15  etpace: How can I string replace within a vim function?
05:21  strull: etpace: :he substitute()
05:29  pattern: hmm.. looks like the guy who wrote the Slim-vim plugin (a lisp repl interface for vim, inspired by emacs' Slime) switched to emacs..
05:29  pattern: http://bradbeveridge.wordpress.com/2007/06/21/how-a-vim-user-converts-to-emacs/
05:44 --- Araxia_ is now known as Araxia
06:04  wooden: Is there a way to do :set fo=whatever when invoking vim at the command line?  I want different format options for when I'm writing mail, but I don't want to maintain an entire separate .vimrc-mutt for it.
06:05  wooden: Oh, that was easy.
06:06 --- KB1JWQ_ is now known as KB1JWQ
06:06  wooden: vim -c 'set fo=tcrqan'
06:07  anon33_: so i'm looking to compile gvim myself, but i have no idea what i'm doing. i'd like to do -huge (or -big, whatever that option is) so it has support for ruby, python, all that good stuff
06:07  anon33_: also - i talked to the creator of macvim and he mentioned that it was compiled with an option for case-insensitive completion - could someone help me out?
06:21  mattcodes: 3 weeks vim, window management stick sucks for me. not sure why people considers tabs so evil but im gonna give it a try
06:22  reportingsjr: mattcodes: I use tabs in vim and I love them!
06:23  reportingsjr: mattcodes: I would map keys/key combination to :tabp and :tabn though
06:23  mattcodes: cool. reading through help now.
06:23  mattcodes: seems most die hard vimers hate them as much as the mouse for some reason
06:23  anon33_: it's just easier for me to get to the file i want to edit with :b <file>, although i like to use tabs for "environments"
06:23  mattcodes: so buffers arent shared between tabs?
06:24  anon33_: they are, but i just try to make them pseudo localized
06:24  wooden: mattcodes: I keep each file in a horzontal split, and I use these mappings in .vimrc.
06:24  wooden: " Move up or down a split, and maximize it.
06:24  wooden: map <C-J> <C-W>j<C-W>_
06:24  wooden: map <C-K> <C-W>k<C-W>_
06:25  mattcodes: woden that is handy i missed C-W_ i was using :res 100%
06:25  mattcodes: too much typing
--- Log closed Fri Dec 24 06:56:54 2010
--- Log opened Fri Dec 24 07:02:35 2010
07:02 --- Users 522 nicks [0 ops, 0 halfops, 0 voices, 522 normal]
07:03 --- Channel #vim was synced in 68 seconds
07:32  disappearedng_: Hey how do I go about debugging how come my new plugins for .mako file extensions are not working?
07:34  frogonwheels: disappearedng_: :help :debug    :help 'verbose
07:34  frogonwheels: :help :echo
07:35  disappearedng_: frogonwheels that's really overwhelming, how can I just see if vim recognize this file as a mako file in the first place?
07:36  frogonwheels: disappearedng_: :set filetype?
07:39  disappearedng_: well if :set filetype=mako works (aka the correct syntax highlighting and rendering), how can I tell vim to associate *.mako to set filetype=mako?
07:40  disappearedng_: I don't think this is right au FileType mako set filetype=mako esp cause vim doesn't recognize *.mako as having filetype=mako
07:42  homekevin: disappearedng_: :h new-filetype
07:43  homekevin: Esp. Section A.23
07:43  homekevin: A.2.
07:43  homekevin: not 23
07:44  homekevin: Oh, or section 3
07:44  homekevin: No, I meant B.
07:44  homekevin: Sorry about that. The B looked like a 3.
07:46  homekevin: That section still confuses me. It lists a bunch of different methods without being clear about how to choose.
07:47  disappearedng_: ok it worked thx
07:47  disappearedng_: I am surprised that none of those script authors mentioned about this
07:52  homekevin: As far as I can tell, the Vim runtime uses filetype.vim (for filename-based detection) and scripts.vim (for content-based detection), but not the ftdetect/ directory.
07:55  homekevin: But the ftdetect directory looks easier than the filetype.vim route.
07:56  Chapoolin: How do I make a boilerplate formatting for a paragraph, and then apply it to paragraphs at will?
07:56  homekevin: I don't think I understand that question, Chapoolin.
07:56  disappearedng_: Hey let say I am not using any structurered sql and I don't plan to use models because my db stores things in json (which pretty much is how I would need it) then how should I go about testing models?
07:56  homekevin: "Boilerplate" seems to mean something different to you than to me.
07:59  Chapoolin: In word processors I can concatenate instructions for line of text width, bold font, font size, spacing of lines, etc., then I assign a label to that group of options, then I can pick a pragraph at random in my text and apply that label to it which applies the formatting options.
08:00  Chapoolin: can Vim do this?
08:01  homekevin: Well, vim doesn't really do fonts or line spacing, and it doesn't have paragraph styles, so I don't see how.
08:01  homekevin: There are formatting options, but they apply to all formatting operations, not per-paragraph.
08:01  homekevin: There would be no way to store a style with a paragraph anyway.
08:02  homekevin: Chapoolin: You understand that Vim is an editor for text, not a word-processor?
08:02  Chapoolin: Well, I know Vim does text width---I'll take that much.  How do I apply a text width different from the default for the entire file to a paragraph, and limiting the scope to that pragraph only?
08:03  homekevin: Chapoolin: Vim won't reformat paragraphs unless you do a command to cause it to happen
08:03  homekevin: So you can change options like textwidth and execute a formatting command on the paragraph.
08:04  homekevin: The change the options back if you like.
08:05  Chapoolin: But I want the different text width for that pragraph only, I want the default text width for the file to remain as it was before I changed it to the text width for my paragraph only.
08:05  homekevin: Right, that's why you'd format only the one paragraph, then change the options back.
08:07  Chapoolin: You mean I should do: 1) change tw option, 2) execute "reformat paragraph" command (gqap), 3) change back the tw option to default value. ...?
08:08  homekevin: Sure, why not? Although only the default value if that's what you want to use.
08:08  Chapoolin: what other one is there?
08:08  homekevin: If the rest of the file uses some non-default value, then you'd presumably want to reset it to that value.
08:08  Chapoolin: oh, i see what you mean
08:09  Chapoolin: I thought I could put those steps in a command ... no?
08:09  Chapoolin: or a function
08:09  homekevin: I don't see why not.
08:10  wooden: I don't think you can put :set x into a macro buffer, but you could definitely make a function in your vimrc.
08:10  Chapoolin: homekevin:: ok ... thank you much
08:10  wooden: And bind it to some key combo.
08:10  homekevin: wooden: Really? Why not?
08:10  Chapoolin: wooden:: could i call the function from a user :command ?
08:10  homekevin: Chapoolin: Sure.
08:11  Chapoolin: cool
08:11  homekevin: I write a lot of commands that just call a function.
08:11  Chapoolin: wooden:: thanks for clue
08:11  wooden: Whoops, I was wrong.  You can record :set tw in a macro.
08:11  Chapoolin: homekevin:: yes, i'm a user commands buff ... :D  lol
08:12  Chapoolin: wooden:: "commands" in Vim ... we have class  :D  lol
08:12  Chapoolin: anywhooo . . . thanks a bunch guys
08:13  wooden: Is that what you call the kind of record or actions when you do qq?  A command?
08:14  wooden: s/or/of/
08:14  homekevin: Well, he mentioned :command specifically
08:14  Axioplase_: wooden: qq would be "macro"
08:14  wooden: Yeah, that's what I thought.
08:15  Chapoolin: wull, no, those are key-maps, no?
08:16  homekevin: No, I don't think so.
08:16  wooden: No, qq starts recording all the actions you perform in vim, and then stops when you press q again.
08:16  wooden: You can replay them with @@.
08:16  homekevin: You replay them with @<register>, but you can repeat the last one with @@
08:16  wooden: (could be qa or qb [named macro registers])
08:16  homekevin: Yeah, I always use qq too.
08:16  wooden: Just like marks.
08:17  homekevin: Although macros actually use registers.
08:17  wooden: homekevin: I think I said that.  ;)
08:17  homekevin: registers and marks are distinct but have some similarities.
08:17  wooden: 02:16:40  wooden> (could be qa or qb [named macro registers])
08:17  homekevin: OK.
08:18  wooden: But, what is 'command' that Chapoolin is talking about?
08:18  Chapoolin: user commands
08:18  Axioplase_: You may also type your macro as text, select the text, do y"R to save the selectiyon in register R, and then do @R to "play" it.
08:18  homekevin: wooden: I think the user-commands you can define with :command
08:18  Chapoolin: user designed commands
08:18  Axioplase_: I do that to store/save some useful macros.
08:18  wooden: Axioplase_: That's awesome.  Thank you!
08:19  homekevin: Axioplase_: Doesn't using an uppercase register have a weird effect?
08:19  homekevin: Like appending to the existing content, I think.
08:19  Axioplase_: wooden: you can also of course dump a macro by doing "Rp to print the code of macro in register R.
08:20  Chapoolin: well, :help macro gives me this: "1. Key mapping   *key-mapping* *mapping* *macro* "
08:20  Axioplase_: homekevin: I used a metavariable R for any register.
08:20  homekevin: I do that when I screw up the macro
08:20  wooden: So the macro registers are the same kind of registers that are used for normal yank/put?
08:20  homekevin: wooden: Yes.
08:20  Axioplase_: wooden: they are the very same.
08:20  wooden: Good to know.
08:20  Axioplase_: that's why they are all called "registers" :)
08:20 * Axioplase_ vanishes
08:20  wooden: Well, who knows, there could be copy/paste registers and macro registers.  :P
08:21  homekevin: Yeah, that would make total sense.
08:21  Chapoolin: "qq" would be a register assignment to register "q"
08:21  homekevin: It's a little weird that it works the way it does,
08:22  Chapoolin: "q{0-9a-zA-Z"}   Record typed characters into register {0-9a-zA-Z"}"
08:22  homekevin: That's my favorite register.
08:22  homekevin: {0-9a-zA-Z}
08:22  wooden: It's just more obvious than I have come to expect from software.  Why *not* just use copy/paste registers, since all the commands are just letters anyway.
08:23  Chapoolin: homekevin:: heh heh :D
08:38  wooden: Just testing out my new-found powers...  The last :set tw doesn't seem to happen.  I typed this out and recorded it in to a macro buffer.
08:38  wooden: :set tw=20
08:38  wooden: gqap
08:38  wooden: :set tw=80
08:38  wooden: It sets tw to 20, does the format on the paragraph, but doesn't set it back to 80.
08:39  wooden: Sorry, 'register', not 'macro buffer'.
08:41  seku: are they different
08:43  Raimondi: seku: No such thing as 'macro buffer'.
08:43  Raimondi: seku: A macro is stored into a register.
08:44  peter_w: that's probably why he said register
08:45  Raimondi: peter_w: I thought seku was asking about that.
08:45  peter_w: oh, wait
08:45  peter_w: I'm still half asleep :)
08:45  Raimondi: :)
08:45  Raimondi: I'm half awake :)
08:49  peter_w: anyway wooden, what does :reg a show?
08:57  mattcodes: how can I prevent vim from starting a new buffer everytime it starts.
08:58  mattcodes: after loading the files i want from NERDTree I find going back and deleting (bd<number>) the non-saved empty buffer
08:58  mattcodes: pita
09:27  FernandoBasso: Good morning!
09:27  seku: i thought they're the same, but when someone said they weren't, i started thinking i may be wrong
09:28  seku: thanks
09:28  jorrit: Hi
09:30  FernandoBasso: jorrit: Welcome!
09:34  wooden: peter_w: Sorry, got distracted...  :reg shows...
09:34  wooden: "q   :set tw=20^Jgqap^J:set tw=80^J
09:36  peter_w: that looks ok
09:54  FernandoBasso: What would be a coorect line in vimrc to always make unlisted buffer uflisted?
09:54  FernandoBasso: buflisted*
09:56  FernandoBasso: ls! shows buffers with _u_ in front of. I "set buflisted", :mksession, but when I open that session, the buffer is _unlisted_again.
09:56  Athunye: _u_
10:04  JbyDesign: Quick question, everytime I press > or something it flashes the corresponding < or something, how can I get it to stop doing that?
10:04  JbyDesign: Oh right, in insert mode.
10:05 --- Zharf_ is now known as Zharf
10:09  FernandoBasso: JbyDesign: What :set matchpairs? return?
10:10  JbyDesign: Let me check.
10:10  JbyDesign: notwen, try :set matchpairs
10:10  notwen: k
10:10  notwen: worked nicely, though, what is it?
10:11  JbyDesign: It returns =(:),{:},[:],<:>
10:11  JbyDesign: so I guess I would have to do set matchpairs='' or something?
10:12  FernandoBasso: matchpairs is to help us.
10:12  JbyDesign: It is, but I don't find it helpful. More annoying than anything.
10:12  notwen: ooh, now I follow
10:12  notwen: I can ignore the flashing for this
10:13  FernandoBasso: JbyDesign: Well, vim is like the user makes it. If you find it annoying, you can sure just disable it. :)
10:13  JbyDesign: Yeah, that's what makes it so awesome! However, I'm not sure what I'd do to disable it nomatchpairs?
10:14  JbyDesign: or set matchpairs = ''
10:14  JbyDesign: I tried :help matchpairs but it doesn't talk about disabling it.
10:14  FernandoBasso: But there is an option that it flashes to the pair, and come back. And other that it does not do it.
10:14  FernandoBasso: Without matchpairs, you'll miss the power of %.
10:14  notwen: I'm not sure if matchpairs is related to what I'm wondering now that I think abou tit
10:14  notwen: about it*
10:15  JbyDesign: I guess I could set it to brackets then.
10:15  notwen: vim flashes when I use > in php (no other chars, though)
10:15  JbyDesign: I can see that being useful for brackets {}
10:16  FernandoBasso: Set *noshowmatch*
10:16  FernandoBasso:  :set noshowmatch
10:17  JbyDesign: I see, thanks. Though you had a good point so what I did was set matchpairs={:}
10:17  FernandoBasso: Let matchpairs alone, and â†‘
10:17  JbyDesign: That way I can still use it on braces.
10:18  FernandoBasso: yeah. You can add or remove pairs at any time.
10:18  FernandoBasso:  With showmatch, you type { code, and when you type } it flashes back to { and back again to } <-- This I really find anoying.
10:19  JbyDesign: Yeah
10:19  JbyDesign: Me too
10:19  FernandoBasso: matchpairs just highlights them, whiteout flashing.
10:19  JbyDesign: So noshowmatch removes the flashing?
10:19  FernandoBasso: yeah.
10:20  JbyDesign: Ohhhh, that's really good.
10:20  FernandoBasso: So, matchpairs are still usefull, but no damn flashes.
10:21  JbyDesign: Right, that's a way better solution. Thanks very much FernandoBasso.
10:21  JbyDesign: Was it you who recommended I do the VimTutor?
10:22  FernandoBasso: I think so. I recommend it to everyone! :D
10:22  JbyDesign: Ah, well it was very helpful.
10:22  FernandoBasso: Yeah. I remember your nick now.
10:23  JbyDesign: I took notes and demoed everything in it. It really helped, then today at work I was really developing a lot more fluidly with it.
10:23  FernandoBasso: JbyDesign: Also, the user manual in vim :help is very good. When people suggest :help 'something', it is generally in the reference manual, which is harder to understand.
10:23  FernandoBasso: I am reading the user manual myself.
10:24  JbyDesign: Yeah, I tried to use :help matchpairs to find out how to disable it, but I had no such luck.
10:26  JbyDesign: Oh sweat that shownomatch thing worked great!
10:27  FernandoBasso: The better is to read :help usr_01.txt to where it begins the reference manual. And take notes of the things you fell you will use. The reference manual should be read, of course, but it is hard, as learning vim itself takes long.
10:28  JbyDesign: Yeah, but it seems like there's a huge pay off to learning it.
10:28  JbyDesign: Though it seems like you never really stop using it.
10:28  JbyDesign: *stop learning it
10:36  FernandoBasso: JbyDesign: Sure. It pays off, and no one never stops learning it. Many options and features are even never needed for some, while they are for others, and vice versa.
10:37  JbyDesign: Yeah
10:46  JbyDesign: Well thanks again for your help FernandoBasso. I really appreciate it.
10:46  JbyDesign: Good night (or morning) fellow VIM users,
10:47  bzzzz: hum, advantges and disadvantages of vim + scp vs. vim inside ssh screen session?
10:47  FernandoBasso: Good night, although I just woke up...
10:51 --- shpaq` is now known as shpaq
--- Log closed Fri Dec 24 10:57:59 2010
--- Log opened Fri Dec 24 11:03:23 2010
11:03 --- Users 525 nicks [0 ops, 0 halfops, 0 voices, 525 normal]
11:04 --- Channel #vim was synced in 68 seconds
11:21 --- silex is now known as Silex
11:50  FernandoBasso: I finally found some terminal only colorschemes.
12:08  FernandoBasso: Where is everyone? What happened?
12:09  Silex: FernandoBasso
12:09  Silex: looks up CSApprox or smth like that
12:09  FernandoBasso: Only people from one side of the globe enter #Vim? And they are all sleeping now?
12:09  Silex: it takes a colorscheme and generates terminal colors
12:09  FernandoBasso: Silex: I use it.
12:10  Silex: you then need a terminal that has at least 88 or 256 colors for it to look somewhat good tho
12:10  Silex: and to fiddle with t_Co and $TERM etc
12:10  FernandoBasso: Yeah. All this is set.
12:10  Silex: about people's presence, it's christmas
12:11  Silex: that said, brb in about 30 min
12:11  FernandoBasso: But, when I am using xterm, urxvt, gnome-terminal, I sure like better simple 256 color colorshcemes.
12:11  tmr: You shouldn't fiddle with t_Co or TERM.
12:11  FernandoBasso: It is not Christmas in #archlinux :D
12:11  FernandoBasso: I don't.
12:12  FernandoBasso: I was given a tip on vim tips, and the correct term is set in bashrc now for me.
12:13  FernandoBasso: tmr: What is your solution?
12:14  FernandoBasso: Also, why people talk bad about gnome-terminal, if eve xterm, and others don't correctly 'set'/'export'/'send' or whatever is called, the term variable?
12:14  tmr: Edit terminal preferences so that it will set correct TERM, vim will then know if it supports X colors.
12:15  FernandoBasso: For xterm, .bashrc has an if with a export TERM='xterm-256color', if it is present.
12:15  FernandoBasso: if [ -e /usr/share/terminfo/x/xterm-256color ]; then
12:15  FernandoBasso: Is this not the correct way?
12:16  tmr: I've told xterm to send xterm-256color, no need to fiddle on shell side.
12:16  FernandoBasso: How did you tell xterm that?
12:17  tmr: Right things in .Xdefaults.
12:17  FernandoBasso: tmr: I am learning how to configure Xdefaults.
12:18  FernandoBasso: I have some basic settings already.
12:18  FernandoBasso: Like cursor colors, no scrollbar, etc...
12:18  tmr: I can't remember exact line and I'm not at home currently so I can't dig it.
12:19  FernandoBasso: tmr: No problem. I'm googling it already. Thanks for the piece of information. I was not aware it could be done in Xdefaults.
12:21  FernandoBasso: tmr: Could it possibly be this:  XTerm.termName: xterm-256color
12:24  tmr: FernandoBasso, man xterm is better reference than my weak memory.
12:25  FernandoBasso: :D
12:37  iaj: whats the keycombination? for editing vims command line?
12:37  kurkale6ka: q:
12:37  kurkale6ka: :^f
12:38  FernandoBasso: That q: caused me trouble in the past. I was to quickly hit :q and accidentally hit q: and din't know what was happening...
12:40  iaj: mhh kurkale6ka that ^f ain't working for me somehow :\
12:40  kurkale6ka: ain't no working man :)
12:40  kurkale6ka: : then ^f
12:40  iaj: But no mapping found for imap <c-f>
12:40  iaj: argh cmap
12:41  iaj: mapped to <Right> .. ok
12:41  kurkale6ka: ah... here you go
12:41  kurkale6ka: I woun't map this, it's quite usefull
12:41  iaj: I just.. well extracted that part somehow
12:57  Silex: q: is easier to remember
12:57  Silex: because you can then do q/ too
12:57  Silex: well, okay /^f probably works too :)
12:57  kurkale6ka: slash, ^f too
12:58  kurkale6ka: :)
12:58  kurkale6ka: same for =, ?, ....
12:58  Silex: = ?
12:58  Silex: interesting
12:58  kurkale6ka: expression register
12:58  Silex: ah, you mean ^r= then ^f ?
12:59  kurkale6ka: yep
12:59  kurkale6ka: or @=
12:59  Silex: hum, yeah you can't use q for that right?
12:59  Silex: or maybe q^r=
12:59  Silex: let's try :)
12:59  kurkale6ka: no, but I've mapped it
12:59  Silex: ah, ^f is better indeed
12:59  kurkale6ka: nmap q= @=<c-f>
13:02  Silex: ah, @=^f is like i^r=^f
13:03  Silex: I wonder if there was a way to edit the registers in vim
13:03  Silex: so you can fix a macro
13:03  kurkale6ka: let @reg=''...
13:04  kurkale6ka: qm....q, oh non, let @m='^r^rm'... then modify
13:04  FernandoBasso: Cna I get the color value of some text in some way? Perhaps something like *ga*?
13:06  kurkale6ka: More like with :hi...
13:07  FernandoBasso: kurkale6ka: But how I know, in a colorscheme, what an 'string' was defined as? Or an echo, or pairs?
13:07  FernandoBasso: Yeah. Your suggestion does it. :D
13:07  FernandoBasso: Thanks.
13:08  kurkale6ka: FernandoBasso: cool
13:08  FernandoBasso: Yeah, still, I am over an "echo", what is this in the current colorscheme?
13:10  kurkale6ka: try :sy as well
13:12  FernandoBasso: kurkale6ka: Thanks.
13:12  FernandoBasso: They do show a lot of information.
13:13  kurkale6ka: Yeah, I've not fiddled with this too much, I will have to read more
13:14  FernandoBasso: I read some :helps about this before. But found hard to understand and apply. I'm going to reread.
13:15  FernandoBasso: I was told to set the correct term in Xdefaults. The only thing I found seems not to be working: xterm.termName: xterm-256color.
13:18  kurkale6ka: Not sure what you wanna achieve, do you know about csapprox?
13:18  kurkale6ka: vimgor csapprox
13:18  vimgor: CSApprox is a plugin written by godlygeek to make GUI-only colorschemes Just Work in 88-/256-color terminals. It can be downloaded at http://www.vim.org/scripts/script.php?script_id=2390
13:18  FernandoBasso: Yeah. I even use it.
13:19  FernandoBasso: if [ -e /usr/share/terminfo/x/xterm-256color ]; then export TERM='xterm-256color'.
13:19  FernandoBasso: This is what I use, but I was told that I should set it in Xdefaults.
13:19  FernandoBasso: And that if does return true.
13:20  FernandoBasso: kurkale6ka: I have an inclination to use 256 colorschemes on xterminals.
13:20  FernandoBasso: Rather than using gui 'converted' ones, although CSApprox does a pretty amazing job.
13:20  deryni: X resources are case sensitive. XTerm.termName
13:21  FernandoBasso: Yeah. I know, but as I saw in the example with lower case... Let my try.
13:23  FernandoBasso: Other thing that is not working is XTerm*metaSendsScape: True. Every time I open xterm "Meta Sends Escape" is off.
13:24  FernandoBasso: deryni: Worked. Thanks.
13:24  FernandoBasso: echo &term shows term-256color and tput colors shows 256 as well.
13:25  deryni: Take a look at that resource name again.
13:25  deryni: 'metaSendsScape'
13:25  peter_w: but what if it does send scapes
13:26  FernandoBasso: I use it in irssi, <Alt>; to alternate two used windows, like ^6 in vim.
13:26  FernandoBasso: And <Alt>0-9 to change to the respective windows.
13:26  deryni: I know what the setting does, I know why one wants it. I'm asking you to read that quoted string again.
13:26  deryni: Read it carefully.
13:27  FernandoBasso: I answered to peter_w. Wasn't that a question for me?
13:27  deryni: He wasn't asking a question as much as making a joke about the problem I was pointing out to you.
13:28  FernandoBasso: :/
13:28  FernandoBasso: @#$%J$@##$
13:30  Silex: kurkale6ka: :let @a = '^ra is very nice
13:30  Silex: thanks
13:31  FernandoBasso: Yeah. Shame on me (again). I confuse Scape with Escape, like I do with special and especial.
13:31  kurkale6ka: Silex: np, did you notice I actually wrote 2 ^r ?
13:31  FernandoBasso: I do need to read more carefully.
13:31  Silex: kurkale6ka: yes but I think it's wrong
13:31  Silex: ;)
13:31  Silex: I mean, doesn't change anything here
13:32  kurkale6ka: Silex: :h^r^r :)
13:32  Silex: ah
13:33  Silex: yeah ok, so for my test it didn't change anything, but I can see how
13:34  Silex: funny how it still displays the same even with newlines and arrow keys in the macro
13:34  Silex: it's a trap!
13:34  Silex: anyway, great thanks
13:35  kurkale6ka: np
13:46  FernandoBasso: I find that vim (and also emacs) have the English language as a barrier for people for non English native countries.
13:47  FernandoBasso: People sometimes find tutorials, but generally, they are not able to close vim properly. So, many give up without even learning the very basics.
13:48  tmr: I would say that is an issue with large part of free/open software.
13:48  kurkale6ka: true, but Vim's internal help is translated in many languages
13:48  FernandoBasso: I am translating it to portuguese (brazil). It is not translated yet.
13:49  FernandoBasso: I only translated upt to usr_08 yet...
13:49  FernandoBasso: A long journey.
13:49  kurkale6ka: cool, good luck
13:50  tmr: I'm sure your effort will be appreciated.
13:51  Silex: afaik emacs is not translated at all
13:51  Silex: while vim is translated in many languages
13:51  FernandoBasso: Translating the user manual would already be of great help, since it is more task-oriented, tutorial-like style.
13:51  Silex: I might be wrong tho
13:54  FernandoBasso: What is 'namepat' ?
13:54  FernandoBasso: name pattern?
13:59  FernandoBasso: I think is a txtfmt only terminology.
14:00  nvictor: hey
14:01  nvictor: is it possible to display a line on the 80th column?
14:02  kurkale6ka: :se cc=80
14:02  nvictor: let me try
14:05  nvictor: kurkale6ka: you da man!
14:05  nvictor: kurkale6ka: thanks a lot
14:05  nvictor: this is even better than the solution i was using
14:06 --- Silex is now known as silex
14:15  kurkale6ka: FernandoBasso: following yesterday's :t.|s/./=g discussion, I've made an Underline command.
14:15  kurkale6ka: http://vim.pastey.net/144252
14:16  kurkale6ka: can be used alone ('-'s) or Underline=, Underline=-, Underline=~, whatever chars you like
14:17  FernandoBasso: kurkale6ka: Very good! :)
14:18  kurkale6ka: :)
14:18  FernandoBasso: It is already in my collection! Thanks.
14:22  FernandoBasso: Vim users are as amazing as vim itself!
14:24  kurkale6ka: he he
--- Log closed Fri Dec 24 14:57:45 2010
--- Log opened Fri Dec 24 15:03:12 2010
15:03 --- Users 539 nicks [0 ops, 0 halfops, 0 voices, 539 normal]
15:04 --- Channel #vim was synced in 69 seconds
15:06  Miesco: Whats better minibufexplorer or builtin tabs?
15:13  _rane: those are not mutually exclusive
15:13  _rane: different purposes
15:25  Miesco: _rane: Should I stop using minibufex for "tabs" then?
15:25  _rane: something like that
15:25  Miesco: Okay
15:26  _rane: I use it so that I know which buffer I have open, and I can go through them with ctrl+tab
15:26  _rane: buffers*
15:29  Miesco: I just dont like that if I do ^W= or something minibufex goes over 1 line high
15:32  Miesco: How do I make minibufex not pop up anymore?
15:32  Miesco: I'm removing it
15:36  Miesco: Nice
