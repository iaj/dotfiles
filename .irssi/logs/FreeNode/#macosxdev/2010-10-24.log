--- Log opened Sun Oct 24 00:00:09 2010
--- Log closed Sun Oct 24 01:04:35 2010
--- Log opened Sun Oct 24 01:04:59 2010
01:04 --- Users 43 nicks [1 ops, 0 halfops, 0 voices, 42 normal]
01:06 --- Channel #macosxdev was synced in 103 seconds
--- Log closed Sun Oct 24 05:05:42 2010
--- Log opened Sun Oct 24 05:06:07 2010
05:06 --- Users 41 nicks [1 ops, 0 halfops, 0 voices, 40 normal]
05:07 --- Channel #macosxdev was synced in 99 seconds
05:58 --- ChanServ sets modes [#macosxdev +o Beelsebob]
--- Log closed Sun Oct 24 09:04:49 2010
--- Log opened Sun Oct 24 09:05:13 2010
09:05 --- Users 42 nicks [2 ops, 0 halfops, 0 voices, 40 normal]
09:06 --- Channel #macosxdev was synced in 100 seconds
--- Log closed Sun Oct 24 13:04:55 2010
--- Log opened Sun Oct 24 13:05:24 2010
13:05 --- Users 47 nicks [2 ops, 0 halfops, 0 voices, 45 normal]
13:05 --- Server: [card.freenode.net] [freenode-info] channel trolls and no channel staff around to help? please check with freenode support: http://freenode.net/faq.shtml#gettinghelp
13:06 --- Channel #macosxdev was synced in 103 seconds
--- Log opened Sun Oct 24 14:30:23 2010
14:30 --- Users 50 nicks [2 ops, 0 halfops, 0 voices, 48 normal]
14:31 --- Channel #macosxdev was synced in 95 seconds
14:34 --- ChanServ sets modes [#macosxdev +o Beelsebob]
14:49 --- ChanServ sets modes [#macosxdev +o Beelsebob]
14:58  jacksson: Hi. How can i correctly terminate an another application running in OS X Leopard? The running app doesn't support AppleScript. [NSRunningApplication -terminate] was introduced only since OS X 10.6, sending kill doesn't seem to give the target application time to "pack its bags". Is there some other way? Thanks
15:05 --- ChanServ sets modes [#macosxdev +o Beelsebob]
--- Log opened Sun Oct 24 15:08:11 2010
15:08 --- Users 49 nicks [2 ops, 0 halfops, 0 voices, 47 normal]
15:09 --- Channel #macosxdev was synced in 96 seconds
--- Log closed Sun Oct 24 15:31:15 2010
--- Log opened Sun Oct 24 15:31:38 2010
15:31 --- Users 48 nicks [1 ops, 0 halfops, 0 voices, 47 normal]
15:31 --- Server: [niven.freenode.net] [freenode-info] channel trolls and no channel staff around to help? please check with freenode support: http://freenode.net/faq.shtml#gettinghelp
15:33 --- Channel #macosxdev was synced in 94 seconds
--- Log closed Sun Oct 24 17:04:48 2010
--- Log opened Sun Oct 24 17:05:09 2010
17:05 --- Users 47 nicks [1 ops, 0 halfops, 0 voices, 46 normal]
17:06 --- Channel #macosxdev was synced in 95 seconds
17:56  tgunr: My app, which comiles and runs fine, with xcode 3 absolutely throws up as soon as it launches in xcode4 in _dyld_start
17:56  tgunr: hmmm
18:46  DFaradey: Hello! Can NSTask be replaced with fork/exec, or there are some issues that may occur?
20:02  enhering: hi.
20:03  enhering: can somebody help me to solve this problem?  Please... Does anybody here have any experience on compiling for MAC OSX?
20:03  enhering:   ld: library not found for -lcrt0.o
20:05  KonaB1end: why are you trying to link with crt0.o ?
20:05  enhering: I'm not. g++ is.
20:06  KonaB1end: ok better question. why is g++ trying to link with crt0.o ?
20:06  enhering: No idea. I just do this: g++ -static fcs.cpp -lstdc++ -Llib/ -lFCS -o fcs
20:07  enhering: sorry. This: gcc -static fcs.cpp -lstdc++ -Llib/ -lFCS -o fcs
20:07  bavarious: hmm, why not g++?
20:08  KonaB1end: i think maybe g++ on osx doesn't like "everything" to be static
20:08  enhering: can be. I was compiling with gcc and then learnt that it does not link with libstdc++ by standard
20:09  enhering: with g++ the command line would be g++ -static fcs.cpp -Llib/ -lFCS -o fcs
20:09  KonaB1end: enhering:  well as bavarious pointed out, using g++ would link properly to libstdc++ but dynamically.
20:09  bavarious: at any rate, i have only crt1.o and crt3.o on my (snow leopard) system
20:09  KonaB1end: same here. even 10.5 only has crt1.o -- there is no crt0.0 that i can see
20:10  enhering: i can't find it here too
20:10  enhering: snow leopard.
20:10  bavarious: are you using stock gcc/g++, enhering?
20:10  bavarious: by stock i mean xcode's
20:10  KonaB1end: i get the same link error too. so i think he's stock
20:10  enhering: yep, bavarious
20:11  bavarious: hm, there's a libstdc++-static.a library in /usr/lib. what if you link against it?
20:11  enhering: I came from Linux. After a HP notebook failure I bought a MacBook Pro and now I'trying to port some code to MAC OSX.
20:11  bavarious: -lstdc++-static
20:11  enhering: I'll try it.
20:12  KonaB1end: curious as to why you want static libstdc++ anyways
20:13  enhering: I have 12 libraries and tried to link them statically
20:13  enhering: ar rcs lib/libFCS.a   lib/APSM.o lib/ACM.o lib/COM.o \
20:13  enhering:                    lib/CPM.o lib/DLM.o lib/FCM.o  \
20:13  enhering:                    lib/GPM.o lib/GYM.o lib/INM.o  \
20:13  enhering:                    lib/MCM.o lib/PRM.o lib/SCM.o  \
20:13  KonaB1end: ah. ok in that case you want -static to only apply to your libraries, and not the rest of "system" stuff
20:13  enhering:                    lib/fg_socket.o
20:13  enhering: yep.
20:14  enhering: can this be done?
20:14  KonaB1end: sure. cheap way would be just list the .a on command line like any other .o files
20:15  enhering: Can you give me an example, please, KonaBlend?
20:15  KonaB1end: g++ -o foo foo.o bar.o lib/libFCS.a
20:15  enhering: ok... I'll see if I understood.
20:17  enhering: g++ fcs.cpp -Llib/ -lFCS -o fcs
20:17  enhering: This worked...
20:18  enhering: Thanks a lot! Now I have to find the cause of a segmentation fault.
20:18  KonaB1end: ;)
20:18  enhering: Thanks for the help. I'll keep this channel on my list.
20:19  KonaB1end: btw some libraries (especially c++) are not designed to be linked statically because they make some poor static initialization assumptions
20:19  enhering: I'll remember that.
20:20  enhering: I lost a lot of time with this problem. There are many open questions about this on the forums.
20:20  KonaB1end: are you making an app? (eg. GUI) ?
20:22  enhering: not now. Now I'm working to interfeace the flightgear flight simulator with some electronic stuff.
20:22  enhering: but I'll soon start developing a ground station for the IPAD.
20:23  KonaB1end: ok but just to let you know, apps on osx allow for private frameworks (or even simple dynamic libraries) so you have an option to not use static if desired
20:25  enhering: I was going to try dinamically linking the libraries also but got stuck on statically linking first.
20:26  enhering: I did not want to go to the next step before understanding what was wrong with the first.
20:41  enhering: Can I ask another (possibly) simple question? Why do a segmentation fault happen when I instantiate a class like this: MCM mcm, and when I do it as a pointer like this: MCM * mcm, it works?
20:42  bavarious: does it segfault when you do mcm = new MCM?
20:43  enhering: Let me try... I cannot do that on the header file. I'll put that on the cpp.
20:43  KonaB1end: is your problematic instantiation in global/file scope? ie: before main() is run?
20:44  enhering: it was on the header file.
20:44  enhering: global scope
20:44  enhering: To do it as you said I'd first have to declare mcm as something.
20:45  KonaB1end: here's a simple test.
20:46  KonaB1end: disable your global instantiation if possible; then place MCM mcm in main() . see if it segfaults there.
20:46  enhering: ok.
20:48  KonaB1end: also can you confirm your first reported segfault did NOT have "main()" in it's call stack?
20:48  enhering: it segfaults on main also.
20:48  enhering: if I comment it, the program runs.
20:49  enhering: it also runs if I instantiate as a pointer to the class
20:49  enhering: MCM * mcm
20:49  KonaB1end: you mean MCM* mcm = new MCM() ?
20:50  KonaB1end: MCM* mcm; // this doesn't create an object
20:50  enhering: sorry. you are right. The problem is still in the declaration of mcm.
20:50  enhering: before instatiation.
20:51  KonaB1end: i'm lost ;)
20:51  enhering: I'll try again...
20:52  enhering: I saw in some docs that you can create a class and use it like MYCLASS myclass, without calling new to instantiate it.
20:54  KonaB1end: yes. and the lifetime of that object is it's scope. so if in main, easy to understand lifecycle.
20:54  KonaB1end: but if you have: MCM mcm; in file scope somewhere,
20:54  KonaB1end: that means it's constructed sometime before main() . and the problem then becomes, does it depend on some other global object to be constructed before it.
20:56  KonaB1end: is FCS an open source library?
20:57  enhering: not yet. But I can publish the code.
20:57  enhering: I just do not know if it should be done, as this will be used to control a UAV.
20:58  KonaB1end: no don't publish it if you're uncertain
20:58  enhering: I'm afraid of bad uses of it.
20:58  KonaB1end: anyways it's not for certain this is a static init issue.
20:58  KonaB1end: is this library and your test code known to work without segfault ?
--- Log closed Sun Oct 24 21:05:59 2010
--- Log opened Sun Oct 24 21:06:22 2010
21:06 --- Users 50 nicks [1 ops, 0 halfops, 0 voices, 49 normal]
21:06  KonaB1end: you need to tell osx to write core files on crash
21:06  KonaB1end: which shell are you using? bash or csh kind?
21:07  enhering: good question. I don not know which shell the Terminal icon invokes.. I'll try to discover.
21:07 --- Channel #macosxdev was synced in 96 seconds
21:07  enhering: bash
21:08  bavarious: echo $SHELL
21:08  KonaB1end: are you building from xcode, or from command-line ?
21:08  bavarious: KonaB1end: doesn't crashreporterprefs suffice to get the stack trace?
21:08  enhering: command line. XCode is too much entropy for me.
21:09  KonaB1end: i think 2 ways we can get it. use crashreportprefs or change limit to allow coredumps in your current shell
21:10  KonaB1end: yeah bavarious suggestion is easier.
21:10  KonaB1end: open /Developer/Applications/CrashReporter.app
21:11  KonaB1end: click on Developer. now you'll get a popup for even command-line crashes
21:12  KonaB1end: err i got path wrong.
21:12  KonaB1end: it's /Developer/Applications/Utilities/CrashReporterPrefs.app
21:13  enhering: yep.
21:13  enhering:  Found it
21:13  enhering: Changed to Developer
21:14  KonaB1end: now compile your code to segfault like it did the first time. ie: not using main()
21:14  KonaB1end: run it; should create a popup. click on report...
21:14  enhering: Opened!
21:14  KonaB1end: mouse-click inside the problem details, and command-a to select all. paste onto a site like pastie.org or somesuch
21:15  enhering: (I hope I'm not disturbing too much the channel.)
21:15  KonaB1end: i think it's fine. if not someone will yell at me
21:16  enhering: http://www.pastie.org/1245481
21:17  enhering: lots of information here.
21:17  KonaB1end: and that's with your main doing heap construction of object?
21:18  KonaB1end: it's almost certainly something to do with initializing your FCS library.
21:19  enhering: if I understood your question, I have MCM mcm; on main...
21:19  KonaB1end: does you lib require any init routines to be called before using it?
21:19  enhering: yep... Wait...
21:21  enhering: http://www.pastie.org/1245489
21:22  KonaB1end: no, what i mean is... some libraries require some function to be  called before you use it.
21:22  enhering: http://www.pastie.org/1245493
21:23  enhering: As much as I know the only parent code I need for MCM is APSM, which I pasted above.
21:24  bavarious: the problem seems to be in APSM::APSM()
21:24  bavarious: without seeing the constructor implementation, it's hard to tell
21:24  enhering: APSM includes a few system libraries, but standard ones.
21:24  bavarious: do you see any copy going on in APSM::APSM()?
21:25  enhering: http://www.pastie.org/1245503
21:26  bavarious: you've never allocated memory for common_dev_name O_o
21:26  KonaB1end: yeah common_dev_name is bogus
21:27  KonaB1end: and name too for that matter
21:27  enhering: ops...
21:27  enhering: silly mistake...
21:30  enhering: sorry... I thought sprintf would do that for me.
21:34  enhering: Now it works.
21:34  enhering: Thanks a lot for your kind patience!
21:34  KonaB1end: leave it to standard C to not include an allocating printf. gotta love it :P
21:38  enhering: What is the difference between declaring a class as a pointer or not? It only differs on the way you invoke methods and access properties or there is something else?
21:39  enhering: I mean, the difference between COM com and COM* com...
21:39  enhering: There are many examples using both forms.
21:40  bavarious: well, one difference is that COM com creates com on the stack whilst COM *com = new COM creates com in the heap
21:40  enhering: Ok. That makes sense.
21:40  bavarious: being on the stack, COM com is destroyed when its scope ends whilst the same is not (usually) true for heap objects
21:41  enhering: In the case of a microcontroller with 1kbyte of RAM that makes a big difference.
21:41  bavarious: also, there's generally more copying of stack objects unless you're careful and use references
21:42  enhering: ok
21:44  enhering: I'll meditate on that. This is an important concept.
21:44  enhering: Thanks again. If you need any help with physics I'll be happy to try to help.
--- Log closed Mon Oct 25 00:00:49 2010
