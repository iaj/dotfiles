--- Log opened Wed Nov 10 08:35:13 2010
08:35 --- Users 42 nicks [1 ops, 0 halfops, 0 voices, 41 normal]
08:37 --- Channel #macosxdev was synced in 116 seconds
--- Log closed Wed Nov 10 08:48:11 2010
--- Log opened Wed Nov 10 08:48:33 2010
08:48 --- Users 43 nicks [1 ops, 0 halfops, 0 voices, 42 normal]
08:50 --- Channel #macosxdev was synced in 119 seconds
09:00 --- ChanServ sets modes [#macosxdev +o Beelsebob]
09:02 --- ChanServ sets modes [#macosxdev +o Beelsebob]
09:06  tgunr: MariusAZ: I think it depends on what your compiling, is this some *nix package or in xcode?
09:07  MariusAZ: Not sure, I personally have never had any problems
09:08  MariusAZ: Someone was claiming in another channel though that other apps were trying to use a libjpg.dylib inside an app bundle
09:09  tgunr: they would have to track down the load order in the binary
09:20  tgunr_: very puzelling, downloading certificates onto my MacBook Pro I see the cert and a key in the chain when I add the cert, if I do the same cert on my MacPro all I get is the cert, no key
09:23  MariusAZ: Did you drag the key file in as well?
09:29  tgunr_: no, there was only a .cer file in the download
09:30  MariusAZ: Where's your key?
09:31  tgunr_: on the MBP it is under the twistdown of the cert in the keychain. on the MacPro there is no twistdown, only the cert
09:33 @Beelsebob: hah, bizare
09:33 @Beelsebob: I *think* I just had a crash in a GCD'd method bring down another process
09:34 * Beelsebob wonders if that's exploitable
09:35  MariusAZ: hmm
09:36  tgunr_: this is nuts, i can sign on the MBP but can't use the Application Loader 1.4 because it won't log in, Trying to transfer the code to the MacPro, where the Application Loader 1.4 does log in, I can't sign
09:51  tgunr_: either the dog or the cat is doing some serious crop dusting
09:51  tgunr_: my eyes are watering
10:05 --- ChanServ sets modes [#macosxdev +o Beelsebob]
--- Log closed Wed Nov 10 11:22:11 2010
--- Log opened Wed Nov 10 11:22:31 2010
11:22 --- Users 45 nicks [2 ops, 0 halfops, 0 voices, 43 normal]
11:24 --- Channel #macosxdev was synced in 127 seconds
11:41 --- iannic_ is now known as iannic
--- Log closed Wed Nov 10 12:10:11 2010
--- Log opened Wed Nov 10 12:10:38 2010
12:10 --- Users 50 nicks [2 ops, 0 halfops, 0 voices, 48 normal]
12:10  jubei:  any ideas as to what's up would be appreiated
12:12 --- Channel #macosxdev was synced in 124 seconds
12:25 @Beelsebob: jubei: uhhh… is this your code?
12:34  jubei: Beelsebob: that's uum.. the build error, not actual code
12:34  jubei: Beelsebob: oh yeah it's my code
12:34  jubei: Beelsebob: something seems to be wrong with my build environment
12:34  jubei: Beelsebob: and it seems like macports has a hand in it
12:34 @Beelsebob: well, I suggest looking at the first error
12:35 @Beelsebob: you're missing a header
12:35 @Beelsebob: quite an important one
12:35 @Beelsebob: you appear to be trying to use GCC 4.5 in Xcode
12:35 @Beelsebob: which is… unsuported
12:35 @Beelsebob: I'd suggest using clang (1.6 or later for C++)
12:35  jubei: Beelsebob: I'm not trying to but GCC somehow tries to in itself
12:35 @Beelsebob: it's not somehow
12:35 @Beelsebob: you #include TooN.h
12:36 @Beelsebob: TooN.h #includes iostream….
12:36  jubei: Beelsebob: yes i do
12:36 @Beelsebob: all the way down to that header that isn't there
12:36 @Beelsebob: which suggests your gcc4.5 build is broken
12:36 @Beelsebob: but as I said – gcc 4.5 isn't part of Xcode
12:36 @Beelsebob: nor is it supported by Xcode
12:36 @Beelsebob: so use a different compiler
12:36  jubei: Beelsebob: but like you said I shouldn't be trying to use it anyway
12:36 @Beelsebob: either gcc 4.2 or clang 1.6
12:36  jubei: Beelsebob: ok thank you will give it a shot.
12:36  jubei: thanks!
12:38  jubei: Beelsebob: changed back to GCC 4.2 and problem was fixed. Thank you :)
12:38 @Beelsebob: no probs
12:38 @Beelsebob: for reference – gcc is all but deprecated
12:38 @Beelsebob: I'd highly recommend moving to clang as soon as possible
12:39  jubei: Beelsebob: it is?
12:39 @Beelsebob: on OS X, yes
12:39  jubei: Beelsebob: well eventually I want to move to Linux so I guess to keep my code as portable as possible I'd better stick to gcc for now
12:40  jubei: but I'll take it under consideration thank you.
12:40 @Beelsebob: clang is very portable
12:40 @Beelsebob: it's known to work on linux, FreeBSD, windows, solaris, and probably a large number of other platforms
12:40 @Beelsebob: it's even used to *build* FreeBSD
12:41  jubei: ic
12:41 @Beelsebob: hell, clang is even more open than gcc
12:41 @Beelsebob: it's BSD licensed, not GPL
12:41 @Beelsebob: potential advantages of using clang
12:41 @Beelsebob: 1) much faster compilation
12:41 @Beelsebob: 2) faster output code (though ymmv with C++)
12:42 @Beelsebob: 3) much better integration with Xcode
12:42  jubei: seems to be slower in this benchmark
12:42  jubei: http://www.phoronix.com/scan.php?page=article&item=llvm_gcc_dragonegg28&num=7
12:42 @Beelsebob: 4) much better ability to integrate the compiler into tools in general
12:42 @Beelsebob: doesn't look slower to me there
12:42 @Beelsebob: looks like the fastest by far
12:43 @Beelsebob: well, by far other than the other LLVM compilers
12:43  jubei: lol I confused the colours
12:43  jubei: ic. Thanks for the advice, really appreciated.
12:48 --- kaio_ is now known as kaio
12:51  jubei: Beelsebob: if I select LLVM Compiler 1.5 is that Clang?
12:51 @Beelsebob: yes
12:51 @Beelsebob: a rather old version at this point though
12:52  jubei: yes but compiling a new one seems like too much work for now :/ and I'm afraid I'll break things :)
12:52 @Beelsebob: I take it you don't have the paid version of Xcode
12:52  jubei: Beelsebob: I uhhm... I jusstt.. errr... no i guess not.
12:52 @Beelsebob: (which provides 1.6 and a beta of 2.0)
12:55  jubei: Beelsebob: I'm only building small programs for now, so i think the performance gain will be unnoticeable but might build it at some point in the future.
13:17  jubei: Beelsebob: u do OpenGL dev on OSX?
13:17  jubei: I've just started so was struggling to get my environment up and running
13:18  jubei: just noticed you're on #openGL too
13:18 @Beelsebob: jubei: yes I do
13:19  jubei: Beelsebob: the reason I said I wanna move to linux is because osx doesn't support newer versions of opengl and I wanna try to use new features of the language when I get up to speed
13:19  jubei: of the API sry
13:19 @Beelsebob: you want to use stuff like tesselation?
13:19  jubei: no but I wanna look into high performance texturing and shading and might need to use blobs at some point
13:20 @Beelsebob: blobs?
13:20  jubei: 4.1 supposedly has the ability to let you use pre-compiled shaders
13:20 @Beelsebob: high performance texturing and shading can all be done in 2.0
13:20  jubei: or at least store them after you've compiled them or something similar
13:20 @Beelsebob: and I don't think 4.1 gives you precompiled shaders, no
13:21 @Beelsebob: and unless you have some *big* shaders you have no real need for them
13:21  jubei: anyway I'm still a noob so it will be a while before I actually get near that stuff. But anyway i'd like to be as close to the state of the art as possible.
13:22 @Beelsebob: well, it's likely that 10.7 will support at least 3.3, possibly even 4.1
13:22 @Beelsebob: and tbh, what's available in the state of the art is not much different to what's available in 2.1
13:23  jubei: u seen something official or is it just rumours?
13:23 @Beelsebob: you mostly *lose* the old fixed function features as you go up to new versions
13:23 @Beelsebob: the only things you really gain other than some interesting extensions being rolled in are tesselation shading and geometry shading
13:23 @Beelsebob: which 90% of hardware doesn't support atm
13:23  jubei: y
13:23 @Beelsebob: so you probably don't want to do that anyway
13:23 @Beelsebob: nothing official – it would just be sane
13:24 @Beelsebob: 10.6 already *mostly* supports 3.3
13:24  jubei: Beelsebob: what kind of work do you do with graphics?
13:24  jubei: if i may
13:24 @Beelsebob: iPhone games
13:24 @Beelsebob: working on http://www.battledungeon.com/ atm
13:25  jubei: I saw a demo from Quakecon where Carmack showed rage running on the iphone
13:25  jubei: 60ps with massive textures
13:25 @Beelsebob: uhhuh, pretty impressive getting mega texturing working
--- Log closed Wed Nov 10 14:28:14 2010
--- Log opened Wed Nov 10 14:28:36 2010
14:28 --- Users 50 nicks [2 ops, 0 halfops, 0 voices, 48 normal]
14:30 --- Channel #macosxdev was synced in 133 seconds
14:45  iSimon: Hi, I'm trying to build an application in C using gcc, but the paths to any extra libraries/Frameworks are absolute. (The application is not portable if the end user does not have the same libraries/frameworks installed)
14:46  bavarious: static linking?
14:47  bavarious: also, you can make paths relative by using @loader_path, @rpath, @executable_path
14:48  Psy: iSimon: preprocessor macros :)
14:48  iSimon: Not sure if I understand.
14:48  Psy: so don't try to make a "portable" app
14:48  bavarious: #1: what are these extra libraries/frameworks?
14:48  iSimon: SDL.
14:48  bavarious: #2: do you know what's static linking?
14:48  iSimon: Yes.
14:48  bavarious: is it not an option?
14:49  iSimon: Not sure.
14:49  bavarious: if sdl is statically linked to your executable, you only need to distribute the executable itself
14:49  Psy: iSimon: on Mac OS X, the generated .app bundle will contain the frameworks needed for the application for dynamic linking :)
14:49  Psy: that's how you solve your paths problem
14:50  iSimon: But the paths to the libraries are still absolute.
14:50  bavarious: iSimon: not if you use @loader_path, @rpath, @executable_path
14:50  Psy: iSimon: have you ever heard of -l or -L options ?
14:50  iSimon: XCode gives the following path: @executable_path/../Frameworks/SDL.framework/Versions/A/SDL
14:50  bavarious: that's not an absolute path
14:51  iSimon: Whereas GCC is using the following path:
14:51  iSimon: bavarious: exactly.
14:52  bavarious: ah, you're using command-line gcc and want the same behaviour as xcode
14:52  bavarious: is that right?
14:52  iSimon: Yes.
14:52  bavarious: you need to pass -rpath to ld
14:53  bavarious: either by invoking ld manually or using -Wl in gcc
14:53  bavarious: (iirc -Wl is the gcc option to pass parameters to ld, the linker)
14:53  bavarious: and -rpath is ld's option to specify search paths for dynamic libraries
14:53  bavarious: you can use @executable_path in an -rpath parameter
14:54  iSimon: Okay.
14:54  bavarious: i believe mikeash has a post on these dyld paths. let me check
14:55  bavarious: http://www.mikeash.com/pyblog/friday-qa-2009-11-06-linking-and-install-names.html
14:56  bavarious: you might want to read http://developer.apple.com/library/mac/#documentation/DeveloperTools/Conceptual/DynamicLibraries/ too
15:03  iSimon: I still don't understand how it works.
15:04  iSimon: Also, I added -Wl,-rpath,@executable_path but it doesn't seem to have made a difference.
15:06  bavarious: it should be -Wl,-rpath,@executable_path/whatever_directory_the_library_is_located_relative_to_executable_path
15:06  bavarious: you can also see how xcode builds both the libraries/frameworks and the executable to check the exact gcc/ld commands that are used by xcode
15:07  iSimon: So, it would be "-Wl,-rpath,@executable_path/../Frameworks/SDL.framework/Versions/A/"
15:07  bavarious: yup
15:08  bavarious: well
15:08  bavarious: not sure now
15:08  bavarious: what's the framework's library install_name?
15:09  iSimon: How would I find that out?
15:09  bavarious: otool -L
15:10  bavarious: in fact otool -D is better since it displays the install_name only
15:10  iSimon: Just SDL.
15:11  iSimon: I think it has worked.
15:13  bavarious: great
15:14  bavarious: you can use otool -l on your executable to see the load commands it's using
15:17  bavarious: hmm, there's a gui for otool: http://code.google.com/p/macdependency/
15:17  iSimon: Although it tries to load from the relative path, it's still trying to load the absolute one.
15:18  iSimon: So, I've got "@executable_path/../Frameworks/SDL.framework/Versions/A/ (offset 12)" Which is what I want.
15:19  iSimon: But still have "/usr/local/lib/libSDL-1.2.0.dylib (offset 24)"
15:19  Psy: iSimon: if it can't load the first one it will try to load the other one, how is that a problem ?!
15:19  iSimon: It's bailing out when it cannot load the first one.
15:20  iSimon: "Dyld Error Message: Library not loaded: /usr/local/lib/libSDL-1.2.0.dylib"
15:20  bavarious: and what's the .dylib name under @executable_path/../Frameworks/SDL.framework/Versions/A?
15:21  iSimon: Just SDL.
15:21  bavarious: what's the complete output of otool -L on your binary? please use a paste site
15:22  bavarious: no lisppaste bot here, unfortunately
15:22 * bavarious pokes Beelsebob 
15:22 * Beelsebob prods bavarious
15:22  bavarious: any chance of having lisppaste here? :D
15:22 @Beelsebob: good question
15:22  iSimon: http://pastebin.ca/1987250
15:23  iSimon: Wait, I think I'm missing the filename.
15:23  bavarious: the linker found libSDL under /usr/local/lib and used it
15:24 @Beelsebob: just asked them bavarious
15:24  bavarious: cheers, Beelsebob
15:24  bavarious: gcc always looks at /usr/lib and /usr/local/lib by default
15:24 @Beelsebob: this is probably a really dumb question… but how does one use fast enumeration to work through an array backwards?
15:26  Psy: for(id obj in [array reverseObjectEnumerator])
15:26  Psy: Beelsebob: but for that I recommend BLOOOOOOOOOCKS
15:26  Psy: it will be more efficient
15:26 @Beelsebob: it will? I thought fast enumeration was the most efficient method of itterating through structures
15:27  Psy: yeah through structures but here it's using an NSEnumerator
15:27  Psy: so I would think it'd be slower
15:27 @Beelsebob: ah, okay
15:27 @Beelsebob: so enumerateObjectsWithOptions:NSEnumerationReverse usingBlock:...
15:28  Psy: yeah
15:30  iSimon: How can I find out what arguments XCode is using.
15:30 @Beelsebob: iSimon: click the little pill at the end of the compile command in the build window
15:31  bavarious: iSimon: build results window, command-shift-B methinks
15:32  iSimon: Still not giving me the arguments.
15:33  Psy: Beelsebob: oh yeah it's way faster
15:33  bavarious: the little pill, as Beelsebob said. i think you need to select 'all results' or something similar, too
15:34  Psy: Beelsebob: for 10,000,000 objects, normal for: 0.0
15:34  Psy: 0.052149 seconds
15:34  iSimon: I see no little pill.
15:34  Psy: block enumeration: 0.066999
15:34  Psy: reverseObjectEnumerator iteration: 0.453583
15:34  bavarious: iSimon: open the build results window, click one of the lines (compile, link) and there should be a little pill to the right of the selected line
15:34 @Beelsebob: blimeh
15:34  Psy: reverse block: 0.089013
15:35 @Beelsebob: that's quite a significant difference
15:35  Psy: that's because NSEnumerator probably only use -nextObject
15:35 @Beelsebob: uhhuh
15:36  iSimon: Ah, found it. "By Step" has to be selected.
15:37  bavarious: oh, true. totally forgot about it
15:38  bavarious: does the little pill have an official name?
15:38  bavarious: Psy?
15:38  Psy: say what ?
15:38  bavarious: it's a disclosure pill :D
15:38  iSimon: "Expand all transcripts"
15:38  bavarious: the one that shows up in the build results window
15:43  iSimon: Hmm.
15:43  iSimon: The output doesn't mention anything about the @rpath or such.
15:44  bavarious: the linker output? hmm
15:45  iSimon: Rither.
15:45  iSimon: Either*
15:46  iSimon: Just has "-framework SDL" and that's it.
15:49  bavarious: and the only framework it finds is the one built for your app since /usr/local/lib doesn't contain a framework per se but just the library instead
15:50  iSimon: Huh?
15:50  bavarious: you have libSDL*.dylib under /usr/local/lib, right?
15:50  bavarious: but it's not a framework bundle, i.e., it doesn't have that structure SDL.framework/*
15:50  iSimon: XCode finds SDL.framework, gcc finds the one in /usr/local/libs
15:50  iSimon: bavarious: Yes.
15:51  bavarious: so when -framework is specified, gcc won't use what you have under /usr/local/lib because it's not a framework bundle
15:51  bavarious: try doing it yourself on the command line, too
15:51  bavarious: potentially with -F to specify the framework search path
15:52  iSimon: Ah, I see.
15:53  iSimon: I'm not bothering with -framework SDL, I'm just linking with the lib.
15:54  iSimon: Although, adding -framework SDL doesn't make a difference.
15:54  iSimon: and if I remove -lSDLmain, it cannot find the symbols.
16:15  Jacksson: hello! How in Mac OS X 10.5 i can specify explicitly my window controller as a xib-file owner? It seems like just setting it in Interface Builder does nothing, and when my application is launched, default NSWindow is being used...
16:15  Jacksson: on OS X 10.6 it works great
16:17  bavarious: it should work in both 10.5 and 10.6. what do you mean by default NSWindow?
16:19  Jacksson: i'm sorry, it is NSApplication, not NSWindow. In IB's window "MainMenu.xib (English)" - i dont know how is it called - there's "File's owner" entry. By default it is set to "NSApplication"
16:19  Jacksson: i changed it to MainWindowController (i have this class in my app)
16:20  Jacksson: but it seems, it still tries to use default value
16:21  Jacksson: searching forums i found that this setting is only "declarative", it doesnt really influence anything
16:21  bavarious: MainMenu.xib should be file-owned by NSApplication if you're using a single document interface without anything fancy
16:21  Jacksson: i just used to work on Snow Leopard, and now, having moved on Leopard, feel like i'm lost
16:21  Jacksson: yes, it's a single document interface!
16:22  bavarious: are you custom-loading MainMenu.xib? is it the main nib file?
16:22  Jacksson: it is MainMenu.xib, therefore its instantiated automatically my NSApplicationMain
16:23  bavarious: hence NSApplication should be its file's owner
16:23  Jacksson: bavarious: where should i place all the outlets and actions? i tried to add this class (MainWindowController - its not a real controler, it just has such a name) to the "MainMenu.xib (English)"  window in Interface Builder, but i can't do it!
16:25  Jacksson: i used to add them always in window controller class, and then i made that class as a nib file's owner - it was instantiated automatically
16:25  Jacksson: on Snow Leopard
16:26  bavarious: the file's owner is an object that exists *before* the nib is loaded
16:26  bavarious: if it's the main nib file, then the file's owner is NSApplication
16:26  bavarious: if it's another nib file, you can set the file's owner to whichever class you want so long as there exists an object of that class when the nib file is loaded
16:27  Jacksson: ok, i got it...
16:27  Jacksson: but how and where to add outlets and stuff? I have a class, inherited from NSObject, and it defines some outlets
16:27  bavarious: one possibility is instantiating an object of type MainWindowController inside your MainMenu.xib nib file
16:27  Jacksson: i tried in menu to select "Read Class File", but that class isnt being added to the IB's main window
16:28  bavarious: you need to instantiate it yourself, just like you do with application delegates
16:28  bavarious: use the blue cube 'object' available in IB's library
16:29  bavarious: another possibility is to have your window in a separate .nib file owned by an instance of MainWindowController. your application delegate can instantiate a MainWindowController object which would load the separate .nib file, and own it
16:30  Jacksson: thank you bavarious
16:30  Jacksson: that "blue cube object"
16:30  Jacksson: i used just to drop files right from my project, but in Leopard that trick doesnt work
16:30  Jacksson: thanks again :)
16:32  bavarious: cheers
--- Log closed Wed Nov 10 19:35:40 2010
--- Log opened Wed Nov 10 19:56:13 2010
19:56 --- Users 49 nicks [1 ops, 0 halfops, 0 voices, 48 normal]
19:58 --- Channel #macosxdev was synced in 149 seconds
--- Log closed Wed Nov 10 20:21:56 2010
--- Log opened Wed Nov 10 20:22:22 2010
20:22 --- Users 51 nicks [1 ops, 0 halfops, 0 voices, 50 normal]
20:22 --- Server: [gibson.freenode.net] [freenode-info] channel trolls and no channel staff around to help? please check with freenode support: http://freenode.net/faq.shtml#gettinghelp
20:24 --- Channel #macosxdev was synced in 132 seconds
--- Log closed Wed Nov 10 21:16:52 2010
--- Log opened Wed Nov 10 21:22:15 2010
21:22 --- Users 51 nicks [1 ops, 0 halfops, 0 voices, 50 normal]
21:24 --- Channel #macosxdev was synced in 129 seconds
21:30  Lyle42: jkyle: i answered you in macdev
21:45  jkyle: oh, I didn't see
22:15 --- ChanServ sets modes [#macosxdev +o Beelsebob]
--- Log closed Wed Nov 10 23:22:47 2010
--- Log opened Wed Nov 10 23:23:11 2010
23:23 --- Users 50 nicks [1 ops, 0 halfops, 0 voices, 49 normal]
23:23 --- Server: [pratchett.freenode.net] [freenode-info] channel trolls and no channel staff around to help? please check with freenode support: http://freenode.net/faq.shtml#gettinghelp
23:25 --- Channel #macosxdev was synced in 128 seconds
23:30 --- Enl is now known as Enlightened
--- Log closed Thu Nov 11 00:00:39 2010
