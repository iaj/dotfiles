servers = (
  { address = "eu.irc6.net"; chatnet = "IRCnet"; port = "6667"; },
  { 
    address = "irc.open-ircnet.net";
    chatnet = "IRCnet";
    port = "6667";
  },
  { address = "irc.efnet.org"; chatnet = "EFNet"; port = "6667"; },
  { 
    address = "irc.undernet.org";
    chatnet = "Undernet";
    port = "6667";
  },
  { address = "irc.dal.net"; chatnet = "DALnet"; port = "6667"; },
  { 
    address = "irc.quakenet.org";
    chatnet = "QuakeNet";
    port = "6667";
  },
  {
    address = "irc.oftc.net";
    chatnet = "OFTC";
    port = "6667";
    use_ssl = "no";
    ssl_verify = "no";
    autoconnect = "yes";
  },
  {
    address = "irc.gamesurge.net";
    chatnet = "GameSurge";
    port = "6667";
  },
  { address = "irc.webchat.org"; chatnet = "WebChat"; port = "6667"; },
  { address = "irc.rizon.net"; chatnet = "Rizon"; port = "6667"; },
  { address = "irc.link-net.org"; chatnet = "LinkNet"; port = "6667"; },
  { address = "silc.silcnet.org"; chatnet = "SILC"; port = "706"; },
  {
    address = "irc.freenode.net";
    chatnet = "FreeNode";
    port = "6667";
    use_ssl = "no";
    ssl_verify = "no";
    autoconnect = "yes";
  },
  {
    address = "im.bitlbee.org";
    chatnet = "bitlbee";
    port = "6667";
    use_ssl = "no";
    ssl_verify = "no";
    autoconnect = "yes";
  }
);

chatnets = {
  IRCnet = { type = "IRC"; };
  EFNet = { type = "IRC"; };
  Undernet = { type = "IRC"; };
  DALnet = { type = "IRC"; };
  QuakeNet = { type = "IRC"; };
  GameSurge = { type = "IRC"; };
  WebChat = { type = "IRC"; };
  Rizon = { type = "IRC"; };
  LinkNet = { type = "IRC"; };
  SILC = { type = "IRC"; };
  FreeNode = {
    type = "IRC";
    autosendcmd = "/^msg nickserv identify iaj n8walker;wait 5000";
  };
  bitlbee = {
    type = "IRC";
    autosendcmd = "/^msg &bitlbee identify n8walker;wait 2000";
  };
  OFTC = {
    type = "IRC";
    autosendcmd = "/^msg nickserv ident n8walker;wait 2000";
  };
};

channels = (
  { name = "#vim"; chatnet = "FreeNode"; autojoin = "yes"; },
  { name = "#zsh"; chatnet = "FreeNode"; autojoin = "yes"; },
  { name = "#quicksilver"; chatnet = "FreeNode"; autojoin = "yes"; },
  { name = "#vimperator"; chatnet = "FreeNode"; autojoin = "yes"; },
  { name = "##mac"; chatnet = "FreeNode"; autojoin = "yes"; },
  { name = "#bash"; chatnet = "FreeNode"; autojoin = "yes"; },
  { name = "#firefox"; chatnet = "FreeNode"; autojoin = "yes"; },
  { name = "#python"; chatnet = "FreeNode"; autojoin = "yes"; },
  { name = "#jquery"; chatnet = "FreeNode"; autojoin = "yes"; },
  { name = "#macosxdev"; chatnet = "FreeNode"; autojoin = "yes"; },
  { name = "#irssi"; chatnet = "FreeNode"; autojoin = "yes"; },
  { name = "#irssi_vim"; chatnet = "FreeNode"; autojoin = "yes"; },
  { name = "#sed"; chatnet = "FreeNode"; autojoin = "yes"; },
  { name = "#awk"; chatnet = "FreeNode"; autojoin = "yes"; },
  { name = "#pentadactyl"; chatnet = "OFTC"; autojoin = "yes"; }
);

aliases = {
  J = "join";
  WJOIN = "join -window";
  WQUERY = "query -window";
  LEAVE = "part";
  BYE = "quit";
  EXIT = "quit";
  SIGNOFF = "quit";
  DESCRIBE = "action";
  DATE = "time";
  HOST = "userhost";
  LAST = "lastlog";
  SAY = "msg *";
  WI = "whois";
  WII = "whois $0 $0";
  WW = "whowas";
  W = "who";
  N = "names";
  M = "msg";
  T = "topic";
  C = "clear";
  CL = "clear";
  K = "kick";
  KB = "kickban";
  KN = "knockout";
  BANS = "ban";
  B = "ban";
  MUB = "unban *";
  UB = "unban";
  IG = "ignore";
  UNIG = "unignore";
  SB = "scrollback";
  UMODE = "mode $N";
  WC = "window close";
  WN = "window new hide";
  SV = "say Irssi $J ($V) - http://irssi.org/";
  GOTO = "sb goto";
  CHAT = "dcc chat";
  RUN = "SCRIPT LOAD";
  CALC = "exec - if which bc &>/dev/null\\; then echo '$*' | bc | awk '{print \"$*=\"$$1}'\\; else echo bc was not found\\; fi";
  SBAR = "STATUSBAR";
  INVITELIST = "mode $C +I";
  Q = "QUERY";
  "MANUAL-WINDOWS" = "set use_status_window off;set autocreate_windows off;set autocreate_query_level none;set autoclose_windows off;set reuse_unused_windows on;save";
  EXEMPTLIST = "mode $C +e";
  ATAG = "WINDOW SERVER";
  UNSET = "set -clear";
  RESET = "set -default";
};

hilights = (
  # Highlight my nick (only at word boundaries and with possibly leading _s).
  { text = "\\biaj_*\\b"; nick = "yes"; word = "yes"; regexp = "yes"; },
  { text = "\\biaj`_*\\b"; nick = "yes"; word = "yes"; regexp = "yes"; },
  { text = "\\biaj\\b"; nick = "yes"; word = "yes"; regexp = "yes"; }
);

# Statusbar settings; only differences from default are set.
statusbar = {
  default = {
    # Default window statusbar with activity removed (moved to window_second)
    # and typing notice (bitlbee_typing_notice.pl script) and OTR status
    # (irssi OTR plugin) added.
    window = {
      items = {
        barstart = { priority = "100"; };
        time = { };
        user = { };
        vim_mode = { };
        vim_windows = { };
        typing_notice = { };
        #window = { };
        #window_empty = { };
        lag = { priority = "-1"; };
        more = { priority = "-1"; alignment = "right"; };
        #otr = { };
        join_notice = { };
        barend = { priority = "100"; alignment = "right"; };
      };
    };
    # New window statusbar which is displayed below the default one and
    # displays activity and additional information.
    #window_second = {
    #items = { 
    ##usercount = { }; 
    ##act = { }; 
    #window_switcher = { }; 
    #};
    #};
    prompt = {
      items = {
        uberprompt = { priority = "-1"; };
        input = { priority = "10"; };
      };
      position = "100";
    };
    awl_0 = {
      items = {
        barstart = { priority = "100"; };
        awl_0 = { };
        barend = { priority = "100"; alignment = "right"; };
      };
    };
    awl_1 = {
      items = {
        barstart = { priority = "100"; };
        awl_1 = { };
        barend = { priority = "100"; alignment = "right"; };
      };
    };
  };
};

settings = {
  "fe-text" = { actlist_sort = "refnum"; autostick_split_windows = "no"; };
  core = {
    real_name = "iaj";
    user_name = "iaj";
    nick = "iaj";
    timestamp_format = "%H:%M:%S";
  };
  "fe-common/core" = {
    theme = "xchat2";
    autocreate_own_query = "no";
    use_status_window = "no";
    use_msgs_window = "no";
    reuse_unused_windows = "yes";
    windows_auto_renumber = "no";
    autoclose_windows = "no";
    print_active_channel = "yes";
    #autolog_path = "~/.irssi/logs/$tag/%Y-%m-%d.log";
    autolog_path = "~/.irssi/logs/$tag/$0/%Y-%m-%d.log";
    autolog = "yes";
  };
  "perl/core/scripts" = {
    spellcheck_default_language = "de";
    spellcheck_languages = "Freenode/iaj/de_DE";
    spellcheck_enabled = "no";
    #vim_mode_cmd_seq = "j";
    vim_mode_debug = "no";
    awl_display_key = "$Q%K|%n$H$C$S";
    notify_targets = "growl";
  };
  "irc/core" = { lag_max_before_disconnect = "3min"; };
};
keyboard = (
  # Use Ctrl-C to erase the current line. I'm used to this from the shell.
  { key = "^C"; id = "erase_line"; data = ""; },
  # Also use Ctrl-G for this.
  { key = "^G"; id = "erase_line"; data = ""; },
  # Draw new trackbar with /mark (trackbar.pl script).
  { key = "^B"; id = "scroll_backward"; data = ""; },
  # Switch to the last active window. Useful if I was too fast with meta-a.
  { key = "meta-p"; id = "command"; data = "window last"; },
  { key = "meta-s"; id = "command"; data = "window last"; },
  # Use Ctrl-P/Ctrl-N as replacement for Up/Down arrow keys.
  { key = "^P"; id = "backward_history"; data = ""; },
  { key = "^N"; id = "forward_history"; data = ""; },
  # Switch to the next window with activity; uses ack.pl script. Thanks to
  # billnye for this script and his help in #irssi on Freenode (2009-06-22
  # 22:40).
  { key = "meta-a"; id = "command"; data = "ack"; },
  # Use my scroll.pl script to move to last trackbar. Very useful to continue
  # reading after I left the computer for a while.
  { key = "meta-b"; id = "command"; data = "scroll ^-+$"; },
  # XXX
  #{ key = "^R"; id = "command"; data = "history_search "; },
  #MISC movements
  { key = "meta-."; id = "command"; data = "window next"; },
  { key = "meta-,"; id = "command"; data = "window previous"; },
  { key = "meta-o"; id = "insert_text"; data = "/ws "; },
  { key = "^F"; id = "scroll_forward"; data = ""; },
  #{ key = "meta-w"; id = "command"; data = "wc"; }
  { key = "^6"; id = "command"; data = "window_last"; },
  { key = "^R"; id = "command"; data = "history_search_start "; }
);
logs = { 1 = { level = "ALL"; }; };
# vim: ft=config
ignores = ( { level = "JOINS PARTS QUITS"; } );
